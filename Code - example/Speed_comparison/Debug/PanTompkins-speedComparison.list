
PanTompkins-speedComparison.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2fc  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005bc  0800a440  0800a440  0001a440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a9fc  0800a9fc  0001a9fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800aa00  0800aa00  0001aa00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000002d8  20000004  0800aa04  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001dd4  200002e0  0800acdc  000202e0  2**3
                  ALLOC
  7 ._user_heap_stack 00000604  200020b4  0800acdc  000220b4  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000202dc  2**0
                  CONTENTS, READONLY
  9 .debug_info   0003e49f  00000000  00000000  0002030c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00005f9c  00000000  00000000  0005e7ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0005096d  00000000  00000000  00064747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000018b0  00000000  00000000  000b50b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00006de8  00000000  00000000  000b6968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000275ad  00000000  00000000  000bd750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003f364  00000000  00000000  000e4cfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e7cb8  00000000  00000000  00124061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0020bd19  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000673c  00000000  00000000  0020bd6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002e0 	.word	0x200002e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a424 	.word	0x0800a424

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002e4 	.word	0x200002e4
 800017c:	0800a424 	.word	0x0800a424

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_d2lz>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460d      	mov	r5, r1
 8000c42:	f7ff ff23 	bl	8000a8c <__aeabi_dcmplt>
 8000c46:	b928      	cbnz	r0, 8000c54 <__aeabi_d2lz+0x1c>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c50:	f000 b80a 	b.w	8000c68 <__aeabi_d2ulz>
 8000c54:	4620      	mov	r0, r4
 8000c56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5a:	f000 f805 	bl	8000c68 <__aeabi_d2ulz>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2ulz>:
 8000c68:	b5d0      	push	{r4, r6, r7, lr}
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__aeabi_d2ulz+0x34>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	f7ff fc99 	bl	80005a8 <__aeabi_dmul>
 8000c76:	f7ff ff6f 	bl	8000b58 <__aeabi_d2uiz>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	f7ff fc1a 	bl	80004b4 <__aeabi_ui2d>
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <__aeabi_d2ulz+0x38>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f7ff fc90 	bl	80005a8 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	4639      	mov	r1, r7
 8000c90:	f7ff fad2 	bl	8000238 <__aeabi_dsub>
 8000c94:	f7ff ff60 	bl	8000b58 <__aeabi_d2uiz>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c9c:	3df00000 	.word	0x3df00000
 8000ca0:	41f00000 	.word	0x41f00000

08000ca4 <PT_init>:
	and filter Buffers.

 *******************************************************************************/

void PT_init( void )
{
 8000ca4:	b570      	push	{r4, r5, r6, lr}
	/**************************************************
	Initialize Pan_Tompkins structure.
	**************************************************/

	memset(&PT_data, 0, sizeof(PT_data));
 8000ca6:	4d35      	ldr	r5, [pc, #212]	; (8000d7c <PT_init+0xd8>)
	}

	/**************************************************
	Initialize all static variables 
	**************************************************/
	Prev_val = Prev_Prev_val = 0;									// Place holders for peak detector in Integrated Sig
 8000ca8:	4e35      	ldr	r6, [pc, #212]	; (8000d80 <PT_init+0xdc>)
		PT_dptr->LP_buf[idex]		= 0;							//  LP filter buffer
 8000caa:	2400      	movs	r4, #0
	memset(&PT_data, 0, sizeof(PT_data));
 8000cac:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8000cb0:	4621      	mov	r1, r4
 8000cb2:	4628      	mov	r0, r5
 8000cb4:	f004 ff66 	bl	8005b84 <memset>
	PT_dptr->Recent_RR_M = PT_dptr->RR_M =  PT1000MS;
 8000cb8:	4b32      	ldr	r3, [pc, #200]	; (8000d84 <PT_init+0xe0>)
 8000cba:	626b      	str	r3, [r5, #36]	; 0x24
 8000cbc:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8000cc0:	4b31      	ldr	r3, [pc, #196]	; (8000d88 <PT_init+0xe4>)
 8000cc2:	8128      	strh	r0, [r5, #8]
		PT_dptr->HP_buf[idex]		= 0;							//  HP filter buffer
 8000cc4:	2240      	movs	r2, #64	; 0x40
 8000cc6:	4621      	mov	r1, r4
 8000cc8:	f105 0046 	add.w	r0, r5, #70	; 0x46
	PT_dptr->Recent_RR_M = PT_dptr->RR_M =  PT1000MS;
 8000ccc:	62ab      	str	r3, [r5, #40]	; 0x28
		PT_dptr->LP_buf[idex]		= 0;							//  LP filter buffer
 8000cce:	f8c5 402e 	str.w	r4, [r5, #46]	; 0x2e
 8000cd2:	f8c5 4032 	str.w	r4, [r5, #50]	; 0x32
 8000cd6:	f8c5 4036 	str.w	r4, [r5, #54]	; 0x36
 8000cda:	f8c5 403a 	str.w	r4, [r5, #58]	; 0x3a
 8000cde:	f8c5 403e 	str.w	r4, [r5, #62]	; 0x3e
 8000ce2:	f8c5 4042 	str.w	r4, [r5, #66]	; 0x42
		PT_dptr->HP_buf[idex]		= 0;							//  HP filter buffer
 8000ce6:	f004 ff4d 	bl	8005b84 <memset>
		PT_dptr->MVA_buf[idex]		= 0;							//  MVA filter buffer
 8000cea:	226c      	movs	r2, #108	; 0x6c
 8000cec:	4621      	mov	r1, r4
 8000cee:	f105 008e 	add.w	r0, r5, #142	; 0x8e
 8000cf2:	f004 ff47 	bl	8005b84 <memset>
	Prev_val = Prev_Prev_val = 0;									// Place holders for peak detector in Integrated Sig
 8000cf6:	4a25      	ldr	r2, [pc, #148]	; (8000d8c <PT_init+0xe8>)
	Prev_valBP = Prev_Prev_valBP = Best_PeakBP = 0;					// Place holders for peak detector in BP signal
 8000cf8:	4925      	ldr	r1, [pc, #148]	; (8000d90 <PT_init+0xec>)
	Prev_val = Prev_Prev_val = 0;									// Place holders for peak detector in Integrated Sig
 8000cfa:	8014      	strh	r4, [r2, #0]
	Prev_valBP = Prev_Prev_valBP = Best_PeakBP = 0;					// Place holders for peak detector in BP signal
 8000cfc:	4a25      	ldr	r2, [pc, #148]	; (8000d94 <PT_init+0xf0>)
			PT_dptr->RR_AVRG2_buf[idex] = PT1000MS;					//  Normal	and extreme RR buffers
 8000cfe:	4b26      	ldr	r3, [pc, #152]	; (8000d98 <PT_init+0xf4>)
	Prev_valBP = Prev_Prev_valBP = Best_PeakBP = 0;					// Place holders for peak detector in BP signal
 8000d00:	800c      	strh	r4, [r1, #0]
 8000d02:	8014      	strh	r4, [r2, #0]
	Prev_valDR = Prev_Prev_valDR = Best_PeakDR = Old_PeakDR = 0;	// Place holders for peak detector in Derivative signal (Used for T-wave discrimination)
 8000d04:	4925      	ldr	r1, [pc, #148]	; (8000d9c <PT_init+0xf8>)
 8000d06:	4a26      	ldr	r2, [pc, #152]	; (8000da0 <PT_init+0xfc>)
			PT_dptr->RR_AVRG2_buf[idex] = PT1000MS;					//  Normal	and extreme RR buffers
 8000d08:	f8c5 310a 	str.w	r3, [r5, #266]	; 0x10a
		PT_dptr->RR_AVRG1_buf[idex] = 
 8000d0c:	f8c5 30fa 	str.w	r3, [r5, #250]	; 0xfa
			PT_dptr->RR_AVRG2_buf[idex] = PT1000MS;					//  Normal	and extreme RR buffers
 8000d10:	f8c5 310e 	str.w	r3, [r5, #270]	; 0x10e
		PT_dptr->RR_AVRG1_buf[idex] = 
 8000d14:	f8c5 30fe 	str.w	r3, [r5, #254]	; 0xfe
			PT_dptr->RR_AVRG2_buf[idex] = PT1000MS;					//  Normal	and extreme RR buffers
 8000d18:	f8c5 3112 	str.w	r3, [r5, #274]	; 0x112
		PT_dptr->RR_AVRG1_buf[idex] = 
 8000d1c:	f8c5 3102 	str.w	r3, [r5, #258]	; 0x102
			PT_dptr->RR_AVRG2_buf[idex] = PT1000MS;					//  Normal	and extreme RR buffers
 8000d20:	f8c5 3116 	str.w	r3, [r5, #278]	; 0x116
		PT_dptr->RR_AVRG1_buf[idex] = 
 8000d24:	f8c5 3106 	str.w	r3, [r5, #262]	; 0x106
	Prev_valDR = Prev_Prev_valDR = Best_PeakDR = Old_PeakDR = 0;	// Place holders for peak detector in Derivative signal (Used for T-wave discrimination)
 8000d28:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <PT_init+0x100>)
 8000d2a:	800c      	strh	r4, [r1, #0]
 8000d2c:	8014      	strh	r4, [r2, #0]
	Prev_valBP = Prev_Prev_valBP = Best_PeakBP = 0;					// Place holders for peak detector in BP signal
 8000d2e:	481e      	ldr	r0, [pc, #120]	; (8000da8 <PT_init+0x104>)
	Count_SinceRR = 0;												// Nr of samples since last qrs peak
 8000d30:	491e      	ldr	r1, [pc, #120]	; (8000dac <PT_init+0x108>)
	RR1_p = RR2_p = 0;												// Pointers to RR average 1 and 2 resepectively
	MV_sum = 0;														// sum for moving average filter
 8000d32:	4a1f      	ldr	r2, [pc, #124]	; (8000db0 <PT_init+0x10c>)
	Prev_valDR = Prev_Prev_valDR = Best_PeakDR = Old_PeakDR = 0;	// Place holders for peak detector in Derivative signal (Used for T-wave discrimination)
 8000d34:	801c      	strh	r4, [r3, #0]
	RR1_p = RR2_p = 0;												// Pointers to RR average 1 and 2 resepectively
 8000d36:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <PT_init+0x110>)
	Prev_valBP = Prev_Prev_valBP = Best_PeakBP = 0;					// Place holders for peak detector in BP signal
 8000d38:	8004      	strh	r4, [r0, #0]
	Count_SinceRR = 0;												// Nr of samples since last qrs peak
 8000d3a:	800c      	strh	r4, [r1, #0]
	MV_sum = 0;														// sum for moving average filter
 8000d3c:	8014      	strh	r4, [r2, #0]
	Prev_valDR = Prev_Prev_valDR = Best_PeakDR = Old_PeakDR = 0;	// Place holders for peak detector in Derivative signal (Used for T-wave discrimination)
 8000d3e:	481e      	ldr	r0, [pc, #120]	; (8000db8 <PT_init+0x114>)
	RR1_sum = RR2_sum = PT1000MS << 3;								// Sum of RR1 and RR2 buffers
 8000d40:	491e      	ldr	r1, [pc, #120]	; (8000dbc <PT_init+0x118>)
 8000d42:	4a1f      	ldr	r2, [pc, #124]	; (8000dc0 <PT_init+0x11c>)
	RR1_p = RR2_p = 0;												// Pointers to RR average 1 and 2 resepectively
 8000d44:	801c      	strh	r4, [r3, #0]
	RR1_sum = RR2_sum = PT1000MS << 3;								// Sum of RR1 and RR2 buffers
 8000d46:	f44f 6334 	mov.w	r3, #2880	; 0xb40
	Prev_valDR = Prev_Prev_valDR = Best_PeakDR = Old_PeakDR = 0;	// Place holders for peak detector in Derivative signal (Used for T-wave discrimination)
 8000d4a:	8004      	strh	r4, [r0, #0]
	RR1_sum = RR2_sum = PT1000MS << 3;								// Sum of RR1 and RR2 buffers
 8000d4c:	800b      	strh	r3, [r1, #0]
 8000d4e:	8013      	strh	r3, [r2, #0]
	RR1_p = RR2_p = 0;												// Pointers to RR average 1 and 2 resepectively
 8000d50:	481c      	ldr	r0, [pc, #112]	; (8000dc4 <PT_init+0x120>)
	BlankTimeCnt = 0;												// Counter for blank-time.
	SBcntI = 0;														// For searchback index in Integ Signal
 8000d52:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <PT_init+0x124>)
	RR1_p = RR2_p = 0;												// Pointers to RR average 1 and 2 resepectively
 8000d54:	8004      	strh	r4, [r0, #0]
	SBcntI = 0;														// For searchback index in Integ Signal
 8000d56:	801c      	strh	r4, [r3, #0]
	BlankTimeCnt = 0;												// Counter for blank-time.
 8000d58:	481c      	ldr	r0, [pc, #112]	; (8000dcc <PT_init+0x128>)
	SB_peakI = 0;													// For searchback in Integ sig
 8000d5a:	491d      	ldr	r1, [pc, #116]	; (8000dd0 <PT_init+0x12c>)
	SB_peakBP = SB_peakDR = 0;										// For searchback peak holders in BP and slope signal
 8000d5c:	4a1d      	ldr	r2, [pc, #116]	; (8000dd4 <PT_init+0x130>)
	st_mx_pk = 0;													// Used in learning phase 1 to estimate thresholds
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <PT_init+0x134>)
	BlankTimeCnt = 0;												// Counter for blank-time.
 8000d60:	8004      	strh	r4, [r0, #0]
	SB_peakI = 0;													// For searchback in Integ sig
 8000d62:	800c      	strh	r4, [r1, #0]
	SB_peakBP = SB_peakDR = 0;										// For searchback peak holders in BP and slope signal
 8000d64:	8014      	strh	r4, [r2, #0]
	st_mx_pk = 0;													// Used in learning phase 1 to estimate thresholds
 8000d66:	801c      	strh	r4, [r3, #0]
	SB_peakBP = SB_peakDR = 0;										// For searchback peak holders in BP and slope signal
 8000d68:	481c      	ldr	r0, [pc, #112]	; (8000ddc <PT_init+0x138>)
	y_h = 0;														// recusrively used in HP filter
 8000d6a:	491d      	ldr	r1, [pc, #116]	; (8000de0 <PT_init+0x13c>)

#if (FILTER_FORM == 2)
	LP_y_new = LP_y_old = 0;										// Parameters for DirectForm || LP filter
 8000d6c:	4a1d      	ldr	r2, [pc, #116]	; (8000de4 <PT_init+0x140>)
 8000d6e:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <PT_init+0x144>)
	Prev_val = Prev_Prev_val = 0;									// Place holders for peak detector in Integrated Sig
 8000d70:	8034      	strh	r4, [r6, #0]
	SB_peakBP = SB_peakDR = 0;										// For searchback peak holders in BP and slope signal
 8000d72:	8004      	strh	r4, [r0, #0]
	y_h = 0;														// recusrively used in HP filter
 8000d74:	800c      	strh	r4, [r1, #0]
	LP_y_new = LP_y_old = 0;										// Parameters for DirectForm || LP filter
 8000d76:	8014      	strh	r4, [r2, #0]
 8000d78:	801c      	strh	r4, [r3, #0]
#endif
}
 8000d7a:	bd70      	pop	{r4, r5, r6, pc}
 8000d7c:	2000030c 	.word	0x2000030c
 8000d80:	2000042c 	.word	0x2000042c
 8000d84:	014c0168 	.word	0x014c0168
 8000d88:	025801a2 	.word	0x025801a2
 8000d8c:	20000426 	.word	0x20000426
 8000d90:	200002fc 	.word	0x200002fc
 8000d94:	2000042e 	.word	0x2000042e
 8000d98:	01680168 	.word	0x01680168
 8000d9c:	2000030a 	.word	0x2000030a
 8000da0:	20000430 	.word	0x20000430
 8000da4:	200002fe 	.word	0x200002fe
 8000da8:	20000428 	.word	0x20000428
 8000dac:	20000302 	.word	0x20000302
 8000db0:	20000308 	.word	0x20000308
 8000db4:	20000436 	.word	0x20000436
 8000db8:	2000042a 	.word	0x2000042a
 8000dbc:	20000438 	.word	0x20000438
 8000dc0:	20000434 	.word	0x20000434
 8000dc4:	20000432 	.word	0x20000432
 8000dc8:	20000440 	.word	0x20000440
 8000dcc:	20000300 	.word	0x20000300
 8000dd0:	2000043e 	.word	0x2000043e
 8000dd4:	2000043c 	.word	0x2000043c
 8000dd8:	20000442 	.word	0x20000442
 8000ddc:	2000043a 	.word	0x2000043a
 8000de0:	20000444 	.word	0x20000444
 8000de4:	20000306 	.word	0x20000306
 8000de8:	20000304 	.word	0x20000304

08000dec <arm_PT_init>:
		movingAverageBufferIndex = 0;
	}
}

void arm_PT_init()
{
 8000dec:	b510      	push	{r4, lr}
 8000dee:	b082      	sub	sp, #8
	//Initiate filter function
	arm_fir_init_f32(&Derivative, NUM_DERIVATIVE_TAPS, (float32_t *)&firDerivativeCoefficients[0], &firStateF32[0], BLOCK_SIZE);
 8000df0:	2401      	movs	r4, #1
 8000df2:	9400      	str	r4, [sp, #0]
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <arm_PT_init+0x50>)
 8000df6:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <arm_PT_init+0x54>)
 8000df8:	4812      	ldr	r0, [pc, #72]	; (8000e44 <arm_PT_init+0x58>)
 8000dfa:	2105      	movs	r1, #5
 8000dfc:	f004 fb44 	bl	8005488 <arm_fir_init_f32>
	arm_biquad_cascade_df1_init_f32 (&highPassFilter,1, (float32_t *)&iirHighPassFilterCoefficients[0], &highPassFilterStateF32[0]);
 8000e00:	4621      	mov	r1, r4
 8000e02:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <arm_PT_init+0x5c>)
 8000e04:	4a11      	ldr	r2, [pc, #68]	; (8000e4c <arm_PT_init+0x60>)
 8000e06:	4812      	ldr	r0, [pc, #72]	; (8000e50 <arm_PT_init+0x64>)
 8000e08:	f004 fb32 	bl	8005470 <arm_biquad_cascade_df1_init_f32>
	arm_biquad_cascade_df1_init_f32 (&lowPassFilter,1, (float32_t *)&iirLowPassFilterCoefficients[0], &lowPassFilterStateF32[0]);
 8000e0c:	4621      	mov	r1, r4
 8000e0e:	4a11      	ldr	r2, [pc, #68]	; (8000e54 <arm_PT_init+0x68>)
 8000e10:	4811      	ldr	r0, [pc, #68]	; (8000e58 <arm_PT_init+0x6c>)
 8000e12:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <arm_PT_init+0x70>)
	//Reset buffors
	for (int i = 0; i<NUM_DERIVATIVE_TAPS_ARRAY_SIZE; i++)
	{
		derivativeBuffer[i]=0;
	}
	movingAverageBufferIndex=0;
 8000e14:	4c12      	ldr	r4, [pc, #72]	; (8000e60 <arm_PT_init+0x74>)
	arm_biquad_cascade_df1_init_f32 (&lowPassFilter,1, (float32_t *)&iirLowPassFilterCoefficients[0], &lowPassFilterStateF32[0]);
 8000e16:	f004 fb2b 	bl	8005470 <arm_biquad_cascade_df1_init_f32>
		derivativeBuffer[i]=0;
 8000e1a:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <arm_PT_init+0x78>)
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	6018      	str	r0, [r3, #0]
 8000e20:	6058      	str	r0, [r3, #4]
 8000e22:	6098      	str	r0, [r3, #8]
 8000e24:	60d8      	str	r0, [r3, #12]
 8000e26:	6118      	str	r0, [r3, #16]
	for (int i = 0; i<MovingAverageSampleCount; i++)
	{
		movingAverageBuffer[i] = 0;
 8000e28:	480f      	ldr	r0, [pc, #60]	; (8000e68 <arm_PT_init+0x7c>)
	movingAverageBufferIndex=0;
 8000e2a:	2100      	movs	r1, #0
		movingAverageBuffer[i] = 0;
 8000e2c:	22d8      	movs	r2, #216	; 0xd8
	movingAverageBufferIndex=0;
 8000e2e:	6021      	str	r1, [r4, #0]
	}
}
 8000e30:	b002      	add	sp, #8
 8000e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		movingAverageBuffer[i] = 0;
 8000e36:	f004 bea5 	b.w	8005b84 <memset>
 8000e3a:	bf00      	nop
 8000e3c:	20000468 	.word	0x20000468
 8000e40:	0800a450 	.word	0x0800a450
 8000e44:	20000448 	.word	0x20000448
 8000e48:	20000488 	.word	0x20000488
 8000e4c:	0800a464 	.word	0x0800a464
 8000e50:	2000047c 	.word	0x2000047c
 8000e54:	0800a478 	.word	0x0800a478
 8000e58:	20000498 	.word	0x20000498
 8000e5c:	200004a4 	.word	0x200004a4
 8000e60:	2000058c 	.word	0x2000058c
 8000e64:	20000454 	.word	0x20000454
 8000e68:	200004b4 	.word	0x200004b4

08000e6c <Rafael_init>:
	// qrs tells whether there was a detection or not.
	// regular tells whether the heart pace is regular or not.
	// prevRegular tells whether the heart beat was regular before the newest RR-interval was calculated.
	bool qrs, regular = true, prevRegular;
void Rafael_init()
{
 8000e6c:	b538      	push	{r3, r4, r5, lr}


	// Initializing the RR averages
	for (i = 0; i < 8; i++)
    {
        rr1[i] = 0;
 8000e6e:	2220      	movs	r2, #32
 8000e70:	2100      	movs	r1, #0
 8000e72:	481a      	ldr	r0, [pc, #104]	; (8000edc <Rafael_init+0x70>)
        rr2[i] = 0;
    }
	 rrlow = 0;
 8000e74:	4d1a      	ldr	r5, [pc, #104]	; (8000ee0 <Rafael_init+0x74>)
 8000e76:	4c1b      	ldr	r4, [pc, #108]	; (8000ee4 <Rafael_init+0x78>)
        rr1[i] = 0;
 8000e78:	f004 fe84 	bl	8005b84 <memset>
        rr2[i] = 0;
 8000e7c:	2220      	movs	r2, #32
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4819      	ldr	r0, [pc, #100]	; (8000ee8 <Rafael_init+0x7c>)
 8000e82:	f004 fe7f 	bl	8005b84 <memset>
	 rrhigh = 0;
 8000e86:	4919      	ldr	r1, [pc, #100]	; (8000eec <Rafael_init+0x80>)
	 rrmiss = 0;
	 regular = true;
 8000e88:	4a19      	ldr	r2, [pc, #100]	; (8000ef0 <Rafael_init+0x84>)
	 rrmiss = 0;
 8000e8a:	481a      	ldr	r0, [pc, #104]	; (8000ef4 <Rafael_init+0x88>)
	 rrlow = 0;
 8000e8c:	2300      	movs	r3, #0
	 regular = true;
 8000e8e:	f04f 0c01 	mov.w	ip, #1
	 rrhigh = 0;
 8000e92:	600b      	str	r3, [r1, #0]
	 regular = true;
 8000e94:	f882 c000 	strb.w	ip, [r2]
	 sample = 0;
 8000e98:	4917      	ldr	r1, [pc, #92]	; (8000ef8 <Rafael_init+0x8c>)
	 lastQRS = 0;
	 lastSlope = 0;
 8000e9a:	4a18      	ldr	r2, [pc, #96]	; (8000efc <Rafael_init+0x90>)
	 rrlow = 0;
 8000e9c:	602b      	str	r3, [r5, #0]
 8000e9e:	2508      	movs	r5, #8
 8000ea0:	6025      	str	r5, [r4, #0]
	 rrmiss = 0;
 8000ea2:	6003      	str	r3, [r0, #0]
	 sample = 0;
 8000ea4:	600b      	str	r3, [r1, #0]
	 lastSlope = 0;
 8000ea6:	6013      	str	r3, [r2, #0]
	 lastQRS = 0;
 8000ea8:	4c15      	ldr	r4, [pc, #84]	; (8000f00 <Rafael_init+0x94>)
	 currentSlope = 0;
 8000eaa:	4816      	ldr	r0, [pc, #88]	; (8000f04 <Rafael_init+0x98>)
	 peak_i = 0;
 8000eac:	4916      	ldr	r1, [pc, #88]	; (8000f08 <Rafael_init+0x9c>)
	 peak_f = 0;
	 threshold_i1 = 0;
 8000eae:	4a17      	ldr	r2, [pc, #92]	; (8000f0c <Rafael_init+0xa0>)
	 lastQRS = 0;
 8000eb0:	6023      	str	r3, [r4, #0]
	 currentSlope = 0;
 8000eb2:	6003      	str	r3, [r0, #0]
	 peak_i = 0;
 8000eb4:	800b      	strh	r3, [r1, #0]
	 threshold_i1 = 0;
 8000eb6:	8013      	strh	r3, [r2, #0]
	 peak_f = 0;
 8000eb8:	4c15      	ldr	r4, [pc, #84]	; (8000f10 <Rafael_init+0xa4>)
	 threshold_i2 = 0;
 8000eba:	4816      	ldr	r0, [pc, #88]	; (8000f14 <Rafael_init+0xa8>)
	 threshold_f1 = 0;
 8000ebc:	4916      	ldr	r1, [pc, #88]	; (8000f18 <Rafael_init+0xac>)
	 threshold_f2 = 0;
	 spk_i = 0;
 8000ebe:	4a17      	ldr	r2, [pc, #92]	; (8000f1c <Rafael_init+0xb0>)
	 peak_f = 0;
 8000ec0:	8023      	strh	r3, [r4, #0]
	 threshold_i2 = 0;
 8000ec2:	8003      	strh	r3, [r0, #0]
	 threshold_f1 = 0;
 8000ec4:	800b      	strh	r3, [r1, #0]
	 spk_i = 0;
 8000ec6:	8013      	strh	r3, [r2, #0]
	 threshold_f2 = 0;
 8000ec8:	4c15      	ldr	r4, [pc, #84]	; (8000f20 <Rafael_init+0xb4>)
	 spk_f = 0;
 8000eca:	4816      	ldr	r0, [pc, #88]	; (8000f24 <Rafael_init+0xb8>)
	 npk_i = 0;
 8000ecc:	4916      	ldr	r1, [pc, #88]	; (8000f28 <Rafael_init+0xbc>)
	 npk_f = 0;
 8000ece:	4a17      	ldr	r2, [pc, #92]	; (8000f2c <Rafael_init+0xc0>)
	 threshold_f2 = 0;
 8000ed0:	8023      	strh	r3, [r4, #0]
	 spk_f = 0;
 8000ed2:	8003      	strh	r3, [r0, #0]
	 npk_i = 0;
 8000ed4:	800b      	strh	r3, [r1, #0]
	 npk_f = 0;
 8000ed6:	8013      	strh	r3, [r2, #0]
}
 8000ed8:	bd38      	pop	{r3, r4, r5, pc}
 8000eda:	bf00      	nop
 8000edc:	200005a8 	.word	0x200005a8
 8000ee0:	200005ec 	.word	0x200005ec
 8000ee4:	20000594 	.word	0x20000594
 8000ee8:	200005c8 	.word	0x200005c8
 8000eec:	200005e8 	.word	0x200005e8
 8000ef0:	20000004 	.word	0x20000004
 8000ef4:	200005f0 	.word	0x200005f0
 8000ef8:	200005f4 	.word	0x200005f4
 8000efc:	2000059c 	.word	0x2000059c
 8000f00:	20000598 	.word	0x20000598
 8000f04:	20000590 	.word	0x20000590
 8000f08:	200005a6 	.word	0x200005a6
 8000f0c:	20000600 	.word	0x20000600
 8000f10:	200005a4 	.word	0x200005a4
 8000f14:	20000602 	.word	0x20000602
 8000f18:	200005fc 	.word	0x200005fc
 8000f1c:	200005fa 	.word	0x200005fa
 8000f20:	200005fe 	.word	0x200005fe
 8000f24:	200005f8 	.word	0x200005f8
 8000f28:	200005a2 	.word	0x200005a2
 8000f2c:	200005a0 	.word	0x200005a0

08000f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f30:	b510      	push	{r4, lr}
 8000f32:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f34:	2228      	movs	r2, #40	; 0x28
 8000f36:	2100      	movs	r1, #0
 8000f38:	a80b      	add	r0, sp, #44	; 0x2c
 8000f3a:	f004 fe23 	bl	8005b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f3e:	2300      	movs	r3, #0
 8000f40:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000f44:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8000f48:	e9cd 3306 	strd	r3, r3, [sp, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f4c:	492a      	ldr	r1, [pc, #168]	; (8000ff8 <SystemClock_Config+0xc8>)
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f4e:	9308      	str	r3, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f50:	680a      	ldr	r2, [r1, #0]
 8000f52:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f5a:	600a      	str	r2, [r1, #0]
 8000f5c:	680a      	ldr	r2, [r1, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8000f5e:	2026      	movs	r0, #38	; 0x26
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000f60:	f44f 7180 	mov.w	r1, #256	; 0x100
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8000f64:	900a      	str	r0, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000f66:	2000      	movs	r0, #0
 8000f68:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f6c:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f70:	2040      	movs	r0, #64	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f72:	2160      	movs	r1, #96	; 0x60
 8000f74:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f78:	9201      	str	r2, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f7a:	2102      	movs	r1, #2
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f7c:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f7e:	900e      	str	r0, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000f80:	2020      	movs	r0, #32
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f82:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000f86:	e9cd 3017 	strd	r3, r0, [sp, #92]	; 0x5c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f8a:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f8c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f90:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f98:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f9a:	e9cd 321a 	strd	r3, r2, [sp, #104]	; 0x68
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f9e:	9c01      	ldr	r4, [sp, #4]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa0:	9119      	str	r1, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa2:	f001 fc97 	bl	80028d4 <HAL_RCC_OscConfig>
 8000fa6:	b108      	cbz	r0, 8000fac <SystemClock_Config+0x7c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000faa:	e7fe      	b.n	8000faa <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000fac:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8000fe0 <SystemClock_Config+0xb0>
 8000fb0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000fb4:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8000fe8 <SystemClock_Config+0xb8>
 8000fb8:	ed8d 7b04 	vstr	d7, [sp, #16]
 8000fbc:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8000ff0 <SystemClock_Config+0xc0>
 8000fc0:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fc2:	2103      	movs	r1, #3
 8000fc4:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000fc6:	ed8d 7b06 	vstr	d7, [sp, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000fca:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fcc:	f001 ffdc 	bl	8002f88 <HAL_RCC_ClockConfig>
 8000fd0:	b108      	cbz	r0, 8000fd6 <SystemClock_Config+0xa6>
 8000fd2:	b672      	cpsid	i
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <SystemClock_Config+0xa4>
  HAL_RCCEx_EnableMSIPLLMode();
 8000fd6:	f002 fb4d 	bl	8003674 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000fda:	b01c      	add	sp, #112	; 0x70
 8000fdc:	bd10      	pop	{r4, pc}
 8000fde:	bf00      	nop
 8000fe0:	0000006f 	.word	0x0000006f
 8000fe4:	00000003 	.word	0x00000003
	...
 8000ff4:	00000080 	.word	0x00000080
 8000ff8:	58000400 	.word	0x58000400

08000ffc <PeriphCommonClock_Config>:
{
 8000ffc:	b500      	push	{lr}
 8000ffe:	b095      	sub	sp, #84	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001000:	2248      	movs	r2, #72	; 0x48
 8001002:	2100      	movs	r1, #0
 8001004:	a801      	add	r0, sp, #4
 8001006:	f004 fdbd 	bl	8005b84 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800100a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800100e:	2310      	movs	r3, #16
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001010:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8001012:	9200      	str	r2, [sp, #0]
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001014:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001016:	f002 f93d 	bl	8003294 <HAL_RCCEx_PeriphCLKConfig>
 800101a:	b108      	cbz	r0, 8001020 <PeriphCommonClock_Config+0x24>
 800101c:	b672      	cpsid	i
  while (1)
 800101e:	e7fe      	b.n	800101e <PeriphCommonClock_Config+0x22>
}
 8001020:	b015      	add	sp, #84	; 0x54
 8001022:	f85d fb04 	ldr.w	pc, [sp], #4
 8001026:	bf00      	nop

08001028 <main>:
{
 8001028:	b500      	push	{lr}
 800102a:	b083      	sub	sp, #12
  HAL_Init();
 800102c:	f000 f9d8 	bl	80013e0 <HAL_Init>
  SystemClock_Config();
 8001030:	f7ff ff7e 	bl	8000f30 <SystemClock_Config>
  PeriphCommonClock_Config();
 8001034:	f7ff ffe2 	bl	8000ffc <PeriphCommonClock_Config>
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  hi2c1.Instance = I2C1;
 800103c:	4c29      	ldr	r4, [pc, #164]	; (80010e4 <main+0xbc>)
 800103e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001040:	f042 0202 	orr.w	r2, r2, #2
 8001044:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001046:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001048:	f002 0202 	and.w	r2, r2, #2
 800104c:	9200      	str	r2, [sp, #0]
  (void)tmpreg;
 800104e:	9a00      	ldr	r2, [sp, #0]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001050:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001052:	f042 0201 	orr.w	r2, r2, #1
 8001056:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001060:	9b01      	ldr	r3, [sp, #4]
  MX_USB_Device_Init();
 8001062:	f004 fa21 	bl	80054a8 <MX_USB_Device_Init>
  hi2c1.Instance = I2C1;
 8001066:	4820      	ldr	r0, [pc, #128]	; (80010e8 <main+0xc0>)
  hi2c1.Init.Timing = 0x10707DBC;
 8001068:	4920      	ldr	r1, [pc, #128]	; (80010ec <main+0xc4>)
  hi2c1.Init.OwnAddress1 = 0;
 800106a:	2300      	movs	r3, #0
  hi2c1.Init.Timing = 0x10707DBC;
 800106c:	e9c4 0100 	strd	r0, r1, [r4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001070:	2201      	movs	r2, #1
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001072:	4620      	mov	r0, r4
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001074:	e9c4 3202 	strd	r3, r2, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8001078:	e9c4 3304 	strd	r3, r3, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800107c:	e9c4 3306 	strd	r3, r3, [r4, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001080:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001082:	f000 fb33 	bl	80016ec <HAL_I2C_Init>
 8001086:	b108      	cbz	r0, 800108c <main+0x64>
 8001088:	b672      	cpsid	i
  while (1)
 800108a:	e7fe      	b.n	800108a <main+0x62>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800108c:	4601      	mov	r1, r0
 800108e:	4620      	mov	r0, r4
 8001090:	f000 fb80 	bl	8001794 <HAL_I2CEx_ConfigAnalogFilter>
 8001094:	b108      	cbz	r0, 800109a <main+0x72>
 8001096:	b672      	cpsid	i
  while (1)
 8001098:	e7fe      	b.n	8001098 <main+0x70>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800109a:	4601      	mov	r1, r0
 800109c:	4620      	mov	r0, r4
 800109e:	f000 fba3 	bl	80017e8 <HAL_I2CEx_ConfigDigitalFilter>
 80010a2:	4603      	mov	r3, r0
 80010a4:	b108      	cbz	r0, 80010aa <main+0x82>
 80010a6:	b672      	cpsid	i
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <main+0x80>
  htim16.Instance = TIM16;
 80010aa:	4c11      	ldr	r4, [pc, #68]	; (80010f0 <main+0xc8>)
 80010ac:	4811      	ldr	r0, [pc, #68]	; (80010f4 <main+0xcc>)
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ae:	61a3      	str	r3, [r4, #24]
  htim16.Init.Prescaler = 639;
 80010b0:	f240 217f 	movw	r1, #639	; 0x27f
 80010b4:	e9c4 0100 	strd	r0, r1, [r4]
  htim16.Init.Period = 100;
 80010b8:	2264      	movs	r2, #100	; 0x64
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80010ba:	4620      	mov	r0, r4
  htim16.Init.Period = 100;
 80010bc:	e9c4 3202 	strd	r3, r2, [r4, #8]
  htim16.Init.RepetitionCounter = 0;
 80010c0:	e9c4 3304 	strd	r3, r3, [r4, #16]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80010c4:	f002 fade 	bl	8003684 <HAL_TIM_Base_Init>
 80010c8:	b108      	cbz	r0, 80010ce <main+0xa6>
 80010ca:	b672      	cpsid	i
  while (1)
 80010cc:	e7fe      	b.n	80010cc <main+0xa4>
  PT_init();
 80010ce:	f7ff fde9 	bl	8000ca4 <PT_init>
  Rafael_init();
 80010d2:	f7ff fecb 	bl	8000e6c <Rafael_init>
  arm_PT_init();
 80010d6:	f7ff fe89 	bl	8000dec <arm_PT_init>
  HAL_TIM_Base_Start_IT(&htim16);
 80010da:	4620      	mov	r0, r4
 80010dc:	f002 fb4a 	bl	8003774 <HAL_TIM_Base_Start_IT>
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <main+0xb8>
 80010e2:	bf00      	nop
 80010e4:	20000604 	.word	0x20000604
 80010e8:	40005400 	.word	0x40005400
 80010ec:	10707dbc 	.word	0x10707dbc
 80010f0:	20000658 	.word	0x20000658
 80010f4:	40014400 	.word	0x40014400

080010f8 <Error_Handler>:
 80010f8:	b672      	cpsid	i
  while (1)
 80010fa:	e7fe      	b.n	80010fa <Error_Handler+0x2>

080010fc <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop

08001100 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001100:	b510      	push	{r4, lr}
 8001102:	4604      	mov	r4, r0
 8001104:	b09c      	sub	sp, #112	; 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001106:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001108:	2250      	movs	r2, #80	; 0x50
 800110a:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8001110:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001114:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001116:	f004 fd35 	bl	8005b84 <memset>
  if(hi2c->Instance==I2C1)
 800111a:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <HAL_I2C_MspInit+0x88>)
 800111c:	6822      	ldr	r2, [r4, #0]
 800111e:	429a      	cmp	r2, r3
 8001120:	d001      	beq.n	8001126 <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001122:	b01c      	add	sp, #112	; 0x70
 8001124:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001126:	2204      	movs	r2, #4
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001128:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800112c:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800112e:	9208      	str	r2, [sp, #32]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001130:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001132:	f002 f8af 	bl	8003294 <HAL_RCCEx_PeriphCLKConfig>
 8001136:	bb20      	cbnz	r0, 8001182 <HAL_I2C_MspInit+0x82>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001138:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800113c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001140:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001142:	4812      	ldr	r0, [pc, #72]	; (800118c <HAL_I2C_MspInit+0x8c>)
 8001144:	f043 0302 	orr.w	r3, r3, #2
 8001148:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800114a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001152:	2312      	movs	r3, #18
 8001154:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001158:	2200      	movs	r2, #0
 800115a:	2300      	movs	r3, #0
 800115c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001160:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001162:	2304      	movs	r3, #4
 8001164:	9306      	str	r3, [sp, #24]
  (void)tmpreg;
 8001166:	9a01      	ldr	r2, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001168:	f000 f9e2 	bl	8001530 <HAL_GPIO_Init>
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800116c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800116e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001172:	65a3      	str	r3, [r4, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001174:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001176:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800117a:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800117c:	9b00      	ldr	r3, [sp, #0]
}
 800117e:	b01c      	add	sp, #112	; 0x70
 8001180:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001182:	f7ff ffb9 	bl	80010f8 <Error_Handler>
 8001186:	e7d7      	b.n	8001138 <HAL_I2C_MspInit+0x38>
 8001188:	40005400 	.word	0x40005400
 800118c:	48000400 	.word	0x48000400

08001190 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM16)
 8001190:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <HAL_TIM_Base_MspInit+0x3c>)
 8001192:	6802      	ldr	r2, [r0, #0]
 8001194:	429a      	cmp	r2, r3
 8001196:	d000      	beq.n	800119a <HAL_TIM_Base_MspInit+0xa>
 8001198:	4770      	bx	lr
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800119a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 800119e:	b500      	push	{lr}
 80011a0:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80011a2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80011a6:	6619      	str	r1, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80011a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011aa:	b083      	sub	sp, #12

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b2:	9301      	str	r3, [sp, #4]
 80011b4:	2019      	movs	r0, #25
 80011b6:	4611      	mov	r1, r2
  (void)tmpreg;
 80011b8:	9b01      	ldr	r3, [sp, #4]
 80011ba:	f000 f953 	bl	8001464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80011be:	2019      	movs	r0, #25
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80011c0:	b003      	add	sp, #12
 80011c2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80011c6:	f000 b98b 	b.w	80014e0 <HAL_NVIC_EnableIRQ>
 80011ca:	bf00      	nop
 80011cc:	40014400 	.word	0x40014400

080011d0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <NMI_Handler>
 80011d2:	bf00      	nop

080011d4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <HardFault_Handler>
 80011d6:	bf00      	nop

080011d8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <MemManage_Handler>
 80011da:	bf00      	nop

080011dc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <BusFault_Handler>
 80011de:	bf00      	nop

080011e0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <UsageFault_Handler>
 80011e2:	bf00      	nop

080011e4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop

080011e8 <DebugMon_Handler>:
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop

080011ec <PendSV_Handler>:
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop

080011f0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f0:	f000 b90e 	b.w	8001410 <HAL_IncTick>

080011f4 <USB_LP_IRQHandler>:
void USB_LP_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80011f4:	4801      	ldr	r0, [pc, #4]	; (80011fc <USB_LP_IRQHandler+0x8>)
 80011f6:	f000 bba1 	b.w	800193c <HAL_PCD_IRQHandler>
 80011fa:	bf00      	nop
 80011fc:	20001b90 	.word	0x20001b90

08001200 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001200:	4801      	ldr	r0, [pc, #4]	; (8001208 <TIM1_UP_TIM16_IRQHandler+0x8>)
 8001202:	f002 bae9 	b.w	80037d8 <HAL_TIM_IRQHandler>
 8001206:	bf00      	nop
 8001208:	20000658 	.word	0x20000658

0800120c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800120c:	2001      	movs	r0, #1
 800120e:	4770      	bx	lr

08001210 <_kill>:

int _kill(int pid, int sig)
{
 8001210:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001212:	f004 fc65 	bl	8005ae0 <__errno>
 8001216:	2316      	movs	r3, #22
 8001218:	6003      	str	r3, [r0, #0]
	return -1;
}
 800121a:	f04f 30ff 	mov.w	r0, #4294967295
 800121e:	bd08      	pop	{r3, pc}

08001220 <_exit>:

void _exit (int status)
{
 8001220:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001222:	f004 fc5d 	bl	8005ae0 <__errno>
 8001226:	2316      	movs	r3, #22
 8001228:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800122a:	e7fe      	b.n	800122a <_exit+0xa>

0800122c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800122c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122e:	1e16      	subs	r6, r2, #0
 8001230:	dd07      	ble.n	8001242 <_read+0x16>
 8001232:	460c      	mov	r4, r1
 8001234:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8001236:	f3af 8000 	nop.w
 800123a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123e:	42a5      	cmp	r5, r4
 8001240:	d1f9      	bne.n	8001236 <_read+0xa>
	}

return len;
}
 8001242:	4630      	mov	r0, r6
 8001244:	bd70      	pop	{r4, r5, r6, pc}
 8001246:	bf00      	nop

08001248 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001248:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124a:	1e16      	subs	r6, r2, #0
 800124c:	dd07      	ble.n	800125e <_write+0x16>
 800124e:	460c      	mov	r4, r1
 8001250:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8001252:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001256:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125a:	42ac      	cmp	r4, r5
 800125c:	d1f9      	bne.n	8001252 <_write+0xa>
	}
	return len;
}
 800125e:	4630      	mov	r0, r6
 8001260:	bd70      	pop	{r4, r5, r6, pc}
 8001262:	bf00      	nop

08001264 <_close>:

int _close(int file)
{
	return -1;
}
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop

0800126c <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800126c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001270:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001272:	2000      	movs	r0, #0
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop

08001278 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001278:	2001      	movs	r0, #1
 800127a:	4770      	bx	lr

0800127c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800127c:	2000      	movs	r0, #0
 800127e:	4770      	bx	lr

08001280 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001280:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001282:	4c0c      	ldr	r4, [pc, #48]	; (80012b4 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <_sbrk+0x38>)
 8001286:	490d      	ldr	r1, [pc, #52]	; (80012bc <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8001288:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800128a:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 800128c:	b12a      	cbz	r2, 800129a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800128e:	4410      	add	r0, r2
 8001290:	4288      	cmp	r0, r1
 8001292:	d807      	bhi.n	80012a4 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001294:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 8001296:	4610      	mov	r0, r2
 8001298:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800129a:	4a09      	ldr	r2, [pc, #36]	; (80012c0 <_sbrk+0x40>)
 800129c:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800129e:	4410      	add	r0, r2
 80012a0:	4288      	cmp	r0, r1
 80012a2:	d9f7      	bls.n	8001294 <_sbrk+0x14>
    errno = ENOMEM;
 80012a4:	f004 fc1c 	bl	8005ae0 <__errno>
 80012a8:	230c      	movs	r3, #12
    return (void *)-1;
 80012aa:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 80012ae:	6003      	str	r3, [r0, #0]
}
 80012b0:	4610      	mov	r0, r2
 80012b2:	bd10      	pop	{r4, pc}
 80012b4:	200006a4 	.word	0x200006a4
 80012b8:	20030000 	.word	0x20030000
 80012bc:	00000400 	.word	0x00000400
 80012c0:	200020b8 	.word	0x200020b8

080012c4 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80012c4:	4914      	ldr	r1, [pc, #80]	; (8001318 <SystemInit+0x54>)
 80012c6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80012ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80012ce:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80012d2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_MSION;
 80012d6:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80012d8:	4a10      	ldr	r2, [pc, #64]	; (800131c <SystemInit+0x58>)
  RCC->CFGR = 0x00070000U;
 80012da:	f44f 20e0 	mov.w	r0, #458752	; 0x70000
  RCC->CR |= RCC_CR_MSION;
 80012de:	f041 0101 	orr.w	r1, r1, #1
 80012e2:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00070000U;
 80012e4:	6098      	str	r0, [r3, #8]
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80012e6:	6818      	ldr	r0, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80012e8:	490d      	ldr	r1, [pc, #52]	; (8001320 <SystemInit+0x5c>)
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80012ea:	4002      	ands	r2, r0
 80012ec:	601a      	str	r2, [r3, #0]
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80012ee:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80012f2:	f022 0205 	bic.w	r2, r2, #5
 80012f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80012fa:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80012fe:	f022 0201 	bic.w	r2, r2, #1
 8001302:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  RCC->PLLCFGR = 0x22041000U;
 8001306:	60d9      	str	r1, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001308:	6119      	str	r1, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800130a:	681a      	ldr	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800130c:	2100      	movs	r1, #0
  RCC->CR &= 0xFFFBFFFFU;
 800130e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001312:	601a      	str	r2, [r3, #0]
  RCC->CIER = 0x00000000;
 8001314:	6199      	str	r1, [r3, #24]
}
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00
 800131c:	faf6fefb 	.word	0xfaf6fefb
 8001320:	22041000 	.word	0x22041000

08001324 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001324:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001326:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001328:	3304      	adds	r3, #4

0800132a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800132a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800132c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800132e:	d3f9      	bcc.n	8001324 <CopyDataInit>
  bx lr
 8001330:	4770      	bx	lr

08001332 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001332:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001334:	3004      	adds	r0, #4

08001336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001336:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001338:	d3fb      	bcc.n	8001332 <FillZerobss>
  bx lr
 800133a:	4770      	bx	lr

0800133c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800133c:	480c      	ldr	r0, [pc, #48]	; (8001370 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800133e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001340:	f7ff ffc0 	bl	80012c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001344:	480b      	ldr	r0, [pc, #44]	; (8001374 <LoopForever+0x8>)
 8001346:	490c      	ldr	r1, [pc, #48]	; (8001378 <LoopForever+0xc>)
 8001348:	4a0c      	ldr	r2, [pc, #48]	; (800137c <LoopForever+0x10>)
 800134a:	2300      	movs	r3, #0
 800134c:	f7ff ffed 	bl	800132a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001350:	480b      	ldr	r0, [pc, #44]	; (8001380 <LoopForever+0x14>)
 8001352:	490c      	ldr	r1, [pc, #48]	; (8001384 <LoopForever+0x18>)
 8001354:	2300      	movs	r3, #0
 8001356:	f7ff ffee 	bl	8001336 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800135a:	480b      	ldr	r0, [pc, #44]	; (8001388 <LoopForever+0x1c>)
 800135c:	490b      	ldr	r1, [pc, #44]	; (800138c <LoopForever+0x20>)
 800135e:	2300      	movs	r3, #0
 8001360:	f7ff ffe9 	bl	8001336 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001364:	f004 fbc2 	bl	8005aec <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001368:	f7ff fe5e 	bl	8001028 <main>

0800136c <LoopForever>:

LoopForever:
  b LoopForever
 800136c:	e7fe      	b.n	800136c <LoopForever>
 800136e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001370:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001374:	20000004 	.word	0x20000004
 8001378:	200002dc 	.word	0x200002dc
 800137c:	0800aa04 	.word	0x0800aa04
  INIT_BSS _sbss, _ebss
 8001380:	200002e0 	.word	0x200002e0
 8001384:	200020b4 	.word	0x200020b4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001388:	20030000 	.word	0x20030000
 800138c:	20030000 	.word	0x20030000

08001390 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001390:	e7fe      	b.n	8001390 <ADC1_IRQHandler>
	...

08001394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001394:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0U)
 8001396:	4c10      	ldr	r4, [pc, #64]	; (80013d8 <HAL_InitTick+0x44>)
 8001398:	7823      	ldrb	r3, [r4, #0]
 800139a:	b90b      	cbnz	r3, 80013a0 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800139c:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800139e:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013a0:	4605      	mov	r5, r0
 80013a2:	f001 ff3f 	bl	8003224 <HAL_RCC_GetHCLKFreq>
 80013a6:	7822      	ldrb	r2, [r4, #0]
 80013a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80013b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80013b4:	f000 f8a2 	bl	80014fc <HAL_SYSTICK_Config>
 80013b8:	4604      	mov	r4, r0
 80013ba:	2800      	cmp	r0, #0
 80013bc:	d1ee      	bne.n	800139c <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013be:	2d0f      	cmp	r5, #15
 80013c0:	d8ec      	bhi.n	800139c <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c2:	4602      	mov	r2, r0
 80013c4:	4629      	mov	r1, r5
 80013c6:	f04f 30ff 	mov.w	r0, #4294967295
 80013ca:	f000 f84b 	bl	8001464 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013ce:	4b03      	ldr	r3, [pc, #12]	; (80013dc <HAL_InitTick+0x48>)
 80013d0:	4620      	mov	r0, r4
 80013d2:	601d      	str	r5, [r3, #0]
}
 80013d4:	bd38      	pop	{r3, r4, r5, pc}
 80013d6:	bf00      	nop
 80013d8:	2000000c 	.word	0x2000000c
 80013dc:	20000010 	.word	0x20000010

080013e0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e0:	4a0a      	ldr	r2, [pc, #40]	; (800140c <HAL_Init+0x2c>)
 80013e2:	6813      	ldr	r3, [r2, #0]
 80013e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80013e8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ea:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ec:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ee:	f000 f827 	bl	8001440 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013f2:	200f      	movs	r0, #15
 80013f4:	f7ff ffce 	bl	8001394 <HAL_InitTick>
 80013f8:	b110      	cbz	r0, 8001400 <HAL_Init+0x20>
    status = HAL_ERROR;
 80013fa:	2401      	movs	r4, #1
}
 80013fc:	4620      	mov	r0, r4
 80013fe:	bd10      	pop	{r4, pc}
 8001400:	4604      	mov	r4, r0
    HAL_MspInit();
 8001402:	f7ff fe7b 	bl	80010fc <HAL_MspInit>
}
 8001406:	4620      	mov	r0, r4
 8001408:	bd10      	pop	{r4, pc}
 800140a:	bf00      	nop
 800140c:	58004000 	.word	0x58004000

08001410 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001410:	4a03      	ldr	r2, [pc, #12]	; (8001420 <HAL_IncTick+0x10>)
 8001412:	4b04      	ldr	r3, [pc, #16]	; (8001424 <HAL_IncTick+0x14>)
 8001414:	6811      	ldr	r1, [r2, #0]
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	440b      	add	r3, r1
 800141a:	6013      	str	r3, [r2, #0]
}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	200006a8 	.word	0x200006a8
 8001424:	2000000c 	.word	0x2000000c

08001428 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001428:	4b01      	ldr	r3, [pc, #4]	; (8001430 <HAL_GetTick+0x8>)
 800142a:	6818      	ldr	r0, [r3, #0]
}
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	200006a8 	.word	0x200006a8

08001434 <HAL_GetTickPrio>:
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
 8001434:	4b01      	ldr	r3, [pc, #4]	; (800143c <HAL_GetTickPrio+0x8>)
}
 8001436:	6818      	ldr	r0, [r3, #0]
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000010 	.word	0x20000010

08001440 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001440:	4907      	ldr	r1, [pc, #28]	; (8001460 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001442:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001444:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001446:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800144a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001450:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001452:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800145a:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001464:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <HAL_NVIC_SetPriority+0x74>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800146c:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800146e:	f1c3 0e07 	rsb	lr, r3, #7
 8001472:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001476:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800147a:	bf28      	it	cs
 800147c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001480:	f1bc 0f06 	cmp.w	ip, #6
 8001484:	d91b      	bls.n	80014be <HAL_NVIC_SetPriority+0x5a>
 8001486:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001488:	f04f 3cff 	mov.w	ip, #4294967295
 800148c:	fa0c fc03 	lsl.w	ip, ip, r3
 8001490:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	f04f 3cff 	mov.w	ip, #4294967295
 8001498:	fa0c fc0e 	lsl.w	ip, ip, lr
 800149c:	ea21 010c 	bic.w	r1, r1, ip
 80014a0:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80014a2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a4:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80014a8:	db0c      	blt.n	80014c4 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014aa:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80014ae:	0109      	lsls	r1, r1, #4
 80014b0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80014b4:	b2c9      	uxtb	r1, r1
 80014b6:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80014ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80014be:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c0:	4613      	mov	r3, r2
 80014c2:	e7e7      	b.n	8001494 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <HAL_NVIC_SetPriority+0x78>)
 80014c6:	f000 000f 	and.w	r0, r0, #15
 80014ca:	0109      	lsls	r1, r1, #4
 80014cc:	4403      	add	r3, r0
 80014ce:	b2c9      	uxtb	r1, r1
 80014d0:	7619      	strb	r1, [r3, #24]
 80014d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80014d6:	bf00      	nop
 80014d8:	e000ed00 	.word	0xe000ed00
 80014dc:	e000ecfc 	.word	0xe000ecfc

080014e0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80014e0:	2800      	cmp	r0, #0
 80014e2:	db08      	blt.n	80014f6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014e4:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <HAL_NVIC_EnableIRQ+0x18>)
 80014e6:	0941      	lsrs	r1, r0, #5
 80014e8:	2301      	movs	r3, #1
 80014ea:	f000 001f 	and.w	r0, r0, #31
 80014ee:	fa03 f000 	lsl.w	r0, r3, r0
 80014f2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80014f6:	4770      	bx	lr
 80014f8:	e000e100 	.word	0xe000e100

080014fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014fc:	3801      	subs	r0, #1
 80014fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001502:	d210      	bcs.n	8001526 <HAL_SYSTICK_Config+0x2a>
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001504:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001506:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150a:	4c08      	ldr	r4, [pc, #32]	; (800152c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150e:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8001512:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001516:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001518:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800151a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800151c:	619a      	str	r2, [r3, #24]
  return SysTick_Config(TicksNumb);
}
 800151e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001522:	6119      	str	r1, [r3, #16]
 8001524:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001526:	2001      	movs	r0, #1
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001534:	680c      	ldr	r4, [r1, #0]
{
 8001536:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001538:	2c00      	cmp	r4, #0
 800153a:	d06e      	beq.n	800161a <HAL_GPIO_Init+0xea>
 800153c:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001540:	4e65      	ldr	r6, [pc, #404]	; (80016d8 <HAL_GPIO_Init+0x1a8>)
  uint32_t position = 0x00u;
 8001542:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001544:	f04f 0b01 	mov.w	fp, #1
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001548:	468e      	mov	lr, r1
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800154a:	fa0b f703 	lsl.w	r7, fp, r3
    if (iocurrent != 0x00u)
 800154e:	ea17 0a04 	ands.w	sl, r7, r4
 8001552:	d05c      	beq.n	800160e <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001554:	f8de 1004 	ldr.w	r1, [lr, #4]
 8001558:	f001 0203 	and.w	r2, r1, #3
 800155c:	1e55      	subs	r5, r2, #1
 800155e:	2d01      	cmp	r5, #1
 8001560:	d95e      	bls.n	8001620 <HAL_GPIO_Init+0xf0>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001562:	2a03      	cmp	r2, #3
 8001564:	f040 80a2 	bne.w	80016ac <HAL_GPIO_Init+0x17c>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001568:	fa02 f20c 	lsl.w	r2, r2, ip
 800156c:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 800156e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001570:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001572:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001574:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001578:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800157a:	d048      	beq.n	800160e <HAL_GPIO_Init+0xde>
        temp = SYSCFG->EXTICR[position >> 2u];
 800157c:	f023 0203 	bic.w	r2, r3, #3
 8001580:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001584:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001588:	f003 0503 	and.w	r5, r3, #3
 800158c:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp = SYSCFG->EXTICR[position >> 2u];
 8001590:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001592:	250f      	movs	r5, #15
 8001594:	fa05 f809 	lsl.w	r8, r5, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001598:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800159c:	ea27 0708 	bic.w	r7, r7, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015a0:	d012      	beq.n	80015c8 <HAL_GPIO_Init+0x98>
 80015a2:	4d4e      	ldr	r5, [pc, #312]	; (80016dc <HAL_GPIO_Init+0x1ac>)
 80015a4:	42a8      	cmp	r0, r5
 80015a6:	f000 808c 	beq.w	80016c2 <HAL_GPIO_Init+0x192>
 80015aa:	4d4d      	ldr	r5, [pc, #308]	; (80016e0 <HAL_GPIO_Init+0x1b0>)
 80015ac:	42a8      	cmp	r0, r5
 80015ae:	f000 808c 	beq.w	80016ca <HAL_GPIO_Init+0x19a>
 80015b2:	4d4c      	ldr	r5, [pc, #304]	; (80016e4 <HAL_GPIO_Init+0x1b4>)
 80015b4:	42a8      	cmp	r0, r5
 80015b6:	d07e      	beq.n	80016b6 <HAL_GPIO_Init+0x186>
 80015b8:	4d4b      	ldr	r5, [pc, #300]	; (80016e8 <HAL_GPIO_Init+0x1b8>)
 80015ba:	42a8      	cmp	r0, r5
 80015bc:	bf0c      	ite	eq
 80015be:	2504      	moveq	r5, #4
 80015c0:	2507      	movne	r5, #7
 80015c2:	fa05 f509 	lsl.w	r5, r5, r9
 80015c6:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015c8:	6097      	str	r7, [r2, #8]
        temp = EXTI->RTSR1;
 80015ca:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015cc:	02cd      	lsls	r5, r1, #11
        temp &= ~(iocurrent);
 80015ce:	ea6f 070a 	mvn.w	r7, sl
 80015d2:	bf54      	ite	pl
 80015d4:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 80015d6:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->RTSR1 = temp;
 80015da:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
 80015dc:	6875      	ldr	r5, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015de:	028a      	lsls	r2, r1, #10
        temp &= ~(iocurrent);
 80015e0:	bf54      	ite	pl
 80015e2:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80015e4:	ea4a 0505 	orrmi.w	r5, sl, r5
        }
        EXTI->FTSR1 = temp;
 80015e8:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015ea:	f8d6 5080 	ldr.w	r5, [r6, #128]	; 0x80
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015ee:	03ca      	lsls	r2, r1, #15
        temp &= ~(iocurrent);
 80015f0:	bf54      	ite	pl
 80015f2:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80015f4:	ea4a 0505 	orrmi.w	r5, sl, r5
        }
        EXTI->IMR1 = temp;
 80015f8:	f8c6 5080 	str.w	r5, [r6, #128]	; 0x80

        temp = EXTI->EMR1;
 80015fc:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001600:	0389      	lsls	r1, r1, #14
        temp &= ~(iocurrent);
 8001602:	bf54      	ite	pl
 8001604:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 8001606:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->EMR1 = temp;
 800160a:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
      }
    }

    position++;
 800160e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001610:	fa34 f203 	lsrs.w	r2, r4, r3
 8001614:	f10c 0c02 	add.w	ip, ip, #2
 8001618:	d197      	bne.n	800154a <HAL_GPIO_Init+0x1a>
  }
}
 800161a:	b003      	add	sp, #12
 800161c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8001620:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001624:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001628:	f04f 0803 	mov.w	r8, #3
 800162c:	fa08 f80c 	lsl.w	r8, r8, ip
 8001630:	ea29 0908 	bic.w	r9, r9, r8
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001634:	fa05 f50c 	lsl.w	r5, r5, ip
 8001638:	ea45 0509 	orr.w	r5, r5, r9
        GPIOx->OSPEEDR = temp;
 800163c:	6085      	str	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800163e:	ea6f 0508 	mvn.w	r5, r8
        temp = GPIOx->OTYPER;
 8001642:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001646:	ea28 0807 	bic.w	r8, r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800164a:	f3c1 1700 	ubfx	r7, r1, #4, #1
 800164e:	409f      	lsls	r7, r3
 8001650:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8001654:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001656:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001658:	ea07 0805 	and.w	r8, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800165c:	f8de 7008 	ldr.w	r7, [lr, #8]
 8001660:	fa07 f70c 	lsl.w	r7, r7, ip
 8001664:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001668:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 800166a:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800166c:	fa02 f20c 	lsl.w	r2, r2, ip
 8001670:	f47f af7d 	bne.w	800156e <HAL_GPIO_Init+0x3e>
        temp = GPIOx->AFR[position >> 3u];
 8001674:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8001678:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800167c:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001680:	f8d9 7020 	ldr.w	r7, [r9, #32]
 8001684:	9700      	str	r7, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001686:	f8de 7010 	ldr.w	r7, [lr, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800168a:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800168e:	fa07 f708 	lsl.w	r7, r7, r8
 8001692:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001694:	270f      	movs	r7, #15
 8001696:	fa07 f808 	lsl.w	r8, r7, r8
 800169a:	9f00      	ldr	r7, [sp, #0]
 800169c:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016a0:	9f01      	ldr	r7, [sp, #4]
 80016a2:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3u] = temp;
 80016a6:	f8c9 7020 	str.w	r7, [r9, #32]
 80016aa:	e760      	b.n	800156e <HAL_GPIO_Init+0x3e>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016ac:	2503      	movs	r5, #3
 80016ae:	fa05 f50c 	lsl.w	r5, r5, ip
 80016b2:	43ed      	mvns	r5, r5
 80016b4:	e7cf      	b.n	8001656 <HAL_GPIO_Init+0x126>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016b6:	f04f 0803 	mov.w	r8, #3
 80016ba:	fa08 f509 	lsl.w	r5, r8, r9
 80016be:	432f      	orrs	r7, r5
 80016c0:	e782      	b.n	80015c8 <HAL_GPIO_Init+0x98>
 80016c2:	fa0b f509 	lsl.w	r5, fp, r9
 80016c6:	432f      	orrs	r7, r5
 80016c8:	e77e      	b.n	80015c8 <HAL_GPIO_Init+0x98>
 80016ca:	f04f 0802 	mov.w	r8, #2
 80016ce:	fa08 f509 	lsl.w	r5, r8, r9
 80016d2:	432f      	orrs	r7, r5
 80016d4:	e778      	b.n	80015c8 <HAL_GPIO_Init+0x98>
 80016d6:	bf00      	nop
 80016d8:	58000800 	.word	0x58000800
 80016dc:	48000400 	.word	0x48000400
 80016e0:	48000800 	.word	0x48000800
 80016e4:	48000c00 	.word	0x48000c00
 80016e8:	48001000 	.word	0x48001000

080016ec <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016ec:	2800      	cmp	r0, #0
 80016ee:	d04f      	beq.n	8001790 <HAL_I2C_Init+0xa4>
{
 80016f0:	b510      	push	{r4, lr}
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016f2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80016f6:	4604      	mov	r4, r0
 80016f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d042      	beq.n	8001786 <HAL_I2C_Init+0x9a>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001700:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001702:	2224      	movs	r2, #36	; 0x24
 8001704:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001708:	6819      	ldr	r1, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800170a:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 800170c:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001710:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 8001714:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001716:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001718:	689a      	ldr	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800171a:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800171c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001720:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001722:	609a      	str	r2, [r3, #8]
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001724:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001726:	d02a      	beq.n	800177e <HAL_I2C_Init+0x92>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001728:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800172c:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800172e:	609a      	str	r2, [r3, #8]
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001730:	bf04      	itt	eq
 8001732:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8001736:	605a      	streq	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001738:	6859      	ldr	r1, [r3, #4]
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800173a:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800173c:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8001740:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8001744:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001746:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001748:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800174a:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800174c:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800174e:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001752:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001756:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001758:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800175a:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800175c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800175e:	4301      	orrs	r1, r0
 8001760:	6019      	str	r1, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001762:	6819      	ldr	r1, [r3, #0]
 8001764:	f041 0101 	orr.w	r1, r1, #1
 8001768:	6019      	str	r1, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800176a:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800176c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800176e:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001770:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001774:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001776:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42

  return HAL_OK;
 800177a:	4610      	mov	r0, r2
}
 800177c:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800177e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001782:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001784:	e7d8      	b.n	8001738 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 8001786:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800178a:	f7ff fcb9 	bl	8001100 <HAL_I2C_MspInit>
 800178e:	e7b7      	b.n	8001700 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8001790:	2001      	movs	r0, #1
}
 8001792:	4770      	bx	lr

08001794 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001794:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001798:	2a20      	cmp	r2, #32
 800179a:	d123      	bne.n	80017e4 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800179c:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017a0:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80017a4:	2a01      	cmp	r2, #1
 80017a6:	4603      	mov	r3, r0
 80017a8:	d01c      	beq.n	80017e4 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017aa:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80017ac:	2024      	movs	r0, #36	; 0x24
{
 80017ae:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 80017b0:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80017b4:	6810      	ldr	r0, [r2, #0]
 80017b6:	f020 0001 	bic.w	r0, r0, #1
 80017ba:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80017bc:	6810      	ldr	r0, [r2, #0]
 80017be:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 80017c2:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80017c4:	6810      	ldr	r0, [r2, #0]
 80017c6:	4301      	orrs	r1, r0
 80017c8:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017ca:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017cc:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 80017d0:	f041 0101 	orr.w	r1, r1, #1
 80017d4:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80017d6:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80017da:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40

    return HAL_OK;
 80017de:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 80017e0:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 80017e4:	2002      	movs	r0, #2
}
 80017e6:	4770      	bx	lr

080017e8 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017e8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80017ec:	2a20      	cmp	r2, #32
 80017ee:	d122      	bne.n	8001836 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 80017f0:	b500      	push	{lr}
 80017f2:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017f6:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80017fa:	2a01      	cmp	r2, #1
 80017fc:	4603      	mov	r3, r0
 80017fe:	d01c      	beq.n	800183a <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001800:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001802:	2024      	movs	r0, #36	; 0x24
 8001804:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8001808:	6810      	ldr	r0, [r2, #0]
 800180a:	f020 0001 	bic.w	r0, r0, #1
 800180e:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001810:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001812:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001816:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800181a:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800181c:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800181e:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 8001822:	f041 0101 	orr.w	r1, r1, #1
 8001826:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001828:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800182c:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40

    return HAL_OK;
 8001830:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001832:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 8001836:	2002      	movs	r0, #2
}
 8001838:	4770      	bx	lr
    return HAL_BUSY;
 800183a:	2002      	movs	r0, #2
}
 800183c:	f85d fb04 	ldr.w	pc, [sp], #4

08001840 <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001840:	2800      	cmp	r0, #0
 8001842:	d05d      	beq.n	8001900 <HAL_PCD_Init+0xc0>
{
 8001844:	b5f0      	push	{r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001846:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
{
 800184a:	b087      	sub	sp, #28
 800184c:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800184e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001852:	2b00      	cmp	r3, #0
 8001854:	d04f      	beq.n	80018f6 <HAL_PCD_Init+0xb6>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001856:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001858:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_BUSY;
 800185a:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 800185e:	f002 f883 	bl	8003968 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001862:	6865      	ldr	r5, [r4, #4]
 8001864:	b355      	cbz	r5, 80018bc <HAL_PCD_Init+0x7c>
 8001866:	2300      	movs	r3, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001868:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800186c:	4618      	mov	r0, r3
    hpcd->IN_ep[i].is_in = 1U;
 800186e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001872:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001876:	f103 0c01 	add.w	ip, r3, #1
    hpcd->IN_ep[i].num = i;
 800187a:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800187e:	fa5f f38c 	uxtb.w	r3, ip
 8001882:	42ab      	cmp	r3, r5
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001884:	e9c1 000e 	strd	r0, r0, [r1, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 8001888:	f881 e029 	strb.w	lr, [r1, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800188c:	f881 002b 	strb.w	r0, [r1, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 8001890:	6408      	str	r0, [r1, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001892:	d3ec      	bcc.n	800186e <HAL_PCD_Init+0x2e>
 8001894:	2200      	movs	r2, #0
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001896:	4611      	mov	r1, r2
 8001898:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800189c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018a0:	1c50      	adds	r0, r2, #1
    hpcd->OUT_ep[i].num = i;
 80018a2:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018a6:	b2c2      	uxtb	r2, r0
 80018a8:	42aa      	cmp	r2, r5
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
    hpcd->OUT_ep[i].maxpacket = 0U;
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018aa:	e9c3 115e 	strd	r1, r1, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 80018ae:	f883 1169 	strb.w	r1, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018b2:	f883 116b 	strb.w	r1, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018b6:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018ba:	d3ed      	bcc.n	8001898 <HAL_PCD_Init+0x58>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80018bc:	4625      	mov	r5, r4
 80018be:	46ec      	mov	ip, sp
 80018c0:	f855 7b10 	ldr.w	r7, [r5], #16
 80018c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80018ca:	682b      	ldr	r3, [r5, #0]
 80018cc:	f8cc 3000 	str.w	r3, [ip]
 80018d0:	f104 0e04 	add.w	lr, r4, #4
 80018d4:	e89e 000e 	ldmia.w	lr, {r1, r2, r3}
 80018d8:	4638      	mov	r0, r7
 80018da:	f002 f84f 	bl	800397c <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80018de:	69e3      	ldr	r3, [r4, #28]
  hpcd->State = HAL_PCD_STATE_READY;
 80018e0:	2201      	movs	r2, #1
  hpcd->USB_Address = 0U;
 80018e2:	2600      	movs	r6, #0
  if (hpcd->Init.lpm_enable == 1U)
 80018e4:	4293      	cmp	r3, r2
  hpcd->USB_Address = 0U;
 80018e6:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80018ea:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
  if (hpcd->Init.lpm_enable == 1U)
 80018ee:	d009      	beq.n	8001904 <HAL_PCD_Init+0xc4>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 80018f0:	4630      	mov	r0, r6
}
 80018f2:	b007      	add	sp, #28
 80018f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80018f6:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 80018fa:	f003 ff2d 	bl	8005758 <HAL_PCD_MspInit>
 80018fe:	e7aa      	b.n	8001856 <HAL_PCD_Init+0x16>
    return HAL_ERROR;
 8001900:	2001      	movs	r0, #1
}
 8001902:	4770      	bx	lr
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001904:	4620      	mov	r0, r4
 8001906:	f000 ff01 	bl	800270c <HAL_PCDEx_ActivateLPM>
  return HAL_OK;
 800190a:	4630      	mov	r0, r6
}
 800190c:	b007      	add	sp, #28
 800190e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001910 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8001910:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8001914:	2b01      	cmp	r3, #1
 8001916:	d00e      	beq.n	8001936 <HAL_PCD_Start+0x26>
{
 8001918:	b510      	push	{r4, lr}
 800191a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800191c:	2301      	movs	r3, #1
  __HAL_PCD_ENABLE(hpcd);
 800191e:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8001920:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001924:	f002 f816 	bl	8003954 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001928:	6820      	ldr	r0, [r4, #0]
 800192a:	f002 fe49 	bl	80045c0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800192e:	2000      	movs	r0, #0
 8001930:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8001934:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001936:	2002      	movs	r0, #2
}
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop

0800193c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800193c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001940:	4604      	mov	r4, r0
 8001942:	b083      	sub	sp, #12
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001944:	6800      	ldr	r0, [r0, #0]
 8001946:	f002 fe47 	bl	80045d8 <USB_ReadInterrupts>

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800194a:	f410 4500 	ands.w	r5, r0, #32768	; 0x8000
 800194e:	d12c      	bne.n	80019aa <HAL_PCD_IRQHandler+0x6e>
    (void)PCD_EP_ISR_Handler(hpcd);

    return;
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001950:	0543      	lsls	r3, r0, #21
 8001952:	f100 817f 	bmi.w	8001c54 <HAL_PCD_IRQHandler+0x318>
    (void)HAL_PCD_SetAddress(hpcd, 0U);

    return;
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001956:	0447      	lsls	r7, r0, #17
 8001958:	d41b      	bmi.n	8001992 <HAL_PCD_IRQHandler+0x56>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);

    return;
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800195a:	f410 5100 	ands.w	r1, r0, #8192	; 0x2000
 800195e:	f040 81f9 	bne.w	8001d54 <HAL_PCD_IRQHandler+0x418>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);

    return;
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001962:	04c6      	lsls	r6, r0, #19
 8001964:	f100 8088 	bmi.w	8001a78 <HAL_PCD_IRQHandler+0x13c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);

    return;
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001968:	0505      	lsls	r5, r0, #20
 800196a:	f100 834d 	bmi.w	8002008 <HAL_PCD_IRQHandler+0x6cc>

    return;
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800196e:	0601      	lsls	r1, r0, #24
 8001970:	f100 831e 	bmi.w	8001fb0 <HAL_PCD_IRQHandler+0x674>
    }

    return;
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001974:	0582      	lsls	r2, r0, #22
 8001976:	f100 841a 	bmi.w	80021ae <HAL_PCD_IRQHandler+0x872>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800197a:	05c3      	lsls	r3, r0, #23
 800197c:	d512      	bpl.n	80019a4 <HAL_PCD_IRQHandler+0x68>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800197e:	6822      	ldr	r2, [r4, #0]
 8001980:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001988:	041b      	lsls	r3, r3, #16
 800198a:	0c1b      	lsrs	r3, r3, #16
 800198c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44

    return;
 8001990:	e008      	b.n	80019a4 <HAL_PCD_IRQHandler+0x68>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001992:	6822      	ldr	r2, [r4, #0]
 8001994:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001998:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800199c:	041b      	lsls	r3, r3, #16
 800199e:	0c1b      	lsrs	r3, r3, #16
 80019a0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 80019a4:	b003      	add	sp, #12
 80019a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80019aa:	6822      	ldr	r2, [r4, #0]
 80019ac:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80019b0:	041f      	lsls	r7, r3, #16
 80019b2:	d5f7      	bpl.n	80019a4 <HAL_PCD_IRQHandler+0x68>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80019b4:	f8df baa8 	ldr.w	fp, [pc, #2728]	; 8002460 <HAL_PCD_IRQHandler+0xb24>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80019b8:	4610      	mov	r0, r2
 80019ba:	e010      	b.n	80019de <HAL_PCD_IRQHandler+0xa2>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80019bc:	f011 0110 	ands.w	r1, r1, #16
 80019c0:	f000 80c1 	beq.w	8001b46 <HAL_PCD_IRQHandler+0x20a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80019c4:	8801      	ldrh	r1, [r0, #0]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80019c6:	f411 6500 	ands.w	r5, r1, #2048	; 0x800
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80019ca:	b28b      	uxth	r3, r1
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80019cc:	f040 80ec 	bne.w	8001ba8 <HAL_PCD_IRQHandler+0x26c>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019d0:	041e      	lsls	r6, r3, #16
 80019d2:	f100 815e 	bmi.w	8001c92 <HAL_PCD_IRQHandler+0x356>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80019d6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80019da:	041a      	lsls	r2, r3, #16
 80019dc:	d5e2      	bpl.n	80019a4 <HAL_PCD_IRQHandler+0x68>
    wIstr = hpcd->Instance->ISTR;
 80019de:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 80019e2:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 80019e4:	f015 050f 	ands.w	r5, r5, #15
 80019e8:	d0e8      	beq.n	80019bc <HAL_PCD_IRQHandler+0x80>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80019ea:	b22e      	sxth	r6, r5
 80019ec:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 80019f0:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019f2:	041b      	lsls	r3, r3, #16
 80019f4:	d463      	bmi.n	8001abe <HAL_PCD_IRQHandler+0x182>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80019f6:	063b      	lsls	r3, r7, #24
 80019f8:	d5ed      	bpl.n	80019d6 <HAL_PCD_IRQHandler+0x9a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80019fa:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	ea03 030b 	and.w	r3, r3, fp
 8001a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a08:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8001a0c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8001a10:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 8001a14:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	f000 81a7 	beq.w	8001d6c <HAL_PCD_IRQHandler+0x430>
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001a1e:	f417 7c80 	ands.w	ip, r7, #256	; 0x100
 8001a22:	f040 81ce 	bne.w	8001dc2 <HAL_PCD_IRQHandler+0x486>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a26:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8001a2a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001a2e:	f240 4302 	movw	r3, #1026	; 0x402
 8001a32:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001a36:	fa10 f282 	uxtah	r2, r0, r2
 8001a3a:	5ad2      	ldrh	r2, [r2, r3]
            if (ep->xfer_len > TxPctSize)
 8001a3c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001a40:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001a44:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001a48:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 8001a4a:	4296      	cmp	r6, r2
 8001a4c:	f240 80a5 	bls.w	8001b9a <HAL_PCD_IRQHandler+0x25e>
              ep->xfer_len -= TxPctSize;
 8001a50:	1ab6      	subs	r6, r6, r2
 8001a52:	641e      	str	r6, [r3, #64]	; 0x40
            if (ep->xfer_len == 0U)
 8001a54:	2e00      	cmp	r6, #0
 8001a56:	f000 80a2 	beq.w	8001b9e <HAL_PCD_IRQHandler+0x262>
        ep = &hpcd->IN_ep[epindex];
 8001a5a:	3501      	adds	r5, #1
 8001a5c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a60:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
              ep->xfer_buff += TxPctSize;
 8001a64:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8001a66:	4415      	add	r5, r2
 8001a68:	63dd      	str	r5, [r3, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 8001a6a:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8001a6c:	442a      	add	r2, r5
 8001a6e:	645a      	str	r2, [r3, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a70:	f002 fa3c 	bl	8003eec <USB_EPStartXfer>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a74:	6820      	ldr	r0, [r4, #0]
 8001a76:	e7ae      	b.n	80019d6 <HAL_PCD_IRQHandler+0x9a>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001a78:	6822      	ldr	r2, [r4, #0]
 8001a7a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001a7e:	f023 0304 	bic.w	r3, r3, #4
 8001a82:	041b      	lsls	r3, r3, #16
 8001a84:	0c1b      	lsrs	r3, r3, #16
 8001a86:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001a8a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001a8e:	f023 0308 	bic.w	r3, r3, #8
 8001a92:	041b      	lsls	r3, r3, #16
 8001a94:	0c1b      	lsrs	r3, r3, #16
 8001a96:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 8001a9a:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	f000 8393 	beq.w	80021ca <HAL_PCD_IRQHandler+0x88e>
    HAL_PCD_ResumeCallback(hpcd);
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	f003 fefd 	bl	80058a4 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001aaa:	6822      	ldr	r2, [r4, #0]
 8001aac:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001ab0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ab4:	041b      	lsls	r3, r3, #16
 8001ab6:	0c1b      	lsrs	r3, r3, #16
 8001ab8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8001abc:	e772      	b.n	80019a4 <HAL_PCD_IRQHandler+0x68>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001abe:	f830 2026 	ldrh.w	r2, [r0, r6, lsl #2]
 8001ac2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        if (ep->doublebuffer == 0U)
 8001acc:	eb05 0185 	add.w	r1, r5, r5, lsl #2
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001ad0:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8001ad4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8001ad8:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8001adc:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f040 8083 	bne.w	8001bec <HAL_PCD_IRQHandler+0x2b0>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ae6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001aea:	f200 4206 	addw	r2, r0, #1030	; 0x406
 8001aee:	fa12 f383 	uxtah	r3, r2, r3
 8001af2:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8001af6:	f833 9032 	ldrh.w	r9, [r3, r2, lsl #3]
 8001afa:	f3c9 0909 	ubfx	r9, r9, #0, #10
          if (count != 0U)
 8001afe:	f1b9 0f00 	cmp.w	r9, #0
 8001b02:	f040 81f5 	bne.w	8001ef0 <HAL_PCD_IRQHandler+0x5b4>
        ep->xfer_count += count;
 8001b06:	eb08 0305 	add.w	r3, r8, r5
 8001b0a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001b0e:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8001b12:	444a      	add	r2, r9
 8001b14:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8001b18:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8001b1c:	444a      	add	r2, r9
 8001b1e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001b22:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8001b26:	b122      	cbz	r2, 8001b32 <HAL_PCD_IRQHandler+0x1f6>
 8001b28:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8001b2c:	454b      	cmp	r3, r9
 8001b2e:	f240 81c1 	bls.w	8001eb4 <HAL_PCD_IRQHandler+0x578>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001b32:	44a8      	add	r8, r5
 8001b34:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
 8001b38:	4620      	mov	r0, r4
 8001b3a:	f898 1168 	ldrb.w	r1, [r8, #360]	; 0x168
 8001b3e:	f003 fe77 	bl	8005830 <HAL_PCD_DataOutStageCallback>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001b42:	6820      	ldr	r0, [r4, #0]
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001b44:	e757      	b.n	80019f6 <HAL_PCD_IRQHandler+0xba>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b46:	8803      	ldrh	r3, [r0, #0]
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	ea03 030b 	and.w	r3, r3, fp
 8001b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b52:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b54:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001b58:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8001b5c:	fa10 f083 	uxtah	r0, r0, r3
 8001b60:	f240 4302 	movw	r3, #1026	; 0x402
 8001b64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
        ep->xfer_buff += ep->xfer_count;
 8001b68:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b6a:	5ac3      	ldrh	r3, [r0, r3]
 8001b6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b70:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8001b72:	4413      	add	r3, r2
 8001b74:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001b76:	4620      	mov	r0, r4
 8001b78:	f003 fe64 	bl	8005844 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001b7c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001b80:	b183      	cbz	r3, 8001ba4 <HAL_PCD_IRQHandler+0x268>
 8001b82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b84:	b973      	cbnz	r3, 8001ba4 <HAL_PCD_IRQHandler+0x268>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001b86:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8001b8a:	6820      	ldr	r0, [r4, #0]
 8001b8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b90:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001b94:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001b98:	e71d      	b.n	80019d6 <HAL_PCD_IRQHandler+0x9a>
 8001b9a:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	f003 fe50 	bl	8005844 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ba4:	6820      	ldr	r0, [r4, #0]
 8001ba6:	e716      	b.n	80019d6 <HAL_PCD_IRQHandler+0x9a>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ba8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001bac:	f894 1168 	ldrb.w	r1, [r4, #360]	; 0x168
 8001bb0:	f240 4306 	movw	r3, #1030	; 0x406
 8001bb4:	fa10 f282 	uxtah	r2, r0, r2
 8001bb8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001bbc:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8001bc0:	5ad3      	ldrh	r3, [r2, r3]
 8001bc2:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8001bc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bca:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001bce:	f002 fd17 	bl	8004600 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001bd2:	6822      	ldr	r2, [r4, #0]
 8001bd4:	8811      	ldrh	r1, [r2, #0]
 8001bd6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001bda:	400b      	ands	r3, r1
 8001bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
          HAL_PCD_SetupStageCallback(hpcd);
 8001be0:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001be2:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001be4:	f003 fe1e 	bl	8005824 <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001be8:	6820      	ldr	r0, [r4, #0]
 8001bea:	e6f4      	b.n	80019d6 <HAL_PCD_IRQHandler+0x9a>
          if (ep->type == EP_TYPE_BULK)
 8001bec:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	f000 8224 	beq.w	800203e <HAL_PCD_IRQHandler+0x702>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001bf6:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8001bfa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c06:	041b      	lsls	r3, r3, #16
 8001c08:	0c1b      	lsrs	r3, r3, #16
 8001c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c12:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001c16:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 8001c1a:	b21a      	sxth	r2, r3
 8001c1c:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
 8001c20:	f412 4f80 	tst.w	r2, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c24:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001c28:	f000 814e 	beq.w	8001ec8 <HAL_PCD_IRQHandler+0x58c>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c2c:	f200 4c02 	addw	ip, r0, #1026	; 0x402
 8001c30:	fa1c f282 	uxtah	r2, ip, r2
 8001c34:	f832 9033 	ldrh.w	r9, [r2, r3, lsl #3]
 8001c38:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 8001c3c:	f1b9 0f00 	cmp.w	r9, #0
 8001c40:	f43f af61 	beq.w	8001b06 <HAL_PCD_IRQHandler+0x1ca>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c44:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8001c48:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001c4c:	464b      	mov	r3, r9
 8001c4e:	f002 fcd7 	bl	8004600 <USB_ReadPMA>
 8001c52:	e758      	b.n	8001b06 <HAL_PCD_IRQHandler+0x1ca>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c54:	6822      	ldr	r2, [r4, #0]
 8001c56:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001c5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c5e:	041b      	lsls	r3, r3, #16
 8001c60:	0c1b      	lsrs	r3, r3, #16
 8001c62:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001c66:	4620      	mov	r0, r4
 8001c68:	f003 fdfa 	bl	8005860 <HAL_PCD_ResetCallback>
  __HAL_LOCK(hpcd);
 8001c6c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	f43f ae97 	beq.w	80019a4 <HAL_PCD_IRQHandler+0x68>
 8001c76:	2301      	movs	r3, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c78:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001c7a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001c7e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c82:	4629      	mov	r1, r5
 8001c84:	f002 fc96 	bl	80045b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c88:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
}
 8001c8c:	b003      	add	sp, #12
 8001c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c92:	8802      	ldrh	r2, [r0, #0]
 8001c94:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c98:	4013      	ands	r3, r2
 8001c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c9e:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ca0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001ca4:	f894 1168 	ldrb.w	r1, [r4, #360]	; 0x168
 8001ca8:	f240 4306 	movw	r3, #1030	; 0x406
 8001cac:	fa10 f282 	uxtah	r2, r0, r2
 8001cb0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001cb4:	5ad3      	ldrh	r3, [r2, r3]
 8001cb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cba:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001cbe:	b193      	cbz	r3, 8001ce6 <HAL_PCD_IRQHandler+0x3aa>
 8001cc0:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8001cc4:	b179      	cbz	r1, 8001ce6 <HAL_PCD_IRQHandler+0x3aa>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001cc6:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8001cca:	f002 fc99 	bl	8004600 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8001cce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8001cd2:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
 8001cd6:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001cd8:	4620      	mov	r0, r4
 8001cda:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8001cdc:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001ce0:	f003 fda6 	bl	8005830 <HAL_PCD_DataOutStageCallback>
 8001ce4:	6820      	ldr	r0, [r4, #0]
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001ce6:	8803      	ldrh	r3, [r0, #0]
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001ce8:	051d      	lsls	r5, r3, #20
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001cea:	b29a      	uxth	r2, r3
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001cec:	f53f ae73 	bmi.w	80019d6 <HAL_PCD_IRQHandler+0x9a>
 8001cf0:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8001cf4:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8001cf8:	f43f ae6d 	beq.w	80019d6 <HAL_PCD_IRQHandler+0x9a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001cfc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001d00:	f8d4 1178 	ldr.w	r1, [r4, #376]	; 0x178
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8001d0a:	293e      	cmp	r1, #62	; 0x3e
 8001d0c:	5aea      	ldrh	r2, [r5, r3]
 8001d0e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001d12:	52ea      	strh	r2, [r5, r3]
 8001d14:	f240 81cf 	bls.w	80020b6 <HAL_PCD_IRQHandler+0x77a>
 8001d18:	5aea      	ldrh	r2, [r5, r3]
 8001d1a:	094e      	lsrs	r6, r1, #5
 8001d1c:	06c9      	lsls	r1, r1, #27
 8001d1e:	bf08      	it	eq
 8001d20:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8001d24:	b292      	uxth	r2, r2
 8001d26:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8001d2a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8001d2e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001d32:	b292      	uxth	r2, r2
 8001d34:	52ea      	strh	r2, [r5, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001d36:	8803      	ldrh	r3, [r0, #0]
 8001d38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d40:	041b      	lsls	r3, r3, #16
 8001d42:	0c1b      	lsrs	r3, r3, #16
 8001d44:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001d48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d50:	8003      	strh	r3, [r0, #0]
 8001d52:	e640      	b.n	80019d6 <HAL_PCD_IRQHandler+0x9a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001d54:	6822      	ldr	r2, [r4, #0]
 8001d56:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001d5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d5e:	041b      	lsls	r3, r3, #16
 8001d60:	0c1b      	lsrs	r3, r3, #16
 8001d62:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8001d66:	b003      	add	sp, #12
 8001d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          ep->xfer_len = 0U;
 8001d6c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001d70:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8001d74:	2300      	movs	r3, #0
          if (ep->doublebuffer != 0U)
 8001d76:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
          ep->xfer_len = 0U;
 8001d7a:	642b      	str	r3, [r5, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 8001d7c:	b1d2      	cbz	r2, 8001db4 <HAL_PCD_IRQHandler+0x478>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d7e:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 8001d82:	f040 8107 	bne.w	8001f94 <HAL_PCD_IRQHandler+0x658>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d86:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f040 8223 	bne.w	80021d6 <HAL_PCD_IRQHandler+0x89a>
 8001d90:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8001d94:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001d98:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8001d9c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001da0:	b292      	uxth	r2, r2
 8001da2:	5a99      	ldrh	r1, [r3, r2]
 8001da4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001da8:	5299      	strh	r1, [r3, r2]
 8001daa:	5a99      	ldrh	r1, [r3, r2]
 8001dac:	b289      	uxth	r1, r1
 8001dae:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8001db2:	5299      	strh	r1, [r3, r2]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001db4:	4620      	mov	r0, r4
 8001db6:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8001dba:	f003 fd43 	bl	8005844 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001dbe:	6820      	ldr	r0, [r4, #0]
 8001dc0:	e609      	b.n	80019d6 <HAL_PCD_IRQHandler+0x9a>
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001dc2:	f017 0340 	ands.w	r3, r7, #64	; 0x40
 8001dc6:	9301      	str	r3, [sp, #4]
 8001dc8:	f000 809a 	beq.w	8001f00 <HAL_PCD_IRQHandler+0x5c4>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001dcc:	f896 a028 	ldrb.w	sl, [r6, #40]	; 0x28
 8001dd0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001dd4:	ea4f 0cca 	mov.w	ip, sl, lsl #3
 8001dd8:	fa1c f383 	uxtah	r3, ip, r3
 8001ddc:	f200 4902 	addw	r9, r0, #1026	; 0x402
    if (ep->xfer_len > TxPctSize)
 8001de0:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001de4:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001de8:	f833 3009 	ldrh.w	r3, [r3, r9]
    if (ep->xfer_len > TxPctSize)
 8001dec:	6c11      	ldr	r1, [r2, #64]	; 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001dee:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len > TxPctSize)
 8001df2:	4299      	cmp	r1, r3
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001df4:	fa0f fe8a 	sxth.w	lr, sl
    if (ep->xfer_len > TxPctSize)
 8001df8:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8001dfc:	f240 8168 	bls.w	80020d0 <HAL_PCD_IRQHandler+0x794>
      ep->xfer_len -= TxPctSize;
 8001e00:	1ac9      	subs	r1, r1, r3
 8001e02:	6411      	str	r1, [r2, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8001e04:	2900      	cmp	r1, #0
 8001e06:	f000 8165 	beq.w	80020d4 <HAL_PCD_IRQHandler+0x798>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e0a:	0479      	lsls	r1, r7, #17
 8001e0c:	d50d      	bpl.n	8001e2a <HAL_PCD_IRQHandler+0x4ee>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001e0e:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
 8001e12:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001e16:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001e1a:	0412      	lsls	r2, r2, #16
 8001e1c:	0c12      	lsrs	r2, r2, #16
 8001e1e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001e22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e26:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8001e2a:	eb08 0705 	add.w	r7, r8, r5
 8001e2e:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8001e32:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8001e36:	2a01      	cmp	r2, #1
 8001e38:	f040 809a 	bne.w	8001f70 <HAL_PCD_IRQHandler+0x634>
        ep->xfer_buff += TxPctSize;
 8001e3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001e3e:	f8d7 c048 	ldr.w	ip, [r7, #72]	; 0x48
        ep->xfer_buff += TxPctSize;
 8001e42:	18d1      	adds	r1, r2, r3
        ep->xfer_count += TxPctSize;
 8001e44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
        ep->xfer_buff += TxPctSize;
 8001e46:	63f9      	str	r1, [r7, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 8001e48:	441a      	add	r2, r3
 8001e4a:	647a      	str	r2, [r7, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8001e4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e4e:	4594      	cmp	ip, r2
 8001e50:	f0c0 82b0 	bcc.w	80023b4 <HAL_PCD_IRQHandler+0xa78>
          ep->xfer_len_db -= len;
 8001e54:	ebac 0302 	sub.w	r3, ip, r2
 8001e58:	64bb      	str	r3, [r7, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001e5a:	b293      	uxth	r3, r2
 8001e5c:	f896 7029 	ldrb.w	r7, [r6, #41]	; 0x29
 8001e60:	2f00      	cmp	r7, #0
 8001e62:	f040 829d 	bne.w	80023a0 <HAL_PCD_IRQHandler+0xa64>
 8001e66:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8001e6a:	fa19 f987 	uxtah	r9, r9, r7
 8001e6e:	2a3e      	cmp	r2, #62	; 0x3e
 8001e70:	f839 703e 	ldrh.w	r7, [r9, lr, lsl #3]
 8001e74:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8001e78:	f829 703e 	strh.w	r7, [r9, lr, lsl #3]
 8001e7c:	f240 82c1 	bls.w	8002402 <HAL_PCD_IRQHandler+0xac6>
 8001e80:	0957      	lsrs	r7, r2, #5
 8001e82:	06d2      	lsls	r2, r2, #27
 8001e84:	f839 203e 	ldrh.w	r2, [r9, lr, lsl #3]
 8001e88:	bf08      	it	eq
 8001e8a:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8001e8e:	b292      	uxth	r2, r2
 8001e90:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8001e94:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8001e98:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001e9c:	b292      	uxth	r2, r2
 8001e9e:	f829 203e 	strh.w	r2, [r9, lr, lsl #3]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001ea2:	eb08 0205 	add.w	r2, r8, r5
 8001ea6:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001eaa:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8001eac:	f002 fb98 	bl	80045e0 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001eb0:	6820      	ldr	r0, [r4, #0]
 8001eb2:	e05d      	b.n	8001f70 <HAL_PCD_IRQHandler+0x634>
        ep = &hpcd->OUT_ep[epindex];
 8001eb4:	2128      	movs	r1, #40	; 0x28
 8001eb6:	fb01 4105 	mla	r1, r1, r5, r4
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001eba:	6820      	ldr	r0, [r4, #0]
 8001ebc:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8001ec0:	f002 f814 	bl	8003eec <USB_EPStartXfer>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001ec4:	6820      	ldr	r0, [r4, #0]
 8001ec6:	e596      	b.n	80019f6 <HAL_PCD_IRQHandler+0xba>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ec8:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 8001ecc:	fa1c f282 	uxtah	r2, ip, r2
 8001ed0:	f832 9033 	ldrh.w	r9, [r2, r3, lsl #3]
 8001ed4:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 8001ed8:	f1b9 0f00 	cmp.w	r9, #0
 8001edc:	f43f ae13 	beq.w	8001b06 <HAL_PCD_IRQHandler+0x1ca>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001ee0:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8001ee4:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001ee8:	464b      	mov	r3, r9
 8001eea:	f002 fb89 	bl	8004600 <USB_ReadPMA>
 8001eee:	e60a      	b.n	8001b06 <HAL_PCD_IRQHandler+0x1ca>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001ef0:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8001ef4:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001ef8:	464b      	mov	r3, r9
 8001efa:	f002 fb81 	bl	8004600 <USB_ReadPMA>
 8001efe:	e602      	b.n	8001b06 <HAL_PCD_IRQHandler+0x1ca>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f00:	f896 e028 	ldrb.w	lr, [r6, #40]	; 0x28
 8001f04:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001f08:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 8001f0c:	fa1c f383 	uxtah	r3, ip, r3
 8001f10:	f200 4a06 	addw	sl, r0, #1030	; 0x406
    if (ep->xfer_len >= TxPctSize)
 8001f14:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001f18:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f1c:	f833 300a 	ldrh.w	r3, [r3, sl]
    if (ep->xfer_len >= TxPctSize)
 8001f20:	6c11      	ldr	r1, [r2, #64]	; 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f22:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= TxPctSize)
 8001f26:	4299      	cmp	r1, r3
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f28:	fa0f f98e 	sxth.w	r9, lr
    if (ep->xfer_len >= TxPctSize)
 8001f2c:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8001f30:	f0c0 810e 	bcc.w	8002150 <HAL_PCD_IRQHandler+0x814>
      ep->xfer_len -= TxPctSize;
 8001f34:	1ac9      	subs	r1, r1, r3
 8001f36:	6411      	str	r1, [r2, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8001f38:	2900      	cmp	r1, #0
 8001f3a:	f000 810b 	beq.w	8002154 <HAL_PCD_IRQHandler+0x818>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001f3e:	0479      	lsls	r1, r7, #17
 8001f40:	d40d      	bmi.n	8001f5e <HAL_PCD_IRQHandler+0x622>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001f42:	f830 2029 	ldrh.w	r2, [r0, r9, lsl #2]
 8001f46:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001f4a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f4e:	0412      	lsls	r2, r2, #16
 8001f50:	0c12      	lsrs	r2, r2, #16
 8001f52:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001f56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f5a:	f820 2029 	strh.w	r2, [r0, r9, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8001f5e:	eb08 0705 	add.w	r7, r8, r5
 8001f62:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8001f66:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8001f6a:	2a01      	cmp	r2, #1
 8001f6c:	f000 81df 	beq.w	800232e <HAL_PCD_IRQHandler+0x9f2>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001f70:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 8001f74:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f82:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f8e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

  return HAL_OK;
 8001f92:	e520      	b.n	80019d6 <HAL_PCD_IRQHandler+0x9a>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f94:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
 8001f98:	2a00      	cmp	r2, #0
 8001f9a:	f040 812a 	bne.w	80021f2 <HAL_PCD_IRQHandler+0x8b6>
 8001f9e:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8001fa2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001fa6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8001faa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001fae:	e6f7      	b.n	8001da0 <HAL_PCD_IRQHandler+0x464>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001fb0:	6822      	ldr	r2, [r4, #0]
 8001fb2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001fb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fba:	041b      	lsls	r3, r3, #16
 8001fbc:	0c1b      	lsrs	r3, r3, #16
 8001fbe:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001fc2:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d17e      	bne.n	80020c8 <HAL_PCD_IRQHandler+0x78c>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001fca:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	f043 0304 	orr.w	r3, r3, #4
 8001fd4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001fd8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001fdc:	b29b      	uxth	r3, r3
      hpcd->LPM_State = LPM_L1;
 8001fde:	2101      	movs	r1, #1
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001fe0:	f043 0308 	orr.w	r3, r3, #8
 8001fe4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 8001fe8:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001fec:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8001ff0:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8001ff4:	f003 033c 	and.w	r3, r3, #60	; 0x3c
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001ff8:	4620      	mov	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001ffa:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
}
 8001ffe:	b003      	add	sp, #12
 8002000:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002004:	f003 bd3e 	b.w	8005a84 <HAL_PCDEx_LPM_Callback>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002008:	6822      	ldr	r2, [r4, #0]
 800200a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800200e:	b29b      	uxth	r3, r3
 8002010:	f043 0308 	orr.w	r3, r3, #8
 8002014:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002018:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800201c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002020:	041b      	lsls	r3, r3, #16
 8002022:	0c1b      	lsrs	r3, r3, #16
 8002024:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002028:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800202c:	b29b      	uxth	r3, r3
 800202e:	f043 0304 	orr.w	r3, r3, #4
    HAL_PCD_SuspendCallback(hpcd);
 8002032:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002034:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8002038:	f003 fc24 	bl	8005884 <HAL_PCD_SuspendCallback>
    return;
 800203c:	e4b2      	b.n	80019a4 <HAL_PCD_IRQHandler+0x68>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800203e:	f417 4280 	ands.w	r2, r7, #16384	; 0x4000
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002042:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002046:	f000 80e2 	beq.w	800220e <HAL_PCD_IRQHandler+0x8d2>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800204a:	f200 4202 	addw	r2, r0, #1026	; 0x402
 800204e:	fa12 f383 	uxtah	r3, r2, r3
 8002052:	f891 c168 	ldrb.w	ip, [r1, #360]	; 0x168
    if (ep->xfer_len >= count)
 8002056:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800205a:	f833 303c 	ldrh.w	r3, [r3, ip, lsl #3]
 800205e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8002062:	429a      	cmp	r2, r3
 8002064:	4699      	mov	r9, r3
 8002066:	f0c0 814c 	bcc.w	8002302 <HAL_PCD_IRQHandler+0x9c6>
      ep->xfer_len -= count;
 800206a:	1ad2      	subs	r2, r2, r3
 800206c:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8002070:	2a00      	cmp	r2, #0
 8002072:	f000 8149 	beq.w	8002308 <HAL_PCD_IRQHandler+0x9cc>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002076:	0679      	lsls	r1, r7, #25
 8002078:	d50f      	bpl.n	800209a <HAL_PCD_IRQHandler+0x75e>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800207a:	fa0f fc8c 	sxth.w	ip, ip
 800207e:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 8002082:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002086:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800208a:	0412      	lsls	r2, r2, #16
 800208c:	0c12      	lsrs	r2, r2, #16
 800208e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002092:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002096:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
    if (count != 0U)
 800209a:	b90b      	cbnz	r3, 80020a0 <HAL_PCD_IRQHandler+0x764>
 800209c:	4699      	mov	r9, r3
 800209e:	e532      	b.n	8001b06 <HAL_PCD_IRQHandler+0x1ca>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020a0:	eb08 0105 	add.w	r1, r8, r5
 80020a4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80020a8:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 80020ac:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80020b0:	f002 faa6 	bl	8004600 <USB_ReadPMA>
 80020b4:	e527      	b.n	8001b06 <HAL_PCD_IRQHandler+0x1ca>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80020b6:	2900      	cmp	r1, #0
 80020b8:	f040 80de 	bne.w	8002278 <HAL_PCD_IRQHandler+0x93c>
 80020bc:	5aea      	ldrh	r2, [r5, r3]
 80020be:	b292      	uxth	r2, r2
 80020c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020c4:	52ea      	strh	r2, [r5, r3]
 80020c6:	e636      	b.n	8001d36 <HAL_PCD_IRQHandler+0x3fa>
      HAL_PCD_SuspendCallback(hpcd);
 80020c8:	4620      	mov	r0, r4
 80020ca:	f003 fbdb 	bl	8005884 <HAL_PCD_SuspendCallback>
 80020ce:	e469      	b.n	80019a4 <HAL_PCD_IRQHandler+0x68>
 80020d0:	2300      	movs	r3, #0
 80020d2:	6413      	str	r3, [r2, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020d4:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f040 80d9 	bne.w	8002290 <HAL_PCD_IRQHandler+0x954>
 80020de:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80020e2:	fa19 f983 	uxtah	r9, r9, r3
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020e6:	f20c 4206 	addw	r2, ip, #1030	; 0x406
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020ea:	f839 303e 	ldrh.w	r3, [r9, lr, lsl #3]
 80020ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020f2:	f829 303e 	strh.w	r3, [r9, lr, lsl #3]
 80020f6:	f839 303e 	ldrh.w	r3, [r9, lr, lsl #3]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002100:	f829 303e 	strh.w	r3, [r9, lr, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002104:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002108:	4402      	add	r2, r0
 800210a:	b29b      	uxth	r3, r3
 800210c:	5ad1      	ldrh	r1, [r2, r3]
 800210e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002112:	52d1      	strh	r1, [r2, r3]
 8002114:	5ad1      	ldrh	r1, [r2, r3]
 8002116:	b289      	uxth	r1, r1
 8002118:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800211c:	52d1      	strh	r1, [r2, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800211e:	4620      	mov	r0, r4
 8002120:	4651      	mov	r1, sl
 8002122:	f003 fb8f 	bl	8005844 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002126:	047d      	lsls	r5, r7, #17
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002128:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800212a:	f57f af21 	bpl.w	8001f70 <HAL_PCD_IRQHandler+0x634>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800212e:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 8002132:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800213a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800213e:	041b      	lsls	r3, r3, #16
 8002140:	0c1b      	lsrs	r3, r3, #16
 8002142:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800214a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800214e:	e70f      	b.n	8001f70 <HAL_PCD_IRQHandler+0x634>
 8002150:	9b01      	ldr	r3, [sp, #4]
 8002152:	6413      	str	r3, [r2, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002154:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 8002158:	2b00      	cmp	r3, #0
 800215a:	f040 80ab 	bne.w	80022b4 <HAL_PCD_IRQHandler+0x978>
 800215e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002162:	f20c 4102 	addw	r1, ip, #1026	; 0x402
 8002166:	b292      	uxth	r2, r2
 8002168:	4401      	add	r1, r0
 800216a:	5a8b      	ldrh	r3, [r1, r2]
 800216c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002170:	528b      	strh	r3, [r1, r2]
 8002172:	5a8b      	ldrh	r3, [r1, r2]
 8002174:	b29b      	uxth	r3, r3
 8002176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800217a:	528b      	strh	r3, [r1, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800217c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002180:	fa1a f383 	uxtah	r3, sl, r3
 8002184:	f833 2039 	ldrh.w	r2, [r3, r9, lsl #3]
 8002188:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800218c:	f823 2039 	strh.w	r2, [r3, r9, lsl #3]
 8002190:	f833 2039 	ldrh.w	r2, [r3, r9, lsl #3]
 8002194:	b292      	uxth	r2, r2
 8002196:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800219a:	f823 2039 	strh.w	r2, [r3, r9, lsl #3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800219e:	4620      	mov	r0, r4
 80021a0:	4671      	mov	r1, lr
 80021a2:	f003 fb4f 	bl	8005844 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80021a6:	047d      	lsls	r5, r7, #17
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80021a8:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80021aa:	d5c0      	bpl.n	800212e <HAL_PCD_IRQHandler+0x7f2>
 80021ac:	e6e0      	b.n	8001f70 <HAL_PCD_IRQHandler+0x634>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80021ae:	6822      	ldr	r2, [r4, #0]
 80021b0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80021b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021b8:	041b      	lsls	r3, r3, #16
 80021ba:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_SOFCallback(hpcd);
 80021bc:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80021be:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80021c2:	f003 fb49 	bl	8005858 <HAL_PCD_SOFCallback>
    return;
 80021c6:	f7ff bbed 	b.w	80019a4 <HAL_PCD_IRQHandler+0x68>
      hpcd->LPM_State = LPM_L0;
 80021ca:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80021ce:	4620      	mov	r0, r4
 80021d0:	f003 fc58 	bl	8005a84 <HAL_PCDEx_LPM_Callback>
 80021d4:	e466      	b.n	8001aa4 <HAL_PCD_IRQHandler+0x168>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	f47f adec 	bne.w	8001db4 <HAL_PCD_IRQHandler+0x478>
 80021dc:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 80021e0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80021e4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80021e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80021ec:	b292      	uxth	r2, r2
 80021ee:	529f      	strh	r7, [r3, r2]
 80021f0:	e5e0      	b.n	8001db4 <HAL_PCD_IRQHandler+0x478>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021f2:	2a01      	cmp	r2, #1
 80021f4:	f47f adde 	bne.w	8001db4 <HAL_PCD_IRQHandler+0x478>
 80021f8:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 80021fc:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8002200:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8002204:	f202 4202 	addw	r2, r2, #1026	; 0x402
 8002208:	b289      	uxth	r1, r1
 800220a:	5253      	strh	r3, [r2, r1]
 800220c:	e5d2      	b.n	8001db4 <HAL_PCD_IRQHandler+0x478>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800220e:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 8002212:	fa1c f383 	uxtah	r3, ip, r3
 8002216:	f891 c168 	ldrb.w	ip, [r1, #360]	; 0x168
    if (ep->xfer_len >= count)
 800221a:	f8d1 e180 	ldr.w	lr, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800221e:	f833 303c 	ldrh.w	r3, [r3, ip, lsl #3]
 8002222:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8002226:	459e      	cmp	lr, r3
 8002228:	4699      	mov	r9, r3
 800222a:	d355      	bcc.n	80022d8 <HAL_PCD_IRQHandler+0x99c>
      ep->xfer_len -= count;
 800222c:	ebae 0203 	sub.w	r2, lr, r3
 8002230:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8002234:	2a00      	cmp	r2, #0
 8002236:	d051      	beq.n	80022dc <HAL_PCD_IRQHandler+0x9a0>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002238:	067a      	lsls	r2, r7, #25
 800223a:	d40f      	bmi.n	800225c <HAL_PCD_IRQHandler+0x920>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800223c:	fa0f fc8c 	sxth.w	ip, ip
 8002240:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 8002244:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002248:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800224c:	0412      	lsls	r2, r2, #16
 800224e:	0c12      	lsrs	r2, r2, #16
 8002250:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002254:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002258:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
    if (count != 0U)
 800225c:	2b00      	cmp	r3, #0
 800225e:	f43f af1d 	beq.w	800209c <HAL_PCD_IRQHandler+0x760>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002262:	eb08 0105 	add.w	r1, r8, r5
 8002266:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800226a:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 800226e:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002272:	f002 f9c5 	bl	8004600 <USB_ReadPMA>
 8002276:	e446      	b.n	8001b06 <HAL_PCD_IRQHandler+0x1ca>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002278:	07ca      	lsls	r2, r1, #31
 800227a:	5aea      	ldrh	r2, [r5, r3]
 800227c:	ea4f 0651 	mov.w	r6, r1, lsr #1
 8002280:	bf48      	it	mi
 8002282:	3601      	addmi	r6, #1
 8002284:	b292      	uxth	r2, r2
 8002286:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 800228a:	b292      	uxth	r2, r2
 800228c:	52ea      	strh	r2, [r5, r3]
 800228e:	e552      	b.n	8001d36 <HAL_PCD_IRQHandler+0x3fa>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002290:	2b01      	cmp	r3, #1
 8002292:	f47f af44 	bne.w	800211e <HAL_PCD_IRQHandler+0x7e2>
 8002296:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800229a:	fa19 f983 	uxtah	r9, r9, r3
 800229e:	2100      	movs	r1, #0
 80022a0:	f829 103e 	strh.w	r1, [r9, lr, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022a4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80022a8:	f20c 4206 	addw	r2, ip, #1030	; 0x406
 80022ac:	4402      	add	r2, r0
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	52d1      	strh	r1, [r2, r3]
 80022b2:	e734      	b.n	800211e <HAL_PCD_IRQHandler+0x7e2>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	f47f af72 	bne.w	800219e <HAL_PCD_IRQHandler+0x862>
 80022ba:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80022be:	f20c 4202 	addw	r2, ip, #1026	; 0x402
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	4402      	add	r2, r0
 80022c6:	2100      	movs	r1, #0
 80022c8:	52d1      	strh	r1, [r2, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022ca:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80022ce:	fa1a f383 	uxtah	r3, sl, r3
 80022d2:	f823 1039 	strh.w	r1, [r3, r9, lsl #3]
 80022d6:	e762      	b.n	800219e <HAL_PCD_IRQHandler+0x862>
 80022d8:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022dc:	fa0f f18c 	sxth.w	r1, ip
 80022e0:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 80022e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80022e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80022ec:	0412      	lsls	r2, r2, #16
 80022ee:	0c12      	lsrs	r2, r2, #16
 80022f0:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 80022f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022fc:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 8002300:	e79a      	b.n	8002238 <HAL_PCD_IRQHandler+0x8fc>
 8002302:	2200      	movs	r2, #0
 8002304:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002308:	fa0f f18c 	sxth.w	r1, ip
 800230c:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8002310:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002314:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002318:	0412      	lsls	r2, r2, #16
 800231a:	0c12      	lsrs	r2, r2, #16
 800231c:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8002320:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002324:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002328:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 800232c:	e6a3      	b.n	8002076 <HAL_PCD_IRQHandler+0x73a>
        ep->xfer_buff += TxPctSize;
 800232e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8002330:	f8d7 c048 	ldr.w	ip, [r7, #72]	; 0x48
        ep->xfer_buff += TxPctSize;
 8002334:	18d1      	adds	r1, r2, r3
        ep->xfer_count += TxPctSize;
 8002336:	6c7a      	ldr	r2, [r7, #68]	; 0x44
        ep->xfer_buff += TxPctSize;
 8002338:	63f9      	str	r1, [r7, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 800233a:	441a      	add	r2, r3
 800233c:	647a      	str	r2, [r7, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800233e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002340:	4594      	cmp	ip, r2
 8002342:	d347      	bcc.n	80023d4 <HAL_PCD_IRQHandler+0xa98>
          ep->xfer_len_db -= len;
 8002344:	ebac 0302 	sub.w	r3, ip, r2
 8002348:	64bb      	str	r3, [r7, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800234a:	b293      	uxth	r3, r2
 800234c:	f896 7029 	ldrb.w	r7, [r6, #41]	; 0x29
 8002350:	bbbf      	cbnz	r7, 80023c2 <HAL_PCD_IRQHandler+0xa86>
 8002352:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8002356:	fa1a f787 	uxtah	r7, sl, r7
 800235a:	2a3e      	cmp	r2, #62	; 0x3e
 800235c:	f837 c039 	ldrh.w	ip, [r7, r9, lsl #3]
 8002360:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8002364:	f827 c039 	strh.w	ip, [r7, r9, lsl #3]
 8002368:	d954      	bls.n	8002414 <HAL_PCD_IRQHandler+0xad8>
 800236a:	ea4f 1c52 	mov.w	ip, r2, lsr #5
 800236e:	06d2      	lsls	r2, r2, #27
 8002370:	f837 2039 	ldrh.w	r2, [r7, r9, lsl #3]
 8002374:	bf08      	it	eq
 8002376:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 800237a:	b292      	uxth	r2, r2
 800237c:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 8002380:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002384:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002388:	b292      	uxth	r2, r2
 800238a:	f827 2039 	strh.w	r2, [r7, r9, lsl #3]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800238e:	eb08 0205 	add.w	r2, r8, r5
 8002392:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002396:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8002398:	f002 f922 	bl	80045e0 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800239c:	6820      	ldr	r0, [r4, #0]
 800239e:	e5e7      	b.n	8001f70 <HAL_PCD_IRQHandler+0x634>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023a0:	2f01      	cmp	r7, #1
 80023a2:	f47f ad7e 	bne.w	8001ea2 <HAL_PCD_IRQHandler+0x566>
 80023a6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80023aa:	fa19 f982 	uxtah	r9, r9, r2
 80023ae:	f829 303e 	strh.w	r3, [r9, lr, lsl #3]
 80023b2:	e576      	b.n	8001ea2 <HAL_PCD_IRQHandler+0x566>
        else if (ep->xfer_len_db == 0U)
 80023b4:	f1bc 0f00 	cmp.w	ip, #0
 80023b8:	d113      	bne.n	80023e2 <HAL_PCD_IRQHandler+0xaa6>
          ep->xfer_fill_db = 0U;
 80023ba:	f887 c04c 	strb.w	ip, [r7, #76]	; 0x4c
 80023be:	461a      	mov	r2, r3
 80023c0:	e54c      	b.n	8001e5c <HAL_PCD_IRQHandler+0x520>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023c2:	2f01      	cmp	r7, #1
 80023c4:	d1e3      	bne.n	800238e <HAL_PCD_IRQHandler+0xa52>
 80023c6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80023ca:	fa1a f282 	uxtah	r2, sl, r2
 80023ce:	f822 3039 	strh.w	r3, [r2, r9, lsl #3]
 80023d2:	e7dc      	b.n	800238e <HAL_PCD_IRQHandler+0xa52>
        else if (ep->xfer_len_db == 0U)
 80023d4:	f1bc 0f00 	cmp.w	ip, #0
 80023d8:	d10b      	bne.n	80023f2 <HAL_PCD_IRQHandler+0xab6>
          ep->xfer_fill_db = 0U;
 80023da:	f887 c04c 	strb.w	ip, [r7, #76]	; 0x4c
 80023de:	461a      	mov	r2, r3
 80023e0:	e7b4      	b.n	800234c <HAL_PCD_IRQHandler+0xa10>
          ep->xfer_fill_db = 0U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 80023e8:	64bb      	str	r3, [r7, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023ea:	4662      	mov	r2, ip
 80023ec:	fa1f f38c 	uxth.w	r3, ip
 80023f0:	e534      	b.n	8001e5c <HAL_PCD_IRQHandler+0x520>
          ep->xfer_len_db = 0U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	64bb      	str	r3, [r7, #72]	; 0x48
          ep->xfer_fill_db = 0;
 80023f6:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023fa:	4662      	mov	r2, ip
 80023fc:	fa1f f38c 	uxth.w	r3, ip
 8002400:	e7a4      	b.n	800234c <HAL_PCD_IRQHandler+0xa10>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002402:	b982      	cbnz	r2, 8002426 <HAL_PCD_IRQHandler+0xaea>
 8002404:	f839 203e 	ldrh.w	r2, [r9, lr, lsl #3]
 8002408:	b292      	uxth	r2, r2
 800240a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800240e:	f829 203e 	strh.w	r2, [r9, lr, lsl #3]
 8002412:	e546      	b.n	8001ea2 <HAL_PCD_IRQHandler+0x566>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002414:	b9a2      	cbnz	r2, 8002440 <HAL_PCD_IRQHandler+0xb04>
 8002416:	f837 2039 	ldrh.w	r2, [r7, r9, lsl #3]
 800241a:	b292      	uxth	r2, r2
 800241c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002420:	f827 2039 	strh.w	r2, [r7, r9, lsl #3]
 8002424:	e7b3      	b.n	800238e <HAL_PCD_IRQHandler+0xa52>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002426:	0857      	lsrs	r7, r2, #1
 8002428:	07d2      	lsls	r2, r2, #31
 800242a:	f839 203e 	ldrh.w	r2, [r9, lr, lsl #3]
 800242e:	bf48      	it	mi
 8002430:	3701      	addmi	r7, #1
 8002432:	b292      	uxth	r2, r2
 8002434:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8002438:	b292      	uxth	r2, r2
 800243a:	f829 203e 	strh.w	r2, [r9, lr, lsl #3]
 800243e:	e530      	b.n	8001ea2 <HAL_PCD_IRQHandler+0x566>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002440:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 8002444:	07d2      	lsls	r2, r2, #31
 8002446:	f837 2039 	ldrh.w	r2, [r7, r9, lsl #3]
 800244a:	bf48      	it	mi
 800244c:	f10c 0c01 	addmi.w	ip, ip, #1
 8002450:	b292      	uxth	r2, r2
 8002452:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 8002456:	b292      	uxth	r2, r2
 8002458:	f827 2039 	strh.w	r2, [r7, r9, lsl #3]
 800245c:	e797      	b.n	800238e <HAL_PCD_IRQHandler+0xa52>
 800245e:	bf00      	nop
 8002460:	ffff8f0f 	.word	0xffff8f0f

08002464 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8002464:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 8002468:	2a01      	cmp	r2, #1
 800246a:	d00d      	beq.n	8002488 <HAL_PCD_SetAddress+0x24>
{
 800246c:	b510      	push	{r4, lr}
 800246e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002470:	2201      	movs	r2, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002472:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8002474:	f884 22a8 	strb.w	r2, [r4, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002478:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800247c:	f002 f89a 	bl	80045b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002480:	2000      	movs	r0, #0
 8002482:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8002486:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002488:	2002      	movs	r0, #2
}
 800248a:	4770      	bx	lr

0800248c <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 800248c:	f001 0c07 	and.w	ip, r1, #7
 8002490:	0609      	lsls	r1, r1, #24
{
 8002492:	b510      	push	{r4, lr}
 8002494:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8002496:	d422      	bmi.n	80024de <HAL_PCD_EP_Open+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002498:	2128      	movs	r1, #40	; 0x28
 800249a:	fb01 010c 	mla	r1, r1, ip, r0
    ep->is_in = 0U;
 800249e:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
 80024a2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80024a6:	f04f 0e00 	mov.w	lr, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024aa:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 80024ae:	f880 e169 	strb.w	lr, [r0, #361]	; 0x169
  if (ep_type == EP_TYPE_BULK)
 80024b2:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 80024b4:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 80024b6:	bf04      	itt	eq
 80024b8:	2300      	moveq	r3, #0
 80024ba:	710b      	strbeq	r3, [r1, #4]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024bc:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 80024c0:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 80024c2:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d015      	beq.n	80024f6 <HAL_PCD_EP_Open+0x6a>
 80024ca:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80024cc:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80024ce:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80024d2:	f001 fa65 	bl	80039a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024d6:	2000      	movs	r0, #0
 80024d8:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80024dc:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024de:	f10c 0101 	add.w	r1, ip, #1
    ep->is_in = 1U;
 80024e2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80024e6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80024ea:	f04f 0e01 	mov.w	lr, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024ee:	4601      	mov	r1, r0
    ep->is_in = 1U;
 80024f0:	f880 e001 	strb.w	lr, [r0, #1]
 80024f4:	e7dd      	b.n	80024b2 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 80024f6:	2002      	movs	r0, #2
}
 80024f8:	bd10      	pop	{r4, pc}
 80024fa:	bf00      	nop

080024fc <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80024fc:	060a      	lsls	r2, r1, #24
{
 80024fe:	b510      	push	{r4, lr}
 8002500:	f001 0307 	and.w	r3, r1, #7
 8002504:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8002506:	d41a      	bmi.n	800253e <HAL_PCD_EP_Close+0x42>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002508:	2128      	movs	r1, #40	; 0x28
 800250a:	fb01 0103 	mla	r1, r1, r3, r0
    ep->is_in = 0U;
 800250e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002512:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002516:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 800251a:	2000      	movs	r0, #0
 800251c:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8002520:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8002522:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002526:	2b01      	cmp	r3, #1
 8002528:	d016      	beq.n	8002558 <HAL_PCD_EP_Close+0x5c>
 800252a:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800252c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800252e:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002532:	f001 fbfb 	bl	8003d2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002536:	2000      	movs	r0, #0
 8002538:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800253c:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800253e:	1c5a      	adds	r2, r3, #1
    ep->is_in = 1U;
 8002540:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002544:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002548:	4611      	mov	r1, r2
    ep->is_in = 1U;
 800254a:	2001      	movs	r0, #1
 800254c:	7050      	strb	r0, [r2, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800254e:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8002550:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002554:	2b01      	cmp	r3, #1
 8002556:	d1e8      	bne.n	800252a <HAL_PCD_EP_Close+0x2e>
 8002558:	2002      	movs	r0, #2
}
 800255a:	bd10      	pop	{r4, pc}

0800255c <HAL_PCD_EP_Receive>:
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800255c:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8002560:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
{
 8002564:	b510      	push	{r4, lr}
  ep->xfer_buff = pBuf;
 8002566:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
  ep->xfer_count = 0U;
 800256a:	2400      	movs	r4, #0
  ep->xfer_buff = pBuf;
 800256c:	f8cc 217c 	str.w	r2, [ip, #380]	; 0x17c
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002570:	2228      	movs	r2, #40	; 0x28
 8002572:	fb02 0201 	mla	r2, r2, r1, r0
  ep->num = ep_addr & EP_ADDR_MSK;
 8002576:	f88c 1168 	strb.w	r1, [ip, #360]	; 0x168
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800257a:	6800      	ldr	r0, [r0, #0]
  ep->is_in = 0U;
 800257c:	f88c 4169 	strb.w	r4, [ip, #361]	; 0x169
  ep->xfer_count = 0U;
 8002580:	e9cc 3460 	strd	r3, r4, [ip, #384]	; 0x180
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002584:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 8002588:	f001 fcb0 	bl	8003eec <USB_EPStartXfer>
}
 800258c:	4620      	mov	r0, r4
 800258e:	bd10      	pop	{r4, pc}

08002590 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002590:	f001 0107 	and.w	r1, r1, #7
 8002594:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002598:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 800259c:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop

080025a4 <HAL_PCD_EP_Transmit>:
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025a4:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 80025a8:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
{
 80025ac:	b510      	push	{r4, lr}
  ep->xfer_buff = pBuf;
 80025ae:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
{
 80025b2:	4686      	mov	lr, r0
  ep->xfer_fill_db = 1U;
 80025b4:	2001      	movs	r0, #1
  ep->xfer_len = len;
 80025b6:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
  ep->xfer_len_db = len;
 80025ba:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025be:	180b      	adds	r3, r1, r0
  ep->xfer_count = 0U;
 80025c0:	2400      	movs	r4, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  ep->xfer_fill_db = 1U;
 80025c6:	f88c 004c 	strb.w	r0, [ip, #76]	; 0x4c
  ep->is_in = 1U;
 80025ca:	f88c 0029 	strb.w	r0, [ip, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 80025ce:	f88c 1028 	strb.w	r1, [ip, #40]	; 0x28
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025d2:	f8de 0000 	ldr.w	r0, [lr]
  ep->xfer_buff = pBuf;
 80025d6:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
  ep->xfer_count = 0U;
 80025da:	f8cc 4044 	str.w	r4, [ip, #68]	; 0x44
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025de:	eb0e 01c3 	add.w	r1, lr, r3, lsl #3
 80025e2:	f001 fc83 	bl	8003eec <USB_EPStartXfer>
}
 80025e6:	4620      	mov	r0, r4
 80025e8:	bd10      	pop	{r4, pc}
 80025ea:	bf00      	nop

080025ec <HAL_PCD_EP_SetStall>:
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80025ec:	6842      	ldr	r2, [r0, #4]
 80025ee:	f001 0307 	and.w	r3, r1, #7
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d830      	bhi.n	8002658 <HAL_PCD_EP_SetStall+0x6c>
  if ((0x80U & ep_addr) == 0x80U)
 80025f6:	060a      	lsls	r2, r1, #24
{
 80025f8:	b510      	push	{r4, lr}
 80025fa:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80025fc:	d41b      	bmi.n	8002636 <HAL_PCD_EP_SetStall+0x4a>
    ep->is_in = 0U;
 80025fe:	eb01 0281 	add.w	r2, r1, r1, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 8002602:	2028      	movs	r0, #40	; 0x28
 8002604:	fb00 4101 	mla	r1, r0, r1, r4
    ep->is_in = 0U;
 8002608:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 800260c:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8002610:	2000      	movs	r0, #0
 8002612:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 1U;
 8002616:	2201      	movs	r2, #1
 8002618:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800261a:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800261c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002620:	4293      	cmp	r3, r2
 8002622:	d017      	beq.n	8002654 <HAL_PCD_EP_SetStall+0x68>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002624:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002626:	f884 22a8 	strb.w	r2, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800262a:	f001 ff4b 	bl	80044c4 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 800262e:	2000      	movs	r0, #0
 8002630:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8002634:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002636:	1c5a      	adds	r2, r3, #1
    ep->is_in = 1U;
 8002638:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800263c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002640:	4611      	mov	r1, r2
    ep->is_in = 1U;
 8002642:	2001      	movs	r0, #1
 8002644:	7050      	strb	r0, [r2, #1]
  ep->is_stall = 1U;
 8002646:	2201      	movs	r2, #1
 8002648:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800264a:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800264c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002650:	4293      	cmp	r3, r2
 8002652:	d1e7      	bne.n	8002624 <HAL_PCD_EP_SetStall+0x38>
 8002654:	2002      	movs	r0, #2
}
 8002656:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002658:	2001      	movs	r0, #1
}
 800265a:	4770      	bx	lr

0800265c <HAL_PCD_EP_ClrStall>:
{
 800265c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800265e:	6843      	ldr	r3, [r0, #4]
 8002660:	f001 020f 	and.w	r2, r1, #15
 8002664:	429a      	cmp	r2, r3
 8002666:	d832      	bhi.n	80026ce <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 8002668:	060a      	lsls	r2, r1, #24
 800266a:	4604      	mov	r4, r0
 800266c:	f001 0307 	and.w	r3, r1, #7
 8002670:	d41c      	bmi.n	80026ac <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002672:	2128      	movs	r1, #40	; 0x28
 8002674:	fb01 0103 	mla	r1, r1, r3, r0
    ep->is_in = 0U;
 8002678:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800267c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002680:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8002684:	2000      	movs	r0, #0
  ep->is_stall = 0U;
 8002686:	2500      	movs	r5, #0
    ep->is_in = 0U;
 8002688:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 800268c:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800268e:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8002690:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002694:	2b01      	cmp	r3, #1
 8002696:	d018      	beq.n	80026ca <HAL_PCD_EP_ClrStall+0x6e>
 8002698:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800269a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800269c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80026a0:	f001 ff38 	bl	8004514 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80026a4:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 80026a8:	4628      	mov	r0, r5
}
 80026aa:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026ac:	1c5a      	adds	r2, r3, #1
    ep->is_in = 1U;
 80026ae:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80026b2:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026b6:	4611      	mov	r1, r2
    ep->is_in = 1U;
 80026b8:	2001      	movs	r0, #1
  ep->is_stall = 0U;
 80026ba:	2500      	movs	r5, #0
    ep->is_in = 1U;
 80026bc:	7050      	strb	r0, [r2, #1]
  ep->is_stall = 0U;
 80026be:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026c0:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80026c2:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d1e6      	bne.n	8002698 <HAL_PCD_EP_ClrStall+0x3c>
 80026ca:	2002      	movs	r0, #2
}
 80026cc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80026ce:	2001      	movs	r0, #1
}
 80026d0:	bd38      	pop	{r3, r4, r5, pc}
 80026d2:	bf00      	nop

080026d4 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80026d4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80026d8:	d00b      	beq.n	80026f2 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026da:	f001 0107 	and.w	r1, r1, #7
 80026de:	3101      	adds	r1, #1
 80026e0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80026e4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80026e8:	b95a      	cbnz	r2, 8002702 <HAL_PCDEx_PMAConfig+0x2e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80026ea:	80cb      	strh	r3, [r1, #6]
 80026ec:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80026ee:	2000      	movs	r0, #0
 80026f0:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 80026f2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80026f6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80026fa:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
 80026fe:	2a00      	cmp	r2, #0
 8002700:	d0f3      	beq.n	80026ea <HAL_PCDEx_PMAConfig+0x16>
    ep->doublebuffer = 1U;
 8002702:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002704:	608b      	str	r3, [r1, #8]
 8002706:	730a      	strb	r2, [r1, #12]
}
 8002708:	2000      	movs	r0, #0
 800270a:	4770      	bx	lr

0800270c <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 800270c:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 800270e:	2100      	movs	r1, #0
{
 8002710:	b410      	push	{r4}
  hpcd->LPM_State = LPM_L0;
 8002712:	f880 12e0 	strb.w	r1, [r0, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002716:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
  hpcd->lpm_active = 1U;
 800271a:	2401      	movs	r4, #1
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800271c:	b29b      	uxth	r3, r3
 800271e:	4323      	orrs	r3, r4
  hpcd->lpm_active = 1U;
 8002720:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002724:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002728:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 800272c:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002730:	b29b      	uxth	r3, r3
 8002732:	f043 0302 	orr.w	r3, r3, #2
}
 8002736:	4608      	mov	r0, r1
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002738:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
}
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop

08002740 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002740:	4a02      	ldr	r2, [pc, #8]	; (800274c <HAL_PWR_EnableBkUpAccess+0xc>)
 8002742:	6813      	ldr	r3, [r2, #0]
 8002744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002748:	6013      	str	r3, [r2, #0]
}
 800274a:	4770      	bx	lr
 800274c:	58000400 	.word	0x58000400

08002750 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002750:	4b02      	ldr	r3, [pc, #8]	; (800275c <HAL_PWREx_GetVoltageRange+0xc>)
 8002752:	6818      	ldr	r0, [r3, #0]
}
 8002754:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	58000400 	.word	0x58000400

08002760 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002760:	4a02      	ldr	r2, [pc, #8]	; (800276c <HAL_PWREx_EnableVddUSB+0xc>)
 8002762:	6853      	ldr	r3, [r2, #4]
 8002764:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002768:	6053      	str	r3, [r2, #4]
}
 800276a:	4770      	bx	lr
 800276c:	58000400 	.word	0x58000400

08002770 <RCC_SetFlashLatencyFromMSIRange>:

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002770:	28b0      	cmp	r0, #176	; 0xb0
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002772:	4b31      	ldr	r3, [pc, #196]	; (8002838 <RCC_SetFlashLatencyFromMSIRange+0xc8>)
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002774:	4a31      	ldr	r2, [pc, #196]	; (800283c <RCC_SetFlashLatencyFromMSIRange+0xcc>)
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002776:	bf98      	it	ls
 8002778:	0900      	lsrls	r0, r0, #4
{
 800277a:	b570      	push	{r4, r5, r6, lr}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800277c:	bf8c      	ite	hi
 800277e:	6adc      	ldrhi	r4, [r3, #44]	; 0x2c
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002780:	f853 4020 	ldrls.w	r4, [r3, r0, lsl #2]
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8002788:	b084      	sub	sp, #16
 800278a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800278e:	f003 030f 	and.w	r3, r3, #15
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002792:	ae04      	add	r6, sp, #16
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002798:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800279c:	f7ff ffd8 	bl	8002750 <HAL_PWREx_GetVoltageRange>
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80027a0:	4b27      	ldr	r3, [pc, #156]	; (8002840 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80027a2:	4605      	mov	r5, r0
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80027a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027a6:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80027aa:	e906 000f 	stmdb	r6, {r0, r1, r2, r3}
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027ae:	d029      	beq.n	8002804 <RCC_SetFlashLatencyFromMSIRange+0x94>
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80027b0:	4b24      	ldr	r3, [pc, #144]	; (8002844 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80027b2:	429c      	cmp	r4, r3
 80027b4:	d33a      	bcc.n	800282c <RCC_SetFlashLatencyFromMSIRange+0xbc>
 80027b6:	f503 03b7 	add.w	r3, r3, #5996544	; 0x5b8000
 80027ba:	f603 537f 	addw	r3, r3, #3455	; 0xd7f
 80027be:	429c      	cmp	r4, r3
 80027c0:	d936      	bls.n	8002830 <RCC_SetFlashLatencyFromMSIRange+0xc0>
 80027c2:	f503 1374 	add.w	r3, r3, #3997696	; 0x3d0000
 80027c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ca:	429c      	cmp	r4, r3
 80027cc:	d932      	bls.n	8002834 <RCC_SetFlashLatencyFromMSIRange+0xc4>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80027ce:	2600      	movs	r6, #0
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80027d0:	4c1d      	ldr	r4, [pc, #116]	; (8002848 <RCC_SetFlashLatencyFromMSIRange+0xd8>)
 80027d2:	6823      	ldr	r3, [r4, #0]
 80027d4:	f023 0307 	bic.w	r3, r3, #7
 80027d8:	4333      	orrs	r3, r6
 80027da:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80027dc:	f7fe fe24 	bl	8001428 <HAL_GetTick>
 80027e0:	4605      	mov	r5, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80027e2:	e004      	b.n	80027ee <RCC_SetFlashLatencyFromMSIRange+0x7e>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027e4:	f7fe fe20 	bl	8001428 <HAL_GetTick>
 80027e8:	1b40      	subs	r0, r0, r5
 80027ea:	2802      	cmp	r0, #2
 80027ec:	d807      	bhi.n	80027fe <RCC_SetFlashLatencyFromMSIRange+0x8e>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80027ee:	6823      	ldr	r3, [r4, #0]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	429e      	cmp	r6, r3
 80027f6:	d1f5      	bne.n	80027e4 <RCC_SetFlashLatencyFromMSIRange+0x74>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80027f8:	2000      	movs	r0, #0
}
 80027fa:	b004      	add	sp, #16
 80027fc:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 80027fe:	2003      	movs	r0, #3
}
 8002800:	b004      	add	sp, #16
 8002802:	bd70      	pop	{r4, r5, r6, pc}
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002804:	4b11      	ldr	r3, [pc, #68]	; (800284c <RCC_SetFlashLatencyFromMSIRange+0xdc>)
 8002806:	429c      	cmp	r4, r3
 8002808:	d910      	bls.n	800282c <RCC_SetFlashLatencyFromMSIRange+0xbc>
 800280a:	4b11      	ldr	r3, [pc, #68]	; (8002850 <RCC_SetFlashLatencyFromMSIRange+0xe0>)
 800280c:	429c      	cmp	r4, r3
 800280e:	d90f      	bls.n	8002830 <RCC_SetFlashLatencyFromMSIRange+0xc0>
 8002810:	4b10      	ldr	r3, [pc, #64]	; (8002854 <RCC_SetFlashLatencyFromMSIRange+0xe4>)
 8002812:	429c      	cmp	r4, r3
 8002814:	d90e      	bls.n	8002834 <RCC_SetFlashLatencyFromMSIRange+0xc4>
 8002816:	4b10      	ldr	r3, [pc, #64]	; (8002858 <RCC_SetFlashLatencyFromMSIRange+0xe8>)
 8002818:	429c      	cmp	r4, r3
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800281a:	bf38      	it	cc
 800281c:	2303      	movcc	r3, #3
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800281e:	d2d6      	bcs.n	80027ce <RCC_SetFlashLatencyFromMSIRange+0x5e>
        latency = FLASH_LATENCY_RANGE[index];
 8002820:	aa04      	add	r2, sp, #16
 8002822:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002826:	f853 6c10 	ldr.w	r6, [r3, #-16]
        break;
 800282a:	e7d1      	b.n	80027d0 <RCC_SetFlashLatencyFromMSIRange+0x60>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800282c:	2300      	movs	r3, #0
 800282e:	e7f7      	b.n	8002820 <RCC_SetFlashLatencyFromMSIRange+0xb0>
 8002830:	2301      	movs	r3, #1
 8002832:	e7f5      	b.n	8002820 <RCC_SetFlashLatencyFromMSIRange+0xb0>
 8002834:	2302      	movs	r3, #2
 8002836:	e7f3      	b.n	8002820 <RCC_SetFlashLatencyFromMSIRange+0xb0>
 8002838:	0800a4cc 	.word	0x0800a4cc
 800283c:	0800a48c 	.word	0x0800a48c
 8002840:	0800a440 	.word	0x0800a440
 8002844:	006acfc0 	.word	0x006acfc0
 8002848:	58004000 	.word	0x58004000
 800284c:	0121eabf 	.word	0x0121eabf
 8002850:	0234933f 	.word	0x0234933f
 8002854:	03473bbf 	.word	0x03473bbf
 8002858:	03dfd240 	.word	0x03dfd240

0800285c <HAL_RCC_GetSysClockFreq.part.0>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800285c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
uint32_t HAL_RCC_GetSysClockFreq(void)
 8002860:	b410      	push	{r4}
 8002862:	68d3      	ldr	r3, [r2, #12]
 8002864:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002868:	2b02      	cmp	r3, #2
 800286a:	d01d      	beq.n	80028a8 <HAL_RCC_GetSysClockFreq.part.0+0x4c>
 800286c:	2b03      	cmp	r3, #3
 800286e:	d11d      	bne.n	80028ac <HAL_RCC_GetSysClockFreq.part.0+0x50>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002870:	6812      	ldr	r2, [r2, #0]
          pllinputfreq = HSE_VALUE / 2U;
 8002872:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <HAL_RCC_GetSysClockFreq.part.0+0x68>)
 8002874:	4c14      	ldr	r4, [pc, #80]	; (80028c8 <HAL_RCC_GetSysClockFreq.part.0+0x6c>)
 8002876:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800287a:	bf08      	it	eq
 800287c:	461c      	moveq	r4, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800287e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002882:	68cb      	ldr	r3, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002884:	68ca      	ldr	r2, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002886:	68c8      	ldr	r0, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002888:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800288c:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8002890:	0f40      	lsrs	r0, r0, #29
 8002892:	fb04 f303 	mul.w	r3, r4, r3
 8002896:	3201      	adds	r2, #1
 8002898:	3001      	adds	r0, #1
 800289a:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800289e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028a2:	fbb3 f0f0 	udiv	r0, r3, r0
 80028a6:	4770      	bx	lr
    switch (pllsource)
 80028a8:	4c08      	ldr	r4, [pc, #32]	; (80028cc <HAL_RCC_GetSysClockFreq.part.0+0x70>)
 80028aa:	e7e8      	b.n	800287e <HAL_RCC_GetSysClockFreq.part.0+0x22>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80028ac:	6813      	ldr	r3, [r2, #0]
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80028ae:	4a08      	ldr	r2, [pc, #32]	; (80028d0 <HAL_RCC_GetSysClockFreq.part.0+0x74>)
 80028b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028b4:	2bb0      	cmp	r3, #176	; 0xb0
 80028b6:	bf28      	it	cs
 80028b8:	23b0      	movcs	r3, #176	; 0xb0
 80028ba:	091b      	lsrs	r3, r3, #4
 80028bc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
        break;
 80028c0:	e7dd      	b.n	800287e <HAL_RCC_GetSysClockFreq.part.0+0x22>
 80028c2:	bf00      	nop
 80028c4:	007a1200 	.word	0x007a1200
 80028c8:	003d0900 	.word	0x003d0900
 80028cc:	00f42400 	.word	0x00f42400
 80028d0:	0800a4cc 	.word	0x0800a4cc

080028d4 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80028d4:	2800      	cmp	r0, #0
 80028d6:	f000 82bb 	beq.w	8002e50 <HAL_RCC_OscConfig+0x57c>
{
 80028da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028dc:	6803      	ldr	r3, [r0, #0]
 80028de:	069a      	lsls	r2, r3, #26
 80028e0:	4604      	mov	r4, r0
 80028e2:	d529      	bpl.n	8002938 <HAL_RCC_OscConfig+0x64>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80028e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028e8:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80028ea:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80028ec:	f013 030c 	ands.w	r3, r3, #12
 80028f0:	f000 80f9 	beq.w	8002ae6 <HAL_RCC_OscConfig+0x212>
 80028f4:	2b0c      	cmp	r3, #12
 80028f6:	f000 80f1 	beq.w	8002adc <HAL_RCC_OscConfig+0x208>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028fa:	69e3      	ldr	r3, [r4, #28]
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80028fc:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 8276 	beq.w	8002df2 <HAL_RCC_OscConfig+0x51e>
 8002906:	682b      	ldr	r3, [r5, #0]
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800290e:	f7fe fd8b 	bl	8001428 <HAL_GetTick>
 8002912:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002914:	682b      	ldr	r3, [r5, #0]
 8002916:	079b      	lsls	r3, r3, #30
 8002918:	f140 827c 	bpl.w	8002e14 <HAL_RCC_OscConfig+0x540>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800291c:	682b      	ldr	r3, [r5, #0]
 800291e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002920:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002924:	4313      	orrs	r3, r2
 8002926:	602b      	str	r3, [r5, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002928:	686b      	ldr	r3, [r5, #4]
 800292a:	6a22      	ldr	r2, [r4, #32]
 800292c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002930:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002934:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002936:	6823      	ldr	r3, [r4, #0]
 8002938:	07dd      	lsls	r5, r3, #31
 800293a:	d527      	bpl.n	800298c <HAL_RCC_OscConfig+0xb8>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800293c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002940:	688a      	ldr	r2, [r1, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002942:	68c9      	ldr	r1, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002944:	f002 020c 	and.w	r2, r2, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002948:	2a08      	cmp	r2, #8
 800294a:	f000 81f1 	beq.w	8002d30 <HAL_RCC_OscConfig+0x45c>
 800294e:	2a0c      	cmp	r2, #12
 8002950:	f000 81e9 	beq.w	8002d26 <HAL_RCC_OscConfig+0x452>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002954:	6863      	ldr	r3, [r4, #4]
 8002956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800295a:	f000 8235 	beq.w	8002dc8 <HAL_RCC_OscConfig+0x4f4>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800295e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002962:	682a      	ldr	r2, [r5, #0]
 8002964:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002968:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800296a:	2b00      	cmp	r3, #0
 800296c:	f040 8232 	bne.w	8002dd4 <HAL_RCC_OscConfig+0x500>
        tickstart = HAL_GetTick();
 8002970:	f7fe fd5a 	bl	8001428 <HAL_GetTick>
 8002974:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002976:	682b      	ldr	r3, [r5, #0]
 8002978:	0399      	lsls	r1, r3, #14
 800297a:	d506      	bpl.n	800298a <HAL_RCC_OscConfig+0xb6>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800297c:	f7fe fd54 	bl	8001428 <HAL_GetTick>
 8002980:	1b80      	subs	r0, r0, r6
 8002982:	2864      	cmp	r0, #100	; 0x64
 8002984:	d9f7      	bls.n	8002976 <HAL_RCC_OscConfig+0xa2>
            return HAL_TIMEOUT;
 8002986:	2003      	movs	r0, #3
}
 8002988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800298a:	6823      	ldr	r3, [r4, #0]
 800298c:	079a      	lsls	r2, r3, #30
 800298e:	d52c      	bpl.n	80029ea <HAL_RCC_OscConfig+0x116>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002990:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002994:	688a      	ldr	r2, [r1, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002996:	68c9      	ldr	r1, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002998:	f002 020c 	and.w	r2, r2, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800299c:	2a04      	cmp	r2, #4
 800299e:	f000 8120 	beq.w	8002be2 <HAL_RCC_OscConfig+0x30e>
 80029a2:	2a0c      	cmp	r2, #12
 80029a4:	f000 8118 	beq.w	8002bd8 <HAL_RCC_OscConfig+0x304>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029a8:	68e3      	ldr	r3, [r4, #12]
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80029aa:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80029ae:	b183      	cbz	r3, 80029d2 <HAL_RCC_OscConfig+0xfe>
 80029b0:	682b      	ldr	r3, [r5, #0]
 80029b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80029b8:	f7fe fd36 	bl	8001428 <HAL_GetTick>
 80029bc:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80029be:	682b      	ldr	r3, [r5, #0]
 80029c0:	055b      	lsls	r3, r3, #21
 80029c2:	f100 8235 	bmi.w	8002e30 <HAL_RCC_OscConfig+0x55c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029c6:	f7fe fd2f 	bl	8001428 <HAL_GetTick>
 80029ca:	1b80      	subs	r0, r0, r6
 80029cc:	2802      	cmp	r0, #2
 80029ce:	d9f6      	bls.n	80029be <HAL_RCC_OscConfig+0xea>
 80029d0:	e7d9      	b.n	8002986 <HAL_RCC_OscConfig+0xb2>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80029d2:	682b      	ldr	r3, [r5, #0]
 80029d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029d8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80029da:	f7fe fd25 	bl	8001428 <HAL_GetTick>
 80029de:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80029e0:	682b      	ldr	r3, [r5, #0]
 80029e2:	055f      	lsls	r7, r3, #21
 80029e4:	f100 822d 	bmi.w	8002e42 <HAL_RCC_OscConfig+0x56e>
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80029e8:	6823      	ldr	r3, [r4, #0]
 80029ea:	f013 0f18 	tst.w	r3, #24
 80029ee:	d023      	beq.n	8002a38 <HAL_RCC_OscConfig+0x164>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029f0:	6962      	ldr	r2, [r4, #20]
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80029f2:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80029f6:	2a00      	cmp	r2, #0
 80029f8:	f000 8100 	beq.w	8002bfc <HAL_RCC_OscConfig+0x328>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80029fc:	f013 0f10 	tst.w	r3, #16
 8002a00:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002a04:	f000 8238 	beq.w	8002e78 <HAL_RCC_OscConfig+0x5a4>
 8002a08:	0798      	lsls	r0, r3, #30
 8002a0a:	f100 81a5 	bmi.w	8002d58 <HAL_RCC_OscConfig+0x484>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002a0e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
          tickstart = HAL_GetTick();
 8002a1a:	f7fe fd05 	bl	8001428 <HAL_GetTick>
 8002a1e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002a20:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002a24:	0799      	lsls	r1, r3, #30
 8002a26:	f100 8197 	bmi.w	8002d58 <HAL_RCC_OscConfig+0x484>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002a2a:	f7fe fcfd 	bl	8001428 <HAL_GetTick>
 8002a2e:	1b80      	subs	r0, r0, r6
 8002a30:	2802      	cmp	r0, #2
 8002a32:	d9f5      	bls.n	8002a20 <HAL_RCC_OscConfig+0x14c>
 8002a34:	e7a7      	b.n	8002986 <HAL_RCC_OscConfig+0xb2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a36:	6823      	ldr	r3, [r4, #0]
 8002a38:	075a      	lsls	r2, r3, #29
 8002a3a:	d422      	bmi.n	8002a82 <HAL_RCC_OscConfig+0x1ae>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a3c:	065a      	lsls	r2, r3, #25
 8002a3e:	d51b      	bpl.n	8002a78 <HAL_RCC_OscConfig+0x1a4>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002a42:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 80b2 	beq.w	8002bb0 <HAL_RCC_OscConfig+0x2dc>
 8002a4c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002a58:	f7fe fce6 	bl	8001428 <HAL_GetTick>
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002a5c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002a60:	079b      	lsls	r3, r3, #30
 8002a62:	4606      	mov	r6, r0
 8002a64:	d408      	bmi.n	8002a78 <HAL_RCC_OscConfig+0x1a4>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a66:	f7fe fcdf 	bl	8001428 <HAL_GetTick>
 8002a6a:	1b80      	subs	r0, r0, r6
 8002a6c:	2802      	cmp	r0, #2
 8002a6e:	d88a      	bhi.n	8002986 <HAL_RCC_OscConfig+0xb2>
 8002a70:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002a74:	079b      	lsls	r3, r3, #30
 8002a76:	d5f6      	bpl.n	8002a66 <HAL_RCC_OscConfig+0x192>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d176      	bne.n	8002b6c <HAL_RCC_OscConfig+0x298>
  return HAL_OK;
 8002a7e:	2000      	movs	r0, #0
}
 8002a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a82:	4daf      	ldr	r5, [pc, #700]	; (8002d40 <HAL_RCC_OscConfig+0x46c>)
 8002a84:	682b      	ldr	r3, [r5, #0]
 8002a86:	05db      	lsls	r3, r3, #23
 8002a88:	f140 80dc 	bpl.w	8002c44 <HAL_RCC_OscConfig+0x370>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a8c:	68a3      	ldr	r3, [r4, #8]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	f000 8130 	beq.w	8002cf4 <HAL_RCC_OscConfig+0x420>
 8002a94:	2b05      	cmp	r3, #5
 8002a96:	f000 821e 	beq.w	8002ed6 <HAL_RCC_OscConfig+0x602>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a9a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002a9e:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8002aa2:	f022 0201 	bic.w	r2, r2, #1
 8002aa6:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002aaa:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8002aae:	f022 0204 	bic.w	r2, r2, #4
 8002ab2:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f040 8124 	bne.w	8002d04 <HAL_RCC_OscConfig+0x430>
      tickstart = HAL_GetTick();
 8002abc:	f7fe fcb4 	bl	8001428 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac0:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002ac4:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002ac6:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002aca:	0799      	lsls	r1, r3, #30
 8002acc:	f140 8135 	bpl.w	8002d3a <HAL_RCC_OscConfig+0x466>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad0:	f7fe fcaa 	bl	8001428 <HAL_GetTick>
 8002ad4:	1b80      	subs	r0, r0, r6
 8002ad6:	42b8      	cmp	r0, r7
 8002ad8:	d9f5      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x1f2>
 8002ada:	e754      	b.n	8002986 <HAL_RCC_OscConfig+0xb2>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002adc:	f002 0203 	and.w	r2, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002ae0:	2a01      	cmp	r2, #1
 8002ae2:	f47f af0a 	bne.w	80028fa <HAL_RCC_OscConfig+0x26>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002ae6:	69e3      	ldr	r3, [r4, #28]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d03d      	beq.n	8002b68 <HAL_RCC_OscConfig+0x294>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002aec:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002af0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002af2:	682b      	ldr	r3, [r5, #0]
 8002af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002af8:	2bb0      	cmp	r3, #176	; 0xb0
 8002afa:	bf28      	it	cs
 8002afc:	23b0      	movcs	r3, #176	; 0xb0
 8002afe:	4298      	cmp	r0, r3
 8002b00:	f240 81a8 	bls.w	8002e54 <HAL_RCC_OscConfig+0x580>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b04:	f7ff fe34 	bl	8002770 <RCC_SetFlashLatencyFromMSIRange>
 8002b08:	bb70      	cbnz	r0, 8002b68 <HAL_RCC_OscConfig+0x294>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002b0a:	682b      	ldr	r3, [r5, #0]
 8002b0c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002b0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b12:	4313      	orrs	r3, r2
 8002b14:	602b      	str	r3, [r5, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002b16:	686b      	ldr	r3, [r5, #4]
 8002b18:	6a22      	ldr	r2, [r4, #32]
 8002b1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002b22:	606b      	str	r3, [r5, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002b24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b28:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b2a:	f013 030c 	ands.w	r3, r3, #12
 8002b2e:	f000 81c7 	beq.w	8002ec0 <HAL_RCC_OscConfig+0x5ec>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	f000 821d 	beq.w	8002f72 <HAL_RCC_OscConfig+0x69e>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	f000 8212 	beq.w	8002f62 <HAL_RCC_OscConfig+0x68e>
 8002b3e:	f7ff fe8d 	bl	800285c <HAL_RCC_GetSysClockFreq.part.0>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002b46:	497f      	ldr	r1, [pc, #508]	; (8002d44 <HAL_RCC_OscConfig+0x470>)
 8002b48:	689b      	ldr	r3, [r3, #8]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002b4a:	4a7f      	ldr	r2, [pc, #508]	; (8002d48 <HAL_RCC_OscConfig+0x474>)
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002b4c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002b50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b54:	497d      	ldr	r1, [pc, #500]	; (8002d4c <HAL_RCC_OscConfig+0x478>)
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002b56:	fbb0 f3f3 	udiv	r3, r0, r3
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b5a:	6808      	ldr	r0, [r1, #0]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002b5c:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b5e:	f7fe fc19 	bl	8001394 <HAL_InitTick>
 8002b62:	2800      	cmp	r0, #0
 8002b64:	f43f aee7 	beq.w	8002936 <HAL_RCC_OscConfig+0x62>
          return HAL_ERROR;
 8002b68:	2001      	movs	r0, #1
}
 8002b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002b6c:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	68aa      	ldr	r2, [r5, #8]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002b74:	68e9      	ldr	r1, [r5, #12]
 8002b76:	f002 020c 	and.w	r2, r2, #12
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b7a:	d073      	beq.n	8002c64 <HAL_RCC_OscConfig+0x390>
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b7c:	2a0c      	cmp	r2, #12
 8002b7e:	d0f3      	beq.n	8002b68 <HAL_RCC_OscConfig+0x294>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002b80:	682b      	ldr	r3, [r5, #0]
 8002b82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b86:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002b88:	f7fe fc4e 	bl	8001428 <HAL_GetTick>
 8002b8c:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b8e:	e005      	b.n	8002b9c <HAL_RCC_OscConfig+0x2c8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b90:	f7fe fc4a 	bl	8001428 <HAL_GetTick>
 8002b94:	1b00      	subs	r0, r0, r4
 8002b96:	2802      	cmp	r0, #2
 8002b98:	f63f aef5 	bhi.w	8002986 <HAL_RCC_OscConfig+0xb2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b9c:	682b      	ldr	r3, [r5, #0]
 8002b9e:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8002ba2:	d1f5      	bne.n	8002b90 <HAL_RCC_OscConfig+0x2bc>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002ba4:	68e9      	ldr	r1, [r5, #12]
 8002ba6:	4a6a      	ldr	r2, [pc, #424]	; (8002d50 <HAL_RCC_OscConfig+0x47c>)
 8002ba8:	400a      	ands	r2, r1
  return HAL_OK;
 8002baa:	4618      	mov	r0, r3
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002bac:	60ea      	str	r2, [r5, #12]
}
 8002bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002bb0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002bb4:	f023 0301 	bic.w	r3, r3, #1
 8002bb8:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002bbc:	f7fe fc34 	bl	8001428 <HAL_GetTick>
 8002bc0:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002bc2:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002bc6:	079f      	lsls	r7, r3, #30
 8002bc8:	f57f af56 	bpl.w	8002a78 <HAL_RCC_OscConfig+0x1a4>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bcc:	f7fe fc2c 	bl	8001428 <HAL_GetTick>
 8002bd0:	1b80      	subs	r0, r0, r6
 8002bd2:	2802      	cmp	r0, #2
 8002bd4:	d9f5      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x2ee>
 8002bd6:	e6d6      	b.n	8002986 <HAL_RCC_OscConfig+0xb2>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002bd8:	f001 0103 	and.w	r1, r1, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002bdc:	2902      	cmp	r1, #2
 8002bde:	f47f aee3 	bne.w	80029a8 <HAL_RCC_OscConfig+0xd4>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002be2:	68e2      	ldr	r2, [r4, #12]
 8002be4:	2a00      	cmp	r2, #0
 8002be6:	d0bf      	beq.n	8002b68 <HAL_RCC_OscConfig+0x294>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002be8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bec:	6920      	ldr	r0, [r4, #16]
 8002bee:	684a      	ldr	r2, [r1, #4]
 8002bf0:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 8002bf4:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002bf8:	604a      	str	r2, [r1, #4]
}
 8002bfa:	e6f6      	b.n	80029ea <HAL_RCC_OscConfig+0x116>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002bfc:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002c00:	f023 0304 	bic.w	r3, r3, #4
 8002c04:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002c08:	f7fe fc0e 	bl	8001428 <HAL_GetTick>
 8002c0c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002c0e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002c12:	0718      	lsls	r0, r3, #28
 8002c14:	f100 8105 	bmi.w	8002e22 <HAL_RCC_OscConfig+0x54e>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002c18:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002c1c:	f023 0301 	bic.w	r3, r3, #1
 8002c20:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002c24:	f7fe fc00 	bl	8001428 <HAL_GetTick>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002c28:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002c2c:	4605      	mov	r5, r0
 8002c2e:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8002c32:	0799      	lsls	r1, r3, #30
 8002c34:	f57f aeff 	bpl.w	8002a36 <HAL_RCC_OscConfig+0x162>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002c38:	f7fe fbf6 	bl	8001428 <HAL_GetTick>
 8002c3c:	1b40      	subs	r0, r0, r5
 8002c3e:	2802      	cmp	r0, #2
 8002c40:	d9f5      	bls.n	8002c2e <HAL_RCC_OscConfig+0x35a>
 8002c42:	e6a0      	b.n	8002986 <HAL_RCC_OscConfig+0xb2>
      HAL_PWR_EnableBkUpAccess();
 8002c44:	f7ff fd7c 	bl	8002740 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8002c48:	f7fe fbee 	bl	8001428 <HAL_GetTick>
 8002c4c:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c4e:	e005      	b.n	8002c5c <HAL_RCC_OscConfig+0x388>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c50:	f7fe fbea 	bl	8001428 <HAL_GetTick>
 8002c54:	1b80      	subs	r0, r0, r6
 8002c56:	2802      	cmp	r0, #2
 8002c58:	f63f ae95 	bhi.w	8002986 <HAL_RCC_OscConfig+0xb2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c5c:	682b      	ldr	r3, [r5, #0]
 8002c5e:	05df      	lsls	r7, r3, #23
 8002c60:	d5f6      	bpl.n	8002c50 <HAL_RCC_OscConfig+0x37c>
 8002c62:	e713      	b.n	8002a8c <HAL_RCC_OscConfig+0x1b8>
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c64:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002c66:	f001 0303 	and.w	r3, r1, #3
 8002c6a:	4283      	cmp	r3, r0
 8002c6c:	f000 8142 	beq.w	8002ef4 <HAL_RCC_OscConfig+0x620>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c70:	2a0c      	cmp	r2, #12
 8002c72:	f43f af79 	beq.w	8002b68 <HAL_RCC_OscConfig+0x294>
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c76:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002c7a:	682b      	ldr	r3, [r5, #0]
 8002c7c:	015e      	lsls	r6, r3, #5
 8002c7e:	f53f af73 	bmi.w	8002b68 <HAL_RCC_OscConfig+0x294>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002c82:	682b      	ldr	r3, [r5, #0]
 8002c84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c88:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8002c8a:	f7fe fbcd 	bl	8001428 <HAL_GetTick>
 8002c8e:	4606      	mov	r6, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c90:	e005      	b.n	8002c9e <HAL_RCC_OscConfig+0x3ca>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c92:	f7fe fbc9 	bl	8001428 <HAL_GetTick>
 8002c96:	1b80      	subs	r0, r0, r6
 8002c98:	2802      	cmp	r0, #2
 8002c9a:	f63f ae74 	bhi.w	8002986 <HAL_RCC_OscConfig+0xb2>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c9e:	682b      	ldr	r3, [r5, #0]
 8002ca0:	0198      	lsls	r0, r3, #6
 8002ca2:	d4f6      	bmi.n	8002c92 <HAL_RCC_OscConfig+0x3be>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ca4:	e9d4 320c 	ldrd	r3, r2, [r4, #48]	; 0x30
 8002ca8:	68e9      	ldr	r1, [r5, #12]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	4a29      	ldr	r2, [pc, #164]	; (8002d54 <HAL_RCC_OscConfig+0x480>)
 8002cae:	400a      	ands	r2, r1
 8002cb0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	; 0x40
 8002cba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002cbc:	4303      	orrs	r3, r0
 8002cbe:	430b      	orrs	r3, r1
 8002cc0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002cc4:	60eb      	str	r3, [r5, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002cc6:	682b      	ldr	r3, [r5, #0]
 8002cc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ccc:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cce:	68eb      	ldr	r3, [r5, #12]
 8002cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd4:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 8002cd6:	f7fe fba7 	bl	8001428 <HAL_GetTick>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cda:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
            tickstart = HAL_GetTick();
 8002cde:	4604      	mov	r4, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ce0:	6833      	ldr	r3, [r6, #0]
 8002ce2:	0199      	lsls	r1, r3, #6
 8002ce4:	f53f aecb 	bmi.w	8002a7e <HAL_RCC_OscConfig+0x1aa>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce8:	f7fe fb9e 	bl	8001428 <HAL_GetTick>
 8002cec:	1b00      	subs	r0, r0, r4
 8002cee:	2802      	cmp	r0, #2
 8002cf0:	d9f6      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x40c>
 8002cf2:	e648      	b.n	8002986 <HAL_RCC_OscConfig+0xb2>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002cf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cf8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002d04:	f7fe fb90 	bl	8001428 <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002d08:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002d0c:	4605      	mov	r5, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0e:	f241 3788 	movw	r7, #5000	; 0x1388
 8002d12:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8002d16:	0798      	lsls	r0, r3, #30
 8002d18:	d40f      	bmi.n	8002d3a <HAL_RCC_OscConfig+0x466>
 8002d1a:	f7fe fb85 	bl	8001428 <HAL_GetTick>
 8002d1e:	1b40      	subs	r0, r0, r5
 8002d20:	42b8      	cmp	r0, r7
 8002d22:	d9f6      	bls.n	8002d12 <HAL_RCC_OscConfig+0x43e>
 8002d24:	e62f      	b.n	8002986 <HAL_RCC_OscConfig+0xb2>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002d26:	f001 0103 	and.w	r1, r1, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002d2a:	2903      	cmp	r1, #3
 8002d2c:	f47f ae12 	bne.w	8002954 <HAL_RCC_OscConfig+0x80>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002d30:	6862      	ldr	r2, [r4, #4]
 8002d32:	2a00      	cmp	r2, #0
 8002d34:	f47f ae2a 	bne.w	800298c <HAL_RCC_OscConfig+0xb8>
 8002d38:	e716      	b.n	8002b68 <HAL_RCC_OscConfig+0x294>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d3a:	6823      	ldr	r3, [r4, #0]
 8002d3c:	e67e      	b.n	8002a3c <HAL_RCC_OscConfig+0x168>
 8002d3e:	bf00      	nop
 8002d40:	58000400 	.word	0x58000400
 8002d44:	0800a48c 	.word	0x0800a48c
 8002d48:	20000008 	.word	0x20000008
 8002d4c:	20000010 	.word	0x20000010
 8002d50:	eefefffc 	.word	0xeefefffc
 8002d54:	11c1808c 	.word	0x11c1808c
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002d58:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002d5c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002d60:	f043 0304 	orr.w	r3, r3, #4
 8002d64:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8002d68:	f7fe fb5e 	bl	8001428 <HAL_GetTick>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002d6c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002d70:	071a      	lsls	r2, r3, #28
 8002d72:	4606      	mov	r6, r0
 8002d74:	d409      	bmi.n	8002d8a <HAL_RCC_OscConfig+0x4b6>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002d76:	f7fe fb57 	bl	8001428 <HAL_GetTick>
 8002d7a:	1b80      	subs	r0, r0, r6
 8002d7c:	2803      	cmp	r0, #3
 8002d7e:	f63f ae02 	bhi.w	8002986 <HAL_RCC_OscConfig+0xb2>
 8002d82:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002d86:	071a      	lsls	r2, r3, #28
 8002d88:	d5f5      	bpl.n	8002d76 <HAL_RCC_OscConfig+0x4a2>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002d8a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002d8e:	69a2      	ldr	r2, [r4, #24]
 8002d90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002d98:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002d9c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002da0:	f023 0301 	bic.w	r3, r3, #1
 8002da4:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8002da8:	f7fe fb3e 	bl	8001428 <HAL_GetTick>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002dac:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002db0:	4605      	mov	r5, r0
 8002db2:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8002db6:	079b      	lsls	r3, r3, #30
 8002db8:	f57f ae3d 	bpl.w	8002a36 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002dbc:	f7fe fb34 	bl	8001428 <HAL_GetTick>
 8002dc0:	1b40      	subs	r0, r0, r5
 8002dc2:	2802      	cmp	r0, #2
 8002dc4:	d9f5      	bls.n	8002db2 <HAL_RCC_OscConfig+0x4de>
 8002dc6:	e5de      	b.n	8002986 <HAL_RCC_OscConfig+0xb2>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002dc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dcc:	6813      	ldr	r3, [r2, #0]
 8002dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002dd4:	f7fe fb28 	bl	8001428 <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002dd8:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002ddc:	4605      	mov	r5, r0
 8002dde:	6833      	ldr	r3, [r6, #0]
 8002de0:	0398      	lsls	r0, r3, #14
 8002de2:	f53f add2 	bmi.w	800298a <HAL_RCC_OscConfig+0xb6>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de6:	f7fe fb1f 	bl	8001428 <HAL_GetTick>
 8002dea:	1b40      	subs	r0, r0, r5
 8002dec:	2864      	cmp	r0, #100	; 0x64
 8002dee:	d9f6      	bls.n	8002dde <HAL_RCC_OscConfig+0x50a>
 8002df0:	e5c9      	b.n	8002986 <HAL_RCC_OscConfig+0xb2>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002df2:	682b      	ldr	r3, [r5, #0]
 8002df4:	f023 0301 	bic.w	r3, r3, #1
 8002df8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002dfa:	f7fe fb15 	bl	8001428 <HAL_GetTick>
 8002dfe:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002e00:	682b      	ldr	r3, [r5, #0]
 8002e02:	079f      	lsls	r7, r3, #30
 8002e04:	f57f ad97 	bpl.w	8002936 <HAL_RCC_OscConfig+0x62>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e08:	f7fe fb0e 	bl	8001428 <HAL_GetTick>
 8002e0c:	1b80      	subs	r0, r0, r6
 8002e0e:	2802      	cmp	r0, #2
 8002e10:	d9f6      	bls.n	8002e00 <HAL_RCC_OscConfig+0x52c>
 8002e12:	e5b8      	b.n	8002986 <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e14:	f7fe fb08 	bl	8001428 <HAL_GetTick>
 8002e18:	1b80      	subs	r0, r0, r6
 8002e1a:	2802      	cmp	r0, #2
 8002e1c:	f67f ad7a 	bls.w	8002914 <HAL_RCC_OscConfig+0x40>
 8002e20:	e5b1      	b.n	8002986 <HAL_RCC_OscConfig+0xb2>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002e22:	f7fe fb01 	bl	8001428 <HAL_GetTick>
 8002e26:	1b80      	subs	r0, r0, r6
 8002e28:	2803      	cmp	r0, #3
 8002e2a:	f67f aef0 	bls.w	8002c0e <HAL_RCC_OscConfig+0x33a>
 8002e2e:	e5aa      	b.n	8002986 <HAL_RCC_OscConfig+0xb2>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002e30:	686b      	ldr	r3, [r5, #4]
 8002e32:	6922      	ldr	r2, [r4, #16]
 8002e34:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002e38:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002e3c:	606b      	str	r3, [r5, #4]
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002e3e:	6823      	ldr	r3, [r4, #0]
}
 8002e40:	e5d3      	b.n	80029ea <HAL_RCC_OscConfig+0x116>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e42:	f7fe faf1 	bl	8001428 <HAL_GetTick>
 8002e46:	1b80      	subs	r0, r0, r6
 8002e48:	2802      	cmp	r0, #2
 8002e4a:	f67f adc9 	bls.w	80029e0 <HAL_RCC_OscConfig+0x10c>
 8002e4e:	e59a      	b.n	8002986 <HAL_RCC_OscConfig+0xb2>
    return HAL_ERROR;
 8002e50:	2001      	movs	r0, #1
}
 8002e52:	4770      	bx	lr
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002e54:	682b      	ldr	r3, [r5, #0]
 8002e56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e5a:	4303      	orrs	r3, r0
 8002e5c:	602b      	str	r3, [r5, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002e5e:	686b      	ldr	r3, [r5, #4]
 8002e60:	6a22      	ldr	r2, [r4, #32]
 8002e62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002e6a:	606b      	str	r3, [r5, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e6c:	f7ff fc80 	bl	8002770 <RCC_SetFlashLatencyFromMSIRange>
 8002e70:	2800      	cmp	r0, #0
 8002e72:	f43f ae57 	beq.w	8002b24 <HAL_RCC_OscConfig+0x250>
 8002e76:	e677      	b.n	8002b68 <HAL_RCC_OscConfig+0x294>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8002e80:	f7fe fad2 	bl	8001428 <HAL_GetTick>
 8002e84:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002e86:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002e8a:	079f      	lsls	r7, r3, #30
 8002e8c:	d405      	bmi.n	8002e9a <HAL_RCC_OscConfig+0x5c6>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002e8e:	f7fe facb 	bl	8001428 <HAL_GetTick>
 8002e92:	1b80      	subs	r0, r0, r6
 8002e94:	2802      	cmp	r0, #2
 8002e96:	d9f6      	bls.n	8002e86 <HAL_RCC_OscConfig+0x5b2>
 8002e98:	e575      	b.n	8002986 <HAL_RCC_OscConfig+0xb2>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002e9a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002e9e:	f023 0304 	bic.w	r3, r3, #4
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002ea2:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002ea6:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002eaa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002eae:	071d      	lsls	r5, r3, #28
 8002eb0:	f57f adc1 	bpl.w	8002a36 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002eb4:	f7fe fab8 	bl	8001428 <HAL_GetTick>
 8002eb8:	1b80      	subs	r0, r0, r6
 8002eba:	2803      	cmp	r0, #3
 8002ebc:	d9f5      	bls.n	8002eaa <HAL_RCC_OscConfig+0x5d6>
 8002ebe:	e562      	b.n	8002986 <HAL_RCC_OscConfig+0xb2>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002ec0:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002ec2:	4a2d      	ldr	r2, [pc, #180]	; (8002f78 <HAL_RCC_OscConfig+0x6a4>)
 8002ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ec8:	2bb0      	cmp	r3, #176	; 0xb0
 8002eca:	bf28      	it	cs
 8002ecc:	23b0      	movcs	r3, #176	; 0xb0
 8002ece:	091b      	lsrs	r3, r3, #4
 8002ed0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002ed4:	e635      	b.n	8002b42 <HAL_RCC_OscConfig+0x26e>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eda:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002ede:	f042 0204 	orr.w	r2, r2, #4
 8002ee2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ee6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002eea:	f042 0201 	orr.w	r2, r2, #1
 8002eee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ef2:	e707      	b.n	8002d04 <HAL_RCC_OscConfig+0x430>
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef4:	6b60      	ldr	r0, [r4, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ef6:	f001 0370 	and.w	r3, r1, #112	; 0x70
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efa:	4283      	cmp	r3, r0
 8002efc:	f47f aeb8 	bne.w	8002c70 <HAL_RCC_OscConfig+0x39c>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f00:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f02:	f3c1 2306 	ubfx	r3, r1, #8, #7
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f06:	4283      	cmp	r3, r0
 8002f08:	f47f aeb2 	bne.w	8002c70 <HAL_RCC_OscConfig+0x39c>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f0c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f0e:	f401 1378 	and.w	r3, r1, #4063232	; 0x3e0000
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f12:	4283      	cmp	r3, r0
 8002f14:	f47f aeac 	bne.w	8002c70 <HAL_RCC_OscConfig+0x39c>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f18:	6c20      	ldr	r0, [r4, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002f1a:	f001 6360 	and.w	r3, r1, #234881024	; 0xe000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f1e:	4283      	cmp	r3, r0
 8002f20:	f47f aea6 	bne.w	8002c70 <HAL_RCC_OscConfig+0x39c>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002f24:	6c63      	ldr	r3, [r4, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002f26:	f001 4160 	and.w	r1, r1, #3758096384	; 0xe0000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002f2a:	4299      	cmp	r1, r3
 8002f2c:	f47f aea0 	bne.w	8002c70 <HAL_RCC_OscConfig+0x39c>
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f30:	682b      	ldr	r3, [r5, #0]
 8002f32:	019a      	lsls	r2, r3, #6
 8002f34:	f53f ada3 	bmi.w	8002a7e <HAL_RCC_OscConfig+0x1aa>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002f38:	682b      	ldr	r3, [r5, #0]
 8002f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f3e:	602b      	str	r3, [r5, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f40:	68eb      	ldr	r3, [r5, #12]
 8002f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f46:	60eb      	str	r3, [r5, #12]
          tickstart = HAL_GetTick();
 8002f48:	f7fe fa6e 	bl	8001428 <HAL_GetTick>
 8002f4c:	4604      	mov	r4, r0
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f4e:	682b      	ldr	r3, [r5, #0]
 8002f50:	019b      	lsls	r3, r3, #6
 8002f52:	f53f ad94 	bmi.w	8002a7e <HAL_RCC_OscConfig+0x1aa>
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f56:	f7fe fa67 	bl	8001428 <HAL_GetTick>
 8002f5a:	1b00      	subs	r0, r0, r4
 8002f5c:	2802      	cmp	r0, #2
 8002f5e:	d9f6      	bls.n	8002f4e <HAL_RCC_OscConfig+0x67a>
 8002f60:	e511      	b.n	8002986 <HAL_RCC_OscConfig+0xb2>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002f62:	6812      	ldr	r2, [r2, #0]
      sysclockfreq = HSE_VALUE;
 8002f64:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <HAL_RCC_OscConfig+0x6a8>)
 8002f66:	4806      	ldr	r0, [pc, #24]	; (8002f80 <HAL_RCC_OscConfig+0x6ac>)
 8002f68:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8002f6c:	bf18      	it	ne
 8002f6e:	4618      	movne	r0, r3
 8002f70:	e5e7      	b.n	8002b42 <HAL_RCC_OscConfig+0x26e>
    sysclockfreq = HSI_VALUE;
 8002f72:	4804      	ldr	r0, [pc, #16]	; (8002f84 <HAL_RCC_OscConfig+0x6b0>)
 8002f74:	e5e5      	b.n	8002b42 <HAL_RCC_OscConfig+0x26e>
 8002f76:	bf00      	nop
 8002f78:	0800a4cc 	.word	0x0800a4cc
 8002f7c:	003d0900 	.word	0x003d0900
 8002f80:	007a1200 	.word	0x007a1200
 8002f84:	00f42400 	.word	0x00f42400

08002f88 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002f88:	2800      	cmp	r0, #0
 8002f8a:	f000 8130 	beq.w	80031ee <HAL_RCC_ClockConfig+0x266>
{
 8002f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f92:	4e9d      	ldr	r6, [pc, #628]	; (8003208 <HAL_RCC_ClockConfig+0x280>)
 8002f94:	6833      	ldr	r3, [r6, #0]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	428b      	cmp	r3, r1
 8002f9c:	460c      	mov	r4, r1
 8002f9e:	4605      	mov	r5, r0
 8002fa0:	f0c0 80d9 	bcc.w	8003156 <HAL_RCC_ClockConfig+0x1ce>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa4:	682b      	ldr	r3, [r5, #0]
 8002fa6:	079a      	lsls	r2, r3, #30
 8002fa8:	d472      	bmi.n	8003090 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002faa:	0698      	lsls	r0, r3, #26
 8002fac:	f100 8082 	bmi.w	80030b4 <HAL_RCC_ClockConfig+0x12c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002fb0:	065a      	lsls	r2, r3, #25
 8002fb2:	f100 8094 	bmi.w	80030de <HAL_RCC_ClockConfig+0x156>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb6:	0758      	lsls	r0, r3, #29
 8002fb8:	f100 80a7 	bmi.w	800310a <HAL_RCC_ClockConfig+0x182>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fbc:	071a      	lsls	r2, r3, #28
 8002fbe:	f100 80b6 	bmi.w	800312e <HAL_RCC_ClockConfig+0x1a6>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fc2:	07df      	lsls	r7, r3, #31
 8002fc4:	d529      	bpl.n	800301a <HAL_RCC_ClockConfig+0x92>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc6:	686b      	ldr	r3, [r5, #4]
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002fc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	f000 8106 	beq.w	80031e0 <HAL_RCC_ClockConfig+0x258>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	f000 80fd 	beq.w	80031d4 <HAL_RCC_ClockConfig+0x24c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f040 8104 	bne.w	80031e8 <HAL_RCC_ClockConfig+0x260>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002fe0:	0791      	lsls	r1, r2, #30
 8002fe2:	f140 80fa 	bpl.w	80031da <HAL_RCC_ClockConfig+0x252>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002fe6:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fea:	f241 3888 	movw	r8, #5000	; 0x1388
 8002fee:	68b2      	ldr	r2, [r6, #8]
 8002ff0:	f022 0203 	bic.w	r2, r2, #3
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002ff8:	f7fe fa16 	bl	8001428 <HAL_GetTick>
 8002ffc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ffe:	e005      	b.n	800300c <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003000:	f7fe fa12 	bl	8001428 <HAL_GetTick>
 8003004:	1bc0      	subs	r0, r0, r7
 8003006:	4540      	cmp	r0, r8
 8003008:	f200 80b8 	bhi.w	800317c <HAL_RCC_ClockConfig+0x1f4>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800300c:	68b3      	ldr	r3, [r6, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300e:	686a      	ldr	r2, [r5, #4]
 8003010:	f003 030c 	and.w	r3, r3, #12
 8003014:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003018:	d1f2      	bne.n	8003000 <HAL_RCC_ClockConfig+0x78>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800301a:	4d7b      	ldr	r5, [pc, #492]	; (8003208 <HAL_RCC_ClockConfig+0x280>)
 800301c:	682b      	ldr	r3, [r5, #0]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	42a3      	cmp	r3, r4
 8003024:	d913      	bls.n	800304e <HAL_RCC_ClockConfig+0xc6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003026:	682b      	ldr	r3, [r5, #0]
 8003028:	f023 0307 	bic.w	r3, r3, #7
 800302c:	4323      	orrs	r3, r4
 800302e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003030:	f7fe f9fa 	bl	8001428 <HAL_GetTick>
 8003034:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003036:	e005      	b.n	8003044 <HAL_RCC_ClockConfig+0xbc>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003038:	f7fe f9f6 	bl	8001428 <HAL_GetTick>
 800303c:	1b80      	subs	r0, r0, r6
 800303e:	2802      	cmp	r0, #2
 8003040:	f200 809c 	bhi.w	800317c <HAL_RCC_ClockConfig+0x1f4>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003044:	682b      	ldr	r3, [r5, #0]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	42a3      	cmp	r3, r4
 800304c:	d1f4      	bne.n	8003038 <HAL_RCC_ClockConfig+0xb0>
 800304e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003052:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003054:	f013 030c 	ands.w	r3, r3, #12
 8003058:	f000 80b1 	beq.w	80031be <HAL_RCC_ClockConfig+0x236>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800305c:	2b04      	cmp	r3, #4
 800305e:	f000 80d0 	beq.w	8003202 <HAL_RCC_ClockConfig+0x27a>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003062:	2b08      	cmp	r3, #8
 8003064:	f000 80c5 	beq.w	80031f2 <HAL_RCC_ClockConfig+0x26a>
 8003068:	f7ff fbf8 	bl	800285c <HAL_RCC_GetSysClockFreq.part.0>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800306c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003070:	4a66      	ldr	r2, [pc, #408]	; (800320c <HAL_RCC_ClockConfig+0x284>)
 8003072:	689b      	ldr	r3, [r3, #8]
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003074:	4966      	ldr	r1, [pc, #408]	; (8003210 <HAL_RCC_ClockConfig+0x288>)
 8003076:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800307a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800307e:	fbb0 f0f3 	udiv	r0, r0, r3
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003082:	6010      	str	r0, [r2, #0]
  return HAL_InitTick(HAL_GetTickPrio());
 8003084:	f7fe f9d6 	bl	8001434 <HAL_GetTickPrio>
}
 8003088:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(HAL_GetTickPrio());
 800308c:	f7fe b982 	b.w	8001394 <HAL_InitTick>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003090:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8003094:	68aa      	ldr	r2, [r5, #8]
 8003096:	68b3      	ldr	r3, [r6, #8]
 8003098:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800309c:	4313      	orrs	r3, r2
 800309e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80030a0:	f7fe f9c2 	bl	8001428 <HAL_GetTick>
 80030a4:	4607      	mov	r7, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80030a6:	68b3      	ldr	r3, [r6, #8]
 80030a8:	03db      	lsls	r3, r3, #15
 80030aa:	d56a      	bpl.n	8003182 <HAL_RCC_ClockConfig+0x1fa>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80030ac:	682b      	ldr	r3, [r5, #0]
 80030ae:	0698      	lsls	r0, r3, #26
 80030b0:	f57f af7e 	bpl.w	8002fb0 <HAL_RCC_ClockConfig+0x28>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80030b4:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80030b8:	696a      	ldr	r2, [r5, #20]
 80030ba:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 80030be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 80030c8:	f7fe f9ae 	bl	8001428 <HAL_GetTick>
 80030cc:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80030ce:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 80030d2:	0399      	lsls	r1, r3, #14
 80030d4:	d55b      	bpl.n	800318e <HAL_RCC_ClockConfig+0x206>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80030d6:	682b      	ldr	r3, [r5, #0]
 80030d8:	065a      	lsls	r2, r3, #25
 80030da:	f57f af6c 	bpl.w	8002fb6 <HAL_RCC_ClockConfig+0x2e>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80030de:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80030e2:	69aa      	ldr	r2, [r5, #24]
 80030e4:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 80030e8:	f023 030f 	bic.w	r3, r3, #15
 80030ec:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 80030f0:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 80030f4:	f7fe f998 	bl	8001428 <HAL_GetTick>
 80030f8:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80030fa:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 80030fe:	03db      	lsls	r3, r3, #15
 8003100:	d54b      	bpl.n	800319a <HAL_RCC_ClockConfig+0x212>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003102:	682b      	ldr	r3, [r5, #0]
 8003104:	0758      	lsls	r0, r3, #29
 8003106:	f57f af59 	bpl.w	8002fbc <HAL_RCC_ClockConfig+0x34>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800310a:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800310e:	68ea      	ldr	r2, [r5, #12]
 8003110:	68b3      	ldr	r3, [r6, #8]
 8003112:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003116:	4313      	orrs	r3, r2
 8003118:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800311a:	f7fe f985 	bl	8001428 <HAL_GetTick>
 800311e:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003120:	68b3      	ldr	r3, [r6, #8]
 8003122:	0399      	lsls	r1, r3, #14
 8003124:	d53f      	bpl.n	80031a6 <HAL_RCC_ClockConfig+0x21e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003126:	682b      	ldr	r3, [r5, #0]
 8003128:	071a      	lsls	r2, r3, #28
 800312a:	f57f af4a 	bpl.w	8002fc2 <HAL_RCC_ClockConfig+0x3a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800312e:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003132:	692a      	ldr	r2, [r5, #16]
 8003134:	68b3      	ldr	r3, [r6, #8]
 8003136:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800313a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800313e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003140:	f7fe f972 	bl	8001428 <HAL_GetTick>
 8003144:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003146:	68b3      	ldr	r3, [r6, #8]
 8003148:	035b      	lsls	r3, r3, #13
 800314a:	d532      	bpl.n	80031b2 <HAL_RCC_ClockConfig+0x22a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800314c:	682b      	ldr	r3, [r5, #0]
 800314e:	07df      	lsls	r7, r3, #31
 8003150:	f53f af39 	bmi.w	8002fc6 <HAL_RCC_ClockConfig+0x3e>
 8003154:	e761      	b.n	800301a <HAL_RCC_ClockConfig+0x92>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003156:	6833      	ldr	r3, [r6, #0]
 8003158:	f023 0307 	bic.w	r3, r3, #7
 800315c:	430b      	orrs	r3, r1
 800315e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003160:	f7fe f962 	bl	8001428 <HAL_GetTick>
 8003164:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003166:	6833      	ldr	r3, [r6, #0]
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	42a3      	cmp	r3, r4
 800316e:	f43f af19 	beq.w	8002fa4 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003172:	f7fe f959 	bl	8001428 <HAL_GetTick>
 8003176:	1bc3      	subs	r3, r0, r7
 8003178:	2b02      	cmp	r3, #2
 800317a:	d9f4      	bls.n	8003166 <HAL_RCC_ClockConfig+0x1de>
        return HAL_TIMEOUT;
 800317c:	2003      	movs	r0, #3
}
 800317e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003182:	f7fe f951 	bl	8001428 <HAL_GetTick>
 8003186:	1bc0      	subs	r0, r0, r7
 8003188:	2802      	cmp	r0, #2
 800318a:	d98c      	bls.n	80030a6 <HAL_RCC_ClockConfig+0x11e>
 800318c:	e7f6      	b.n	800317c <HAL_RCC_ClockConfig+0x1f4>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800318e:	f7fe f94b 	bl	8001428 <HAL_GetTick>
 8003192:	1bc0      	subs	r0, r0, r7
 8003194:	2802      	cmp	r0, #2
 8003196:	d99a      	bls.n	80030ce <HAL_RCC_ClockConfig+0x146>
 8003198:	e7f0      	b.n	800317c <HAL_RCC_ClockConfig+0x1f4>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800319a:	f7fe f945 	bl	8001428 <HAL_GetTick>
 800319e:	1bc0      	subs	r0, r0, r7
 80031a0:	2802      	cmp	r0, #2
 80031a2:	d9aa      	bls.n	80030fa <HAL_RCC_ClockConfig+0x172>
 80031a4:	e7ea      	b.n	800317c <HAL_RCC_ClockConfig+0x1f4>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80031a6:	f7fe f93f 	bl	8001428 <HAL_GetTick>
 80031aa:	1bc0      	subs	r0, r0, r7
 80031ac:	2802      	cmp	r0, #2
 80031ae:	d9b7      	bls.n	8003120 <HAL_RCC_ClockConfig+0x198>
 80031b0:	e7e4      	b.n	800317c <HAL_RCC_ClockConfig+0x1f4>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80031b2:	f7fe f939 	bl	8001428 <HAL_GetTick>
 80031b6:	1bc0      	subs	r0, r0, r7
 80031b8:	2802      	cmp	r0, #2
 80031ba:	d9c4      	bls.n	8003146 <HAL_RCC_ClockConfig+0x1be>
 80031bc:	e7de      	b.n	800317c <HAL_RCC_ClockConfig+0x1f4>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80031be:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80031c0:	4a14      	ldr	r2, [pc, #80]	; (8003214 <HAL_RCC_ClockConfig+0x28c>)
 80031c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031c6:	2bb0      	cmp	r3, #176	; 0xb0
 80031c8:	bf28      	it	cs
 80031ca:	23b0      	movcs	r3, #176	; 0xb0
 80031cc:	091b      	lsrs	r3, r3, #4
 80031ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80031d2:	e74b      	b.n	800306c <HAL_RCC_ClockConfig+0xe4>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80031d4:	0190      	lsls	r0, r2, #6
 80031d6:	f53f af06 	bmi.w	8002fe6 <HAL_RCC_ClockConfig+0x5e>
    return HAL_ERROR;
 80031da:	2001      	movs	r0, #1
}
 80031dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80031e0:	0396      	lsls	r6, r2, #14
 80031e2:	f53f af00 	bmi.w	8002fe6 <HAL_RCC_ClockConfig+0x5e>
 80031e6:	e7f8      	b.n	80031da <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80031e8:	0552      	lsls	r2, r2, #21
 80031ea:	d5f6      	bpl.n	80031da <HAL_RCC_ClockConfig+0x252>
 80031ec:	e6fb      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x5e>
    return HAL_ERROR;
 80031ee:	2001      	movs	r0, #1
}
 80031f0:	4770      	bx	lr
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80031f2:	6812      	ldr	r2, [r2, #0]
      sysclockfreq = HSE_VALUE;
 80031f4:	4b08      	ldr	r3, [pc, #32]	; (8003218 <HAL_RCC_ClockConfig+0x290>)
 80031f6:	4809      	ldr	r0, [pc, #36]	; (800321c <HAL_RCC_ClockConfig+0x294>)
 80031f8:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 80031fc:	bf08      	it	eq
 80031fe:	4618      	moveq	r0, r3
 8003200:	e734      	b.n	800306c <HAL_RCC_ClockConfig+0xe4>
    sysclockfreq = HSI_VALUE;
 8003202:	4807      	ldr	r0, [pc, #28]	; (8003220 <HAL_RCC_ClockConfig+0x298>)
 8003204:	e732      	b.n	800306c <HAL_RCC_ClockConfig+0xe4>
 8003206:	bf00      	nop
 8003208:	58004000 	.word	0x58004000
 800320c:	20000008 	.word	0x20000008
 8003210:	0800a48c 	.word	0x0800a48c
 8003214:	0800a4cc 	.word	0x0800a4cc
 8003218:	007a1200 	.word	0x007a1200
 800321c:	003d0900 	.word	0x003d0900
 8003220:	00f42400 	.word	0x00f42400

08003224 <HAL_RCC_GetHCLKFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003224:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
{
 8003228:	b508      	push	{r3, lr}
 800322a:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800322c:	f013 030c 	ands.w	r3, r3, #12
 8003230:	d114      	bne.n	800325c <HAL_RCC_GetHCLKFreq+0x38>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003232:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003234:	4a12      	ldr	r2, [pc, #72]	; (8003280 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003236:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800323a:	2bb0      	cmp	r3, #176	; 0xb0
 800323c:	bf28      	it	cs
 800323e:	23b0      	movcs	r3, #176	; 0xb0
 8003240:	091b      	lsrs	r3, r3, #4
 8003242:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003246:	4a0f      	ldr	r2, [pc, #60]	; (8003284 <HAL_RCC_GetHCLKFreq+0x60>)
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8003256:	fbb0 f0f3 	udiv	r0, r0, r3
 800325a:	bd08      	pop	{r3, pc}
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800325c:	2b04      	cmp	r3, #4
 800325e:	d004      	beq.n	800326a <HAL_RCC_GetHCLKFreq+0x46>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003260:	2b08      	cmp	r3, #8
 8003262:	d004      	beq.n	800326e <HAL_RCC_GetHCLKFreq+0x4a>
 8003264:	f7ff fafa 	bl	800285c <HAL_RCC_GetSysClockFreq.part.0>
 8003268:	e7ed      	b.n	8003246 <HAL_RCC_GetHCLKFreq+0x22>
    sysclockfreq = HSI_VALUE;
 800326a:	4807      	ldr	r0, [pc, #28]	; (8003288 <HAL_RCC_GetHCLKFreq+0x64>)
 800326c:	e7eb      	b.n	8003246 <HAL_RCC_GetHCLKFreq+0x22>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800326e:	6812      	ldr	r2, [r2, #0]
      sysclockfreq = HSE_VALUE;
 8003270:	4b06      	ldr	r3, [pc, #24]	; (800328c <HAL_RCC_GetHCLKFreq+0x68>)
 8003272:	4807      	ldr	r0, [pc, #28]	; (8003290 <HAL_RCC_GetHCLKFreq+0x6c>)
 8003274:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8003278:	bf08      	it	eq
 800327a:	4618      	moveq	r0, r3
 800327c:	e7e3      	b.n	8003246 <HAL_RCC_GetHCLKFreq+0x22>
 800327e:	bf00      	nop
 8003280:	0800a4cc 	.word	0x0800a4cc
 8003284:	0800a48c 	.word	0x0800a48c
 8003288:	00f42400 	.word	0x00f42400
 800328c:	007a1200 	.word	0x007a1200
 8003290:	003d0900 	.word	0x003d0900

08003294 <HAL_RCCEx_PeriphCLKConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003294:	6803      	ldr	r3, [r0, #0]
{
 8003296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800329a:	f013 0540 	ands.w	r5, r3, #64	; 0x40
{
 800329e:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032a0:	d040      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80032a2:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80032a4:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80032a8:	f000 8134 	beq.w	8003514 <HAL_RCCEx_PeriphCLKConfig+0x280>
 80032ac:	f200 8119 	bhi.w	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80032b0:	2a00      	cmp	r2, #0
 80032b2:	f040 811c 	bne.w	80034ee <HAL_RCCEx_PeriphCLKConfig+0x25a>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80032b6:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80032ba:	682b      	ldr	r3, [r5, #0]
 80032bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032c0:	602b      	str	r3, [r5, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80032c2:	f7fe f8b1 	bl	8001428 <HAL_GetTick>
 80032c6:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80032c8:	682b      	ldr	r3, [r5, #0]
 80032ca:	011f      	lsls	r7, r3, #4
 80032cc:	f100 8131 	bmi.w	8003532 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80032d0:	692b      	ldr	r3, [r5, #16]
 80032d2:	6862      	ldr	r2, [r4, #4]
 80032d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80032dc:	612b      	str	r3, [r5, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80032de:	692b      	ldr	r3, [r5, #16]
 80032e0:	68a2      	ldr	r2, [r4, #8]
 80032e2:	f423 1378 	bic.w	r3, r3, #4063232	; 0x3e0000
 80032e6:	4313      	orrs	r3, r2
 80032e8:	612b      	str	r3, [r5, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80032ea:	682b      	ldr	r3, [r5, #0]
 80032ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032f0:	602b      	str	r3, [r5, #0]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032f2:	f7fe f899 	bl	8001428 <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80032f6:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80032fa:	4605      	mov	r5, r0
 80032fc:	6833      	ldr	r3, [r6, #0]
 80032fe:	0118      	lsls	r0, r3, #4
 8003300:	f140 81b0 	bpl.w	8003664 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003304:	6962      	ldr	r2, [r4, #20]
 8003306:	6933      	ldr	r3, [r6, #16]
 8003308:	4313      	orrs	r3, r2
 800330a:	6133      	str	r3, [r6, #16]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800330c:	6b22      	ldr	r2, [r4, #48]	; 0x30
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800330e:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003310:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
}
 8003314:	2500      	movs	r5, #0
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003316:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 800331a:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 800331e:	430a      	orrs	r2, r1
 8003320:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 8003324:	0519      	lsls	r1, r3, #20
 8003326:	d509      	bpl.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xa8>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003328:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800332c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800332e:	f8d7 6090 	ldr.w	r6, [r7, #144]	; 0x90
 8003332:	f406 7640 	and.w	r6, r6, #768	; 0x300
 8003336:	42b2      	cmp	r2, r6
 8003338:	f040 80b4 	bne.w	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x210>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800333c:	07d8      	lsls	r0, r3, #31
 800333e:	d509      	bpl.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003340:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003344:	69a0      	ldr	r0, [r4, #24]
 8003346:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800334a:	f022 0203 	bic.w	r2, r2, #3
 800334e:	4302      	orrs	r2, r0
 8003350:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003354:	0799      	lsls	r1, r3, #30
 8003356:	d509      	bpl.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003358:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800335c:	69e0      	ldr	r0, [r4, #28]
 800335e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003362:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003366:	4302      	orrs	r2, r0
 8003368:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800336c:	06da      	lsls	r2, r3, #27
 800336e:	d50c      	bpl.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xf6>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003370:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003372:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8003376:	0c31      	lsrs	r1, r6, #16
 8003378:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800337c:	0409      	lsls	r1, r1, #16
 800337e:	ea22 0201 	bic.w	r2, r2, r1
 8003382:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8003386:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800338a:	069f      	lsls	r7, r3, #26
 800338c:	d50c      	bpl.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800338e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003390:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8003394:	0c31      	lsrs	r1, r6, #16
 8003396:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800339a:	0409      	lsls	r1, r1, #16
 800339c:	ea22 0201 	bic.w	r2, r2, r1
 80033a0:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80033a4:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033a8:	075e      	lsls	r6, r3, #29
 80033aa:	d50f      	bpl.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x138>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033ac:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80033ae:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80033b2:	0911      	lsrs	r1, r2, #4
 80033b4:	f401 207f 	and.w	r0, r1, #1044480	; 0xff000
 80033b8:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
 80033bc:	0112      	lsls	r2, r2, #4
 80033be:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 80033c2:	ea21 0100 	bic.w	r1, r1, r0
 80033c6:	430a      	orrs	r2, r1
 80033c8:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033cc:	0718      	lsls	r0, r3, #28
 80033ce:	d50f      	bpl.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80033d2:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80033d6:	0911      	lsrs	r1, r2, #4
 80033d8:	f401 207f 	and.w	r0, r1, #1044480	; 0xff000
 80033dc:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
 80033e0:	0112      	lsls	r2, r2, #4
 80033e2:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 80033e6:	ea21 0100 	bic.w	r1, r1, r0
 80033ea:	430a      	orrs	r2, r1
 80033ec:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033f0:	05d9      	lsls	r1, r3, #23
 80033f2:	d510      	bpl.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x182>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80033f4:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033fa:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 80033fe:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003402:	430a      	orrs	r2, r1
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003404:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8003408:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
 800340c:	d07d      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x276>
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800340e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8003412:	f000 80d2 	beq.w	80035ba <HAL_RCCEx_PeriphCLKConfig+0x326>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003416:	059f      	lsls	r7, r3, #22
 8003418:	d513      	bpl.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800341a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800341c:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003420:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8003424:	d003      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8003426:	f031 4280 	bics.w	r2, r1, #1073741824	; 0x40000000
 800342a:	f040 808b 	bne.w	8003544 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800342e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8003432:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8003436:	430a      	orrs	r2, r1
 8003438:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800343c:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
 8003440:	d057      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003442:	055e      	lsls	r6, r3, #21
 8003444:	d50f      	bpl.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003446:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800344a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800344c:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 8003450:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003454:	430a      	orrs	r2, r1
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003456:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800345a:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
 800345e:	d04f      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003460:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8003464:	d07e      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003466:	04da      	lsls	r2, r3, #19
 8003468:	d509      	bpl.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800346a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800346e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003470:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8003474:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003478:	4302      	orrs	r2, r0
 800347a:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800347e:	049b      	lsls	r3, r3, #18
 8003480:	d50d      	bpl.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x20a>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003482:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003486:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003488:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800348a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800348e:	430b      	orrs	r3, r1
 8003490:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003492:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003494:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003496:	f023 0303 	bic.w	r3, r3, #3
 800349a:	430b      	orrs	r3, r1
 800349c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800349e:	4628      	mov	r0, r5
 80034a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      HAL_PWR_EnableBkUpAccess();
 80034a4:	f7ff f94c 	bl	8002740 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80034a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80034ac:	2e00      	cmp	r6, #0
 80034ae:	d038      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80034b0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80034b4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80034b8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80034bc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80034c0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80034c4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80034c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80034ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ce:	4313      	orrs	r3, r2
        LL_RCC_WriteReg(BDCR, bdcr);
 80034d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80034d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80034d8:	07da      	lsls	r2, r3, #31
 80034da:	f100 80b1 	bmi.w	8003640 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034de:	6823      	ldr	r3, [r4, #0]
 80034e0:	e72c      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xa8>
    switch (PeriphClkInit->Sai1ClockSelection)
 80034e2:	f422 0180 	bic.w	r1, r2, #4194304	; 0x400000
 80034e6:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80034ea:	f43f af11 	beq.w	8003310 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80034ee:	2501      	movs	r5, #1
 80034f0:	e718      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x90>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80034f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034f6:	68ca      	ldr	r2, [r1, #12]
 80034f8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80034fc:	60ca      	str	r2, [r1, #12]
 80034fe:	e7a0      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003500:	68f2      	ldr	r2, [r6, #12]
 8003502:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003506:	60f2      	str	r2, [r6, #12]
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003508:	e7ad      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800350a:	68f2      	ldr	r2, [r6, #12]
 800350c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003510:	60f2      	str	r2, [r6, #12]
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003512:	e780      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x182>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003514:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8003518:	68c1      	ldr	r1, [r0, #12]
 800351a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800351e:	60c1      	str	r1, [r0, #12]
    if (ret == HAL_OK)
 8003520:	e6f6      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003522:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800352e:	6823      	ldr	r3, [r4, #0]
}
 8003530:	e704      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xa8>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003532:	f7fd ff79 	bl	8001428 <HAL_GetTick>
 8003536:	1b80      	subs	r0, r0, r6
 8003538:	2802      	cmp	r0, #2
 800353a:	f67f aec5 	bls.w	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x34>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	2503      	movs	r5, #3
 8003542:	e6ef      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x90>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003544:	f8d0 6088 	ldr.w	r6, [r0, #136]	; 0x88
 8003548:	f026 4640 	bic.w	r6, r6, #3221225472	; 0xc0000000
 800354c:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003550:	f8d0 6088 	ldr.w	r6, [r0, #136]	; 0x88
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003554:	f021 5280 	bic.w	r2, r1, #268435456	; 0x10000000
 8003558:	f026 6640 	bic.w	r6, r6, #201326592	; 0xc000000
 800355c:	4332      	orrs	r2, r6
 800355e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
}
 8003562:	e76b      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003564:	6833      	ldr	r3, [r6, #0]
 8003566:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800356a:	6033      	str	r3, [r6, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800356c:	f7fd ff5c 	bl	8001428 <HAL_GetTick>
 8003570:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003572:	6833      	ldr	r3, [r6, #0]
 8003574:	0118      	lsls	r0, r3, #4
 8003576:	d451      	bmi.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x388>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003578:	6933      	ldr	r3, [r6, #16]
 800357a:	6862      	ldr	r2, [r4, #4]
 800357c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003580:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003584:	6133      	str	r3, [r6, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003586:	6933      	ldr	r3, [r6, #16]
 8003588:	6922      	ldr	r2, [r4, #16]
 800358a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800358e:	4313      	orrs	r3, r2
 8003590:	6133      	str	r3, [r6, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003592:	6833      	ldr	r3, [r6, #0]
 8003594:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003598:	6033      	str	r3, [r6, #0]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800359a:	f7fd ff45 	bl	8001428 <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800359e:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80035a2:	4606      	mov	r6, r0
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	0119      	lsls	r1, r3, #4
 80035a8:	d444      	bmi.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x3a0>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035aa:	f7fd ff3d 	bl	8001428 <HAL_GetTick>
 80035ae:	1b80      	subs	r0, r0, r6
 80035b0:	2802      	cmp	r0, #2
 80035b2:	d9f7      	bls.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80035b4:	6823      	ldr	r3, [r4, #0]
 80035b6:	2503      	movs	r5, #3
 80035b8:	e755      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80035ba:	6833      	ldr	r3, [r6, #0]
 80035bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035c0:	6033      	str	r3, [r6, #0]
  tickstart = HAL_GetTick();
 80035c2:	f7fd ff31 	bl	8001428 <HAL_GetTick>
 80035c6:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80035c8:	6833      	ldr	r3, [r6, #0]
 80035ca:	011a      	lsls	r2, r3, #4
 80035cc:	d420      	bmi.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x37c>
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80035ce:	6933      	ldr	r3, [r6, #16]
 80035d0:	6862      	ldr	r2, [r4, #4]
 80035d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80035da:	6133      	str	r3, [r6, #16]
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80035dc:	6933      	ldr	r3, [r6, #16]
 80035de:	68e2      	ldr	r2, [r4, #12]
 80035e0:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80035e4:	4313      	orrs	r3, r2
 80035e6:	6133      	str	r3, [r6, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80035e8:	6833      	ldr	r3, [r6, #0]
 80035ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035ee:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80035f0:	f7fd ff1a 	bl	8001428 <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80035f4:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80035f8:	4606      	mov	r6, r0
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	d413      	bmi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x394>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003600:	f7fd ff12 	bl	8001428 <HAL_GetTick>
 8003604:	1b80      	subs	r0, r0, r6
 8003606:	2802      	cmp	r0, #2
 8003608:	d9f7      	bls.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x366>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	2503      	movs	r5, #3
 800360e:	e702      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x182>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003610:	f7fd ff0a 	bl	8001428 <HAL_GetTick>
 8003614:	1bc0      	subs	r0, r0, r7
 8003616:	2802      	cmp	r0, #2
 8003618:	d9d6      	bls.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x334>
 800361a:	e7f6      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x376>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800361c:	f7fd ff04 	bl	8001428 <HAL_GetTick>
 8003620:	1bc0      	subs	r0, r0, r7
 8003622:	2802      	cmp	r0, #2
 8003624:	d9a5      	bls.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003626:	e7c5      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x320>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	6962      	ldr	r2, [r4, #20]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003630:	6823      	ldr	r3, [r4, #0]
 8003632:	e6f0      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x182>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	6962      	ldr	r2, [r4, #20]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800363c:	6823      	ldr	r3, [r4, #0]
 800363e:	e712      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
          tickstart = HAL_GetTick();
 8003640:	f7fd fef2 	bl	8001428 <HAL_GetTick>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003644:	f241 3888 	movw	r8, #5000	; 0x1388
          tickstart = HAL_GetTick();
 8003648:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800364a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800364e:	079b      	lsls	r3, r3, #30
 8003650:	f53f af45 	bmi.w	80034de <HAL_RCCEx_PeriphCLKConfig+0x24a>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003654:	f7fd fee8 	bl	8001428 <HAL_GetTick>
 8003658:	1b80      	subs	r0, r0, r6
 800365a:	4540      	cmp	r0, r8
 800365c:	d9f5      	bls.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800365e:	6823      	ldr	r3, [r4, #0]
              ret = HAL_TIMEOUT;
 8003660:	2503      	movs	r5, #3
 8003662:	e66b      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003664:	f7fd fee0 	bl	8001428 <HAL_GetTick>
 8003668:	1b40      	subs	r0, r0, r5
 800366a:	2802      	cmp	r0, #2
 800366c:	f67f ae46 	bls.w	80032fc <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003670:	e765      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8003672:	bf00      	nop

08003674 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003674:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003678:	6813      	ldr	r3, [r2, #0]
 800367a:	f043 0304 	orr.w	r3, r3, #4
 800367e:	6013      	str	r3, [r2, #0]
}
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop

08003684 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003684:	2800      	cmp	r0, #0
 8003686:	d070      	beq.n	800376a <HAL_TIM_Base_Init+0xe6>
{
 8003688:	b510      	push	{r4, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800368a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800368e:	4604      	mov	r4, r0
 8003690:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003694:	2b00      	cmp	r3, #0
 8003696:	d047      	beq.n	8003728 <HAL_TIM_Base_Init+0xa4>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003698:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800369a:	4935      	ldr	r1, [pc, #212]	; (8003770 <HAL_TIM_Base_Init+0xec>)
  htim->State = HAL_TIM_STATE_BUSY;
 800369c:	2302      	movs	r3, #2
 800369e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036a2:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80036a4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036a6:	d044      	beq.n	8003732 <HAL_TIM_Base_Init+0xae>
 80036a8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80036ac:	d04b      	beq.n	8003746 <HAL_TIM_Base_Init+0xc2>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ae:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 80036b2:	428a      	cmp	r2, r1
 80036b4:	d00d      	beq.n	80036d2 <HAL_TIM_Base_Init+0x4e>
 80036b6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80036ba:	428a      	cmp	r2, r1
 80036bc:	d009      	beq.n	80036d2 <HAL_TIM_Base_Init+0x4e>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036be:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036c0:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036c6:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80036c8:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036ca:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036cc:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80036ce:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036d0:	e00e      	b.n	80036f0 <HAL_TIM_Base_Init+0x6c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036d2:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036d4:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80036d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036da:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036e0:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80036e2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036e4:	68e3      	ldr	r3, [r4, #12]
 80036e6:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80036e8:	6863      	ldr	r3, [r4, #4]
 80036ea:	6293      	str	r3, [r2, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036ec:	6963      	ldr	r3, [r4, #20]
 80036ee:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036f0:	2301      	movs	r3, #1
 80036f2:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036f4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80036fc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003700:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003704:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003708:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800370c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003710:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003714:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003718:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800371c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003720:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003724:	2000      	movs	r0, #0
}
 8003726:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003728:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800372c:	f7fd fd30 	bl	8001190 <HAL_TIM_Base_MspInit>
 8003730:	e7b2      	b.n	8003698 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8003732:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003734:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800373a:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800373c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003740:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003742:	69a1      	ldr	r1, [r4, #24]
 8003744:	e7ca      	b.n	80036dc <HAL_TIM_Base_Init+0x58>
    tmpcr1 |= Structure->CounterMode;
 8003746:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003748:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800374a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800374e:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8003750:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003754:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003756:	69a1      	ldr	r1, [r4, #24]
 8003758:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800375c:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800375e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003760:	68e3      	ldr	r3, [r4, #12]
 8003762:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003764:	6863      	ldr	r3, [r4, #4]
 8003766:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003768:	e7c2      	b.n	80036f0 <HAL_TIM_Base_Init+0x6c>
    return HAL_ERROR;
 800376a:	2001      	movs	r0, #1
}
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40012c00 	.word	0x40012c00

08003774 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003774:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003778:	2b01      	cmp	r3, #1
 800377a:	d113      	bne.n	80037a4 <HAL_TIM_Base_Start_IT+0x30>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800377c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800377e:	490f      	ldr	r1, [pc, #60]	; (80037bc <HAL_TIM_Base_Start_IT+0x48>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003780:	2202      	movs	r2, #2
 8003782:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003786:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003788:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800378a:	f042 0201 	orr.w	r2, r2, #1
 800378e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003790:	d00a      	beq.n	80037a8 <HAL_TIM_Base_Start_IT+0x34>
 8003792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003796:	d007      	beq.n	80037a8 <HAL_TIM_Base_Start_IT+0x34>
    __HAL_TIM_ENABLE(htim);
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 800379e:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	4770      	bx	lr
    return HAL_ERROR;
 80037a4:	2001      	movs	r0, #1
 80037a6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037a8:	6899      	ldr	r1, [r3, #8]
 80037aa:	4a05      	ldr	r2, [pc, #20]	; (80037c0 <HAL_TIM_Base_Start_IT+0x4c>)
 80037ac:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ae:	2a06      	cmp	r2, #6
 80037b0:	d002      	beq.n	80037b8 <HAL_TIM_Base_Start_IT+0x44>
 80037b2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80037b6:	d1ef      	bne.n	8003798 <HAL_TIM_Base_Start_IT+0x24>
  return HAL_OK;
 80037b8:	2000      	movs	r0, #0
}
 80037ba:	4770      	bx	lr
 80037bc:	40012c00 	.word	0x40012c00
 80037c0:	00010007 	.word	0x00010007

080037c4 <HAL_TIM_PeriodElapsedCallback>:
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop

080037c8 <HAL_TIM_OC_DelayElapsedCallback>:
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop

080037cc <HAL_TIM_IC_CaptureCallback>:
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop

080037d0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop

080037d4 <HAL_TIM_TriggerCallback>:
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop

080037d8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037d8:	6803      	ldr	r3, [r0, #0]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	0791      	lsls	r1, r2, #30
{
 80037de:	b510      	push	{r4, lr}
 80037e0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037e2:	d502      	bpl.n	80037ea <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037e4:	68da      	ldr	r2, [r3, #12]
 80037e6:	0792      	lsls	r2, r2, #30
 80037e8:	d468      	bmi.n	80038bc <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037ea:	691a      	ldr	r2, [r3, #16]
 80037ec:	0752      	lsls	r2, r2, #29
 80037ee:	d502      	bpl.n	80037f6 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	0750      	lsls	r0, r2, #29
 80037f4:	d44f      	bmi.n	8003896 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037f6:	691a      	ldr	r2, [r3, #16]
 80037f8:	0711      	lsls	r1, r2, #28
 80037fa:	d502      	bpl.n	8003802 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	0712      	lsls	r2, r2, #28
 8003800:	d437      	bmi.n	8003872 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	06d0      	lsls	r0, r2, #27
 8003806:	d502      	bpl.n	800380e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	06d1      	lsls	r1, r2, #27
 800380c:	d41e      	bmi.n	800384c <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	07d2      	lsls	r2, r2, #31
 8003812:	d502      	bpl.n	800381a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	07d0      	lsls	r0, r2, #31
 8003818:	d469      	bmi.n	80038ee <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	0611      	lsls	r1, r2, #24
 800381e:	d502      	bpl.n	8003826 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	0612      	lsls	r2, r2, #24
 8003824:	d46b      	bmi.n	80038fe <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003826:	691a      	ldr	r2, [r3, #16]
 8003828:	05d0      	lsls	r0, r2, #23
 800382a:	d502      	bpl.n	8003832 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	0611      	lsls	r1, r2, #24
 8003830:	d46d      	bmi.n	800390e <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003832:	691a      	ldr	r2, [r3, #16]
 8003834:	0652      	lsls	r2, r2, #25
 8003836:	d502      	bpl.n	800383e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	0650      	lsls	r0, r2, #25
 800383c:	d46f      	bmi.n	800391e <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	0691      	lsls	r1, r2, #26
 8003842:	d502      	bpl.n	800384a <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	0692      	lsls	r2, r2, #26
 8003848:	d449      	bmi.n	80038de <HAL_TIM_IRQHandler+0x106>
}
 800384a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800384c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003850:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003852:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003854:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800385c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800385e:	d16f      	bne.n	8003940 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003860:	f7ff ffb2 	bl	80037c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003864:	4620      	mov	r0, r4
 8003866:	f7ff ffb3 	bl	80037d0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800386a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800386c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800386e:	7722      	strb	r2, [r4, #28]
 8003870:	e7cd      	b.n	800380e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003872:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003876:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003878:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800387a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8003880:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003882:	d15a      	bne.n	800393a <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003884:	f7ff ffa0 	bl	80037c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003888:	4620      	mov	r0, r4
 800388a:	f7ff ffa1 	bl	80037d0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800388e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003890:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003892:	7722      	strb	r2, [r4, #28]
 8003894:	e7b5      	b.n	8003802 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003896:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800389a:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800389c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800389e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80038a6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038a8:	d144      	bne.n	8003934 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038aa:	f7ff ff8d 	bl	80037c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ae:	4620      	mov	r0, r4
 80038b0:	f7ff ff8e 	bl	80037d0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b4:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038b6:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b8:	7722      	strb	r2, [r4, #28]
 80038ba:	e79c      	b.n	80037f6 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038bc:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038c0:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038c2:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038c4:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	0799      	lsls	r1, r3, #30
 80038ca:	d130      	bne.n	800392e <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038cc:	f7ff ff7c 	bl	80037c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d0:	4620      	mov	r0, r4
 80038d2:	f7ff ff7d 	bl	80037d0 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038d8:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038da:	7722      	strb	r2, [r4, #28]
 80038dc:	e785      	b.n	80037ea <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038de:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80038e2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038e4:	611a      	str	r2, [r3, #16]
}
 80038e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80038ea:	f000 b82d 	b.w	8003948 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038ee:	f06f 0201 	mvn.w	r2, #1
 80038f2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80038f4:	4620      	mov	r0, r4
 80038f6:	f7ff ff65 	bl	80037c4 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038fa:	6823      	ldr	r3, [r4, #0]
 80038fc:	e78d      	b.n	800381a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003902:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003904:	4620      	mov	r0, r4
 8003906:	f000 f821 	bl	800394c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	e78b      	b.n	8003826 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800390e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003912:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003914:	4620      	mov	r0, r4
 8003916:	f000 f81b 	bl	8003950 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	e789      	b.n	8003832 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800391e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003922:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003924:	4620      	mov	r0, r4
 8003926:	f7ff ff55 	bl	80037d4 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800392a:	6823      	ldr	r3, [r4, #0]
 800392c:	e787      	b.n	800383e <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800392e:	f7ff ff4d 	bl	80037cc <HAL_TIM_IC_CaptureCallback>
 8003932:	e7d0      	b.n	80038d6 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8003934:	f7ff ff4a 	bl	80037cc <HAL_TIM_IC_CaptureCallback>
 8003938:	e7bc      	b.n	80038b4 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800393a:	f7ff ff47 	bl	80037cc <HAL_TIM_IC_CaptureCallback>
 800393e:	e7a6      	b.n	800388e <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8003940:	f7ff ff44 	bl	80037cc <HAL_TIM_IC_CaptureCallback>
 8003944:	e791      	b.n	800386a <HAL_TIM_IRQHandler+0x92>
 8003946:	bf00      	nop

08003948 <HAL_TIMEx_CommutCallback>:
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop

0800394c <HAL_TIMEx_BreakCallback>:
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop

08003950 <HAL_TIMEx_Break2Callback>:
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop

08003954 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003954:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003956:	f64b 7280 	movw	r2, #49024	; 0xbf80
  USBx->ISTR = 0U;
 800395a:	2000      	movs	r0, #0
 800395c:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8003960:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop

08003968 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003968:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40
{
 800396c:	4603      	mov	r3, r0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800396e:	f244 027f 	movw	r2, #16511	; 0x407f
 8003972:	400a      	ands	r2, r1

  return HAL_OK;
}
 8003974:	2000      	movs	r0, #0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003976:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 800397a:	4770      	bx	lr

0800397c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800397c:	b084      	sub	sp, #16
 800397e:	4684      	mov	ip, r0
 8003980:	a801      	add	r0, sp, #4
 8003982:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003986:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003988:	2301      	movs	r3, #1
 800398a:	f8ac 3040 	strh.w	r3, [ip, #64]	; 0x40

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 800398e:	b004      	add	sp, #16
  USBx->CNTR = 0U;
 8003990:	f8ac 0040 	strh.w	r0, [ip, #64]	; 0x40
  USBx->ISTR = 0U;
 8003994:	f8ac 0044 	strh.w	r0, [ip, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8003998:	f8ac 0050 	strh.w	r0, [ip, #80]	; 0x50
}
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop

080039a0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80039a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80039a2:	780c      	ldrb	r4, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80039a4:	f891 c003 	ldrb.w	ip, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80039a8:	b222      	sxth	r2, r4
 80039aa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80039ae:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80039b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b6:	041b      	lsls	r3, r3, #16
 80039b8:	0c1b      	lsrs	r3, r3, #16
  switch (ep->type)
 80039ba:	f1bc 0f03 	cmp.w	ip, #3
 80039be:	f200 819b 	bhi.w	8003cf8 <USB_ActivateEndpoint+0x358>
 80039c2:	e8df f00c 	tbb	[pc, ip]
 80039c6:	bfbc      	.short	0xbfbc
 80039c8:	0272      	.short	0x0272
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80039ca:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80039ce:	f248 0580 	movw	r5, #32896	; 0x8080
 80039d2:	432b      	orrs	r3, r5
 80039d4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80039d8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80039dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e4:	041b      	lsls	r3, r3, #16
 80039e6:	0c1b      	lsrs	r3, r3, #16
 80039e8:	4323      	orrs	r3, r4
 80039ea:	432b      	orrs	r3, r5
 80039ec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 80039f0:	7b0d      	ldrb	r5, [r1, #12]
 80039f2:	2d00      	cmp	r5, #0
 80039f4:	d06d      	beq.n	8003ad2 <USB_ActivateEndpoint+0x132>
 80039f6:	2500      	movs	r5, #0
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80039f8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80039fc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a04:	041b      	lsls	r3, r3, #16
 8003a06:	0c1b      	lsrs	r3, r3, #16
 8003a08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a10:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003a14:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
 8003a18:	890b      	ldrh	r3, [r1, #8]
 8003a1a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8003a1e:	fa14 fe8e 	uxtah	lr, r4, lr
 8003a22:	085b      	lsrs	r3, r3, #1
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	f8ae 3400 	strh.w	r3, [lr, #1024]	; 0x400
 8003a2a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003a2e:	fa14 f483 	uxtah	r4, r4, r3
 8003a32:	894b      	ldrh	r3, [r1, #10]
 8003a34:	085b      	lsrs	r3, r3, #1
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	f8a4 3404 	strh.w	r3, [r4, #1028]	; 0x404

    if (ep->is_in == 0U)
 8003a3c:	784b      	ldrb	r3, [r1, #1]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f040 80d8 	bne.w	8003bf4 <USB_ActivateEndpoint+0x254>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a44:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a48:	045e      	lsls	r6, r3, #17
 8003a4a:	d50d      	bpl.n	8003a68 <USB_ActivateEndpoint+0xc8>
 8003a4c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a58:	041b      	lsls	r3, r3, #16
 8003a5a:	0c1b      	lsrs	r3, r3, #16
 8003a5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a64:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a68:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a6c:	065c      	lsls	r4, r3, #25
 8003a6e:	f100 8108 	bmi.w	8003c82 <USB_ActivateEndpoint+0x2e2>

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003a72:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7e:	041b      	lsls	r3, r3, #16
 8003a80:	0c1b      	lsrs	r3, r3, #16
 8003a82:	f248 0180 	movw	r1, #32896	; 0x8080
 8003a86:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003a8a:	430b      	orrs	r3, r1
 8003a8c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a90:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a9c:	041b      	lsls	r3, r3, #16
 8003a9e:	0c1b      	lsrs	r3, r3, #16
 8003aa0:	430b      	orrs	r3, r1
 8003aa2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8003aa6:	4628      	mov	r0, r5
 8003aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003aaa:	f248 0e80 	movw	lr, #32896	; 0x8080
 8003aae:	ea43 030e 	orr.w	r3, r3, lr
 8003ab2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003ab6:	f830 5022 	ldrh.w	r5, [r0, r2, lsl #2]
 8003aba:	4e9b      	ldr	r6, [pc, #620]	; (8003d28 <USB_ActivateEndpoint+0x388>)
 8003abc:	b2ad      	uxth	r5, r5
 8003abe:	4035      	ands	r5, r6
 8003ac0:	4325      	orrs	r5, r4
 8003ac2:	ea4e 0505 	orr.w	r5, lr, r5
 8003ac6:	f820 5022 	strh.w	r5, [r0, r2, lsl #2]
  if (ep->doublebuffer == 0U)
 8003aca:	7b0d      	ldrb	r5, [r1, #12]
 8003acc:	2d00      	cmp	r5, #0
 8003ace:	f040 80f9 	bne.w	8003cc4 <USB_ActivateEndpoint+0x324>
    if (ep->is_in != 0U)
 8003ad2:	784b      	ldrb	r3, [r1, #1]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d042      	beq.n	8003b5e <USB_ActivateEndpoint+0x1be>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003ad8:	88cb      	ldrh	r3, [r1, #6]
 8003ada:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8003ade:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8003ae2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003ae6:	085b      	lsrs	r3, r3, #1
 8003ae8:	b289      	uxth	r1, r1
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	5263      	strh	r3, [r4, r1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003aee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003af2:	065b      	lsls	r3, r3, #25
 8003af4:	d50d      	bpl.n	8003b12 <USB_ActivateEndpoint+0x172>
 8003af6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b02:	041b      	lsls	r3, r3, #16
 8003b04:	0c1b      	lsrs	r3, r3, #16
 8003b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b0e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003b12:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b1e:	041b      	lsls	r3, r3, #16
      if (ep->type != EP_TYPE_ISOC)
 8003b20:	f1bc 0f01 	cmp.w	ip, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003b24:	ea4f 4313 	mov.w	r3, r3, lsr #16
      if (ep->type != EP_TYPE_ISOC)
 8003b28:	d011      	beq.n	8003b4e <USB_ActivateEndpoint+0x1ae>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003b2a:	f083 0320 	eor.w	r3, r3, #32
 8003b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b36:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8003b3a:	4628      	mov	r0, r5
 8003b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_CONTROL;
 8003b3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      break;
 8003b42:	e744      	b.n	80039ce <USB_ActivateEndpoint+0x2e>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003b44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
      break;
 8003b48:	e741      	b.n	80039ce <USB_ActivateEndpoint+0x2e>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003b4a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b56:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8003b5a:	4628      	mov	r0, r5
 8003b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b5e:	88cb      	ldrh	r3, [r1, #6]
 8003b60:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003b64:	690f      	ldr	r7, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b66:	0859      	lsrs	r1, r3, #1
 8003b68:	eb00 03c4 	add.w	r3, r0, r4, lsl #3
 8003b6c:	fa13 f686 	uxtah	r6, r3, r6
 8003b70:	0049      	lsls	r1, r1, #1
 8003b72:	f8a6 1404 	strh.w	r1, [r6, #1028]	; 0x404
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003b76:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8003b7a:	fa13 f381 	uxtah	r3, r3, r1
 8003b7e:	2f3e      	cmp	r7, #62	; 0x3e
 8003b80:	f8b3 1406 	ldrh.w	r1, [r3, #1030]	; 0x406
 8003b84:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003b88:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 8003b8c:	f200 8088 	bhi.w	8003ca0 <USB_ActivateEndpoint+0x300>
 8003b90:	2f00      	cmp	r7, #0
 8003b92:	f040 80a3 	bne.w	8003cdc <USB_ActivateEndpoint+0x33c>
 8003b96:	f8b3 1406 	ldrh.w	r1, [r3, #1030]	; 0x406
 8003b9a:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003b9e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003ba2:	b289      	uxth	r1, r1
 8003ba4:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ba8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003bac:	045f      	lsls	r7, r3, #17
 8003bae:	d50d      	bpl.n	8003bcc <USB_ActivateEndpoint+0x22c>
 8003bb0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003bb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bbc:	041b      	lsls	r3, r3, #16
 8003bbe:	0c1b      	lsrs	r3, r3, #16
 8003bc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bc8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003bcc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003bd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd8:	041b      	lsls	r3, r3, #16
 8003bda:	0c1b      	lsrs	r3, r3, #16
      if (ep->num == 0U)
 8003bdc:	2c00      	cmp	r4, #0
 8003bde:	d1b4      	bne.n	8003b4a <USB_ActivateEndpoint+0x1aa>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003be0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003be4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8003bf0:	4628      	mov	r0, r5
 8003bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003bf4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003bf8:	0459      	lsls	r1, r3, #17
 8003bfa:	d50d      	bpl.n	8003c18 <USB_ActivateEndpoint+0x278>
 8003bfc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003c00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c08:	041b      	lsls	r3, r3, #16
 8003c0a:	0c1b      	lsrs	r3, r3, #16
 8003c0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c14:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c18:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003c1c:	065b      	lsls	r3, r3, #25
 8003c1e:	d50d      	bpl.n	8003c3c <USB_ActivateEndpoint+0x29c>
 8003c20:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003c24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2c:	041b      	lsls	r3, r3, #16
 8003c2e:	0c1b      	lsrs	r3, r3, #16
 8003c30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c38:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003c3c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003c40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c48:	041b      	lsls	r3, r3, #16
 8003c4a:	0c1b      	lsrs	r3, r3, #16
      if (ep->type != EP_TYPE_ISOC)
 8003c4c:	f1bc 0f01 	cmp.w	ip, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003c50:	bf18      	it	ne
 8003c52:	f083 0320 	eorne.w	r3, r3, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c5e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c62:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003c66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6e:	041b      	lsls	r3, r3, #16
 8003c70:	0c1b      	lsrs	r3, r3, #16
 8003c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c7a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8003c7e:	4628      	mov	r0, r5
 8003c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c82:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c8e:	041b      	lsls	r3, r3, #16
 8003c90:	0c1b      	lsrs	r3, r3, #16
 8003c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c9a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003c9e:	e6e8      	b.n	8003a72 <USB_ActivateEndpoint+0xd2>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003ca0:	f8b3 1406 	ldrh.w	r1, [r3, #1030]	; 0x406
 8003ca4:	097e      	lsrs	r6, r7, #5
 8003ca6:	06ff      	lsls	r7, r7, #27
 8003ca8:	bf08      	it	eq
 8003caa:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8003cae:	b289      	uxth	r1, r1
 8003cb0:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8003cb4:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003cb8:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003cbc:	b289      	uxth	r1, r1
 8003cbe:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 8003cc2:	e771      	b.n	8003ba8 <USB_ActivateEndpoint+0x208>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003cc4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	4033      	ands	r3, r6
 8003ccc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cd4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003cd8:	2500      	movs	r5, #0
 8003cda:	e69b      	b.n	8003a14 <USB_ActivateEndpoint+0x74>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003cdc:	07f9      	lsls	r1, r7, #31
 8003cde:	f8b3 1406 	ldrh.w	r1, [r3, #1030]	; 0x406
 8003ce2:	ea4f 0657 	mov.w	r6, r7, lsr #1
 8003ce6:	bf48      	it	mi
 8003ce8:	3601      	addmi	r6, #1
 8003cea:	b289      	uxth	r1, r1
 8003cec:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8003cf0:	b289      	uxth	r1, r1
 8003cf2:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 8003cf6:	e757      	b.n	8003ba8 <USB_ActivateEndpoint+0x208>
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003cf8:	f248 0580 	movw	r5, #32896	; 0x8080
 8003cfc:	432b      	orrs	r3, r5
 8003cfe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003d02:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d0e:	041b      	lsls	r3, r3, #16
 8003d10:	0c1b      	lsrs	r3, r3, #16
 8003d12:	4323      	orrs	r3, r4
 8003d14:	432b      	orrs	r3, r5
 8003d16:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  if (ep->doublebuffer == 0U)
 8003d1a:	7b0b      	ldrb	r3, [r1, #12]
 8003d1c:	2501      	movs	r5, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f47f ae6a 	bne.w	80039f8 <USB_ActivateEndpoint+0x58>
 8003d24:	e6d5      	b.n	8003ad2 <USB_ActivateEndpoint+0x132>
 8003d26:	bf00      	nop
 8003d28:	ffff8f8f 	.word	0xffff8f8f

08003d2c <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8003d2c:	7b0b      	ldrb	r3, [r1, #12]
 8003d2e:	b9cb      	cbnz	r3, 8003d64 <USB_DeactivateEndpoint+0x38>
  {
    if (ep->is_in != 0U)
 8003d30:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d32:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 80b1 	beq.w	8003e9c <USB_DeactivateEndpoint+0x170>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d3a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003d3e:	0659      	lsls	r1, r3, #25
 8003d40:	f100 80c5 	bmi.w	8003ece <USB_DeactivateEndpoint+0x1a2>

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d44:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003d48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d50:	041b      	lsls	r3, r3, #16
 8003d52:	0c1b      	lsrs	r3, r3, #16
 8003d54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d5c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8003d60:	2000      	movs	r0, #0
 8003d62:	4770      	bx	lr
    if (ep->is_in == 0U)
 8003d64:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d66:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in == 0U)
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d14b      	bne.n	8003e04 <USB_DeactivateEndpoint+0xd8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d6c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003d70:	0459      	lsls	r1, r3, #17
 8003d72:	d50d      	bpl.n	8003d90 <USB_DeactivateEndpoint+0x64>
 8003d74:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003d78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d80:	041b      	lsls	r3, r3, #16
 8003d82:	0c1b      	lsrs	r3, r3, #16
 8003d84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d8c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d90:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003d94:	065b      	lsls	r3, r3, #25
 8003d96:	d50d      	bpl.n	8003db4 <USB_DeactivateEndpoint+0x88>
 8003d98:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003d9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da4:	041b      	lsls	r3, r3, #16
 8003da6:	0c1b      	lsrs	r3, r3, #16
 8003da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003db0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8003db4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003db8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc0:	041b      	lsls	r3, r3, #16
 8003dc2:	0c1b      	lsrs	r3, r3, #16
 8003dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dc8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003dcc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003dd0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003dd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ddc:	041b      	lsls	r3, r3, #16
 8003dde:	f248 0180 	movw	r1, #32896	; 0x8080
 8003de2:	0c1b      	lsrs	r3, r3, #16
 8003de4:	430b      	orrs	r3, r1
 8003de6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003dea:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003df2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003df6:	041b      	lsls	r3, r3, #16
 8003df8:	0c1b      	lsrs	r3, r3, #16
 8003dfa:	430b      	orrs	r3, r1
 8003dfc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8003e00:	2000      	movs	r0, #0
 8003e02:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e04:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003e08:	0459      	lsls	r1, r3, #17
 8003e0a:	d50d      	bpl.n	8003e28 <USB_DeactivateEndpoint+0xfc>
 8003e0c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003e10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e18:	041b      	lsls	r3, r3, #16
 8003e1a:	0c1b      	lsrs	r3, r3, #16
 8003e1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e24:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e28:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003e2c:	065b      	lsls	r3, r3, #25
 8003e2e:	d50d      	bpl.n	8003e4c <USB_DeactivateEndpoint+0x120>
 8003e30:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003e34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3c:	041b      	lsls	r3, r3, #16
 8003e3e:	0c1b      	lsrs	r3, r3, #16
 8003e40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e48:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8003e4c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003e50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e58:	041b      	lsls	r3, r3, #16
 8003e5a:	0c1b      	lsrs	r3, r3, #16
 8003e5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e64:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e68:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e74:	041b      	lsls	r3, r3, #16
 8003e76:	f248 0180 	movw	r1, #32896	; 0x8080
 8003e7a:	0c1b      	lsrs	r3, r3, #16
 8003e7c:	430b      	orrs	r3, r1
 8003e7e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e82:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003e86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8e:	041b      	lsls	r3, r3, #16
 8003e90:	0c1b      	lsrs	r3, r3, #16
 8003e92:	430b      	orrs	r3, r1
 8003e94:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8003e98:	2000      	movs	r0, #0
 8003e9a:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e9c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003ea0:	045b      	lsls	r3, r3, #17
 8003ea2:	d50d      	bpl.n	8003ec0 <USB_DeactivateEndpoint+0x194>
 8003ea4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003ea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb0:	041b      	lsls	r3, r3, #16
 8003eb2:	0c1b      	lsrs	r3, r3, #16
 8003eb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ebc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ec0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003ec4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ecc:	e740      	b.n	8003d50 <USB_DeactivateEndpoint+0x24>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ece:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eda:	041b      	lsls	r3, r3, #16
 8003edc:	0c1b      	lsrs	r3, r3, #16
 8003ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ee2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ee6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003eea:	e72b      	b.n	8003d44 <USB_DeactivateEndpoint+0x18>

08003eec <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ef0:	784b      	ldrb	r3, [r1, #1]
 8003ef2:	2b01      	cmp	r3, #1
{
 8003ef4:	4602      	mov	r2, r0
  if (ep->is_in == 1U)
 8003ef6:	f000 808b 	beq.w	8004010 <USB_EPStartXfer+0x124>

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8003efa:	7b08      	ldrb	r0, [r1, #12]
 8003efc:	2800      	cmp	r0, #0
 8003efe:	d050      	beq.n	8003fa2 <USB_EPStartXfer+0xb6>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8003f00:	78c8      	ldrb	r0, [r1, #3]
 8003f02:	2802      	cmp	r0, #2
 8003f04:	f000 811e 	beq.w	8004144 <USB_EPStartXfer+0x258>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8003f08:	2801      	cmp	r0, #1
 8003f0a:	f040 80f2 	bne.w	80040f2 <USB_EPStartXfer+0x206>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8003f0e:	6988      	ldr	r0, [r1, #24]
 8003f10:	690c      	ldr	r4, [r1, #16]
 8003f12:	42a0      	cmp	r0, r4
        {
          len = ep->maxpacket;
          ep->xfer_len -= len;
 8003f14:	bf8a      	itet	hi
 8003f16:	1b05      	subhi	r5, r0, r4
        }
        else
        {
          len = ep->xfer_len;
          ep->xfer_len = 0U;
 8003f18:	2500      	movls	r5, #0
 8003f1a:	4620      	movhi	r0, r4
 8003f1c:	618d      	str	r5, [r1, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f040 810e 	bne.w	8004140 <USB_EPStartXfer+0x254>
 8003f24:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
 8003f28:	780b      	ldrb	r3, [r1, #0]
 8003f2a:	f202 4402 	addw	r4, r2, #1026	; 0x402
 8003f2e:	fa14 f485 	uxtah	r4, r4, r5
 8003f32:	283e      	cmp	r0, #62	; 0x3e
 8003f34:	f834 5033 	ldrh.w	r5, [r4, r3, lsl #3]
 8003f38:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8003f3c:	f824 5033 	strh.w	r5, [r4, r3, lsl #3]
 8003f40:	f240 8233 	bls.w	80043aa <USB_EPStartXfer+0x4be>
 8003f44:	f834 5033 	ldrh.w	r5, [r4, r3, lsl #3]
 8003f48:	0946      	lsrs	r6, r0, #5
 8003f4a:	f010 001f 	ands.w	r0, r0, #31
 8003f4e:	4637      	mov	r7, r6
 8003f50:	b2ad      	uxth	r5, r5
 8003f52:	bf08      	it	eq
 8003f54:	f106 37ff 	addeq.w	r7, r6, #4294967295
 8003f58:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 8003f5c:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 8003f60:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 8003f64:	b2ad      	uxth	r5, r5
 8003f66:	f824 5033 	strh.w	r5, [r4, r3, lsl #3]
 8003f6a:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
 8003f6e:	f202 4406 	addw	r4, r2, #1030	; 0x406
 8003f72:	fa14 f485 	uxtah	r4, r4, r5
 8003f76:	f834 5033 	ldrh.w	r5, [r4, r3, lsl #3]
 8003f7a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8003f7e:	f824 5033 	strh.w	r5, [r4, r3, lsl #3]
 8003f82:	b900      	cbnz	r0, 8003f86 <USB_EPStartXfer+0x9a>
 8003f84:	3e01      	subs	r6, #1
 8003f86:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 8003f8a:	b280      	uxth	r0, r0
 8003f8c:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8003f90:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8003f94:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8003f98:	b280      	uxth	r0, r0
 8003f9a:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
 8003f9e:	780b      	ldrb	r3, [r1, #0]
 8003fa0:	e022      	b.n	8003fe8 <USB_EPStartXfer+0xfc>
      if (ep->xfer_len > ep->maxpacket)
 8003fa2:	698b      	ldr	r3, [r1, #24]
 8003fa4:	690c      	ldr	r4, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003fa6:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
      if (ep->xfer_len > ep->maxpacket)
 8003faa:	42a3      	cmp	r3, r4
        ep->xfer_len -= len;
 8003fac:	bf88      	it	hi
 8003fae:	1b18      	subhi	r0, r3, r4
 8003fb0:	6188      	str	r0, [r1, #24]
 8003fb2:	bf88      	it	hi
 8003fb4:	4623      	movhi	r3, r4
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003fb6:	f202 4006 	addw	r0, r2, #1030	; 0x406
 8003fba:	780c      	ldrb	r4, [r1, #0]
 8003fbc:	fa10 f08c 	uxtah	r0, r0, ip
 8003fc0:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8003fc4:	2b3e      	cmp	r3, #62	; 0x3e
 8003fc6:	8820      	ldrh	r0, [r4, #0]
 8003fc8:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8003fcc:	8020      	strh	r0, [r4, #0]
 8003fce:	f200 8086 	bhi.w	80040de <USB_EPStartXfer+0x1f2>
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f040 8116 	bne.w	8004204 <USB_EPStartXfer+0x318>
 8003fd8:	8823      	ldrh	r3, [r4, #0]
 8003fda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	8023      	strh	r3, [r4, #0]
 8003fe6:	780b      	ldrb	r3, [r1, #0]
        return HAL_ERROR;
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003fe8:	b219      	sxth	r1, r3
  }

  return HAL_OK;
 8003fea:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003fec:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003ff0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff8:	041b      	lsls	r3, r3, #16
 8003ffa:	0c1b      	lsrs	r3, r3, #16
 8003ffc:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004000:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004008:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
}
 800400c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ep->xfer_len > ep->maxpacket)
 8004010:	690c      	ldr	r4, [r1, #16]
 8004012:	6988      	ldr	r0, [r1, #24]
    if (ep->doublebuffer == 0U)
 8004014:	7b0b      	ldrb	r3, [r1, #12]
 8004016:	42a0      	cmp	r0, r4
 8004018:	bf28      	it	cs
 800401a:	4620      	movcs	r0, r4
 800401c:	bb93      	cbnz	r3, 8004084 <USB_EPStartXfer+0x198>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800401e:	b284      	uxth	r4, r0
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004020:	4620      	mov	r0, r4
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004022:	f8b1 e006 	ldrh.w	lr, [r1, #6]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004026:	694b      	ldr	r3, [r1, #20]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004028:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800402a:	f502 6580 	add.w	r5, r2, #1024	; 0x400

  for (count = n; count != 0U; count--)
 800402e:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004030:	44ae      	add	lr, r5
  for (count = n; count != 0U; count--)
 8004032:	d009      	beq.n	8004048 <USB_EPStartXfer+0x15c>
 8004034:	eb03 0c40 	add.w	ip, r3, r0, lsl #1
 8004038:	ebae 0e03 	sub.w	lr, lr, r3
  {
    WrVal = pBuf[0];
    WrVal |= (uint16_t)pBuf[1] << 8;
 800403c:	8818      	ldrh	r0, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800403e:	f823 000e 	strh.w	r0, [r3, lr]
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
 8004042:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 8004044:	4563      	cmp	r3, ip
 8004046:	d1f9      	bne.n	800403c <USB_EPStartXfer+0x150>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004048:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800404c:	7808      	ldrb	r0, [r1, #0]
 800404e:	f202 4502 	addw	r5, r2, #1026	; 0x402
 8004052:	fa15 f383 	uxtah	r3, r5, r3
 8004056:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800405a:	801c      	strh	r4, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800405c:	7809      	ldrb	r1, [r1, #0]
 800405e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8004062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800406a:	041b      	lsls	r3, r3, #16
 800406c:	0c1b      	lsrs	r3, r3, #16
 800406e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8004072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800407a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  return HAL_OK;
 800407e:	2000      	movs	r0, #0
}
 8004080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ep->type == EP_TYPE_BULK)
 8004084:	78cb      	ldrb	r3, [r1, #3]
 8004086:	2b02      	cmp	r3, #2
 8004088:	f000 80c8 	beq.w	800421c <USB_EPStartXfer+0x330>
        ep->xfer_len_db -= len;
 800408c:	6a0b      	ldr	r3, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800408e:	780c      	ldrb	r4, [r1, #0]
        ep->xfer_len_db -= len;
 8004090:	1a1b      	subs	r3, r3, r0
 8004092:	620b      	str	r3, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004094:	b223      	sxth	r3, r4
 8004096:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800409a:	f013 0f40 	tst.w	r3, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800409e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80040a2:	f000 8118 	beq.w	80042d6 <USB_EPStartXfer+0x3ea>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80040a6:	f202 4506 	addw	r5, r2, #1030	; 0x406
 80040aa:	fa15 f383 	uxtah	r3, r5, r3
 80040ae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80040b2:	b284      	uxth	r4, r0
 80040b4:	801c      	strh	r4, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80040b6:	b280      	uxth	r0, r0
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80040b8:	894c      	ldrh	r4, [r1, #10]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80040ba:	694b      	ldr	r3, [r1, #20]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80040bc:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80040be:	f502 6c80 	add.w	ip, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 80040c2:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80040c4:	44a4      	add	ip, r4
  for (count = n; count != 0U; count--)
 80040c6:	d0c9      	beq.n	800405c <USB_EPStartXfer+0x170>
 80040c8:	eb03 0440 	add.w	r4, r3, r0, lsl #1
 80040cc:	ebac 0c03 	sub.w	ip, ip, r3
    WrVal |= (uint16_t)pBuf[1] << 8;
 80040d0:	8818      	ldrh	r0, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80040d2:	f823 000c 	strh.w	r0, [r3, ip]
    pBuf++;
 80040d6:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 80040d8:	42a3      	cmp	r3, r4
 80040da:	d1f9      	bne.n	80040d0 <USB_EPStartXfer+0x1e4>
 80040dc:	e7be      	b.n	800405c <USB_EPStartXfer+0x170>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80040de:	0958      	lsrs	r0, r3, #5
 80040e0:	06dd      	lsls	r5, r3, #27
 80040e2:	8823      	ldrh	r3, [r4, #0]
 80040e4:	bf08      	it	eq
 80040e6:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 80040f0:	e773      	b.n	8003fda <USB_EPStartXfer+0xee>
        return HAL_ERROR;
 80040f2:	2001      	movs	r0, #1
}
 80040f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80040f8:	f834 5033 	ldrh.w	r5, [r4, r3, lsl #3]
 80040fc:	0846      	lsrs	r6, r0, #1
 80040fe:	f010 0001 	ands.w	r0, r0, #1
 8004102:	4637      	mov	r7, r6
 8004104:	b2ad      	uxth	r5, r5
 8004106:	bf18      	it	ne
 8004108:	1c77      	addne	r7, r6, #1
 800410a:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 800410e:	b2ad      	uxth	r5, r5
 8004110:	f824 5033 	strh.w	r5, [r4, r3, lsl #3]
 8004114:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
 8004118:	f202 4406 	addw	r4, r2, #1030	; 0x406
 800411c:	fa14 f485 	uxtah	r4, r4, r5
 8004120:	f834 5033 	ldrh.w	r5, [r4, r3, lsl #3]
 8004124:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004128:	f824 5033 	strh.w	r5, [r4, r3, lsl #3]
 800412c:	b100      	cbz	r0, 8004130 <USB_EPStartXfer+0x244>
 800412e:	3601      	adds	r6, #1
 8004130:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 8004134:	b280      	uxth	r0, r0
 8004136:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 800413a:	b280      	uxth	r0, r0
 800413c:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
 8004140:	780b      	ldrb	r3, [r1, #0]
 8004142:	e751      	b.n	8003fe8 <USB_EPStartXfer+0xfc>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004144:	2b00      	cmp	r3, #0
 8004146:	d13d      	bne.n	80041c4 <USB_EPStartXfer+0x2d8>
 8004148:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800414c:	780b      	ldrb	r3, [r1, #0]
 800414e:	690d      	ldr	r5, [r1, #16]
 8004150:	f202 4002 	addw	r0, r2, #1026	; 0x402
 8004154:	fa10 f084 	uxtah	r0, r0, r4
 8004158:	2d3e      	cmp	r5, #62	; 0x3e
 800415a:	f830 4033 	ldrh.w	r4, [r0, r3, lsl #3]
 800415e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004162:	f820 4033 	strh.w	r4, [r0, r3, lsl #3]
 8004166:	f240 80ff 	bls.w	8004368 <USB_EPStartXfer+0x47c>
 800416a:	f830 4033 	ldrh.w	r4, [r0, r3, lsl #3]
 800416e:	096e      	lsrs	r6, r5, #5
 8004170:	f015 051f 	ands.w	r5, r5, #31
 8004174:	4637      	mov	r7, r6
 8004176:	b2a4      	uxth	r4, r4
 8004178:	bf08      	it	eq
 800417a:	f106 37ff 	addeq.w	r7, r6, #4294967295
 800417e:	ea44 2487 	orr.w	r4, r4, r7, lsl #10
 8004182:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8004186:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800418a:	b2a4      	uxth	r4, r4
 800418c:	f820 4033 	strh.w	r4, [r0, r3, lsl #3]
 8004190:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8004194:	f202 4406 	addw	r4, r2, #1030	; 0x406
 8004198:	fa14 f480 	uxtah	r4, r4, r0
 800419c:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 80041a0:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80041a4:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
 80041a8:	b905      	cbnz	r5, 80041ac <USB_EPStartXfer+0x2c0>
 80041aa:	3e01      	subs	r6, #1
 80041ac:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 80041b0:	b280      	uxth	r0, r0
 80041b2:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 80041b6:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 80041ba:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 80041be:	b280      	uxth	r0, r0
 80041c0:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
        if (ep->xfer_count != 0U)
 80041c4:	69cb      	ldr	r3, [r1, #28]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0ba      	beq.n	8004140 <USB_EPStartXfer+0x254>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80041ca:	780b      	ldrb	r3, [r1, #0]
 80041cc:	b218      	sxth	r0, r3
 80041ce:	f244 0440 	movw	r4, #16448	; 0x4040
 80041d2:	f832 5020 	ldrh.w	r5, [r2, r0, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80041d6:	ea04 0605 	and.w	r6, r4, r5
 80041da:	43ac      	bics	r4, r5
 80041dc:	d002      	beq.n	80041e4 <USB_EPStartXfer+0x2f8>
 80041de:	2e00      	cmp	r6, #0
 80041e0:	f47f af02 	bne.w	8003fe8 <USB_EPStartXfer+0xfc>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80041e4:	f832 3020 	ldrh.w	r3, [r2, r0, lsl #2]
 80041e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f0:	041b      	lsls	r3, r3, #16
 80041f2:	0c1b      	lsrs	r3, r3, #16
 80041f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041fc:	f822 3020 	strh.w	r3, [r2, r0, lsl #2]
 8004200:	780b      	ldrb	r3, [r1, #0]
 8004202:	e6f1      	b.n	8003fe8 <USB_EPStartXfer+0xfc>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004204:	0858      	lsrs	r0, r3, #1
 8004206:	07db      	lsls	r3, r3, #31
 8004208:	8823      	ldrh	r3, [r4, #0]
 800420a:	bf48      	it	mi
 800420c:	3001      	addmi	r0, #1
 800420e:	b29b      	uxth	r3, r3
 8004210:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8004214:	b29b      	uxth	r3, r3
 8004216:	8023      	strh	r3, [r4, #0]
 8004218:	780b      	ldrb	r3, [r1, #0]
 800421a:	e6e5      	b.n	8003fe8 <USB_EPStartXfer+0xfc>
        if (ep->xfer_len_db > ep->maxpacket)
 800421c:	6a0b      	ldr	r3, [r1, #32]
 800421e:	429c      	cmp	r4, r3
 8004220:	d276      	bcs.n	8004310 <USB_EPStartXfer+0x424>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004222:	780d      	ldrb	r5, [r1, #0]
 8004224:	f832 c025 	ldrh.w	ip, [r2, r5, lsl #2]
 8004228:	f42c 4ce0 	bic.w	ip, ip, #28672	; 0x7000
 800422c:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 8004230:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8004234:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004238:	f44c 4c01 	orr.w	ip, ip, #33024	; 0x8100
 800423c:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 8004240:	f822 c025 	strh.w	ip, [r2, r5, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004244:	f832 6025 	ldrh.w	r6, [r2, r5, lsl #2]
          ep->xfer_len_db -= len;
 8004248:	1a1b      	subs	r3, r3, r0
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800424a:	f016 0f40 	tst.w	r6, #64	; 0x40
          ep->xfer_len_db -= len;
 800424e:	620b      	str	r3, [r1, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004250:	f8b2 6050 	ldrh.w	r6, [r2, #80]	; 0x50
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004254:	f000 80c4 	beq.w	80043e0 <USB_EPStartXfer+0x4f4>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004258:	f202 4706 	addw	r7, r2, #1030	; 0x406
 800425c:	fa17 f686 	uxtah	r6, r7, r6
 8004260:	fa1f fa80 	uxth.w	sl, r0
 8004264:	f826 a035 	strh.w	sl, [r6, r5, lsl #3]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004268:	4657      	mov	r7, sl
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800426a:	894e      	ldrh	r6, [r1, #10]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800426c:	f8d1 c014 	ldr.w	ip, [r1, #20]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004270:	3701      	adds	r7, #1
 8004272:	f502 6980 	add.w	r9, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 8004276:	087f      	lsrs	r7, r7, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004278:	444e      	add	r6, r9
  for (count = n; count != 0U; count--)
 800427a:	d00c      	beq.n	8004296 <USB_EPStartXfer+0x3aa>
 800427c:	eba6 080c 	sub.w	r8, r6, ip
 8004280:	eb0c 0b47 	add.w	fp, ip, r7, lsl #1
  uint8_t *pBuf = pbUsrBuf;
 8004284:	46e6      	mov	lr, ip
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004286:	f8be 6000 	ldrh.w	r6, [lr]
    *pdwVal = (WrVal & 0xFFFFU);
 800428a:	f82e 6008 	strh.w	r6, [lr, r8]
    pBuf++;
 800428e:	f10e 0e02 	add.w	lr, lr, #2
  for (count = n; count != 0U; count--)
 8004292:	45f3      	cmp	fp, lr
 8004294:	d1f7      	bne.n	8004286 <USB_EPStartXfer+0x39a>
            ep->xfer_buff += len;
 8004296:	eb0c 0600 	add.w	r6, ip, r0
            if (ep->xfer_len_db > ep->maxpacket)
 800429a:	429c      	cmp	r4, r3
            ep->xfer_buff += len;
 800429c:	614e      	str	r6, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800429e:	f080 8109 	bcs.w	80044b4 <USB_EPStartXfer+0x5c8>
              ep->xfer_len_db -= len;
 80042a2:	1a1b      	subs	r3, r3, r0
 80042a4:	620b      	str	r3, [r1, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80042a6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80042aa:	f202 4002 	addw	r0, r2, #1026	; 0x402
 80042ae:	fa10 f383 	uxtah	r3, r0, r3
 80042b2:	f823 a035 	strh.w	sl, [r3, r5, lsl #3]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80042b6:	890b      	ldrh	r3, [r1, #8]
 80042b8:	eb03 0509 	add.w	r5, r3, r9
  for (count = n; count != 0U; count--)
 80042bc:	2f00      	cmp	r7, #0
 80042be:	f43f aecd 	beq.w	800405c <USB_EPStartXfer+0x170>
 80042c2:	eb06 0447 	add.w	r4, r6, r7, lsl #1
  uint8_t *pBuf = pbUsrBuf;
 80042c6:	4633      	mov	r3, r6
 80042c8:	1bad      	subs	r5, r5, r6
    WrVal |= (uint16_t)pBuf[1] << 8;
 80042ca:	8818      	ldrh	r0, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80042cc:	5358      	strh	r0, [r3, r5]
    pBuf++;
 80042ce:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 80042d0:	429c      	cmp	r4, r3
 80042d2:	d1fa      	bne.n	80042ca <USB_EPStartXfer+0x3de>
 80042d4:	e6c2      	b.n	800405c <USB_EPStartXfer+0x170>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80042d6:	f202 4502 	addw	r5, r2, #1026	; 0x402
 80042da:	fa15 f383 	uxtah	r3, r5, r3
 80042de:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80042e2:	b284      	uxth	r4, r0
 80042e4:	801c      	strh	r4, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80042e6:	4620      	mov	r0, r4
 80042e8:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80042ea:	890c      	ldrh	r4, [r1, #8]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80042ec:	694b      	ldr	r3, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80042ee:	f502 6c80 	add.w	ip, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 80042f2:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80042f4:	44a4      	add	ip, r4
  for (count = n; count != 0U; count--)
 80042f6:	f43f aeb1 	beq.w	800405c <USB_EPStartXfer+0x170>
 80042fa:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80042fe:	ebac 0c03 	sub.w	ip, ip, r3
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004302:	881c      	ldrh	r4, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8004304:	f823 400c 	strh.w	r4, [r3, ip]
    pBuf++;
 8004308:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 800430a:	4283      	cmp	r3, r0
 800430c:	d1f9      	bne.n	8004302 <USB_EPStartXfer+0x416>
 800430e:	e6a5      	b.n	800405c <USB_EPStartXfer+0x170>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004310:	780e      	ldrb	r6, [r1, #0]
 8004312:	b234      	sxth	r4, r6
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004314:	f202 4502 	addw	r5, r2, #1026	; 0x402
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004318:	f832 0024 	ldrh.w	r0, [r2, r4, lsl #2]
 800431c:	f420 40e2 	bic.w	r0, r0, #28928	; 0x7100
 8004320:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 8004324:	0400      	lsls	r0, r0, #16
 8004326:	0c00      	lsrs	r0, r0, #16
 8004328:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 800432c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8004330:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004334:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 8004338:	b29f      	uxth	r7, r3
 800433a:	fa15 f384 	uxtah	r3, r5, r4
 800433e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004342:	1c78      	adds	r0, r7, #1
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004344:	801f      	strh	r7, [r3, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004346:	890d      	ldrh	r5, [r1, #8]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004348:	694b      	ldr	r3, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800434a:	f502 6480 	add.w	r4, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 800434e:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004350:	4425      	add	r5, r4
  for (count = n; count != 0U; count--)
 8004352:	f43f ae83 	beq.w	800405c <USB_EPStartXfer+0x170>
 8004356:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800435a:	1aed      	subs	r5, r5, r3
    WrVal |= (uint16_t)pBuf[1] << 8;
 800435c:	881c      	ldrh	r4, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800435e:	535c      	strh	r4, [r3, r5]
    pBuf++;
 8004360:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 8004362:	4298      	cmp	r0, r3
 8004364:	d1fa      	bne.n	800435c <USB_EPStartXfer+0x470>
 8004366:	e679      	b.n	800405c <USB_EPStartXfer+0x170>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004368:	2d00      	cmp	r5, #0
 800436a:	d177      	bne.n	800445c <USB_EPStartXfer+0x570>
 800436c:	f830 4033 	ldrh.w	r4, [r0, r3, lsl #3]
 8004370:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8004374:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8004378:	b2a4      	uxth	r4, r4
 800437a:	f820 4033 	strh.w	r4, [r0, r3, lsl #3]
 800437e:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8004382:	f202 4406 	addw	r4, r2, #1030	; 0x406
 8004386:	fa14 f480 	uxtah	r4, r4, r0
 800438a:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 800438e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8004392:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
 8004396:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 800439a:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 800439e:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 80043a2:	b280      	uxth	r0, r0
 80043a4:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
 80043a8:	e70c      	b.n	80041c4 <USB_EPStartXfer+0x2d8>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80043aa:	2800      	cmp	r0, #0
 80043ac:	f47f aea4 	bne.w	80040f8 <USB_EPStartXfer+0x20c>
 80043b0:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 80043b4:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 80043b8:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 80043bc:	b280      	uxth	r0, r0
 80043be:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
 80043c2:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 80043c6:	f202 4406 	addw	r4, r2, #1030	; 0x406
 80043ca:	fa14 f480 	uxtah	r4, r4, r0
 80043ce:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 80043d2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80043d6:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
 80043da:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 80043de:	e5d7      	b.n	8003f90 <USB_EPStartXfer+0xa4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80043e0:	f202 4702 	addw	r7, r2, #1026	; 0x402
 80043e4:	fa17 f686 	uxtah	r6, r7, r6
 80043e8:	fa1f f980 	uxth.w	r9, r0
 80043ec:	f826 9035 	strh.w	r9, [r6, r5, lsl #3]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80043f0:	464f      	mov	r7, r9
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80043f2:	890e      	ldrh	r6, [r1, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80043f4:	f8d1 c014 	ldr.w	ip, [r1, #20]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80043f8:	3701      	adds	r7, #1
 80043fa:	f502 6880 	add.w	r8, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 80043fe:	087f      	lsrs	r7, r7, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004400:	4446      	add	r6, r8
  for (count = n; count != 0U; count--)
 8004402:	d00c      	beq.n	800441e <USB_EPStartXfer+0x532>
 8004404:	eba6 0a0c 	sub.w	sl, r6, ip
 8004408:	eb0c 0b47 	add.w	fp, ip, r7, lsl #1
  uint8_t *pBuf = pbUsrBuf;
 800440c:	46e6      	mov	lr, ip
    WrVal |= (uint16_t)pBuf[1] << 8;
 800440e:	f8be 6000 	ldrh.w	r6, [lr]
    *pdwVal = (WrVal & 0xFFFFU);
 8004412:	f82e 600a 	strh.w	r6, [lr, sl]
    pBuf++;
 8004416:	f10e 0e02 	add.w	lr, lr, #2
  for (count = n; count != 0U; count--)
 800441a:	45f3      	cmp	fp, lr
 800441c:	d1f7      	bne.n	800440e <USB_EPStartXfer+0x522>
            ep->xfer_buff += len;
 800441e:	eb0c 0600 	add.w	r6, ip, r0
            if (ep->xfer_len_db > ep->maxpacket)
 8004422:	429c      	cmp	r4, r3
            ep->xfer_buff += len;
 8004424:	614e      	str	r6, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8004426:	d23e      	bcs.n	80044a6 <USB_EPStartXfer+0x5ba>
              ep->xfer_len_db -= len;
 8004428:	1a1b      	subs	r3, r3, r0
 800442a:	620b      	str	r3, [r1, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800442c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8004430:	f202 4006 	addw	r0, r2, #1030	; 0x406
 8004434:	fa10 f383 	uxtah	r3, r0, r3
 8004438:	f823 9035 	strh.w	r9, [r3, r5, lsl #3]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800443c:	894b      	ldrh	r3, [r1, #10]
 800443e:	eb03 0508 	add.w	r5, r3, r8
  for (count = n; count != 0U; count--)
 8004442:	2f00      	cmp	r7, #0
 8004444:	f43f ae0a 	beq.w	800405c <USB_EPStartXfer+0x170>
 8004448:	eb06 0447 	add.w	r4, r6, r7, lsl #1
  uint8_t *pBuf = pbUsrBuf;
 800444c:	4633      	mov	r3, r6
 800444e:	1bad      	subs	r5, r5, r6
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004450:	8818      	ldrh	r0, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8004452:	5358      	strh	r0, [r3, r5]
    pBuf++;
 8004454:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 8004456:	429c      	cmp	r4, r3
 8004458:	d1fa      	bne.n	8004450 <USB_EPStartXfer+0x564>
 800445a:	e5ff      	b.n	800405c <USB_EPStartXfer+0x170>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800445c:	f830 4033 	ldrh.w	r4, [r0, r3, lsl #3]
 8004460:	086e      	lsrs	r6, r5, #1
 8004462:	f015 0501 	ands.w	r5, r5, #1
 8004466:	4637      	mov	r7, r6
 8004468:	b2a4      	uxth	r4, r4
 800446a:	bf18      	it	ne
 800446c:	1c77      	addne	r7, r6, #1
 800446e:	ea44 2487 	orr.w	r4, r4, r7, lsl #10
 8004472:	b2a4      	uxth	r4, r4
 8004474:	f820 4033 	strh.w	r4, [r0, r3, lsl #3]
 8004478:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800447c:	f202 4406 	addw	r4, r2, #1030	; 0x406
 8004480:	fa14 f480 	uxtah	r4, r4, r0
 8004484:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 8004488:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800448c:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
 8004490:	b105      	cbz	r5, 8004494 <USB_EPStartXfer+0x5a8>
 8004492:	3601      	adds	r6, #1
 8004494:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 8004498:	b280      	uxth	r0, r0
 800449a:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 800449e:	b280      	uxth	r0, r0
 80044a0:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
 80044a4:	e68e      	b.n	80041c4 <USB_EPStartXfer+0x2d8>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80044a6:	b29c      	uxth	r4, r3
 80044a8:	3401      	adds	r4, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80044aa:	fa1f f983 	uxth.w	r9, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80044ae:	0867      	lsrs	r7, r4, #1
              ep->xfer_len_db = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	e7ba      	b.n	800442a <USB_EPStartXfer+0x53e>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80044b4:	b29c      	uxth	r4, r3
 80044b6:	3401      	adds	r4, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80044b8:	fa1f fa83 	uxth.w	sl, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80044bc:	0867      	lsrs	r7, r4, #1
              ep->xfer_len_db = 0U;
 80044be:	2300      	movs	r3, #0
 80044c0:	e6f0      	b.n	80042a4 <USB_EPStartXfer+0x3b8>
 80044c2:	bf00      	nop

080044c4 <USB_EPSetStall>:
  if (ep->is_in != 0U)
 80044c4:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80044c6:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 80044c8:	b18b      	cbz	r3, 80044ee <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80044ca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80044ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044d6:	041b      	lsls	r3, r3, #16
 80044d8:	0c1b      	lsrs	r3, r3, #16
 80044da:	f083 0310 	eor.w	r3, r3, #16
 80044de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044e6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80044ea:	2000      	movs	r0, #0
 80044ec:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80044ee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80044f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fa:	041b      	lsls	r3, r3, #16
 80044fc:	0c1b      	lsrs	r3, r3, #16
 80044fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800450a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800450e:	2000      	movs	r0, #0
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop

08004514 <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 8004514:	7b0b      	ldrb	r3, [r1, #12]
 8004516:	bb3b      	cbnz	r3, 8004568 <USB_EPClearStall+0x54>
    if (ep->is_in != 0U)
 8004518:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800451a:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 800451c:	b333      	cbz	r3, 800456c <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800451e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004522:	065b      	lsls	r3, r3, #25
 8004524:	d50d      	bpl.n	8004542 <USB_EPClearStall+0x2e>
 8004526:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800452a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800452e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004532:	041b      	lsls	r3, r3, #16
 8004534:	0c1b      	lsrs	r3, r3, #16
 8004536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800453a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800453e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8004542:	78cb      	ldrb	r3, [r1, #3]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d00f      	beq.n	8004568 <USB_EPClearStall+0x54>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004548:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800454c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004554:	041b      	lsls	r3, r3, #16
 8004556:	0c1b      	lsrs	r3, r3, #16
 8004558:	f083 0320 	eor.w	r3, r3, #32
 800455c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004564:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8004568:	2000      	movs	r0, #0
 800456a:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800456c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004570:	045b      	lsls	r3, r3, #17
 8004572:	d50d      	bpl.n	8004590 <USB_EPClearStall+0x7c>
 8004574:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004578:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800457c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004580:	041b      	lsls	r3, r3, #16
 8004582:	0c1b      	lsrs	r3, r3, #16
 8004584:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800458c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004590:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004594:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459c:	041b      	lsls	r3, r3, #16
 800459e:	0c1b      	lsrs	r3, r3, #16
 80045a0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80045a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ac:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80045b0:	2000      	movs	r0, #0
 80045b2:	4770      	bx	lr

080045b4 <USB_SetDevAddress>:
  if (address == 0U)
 80045b4:	b911      	cbnz	r1, 80045bc <USB_SetDevAddress+0x8>
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80045b6:	2380      	movs	r3, #128	; 0x80
 80045b8:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 80045bc:	2000      	movs	r0, #0
 80045be:	4770      	bx	lr

080045c0 <USB_DevConnect>:
{
 80045c0:	4602      	mov	r2, r0
}
 80045c2:	2000      	movs	r0, #0
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80045c4:	f8b2 3058 	ldrh.w	r3, [r2, #88]	; 0x58
 80045c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58
}
 80045d6:	4770      	bx	lr

080045d8 <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 80045d8:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
}
 80045dc:	b280      	uxth	r0, r0
 80045de:	4770      	bx	lr

080045e0 <USB_WritePMA>:
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80045e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80045e4:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80045e6:	4410      	add	r0, r2
  for (count = n; count != 0U; count--)
 80045e8:	085a      	lsrs	r2, r3, #1
 80045ea:	d008      	beq.n	80045fe <USB_WritePMA+0x1e>
  uint8_t *pBuf = pbUsrBuf;
 80045ec:	460b      	mov	r3, r1
 80045ee:	1ac0      	subs	r0, r0, r3
 80045f0:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    WrVal |= (uint16_t)pBuf[1] << 8;
 80045f4:	881a      	ldrh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80045f6:	521a      	strh	r2, [r3, r0]
    pBuf++;
 80045f8:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 80045fa:	4299      	cmp	r1, r3
 80045fc:	d1fa      	bne.n	80045f4 <USB_WritePMA+0x14>
  }
}
 80045fe:	4770      	bx	lr

08004600 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004600:	b570      	push	{r4, r5, r6, lr}
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004602:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (count = n; count != 0U; count--)
 8004606:	085e      	lsrs	r6, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004608:	4410      	add	r0, r2
  for (count = n; count != 0U; count--)
 800460a:	d01c      	beq.n	8004646 <USB_ReadPMA+0x46>
 800460c:	f06f 0501 	mvn.w	r5, #1
 8004610:	1a6d      	subs	r5, r5, r1
 8004612:	1c8a      	adds	r2, r1, #2
 8004614:	4405      	add	r5, r0
 8004616:	46b6      	mov	lr, r6
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8004618:	f835 c002 	ldrh.w	ip, [r5, r2]
  for (count = n; count != 0U; count--)
 800461c:	3202      	adds	r2, #2
    RdVal = *(__IO uint16_t *)pdwVal;
 800461e:	fa1f fc8c 	uxth.w	ip, ip
    pdwVal++;
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8004622:	ea4f 241c 	mov.w	r4, ip, lsr #8
  for (count = n; count != 0U; count--)
 8004626:	f1be 0e01 	subs.w	lr, lr, #1
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800462a:	f802 cc04 	strb.w	ip, [r2, #-4]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800462e:	f802 4c03 	strb.w	r4, [r2, #-3]
  for (count = n; count != 0U; count--)
 8004632:	d1f1      	bne.n	8004618 <USB_ReadPMA+0x18>
    pdwVal++;
 8004634:	eb00 0246 	add.w	r2, r0, r6, lsl #1
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8004638:	07db      	lsls	r3, r3, #31
    pBuf++;
 800463a:	eb01 0146 	add.w	r1, r1, r6, lsl #1
  {
    RdVal = *pdwVal;
 800463e:	bf44      	itt	mi
 8004640:	8813      	ldrhmi	r3, [r2, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004642:	700b      	strbmi	r3, [r1, #0]
  }
}
 8004644:	bd70      	pop	{r4, r5, r6, pc}
 8004646:	4602      	mov	r2, r0
  if ((wNBytes % 2U) != 0U)
 8004648:	07db      	lsls	r3, r3, #31
    RdVal = *pdwVal;
 800464a:	bf44      	itt	mi
 800464c:	8813      	ldrhmi	r3, [r2, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800464e:	700b      	strbmi	r3, [r1, #0]
}
 8004650:	bd70      	pop	{r4, r5, r6, pc}
 8004652:	bf00      	nop

08004654 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004654:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8004658:	eb00 0083 	add.w	r0, r0, r3, lsl #2
{
 800465c:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800465e:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0

  if (hcdc == NULL)
 8004662:	b184      	cbz	r4, 8004686 <USBD_CDC_EP0_RxReady+0x32>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004664:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
 8004668:	b15b      	cbz	r3, 8004682 <USBD_CDC_EP0_RxReady+0x2e>
 800466a:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800466e:	28ff      	cmp	r0, #255	; 0xff
 8004670:	d007      	beq.n	8004682 <USBD_CDC_EP0_RxReady+0x2e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8004678:	4621      	mov	r1, r4
 800467a:	4798      	blx	r3
                                                                     (uint8_t *)hcdc->data,
                                                                     (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800467c:	23ff      	movs	r3, #255	; 0xff
 800467e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004682:	2000      	movs	r0, #0
}
 8004684:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8004686:	2003      	movs	r0, #3
}
 8004688:	bd10      	pop	{r4, pc}
 800468a:	bf00      	nop

0800468c <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800468c:	230a      	movs	r3, #10
 800468e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8004690:	4800      	ldr	r0, [pc, #0]	; (8004694 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8004692:	4770      	bx	lr
 8004694:	20000090 	.word	0x20000090

08004698 <USBD_CDC_GetFSCfgDesc>:
{
 8004698:	b570      	push	{r4, r5, r6, lr}
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800469a:	2182      	movs	r1, #130	; 0x82
{
 800469c:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800469e:	480f      	ldr	r0, [pc, #60]	; (80046dc <USBD_CDC_GetFSCfgDesc+0x44>)
 80046a0:	f000 fb90 	bl	8004dc4 <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80046a4:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80046a6:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80046a8:	480c      	ldr	r0, [pc, #48]	; (80046dc <USBD_CDC_GetFSCfgDesc+0x44>)
 80046aa:	f000 fb8b 	bl	8004dc4 <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80046ae:	2181      	movs	r1, #129	; 0x81
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80046b0:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80046b2:	480a      	ldr	r0, [pc, #40]	; (80046dc <USBD_CDC_GetFSCfgDesc+0x44>)
 80046b4:	f000 fb86 	bl	8004dc4 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 80046b8:	b10d      	cbz	r5, 80046be <USBD_CDC_GetFSCfgDesc+0x26>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80046ba:	2210      	movs	r2, #16
 80046bc:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 80046be:	b11c      	cbz	r4, 80046c8 <USBD_CDC_GetFSCfgDesc+0x30>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80046c0:	2200      	movs	r2, #0
 80046c2:	2140      	movs	r1, #64	; 0x40
 80046c4:	7121      	strb	r1, [r4, #4]
 80046c6:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 80046c8:	b118      	cbz	r0, 80046d2 <USBD_CDC_GetFSCfgDesc+0x3a>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80046ca:	2200      	movs	r2, #0
 80046cc:	2140      	movs	r1, #64	; 0x40
 80046ce:	7101      	strb	r1, [r0, #4]
 80046d0:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80046d2:	2343      	movs	r3, #67	; 0x43
}
 80046d4:	4801      	ldr	r0, [pc, #4]	; (80046dc <USBD_CDC_GetFSCfgDesc+0x44>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80046d6:	8033      	strh	r3, [r6, #0]
}
 80046d8:	bd70      	pop	{r4, r5, r6, pc}
 80046da:	bf00      	nop
 80046dc:	2000004c 	.word	0x2000004c

080046e0 <USBD_CDC_GetHSCfgDesc>:
{
 80046e0:	b570      	push	{r4, r5, r6, lr}
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80046e2:	2182      	movs	r1, #130	; 0x82
{
 80046e4:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80046e6:	480f      	ldr	r0, [pc, #60]	; (8004724 <USBD_CDC_GetHSCfgDesc+0x44>)
 80046e8:	f000 fb6c 	bl	8004dc4 <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80046ec:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80046ee:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80046f0:	480c      	ldr	r0, [pc, #48]	; (8004724 <USBD_CDC_GetHSCfgDesc+0x44>)
 80046f2:	f000 fb67 	bl	8004dc4 <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80046f6:	2181      	movs	r1, #129	; 0x81
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80046f8:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80046fa:	480a      	ldr	r0, [pc, #40]	; (8004724 <USBD_CDC_GetHSCfgDesc+0x44>)
 80046fc:	f000 fb62 	bl	8004dc4 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8004700:	b10d      	cbz	r5, 8004706 <USBD_CDC_GetHSCfgDesc+0x26>
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004702:	2210      	movs	r2, #16
 8004704:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8004706:	b11c      	cbz	r4, 8004710 <USBD_CDC_GetHSCfgDesc+0x30>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004708:	2100      	movs	r1, #0
 800470a:	2202      	movs	r2, #2
 800470c:	7121      	strb	r1, [r4, #4]
 800470e:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8004710:	b118      	cbz	r0, 800471a <USBD_CDC_GetHSCfgDesc+0x3a>
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004712:	2100      	movs	r1, #0
 8004714:	2202      	movs	r2, #2
 8004716:	7101      	strb	r1, [r0, #4]
 8004718:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800471a:	2343      	movs	r3, #67	; 0x43
}
 800471c:	4801      	ldr	r0, [pc, #4]	; (8004724 <USBD_CDC_GetHSCfgDesc+0x44>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800471e:	8033      	strh	r3, [r6, #0]
}
 8004720:	bd70      	pop	{r4, r5, r6, pc}
 8004722:	bf00      	nop
 8004724:	2000004c 	.word	0x2000004c

08004728 <USBD_CDC_DataOut>:
{
 8004728:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800472a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 800472e:	33b0      	adds	r3, #176	; 0xb0
 8004730:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004734:	b195      	cbz	r5, 800475c <USBD_CDC_DataOut+0x34>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004736:	4604      	mov	r4, r0
 8004738:	f001 f9a0 	bl	8005a7c <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800473c:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004740:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004744:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8004748:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800474c:	f8d4 32c4 	ldr.w	r3, [r4, #708]	; 0x2c4
 8004750:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8004758:	2000      	movs	r0, #0
}
 800475a:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800475c:	2003      	movs	r0, #3
}
 800475e:	bd38      	pop	{r3, r4, r5, pc}

08004760 <USBD_CDC_DataIn>:
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004760:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
{
 8004764:	b570      	push	{r4, r5, r6, lr}
 8004766:	eb00 0e83 	add.w	lr, r0, r3, lsl #2
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800476a:	f8de 52c0 	ldr.w	r5, [lr, #704]	; 0x2c0
 800476e:	b35d      	cbz	r5, 80047c8 <USBD_CDC_DataIn+0x68>
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004770:	f001 030f 	and.w	r3, r1, #15
 8004774:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8004778:	eb00 068c 	add.w	r6, r0, ip, lsl #2
 800477c:	460a      	mov	r2, r1
 800477e:	69b3      	ldr	r3, [r6, #24]
 8004780:	b96b      	cbnz	r3, 800479e <USBD_CDC_DataIn+0x3e>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004782:	f8de 32c4 	ldr.w	r3, [lr, #708]	; 0x2c4
 8004786:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 8004788:	2400      	movs	r4, #0
 800478a:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800478e:	b1cb      	cbz	r3, 80047c4 <USBD_CDC_DataIn+0x64>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004790:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 8004794:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8004798:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800479a:	4620      	mov	r0, r4
}
 800479c:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800479e:	f8d0 42c8 	ldr.w	r4, [r0, #712]	; 0x2c8
 80047a2:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 80047a6:	f8dc 4038 	ldr.w	r4, [ip, #56]	; 0x38
 80047aa:	fbb3 fcf4 	udiv	ip, r3, r4
 80047ae:	fb04 341c 	mls	r4, r4, ip, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80047b2:	2c00      	cmp	r4, #0
 80047b4:	d1e5      	bne.n	8004782 <USBD_CDC_DataIn+0x22>
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80047b6:	61b4      	str	r4, [r6, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80047b8:	4623      	mov	r3, r4
 80047ba:	4622      	mov	r2, r4
 80047bc:	f001 f942 	bl	8005a44 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 80047c0:	4620      	mov	r0, r4
}
 80047c2:	bd70      	pop	{r4, r5, r6, pc}
  return (uint8_t)USBD_OK;
 80047c4:	4618      	mov	r0, r3
}
 80047c6:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_FAIL;
 80047c8:	2003      	movs	r0, #3
}
 80047ca:	bd70      	pop	{r4, r5, r6, pc}

080047cc <USBD_CDC_Setup>:
{
 80047cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ce:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 80047d2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80047d6:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80047d8:	f8d3 72c0 	ldr.w	r7, [r3, #704]	; 0x2c0
{
 80047dc:	4604      	mov	r4, r0
  uint8_t ifalt = 0U;
 80047de:	2000      	movs	r0, #0
 80047e0:	f88d 0005 	strb.w	r0, [sp, #5]
  uint16_t status_info = 0U;
 80047e4:	f8ad 0006 	strh.w	r0, [sp, #6]
  if (hcdc == NULL)
 80047e8:	2f00      	cmp	r7, #0
 80047ea:	d068      	beq.n	80048be <USBD_CDC_Setup+0xf2>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80047ec:	f891 c000 	ldrb.w	ip, [r1]
 80047f0:	f01c 0660 	ands.w	r6, ip, #96	; 0x60
 80047f4:	460d      	mov	r5, r1
 80047f6:	d01f      	beq.n	8004838 <USBD_CDC_Setup+0x6c>
 80047f8:	2e20      	cmp	r6, #32
 80047fa:	d007      	beq.n	800480c <USBD_CDC_Setup+0x40>
          USBD_CtlError(pdev, req);
 80047fc:	4629      	mov	r1, r5
 80047fe:	4620      	mov	r0, r4
 8004800:	f000 fdbc 	bl	800537c <USBD_CtlError>
          ret = USBD_FAIL;
 8004804:	2603      	movs	r6, #3
}
 8004806:	4630      	mov	r0, r6
 8004808:	b003      	add	sp, #12
 800480a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (req->wLength != 0U)
 800480c:	88ce      	ldrh	r6, [r1, #6]
 800480e:	b38e      	cbz	r6, 8004874 <USBD_CDC_Setup+0xa8>
        if ((req->bmRequest & 0x80U) != 0U)
 8004810:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8004814:	d157      	bne.n	80048c6 <USBD_CDC_Setup+0xfa>
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004816:	2e3f      	cmp	r6, #63	; 0x3f
          hcdc->CmdOpCode = req->bRequest;
 8004818:	784b      	ldrb	r3, [r1, #1]
 800481a:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800481e:	bf95      	itete	ls
 8004820:	4632      	movls	r2, r6
 8004822:	2340      	movhi	r3, #64	; 0x40
 8004824:	b2d3      	uxtbls	r3, r2
 8004826:	461a      	movhi	r2, r3
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004828:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800482c:	4639      	mov	r1, r7
 800482e:	4620      	mov	r0, r4
 8004830:	f000 fdf0 	bl	8005414 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8004834:	2600      	movs	r6, #0
 8004836:	e7e6      	b.n	8004806 <USBD_CDC_Setup+0x3a>
      switch (req->bRequest)
 8004838:	784f      	ldrb	r7, [r1, #1]
 800483a:	2f0b      	cmp	r7, #11
 800483c:	d8de      	bhi.n	80047fc <USBD_CDC_Setup+0x30>
 800483e:	a301      	add	r3, pc, #4	; (adr r3, 8004844 <USBD_CDC_Setup+0x78>)
 8004840:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 8004844:	080048a7 	.word	0x080048a7
 8004848:	08004807 	.word	0x08004807
 800484c:	080047fd 	.word	0x080047fd
 8004850:	080047fd 	.word	0x080047fd
 8004854:	080047fd 	.word	0x080047fd
 8004858:	080047fd 	.word	0x080047fd
 800485c:	080047fd 	.word	0x080047fd
 8004860:	080047fd 	.word	0x080047fd
 8004864:	080047fd 	.word	0x080047fd
 8004868:	080047fd 	.word	0x080047fd
 800486c:	08004891 	.word	0x08004891
 8004870:	08004887 	.word	0x08004887
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004874:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004878:	7848      	ldrb	r0, [r1, #1]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	4632      	mov	r2, r6
 800487e:	4798      	blx	r3
}
 8004880:	4630      	mov	r0, r6
 8004882:	b003      	add	sp, #12
 8004884:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004886:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800488a:	2b03      	cmp	r3, #3
 800488c:	d0bb      	beq.n	8004806 <USBD_CDC_Setup+0x3a>
 800488e:	e7b5      	b.n	80047fc <USBD_CDC_Setup+0x30>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004890:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004894:	2b03      	cmp	r3, #3
 8004896:	d1b1      	bne.n	80047fc <USBD_CDC_Setup+0x30>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004898:	2201      	movs	r2, #1
 800489a:	f10d 0105 	add.w	r1, sp, #5
 800489e:	4620      	mov	r0, r4
 80048a0:	f000 fda2 	bl	80053e8 <USBD_CtlSendData>
 80048a4:	e7af      	b.n	8004806 <USBD_CDC_Setup+0x3a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80048a6:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80048aa:	2b03      	cmp	r3, #3
 80048ac:	d1a6      	bne.n	80047fc <USBD_CDC_Setup+0x30>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80048ae:	2202      	movs	r2, #2
 80048b0:	f10d 0106 	add.w	r1, sp, #6
 80048b4:	4620      	mov	r0, r4
 80048b6:	f000 fd97 	bl	80053e8 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80048ba:	463e      	mov	r6, r7
 80048bc:	e7a3      	b.n	8004806 <USBD_CDC_Setup+0x3a>
    return (uint8_t)USBD_FAIL;
 80048be:	2603      	movs	r6, #3
}
 80048c0:	4630      	mov	r0, r6
 80048c2:	b003      	add	sp, #12
 80048c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80048c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80048ca:	4632      	mov	r2, r6
 80048cc:	4639      	mov	r1, r7
 80048ce:	689b      	ldr	r3, [r3, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 80048d0:	4606      	mov	r6, r0
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80048d2:	7868      	ldrb	r0, [r5, #1]
 80048d4:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80048d6:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80048d8:	2a07      	cmp	r2, #7
 80048da:	4639      	mov	r1, r7
 80048dc:	bf28      	it	cs
 80048de:	2207      	movcs	r2, #7
 80048e0:	4620      	mov	r0, r4
 80048e2:	f000 fd81 	bl	80053e8 <USBD_CtlSendData>
 80048e6:	e78e      	b.n	8004806 <USBD_CDC_Setup+0x3a>

080048e8 <USBD_CDC_DeInit>:
{
 80048e8:	b538      	push	{r3, r4, r5, lr}
 80048ea:	4604      	mov	r4, r0
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80048ec:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80048ee:	2181      	movs	r1, #129	; 0x81
 80048f0:	f001 f85c 	bl	80059ac <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80048f4:	2101      	movs	r1, #1
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80048f6:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80048f8:	4620      	mov	r0, r4
 80048fa:	f001 f857 	bl	80059ac <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80048fe:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004902:	2182      	movs	r1, #130	; 0x82
 8004904:	4620      	mov	r0, r4
 8004906:	f001 f851 	bl	80059ac <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800490a:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800490e:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004910:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004914:	f8d3 22c0 	ldr.w	r2, [r3, #704]	; 0x2c0
 8004918:	b18a      	cbz	r2, 800493e <USBD_CDC_DeInit+0x56>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800491a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004922:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8004926:	33b0      	adds	r3, #176	; 0xb0
 8004928:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800492c:	f001 f8d6 	bl	8005adc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004930:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8004934:	33b0      	adds	r3, #176	; 0xb0
 8004936:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 800493a:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800493e:	2000      	movs	r0, #0
 8004940:	bd38      	pop	{r3, r4, r5, pc}
 8004942:	bf00      	nop

08004944 <USBD_CDC_Init>:
{
 8004944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004948:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800494a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800494e:	f001 f8c1 	bl	8005ad4 <USBD_static_malloc>
  if (hcdc == NULL)
 8004952:	4605      	mov	r5, r0
 8004954:	2800      	cmp	r0, #0
 8004956:	d05c      	beq.n	8004a12 <USBD_CDC_Init+0xce>
  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004958:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800495c:	2100      	movs	r1, #0
 800495e:	f001 f911 	bl	8005b84 <memset>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004962:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8004966:	33b0      	adds	r3, #176	; 0xb0
 8004968:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800496c:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800496e:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004972:	b3cb      	cbz	r3, 80049e8 <USBD_CDC_Init+0xa4>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004974:	2340      	movs	r3, #64	; 0x40
 8004976:	2202      	movs	r2, #2
 8004978:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800497a:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800497c:	4620      	mov	r0, r4
 800497e:	f001 f805 	bl	800598c <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004982:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004984:	2340      	movs	r3, #64	; 0x40
 8004986:	4631      	mov	r1, r6
 8004988:	2202      	movs	r2, #2
 800498a:	4620      	mov	r0, r4
 800498c:	f000 fffe 	bl	800598c <USBD_LL_OpenEP>
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004990:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004992:	2203      	movs	r2, #3
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004994:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004998:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800499c:	2182      	movs	r1, #130	; 0x82
 800499e:	2308      	movs	r3, #8
 80049a0:	4620      	mov	r0, r4
 80049a2:	f000 fff3 	bl	800598c <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80049a6:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 80049aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  hcdc->RxBuffer = NULL;
 80049ae:	2600      	movs	r6, #0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80049b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80049b4:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80049b8:	681b      	ldr	r3, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80049ba:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  hcdc->RxBuffer = NULL;
 80049be:	f8c5 6204 	str.w	r6, [r5, #516]	; 0x204
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80049c2:	4798      	blx	r3
  if (hcdc->RxBuffer == NULL)
 80049c4:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
  hcdc->TxState = 0U;
 80049c8:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 80049cc:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
  if (hcdc->RxBuffer == NULL)
 80049d0:	b342      	cbz	r2, 8004a24 <USBD_CDC_Init+0xe0>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80049d2:	7c27      	ldrb	r7, [r4, #16]
 80049d4:	b9a7      	cbnz	r7, 8004a00 <USBD_CDC_Init+0xbc>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80049d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049da:	4641      	mov	r1, r8
 80049dc:	4620      	mov	r0, r4
 80049de:	f001 f83f 	bl	8005a60 <USBD_LL_PrepareReceive>
}
 80049e2:	4638      	mov	r0, r7
 80049e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80049e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049ec:	2202      	movs	r2, #2
 80049ee:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80049f0:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80049f2:	4620      	mov	r0, r4
 80049f4:	f000 ffca 	bl	800598c <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80049f8:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80049fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049fe:	e7c2      	b.n	8004986 <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004a00:	2340      	movs	r3, #64	; 0x40
 8004a02:	4641      	mov	r1, r8
 8004a04:	4620      	mov	r0, r4
  return (uint8_t)USBD_OK;
 8004a06:	4637      	mov	r7, r6
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004a08:	f001 f82a 	bl	8005a60 <USBD_LL_PrepareReceive>
}
 8004a0c:	4638      	mov	r0, r7
 8004a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004a12:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8004a16:	33b0      	adds	r3, #176	; 0xb0
    return (uint8_t)USBD_EMEM;
 8004a18:	2702      	movs	r7, #2
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004a1a:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
}
 8004a1e:	4638      	mov	r0, r7
 8004a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 8004a24:	2702      	movs	r7, #2
 8004a26:	e7dc      	b.n	80049e2 <USBD_CDC_Init+0x9e>

08004a28 <USBD_CDC_GetOtherSpeedCfgDesc>:
 8004a28:	b570      	push	{r4, r5, r6, lr}
 8004a2a:	2182      	movs	r1, #130	; 0x82
 8004a2c:	4606      	mov	r6, r0
 8004a2e:	480f      	ldr	r0, [pc, #60]	; (8004a6c <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8004a30:	f000 f9c8 	bl	8004dc4 <USBD_GetEpDesc>
 8004a34:	2101      	movs	r1, #1
 8004a36:	4605      	mov	r5, r0
 8004a38:	480c      	ldr	r0, [pc, #48]	; (8004a6c <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8004a3a:	f000 f9c3 	bl	8004dc4 <USBD_GetEpDesc>
 8004a3e:	2181      	movs	r1, #129	; 0x81
 8004a40:	4604      	mov	r4, r0
 8004a42:	480a      	ldr	r0, [pc, #40]	; (8004a6c <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8004a44:	f000 f9be 	bl	8004dc4 <USBD_GetEpDesc>
 8004a48:	b10d      	cbz	r5, 8004a4e <USBD_CDC_GetOtherSpeedCfgDesc+0x26>
 8004a4a:	2210      	movs	r2, #16
 8004a4c:	71aa      	strb	r2, [r5, #6]
 8004a4e:	b11c      	cbz	r4, 8004a58 <USBD_CDC_GetOtherSpeedCfgDesc+0x30>
 8004a50:	2200      	movs	r2, #0
 8004a52:	2140      	movs	r1, #64	; 0x40
 8004a54:	7121      	strb	r1, [r4, #4]
 8004a56:	7162      	strb	r2, [r4, #5]
 8004a58:	b118      	cbz	r0, 8004a62 <USBD_CDC_GetOtherSpeedCfgDesc+0x3a>
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	2140      	movs	r1, #64	; 0x40
 8004a5e:	7101      	strb	r1, [r0, #4]
 8004a60:	7142      	strb	r2, [r0, #5]
 8004a62:	2343      	movs	r3, #67	; 0x43
 8004a64:	4801      	ldr	r0, [pc, #4]	; (8004a6c <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8004a66:	8033      	strh	r3, [r6, #0]
 8004a68:	bd70      	pop	{r4, r5, r6, pc}
 8004a6a:	bf00      	nop
 8004a6c:	2000004c 	.word	0x2000004c

08004a70 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004a70:	4603      	mov	r3, r0
  if (fops == NULL)
 8004a72:	b139      	cbz	r1, 8004a84 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 8004a74:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 8004a78:	eb03 0382 	add.w	r3, r3, r2, lsl #2

  return (uint8_t)USBD_OK;
 8004a7c:	2000      	movs	r0, #0
  pdev->pUserData[pdev->classId] = fops;
 8004a7e:	f8c3 12c4 	str.w	r1, [r3, #708]	; 0x2c4
  return (uint8_t)USBD_OK;
 8004a82:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8004a84:	2003      	movs	r0, #3
}
 8004a86:	4770      	bx	lr

08004a88 <USBD_CDC_SetTxBuffer>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004a88:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8004a8c:	33b0      	adds	r3, #176	; 0xb0
 8004a8e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004a92:	b12b      	cbz	r3, 8004aa0 <USBD_CDC_SetTxBuffer+0x18>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8004a94:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004a98:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004a9c:	2000      	movs	r0, #0
 8004a9e:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8004aa0:	2003      	movs	r0, #3
}
 8004aa2:	4770      	bx	lr

08004aa4 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004aa4:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8004aa8:	33b0      	adds	r3, #176	; 0xb0
 8004aaa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 8004aae:	b11b      	cbz	r3, 8004ab8 <USBD_CDC_SetRxBuffer+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8004ab0:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8004ab8:	2003      	movs	r0, #3
}
 8004aba:	4770      	bx	lr

08004abc <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004abc:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 8004ac0:	32b0      	adds	r2, #176	; 0xb0
{
 8004ac2:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ac4:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004ac8:	b18a      	cbz	r2, 8004aee <USBD_CDC_ReceivePacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004aca:	7c04      	ldrb	r4, [r0, #16]
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004acc:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ad0:	b134      	cbz	r4, 8004ae0 <USBD_CDC_ReceivePacket+0x24>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004ad2:	2340      	movs	r3, #64	; 0x40
 8004ad4:	2101      	movs	r1, #1
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004ad6:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004ad8:	f000 ffc2 	bl	8005a60 <USBD_LL_PrepareReceive>
}
 8004adc:	4620      	mov	r0, r4
 8004ade:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ae4:	2101      	movs	r1, #1
 8004ae6:	f000 ffbb 	bl	8005a60 <USBD_LL_PrepareReceive>
}
 8004aea:	4620      	mov	r0, r4
 8004aec:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8004aee:	2403      	movs	r4, #3
}
 8004af0:	4620      	mov	r0, r4
 8004af2:	bd10      	pop	{r4, pc}

08004af4 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004af4:	b178      	cbz	r0, 8004b16 <USBD_Init+0x22>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004af6:	2300      	movs	r3, #0
 8004af8:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8004afc:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004b00:	f8c0 32d0 	str.w	r3, [r0, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004b04:	b109      	cbz	r1, 8004b0a <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8004b06:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 8004b10:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004b12:	f000 bee1 	b.w	80058d8 <USBD_LL_Init>

  return ret;
}
 8004b16:	2003      	movs	r0, #3
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop

08004b1c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004b1c:	b510      	push	{r4, lr}
 8004b1e:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8004b20:	2300      	movs	r3, #0
 8004b22:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8004b26:	b189      	cbz	r1, 8004b4c <USBD_RegisterClass+0x30>
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004b28:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  pdev->pClass[0] = pclass;
 8004b2a:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004b2e:	4604      	mov	r4, r0
 8004b30:	b123      	cbz	r3, 8004b3c <USBD_RegisterClass+0x20>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004b32:	f10d 0006 	add.w	r0, sp, #6
 8004b36:	4798      	blx	r3
 8004b38:	f8c4 02d0 	str.w	r0, [r4, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004b3c:	f8d4 32d8 	ldr.w	r3, [r4, #728]	; 0x2d8

  return USBD_OK;
 8004b40:	2000      	movs	r0, #0
  pdev->NumClasses ++;
 8004b42:	3301      	adds	r3, #1
 8004b44:	f8c4 32d8 	str.w	r3, [r4, #728]	; 0x2d8
}
 8004b48:	b002      	add	sp, #8
 8004b4a:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8004b4c:	2003      	movs	r0, #3
}
 8004b4e:	b002      	add	sp, #8
 8004b50:	bd10      	pop	{r4, pc}
 8004b52:	bf00      	nop

08004b54 <USBD_Start>:
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004b54:	f000 bf0c 	b.w	8005970 <USBD_LL_Start>

08004b58 <USBD_SetClassConfig>:
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004b58:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004b5c:	b10b      	cbz	r3, 8004b62 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4718      	bx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop

08004b68 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b68:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004b6a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	4798      	blx	r3
  {
    ret = USBD_FAIL;
 8004b72:	2800      	cmp	r0, #0
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8004b74:	bf18      	it	ne
 8004b76:	2003      	movne	r0, #3
 8004b78:	bd08      	pop	{r3, pc}
 8004b7a:	bf00      	nop

08004b7c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004b7c:	b538      	push	{r3, r4, r5, lr}
 8004b7e:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004b80:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8004b84:	4628      	mov	r0, r5
 8004b86:	f000 fbed 	bl	8005364 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8004b8a:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 8004b8e:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	; 0x2b0
 8004b92:	f8c4 2298 	str.w	r2, [r4, #664]	; 0x298
  pdev->ep0_state = USBD_EP0_SETUP;
 8004b96:	2301      	movs	r3, #1
 8004b98:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 8004b9c:	f001 031f 	and.w	r3, r1, #31
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d009      	beq.n	8004bb8 <USBD_LL_SetupStage+0x3c>
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d013      	beq.n	8004bd0 <USBD_LL_SetupStage+0x54>
 8004ba8:	b163      	cbz	r3, 8004bc4 <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004baa:	4620      	mov	r0, r4
 8004bac:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 8004bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004bb4:	f000 bf08 	b.w	80059c8 <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004bb8:	4629      	mov	r1, r5
 8004bba:	4620      	mov	r0, r4
}
 8004bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004bc0:	f000 baea 	b.w	8005198 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004bc4:	4629      	mov	r1, r5
 8004bc6:	4620      	mov	r0, r4
}
 8004bc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004bcc:	f000 b910 	b.w	8004df0 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004bd0:	4629      	mov	r1, r5
 8004bd2:	4620      	mov	r0, r4
}
 8004bd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004bd8:	f000 bb18 	b.w	800520c <USBD_StdEPReq>

08004bdc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004bdc:	b510      	push	{r4, lr}
 8004bde:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
  uint8_t idx;

  if (epnum == 0U)
 8004be0:	b931      	cbnz	r1, 8004bf0 <USBD_LL_DataOutStage+0x14>
 8004be2:	4694      	mov	ip, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004be4:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8004be8:	2a03      	cmp	r2, #3
 8004bea:	d010      	beq.n	8004c0e <USBD_LL_DataOutStage+0x32>
      }
    }
  }

  return USBD_OK;
}
 8004bec:	2000      	movs	r0, #0
 8004bee:	bd10      	pop	{r4, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bf0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004bf4:	2b03      	cmp	r3, #3
 8004bf6:	d1f9      	bne.n	8004bec <USBD_LL_DataOutStage+0x10>
        if (pdev->pClass[idx]->DataOut != NULL)
 8004bf8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0f4      	beq.n	8004bec <USBD_LL_DataOutStage+0x10>
          pdev->classId = idx;
 8004c02:	2200      	movs	r2, #0
}
 8004c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          pdev->classId = idx;
 8004c08:	f8c0 22d4 	str.w	r2, [r0, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004c0c:	4718      	bx	r3
 8004c0e:	460b      	mov	r3, r1
      if (pep->rem_length > pep->maxpacket)
 8004c10:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	; 0x15c
 8004c14:	4291      	cmp	r1, r2
 8004c16:	d808      	bhi.n	8004c2a <USBD_LL_DataOutStage+0x4e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c18:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004c1c:	2a03      	cmp	r2, #3
 8004c1e:	d00e      	beq.n	8004c3e <USBD_LL_DataOutStage+0x62>
        (void)USBD_CtlSendStatus(pdev);
 8004c20:	4620      	mov	r0, r4
 8004c22:	f000 fc0d 	bl	8005440 <USBD_CtlSendStatus>
}
 8004c26:	2000      	movs	r0, #0
 8004c28:	bd10      	pop	{r4, pc}
        pep->rem_length -= pep->maxpacket;
 8004c2a:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004c2c:	428a      	cmp	r2, r1
 8004c2e:	bf28      	it	cs
 8004c30:	460a      	movcs	r2, r1
        pep->rem_length -= pep->maxpacket;
 8004c32:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004c36:	4661      	mov	r1, ip
 8004c38:	f000 fbfa 	bl	8005430 <USBD_CtlContinueRx>
 8004c3c:	e7d6      	b.n	8004bec <USBD_LL_DataOutStage+0x10>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004c3e:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8004c42:	6912      	ldr	r2, [r2, #16]
 8004c44:	2a00      	cmp	r2, #0
 8004c46:	d0eb      	beq.n	8004c20 <USBD_LL_DataOutStage+0x44>
              pdev->classId = idx;
 8004c48:	f8c0 32d4 	str.w	r3, [r0, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004c4c:	4790      	blx	r2
 8004c4e:	e7e7      	b.n	8004c20 <USBD_LL_DataOutStage+0x44>

08004c50 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004c50:	b570      	push	{r4, r5, r6, lr}
 8004c52:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8004c54:	b961      	cbnz	r1, 8004c70 <USBD_LL_DataInStage+0x20>
 8004c56:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004c58:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8004c5c:	2a02      	cmp	r2, #2
 8004c5e:	d016      	beq.n	8004c8e <USBD_LL_DataInStage+0x3e>
          (void)USBD_CtlReceiveStatus(pdev);
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8004c60:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8004c64:	b113      	cbz	r3, 8004c6c <USBD_LL_DataInStage+0x1c>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8004c66:	2300      	movs	r3, #0
 8004c68:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
      }
    }
  }

  return USBD_OK;
}
 8004c6c:	2000      	movs	r0, #0
 8004c6e:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c70:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004c74:	2b03      	cmp	r3, #3
 8004c76:	d1f9      	bne.n	8004c6c <USBD_LL_DataInStage+0x1c>
        if (pdev->pClass[idx]->DataIn != NULL)
 8004c78:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0f4      	beq.n	8004c6c <USBD_LL_DataInStage+0x1c>
          pdev->classId = idx;
 8004c82:	2200      	movs	r2, #0
}
 8004c84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 8004c88:	f8c0 22d4 	str.w	r2, [r0, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004c8c:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 8004c8e:	e9d0 2607 	ldrd	r2, r6, [r0, #28]
 8004c92:	42b2      	cmp	r2, r6
 8004c94:	460d      	mov	r5, r1
 8004c96:	d810      	bhi.n	8004cba <USBD_LL_DataInStage+0x6a>
        if ((pep->maxpacket == pep->rem_length) &&
 8004c98:	d01b      	beq.n	8004cd2 <USBD_LL_DataInStage+0x82>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c9a:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004c9e:	2b03      	cmp	r3, #3
 8004ca0:	d024      	beq.n	8004cec <USBD_LL_DataInStage+0x9c>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004ca2:	2180      	movs	r1, #128	; 0x80
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	f000 fe8f 	bl	80059c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004caa:	4620      	mov	r0, r4
 8004cac:	f000 fbd4 	bl	8005458 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode != 0U)
 8004cb0:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0d9      	beq.n	8004c6c <USBD_LL_DataInStage+0x1c>
 8004cb8:	e7d5      	b.n	8004c66 <USBD_LL_DataInStage+0x16>
        pep->rem_length -= pep->maxpacket;
 8004cba:	1b92      	subs	r2, r2, r6
 8004cbc:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	f000 fba0 	bl	8005404 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004cc4:	462b      	mov	r3, r5
 8004cc6:	462a      	mov	r2, r5
 8004cc8:	4629      	mov	r1, r5
 8004cca:	4620      	mov	r0, r4
 8004ccc:	f000 fec8 	bl	8005a60 <USBD_LL_PrepareReceive>
 8004cd0:	e7c6      	b.n	8004c60 <USBD_LL_DataInStage+0x10>
            (pep->total_length >= pep->maxpacket) &&
 8004cd2:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d8e0      	bhi.n	8004c9a <USBD_LL_DataInStage+0x4a>
            (pep->total_length >= pep->maxpacket) &&
 8004cd8:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d2dc      	bcs.n	8004c9a <USBD_LL_DataInStage+0x4a>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004ce0:	460a      	mov	r2, r1
 8004ce2:	f000 fb8f 	bl	8005404 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004ce6:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8004cea:	e7eb      	b.n	8004cc4 <USBD_LL_DataInStage+0x74>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8004cec:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0d5      	beq.n	8004ca2 <USBD_LL_DataInStage+0x52>
              pdev->classId = 0U;
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f8c4 22d4 	str.w	r2, [r4, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	4798      	blx	r3
 8004d00:	e7cf      	b.n	8004ca2 <USBD_LL_DataInStage+0x52>
 8004d02:	bf00      	nop

08004d04 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8004d06:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 8004d0a:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
{
 8004d12:	4604      	mov	r4, r0
  pdev->dev_config = 0U;
 8004d14:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 8004d16:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_remote_wakeup = 0U;
 8004d1a:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8004d1e:	f880 12a0 	strb.w	r1, [r0, #672]	; 0x2a0
  if (pdev->pClass[0] != NULL)
 8004d22:	b11b      	cbz	r3, 8004d2c <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	b10b      	cbz	r3, 8004d2c <USBD_LL_Reset+0x28>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8004d28:	4798      	blx	r3
 8004d2a:	b9b0      	cbnz	r0, 8004d5a <USBD_LL_Reset+0x56>
  USBD_StatusTypeDef ret = USBD_OK;
 8004d2c:	2700      	movs	r7, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004d2e:	2200      	movs	r2, #0
 8004d30:	2340      	movs	r3, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004d32:	461d      	mov	r5, r3
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004d34:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004d36:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004d38:	4620      	mov	r0, r4
 8004d3a:	f000 fe27 	bl	800598c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004d3e:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004d42:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004d46:	462b      	mov	r3, r5
 8004d48:	2200      	movs	r2, #0
 8004d4a:	2180      	movs	r1, #128	; 0x80
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	f000 fe1d 	bl	800598c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004d52:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004d54:	6225      	str	r5, [r4, #32]

  return ret;
}
 8004d56:	4638      	mov	r0, r7
 8004d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = USBD_FAIL;
 8004d5a:	2703      	movs	r7, #3
 8004d5c:	e7e7      	b.n	8004d2e <USBD_LL_Reset+0x2a>
 8004d5e:	bf00      	nop

08004d60 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8004d60:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8004d62:	2000      	movs	r0, #0
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop

08004d68 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8004d68:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004d6c:	2b04      	cmp	r3, #4
 8004d6e:	d004      	beq.n	8004d7a <USBD_LL_Suspend+0x12>
  {
    pdev->dev_old_state = pdev->dev_state;
 8004d70:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004d7a:	2304      	movs	r3, #4
 8004d7c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8004d80:	2000      	movs	r0, #0
 8004d82:	4770      	bx	lr

08004d84 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004d84:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004d88:	2b04      	cmp	r3, #4
 8004d8a:	d104      	bne.n	8004d96 <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004d8c:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8004d96:	2000      	movs	r0, #0
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop

08004d9c <USBD_LL_SOF>:
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d9c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004da0:	2a03      	cmp	r2, #3
 8004da2:	d001      	beq.n	8004da8 <USBD_LL_SOF+0xc>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 8004da4:	2000      	movs	r0, #0
 8004da6:	4770      	bx	lr
{
 8004da8:	b508      	push	{r3, lr}
    if (pdev->pClass[0] != NULL)
 8004daa:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004dae:	b113      	cbz	r3, 8004db6 <USBD_LL_SOF+0x1a>
      if (pdev->pClass[0]->SOF != NULL)
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	b103      	cbz	r3, 8004db6 <USBD_LL_SOF+0x1a>
        (void)pdev->pClass[0]->SOF(pdev);
 8004db4:	4798      	blx	r3
}
 8004db6:	2000      	movs	r0, #0
 8004db8:	bd08      	pop	{r3, pc}
 8004dba:	bf00      	nop

08004dbc <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8004dbc:	2000      	movs	r0, #0
 8004dbe:	4770      	bx	lr

08004dc0 <USBD_CoreFindEP>:
 8004dc0:	2000      	movs	r0, #0
 8004dc2:	4770      	bx	lr

08004dc4 <USBD_GetEpDesc>:
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
  USBD_EpDescTypeDef *pEpDesc = NULL;
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8004dc4:	7802      	ldrb	r2, [r0, #0]
 8004dc6:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 8004dca:	4594      	cmp	ip, r2
 8004dcc:	b293      	uxth	r3, r2
 8004dce:	d803      	bhi.n	8004dd8 <USBD_GetEpDesc+0x14>
 8004dd0:	e00c      	b.n	8004dec <USBD_GetEpDesc+0x28>
  {
    ptr = desc->bLength;

    while (ptr < desc->wTotalLength)
 8004dd2:	459c      	cmp	ip, r3
 8004dd4:	d90a      	bls.n	8004dec <USBD_GetEpDesc+0x28>
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 8004dd6:	7802      	ldrb	r2, [r0, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8004dd8:	4410      	add	r0, r2
  *ptr += pnext->bLength;
 8004dda:	4413      	add	r3, r2
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8004ddc:	7842      	ldrb	r2, [r0, #1]
 8004dde:	2a05      	cmp	r2, #5
  *ptr += pnext->bLength;
 8004de0:	b29b      	uxth	r3, r3
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8004de2:	d1f6      	bne.n	8004dd2 <USBD_GetEpDesc+0xe>
        if (pEpDesc->bEndpointAddress == EpAddr)
 8004de4:	7882      	ldrb	r2, [r0, #2]
 8004de6:	428a      	cmp	r2, r1
 8004de8:	d1f3      	bne.n	8004dd2 <USBD_GetEpDesc+0xe>
}
 8004dea:	4770      	bx	lr
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8004dec:	2000      	movs	r0, #0
}
 8004dee:	4770      	bx	lr

08004df0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004df4:	780c      	ldrb	r4, [r1, #0]
 8004df6:	f004 0460 	and.w	r4, r4, #96	; 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004dfa:	2c20      	cmp	r4, #32
{
 8004dfc:	b082      	sub	sp, #8
 8004dfe:	460e      	mov	r6, r1
 8004e00:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e02:	d00f      	beq.n	8004e24 <USBD_StdDevReq+0x34>
 8004e04:	2c40      	cmp	r4, #64	; 0x40
 8004e06:	d00d      	beq.n	8004e24 <USBD_StdDevReq+0x34>
 8004e08:	b1c4      	cbz	r4, 8004e3c <USBD_StdDevReq+0x4c>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004e0a:	2180      	movs	r1, #128	; 0x80
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	f000 fddb 	bl	80059c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004e12:	2100      	movs	r1, #0
 8004e14:	4628      	mov	r0, r5
 8004e16:	f000 fdd7 	bl	80059c8 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 8004e1a:	2400      	movs	r4, #0
}
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	b002      	add	sp, #8
 8004e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8004e24:	f8d5 32d4 	ldr.w	r3, [r5, #724]	; 0x2d4
 8004e28:	33ae      	adds	r3, #174	; 0xae
 8004e2a:	4631      	mov	r1, r6
 8004e2c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	4628      	mov	r0, r5
}
 8004e34:	b002      	add	sp, #8
 8004e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8004e3a:	4718      	bx	r3
      switch (req->bRequest)
 8004e3c:	784f      	ldrb	r7, [r1, #1]
 8004e3e:	2f09      	cmp	r7, #9
 8004e40:	d8e3      	bhi.n	8004e0a <USBD_StdDevReq+0x1a>
 8004e42:	a301      	add	r3, pc, #4	; (adr r3, 8004e48 <USBD_StdDevReq+0x58>)
 8004e44:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 8004e48:	08004ead 	.word	0x08004ead
 8004e4c:	08004edb 	.word	0x08004edb
 8004e50:	08004e0b 	.word	0x08004e0b
 8004e54:	08004ef9 	.word	0x08004ef9
 8004e58:	08004e0b 	.word	0x08004e0b
 8004e5c:	08004f1d 	.word	0x08004f1d
 8004e60:	08004f55 	.word	0x08004f55
 8004e64:	08004e0b 	.word	0x08004e0b
 8004e68:	08004fa9 	.word	0x08004fa9
 8004e6c:	08004e71 	.word	0x08004e71
  cfgidx = (uint8_t)(req->wValue);
 8004e70:	788e      	ldrb	r6, [r1, #2]
 8004e72:	4fb3      	ldr	r7, [pc, #716]	; (8005140 <USBD_StdDevReq+0x350>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004e74:	2e01      	cmp	r6, #1
  cfgidx = (uint8_t)(req->wValue);
 8004e76:	703e      	strb	r6, [r7, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004e78:	f200 8164 	bhi.w	8005144 <USBD_StdDevReq+0x354>
  switch (pdev->dev_state)
 8004e7c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	fa5f f883 	uxtb.w	r8, r3
 8004e86:	f000 811c 	beq.w	80050c2 <USBD_StdDevReq+0x2d2>
 8004e8a:	f1b8 0f03 	cmp.w	r8, #3
 8004e8e:	f000 812d 	beq.w	80050ec <USBD_StdDevReq+0x2fc>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004e92:	2180      	movs	r1, #128	; 0x80
 8004e94:	f000 fd98 	bl	80059c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004e98:	2100      	movs	r1, #0
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	f000 fd94 	bl	80059c8 <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8004ea0:	7839      	ldrb	r1, [r7, #0]
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	f7ff fe60 	bl	8004b68 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8004ea8:	2403      	movs	r4, #3
      break;
 8004eaa:	e7b7      	b.n	8004e1c <USBD_StdDevReq+0x2c>
  switch (pdev->dev_state)
 8004eac:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d826      	bhi.n	8004f04 <USBD_StdDevReq+0x114>
      if (req->wLength != 0x2U)
 8004eb6:	88cb      	ldrh	r3, [r1, #6]
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d123      	bne.n	8004f04 <USBD_StdDevReq+0x114>
      if (pdev->dev_remote_wakeup != 0U)
 8004ebc:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	60c2      	str	r2, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 8004ec4:	b10b      	cbz	r3, 8004eca <USBD_StdDevReq+0xda>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8004eca:	2202      	movs	r2, #2
 8004ecc:	f105 010c 	add.w	r1, r5, #12
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	f000 fa89 	bl	80053e8 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004ed6:	463c      	mov	r4, r7
      break;
 8004ed8:	e7a0      	b.n	8004e1c <USBD_StdDevReq+0x2c>
  switch (pdev->dev_state)
 8004eda:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d80f      	bhi.n	8004f04 <USBD_StdDevReq+0x114>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004ee4:	884b      	ldrh	r3, [r1, #2]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d198      	bne.n	8004e1c <USBD_StdDevReq+0x2c>
        pdev->dev_remote_wakeup = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	f000 faa5 	bl	8005440 <USBD_CtlSendStatus>
 8004ef6:	e791      	b.n	8004e1c <USBD_StdDevReq+0x2c>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004ef8:	884b      	ldrh	r3, [r1, #2]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d0f6      	beq.n	8004eec <USBD_StdDevReq+0xfc>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	f000 8116 	beq.w	8005130 <USBD_StdDevReq+0x340>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004f04:	2180      	movs	r1, #128	; 0x80
 8004f06:	4628      	mov	r0, r5
 8004f08:	f000 fd5e 	bl	80059c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	4628      	mov	r0, r5
 8004f10:	f000 fd5a 	bl	80059c8 <USBD_LL_StallEP>
}
 8004f14:	4620      	mov	r0, r4
 8004f16:	b002      	add	sp, #8
 8004f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004f1c:	888b      	ldrh	r3, [r1, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1f0      	bne.n	8004f04 <USBD_StdDevReq+0x114>
 8004f22:	88cb      	ldrh	r3, [r1, #6]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1ed      	bne.n	8004f04 <USBD_StdDevReq+0x114>
 8004f28:	884e      	ldrh	r6, [r1, #2]
 8004f2a:	2e7f      	cmp	r6, #127	; 0x7f
 8004f2c:	d8ea      	bhi.n	8004f04 <USBD_StdDevReq+0x114>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f2e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004f32:	2b03      	cmp	r3, #3
 8004f34:	d0e6      	beq.n	8004f04 <USBD_StdDevReq+0x114>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004f36:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 8004f38:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004f3c:	f000 fd74 	bl	8005a28 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8004f40:	4628      	mov	r0, r5
 8004f42:	f000 fa7d 	bl	8005440 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8004f46:	2e00      	cmp	r6, #0
 8004f48:	f000 8121 	beq.w	800518e <USBD_StdDevReq+0x39e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8004f52:	e763      	b.n	8004e1c <USBD_StdDevReq+0x2c>
  switch (req->wValue >> 8)
 8004f54:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 8004f56:	2300      	movs	r3, #0
 8004f58:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8004f5c:	0a13      	lsrs	r3, r2, #8
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	2b0e      	cmp	r3, #14
 8004f62:	d8cf      	bhi.n	8004f04 <USBD_StdDevReq+0x114>
 8004f64:	a101      	add	r1, pc, #4	; (adr r1, 8004f6c <USBD_StdDevReq+0x17c>)
 8004f66:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f6a:	bf00      	nop
 8004f6c:	0800505d 	.word	0x0800505d
 8004f70:	08005043 	.word	0x08005043
 8004f74:	08005031 	.word	0x08005031
 8004f78:	08004f05 	.word	0x08004f05
 8004f7c:	08004f05 	.word	0x08004f05
 8004f80:	0800501b 	.word	0x0800501b
 8004f84:	08005001 	.word	0x08005001
 8004f88:	08004f05 	.word	0x08004f05
 8004f8c:	08004f05 	.word	0x08004f05
 8004f90:	08004f05 	.word	0x08004f05
 8004f94:	08004f05 	.word	0x08004f05
 8004f98:	08004f05 	.word	0x08004f05
 8004f9c:	08004f05 	.word	0x08004f05
 8004fa0:	08004f05 	.word	0x08004f05
 8004fa4:	08004fcd 	.word	0x08004fcd
  if (req->wLength != 1U)
 8004fa8:	88ca      	ldrh	r2, [r1, #6]
 8004faa:	2a01      	cmp	r2, #1
 8004fac:	d1aa      	bne.n	8004f04 <USBD_StdDevReq+0x114>
    switch (pdev->dev_state)
 8004fae:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 8004fb2:	2902      	cmp	r1, #2
 8004fb4:	b2cb      	uxtb	r3, r1
 8004fb6:	d87d      	bhi.n	80050b4 <USBD_StdDevReq+0x2c4>
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f43f af26 	beq.w	8004e0a <USBD_StdDevReq+0x1a>
        pdev->dev_default_config = 0U;
 8004fbe:	4601      	mov	r1, r0
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8004fc6:	f000 fa0f 	bl	80053e8 <USBD_CtlSendData>
        break;
 8004fca:	e727      	b.n	8004e1c <USBD_StdDevReq+0x2c>
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8004fcc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d096      	beq.n	8004f04 <USBD_StdDevReq+0x114>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004fd6:	7c28      	ldrb	r0, [r5, #16]
 8004fd8:	f10d 0106 	add.w	r1, sp, #6
 8004fdc:	4798      	blx	r3
  if (req->wLength != 0U)
 8004fde:	88f2      	ldrh	r2, [r6, #6]
 8004fe0:	2a00      	cmp	r2, #0
 8004fe2:	d085      	beq.n	8004ef0 <USBD_StdDevReq+0x100>
    if (len != 0U)
 8004fe4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d08b      	beq.n	8004f04 <USBD_StdDevReq+0x114>
      len = MIN(len, req->wLength);
 8004fec:	429a      	cmp	r2, r3
 8004fee:	bf28      	it	cs
 8004ff0:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004ff2:	4601      	mov	r1, r0
 8004ff4:	4628      	mov	r0, r5
      len = MIN(len, req->wLength);
 8004ff6:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004ffa:	f000 f9f5 	bl	80053e8 <USBD_CtlSendData>
 8004ffe:	e70d      	b.n	8004e1c <USBD_StdDevReq+0x2c>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005000:	7c03      	ldrb	r3, [r0, #16]
 8005002:	2b00      	cmp	r3, #0
 8005004:	f47f af7e 	bne.w	8004f04 <USBD_StdDevReq+0x114>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005008:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800500c:	f10d 0006 	add.w	r0, sp, #6
 8005010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005012:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005014:	2307      	movs	r3, #7
 8005016:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005018:	e7e1      	b.n	8004fde <USBD_StdDevReq+0x1ee>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800501a:	7c03      	ldrb	r3, [r0, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	f47f af71 	bne.w	8004f04 <USBD_StdDevReq+0x114>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005022:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005026:	f10d 0006 	add.w	r0, sp, #6
 800502a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800502c:	4798      	blx	r3
  if (err != 0U)
 800502e:	e7d6      	b.n	8004fde <USBD_StdDevReq+0x1ee>
      switch ((uint8_t)(req->wValue))
 8005030:	b2d2      	uxtb	r2, r2
 8005032:	2a05      	cmp	r2, #5
 8005034:	f63f af66 	bhi.w	8004f04 <USBD_StdDevReq+0x114>
 8005038:	e8df f002 	tbb	[pc, r2]
 800503c:	242a3036 	.word	0x242a3036
 8005040:	181e      	.short	0x181e
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005042:	7c03      	ldrb	r3, [r0, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	f040 8092 	bne.w	800516e <USBD_StdDevReq+0x37e>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800504a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800504e:	f10d 0006 	add.w	r0, sp, #6
 8005052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005054:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005056:	2302      	movs	r3, #2
 8005058:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800505a:	e7c0      	b.n	8004fde <USBD_StdDevReq+0x1ee>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800505c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005060:	7c00      	ldrb	r0, [r0, #16]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f10d 0106 	add.w	r1, sp, #6
 8005068:	4798      	blx	r3
  if (err != 0U)
 800506a:	e7b8      	b.n	8004fde <USBD_StdDevReq+0x1ee>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800506c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1af      	bne.n	8004fd6 <USBD_StdDevReq+0x1e6>
 8005076:	e745      	b.n	8004f04 <USBD_StdDevReq+0x114>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005078:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1a9      	bne.n	8004fd6 <USBD_StdDevReq+0x1e6>
 8005082:	e73f      	b.n	8004f04 <USBD_StdDevReq+0x114>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005084:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1a3      	bne.n	8004fd6 <USBD_StdDevReq+0x1e6>
 800508e:	e739      	b.n	8004f04 <USBD_StdDevReq+0x114>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005090:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d19d      	bne.n	8004fd6 <USBD_StdDevReq+0x1e6>
 800509a:	e733      	b.n	8004f04 <USBD_StdDevReq+0x114>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800509c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d197      	bne.n	8004fd6 <USBD_StdDevReq+0x1e6>
 80050a6:	e72d      	b.n	8004f04 <USBD_StdDevReq+0x114>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80050a8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d191      	bne.n	8004fd6 <USBD_StdDevReq+0x1e6>
 80050b2:	e727      	b.n	8004f04 <USBD_StdDevReq+0x114>
    switch (pdev->dev_state)
 80050b4:	2b03      	cmp	r3, #3
 80050b6:	f47f aea8 	bne.w	8004e0a <USBD_StdDevReq+0x1a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80050ba:	1d01      	adds	r1, r0, #4
 80050bc:	f000 f994 	bl	80053e8 <USBD_CtlSendData>
        break;
 80050c0:	e6ac      	b.n	8004e1c <USBD_StdDevReq+0x2c>
      if (cfgidx != 0U)
 80050c2:	2e00      	cmp	r6, #0
 80050c4:	f43f af14 	beq.w	8004ef0 <USBD_StdDevReq+0x100>
        pdev->dev_config = cfgidx;
 80050c8:	2101      	movs	r1, #1
 80050ca:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80050cc:	f7ff fd44 	bl	8004b58 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80050d0:	4604      	mov	r4, r0
 80050d2:	2800      	cmp	r0, #0
 80050d4:	d054      	beq.n	8005180 <USBD_StdDevReq+0x390>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80050d6:	2180      	movs	r1, #128	; 0x80
 80050d8:	4628      	mov	r0, r5
 80050da:	f000 fc75 	bl	80059c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80050de:	2100      	movs	r1, #0
 80050e0:	4628      	mov	r0, r5
 80050e2:	f000 fc71 	bl	80059c8 <USBD_LL_StallEP>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80050e6:	f885 829c 	strb.w	r8, [r5, #668]	; 0x29c
 80050ea:	e697      	b.n	8004e1c <USBD_StdDevReq+0x2c>
      if (cfgidx == 0U)
 80050ec:	b39e      	cbz	r6, 8005156 <USBD_StdDevReq+0x366>
      else if (cfgidx != pdev->dev_config)
 80050ee:	6841      	ldr	r1, [r0, #4]
 80050f0:	2901      	cmp	r1, #1
 80050f2:	f43f aefd 	beq.w	8004ef0 <USBD_StdDevReq+0x100>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80050f6:	b2c9      	uxtb	r1, r1
 80050f8:	f7ff fd36 	bl	8004b68 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80050fc:	7839      	ldrb	r1, [r7, #0]
 80050fe:	6069      	str	r1, [r5, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005100:	4628      	mov	r0, r5
 8005102:	f7ff fd29 	bl	8004b58 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8005106:	4606      	mov	r6, r0
 8005108:	2800      	cmp	r0, #0
 800510a:	f43f aef1 	beq.w	8004ef0 <USBD_StdDevReq+0x100>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800510e:	2180      	movs	r1, #128	; 0x80
 8005110:	4628      	mov	r0, r5
 8005112:	f000 fc59 	bl	80059c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005116:	2100      	movs	r1, #0
 8005118:	4628      	mov	r0, r5
 800511a:	f000 fc55 	bl	80059c8 <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800511e:	7929      	ldrb	r1, [r5, #4]
 8005120:	4628      	mov	r0, r5
 8005122:	f7ff fd21 	bl	8004b68 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005126:	2302      	movs	r3, #2
 8005128:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800512c:	4634      	mov	r4, r6
 800512e:	e675      	b.n	8004e1c <USBD_StdDevReq+0x2c>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8005130:	888b      	ldrh	r3, [r1, #4]
 8005132:	0a1b      	lsrs	r3, r3, #8
 8005134:	f880 32a0 	strb.w	r3, [r0, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005138:	f000 f982 	bl	8005440 <USBD_CtlSendStatus>
 800513c:	e66e      	b.n	8004e1c <USBD_StdDevReq+0x2c>
 800513e:	bf00      	nop
 8005140:	200006ac 	.word	0x200006ac
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005144:	2180      	movs	r1, #128	; 0x80
 8005146:	f000 fc3f 	bl	80059c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800514a:	2100      	movs	r1, #0
 800514c:	4628      	mov	r0, r5
 800514e:	f000 fc3b 	bl	80059c8 <USBD_LL_StallEP>
    return USBD_FAIL;
 8005152:	2403      	movs	r4, #3
 8005154:	e662      	b.n	8004e1c <USBD_StdDevReq+0x2c>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005156:	2302      	movs	r3, #2
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005158:	4631      	mov	r1, r6
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800515a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800515e:	6046      	str	r6, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005160:	f7ff fd02 	bl	8004b68 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005164:	4628      	mov	r0, r5
 8005166:	f000 f96b 	bl	8005440 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800516a:	4634      	mov	r4, r6
 800516c:	e656      	b.n	8004e1c <USBD_StdDevReq+0x2c>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800516e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005172:	f10d 0006 	add.w	r0, sp, #6
 8005176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005178:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800517a:	2302      	movs	r3, #2
 800517c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800517e:	e72e      	b.n	8004fde <USBD_StdDevReq+0x1ee>
          (void)USBD_CtlSendStatus(pdev);
 8005180:	4628      	mov	r0, r5
 8005182:	f000 f95d 	bl	8005440 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005186:	2303      	movs	r3, #3
 8005188:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800518c:	e646      	b.n	8004e1c <USBD_StdDevReq+0x2c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800518e:	2301      	movs	r3, #1
 8005190:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8005194:	e642      	b.n	8004e1c <USBD_StdDevReq+0x2c>
 8005196:	bf00      	nop

08005198 <USBD_StdItfReq>:
{
 8005198:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800519a:	780b      	ldrb	r3, [r1, #0]
 800519c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80051a0:	2a40      	cmp	r2, #64	; 0x40
{
 80051a2:	460d      	mov	r5, r1
 80051a4:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80051a6:	d00b      	beq.n	80051c0 <USBD_StdItfReq+0x28>
 80051a8:	065b      	lsls	r3, r3, #25
 80051aa:	d509      	bpl.n	80051c0 <USBD_StdItfReq+0x28>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80051ac:	2180      	movs	r1, #128	; 0x80
 80051ae:	f000 fc0b 	bl	80059c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80051b2:	2100      	movs	r1, #0
 80051b4:	4620      	mov	r0, r4
 80051b6:	f000 fc07 	bl	80059c8 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 80051ba:	2500      	movs	r5, #0
}
 80051bc:	4628      	mov	r0, r5
 80051be:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 80051c0:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80051c4:	3b01      	subs	r3, #1
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d802      	bhi.n	80051d0 <USBD_StdItfReq+0x38>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80051ca:	7929      	ldrb	r1, [r5, #4]
 80051cc:	2901      	cmp	r1, #1
 80051ce:	d902      	bls.n	80051d6 <USBD_StdItfReq+0x3e>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80051d0:	2180      	movs	r1, #128	; 0x80
 80051d2:	4620      	mov	r0, r4
 80051d4:	e7eb      	b.n	80051ae <USBD_StdItfReq+0x16>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80051d6:	4620      	mov	r0, r4
 80051d8:	f7ff fdf0 	bl	8004dbc <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80051dc:	b990      	cbnz	r0, 8005204 <USBD_StdItfReq+0x6c>
              if (pdev->pClass[idx]->Setup != NULL)
 80051de:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	b173      	cbz	r3, 8005204 <USBD_StdItfReq+0x6c>
                pdev->classId = idx;
 80051e6:	f8c4 02d4 	str.w	r0, [r4, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80051ea:	4629      	mov	r1, r5
 80051ec:	4620      	mov	r0, r4
 80051ee:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80051f0:	88eb      	ldrh	r3, [r5, #6]
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80051f2:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1e1      	bne.n	80051bc <USBD_StdItfReq+0x24>
 80051f8:	2800      	cmp	r0, #0
 80051fa:	d1df      	bne.n	80051bc <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 80051fc:	4620      	mov	r0, r4
 80051fe:	f000 f91f 	bl	8005440 <USBD_CtlSendStatus>
 8005202:	e7db      	b.n	80051bc <USBD_StdItfReq+0x24>
              ret = USBD_FAIL;
 8005204:	2503      	movs	r5, #3
}
 8005206:	4628      	mov	r0, r5
 8005208:	bd38      	pop	{r3, r4, r5, pc}
 800520a:	bf00      	nop

0800520c <USBD_StdEPReq>:
{
 800520c:	b530      	push	{r4, r5, lr}
 800520e:	460c      	mov	r4, r1
  ep_addr = LOBYTE(req->wIndex);
 8005210:	888a      	ldrh	r2, [r1, #4]
 8005212:	7823      	ldrb	r3, [r4, #0]
 8005214:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005218:	2b20      	cmp	r3, #32
{
 800521a:	b083      	sub	sp, #12
 800521c:	4605      	mov	r5, r0
  ep_addr = LOBYTE(req->wIndex);
 800521e:	b2d1      	uxtb	r1, r2
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005220:	d01e      	beq.n	8005260 <USBD_StdEPReq+0x54>
 8005222:	2b40      	cmp	r3, #64	; 0x40
 8005224:	d01c      	beq.n	8005260 <USBD_StdEPReq+0x54>
 8005226:	b36b      	cbz	r3, 8005284 <USBD_StdEPReq+0x78>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005228:	2180      	movs	r1, #128	; 0x80
 800522a:	4628      	mov	r0, r5
 800522c:	f000 fbcc 	bl	80059c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005230:	2100      	movs	r1, #0
 8005232:	4628      	mov	r0, r5
 8005234:	f000 fbc8 	bl	80059c8 <USBD_LL_StallEP>
}
 8005238:	2000      	movs	r0, #0
 800523a:	b003      	add	sp, #12
 800523c:	bd30      	pop	{r4, r5, pc}
          switch (pdev->dev_state)
 800523e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005242:	2b02      	cmp	r3, #2
 8005244:	b2da      	uxtb	r2, r3
 8005246:	d05d      	beq.n	8005304 <USBD_StdEPReq+0xf8>
 8005248:	2a03      	cmp	r2, #3
 800524a:	d1ed      	bne.n	8005228 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800524c:	8863      	ldrh	r3, [r4, #2]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1f2      	bne.n	8005238 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8005252:	064b      	lsls	r3, r1, #25
 8005254:	d17a      	bne.n	800534c <USBD_StdEPReq+0x140>
                (void)USBD_CtlSendStatus(pdev);
 8005256:	4628      	mov	r0, r5
 8005258:	9101      	str	r1, [sp, #4]
 800525a:	f000 f8f1 	bl	8005440 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800525e:	9901      	ldr	r1, [sp, #4]
 8005260:	4628      	mov	r0, r5
 8005262:	f7ff fdad 	bl	8004dc0 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005266:	2800      	cmp	r0, #0
 8005268:	d1e6      	bne.n	8005238 <USBD_StdEPReq+0x2c>
                  if (pdev->pClass[idx]->Setup != NULL)
 800526a:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
                  pdev->classId = idx;
 800526e:	f8c5 02d4 	str.w	r0, [r5, #724]	; 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0df      	beq.n	8005238 <USBD_StdEPReq+0x2c>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005278:	4621      	mov	r1, r4
 800527a:	4628      	mov	r0, r5
}
 800527c:	b003      	add	sp, #12
 800527e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005282:	4718      	bx	r3
      switch (req->bRequest)
 8005284:	7863      	ldrb	r3, [r4, #1]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d0d9      	beq.n	800523e <USBD_StdEPReq+0x32>
 800528a:	2b03      	cmp	r3, #3
 800528c:	d029      	beq.n	80052e2 <USBD_StdEPReq+0xd6>
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1ca      	bne.n	8005228 <USBD_StdEPReq+0x1c>
          switch (pdev->dev_state)
 8005292:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005296:	2b02      	cmp	r3, #2
 8005298:	b2d8      	uxtb	r0, r3
 800529a:	d03c      	beq.n	8005316 <USBD_StdEPReq+0x10a>
 800529c:	2803      	cmp	r0, #3
 800529e:	d1c3      	bne.n	8005228 <USBD_StdEPReq+0x1c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80052a0:	f001 030f 	and.w	r3, r1, #15
 80052a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 80052a8:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80052aa:	eb05 0383 	add.w	r3, r5, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 80052ae:	d441      	bmi.n	8005334 <USBD_StdEPReq+0x128>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80052b0:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0b7      	beq.n	8005228 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80052b8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 80052bc:	2414      	movs	r4, #20
 80052be:	fb04 5403 	mla	r4, r4, r3, r5
 80052c2:	f504 74aa 	add.w	r4, r4, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80052c6:	b12b      	cbz	r3, 80052d4 <USBD_StdEPReq+0xc8>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80052c8:	4628      	mov	r0, r5
 80052ca:	f000 fb99 	bl	8005a00 <USBD_LL_IsStallEP>
 80052ce:	2800      	cmp	r0, #0
 80052d0:	d041      	beq.n	8005356 <USBD_StdEPReq+0x14a>
                pep->status = 0x0001U;
 80052d2:	2301      	movs	r3, #1
 80052d4:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80052d6:	2202      	movs	r2, #2
 80052d8:	4621      	mov	r1, r4
 80052da:	4628      	mov	r0, r5
 80052dc:	f000 f884 	bl	80053e8 <USBD_CtlSendData>
              break;
 80052e0:	e7aa      	b.n	8005238 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 80052e2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	d00b      	beq.n	8005304 <USBD_StdEPReq+0xf8>
 80052ec:	2a03      	cmp	r2, #3
 80052ee:	d19b      	bne.n	8005228 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80052f0:	8863      	ldrh	r3, [r4, #2]
 80052f2:	b91b      	cbnz	r3, 80052fc <USBD_StdEPReq+0xf0>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80052f4:	0648      	lsls	r0, r1, #25
 80052f6:	d001      	beq.n	80052fc <USBD_StdEPReq+0xf0>
 80052f8:	88e3      	ldrh	r3, [r4, #6]
 80052fa:	b373      	cbz	r3, 800535a <USBD_StdEPReq+0x14e>
              (void)USBD_CtlSendStatus(pdev);
 80052fc:	4628      	mov	r0, r5
 80052fe:	f000 f89f 	bl	8005440 <USBD_CtlSendStatus>
              break;
 8005302:	e799      	b.n	8005238 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005304:	064a      	lsls	r2, r1, #25
 8005306:	d08f      	beq.n	8005228 <USBD_StdEPReq+0x1c>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005308:	f000 fb5e 	bl	80059c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800530c:	2180      	movs	r1, #128	; 0x80
 800530e:	4628      	mov	r0, r5
 8005310:	f000 fb5a 	bl	80059c8 <USBD_LL_StallEP>
 8005314:	e790      	b.n	8005238 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005316:	0648      	lsls	r0, r1, #25
 8005318:	d186      	bne.n	8005228 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800531a:	0611      	lsls	r1, r2, #24
 800531c:	bf4c      	ite	mi
 800531e:	f105 0114 	addmi.w	r1, r5, #20
 8005322:	f505 71aa 	addpl.w	r1, r5, #340	; 0x154
              pep->status = 0x0000U;
 8005326:	2300      	movs	r3, #0
 8005328:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800532a:	2202      	movs	r2, #2
 800532c:	4628      	mov	r0, r5
 800532e:	f000 f85b 	bl	80053e8 <USBD_CtlSendData>
              break;
 8005332:	e781      	b.n	8005238 <USBD_StdEPReq+0x2c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005334:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005336:	2b00      	cmp	r3, #0
 8005338:	f43f af76 	beq.w	8005228 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800533c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8005340:	1c5c      	adds	r4, r3, #1
 8005342:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8005346:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800534a:	e7bc      	b.n	80052c6 <USBD_StdEPReq+0xba>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800534c:	9101      	str	r1, [sp, #4]
 800534e:	f000 fb49 	bl	80059e4 <USBD_LL_ClearStallEP>
 8005352:	9901      	ldr	r1, [sp, #4]
 8005354:	e77f      	b.n	8005256 <USBD_StdEPReq+0x4a>
                pep->status = 0x0000U;
 8005356:	6020      	str	r0, [r4, #0]
 8005358:	e7bd      	b.n	80052d6 <USBD_StdEPReq+0xca>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800535a:	4628      	mov	r0, r5
 800535c:	f000 fb34 	bl	80059c8 <USBD_LL_StallEP>
 8005360:	e7cc      	b.n	80052fc <USBD_StdEPReq+0xf0>
 8005362:	bf00      	nop

08005364 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8005364:	780b      	ldrb	r3, [r1, #0]
 8005366:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8005368:	784b      	ldrb	r3, [r1, #1]
 800536a:	7043      	strb	r3, [r0, #1]
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800536c:	884b      	ldrh	r3, [r1, #2]
  req->wValue = SWAPBYTE(pbuff);
 800536e:	8043      	strh	r3, [r0, #2]
 8005370:	888b      	ldrh	r3, [r1, #4]
  req->wIndex = SWAPBYTE(pbuff);
 8005372:	8083      	strh	r3, [r0, #4]
 8005374:	88cb      	ldrh	r3, [r1, #6]
  req->wLength = SWAPBYTE(pbuff);
 8005376:	80c3      	strh	r3, [r0, #6]
}
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop

0800537c <USBD_CtlError>:
{
 800537c:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800537e:	2180      	movs	r1, #128	; 0x80
{
 8005380:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005382:	f000 fb21 	bl	80059c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005386:	4620      	mov	r0, r4
 8005388:	2100      	movs	r1, #0
}
 800538a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800538e:	f000 bb1b 	b.w	80059c8 <USBD_LL_StallEP>
 8005392:	bf00      	nop

08005394 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8005394:	b318      	cbz	r0, 80053de <USBD_GetString+0x4a>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8005396:	7803      	ldrb	r3, [r0, #0]
{
 8005398:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 800539a:	b30b      	cbz	r3, 80053e0 <USBD_GetString+0x4c>
 800539c:	4604      	mov	r4, r0
 800539e:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 80053a2:	eb04 030c 	add.w	r3, r4, ip
  while (*pbuff != (uint8_t)'\0')
 80053a6:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2d00      	cmp	r5, #0
 80053ae:	d1f8      	bne.n	80053a2 <USBD_GetString+0xe>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80053b0:	3301      	adds	r3, #1
 80053b2:	005b      	lsls	r3, r3, #1
 80053b4:	b2dc      	uxtb	r4, r3
 80053b6:	8013      	strh	r3, [r2, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80053b8:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 80053ba:	700c      	strb	r4, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80053bc:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 80053be:	7804      	ldrb	r4, [r0, #0]
 80053c0:	b15c      	cbz	r4, 80053da <USBD_GetString+0x46>
  idx++;
 80053c2:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 80053c4:	2500      	movs	r5, #0
    idx++;
 80053c6:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 80053c8:	b2d2      	uxtb	r2, r2
    unicode[idx] = *pdesc;
 80053ca:	54cc      	strb	r4, [r1, r3]
    unicode[idx] = 0U;
 80053cc:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 80053ce:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    idx++;
 80053d2:	3302      	adds	r3, #2
 80053d4:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 80053d6:	2c00      	cmp	r4, #0
 80053d8:	d1f5      	bne.n	80053c6 <USBD_GetString+0x32>
}
 80053da:	bc30      	pop	{r4, r5}
 80053dc:	4770      	bx	lr
 80053de:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 80053e0:	2402      	movs	r4, #2
 80053e2:	4623      	mov	r3, r4
 80053e4:	e7e7      	b.n	80053b6 <USBD_GetString+0x22>
 80053e6:	bf00      	nop

080053e8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80053e8:	b508      	push	{r3, lr}
 80053ea:	4613      	mov	r3, r2
 80053ec:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80053ee:	2102      	movs	r1, #2
  pdev->ep_in[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80053f0:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80053f4:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80053f8:	2100      	movs	r1, #0
 80053fa:	f000 fb23 	bl	8005a44 <USBD_LL_Transmit>

  return USBD_OK;
}
 80053fe:	2000      	movs	r0, #0
 8005400:	bd08      	pop	{r3, pc}
 8005402:	bf00      	nop

08005404 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005404:	b508      	push	{r3, lr}
 8005406:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005408:	460a      	mov	r2, r1
 800540a:	2100      	movs	r1, #0
 800540c:	f000 fb1a 	bl	8005a44 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005410:	2000      	movs	r0, #0
 8005412:	bd08      	pop	{r3, pc}

08005414 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005414:	b508      	push	{r3, lr}
 8005416:	4613      	mov	r3, r2
 8005418:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800541a:	2103      	movs	r1, #3
  pdev->ep_out[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800541c:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005420:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005424:	2100      	movs	r1, #0
 8005426:	f000 fb1b 	bl	8005a60 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800542a:	2000      	movs	r0, #0
 800542c:	bd08      	pop	{r3, pc}
 800542e:	bf00      	nop

08005430 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005430:	b508      	push	{r3, lr}
 8005432:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005434:	460a      	mov	r2, r1
 8005436:	2100      	movs	r1, #0
 8005438:	f000 fb12 	bl	8005a60 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800543c:	2000      	movs	r0, #0
 800543e:	bd08      	pop	{r3, pc}

08005440 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005440:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005442:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005444:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005446:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800544a:	461a      	mov	r2, r3
 800544c:	4619      	mov	r1, r3
 800544e:	f000 faf9 	bl	8005a44 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005452:	2000      	movs	r0, #0
 8005454:	bd08      	pop	{r3, pc}
 8005456:	bf00      	nop

08005458 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005458:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800545a:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800545c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800545e:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005462:	461a      	mov	r2, r3
 8005464:	4619      	mov	r1, r3
 8005466:	f000 fafb 	bl	8005a60 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800546a:	2000      	movs	r0, #0
 800546c:	bd08      	pop	{r3, pc}
 800546e:	bf00      	nop

08005470 <arm_biquad_cascade_df1_init_f32>:
void arm_biquad_cascade_df1_init_f32(
        arm_biquad_casd_df1_inst_f32 * S,
        uint8_t numStages,
  const float32_t * pCoeffs,
        float32_t * pState)
{
 8005470:	b510      	push	{r4, lr}
  /* Assign filter stages */
  S->numStages = numStages;
 8005472:	6001      	str	r1, [r0, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 8005474:	6082      	str	r2, [r0, #8]
{
 8005476:	4604      	mov	r4, r0

  /* Clear state buffer and size is always 4 * numStages */
  memset(pState, 0, (4U * (uint32_t) numStages) * sizeof(float32_t));
 8005478:	010a      	lsls	r2, r1, #4
 800547a:	4618      	mov	r0, r3
 800547c:	2100      	movs	r1, #0
 800547e:	f000 fb81 	bl	8005b84 <memset>

  /* Assign state pointer */
  S->pState = pState;
 8005482:	6060      	str	r0, [r4, #4]
}
 8005484:	bd10      	pop	{r4, pc}
 8005486:	bf00      	nop

08005488 <arm_fir_init_f32>:
        arm_fir_instance_f32 * S,
        uint16_t numTaps,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
 8005488:	b510      	push	{r4, lr}
 800548a:	4604      	mov	r4, r0

  /* Clear state buffer. The size is always (blockSize + numTaps - 1) */
#if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  memset(pState, 0, (numTaps + (blockSize - 1U) + blockSize) * sizeof(float32_t));
#else
  memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 800548c:	9802      	ldr	r0, [sp, #8]
  S->numTaps = numTaps;
 800548e:	8021      	strh	r1, [r4, #0]
  memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 8005490:	f100 3cff 	add.w	ip, r0, #4294967295
 8005494:	448c      	add	ip, r1
  S->pCoeffs = pCoeffs;
 8005496:	60a2      	str	r2, [r4, #8]
  memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 8005498:	2100      	movs	r1, #0
 800549a:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 fb70 	bl	8005b84 <memset>
#endif
  /* Assign state pointer */
  S->pState = pState;
 80054a4:	6060      	str	r0, [r4, #4]
}
 80054a6:	bd10      	pop	{r4, pc}

080054a8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80054a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80054aa:	4918      	ldr	r1, [pc, #96]	; (800550c <MX_USB_Device_Init+0x64>)
 80054ac:	4818      	ldr	r0, [pc, #96]	; (8005510 <MX_USB_Device_Init+0x68>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	f7ff fb20 	bl	8004af4 <USBD_Init>
 80054b4:	b970      	cbnz	r0, 80054d4 <MX_USB_Device_Init+0x2c>
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80054b6:	4917      	ldr	r1, [pc, #92]	; (8005514 <MX_USB_Device_Init+0x6c>)
 80054b8:	4815      	ldr	r0, [pc, #84]	; (8005510 <MX_USB_Device_Init+0x68>)
 80054ba:	f7ff fb2f 	bl	8004b1c <USBD_RegisterClass>
 80054be:	b988      	cbnz	r0, 80054e4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80054c0:	4915      	ldr	r1, [pc, #84]	; (8005518 <MX_USB_Device_Init+0x70>)
 80054c2:	4813      	ldr	r0, [pc, #76]	; (8005510 <MX_USB_Device_Init+0x68>)
 80054c4:	f7ff fad4 	bl	8004a70 <USBD_CDC_RegisterInterface>
 80054c8:	b9a0      	cbnz	r0, 80054f4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80054ca:	4811      	ldr	r0, [pc, #68]	; (8005510 <MX_USB_Device_Init+0x68>)
 80054cc:	f7ff fb42 	bl	8004b54 <USBD_Start>
 80054d0:	b9b8      	cbnz	r0, 8005502 <MX_USB_Device_Init+0x5a>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80054d2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80054d4:	f7fb fe10 	bl	80010f8 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80054d8:	490e      	ldr	r1, [pc, #56]	; (8005514 <MX_USB_Device_Init+0x6c>)
 80054da:	480d      	ldr	r0, [pc, #52]	; (8005510 <MX_USB_Device_Init+0x68>)
 80054dc:	f7ff fb1e 	bl	8004b1c <USBD_RegisterClass>
 80054e0:	2800      	cmp	r0, #0
 80054e2:	d0ed      	beq.n	80054c0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80054e4:	f7fb fe08 	bl	80010f8 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80054e8:	490b      	ldr	r1, [pc, #44]	; (8005518 <MX_USB_Device_Init+0x70>)
 80054ea:	4809      	ldr	r0, [pc, #36]	; (8005510 <MX_USB_Device_Init+0x68>)
 80054ec:	f7ff fac0 	bl	8004a70 <USBD_CDC_RegisterInterface>
 80054f0:	2800      	cmp	r0, #0
 80054f2:	d0ea      	beq.n	80054ca <MX_USB_Device_Init+0x22>
    Error_Handler();
 80054f4:	f7fb fe00 	bl	80010f8 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80054f8:	4805      	ldr	r0, [pc, #20]	; (8005510 <MX_USB_Device_Init+0x68>)
 80054fa:	f7ff fb2b 	bl	8004b54 <USBD_Start>
 80054fe:	2800      	cmp	r0, #0
 8005500:	d0e7      	beq.n	80054d2 <MX_USB_Device_Init+0x2a>
}
 8005502:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8005506:	f7fb bdf7 	b.w	80010f8 <Error_Handler>
 800550a:	bf00      	nop
 800550c:	200000b4 	.word	0x200000b4
 8005510:	200006b0 	.word	0x200006b0
 8005514:	20000014 	.word	0x20000014
 8005518:	2000009c 	.word	0x2000009c

0800551c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800551c:	2000      	movs	r0, #0
 800551e:	4770      	bx	lr

08005520 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8005520:	2000      	movs	r0, #0
 8005522:	4770      	bx	lr

08005524 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8005524:	2000      	movs	r0, #0
 8005526:	4770      	bx	lr

08005528 <CDC_Receive_FS>:
{
 8005528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (byteInBuffer>2047)
 800552a:	4e12      	ldr	r6, [pc, #72]	; (8005574 <CDC_Receive_FS+0x4c>)
	bufferFlag = 0;
 800552c:	4f12      	ldr	r7, [pc, #72]	; (8005578 <CDC_Receive_FS+0x50>)
  if (byteInBuffer>2047)
 800552e:	6833      	ldr	r3, [r6, #0]
	bufferFlag = 0;
 8005530:	2500      	movs	r5, #0
  if (byteInBuffer>2047)
 8005532:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
	bufferFlag = 0;
 8005536:	703d      	strb	r5, [r7, #0]
{
 8005538:	4602      	mov	r2, r0
 800553a:	460c      	mov	r4, r1
  if (byteInBuffer>2047)
 800553c:	d215      	bcs.n	800556a <CDC_Receive_FS+0x42>
  memcpy(&UserTxBufferFS[byteInBuffer],&Buf[0], *Len);
 800553e:	480f      	ldr	r0, [pc, #60]	; (800557c <CDC_Receive_FS+0x54>)
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[byteInBuffer]);
 8005540:	18d5      	adds	r5, r2, r3
  memcpy(&UserTxBufferFS[byteInBuffer],&Buf[0], *Len);
 8005542:	4418      	add	r0, r3
 8005544:	4611      	mov	r1, r2
 8005546:	6822      	ldr	r2, [r4, #0]
 8005548:	f000 faf4 	bl	8005b34 <memcpy>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[byteInBuffer]);
 800554c:	4629      	mov	r1, r5
 800554e:	480c      	ldr	r0, [pc, #48]	; (8005580 <CDC_Receive_FS+0x58>)
 8005550:	f7ff faa8 	bl	8004aa4 <USBD_CDC_SetRxBuffer>
  byteInBuffer += *Len;
 8005554:	6823      	ldr	r3, [r4, #0]
 8005556:	6832      	ldr	r2, [r6, #0]
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005558:	4809      	ldr	r0, [pc, #36]	; (8005580 <CDC_Receive_FS+0x58>)
  byteInBuffer += *Len;
 800555a:	4413      	add	r3, r2
 800555c:	6033      	str	r3, [r6, #0]
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800555e:	f7ff faad 	bl	8004abc <USBD_CDC_ReceivePacket>
	bufferFlag = 1;
 8005562:	2301      	movs	r3, #1
 8005564:	703b      	strb	r3, [r7, #0]
}
 8005566:	2000      	movs	r0, #0
 8005568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  byteInBuffer = 0;
 800556a:	6035      	str	r5, [r6, #0]
 800556c:	4605      	mov	r5, r0
 800556e:	4803      	ldr	r0, [pc, #12]	; (800557c <CDC_Receive_FS+0x54>)
 8005570:	e7e8      	b.n	8005544 <CDC_Receive_FS+0x1c>
 8005572:	bf00      	nop
 8005574:	2000198c 	.word	0x2000198c
 8005578:	200000b0 	.word	0x200000b0
 800557c:	2000118c 	.word	0x2000118c
 8005580:	200006b0 	.word	0x200006b0

08005584 <CDC_Init_FS>:
{
 8005584:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005586:	4c06      	ldr	r4, [pc, #24]	; (80055a0 <CDC_Init_FS+0x1c>)
 8005588:	4906      	ldr	r1, [pc, #24]	; (80055a4 <CDC_Init_FS+0x20>)
 800558a:	2200      	movs	r2, #0
 800558c:	4620      	mov	r0, r4
 800558e:	f7ff fa7b 	bl	8004a88 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005592:	4905      	ldr	r1, [pc, #20]	; (80055a8 <CDC_Init_FS+0x24>)
 8005594:	4620      	mov	r0, r4
 8005596:	f7ff fa85 	bl	8004aa4 <USBD_CDC_SetRxBuffer>
}
 800559a:	2000      	movs	r0, #0
 800559c:	bd10      	pop	{r4, pc}
 800559e:	bf00      	nop
 80055a0:	200006b0 	.word	0x200006b0
 80055a4:	2000118c 	.word	0x2000118c
 80055a8:	2000098c 	.word	0x2000098c

080055ac <USBD_CDC_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80055ac:	2312      	movs	r3, #18
  return USBD_CDC_DeviceDesc;
}
 80055ae:	4801      	ldr	r0, [pc, #4]	; (80055b4 <USBD_CDC_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_CDC_DeviceDesc);
 80055b0:	800b      	strh	r3, [r1, #0]
}
 80055b2:	4770      	bx	lr
 80055b4:	200000d4 	.word	0x200000d4

080055b8 <USBD_CDC_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80055b8:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80055ba:	4801      	ldr	r0, [pc, #4]	; (80055c0 <USBD_CDC_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80055bc:	800b      	strh	r3, [r1, #0]
}
 80055be:	4770      	bx	lr
 80055c0:	200000e8 	.word	0x200000e8

080055c4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80055c4:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80055c6:	4c04      	ldr	r4, [pc, #16]	; (80055d8 <USBD_CDC_ManufacturerStrDescriptor+0x14>)
 80055c8:	4804      	ldr	r0, [pc, #16]	; (80055dc <USBD_CDC_ManufacturerStrDescriptor+0x18>)
{
 80055ca:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80055cc:	4621      	mov	r1, r4
 80055ce:	f7ff fee1 	bl	8005394 <USBD_GetString>
  return USBD_StrDesc;
}
 80055d2:	4620      	mov	r0, r4
 80055d4:	bd10      	pop	{r4, pc}
 80055d6:	bf00      	nop
 80055d8:	20001990 	.word	0x20001990
 80055dc:	0800a50c 	.word	0x0800a50c

080055e0 <USBD_CDC_ProductStrDescriptor>:
{
 80055e0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80055e2:	4c04      	ldr	r4, [pc, #16]	; (80055f4 <USBD_CDC_ProductStrDescriptor+0x14>)
 80055e4:	4804      	ldr	r0, [pc, #16]	; (80055f8 <USBD_CDC_ProductStrDescriptor+0x18>)
{
 80055e6:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80055e8:	4621      	mov	r1, r4
 80055ea:	f7ff fed3 	bl	8005394 <USBD_GetString>
}
 80055ee:	4620      	mov	r0, r4
 80055f0:	bd10      	pop	{r4, pc}
 80055f2:	bf00      	nop
 80055f4:	20001990 	.word	0x20001990
 80055f8:	0800a520 	.word	0x0800a520

080055fc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80055fc:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80055fe:	4c04      	ldr	r4, [pc, #16]	; (8005610 <USBD_CDC_ConfigStrDescriptor+0x14>)
 8005600:	4804      	ldr	r0, [pc, #16]	; (8005614 <USBD_CDC_ConfigStrDescriptor+0x18>)
{
 8005602:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8005604:	4621      	mov	r1, r4
 8005606:	f7ff fec5 	bl	8005394 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800560a:	4620      	mov	r0, r4
 800560c:	bd10      	pop	{r4, pc}
 800560e:	bf00      	nop
 8005610:	20001990 	.word	0x20001990
 8005614:	0800a538 	.word	0x0800a538

08005618 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005618:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800561a:	4c04      	ldr	r4, [pc, #16]	; (800562c <USBD_CDC_InterfaceStrDescriptor+0x14>)
 800561c:	4804      	ldr	r0, [pc, #16]	; (8005630 <USBD_CDC_InterfaceStrDescriptor+0x18>)
{
 800561e:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8005620:	4621      	mov	r1, r4
 8005622:	f7ff feb7 	bl	8005394 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8005626:	4620      	mov	r0, r4
 8005628:	bd10      	pop	{r4, pc}
 800562a:	bf00      	nop
 800562c:	20001990 	.word	0x20001990
 8005630:	0800a544 	.word	0x0800a544

08005634 <USBD_CDC_SerialStrDescriptor>:
{
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005634:	4a45      	ldr	r2, [pc, #276]	; (800574c <USBD_CDC_SerialStrDescriptor+0x118>)
 8005636:	f8d2 0590 	ldr.w	r0, [r2, #1424]	; 0x590
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 800563a:	f8d2 3598 	ldr.w	r3, [r2, #1432]	; 0x598
  *length = USB_SIZ_STRING_SERIAL;
 800563e:	f04f 0c1a 	mov.w	ip, #26

  if (deviceserial0 != 0)
 8005642:	18c3      	adds	r3, r0, r3
  *length = USB_SIZ_STRING_SERIAL;
 8005644:	f8a1 c000 	strh.w	ip, [r1]
  if (deviceserial0 != 0)
 8005648:	d101      	bne.n	800564e <USBD_CDC_SerialStrDescriptor+0x1a>
}
 800564a:	4841      	ldr	r0, [pc, #260]	; (8005750 <USBD_CDC_SerialStrDescriptor+0x11c>)
 800564c:	4770      	bx	lr
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800564e:	f8d2 1594 	ldr.w	r1, [r2, #1428]	; 0x594

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005652:	4a3f      	ldr	r2, [pc, #252]	; (8005750 <USBD_CDC_SerialStrDescriptor+0x11c>)
    if (((value >> 28)) < 0xA)
 8005654:	0f18      	lsrs	r0, r3, #28
 8005656:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800565a:	bf2c      	ite	cs
 800565c:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800565e:	3030      	addcc	r0, #48	; 0x30
 8005660:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 8005662:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8005666:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005668:	bf8c      	ite	hi
 800566a:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800566c:	3030      	addls	r0, #48	; 0x30
 800566e:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 8005670:	f3c3 5003 	ubfx	r0, r3, #20, #4
 8005674:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005676:	bf8c      	ite	hi
 8005678:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800567a:	3030      	addls	r0, #48	; 0x30
 800567c:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 800567e:	f3c3 4003 	ubfx	r0, r3, #16, #4
 8005682:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005684:	bf8c      	ite	hi
 8005686:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8005688:	3030      	addls	r0, #48	; 0x30
 800568a:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 800568c:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8005690:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005692:	bf8c      	ite	hi
 8005694:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8005696:	3030      	addls	r0, #48	; 0x30
 8005698:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 800569a:	f3c3 2003 	ubfx	r0, r3, #8, #4
 800569e:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80056a0:	bf8c      	ite	hi
 80056a2:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80056a4:	3030      	addls	r0, #48	; 0x30
 80056a6:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 80056a8:	f3c3 1003 	ubfx	r0, r3, #4, #4
 80056ac:	2809      	cmp	r0, #9
 80056ae:	f003 030f 	and.w	r3, r3, #15
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80056b2:	bf8c      	ite	hi
 80056b4:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80056b6:	3030      	addls	r0, #48	; 0x30
    if (((value >> 28)) < 0xA)
 80056b8:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 80056ba:	bf94      	ite	ls
 80056bc:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80056be:	3337      	addhi	r3, #55	; 0x37
 80056c0:	7413      	strb	r3, [r2, #16]
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80056c2:	2300      	movs	r3, #0
    if (((value >> 28)) < 0xA)
 80056c4:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
    pbuf[2 * idx + 1] = 0;
 80056c8:	7453      	strb	r3, [r2, #17]
    if (((value >> 28)) < 0xA)
 80056ca:	ea4f 7311 	mov.w	r3, r1, lsr #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80056ce:	bf2c      	ite	cs
 80056d0:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80056d2:	3330      	addcc	r3, #48	; 0x30
 80056d4:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 80056d6:	f3c1 6303 	ubfx	r3, r1, #24, #4
 80056da:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80056dc:	bf8c      	ite	hi
 80056de:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80056e0:	3330      	addls	r3, #48	; 0x30
 80056e2:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 80056e4:	f3c1 5303 	ubfx	r3, r1, #20, #4
 80056e8:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 80056ea:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80056ee:	bf8c      	ite	hi
 80056f0:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80056f2:	3330      	addls	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 80056f4:	f882 c003 	strb.w	ip, [r2, #3]
 80056f8:	f04f 0c00 	mov.w	ip, #0
 80056fc:	f882 c005 	strb.w	ip, [r2, #5]
      pbuf[2 * idx] = (value >> 28) + '0';
 8005700:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 8005702:	f04f 0c00 	mov.w	ip, #0
 8005706:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8005708:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 800570a:	f3c1 4303 	ubfx	r3, r1, #16, #4
 800570e:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 8005710:	f882 c007 	strb.w	ip, [r2, #7]
 8005714:	73d0      	strb	r0, [r2, #15]
 8005716:	f04f 0c00 	mov.w	ip, #0
 800571a:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800571e:	bf94      	ite	ls
 8005720:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005722:	3337      	addhi	r3, #55	; 0x37
    pbuf[2 * idx + 1] = 0;
 8005724:	f882 c009 	strb.w	ip, [r2, #9]
 8005728:	74d0      	strb	r0, [r2, #19]
 800572a:	f04f 0c00 	mov.w	ip, #0
 800572e:	2000      	movs	r0, #0
 8005730:	f882 c00b 	strb.w	ip, [r2, #11]
 8005734:	7550      	strb	r0, [r2, #21]
 8005736:	f04f 0c00 	mov.w	ip, #0
 800573a:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800573c:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 800573e:	2300      	movs	r3, #0
 8005740:	75d0      	strb	r0, [r2, #23]
 8005742:	f882 c00d 	strb.w	ip, [r2, #13]
}
 8005746:	4802      	ldr	r0, [pc, #8]	; (8005750 <USBD_CDC_SerialStrDescriptor+0x11c>)
    pbuf[2 * idx + 1] = 0;
 8005748:	7653      	strb	r3, [r2, #25]
}
 800574a:	4770      	bx	lr
 800574c:	1fff7000 	.word	0x1fff7000
 8005750:	200000ec 	.word	0x200000ec
 8005754:	00000000 	.word	0x00000000

08005758 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005758:	b510      	push	{r4, lr}
 800575a:	4604      	mov	r4, r0
 800575c:	b09c      	sub	sp, #112	; 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800575e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005760:	2250      	movs	r2, #80	; 0x50
 8005762:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005764:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8005768:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800576c:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800576e:	f000 fa09 	bl	8005b84 <memset>
  if(pcdHandle->Instance==USB)
 8005772:	4b2b      	ldr	r3, [pc, #172]	; (8005820 <HAL_PCD_MspInit+0xc8>)
 8005774:	6822      	ldr	r2, [r4, #0]
 8005776:	429a      	cmp	r2, r3
 8005778:	d001      	beq.n	800577e <HAL_PCD_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800577a:	b01c      	add	sp, #112	; 0x70
 800577c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800577e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8005808 <HAL_PCD_MspInit+0xb0>
 8005782:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005786:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8005810 <HAL_PCD_MspInit+0xb8>
 800578a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800578e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8005818 <HAL_PCD_MspInit+0xc0>
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8005792:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005796:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8005798:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800579c:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800579e:	f7fd fd79 	bl	8003294 <HAL_RCCEx_PeriphCLKConfig>
 80057a2:	bb68      	cbnz	r0, 8005800 <HAL_PCD_MspInit+0xa8>
  SET_BIT(RCC->AHB2ENR, Periphs);
 80057a4:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80057a8:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80057ac:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80057ae:	f043 0301 	orr.w	r3, r3, #1
 80057b2:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80057b4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	9301      	str	r3, [sp, #4]
 80057bc:	2302      	movs	r3, #2
 80057be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80057c2:	2200      	movs	r2, #0
 80057c4:	2300      	movs	r3, #0
 80057c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057ca:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80057cc:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  (void)tmpreg;
 80057d2:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80057d4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057d6:	f7fb feab 	bl	8001530 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80057da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80057dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057e0:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80057e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80057e4:	2200      	movs	r2, #0
 80057e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	4611      	mov	r1, r2
 80057ee:	2014      	movs	r0, #20
  (void)tmpreg;
 80057f0:	9b00      	ldr	r3, [sp, #0]
 80057f2:	f7fb fe37 	bl	8001464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80057f6:	2014      	movs	r0, #20
 80057f8:	f7fb fe72 	bl	80014e0 <HAL_NVIC_EnableIRQ>
}
 80057fc:	b01c      	add	sp, #112	; 0x70
 80057fe:	bd10      	pop	{r4, pc}
      Error_Handler();
 8005800:	f7fb fc7a 	bl	80010f8 <Error_Handler>
 8005804:	e7ce      	b.n	80057a4 <HAL_PCD_MspInit+0x4c>
 8005806:	bf00      	nop
 8005808:	00000100 	.word	0x00000100
 800580c:	00000018 	.word	0x00000018
 8005810:	00020000 	.word	0x00020000
 8005814:	02000000 	.word	0x02000000
 8005818:	20000000 	.word	0x20000000
 800581c:	01000000 	.word	0x01000000
 8005820:	40006800 	.word	0x40006800

08005824 <HAL_PCD_SetupStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005824:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8005828:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800582c:	f7ff b9a6 	b.w	8004b7c <USBD_LL_SetupStage>

08005830 <HAL_PCD_DataOutStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005830:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8005834:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8005838:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800583c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8005840:	f7ff b9cc 	b.w	8004bdc <USBD_LL_DataOutStage>

08005844 <HAL_PCD_DataInStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005844:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8005848:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800584c:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8005850:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005852:	f7ff b9fd 	b.w	8004c50 <USBD_LL_DataInStage>
 8005856:	bf00      	nop

08005858 <HAL_PCD_SOFCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005858:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800585c:	f7ff ba9e 	b.w	8004d9c <USBD_LL_SOF>

08005860 <HAL_PCD_ResetCallback>:
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005860:	6883      	ldr	r3, [r0, #8]
 8005862:	2b02      	cmp	r3, #2
{
 8005864:	b510      	push	{r4, lr}
 8005866:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005868:	d001      	beq.n	800586e <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 800586a:	f7fb fc45 	bl	80010f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800586e:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 8005872:	2101      	movs	r1, #1
 8005874:	f7ff fa74 	bl	8004d60 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005878:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800587c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005880:	f7ff ba40 	b.w	8004d04 <USBD_LL_Reset>

08005884 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005884:	b510      	push	{r4, lr}
 8005886:	4604      	mov	r4, r0
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005888:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800588c:	f7ff fa6c 	bl	8004d68 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005890:	69a3      	ldr	r3, [r4, #24]
 8005892:	b123      	cbz	r3, 800589e <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005894:	4a02      	ldr	r2, [pc, #8]	; (80058a0 <HAL_PCD_SuspendCallback+0x1c>)
 8005896:	6913      	ldr	r3, [r2, #16]
 8005898:	f043 0306 	orr.w	r3, r3, #6
 800589c:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800589e:	bd10      	pop	{r4, pc}
 80058a0:	e000ed00 	.word	0xe000ed00

080058a4 <HAL_PCD_ResumeCallback>:
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80058a4:	6983      	ldr	r3, [r0, #24]
{
 80058a6:	b510      	push	{r4, lr}
 80058a8:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 80058aa:	b92b      	cbnz	r3, 80058b8 <HAL_PCD_ResumeCallback+0x14>
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    SystemClockConfig_Resume();
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80058ac:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80058b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80058b4:	f7ff ba66 	b.w	8004d84 <USBD_LL_Resume>
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80058b8:	4a06      	ldr	r2, [pc, #24]	; (80058d4 <HAL_PCD_ResumeCallback+0x30>)
 80058ba:	6913      	ldr	r3, [r2, #16]
 80058bc:	f023 0306 	bic.w	r3, r3, #6
 80058c0:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 80058c2:	f7fb fb35 	bl	8000f30 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80058c6:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
}
 80058ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80058ce:	f7ff ba59 	b.w	8004d84 <USBD_LL_Resume>
 80058d2:	bf00      	nop
 80058d4:	e000ed00 	.word	0xe000ed00

080058d8 <USBD_LL_Init>:
{
 80058d8:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_FS.pData = pdev;
 80058da:	4d23      	ldr	r5, [pc, #140]	; (8005968 <USBD_LL_Init+0x90>)
 80058dc:	f8c5 02f0 	str.w	r0, [r5, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 80058e0:	f8c0 52c8 	str.w	r5, [r0, #712]	; 0x2c8
{
 80058e4:	4604      	mov	r4, r0
  HAL_PWREx_EnableVddUSB();
 80058e6:	f7fc ff3b 	bl	8002760 <HAL_PWREx_EnableVddUSB>
  hpcd_USB_FS.Instance = USB;
 80058ea:	4920      	ldr	r1, [pc, #128]	; (800596c <USBD_LL_Init+0x94>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80058ec:	2308      	movs	r3, #8
 80058ee:	e9c5 1300 	strd	r1, r3, [r5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80058f2:	2002      	movs	r0, #2
 80058f4:	2100      	movs	r1, #0
 80058f6:	e9c5 0104 	strd	r0, r1, [r5, #16]
 80058fa:	2000      	movs	r0, #0
 80058fc:	2100      	movs	r1, #0
 80058fe:	e9c5 0106 	strd	r0, r1, [r5, #24]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005902:	2202      	movs	r2, #2
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005904:	2300      	movs	r3, #0
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005906:	4628      	mov	r0, r5
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005908:	60aa      	str	r2, [r5, #8]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800590a:	622b      	str	r3, [r5, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800590c:	f7fb ff98 	bl	8001840 <HAL_PCD_Init>
 8005910:	bb30      	cbnz	r0, 8005960 <USBD_LL_Init+0x88>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005912:	2200      	movs	r2, #0
 8005914:	4611      	mov	r1, r2
 8005916:	f8d4 02c8 	ldr.w	r0, [r4, #712]	; 0x2c8
 800591a:	2318      	movs	r3, #24
 800591c:	f7fc feda 	bl	80026d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005920:	f8d4 02c8 	ldr.w	r0, [r4, #712]	; 0x2c8
 8005924:	2358      	movs	r3, #88	; 0x58
 8005926:	2200      	movs	r2, #0
 8005928:	2180      	movs	r1, #128	; 0x80
 800592a:	f7fc fed3 	bl	80026d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800592e:	f8d4 02c8 	ldr.w	r0, [r4, #712]	; 0x2c8
 8005932:	23c0      	movs	r3, #192	; 0xc0
 8005934:	2200      	movs	r2, #0
 8005936:	2181      	movs	r1, #129	; 0x81
 8005938:	f7fc fecc 	bl	80026d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800593c:	f8d4 02c8 	ldr.w	r0, [r4, #712]	; 0x2c8
 8005940:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005944:	2200      	movs	r2, #0
 8005946:	2101      	movs	r1, #1
 8005948:	f7fc fec4 	bl	80026d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800594c:	f8d4 02c8 	ldr.w	r0, [r4, #712]	; 0x2c8
 8005950:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005954:	2200      	movs	r2, #0
 8005956:	2182      	movs	r1, #130	; 0x82
 8005958:	f7fc febc 	bl	80026d4 <HAL_PCDEx_PMAConfig>
}
 800595c:	2000      	movs	r0, #0
 800595e:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 8005960:	f7fb fbca 	bl	80010f8 <Error_Handler>
 8005964:	e7d5      	b.n	8005912 <USBD_LL_Init+0x3a>
 8005966:	bf00      	nop
 8005968:	20001b90 	.word	0x20001b90
 800596c:	40006800 	.word	0x40006800

08005970 <USBD_LL_Start>:
{
 8005970:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8005972:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8005976:	f7fb ffcb 	bl	8001910 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800597a:	2803      	cmp	r0, #3
 800597c:	bf96      	itet	ls
 800597e:	4b02      	ldrls	r3, [pc, #8]	; (8005988 <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 8005980:	2003      	movhi	r0, #3
 8005982:	5c18      	ldrbls	r0, [r3, r0]
}
 8005984:	bd08      	pop	{r3, pc}
 8005986:	bf00      	nop
 8005988:	0800a554 	.word	0x0800a554

0800598c <USBD_LL_OpenEP>:
{
 800598c:	4694      	mov	ip, r2
 800598e:	b508      	push	{r3, lr}
 8005990:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005992:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8005996:	4663      	mov	r3, ip
 8005998:	f7fc fd78 	bl	800248c <HAL_PCD_EP_Open>
  switch (hal_status)
 800599c:	2803      	cmp	r0, #3
 800599e:	bf96      	itet	ls
 80059a0:	4b01      	ldrls	r3, [pc, #4]	; (80059a8 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80059a2:	2003      	movhi	r0, #3
 80059a4:	5c18      	ldrbls	r0, [r3, r0]
}
 80059a6:	bd08      	pop	{r3, pc}
 80059a8:	0800a554 	.word	0x0800a554

080059ac <USBD_LL_CloseEP>:
{
 80059ac:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80059ae:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 80059b2:	f7fc fda3 	bl	80024fc <HAL_PCD_EP_Close>
  switch (hal_status)
 80059b6:	2803      	cmp	r0, #3
 80059b8:	bf96      	itet	ls
 80059ba:	4b02      	ldrls	r3, [pc, #8]	; (80059c4 <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80059bc:	2003      	movhi	r0, #3
 80059be:	5c18      	ldrbls	r0, [r3, r0]
}
 80059c0:	bd08      	pop	{r3, pc}
 80059c2:	bf00      	nop
 80059c4:	0800a554 	.word	0x0800a554

080059c8 <USBD_LL_StallEP>:
{
 80059c8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80059ca:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 80059ce:	f7fc fe0d 	bl	80025ec <HAL_PCD_EP_SetStall>
  switch (hal_status)
 80059d2:	2803      	cmp	r0, #3
 80059d4:	bf96      	itet	ls
 80059d6:	4b02      	ldrls	r3, [pc, #8]	; (80059e0 <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80059d8:	2003      	movhi	r0, #3
 80059da:	5c18      	ldrbls	r0, [r3, r0]
}
 80059dc:	bd08      	pop	{r3, pc}
 80059de:	bf00      	nop
 80059e0:	0800a554 	.word	0x0800a554

080059e4 <USBD_LL_ClearStallEP>:
{
 80059e4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80059e6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 80059ea:	f7fc fe37 	bl	800265c <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 80059ee:	2803      	cmp	r0, #3
 80059f0:	bf96      	itet	ls
 80059f2:	4b02      	ldrls	r3, [pc, #8]	; (80059fc <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80059f4:	2003      	movhi	r0, #3
 80059f6:	5c18      	ldrbls	r0, [r3, r0]
}
 80059f8:	bd08      	pop	{r3, pc}
 80059fa:	bf00      	nop
 80059fc:	0800a554 	.word	0x0800a554

08005a00 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8005a00:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005a02:	f8d0 32c8 	ldr.w	r3, [r0, #712]	; 0x2c8
  if((ep_addr & 0x80) == 0x80)
 8005a06:	d406      	bmi.n	8005a16 <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005a08:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005a0c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8005a10:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 8005a14:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005a16:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8005a1a:	3101      	adds	r1, #1
 8005a1c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005a20:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8005a24:	7888      	ldrb	r0, [r1, #2]
 8005a26:	4770      	bx	lr

08005a28 <USBD_LL_SetUSBAddress>:
{
 8005a28:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005a2a:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8005a2e:	f7fc fd19 	bl	8002464 <HAL_PCD_SetAddress>
  switch (hal_status)
 8005a32:	2803      	cmp	r0, #3
 8005a34:	bf96      	itet	ls
 8005a36:	4b02      	ldrls	r3, [pc, #8]	; (8005a40 <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005a38:	2003      	movhi	r0, #3
 8005a3a:	5c18      	ldrbls	r0, [r3, r0]
}
 8005a3c:	bd08      	pop	{r3, pc}
 8005a3e:	bf00      	nop
 8005a40:	0800a554 	.word	0x0800a554

08005a44 <USBD_LL_Transmit>:
{
 8005a44:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005a46:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8005a4a:	f7fc fdab 	bl	80025a4 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8005a4e:	2803      	cmp	r0, #3
 8005a50:	bf96      	itet	ls
 8005a52:	4b02      	ldrls	r3, [pc, #8]	; (8005a5c <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005a54:	2003      	movhi	r0, #3
 8005a56:	5c18      	ldrbls	r0, [r3, r0]
}
 8005a58:	bd08      	pop	{r3, pc}
 8005a5a:	bf00      	nop
 8005a5c:	0800a554 	.word	0x0800a554

08005a60 <USBD_LL_PrepareReceive>:
{
 8005a60:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005a62:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8005a66:	f7fc fd79 	bl	800255c <HAL_PCD_EP_Receive>
  switch (hal_status)
 8005a6a:	2803      	cmp	r0, #3
 8005a6c:	bf96      	itet	ls
 8005a6e:	4b02      	ldrls	r3, [pc, #8]	; (8005a78 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005a70:	2003      	movhi	r0, #3
 8005a72:	5c18      	ldrbls	r0, [r3, r0]
}
 8005a74:	bd08      	pop	{r3, pc}
 8005a76:	bf00      	nop
 8005a78:	0800a554 	.word	0x0800a554

08005a7c <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005a7c:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8005a80:	f7fc bd86 	b.w	8002590 <HAL_PCD_EP_GetRxCount>

08005a84 <HAL_PCDEx_LPM_Callback>:
{
 8005a84:	b510      	push	{r4, lr}
 8005a86:	4604      	mov	r4, r0
  switch (msg)
 8005a88:	b169      	cbz	r1, 8005aa6 <HAL_PCDEx_LPM_Callback+0x22>
 8005a8a:	2901      	cmp	r1, #1
 8005a8c:	d10a      	bne.n	8005aa4 <HAL_PCDEx_LPM_Callback+0x20>
    USBD_LL_Suspend(hpcd->pData);
 8005a8e:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8005a92:	f7ff f969 	bl	8004d68 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8005a96:	69a3      	ldr	r3, [r4, #24]
 8005a98:	b123      	cbz	r3, 8005aa4 <HAL_PCDEx_LPM_Callback+0x20>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005a9a:	4a0d      	ldr	r2, [pc, #52]	; (8005ad0 <HAL_PCDEx_LPM_Callback+0x4c>)
 8005a9c:	6913      	ldr	r3, [r2, #16]
 8005a9e:	f043 0306 	orr.w	r3, r3, #6
 8005aa2:	6113      	str	r3, [r2, #16]
}
 8005aa4:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8005aa6:	6983      	ldr	r3, [r0, #24]
 8005aa8:	b92b      	cbnz	r3, 8005ab6 <HAL_PCDEx_LPM_Callback+0x32>
    USBD_LL_Resume(hpcd->pData);
 8005aaa:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
}
 8005aae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 8005ab2:	f7ff b967 	b.w	8004d84 <USBD_LL_Resume>
  SystemClock_Config();
 8005ab6:	f7fb fa3b 	bl	8000f30 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005aba:	4a05      	ldr	r2, [pc, #20]	; (8005ad0 <HAL_PCDEx_LPM_Callback+0x4c>)
    USBD_LL_Resume(hpcd->pData);
 8005abc:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005ac0:	6913      	ldr	r3, [r2, #16]
 8005ac2:	f023 0306 	bic.w	r3, r3, #6
}
 8005ac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005aca:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8005acc:	f7ff b95a 	b.w	8004d84 <USBD_LL_Resume>
 8005ad0:	e000ed00 	.word	0xe000ed00

08005ad4 <USBD_static_malloc>:
}
 8005ad4:	4800      	ldr	r0, [pc, #0]	; (8005ad8 <USBD_static_malloc+0x4>)
 8005ad6:	4770      	bx	lr
 8005ad8:	20001e84 	.word	0x20001e84

08005adc <USBD_static_free>:
}
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop

08005ae0 <__errno>:
 8005ae0:	4b01      	ldr	r3, [pc, #4]	; (8005ae8 <__errno+0x8>)
 8005ae2:	6818      	ldr	r0, [r3, #0]
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	20000108 	.word	0x20000108

08005aec <__libc_init_array>:
 8005aec:	b570      	push	{r4, r5, r6, lr}
 8005aee:	4d0d      	ldr	r5, [pc, #52]	; (8005b24 <__libc_init_array+0x38>)
 8005af0:	4c0d      	ldr	r4, [pc, #52]	; (8005b28 <__libc_init_array+0x3c>)
 8005af2:	1b64      	subs	r4, r4, r5
 8005af4:	10a4      	asrs	r4, r4, #2
 8005af6:	2600      	movs	r6, #0
 8005af8:	42a6      	cmp	r6, r4
 8005afa:	d109      	bne.n	8005b10 <__libc_init_array+0x24>
 8005afc:	4d0b      	ldr	r5, [pc, #44]	; (8005b2c <__libc_init_array+0x40>)
 8005afe:	4c0c      	ldr	r4, [pc, #48]	; (8005b30 <__libc_init_array+0x44>)
 8005b00:	f004 fc90 	bl	800a424 <_init>
 8005b04:	1b64      	subs	r4, r4, r5
 8005b06:	10a4      	asrs	r4, r4, #2
 8005b08:	2600      	movs	r6, #0
 8005b0a:	42a6      	cmp	r6, r4
 8005b0c:	d105      	bne.n	8005b1a <__libc_init_array+0x2e>
 8005b0e:	bd70      	pop	{r4, r5, r6, pc}
 8005b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b14:	4798      	blx	r3
 8005b16:	3601      	adds	r6, #1
 8005b18:	e7ee      	b.n	8005af8 <__libc_init_array+0xc>
 8005b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b1e:	4798      	blx	r3
 8005b20:	3601      	adds	r6, #1
 8005b22:	e7f2      	b.n	8005b0a <__libc_init_array+0x1e>
 8005b24:	0800a9fc 	.word	0x0800a9fc
 8005b28:	0800a9fc 	.word	0x0800a9fc
 8005b2c:	0800a9fc 	.word	0x0800a9fc
 8005b30:	0800aa00 	.word	0x0800aa00

08005b34 <memcpy>:
 8005b34:	440a      	add	r2, r1
 8005b36:	4291      	cmp	r1, r2
 8005b38:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b3c:	d100      	bne.n	8005b40 <memcpy+0xc>
 8005b3e:	4770      	bx	lr
 8005b40:	b510      	push	{r4, lr}
 8005b42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b4a:	4291      	cmp	r1, r2
 8005b4c:	d1f9      	bne.n	8005b42 <memcpy+0xe>
 8005b4e:	bd10      	pop	{r4, pc}

08005b50 <memmove>:
 8005b50:	4288      	cmp	r0, r1
 8005b52:	b510      	push	{r4, lr}
 8005b54:	eb01 0402 	add.w	r4, r1, r2
 8005b58:	d902      	bls.n	8005b60 <memmove+0x10>
 8005b5a:	4284      	cmp	r4, r0
 8005b5c:	4623      	mov	r3, r4
 8005b5e:	d807      	bhi.n	8005b70 <memmove+0x20>
 8005b60:	1e43      	subs	r3, r0, #1
 8005b62:	42a1      	cmp	r1, r4
 8005b64:	d008      	beq.n	8005b78 <memmove+0x28>
 8005b66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b6e:	e7f8      	b.n	8005b62 <memmove+0x12>
 8005b70:	4402      	add	r2, r0
 8005b72:	4601      	mov	r1, r0
 8005b74:	428a      	cmp	r2, r1
 8005b76:	d100      	bne.n	8005b7a <memmove+0x2a>
 8005b78:	bd10      	pop	{r4, pc}
 8005b7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b82:	e7f7      	b.n	8005b74 <memmove+0x24>

08005b84 <memset>:
 8005b84:	4402      	add	r2, r0
 8005b86:	4603      	mov	r3, r0
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d100      	bne.n	8005b8e <memset+0xa>
 8005b8c:	4770      	bx	lr
 8005b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b92:	e7f9      	b.n	8005b88 <memset+0x4>

08005b94 <__cvt>:
 8005b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b98:	ec55 4b10 	vmov	r4, r5, d0
 8005b9c:	2d00      	cmp	r5, #0
 8005b9e:	460e      	mov	r6, r1
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	462b      	mov	r3, r5
 8005ba4:	bfbb      	ittet	lt
 8005ba6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005baa:	461d      	movlt	r5, r3
 8005bac:	2300      	movge	r3, #0
 8005bae:	232d      	movlt	r3, #45	; 0x2d
 8005bb0:	700b      	strb	r3, [r1, #0]
 8005bb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bb4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005bb8:	4691      	mov	r9, r2
 8005bba:	f023 0820 	bic.w	r8, r3, #32
 8005bbe:	bfbc      	itt	lt
 8005bc0:	4622      	movlt	r2, r4
 8005bc2:	4614      	movlt	r4, r2
 8005bc4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005bc8:	d005      	beq.n	8005bd6 <__cvt+0x42>
 8005bca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005bce:	d100      	bne.n	8005bd2 <__cvt+0x3e>
 8005bd0:	3601      	adds	r6, #1
 8005bd2:	2102      	movs	r1, #2
 8005bd4:	e000      	b.n	8005bd8 <__cvt+0x44>
 8005bd6:	2103      	movs	r1, #3
 8005bd8:	ab03      	add	r3, sp, #12
 8005bda:	9301      	str	r3, [sp, #4]
 8005bdc:	ab02      	add	r3, sp, #8
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	ec45 4b10 	vmov	d0, r4, r5
 8005be4:	4653      	mov	r3, sl
 8005be6:	4632      	mov	r2, r6
 8005be8:	f001 fdae 	bl	8007748 <_dtoa_r>
 8005bec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005bf0:	4607      	mov	r7, r0
 8005bf2:	d102      	bne.n	8005bfa <__cvt+0x66>
 8005bf4:	f019 0f01 	tst.w	r9, #1
 8005bf8:	d022      	beq.n	8005c40 <__cvt+0xac>
 8005bfa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005bfe:	eb07 0906 	add.w	r9, r7, r6
 8005c02:	d110      	bne.n	8005c26 <__cvt+0x92>
 8005c04:	783b      	ldrb	r3, [r7, #0]
 8005c06:	2b30      	cmp	r3, #48	; 0x30
 8005c08:	d10a      	bne.n	8005c20 <__cvt+0x8c>
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	4620      	mov	r0, r4
 8005c10:	4629      	mov	r1, r5
 8005c12:	f7fa ff31 	bl	8000a78 <__aeabi_dcmpeq>
 8005c16:	b918      	cbnz	r0, 8005c20 <__cvt+0x8c>
 8005c18:	f1c6 0601 	rsb	r6, r6, #1
 8005c1c:	f8ca 6000 	str.w	r6, [sl]
 8005c20:	f8da 3000 	ldr.w	r3, [sl]
 8005c24:	4499      	add	r9, r3
 8005c26:	2200      	movs	r2, #0
 8005c28:	2300      	movs	r3, #0
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	4629      	mov	r1, r5
 8005c2e:	f7fa ff23 	bl	8000a78 <__aeabi_dcmpeq>
 8005c32:	b108      	cbz	r0, 8005c38 <__cvt+0xa4>
 8005c34:	f8cd 900c 	str.w	r9, [sp, #12]
 8005c38:	2230      	movs	r2, #48	; 0x30
 8005c3a:	9b03      	ldr	r3, [sp, #12]
 8005c3c:	454b      	cmp	r3, r9
 8005c3e:	d307      	bcc.n	8005c50 <__cvt+0xbc>
 8005c40:	9b03      	ldr	r3, [sp, #12]
 8005c42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c44:	1bdb      	subs	r3, r3, r7
 8005c46:	4638      	mov	r0, r7
 8005c48:	6013      	str	r3, [r2, #0]
 8005c4a:	b004      	add	sp, #16
 8005c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c50:	1c59      	adds	r1, r3, #1
 8005c52:	9103      	str	r1, [sp, #12]
 8005c54:	701a      	strb	r2, [r3, #0]
 8005c56:	e7f0      	b.n	8005c3a <__cvt+0xa6>

08005c58 <__exponent>:
 8005c58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2900      	cmp	r1, #0
 8005c5e:	bfb8      	it	lt
 8005c60:	4249      	neglt	r1, r1
 8005c62:	f803 2b02 	strb.w	r2, [r3], #2
 8005c66:	bfb4      	ite	lt
 8005c68:	222d      	movlt	r2, #45	; 0x2d
 8005c6a:	222b      	movge	r2, #43	; 0x2b
 8005c6c:	2909      	cmp	r1, #9
 8005c6e:	7042      	strb	r2, [r0, #1]
 8005c70:	dd2a      	ble.n	8005cc8 <__exponent+0x70>
 8005c72:	f10d 0407 	add.w	r4, sp, #7
 8005c76:	46a4      	mov	ip, r4
 8005c78:	270a      	movs	r7, #10
 8005c7a:	46a6      	mov	lr, r4
 8005c7c:	460a      	mov	r2, r1
 8005c7e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005c82:	fb07 1516 	mls	r5, r7, r6, r1
 8005c86:	3530      	adds	r5, #48	; 0x30
 8005c88:	2a63      	cmp	r2, #99	; 0x63
 8005c8a:	f104 34ff 	add.w	r4, r4, #4294967295
 8005c8e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005c92:	4631      	mov	r1, r6
 8005c94:	dcf1      	bgt.n	8005c7a <__exponent+0x22>
 8005c96:	3130      	adds	r1, #48	; 0x30
 8005c98:	f1ae 0502 	sub.w	r5, lr, #2
 8005c9c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005ca0:	1c44      	adds	r4, r0, #1
 8005ca2:	4629      	mov	r1, r5
 8005ca4:	4561      	cmp	r1, ip
 8005ca6:	d30a      	bcc.n	8005cbe <__exponent+0x66>
 8005ca8:	f10d 0209 	add.w	r2, sp, #9
 8005cac:	eba2 020e 	sub.w	r2, r2, lr
 8005cb0:	4565      	cmp	r5, ip
 8005cb2:	bf88      	it	hi
 8005cb4:	2200      	movhi	r2, #0
 8005cb6:	4413      	add	r3, r2
 8005cb8:	1a18      	subs	r0, r3, r0
 8005cba:	b003      	add	sp, #12
 8005cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005cc2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005cc6:	e7ed      	b.n	8005ca4 <__exponent+0x4c>
 8005cc8:	2330      	movs	r3, #48	; 0x30
 8005cca:	3130      	adds	r1, #48	; 0x30
 8005ccc:	7083      	strb	r3, [r0, #2]
 8005cce:	70c1      	strb	r1, [r0, #3]
 8005cd0:	1d03      	adds	r3, r0, #4
 8005cd2:	e7f1      	b.n	8005cb8 <__exponent+0x60>

08005cd4 <_printf_float>:
 8005cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd8:	ed2d 8b02 	vpush	{d8}
 8005cdc:	b08d      	sub	sp, #52	; 0x34
 8005cde:	460c      	mov	r4, r1
 8005ce0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005ce4:	4616      	mov	r6, r2
 8005ce6:	461f      	mov	r7, r3
 8005ce8:	4605      	mov	r5, r0
 8005cea:	f002 fe8b 	bl	8008a04 <_localeconv_r>
 8005cee:	f8d0 a000 	ldr.w	sl, [r0]
 8005cf2:	4650      	mov	r0, sl
 8005cf4:	f7fa fa44 	bl	8000180 <strlen>
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	930a      	str	r3, [sp, #40]	; 0x28
 8005cfc:	6823      	ldr	r3, [r4, #0]
 8005cfe:	9305      	str	r3, [sp, #20]
 8005d00:	f8d8 3000 	ldr.w	r3, [r8]
 8005d04:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005d08:	3307      	adds	r3, #7
 8005d0a:	f023 0307 	bic.w	r3, r3, #7
 8005d0e:	f103 0208 	add.w	r2, r3, #8
 8005d12:	f8c8 2000 	str.w	r2, [r8]
 8005d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005d1e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005d22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005d26:	9307      	str	r3, [sp, #28]
 8005d28:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d2c:	ee08 0a10 	vmov	s16, r0
 8005d30:	4b9f      	ldr	r3, [pc, #636]	; (8005fb0 <_printf_float+0x2dc>)
 8005d32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d36:	f04f 32ff 	mov.w	r2, #4294967295
 8005d3a:	f7fa fecf 	bl	8000adc <__aeabi_dcmpun>
 8005d3e:	bb88      	cbnz	r0, 8005da4 <_printf_float+0xd0>
 8005d40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d44:	4b9a      	ldr	r3, [pc, #616]	; (8005fb0 <_printf_float+0x2dc>)
 8005d46:	f04f 32ff 	mov.w	r2, #4294967295
 8005d4a:	f7fa fea9 	bl	8000aa0 <__aeabi_dcmple>
 8005d4e:	bb48      	cbnz	r0, 8005da4 <_printf_float+0xd0>
 8005d50:	2200      	movs	r2, #0
 8005d52:	2300      	movs	r3, #0
 8005d54:	4640      	mov	r0, r8
 8005d56:	4649      	mov	r1, r9
 8005d58:	f7fa fe98 	bl	8000a8c <__aeabi_dcmplt>
 8005d5c:	b110      	cbz	r0, 8005d64 <_printf_float+0x90>
 8005d5e:	232d      	movs	r3, #45	; 0x2d
 8005d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d64:	4b93      	ldr	r3, [pc, #588]	; (8005fb4 <_printf_float+0x2e0>)
 8005d66:	4894      	ldr	r0, [pc, #592]	; (8005fb8 <_printf_float+0x2e4>)
 8005d68:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005d6c:	bf94      	ite	ls
 8005d6e:	4698      	movls	r8, r3
 8005d70:	4680      	movhi	r8, r0
 8005d72:	2303      	movs	r3, #3
 8005d74:	6123      	str	r3, [r4, #16]
 8005d76:	9b05      	ldr	r3, [sp, #20]
 8005d78:	f023 0204 	bic.w	r2, r3, #4
 8005d7c:	6022      	str	r2, [r4, #0]
 8005d7e:	f04f 0900 	mov.w	r9, #0
 8005d82:	9700      	str	r7, [sp, #0]
 8005d84:	4633      	mov	r3, r6
 8005d86:	aa0b      	add	r2, sp, #44	; 0x2c
 8005d88:	4621      	mov	r1, r4
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	f000 f9d8 	bl	8006140 <_printf_common>
 8005d90:	3001      	adds	r0, #1
 8005d92:	f040 8090 	bne.w	8005eb6 <_printf_float+0x1e2>
 8005d96:	f04f 30ff 	mov.w	r0, #4294967295
 8005d9a:	b00d      	add	sp, #52	; 0x34
 8005d9c:	ecbd 8b02 	vpop	{d8}
 8005da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005da4:	4642      	mov	r2, r8
 8005da6:	464b      	mov	r3, r9
 8005da8:	4640      	mov	r0, r8
 8005daa:	4649      	mov	r1, r9
 8005dac:	f7fa fe96 	bl	8000adc <__aeabi_dcmpun>
 8005db0:	b140      	cbz	r0, 8005dc4 <_printf_float+0xf0>
 8005db2:	464b      	mov	r3, r9
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	bfbc      	itt	lt
 8005db8:	232d      	movlt	r3, #45	; 0x2d
 8005dba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005dbe:	487f      	ldr	r0, [pc, #508]	; (8005fbc <_printf_float+0x2e8>)
 8005dc0:	4b7f      	ldr	r3, [pc, #508]	; (8005fc0 <_printf_float+0x2ec>)
 8005dc2:	e7d1      	b.n	8005d68 <_printf_float+0x94>
 8005dc4:	6863      	ldr	r3, [r4, #4]
 8005dc6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005dca:	9206      	str	r2, [sp, #24]
 8005dcc:	1c5a      	adds	r2, r3, #1
 8005dce:	d13f      	bne.n	8005e50 <_printf_float+0x17c>
 8005dd0:	2306      	movs	r3, #6
 8005dd2:	6063      	str	r3, [r4, #4]
 8005dd4:	9b05      	ldr	r3, [sp, #20]
 8005dd6:	6861      	ldr	r1, [r4, #4]
 8005dd8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005ddc:	2300      	movs	r3, #0
 8005dde:	9303      	str	r3, [sp, #12]
 8005de0:	ab0a      	add	r3, sp, #40	; 0x28
 8005de2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005de6:	ab09      	add	r3, sp, #36	; 0x24
 8005de8:	ec49 8b10 	vmov	d0, r8, r9
 8005dec:	9300      	str	r3, [sp, #0]
 8005dee:	6022      	str	r2, [r4, #0]
 8005df0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005df4:	4628      	mov	r0, r5
 8005df6:	f7ff fecd 	bl	8005b94 <__cvt>
 8005dfa:	9b06      	ldr	r3, [sp, #24]
 8005dfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005dfe:	2b47      	cmp	r3, #71	; 0x47
 8005e00:	4680      	mov	r8, r0
 8005e02:	d108      	bne.n	8005e16 <_printf_float+0x142>
 8005e04:	1cc8      	adds	r0, r1, #3
 8005e06:	db02      	blt.n	8005e0e <_printf_float+0x13a>
 8005e08:	6863      	ldr	r3, [r4, #4]
 8005e0a:	4299      	cmp	r1, r3
 8005e0c:	dd41      	ble.n	8005e92 <_printf_float+0x1be>
 8005e0e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005e12:	fa5f fb8b 	uxtb.w	fp, fp
 8005e16:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005e1a:	d820      	bhi.n	8005e5e <_printf_float+0x18a>
 8005e1c:	3901      	subs	r1, #1
 8005e1e:	465a      	mov	r2, fp
 8005e20:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005e24:	9109      	str	r1, [sp, #36]	; 0x24
 8005e26:	f7ff ff17 	bl	8005c58 <__exponent>
 8005e2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e2c:	1813      	adds	r3, r2, r0
 8005e2e:	2a01      	cmp	r2, #1
 8005e30:	4681      	mov	r9, r0
 8005e32:	6123      	str	r3, [r4, #16]
 8005e34:	dc02      	bgt.n	8005e3c <_printf_float+0x168>
 8005e36:	6822      	ldr	r2, [r4, #0]
 8005e38:	07d2      	lsls	r2, r2, #31
 8005e3a:	d501      	bpl.n	8005e40 <_printf_float+0x16c>
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	6123      	str	r3, [r4, #16]
 8005e40:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d09c      	beq.n	8005d82 <_printf_float+0xae>
 8005e48:	232d      	movs	r3, #45	; 0x2d
 8005e4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e4e:	e798      	b.n	8005d82 <_printf_float+0xae>
 8005e50:	9a06      	ldr	r2, [sp, #24]
 8005e52:	2a47      	cmp	r2, #71	; 0x47
 8005e54:	d1be      	bne.n	8005dd4 <_printf_float+0x100>
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1bc      	bne.n	8005dd4 <_printf_float+0x100>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e7b9      	b.n	8005dd2 <_printf_float+0xfe>
 8005e5e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005e62:	d118      	bne.n	8005e96 <_printf_float+0x1c2>
 8005e64:	2900      	cmp	r1, #0
 8005e66:	6863      	ldr	r3, [r4, #4]
 8005e68:	dd0b      	ble.n	8005e82 <_printf_float+0x1ae>
 8005e6a:	6121      	str	r1, [r4, #16]
 8005e6c:	b913      	cbnz	r3, 8005e74 <_printf_float+0x1a0>
 8005e6e:	6822      	ldr	r2, [r4, #0]
 8005e70:	07d0      	lsls	r0, r2, #31
 8005e72:	d502      	bpl.n	8005e7a <_printf_float+0x1a6>
 8005e74:	3301      	adds	r3, #1
 8005e76:	440b      	add	r3, r1
 8005e78:	6123      	str	r3, [r4, #16]
 8005e7a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005e7c:	f04f 0900 	mov.w	r9, #0
 8005e80:	e7de      	b.n	8005e40 <_printf_float+0x16c>
 8005e82:	b913      	cbnz	r3, 8005e8a <_printf_float+0x1b6>
 8005e84:	6822      	ldr	r2, [r4, #0]
 8005e86:	07d2      	lsls	r2, r2, #31
 8005e88:	d501      	bpl.n	8005e8e <_printf_float+0x1ba>
 8005e8a:	3302      	adds	r3, #2
 8005e8c:	e7f4      	b.n	8005e78 <_printf_float+0x1a4>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e7f2      	b.n	8005e78 <_printf_float+0x1a4>
 8005e92:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e98:	4299      	cmp	r1, r3
 8005e9a:	db05      	blt.n	8005ea8 <_printf_float+0x1d4>
 8005e9c:	6823      	ldr	r3, [r4, #0]
 8005e9e:	6121      	str	r1, [r4, #16]
 8005ea0:	07d8      	lsls	r0, r3, #31
 8005ea2:	d5ea      	bpl.n	8005e7a <_printf_float+0x1a6>
 8005ea4:	1c4b      	adds	r3, r1, #1
 8005ea6:	e7e7      	b.n	8005e78 <_printf_float+0x1a4>
 8005ea8:	2900      	cmp	r1, #0
 8005eaa:	bfd4      	ite	le
 8005eac:	f1c1 0202 	rsble	r2, r1, #2
 8005eb0:	2201      	movgt	r2, #1
 8005eb2:	4413      	add	r3, r2
 8005eb4:	e7e0      	b.n	8005e78 <_printf_float+0x1a4>
 8005eb6:	6823      	ldr	r3, [r4, #0]
 8005eb8:	055a      	lsls	r2, r3, #21
 8005eba:	d407      	bmi.n	8005ecc <_printf_float+0x1f8>
 8005ebc:	6923      	ldr	r3, [r4, #16]
 8005ebe:	4642      	mov	r2, r8
 8005ec0:	4631      	mov	r1, r6
 8005ec2:	4628      	mov	r0, r5
 8005ec4:	47b8      	blx	r7
 8005ec6:	3001      	adds	r0, #1
 8005ec8:	d12c      	bne.n	8005f24 <_printf_float+0x250>
 8005eca:	e764      	b.n	8005d96 <_printf_float+0xc2>
 8005ecc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ed0:	f240 80e0 	bls.w	8006094 <_printf_float+0x3c0>
 8005ed4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ed8:	2200      	movs	r2, #0
 8005eda:	2300      	movs	r3, #0
 8005edc:	f7fa fdcc 	bl	8000a78 <__aeabi_dcmpeq>
 8005ee0:	2800      	cmp	r0, #0
 8005ee2:	d034      	beq.n	8005f4e <_printf_float+0x27a>
 8005ee4:	4a37      	ldr	r2, [pc, #220]	; (8005fc4 <_printf_float+0x2f0>)
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	4631      	mov	r1, r6
 8005eea:	4628      	mov	r0, r5
 8005eec:	47b8      	blx	r7
 8005eee:	3001      	adds	r0, #1
 8005ef0:	f43f af51 	beq.w	8005d96 <_printf_float+0xc2>
 8005ef4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	db02      	blt.n	8005f02 <_printf_float+0x22e>
 8005efc:	6823      	ldr	r3, [r4, #0]
 8005efe:	07d8      	lsls	r0, r3, #31
 8005f00:	d510      	bpl.n	8005f24 <_printf_float+0x250>
 8005f02:	ee18 3a10 	vmov	r3, s16
 8005f06:	4652      	mov	r2, sl
 8005f08:	4631      	mov	r1, r6
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	47b8      	blx	r7
 8005f0e:	3001      	adds	r0, #1
 8005f10:	f43f af41 	beq.w	8005d96 <_printf_float+0xc2>
 8005f14:	f04f 0800 	mov.w	r8, #0
 8005f18:	f104 091a 	add.w	r9, r4, #26
 8005f1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	4543      	cmp	r3, r8
 8005f22:	dc09      	bgt.n	8005f38 <_printf_float+0x264>
 8005f24:	6823      	ldr	r3, [r4, #0]
 8005f26:	079b      	lsls	r3, r3, #30
 8005f28:	f100 8105 	bmi.w	8006136 <_printf_float+0x462>
 8005f2c:	68e0      	ldr	r0, [r4, #12]
 8005f2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f30:	4298      	cmp	r0, r3
 8005f32:	bfb8      	it	lt
 8005f34:	4618      	movlt	r0, r3
 8005f36:	e730      	b.n	8005d9a <_printf_float+0xc6>
 8005f38:	2301      	movs	r3, #1
 8005f3a:	464a      	mov	r2, r9
 8005f3c:	4631      	mov	r1, r6
 8005f3e:	4628      	mov	r0, r5
 8005f40:	47b8      	blx	r7
 8005f42:	3001      	adds	r0, #1
 8005f44:	f43f af27 	beq.w	8005d96 <_printf_float+0xc2>
 8005f48:	f108 0801 	add.w	r8, r8, #1
 8005f4c:	e7e6      	b.n	8005f1c <_printf_float+0x248>
 8005f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	dc39      	bgt.n	8005fc8 <_printf_float+0x2f4>
 8005f54:	4a1b      	ldr	r2, [pc, #108]	; (8005fc4 <_printf_float+0x2f0>)
 8005f56:	2301      	movs	r3, #1
 8005f58:	4631      	mov	r1, r6
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	47b8      	blx	r7
 8005f5e:	3001      	adds	r0, #1
 8005f60:	f43f af19 	beq.w	8005d96 <_printf_float+0xc2>
 8005f64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	d102      	bne.n	8005f72 <_printf_float+0x29e>
 8005f6c:	6823      	ldr	r3, [r4, #0]
 8005f6e:	07d9      	lsls	r1, r3, #31
 8005f70:	d5d8      	bpl.n	8005f24 <_printf_float+0x250>
 8005f72:	ee18 3a10 	vmov	r3, s16
 8005f76:	4652      	mov	r2, sl
 8005f78:	4631      	mov	r1, r6
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	47b8      	blx	r7
 8005f7e:	3001      	adds	r0, #1
 8005f80:	f43f af09 	beq.w	8005d96 <_printf_float+0xc2>
 8005f84:	f04f 0900 	mov.w	r9, #0
 8005f88:	f104 0a1a 	add.w	sl, r4, #26
 8005f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f8e:	425b      	negs	r3, r3
 8005f90:	454b      	cmp	r3, r9
 8005f92:	dc01      	bgt.n	8005f98 <_printf_float+0x2c4>
 8005f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f96:	e792      	b.n	8005ebe <_printf_float+0x1ea>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	4652      	mov	r2, sl
 8005f9c:	4631      	mov	r1, r6
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	47b8      	blx	r7
 8005fa2:	3001      	adds	r0, #1
 8005fa4:	f43f aef7 	beq.w	8005d96 <_printf_float+0xc2>
 8005fa8:	f109 0901 	add.w	r9, r9, #1
 8005fac:	e7ee      	b.n	8005f8c <_printf_float+0x2b8>
 8005fae:	bf00      	nop
 8005fb0:	7fefffff 	.word	0x7fefffff
 8005fb4:	0800a55c 	.word	0x0800a55c
 8005fb8:	0800a560 	.word	0x0800a560
 8005fbc:	0800a568 	.word	0x0800a568
 8005fc0:	0800a564 	.word	0x0800a564
 8005fc4:	0800a56c 	.word	0x0800a56c
 8005fc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	bfa8      	it	ge
 8005fd0:	461a      	movge	r2, r3
 8005fd2:	2a00      	cmp	r2, #0
 8005fd4:	4691      	mov	r9, r2
 8005fd6:	dc37      	bgt.n	8006048 <_printf_float+0x374>
 8005fd8:	f04f 0b00 	mov.w	fp, #0
 8005fdc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fe0:	f104 021a 	add.w	r2, r4, #26
 8005fe4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005fe6:	9305      	str	r3, [sp, #20]
 8005fe8:	eba3 0309 	sub.w	r3, r3, r9
 8005fec:	455b      	cmp	r3, fp
 8005fee:	dc33      	bgt.n	8006058 <_printf_float+0x384>
 8005ff0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	db3b      	blt.n	8006070 <_printf_float+0x39c>
 8005ff8:	6823      	ldr	r3, [r4, #0]
 8005ffa:	07da      	lsls	r2, r3, #31
 8005ffc:	d438      	bmi.n	8006070 <_printf_float+0x39c>
 8005ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006000:	9a05      	ldr	r2, [sp, #20]
 8006002:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006004:	1a9a      	subs	r2, r3, r2
 8006006:	eba3 0901 	sub.w	r9, r3, r1
 800600a:	4591      	cmp	r9, r2
 800600c:	bfa8      	it	ge
 800600e:	4691      	movge	r9, r2
 8006010:	f1b9 0f00 	cmp.w	r9, #0
 8006014:	dc35      	bgt.n	8006082 <_printf_float+0x3ae>
 8006016:	f04f 0800 	mov.w	r8, #0
 800601a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800601e:	f104 0a1a 	add.w	sl, r4, #26
 8006022:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006026:	1a9b      	subs	r3, r3, r2
 8006028:	eba3 0309 	sub.w	r3, r3, r9
 800602c:	4543      	cmp	r3, r8
 800602e:	f77f af79 	ble.w	8005f24 <_printf_float+0x250>
 8006032:	2301      	movs	r3, #1
 8006034:	4652      	mov	r2, sl
 8006036:	4631      	mov	r1, r6
 8006038:	4628      	mov	r0, r5
 800603a:	47b8      	blx	r7
 800603c:	3001      	adds	r0, #1
 800603e:	f43f aeaa 	beq.w	8005d96 <_printf_float+0xc2>
 8006042:	f108 0801 	add.w	r8, r8, #1
 8006046:	e7ec      	b.n	8006022 <_printf_float+0x34e>
 8006048:	4613      	mov	r3, r2
 800604a:	4631      	mov	r1, r6
 800604c:	4642      	mov	r2, r8
 800604e:	4628      	mov	r0, r5
 8006050:	47b8      	blx	r7
 8006052:	3001      	adds	r0, #1
 8006054:	d1c0      	bne.n	8005fd8 <_printf_float+0x304>
 8006056:	e69e      	b.n	8005d96 <_printf_float+0xc2>
 8006058:	2301      	movs	r3, #1
 800605a:	4631      	mov	r1, r6
 800605c:	4628      	mov	r0, r5
 800605e:	9205      	str	r2, [sp, #20]
 8006060:	47b8      	blx	r7
 8006062:	3001      	adds	r0, #1
 8006064:	f43f ae97 	beq.w	8005d96 <_printf_float+0xc2>
 8006068:	9a05      	ldr	r2, [sp, #20]
 800606a:	f10b 0b01 	add.w	fp, fp, #1
 800606e:	e7b9      	b.n	8005fe4 <_printf_float+0x310>
 8006070:	ee18 3a10 	vmov	r3, s16
 8006074:	4652      	mov	r2, sl
 8006076:	4631      	mov	r1, r6
 8006078:	4628      	mov	r0, r5
 800607a:	47b8      	blx	r7
 800607c:	3001      	adds	r0, #1
 800607e:	d1be      	bne.n	8005ffe <_printf_float+0x32a>
 8006080:	e689      	b.n	8005d96 <_printf_float+0xc2>
 8006082:	9a05      	ldr	r2, [sp, #20]
 8006084:	464b      	mov	r3, r9
 8006086:	4442      	add	r2, r8
 8006088:	4631      	mov	r1, r6
 800608a:	4628      	mov	r0, r5
 800608c:	47b8      	blx	r7
 800608e:	3001      	adds	r0, #1
 8006090:	d1c1      	bne.n	8006016 <_printf_float+0x342>
 8006092:	e680      	b.n	8005d96 <_printf_float+0xc2>
 8006094:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006096:	2a01      	cmp	r2, #1
 8006098:	dc01      	bgt.n	800609e <_printf_float+0x3ca>
 800609a:	07db      	lsls	r3, r3, #31
 800609c:	d538      	bpl.n	8006110 <_printf_float+0x43c>
 800609e:	2301      	movs	r3, #1
 80060a0:	4642      	mov	r2, r8
 80060a2:	4631      	mov	r1, r6
 80060a4:	4628      	mov	r0, r5
 80060a6:	47b8      	blx	r7
 80060a8:	3001      	adds	r0, #1
 80060aa:	f43f ae74 	beq.w	8005d96 <_printf_float+0xc2>
 80060ae:	ee18 3a10 	vmov	r3, s16
 80060b2:	4652      	mov	r2, sl
 80060b4:	4631      	mov	r1, r6
 80060b6:	4628      	mov	r0, r5
 80060b8:	47b8      	blx	r7
 80060ba:	3001      	adds	r0, #1
 80060bc:	f43f ae6b 	beq.w	8005d96 <_printf_float+0xc2>
 80060c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80060c4:	2200      	movs	r2, #0
 80060c6:	2300      	movs	r3, #0
 80060c8:	f7fa fcd6 	bl	8000a78 <__aeabi_dcmpeq>
 80060cc:	b9d8      	cbnz	r0, 8006106 <_printf_float+0x432>
 80060ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060d0:	f108 0201 	add.w	r2, r8, #1
 80060d4:	3b01      	subs	r3, #1
 80060d6:	4631      	mov	r1, r6
 80060d8:	4628      	mov	r0, r5
 80060da:	47b8      	blx	r7
 80060dc:	3001      	adds	r0, #1
 80060de:	d10e      	bne.n	80060fe <_printf_float+0x42a>
 80060e0:	e659      	b.n	8005d96 <_printf_float+0xc2>
 80060e2:	2301      	movs	r3, #1
 80060e4:	4652      	mov	r2, sl
 80060e6:	4631      	mov	r1, r6
 80060e8:	4628      	mov	r0, r5
 80060ea:	47b8      	blx	r7
 80060ec:	3001      	adds	r0, #1
 80060ee:	f43f ae52 	beq.w	8005d96 <_printf_float+0xc2>
 80060f2:	f108 0801 	add.w	r8, r8, #1
 80060f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060f8:	3b01      	subs	r3, #1
 80060fa:	4543      	cmp	r3, r8
 80060fc:	dcf1      	bgt.n	80060e2 <_printf_float+0x40e>
 80060fe:	464b      	mov	r3, r9
 8006100:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006104:	e6dc      	b.n	8005ec0 <_printf_float+0x1ec>
 8006106:	f04f 0800 	mov.w	r8, #0
 800610a:	f104 0a1a 	add.w	sl, r4, #26
 800610e:	e7f2      	b.n	80060f6 <_printf_float+0x422>
 8006110:	2301      	movs	r3, #1
 8006112:	4642      	mov	r2, r8
 8006114:	e7df      	b.n	80060d6 <_printf_float+0x402>
 8006116:	2301      	movs	r3, #1
 8006118:	464a      	mov	r2, r9
 800611a:	4631      	mov	r1, r6
 800611c:	4628      	mov	r0, r5
 800611e:	47b8      	blx	r7
 8006120:	3001      	adds	r0, #1
 8006122:	f43f ae38 	beq.w	8005d96 <_printf_float+0xc2>
 8006126:	f108 0801 	add.w	r8, r8, #1
 800612a:	68e3      	ldr	r3, [r4, #12]
 800612c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800612e:	1a5b      	subs	r3, r3, r1
 8006130:	4543      	cmp	r3, r8
 8006132:	dcf0      	bgt.n	8006116 <_printf_float+0x442>
 8006134:	e6fa      	b.n	8005f2c <_printf_float+0x258>
 8006136:	f04f 0800 	mov.w	r8, #0
 800613a:	f104 0919 	add.w	r9, r4, #25
 800613e:	e7f4      	b.n	800612a <_printf_float+0x456>

08006140 <_printf_common>:
 8006140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006144:	4616      	mov	r6, r2
 8006146:	4699      	mov	r9, r3
 8006148:	688a      	ldr	r2, [r1, #8]
 800614a:	690b      	ldr	r3, [r1, #16]
 800614c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006150:	4293      	cmp	r3, r2
 8006152:	bfb8      	it	lt
 8006154:	4613      	movlt	r3, r2
 8006156:	6033      	str	r3, [r6, #0]
 8006158:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800615c:	4607      	mov	r7, r0
 800615e:	460c      	mov	r4, r1
 8006160:	b10a      	cbz	r2, 8006166 <_printf_common+0x26>
 8006162:	3301      	adds	r3, #1
 8006164:	6033      	str	r3, [r6, #0]
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	0699      	lsls	r1, r3, #26
 800616a:	bf42      	ittt	mi
 800616c:	6833      	ldrmi	r3, [r6, #0]
 800616e:	3302      	addmi	r3, #2
 8006170:	6033      	strmi	r3, [r6, #0]
 8006172:	6825      	ldr	r5, [r4, #0]
 8006174:	f015 0506 	ands.w	r5, r5, #6
 8006178:	d106      	bne.n	8006188 <_printf_common+0x48>
 800617a:	f104 0a19 	add.w	sl, r4, #25
 800617e:	68e3      	ldr	r3, [r4, #12]
 8006180:	6832      	ldr	r2, [r6, #0]
 8006182:	1a9b      	subs	r3, r3, r2
 8006184:	42ab      	cmp	r3, r5
 8006186:	dc26      	bgt.n	80061d6 <_printf_common+0x96>
 8006188:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800618c:	1e13      	subs	r3, r2, #0
 800618e:	6822      	ldr	r2, [r4, #0]
 8006190:	bf18      	it	ne
 8006192:	2301      	movne	r3, #1
 8006194:	0692      	lsls	r2, r2, #26
 8006196:	d42b      	bmi.n	80061f0 <_printf_common+0xb0>
 8006198:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800619c:	4649      	mov	r1, r9
 800619e:	4638      	mov	r0, r7
 80061a0:	47c0      	blx	r8
 80061a2:	3001      	adds	r0, #1
 80061a4:	d01e      	beq.n	80061e4 <_printf_common+0xa4>
 80061a6:	6823      	ldr	r3, [r4, #0]
 80061a8:	68e5      	ldr	r5, [r4, #12]
 80061aa:	6832      	ldr	r2, [r6, #0]
 80061ac:	f003 0306 	and.w	r3, r3, #6
 80061b0:	2b04      	cmp	r3, #4
 80061b2:	bf08      	it	eq
 80061b4:	1aad      	subeq	r5, r5, r2
 80061b6:	68a3      	ldr	r3, [r4, #8]
 80061b8:	6922      	ldr	r2, [r4, #16]
 80061ba:	bf0c      	ite	eq
 80061bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061c0:	2500      	movne	r5, #0
 80061c2:	4293      	cmp	r3, r2
 80061c4:	bfc4      	itt	gt
 80061c6:	1a9b      	subgt	r3, r3, r2
 80061c8:	18ed      	addgt	r5, r5, r3
 80061ca:	2600      	movs	r6, #0
 80061cc:	341a      	adds	r4, #26
 80061ce:	42b5      	cmp	r5, r6
 80061d0:	d11a      	bne.n	8006208 <_printf_common+0xc8>
 80061d2:	2000      	movs	r0, #0
 80061d4:	e008      	b.n	80061e8 <_printf_common+0xa8>
 80061d6:	2301      	movs	r3, #1
 80061d8:	4652      	mov	r2, sl
 80061da:	4649      	mov	r1, r9
 80061dc:	4638      	mov	r0, r7
 80061de:	47c0      	blx	r8
 80061e0:	3001      	adds	r0, #1
 80061e2:	d103      	bne.n	80061ec <_printf_common+0xac>
 80061e4:	f04f 30ff 	mov.w	r0, #4294967295
 80061e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061ec:	3501      	adds	r5, #1
 80061ee:	e7c6      	b.n	800617e <_printf_common+0x3e>
 80061f0:	18e1      	adds	r1, r4, r3
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	2030      	movs	r0, #48	; 0x30
 80061f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061fa:	4422      	add	r2, r4
 80061fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006200:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006204:	3302      	adds	r3, #2
 8006206:	e7c7      	b.n	8006198 <_printf_common+0x58>
 8006208:	2301      	movs	r3, #1
 800620a:	4622      	mov	r2, r4
 800620c:	4649      	mov	r1, r9
 800620e:	4638      	mov	r0, r7
 8006210:	47c0      	blx	r8
 8006212:	3001      	adds	r0, #1
 8006214:	d0e6      	beq.n	80061e4 <_printf_common+0xa4>
 8006216:	3601      	adds	r6, #1
 8006218:	e7d9      	b.n	80061ce <_printf_common+0x8e>
	...

0800621c <_printf_i>:
 800621c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006220:	7e0f      	ldrb	r7, [r1, #24]
 8006222:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006224:	2f78      	cmp	r7, #120	; 0x78
 8006226:	4691      	mov	r9, r2
 8006228:	4680      	mov	r8, r0
 800622a:	460c      	mov	r4, r1
 800622c:	469a      	mov	sl, r3
 800622e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006232:	d807      	bhi.n	8006244 <_printf_i+0x28>
 8006234:	2f62      	cmp	r7, #98	; 0x62
 8006236:	d80a      	bhi.n	800624e <_printf_i+0x32>
 8006238:	2f00      	cmp	r7, #0
 800623a:	f000 80d8 	beq.w	80063ee <_printf_i+0x1d2>
 800623e:	2f58      	cmp	r7, #88	; 0x58
 8006240:	f000 80a3 	beq.w	800638a <_printf_i+0x16e>
 8006244:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006248:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800624c:	e03a      	b.n	80062c4 <_printf_i+0xa8>
 800624e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006252:	2b15      	cmp	r3, #21
 8006254:	d8f6      	bhi.n	8006244 <_printf_i+0x28>
 8006256:	a101      	add	r1, pc, #4	; (adr r1, 800625c <_printf_i+0x40>)
 8006258:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800625c:	080062b5 	.word	0x080062b5
 8006260:	080062c9 	.word	0x080062c9
 8006264:	08006245 	.word	0x08006245
 8006268:	08006245 	.word	0x08006245
 800626c:	08006245 	.word	0x08006245
 8006270:	08006245 	.word	0x08006245
 8006274:	080062c9 	.word	0x080062c9
 8006278:	08006245 	.word	0x08006245
 800627c:	08006245 	.word	0x08006245
 8006280:	08006245 	.word	0x08006245
 8006284:	08006245 	.word	0x08006245
 8006288:	080063d5 	.word	0x080063d5
 800628c:	080062f9 	.word	0x080062f9
 8006290:	080063b7 	.word	0x080063b7
 8006294:	08006245 	.word	0x08006245
 8006298:	08006245 	.word	0x08006245
 800629c:	080063f7 	.word	0x080063f7
 80062a0:	08006245 	.word	0x08006245
 80062a4:	080062f9 	.word	0x080062f9
 80062a8:	08006245 	.word	0x08006245
 80062ac:	08006245 	.word	0x08006245
 80062b0:	080063bf 	.word	0x080063bf
 80062b4:	682b      	ldr	r3, [r5, #0]
 80062b6:	1d1a      	adds	r2, r3, #4
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	602a      	str	r2, [r5, #0]
 80062bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062c4:	2301      	movs	r3, #1
 80062c6:	e0a3      	b.n	8006410 <_printf_i+0x1f4>
 80062c8:	6820      	ldr	r0, [r4, #0]
 80062ca:	6829      	ldr	r1, [r5, #0]
 80062cc:	0606      	lsls	r6, r0, #24
 80062ce:	f101 0304 	add.w	r3, r1, #4
 80062d2:	d50a      	bpl.n	80062ea <_printf_i+0xce>
 80062d4:	680e      	ldr	r6, [r1, #0]
 80062d6:	602b      	str	r3, [r5, #0]
 80062d8:	2e00      	cmp	r6, #0
 80062da:	da03      	bge.n	80062e4 <_printf_i+0xc8>
 80062dc:	232d      	movs	r3, #45	; 0x2d
 80062de:	4276      	negs	r6, r6
 80062e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062e4:	485e      	ldr	r0, [pc, #376]	; (8006460 <_printf_i+0x244>)
 80062e6:	230a      	movs	r3, #10
 80062e8:	e019      	b.n	800631e <_printf_i+0x102>
 80062ea:	680e      	ldr	r6, [r1, #0]
 80062ec:	602b      	str	r3, [r5, #0]
 80062ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062f2:	bf18      	it	ne
 80062f4:	b236      	sxthne	r6, r6
 80062f6:	e7ef      	b.n	80062d8 <_printf_i+0xbc>
 80062f8:	682b      	ldr	r3, [r5, #0]
 80062fa:	6820      	ldr	r0, [r4, #0]
 80062fc:	1d19      	adds	r1, r3, #4
 80062fe:	6029      	str	r1, [r5, #0]
 8006300:	0601      	lsls	r1, r0, #24
 8006302:	d501      	bpl.n	8006308 <_printf_i+0xec>
 8006304:	681e      	ldr	r6, [r3, #0]
 8006306:	e002      	b.n	800630e <_printf_i+0xf2>
 8006308:	0646      	lsls	r6, r0, #25
 800630a:	d5fb      	bpl.n	8006304 <_printf_i+0xe8>
 800630c:	881e      	ldrh	r6, [r3, #0]
 800630e:	4854      	ldr	r0, [pc, #336]	; (8006460 <_printf_i+0x244>)
 8006310:	2f6f      	cmp	r7, #111	; 0x6f
 8006312:	bf0c      	ite	eq
 8006314:	2308      	moveq	r3, #8
 8006316:	230a      	movne	r3, #10
 8006318:	2100      	movs	r1, #0
 800631a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800631e:	6865      	ldr	r5, [r4, #4]
 8006320:	60a5      	str	r5, [r4, #8]
 8006322:	2d00      	cmp	r5, #0
 8006324:	bfa2      	ittt	ge
 8006326:	6821      	ldrge	r1, [r4, #0]
 8006328:	f021 0104 	bicge.w	r1, r1, #4
 800632c:	6021      	strge	r1, [r4, #0]
 800632e:	b90e      	cbnz	r6, 8006334 <_printf_i+0x118>
 8006330:	2d00      	cmp	r5, #0
 8006332:	d04d      	beq.n	80063d0 <_printf_i+0x1b4>
 8006334:	4615      	mov	r5, r2
 8006336:	fbb6 f1f3 	udiv	r1, r6, r3
 800633a:	fb03 6711 	mls	r7, r3, r1, r6
 800633e:	5dc7      	ldrb	r7, [r0, r7]
 8006340:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006344:	4637      	mov	r7, r6
 8006346:	42bb      	cmp	r3, r7
 8006348:	460e      	mov	r6, r1
 800634a:	d9f4      	bls.n	8006336 <_printf_i+0x11a>
 800634c:	2b08      	cmp	r3, #8
 800634e:	d10b      	bne.n	8006368 <_printf_i+0x14c>
 8006350:	6823      	ldr	r3, [r4, #0]
 8006352:	07de      	lsls	r6, r3, #31
 8006354:	d508      	bpl.n	8006368 <_printf_i+0x14c>
 8006356:	6923      	ldr	r3, [r4, #16]
 8006358:	6861      	ldr	r1, [r4, #4]
 800635a:	4299      	cmp	r1, r3
 800635c:	bfde      	ittt	le
 800635e:	2330      	movle	r3, #48	; 0x30
 8006360:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006364:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006368:	1b52      	subs	r2, r2, r5
 800636a:	6122      	str	r2, [r4, #16]
 800636c:	f8cd a000 	str.w	sl, [sp]
 8006370:	464b      	mov	r3, r9
 8006372:	aa03      	add	r2, sp, #12
 8006374:	4621      	mov	r1, r4
 8006376:	4640      	mov	r0, r8
 8006378:	f7ff fee2 	bl	8006140 <_printf_common>
 800637c:	3001      	adds	r0, #1
 800637e:	d14c      	bne.n	800641a <_printf_i+0x1fe>
 8006380:	f04f 30ff 	mov.w	r0, #4294967295
 8006384:	b004      	add	sp, #16
 8006386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800638a:	4835      	ldr	r0, [pc, #212]	; (8006460 <_printf_i+0x244>)
 800638c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006390:	6829      	ldr	r1, [r5, #0]
 8006392:	6823      	ldr	r3, [r4, #0]
 8006394:	f851 6b04 	ldr.w	r6, [r1], #4
 8006398:	6029      	str	r1, [r5, #0]
 800639a:	061d      	lsls	r5, r3, #24
 800639c:	d514      	bpl.n	80063c8 <_printf_i+0x1ac>
 800639e:	07df      	lsls	r7, r3, #31
 80063a0:	bf44      	itt	mi
 80063a2:	f043 0320 	orrmi.w	r3, r3, #32
 80063a6:	6023      	strmi	r3, [r4, #0]
 80063a8:	b91e      	cbnz	r6, 80063b2 <_printf_i+0x196>
 80063aa:	6823      	ldr	r3, [r4, #0]
 80063ac:	f023 0320 	bic.w	r3, r3, #32
 80063b0:	6023      	str	r3, [r4, #0]
 80063b2:	2310      	movs	r3, #16
 80063b4:	e7b0      	b.n	8006318 <_printf_i+0xfc>
 80063b6:	6823      	ldr	r3, [r4, #0]
 80063b8:	f043 0320 	orr.w	r3, r3, #32
 80063bc:	6023      	str	r3, [r4, #0]
 80063be:	2378      	movs	r3, #120	; 0x78
 80063c0:	4828      	ldr	r0, [pc, #160]	; (8006464 <_printf_i+0x248>)
 80063c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063c6:	e7e3      	b.n	8006390 <_printf_i+0x174>
 80063c8:	0659      	lsls	r1, r3, #25
 80063ca:	bf48      	it	mi
 80063cc:	b2b6      	uxthmi	r6, r6
 80063ce:	e7e6      	b.n	800639e <_printf_i+0x182>
 80063d0:	4615      	mov	r5, r2
 80063d2:	e7bb      	b.n	800634c <_printf_i+0x130>
 80063d4:	682b      	ldr	r3, [r5, #0]
 80063d6:	6826      	ldr	r6, [r4, #0]
 80063d8:	6961      	ldr	r1, [r4, #20]
 80063da:	1d18      	adds	r0, r3, #4
 80063dc:	6028      	str	r0, [r5, #0]
 80063de:	0635      	lsls	r5, r6, #24
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	d501      	bpl.n	80063e8 <_printf_i+0x1cc>
 80063e4:	6019      	str	r1, [r3, #0]
 80063e6:	e002      	b.n	80063ee <_printf_i+0x1d2>
 80063e8:	0670      	lsls	r0, r6, #25
 80063ea:	d5fb      	bpl.n	80063e4 <_printf_i+0x1c8>
 80063ec:	8019      	strh	r1, [r3, #0]
 80063ee:	2300      	movs	r3, #0
 80063f0:	6123      	str	r3, [r4, #16]
 80063f2:	4615      	mov	r5, r2
 80063f4:	e7ba      	b.n	800636c <_printf_i+0x150>
 80063f6:	682b      	ldr	r3, [r5, #0]
 80063f8:	1d1a      	adds	r2, r3, #4
 80063fa:	602a      	str	r2, [r5, #0]
 80063fc:	681d      	ldr	r5, [r3, #0]
 80063fe:	6862      	ldr	r2, [r4, #4]
 8006400:	2100      	movs	r1, #0
 8006402:	4628      	mov	r0, r5
 8006404:	f7f9 fec4 	bl	8000190 <memchr>
 8006408:	b108      	cbz	r0, 800640e <_printf_i+0x1f2>
 800640a:	1b40      	subs	r0, r0, r5
 800640c:	6060      	str	r0, [r4, #4]
 800640e:	6863      	ldr	r3, [r4, #4]
 8006410:	6123      	str	r3, [r4, #16]
 8006412:	2300      	movs	r3, #0
 8006414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006418:	e7a8      	b.n	800636c <_printf_i+0x150>
 800641a:	6923      	ldr	r3, [r4, #16]
 800641c:	462a      	mov	r2, r5
 800641e:	4649      	mov	r1, r9
 8006420:	4640      	mov	r0, r8
 8006422:	47d0      	blx	sl
 8006424:	3001      	adds	r0, #1
 8006426:	d0ab      	beq.n	8006380 <_printf_i+0x164>
 8006428:	6823      	ldr	r3, [r4, #0]
 800642a:	079b      	lsls	r3, r3, #30
 800642c:	d413      	bmi.n	8006456 <_printf_i+0x23a>
 800642e:	68e0      	ldr	r0, [r4, #12]
 8006430:	9b03      	ldr	r3, [sp, #12]
 8006432:	4298      	cmp	r0, r3
 8006434:	bfb8      	it	lt
 8006436:	4618      	movlt	r0, r3
 8006438:	e7a4      	b.n	8006384 <_printf_i+0x168>
 800643a:	2301      	movs	r3, #1
 800643c:	4632      	mov	r2, r6
 800643e:	4649      	mov	r1, r9
 8006440:	4640      	mov	r0, r8
 8006442:	47d0      	blx	sl
 8006444:	3001      	adds	r0, #1
 8006446:	d09b      	beq.n	8006380 <_printf_i+0x164>
 8006448:	3501      	adds	r5, #1
 800644a:	68e3      	ldr	r3, [r4, #12]
 800644c:	9903      	ldr	r1, [sp, #12]
 800644e:	1a5b      	subs	r3, r3, r1
 8006450:	42ab      	cmp	r3, r5
 8006452:	dcf2      	bgt.n	800643a <_printf_i+0x21e>
 8006454:	e7eb      	b.n	800642e <_printf_i+0x212>
 8006456:	2500      	movs	r5, #0
 8006458:	f104 0619 	add.w	r6, r4, #25
 800645c:	e7f5      	b.n	800644a <_printf_i+0x22e>
 800645e:	bf00      	nop
 8006460:	0800a56e 	.word	0x0800a56e
 8006464:	0800a57f 	.word	0x0800a57f

08006468 <_scanf_float>:
 8006468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646c:	b087      	sub	sp, #28
 800646e:	4617      	mov	r7, r2
 8006470:	9303      	str	r3, [sp, #12]
 8006472:	688b      	ldr	r3, [r1, #8]
 8006474:	1e5a      	subs	r2, r3, #1
 8006476:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800647a:	bf83      	ittte	hi
 800647c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006480:	195b      	addhi	r3, r3, r5
 8006482:	9302      	strhi	r3, [sp, #8]
 8006484:	2300      	movls	r3, #0
 8006486:	bf86      	itte	hi
 8006488:	f240 135d 	movwhi	r3, #349	; 0x15d
 800648c:	608b      	strhi	r3, [r1, #8]
 800648e:	9302      	strls	r3, [sp, #8]
 8006490:	680b      	ldr	r3, [r1, #0]
 8006492:	468b      	mov	fp, r1
 8006494:	2500      	movs	r5, #0
 8006496:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800649a:	f84b 3b1c 	str.w	r3, [fp], #28
 800649e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80064a2:	4680      	mov	r8, r0
 80064a4:	460c      	mov	r4, r1
 80064a6:	465e      	mov	r6, fp
 80064a8:	46aa      	mov	sl, r5
 80064aa:	46a9      	mov	r9, r5
 80064ac:	9501      	str	r5, [sp, #4]
 80064ae:	68a2      	ldr	r2, [r4, #8]
 80064b0:	b152      	cbz	r2, 80064c8 <_scanf_float+0x60>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	2b4e      	cmp	r3, #78	; 0x4e
 80064b8:	d864      	bhi.n	8006584 <_scanf_float+0x11c>
 80064ba:	2b40      	cmp	r3, #64	; 0x40
 80064bc:	d83c      	bhi.n	8006538 <_scanf_float+0xd0>
 80064be:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80064c2:	b2c8      	uxtb	r0, r1
 80064c4:	280e      	cmp	r0, #14
 80064c6:	d93a      	bls.n	800653e <_scanf_float+0xd6>
 80064c8:	f1b9 0f00 	cmp.w	r9, #0
 80064cc:	d003      	beq.n	80064d6 <_scanf_float+0x6e>
 80064ce:	6823      	ldr	r3, [r4, #0]
 80064d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064d4:	6023      	str	r3, [r4, #0]
 80064d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064da:	f1ba 0f01 	cmp.w	sl, #1
 80064de:	f200 8113 	bhi.w	8006708 <_scanf_float+0x2a0>
 80064e2:	455e      	cmp	r6, fp
 80064e4:	f200 8105 	bhi.w	80066f2 <_scanf_float+0x28a>
 80064e8:	2501      	movs	r5, #1
 80064ea:	4628      	mov	r0, r5
 80064ec:	b007      	add	sp, #28
 80064ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064f2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80064f6:	2a0d      	cmp	r2, #13
 80064f8:	d8e6      	bhi.n	80064c8 <_scanf_float+0x60>
 80064fa:	a101      	add	r1, pc, #4	; (adr r1, 8006500 <_scanf_float+0x98>)
 80064fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006500:	0800663f 	.word	0x0800663f
 8006504:	080064c9 	.word	0x080064c9
 8006508:	080064c9 	.word	0x080064c9
 800650c:	080064c9 	.word	0x080064c9
 8006510:	0800669f 	.word	0x0800669f
 8006514:	08006677 	.word	0x08006677
 8006518:	080064c9 	.word	0x080064c9
 800651c:	080064c9 	.word	0x080064c9
 8006520:	0800664d 	.word	0x0800664d
 8006524:	080064c9 	.word	0x080064c9
 8006528:	080064c9 	.word	0x080064c9
 800652c:	080064c9 	.word	0x080064c9
 8006530:	080064c9 	.word	0x080064c9
 8006534:	08006605 	.word	0x08006605
 8006538:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800653c:	e7db      	b.n	80064f6 <_scanf_float+0x8e>
 800653e:	290e      	cmp	r1, #14
 8006540:	d8c2      	bhi.n	80064c8 <_scanf_float+0x60>
 8006542:	a001      	add	r0, pc, #4	; (adr r0, 8006548 <_scanf_float+0xe0>)
 8006544:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006548:	080065f7 	.word	0x080065f7
 800654c:	080064c9 	.word	0x080064c9
 8006550:	080065f7 	.word	0x080065f7
 8006554:	0800668b 	.word	0x0800668b
 8006558:	080064c9 	.word	0x080064c9
 800655c:	080065a5 	.word	0x080065a5
 8006560:	080065e1 	.word	0x080065e1
 8006564:	080065e1 	.word	0x080065e1
 8006568:	080065e1 	.word	0x080065e1
 800656c:	080065e1 	.word	0x080065e1
 8006570:	080065e1 	.word	0x080065e1
 8006574:	080065e1 	.word	0x080065e1
 8006578:	080065e1 	.word	0x080065e1
 800657c:	080065e1 	.word	0x080065e1
 8006580:	080065e1 	.word	0x080065e1
 8006584:	2b6e      	cmp	r3, #110	; 0x6e
 8006586:	d809      	bhi.n	800659c <_scanf_float+0x134>
 8006588:	2b60      	cmp	r3, #96	; 0x60
 800658a:	d8b2      	bhi.n	80064f2 <_scanf_float+0x8a>
 800658c:	2b54      	cmp	r3, #84	; 0x54
 800658e:	d077      	beq.n	8006680 <_scanf_float+0x218>
 8006590:	2b59      	cmp	r3, #89	; 0x59
 8006592:	d199      	bne.n	80064c8 <_scanf_float+0x60>
 8006594:	2d07      	cmp	r5, #7
 8006596:	d197      	bne.n	80064c8 <_scanf_float+0x60>
 8006598:	2508      	movs	r5, #8
 800659a:	e029      	b.n	80065f0 <_scanf_float+0x188>
 800659c:	2b74      	cmp	r3, #116	; 0x74
 800659e:	d06f      	beq.n	8006680 <_scanf_float+0x218>
 80065a0:	2b79      	cmp	r3, #121	; 0x79
 80065a2:	e7f6      	b.n	8006592 <_scanf_float+0x12a>
 80065a4:	6821      	ldr	r1, [r4, #0]
 80065a6:	05c8      	lsls	r0, r1, #23
 80065a8:	d51a      	bpl.n	80065e0 <_scanf_float+0x178>
 80065aa:	9b02      	ldr	r3, [sp, #8]
 80065ac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80065b0:	6021      	str	r1, [r4, #0]
 80065b2:	f109 0901 	add.w	r9, r9, #1
 80065b6:	b11b      	cbz	r3, 80065c0 <_scanf_float+0x158>
 80065b8:	3b01      	subs	r3, #1
 80065ba:	3201      	adds	r2, #1
 80065bc:	9302      	str	r3, [sp, #8]
 80065be:	60a2      	str	r2, [r4, #8]
 80065c0:	68a3      	ldr	r3, [r4, #8]
 80065c2:	3b01      	subs	r3, #1
 80065c4:	60a3      	str	r3, [r4, #8]
 80065c6:	6923      	ldr	r3, [r4, #16]
 80065c8:	3301      	adds	r3, #1
 80065ca:	6123      	str	r3, [r4, #16]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	3b01      	subs	r3, #1
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	607b      	str	r3, [r7, #4]
 80065d4:	f340 8084 	ble.w	80066e0 <_scanf_float+0x278>
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	3301      	adds	r3, #1
 80065dc:	603b      	str	r3, [r7, #0]
 80065de:	e766      	b.n	80064ae <_scanf_float+0x46>
 80065e0:	eb1a 0f05 	cmn.w	sl, r5
 80065e4:	f47f af70 	bne.w	80064c8 <_scanf_float+0x60>
 80065e8:	6822      	ldr	r2, [r4, #0]
 80065ea:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80065ee:	6022      	str	r2, [r4, #0]
 80065f0:	f806 3b01 	strb.w	r3, [r6], #1
 80065f4:	e7e4      	b.n	80065c0 <_scanf_float+0x158>
 80065f6:	6822      	ldr	r2, [r4, #0]
 80065f8:	0610      	lsls	r0, r2, #24
 80065fa:	f57f af65 	bpl.w	80064c8 <_scanf_float+0x60>
 80065fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006602:	e7f4      	b.n	80065ee <_scanf_float+0x186>
 8006604:	f1ba 0f00 	cmp.w	sl, #0
 8006608:	d10e      	bne.n	8006628 <_scanf_float+0x1c0>
 800660a:	f1b9 0f00 	cmp.w	r9, #0
 800660e:	d10e      	bne.n	800662e <_scanf_float+0x1c6>
 8006610:	6822      	ldr	r2, [r4, #0]
 8006612:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006616:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800661a:	d108      	bne.n	800662e <_scanf_float+0x1c6>
 800661c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006620:	6022      	str	r2, [r4, #0]
 8006622:	f04f 0a01 	mov.w	sl, #1
 8006626:	e7e3      	b.n	80065f0 <_scanf_float+0x188>
 8006628:	f1ba 0f02 	cmp.w	sl, #2
 800662c:	d055      	beq.n	80066da <_scanf_float+0x272>
 800662e:	2d01      	cmp	r5, #1
 8006630:	d002      	beq.n	8006638 <_scanf_float+0x1d0>
 8006632:	2d04      	cmp	r5, #4
 8006634:	f47f af48 	bne.w	80064c8 <_scanf_float+0x60>
 8006638:	3501      	adds	r5, #1
 800663a:	b2ed      	uxtb	r5, r5
 800663c:	e7d8      	b.n	80065f0 <_scanf_float+0x188>
 800663e:	f1ba 0f01 	cmp.w	sl, #1
 8006642:	f47f af41 	bne.w	80064c8 <_scanf_float+0x60>
 8006646:	f04f 0a02 	mov.w	sl, #2
 800664a:	e7d1      	b.n	80065f0 <_scanf_float+0x188>
 800664c:	b97d      	cbnz	r5, 800666e <_scanf_float+0x206>
 800664e:	f1b9 0f00 	cmp.w	r9, #0
 8006652:	f47f af3c 	bne.w	80064ce <_scanf_float+0x66>
 8006656:	6822      	ldr	r2, [r4, #0]
 8006658:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800665c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006660:	f47f af39 	bne.w	80064d6 <_scanf_float+0x6e>
 8006664:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006668:	6022      	str	r2, [r4, #0]
 800666a:	2501      	movs	r5, #1
 800666c:	e7c0      	b.n	80065f0 <_scanf_float+0x188>
 800666e:	2d03      	cmp	r5, #3
 8006670:	d0e2      	beq.n	8006638 <_scanf_float+0x1d0>
 8006672:	2d05      	cmp	r5, #5
 8006674:	e7de      	b.n	8006634 <_scanf_float+0x1cc>
 8006676:	2d02      	cmp	r5, #2
 8006678:	f47f af26 	bne.w	80064c8 <_scanf_float+0x60>
 800667c:	2503      	movs	r5, #3
 800667e:	e7b7      	b.n	80065f0 <_scanf_float+0x188>
 8006680:	2d06      	cmp	r5, #6
 8006682:	f47f af21 	bne.w	80064c8 <_scanf_float+0x60>
 8006686:	2507      	movs	r5, #7
 8006688:	e7b2      	b.n	80065f0 <_scanf_float+0x188>
 800668a:	6822      	ldr	r2, [r4, #0]
 800668c:	0591      	lsls	r1, r2, #22
 800668e:	f57f af1b 	bpl.w	80064c8 <_scanf_float+0x60>
 8006692:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006696:	6022      	str	r2, [r4, #0]
 8006698:	f8cd 9004 	str.w	r9, [sp, #4]
 800669c:	e7a8      	b.n	80065f0 <_scanf_float+0x188>
 800669e:	6822      	ldr	r2, [r4, #0]
 80066a0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80066a4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80066a8:	d006      	beq.n	80066b8 <_scanf_float+0x250>
 80066aa:	0550      	lsls	r0, r2, #21
 80066ac:	f57f af0c 	bpl.w	80064c8 <_scanf_float+0x60>
 80066b0:	f1b9 0f00 	cmp.w	r9, #0
 80066b4:	f43f af0f 	beq.w	80064d6 <_scanf_float+0x6e>
 80066b8:	0591      	lsls	r1, r2, #22
 80066ba:	bf58      	it	pl
 80066bc:	9901      	ldrpl	r1, [sp, #4]
 80066be:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80066c2:	bf58      	it	pl
 80066c4:	eba9 0101 	subpl.w	r1, r9, r1
 80066c8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80066cc:	bf58      	it	pl
 80066ce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80066d2:	6022      	str	r2, [r4, #0]
 80066d4:	f04f 0900 	mov.w	r9, #0
 80066d8:	e78a      	b.n	80065f0 <_scanf_float+0x188>
 80066da:	f04f 0a03 	mov.w	sl, #3
 80066de:	e787      	b.n	80065f0 <_scanf_float+0x188>
 80066e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80066e4:	4639      	mov	r1, r7
 80066e6:	4640      	mov	r0, r8
 80066e8:	4798      	blx	r3
 80066ea:	2800      	cmp	r0, #0
 80066ec:	f43f aedf 	beq.w	80064ae <_scanf_float+0x46>
 80066f0:	e6ea      	b.n	80064c8 <_scanf_float+0x60>
 80066f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80066f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80066fa:	463a      	mov	r2, r7
 80066fc:	4640      	mov	r0, r8
 80066fe:	4798      	blx	r3
 8006700:	6923      	ldr	r3, [r4, #16]
 8006702:	3b01      	subs	r3, #1
 8006704:	6123      	str	r3, [r4, #16]
 8006706:	e6ec      	b.n	80064e2 <_scanf_float+0x7a>
 8006708:	1e6b      	subs	r3, r5, #1
 800670a:	2b06      	cmp	r3, #6
 800670c:	d825      	bhi.n	800675a <_scanf_float+0x2f2>
 800670e:	2d02      	cmp	r5, #2
 8006710:	d836      	bhi.n	8006780 <_scanf_float+0x318>
 8006712:	455e      	cmp	r6, fp
 8006714:	f67f aee8 	bls.w	80064e8 <_scanf_float+0x80>
 8006718:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800671c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006720:	463a      	mov	r2, r7
 8006722:	4640      	mov	r0, r8
 8006724:	4798      	blx	r3
 8006726:	6923      	ldr	r3, [r4, #16]
 8006728:	3b01      	subs	r3, #1
 800672a:	6123      	str	r3, [r4, #16]
 800672c:	e7f1      	b.n	8006712 <_scanf_float+0x2aa>
 800672e:	9802      	ldr	r0, [sp, #8]
 8006730:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006734:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006738:	9002      	str	r0, [sp, #8]
 800673a:	463a      	mov	r2, r7
 800673c:	4640      	mov	r0, r8
 800673e:	4798      	blx	r3
 8006740:	6923      	ldr	r3, [r4, #16]
 8006742:	3b01      	subs	r3, #1
 8006744:	6123      	str	r3, [r4, #16]
 8006746:	f10a 3aff 	add.w	sl, sl, #4294967295
 800674a:	fa5f fa8a 	uxtb.w	sl, sl
 800674e:	f1ba 0f02 	cmp.w	sl, #2
 8006752:	d1ec      	bne.n	800672e <_scanf_float+0x2c6>
 8006754:	3d03      	subs	r5, #3
 8006756:	b2ed      	uxtb	r5, r5
 8006758:	1b76      	subs	r6, r6, r5
 800675a:	6823      	ldr	r3, [r4, #0]
 800675c:	05da      	lsls	r2, r3, #23
 800675e:	d52f      	bpl.n	80067c0 <_scanf_float+0x358>
 8006760:	055b      	lsls	r3, r3, #21
 8006762:	d510      	bpl.n	8006786 <_scanf_float+0x31e>
 8006764:	455e      	cmp	r6, fp
 8006766:	f67f aebf 	bls.w	80064e8 <_scanf_float+0x80>
 800676a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800676e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006772:	463a      	mov	r2, r7
 8006774:	4640      	mov	r0, r8
 8006776:	4798      	blx	r3
 8006778:	6923      	ldr	r3, [r4, #16]
 800677a:	3b01      	subs	r3, #1
 800677c:	6123      	str	r3, [r4, #16]
 800677e:	e7f1      	b.n	8006764 <_scanf_float+0x2fc>
 8006780:	46aa      	mov	sl, r5
 8006782:	9602      	str	r6, [sp, #8]
 8006784:	e7df      	b.n	8006746 <_scanf_float+0x2de>
 8006786:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800678a:	6923      	ldr	r3, [r4, #16]
 800678c:	2965      	cmp	r1, #101	; 0x65
 800678e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006792:	f106 35ff 	add.w	r5, r6, #4294967295
 8006796:	6123      	str	r3, [r4, #16]
 8006798:	d00c      	beq.n	80067b4 <_scanf_float+0x34c>
 800679a:	2945      	cmp	r1, #69	; 0x45
 800679c:	d00a      	beq.n	80067b4 <_scanf_float+0x34c>
 800679e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067a2:	463a      	mov	r2, r7
 80067a4:	4640      	mov	r0, r8
 80067a6:	4798      	blx	r3
 80067a8:	6923      	ldr	r3, [r4, #16]
 80067aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80067ae:	3b01      	subs	r3, #1
 80067b0:	1eb5      	subs	r5, r6, #2
 80067b2:	6123      	str	r3, [r4, #16]
 80067b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067b8:	463a      	mov	r2, r7
 80067ba:	4640      	mov	r0, r8
 80067bc:	4798      	blx	r3
 80067be:	462e      	mov	r6, r5
 80067c0:	6825      	ldr	r5, [r4, #0]
 80067c2:	f015 0510 	ands.w	r5, r5, #16
 80067c6:	d159      	bne.n	800687c <_scanf_float+0x414>
 80067c8:	7035      	strb	r5, [r6, #0]
 80067ca:	6823      	ldr	r3, [r4, #0]
 80067cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80067d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067d4:	d11b      	bne.n	800680e <_scanf_float+0x3a6>
 80067d6:	9b01      	ldr	r3, [sp, #4]
 80067d8:	454b      	cmp	r3, r9
 80067da:	eba3 0209 	sub.w	r2, r3, r9
 80067de:	d123      	bne.n	8006828 <_scanf_float+0x3c0>
 80067e0:	2200      	movs	r2, #0
 80067e2:	4659      	mov	r1, fp
 80067e4:	4640      	mov	r0, r8
 80067e6:	f000 fe99 	bl	800751c <_strtod_r>
 80067ea:	6822      	ldr	r2, [r4, #0]
 80067ec:	9b03      	ldr	r3, [sp, #12]
 80067ee:	f012 0f02 	tst.w	r2, #2
 80067f2:	ec57 6b10 	vmov	r6, r7, d0
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	d021      	beq.n	800683e <_scanf_float+0x3d6>
 80067fa:	9903      	ldr	r1, [sp, #12]
 80067fc:	1d1a      	adds	r2, r3, #4
 80067fe:	600a      	str	r2, [r1, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	e9c3 6700 	strd	r6, r7, [r3]
 8006806:	68e3      	ldr	r3, [r4, #12]
 8006808:	3301      	adds	r3, #1
 800680a:	60e3      	str	r3, [r4, #12]
 800680c:	e66d      	b.n	80064ea <_scanf_float+0x82>
 800680e:	9b04      	ldr	r3, [sp, #16]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d0e5      	beq.n	80067e0 <_scanf_float+0x378>
 8006814:	9905      	ldr	r1, [sp, #20]
 8006816:	230a      	movs	r3, #10
 8006818:	462a      	mov	r2, r5
 800681a:	3101      	adds	r1, #1
 800681c:	4640      	mov	r0, r8
 800681e:	f000 ff05 	bl	800762c <_strtol_r>
 8006822:	9b04      	ldr	r3, [sp, #16]
 8006824:	9e05      	ldr	r6, [sp, #20]
 8006826:	1ac2      	subs	r2, r0, r3
 8006828:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800682c:	429e      	cmp	r6, r3
 800682e:	bf28      	it	cs
 8006830:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006834:	4912      	ldr	r1, [pc, #72]	; (8006880 <_scanf_float+0x418>)
 8006836:	4630      	mov	r0, r6
 8006838:	f000 f82c 	bl	8006894 <siprintf>
 800683c:	e7d0      	b.n	80067e0 <_scanf_float+0x378>
 800683e:	9903      	ldr	r1, [sp, #12]
 8006840:	f012 0f04 	tst.w	r2, #4
 8006844:	f103 0204 	add.w	r2, r3, #4
 8006848:	600a      	str	r2, [r1, #0]
 800684a:	d1d9      	bne.n	8006800 <_scanf_float+0x398>
 800684c:	f8d3 8000 	ldr.w	r8, [r3]
 8006850:	ee10 2a10 	vmov	r2, s0
 8006854:	ee10 0a10 	vmov	r0, s0
 8006858:	463b      	mov	r3, r7
 800685a:	4639      	mov	r1, r7
 800685c:	f7fa f93e 	bl	8000adc <__aeabi_dcmpun>
 8006860:	b128      	cbz	r0, 800686e <_scanf_float+0x406>
 8006862:	4808      	ldr	r0, [pc, #32]	; (8006884 <_scanf_float+0x41c>)
 8006864:	f000 f810 	bl	8006888 <nanf>
 8006868:	ed88 0a00 	vstr	s0, [r8]
 800686c:	e7cb      	b.n	8006806 <_scanf_float+0x39e>
 800686e:	4630      	mov	r0, r6
 8006870:	4639      	mov	r1, r7
 8006872:	f7fa f991 	bl	8000b98 <__aeabi_d2f>
 8006876:	f8c8 0000 	str.w	r0, [r8]
 800687a:	e7c4      	b.n	8006806 <_scanf_float+0x39e>
 800687c:	2500      	movs	r5, #0
 800687e:	e634      	b.n	80064ea <_scanf_float+0x82>
 8006880:	0800a590 	.word	0x0800a590
 8006884:	0800a998 	.word	0x0800a998

08006888 <nanf>:
 8006888:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006890 <nanf+0x8>
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	7fc00000 	.word	0x7fc00000

08006894 <siprintf>:
 8006894:	b40e      	push	{r1, r2, r3}
 8006896:	b500      	push	{lr}
 8006898:	b09c      	sub	sp, #112	; 0x70
 800689a:	ab1d      	add	r3, sp, #116	; 0x74
 800689c:	9002      	str	r0, [sp, #8]
 800689e:	9006      	str	r0, [sp, #24]
 80068a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80068a4:	4809      	ldr	r0, [pc, #36]	; (80068cc <siprintf+0x38>)
 80068a6:	9107      	str	r1, [sp, #28]
 80068a8:	9104      	str	r1, [sp, #16]
 80068aa:	4909      	ldr	r1, [pc, #36]	; (80068d0 <siprintf+0x3c>)
 80068ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80068b0:	9105      	str	r1, [sp, #20]
 80068b2:	6800      	ldr	r0, [r0, #0]
 80068b4:	9301      	str	r3, [sp, #4]
 80068b6:	a902      	add	r1, sp, #8
 80068b8:	f002 fed6 	bl	8009668 <_svfiprintf_r>
 80068bc:	9b02      	ldr	r3, [sp, #8]
 80068be:	2200      	movs	r2, #0
 80068c0:	701a      	strb	r2, [r3, #0]
 80068c2:	b01c      	add	sp, #112	; 0x70
 80068c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80068c8:	b003      	add	sp, #12
 80068ca:	4770      	bx	lr
 80068cc:	20000108 	.word	0x20000108
 80068d0:	ffff0208 	.word	0xffff0208

080068d4 <sulp>:
 80068d4:	b570      	push	{r4, r5, r6, lr}
 80068d6:	4604      	mov	r4, r0
 80068d8:	460d      	mov	r5, r1
 80068da:	ec45 4b10 	vmov	d0, r4, r5
 80068de:	4616      	mov	r6, r2
 80068e0:	f002 fc20 	bl	8009124 <__ulp>
 80068e4:	ec51 0b10 	vmov	r0, r1, d0
 80068e8:	b17e      	cbz	r6, 800690a <sulp+0x36>
 80068ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80068ee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	dd09      	ble.n	800690a <sulp+0x36>
 80068f6:	051b      	lsls	r3, r3, #20
 80068f8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80068fc:	2400      	movs	r4, #0
 80068fe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006902:	4622      	mov	r2, r4
 8006904:	462b      	mov	r3, r5
 8006906:	f7f9 fe4f 	bl	80005a8 <__aeabi_dmul>
 800690a:	bd70      	pop	{r4, r5, r6, pc}
 800690c:	0000      	movs	r0, r0
	...

08006910 <_strtod_l>:
 8006910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006914:	ed2d 8b02 	vpush	{d8}
 8006918:	b09d      	sub	sp, #116	; 0x74
 800691a:	461f      	mov	r7, r3
 800691c:	2300      	movs	r3, #0
 800691e:	9318      	str	r3, [sp, #96]	; 0x60
 8006920:	4ba2      	ldr	r3, [pc, #648]	; (8006bac <_strtod_l+0x29c>)
 8006922:	9213      	str	r2, [sp, #76]	; 0x4c
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	9305      	str	r3, [sp, #20]
 8006928:	4604      	mov	r4, r0
 800692a:	4618      	mov	r0, r3
 800692c:	4688      	mov	r8, r1
 800692e:	f7f9 fc27 	bl	8000180 <strlen>
 8006932:	f04f 0a00 	mov.w	sl, #0
 8006936:	4605      	mov	r5, r0
 8006938:	f04f 0b00 	mov.w	fp, #0
 800693c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006940:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006942:	781a      	ldrb	r2, [r3, #0]
 8006944:	2a2b      	cmp	r2, #43	; 0x2b
 8006946:	d04e      	beq.n	80069e6 <_strtod_l+0xd6>
 8006948:	d83b      	bhi.n	80069c2 <_strtod_l+0xb2>
 800694a:	2a0d      	cmp	r2, #13
 800694c:	d834      	bhi.n	80069b8 <_strtod_l+0xa8>
 800694e:	2a08      	cmp	r2, #8
 8006950:	d834      	bhi.n	80069bc <_strtod_l+0xac>
 8006952:	2a00      	cmp	r2, #0
 8006954:	d03e      	beq.n	80069d4 <_strtod_l+0xc4>
 8006956:	2300      	movs	r3, #0
 8006958:	930a      	str	r3, [sp, #40]	; 0x28
 800695a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800695c:	7833      	ldrb	r3, [r6, #0]
 800695e:	2b30      	cmp	r3, #48	; 0x30
 8006960:	f040 80b0 	bne.w	8006ac4 <_strtod_l+0x1b4>
 8006964:	7873      	ldrb	r3, [r6, #1]
 8006966:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800696a:	2b58      	cmp	r3, #88	; 0x58
 800696c:	d168      	bne.n	8006a40 <_strtod_l+0x130>
 800696e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006970:	9301      	str	r3, [sp, #4]
 8006972:	ab18      	add	r3, sp, #96	; 0x60
 8006974:	9702      	str	r7, [sp, #8]
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	4a8d      	ldr	r2, [pc, #564]	; (8006bb0 <_strtod_l+0x2a0>)
 800697a:	ab19      	add	r3, sp, #100	; 0x64
 800697c:	a917      	add	r1, sp, #92	; 0x5c
 800697e:	4620      	mov	r0, r4
 8006980:	f001 fd38 	bl	80083f4 <__gethex>
 8006984:	f010 0707 	ands.w	r7, r0, #7
 8006988:	4605      	mov	r5, r0
 800698a:	d005      	beq.n	8006998 <_strtod_l+0x88>
 800698c:	2f06      	cmp	r7, #6
 800698e:	d12c      	bne.n	80069ea <_strtod_l+0xda>
 8006990:	3601      	adds	r6, #1
 8006992:	2300      	movs	r3, #0
 8006994:	9617      	str	r6, [sp, #92]	; 0x5c
 8006996:	930a      	str	r3, [sp, #40]	; 0x28
 8006998:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800699a:	2b00      	cmp	r3, #0
 800699c:	f040 8590 	bne.w	80074c0 <_strtod_l+0xbb0>
 80069a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069a2:	b1eb      	cbz	r3, 80069e0 <_strtod_l+0xd0>
 80069a4:	4652      	mov	r2, sl
 80069a6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80069aa:	ec43 2b10 	vmov	d0, r2, r3
 80069ae:	b01d      	add	sp, #116	; 0x74
 80069b0:	ecbd 8b02 	vpop	{d8}
 80069b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b8:	2a20      	cmp	r2, #32
 80069ba:	d1cc      	bne.n	8006956 <_strtod_l+0x46>
 80069bc:	3301      	adds	r3, #1
 80069be:	9317      	str	r3, [sp, #92]	; 0x5c
 80069c0:	e7be      	b.n	8006940 <_strtod_l+0x30>
 80069c2:	2a2d      	cmp	r2, #45	; 0x2d
 80069c4:	d1c7      	bne.n	8006956 <_strtod_l+0x46>
 80069c6:	2201      	movs	r2, #1
 80069c8:	920a      	str	r2, [sp, #40]	; 0x28
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80069ce:	785b      	ldrb	r3, [r3, #1]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1c2      	bne.n	800695a <_strtod_l+0x4a>
 80069d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80069d6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f040 856e 	bne.w	80074bc <_strtod_l+0xbac>
 80069e0:	4652      	mov	r2, sl
 80069e2:	465b      	mov	r3, fp
 80069e4:	e7e1      	b.n	80069aa <_strtod_l+0x9a>
 80069e6:	2200      	movs	r2, #0
 80069e8:	e7ee      	b.n	80069c8 <_strtod_l+0xb8>
 80069ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80069ec:	b13a      	cbz	r2, 80069fe <_strtod_l+0xee>
 80069ee:	2135      	movs	r1, #53	; 0x35
 80069f0:	a81a      	add	r0, sp, #104	; 0x68
 80069f2:	f002 fca2 	bl	800933a <__copybits>
 80069f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80069f8:	4620      	mov	r0, r4
 80069fa:	f002 f861 	bl	8008ac0 <_Bfree>
 80069fe:	3f01      	subs	r7, #1
 8006a00:	2f04      	cmp	r7, #4
 8006a02:	d806      	bhi.n	8006a12 <_strtod_l+0x102>
 8006a04:	e8df f007 	tbb	[pc, r7]
 8006a08:	1714030a 	.word	0x1714030a
 8006a0c:	0a          	.byte	0x0a
 8006a0d:	00          	.byte	0x00
 8006a0e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006a12:	0728      	lsls	r0, r5, #28
 8006a14:	d5c0      	bpl.n	8006998 <_strtod_l+0x88>
 8006a16:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006a1a:	e7bd      	b.n	8006998 <_strtod_l+0x88>
 8006a1c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006a20:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006a22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006a26:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006a2a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006a2e:	e7f0      	b.n	8006a12 <_strtod_l+0x102>
 8006a30:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006bb4 <_strtod_l+0x2a4>
 8006a34:	e7ed      	b.n	8006a12 <_strtod_l+0x102>
 8006a36:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006a3a:	f04f 3aff 	mov.w	sl, #4294967295
 8006a3e:	e7e8      	b.n	8006a12 <_strtod_l+0x102>
 8006a40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a42:	1c5a      	adds	r2, r3, #1
 8006a44:	9217      	str	r2, [sp, #92]	; 0x5c
 8006a46:	785b      	ldrb	r3, [r3, #1]
 8006a48:	2b30      	cmp	r3, #48	; 0x30
 8006a4a:	d0f9      	beq.n	8006a40 <_strtod_l+0x130>
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d0a3      	beq.n	8006998 <_strtod_l+0x88>
 8006a50:	2301      	movs	r3, #1
 8006a52:	f04f 0900 	mov.w	r9, #0
 8006a56:	9304      	str	r3, [sp, #16]
 8006a58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a5a:	9308      	str	r3, [sp, #32]
 8006a5c:	f8cd 901c 	str.w	r9, [sp, #28]
 8006a60:	464f      	mov	r7, r9
 8006a62:	220a      	movs	r2, #10
 8006a64:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006a66:	7806      	ldrb	r6, [r0, #0]
 8006a68:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006a6c:	b2d9      	uxtb	r1, r3
 8006a6e:	2909      	cmp	r1, #9
 8006a70:	d92a      	bls.n	8006ac8 <_strtod_l+0x1b8>
 8006a72:	9905      	ldr	r1, [sp, #20]
 8006a74:	462a      	mov	r2, r5
 8006a76:	f002 ff0f 	bl	8009898 <strncmp>
 8006a7a:	b398      	cbz	r0, 8006ae4 <_strtod_l+0x1d4>
 8006a7c:	2000      	movs	r0, #0
 8006a7e:	4632      	mov	r2, r6
 8006a80:	463d      	mov	r5, r7
 8006a82:	9005      	str	r0, [sp, #20]
 8006a84:	4603      	mov	r3, r0
 8006a86:	2a65      	cmp	r2, #101	; 0x65
 8006a88:	d001      	beq.n	8006a8e <_strtod_l+0x17e>
 8006a8a:	2a45      	cmp	r2, #69	; 0x45
 8006a8c:	d118      	bne.n	8006ac0 <_strtod_l+0x1b0>
 8006a8e:	b91d      	cbnz	r5, 8006a98 <_strtod_l+0x188>
 8006a90:	9a04      	ldr	r2, [sp, #16]
 8006a92:	4302      	orrs	r2, r0
 8006a94:	d09e      	beq.n	80069d4 <_strtod_l+0xc4>
 8006a96:	2500      	movs	r5, #0
 8006a98:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006a9c:	f108 0201 	add.w	r2, r8, #1
 8006aa0:	9217      	str	r2, [sp, #92]	; 0x5c
 8006aa2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006aa6:	2a2b      	cmp	r2, #43	; 0x2b
 8006aa8:	d075      	beq.n	8006b96 <_strtod_l+0x286>
 8006aaa:	2a2d      	cmp	r2, #45	; 0x2d
 8006aac:	d07b      	beq.n	8006ba6 <_strtod_l+0x296>
 8006aae:	f04f 0c00 	mov.w	ip, #0
 8006ab2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006ab6:	2909      	cmp	r1, #9
 8006ab8:	f240 8082 	bls.w	8006bc0 <_strtod_l+0x2b0>
 8006abc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006ac0:	2600      	movs	r6, #0
 8006ac2:	e09d      	b.n	8006c00 <_strtod_l+0x2f0>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	e7c4      	b.n	8006a52 <_strtod_l+0x142>
 8006ac8:	2f08      	cmp	r7, #8
 8006aca:	bfd8      	it	le
 8006acc:	9907      	ldrle	r1, [sp, #28]
 8006ace:	f100 0001 	add.w	r0, r0, #1
 8006ad2:	bfda      	itte	le
 8006ad4:	fb02 3301 	mlale	r3, r2, r1, r3
 8006ad8:	9307      	strle	r3, [sp, #28]
 8006ada:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006ade:	3701      	adds	r7, #1
 8006ae0:	9017      	str	r0, [sp, #92]	; 0x5c
 8006ae2:	e7bf      	b.n	8006a64 <_strtod_l+0x154>
 8006ae4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ae6:	195a      	adds	r2, r3, r5
 8006ae8:	9217      	str	r2, [sp, #92]	; 0x5c
 8006aea:	5d5a      	ldrb	r2, [r3, r5]
 8006aec:	2f00      	cmp	r7, #0
 8006aee:	d037      	beq.n	8006b60 <_strtod_l+0x250>
 8006af0:	9005      	str	r0, [sp, #20]
 8006af2:	463d      	mov	r5, r7
 8006af4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006af8:	2b09      	cmp	r3, #9
 8006afa:	d912      	bls.n	8006b22 <_strtod_l+0x212>
 8006afc:	2301      	movs	r3, #1
 8006afe:	e7c2      	b.n	8006a86 <_strtod_l+0x176>
 8006b00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b02:	1c5a      	adds	r2, r3, #1
 8006b04:	9217      	str	r2, [sp, #92]	; 0x5c
 8006b06:	785a      	ldrb	r2, [r3, #1]
 8006b08:	3001      	adds	r0, #1
 8006b0a:	2a30      	cmp	r2, #48	; 0x30
 8006b0c:	d0f8      	beq.n	8006b00 <_strtod_l+0x1f0>
 8006b0e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006b12:	2b08      	cmp	r3, #8
 8006b14:	f200 84d9 	bhi.w	80074ca <_strtod_l+0xbba>
 8006b18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b1a:	9005      	str	r0, [sp, #20]
 8006b1c:	2000      	movs	r0, #0
 8006b1e:	9308      	str	r3, [sp, #32]
 8006b20:	4605      	mov	r5, r0
 8006b22:	3a30      	subs	r2, #48	; 0x30
 8006b24:	f100 0301 	add.w	r3, r0, #1
 8006b28:	d014      	beq.n	8006b54 <_strtod_l+0x244>
 8006b2a:	9905      	ldr	r1, [sp, #20]
 8006b2c:	4419      	add	r1, r3
 8006b2e:	9105      	str	r1, [sp, #20]
 8006b30:	462b      	mov	r3, r5
 8006b32:	eb00 0e05 	add.w	lr, r0, r5
 8006b36:	210a      	movs	r1, #10
 8006b38:	4573      	cmp	r3, lr
 8006b3a:	d113      	bne.n	8006b64 <_strtod_l+0x254>
 8006b3c:	182b      	adds	r3, r5, r0
 8006b3e:	2b08      	cmp	r3, #8
 8006b40:	f105 0501 	add.w	r5, r5, #1
 8006b44:	4405      	add	r5, r0
 8006b46:	dc1c      	bgt.n	8006b82 <_strtod_l+0x272>
 8006b48:	9907      	ldr	r1, [sp, #28]
 8006b4a:	230a      	movs	r3, #10
 8006b4c:	fb03 2301 	mla	r3, r3, r1, r2
 8006b50:	9307      	str	r3, [sp, #28]
 8006b52:	2300      	movs	r3, #0
 8006b54:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006b56:	1c51      	adds	r1, r2, #1
 8006b58:	9117      	str	r1, [sp, #92]	; 0x5c
 8006b5a:	7852      	ldrb	r2, [r2, #1]
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	e7c9      	b.n	8006af4 <_strtod_l+0x1e4>
 8006b60:	4638      	mov	r0, r7
 8006b62:	e7d2      	b.n	8006b0a <_strtod_l+0x1fa>
 8006b64:	2b08      	cmp	r3, #8
 8006b66:	dc04      	bgt.n	8006b72 <_strtod_l+0x262>
 8006b68:	9e07      	ldr	r6, [sp, #28]
 8006b6a:	434e      	muls	r6, r1
 8006b6c:	9607      	str	r6, [sp, #28]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	e7e2      	b.n	8006b38 <_strtod_l+0x228>
 8006b72:	f103 0c01 	add.w	ip, r3, #1
 8006b76:	f1bc 0f10 	cmp.w	ip, #16
 8006b7a:	bfd8      	it	le
 8006b7c:	fb01 f909 	mulle.w	r9, r1, r9
 8006b80:	e7f5      	b.n	8006b6e <_strtod_l+0x25e>
 8006b82:	2d10      	cmp	r5, #16
 8006b84:	bfdc      	itt	le
 8006b86:	230a      	movle	r3, #10
 8006b88:	fb03 2909 	mlale	r9, r3, r9, r2
 8006b8c:	e7e1      	b.n	8006b52 <_strtod_l+0x242>
 8006b8e:	2300      	movs	r3, #0
 8006b90:	9305      	str	r3, [sp, #20]
 8006b92:	2301      	movs	r3, #1
 8006b94:	e77c      	b.n	8006a90 <_strtod_l+0x180>
 8006b96:	f04f 0c00 	mov.w	ip, #0
 8006b9a:	f108 0202 	add.w	r2, r8, #2
 8006b9e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ba0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006ba4:	e785      	b.n	8006ab2 <_strtod_l+0x1a2>
 8006ba6:	f04f 0c01 	mov.w	ip, #1
 8006baa:	e7f6      	b.n	8006b9a <_strtod_l+0x28a>
 8006bac:	0800a7e0 	.word	0x0800a7e0
 8006bb0:	0800a598 	.word	0x0800a598
 8006bb4:	7ff00000 	.word	0x7ff00000
 8006bb8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006bba:	1c51      	adds	r1, r2, #1
 8006bbc:	9117      	str	r1, [sp, #92]	; 0x5c
 8006bbe:	7852      	ldrb	r2, [r2, #1]
 8006bc0:	2a30      	cmp	r2, #48	; 0x30
 8006bc2:	d0f9      	beq.n	8006bb8 <_strtod_l+0x2a8>
 8006bc4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006bc8:	2908      	cmp	r1, #8
 8006bca:	f63f af79 	bhi.w	8006ac0 <_strtod_l+0x1b0>
 8006bce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006bd2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006bd4:	9206      	str	r2, [sp, #24]
 8006bd6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006bd8:	1c51      	adds	r1, r2, #1
 8006bda:	9117      	str	r1, [sp, #92]	; 0x5c
 8006bdc:	7852      	ldrb	r2, [r2, #1]
 8006bde:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006be2:	2e09      	cmp	r6, #9
 8006be4:	d937      	bls.n	8006c56 <_strtod_l+0x346>
 8006be6:	9e06      	ldr	r6, [sp, #24]
 8006be8:	1b89      	subs	r1, r1, r6
 8006bea:	2908      	cmp	r1, #8
 8006bec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006bf0:	dc02      	bgt.n	8006bf8 <_strtod_l+0x2e8>
 8006bf2:	4576      	cmp	r6, lr
 8006bf4:	bfa8      	it	ge
 8006bf6:	4676      	movge	r6, lr
 8006bf8:	f1bc 0f00 	cmp.w	ip, #0
 8006bfc:	d000      	beq.n	8006c00 <_strtod_l+0x2f0>
 8006bfe:	4276      	negs	r6, r6
 8006c00:	2d00      	cmp	r5, #0
 8006c02:	d14d      	bne.n	8006ca0 <_strtod_l+0x390>
 8006c04:	9904      	ldr	r1, [sp, #16]
 8006c06:	4301      	orrs	r1, r0
 8006c08:	f47f aec6 	bne.w	8006998 <_strtod_l+0x88>
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f47f aee1 	bne.w	80069d4 <_strtod_l+0xc4>
 8006c12:	2a69      	cmp	r2, #105	; 0x69
 8006c14:	d027      	beq.n	8006c66 <_strtod_l+0x356>
 8006c16:	dc24      	bgt.n	8006c62 <_strtod_l+0x352>
 8006c18:	2a49      	cmp	r2, #73	; 0x49
 8006c1a:	d024      	beq.n	8006c66 <_strtod_l+0x356>
 8006c1c:	2a4e      	cmp	r2, #78	; 0x4e
 8006c1e:	f47f aed9 	bne.w	80069d4 <_strtod_l+0xc4>
 8006c22:	499f      	ldr	r1, [pc, #636]	; (8006ea0 <_strtod_l+0x590>)
 8006c24:	a817      	add	r0, sp, #92	; 0x5c
 8006c26:	f001 fe3d 	bl	80088a4 <__match>
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	f43f aed2 	beq.w	80069d4 <_strtod_l+0xc4>
 8006c30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	2b28      	cmp	r3, #40	; 0x28
 8006c36:	d12d      	bne.n	8006c94 <_strtod_l+0x384>
 8006c38:	499a      	ldr	r1, [pc, #616]	; (8006ea4 <_strtod_l+0x594>)
 8006c3a:	aa1a      	add	r2, sp, #104	; 0x68
 8006c3c:	a817      	add	r0, sp, #92	; 0x5c
 8006c3e:	f001 fe45 	bl	80088cc <__hexnan>
 8006c42:	2805      	cmp	r0, #5
 8006c44:	d126      	bne.n	8006c94 <_strtod_l+0x384>
 8006c46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c48:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006c4c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006c50:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006c54:	e6a0      	b.n	8006998 <_strtod_l+0x88>
 8006c56:	210a      	movs	r1, #10
 8006c58:	fb01 2e0e 	mla	lr, r1, lr, r2
 8006c5c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006c60:	e7b9      	b.n	8006bd6 <_strtod_l+0x2c6>
 8006c62:	2a6e      	cmp	r2, #110	; 0x6e
 8006c64:	e7db      	b.n	8006c1e <_strtod_l+0x30e>
 8006c66:	4990      	ldr	r1, [pc, #576]	; (8006ea8 <_strtod_l+0x598>)
 8006c68:	a817      	add	r0, sp, #92	; 0x5c
 8006c6a:	f001 fe1b 	bl	80088a4 <__match>
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	f43f aeb0 	beq.w	80069d4 <_strtod_l+0xc4>
 8006c74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c76:	498d      	ldr	r1, [pc, #564]	; (8006eac <_strtod_l+0x59c>)
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	a817      	add	r0, sp, #92	; 0x5c
 8006c7c:	9317      	str	r3, [sp, #92]	; 0x5c
 8006c7e:	f001 fe11 	bl	80088a4 <__match>
 8006c82:	b910      	cbnz	r0, 8006c8a <_strtod_l+0x37a>
 8006c84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c86:	3301      	adds	r3, #1
 8006c88:	9317      	str	r3, [sp, #92]	; 0x5c
 8006c8a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006ebc <_strtod_l+0x5ac>
 8006c8e:	f04f 0a00 	mov.w	sl, #0
 8006c92:	e681      	b.n	8006998 <_strtod_l+0x88>
 8006c94:	4886      	ldr	r0, [pc, #536]	; (8006eb0 <_strtod_l+0x5a0>)
 8006c96:	f002 fde7 	bl	8009868 <nan>
 8006c9a:	ec5b ab10 	vmov	sl, fp, d0
 8006c9e:	e67b      	b.n	8006998 <_strtod_l+0x88>
 8006ca0:	9b05      	ldr	r3, [sp, #20]
 8006ca2:	9807      	ldr	r0, [sp, #28]
 8006ca4:	1af3      	subs	r3, r6, r3
 8006ca6:	2f00      	cmp	r7, #0
 8006ca8:	bf08      	it	eq
 8006caa:	462f      	moveq	r7, r5
 8006cac:	2d10      	cmp	r5, #16
 8006cae:	9306      	str	r3, [sp, #24]
 8006cb0:	46a8      	mov	r8, r5
 8006cb2:	bfa8      	it	ge
 8006cb4:	f04f 0810 	movge.w	r8, #16
 8006cb8:	f7f9 fbfc 	bl	80004b4 <__aeabi_ui2d>
 8006cbc:	2d09      	cmp	r5, #9
 8006cbe:	4682      	mov	sl, r0
 8006cc0:	468b      	mov	fp, r1
 8006cc2:	dd13      	ble.n	8006cec <_strtod_l+0x3dc>
 8006cc4:	4b7b      	ldr	r3, [pc, #492]	; (8006eb4 <_strtod_l+0x5a4>)
 8006cc6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006cca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006cce:	f7f9 fc6b 	bl	80005a8 <__aeabi_dmul>
 8006cd2:	4682      	mov	sl, r0
 8006cd4:	4648      	mov	r0, r9
 8006cd6:	468b      	mov	fp, r1
 8006cd8:	f7f9 fbec 	bl	80004b4 <__aeabi_ui2d>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	460b      	mov	r3, r1
 8006ce0:	4650      	mov	r0, sl
 8006ce2:	4659      	mov	r1, fp
 8006ce4:	f7f9 faaa 	bl	800023c <__adddf3>
 8006ce8:	4682      	mov	sl, r0
 8006cea:	468b      	mov	fp, r1
 8006cec:	2d0f      	cmp	r5, #15
 8006cee:	dc38      	bgt.n	8006d62 <_strtod_l+0x452>
 8006cf0:	9b06      	ldr	r3, [sp, #24]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f43f ae50 	beq.w	8006998 <_strtod_l+0x88>
 8006cf8:	dd24      	ble.n	8006d44 <_strtod_l+0x434>
 8006cfa:	2b16      	cmp	r3, #22
 8006cfc:	dc0b      	bgt.n	8006d16 <_strtod_l+0x406>
 8006cfe:	496d      	ldr	r1, [pc, #436]	; (8006eb4 <_strtod_l+0x5a4>)
 8006d00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006d04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d08:	4652      	mov	r2, sl
 8006d0a:	465b      	mov	r3, fp
 8006d0c:	f7f9 fc4c 	bl	80005a8 <__aeabi_dmul>
 8006d10:	4682      	mov	sl, r0
 8006d12:	468b      	mov	fp, r1
 8006d14:	e640      	b.n	8006998 <_strtod_l+0x88>
 8006d16:	9a06      	ldr	r2, [sp, #24]
 8006d18:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	db20      	blt.n	8006d62 <_strtod_l+0x452>
 8006d20:	4c64      	ldr	r4, [pc, #400]	; (8006eb4 <_strtod_l+0x5a4>)
 8006d22:	f1c5 050f 	rsb	r5, r5, #15
 8006d26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006d2a:	4652      	mov	r2, sl
 8006d2c:	465b      	mov	r3, fp
 8006d2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d32:	f7f9 fc39 	bl	80005a8 <__aeabi_dmul>
 8006d36:	9b06      	ldr	r3, [sp, #24]
 8006d38:	1b5d      	subs	r5, r3, r5
 8006d3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006d3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006d42:	e7e3      	b.n	8006d0c <_strtod_l+0x3fc>
 8006d44:	9b06      	ldr	r3, [sp, #24]
 8006d46:	3316      	adds	r3, #22
 8006d48:	db0b      	blt.n	8006d62 <_strtod_l+0x452>
 8006d4a:	9b05      	ldr	r3, [sp, #20]
 8006d4c:	1b9e      	subs	r6, r3, r6
 8006d4e:	4b59      	ldr	r3, [pc, #356]	; (8006eb4 <_strtod_l+0x5a4>)
 8006d50:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006d54:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d58:	4650      	mov	r0, sl
 8006d5a:	4659      	mov	r1, fp
 8006d5c:	f7f9 fd4e 	bl	80007fc <__aeabi_ddiv>
 8006d60:	e7d6      	b.n	8006d10 <_strtod_l+0x400>
 8006d62:	9b06      	ldr	r3, [sp, #24]
 8006d64:	eba5 0808 	sub.w	r8, r5, r8
 8006d68:	4498      	add	r8, r3
 8006d6a:	f1b8 0f00 	cmp.w	r8, #0
 8006d6e:	dd74      	ble.n	8006e5a <_strtod_l+0x54a>
 8006d70:	f018 030f 	ands.w	r3, r8, #15
 8006d74:	d00a      	beq.n	8006d8c <_strtod_l+0x47c>
 8006d76:	494f      	ldr	r1, [pc, #316]	; (8006eb4 <_strtod_l+0x5a4>)
 8006d78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006d7c:	4652      	mov	r2, sl
 8006d7e:	465b      	mov	r3, fp
 8006d80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d84:	f7f9 fc10 	bl	80005a8 <__aeabi_dmul>
 8006d88:	4682      	mov	sl, r0
 8006d8a:	468b      	mov	fp, r1
 8006d8c:	f038 080f 	bics.w	r8, r8, #15
 8006d90:	d04f      	beq.n	8006e32 <_strtod_l+0x522>
 8006d92:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006d96:	dd22      	ble.n	8006dde <_strtod_l+0x4ce>
 8006d98:	2500      	movs	r5, #0
 8006d9a:	462e      	mov	r6, r5
 8006d9c:	9507      	str	r5, [sp, #28]
 8006d9e:	9505      	str	r5, [sp, #20]
 8006da0:	2322      	movs	r3, #34	; 0x22
 8006da2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006ebc <_strtod_l+0x5ac>
 8006da6:	6023      	str	r3, [r4, #0]
 8006da8:	f04f 0a00 	mov.w	sl, #0
 8006dac:	9b07      	ldr	r3, [sp, #28]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f43f adf2 	beq.w	8006998 <_strtod_l+0x88>
 8006db4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006db6:	4620      	mov	r0, r4
 8006db8:	f001 fe82 	bl	8008ac0 <_Bfree>
 8006dbc:	9905      	ldr	r1, [sp, #20]
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	f001 fe7e 	bl	8008ac0 <_Bfree>
 8006dc4:	4631      	mov	r1, r6
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	f001 fe7a 	bl	8008ac0 <_Bfree>
 8006dcc:	9907      	ldr	r1, [sp, #28]
 8006dce:	4620      	mov	r0, r4
 8006dd0:	f001 fe76 	bl	8008ac0 <_Bfree>
 8006dd4:	4629      	mov	r1, r5
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	f001 fe72 	bl	8008ac0 <_Bfree>
 8006ddc:	e5dc      	b.n	8006998 <_strtod_l+0x88>
 8006dde:	4b36      	ldr	r3, [pc, #216]	; (8006eb8 <_strtod_l+0x5a8>)
 8006de0:	9304      	str	r3, [sp, #16]
 8006de2:	2300      	movs	r3, #0
 8006de4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006de8:	4650      	mov	r0, sl
 8006dea:	4659      	mov	r1, fp
 8006dec:	4699      	mov	r9, r3
 8006dee:	f1b8 0f01 	cmp.w	r8, #1
 8006df2:	dc21      	bgt.n	8006e38 <_strtod_l+0x528>
 8006df4:	b10b      	cbz	r3, 8006dfa <_strtod_l+0x4ea>
 8006df6:	4682      	mov	sl, r0
 8006df8:	468b      	mov	fp, r1
 8006dfa:	4b2f      	ldr	r3, [pc, #188]	; (8006eb8 <_strtod_l+0x5a8>)
 8006dfc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006e00:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006e04:	4652      	mov	r2, sl
 8006e06:	465b      	mov	r3, fp
 8006e08:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006e0c:	f7f9 fbcc 	bl	80005a8 <__aeabi_dmul>
 8006e10:	4b2a      	ldr	r3, [pc, #168]	; (8006ebc <_strtod_l+0x5ac>)
 8006e12:	460a      	mov	r2, r1
 8006e14:	400b      	ands	r3, r1
 8006e16:	492a      	ldr	r1, [pc, #168]	; (8006ec0 <_strtod_l+0x5b0>)
 8006e18:	428b      	cmp	r3, r1
 8006e1a:	4682      	mov	sl, r0
 8006e1c:	d8bc      	bhi.n	8006d98 <_strtod_l+0x488>
 8006e1e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006e22:	428b      	cmp	r3, r1
 8006e24:	bf86      	itte	hi
 8006e26:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006ec4 <_strtod_l+0x5b4>
 8006e2a:	f04f 3aff 	movhi.w	sl, #4294967295
 8006e2e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006e32:	2300      	movs	r3, #0
 8006e34:	9304      	str	r3, [sp, #16]
 8006e36:	e084      	b.n	8006f42 <_strtod_l+0x632>
 8006e38:	f018 0f01 	tst.w	r8, #1
 8006e3c:	d005      	beq.n	8006e4a <_strtod_l+0x53a>
 8006e3e:	9b04      	ldr	r3, [sp, #16]
 8006e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e44:	f7f9 fbb0 	bl	80005a8 <__aeabi_dmul>
 8006e48:	2301      	movs	r3, #1
 8006e4a:	9a04      	ldr	r2, [sp, #16]
 8006e4c:	3208      	adds	r2, #8
 8006e4e:	f109 0901 	add.w	r9, r9, #1
 8006e52:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006e56:	9204      	str	r2, [sp, #16]
 8006e58:	e7c9      	b.n	8006dee <_strtod_l+0x4de>
 8006e5a:	d0ea      	beq.n	8006e32 <_strtod_l+0x522>
 8006e5c:	f1c8 0800 	rsb	r8, r8, #0
 8006e60:	f018 020f 	ands.w	r2, r8, #15
 8006e64:	d00a      	beq.n	8006e7c <_strtod_l+0x56c>
 8006e66:	4b13      	ldr	r3, [pc, #76]	; (8006eb4 <_strtod_l+0x5a4>)
 8006e68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e6c:	4650      	mov	r0, sl
 8006e6e:	4659      	mov	r1, fp
 8006e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e74:	f7f9 fcc2 	bl	80007fc <__aeabi_ddiv>
 8006e78:	4682      	mov	sl, r0
 8006e7a:	468b      	mov	fp, r1
 8006e7c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006e80:	d0d7      	beq.n	8006e32 <_strtod_l+0x522>
 8006e82:	f1b8 0f1f 	cmp.w	r8, #31
 8006e86:	dd1f      	ble.n	8006ec8 <_strtod_l+0x5b8>
 8006e88:	2500      	movs	r5, #0
 8006e8a:	462e      	mov	r6, r5
 8006e8c:	9507      	str	r5, [sp, #28]
 8006e8e:	9505      	str	r5, [sp, #20]
 8006e90:	2322      	movs	r3, #34	; 0x22
 8006e92:	f04f 0a00 	mov.w	sl, #0
 8006e96:	f04f 0b00 	mov.w	fp, #0
 8006e9a:	6023      	str	r3, [r4, #0]
 8006e9c:	e786      	b.n	8006dac <_strtod_l+0x49c>
 8006e9e:	bf00      	nop
 8006ea0:	0800a569 	.word	0x0800a569
 8006ea4:	0800a5ac 	.word	0x0800a5ac
 8006ea8:	0800a561 	.word	0x0800a561
 8006eac:	0800a6ec 	.word	0x0800a6ec
 8006eb0:	0800a998 	.word	0x0800a998
 8006eb4:	0800a878 	.word	0x0800a878
 8006eb8:	0800a850 	.word	0x0800a850
 8006ebc:	7ff00000 	.word	0x7ff00000
 8006ec0:	7ca00000 	.word	0x7ca00000
 8006ec4:	7fefffff 	.word	0x7fefffff
 8006ec8:	f018 0310 	ands.w	r3, r8, #16
 8006ecc:	bf18      	it	ne
 8006ece:	236a      	movne	r3, #106	; 0x6a
 8006ed0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007280 <_strtod_l+0x970>
 8006ed4:	9304      	str	r3, [sp, #16]
 8006ed6:	4650      	mov	r0, sl
 8006ed8:	4659      	mov	r1, fp
 8006eda:	2300      	movs	r3, #0
 8006edc:	f018 0f01 	tst.w	r8, #1
 8006ee0:	d004      	beq.n	8006eec <_strtod_l+0x5dc>
 8006ee2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006ee6:	f7f9 fb5f 	bl	80005a8 <__aeabi_dmul>
 8006eea:	2301      	movs	r3, #1
 8006eec:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006ef0:	f109 0908 	add.w	r9, r9, #8
 8006ef4:	d1f2      	bne.n	8006edc <_strtod_l+0x5cc>
 8006ef6:	b10b      	cbz	r3, 8006efc <_strtod_l+0x5ec>
 8006ef8:	4682      	mov	sl, r0
 8006efa:	468b      	mov	fp, r1
 8006efc:	9b04      	ldr	r3, [sp, #16]
 8006efe:	b1c3      	cbz	r3, 8006f32 <_strtod_l+0x622>
 8006f00:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006f04:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	4659      	mov	r1, fp
 8006f0c:	dd11      	ble.n	8006f32 <_strtod_l+0x622>
 8006f0e:	2b1f      	cmp	r3, #31
 8006f10:	f340 8124 	ble.w	800715c <_strtod_l+0x84c>
 8006f14:	2b34      	cmp	r3, #52	; 0x34
 8006f16:	bfde      	ittt	le
 8006f18:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006f1c:	f04f 33ff 	movle.w	r3, #4294967295
 8006f20:	fa03 f202 	lslle.w	r2, r3, r2
 8006f24:	f04f 0a00 	mov.w	sl, #0
 8006f28:	bfcc      	ite	gt
 8006f2a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006f2e:	ea02 0b01 	andle.w	fp, r2, r1
 8006f32:	2200      	movs	r2, #0
 8006f34:	2300      	movs	r3, #0
 8006f36:	4650      	mov	r0, sl
 8006f38:	4659      	mov	r1, fp
 8006f3a:	f7f9 fd9d 	bl	8000a78 <__aeabi_dcmpeq>
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	d1a2      	bne.n	8006e88 <_strtod_l+0x578>
 8006f42:	9b07      	ldr	r3, [sp, #28]
 8006f44:	9300      	str	r3, [sp, #0]
 8006f46:	9908      	ldr	r1, [sp, #32]
 8006f48:	462b      	mov	r3, r5
 8006f4a:	463a      	mov	r2, r7
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	f001 fe1f 	bl	8008b90 <__s2b>
 8006f52:	9007      	str	r0, [sp, #28]
 8006f54:	2800      	cmp	r0, #0
 8006f56:	f43f af1f 	beq.w	8006d98 <_strtod_l+0x488>
 8006f5a:	9b05      	ldr	r3, [sp, #20]
 8006f5c:	1b9e      	subs	r6, r3, r6
 8006f5e:	9b06      	ldr	r3, [sp, #24]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	bfb4      	ite	lt
 8006f64:	4633      	movlt	r3, r6
 8006f66:	2300      	movge	r3, #0
 8006f68:	930c      	str	r3, [sp, #48]	; 0x30
 8006f6a:	9b06      	ldr	r3, [sp, #24]
 8006f6c:	2500      	movs	r5, #0
 8006f6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006f72:	9312      	str	r3, [sp, #72]	; 0x48
 8006f74:	462e      	mov	r6, r5
 8006f76:	9b07      	ldr	r3, [sp, #28]
 8006f78:	4620      	mov	r0, r4
 8006f7a:	6859      	ldr	r1, [r3, #4]
 8006f7c:	f001 fd60 	bl	8008a40 <_Balloc>
 8006f80:	9005      	str	r0, [sp, #20]
 8006f82:	2800      	cmp	r0, #0
 8006f84:	f43f af0c 	beq.w	8006da0 <_strtod_l+0x490>
 8006f88:	9b07      	ldr	r3, [sp, #28]
 8006f8a:	691a      	ldr	r2, [r3, #16]
 8006f8c:	3202      	adds	r2, #2
 8006f8e:	f103 010c 	add.w	r1, r3, #12
 8006f92:	0092      	lsls	r2, r2, #2
 8006f94:	300c      	adds	r0, #12
 8006f96:	f7fe fdcd 	bl	8005b34 <memcpy>
 8006f9a:	ec4b ab10 	vmov	d0, sl, fp
 8006f9e:	aa1a      	add	r2, sp, #104	; 0x68
 8006fa0:	a919      	add	r1, sp, #100	; 0x64
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	f002 f93a 	bl	800921c <__d2b>
 8006fa8:	ec4b ab18 	vmov	d8, sl, fp
 8006fac:	9018      	str	r0, [sp, #96]	; 0x60
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	f43f aef6 	beq.w	8006da0 <_strtod_l+0x490>
 8006fb4:	2101      	movs	r1, #1
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	f001 fe84 	bl	8008cc4 <__i2b>
 8006fbc:	4606      	mov	r6, r0
 8006fbe:	2800      	cmp	r0, #0
 8006fc0:	f43f aeee 	beq.w	8006da0 <_strtod_l+0x490>
 8006fc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006fc6:	9904      	ldr	r1, [sp, #16]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	bfab      	itete	ge
 8006fcc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006fce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006fd0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006fd2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006fd6:	bfac      	ite	ge
 8006fd8:	eb03 0902 	addge.w	r9, r3, r2
 8006fdc:	1ad7      	sublt	r7, r2, r3
 8006fde:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006fe0:	eba3 0801 	sub.w	r8, r3, r1
 8006fe4:	4490      	add	r8, r2
 8006fe6:	4ba1      	ldr	r3, [pc, #644]	; (800726c <_strtod_l+0x95c>)
 8006fe8:	f108 38ff 	add.w	r8, r8, #4294967295
 8006fec:	4598      	cmp	r8, r3
 8006fee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006ff2:	f280 80c7 	bge.w	8007184 <_strtod_l+0x874>
 8006ff6:	eba3 0308 	sub.w	r3, r3, r8
 8006ffa:	2b1f      	cmp	r3, #31
 8006ffc:	eba2 0203 	sub.w	r2, r2, r3
 8007000:	f04f 0101 	mov.w	r1, #1
 8007004:	f300 80b1 	bgt.w	800716a <_strtod_l+0x85a>
 8007008:	fa01 f303 	lsl.w	r3, r1, r3
 800700c:	930d      	str	r3, [sp, #52]	; 0x34
 800700e:	2300      	movs	r3, #0
 8007010:	9308      	str	r3, [sp, #32]
 8007012:	eb09 0802 	add.w	r8, r9, r2
 8007016:	9b04      	ldr	r3, [sp, #16]
 8007018:	45c1      	cmp	r9, r8
 800701a:	4417      	add	r7, r2
 800701c:	441f      	add	r7, r3
 800701e:	464b      	mov	r3, r9
 8007020:	bfa8      	it	ge
 8007022:	4643      	movge	r3, r8
 8007024:	42bb      	cmp	r3, r7
 8007026:	bfa8      	it	ge
 8007028:	463b      	movge	r3, r7
 800702a:	2b00      	cmp	r3, #0
 800702c:	bfc2      	ittt	gt
 800702e:	eba8 0803 	subgt.w	r8, r8, r3
 8007032:	1aff      	subgt	r7, r7, r3
 8007034:	eba9 0903 	subgt.w	r9, r9, r3
 8007038:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800703a:	2b00      	cmp	r3, #0
 800703c:	dd17      	ble.n	800706e <_strtod_l+0x75e>
 800703e:	4631      	mov	r1, r6
 8007040:	461a      	mov	r2, r3
 8007042:	4620      	mov	r0, r4
 8007044:	f001 fefe 	bl	8008e44 <__pow5mult>
 8007048:	4606      	mov	r6, r0
 800704a:	2800      	cmp	r0, #0
 800704c:	f43f aea8 	beq.w	8006da0 <_strtod_l+0x490>
 8007050:	4601      	mov	r1, r0
 8007052:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007054:	4620      	mov	r0, r4
 8007056:	f001 fe4b 	bl	8008cf0 <__multiply>
 800705a:	900b      	str	r0, [sp, #44]	; 0x2c
 800705c:	2800      	cmp	r0, #0
 800705e:	f43f ae9f 	beq.w	8006da0 <_strtod_l+0x490>
 8007062:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007064:	4620      	mov	r0, r4
 8007066:	f001 fd2b 	bl	8008ac0 <_Bfree>
 800706a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800706c:	9318      	str	r3, [sp, #96]	; 0x60
 800706e:	f1b8 0f00 	cmp.w	r8, #0
 8007072:	f300 808c 	bgt.w	800718e <_strtod_l+0x87e>
 8007076:	9b06      	ldr	r3, [sp, #24]
 8007078:	2b00      	cmp	r3, #0
 800707a:	dd08      	ble.n	800708e <_strtod_l+0x77e>
 800707c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800707e:	9905      	ldr	r1, [sp, #20]
 8007080:	4620      	mov	r0, r4
 8007082:	f001 fedf 	bl	8008e44 <__pow5mult>
 8007086:	9005      	str	r0, [sp, #20]
 8007088:	2800      	cmp	r0, #0
 800708a:	f43f ae89 	beq.w	8006da0 <_strtod_l+0x490>
 800708e:	2f00      	cmp	r7, #0
 8007090:	dd08      	ble.n	80070a4 <_strtod_l+0x794>
 8007092:	9905      	ldr	r1, [sp, #20]
 8007094:	463a      	mov	r2, r7
 8007096:	4620      	mov	r0, r4
 8007098:	f001 ff2e 	bl	8008ef8 <__lshift>
 800709c:	9005      	str	r0, [sp, #20]
 800709e:	2800      	cmp	r0, #0
 80070a0:	f43f ae7e 	beq.w	8006da0 <_strtod_l+0x490>
 80070a4:	f1b9 0f00 	cmp.w	r9, #0
 80070a8:	dd08      	ble.n	80070bc <_strtod_l+0x7ac>
 80070aa:	4631      	mov	r1, r6
 80070ac:	464a      	mov	r2, r9
 80070ae:	4620      	mov	r0, r4
 80070b0:	f001 ff22 	bl	8008ef8 <__lshift>
 80070b4:	4606      	mov	r6, r0
 80070b6:	2800      	cmp	r0, #0
 80070b8:	f43f ae72 	beq.w	8006da0 <_strtod_l+0x490>
 80070bc:	9a05      	ldr	r2, [sp, #20]
 80070be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80070c0:	4620      	mov	r0, r4
 80070c2:	f001 ffa5 	bl	8009010 <__mdiff>
 80070c6:	4605      	mov	r5, r0
 80070c8:	2800      	cmp	r0, #0
 80070ca:	f43f ae69 	beq.w	8006da0 <_strtod_l+0x490>
 80070ce:	68c3      	ldr	r3, [r0, #12]
 80070d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80070d2:	2300      	movs	r3, #0
 80070d4:	60c3      	str	r3, [r0, #12]
 80070d6:	4631      	mov	r1, r6
 80070d8:	f001 ff7e 	bl	8008fd8 <__mcmp>
 80070dc:	2800      	cmp	r0, #0
 80070de:	da60      	bge.n	80071a2 <_strtod_l+0x892>
 80070e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070e2:	ea53 030a 	orrs.w	r3, r3, sl
 80070e6:	f040 8082 	bne.w	80071ee <_strtod_l+0x8de>
 80070ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d17d      	bne.n	80071ee <_strtod_l+0x8de>
 80070f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80070f6:	0d1b      	lsrs	r3, r3, #20
 80070f8:	051b      	lsls	r3, r3, #20
 80070fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80070fe:	d976      	bls.n	80071ee <_strtod_l+0x8de>
 8007100:	696b      	ldr	r3, [r5, #20]
 8007102:	b913      	cbnz	r3, 800710a <_strtod_l+0x7fa>
 8007104:	692b      	ldr	r3, [r5, #16]
 8007106:	2b01      	cmp	r3, #1
 8007108:	dd71      	ble.n	80071ee <_strtod_l+0x8de>
 800710a:	4629      	mov	r1, r5
 800710c:	2201      	movs	r2, #1
 800710e:	4620      	mov	r0, r4
 8007110:	f001 fef2 	bl	8008ef8 <__lshift>
 8007114:	4631      	mov	r1, r6
 8007116:	4605      	mov	r5, r0
 8007118:	f001 ff5e 	bl	8008fd8 <__mcmp>
 800711c:	2800      	cmp	r0, #0
 800711e:	dd66      	ble.n	80071ee <_strtod_l+0x8de>
 8007120:	9904      	ldr	r1, [sp, #16]
 8007122:	4a53      	ldr	r2, [pc, #332]	; (8007270 <_strtod_l+0x960>)
 8007124:	465b      	mov	r3, fp
 8007126:	2900      	cmp	r1, #0
 8007128:	f000 8081 	beq.w	800722e <_strtod_l+0x91e>
 800712c:	ea02 010b 	and.w	r1, r2, fp
 8007130:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007134:	dc7b      	bgt.n	800722e <_strtod_l+0x91e>
 8007136:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800713a:	f77f aea9 	ble.w	8006e90 <_strtod_l+0x580>
 800713e:	4b4d      	ldr	r3, [pc, #308]	; (8007274 <_strtod_l+0x964>)
 8007140:	4650      	mov	r0, sl
 8007142:	4659      	mov	r1, fp
 8007144:	2200      	movs	r2, #0
 8007146:	f7f9 fa2f 	bl	80005a8 <__aeabi_dmul>
 800714a:	460b      	mov	r3, r1
 800714c:	4303      	orrs	r3, r0
 800714e:	bf08      	it	eq
 8007150:	2322      	moveq	r3, #34	; 0x22
 8007152:	4682      	mov	sl, r0
 8007154:	468b      	mov	fp, r1
 8007156:	bf08      	it	eq
 8007158:	6023      	streq	r3, [r4, #0]
 800715a:	e62b      	b.n	8006db4 <_strtod_l+0x4a4>
 800715c:	f04f 32ff 	mov.w	r2, #4294967295
 8007160:	fa02 f303 	lsl.w	r3, r2, r3
 8007164:	ea03 0a0a 	and.w	sl, r3, sl
 8007168:	e6e3      	b.n	8006f32 <_strtod_l+0x622>
 800716a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800716e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007172:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007176:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800717a:	fa01 f308 	lsl.w	r3, r1, r8
 800717e:	9308      	str	r3, [sp, #32]
 8007180:	910d      	str	r1, [sp, #52]	; 0x34
 8007182:	e746      	b.n	8007012 <_strtod_l+0x702>
 8007184:	2300      	movs	r3, #0
 8007186:	9308      	str	r3, [sp, #32]
 8007188:	2301      	movs	r3, #1
 800718a:	930d      	str	r3, [sp, #52]	; 0x34
 800718c:	e741      	b.n	8007012 <_strtod_l+0x702>
 800718e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007190:	4642      	mov	r2, r8
 8007192:	4620      	mov	r0, r4
 8007194:	f001 feb0 	bl	8008ef8 <__lshift>
 8007198:	9018      	str	r0, [sp, #96]	; 0x60
 800719a:	2800      	cmp	r0, #0
 800719c:	f47f af6b 	bne.w	8007076 <_strtod_l+0x766>
 80071a0:	e5fe      	b.n	8006da0 <_strtod_l+0x490>
 80071a2:	465f      	mov	r7, fp
 80071a4:	d16e      	bne.n	8007284 <_strtod_l+0x974>
 80071a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80071a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80071ac:	b342      	cbz	r2, 8007200 <_strtod_l+0x8f0>
 80071ae:	4a32      	ldr	r2, [pc, #200]	; (8007278 <_strtod_l+0x968>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d128      	bne.n	8007206 <_strtod_l+0x8f6>
 80071b4:	9b04      	ldr	r3, [sp, #16]
 80071b6:	4651      	mov	r1, sl
 80071b8:	b1eb      	cbz	r3, 80071f6 <_strtod_l+0x8e6>
 80071ba:	4b2d      	ldr	r3, [pc, #180]	; (8007270 <_strtod_l+0x960>)
 80071bc:	403b      	ands	r3, r7
 80071be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80071c2:	f04f 32ff 	mov.w	r2, #4294967295
 80071c6:	d819      	bhi.n	80071fc <_strtod_l+0x8ec>
 80071c8:	0d1b      	lsrs	r3, r3, #20
 80071ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80071ce:	fa02 f303 	lsl.w	r3, r2, r3
 80071d2:	4299      	cmp	r1, r3
 80071d4:	d117      	bne.n	8007206 <_strtod_l+0x8f6>
 80071d6:	4b29      	ldr	r3, [pc, #164]	; (800727c <_strtod_l+0x96c>)
 80071d8:	429f      	cmp	r7, r3
 80071da:	d102      	bne.n	80071e2 <_strtod_l+0x8d2>
 80071dc:	3101      	adds	r1, #1
 80071de:	f43f addf 	beq.w	8006da0 <_strtod_l+0x490>
 80071e2:	4b23      	ldr	r3, [pc, #140]	; (8007270 <_strtod_l+0x960>)
 80071e4:	403b      	ands	r3, r7
 80071e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80071ea:	f04f 0a00 	mov.w	sl, #0
 80071ee:	9b04      	ldr	r3, [sp, #16]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1a4      	bne.n	800713e <_strtod_l+0x82e>
 80071f4:	e5de      	b.n	8006db4 <_strtod_l+0x4a4>
 80071f6:	f04f 33ff 	mov.w	r3, #4294967295
 80071fa:	e7ea      	b.n	80071d2 <_strtod_l+0x8c2>
 80071fc:	4613      	mov	r3, r2
 80071fe:	e7e8      	b.n	80071d2 <_strtod_l+0x8c2>
 8007200:	ea53 030a 	orrs.w	r3, r3, sl
 8007204:	d08c      	beq.n	8007120 <_strtod_l+0x810>
 8007206:	9b08      	ldr	r3, [sp, #32]
 8007208:	b1db      	cbz	r3, 8007242 <_strtod_l+0x932>
 800720a:	423b      	tst	r3, r7
 800720c:	d0ef      	beq.n	80071ee <_strtod_l+0x8de>
 800720e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007210:	9a04      	ldr	r2, [sp, #16]
 8007212:	4650      	mov	r0, sl
 8007214:	4659      	mov	r1, fp
 8007216:	b1c3      	cbz	r3, 800724a <_strtod_l+0x93a>
 8007218:	f7ff fb5c 	bl	80068d4 <sulp>
 800721c:	4602      	mov	r2, r0
 800721e:	460b      	mov	r3, r1
 8007220:	ec51 0b18 	vmov	r0, r1, d8
 8007224:	f7f9 f80a 	bl	800023c <__adddf3>
 8007228:	4682      	mov	sl, r0
 800722a:	468b      	mov	fp, r1
 800722c:	e7df      	b.n	80071ee <_strtod_l+0x8de>
 800722e:	4013      	ands	r3, r2
 8007230:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007234:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007238:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800723c:	f04f 3aff 	mov.w	sl, #4294967295
 8007240:	e7d5      	b.n	80071ee <_strtod_l+0x8de>
 8007242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007244:	ea13 0f0a 	tst.w	r3, sl
 8007248:	e7e0      	b.n	800720c <_strtod_l+0x8fc>
 800724a:	f7ff fb43 	bl	80068d4 <sulp>
 800724e:	4602      	mov	r2, r0
 8007250:	460b      	mov	r3, r1
 8007252:	ec51 0b18 	vmov	r0, r1, d8
 8007256:	f7f8 ffef 	bl	8000238 <__aeabi_dsub>
 800725a:	2200      	movs	r2, #0
 800725c:	2300      	movs	r3, #0
 800725e:	4682      	mov	sl, r0
 8007260:	468b      	mov	fp, r1
 8007262:	f7f9 fc09 	bl	8000a78 <__aeabi_dcmpeq>
 8007266:	2800      	cmp	r0, #0
 8007268:	d0c1      	beq.n	80071ee <_strtod_l+0x8de>
 800726a:	e611      	b.n	8006e90 <_strtod_l+0x580>
 800726c:	fffffc02 	.word	0xfffffc02
 8007270:	7ff00000 	.word	0x7ff00000
 8007274:	39500000 	.word	0x39500000
 8007278:	000fffff 	.word	0x000fffff
 800727c:	7fefffff 	.word	0x7fefffff
 8007280:	0800a5c0 	.word	0x0800a5c0
 8007284:	4631      	mov	r1, r6
 8007286:	4628      	mov	r0, r5
 8007288:	f002 f824 	bl	80092d4 <__ratio>
 800728c:	ec59 8b10 	vmov	r8, r9, d0
 8007290:	ee10 0a10 	vmov	r0, s0
 8007294:	2200      	movs	r2, #0
 8007296:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800729a:	4649      	mov	r1, r9
 800729c:	f7f9 fc00 	bl	8000aa0 <__aeabi_dcmple>
 80072a0:	2800      	cmp	r0, #0
 80072a2:	d07a      	beq.n	800739a <_strtod_l+0xa8a>
 80072a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d04a      	beq.n	8007340 <_strtod_l+0xa30>
 80072aa:	4b95      	ldr	r3, [pc, #596]	; (8007500 <_strtod_l+0xbf0>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80072b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007500 <_strtod_l+0xbf0>
 80072b6:	f04f 0800 	mov.w	r8, #0
 80072ba:	4b92      	ldr	r3, [pc, #584]	; (8007504 <_strtod_l+0xbf4>)
 80072bc:	403b      	ands	r3, r7
 80072be:	930d      	str	r3, [sp, #52]	; 0x34
 80072c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80072c2:	4b91      	ldr	r3, [pc, #580]	; (8007508 <_strtod_l+0xbf8>)
 80072c4:	429a      	cmp	r2, r3
 80072c6:	f040 80b0 	bne.w	800742a <_strtod_l+0xb1a>
 80072ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80072ce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80072d2:	ec4b ab10 	vmov	d0, sl, fp
 80072d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80072da:	f001 ff23 	bl	8009124 <__ulp>
 80072de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80072e2:	ec53 2b10 	vmov	r2, r3, d0
 80072e6:	f7f9 f95f 	bl	80005a8 <__aeabi_dmul>
 80072ea:	4652      	mov	r2, sl
 80072ec:	465b      	mov	r3, fp
 80072ee:	f7f8 ffa5 	bl	800023c <__adddf3>
 80072f2:	460b      	mov	r3, r1
 80072f4:	4983      	ldr	r1, [pc, #524]	; (8007504 <_strtod_l+0xbf4>)
 80072f6:	4a85      	ldr	r2, [pc, #532]	; (800750c <_strtod_l+0xbfc>)
 80072f8:	4019      	ands	r1, r3
 80072fa:	4291      	cmp	r1, r2
 80072fc:	4682      	mov	sl, r0
 80072fe:	d960      	bls.n	80073c2 <_strtod_l+0xab2>
 8007300:	ee18 3a90 	vmov	r3, s17
 8007304:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007308:	4293      	cmp	r3, r2
 800730a:	d104      	bne.n	8007316 <_strtod_l+0xa06>
 800730c:	ee18 3a10 	vmov	r3, s16
 8007310:	3301      	adds	r3, #1
 8007312:	f43f ad45 	beq.w	8006da0 <_strtod_l+0x490>
 8007316:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007518 <_strtod_l+0xc08>
 800731a:	f04f 3aff 	mov.w	sl, #4294967295
 800731e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007320:	4620      	mov	r0, r4
 8007322:	f001 fbcd 	bl	8008ac0 <_Bfree>
 8007326:	9905      	ldr	r1, [sp, #20]
 8007328:	4620      	mov	r0, r4
 800732a:	f001 fbc9 	bl	8008ac0 <_Bfree>
 800732e:	4631      	mov	r1, r6
 8007330:	4620      	mov	r0, r4
 8007332:	f001 fbc5 	bl	8008ac0 <_Bfree>
 8007336:	4629      	mov	r1, r5
 8007338:	4620      	mov	r0, r4
 800733a:	f001 fbc1 	bl	8008ac0 <_Bfree>
 800733e:	e61a      	b.n	8006f76 <_strtod_l+0x666>
 8007340:	f1ba 0f00 	cmp.w	sl, #0
 8007344:	d11b      	bne.n	800737e <_strtod_l+0xa6e>
 8007346:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800734a:	b9f3      	cbnz	r3, 800738a <_strtod_l+0xa7a>
 800734c:	4b6c      	ldr	r3, [pc, #432]	; (8007500 <_strtod_l+0xbf0>)
 800734e:	2200      	movs	r2, #0
 8007350:	4640      	mov	r0, r8
 8007352:	4649      	mov	r1, r9
 8007354:	f7f9 fb9a 	bl	8000a8c <__aeabi_dcmplt>
 8007358:	b9d0      	cbnz	r0, 8007390 <_strtod_l+0xa80>
 800735a:	4640      	mov	r0, r8
 800735c:	4649      	mov	r1, r9
 800735e:	4b6c      	ldr	r3, [pc, #432]	; (8007510 <_strtod_l+0xc00>)
 8007360:	2200      	movs	r2, #0
 8007362:	f7f9 f921 	bl	80005a8 <__aeabi_dmul>
 8007366:	4680      	mov	r8, r0
 8007368:	4689      	mov	r9, r1
 800736a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800736e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007372:	9315      	str	r3, [sp, #84]	; 0x54
 8007374:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007378:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800737c:	e79d      	b.n	80072ba <_strtod_l+0x9aa>
 800737e:	f1ba 0f01 	cmp.w	sl, #1
 8007382:	d102      	bne.n	800738a <_strtod_l+0xa7a>
 8007384:	2f00      	cmp	r7, #0
 8007386:	f43f ad83 	beq.w	8006e90 <_strtod_l+0x580>
 800738a:	4b62      	ldr	r3, [pc, #392]	; (8007514 <_strtod_l+0xc04>)
 800738c:	2200      	movs	r2, #0
 800738e:	e78e      	b.n	80072ae <_strtod_l+0x99e>
 8007390:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007510 <_strtod_l+0xc00>
 8007394:	f04f 0800 	mov.w	r8, #0
 8007398:	e7e7      	b.n	800736a <_strtod_l+0xa5a>
 800739a:	4b5d      	ldr	r3, [pc, #372]	; (8007510 <_strtod_l+0xc00>)
 800739c:	4640      	mov	r0, r8
 800739e:	4649      	mov	r1, r9
 80073a0:	2200      	movs	r2, #0
 80073a2:	f7f9 f901 	bl	80005a8 <__aeabi_dmul>
 80073a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073a8:	4680      	mov	r8, r0
 80073aa:	4689      	mov	r9, r1
 80073ac:	b933      	cbnz	r3, 80073bc <_strtod_l+0xaac>
 80073ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073b2:	900e      	str	r0, [sp, #56]	; 0x38
 80073b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80073b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80073ba:	e7dd      	b.n	8007378 <_strtod_l+0xa68>
 80073bc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80073c0:	e7f9      	b.n	80073b6 <_strtod_l+0xaa6>
 80073c2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80073c6:	9b04      	ldr	r3, [sp, #16]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1a8      	bne.n	800731e <_strtod_l+0xa0e>
 80073cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80073d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073d2:	0d1b      	lsrs	r3, r3, #20
 80073d4:	051b      	lsls	r3, r3, #20
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d1a1      	bne.n	800731e <_strtod_l+0xa0e>
 80073da:	4640      	mov	r0, r8
 80073dc:	4649      	mov	r1, r9
 80073de:	f7f9 fc2b 	bl	8000c38 <__aeabi_d2lz>
 80073e2:	f7f9 f8b3 	bl	800054c <__aeabi_l2d>
 80073e6:	4602      	mov	r2, r0
 80073e8:	460b      	mov	r3, r1
 80073ea:	4640      	mov	r0, r8
 80073ec:	4649      	mov	r1, r9
 80073ee:	f7f8 ff23 	bl	8000238 <__aeabi_dsub>
 80073f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80073f8:	ea43 030a 	orr.w	r3, r3, sl
 80073fc:	4313      	orrs	r3, r2
 80073fe:	4680      	mov	r8, r0
 8007400:	4689      	mov	r9, r1
 8007402:	d055      	beq.n	80074b0 <_strtod_l+0xba0>
 8007404:	a336      	add	r3, pc, #216	; (adr r3, 80074e0 <_strtod_l+0xbd0>)
 8007406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740a:	f7f9 fb3f 	bl	8000a8c <__aeabi_dcmplt>
 800740e:	2800      	cmp	r0, #0
 8007410:	f47f acd0 	bne.w	8006db4 <_strtod_l+0x4a4>
 8007414:	a334      	add	r3, pc, #208	; (adr r3, 80074e8 <_strtod_l+0xbd8>)
 8007416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741a:	4640      	mov	r0, r8
 800741c:	4649      	mov	r1, r9
 800741e:	f7f9 fb53 	bl	8000ac8 <__aeabi_dcmpgt>
 8007422:	2800      	cmp	r0, #0
 8007424:	f43f af7b 	beq.w	800731e <_strtod_l+0xa0e>
 8007428:	e4c4      	b.n	8006db4 <_strtod_l+0x4a4>
 800742a:	9b04      	ldr	r3, [sp, #16]
 800742c:	b333      	cbz	r3, 800747c <_strtod_l+0xb6c>
 800742e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007430:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007434:	d822      	bhi.n	800747c <_strtod_l+0xb6c>
 8007436:	a32e      	add	r3, pc, #184	; (adr r3, 80074f0 <_strtod_l+0xbe0>)
 8007438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743c:	4640      	mov	r0, r8
 800743e:	4649      	mov	r1, r9
 8007440:	f7f9 fb2e 	bl	8000aa0 <__aeabi_dcmple>
 8007444:	b1a0      	cbz	r0, 8007470 <_strtod_l+0xb60>
 8007446:	4649      	mov	r1, r9
 8007448:	4640      	mov	r0, r8
 800744a:	f7f9 fb85 	bl	8000b58 <__aeabi_d2uiz>
 800744e:	2801      	cmp	r0, #1
 8007450:	bf38      	it	cc
 8007452:	2001      	movcc	r0, #1
 8007454:	f7f9 f82e 	bl	80004b4 <__aeabi_ui2d>
 8007458:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800745a:	4680      	mov	r8, r0
 800745c:	4689      	mov	r9, r1
 800745e:	bb23      	cbnz	r3, 80074aa <_strtod_l+0xb9a>
 8007460:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007464:	9010      	str	r0, [sp, #64]	; 0x40
 8007466:	9311      	str	r3, [sp, #68]	; 0x44
 8007468:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800746c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007472:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007474:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007478:	1a9b      	subs	r3, r3, r2
 800747a:	9309      	str	r3, [sp, #36]	; 0x24
 800747c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007480:	eeb0 0a48 	vmov.f32	s0, s16
 8007484:	eef0 0a68 	vmov.f32	s1, s17
 8007488:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800748c:	f001 fe4a 	bl	8009124 <__ulp>
 8007490:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007494:	ec53 2b10 	vmov	r2, r3, d0
 8007498:	f7f9 f886 	bl	80005a8 <__aeabi_dmul>
 800749c:	ec53 2b18 	vmov	r2, r3, d8
 80074a0:	f7f8 fecc 	bl	800023c <__adddf3>
 80074a4:	4682      	mov	sl, r0
 80074a6:	468b      	mov	fp, r1
 80074a8:	e78d      	b.n	80073c6 <_strtod_l+0xab6>
 80074aa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80074ae:	e7db      	b.n	8007468 <_strtod_l+0xb58>
 80074b0:	a311      	add	r3, pc, #68	; (adr r3, 80074f8 <_strtod_l+0xbe8>)
 80074b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b6:	f7f9 fae9 	bl	8000a8c <__aeabi_dcmplt>
 80074ba:	e7b2      	b.n	8007422 <_strtod_l+0xb12>
 80074bc:	2300      	movs	r3, #0
 80074be:	930a      	str	r3, [sp, #40]	; 0x28
 80074c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80074c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074c4:	6013      	str	r3, [r2, #0]
 80074c6:	f7ff ba6b 	b.w	80069a0 <_strtod_l+0x90>
 80074ca:	2a65      	cmp	r2, #101	; 0x65
 80074cc:	f43f ab5f 	beq.w	8006b8e <_strtod_l+0x27e>
 80074d0:	2a45      	cmp	r2, #69	; 0x45
 80074d2:	f43f ab5c 	beq.w	8006b8e <_strtod_l+0x27e>
 80074d6:	2301      	movs	r3, #1
 80074d8:	f7ff bb94 	b.w	8006c04 <_strtod_l+0x2f4>
 80074dc:	f3af 8000 	nop.w
 80074e0:	94a03595 	.word	0x94a03595
 80074e4:	3fdfffff 	.word	0x3fdfffff
 80074e8:	35afe535 	.word	0x35afe535
 80074ec:	3fe00000 	.word	0x3fe00000
 80074f0:	ffc00000 	.word	0xffc00000
 80074f4:	41dfffff 	.word	0x41dfffff
 80074f8:	94a03595 	.word	0x94a03595
 80074fc:	3fcfffff 	.word	0x3fcfffff
 8007500:	3ff00000 	.word	0x3ff00000
 8007504:	7ff00000 	.word	0x7ff00000
 8007508:	7fe00000 	.word	0x7fe00000
 800750c:	7c9fffff 	.word	0x7c9fffff
 8007510:	3fe00000 	.word	0x3fe00000
 8007514:	bff00000 	.word	0xbff00000
 8007518:	7fefffff 	.word	0x7fefffff

0800751c <_strtod_r>:
 800751c:	4b01      	ldr	r3, [pc, #4]	; (8007524 <_strtod_r+0x8>)
 800751e:	f7ff b9f7 	b.w	8006910 <_strtod_l>
 8007522:	bf00      	nop
 8007524:	20000170 	.word	0x20000170

08007528 <_strtol_l.constprop.0>:
 8007528:	2b01      	cmp	r3, #1
 800752a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800752e:	d001      	beq.n	8007534 <_strtol_l.constprop.0+0xc>
 8007530:	2b24      	cmp	r3, #36	; 0x24
 8007532:	d906      	bls.n	8007542 <_strtol_l.constprop.0+0x1a>
 8007534:	f7fe fad4 	bl	8005ae0 <__errno>
 8007538:	2316      	movs	r3, #22
 800753a:	6003      	str	r3, [r0, #0]
 800753c:	2000      	movs	r0, #0
 800753e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007542:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007628 <_strtol_l.constprop.0+0x100>
 8007546:	460d      	mov	r5, r1
 8007548:	462e      	mov	r6, r5
 800754a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800754e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007552:	f017 0708 	ands.w	r7, r7, #8
 8007556:	d1f7      	bne.n	8007548 <_strtol_l.constprop.0+0x20>
 8007558:	2c2d      	cmp	r4, #45	; 0x2d
 800755a:	d132      	bne.n	80075c2 <_strtol_l.constprop.0+0x9a>
 800755c:	782c      	ldrb	r4, [r5, #0]
 800755e:	2701      	movs	r7, #1
 8007560:	1cb5      	adds	r5, r6, #2
 8007562:	2b00      	cmp	r3, #0
 8007564:	d05b      	beq.n	800761e <_strtol_l.constprop.0+0xf6>
 8007566:	2b10      	cmp	r3, #16
 8007568:	d109      	bne.n	800757e <_strtol_l.constprop.0+0x56>
 800756a:	2c30      	cmp	r4, #48	; 0x30
 800756c:	d107      	bne.n	800757e <_strtol_l.constprop.0+0x56>
 800756e:	782c      	ldrb	r4, [r5, #0]
 8007570:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007574:	2c58      	cmp	r4, #88	; 0x58
 8007576:	d14d      	bne.n	8007614 <_strtol_l.constprop.0+0xec>
 8007578:	786c      	ldrb	r4, [r5, #1]
 800757a:	2310      	movs	r3, #16
 800757c:	3502      	adds	r5, #2
 800757e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007582:	f108 38ff 	add.w	r8, r8, #4294967295
 8007586:	f04f 0c00 	mov.w	ip, #0
 800758a:	fbb8 f9f3 	udiv	r9, r8, r3
 800758e:	4666      	mov	r6, ip
 8007590:	fb03 8a19 	mls	sl, r3, r9, r8
 8007594:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007598:	f1be 0f09 	cmp.w	lr, #9
 800759c:	d816      	bhi.n	80075cc <_strtol_l.constprop.0+0xa4>
 800759e:	4674      	mov	r4, lr
 80075a0:	42a3      	cmp	r3, r4
 80075a2:	dd24      	ble.n	80075ee <_strtol_l.constprop.0+0xc6>
 80075a4:	f1bc 0f00 	cmp.w	ip, #0
 80075a8:	db1e      	blt.n	80075e8 <_strtol_l.constprop.0+0xc0>
 80075aa:	45b1      	cmp	r9, r6
 80075ac:	d31c      	bcc.n	80075e8 <_strtol_l.constprop.0+0xc0>
 80075ae:	d101      	bne.n	80075b4 <_strtol_l.constprop.0+0x8c>
 80075b0:	45a2      	cmp	sl, r4
 80075b2:	db19      	blt.n	80075e8 <_strtol_l.constprop.0+0xc0>
 80075b4:	fb06 4603 	mla	r6, r6, r3, r4
 80075b8:	f04f 0c01 	mov.w	ip, #1
 80075bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075c0:	e7e8      	b.n	8007594 <_strtol_l.constprop.0+0x6c>
 80075c2:	2c2b      	cmp	r4, #43	; 0x2b
 80075c4:	bf04      	itt	eq
 80075c6:	782c      	ldrbeq	r4, [r5, #0]
 80075c8:	1cb5      	addeq	r5, r6, #2
 80075ca:	e7ca      	b.n	8007562 <_strtol_l.constprop.0+0x3a>
 80075cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80075d0:	f1be 0f19 	cmp.w	lr, #25
 80075d4:	d801      	bhi.n	80075da <_strtol_l.constprop.0+0xb2>
 80075d6:	3c37      	subs	r4, #55	; 0x37
 80075d8:	e7e2      	b.n	80075a0 <_strtol_l.constprop.0+0x78>
 80075da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80075de:	f1be 0f19 	cmp.w	lr, #25
 80075e2:	d804      	bhi.n	80075ee <_strtol_l.constprop.0+0xc6>
 80075e4:	3c57      	subs	r4, #87	; 0x57
 80075e6:	e7db      	b.n	80075a0 <_strtol_l.constprop.0+0x78>
 80075e8:	f04f 3cff 	mov.w	ip, #4294967295
 80075ec:	e7e6      	b.n	80075bc <_strtol_l.constprop.0+0x94>
 80075ee:	f1bc 0f00 	cmp.w	ip, #0
 80075f2:	da05      	bge.n	8007600 <_strtol_l.constprop.0+0xd8>
 80075f4:	2322      	movs	r3, #34	; 0x22
 80075f6:	6003      	str	r3, [r0, #0]
 80075f8:	4646      	mov	r6, r8
 80075fa:	b942      	cbnz	r2, 800760e <_strtol_l.constprop.0+0xe6>
 80075fc:	4630      	mov	r0, r6
 80075fe:	e79e      	b.n	800753e <_strtol_l.constprop.0+0x16>
 8007600:	b107      	cbz	r7, 8007604 <_strtol_l.constprop.0+0xdc>
 8007602:	4276      	negs	r6, r6
 8007604:	2a00      	cmp	r2, #0
 8007606:	d0f9      	beq.n	80075fc <_strtol_l.constprop.0+0xd4>
 8007608:	f1bc 0f00 	cmp.w	ip, #0
 800760c:	d000      	beq.n	8007610 <_strtol_l.constprop.0+0xe8>
 800760e:	1e69      	subs	r1, r5, #1
 8007610:	6011      	str	r1, [r2, #0]
 8007612:	e7f3      	b.n	80075fc <_strtol_l.constprop.0+0xd4>
 8007614:	2430      	movs	r4, #48	; 0x30
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1b1      	bne.n	800757e <_strtol_l.constprop.0+0x56>
 800761a:	2308      	movs	r3, #8
 800761c:	e7af      	b.n	800757e <_strtol_l.constprop.0+0x56>
 800761e:	2c30      	cmp	r4, #48	; 0x30
 8007620:	d0a5      	beq.n	800756e <_strtol_l.constprop.0+0x46>
 8007622:	230a      	movs	r3, #10
 8007624:	e7ab      	b.n	800757e <_strtol_l.constprop.0+0x56>
 8007626:	bf00      	nop
 8007628:	0800a5e9 	.word	0x0800a5e9

0800762c <_strtol_r>:
 800762c:	f7ff bf7c 	b.w	8007528 <_strtol_l.constprop.0>

08007630 <quorem>:
 8007630:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007634:	6903      	ldr	r3, [r0, #16]
 8007636:	690c      	ldr	r4, [r1, #16]
 8007638:	42a3      	cmp	r3, r4
 800763a:	4607      	mov	r7, r0
 800763c:	f2c0 8081 	blt.w	8007742 <quorem+0x112>
 8007640:	3c01      	subs	r4, #1
 8007642:	f101 0814 	add.w	r8, r1, #20
 8007646:	f100 0514 	add.w	r5, r0, #20
 800764a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800764e:	9301      	str	r3, [sp, #4]
 8007650:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007654:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007658:	3301      	adds	r3, #1
 800765a:	429a      	cmp	r2, r3
 800765c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007660:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007664:	fbb2 f6f3 	udiv	r6, r2, r3
 8007668:	d331      	bcc.n	80076ce <quorem+0x9e>
 800766a:	f04f 0e00 	mov.w	lr, #0
 800766e:	4640      	mov	r0, r8
 8007670:	46ac      	mov	ip, r5
 8007672:	46f2      	mov	sl, lr
 8007674:	f850 2b04 	ldr.w	r2, [r0], #4
 8007678:	b293      	uxth	r3, r2
 800767a:	fb06 e303 	mla	r3, r6, r3, lr
 800767e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007682:	b29b      	uxth	r3, r3
 8007684:	ebaa 0303 	sub.w	r3, sl, r3
 8007688:	f8dc a000 	ldr.w	sl, [ip]
 800768c:	0c12      	lsrs	r2, r2, #16
 800768e:	fa13 f38a 	uxtah	r3, r3, sl
 8007692:	fb06 e202 	mla	r2, r6, r2, lr
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	9b00      	ldr	r3, [sp, #0]
 800769a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800769e:	b292      	uxth	r2, r2
 80076a0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80076a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076a8:	f8bd 3000 	ldrh.w	r3, [sp]
 80076ac:	4581      	cmp	r9, r0
 80076ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076b2:	f84c 3b04 	str.w	r3, [ip], #4
 80076b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80076ba:	d2db      	bcs.n	8007674 <quorem+0x44>
 80076bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80076c0:	b92b      	cbnz	r3, 80076ce <quorem+0x9e>
 80076c2:	9b01      	ldr	r3, [sp, #4]
 80076c4:	3b04      	subs	r3, #4
 80076c6:	429d      	cmp	r5, r3
 80076c8:	461a      	mov	r2, r3
 80076ca:	d32e      	bcc.n	800772a <quorem+0xfa>
 80076cc:	613c      	str	r4, [r7, #16]
 80076ce:	4638      	mov	r0, r7
 80076d0:	f001 fc82 	bl	8008fd8 <__mcmp>
 80076d4:	2800      	cmp	r0, #0
 80076d6:	db24      	blt.n	8007722 <quorem+0xf2>
 80076d8:	3601      	adds	r6, #1
 80076da:	4628      	mov	r0, r5
 80076dc:	f04f 0c00 	mov.w	ip, #0
 80076e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80076e4:	f8d0 e000 	ldr.w	lr, [r0]
 80076e8:	b293      	uxth	r3, r2
 80076ea:	ebac 0303 	sub.w	r3, ip, r3
 80076ee:	0c12      	lsrs	r2, r2, #16
 80076f0:	fa13 f38e 	uxtah	r3, r3, lr
 80076f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80076f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007702:	45c1      	cmp	r9, r8
 8007704:	f840 3b04 	str.w	r3, [r0], #4
 8007708:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800770c:	d2e8      	bcs.n	80076e0 <quorem+0xb0>
 800770e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007712:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007716:	b922      	cbnz	r2, 8007722 <quorem+0xf2>
 8007718:	3b04      	subs	r3, #4
 800771a:	429d      	cmp	r5, r3
 800771c:	461a      	mov	r2, r3
 800771e:	d30a      	bcc.n	8007736 <quorem+0x106>
 8007720:	613c      	str	r4, [r7, #16]
 8007722:	4630      	mov	r0, r6
 8007724:	b003      	add	sp, #12
 8007726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800772a:	6812      	ldr	r2, [r2, #0]
 800772c:	3b04      	subs	r3, #4
 800772e:	2a00      	cmp	r2, #0
 8007730:	d1cc      	bne.n	80076cc <quorem+0x9c>
 8007732:	3c01      	subs	r4, #1
 8007734:	e7c7      	b.n	80076c6 <quorem+0x96>
 8007736:	6812      	ldr	r2, [r2, #0]
 8007738:	3b04      	subs	r3, #4
 800773a:	2a00      	cmp	r2, #0
 800773c:	d1f0      	bne.n	8007720 <quorem+0xf0>
 800773e:	3c01      	subs	r4, #1
 8007740:	e7eb      	b.n	800771a <quorem+0xea>
 8007742:	2000      	movs	r0, #0
 8007744:	e7ee      	b.n	8007724 <quorem+0xf4>
	...

08007748 <_dtoa_r>:
 8007748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800774c:	ed2d 8b04 	vpush	{d8-d9}
 8007750:	ec57 6b10 	vmov	r6, r7, d0
 8007754:	b093      	sub	sp, #76	; 0x4c
 8007756:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007758:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800775c:	9106      	str	r1, [sp, #24]
 800775e:	ee10 aa10 	vmov	sl, s0
 8007762:	4604      	mov	r4, r0
 8007764:	9209      	str	r2, [sp, #36]	; 0x24
 8007766:	930c      	str	r3, [sp, #48]	; 0x30
 8007768:	46bb      	mov	fp, r7
 800776a:	b975      	cbnz	r5, 800778a <_dtoa_r+0x42>
 800776c:	2010      	movs	r0, #16
 800776e:	f001 f94d 	bl	8008a0c <malloc>
 8007772:	4602      	mov	r2, r0
 8007774:	6260      	str	r0, [r4, #36]	; 0x24
 8007776:	b920      	cbnz	r0, 8007782 <_dtoa_r+0x3a>
 8007778:	4ba7      	ldr	r3, [pc, #668]	; (8007a18 <_dtoa_r+0x2d0>)
 800777a:	21ea      	movs	r1, #234	; 0xea
 800777c:	48a7      	ldr	r0, [pc, #668]	; (8007a1c <_dtoa_r+0x2d4>)
 800777e:	f002 f8ad 	bl	80098dc <__assert_func>
 8007782:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007786:	6005      	str	r5, [r0, #0]
 8007788:	60c5      	str	r5, [r0, #12]
 800778a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800778c:	6819      	ldr	r1, [r3, #0]
 800778e:	b151      	cbz	r1, 80077a6 <_dtoa_r+0x5e>
 8007790:	685a      	ldr	r2, [r3, #4]
 8007792:	604a      	str	r2, [r1, #4]
 8007794:	2301      	movs	r3, #1
 8007796:	4093      	lsls	r3, r2
 8007798:	608b      	str	r3, [r1, #8]
 800779a:	4620      	mov	r0, r4
 800779c:	f001 f990 	bl	8008ac0 <_Bfree>
 80077a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077a2:	2200      	movs	r2, #0
 80077a4:	601a      	str	r2, [r3, #0]
 80077a6:	1e3b      	subs	r3, r7, #0
 80077a8:	bfaa      	itet	ge
 80077aa:	2300      	movge	r3, #0
 80077ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80077b0:	f8c8 3000 	strge.w	r3, [r8]
 80077b4:	4b9a      	ldr	r3, [pc, #616]	; (8007a20 <_dtoa_r+0x2d8>)
 80077b6:	bfbc      	itt	lt
 80077b8:	2201      	movlt	r2, #1
 80077ba:	f8c8 2000 	strlt.w	r2, [r8]
 80077be:	ea33 030b 	bics.w	r3, r3, fp
 80077c2:	d11b      	bne.n	80077fc <_dtoa_r+0xb4>
 80077c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077c6:	f242 730f 	movw	r3, #9999	; 0x270f
 80077ca:	6013      	str	r3, [r2, #0]
 80077cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077d0:	4333      	orrs	r3, r6
 80077d2:	f000 8592 	beq.w	80082fa <_dtoa_r+0xbb2>
 80077d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077d8:	b963      	cbnz	r3, 80077f4 <_dtoa_r+0xac>
 80077da:	4b92      	ldr	r3, [pc, #584]	; (8007a24 <_dtoa_r+0x2dc>)
 80077dc:	e022      	b.n	8007824 <_dtoa_r+0xdc>
 80077de:	4b92      	ldr	r3, [pc, #584]	; (8007a28 <_dtoa_r+0x2e0>)
 80077e0:	9301      	str	r3, [sp, #4]
 80077e2:	3308      	adds	r3, #8
 80077e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80077e6:	6013      	str	r3, [r2, #0]
 80077e8:	9801      	ldr	r0, [sp, #4]
 80077ea:	b013      	add	sp, #76	; 0x4c
 80077ec:	ecbd 8b04 	vpop	{d8-d9}
 80077f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f4:	4b8b      	ldr	r3, [pc, #556]	; (8007a24 <_dtoa_r+0x2dc>)
 80077f6:	9301      	str	r3, [sp, #4]
 80077f8:	3303      	adds	r3, #3
 80077fa:	e7f3      	b.n	80077e4 <_dtoa_r+0x9c>
 80077fc:	2200      	movs	r2, #0
 80077fe:	2300      	movs	r3, #0
 8007800:	4650      	mov	r0, sl
 8007802:	4659      	mov	r1, fp
 8007804:	f7f9 f938 	bl	8000a78 <__aeabi_dcmpeq>
 8007808:	ec4b ab19 	vmov	d9, sl, fp
 800780c:	4680      	mov	r8, r0
 800780e:	b158      	cbz	r0, 8007828 <_dtoa_r+0xe0>
 8007810:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007812:	2301      	movs	r3, #1
 8007814:	6013      	str	r3, [r2, #0]
 8007816:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 856b 	beq.w	80082f4 <_dtoa_r+0xbac>
 800781e:	4883      	ldr	r0, [pc, #524]	; (8007a2c <_dtoa_r+0x2e4>)
 8007820:	6018      	str	r0, [r3, #0]
 8007822:	1e43      	subs	r3, r0, #1
 8007824:	9301      	str	r3, [sp, #4]
 8007826:	e7df      	b.n	80077e8 <_dtoa_r+0xa0>
 8007828:	ec4b ab10 	vmov	d0, sl, fp
 800782c:	aa10      	add	r2, sp, #64	; 0x40
 800782e:	a911      	add	r1, sp, #68	; 0x44
 8007830:	4620      	mov	r0, r4
 8007832:	f001 fcf3 	bl	800921c <__d2b>
 8007836:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800783a:	ee08 0a10 	vmov	s16, r0
 800783e:	2d00      	cmp	r5, #0
 8007840:	f000 8084 	beq.w	800794c <_dtoa_r+0x204>
 8007844:	ee19 3a90 	vmov	r3, s19
 8007848:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800784c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007850:	4656      	mov	r6, sl
 8007852:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007856:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800785a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800785e:	4b74      	ldr	r3, [pc, #464]	; (8007a30 <_dtoa_r+0x2e8>)
 8007860:	2200      	movs	r2, #0
 8007862:	4630      	mov	r0, r6
 8007864:	4639      	mov	r1, r7
 8007866:	f7f8 fce7 	bl	8000238 <__aeabi_dsub>
 800786a:	a365      	add	r3, pc, #404	; (adr r3, 8007a00 <_dtoa_r+0x2b8>)
 800786c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007870:	f7f8 fe9a 	bl	80005a8 <__aeabi_dmul>
 8007874:	a364      	add	r3, pc, #400	; (adr r3, 8007a08 <_dtoa_r+0x2c0>)
 8007876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787a:	f7f8 fcdf 	bl	800023c <__adddf3>
 800787e:	4606      	mov	r6, r0
 8007880:	4628      	mov	r0, r5
 8007882:	460f      	mov	r7, r1
 8007884:	f7f8 fe26 	bl	80004d4 <__aeabi_i2d>
 8007888:	a361      	add	r3, pc, #388	; (adr r3, 8007a10 <_dtoa_r+0x2c8>)
 800788a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788e:	f7f8 fe8b 	bl	80005a8 <__aeabi_dmul>
 8007892:	4602      	mov	r2, r0
 8007894:	460b      	mov	r3, r1
 8007896:	4630      	mov	r0, r6
 8007898:	4639      	mov	r1, r7
 800789a:	f7f8 fccf 	bl	800023c <__adddf3>
 800789e:	4606      	mov	r6, r0
 80078a0:	460f      	mov	r7, r1
 80078a2:	f7f9 f931 	bl	8000b08 <__aeabi_d2iz>
 80078a6:	2200      	movs	r2, #0
 80078a8:	9000      	str	r0, [sp, #0]
 80078aa:	2300      	movs	r3, #0
 80078ac:	4630      	mov	r0, r6
 80078ae:	4639      	mov	r1, r7
 80078b0:	f7f9 f8ec 	bl	8000a8c <__aeabi_dcmplt>
 80078b4:	b150      	cbz	r0, 80078cc <_dtoa_r+0x184>
 80078b6:	9800      	ldr	r0, [sp, #0]
 80078b8:	f7f8 fe0c 	bl	80004d4 <__aeabi_i2d>
 80078bc:	4632      	mov	r2, r6
 80078be:	463b      	mov	r3, r7
 80078c0:	f7f9 f8da 	bl	8000a78 <__aeabi_dcmpeq>
 80078c4:	b910      	cbnz	r0, 80078cc <_dtoa_r+0x184>
 80078c6:	9b00      	ldr	r3, [sp, #0]
 80078c8:	3b01      	subs	r3, #1
 80078ca:	9300      	str	r3, [sp, #0]
 80078cc:	9b00      	ldr	r3, [sp, #0]
 80078ce:	2b16      	cmp	r3, #22
 80078d0:	d85a      	bhi.n	8007988 <_dtoa_r+0x240>
 80078d2:	9a00      	ldr	r2, [sp, #0]
 80078d4:	4b57      	ldr	r3, [pc, #348]	; (8007a34 <_dtoa_r+0x2ec>)
 80078d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078de:	ec51 0b19 	vmov	r0, r1, d9
 80078e2:	f7f9 f8d3 	bl	8000a8c <__aeabi_dcmplt>
 80078e6:	2800      	cmp	r0, #0
 80078e8:	d050      	beq.n	800798c <_dtoa_r+0x244>
 80078ea:	9b00      	ldr	r3, [sp, #0]
 80078ec:	3b01      	subs	r3, #1
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	2300      	movs	r3, #0
 80078f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80078f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078f6:	1b5d      	subs	r5, r3, r5
 80078f8:	1e6b      	subs	r3, r5, #1
 80078fa:	9305      	str	r3, [sp, #20]
 80078fc:	bf45      	ittet	mi
 80078fe:	f1c5 0301 	rsbmi	r3, r5, #1
 8007902:	9304      	strmi	r3, [sp, #16]
 8007904:	2300      	movpl	r3, #0
 8007906:	2300      	movmi	r3, #0
 8007908:	bf4c      	ite	mi
 800790a:	9305      	strmi	r3, [sp, #20]
 800790c:	9304      	strpl	r3, [sp, #16]
 800790e:	9b00      	ldr	r3, [sp, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	db3d      	blt.n	8007990 <_dtoa_r+0x248>
 8007914:	9b05      	ldr	r3, [sp, #20]
 8007916:	9a00      	ldr	r2, [sp, #0]
 8007918:	920a      	str	r2, [sp, #40]	; 0x28
 800791a:	4413      	add	r3, r2
 800791c:	9305      	str	r3, [sp, #20]
 800791e:	2300      	movs	r3, #0
 8007920:	9307      	str	r3, [sp, #28]
 8007922:	9b06      	ldr	r3, [sp, #24]
 8007924:	2b09      	cmp	r3, #9
 8007926:	f200 8089 	bhi.w	8007a3c <_dtoa_r+0x2f4>
 800792a:	2b05      	cmp	r3, #5
 800792c:	bfc4      	itt	gt
 800792e:	3b04      	subgt	r3, #4
 8007930:	9306      	strgt	r3, [sp, #24]
 8007932:	9b06      	ldr	r3, [sp, #24]
 8007934:	f1a3 0302 	sub.w	r3, r3, #2
 8007938:	bfcc      	ite	gt
 800793a:	2500      	movgt	r5, #0
 800793c:	2501      	movle	r5, #1
 800793e:	2b03      	cmp	r3, #3
 8007940:	f200 8087 	bhi.w	8007a52 <_dtoa_r+0x30a>
 8007944:	e8df f003 	tbb	[pc, r3]
 8007948:	59383a2d 	.word	0x59383a2d
 800794c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007950:	441d      	add	r5, r3
 8007952:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007956:	2b20      	cmp	r3, #32
 8007958:	bfc1      	itttt	gt
 800795a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800795e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007962:	fa0b f303 	lslgt.w	r3, fp, r3
 8007966:	fa26 f000 	lsrgt.w	r0, r6, r0
 800796a:	bfda      	itte	le
 800796c:	f1c3 0320 	rsble	r3, r3, #32
 8007970:	fa06 f003 	lslle.w	r0, r6, r3
 8007974:	4318      	orrgt	r0, r3
 8007976:	f7f8 fd9d 	bl	80004b4 <__aeabi_ui2d>
 800797a:	2301      	movs	r3, #1
 800797c:	4606      	mov	r6, r0
 800797e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007982:	3d01      	subs	r5, #1
 8007984:	930e      	str	r3, [sp, #56]	; 0x38
 8007986:	e76a      	b.n	800785e <_dtoa_r+0x116>
 8007988:	2301      	movs	r3, #1
 800798a:	e7b2      	b.n	80078f2 <_dtoa_r+0x1aa>
 800798c:	900b      	str	r0, [sp, #44]	; 0x2c
 800798e:	e7b1      	b.n	80078f4 <_dtoa_r+0x1ac>
 8007990:	9b04      	ldr	r3, [sp, #16]
 8007992:	9a00      	ldr	r2, [sp, #0]
 8007994:	1a9b      	subs	r3, r3, r2
 8007996:	9304      	str	r3, [sp, #16]
 8007998:	4253      	negs	r3, r2
 800799a:	9307      	str	r3, [sp, #28]
 800799c:	2300      	movs	r3, #0
 800799e:	930a      	str	r3, [sp, #40]	; 0x28
 80079a0:	e7bf      	b.n	8007922 <_dtoa_r+0x1da>
 80079a2:	2300      	movs	r3, #0
 80079a4:	9308      	str	r3, [sp, #32]
 80079a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	dc55      	bgt.n	8007a58 <_dtoa_r+0x310>
 80079ac:	2301      	movs	r3, #1
 80079ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80079b2:	461a      	mov	r2, r3
 80079b4:	9209      	str	r2, [sp, #36]	; 0x24
 80079b6:	e00c      	b.n	80079d2 <_dtoa_r+0x28a>
 80079b8:	2301      	movs	r3, #1
 80079ba:	e7f3      	b.n	80079a4 <_dtoa_r+0x25c>
 80079bc:	2300      	movs	r3, #0
 80079be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079c0:	9308      	str	r3, [sp, #32]
 80079c2:	9b00      	ldr	r3, [sp, #0]
 80079c4:	4413      	add	r3, r2
 80079c6:	9302      	str	r3, [sp, #8]
 80079c8:	3301      	adds	r3, #1
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	9303      	str	r3, [sp, #12]
 80079ce:	bfb8      	it	lt
 80079d0:	2301      	movlt	r3, #1
 80079d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80079d4:	2200      	movs	r2, #0
 80079d6:	6042      	str	r2, [r0, #4]
 80079d8:	2204      	movs	r2, #4
 80079da:	f102 0614 	add.w	r6, r2, #20
 80079de:	429e      	cmp	r6, r3
 80079e0:	6841      	ldr	r1, [r0, #4]
 80079e2:	d93d      	bls.n	8007a60 <_dtoa_r+0x318>
 80079e4:	4620      	mov	r0, r4
 80079e6:	f001 f82b 	bl	8008a40 <_Balloc>
 80079ea:	9001      	str	r0, [sp, #4]
 80079ec:	2800      	cmp	r0, #0
 80079ee:	d13b      	bne.n	8007a68 <_dtoa_r+0x320>
 80079f0:	4b11      	ldr	r3, [pc, #68]	; (8007a38 <_dtoa_r+0x2f0>)
 80079f2:	4602      	mov	r2, r0
 80079f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80079f8:	e6c0      	b.n	800777c <_dtoa_r+0x34>
 80079fa:	2301      	movs	r3, #1
 80079fc:	e7df      	b.n	80079be <_dtoa_r+0x276>
 80079fe:	bf00      	nop
 8007a00:	636f4361 	.word	0x636f4361
 8007a04:	3fd287a7 	.word	0x3fd287a7
 8007a08:	8b60c8b3 	.word	0x8b60c8b3
 8007a0c:	3fc68a28 	.word	0x3fc68a28
 8007a10:	509f79fb 	.word	0x509f79fb
 8007a14:	3fd34413 	.word	0x3fd34413
 8007a18:	0800a6f6 	.word	0x0800a6f6
 8007a1c:	0800a70d 	.word	0x0800a70d
 8007a20:	7ff00000 	.word	0x7ff00000
 8007a24:	0800a6f2 	.word	0x0800a6f2
 8007a28:	0800a6e9 	.word	0x0800a6e9
 8007a2c:	0800a56d 	.word	0x0800a56d
 8007a30:	3ff80000 	.word	0x3ff80000
 8007a34:	0800a878 	.word	0x0800a878
 8007a38:	0800a768 	.word	0x0800a768
 8007a3c:	2501      	movs	r5, #1
 8007a3e:	2300      	movs	r3, #0
 8007a40:	9306      	str	r3, [sp, #24]
 8007a42:	9508      	str	r5, [sp, #32]
 8007a44:	f04f 33ff 	mov.w	r3, #4294967295
 8007a48:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	2312      	movs	r3, #18
 8007a50:	e7b0      	b.n	80079b4 <_dtoa_r+0x26c>
 8007a52:	2301      	movs	r3, #1
 8007a54:	9308      	str	r3, [sp, #32]
 8007a56:	e7f5      	b.n	8007a44 <_dtoa_r+0x2fc>
 8007a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a5a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a5e:	e7b8      	b.n	80079d2 <_dtoa_r+0x28a>
 8007a60:	3101      	adds	r1, #1
 8007a62:	6041      	str	r1, [r0, #4]
 8007a64:	0052      	lsls	r2, r2, #1
 8007a66:	e7b8      	b.n	80079da <_dtoa_r+0x292>
 8007a68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a6a:	9a01      	ldr	r2, [sp, #4]
 8007a6c:	601a      	str	r2, [r3, #0]
 8007a6e:	9b03      	ldr	r3, [sp, #12]
 8007a70:	2b0e      	cmp	r3, #14
 8007a72:	f200 809d 	bhi.w	8007bb0 <_dtoa_r+0x468>
 8007a76:	2d00      	cmp	r5, #0
 8007a78:	f000 809a 	beq.w	8007bb0 <_dtoa_r+0x468>
 8007a7c:	9b00      	ldr	r3, [sp, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	dd32      	ble.n	8007ae8 <_dtoa_r+0x3a0>
 8007a82:	4ab7      	ldr	r2, [pc, #732]	; (8007d60 <_dtoa_r+0x618>)
 8007a84:	f003 030f 	and.w	r3, r3, #15
 8007a88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007a8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a90:	9b00      	ldr	r3, [sp, #0]
 8007a92:	05d8      	lsls	r0, r3, #23
 8007a94:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007a98:	d516      	bpl.n	8007ac8 <_dtoa_r+0x380>
 8007a9a:	4bb2      	ldr	r3, [pc, #712]	; (8007d64 <_dtoa_r+0x61c>)
 8007a9c:	ec51 0b19 	vmov	r0, r1, d9
 8007aa0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007aa4:	f7f8 feaa 	bl	80007fc <__aeabi_ddiv>
 8007aa8:	f007 070f 	and.w	r7, r7, #15
 8007aac:	4682      	mov	sl, r0
 8007aae:	468b      	mov	fp, r1
 8007ab0:	2503      	movs	r5, #3
 8007ab2:	4eac      	ldr	r6, [pc, #688]	; (8007d64 <_dtoa_r+0x61c>)
 8007ab4:	b957      	cbnz	r7, 8007acc <_dtoa_r+0x384>
 8007ab6:	4642      	mov	r2, r8
 8007ab8:	464b      	mov	r3, r9
 8007aba:	4650      	mov	r0, sl
 8007abc:	4659      	mov	r1, fp
 8007abe:	f7f8 fe9d 	bl	80007fc <__aeabi_ddiv>
 8007ac2:	4682      	mov	sl, r0
 8007ac4:	468b      	mov	fp, r1
 8007ac6:	e028      	b.n	8007b1a <_dtoa_r+0x3d2>
 8007ac8:	2502      	movs	r5, #2
 8007aca:	e7f2      	b.n	8007ab2 <_dtoa_r+0x36a>
 8007acc:	07f9      	lsls	r1, r7, #31
 8007ace:	d508      	bpl.n	8007ae2 <_dtoa_r+0x39a>
 8007ad0:	4640      	mov	r0, r8
 8007ad2:	4649      	mov	r1, r9
 8007ad4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ad8:	f7f8 fd66 	bl	80005a8 <__aeabi_dmul>
 8007adc:	3501      	adds	r5, #1
 8007ade:	4680      	mov	r8, r0
 8007ae0:	4689      	mov	r9, r1
 8007ae2:	107f      	asrs	r7, r7, #1
 8007ae4:	3608      	adds	r6, #8
 8007ae6:	e7e5      	b.n	8007ab4 <_dtoa_r+0x36c>
 8007ae8:	f000 809b 	beq.w	8007c22 <_dtoa_r+0x4da>
 8007aec:	9b00      	ldr	r3, [sp, #0]
 8007aee:	4f9d      	ldr	r7, [pc, #628]	; (8007d64 <_dtoa_r+0x61c>)
 8007af0:	425e      	negs	r6, r3
 8007af2:	4b9b      	ldr	r3, [pc, #620]	; (8007d60 <_dtoa_r+0x618>)
 8007af4:	f006 020f 	and.w	r2, r6, #15
 8007af8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b00:	ec51 0b19 	vmov	r0, r1, d9
 8007b04:	f7f8 fd50 	bl	80005a8 <__aeabi_dmul>
 8007b08:	1136      	asrs	r6, r6, #4
 8007b0a:	4682      	mov	sl, r0
 8007b0c:	468b      	mov	fp, r1
 8007b0e:	2300      	movs	r3, #0
 8007b10:	2502      	movs	r5, #2
 8007b12:	2e00      	cmp	r6, #0
 8007b14:	d17a      	bne.n	8007c0c <_dtoa_r+0x4c4>
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1d3      	bne.n	8007ac2 <_dtoa_r+0x37a>
 8007b1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f000 8082 	beq.w	8007c26 <_dtoa_r+0x4de>
 8007b22:	4b91      	ldr	r3, [pc, #580]	; (8007d68 <_dtoa_r+0x620>)
 8007b24:	2200      	movs	r2, #0
 8007b26:	4650      	mov	r0, sl
 8007b28:	4659      	mov	r1, fp
 8007b2a:	f7f8 ffaf 	bl	8000a8c <__aeabi_dcmplt>
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	d079      	beq.n	8007c26 <_dtoa_r+0x4de>
 8007b32:	9b03      	ldr	r3, [sp, #12]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d076      	beq.n	8007c26 <_dtoa_r+0x4de>
 8007b38:	9b02      	ldr	r3, [sp, #8]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	dd36      	ble.n	8007bac <_dtoa_r+0x464>
 8007b3e:	9b00      	ldr	r3, [sp, #0]
 8007b40:	4650      	mov	r0, sl
 8007b42:	4659      	mov	r1, fp
 8007b44:	1e5f      	subs	r7, r3, #1
 8007b46:	2200      	movs	r2, #0
 8007b48:	4b88      	ldr	r3, [pc, #544]	; (8007d6c <_dtoa_r+0x624>)
 8007b4a:	f7f8 fd2d 	bl	80005a8 <__aeabi_dmul>
 8007b4e:	9e02      	ldr	r6, [sp, #8]
 8007b50:	4682      	mov	sl, r0
 8007b52:	468b      	mov	fp, r1
 8007b54:	3501      	adds	r5, #1
 8007b56:	4628      	mov	r0, r5
 8007b58:	f7f8 fcbc 	bl	80004d4 <__aeabi_i2d>
 8007b5c:	4652      	mov	r2, sl
 8007b5e:	465b      	mov	r3, fp
 8007b60:	f7f8 fd22 	bl	80005a8 <__aeabi_dmul>
 8007b64:	4b82      	ldr	r3, [pc, #520]	; (8007d70 <_dtoa_r+0x628>)
 8007b66:	2200      	movs	r2, #0
 8007b68:	f7f8 fb68 	bl	800023c <__adddf3>
 8007b6c:	46d0      	mov	r8, sl
 8007b6e:	46d9      	mov	r9, fp
 8007b70:	4682      	mov	sl, r0
 8007b72:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007b76:	2e00      	cmp	r6, #0
 8007b78:	d158      	bne.n	8007c2c <_dtoa_r+0x4e4>
 8007b7a:	4b7e      	ldr	r3, [pc, #504]	; (8007d74 <_dtoa_r+0x62c>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	4640      	mov	r0, r8
 8007b80:	4649      	mov	r1, r9
 8007b82:	f7f8 fb59 	bl	8000238 <__aeabi_dsub>
 8007b86:	4652      	mov	r2, sl
 8007b88:	465b      	mov	r3, fp
 8007b8a:	4680      	mov	r8, r0
 8007b8c:	4689      	mov	r9, r1
 8007b8e:	f7f8 ff9b 	bl	8000ac8 <__aeabi_dcmpgt>
 8007b92:	2800      	cmp	r0, #0
 8007b94:	f040 8295 	bne.w	80080c2 <_dtoa_r+0x97a>
 8007b98:	4652      	mov	r2, sl
 8007b9a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007b9e:	4640      	mov	r0, r8
 8007ba0:	4649      	mov	r1, r9
 8007ba2:	f7f8 ff73 	bl	8000a8c <__aeabi_dcmplt>
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	f040 8289 	bne.w	80080be <_dtoa_r+0x976>
 8007bac:	ec5b ab19 	vmov	sl, fp, d9
 8007bb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f2c0 8148 	blt.w	8007e48 <_dtoa_r+0x700>
 8007bb8:	9a00      	ldr	r2, [sp, #0]
 8007bba:	2a0e      	cmp	r2, #14
 8007bbc:	f300 8144 	bgt.w	8007e48 <_dtoa_r+0x700>
 8007bc0:	4b67      	ldr	r3, [pc, #412]	; (8007d60 <_dtoa_r+0x618>)
 8007bc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bc6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f280 80d5 	bge.w	8007d7c <_dtoa_r+0x634>
 8007bd2:	9b03      	ldr	r3, [sp, #12]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f300 80d1 	bgt.w	8007d7c <_dtoa_r+0x634>
 8007bda:	f040 826f 	bne.w	80080bc <_dtoa_r+0x974>
 8007bde:	4b65      	ldr	r3, [pc, #404]	; (8007d74 <_dtoa_r+0x62c>)
 8007be0:	2200      	movs	r2, #0
 8007be2:	4640      	mov	r0, r8
 8007be4:	4649      	mov	r1, r9
 8007be6:	f7f8 fcdf 	bl	80005a8 <__aeabi_dmul>
 8007bea:	4652      	mov	r2, sl
 8007bec:	465b      	mov	r3, fp
 8007bee:	f7f8 ff61 	bl	8000ab4 <__aeabi_dcmpge>
 8007bf2:	9e03      	ldr	r6, [sp, #12]
 8007bf4:	4637      	mov	r7, r6
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	f040 8245 	bne.w	8008086 <_dtoa_r+0x93e>
 8007bfc:	9d01      	ldr	r5, [sp, #4]
 8007bfe:	2331      	movs	r3, #49	; 0x31
 8007c00:	f805 3b01 	strb.w	r3, [r5], #1
 8007c04:	9b00      	ldr	r3, [sp, #0]
 8007c06:	3301      	adds	r3, #1
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	e240      	b.n	800808e <_dtoa_r+0x946>
 8007c0c:	07f2      	lsls	r2, r6, #31
 8007c0e:	d505      	bpl.n	8007c1c <_dtoa_r+0x4d4>
 8007c10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c14:	f7f8 fcc8 	bl	80005a8 <__aeabi_dmul>
 8007c18:	3501      	adds	r5, #1
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	1076      	asrs	r6, r6, #1
 8007c1e:	3708      	adds	r7, #8
 8007c20:	e777      	b.n	8007b12 <_dtoa_r+0x3ca>
 8007c22:	2502      	movs	r5, #2
 8007c24:	e779      	b.n	8007b1a <_dtoa_r+0x3d2>
 8007c26:	9f00      	ldr	r7, [sp, #0]
 8007c28:	9e03      	ldr	r6, [sp, #12]
 8007c2a:	e794      	b.n	8007b56 <_dtoa_r+0x40e>
 8007c2c:	9901      	ldr	r1, [sp, #4]
 8007c2e:	4b4c      	ldr	r3, [pc, #304]	; (8007d60 <_dtoa_r+0x618>)
 8007c30:	4431      	add	r1, r6
 8007c32:	910d      	str	r1, [sp, #52]	; 0x34
 8007c34:	9908      	ldr	r1, [sp, #32]
 8007c36:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007c3a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c3e:	2900      	cmp	r1, #0
 8007c40:	d043      	beq.n	8007cca <_dtoa_r+0x582>
 8007c42:	494d      	ldr	r1, [pc, #308]	; (8007d78 <_dtoa_r+0x630>)
 8007c44:	2000      	movs	r0, #0
 8007c46:	f7f8 fdd9 	bl	80007fc <__aeabi_ddiv>
 8007c4a:	4652      	mov	r2, sl
 8007c4c:	465b      	mov	r3, fp
 8007c4e:	f7f8 faf3 	bl	8000238 <__aeabi_dsub>
 8007c52:	9d01      	ldr	r5, [sp, #4]
 8007c54:	4682      	mov	sl, r0
 8007c56:	468b      	mov	fp, r1
 8007c58:	4649      	mov	r1, r9
 8007c5a:	4640      	mov	r0, r8
 8007c5c:	f7f8 ff54 	bl	8000b08 <__aeabi_d2iz>
 8007c60:	4606      	mov	r6, r0
 8007c62:	f7f8 fc37 	bl	80004d4 <__aeabi_i2d>
 8007c66:	4602      	mov	r2, r0
 8007c68:	460b      	mov	r3, r1
 8007c6a:	4640      	mov	r0, r8
 8007c6c:	4649      	mov	r1, r9
 8007c6e:	f7f8 fae3 	bl	8000238 <__aeabi_dsub>
 8007c72:	3630      	adds	r6, #48	; 0x30
 8007c74:	f805 6b01 	strb.w	r6, [r5], #1
 8007c78:	4652      	mov	r2, sl
 8007c7a:	465b      	mov	r3, fp
 8007c7c:	4680      	mov	r8, r0
 8007c7e:	4689      	mov	r9, r1
 8007c80:	f7f8 ff04 	bl	8000a8c <__aeabi_dcmplt>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	d163      	bne.n	8007d50 <_dtoa_r+0x608>
 8007c88:	4642      	mov	r2, r8
 8007c8a:	464b      	mov	r3, r9
 8007c8c:	4936      	ldr	r1, [pc, #216]	; (8007d68 <_dtoa_r+0x620>)
 8007c8e:	2000      	movs	r0, #0
 8007c90:	f7f8 fad2 	bl	8000238 <__aeabi_dsub>
 8007c94:	4652      	mov	r2, sl
 8007c96:	465b      	mov	r3, fp
 8007c98:	f7f8 fef8 	bl	8000a8c <__aeabi_dcmplt>
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	f040 80b5 	bne.w	8007e0c <_dtoa_r+0x6c4>
 8007ca2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ca4:	429d      	cmp	r5, r3
 8007ca6:	d081      	beq.n	8007bac <_dtoa_r+0x464>
 8007ca8:	4b30      	ldr	r3, [pc, #192]	; (8007d6c <_dtoa_r+0x624>)
 8007caa:	2200      	movs	r2, #0
 8007cac:	4650      	mov	r0, sl
 8007cae:	4659      	mov	r1, fp
 8007cb0:	f7f8 fc7a 	bl	80005a8 <__aeabi_dmul>
 8007cb4:	4b2d      	ldr	r3, [pc, #180]	; (8007d6c <_dtoa_r+0x624>)
 8007cb6:	4682      	mov	sl, r0
 8007cb8:	468b      	mov	fp, r1
 8007cba:	4640      	mov	r0, r8
 8007cbc:	4649      	mov	r1, r9
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f7f8 fc72 	bl	80005a8 <__aeabi_dmul>
 8007cc4:	4680      	mov	r8, r0
 8007cc6:	4689      	mov	r9, r1
 8007cc8:	e7c6      	b.n	8007c58 <_dtoa_r+0x510>
 8007cca:	4650      	mov	r0, sl
 8007ccc:	4659      	mov	r1, fp
 8007cce:	f7f8 fc6b 	bl	80005a8 <__aeabi_dmul>
 8007cd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cd4:	9d01      	ldr	r5, [sp, #4]
 8007cd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cd8:	4682      	mov	sl, r0
 8007cda:	468b      	mov	fp, r1
 8007cdc:	4649      	mov	r1, r9
 8007cde:	4640      	mov	r0, r8
 8007ce0:	f7f8 ff12 	bl	8000b08 <__aeabi_d2iz>
 8007ce4:	4606      	mov	r6, r0
 8007ce6:	f7f8 fbf5 	bl	80004d4 <__aeabi_i2d>
 8007cea:	3630      	adds	r6, #48	; 0x30
 8007cec:	4602      	mov	r2, r0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	4640      	mov	r0, r8
 8007cf2:	4649      	mov	r1, r9
 8007cf4:	f7f8 faa0 	bl	8000238 <__aeabi_dsub>
 8007cf8:	f805 6b01 	strb.w	r6, [r5], #1
 8007cfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cfe:	429d      	cmp	r5, r3
 8007d00:	4680      	mov	r8, r0
 8007d02:	4689      	mov	r9, r1
 8007d04:	f04f 0200 	mov.w	r2, #0
 8007d08:	d124      	bne.n	8007d54 <_dtoa_r+0x60c>
 8007d0a:	4b1b      	ldr	r3, [pc, #108]	; (8007d78 <_dtoa_r+0x630>)
 8007d0c:	4650      	mov	r0, sl
 8007d0e:	4659      	mov	r1, fp
 8007d10:	f7f8 fa94 	bl	800023c <__adddf3>
 8007d14:	4602      	mov	r2, r0
 8007d16:	460b      	mov	r3, r1
 8007d18:	4640      	mov	r0, r8
 8007d1a:	4649      	mov	r1, r9
 8007d1c:	f7f8 fed4 	bl	8000ac8 <__aeabi_dcmpgt>
 8007d20:	2800      	cmp	r0, #0
 8007d22:	d173      	bne.n	8007e0c <_dtoa_r+0x6c4>
 8007d24:	4652      	mov	r2, sl
 8007d26:	465b      	mov	r3, fp
 8007d28:	4913      	ldr	r1, [pc, #76]	; (8007d78 <_dtoa_r+0x630>)
 8007d2a:	2000      	movs	r0, #0
 8007d2c:	f7f8 fa84 	bl	8000238 <__aeabi_dsub>
 8007d30:	4602      	mov	r2, r0
 8007d32:	460b      	mov	r3, r1
 8007d34:	4640      	mov	r0, r8
 8007d36:	4649      	mov	r1, r9
 8007d38:	f7f8 fea8 	bl	8000a8c <__aeabi_dcmplt>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	f43f af35 	beq.w	8007bac <_dtoa_r+0x464>
 8007d42:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007d44:	1e6b      	subs	r3, r5, #1
 8007d46:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d48:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d4c:	2b30      	cmp	r3, #48	; 0x30
 8007d4e:	d0f8      	beq.n	8007d42 <_dtoa_r+0x5fa>
 8007d50:	9700      	str	r7, [sp, #0]
 8007d52:	e049      	b.n	8007de8 <_dtoa_r+0x6a0>
 8007d54:	4b05      	ldr	r3, [pc, #20]	; (8007d6c <_dtoa_r+0x624>)
 8007d56:	f7f8 fc27 	bl	80005a8 <__aeabi_dmul>
 8007d5a:	4680      	mov	r8, r0
 8007d5c:	4689      	mov	r9, r1
 8007d5e:	e7bd      	b.n	8007cdc <_dtoa_r+0x594>
 8007d60:	0800a878 	.word	0x0800a878
 8007d64:	0800a850 	.word	0x0800a850
 8007d68:	3ff00000 	.word	0x3ff00000
 8007d6c:	40240000 	.word	0x40240000
 8007d70:	401c0000 	.word	0x401c0000
 8007d74:	40140000 	.word	0x40140000
 8007d78:	3fe00000 	.word	0x3fe00000
 8007d7c:	9d01      	ldr	r5, [sp, #4]
 8007d7e:	4656      	mov	r6, sl
 8007d80:	465f      	mov	r7, fp
 8007d82:	4642      	mov	r2, r8
 8007d84:	464b      	mov	r3, r9
 8007d86:	4630      	mov	r0, r6
 8007d88:	4639      	mov	r1, r7
 8007d8a:	f7f8 fd37 	bl	80007fc <__aeabi_ddiv>
 8007d8e:	f7f8 febb 	bl	8000b08 <__aeabi_d2iz>
 8007d92:	4682      	mov	sl, r0
 8007d94:	f7f8 fb9e 	bl	80004d4 <__aeabi_i2d>
 8007d98:	4642      	mov	r2, r8
 8007d9a:	464b      	mov	r3, r9
 8007d9c:	f7f8 fc04 	bl	80005a8 <__aeabi_dmul>
 8007da0:	4602      	mov	r2, r0
 8007da2:	460b      	mov	r3, r1
 8007da4:	4630      	mov	r0, r6
 8007da6:	4639      	mov	r1, r7
 8007da8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007dac:	f7f8 fa44 	bl	8000238 <__aeabi_dsub>
 8007db0:	f805 6b01 	strb.w	r6, [r5], #1
 8007db4:	9e01      	ldr	r6, [sp, #4]
 8007db6:	9f03      	ldr	r7, [sp, #12]
 8007db8:	1bae      	subs	r6, r5, r6
 8007dba:	42b7      	cmp	r7, r6
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	d135      	bne.n	8007e2e <_dtoa_r+0x6e6>
 8007dc2:	f7f8 fa3b 	bl	800023c <__adddf3>
 8007dc6:	4642      	mov	r2, r8
 8007dc8:	464b      	mov	r3, r9
 8007dca:	4606      	mov	r6, r0
 8007dcc:	460f      	mov	r7, r1
 8007dce:	f7f8 fe7b 	bl	8000ac8 <__aeabi_dcmpgt>
 8007dd2:	b9d0      	cbnz	r0, 8007e0a <_dtoa_r+0x6c2>
 8007dd4:	4642      	mov	r2, r8
 8007dd6:	464b      	mov	r3, r9
 8007dd8:	4630      	mov	r0, r6
 8007dda:	4639      	mov	r1, r7
 8007ddc:	f7f8 fe4c 	bl	8000a78 <__aeabi_dcmpeq>
 8007de0:	b110      	cbz	r0, 8007de8 <_dtoa_r+0x6a0>
 8007de2:	f01a 0f01 	tst.w	sl, #1
 8007de6:	d110      	bne.n	8007e0a <_dtoa_r+0x6c2>
 8007de8:	4620      	mov	r0, r4
 8007dea:	ee18 1a10 	vmov	r1, s16
 8007dee:	f000 fe67 	bl	8008ac0 <_Bfree>
 8007df2:	2300      	movs	r3, #0
 8007df4:	9800      	ldr	r0, [sp, #0]
 8007df6:	702b      	strb	r3, [r5, #0]
 8007df8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007dfa:	3001      	adds	r0, #1
 8007dfc:	6018      	str	r0, [r3, #0]
 8007dfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f43f acf1 	beq.w	80077e8 <_dtoa_r+0xa0>
 8007e06:	601d      	str	r5, [r3, #0]
 8007e08:	e4ee      	b.n	80077e8 <_dtoa_r+0xa0>
 8007e0a:	9f00      	ldr	r7, [sp, #0]
 8007e0c:	462b      	mov	r3, r5
 8007e0e:	461d      	mov	r5, r3
 8007e10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e14:	2a39      	cmp	r2, #57	; 0x39
 8007e16:	d106      	bne.n	8007e26 <_dtoa_r+0x6de>
 8007e18:	9a01      	ldr	r2, [sp, #4]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d1f7      	bne.n	8007e0e <_dtoa_r+0x6c6>
 8007e1e:	9901      	ldr	r1, [sp, #4]
 8007e20:	2230      	movs	r2, #48	; 0x30
 8007e22:	3701      	adds	r7, #1
 8007e24:	700a      	strb	r2, [r1, #0]
 8007e26:	781a      	ldrb	r2, [r3, #0]
 8007e28:	3201      	adds	r2, #1
 8007e2a:	701a      	strb	r2, [r3, #0]
 8007e2c:	e790      	b.n	8007d50 <_dtoa_r+0x608>
 8007e2e:	4ba6      	ldr	r3, [pc, #664]	; (80080c8 <_dtoa_r+0x980>)
 8007e30:	2200      	movs	r2, #0
 8007e32:	f7f8 fbb9 	bl	80005a8 <__aeabi_dmul>
 8007e36:	2200      	movs	r2, #0
 8007e38:	2300      	movs	r3, #0
 8007e3a:	4606      	mov	r6, r0
 8007e3c:	460f      	mov	r7, r1
 8007e3e:	f7f8 fe1b 	bl	8000a78 <__aeabi_dcmpeq>
 8007e42:	2800      	cmp	r0, #0
 8007e44:	d09d      	beq.n	8007d82 <_dtoa_r+0x63a>
 8007e46:	e7cf      	b.n	8007de8 <_dtoa_r+0x6a0>
 8007e48:	9a08      	ldr	r2, [sp, #32]
 8007e4a:	2a00      	cmp	r2, #0
 8007e4c:	f000 80d7 	beq.w	8007ffe <_dtoa_r+0x8b6>
 8007e50:	9a06      	ldr	r2, [sp, #24]
 8007e52:	2a01      	cmp	r2, #1
 8007e54:	f300 80ba 	bgt.w	8007fcc <_dtoa_r+0x884>
 8007e58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e5a:	2a00      	cmp	r2, #0
 8007e5c:	f000 80b2 	beq.w	8007fc4 <_dtoa_r+0x87c>
 8007e60:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e64:	9e07      	ldr	r6, [sp, #28]
 8007e66:	9d04      	ldr	r5, [sp, #16]
 8007e68:	9a04      	ldr	r2, [sp, #16]
 8007e6a:	441a      	add	r2, r3
 8007e6c:	9204      	str	r2, [sp, #16]
 8007e6e:	9a05      	ldr	r2, [sp, #20]
 8007e70:	2101      	movs	r1, #1
 8007e72:	441a      	add	r2, r3
 8007e74:	4620      	mov	r0, r4
 8007e76:	9205      	str	r2, [sp, #20]
 8007e78:	f000 ff24 	bl	8008cc4 <__i2b>
 8007e7c:	4607      	mov	r7, r0
 8007e7e:	2d00      	cmp	r5, #0
 8007e80:	dd0c      	ble.n	8007e9c <_dtoa_r+0x754>
 8007e82:	9b05      	ldr	r3, [sp, #20]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	dd09      	ble.n	8007e9c <_dtoa_r+0x754>
 8007e88:	42ab      	cmp	r3, r5
 8007e8a:	9a04      	ldr	r2, [sp, #16]
 8007e8c:	bfa8      	it	ge
 8007e8e:	462b      	movge	r3, r5
 8007e90:	1ad2      	subs	r2, r2, r3
 8007e92:	9204      	str	r2, [sp, #16]
 8007e94:	9a05      	ldr	r2, [sp, #20]
 8007e96:	1aed      	subs	r5, r5, r3
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	9305      	str	r3, [sp, #20]
 8007e9c:	9b07      	ldr	r3, [sp, #28]
 8007e9e:	b31b      	cbz	r3, 8007ee8 <_dtoa_r+0x7a0>
 8007ea0:	9b08      	ldr	r3, [sp, #32]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f000 80af 	beq.w	8008006 <_dtoa_r+0x8be>
 8007ea8:	2e00      	cmp	r6, #0
 8007eaa:	dd13      	ble.n	8007ed4 <_dtoa_r+0x78c>
 8007eac:	4639      	mov	r1, r7
 8007eae:	4632      	mov	r2, r6
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	f000 ffc7 	bl	8008e44 <__pow5mult>
 8007eb6:	ee18 2a10 	vmov	r2, s16
 8007eba:	4601      	mov	r1, r0
 8007ebc:	4607      	mov	r7, r0
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	f000 ff16 	bl	8008cf0 <__multiply>
 8007ec4:	ee18 1a10 	vmov	r1, s16
 8007ec8:	4680      	mov	r8, r0
 8007eca:	4620      	mov	r0, r4
 8007ecc:	f000 fdf8 	bl	8008ac0 <_Bfree>
 8007ed0:	ee08 8a10 	vmov	s16, r8
 8007ed4:	9b07      	ldr	r3, [sp, #28]
 8007ed6:	1b9a      	subs	r2, r3, r6
 8007ed8:	d006      	beq.n	8007ee8 <_dtoa_r+0x7a0>
 8007eda:	ee18 1a10 	vmov	r1, s16
 8007ede:	4620      	mov	r0, r4
 8007ee0:	f000 ffb0 	bl	8008e44 <__pow5mult>
 8007ee4:	ee08 0a10 	vmov	s16, r0
 8007ee8:	2101      	movs	r1, #1
 8007eea:	4620      	mov	r0, r4
 8007eec:	f000 feea 	bl	8008cc4 <__i2b>
 8007ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	4606      	mov	r6, r0
 8007ef6:	f340 8088 	ble.w	800800a <_dtoa_r+0x8c2>
 8007efa:	461a      	mov	r2, r3
 8007efc:	4601      	mov	r1, r0
 8007efe:	4620      	mov	r0, r4
 8007f00:	f000 ffa0 	bl	8008e44 <__pow5mult>
 8007f04:	9b06      	ldr	r3, [sp, #24]
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	4606      	mov	r6, r0
 8007f0a:	f340 8081 	ble.w	8008010 <_dtoa_r+0x8c8>
 8007f0e:	f04f 0800 	mov.w	r8, #0
 8007f12:	6933      	ldr	r3, [r6, #16]
 8007f14:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007f18:	6918      	ldr	r0, [r3, #16]
 8007f1a:	f000 fe83 	bl	8008c24 <__hi0bits>
 8007f1e:	f1c0 0020 	rsb	r0, r0, #32
 8007f22:	9b05      	ldr	r3, [sp, #20]
 8007f24:	4418      	add	r0, r3
 8007f26:	f010 001f 	ands.w	r0, r0, #31
 8007f2a:	f000 8092 	beq.w	8008052 <_dtoa_r+0x90a>
 8007f2e:	f1c0 0320 	rsb	r3, r0, #32
 8007f32:	2b04      	cmp	r3, #4
 8007f34:	f340 808a 	ble.w	800804c <_dtoa_r+0x904>
 8007f38:	f1c0 001c 	rsb	r0, r0, #28
 8007f3c:	9b04      	ldr	r3, [sp, #16]
 8007f3e:	4403      	add	r3, r0
 8007f40:	9304      	str	r3, [sp, #16]
 8007f42:	9b05      	ldr	r3, [sp, #20]
 8007f44:	4403      	add	r3, r0
 8007f46:	4405      	add	r5, r0
 8007f48:	9305      	str	r3, [sp, #20]
 8007f4a:	9b04      	ldr	r3, [sp, #16]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	dd07      	ble.n	8007f60 <_dtoa_r+0x818>
 8007f50:	ee18 1a10 	vmov	r1, s16
 8007f54:	461a      	mov	r2, r3
 8007f56:	4620      	mov	r0, r4
 8007f58:	f000 ffce 	bl	8008ef8 <__lshift>
 8007f5c:	ee08 0a10 	vmov	s16, r0
 8007f60:	9b05      	ldr	r3, [sp, #20]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	dd05      	ble.n	8007f72 <_dtoa_r+0x82a>
 8007f66:	4631      	mov	r1, r6
 8007f68:	461a      	mov	r2, r3
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f000 ffc4 	bl	8008ef8 <__lshift>
 8007f70:	4606      	mov	r6, r0
 8007f72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d06e      	beq.n	8008056 <_dtoa_r+0x90e>
 8007f78:	ee18 0a10 	vmov	r0, s16
 8007f7c:	4631      	mov	r1, r6
 8007f7e:	f001 f82b 	bl	8008fd8 <__mcmp>
 8007f82:	2800      	cmp	r0, #0
 8007f84:	da67      	bge.n	8008056 <_dtoa_r+0x90e>
 8007f86:	9b00      	ldr	r3, [sp, #0]
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	ee18 1a10 	vmov	r1, s16
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	220a      	movs	r2, #10
 8007f92:	2300      	movs	r3, #0
 8007f94:	4620      	mov	r0, r4
 8007f96:	f000 fdb5 	bl	8008b04 <__multadd>
 8007f9a:	9b08      	ldr	r3, [sp, #32]
 8007f9c:	ee08 0a10 	vmov	s16, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f000 81b1 	beq.w	8008308 <_dtoa_r+0xbc0>
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	4639      	mov	r1, r7
 8007faa:	220a      	movs	r2, #10
 8007fac:	4620      	mov	r0, r4
 8007fae:	f000 fda9 	bl	8008b04 <__multadd>
 8007fb2:	9b02      	ldr	r3, [sp, #8]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	4607      	mov	r7, r0
 8007fb8:	f300 808e 	bgt.w	80080d8 <_dtoa_r+0x990>
 8007fbc:	9b06      	ldr	r3, [sp, #24]
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	dc51      	bgt.n	8008066 <_dtoa_r+0x91e>
 8007fc2:	e089      	b.n	80080d8 <_dtoa_r+0x990>
 8007fc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fc6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007fca:	e74b      	b.n	8007e64 <_dtoa_r+0x71c>
 8007fcc:	9b03      	ldr	r3, [sp, #12]
 8007fce:	1e5e      	subs	r6, r3, #1
 8007fd0:	9b07      	ldr	r3, [sp, #28]
 8007fd2:	42b3      	cmp	r3, r6
 8007fd4:	bfbf      	itttt	lt
 8007fd6:	9b07      	ldrlt	r3, [sp, #28]
 8007fd8:	9607      	strlt	r6, [sp, #28]
 8007fda:	1af2      	sublt	r2, r6, r3
 8007fdc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007fde:	bfb6      	itet	lt
 8007fe0:	189b      	addlt	r3, r3, r2
 8007fe2:	1b9e      	subge	r6, r3, r6
 8007fe4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007fe6:	9b03      	ldr	r3, [sp, #12]
 8007fe8:	bfb8      	it	lt
 8007fea:	2600      	movlt	r6, #0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	bfb7      	itett	lt
 8007ff0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007ff4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007ff8:	1a9d      	sublt	r5, r3, r2
 8007ffa:	2300      	movlt	r3, #0
 8007ffc:	e734      	b.n	8007e68 <_dtoa_r+0x720>
 8007ffe:	9e07      	ldr	r6, [sp, #28]
 8008000:	9d04      	ldr	r5, [sp, #16]
 8008002:	9f08      	ldr	r7, [sp, #32]
 8008004:	e73b      	b.n	8007e7e <_dtoa_r+0x736>
 8008006:	9a07      	ldr	r2, [sp, #28]
 8008008:	e767      	b.n	8007eda <_dtoa_r+0x792>
 800800a:	9b06      	ldr	r3, [sp, #24]
 800800c:	2b01      	cmp	r3, #1
 800800e:	dc18      	bgt.n	8008042 <_dtoa_r+0x8fa>
 8008010:	f1ba 0f00 	cmp.w	sl, #0
 8008014:	d115      	bne.n	8008042 <_dtoa_r+0x8fa>
 8008016:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800801a:	b993      	cbnz	r3, 8008042 <_dtoa_r+0x8fa>
 800801c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008020:	0d1b      	lsrs	r3, r3, #20
 8008022:	051b      	lsls	r3, r3, #20
 8008024:	b183      	cbz	r3, 8008048 <_dtoa_r+0x900>
 8008026:	9b04      	ldr	r3, [sp, #16]
 8008028:	3301      	adds	r3, #1
 800802a:	9304      	str	r3, [sp, #16]
 800802c:	9b05      	ldr	r3, [sp, #20]
 800802e:	3301      	adds	r3, #1
 8008030:	9305      	str	r3, [sp, #20]
 8008032:	f04f 0801 	mov.w	r8, #1
 8008036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008038:	2b00      	cmp	r3, #0
 800803a:	f47f af6a 	bne.w	8007f12 <_dtoa_r+0x7ca>
 800803e:	2001      	movs	r0, #1
 8008040:	e76f      	b.n	8007f22 <_dtoa_r+0x7da>
 8008042:	f04f 0800 	mov.w	r8, #0
 8008046:	e7f6      	b.n	8008036 <_dtoa_r+0x8ee>
 8008048:	4698      	mov	r8, r3
 800804a:	e7f4      	b.n	8008036 <_dtoa_r+0x8ee>
 800804c:	f43f af7d 	beq.w	8007f4a <_dtoa_r+0x802>
 8008050:	4618      	mov	r0, r3
 8008052:	301c      	adds	r0, #28
 8008054:	e772      	b.n	8007f3c <_dtoa_r+0x7f4>
 8008056:	9b03      	ldr	r3, [sp, #12]
 8008058:	2b00      	cmp	r3, #0
 800805a:	dc37      	bgt.n	80080cc <_dtoa_r+0x984>
 800805c:	9b06      	ldr	r3, [sp, #24]
 800805e:	2b02      	cmp	r3, #2
 8008060:	dd34      	ble.n	80080cc <_dtoa_r+0x984>
 8008062:	9b03      	ldr	r3, [sp, #12]
 8008064:	9302      	str	r3, [sp, #8]
 8008066:	9b02      	ldr	r3, [sp, #8]
 8008068:	b96b      	cbnz	r3, 8008086 <_dtoa_r+0x93e>
 800806a:	4631      	mov	r1, r6
 800806c:	2205      	movs	r2, #5
 800806e:	4620      	mov	r0, r4
 8008070:	f000 fd48 	bl	8008b04 <__multadd>
 8008074:	4601      	mov	r1, r0
 8008076:	4606      	mov	r6, r0
 8008078:	ee18 0a10 	vmov	r0, s16
 800807c:	f000 ffac 	bl	8008fd8 <__mcmp>
 8008080:	2800      	cmp	r0, #0
 8008082:	f73f adbb 	bgt.w	8007bfc <_dtoa_r+0x4b4>
 8008086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008088:	9d01      	ldr	r5, [sp, #4]
 800808a:	43db      	mvns	r3, r3
 800808c:	9300      	str	r3, [sp, #0]
 800808e:	f04f 0800 	mov.w	r8, #0
 8008092:	4631      	mov	r1, r6
 8008094:	4620      	mov	r0, r4
 8008096:	f000 fd13 	bl	8008ac0 <_Bfree>
 800809a:	2f00      	cmp	r7, #0
 800809c:	f43f aea4 	beq.w	8007de8 <_dtoa_r+0x6a0>
 80080a0:	f1b8 0f00 	cmp.w	r8, #0
 80080a4:	d005      	beq.n	80080b2 <_dtoa_r+0x96a>
 80080a6:	45b8      	cmp	r8, r7
 80080a8:	d003      	beq.n	80080b2 <_dtoa_r+0x96a>
 80080aa:	4641      	mov	r1, r8
 80080ac:	4620      	mov	r0, r4
 80080ae:	f000 fd07 	bl	8008ac0 <_Bfree>
 80080b2:	4639      	mov	r1, r7
 80080b4:	4620      	mov	r0, r4
 80080b6:	f000 fd03 	bl	8008ac0 <_Bfree>
 80080ba:	e695      	b.n	8007de8 <_dtoa_r+0x6a0>
 80080bc:	2600      	movs	r6, #0
 80080be:	4637      	mov	r7, r6
 80080c0:	e7e1      	b.n	8008086 <_dtoa_r+0x93e>
 80080c2:	9700      	str	r7, [sp, #0]
 80080c4:	4637      	mov	r7, r6
 80080c6:	e599      	b.n	8007bfc <_dtoa_r+0x4b4>
 80080c8:	40240000 	.word	0x40240000
 80080cc:	9b08      	ldr	r3, [sp, #32]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f000 80ca 	beq.w	8008268 <_dtoa_r+0xb20>
 80080d4:	9b03      	ldr	r3, [sp, #12]
 80080d6:	9302      	str	r3, [sp, #8]
 80080d8:	2d00      	cmp	r5, #0
 80080da:	dd05      	ble.n	80080e8 <_dtoa_r+0x9a0>
 80080dc:	4639      	mov	r1, r7
 80080de:	462a      	mov	r2, r5
 80080e0:	4620      	mov	r0, r4
 80080e2:	f000 ff09 	bl	8008ef8 <__lshift>
 80080e6:	4607      	mov	r7, r0
 80080e8:	f1b8 0f00 	cmp.w	r8, #0
 80080ec:	d05b      	beq.n	80081a6 <_dtoa_r+0xa5e>
 80080ee:	6879      	ldr	r1, [r7, #4]
 80080f0:	4620      	mov	r0, r4
 80080f2:	f000 fca5 	bl	8008a40 <_Balloc>
 80080f6:	4605      	mov	r5, r0
 80080f8:	b928      	cbnz	r0, 8008106 <_dtoa_r+0x9be>
 80080fa:	4b87      	ldr	r3, [pc, #540]	; (8008318 <_dtoa_r+0xbd0>)
 80080fc:	4602      	mov	r2, r0
 80080fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008102:	f7ff bb3b 	b.w	800777c <_dtoa_r+0x34>
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	3202      	adds	r2, #2
 800810a:	0092      	lsls	r2, r2, #2
 800810c:	f107 010c 	add.w	r1, r7, #12
 8008110:	300c      	adds	r0, #12
 8008112:	f7fd fd0f 	bl	8005b34 <memcpy>
 8008116:	2201      	movs	r2, #1
 8008118:	4629      	mov	r1, r5
 800811a:	4620      	mov	r0, r4
 800811c:	f000 feec 	bl	8008ef8 <__lshift>
 8008120:	9b01      	ldr	r3, [sp, #4]
 8008122:	f103 0901 	add.w	r9, r3, #1
 8008126:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800812a:	4413      	add	r3, r2
 800812c:	9305      	str	r3, [sp, #20]
 800812e:	f00a 0301 	and.w	r3, sl, #1
 8008132:	46b8      	mov	r8, r7
 8008134:	9304      	str	r3, [sp, #16]
 8008136:	4607      	mov	r7, r0
 8008138:	4631      	mov	r1, r6
 800813a:	ee18 0a10 	vmov	r0, s16
 800813e:	f7ff fa77 	bl	8007630 <quorem>
 8008142:	4641      	mov	r1, r8
 8008144:	9002      	str	r0, [sp, #8]
 8008146:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800814a:	ee18 0a10 	vmov	r0, s16
 800814e:	f000 ff43 	bl	8008fd8 <__mcmp>
 8008152:	463a      	mov	r2, r7
 8008154:	9003      	str	r0, [sp, #12]
 8008156:	4631      	mov	r1, r6
 8008158:	4620      	mov	r0, r4
 800815a:	f000 ff59 	bl	8009010 <__mdiff>
 800815e:	68c2      	ldr	r2, [r0, #12]
 8008160:	f109 3bff 	add.w	fp, r9, #4294967295
 8008164:	4605      	mov	r5, r0
 8008166:	bb02      	cbnz	r2, 80081aa <_dtoa_r+0xa62>
 8008168:	4601      	mov	r1, r0
 800816a:	ee18 0a10 	vmov	r0, s16
 800816e:	f000 ff33 	bl	8008fd8 <__mcmp>
 8008172:	4602      	mov	r2, r0
 8008174:	4629      	mov	r1, r5
 8008176:	4620      	mov	r0, r4
 8008178:	9207      	str	r2, [sp, #28]
 800817a:	f000 fca1 	bl	8008ac0 <_Bfree>
 800817e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008182:	ea43 0102 	orr.w	r1, r3, r2
 8008186:	9b04      	ldr	r3, [sp, #16]
 8008188:	430b      	orrs	r3, r1
 800818a:	464d      	mov	r5, r9
 800818c:	d10f      	bne.n	80081ae <_dtoa_r+0xa66>
 800818e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008192:	d02a      	beq.n	80081ea <_dtoa_r+0xaa2>
 8008194:	9b03      	ldr	r3, [sp, #12]
 8008196:	2b00      	cmp	r3, #0
 8008198:	dd02      	ble.n	80081a0 <_dtoa_r+0xa58>
 800819a:	9b02      	ldr	r3, [sp, #8]
 800819c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80081a0:	f88b a000 	strb.w	sl, [fp]
 80081a4:	e775      	b.n	8008092 <_dtoa_r+0x94a>
 80081a6:	4638      	mov	r0, r7
 80081a8:	e7ba      	b.n	8008120 <_dtoa_r+0x9d8>
 80081aa:	2201      	movs	r2, #1
 80081ac:	e7e2      	b.n	8008174 <_dtoa_r+0xa2c>
 80081ae:	9b03      	ldr	r3, [sp, #12]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	db04      	blt.n	80081be <_dtoa_r+0xa76>
 80081b4:	9906      	ldr	r1, [sp, #24]
 80081b6:	430b      	orrs	r3, r1
 80081b8:	9904      	ldr	r1, [sp, #16]
 80081ba:	430b      	orrs	r3, r1
 80081bc:	d122      	bne.n	8008204 <_dtoa_r+0xabc>
 80081be:	2a00      	cmp	r2, #0
 80081c0:	ddee      	ble.n	80081a0 <_dtoa_r+0xa58>
 80081c2:	ee18 1a10 	vmov	r1, s16
 80081c6:	2201      	movs	r2, #1
 80081c8:	4620      	mov	r0, r4
 80081ca:	f000 fe95 	bl	8008ef8 <__lshift>
 80081ce:	4631      	mov	r1, r6
 80081d0:	ee08 0a10 	vmov	s16, r0
 80081d4:	f000 ff00 	bl	8008fd8 <__mcmp>
 80081d8:	2800      	cmp	r0, #0
 80081da:	dc03      	bgt.n	80081e4 <_dtoa_r+0xa9c>
 80081dc:	d1e0      	bne.n	80081a0 <_dtoa_r+0xa58>
 80081de:	f01a 0f01 	tst.w	sl, #1
 80081e2:	d0dd      	beq.n	80081a0 <_dtoa_r+0xa58>
 80081e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80081e8:	d1d7      	bne.n	800819a <_dtoa_r+0xa52>
 80081ea:	2339      	movs	r3, #57	; 0x39
 80081ec:	f88b 3000 	strb.w	r3, [fp]
 80081f0:	462b      	mov	r3, r5
 80081f2:	461d      	mov	r5, r3
 80081f4:	3b01      	subs	r3, #1
 80081f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80081fa:	2a39      	cmp	r2, #57	; 0x39
 80081fc:	d071      	beq.n	80082e2 <_dtoa_r+0xb9a>
 80081fe:	3201      	adds	r2, #1
 8008200:	701a      	strb	r2, [r3, #0]
 8008202:	e746      	b.n	8008092 <_dtoa_r+0x94a>
 8008204:	2a00      	cmp	r2, #0
 8008206:	dd07      	ble.n	8008218 <_dtoa_r+0xad0>
 8008208:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800820c:	d0ed      	beq.n	80081ea <_dtoa_r+0xaa2>
 800820e:	f10a 0301 	add.w	r3, sl, #1
 8008212:	f88b 3000 	strb.w	r3, [fp]
 8008216:	e73c      	b.n	8008092 <_dtoa_r+0x94a>
 8008218:	9b05      	ldr	r3, [sp, #20]
 800821a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800821e:	4599      	cmp	r9, r3
 8008220:	d047      	beq.n	80082b2 <_dtoa_r+0xb6a>
 8008222:	ee18 1a10 	vmov	r1, s16
 8008226:	2300      	movs	r3, #0
 8008228:	220a      	movs	r2, #10
 800822a:	4620      	mov	r0, r4
 800822c:	f000 fc6a 	bl	8008b04 <__multadd>
 8008230:	45b8      	cmp	r8, r7
 8008232:	ee08 0a10 	vmov	s16, r0
 8008236:	f04f 0300 	mov.w	r3, #0
 800823a:	f04f 020a 	mov.w	r2, #10
 800823e:	4641      	mov	r1, r8
 8008240:	4620      	mov	r0, r4
 8008242:	d106      	bne.n	8008252 <_dtoa_r+0xb0a>
 8008244:	f000 fc5e 	bl	8008b04 <__multadd>
 8008248:	4680      	mov	r8, r0
 800824a:	4607      	mov	r7, r0
 800824c:	f109 0901 	add.w	r9, r9, #1
 8008250:	e772      	b.n	8008138 <_dtoa_r+0x9f0>
 8008252:	f000 fc57 	bl	8008b04 <__multadd>
 8008256:	4639      	mov	r1, r7
 8008258:	4680      	mov	r8, r0
 800825a:	2300      	movs	r3, #0
 800825c:	220a      	movs	r2, #10
 800825e:	4620      	mov	r0, r4
 8008260:	f000 fc50 	bl	8008b04 <__multadd>
 8008264:	4607      	mov	r7, r0
 8008266:	e7f1      	b.n	800824c <_dtoa_r+0xb04>
 8008268:	9b03      	ldr	r3, [sp, #12]
 800826a:	9302      	str	r3, [sp, #8]
 800826c:	9d01      	ldr	r5, [sp, #4]
 800826e:	ee18 0a10 	vmov	r0, s16
 8008272:	4631      	mov	r1, r6
 8008274:	f7ff f9dc 	bl	8007630 <quorem>
 8008278:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800827c:	9b01      	ldr	r3, [sp, #4]
 800827e:	f805 ab01 	strb.w	sl, [r5], #1
 8008282:	1aea      	subs	r2, r5, r3
 8008284:	9b02      	ldr	r3, [sp, #8]
 8008286:	4293      	cmp	r3, r2
 8008288:	dd09      	ble.n	800829e <_dtoa_r+0xb56>
 800828a:	ee18 1a10 	vmov	r1, s16
 800828e:	2300      	movs	r3, #0
 8008290:	220a      	movs	r2, #10
 8008292:	4620      	mov	r0, r4
 8008294:	f000 fc36 	bl	8008b04 <__multadd>
 8008298:	ee08 0a10 	vmov	s16, r0
 800829c:	e7e7      	b.n	800826e <_dtoa_r+0xb26>
 800829e:	9b02      	ldr	r3, [sp, #8]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	bfc8      	it	gt
 80082a4:	461d      	movgt	r5, r3
 80082a6:	9b01      	ldr	r3, [sp, #4]
 80082a8:	bfd8      	it	le
 80082aa:	2501      	movle	r5, #1
 80082ac:	441d      	add	r5, r3
 80082ae:	f04f 0800 	mov.w	r8, #0
 80082b2:	ee18 1a10 	vmov	r1, s16
 80082b6:	2201      	movs	r2, #1
 80082b8:	4620      	mov	r0, r4
 80082ba:	f000 fe1d 	bl	8008ef8 <__lshift>
 80082be:	4631      	mov	r1, r6
 80082c0:	ee08 0a10 	vmov	s16, r0
 80082c4:	f000 fe88 	bl	8008fd8 <__mcmp>
 80082c8:	2800      	cmp	r0, #0
 80082ca:	dc91      	bgt.n	80081f0 <_dtoa_r+0xaa8>
 80082cc:	d102      	bne.n	80082d4 <_dtoa_r+0xb8c>
 80082ce:	f01a 0f01 	tst.w	sl, #1
 80082d2:	d18d      	bne.n	80081f0 <_dtoa_r+0xaa8>
 80082d4:	462b      	mov	r3, r5
 80082d6:	461d      	mov	r5, r3
 80082d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082dc:	2a30      	cmp	r2, #48	; 0x30
 80082de:	d0fa      	beq.n	80082d6 <_dtoa_r+0xb8e>
 80082e0:	e6d7      	b.n	8008092 <_dtoa_r+0x94a>
 80082e2:	9a01      	ldr	r2, [sp, #4]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d184      	bne.n	80081f2 <_dtoa_r+0xaaa>
 80082e8:	9b00      	ldr	r3, [sp, #0]
 80082ea:	3301      	adds	r3, #1
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	2331      	movs	r3, #49	; 0x31
 80082f0:	7013      	strb	r3, [r2, #0]
 80082f2:	e6ce      	b.n	8008092 <_dtoa_r+0x94a>
 80082f4:	4b09      	ldr	r3, [pc, #36]	; (800831c <_dtoa_r+0xbd4>)
 80082f6:	f7ff ba95 	b.w	8007824 <_dtoa_r+0xdc>
 80082fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f47f aa6e 	bne.w	80077de <_dtoa_r+0x96>
 8008302:	4b07      	ldr	r3, [pc, #28]	; (8008320 <_dtoa_r+0xbd8>)
 8008304:	f7ff ba8e 	b.w	8007824 <_dtoa_r+0xdc>
 8008308:	9b02      	ldr	r3, [sp, #8]
 800830a:	2b00      	cmp	r3, #0
 800830c:	dcae      	bgt.n	800826c <_dtoa_r+0xb24>
 800830e:	9b06      	ldr	r3, [sp, #24]
 8008310:	2b02      	cmp	r3, #2
 8008312:	f73f aea8 	bgt.w	8008066 <_dtoa_r+0x91e>
 8008316:	e7a9      	b.n	800826c <_dtoa_r+0xb24>
 8008318:	0800a768 	.word	0x0800a768
 800831c:	0800a56c 	.word	0x0800a56c
 8008320:	0800a6e9 	.word	0x0800a6e9

08008324 <rshift>:
 8008324:	6903      	ldr	r3, [r0, #16]
 8008326:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800832a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800832e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008332:	f100 0414 	add.w	r4, r0, #20
 8008336:	dd45      	ble.n	80083c4 <rshift+0xa0>
 8008338:	f011 011f 	ands.w	r1, r1, #31
 800833c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008340:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008344:	d10c      	bne.n	8008360 <rshift+0x3c>
 8008346:	f100 0710 	add.w	r7, r0, #16
 800834a:	4629      	mov	r1, r5
 800834c:	42b1      	cmp	r1, r6
 800834e:	d334      	bcc.n	80083ba <rshift+0x96>
 8008350:	1a9b      	subs	r3, r3, r2
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	1eea      	subs	r2, r5, #3
 8008356:	4296      	cmp	r6, r2
 8008358:	bf38      	it	cc
 800835a:	2300      	movcc	r3, #0
 800835c:	4423      	add	r3, r4
 800835e:	e015      	b.n	800838c <rshift+0x68>
 8008360:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008364:	f1c1 0820 	rsb	r8, r1, #32
 8008368:	40cf      	lsrs	r7, r1
 800836a:	f105 0e04 	add.w	lr, r5, #4
 800836e:	46a1      	mov	r9, r4
 8008370:	4576      	cmp	r6, lr
 8008372:	46f4      	mov	ip, lr
 8008374:	d815      	bhi.n	80083a2 <rshift+0x7e>
 8008376:	1a9a      	subs	r2, r3, r2
 8008378:	0092      	lsls	r2, r2, #2
 800837a:	3a04      	subs	r2, #4
 800837c:	3501      	adds	r5, #1
 800837e:	42ae      	cmp	r6, r5
 8008380:	bf38      	it	cc
 8008382:	2200      	movcc	r2, #0
 8008384:	18a3      	adds	r3, r4, r2
 8008386:	50a7      	str	r7, [r4, r2]
 8008388:	b107      	cbz	r7, 800838c <rshift+0x68>
 800838a:	3304      	adds	r3, #4
 800838c:	1b1a      	subs	r2, r3, r4
 800838e:	42a3      	cmp	r3, r4
 8008390:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008394:	bf08      	it	eq
 8008396:	2300      	moveq	r3, #0
 8008398:	6102      	str	r2, [r0, #16]
 800839a:	bf08      	it	eq
 800839c:	6143      	streq	r3, [r0, #20]
 800839e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083a2:	f8dc c000 	ldr.w	ip, [ip]
 80083a6:	fa0c fc08 	lsl.w	ip, ip, r8
 80083aa:	ea4c 0707 	orr.w	r7, ip, r7
 80083ae:	f849 7b04 	str.w	r7, [r9], #4
 80083b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80083b6:	40cf      	lsrs	r7, r1
 80083b8:	e7da      	b.n	8008370 <rshift+0x4c>
 80083ba:	f851 cb04 	ldr.w	ip, [r1], #4
 80083be:	f847 cf04 	str.w	ip, [r7, #4]!
 80083c2:	e7c3      	b.n	800834c <rshift+0x28>
 80083c4:	4623      	mov	r3, r4
 80083c6:	e7e1      	b.n	800838c <rshift+0x68>

080083c8 <__hexdig_fun>:
 80083c8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80083cc:	2b09      	cmp	r3, #9
 80083ce:	d802      	bhi.n	80083d6 <__hexdig_fun+0xe>
 80083d0:	3820      	subs	r0, #32
 80083d2:	b2c0      	uxtb	r0, r0
 80083d4:	4770      	bx	lr
 80083d6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80083da:	2b05      	cmp	r3, #5
 80083dc:	d801      	bhi.n	80083e2 <__hexdig_fun+0x1a>
 80083de:	3847      	subs	r0, #71	; 0x47
 80083e0:	e7f7      	b.n	80083d2 <__hexdig_fun+0xa>
 80083e2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80083e6:	2b05      	cmp	r3, #5
 80083e8:	d801      	bhi.n	80083ee <__hexdig_fun+0x26>
 80083ea:	3827      	subs	r0, #39	; 0x27
 80083ec:	e7f1      	b.n	80083d2 <__hexdig_fun+0xa>
 80083ee:	2000      	movs	r0, #0
 80083f0:	4770      	bx	lr
	...

080083f4 <__gethex>:
 80083f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f8:	ed2d 8b02 	vpush	{d8}
 80083fc:	b089      	sub	sp, #36	; 0x24
 80083fe:	ee08 0a10 	vmov	s16, r0
 8008402:	9304      	str	r3, [sp, #16]
 8008404:	4bb4      	ldr	r3, [pc, #720]	; (80086d8 <__gethex+0x2e4>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	9301      	str	r3, [sp, #4]
 800840a:	4618      	mov	r0, r3
 800840c:	468b      	mov	fp, r1
 800840e:	4690      	mov	r8, r2
 8008410:	f7f7 feb6 	bl	8000180 <strlen>
 8008414:	9b01      	ldr	r3, [sp, #4]
 8008416:	f8db 2000 	ldr.w	r2, [fp]
 800841a:	4403      	add	r3, r0
 800841c:	4682      	mov	sl, r0
 800841e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008422:	9305      	str	r3, [sp, #20]
 8008424:	1c93      	adds	r3, r2, #2
 8008426:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800842a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800842e:	32fe      	adds	r2, #254	; 0xfe
 8008430:	18d1      	adds	r1, r2, r3
 8008432:	461f      	mov	r7, r3
 8008434:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008438:	9100      	str	r1, [sp, #0]
 800843a:	2830      	cmp	r0, #48	; 0x30
 800843c:	d0f8      	beq.n	8008430 <__gethex+0x3c>
 800843e:	f7ff ffc3 	bl	80083c8 <__hexdig_fun>
 8008442:	4604      	mov	r4, r0
 8008444:	2800      	cmp	r0, #0
 8008446:	d13a      	bne.n	80084be <__gethex+0xca>
 8008448:	9901      	ldr	r1, [sp, #4]
 800844a:	4652      	mov	r2, sl
 800844c:	4638      	mov	r0, r7
 800844e:	f001 fa23 	bl	8009898 <strncmp>
 8008452:	4605      	mov	r5, r0
 8008454:	2800      	cmp	r0, #0
 8008456:	d168      	bne.n	800852a <__gethex+0x136>
 8008458:	f817 000a 	ldrb.w	r0, [r7, sl]
 800845c:	eb07 060a 	add.w	r6, r7, sl
 8008460:	f7ff ffb2 	bl	80083c8 <__hexdig_fun>
 8008464:	2800      	cmp	r0, #0
 8008466:	d062      	beq.n	800852e <__gethex+0x13a>
 8008468:	4633      	mov	r3, r6
 800846a:	7818      	ldrb	r0, [r3, #0]
 800846c:	2830      	cmp	r0, #48	; 0x30
 800846e:	461f      	mov	r7, r3
 8008470:	f103 0301 	add.w	r3, r3, #1
 8008474:	d0f9      	beq.n	800846a <__gethex+0x76>
 8008476:	f7ff ffa7 	bl	80083c8 <__hexdig_fun>
 800847a:	2301      	movs	r3, #1
 800847c:	fab0 f480 	clz	r4, r0
 8008480:	0964      	lsrs	r4, r4, #5
 8008482:	4635      	mov	r5, r6
 8008484:	9300      	str	r3, [sp, #0]
 8008486:	463a      	mov	r2, r7
 8008488:	4616      	mov	r6, r2
 800848a:	3201      	adds	r2, #1
 800848c:	7830      	ldrb	r0, [r6, #0]
 800848e:	f7ff ff9b 	bl	80083c8 <__hexdig_fun>
 8008492:	2800      	cmp	r0, #0
 8008494:	d1f8      	bne.n	8008488 <__gethex+0x94>
 8008496:	9901      	ldr	r1, [sp, #4]
 8008498:	4652      	mov	r2, sl
 800849a:	4630      	mov	r0, r6
 800849c:	f001 f9fc 	bl	8009898 <strncmp>
 80084a0:	b980      	cbnz	r0, 80084c4 <__gethex+0xd0>
 80084a2:	b94d      	cbnz	r5, 80084b8 <__gethex+0xc4>
 80084a4:	eb06 050a 	add.w	r5, r6, sl
 80084a8:	462a      	mov	r2, r5
 80084aa:	4616      	mov	r6, r2
 80084ac:	3201      	adds	r2, #1
 80084ae:	7830      	ldrb	r0, [r6, #0]
 80084b0:	f7ff ff8a 	bl	80083c8 <__hexdig_fun>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	d1f8      	bne.n	80084aa <__gethex+0xb6>
 80084b8:	1bad      	subs	r5, r5, r6
 80084ba:	00ad      	lsls	r5, r5, #2
 80084bc:	e004      	b.n	80084c8 <__gethex+0xd4>
 80084be:	2400      	movs	r4, #0
 80084c0:	4625      	mov	r5, r4
 80084c2:	e7e0      	b.n	8008486 <__gethex+0x92>
 80084c4:	2d00      	cmp	r5, #0
 80084c6:	d1f7      	bne.n	80084b8 <__gethex+0xc4>
 80084c8:	7833      	ldrb	r3, [r6, #0]
 80084ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80084ce:	2b50      	cmp	r3, #80	; 0x50
 80084d0:	d13b      	bne.n	800854a <__gethex+0x156>
 80084d2:	7873      	ldrb	r3, [r6, #1]
 80084d4:	2b2b      	cmp	r3, #43	; 0x2b
 80084d6:	d02c      	beq.n	8008532 <__gethex+0x13e>
 80084d8:	2b2d      	cmp	r3, #45	; 0x2d
 80084da:	d02e      	beq.n	800853a <__gethex+0x146>
 80084dc:	1c71      	adds	r1, r6, #1
 80084de:	f04f 0900 	mov.w	r9, #0
 80084e2:	7808      	ldrb	r0, [r1, #0]
 80084e4:	f7ff ff70 	bl	80083c8 <__hexdig_fun>
 80084e8:	1e43      	subs	r3, r0, #1
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	2b18      	cmp	r3, #24
 80084ee:	d82c      	bhi.n	800854a <__gethex+0x156>
 80084f0:	f1a0 0210 	sub.w	r2, r0, #16
 80084f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80084f8:	f7ff ff66 	bl	80083c8 <__hexdig_fun>
 80084fc:	1e43      	subs	r3, r0, #1
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	2b18      	cmp	r3, #24
 8008502:	d91d      	bls.n	8008540 <__gethex+0x14c>
 8008504:	f1b9 0f00 	cmp.w	r9, #0
 8008508:	d000      	beq.n	800850c <__gethex+0x118>
 800850a:	4252      	negs	r2, r2
 800850c:	4415      	add	r5, r2
 800850e:	f8cb 1000 	str.w	r1, [fp]
 8008512:	b1e4      	cbz	r4, 800854e <__gethex+0x15a>
 8008514:	9b00      	ldr	r3, [sp, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	bf14      	ite	ne
 800851a:	2700      	movne	r7, #0
 800851c:	2706      	moveq	r7, #6
 800851e:	4638      	mov	r0, r7
 8008520:	b009      	add	sp, #36	; 0x24
 8008522:	ecbd 8b02 	vpop	{d8}
 8008526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800852a:	463e      	mov	r6, r7
 800852c:	4625      	mov	r5, r4
 800852e:	2401      	movs	r4, #1
 8008530:	e7ca      	b.n	80084c8 <__gethex+0xd4>
 8008532:	f04f 0900 	mov.w	r9, #0
 8008536:	1cb1      	adds	r1, r6, #2
 8008538:	e7d3      	b.n	80084e2 <__gethex+0xee>
 800853a:	f04f 0901 	mov.w	r9, #1
 800853e:	e7fa      	b.n	8008536 <__gethex+0x142>
 8008540:	230a      	movs	r3, #10
 8008542:	fb03 0202 	mla	r2, r3, r2, r0
 8008546:	3a10      	subs	r2, #16
 8008548:	e7d4      	b.n	80084f4 <__gethex+0x100>
 800854a:	4631      	mov	r1, r6
 800854c:	e7df      	b.n	800850e <__gethex+0x11a>
 800854e:	1bf3      	subs	r3, r6, r7
 8008550:	3b01      	subs	r3, #1
 8008552:	4621      	mov	r1, r4
 8008554:	2b07      	cmp	r3, #7
 8008556:	dc0b      	bgt.n	8008570 <__gethex+0x17c>
 8008558:	ee18 0a10 	vmov	r0, s16
 800855c:	f000 fa70 	bl	8008a40 <_Balloc>
 8008560:	4604      	mov	r4, r0
 8008562:	b940      	cbnz	r0, 8008576 <__gethex+0x182>
 8008564:	4b5d      	ldr	r3, [pc, #372]	; (80086dc <__gethex+0x2e8>)
 8008566:	4602      	mov	r2, r0
 8008568:	21de      	movs	r1, #222	; 0xde
 800856a:	485d      	ldr	r0, [pc, #372]	; (80086e0 <__gethex+0x2ec>)
 800856c:	f001 f9b6 	bl	80098dc <__assert_func>
 8008570:	3101      	adds	r1, #1
 8008572:	105b      	asrs	r3, r3, #1
 8008574:	e7ee      	b.n	8008554 <__gethex+0x160>
 8008576:	f100 0914 	add.w	r9, r0, #20
 800857a:	f04f 0b00 	mov.w	fp, #0
 800857e:	f1ca 0301 	rsb	r3, sl, #1
 8008582:	f8cd 9008 	str.w	r9, [sp, #8]
 8008586:	f8cd b000 	str.w	fp, [sp]
 800858a:	9306      	str	r3, [sp, #24]
 800858c:	42b7      	cmp	r7, r6
 800858e:	d340      	bcc.n	8008612 <__gethex+0x21e>
 8008590:	9802      	ldr	r0, [sp, #8]
 8008592:	9b00      	ldr	r3, [sp, #0]
 8008594:	f840 3b04 	str.w	r3, [r0], #4
 8008598:	eba0 0009 	sub.w	r0, r0, r9
 800859c:	1080      	asrs	r0, r0, #2
 800859e:	0146      	lsls	r6, r0, #5
 80085a0:	6120      	str	r0, [r4, #16]
 80085a2:	4618      	mov	r0, r3
 80085a4:	f000 fb3e 	bl	8008c24 <__hi0bits>
 80085a8:	1a30      	subs	r0, r6, r0
 80085aa:	f8d8 6000 	ldr.w	r6, [r8]
 80085ae:	42b0      	cmp	r0, r6
 80085b0:	dd63      	ble.n	800867a <__gethex+0x286>
 80085b2:	1b87      	subs	r7, r0, r6
 80085b4:	4639      	mov	r1, r7
 80085b6:	4620      	mov	r0, r4
 80085b8:	f000 fee2 	bl	8009380 <__any_on>
 80085bc:	4682      	mov	sl, r0
 80085be:	b1a8      	cbz	r0, 80085ec <__gethex+0x1f8>
 80085c0:	1e7b      	subs	r3, r7, #1
 80085c2:	1159      	asrs	r1, r3, #5
 80085c4:	f003 021f 	and.w	r2, r3, #31
 80085c8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80085cc:	f04f 0a01 	mov.w	sl, #1
 80085d0:	fa0a f202 	lsl.w	r2, sl, r2
 80085d4:	420a      	tst	r2, r1
 80085d6:	d009      	beq.n	80085ec <__gethex+0x1f8>
 80085d8:	4553      	cmp	r3, sl
 80085da:	dd05      	ble.n	80085e8 <__gethex+0x1f4>
 80085dc:	1eb9      	subs	r1, r7, #2
 80085de:	4620      	mov	r0, r4
 80085e0:	f000 fece 	bl	8009380 <__any_on>
 80085e4:	2800      	cmp	r0, #0
 80085e6:	d145      	bne.n	8008674 <__gethex+0x280>
 80085e8:	f04f 0a02 	mov.w	sl, #2
 80085ec:	4639      	mov	r1, r7
 80085ee:	4620      	mov	r0, r4
 80085f0:	f7ff fe98 	bl	8008324 <rshift>
 80085f4:	443d      	add	r5, r7
 80085f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80085fa:	42ab      	cmp	r3, r5
 80085fc:	da4c      	bge.n	8008698 <__gethex+0x2a4>
 80085fe:	ee18 0a10 	vmov	r0, s16
 8008602:	4621      	mov	r1, r4
 8008604:	f000 fa5c 	bl	8008ac0 <_Bfree>
 8008608:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800860a:	2300      	movs	r3, #0
 800860c:	6013      	str	r3, [r2, #0]
 800860e:	27a3      	movs	r7, #163	; 0xa3
 8008610:	e785      	b.n	800851e <__gethex+0x12a>
 8008612:	1e73      	subs	r3, r6, #1
 8008614:	9a05      	ldr	r2, [sp, #20]
 8008616:	9303      	str	r3, [sp, #12]
 8008618:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800861c:	4293      	cmp	r3, r2
 800861e:	d019      	beq.n	8008654 <__gethex+0x260>
 8008620:	f1bb 0f20 	cmp.w	fp, #32
 8008624:	d107      	bne.n	8008636 <__gethex+0x242>
 8008626:	9b02      	ldr	r3, [sp, #8]
 8008628:	9a00      	ldr	r2, [sp, #0]
 800862a:	f843 2b04 	str.w	r2, [r3], #4
 800862e:	9302      	str	r3, [sp, #8]
 8008630:	2300      	movs	r3, #0
 8008632:	9300      	str	r3, [sp, #0]
 8008634:	469b      	mov	fp, r3
 8008636:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800863a:	f7ff fec5 	bl	80083c8 <__hexdig_fun>
 800863e:	9b00      	ldr	r3, [sp, #0]
 8008640:	f000 000f 	and.w	r0, r0, #15
 8008644:	fa00 f00b 	lsl.w	r0, r0, fp
 8008648:	4303      	orrs	r3, r0
 800864a:	9300      	str	r3, [sp, #0]
 800864c:	f10b 0b04 	add.w	fp, fp, #4
 8008650:	9b03      	ldr	r3, [sp, #12]
 8008652:	e00d      	b.n	8008670 <__gethex+0x27c>
 8008654:	9b03      	ldr	r3, [sp, #12]
 8008656:	9a06      	ldr	r2, [sp, #24]
 8008658:	4413      	add	r3, r2
 800865a:	42bb      	cmp	r3, r7
 800865c:	d3e0      	bcc.n	8008620 <__gethex+0x22c>
 800865e:	4618      	mov	r0, r3
 8008660:	9901      	ldr	r1, [sp, #4]
 8008662:	9307      	str	r3, [sp, #28]
 8008664:	4652      	mov	r2, sl
 8008666:	f001 f917 	bl	8009898 <strncmp>
 800866a:	9b07      	ldr	r3, [sp, #28]
 800866c:	2800      	cmp	r0, #0
 800866e:	d1d7      	bne.n	8008620 <__gethex+0x22c>
 8008670:	461e      	mov	r6, r3
 8008672:	e78b      	b.n	800858c <__gethex+0x198>
 8008674:	f04f 0a03 	mov.w	sl, #3
 8008678:	e7b8      	b.n	80085ec <__gethex+0x1f8>
 800867a:	da0a      	bge.n	8008692 <__gethex+0x29e>
 800867c:	1a37      	subs	r7, r6, r0
 800867e:	4621      	mov	r1, r4
 8008680:	ee18 0a10 	vmov	r0, s16
 8008684:	463a      	mov	r2, r7
 8008686:	f000 fc37 	bl	8008ef8 <__lshift>
 800868a:	1bed      	subs	r5, r5, r7
 800868c:	4604      	mov	r4, r0
 800868e:	f100 0914 	add.w	r9, r0, #20
 8008692:	f04f 0a00 	mov.w	sl, #0
 8008696:	e7ae      	b.n	80085f6 <__gethex+0x202>
 8008698:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800869c:	42a8      	cmp	r0, r5
 800869e:	dd72      	ble.n	8008786 <__gethex+0x392>
 80086a0:	1b45      	subs	r5, r0, r5
 80086a2:	42ae      	cmp	r6, r5
 80086a4:	dc36      	bgt.n	8008714 <__gethex+0x320>
 80086a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80086aa:	2b02      	cmp	r3, #2
 80086ac:	d02a      	beq.n	8008704 <__gethex+0x310>
 80086ae:	2b03      	cmp	r3, #3
 80086b0:	d02c      	beq.n	800870c <__gethex+0x318>
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d11c      	bne.n	80086f0 <__gethex+0x2fc>
 80086b6:	42ae      	cmp	r6, r5
 80086b8:	d11a      	bne.n	80086f0 <__gethex+0x2fc>
 80086ba:	2e01      	cmp	r6, #1
 80086bc:	d112      	bne.n	80086e4 <__gethex+0x2f0>
 80086be:	9a04      	ldr	r2, [sp, #16]
 80086c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80086c4:	6013      	str	r3, [r2, #0]
 80086c6:	2301      	movs	r3, #1
 80086c8:	6123      	str	r3, [r4, #16]
 80086ca:	f8c9 3000 	str.w	r3, [r9]
 80086ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80086d0:	2762      	movs	r7, #98	; 0x62
 80086d2:	601c      	str	r4, [r3, #0]
 80086d4:	e723      	b.n	800851e <__gethex+0x12a>
 80086d6:	bf00      	nop
 80086d8:	0800a7e0 	.word	0x0800a7e0
 80086dc:	0800a768 	.word	0x0800a768
 80086e0:	0800a779 	.word	0x0800a779
 80086e4:	1e71      	subs	r1, r6, #1
 80086e6:	4620      	mov	r0, r4
 80086e8:	f000 fe4a 	bl	8009380 <__any_on>
 80086ec:	2800      	cmp	r0, #0
 80086ee:	d1e6      	bne.n	80086be <__gethex+0x2ca>
 80086f0:	ee18 0a10 	vmov	r0, s16
 80086f4:	4621      	mov	r1, r4
 80086f6:	f000 f9e3 	bl	8008ac0 <_Bfree>
 80086fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80086fc:	2300      	movs	r3, #0
 80086fe:	6013      	str	r3, [r2, #0]
 8008700:	2750      	movs	r7, #80	; 0x50
 8008702:	e70c      	b.n	800851e <__gethex+0x12a>
 8008704:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1f2      	bne.n	80086f0 <__gethex+0x2fc>
 800870a:	e7d8      	b.n	80086be <__gethex+0x2ca>
 800870c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800870e:	2b00      	cmp	r3, #0
 8008710:	d1d5      	bne.n	80086be <__gethex+0x2ca>
 8008712:	e7ed      	b.n	80086f0 <__gethex+0x2fc>
 8008714:	1e6f      	subs	r7, r5, #1
 8008716:	f1ba 0f00 	cmp.w	sl, #0
 800871a:	d131      	bne.n	8008780 <__gethex+0x38c>
 800871c:	b127      	cbz	r7, 8008728 <__gethex+0x334>
 800871e:	4639      	mov	r1, r7
 8008720:	4620      	mov	r0, r4
 8008722:	f000 fe2d 	bl	8009380 <__any_on>
 8008726:	4682      	mov	sl, r0
 8008728:	117b      	asrs	r3, r7, #5
 800872a:	2101      	movs	r1, #1
 800872c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008730:	f007 071f 	and.w	r7, r7, #31
 8008734:	fa01 f707 	lsl.w	r7, r1, r7
 8008738:	421f      	tst	r7, r3
 800873a:	4629      	mov	r1, r5
 800873c:	4620      	mov	r0, r4
 800873e:	bf18      	it	ne
 8008740:	f04a 0a02 	orrne.w	sl, sl, #2
 8008744:	1b76      	subs	r6, r6, r5
 8008746:	f7ff fded 	bl	8008324 <rshift>
 800874a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800874e:	2702      	movs	r7, #2
 8008750:	f1ba 0f00 	cmp.w	sl, #0
 8008754:	d048      	beq.n	80087e8 <__gethex+0x3f4>
 8008756:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800875a:	2b02      	cmp	r3, #2
 800875c:	d015      	beq.n	800878a <__gethex+0x396>
 800875e:	2b03      	cmp	r3, #3
 8008760:	d017      	beq.n	8008792 <__gethex+0x39e>
 8008762:	2b01      	cmp	r3, #1
 8008764:	d109      	bne.n	800877a <__gethex+0x386>
 8008766:	f01a 0f02 	tst.w	sl, #2
 800876a:	d006      	beq.n	800877a <__gethex+0x386>
 800876c:	f8d9 0000 	ldr.w	r0, [r9]
 8008770:	ea4a 0a00 	orr.w	sl, sl, r0
 8008774:	f01a 0f01 	tst.w	sl, #1
 8008778:	d10e      	bne.n	8008798 <__gethex+0x3a4>
 800877a:	f047 0710 	orr.w	r7, r7, #16
 800877e:	e033      	b.n	80087e8 <__gethex+0x3f4>
 8008780:	f04f 0a01 	mov.w	sl, #1
 8008784:	e7d0      	b.n	8008728 <__gethex+0x334>
 8008786:	2701      	movs	r7, #1
 8008788:	e7e2      	b.n	8008750 <__gethex+0x35c>
 800878a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800878c:	f1c3 0301 	rsb	r3, r3, #1
 8008790:	9315      	str	r3, [sp, #84]	; 0x54
 8008792:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008794:	2b00      	cmp	r3, #0
 8008796:	d0f0      	beq.n	800877a <__gethex+0x386>
 8008798:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800879c:	f104 0314 	add.w	r3, r4, #20
 80087a0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80087a4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80087a8:	f04f 0c00 	mov.w	ip, #0
 80087ac:	4618      	mov	r0, r3
 80087ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80087b2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80087b6:	d01c      	beq.n	80087f2 <__gethex+0x3fe>
 80087b8:	3201      	adds	r2, #1
 80087ba:	6002      	str	r2, [r0, #0]
 80087bc:	2f02      	cmp	r7, #2
 80087be:	f104 0314 	add.w	r3, r4, #20
 80087c2:	d13f      	bne.n	8008844 <__gethex+0x450>
 80087c4:	f8d8 2000 	ldr.w	r2, [r8]
 80087c8:	3a01      	subs	r2, #1
 80087ca:	42b2      	cmp	r2, r6
 80087cc:	d10a      	bne.n	80087e4 <__gethex+0x3f0>
 80087ce:	1171      	asrs	r1, r6, #5
 80087d0:	2201      	movs	r2, #1
 80087d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80087d6:	f006 061f 	and.w	r6, r6, #31
 80087da:	fa02 f606 	lsl.w	r6, r2, r6
 80087de:	421e      	tst	r6, r3
 80087e0:	bf18      	it	ne
 80087e2:	4617      	movne	r7, r2
 80087e4:	f047 0720 	orr.w	r7, r7, #32
 80087e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087ea:	601c      	str	r4, [r3, #0]
 80087ec:	9b04      	ldr	r3, [sp, #16]
 80087ee:	601d      	str	r5, [r3, #0]
 80087f0:	e695      	b.n	800851e <__gethex+0x12a>
 80087f2:	4299      	cmp	r1, r3
 80087f4:	f843 cc04 	str.w	ip, [r3, #-4]
 80087f8:	d8d8      	bhi.n	80087ac <__gethex+0x3b8>
 80087fa:	68a3      	ldr	r3, [r4, #8]
 80087fc:	459b      	cmp	fp, r3
 80087fe:	db19      	blt.n	8008834 <__gethex+0x440>
 8008800:	6861      	ldr	r1, [r4, #4]
 8008802:	ee18 0a10 	vmov	r0, s16
 8008806:	3101      	adds	r1, #1
 8008808:	f000 f91a 	bl	8008a40 <_Balloc>
 800880c:	4681      	mov	r9, r0
 800880e:	b918      	cbnz	r0, 8008818 <__gethex+0x424>
 8008810:	4b1a      	ldr	r3, [pc, #104]	; (800887c <__gethex+0x488>)
 8008812:	4602      	mov	r2, r0
 8008814:	2184      	movs	r1, #132	; 0x84
 8008816:	e6a8      	b.n	800856a <__gethex+0x176>
 8008818:	6922      	ldr	r2, [r4, #16]
 800881a:	3202      	adds	r2, #2
 800881c:	f104 010c 	add.w	r1, r4, #12
 8008820:	0092      	lsls	r2, r2, #2
 8008822:	300c      	adds	r0, #12
 8008824:	f7fd f986 	bl	8005b34 <memcpy>
 8008828:	4621      	mov	r1, r4
 800882a:	ee18 0a10 	vmov	r0, s16
 800882e:	f000 f947 	bl	8008ac0 <_Bfree>
 8008832:	464c      	mov	r4, r9
 8008834:	6923      	ldr	r3, [r4, #16]
 8008836:	1c5a      	adds	r2, r3, #1
 8008838:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800883c:	6122      	str	r2, [r4, #16]
 800883e:	2201      	movs	r2, #1
 8008840:	615a      	str	r2, [r3, #20]
 8008842:	e7bb      	b.n	80087bc <__gethex+0x3c8>
 8008844:	6922      	ldr	r2, [r4, #16]
 8008846:	455a      	cmp	r2, fp
 8008848:	dd0b      	ble.n	8008862 <__gethex+0x46e>
 800884a:	2101      	movs	r1, #1
 800884c:	4620      	mov	r0, r4
 800884e:	f7ff fd69 	bl	8008324 <rshift>
 8008852:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008856:	3501      	adds	r5, #1
 8008858:	42ab      	cmp	r3, r5
 800885a:	f6ff aed0 	blt.w	80085fe <__gethex+0x20a>
 800885e:	2701      	movs	r7, #1
 8008860:	e7c0      	b.n	80087e4 <__gethex+0x3f0>
 8008862:	f016 061f 	ands.w	r6, r6, #31
 8008866:	d0fa      	beq.n	800885e <__gethex+0x46a>
 8008868:	4453      	add	r3, sl
 800886a:	f1c6 0620 	rsb	r6, r6, #32
 800886e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008872:	f000 f9d7 	bl	8008c24 <__hi0bits>
 8008876:	42b0      	cmp	r0, r6
 8008878:	dbe7      	blt.n	800884a <__gethex+0x456>
 800887a:	e7f0      	b.n	800885e <__gethex+0x46a>
 800887c:	0800a768 	.word	0x0800a768

08008880 <L_shift>:
 8008880:	f1c2 0208 	rsb	r2, r2, #8
 8008884:	0092      	lsls	r2, r2, #2
 8008886:	b570      	push	{r4, r5, r6, lr}
 8008888:	f1c2 0620 	rsb	r6, r2, #32
 800888c:	6843      	ldr	r3, [r0, #4]
 800888e:	6804      	ldr	r4, [r0, #0]
 8008890:	fa03 f506 	lsl.w	r5, r3, r6
 8008894:	432c      	orrs	r4, r5
 8008896:	40d3      	lsrs	r3, r2
 8008898:	6004      	str	r4, [r0, #0]
 800889a:	f840 3f04 	str.w	r3, [r0, #4]!
 800889e:	4288      	cmp	r0, r1
 80088a0:	d3f4      	bcc.n	800888c <L_shift+0xc>
 80088a2:	bd70      	pop	{r4, r5, r6, pc}

080088a4 <__match>:
 80088a4:	b530      	push	{r4, r5, lr}
 80088a6:	6803      	ldr	r3, [r0, #0]
 80088a8:	3301      	adds	r3, #1
 80088aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088ae:	b914      	cbnz	r4, 80088b6 <__match+0x12>
 80088b0:	6003      	str	r3, [r0, #0]
 80088b2:	2001      	movs	r0, #1
 80088b4:	bd30      	pop	{r4, r5, pc}
 80088b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80088be:	2d19      	cmp	r5, #25
 80088c0:	bf98      	it	ls
 80088c2:	3220      	addls	r2, #32
 80088c4:	42a2      	cmp	r2, r4
 80088c6:	d0f0      	beq.n	80088aa <__match+0x6>
 80088c8:	2000      	movs	r0, #0
 80088ca:	e7f3      	b.n	80088b4 <__match+0x10>

080088cc <__hexnan>:
 80088cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d0:	680b      	ldr	r3, [r1, #0]
 80088d2:	115e      	asrs	r6, r3, #5
 80088d4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80088d8:	f013 031f 	ands.w	r3, r3, #31
 80088dc:	b087      	sub	sp, #28
 80088de:	bf18      	it	ne
 80088e0:	3604      	addne	r6, #4
 80088e2:	2500      	movs	r5, #0
 80088e4:	1f37      	subs	r7, r6, #4
 80088e6:	4690      	mov	r8, r2
 80088e8:	6802      	ldr	r2, [r0, #0]
 80088ea:	9301      	str	r3, [sp, #4]
 80088ec:	4682      	mov	sl, r0
 80088ee:	f846 5c04 	str.w	r5, [r6, #-4]
 80088f2:	46b9      	mov	r9, r7
 80088f4:	463c      	mov	r4, r7
 80088f6:	9502      	str	r5, [sp, #8]
 80088f8:	46ab      	mov	fp, r5
 80088fa:	7851      	ldrb	r1, [r2, #1]
 80088fc:	1c53      	adds	r3, r2, #1
 80088fe:	9303      	str	r3, [sp, #12]
 8008900:	b341      	cbz	r1, 8008954 <__hexnan+0x88>
 8008902:	4608      	mov	r0, r1
 8008904:	9205      	str	r2, [sp, #20]
 8008906:	9104      	str	r1, [sp, #16]
 8008908:	f7ff fd5e 	bl	80083c8 <__hexdig_fun>
 800890c:	2800      	cmp	r0, #0
 800890e:	d14f      	bne.n	80089b0 <__hexnan+0xe4>
 8008910:	9904      	ldr	r1, [sp, #16]
 8008912:	9a05      	ldr	r2, [sp, #20]
 8008914:	2920      	cmp	r1, #32
 8008916:	d818      	bhi.n	800894a <__hexnan+0x7e>
 8008918:	9b02      	ldr	r3, [sp, #8]
 800891a:	459b      	cmp	fp, r3
 800891c:	dd13      	ble.n	8008946 <__hexnan+0x7a>
 800891e:	454c      	cmp	r4, r9
 8008920:	d206      	bcs.n	8008930 <__hexnan+0x64>
 8008922:	2d07      	cmp	r5, #7
 8008924:	dc04      	bgt.n	8008930 <__hexnan+0x64>
 8008926:	462a      	mov	r2, r5
 8008928:	4649      	mov	r1, r9
 800892a:	4620      	mov	r0, r4
 800892c:	f7ff ffa8 	bl	8008880 <L_shift>
 8008930:	4544      	cmp	r4, r8
 8008932:	d950      	bls.n	80089d6 <__hexnan+0x10a>
 8008934:	2300      	movs	r3, #0
 8008936:	f1a4 0904 	sub.w	r9, r4, #4
 800893a:	f844 3c04 	str.w	r3, [r4, #-4]
 800893e:	f8cd b008 	str.w	fp, [sp, #8]
 8008942:	464c      	mov	r4, r9
 8008944:	461d      	mov	r5, r3
 8008946:	9a03      	ldr	r2, [sp, #12]
 8008948:	e7d7      	b.n	80088fa <__hexnan+0x2e>
 800894a:	2929      	cmp	r1, #41	; 0x29
 800894c:	d156      	bne.n	80089fc <__hexnan+0x130>
 800894e:	3202      	adds	r2, #2
 8008950:	f8ca 2000 	str.w	r2, [sl]
 8008954:	f1bb 0f00 	cmp.w	fp, #0
 8008958:	d050      	beq.n	80089fc <__hexnan+0x130>
 800895a:	454c      	cmp	r4, r9
 800895c:	d206      	bcs.n	800896c <__hexnan+0xa0>
 800895e:	2d07      	cmp	r5, #7
 8008960:	dc04      	bgt.n	800896c <__hexnan+0xa0>
 8008962:	462a      	mov	r2, r5
 8008964:	4649      	mov	r1, r9
 8008966:	4620      	mov	r0, r4
 8008968:	f7ff ff8a 	bl	8008880 <L_shift>
 800896c:	4544      	cmp	r4, r8
 800896e:	d934      	bls.n	80089da <__hexnan+0x10e>
 8008970:	f1a8 0204 	sub.w	r2, r8, #4
 8008974:	4623      	mov	r3, r4
 8008976:	f853 1b04 	ldr.w	r1, [r3], #4
 800897a:	f842 1f04 	str.w	r1, [r2, #4]!
 800897e:	429f      	cmp	r7, r3
 8008980:	d2f9      	bcs.n	8008976 <__hexnan+0xaa>
 8008982:	1b3b      	subs	r3, r7, r4
 8008984:	f023 0303 	bic.w	r3, r3, #3
 8008988:	3304      	adds	r3, #4
 800898a:	3401      	adds	r4, #1
 800898c:	3e03      	subs	r6, #3
 800898e:	42b4      	cmp	r4, r6
 8008990:	bf88      	it	hi
 8008992:	2304      	movhi	r3, #4
 8008994:	4443      	add	r3, r8
 8008996:	2200      	movs	r2, #0
 8008998:	f843 2b04 	str.w	r2, [r3], #4
 800899c:	429f      	cmp	r7, r3
 800899e:	d2fb      	bcs.n	8008998 <__hexnan+0xcc>
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	b91b      	cbnz	r3, 80089ac <__hexnan+0xe0>
 80089a4:	4547      	cmp	r7, r8
 80089a6:	d127      	bne.n	80089f8 <__hexnan+0x12c>
 80089a8:	2301      	movs	r3, #1
 80089aa:	603b      	str	r3, [r7, #0]
 80089ac:	2005      	movs	r0, #5
 80089ae:	e026      	b.n	80089fe <__hexnan+0x132>
 80089b0:	3501      	adds	r5, #1
 80089b2:	2d08      	cmp	r5, #8
 80089b4:	f10b 0b01 	add.w	fp, fp, #1
 80089b8:	dd06      	ble.n	80089c8 <__hexnan+0xfc>
 80089ba:	4544      	cmp	r4, r8
 80089bc:	d9c3      	bls.n	8008946 <__hexnan+0x7a>
 80089be:	2300      	movs	r3, #0
 80089c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80089c4:	2501      	movs	r5, #1
 80089c6:	3c04      	subs	r4, #4
 80089c8:	6822      	ldr	r2, [r4, #0]
 80089ca:	f000 000f 	and.w	r0, r0, #15
 80089ce:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80089d2:	6022      	str	r2, [r4, #0]
 80089d4:	e7b7      	b.n	8008946 <__hexnan+0x7a>
 80089d6:	2508      	movs	r5, #8
 80089d8:	e7b5      	b.n	8008946 <__hexnan+0x7a>
 80089da:	9b01      	ldr	r3, [sp, #4]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d0df      	beq.n	80089a0 <__hexnan+0xd4>
 80089e0:	f04f 32ff 	mov.w	r2, #4294967295
 80089e4:	f1c3 0320 	rsb	r3, r3, #32
 80089e8:	fa22 f303 	lsr.w	r3, r2, r3
 80089ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80089f0:	401a      	ands	r2, r3
 80089f2:	f846 2c04 	str.w	r2, [r6, #-4]
 80089f6:	e7d3      	b.n	80089a0 <__hexnan+0xd4>
 80089f8:	3f04      	subs	r7, #4
 80089fa:	e7d1      	b.n	80089a0 <__hexnan+0xd4>
 80089fc:	2004      	movs	r0, #4
 80089fe:	b007      	add	sp, #28
 8008a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008a04 <_localeconv_r>:
 8008a04:	4800      	ldr	r0, [pc, #0]	; (8008a08 <_localeconv_r+0x4>)
 8008a06:	4770      	bx	lr
 8008a08:	20000260 	.word	0x20000260

08008a0c <malloc>:
 8008a0c:	4b02      	ldr	r3, [pc, #8]	; (8008a18 <malloc+0xc>)
 8008a0e:	4601      	mov	r1, r0
 8008a10:	6818      	ldr	r0, [r3, #0]
 8008a12:	f000 bd59 	b.w	80094c8 <_malloc_r>
 8008a16:	bf00      	nop
 8008a18:	20000108 	.word	0x20000108

08008a1c <__ascii_mbtowc>:
 8008a1c:	b082      	sub	sp, #8
 8008a1e:	b901      	cbnz	r1, 8008a22 <__ascii_mbtowc+0x6>
 8008a20:	a901      	add	r1, sp, #4
 8008a22:	b142      	cbz	r2, 8008a36 <__ascii_mbtowc+0x1a>
 8008a24:	b14b      	cbz	r3, 8008a3a <__ascii_mbtowc+0x1e>
 8008a26:	7813      	ldrb	r3, [r2, #0]
 8008a28:	600b      	str	r3, [r1, #0]
 8008a2a:	7812      	ldrb	r2, [r2, #0]
 8008a2c:	1e10      	subs	r0, r2, #0
 8008a2e:	bf18      	it	ne
 8008a30:	2001      	movne	r0, #1
 8008a32:	b002      	add	sp, #8
 8008a34:	4770      	bx	lr
 8008a36:	4610      	mov	r0, r2
 8008a38:	e7fb      	b.n	8008a32 <__ascii_mbtowc+0x16>
 8008a3a:	f06f 0001 	mvn.w	r0, #1
 8008a3e:	e7f8      	b.n	8008a32 <__ascii_mbtowc+0x16>

08008a40 <_Balloc>:
 8008a40:	b570      	push	{r4, r5, r6, lr}
 8008a42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008a44:	4604      	mov	r4, r0
 8008a46:	460d      	mov	r5, r1
 8008a48:	b976      	cbnz	r6, 8008a68 <_Balloc+0x28>
 8008a4a:	2010      	movs	r0, #16
 8008a4c:	f7ff ffde 	bl	8008a0c <malloc>
 8008a50:	4602      	mov	r2, r0
 8008a52:	6260      	str	r0, [r4, #36]	; 0x24
 8008a54:	b920      	cbnz	r0, 8008a60 <_Balloc+0x20>
 8008a56:	4b18      	ldr	r3, [pc, #96]	; (8008ab8 <_Balloc+0x78>)
 8008a58:	4818      	ldr	r0, [pc, #96]	; (8008abc <_Balloc+0x7c>)
 8008a5a:	2166      	movs	r1, #102	; 0x66
 8008a5c:	f000 ff3e 	bl	80098dc <__assert_func>
 8008a60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a64:	6006      	str	r6, [r0, #0]
 8008a66:	60c6      	str	r6, [r0, #12]
 8008a68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008a6a:	68f3      	ldr	r3, [r6, #12]
 8008a6c:	b183      	cbz	r3, 8008a90 <_Balloc+0x50>
 8008a6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a76:	b9b8      	cbnz	r0, 8008aa8 <_Balloc+0x68>
 8008a78:	2101      	movs	r1, #1
 8008a7a:	fa01 f605 	lsl.w	r6, r1, r5
 8008a7e:	1d72      	adds	r2, r6, #5
 8008a80:	0092      	lsls	r2, r2, #2
 8008a82:	4620      	mov	r0, r4
 8008a84:	f000 fc9d 	bl	80093c2 <_calloc_r>
 8008a88:	b160      	cbz	r0, 8008aa4 <_Balloc+0x64>
 8008a8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a8e:	e00e      	b.n	8008aae <_Balloc+0x6e>
 8008a90:	2221      	movs	r2, #33	; 0x21
 8008a92:	2104      	movs	r1, #4
 8008a94:	4620      	mov	r0, r4
 8008a96:	f000 fc94 	bl	80093c2 <_calloc_r>
 8008a9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a9c:	60f0      	str	r0, [r6, #12]
 8008a9e:	68db      	ldr	r3, [r3, #12]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d1e4      	bne.n	8008a6e <_Balloc+0x2e>
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	bd70      	pop	{r4, r5, r6, pc}
 8008aa8:	6802      	ldr	r2, [r0, #0]
 8008aaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008aae:	2300      	movs	r3, #0
 8008ab0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ab4:	e7f7      	b.n	8008aa6 <_Balloc+0x66>
 8008ab6:	bf00      	nop
 8008ab8:	0800a6f6 	.word	0x0800a6f6
 8008abc:	0800a7f4 	.word	0x0800a7f4

08008ac0 <_Bfree>:
 8008ac0:	b570      	push	{r4, r5, r6, lr}
 8008ac2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ac4:	4605      	mov	r5, r0
 8008ac6:	460c      	mov	r4, r1
 8008ac8:	b976      	cbnz	r6, 8008ae8 <_Bfree+0x28>
 8008aca:	2010      	movs	r0, #16
 8008acc:	f7ff ff9e 	bl	8008a0c <malloc>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	6268      	str	r0, [r5, #36]	; 0x24
 8008ad4:	b920      	cbnz	r0, 8008ae0 <_Bfree+0x20>
 8008ad6:	4b09      	ldr	r3, [pc, #36]	; (8008afc <_Bfree+0x3c>)
 8008ad8:	4809      	ldr	r0, [pc, #36]	; (8008b00 <_Bfree+0x40>)
 8008ada:	218a      	movs	r1, #138	; 0x8a
 8008adc:	f000 fefe 	bl	80098dc <__assert_func>
 8008ae0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ae4:	6006      	str	r6, [r0, #0]
 8008ae6:	60c6      	str	r6, [r0, #12]
 8008ae8:	b13c      	cbz	r4, 8008afa <_Bfree+0x3a>
 8008aea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008aec:	6862      	ldr	r2, [r4, #4]
 8008aee:	68db      	ldr	r3, [r3, #12]
 8008af0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008af4:	6021      	str	r1, [r4, #0]
 8008af6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008afa:	bd70      	pop	{r4, r5, r6, pc}
 8008afc:	0800a6f6 	.word	0x0800a6f6
 8008b00:	0800a7f4 	.word	0x0800a7f4

08008b04 <__multadd>:
 8008b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b08:	690d      	ldr	r5, [r1, #16]
 8008b0a:	4607      	mov	r7, r0
 8008b0c:	460c      	mov	r4, r1
 8008b0e:	461e      	mov	r6, r3
 8008b10:	f101 0c14 	add.w	ip, r1, #20
 8008b14:	2000      	movs	r0, #0
 8008b16:	f8dc 3000 	ldr.w	r3, [ip]
 8008b1a:	b299      	uxth	r1, r3
 8008b1c:	fb02 6101 	mla	r1, r2, r1, r6
 8008b20:	0c1e      	lsrs	r6, r3, #16
 8008b22:	0c0b      	lsrs	r3, r1, #16
 8008b24:	fb02 3306 	mla	r3, r2, r6, r3
 8008b28:	b289      	uxth	r1, r1
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b30:	4285      	cmp	r5, r0
 8008b32:	f84c 1b04 	str.w	r1, [ip], #4
 8008b36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b3a:	dcec      	bgt.n	8008b16 <__multadd+0x12>
 8008b3c:	b30e      	cbz	r6, 8008b82 <__multadd+0x7e>
 8008b3e:	68a3      	ldr	r3, [r4, #8]
 8008b40:	42ab      	cmp	r3, r5
 8008b42:	dc19      	bgt.n	8008b78 <__multadd+0x74>
 8008b44:	6861      	ldr	r1, [r4, #4]
 8008b46:	4638      	mov	r0, r7
 8008b48:	3101      	adds	r1, #1
 8008b4a:	f7ff ff79 	bl	8008a40 <_Balloc>
 8008b4e:	4680      	mov	r8, r0
 8008b50:	b928      	cbnz	r0, 8008b5e <__multadd+0x5a>
 8008b52:	4602      	mov	r2, r0
 8008b54:	4b0c      	ldr	r3, [pc, #48]	; (8008b88 <__multadd+0x84>)
 8008b56:	480d      	ldr	r0, [pc, #52]	; (8008b8c <__multadd+0x88>)
 8008b58:	21b5      	movs	r1, #181	; 0xb5
 8008b5a:	f000 febf 	bl	80098dc <__assert_func>
 8008b5e:	6922      	ldr	r2, [r4, #16]
 8008b60:	3202      	adds	r2, #2
 8008b62:	f104 010c 	add.w	r1, r4, #12
 8008b66:	0092      	lsls	r2, r2, #2
 8008b68:	300c      	adds	r0, #12
 8008b6a:	f7fc ffe3 	bl	8005b34 <memcpy>
 8008b6e:	4621      	mov	r1, r4
 8008b70:	4638      	mov	r0, r7
 8008b72:	f7ff ffa5 	bl	8008ac0 <_Bfree>
 8008b76:	4644      	mov	r4, r8
 8008b78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008b7c:	3501      	adds	r5, #1
 8008b7e:	615e      	str	r6, [r3, #20]
 8008b80:	6125      	str	r5, [r4, #16]
 8008b82:	4620      	mov	r0, r4
 8008b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b88:	0800a768 	.word	0x0800a768
 8008b8c:	0800a7f4 	.word	0x0800a7f4

08008b90 <__s2b>:
 8008b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b94:	460c      	mov	r4, r1
 8008b96:	4615      	mov	r5, r2
 8008b98:	461f      	mov	r7, r3
 8008b9a:	2209      	movs	r2, #9
 8008b9c:	3308      	adds	r3, #8
 8008b9e:	4606      	mov	r6, r0
 8008ba0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	db09      	blt.n	8008bc0 <__s2b+0x30>
 8008bac:	4630      	mov	r0, r6
 8008bae:	f7ff ff47 	bl	8008a40 <_Balloc>
 8008bb2:	b940      	cbnz	r0, 8008bc6 <__s2b+0x36>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	4b19      	ldr	r3, [pc, #100]	; (8008c1c <__s2b+0x8c>)
 8008bb8:	4819      	ldr	r0, [pc, #100]	; (8008c20 <__s2b+0x90>)
 8008bba:	21ce      	movs	r1, #206	; 0xce
 8008bbc:	f000 fe8e 	bl	80098dc <__assert_func>
 8008bc0:	0052      	lsls	r2, r2, #1
 8008bc2:	3101      	adds	r1, #1
 8008bc4:	e7f0      	b.n	8008ba8 <__s2b+0x18>
 8008bc6:	9b08      	ldr	r3, [sp, #32]
 8008bc8:	6143      	str	r3, [r0, #20]
 8008bca:	2d09      	cmp	r5, #9
 8008bcc:	f04f 0301 	mov.w	r3, #1
 8008bd0:	6103      	str	r3, [r0, #16]
 8008bd2:	dd16      	ble.n	8008c02 <__s2b+0x72>
 8008bd4:	f104 0909 	add.w	r9, r4, #9
 8008bd8:	46c8      	mov	r8, r9
 8008bda:	442c      	add	r4, r5
 8008bdc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008be0:	4601      	mov	r1, r0
 8008be2:	3b30      	subs	r3, #48	; 0x30
 8008be4:	220a      	movs	r2, #10
 8008be6:	4630      	mov	r0, r6
 8008be8:	f7ff ff8c 	bl	8008b04 <__multadd>
 8008bec:	45a0      	cmp	r8, r4
 8008bee:	d1f5      	bne.n	8008bdc <__s2b+0x4c>
 8008bf0:	f1a5 0408 	sub.w	r4, r5, #8
 8008bf4:	444c      	add	r4, r9
 8008bf6:	1b2d      	subs	r5, r5, r4
 8008bf8:	1963      	adds	r3, r4, r5
 8008bfa:	42bb      	cmp	r3, r7
 8008bfc:	db04      	blt.n	8008c08 <__s2b+0x78>
 8008bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c02:	340a      	adds	r4, #10
 8008c04:	2509      	movs	r5, #9
 8008c06:	e7f6      	b.n	8008bf6 <__s2b+0x66>
 8008c08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008c0c:	4601      	mov	r1, r0
 8008c0e:	3b30      	subs	r3, #48	; 0x30
 8008c10:	220a      	movs	r2, #10
 8008c12:	4630      	mov	r0, r6
 8008c14:	f7ff ff76 	bl	8008b04 <__multadd>
 8008c18:	e7ee      	b.n	8008bf8 <__s2b+0x68>
 8008c1a:	bf00      	nop
 8008c1c:	0800a768 	.word	0x0800a768
 8008c20:	0800a7f4 	.word	0x0800a7f4

08008c24 <__hi0bits>:
 8008c24:	0c03      	lsrs	r3, r0, #16
 8008c26:	041b      	lsls	r3, r3, #16
 8008c28:	b9d3      	cbnz	r3, 8008c60 <__hi0bits+0x3c>
 8008c2a:	0400      	lsls	r0, r0, #16
 8008c2c:	2310      	movs	r3, #16
 8008c2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008c32:	bf04      	itt	eq
 8008c34:	0200      	lsleq	r0, r0, #8
 8008c36:	3308      	addeq	r3, #8
 8008c38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008c3c:	bf04      	itt	eq
 8008c3e:	0100      	lsleq	r0, r0, #4
 8008c40:	3304      	addeq	r3, #4
 8008c42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008c46:	bf04      	itt	eq
 8008c48:	0080      	lsleq	r0, r0, #2
 8008c4a:	3302      	addeq	r3, #2
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	db05      	blt.n	8008c5c <__hi0bits+0x38>
 8008c50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008c54:	f103 0301 	add.w	r3, r3, #1
 8008c58:	bf08      	it	eq
 8008c5a:	2320      	moveq	r3, #32
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	4770      	bx	lr
 8008c60:	2300      	movs	r3, #0
 8008c62:	e7e4      	b.n	8008c2e <__hi0bits+0xa>

08008c64 <__lo0bits>:
 8008c64:	6803      	ldr	r3, [r0, #0]
 8008c66:	f013 0207 	ands.w	r2, r3, #7
 8008c6a:	4601      	mov	r1, r0
 8008c6c:	d00b      	beq.n	8008c86 <__lo0bits+0x22>
 8008c6e:	07da      	lsls	r2, r3, #31
 8008c70:	d423      	bmi.n	8008cba <__lo0bits+0x56>
 8008c72:	0798      	lsls	r0, r3, #30
 8008c74:	bf49      	itett	mi
 8008c76:	085b      	lsrmi	r3, r3, #1
 8008c78:	089b      	lsrpl	r3, r3, #2
 8008c7a:	2001      	movmi	r0, #1
 8008c7c:	600b      	strmi	r3, [r1, #0]
 8008c7e:	bf5c      	itt	pl
 8008c80:	600b      	strpl	r3, [r1, #0]
 8008c82:	2002      	movpl	r0, #2
 8008c84:	4770      	bx	lr
 8008c86:	b298      	uxth	r0, r3
 8008c88:	b9a8      	cbnz	r0, 8008cb6 <__lo0bits+0x52>
 8008c8a:	0c1b      	lsrs	r3, r3, #16
 8008c8c:	2010      	movs	r0, #16
 8008c8e:	b2da      	uxtb	r2, r3
 8008c90:	b90a      	cbnz	r2, 8008c96 <__lo0bits+0x32>
 8008c92:	3008      	adds	r0, #8
 8008c94:	0a1b      	lsrs	r3, r3, #8
 8008c96:	071a      	lsls	r2, r3, #28
 8008c98:	bf04      	itt	eq
 8008c9a:	091b      	lsreq	r3, r3, #4
 8008c9c:	3004      	addeq	r0, #4
 8008c9e:	079a      	lsls	r2, r3, #30
 8008ca0:	bf04      	itt	eq
 8008ca2:	089b      	lsreq	r3, r3, #2
 8008ca4:	3002      	addeq	r0, #2
 8008ca6:	07da      	lsls	r2, r3, #31
 8008ca8:	d403      	bmi.n	8008cb2 <__lo0bits+0x4e>
 8008caa:	085b      	lsrs	r3, r3, #1
 8008cac:	f100 0001 	add.w	r0, r0, #1
 8008cb0:	d005      	beq.n	8008cbe <__lo0bits+0x5a>
 8008cb2:	600b      	str	r3, [r1, #0]
 8008cb4:	4770      	bx	lr
 8008cb6:	4610      	mov	r0, r2
 8008cb8:	e7e9      	b.n	8008c8e <__lo0bits+0x2a>
 8008cba:	2000      	movs	r0, #0
 8008cbc:	4770      	bx	lr
 8008cbe:	2020      	movs	r0, #32
 8008cc0:	4770      	bx	lr
	...

08008cc4 <__i2b>:
 8008cc4:	b510      	push	{r4, lr}
 8008cc6:	460c      	mov	r4, r1
 8008cc8:	2101      	movs	r1, #1
 8008cca:	f7ff feb9 	bl	8008a40 <_Balloc>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	b928      	cbnz	r0, 8008cde <__i2b+0x1a>
 8008cd2:	4b05      	ldr	r3, [pc, #20]	; (8008ce8 <__i2b+0x24>)
 8008cd4:	4805      	ldr	r0, [pc, #20]	; (8008cec <__i2b+0x28>)
 8008cd6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008cda:	f000 fdff 	bl	80098dc <__assert_func>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	6144      	str	r4, [r0, #20]
 8008ce2:	6103      	str	r3, [r0, #16]
 8008ce4:	bd10      	pop	{r4, pc}
 8008ce6:	bf00      	nop
 8008ce8:	0800a768 	.word	0x0800a768
 8008cec:	0800a7f4 	.word	0x0800a7f4

08008cf0 <__multiply>:
 8008cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf4:	4691      	mov	r9, r2
 8008cf6:	690a      	ldr	r2, [r1, #16]
 8008cf8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	bfb8      	it	lt
 8008d00:	460b      	movlt	r3, r1
 8008d02:	460c      	mov	r4, r1
 8008d04:	bfbc      	itt	lt
 8008d06:	464c      	movlt	r4, r9
 8008d08:	4699      	movlt	r9, r3
 8008d0a:	6927      	ldr	r7, [r4, #16]
 8008d0c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008d10:	68a3      	ldr	r3, [r4, #8]
 8008d12:	6861      	ldr	r1, [r4, #4]
 8008d14:	eb07 060a 	add.w	r6, r7, sl
 8008d18:	42b3      	cmp	r3, r6
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	bfb8      	it	lt
 8008d1e:	3101      	addlt	r1, #1
 8008d20:	f7ff fe8e 	bl	8008a40 <_Balloc>
 8008d24:	b930      	cbnz	r0, 8008d34 <__multiply+0x44>
 8008d26:	4602      	mov	r2, r0
 8008d28:	4b44      	ldr	r3, [pc, #272]	; (8008e3c <__multiply+0x14c>)
 8008d2a:	4845      	ldr	r0, [pc, #276]	; (8008e40 <__multiply+0x150>)
 8008d2c:	f240 115d 	movw	r1, #349	; 0x15d
 8008d30:	f000 fdd4 	bl	80098dc <__assert_func>
 8008d34:	f100 0514 	add.w	r5, r0, #20
 8008d38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008d3c:	462b      	mov	r3, r5
 8008d3e:	2200      	movs	r2, #0
 8008d40:	4543      	cmp	r3, r8
 8008d42:	d321      	bcc.n	8008d88 <__multiply+0x98>
 8008d44:	f104 0314 	add.w	r3, r4, #20
 8008d48:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008d4c:	f109 0314 	add.w	r3, r9, #20
 8008d50:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008d54:	9202      	str	r2, [sp, #8]
 8008d56:	1b3a      	subs	r2, r7, r4
 8008d58:	3a15      	subs	r2, #21
 8008d5a:	f022 0203 	bic.w	r2, r2, #3
 8008d5e:	3204      	adds	r2, #4
 8008d60:	f104 0115 	add.w	r1, r4, #21
 8008d64:	428f      	cmp	r7, r1
 8008d66:	bf38      	it	cc
 8008d68:	2204      	movcc	r2, #4
 8008d6a:	9201      	str	r2, [sp, #4]
 8008d6c:	9a02      	ldr	r2, [sp, #8]
 8008d6e:	9303      	str	r3, [sp, #12]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d80c      	bhi.n	8008d8e <__multiply+0x9e>
 8008d74:	2e00      	cmp	r6, #0
 8008d76:	dd03      	ble.n	8008d80 <__multiply+0x90>
 8008d78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d05a      	beq.n	8008e36 <__multiply+0x146>
 8008d80:	6106      	str	r6, [r0, #16]
 8008d82:	b005      	add	sp, #20
 8008d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d88:	f843 2b04 	str.w	r2, [r3], #4
 8008d8c:	e7d8      	b.n	8008d40 <__multiply+0x50>
 8008d8e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008d92:	f1ba 0f00 	cmp.w	sl, #0
 8008d96:	d024      	beq.n	8008de2 <__multiply+0xf2>
 8008d98:	f104 0e14 	add.w	lr, r4, #20
 8008d9c:	46a9      	mov	r9, r5
 8008d9e:	f04f 0c00 	mov.w	ip, #0
 8008da2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008da6:	f8d9 1000 	ldr.w	r1, [r9]
 8008daa:	fa1f fb82 	uxth.w	fp, r2
 8008dae:	b289      	uxth	r1, r1
 8008db0:	fb0a 110b 	mla	r1, sl, fp, r1
 8008db4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008db8:	f8d9 2000 	ldr.w	r2, [r9]
 8008dbc:	4461      	add	r1, ip
 8008dbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008dc2:	fb0a c20b 	mla	r2, sl, fp, ip
 8008dc6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008dca:	b289      	uxth	r1, r1
 8008dcc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008dd0:	4577      	cmp	r7, lr
 8008dd2:	f849 1b04 	str.w	r1, [r9], #4
 8008dd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008dda:	d8e2      	bhi.n	8008da2 <__multiply+0xb2>
 8008ddc:	9a01      	ldr	r2, [sp, #4]
 8008dde:	f845 c002 	str.w	ip, [r5, r2]
 8008de2:	9a03      	ldr	r2, [sp, #12]
 8008de4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008de8:	3304      	adds	r3, #4
 8008dea:	f1b9 0f00 	cmp.w	r9, #0
 8008dee:	d020      	beq.n	8008e32 <__multiply+0x142>
 8008df0:	6829      	ldr	r1, [r5, #0]
 8008df2:	f104 0c14 	add.w	ip, r4, #20
 8008df6:	46ae      	mov	lr, r5
 8008df8:	f04f 0a00 	mov.w	sl, #0
 8008dfc:	f8bc b000 	ldrh.w	fp, [ip]
 8008e00:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008e04:	fb09 220b 	mla	r2, r9, fp, r2
 8008e08:	4492      	add	sl, r2
 8008e0a:	b289      	uxth	r1, r1
 8008e0c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008e10:	f84e 1b04 	str.w	r1, [lr], #4
 8008e14:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008e18:	f8be 1000 	ldrh.w	r1, [lr]
 8008e1c:	0c12      	lsrs	r2, r2, #16
 8008e1e:	fb09 1102 	mla	r1, r9, r2, r1
 8008e22:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008e26:	4567      	cmp	r7, ip
 8008e28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008e2c:	d8e6      	bhi.n	8008dfc <__multiply+0x10c>
 8008e2e:	9a01      	ldr	r2, [sp, #4]
 8008e30:	50a9      	str	r1, [r5, r2]
 8008e32:	3504      	adds	r5, #4
 8008e34:	e79a      	b.n	8008d6c <__multiply+0x7c>
 8008e36:	3e01      	subs	r6, #1
 8008e38:	e79c      	b.n	8008d74 <__multiply+0x84>
 8008e3a:	bf00      	nop
 8008e3c:	0800a768 	.word	0x0800a768
 8008e40:	0800a7f4 	.word	0x0800a7f4

08008e44 <__pow5mult>:
 8008e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e48:	4615      	mov	r5, r2
 8008e4a:	f012 0203 	ands.w	r2, r2, #3
 8008e4e:	4606      	mov	r6, r0
 8008e50:	460f      	mov	r7, r1
 8008e52:	d007      	beq.n	8008e64 <__pow5mult+0x20>
 8008e54:	4c25      	ldr	r4, [pc, #148]	; (8008eec <__pow5mult+0xa8>)
 8008e56:	3a01      	subs	r2, #1
 8008e58:	2300      	movs	r3, #0
 8008e5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e5e:	f7ff fe51 	bl	8008b04 <__multadd>
 8008e62:	4607      	mov	r7, r0
 8008e64:	10ad      	asrs	r5, r5, #2
 8008e66:	d03d      	beq.n	8008ee4 <__pow5mult+0xa0>
 8008e68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008e6a:	b97c      	cbnz	r4, 8008e8c <__pow5mult+0x48>
 8008e6c:	2010      	movs	r0, #16
 8008e6e:	f7ff fdcd 	bl	8008a0c <malloc>
 8008e72:	4602      	mov	r2, r0
 8008e74:	6270      	str	r0, [r6, #36]	; 0x24
 8008e76:	b928      	cbnz	r0, 8008e84 <__pow5mult+0x40>
 8008e78:	4b1d      	ldr	r3, [pc, #116]	; (8008ef0 <__pow5mult+0xac>)
 8008e7a:	481e      	ldr	r0, [pc, #120]	; (8008ef4 <__pow5mult+0xb0>)
 8008e7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008e80:	f000 fd2c 	bl	80098dc <__assert_func>
 8008e84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e88:	6004      	str	r4, [r0, #0]
 8008e8a:	60c4      	str	r4, [r0, #12]
 8008e8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008e90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e94:	b94c      	cbnz	r4, 8008eaa <__pow5mult+0x66>
 8008e96:	f240 2171 	movw	r1, #625	; 0x271
 8008e9a:	4630      	mov	r0, r6
 8008e9c:	f7ff ff12 	bl	8008cc4 <__i2b>
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	f8c8 0008 	str.w	r0, [r8, #8]
 8008ea6:	4604      	mov	r4, r0
 8008ea8:	6003      	str	r3, [r0, #0]
 8008eaa:	f04f 0900 	mov.w	r9, #0
 8008eae:	07eb      	lsls	r3, r5, #31
 8008eb0:	d50a      	bpl.n	8008ec8 <__pow5mult+0x84>
 8008eb2:	4639      	mov	r1, r7
 8008eb4:	4622      	mov	r2, r4
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	f7ff ff1a 	bl	8008cf0 <__multiply>
 8008ebc:	4639      	mov	r1, r7
 8008ebe:	4680      	mov	r8, r0
 8008ec0:	4630      	mov	r0, r6
 8008ec2:	f7ff fdfd 	bl	8008ac0 <_Bfree>
 8008ec6:	4647      	mov	r7, r8
 8008ec8:	106d      	asrs	r5, r5, #1
 8008eca:	d00b      	beq.n	8008ee4 <__pow5mult+0xa0>
 8008ecc:	6820      	ldr	r0, [r4, #0]
 8008ece:	b938      	cbnz	r0, 8008ee0 <__pow5mult+0x9c>
 8008ed0:	4622      	mov	r2, r4
 8008ed2:	4621      	mov	r1, r4
 8008ed4:	4630      	mov	r0, r6
 8008ed6:	f7ff ff0b 	bl	8008cf0 <__multiply>
 8008eda:	6020      	str	r0, [r4, #0]
 8008edc:	f8c0 9000 	str.w	r9, [r0]
 8008ee0:	4604      	mov	r4, r0
 8008ee2:	e7e4      	b.n	8008eae <__pow5mult+0x6a>
 8008ee4:	4638      	mov	r0, r7
 8008ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eea:	bf00      	nop
 8008eec:	0800a940 	.word	0x0800a940
 8008ef0:	0800a6f6 	.word	0x0800a6f6
 8008ef4:	0800a7f4 	.word	0x0800a7f4

08008ef8 <__lshift>:
 8008ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008efc:	460c      	mov	r4, r1
 8008efe:	6849      	ldr	r1, [r1, #4]
 8008f00:	6923      	ldr	r3, [r4, #16]
 8008f02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008f06:	68a3      	ldr	r3, [r4, #8]
 8008f08:	4607      	mov	r7, r0
 8008f0a:	4691      	mov	r9, r2
 8008f0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f10:	f108 0601 	add.w	r6, r8, #1
 8008f14:	42b3      	cmp	r3, r6
 8008f16:	db0b      	blt.n	8008f30 <__lshift+0x38>
 8008f18:	4638      	mov	r0, r7
 8008f1a:	f7ff fd91 	bl	8008a40 <_Balloc>
 8008f1e:	4605      	mov	r5, r0
 8008f20:	b948      	cbnz	r0, 8008f36 <__lshift+0x3e>
 8008f22:	4602      	mov	r2, r0
 8008f24:	4b2a      	ldr	r3, [pc, #168]	; (8008fd0 <__lshift+0xd8>)
 8008f26:	482b      	ldr	r0, [pc, #172]	; (8008fd4 <__lshift+0xdc>)
 8008f28:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008f2c:	f000 fcd6 	bl	80098dc <__assert_func>
 8008f30:	3101      	adds	r1, #1
 8008f32:	005b      	lsls	r3, r3, #1
 8008f34:	e7ee      	b.n	8008f14 <__lshift+0x1c>
 8008f36:	2300      	movs	r3, #0
 8008f38:	f100 0114 	add.w	r1, r0, #20
 8008f3c:	f100 0210 	add.w	r2, r0, #16
 8008f40:	4618      	mov	r0, r3
 8008f42:	4553      	cmp	r3, sl
 8008f44:	db37      	blt.n	8008fb6 <__lshift+0xbe>
 8008f46:	6920      	ldr	r0, [r4, #16]
 8008f48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f4c:	f104 0314 	add.w	r3, r4, #20
 8008f50:	f019 091f 	ands.w	r9, r9, #31
 8008f54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f58:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008f5c:	d02f      	beq.n	8008fbe <__lshift+0xc6>
 8008f5e:	f1c9 0e20 	rsb	lr, r9, #32
 8008f62:	468a      	mov	sl, r1
 8008f64:	f04f 0c00 	mov.w	ip, #0
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	fa02 f209 	lsl.w	r2, r2, r9
 8008f6e:	ea42 020c 	orr.w	r2, r2, ip
 8008f72:	f84a 2b04 	str.w	r2, [sl], #4
 8008f76:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f7a:	4298      	cmp	r0, r3
 8008f7c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008f80:	d8f2      	bhi.n	8008f68 <__lshift+0x70>
 8008f82:	1b03      	subs	r3, r0, r4
 8008f84:	3b15      	subs	r3, #21
 8008f86:	f023 0303 	bic.w	r3, r3, #3
 8008f8a:	3304      	adds	r3, #4
 8008f8c:	f104 0215 	add.w	r2, r4, #21
 8008f90:	4290      	cmp	r0, r2
 8008f92:	bf38      	it	cc
 8008f94:	2304      	movcc	r3, #4
 8008f96:	f841 c003 	str.w	ip, [r1, r3]
 8008f9a:	f1bc 0f00 	cmp.w	ip, #0
 8008f9e:	d001      	beq.n	8008fa4 <__lshift+0xac>
 8008fa0:	f108 0602 	add.w	r6, r8, #2
 8008fa4:	3e01      	subs	r6, #1
 8008fa6:	4638      	mov	r0, r7
 8008fa8:	612e      	str	r6, [r5, #16]
 8008faa:	4621      	mov	r1, r4
 8008fac:	f7ff fd88 	bl	8008ac0 <_Bfree>
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fb6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008fba:	3301      	adds	r3, #1
 8008fbc:	e7c1      	b.n	8008f42 <__lshift+0x4a>
 8008fbe:	3904      	subs	r1, #4
 8008fc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fc4:	f841 2f04 	str.w	r2, [r1, #4]!
 8008fc8:	4298      	cmp	r0, r3
 8008fca:	d8f9      	bhi.n	8008fc0 <__lshift+0xc8>
 8008fcc:	e7ea      	b.n	8008fa4 <__lshift+0xac>
 8008fce:	bf00      	nop
 8008fd0:	0800a768 	.word	0x0800a768
 8008fd4:	0800a7f4 	.word	0x0800a7f4

08008fd8 <__mcmp>:
 8008fd8:	b530      	push	{r4, r5, lr}
 8008fda:	6902      	ldr	r2, [r0, #16]
 8008fdc:	690c      	ldr	r4, [r1, #16]
 8008fde:	1b12      	subs	r2, r2, r4
 8008fe0:	d10e      	bne.n	8009000 <__mcmp+0x28>
 8008fe2:	f100 0314 	add.w	r3, r0, #20
 8008fe6:	3114      	adds	r1, #20
 8008fe8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008fec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008ff0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008ff4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008ff8:	42a5      	cmp	r5, r4
 8008ffa:	d003      	beq.n	8009004 <__mcmp+0x2c>
 8008ffc:	d305      	bcc.n	800900a <__mcmp+0x32>
 8008ffe:	2201      	movs	r2, #1
 8009000:	4610      	mov	r0, r2
 8009002:	bd30      	pop	{r4, r5, pc}
 8009004:	4283      	cmp	r3, r0
 8009006:	d3f3      	bcc.n	8008ff0 <__mcmp+0x18>
 8009008:	e7fa      	b.n	8009000 <__mcmp+0x28>
 800900a:	f04f 32ff 	mov.w	r2, #4294967295
 800900e:	e7f7      	b.n	8009000 <__mcmp+0x28>

08009010 <__mdiff>:
 8009010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009014:	460c      	mov	r4, r1
 8009016:	4606      	mov	r6, r0
 8009018:	4611      	mov	r1, r2
 800901a:	4620      	mov	r0, r4
 800901c:	4690      	mov	r8, r2
 800901e:	f7ff ffdb 	bl	8008fd8 <__mcmp>
 8009022:	1e05      	subs	r5, r0, #0
 8009024:	d110      	bne.n	8009048 <__mdiff+0x38>
 8009026:	4629      	mov	r1, r5
 8009028:	4630      	mov	r0, r6
 800902a:	f7ff fd09 	bl	8008a40 <_Balloc>
 800902e:	b930      	cbnz	r0, 800903e <__mdiff+0x2e>
 8009030:	4b3a      	ldr	r3, [pc, #232]	; (800911c <__mdiff+0x10c>)
 8009032:	4602      	mov	r2, r0
 8009034:	f240 2132 	movw	r1, #562	; 0x232
 8009038:	4839      	ldr	r0, [pc, #228]	; (8009120 <__mdiff+0x110>)
 800903a:	f000 fc4f 	bl	80098dc <__assert_func>
 800903e:	2301      	movs	r3, #1
 8009040:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009044:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009048:	bfa4      	itt	ge
 800904a:	4643      	movge	r3, r8
 800904c:	46a0      	movge	r8, r4
 800904e:	4630      	mov	r0, r6
 8009050:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009054:	bfa6      	itte	ge
 8009056:	461c      	movge	r4, r3
 8009058:	2500      	movge	r5, #0
 800905a:	2501      	movlt	r5, #1
 800905c:	f7ff fcf0 	bl	8008a40 <_Balloc>
 8009060:	b920      	cbnz	r0, 800906c <__mdiff+0x5c>
 8009062:	4b2e      	ldr	r3, [pc, #184]	; (800911c <__mdiff+0x10c>)
 8009064:	4602      	mov	r2, r0
 8009066:	f44f 7110 	mov.w	r1, #576	; 0x240
 800906a:	e7e5      	b.n	8009038 <__mdiff+0x28>
 800906c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009070:	6926      	ldr	r6, [r4, #16]
 8009072:	60c5      	str	r5, [r0, #12]
 8009074:	f104 0914 	add.w	r9, r4, #20
 8009078:	f108 0514 	add.w	r5, r8, #20
 800907c:	f100 0e14 	add.w	lr, r0, #20
 8009080:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009084:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009088:	f108 0210 	add.w	r2, r8, #16
 800908c:	46f2      	mov	sl, lr
 800908e:	2100      	movs	r1, #0
 8009090:	f859 3b04 	ldr.w	r3, [r9], #4
 8009094:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009098:	fa1f f883 	uxth.w	r8, r3
 800909c:	fa11 f18b 	uxtah	r1, r1, fp
 80090a0:	0c1b      	lsrs	r3, r3, #16
 80090a2:	eba1 0808 	sub.w	r8, r1, r8
 80090a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80090aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80090ae:	fa1f f888 	uxth.w	r8, r8
 80090b2:	1419      	asrs	r1, r3, #16
 80090b4:	454e      	cmp	r6, r9
 80090b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80090ba:	f84a 3b04 	str.w	r3, [sl], #4
 80090be:	d8e7      	bhi.n	8009090 <__mdiff+0x80>
 80090c0:	1b33      	subs	r3, r6, r4
 80090c2:	3b15      	subs	r3, #21
 80090c4:	f023 0303 	bic.w	r3, r3, #3
 80090c8:	3304      	adds	r3, #4
 80090ca:	3415      	adds	r4, #21
 80090cc:	42a6      	cmp	r6, r4
 80090ce:	bf38      	it	cc
 80090d0:	2304      	movcc	r3, #4
 80090d2:	441d      	add	r5, r3
 80090d4:	4473      	add	r3, lr
 80090d6:	469e      	mov	lr, r3
 80090d8:	462e      	mov	r6, r5
 80090da:	4566      	cmp	r6, ip
 80090dc:	d30e      	bcc.n	80090fc <__mdiff+0xec>
 80090de:	f10c 0203 	add.w	r2, ip, #3
 80090e2:	1b52      	subs	r2, r2, r5
 80090e4:	f022 0203 	bic.w	r2, r2, #3
 80090e8:	3d03      	subs	r5, #3
 80090ea:	45ac      	cmp	ip, r5
 80090ec:	bf38      	it	cc
 80090ee:	2200      	movcc	r2, #0
 80090f0:	441a      	add	r2, r3
 80090f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80090f6:	b17b      	cbz	r3, 8009118 <__mdiff+0x108>
 80090f8:	6107      	str	r7, [r0, #16]
 80090fa:	e7a3      	b.n	8009044 <__mdiff+0x34>
 80090fc:	f856 8b04 	ldr.w	r8, [r6], #4
 8009100:	fa11 f288 	uxtah	r2, r1, r8
 8009104:	1414      	asrs	r4, r2, #16
 8009106:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800910a:	b292      	uxth	r2, r2
 800910c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009110:	f84e 2b04 	str.w	r2, [lr], #4
 8009114:	1421      	asrs	r1, r4, #16
 8009116:	e7e0      	b.n	80090da <__mdiff+0xca>
 8009118:	3f01      	subs	r7, #1
 800911a:	e7ea      	b.n	80090f2 <__mdiff+0xe2>
 800911c:	0800a768 	.word	0x0800a768
 8009120:	0800a7f4 	.word	0x0800a7f4

08009124 <__ulp>:
 8009124:	b082      	sub	sp, #8
 8009126:	ed8d 0b00 	vstr	d0, [sp]
 800912a:	9b01      	ldr	r3, [sp, #4]
 800912c:	4912      	ldr	r1, [pc, #72]	; (8009178 <__ulp+0x54>)
 800912e:	4019      	ands	r1, r3
 8009130:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009134:	2900      	cmp	r1, #0
 8009136:	dd05      	ble.n	8009144 <__ulp+0x20>
 8009138:	2200      	movs	r2, #0
 800913a:	460b      	mov	r3, r1
 800913c:	ec43 2b10 	vmov	d0, r2, r3
 8009140:	b002      	add	sp, #8
 8009142:	4770      	bx	lr
 8009144:	4249      	negs	r1, r1
 8009146:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800914a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800914e:	f04f 0200 	mov.w	r2, #0
 8009152:	f04f 0300 	mov.w	r3, #0
 8009156:	da04      	bge.n	8009162 <__ulp+0x3e>
 8009158:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800915c:	fa41 f300 	asr.w	r3, r1, r0
 8009160:	e7ec      	b.n	800913c <__ulp+0x18>
 8009162:	f1a0 0114 	sub.w	r1, r0, #20
 8009166:	291e      	cmp	r1, #30
 8009168:	bfda      	itte	le
 800916a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800916e:	fa20 f101 	lsrle.w	r1, r0, r1
 8009172:	2101      	movgt	r1, #1
 8009174:	460a      	mov	r2, r1
 8009176:	e7e1      	b.n	800913c <__ulp+0x18>
 8009178:	7ff00000 	.word	0x7ff00000

0800917c <__b2d>:
 800917c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800917e:	6905      	ldr	r5, [r0, #16]
 8009180:	f100 0714 	add.w	r7, r0, #20
 8009184:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009188:	1f2e      	subs	r6, r5, #4
 800918a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800918e:	4620      	mov	r0, r4
 8009190:	f7ff fd48 	bl	8008c24 <__hi0bits>
 8009194:	f1c0 0320 	rsb	r3, r0, #32
 8009198:	280a      	cmp	r0, #10
 800919a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009218 <__b2d+0x9c>
 800919e:	600b      	str	r3, [r1, #0]
 80091a0:	dc14      	bgt.n	80091cc <__b2d+0x50>
 80091a2:	f1c0 0e0b 	rsb	lr, r0, #11
 80091a6:	fa24 f10e 	lsr.w	r1, r4, lr
 80091aa:	42b7      	cmp	r7, r6
 80091ac:	ea41 030c 	orr.w	r3, r1, ip
 80091b0:	bf34      	ite	cc
 80091b2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80091b6:	2100      	movcs	r1, #0
 80091b8:	3015      	adds	r0, #21
 80091ba:	fa04 f000 	lsl.w	r0, r4, r0
 80091be:	fa21 f10e 	lsr.w	r1, r1, lr
 80091c2:	ea40 0201 	orr.w	r2, r0, r1
 80091c6:	ec43 2b10 	vmov	d0, r2, r3
 80091ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091cc:	42b7      	cmp	r7, r6
 80091ce:	bf3a      	itte	cc
 80091d0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80091d4:	f1a5 0608 	subcc.w	r6, r5, #8
 80091d8:	2100      	movcs	r1, #0
 80091da:	380b      	subs	r0, #11
 80091dc:	d017      	beq.n	800920e <__b2d+0x92>
 80091de:	f1c0 0c20 	rsb	ip, r0, #32
 80091e2:	fa04 f500 	lsl.w	r5, r4, r0
 80091e6:	42be      	cmp	r6, r7
 80091e8:	fa21 f40c 	lsr.w	r4, r1, ip
 80091ec:	ea45 0504 	orr.w	r5, r5, r4
 80091f0:	bf8c      	ite	hi
 80091f2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80091f6:	2400      	movls	r4, #0
 80091f8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80091fc:	fa01 f000 	lsl.w	r0, r1, r0
 8009200:	fa24 f40c 	lsr.w	r4, r4, ip
 8009204:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009208:	ea40 0204 	orr.w	r2, r0, r4
 800920c:	e7db      	b.n	80091c6 <__b2d+0x4a>
 800920e:	ea44 030c 	orr.w	r3, r4, ip
 8009212:	460a      	mov	r2, r1
 8009214:	e7d7      	b.n	80091c6 <__b2d+0x4a>
 8009216:	bf00      	nop
 8009218:	3ff00000 	.word	0x3ff00000

0800921c <__d2b>:
 800921c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009220:	4689      	mov	r9, r1
 8009222:	2101      	movs	r1, #1
 8009224:	ec57 6b10 	vmov	r6, r7, d0
 8009228:	4690      	mov	r8, r2
 800922a:	f7ff fc09 	bl	8008a40 <_Balloc>
 800922e:	4604      	mov	r4, r0
 8009230:	b930      	cbnz	r0, 8009240 <__d2b+0x24>
 8009232:	4602      	mov	r2, r0
 8009234:	4b25      	ldr	r3, [pc, #148]	; (80092cc <__d2b+0xb0>)
 8009236:	4826      	ldr	r0, [pc, #152]	; (80092d0 <__d2b+0xb4>)
 8009238:	f240 310a 	movw	r1, #778	; 0x30a
 800923c:	f000 fb4e 	bl	80098dc <__assert_func>
 8009240:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009244:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009248:	bb35      	cbnz	r5, 8009298 <__d2b+0x7c>
 800924a:	2e00      	cmp	r6, #0
 800924c:	9301      	str	r3, [sp, #4]
 800924e:	d028      	beq.n	80092a2 <__d2b+0x86>
 8009250:	4668      	mov	r0, sp
 8009252:	9600      	str	r6, [sp, #0]
 8009254:	f7ff fd06 	bl	8008c64 <__lo0bits>
 8009258:	9900      	ldr	r1, [sp, #0]
 800925a:	b300      	cbz	r0, 800929e <__d2b+0x82>
 800925c:	9a01      	ldr	r2, [sp, #4]
 800925e:	f1c0 0320 	rsb	r3, r0, #32
 8009262:	fa02 f303 	lsl.w	r3, r2, r3
 8009266:	430b      	orrs	r3, r1
 8009268:	40c2      	lsrs	r2, r0
 800926a:	6163      	str	r3, [r4, #20]
 800926c:	9201      	str	r2, [sp, #4]
 800926e:	9b01      	ldr	r3, [sp, #4]
 8009270:	61a3      	str	r3, [r4, #24]
 8009272:	2b00      	cmp	r3, #0
 8009274:	bf14      	ite	ne
 8009276:	2202      	movne	r2, #2
 8009278:	2201      	moveq	r2, #1
 800927a:	6122      	str	r2, [r4, #16]
 800927c:	b1d5      	cbz	r5, 80092b4 <__d2b+0x98>
 800927e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009282:	4405      	add	r5, r0
 8009284:	f8c9 5000 	str.w	r5, [r9]
 8009288:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800928c:	f8c8 0000 	str.w	r0, [r8]
 8009290:	4620      	mov	r0, r4
 8009292:	b003      	add	sp, #12
 8009294:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009298:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800929c:	e7d5      	b.n	800924a <__d2b+0x2e>
 800929e:	6161      	str	r1, [r4, #20]
 80092a0:	e7e5      	b.n	800926e <__d2b+0x52>
 80092a2:	a801      	add	r0, sp, #4
 80092a4:	f7ff fcde 	bl	8008c64 <__lo0bits>
 80092a8:	9b01      	ldr	r3, [sp, #4]
 80092aa:	6163      	str	r3, [r4, #20]
 80092ac:	2201      	movs	r2, #1
 80092ae:	6122      	str	r2, [r4, #16]
 80092b0:	3020      	adds	r0, #32
 80092b2:	e7e3      	b.n	800927c <__d2b+0x60>
 80092b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80092b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80092bc:	f8c9 0000 	str.w	r0, [r9]
 80092c0:	6918      	ldr	r0, [r3, #16]
 80092c2:	f7ff fcaf 	bl	8008c24 <__hi0bits>
 80092c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80092ca:	e7df      	b.n	800928c <__d2b+0x70>
 80092cc:	0800a768 	.word	0x0800a768
 80092d0:	0800a7f4 	.word	0x0800a7f4

080092d4 <__ratio>:
 80092d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d8:	4688      	mov	r8, r1
 80092da:	4669      	mov	r1, sp
 80092dc:	4681      	mov	r9, r0
 80092de:	f7ff ff4d 	bl	800917c <__b2d>
 80092e2:	a901      	add	r1, sp, #4
 80092e4:	4640      	mov	r0, r8
 80092e6:	ec55 4b10 	vmov	r4, r5, d0
 80092ea:	f7ff ff47 	bl	800917c <__b2d>
 80092ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80092f2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80092f6:	eba3 0c02 	sub.w	ip, r3, r2
 80092fa:	e9dd 3200 	ldrd	r3, r2, [sp]
 80092fe:	1a9b      	subs	r3, r3, r2
 8009300:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009304:	ec51 0b10 	vmov	r0, r1, d0
 8009308:	2b00      	cmp	r3, #0
 800930a:	bfd6      	itet	le
 800930c:	460a      	movle	r2, r1
 800930e:	462a      	movgt	r2, r5
 8009310:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009314:	468b      	mov	fp, r1
 8009316:	462f      	mov	r7, r5
 8009318:	bfd4      	ite	le
 800931a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800931e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009322:	4620      	mov	r0, r4
 8009324:	ee10 2a10 	vmov	r2, s0
 8009328:	465b      	mov	r3, fp
 800932a:	4639      	mov	r1, r7
 800932c:	f7f7 fa66 	bl	80007fc <__aeabi_ddiv>
 8009330:	ec41 0b10 	vmov	d0, r0, r1
 8009334:	b003      	add	sp, #12
 8009336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800933a <__copybits>:
 800933a:	3901      	subs	r1, #1
 800933c:	b570      	push	{r4, r5, r6, lr}
 800933e:	1149      	asrs	r1, r1, #5
 8009340:	6914      	ldr	r4, [r2, #16]
 8009342:	3101      	adds	r1, #1
 8009344:	f102 0314 	add.w	r3, r2, #20
 8009348:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800934c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009350:	1f05      	subs	r5, r0, #4
 8009352:	42a3      	cmp	r3, r4
 8009354:	d30c      	bcc.n	8009370 <__copybits+0x36>
 8009356:	1aa3      	subs	r3, r4, r2
 8009358:	3b11      	subs	r3, #17
 800935a:	f023 0303 	bic.w	r3, r3, #3
 800935e:	3211      	adds	r2, #17
 8009360:	42a2      	cmp	r2, r4
 8009362:	bf88      	it	hi
 8009364:	2300      	movhi	r3, #0
 8009366:	4418      	add	r0, r3
 8009368:	2300      	movs	r3, #0
 800936a:	4288      	cmp	r0, r1
 800936c:	d305      	bcc.n	800937a <__copybits+0x40>
 800936e:	bd70      	pop	{r4, r5, r6, pc}
 8009370:	f853 6b04 	ldr.w	r6, [r3], #4
 8009374:	f845 6f04 	str.w	r6, [r5, #4]!
 8009378:	e7eb      	b.n	8009352 <__copybits+0x18>
 800937a:	f840 3b04 	str.w	r3, [r0], #4
 800937e:	e7f4      	b.n	800936a <__copybits+0x30>

08009380 <__any_on>:
 8009380:	f100 0214 	add.w	r2, r0, #20
 8009384:	6900      	ldr	r0, [r0, #16]
 8009386:	114b      	asrs	r3, r1, #5
 8009388:	4298      	cmp	r0, r3
 800938a:	b510      	push	{r4, lr}
 800938c:	db11      	blt.n	80093b2 <__any_on+0x32>
 800938e:	dd0a      	ble.n	80093a6 <__any_on+0x26>
 8009390:	f011 011f 	ands.w	r1, r1, #31
 8009394:	d007      	beq.n	80093a6 <__any_on+0x26>
 8009396:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800939a:	fa24 f001 	lsr.w	r0, r4, r1
 800939e:	fa00 f101 	lsl.w	r1, r0, r1
 80093a2:	428c      	cmp	r4, r1
 80093a4:	d10b      	bne.n	80093be <__any_on+0x3e>
 80093a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d803      	bhi.n	80093b6 <__any_on+0x36>
 80093ae:	2000      	movs	r0, #0
 80093b0:	bd10      	pop	{r4, pc}
 80093b2:	4603      	mov	r3, r0
 80093b4:	e7f7      	b.n	80093a6 <__any_on+0x26>
 80093b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80093ba:	2900      	cmp	r1, #0
 80093bc:	d0f5      	beq.n	80093aa <__any_on+0x2a>
 80093be:	2001      	movs	r0, #1
 80093c0:	e7f6      	b.n	80093b0 <__any_on+0x30>

080093c2 <_calloc_r>:
 80093c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093c4:	fba1 2402 	umull	r2, r4, r1, r2
 80093c8:	b94c      	cbnz	r4, 80093de <_calloc_r+0x1c>
 80093ca:	4611      	mov	r1, r2
 80093cc:	9201      	str	r2, [sp, #4]
 80093ce:	f000 f87b 	bl	80094c8 <_malloc_r>
 80093d2:	9a01      	ldr	r2, [sp, #4]
 80093d4:	4605      	mov	r5, r0
 80093d6:	b930      	cbnz	r0, 80093e6 <_calloc_r+0x24>
 80093d8:	4628      	mov	r0, r5
 80093da:	b003      	add	sp, #12
 80093dc:	bd30      	pop	{r4, r5, pc}
 80093de:	220c      	movs	r2, #12
 80093e0:	6002      	str	r2, [r0, #0]
 80093e2:	2500      	movs	r5, #0
 80093e4:	e7f8      	b.n	80093d8 <_calloc_r+0x16>
 80093e6:	4621      	mov	r1, r4
 80093e8:	f7fc fbcc 	bl	8005b84 <memset>
 80093ec:	e7f4      	b.n	80093d8 <_calloc_r+0x16>
	...

080093f0 <_free_r>:
 80093f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093f2:	2900      	cmp	r1, #0
 80093f4:	d044      	beq.n	8009480 <_free_r+0x90>
 80093f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093fa:	9001      	str	r0, [sp, #4]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	f1a1 0404 	sub.w	r4, r1, #4
 8009402:	bfb8      	it	lt
 8009404:	18e4      	addlt	r4, r4, r3
 8009406:	f000 fa99 	bl	800993c <__malloc_lock>
 800940a:	4a1e      	ldr	r2, [pc, #120]	; (8009484 <_free_r+0x94>)
 800940c:	9801      	ldr	r0, [sp, #4]
 800940e:	6813      	ldr	r3, [r2, #0]
 8009410:	b933      	cbnz	r3, 8009420 <_free_r+0x30>
 8009412:	6063      	str	r3, [r4, #4]
 8009414:	6014      	str	r4, [r2, #0]
 8009416:	b003      	add	sp, #12
 8009418:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800941c:	f000 ba94 	b.w	8009948 <__malloc_unlock>
 8009420:	42a3      	cmp	r3, r4
 8009422:	d908      	bls.n	8009436 <_free_r+0x46>
 8009424:	6825      	ldr	r5, [r4, #0]
 8009426:	1961      	adds	r1, r4, r5
 8009428:	428b      	cmp	r3, r1
 800942a:	bf01      	itttt	eq
 800942c:	6819      	ldreq	r1, [r3, #0]
 800942e:	685b      	ldreq	r3, [r3, #4]
 8009430:	1949      	addeq	r1, r1, r5
 8009432:	6021      	streq	r1, [r4, #0]
 8009434:	e7ed      	b.n	8009412 <_free_r+0x22>
 8009436:	461a      	mov	r2, r3
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	b10b      	cbz	r3, 8009440 <_free_r+0x50>
 800943c:	42a3      	cmp	r3, r4
 800943e:	d9fa      	bls.n	8009436 <_free_r+0x46>
 8009440:	6811      	ldr	r1, [r2, #0]
 8009442:	1855      	adds	r5, r2, r1
 8009444:	42a5      	cmp	r5, r4
 8009446:	d10b      	bne.n	8009460 <_free_r+0x70>
 8009448:	6824      	ldr	r4, [r4, #0]
 800944a:	4421      	add	r1, r4
 800944c:	1854      	adds	r4, r2, r1
 800944e:	42a3      	cmp	r3, r4
 8009450:	6011      	str	r1, [r2, #0]
 8009452:	d1e0      	bne.n	8009416 <_free_r+0x26>
 8009454:	681c      	ldr	r4, [r3, #0]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	6053      	str	r3, [r2, #4]
 800945a:	4421      	add	r1, r4
 800945c:	6011      	str	r1, [r2, #0]
 800945e:	e7da      	b.n	8009416 <_free_r+0x26>
 8009460:	d902      	bls.n	8009468 <_free_r+0x78>
 8009462:	230c      	movs	r3, #12
 8009464:	6003      	str	r3, [r0, #0]
 8009466:	e7d6      	b.n	8009416 <_free_r+0x26>
 8009468:	6825      	ldr	r5, [r4, #0]
 800946a:	1961      	adds	r1, r4, r5
 800946c:	428b      	cmp	r3, r1
 800946e:	bf04      	itt	eq
 8009470:	6819      	ldreq	r1, [r3, #0]
 8009472:	685b      	ldreq	r3, [r3, #4]
 8009474:	6063      	str	r3, [r4, #4]
 8009476:	bf04      	itt	eq
 8009478:	1949      	addeq	r1, r1, r5
 800947a:	6021      	streq	r1, [r4, #0]
 800947c:	6054      	str	r4, [r2, #4]
 800947e:	e7ca      	b.n	8009416 <_free_r+0x26>
 8009480:	b003      	add	sp, #12
 8009482:	bd30      	pop	{r4, r5, pc}
 8009484:	200020a4 	.word	0x200020a4

08009488 <sbrk_aligned>:
 8009488:	b570      	push	{r4, r5, r6, lr}
 800948a:	4e0e      	ldr	r6, [pc, #56]	; (80094c4 <sbrk_aligned+0x3c>)
 800948c:	460c      	mov	r4, r1
 800948e:	6831      	ldr	r1, [r6, #0]
 8009490:	4605      	mov	r5, r0
 8009492:	b911      	cbnz	r1, 800949a <sbrk_aligned+0x12>
 8009494:	f000 f9f0 	bl	8009878 <_sbrk_r>
 8009498:	6030      	str	r0, [r6, #0]
 800949a:	4621      	mov	r1, r4
 800949c:	4628      	mov	r0, r5
 800949e:	f000 f9eb 	bl	8009878 <_sbrk_r>
 80094a2:	1c43      	adds	r3, r0, #1
 80094a4:	d00a      	beq.n	80094bc <sbrk_aligned+0x34>
 80094a6:	1cc4      	adds	r4, r0, #3
 80094a8:	f024 0403 	bic.w	r4, r4, #3
 80094ac:	42a0      	cmp	r0, r4
 80094ae:	d007      	beq.n	80094c0 <sbrk_aligned+0x38>
 80094b0:	1a21      	subs	r1, r4, r0
 80094b2:	4628      	mov	r0, r5
 80094b4:	f000 f9e0 	bl	8009878 <_sbrk_r>
 80094b8:	3001      	adds	r0, #1
 80094ba:	d101      	bne.n	80094c0 <sbrk_aligned+0x38>
 80094bc:	f04f 34ff 	mov.w	r4, #4294967295
 80094c0:	4620      	mov	r0, r4
 80094c2:	bd70      	pop	{r4, r5, r6, pc}
 80094c4:	200020a8 	.word	0x200020a8

080094c8 <_malloc_r>:
 80094c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094cc:	1ccd      	adds	r5, r1, #3
 80094ce:	f025 0503 	bic.w	r5, r5, #3
 80094d2:	3508      	adds	r5, #8
 80094d4:	2d0c      	cmp	r5, #12
 80094d6:	bf38      	it	cc
 80094d8:	250c      	movcc	r5, #12
 80094da:	2d00      	cmp	r5, #0
 80094dc:	4607      	mov	r7, r0
 80094de:	db01      	blt.n	80094e4 <_malloc_r+0x1c>
 80094e0:	42a9      	cmp	r1, r5
 80094e2:	d905      	bls.n	80094f0 <_malloc_r+0x28>
 80094e4:	230c      	movs	r3, #12
 80094e6:	603b      	str	r3, [r7, #0]
 80094e8:	2600      	movs	r6, #0
 80094ea:	4630      	mov	r0, r6
 80094ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094f0:	4e2e      	ldr	r6, [pc, #184]	; (80095ac <_malloc_r+0xe4>)
 80094f2:	f000 fa23 	bl	800993c <__malloc_lock>
 80094f6:	6833      	ldr	r3, [r6, #0]
 80094f8:	461c      	mov	r4, r3
 80094fa:	bb34      	cbnz	r4, 800954a <_malloc_r+0x82>
 80094fc:	4629      	mov	r1, r5
 80094fe:	4638      	mov	r0, r7
 8009500:	f7ff ffc2 	bl	8009488 <sbrk_aligned>
 8009504:	1c43      	adds	r3, r0, #1
 8009506:	4604      	mov	r4, r0
 8009508:	d14d      	bne.n	80095a6 <_malloc_r+0xde>
 800950a:	6834      	ldr	r4, [r6, #0]
 800950c:	4626      	mov	r6, r4
 800950e:	2e00      	cmp	r6, #0
 8009510:	d140      	bne.n	8009594 <_malloc_r+0xcc>
 8009512:	6823      	ldr	r3, [r4, #0]
 8009514:	4631      	mov	r1, r6
 8009516:	4638      	mov	r0, r7
 8009518:	eb04 0803 	add.w	r8, r4, r3
 800951c:	f000 f9ac 	bl	8009878 <_sbrk_r>
 8009520:	4580      	cmp	r8, r0
 8009522:	d13a      	bne.n	800959a <_malloc_r+0xd2>
 8009524:	6821      	ldr	r1, [r4, #0]
 8009526:	3503      	adds	r5, #3
 8009528:	1a6d      	subs	r5, r5, r1
 800952a:	f025 0503 	bic.w	r5, r5, #3
 800952e:	3508      	adds	r5, #8
 8009530:	2d0c      	cmp	r5, #12
 8009532:	bf38      	it	cc
 8009534:	250c      	movcc	r5, #12
 8009536:	4629      	mov	r1, r5
 8009538:	4638      	mov	r0, r7
 800953a:	f7ff ffa5 	bl	8009488 <sbrk_aligned>
 800953e:	3001      	adds	r0, #1
 8009540:	d02b      	beq.n	800959a <_malloc_r+0xd2>
 8009542:	6823      	ldr	r3, [r4, #0]
 8009544:	442b      	add	r3, r5
 8009546:	6023      	str	r3, [r4, #0]
 8009548:	e00e      	b.n	8009568 <_malloc_r+0xa0>
 800954a:	6822      	ldr	r2, [r4, #0]
 800954c:	1b52      	subs	r2, r2, r5
 800954e:	d41e      	bmi.n	800958e <_malloc_r+0xc6>
 8009550:	2a0b      	cmp	r2, #11
 8009552:	d916      	bls.n	8009582 <_malloc_r+0xba>
 8009554:	1961      	adds	r1, r4, r5
 8009556:	42a3      	cmp	r3, r4
 8009558:	6025      	str	r5, [r4, #0]
 800955a:	bf18      	it	ne
 800955c:	6059      	strne	r1, [r3, #4]
 800955e:	6863      	ldr	r3, [r4, #4]
 8009560:	bf08      	it	eq
 8009562:	6031      	streq	r1, [r6, #0]
 8009564:	5162      	str	r2, [r4, r5]
 8009566:	604b      	str	r3, [r1, #4]
 8009568:	4638      	mov	r0, r7
 800956a:	f104 060b 	add.w	r6, r4, #11
 800956e:	f000 f9eb 	bl	8009948 <__malloc_unlock>
 8009572:	f026 0607 	bic.w	r6, r6, #7
 8009576:	1d23      	adds	r3, r4, #4
 8009578:	1af2      	subs	r2, r6, r3
 800957a:	d0b6      	beq.n	80094ea <_malloc_r+0x22>
 800957c:	1b9b      	subs	r3, r3, r6
 800957e:	50a3      	str	r3, [r4, r2]
 8009580:	e7b3      	b.n	80094ea <_malloc_r+0x22>
 8009582:	6862      	ldr	r2, [r4, #4]
 8009584:	42a3      	cmp	r3, r4
 8009586:	bf0c      	ite	eq
 8009588:	6032      	streq	r2, [r6, #0]
 800958a:	605a      	strne	r2, [r3, #4]
 800958c:	e7ec      	b.n	8009568 <_malloc_r+0xa0>
 800958e:	4623      	mov	r3, r4
 8009590:	6864      	ldr	r4, [r4, #4]
 8009592:	e7b2      	b.n	80094fa <_malloc_r+0x32>
 8009594:	4634      	mov	r4, r6
 8009596:	6876      	ldr	r6, [r6, #4]
 8009598:	e7b9      	b.n	800950e <_malloc_r+0x46>
 800959a:	230c      	movs	r3, #12
 800959c:	603b      	str	r3, [r7, #0]
 800959e:	4638      	mov	r0, r7
 80095a0:	f000 f9d2 	bl	8009948 <__malloc_unlock>
 80095a4:	e7a1      	b.n	80094ea <_malloc_r+0x22>
 80095a6:	6025      	str	r5, [r4, #0]
 80095a8:	e7de      	b.n	8009568 <_malloc_r+0xa0>
 80095aa:	bf00      	nop
 80095ac:	200020a4 	.word	0x200020a4

080095b0 <__ssputs_r>:
 80095b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095b4:	688e      	ldr	r6, [r1, #8]
 80095b6:	429e      	cmp	r6, r3
 80095b8:	4682      	mov	sl, r0
 80095ba:	460c      	mov	r4, r1
 80095bc:	4690      	mov	r8, r2
 80095be:	461f      	mov	r7, r3
 80095c0:	d838      	bhi.n	8009634 <__ssputs_r+0x84>
 80095c2:	898a      	ldrh	r2, [r1, #12]
 80095c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80095c8:	d032      	beq.n	8009630 <__ssputs_r+0x80>
 80095ca:	6825      	ldr	r5, [r4, #0]
 80095cc:	6909      	ldr	r1, [r1, #16]
 80095ce:	eba5 0901 	sub.w	r9, r5, r1
 80095d2:	6965      	ldr	r5, [r4, #20]
 80095d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095dc:	3301      	adds	r3, #1
 80095de:	444b      	add	r3, r9
 80095e0:	106d      	asrs	r5, r5, #1
 80095e2:	429d      	cmp	r5, r3
 80095e4:	bf38      	it	cc
 80095e6:	461d      	movcc	r5, r3
 80095e8:	0553      	lsls	r3, r2, #21
 80095ea:	d531      	bpl.n	8009650 <__ssputs_r+0xa0>
 80095ec:	4629      	mov	r1, r5
 80095ee:	f7ff ff6b 	bl	80094c8 <_malloc_r>
 80095f2:	4606      	mov	r6, r0
 80095f4:	b950      	cbnz	r0, 800960c <__ssputs_r+0x5c>
 80095f6:	230c      	movs	r3, #12
 80095f8:	f8ca 3000 	str.w	r3, [sl]
 80095fc:	89a3      	ldrh	r3, [r4, #12]
 80095fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009602:	81a3      	strh	r3, [r4, #12]
 8009604:	f04f 30ff 	mov.w	r0, #4294967295
 8009608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800960c:	6921      	ldr	r1, [r4, #16]
 800960e:	464a      	mov	r2, r9
 8009610:	f7fc fa90 	bl	8005b34 <memcpy>
 8009614:	89a3      	ldrh	r3, [r4, #12]
 8009616:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800961a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800961e:	81a3      	strh	r3, [r4, #12]
 8009620:	6126      	str	r6, [r4, #16]
 8009622:	6165      	str	r5, [r4, #20]
 8009624:	444e      	add	r6, r9
 8009626:	eba5 0509 	sub.w	r5, r5, r9
 800962a:	6026      	str	r6, [r4, #0]
 800962c:	60a5      	str	r5, [r4, #8]
 800962e:	463e      	mov	r6, r7
 8009630:	42be      	cmp	r6, r7
 8009632:	d900      	bls.n	8009636 <__ssputs_r+0x86>
 8009634:	463e      	mov	r6, r7
 8009636:	6820      	ldr	r0, [r4, #0]
 8009638:	4632      	mov	r2, r6
 800963a:	4641      	mov	r1, r8
 800963c:	f7fc fa88 	bl	8005b50 <memmove>
 8009640:	68a3      	ldr	r3, [r4, #8]
 8009642:	1b9b      	subs	r3, r3, r6
 8009644:	60a3      	str	r3, [r4, #8]
 8009646:	6823      	ldr	r3, [r4, #0]
 8009648:	4433      	add	r3, r6
 800964a:	6023      	str	r3, [r4, #0]
 800964c:	2000      	movs	r0, #0
 800964e:	e7db      	b.n	8009608 <__ssputs_r+0x58>
 8009650:	462a      	mov	r2, r5
 8009652:	f000 f97f 	bl	8009954 <_realloc_r>
 8009656:	4606      	mov	r6, r0
 8009658:	2800      	cmp	r0, #0
 800965a:	d1e1      	bne.n	8009620 <__ssputs_r+0x70>
 800965c:	6921      	ldr	r1, [r4, #16]
 800965e:	4650      	mov	r0, sl
 8009660:	f7ff fec6 	bl	80093f0 <_free_r>
 8009664:	e7c7      	b.n	80095f6 <__ssputs_r+0x46>
	...

08009668 <_svfiprintf_r>:
 8009668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800966c:	4698      	mov	r8, r3
 800966e:	898b      	ldrh	r3, [r1, #12]
 8009670:	061b      	lsls	r3, r3, #24
 8009672:	b09d      	sub	sp, #116	; 0x74
 8009674:	4607      	mov	r7, r0
 8009676:	460d      	mov	r5, r1
 8009678:	4614      	mov	r4, r2
 800967a:	d50e      	bpl.n	800969a <_svfiprintf_r+0x32>
 800967c:	690b      	ldr	r3, [r1, #16]
 800967e:	b963      	cbnz	r3, 800969a <_svfiprintf_r+0x32>
 8009680:	2140      	movs	r1, #64	; 0x40
 8009682:	f7ff ff21 	bl	80094c8 <_malloc_r>
 8009686:	6028      	str	r0, [r5, #0]
 8009688:	6128      	str	r0, [r5, #16]
 800968a:	b920      	cbnz	r0, 8009696 <_svfiprintf_r+0x2e>
 800968c:	230c      	movs	r3, #12
 800968e:	603b      	str	r3, [r7, #0]
 8009690:	f04f 30ff 	mov.w	r0, #4294967295
 8009694:	e0d1      	b.n	800983a <_svfiprintf_r+0x1d2>
 8009696:	2340      	movs	r3, #64	; 0x40
 8009698:	616b      	str	r3, [r5, #20]
 800969a:	2300      	movs	r3, #0
 800969c:	9309      	str	r3, [sp, #36]	; 0x24
 800969e:	2320      	movs	r3, #32
 80096a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80096a8:	2330      	movs	r3, #48	; 0x30
 80096aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009854 <_svfiprintf_r+0x1ec>
 80096ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096b2:	f04f 0901 	mov.w	r9, #1
 80096b6:	4623      	mov	r3, r4
 80096b8:	469a      	mov	sl, r3
 80096ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096be:	b10a      	cbz	r2, 80096c4 <_svfiprintf_r+0x5c>
 80096c0:	2a25      	cmp	r2, #37	; 0x25
 80096c2:	d1f9      	bne.n	80096b8 <_svfiprintf_r+0x50>
 80096c4:	ebba 0b04 	subs.w	fp, sl, r4
 80096c8:	d00b      	beq.n	80096e2 <_svfiprintf_r+0x7a>
 80096ca:	465b      	mov	r3, fp
 80096cc:	4622      	mov	r2, r4
 80096ce:	4629      	mov	r1, r5
 80096d0:	4638      	mov	r0, r7
 80096d2:	f7ff ff6d 	bl	80095b0 <__ssputs_r>
 80096d6:	3001      	adds	r0, #1
 80096d8:	f000 80aa 	beq.w	8009830 <_svfiprintf_r+0x1c8>
 80096dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096de:	445a      	add	r2, fp
 80096e0:	9209      	str	r2, [sp, #36]	; 0x24
 80096e2:	f89a 3000 	ldrb.w	r3, [sl]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	f000 80a2 	beq.w	8009830 <_svfiprintf_r+0x1c8>
 80096ec:	2300      	movs	r3, #0
 80096ee:	f04f 32ff 	mov.w	r2, #4294967295
 80096f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096f6:	f10a 0a01 	add.w	sl, sl, #1
 80096fa:	9304      	str	r3, [sp, #16]
 80096fc:	9307      	str	r3, [sp, #28]
 80096fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009702:	931a      	str	r3, [sp, #104]	; 0x68
 8009704:	4654      	mov	r4, sl
 8009706:	2205      	movs	r2, #5
 8009708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800970c:	4851      	ldr	r0, [pc, #324]	; (8009854 <_svfiprintf_r+0x1ec>)
 800970e:	f7f6 fd3f 	bl	8000190 <memchr>
 8009712:	9a04      	ldr	r2, [sp, #16]
 8009714:	b9d8      	cbnz	r0, 800974e <_svfiprintf_r+0xe6>
 8009716:	06d0      	lsls	r0, r2, #27
 8009718:	bf44      	itt	mi
 800971a:	2320      	movmi	r3, #32
 800971c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009720:	0711      	lsls	r1, r2, #28
 8009722:	bf44      	itt	mi
 8009724:	232b      	movmi	r3, #43	; 0x2b
 8009726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800972a:	f89a 3000 	ldrb.w	r3, [sl]
 800972e:	2b2a      	cmp	r3, #42	; 0x2a
 8009730:	d015      	beq.n	800975e <_svfiprintf_r+0xf6>
 8009732:	9a07      	ldr	r2, [sp, #28]
 8009734:	4654      	mov	r4, sl
 8009736:	2000      	movs	r0, #0
 8009738:	f04f 0c0a 	mov.w	ip, #10
 800973c:	4621      	mov	r1, r4
 800973e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009742:	3b30      	subs	r3, #48	; 0x30
 8009744:	2b09      	cmp	r3, #9
 8009746:	d94e      	bls.n	80097e6 <_svfiprintf_r+0x17e>
 8009748:	b1b0      	cbz	r0, 8009778 <_svfiprintf_r+0x110>
 800974a:	9207      	str	r2, [sp, #28]
 800974c:	e014      	b.n	8009778 <_svfiprintf_r+0x110>
 800974e:	eba0 0308 	sub.w	r3, r0, r8
 8009752:	fa09 f303 	lsl.w	r3, r9, r3
 8009756:	4313      	orrs	r3, r2
 8009758:	9304      	str	r3, [sp, #16]
 800975a:	46a2      	mov	sl, r4
 800975c:	e7d2      	b.n	8009704 <_svfiprintf_r+0x9c>
 800975e:	9b03      	ldr	r3, [sp, #12]
 8009760:	1d19      	adds	r1, r3, #4
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	9103      	str	r1, [sp, #12]
 8009766:	2b00      	cmp	r3, #0
 8009768:	bfbb      	ittet	lt
 800976a:	425b      	neglt	r3, r3
 800976c:	f042 0202 	orrlt.w	r2, r2, #2
 8009770:	9307      	strge	r3, [sp, #28]
 8009772:	9307      	strlt	r3, [sp, #28]
 8009774:	bfb8      	it	lt
 8009776:	9204      	strlt	r2, [sp, #16]
 8009778:	7823      	ldrb	r3, [r4, #0]
 800977a:	2b2e      	cmp	r3, #46	; 0x2e
 800977c:	d10c      	bne.n	8009798 <_svfiprintf_r+0x130>
 800977e:	7863      	ldrb	r3, [r4, #1]
 8009780:	2b2a      	cmp	r3, #42	; 0x2a
 8009782:	d135      	bne.n	80097f0 <_svfiprintf_r+0x188>
 8009784:	9b03      	ldr	r3, [sp, #12]
 8009786:	1d1a      	adds	r2, r3, #4
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	9203      	str	r2, [sp, #12]
 800978c:	2b00      	cmp	r3, #0
 800978e:	bfb8      	it	lt
 8009790:	f04f 33ff 	movlt.w	r3, #4294967295
 8009794:	3402      	adds	r4, #2
 8009796:	9305      	str	r3, [sp, #20]
 8009798:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009864 <_svfiprintf_r+0x1fc>
 800979c:	7821      	ldrb	r1, [r4, #0]
 800979e:	2203      	movs	r2, #3
 80097a0:	4650      	mov	r0, sl
 80097a2:	f7f6 fcf5 	bl	8000190 <memchr>
 80097a6:	b140      	cbz	r0, 80097ba <_svfiprintf_r+0x152>
 80097a8:	2340      	movs	r3, #64	; 0x40
 80097aa:	eba0 000a 	sub.w	r0, r0, sl
 80097ae:	fa03 f000 	lsl.w	r0, r3, r0
 80097b2:	9b04      	ldr	r3, [sp, #16]
 80097b4:	4303      	orrs	r3, r0
 80097b6:	3401      	adds	r4, #1
 80097b8:	9304      	str	r3, [sp, #16]
 80097ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097be:	4826      	ldr	r0, [pc, #152]	; (8009858 <_svfiprintf_r+0x1f0>)
 80097c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097c4:	2206      	movs	r2, #6
 80097c6:	f7f6 fce3 	bl	8000190 <memchr>
 80097ca:	2800      	cmp	r0, #0
 80097cc:	d038      	beq.n	8009840 <_svfiprintf_r+0x1d8>
 80097ce:	4b23      	ldr	r3, [pc, #140]	; (800985c <_svfiprintf_r+0x1f4>)
 80097d0:	bb1b      	cbnz	r3, 800981a <_svfiprintf_r+0x1b2>
 80097d2:	9b03      	ldr	r3, [sp, #12]
 80097d4:	3307      	adds	r3, #7
 80097d6:	f023 0307 	bic.w	r3, r3, #7
 80097da:	3308      	adds	r3, #8
 80097dc:	9303      	str	r3, [sp, #12]
 80097de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097e0:	4433      	add	r3, r6
 80097e2:	9309      	str	r3, [sp, #36]	; 0x24
 80097e4:	e767      	b.n	80096b6 <_svfiprintf_r+0x4e>
 80097e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80097ea:	460c      	mov	r4, r1
 80097ec:	2001      	movs	r0, #1
 80097ee:	e7a5      	b.n	800973c <_svfiprintf_r+0xd4>
 80097f0:	2300      	movs	r3, #0
 80097f2:	3401      	adds	r4, #1
 80097f4:	9305      	str	r3, [sp, #20]
 80097f6:	4619      	mov	r1, r3
 80097f8:	f04f 0c0a 	mov.w	ip, #10
 80097fc:	4620      	mov	r0, r4
 80097fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009802:	3a30      	subs	r2, #48	; 0x30
 8009804:	2a09      	cmp	r2, #9
 8009806:	d903      	bls.n	8009810 <_svfiprintf_r+0x1a8>
 8009808:	2b00      	cmp	r3, #0
 800980a:	d0c5      	beq.n	8009798 <_svfiprintf_r+0x130>
 800980c:	9105      	str	r1, [sp, #20]
 800980e:	e7c3      	b.n	8009798 <_svfiprintf_r+0x130>
 8009810:	fb0c 2101 	mla	r1, ip, r1, r2
 8009814:	4604      	mov	r4, r0
 8009816:	2301      	movs	r3, #1
 8009818:	e7f0      	b.n	80097fc <_svfiprintf_r+0x194>
 800981a:	ab03      	add	r3, sp, #12
 800981c:	9300      	str	r3, [sp, #0]
 800981e:	462a      	mov	r2, r5
 8009820:	4b0f      	ldr	r3, [pc, #60]	; (8009860 <_svfiprintf_r+0x1f8>)
 8009822:	a904      	add	r1, sp, #16
 8009824:	4638      	mov	r0, r7
 8009826:	f7fc fa55 	bl	8005cd4 <_printf_float>
 800982a:	1c42      	adds	r2, r0, #1
 800982c:	4606      	mov	r6, r0
 800982e:	d1d6      	bne.n	80097de <_svfiprintf_r+0x176>
 8009830:	89ab      	ldrh	r3, [r5, #12]
 8009832:	065b      	lsls	r3, r3, #25
 8009834:	f53f af2c 	bmi.w	8009690 <_svfiprintf_r+0x28>
 8009838:	9809      	ldr	r0, [sp, #36]	; 0x24
 800983a:	b01d      	add	sp, #116	; 0x74
 800983c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009840:	ab03      	add	r3, sp, #12
 8009842:	9300      	str	r3, [sp, #0]
 8009844:	462a      	mov	r2, r5
 8009846:	4b06      	ldr	r3, [pc, #24]	; (8009860 <_svfiprintf_r+0x1f8>)
 8009848:	a904      	add	r1, sp, #16
 800984a:	4638      	mov	r0, r7
 800984c:	f7fc fce6 	bl	800621c <_printf_i>
 8009850:	e7eb      	b.n	800982a <_svfiprintf_r+0x1c2>
 8009852:	bf00      	nop
 8009854:	0800a94c 	.word	0x0800a94c
 8009858:	0800a956 	.word	0x0800a956
 800985c:	08005cd5 	.word	0x08005cd5
 8009860:	080095b1 	.word	0x080095b1
 8009864:	0800a952 	.word	0x0800a952

08009868 <nan>:
 8009868:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009870 <nan+0x8>
 800986c:	4770      	bx	lr
 800986e:	bf00      	nop
 8009870:	00000000 	.word	0x00000000
 8009874:	7ff80000 	.word	0x7ff80000

08009878 <_sbrk_r>:
 8009878:	b538      	push	{r3, r4, r5, lr}
 800987a:	4d06      	ldr	r5, [pc, #24]	; (8009894 <_sbrk_r+0x1c>)
 800987c:	2300      	movs	r3, #0
 800987e:	4604      	mov	r4, r0
 8009880:	4608      	mov	r0, r1
 8009882:	602b      	str	r3, [r5, #0]
 8009884:	f7f7 fcfc 	bl	8001280 <_sbrk>
 8009888:	1c43      	adds	r3, r0, #1
 800988a:	d102      	bne.n	8009892 <_sbrk_r+0x1a>
 800988c:	682b      	ldr	r3, [r5, #0]
 800988e:	b103      	cbz	r3, 8009892 <_sbrk_r+0x1a>
 8009890:	6023      	str	r3, [r4, #0]
 8009892:	bd38      	pop	{r3, r4, r5, pc}
 8009894:	200020ac 	.word	0x200020ac

08009898 <strncmp>:
 8009898:	b510      	push	{r4, lr}
 800989a:	b17a      	cbz	r2, 80098bc <strncmp+0x24>
 800989c:	4603      	mov	r3, r0
 800989e:	3901      	subs	r1, #1
 80098a0:	1884      	adds	r4, r0, r2
 80098a2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80098a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80098aa:	4290      	cmp	r0, r2
 80098ac:	d101      	bne.n	80098b2 <strncmp+0x1a>
 80098ae:	42a3      	cmp	r3, r4
 80098b0:	d101      	bne.n	80098b6 <strncmp+0x1e>
 80098b2:	1a80      	subs	r0, r0, r2
 80098b4:	bd10      	pop	{r4, pc}
 80098b6:	2800      	cmp	r0, #0
 80098b8:	d1f3      	bne.n	80098a2 <strncmp+0xa>
 80098ba:	e7fa      	b.n	80098b2 <strncmp+0x1a>
 80098bc:	4610      	mov	r0, r2
 80098be:	e7f9      	b.n	80098b4 <strncmp+0x1c>

080098c0 <__ascii_wctomb>:
 80098c0:	b149      	cbz	r1, 80098d6 <__ascii_wctomb+0x16>
 80098c2:	2aff      	cmp	r2, #255	; 0xff
 80098c4:	bf85      	ittet	hi
 80098c6:	238a      	movhi	r3, #138	; 0x8a
 80098c8:	6003      	strhi	r3, [r0, #0]
 80098ca:	700a      	strbls	r2, [r1, #0]
 80098cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80098d0:	bf98      	it	ls
 80098d2:	2001      	movls	r0, #1
 80098d4:	4770      	bx	lr
 80098d6:	4608      	mov	r0, r1
 80098d8:	4770      	bx	lr
	...

080098dc <__assert_func>:
 80098dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098de:	4614      	mov	r4, r2
 80098e0:	461a      	mov	r2, r3
 80098e2:	4b09      	ldr	r3, [pc, #36]	; (8009908 <__assert_func+0x2c>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4605      	mov	r5, r0
 80098e8:	68d8      	ldr	r0, [r3, #12]
 80098ea:	b14c      	cbz	r4, 8009900 <__assert_func+0x24>
 80098ec:	4b07      	ldr	r3, [pc, #28]	; (800990c <__assert_func+0x30>)
 80098ee:	9100      	str	r1, [sp, #0]
 80098f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80098f4:	4906      	ldr	r1, [pc, #24]	; (8009910 <__assert_func+0x34>)
 80098f6:	462b      	mov	r3, r5
 80098f8:	f000 f80e 	bl	8009918 <fiprintf>
 80098fc:	f000 fa72 	bl	8009de4 <abort>
 8009900:	4b04      	ldr	r3, [pc, #16]	; (8009914 <__assert_func+0x38>)
 8009902:	461c      	mov	r4, r3
 8009904:	e7f3      	b.n	80098ee <__assert_func+0x12>
 8009906:	bf00      	nop
 8009908:	20000108 	.word	0x20000108
 800990c:	0800a95d 	.word	0x0800a95d
 8009910:	0800a96a 	.word	0x0800a96a
 8009914:	0800a998 	.word	0x0800a998

08009918 <fiprintf>:
 8009918:	b40e      	push	{r1, r2, r3}
 800991a:	b503      	push	{r0, r1, lr}
 800991c:	4601      	mov	r1, r0
 800991e:	ab03      	add	r3, sp, #12
 8009920:	4805      	ldr	r0, [pc, #20]	; (8009938 <fiprintf+0x20>)
 8009922:	f853 2b04 	ldr.w	r2, [r3], #4
 8009926:	6800      	ldr	r0, [r0, #0]
 8009928:	9301      	str	r3, [sp, #4]
 800992a:	f000 f86b 	bl	8009a04 <_vfiprintf_r>
 800992e:	b002      	add	sp, #8
 8009930:	f85d eb04 	ldr.w	lr, [sp], #4
 8009934:	b003      	add	sp, #12
 8009936:	4770      	bx	lr
 8009938:	20000108 	.word	0x20000108

0800993c <__malloc_lock>:
 800993c:	4801      	ldr	r0, [pc, #4]	; (8009944 <__malloc_lock+0x8>)
 800993e:	f000 bc11 	b.w	800a164 <__retarget_lock_acquire_recursive>
 8009942:	bf00      	nop
 8009944:	200020b0 	.word	0x200020b0

08009948 <__malloc_unlock>:
 8009948:	4801      	ldr	r0, [pc, #4]	; (8009950 <__malloc_unlock+0x8>)
 800994a:	f000 bc0c 	b.w	800a166 <__retarget_lock_release_recursive>
 800994e:	bf00      	nop
 8009950:	200020b0 	.word	0x200020b0

08009954 <_realloc_r>:
 8009954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009958:	4680      	mov	r8, r0
 800995a:	4614      	mov	r4, r2
 800995c:	460e      	mov	r6, r1
 800995e:	b921      	cbnz	r1, 800996a <_realloc_r+0x16>
 8009960:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009964:	4611      	mov	r1, r2
 8009966:	f7ff bdaf 	b.w	80094c8 <_malloc_r>
 800996a:	b92a      	cbnz	r2, 8009978 <_realloc_r+0x24>
 800996c:	f7ff fd40 	bl	80093f0 <_free_r>
 8009970:	4625      	mov	r5, r4
 8009972:	4628      	mov	r0, r5
 8009974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009978:	f000 fc5c 	bl	800a234 <_malloc_usable_size_r>
 800997c:	4284      	cmp	r4, r0
 800997e:	4607      	mov	r7, r0
 8009980:	d802      	bhi.n	8009988 <_realloc_r+0x34>
 8009982:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009986:	d812      	bhi.n	80099ae <_realloc_r+0x5a>
 8009988:	4621      	mov	r1, r4
 800998a:	4640      	mov	r0, r8
 800998c:	f7ff fd9c 	bl	80094c8 <_malloc_r>
 8009990:	4605      	mov	r5, r0
 8009992:	2800      	cmp	r0, #0
 8009994:	d0ed      	beq.n	8009972 <_realloc_r+0x1e>
 8009996:	42bc      	cmp	r4, r7
 8009998:	4622      	mov	r2, r4
 800999a:	4631      	mov	r1, r6
 800999c:	bf28      	it	cs
 800999e:	463a      	movcs	r2, r7
 80099a0:	f7fc f8c8 	bl	8005b34 <memcpy>
 80099a4:	4631      	mov	r1, r6
 80099a6:	4640      	mov	r0, r8
 80099a8:	f7ff fd22 	bl	80093f0 <_free_r>
 80099ac:	e7e1      	b.n	8009972 <_realloc_r+0x1e>
 80099ae:	4635      	mov	r5, r6
 80099b0:	e7df      	b.n	8009972 <_realloc_r+0x1e>

080099b2 <__sfputc_r>:
 80099b2:	6893      	ldr	r3, [r2, #8]
 80099b4:	3b01      	subs	r3, #1
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	b410      	push	{r4}
 80099ba:	6093      	str	r3, [r2, #8]
 80099bc:	da08      	bge.n	80099d0 <__sfputc_r+0x1e>
 80099be:	6994      	ldr	r4, [r2, #24]
 80099c0:	42a3      	cmp	r3, r4
 80099c2:	db01      	blt.n	80099c8 <__sfputc_r+0x16>
 80099c4:	290a      	cmp	r1, #10
 80099c6:	d103      	bne.n	80099d0 <__sfputc_r+0x1e>
 80099c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099cc:	f000 b94a 	b.w	8009c64 <__swbuf_r>
 80099d0:	6813      	ldr	r3, [r2, #0]
 80099d2:	1c58      	adds	r0, r3, #1
 80099d4:	6010      	str	r0, [r2, #0]
 80099d6:	7019      	strb	r1, [r3, #0]
 80099d8:	4608      	mov	r0, r1
 80099da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <__sfputs_r>:
 80099e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099e2:	4606      	mov	r6, r0
 80099e4:	460f      	mov	r7, r1
 80099e6:	4614      	mov	r4, r2
 80099e8:	18d5      	adds	r5, r2, r3
 80099ea:	42ac      	cmp	r4, r5
 80099ec:	d101      	bne.n	80099f2 <__sfputs_r+0x12>
 80099ee:	2000      	movs	r0, #0
 80099f0:	e007      	b.n	8009a02 <__sfputs_r+0x22>
 80099f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099f6:	463a      	mov	r2, r7
 80099f8:	4630      	mov	r0, r6
 80099fa:	f7ff ffda 	bl	80099b2 <__sfputc_r>
 80099fe:	1c43      	adds	r3, r0, #1
 8009a00:	d1f3      	bne.n	80099ea <__sfputs_r+0xa>
 8009a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009a04 <_vfiprintf_r>:
 8009a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a08:	460d      	mov	r5, r1
 8009a0a:	b09d      	sub	sp, #116	; 0x74
 8009a0c:	4614      	mov	r4, r2
 8009a0e:	4698      	mov	r8, r3
 8009a10:	4606      	mov	r6, r0
 8009a12:	b118      	cbz	r0, 8009a1c <_vfiprintf_r+0x18>
 8009a14:	6983      	ldr	r3, [r0, #24]
 8009a16:	b90b      	cbnz	r3, 8009a1c <_vfiprintf_r+0x18>
 8009a18:	f000 fb06 	bl	800a028 <__sinit>
 8009a1c:	4b89      	ldr	r3, [pc, #548]	; (8009c44 <_vfiprintf_r+0x240>)
 8009a1e:	429d      	cmp	r5, r3
 8009a20:	d11b      	bne.n	8009a5a <_vfiprintf_r+0x56>
 8009a22:	6875      	ldr	r5, [r6, #4]
 8009a24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a26:	07d9      	lsls	r1, r3, #31
 8009a28:	d405      	bmi.n	8009a36 <_vfiprintf_r+0x32>
 8009a2a:	89ab      	ldrh	r3, [r5, #12]
 8009a2c:	059a      	lsls	r2, r3, #22
 8009a2e:	d402      	bmi.n	8009a36 <_vfiprintf_r+0x32>
 8009a30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a32:	f000 fb97 	bl	800a164 <__retarget_lock_acquire_recursive>
 8009a36:	89ab      	ldrh	r3, [r5, #12]
 8009a38:	071b      	lsls	r3, r3, #28
 8009a3a:	d501      	bpl.n	8009a40 <_vfiprintf_r+0x3c>
 8009a3c:	692b      	ldr	r3, [r5, #16]
 8009a3e:	b9eb      	cbnz	r3, 8009a7c <_vfiprintf_r+0x78>
 8009a40:	4629      	mov	r1, r5
 8009a42:	4630      	mov	r0, r6
 8009a44:	f000 f960 	bl	8009d08 <__swsetup_r>
 8009a48:	b1c0      	cbz	r0, 8009a7c <_vfiprintf_r+0x78>
 8009a4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a4c:	07dc      	lsls	r4, r3, #31
 8009a4e:	d50e      	bpl.n	8009a6e <_vfiprintf_r+0x6a>
 8009a50:	f04f 30ff 	mov.w	r0, #4294967295
 8009a54:	b01d      	add	sp, #116	; 0x74
 8009a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a5a:	4b7b      	ldr	r3, [pc, #492]	; (8009c48 <_vfiprintf_r+0x244>)
 8009a5c:	429d      	cmp	r5, r3
 8009a5e:	d101      	bne.n	8009a64 <_vfiprintf_r+0x60>
 8009a60:	68b5      	ldr	r5, [r6, #8]
 8009a62:	e7df      	b.n	8009a24 <_vfiprintf_r+0x20>
 8009a64:	4b79      	ldr	r3, [pc, #484]	; (8009c4c <_vfiprintf_r+0x248>)
 8009a66:	429d      	cmp	r5, r3
 8009a68:	bf08      	it	eq
 8009a6a:	68f5      	ldreq	r5, [r6, #12]
 8009a6c:	e7da      	b.n	8009a24 <_vfiprintf_r+0x20>
 8009a6e:	89ab      	ldrh	r3, [r5, #12]
 8009a70:	0598      	lsls	r0, r3, #22
 8009a72:	d4ed      	bmi.n	8009a50 <_vfiprintf_r+0x4c>
 8009a74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a76:	f000 fb76 	bl	800a166 <__retarget_lock_release_recursive>
 8009a7a:	e7e9      	b.n	8009a50 <_vfiprintf_r+0x4c>
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8009a80:	2320      	movs	r3, #32
 8009a82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a86:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a8a:	2330      	movs	r3, #48	; 0x30
 8009a8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009c50 <_vfiprintf_r+0x24c>
 8009a90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a94:	f04f 0901 	mov.w	r9, #1
 8009a98:	4623      	mov	r3, r4
 8009a9a:	469a      	mov	sl, r3
 8009a9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009aa0:	b10a      	cbz	r2, 8009aa6 <_vfiprintf_r+0xa2>
 8009aa2:	2a25      	cmp	r2, #37	; 0x25
 8009aa4:	d1f9      	bne.n	8009a9a <_vfiprintf_r+0x96>
 8009aa6:	ebba 0b04 	subs.w	fp, sl, r4
 8009aaa:	d00b      	beq.n	8009ac4 <_vfiprintf_r+0xc0>
 8009aac:	465b      	mov	r3, fp
 8009aae:	4622      	mov	r2, r4
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	4630      	mov	r0, r6
 8009ab4:	f7ff ff94 	bl	80099e0 <__sfputs_r>
 8009ab8:	3001      	adds	r0, #1
 8009aba:	f000 80aa 	beq.w	8009c12 <_vfiprintf_r+0x20e>
 8009abe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ac0:	445a      	add	r2, fp
 8009ac2:	9209      	str	r2, [sp, #36]	; 0x24
 8009ac4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f000 80a2 	beq.w	8009c12 <_vfiprintf_r+0x20e>
 8009ace:	2300      	movs	r3, #0
 8009ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ad8:	f10a 0a01 	add.w	sl, sl, #1
 8009adc:	9304      	str	r3, [sp, #16]
 8009ade:	9307      	str	r3, [sp, #28]
 8009ae0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ae4:	931a      	str	r3, [sp, #104]	; 0x68
 8009ae6:	4654      	mov	r4, sl
 8009ae8:	2205      	movs	r2, #5
 8009aea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aee:	4858      	ldr	r0, [pc, #352]	; (8009c50 <_vfiprintf_r+0x24c>)
 8009af0:	f7f6 fb4e 	bl	8000190 <memchr>
 8009af4:	9a04      	ldr	r2, [sp, #16]
 8009af6:	b9d8      	cbnz	r0, 8009b30 <_vfiprintf_r+0x12c>
 8009af8:	06d1      	lsls	r1, r2, #27
 8009afa:	bf44      	itt	mi
 8009afc:	2320      	movmi	r3, #32
 8009afe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b02:	0713      	lsls	r3, r2, #28
 8009b04:	bf44      	itt	mi
 8009b06:	232b      	movmi	r3, #43	; 0x2b
 8009b08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b0c:	f89a 3000 	ldrb.w	r3, [sl]
 8009b10:	2b2a      	cmp	r3, #42	; 0x2a
 8009b12:	d015      	beq.n	8009b40 <_vfiprintf_r+0x13c>
 8009b14:	9a07      	ldr	r2, [sp, #28]
 8009b16:	4654      	mov	r4, sl
 8009b18:	2000      	movs	r0, #0
 8009b1a:	f04f 0c0a 	mov.w	ip, #10
 8009b1e:	4621      	mov	r1, r4
 8009b20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b24:	3b30      	subs	r3, #48	; 0x30
 8009b26:	2b09      	cmp	r3, #9
 8009b28:	d94e      	bls.n	8009bc8 <_vfiprintf_r+0x1c4>
 8009b2a:	b1b0      	cbz	r0, 8009b5a <_vfiprintf_r+0x156>
 8009b2c:	9207      	str	r2, [sp, #28]
 8009b2e:	e014      	b.n	8009b5a <_vfiprintf_r+0x156>
 8009b30:	eba0 0308 	sub.w	r3, r0, r8
 8009b34:	fa09 f303 	lsl.w	r3, r9, r3
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	9304      	str	r3, [sp, #16]
 8009b3c:	46a2      	mov	sl, r4
 8009b3e:	e7d2      	b.n	8009ae6 <_vfiprintf_r+0xe2>
 8009b40:	9b03      	ldr	r3, [sp, #12]
 8009b42:	1d19      	adds	r1, r3, #4
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	9103      	str	r1, [sp, #12]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	bfbb      	ittet	lt
 8009b4c:	425b      	neglt	r3, r3
 8009b4e:	f042 0202 	orrlt.w	r2, r2, #2
 8009b52:	9307      	strge	r3, [sp, #28]
 8009b54:	9307      	strlt	r3, [sp, #28]
 8009b56:	bfb8      	it	lt
 8009b58:	9204      	strlt	r2, [sp, #16]
 8009b5a:	7823      	ldrb	r3, [r4, #0]
 8009b5c:	2b2e      	cmp	r3, #46	; 0x2e
 8009b5e:	d10c      	bne.n	8009b7a <_vfiprintf_r+0x176>
 8009b60:	7863      	ldrb	r3, [r4, #1]
 8009b62:	2b2a      	cmp	r3, #42	; 0x2a
 8009b64:	d135      	bne.n	8009bd2 <_vfiprintf_r+0x1ce>
 8009b66:	9b03      	ldr	r3, [sp, #12]
 8009b68:	1d1a      	adds	r2, r3, #4
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	9203      	str	r2, [sp, #12]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	bfb8      	it	lt
 8009b72:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b76:	3402      	adds	r4, #2
 8009b78:	9305      	str	r3, [sp, #20]
 8009b7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009c60 <_vfiprintf_r+0x25c>
 8009b7e:	7821      	ldrb	r1, [r4, #0]
 8009b80:	2203      	movs	r2, #3
 8009b82:	4650      	mov	r0, sl
 8009b84:	f7f6 fb04 	bl	8000190 <memchr>
 8009b88:	b140      	cbz	r0, 8009b9c <_vfiprintf_r+0x198>
 8009b8a:	2340      	movs	r3, #64	; 0x40
 8009b8c:	eba0 000a 	sub.w	r0, r0, sl
 8009b90:	fa03 f000 	lsl.w	r0, r3, r0
 8009b94:	9b04      	ldr	r3, [sp, #16]
 8009b96:	4303      	orrs	r3, r0
 8009b98:	3401      	adds	r4, #1
 8009b9a:	9304      	str	r3, [sp, #16]
 8009b9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ba0:	482c      	ldr	r0, [pc, #176]	; (8009c54 <_vfiprintf_r+0x250>)
 8009ba2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ba6:	2206      	movs	r2, #6
 8009ba8:	f7f6 faf2 	bl	8000190 <memchr>
 8009bac:	2800      	cmp	r0, #0
 8009bae:	d03f      	beq.n	8009c30 <_vfiprintf_r+0x22c>
 8009bb0:	4b29      	ldr	r3, [pc, #164]	; (8009c58 <_vfiprintf_r+0x254>)
 8009bb2:	bb1b      	cbnz	r3, 8009bfc <_vfiprintf_r+0x1f8>
 8009bb4:	9b03      	ldr	r3, [sp, #12]
 8009bb6:	3307      	adds	r3, #7
 8009bb8:	f023 0307 	bic.w	r3, r3, #7
 8009bbc:	3308      	adds	r3, #8
 8009bbe:	9303      	str	r3, [sp, #12]
 8009bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bc2:	443b      	add	r3, r7
 8009bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8009bc6:	e767      	b.n	8009a98 <_vfiprintf_r+0x94>
 8009bc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bcc:	460c      	mov	r4, r1
 8009bce:	2001      	movs	r0, #1
 8009bd0:	e7a5      	b.n	8009b1e <_vfiprintf_r+0x11a>
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	3401      	adds	r4, #1
 8009bd6:	9305      	str	r3, [sp, #20]
 8009bd8:	4619      	mov	r1, r3
 8009bda:	f04f 0c0a 	mov.w	ip, #10
 8009bde:	4620      	mov	r0, r4
 8009be0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009be4:	3a30      	subs	r2, #48	; 0x30
 8009be6:	2a09      	cmp	r2, #9
 8009be8:	d903      	bls.n	8009bf2 <_vfiprintf_r+0x1ee>
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d0c5      	beq.n	8009b7a <_vfiprintf_r+0x176>
 8009bee:	9105      	str	r1, [sp, #20]
 8009bf0:	e7c3      	b.n	8009b7a <_vfiprintf_r+0x176>
 8009bf2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bf6:	4604      	mov	r4, r0
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	e7f0      	b.n	8009bde <_vfiprintf_r+0x1da>
 8009bfc:	ab03      	add	r3, sp, #12
 8009bfe:	9300      	str	r3, [sp, #0]
 8009c00:	462a      	mov	r2, r5
 8009c02:	4b16      	ldr	r3, [pc, #88]	; (8009c5c <_vfiprintf_r+0x258>)
 8009c04:	a904      	add	r1, sp, #16
 8009c06:	4630      	mov	r0, r6
 8009c08:	f7fc f864 	bl	8005cd4 <_printf_float>
 8009c0c:	4607      	mov	r7, r0
 8009c0e:	1c78      	adds	r0, r7, #1
 8009c10:	d1d6      	bne.n	8009bc0 <_vfiprintf_r+0x1bc>
 8009c12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c14:	07d9      	lsls	r1, r3, #31
 8009c16:	d405      	bmi.n	8009c24 <_vfiprintf_r+0x220>
 8009c18:	89ab      	ldrh	r3, [r5, #12]
 8009c1a:	059a      	lsls	r2, r3, #22
 8009c1c:	d402      	bmi.n	8009c24 <_vfiprintf_r+0x220>
 8009c1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c20:	f000 faa1 	bl	800a166 <__retarget_lock_release_recursive>
 8009c24:	89ab      	ldrh	r3, [r5, #12]
 8009c26:	065b      	lsls	r3, r3, #25
 8009c28:	f53f af12 	bmi.w	8009a50 <_vfiprintf_r+0x4c>
 8009c2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c2e:	e711      	b.n	8009a54 <_vfiprintf_r+0x50>
 8009c30:	ab03      	add	r3, sp, #12
 8009c32:	9300      	str	r3, [sp, #0]
 8009c34:	462a      	mov	r2, r5
 8009c36:	4b09      	ldr	r3, [pc, #36]	; (8009c5c <_vfiprintf_r+0x258>)
 8009c38:	a904      	add	r1, sp, #16
 8009c3a:	4630      	mov	r0, r6
 8009c3c:	f7fc faee 	bl	800621c <_printf_i>
 8009c40:	e7e4      	b.n	8009c0c <_vfiprintf_r+0x208>
 8009c42:	bf00      	nop
 8009c44:	0800a9bc 	.word	0x0800a9bc
 8009c48:	0800a9dc 	.word	0x0800a9dc
 8009c4c:	0800a99c 	.word	0x0800a99c
 8009c50:	0800a94c 	.word	0x0800a94c
 8009c54:	0800a956 	.word	0x0800a956
 8009c58:	08005cd5 	.word	0x08005cd5
 8009c5c:	080099e1 	.word	0x080099e1
 8009c60:	0800a952 	.word	0x0800a952

08009c64 <__swbuf_r>:
 8009c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c66:	460e      	mov	r6, r1
 8009c68:	4614      	mov	r4, r2
 8009c6a:	4605      	mov	r5, r0
 8009c6c:	b118      	cbz	r0, 8009c76 <__swbuf_r+0x12>
 8009c6e:	6983      	ldr	r3, [r0, #24]
 8009c70:	b90b      	cbnz	r3, 8009c76 <__swbuf_r+0x12>
 8009c72:	f000 f9d9 	bl	800a028 <__sinit>
 8009c76:	4b21      	ldr	r3, [pc, #132]	; (8009cfc <__swbuf_r+0x98>)
 8009c78:	429c      	cmp	r4, r3
 8009c7a:	d12b      	bne.n	8009cd4 <__swbuf_r+0x70>
 8009c7c:	686c      	ldr	r4, [r5, #4]
 8009c7e:	69a3      	ldr	r3, [r4, #24]
 8009c80:	60a3      	str	r3, [r4, #8]
 8009c82:	89a3      	ldrh	r3, [r4, #12]
 8009c84:	071a      	lsls	r2, r3, #28
 8009c86:	d52f      	bpl.n	8009ce8 <__swbuf_r+0x84>
 8009c88:	6923      	ldr	r3, [r4, #16]
 8009c8a:	b36b      	cbz	r3, 8009ce8 <__swbuf_r+0x84>
 8009c8c:	6923      	ldr	r3, [r4, #16]
 8009c8e:	6820      	ldr	r0, [r4, #0]
 8009c90:	1ac0      	subs	r0, r0, r3
 8009c92:	6963      	ldr	r3, [r4, #20]
 8009c94:	b2f6      	uxtb	r6, r6
 8009c96:	4283      	cmp	r3, r0
 8009c98:	4637      	mov	r7, r6
 8009c9a:	dc04      	bgt.n	8009ca6 <__swbuf_r+0x42>
 8009c9c:	4621      	mov	r1, r4
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	f000 f92e 	bl	8009f00 <_fflush_r>
 8009ca4:	bb30      	cbnz	r0, 8009cf4 <__swbuf_r+0x90>
 8009ca6:	68a3      	ldr	r3, [r4, #8]
 8009ca8:	3b01      	subs	r3, #1
 8009caa:	60a3      	str	r3, [r4, #8]
 8009cac:	6823      	ldr	r3, [r4, #0]
 8009cae:	1c5a      	adds	r2, r3, #1
 8009cb0:	6022      	str	r2, [r4, #0]
 8009cb2:	701e      	strb	r6, [r3, #0]
 8009cb4:	6963      	ldr	r3, [r4, #20]
 8009cb6:	3001      	adds	r0, #1
 8009cb8:	4283      	cmp	r3, r0
 8009cba:	d004      	beq.n	8009cc6 <__swbuf_r+0x62>
 8009cbc:	89a3      	ldrh	r3, [r4, #12]
 8009cbe:	07db      	lsls	r3, r3, #31
 8009cc0:	d506      	bpl.n	8009cd0 <__swbuf_r+0x6c>
 8009cc2:	2e0a      	cmp	r6, #10
 8009cc4:	d104      	bne.n	8009cd0 <__swbuf_r+0x6c>
 8009cc6:	4621      	mov	r1, r4
 8009cc8:	4628      	mov	r0, r5
 8009cca:	f000 f919 	bl	8009f00 <_fflush_r>
 8009cce:	b988      	cbnz	r0, 8009cf4 <__swbuf_r+0x90>
 8009cd0:	4638      	mov	r0, r7
 8009cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cd4:	4b0a      	ldr	r3, [pc, #40]	; (8009d00 <__swbuf_r+0x9c>)
 8009cd6:	429c      	cmp	r4, r3
 8009cd8:	d101      	bne.n	8009cde <__swbuf_r+0x7a>
 8009cda:	68ac      	ldr	r4, [r5, #8]
 8009cdc:	e7cf      	b.n	8009c7e <__swbuf_r+0x1a>
 8009cde:	4b09      	ldr	r3, [pc, #36]	; (8009d04 <__swbuf_r+0xa0>)
 8009ce0:	429c      	cmp	r4, r3
 8009ce2:	bf08      	it	eq
 8009ce4:	68ec      	ldreq	r4, [r5, #12]
 8009ce6:	e7ca      	b.n	8009c7e <__swbuf_r+0x1a>
 8009ce8:	4621      	mov	r1, r4
 8009cea:	4628      	mov	r0, r5
 8009cec:	f000 f80c 	bl	8009d08 <__swsetup_r>
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	d0cb      	beq.n	8009c8c <__swbuf_r+0x28>
 8009cf4:	f04f 37ff 	mov.w	r7, #4294967295
 8009cf8:	e7ea      	b.n	8009cd0 <__swbuf_r+0x6c>
 8009cfa:	bf00      	nop
 8009cfc:	0800a9bc 	.word	0x0800a9bc
 8009d00:	0800a9dc 	.word	0x0800a9dc
 8009d04:	0800a99c 	.word	0x0800a99c

08009d08 <__swsetup_r>:
 8009d08:	4b32      	ldr	r3, [pc, #200]	; (8009dd4 <__swsetup_r+0xcc>)
 8009d0a:	b570      	push	{r4, r5, r6, lr}
 8009d0c:	681d      	ldr	r5, [r3, #0]
 8009d0e:	4606      	mov	r6, r0
 8009d10:	460c      	mov	r4, r1
 8009d12:	b125      	cbz	r5, 8009d1e <__swsetup_r+0x16>
 8009d14:	69ab      	ldr	r3, [r5, #24]
 8009d16:	b913      	cbnz	r3, 8009d1e <__swsetup_r+0x16>
 8009d18:	4628      	mov	r0, r5
 8009d1a:	f000 f985 	bl	800a028 <__sinit>
 8009d1e:	4b2e      	ldr	r3, [pc, #184]	; (8009dd8 <__swsetup_r+0xd0>)
 8009d20:	429c      	cmp	r4, r3
 8009d22:	d10f      	bne.n	8009d44 <__swsetup_r+0x3c>
 8009d24:	686c      	ldr	r4, [r5, #4]
 8009d26:	89a3      	ldrh	r3, [r4, #12]
 8009d28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d2c:	0719      	lsls	r1, r3, #28
 8009d2e:	d42c      	bmi.n	8009d8a <__swsetup_r+0x82>
 8009d30:	06dd      	lsls	r5, r3, #27
 8009d32:	d411      	bmi.n	8009d58 <__swsetup_r+0x50>
 8009d34:	2309      	movs	r3, #9
 8009d36:	6033      	str	r3, [r6, #0]
 8009d38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d3c:	81a3      	strh	r3, [r4, #12]
 8009d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d42:	e03e      	b.n	8009dc2 <__swsetup_r+0xba>
 8009d44:	4b25      	ldr	r3, [pc, #148]	; (8009ddc <__swsetup_r+0xd4>)
 8009d46:	429c      	cmp	r4, r3
 8009d48:	d101      	bne.n	8009d4e <__swsetup_r+0x46>
 8009d4a:	68ac      	ldr	r4, [r5, #8]
 8009d4c:	e7eb      	b.n	8009d26 <__swsetup_r+0x1e>
 8009d4e:	4b24      	ldr	r3, [pc, #144]	; (8009de0 <__swsetup_r+0xd8>)
 8009d50:	429c      	cmp	r4, r3
 8009d52:	bf08      	it	eq
 8009d54:	68ec      	ldreq	r4, [r5, #12]
 8009d56:	e7e6      	b.n	8009d26 <__swsetup_r+0x1e>
 8009d58:	0758      	lsls	r0, r3, #29
 8009d5a:	d512      	bpl.n	8009d82 <__swsetup_r+0x7a>
 8009d5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d5e:	b141      	cbz	r1, 8009d72 <__swsetup_r+0x6a>
 8009d60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d64:	4299      	cmp	r1, r3
 8009d66:	d002      	beq.n	8009d6e <__swsetup_r+0x66>
 8009d68:	4630      	mov	r0, r6
 8009d6a:	f7ff fb41 	bl	80093f0 <_free_r>
 8009d6e:	2300      	movs	r3, #0
 8009d70:	6363      	str	r3, [r4, #52]	; 0x34
 8009d72:	89a3      	ldrh	r3, [r4, #12]
 8009d74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d78:	81a3      	strh	r3, [r4, #12]
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	6063      	str	r3, [r4, #4]
 8009d7e:	6923      	ldr	r3, [r4, #16]
 8009d80:	6023      	str	r3, [r4, #0]
 8009d82:	89a3      	ldrh	r3, [r4, #12]
 8009d84:	f043 0308 	orr.w	r3, r3, #8
 8009d88:	81a3      	strh	r3, [r4, #12]
 8009d8a:	6923      	ldr	r3, [r4, #16]
 8009d8c:	b94b      	cbnz	r3, 8009da2 <__swsetup_r+0x9a>
 8009d8e:	89a3      	ldrh	r3, [r4, #12]
 8009d90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d98:	d003      	beq.n	8009da2 <__swsetup_r+0x9a>
 8009d9a:	4621      	mov	r1, r4
 8009d9c:	4630      	mov	r0, r6
 8009d9e:	f000 fa09 	bl	800a1b4 <__smakebuf_r>
 8009da2:	89a0      	ldrh	r0, [r4, #12]
 8009da4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009da8:	f010 0301 	ands.w	r3, r0, #1
 8009dac:	d00a      	beq.n	8009dc4 <__swsetup_r+0xbc>
 8009dae:	2300      	movs	r3, #0
 8009db0:	60a3      	str	r3, [r4, #8]
 8009db2:	6963      	ldr	r3, [r4, #20]
 8009db4:	425b      	negs	r3, r3
 8009db6:	61a3      	str	r3, [r4, #24]
 8009db8:	6923      	ldr	r3, [r4, #16]
 8009dba:	b943      	cbnz	r3, 8009dce <__swsetup_r+0xc6>
 8009dbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009dc0:	d1ba      	bne.n	8009d38 <__swsetup_r+0x30>
 8009dc2:	bd70      	pop	{r4, r5, r6, pc}
 8009dc4:	0781      	lsls	r1, r0, #30
 8009dc6:	bf58      	it	pl
 8009dc8:	6963      	ldrpl	r3, [r4, #20]
 8009dca:	60a3      	str	r3, [r4, #8]
 8009dcc:	e7f4      	b.n	8009db8 <__swsetup_r+0xb0>
 8009dce:	2000      	movs	r0, #0
 8009dd0:	e7f7      	b.n	8009dc2 <__swsetup_r+0xba>
 8009dd2:	bf00      	nop
 8009dd4:	20000108 	.word	0x20000108
 8009dd8:	0800a9bc 	.word	0x0800a9bc
 8009ddc:	0800a9dc 	.word	0x0800a9dc
 8009de0:	0800a99c 	.word	0x0800a99c

08009de4 <abort>:
 8009de4:	b508      	push	{r3, lr}
 8009de6:	2006      	movs	r0, #6
 8009de8:	f000 fa54 	bl	800a294 <raise>
 8009dec:	2001      	movs	r0, #1
 8009dee:	f7f7 fa17 	bl	8001220 <_exit>
	...

08009df4 <__sflush_r>:
 8009df4:	898a      	ldrh	r2, [r1, #12]
 8009df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dfa:	4605      	mov	r5, r0
 8009dfc:	0710      	lsls	r0, r2, #28
 8009dfe:	460c      	mov	r4, r1
 8009e00:	d458      	bmi.n	8009eb4 <__sflush_r+0xc0>
 8009e02:	684b      	ldr	r3, [r1, #4]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	dc05      	bgt.n	8009e14 <__sflush_r+0x20>
 8009e08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	dc02      	bgt.n	8009e14 <__sflush_r+0x20>
 8009e0e:	2000      	movs	r0, #0
 8009e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e16:	2e00      	cmp	r6, #0
 8009e18:	d0f9      	beq.n	8009e0e <__sflush_r+0x1a>
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e20:	682f      	ldr	r7, [r5, #0]
 8009e22:	602b      	str	r3, [r5, #0]
 8009e24:	d032      	beq.n	8009e8c <__sflush_r+0x98>
 8009e26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e28:	89a3      	ldrh	r3, [r4, #12]
 8009e2a:	075a      	lsls	r2, r3, #29
 8009e2c:	d505      	bpl.n	8009e3a <__sflush_r+0x46>
 8009e2e:	6863      	ldr	r3, [r4, #4]
 8009e30:	1ac0      	subs	r0, r0, r3
 8009e32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e34:	b10b      	cbz	r3, 8009e3a <__sflush_r+0x46>
 8009e36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e38:	1ac0      	subs	r0, r0, r3
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e40:	6a21      	ldr	r1, [r4, #32]
 8009e42:	4628      	mov	r0, r5
 8009e44:	47b0      	blx	r6
 8009e46:	1c43      	adds	r3, r0, #1
 8009e48:	89a3      	ldrh	r3, [r4, #12]
 8009e4a:	d106      	bne.n	8009e5a <__sflush_r+0x66>
 8009e4c:	6829      	ldr	r1, [r5, #0]
 8009e4e:	291d      	cmp	r1, #29
 8009e50:	d82c      	bhi.n	8009eac <__sflush_r+0xb8>
 8009e52:	4a2a      	ldr	r2, [pc, #168]	; (8009efc <__sflush_r+0x108>)
 8009e54:	40ca      	lsrs	r2, r1
 8009e56:	07d6      	lsls	r6, r2, #31
 8009e58:	d528      	bpl.n	8009eac <__sflush_r+0xb8>
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	6062      	str	r2, [r4, #4]
 8009e5e:	04d9      	lsls	r1, r3, #19
 8009e60:	6922      	ldr	r2, [r4, #16]
 8009e62:	6022      	str	r2, [r4, #0]
 8009e64:	d504      	bpl.n	8009e70 <__sflush_r+0x7c>
 8009e66:	1c42      	adds	r2, r0, #1
 8009e68:	d101      	bne.n	8009e6e <__sflush_r+0x7a>
 8009e6a:	682b      	ldr	r3, [r5, #0]
 8009e6c:	b903      	cbnz	r3, 8009e70 <__sflush_r+0x7c>
 8009e6e:	6560      	str	r0, [r4, #84]	; 0x54
 8009e70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e72:	602f      	str	r7, [r5, #0]
 8009e74:	2900      	cmp	r1, #0
 8009e76:	d0ca      	beq.n	8009e0e <__sflush_r+0x1a>
 8009e78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e7c:	4299      	cmp	r1, r3
 8009e7e:	d002      	beq.n	8009e86 <__sflush_r+0x92>
 8009e80:	4628      	mov	r0, r5
 8009e82:	f7ff fab5 	bl	80093f0 <_free_r>
 8009e86:	2000      	movs	r0, #0
 8009e88:	6360      	str	r0, [r4, #52]	; 0x34
 8009e8a:	e7c1      	b.n	8009e10 <__sflush_r+0x1c>
 8009e8c:	6a21      	ldr	r1, [r4, #32]
 8009e8e:	2301      	movs	r3, #1
 8009e90:	4628      	mov	r0, r5
 8009e92:	47b0      	blx	r6
 8009e94:	1c41      	adds	r1, r0, #1
 8009e96:	d1c7      	bne.n	8009e28 <__sflush_r+0x34>
 8009e98:	682b      	ldr	r3, [r5, #0]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d0c4      	beq.n	8009e28 <__sflush_r+0x34>
 8009e9e:	2b1d      	cmp	r3, #29
 8009ea0:	d001      	beq.n	8009ea6 <__sflush_r+0xb2>
 8009ea2:	2b16      	cmp	r3, #22
 8009ea4:	d101      	bne.n	8009eaa <__sflush_r+0xb6>
 8009ea6:	602f      	str	r7, [r5, #0]
 8009ea8:	e7b1      	b.n	8009e0e <__sflush_r+0x1a>
 8009eaa:	89a3      	ldrh	r3, [r4, #12]
 8009eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009eb0:	81a3      	strh	r3, [r4, #12]
 8009eb2:	e7ad      	b.n	8009e10 <__sflush_r+0x1c>
 8009eb4:	690f      	ldr	r7, [r1, #16]
 8009eb6:	2f00      	cmp	r7, #0
 8009eb8:	d0a9      	beq.n	8009e0e <__sflush_r+0x1a>
 8009eba:	0793      	lsls	r3, r2, #30
 8009ebc:	680e      	ldr	r6, [r1, #0]
 8009ebe:	bf08      	it	eq
 8009ec0:	694b      	ldreq	r3, [r1, #20]
 8009ec2:	600f      	str	r7, [r1, #0]
 8009ec4:	bf18      	it	ne
 8009ec6:	2300      	movne	r3, #0
 8009ec8:	eba6 0807 	sub.w	r8, r6, r7
 8009ecc:	608b      	str	r3, [r1, #8]
 8009ece:	f1b8 0f00 	cmp.w	r8, #0
 8009ed2:	dd9c      	ble.n	8009e0e <__sflush_r+0x1a>
 8009ed4:	6a21      	ldr	r1, [r4, #32]
 8009ed6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ed8:	4643      	mov	r3, r8
 8009eda:	463a      	mov	r2, r7
 8009edc:	4628      	mov	r0, r5
 8009ede:	47b0      	blx	r6
 8009ee0:	2800      	cmp	r0, #0
 8009ee2:	dc06      	bgt.n	8009ef2 <__sflush_r+0xfe>
 8009ee4:	89a3      	ldrh	r3, [r4, #12]
 8009ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009eea:	81a3      	strh	r3, [r4, #12]
 8009eec:	f04f 30ff 	mov.w	r0, #4294967295
 8009ef0:	e78e      	b.n	8009e10 <__sflush_r+0x1c>
 8009ef2:	4407      	add	r7, r0
 8009ef4:	eba8 0800 	sub.w	r8, r8, r0
 8009ef8:	e7e9      	b.n	8009ece <__sflush_r+0xda>
 8009efa:	bf00      	nop
 8009efc:	20400001 	.word	0x20400001

08009f00 <_fflush_r>:
 8009f00:	b538      	push	{r3, r4, r5, lr}
 8009f02:	690b      	ldr	r3, [r1, #16]
 8009f04:	4605      	mov	r5, r0
 8009f06:	460c      	mov	r4, r1
 8009f08:	b913      	cbnz	r3, 8009f10 <_fflush_r+0x10>
 8009f0a:	2500      	movs	r5, #0
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	bd38      	pop	{r3, r4, r5, pc}
 8009f10:	b118      	cbz	r0, 8009f1a <_fflush_r+0x1a>
 8009f12:	6983      	ldr	r3, [r0, #24]
 8009f14:	b90b      	cbnz	r3, 8009f1a <_fflush_r+0x1a>
 8009f16:	f000 f887 	bl	800a028 <__sinit>
 8009f1a:	4b14      	ldr	r3, [pc, #80]	; (8009f6c <_fflush_r+0x6c>)
 8009f1c:	429c      	cmp	r4, r3
 8009f1e:	d11b      	bne.n	8009f58 <_fflush_r+0x58>
 8009f20:	686c      	ldr	r4, [r5, #4]
 8009f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d0ef      	beq.n	8009f0a <_fflush_r+0xa>
 8009f2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f2c:	07d0      	lsls	r0, r2, #31
 8009f2e:	d404      	bmi.n	8009f3a <_fflush_r+0x3a>
 8009f30:	0599      	lsls	r1, r3, #22
 8009f32:	d402      	bmi.n	8009f3a <_fflush_r+0x3a>
 8009f34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f36:	f000 f915 	bl	800a164 <__retarget_lock_acquire_recursive>
 8009f3a:	4628      	mov	r0, r5
 8009f3c:	4621      	mov	r1, r4
 8009f3e:	f7ff ff59 	bl	8009df4 <__sflush_r>
 8009f42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f44:	07da      	lsls	r2, r3, #31
 8009f46:	4605      	mov	r5, r0
 8009f48:	d4e0      	bmi.n	8009f0c <_fflush_r+0xc>
 8009f4a:	89a3      	ldrh	r3, [r4, #12]
 8009f4c:	059b      	lsls	r3, r3, #22
 8009f4e:	d4dd      	bmi.n	8009f0c <_fflush_r+0xc>
 8009f50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f52:	f000 f908 	bl	800a166 <__retarget_lock_release_recursive>
 8009f56:	e7d9      	b.n	8009f0c <_fflush_r+0xc>
 8009f58:	4b05      	ldr	r3, [pc, #20]	; (8009f70 <_fflush_r+0x70>)
 8009f5a:	429c      	cmp	r4, r3
 8009f5c:	d101      	bne.n	8009f62 <_fflush_r+0x62>
 8009f5e:	68ac      	ldr	r4, [r5, #8]
 8009f60:	e7df      	b.n	8009f22 <_fflush_r+0x22>
 8009f62:	4b04      	ldr	r3, [pc, #16]	; (8009f74 <_fflush_r+0x74>)
 8009f64:	429c      	cmp	r4, r3
 8009f66:	bf08      	it	eq
 8009f68:	68ec      	ldreq	r4, [r5, #12]
 8009f6a:	e7da      	b.n	8009f22 <_fflush_r+0x22>
 8009f6c:	0800a9bc 	.word	0x0800a9bc
 8009f70:	0800a9dc 	.word	0x0800a9dc
 8009f74:	0800a99c 	.word	0x0800a99c

08009f78 <std>:
 8009f78:	2300      	movs	r3, #0
 8009f7a:	b510      	push	{r4, lr}
 8009f7c:	4604      	mov	r4, r0
 8009f7e:	e9c0 3300 	strd	r3, r3, [r0]
 8009f82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f86:	6083      	str	r3, [r0, #8]
 8009f88:	8181      	strh	r1, [r0, #12]
 8009f8a:	6643      	str	r3, [r0, #100]	; 0x64
 8009f8c:	81c2      	strh	r2, [r0, #14]
 8009f8e:	6183      	str	r3, [r0, #24]
 8009f90:	4619      	mov	r1, r3
 8009f92:	2208      	movs	r2, #8
 8009f94:	305c      	adds	r0, #92	; 0x5c
 8009f96:	f7fb fdf5 	bl	8005b84 <memset>
 8009f9a:	4b05      	ldr	r3, [pc, #20]	; (8009fb0 <std+0x38>)
 8009f9c:	6263      	str	r3, [r4, #36]	; 0x24
 8009f9e:	4b05      	ldr	r3, [pc, #20]	; (8009fb4 <std+0x3c>)
 8009fa0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009fa2:	4b05      	ldr	r3, [pc, #20]	; (8009fb8 <std+0x40>)
 8009fa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009fa6:	4b05      	ldr	r3, [pc, #20]	; (8009fbc <std+0x44>)
 8009fa8:	6224      	str	r4, [r4, #32]
 8009faa:	6323      	str	r3, [r4, #48]	; 0x30
 8009fac:	bd10      	pop	{r4, pc}
 8009fae:	bf00      	nop
 8009fb0:	0800a2cd 	.word	0x0800a2cd
 8009fb4:	0800a2ef 	.word	0x0800a2ef
 8009fb8:	0800a327 	.word	0x0800a327
 8009fbc:	0800a34b 	.word	0x0800a34b

08009fc0 <_cleanup_r>:
 8009fc0:	4901      	ldr	r1, [pc, #4]	; (8009fc8 <_cleanup_r+0x8>)
 8009fc2:	f000 b8af 	b.w	800a124 <_fwalk_reent>
 8009fc6:	bf00      	nop
 8009fc8:	08009f01 	.word	0x08009f01

08009fcc <__sfmoreglue>:
 8009fcc:	b570      	push	{r4, r5, r6, lr}
 8009fce:	2268      	movs	r2, #104	; 0x68
 8009fd0:	1e4d      	subs	r5, r1, #1
 8009fd2:	4355      	muls	r5, r2
 8009fd4:	460e      	mov	r6, r1
 8009fd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009fda:	f7ff fa75 	bl	80094c8 <_malloc_r>
 8009fde:	4604      	mov	r4, r0
 8009fe0:	b140      	cbz	r0, 8009ff4 <__sfmoreglue+0x28>
 8009fe2:	2100      	movs	r1, #0
 8009fe4:	e9c0 1600 	strd	r1, r6, [r0]
 8009fe8:	300c      	adds	r0, #12
 8009fea:	60a0      	str	r0, [r4, #8]
 8009fec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ff0:	f7fb fdc8 	bl	8005b84 <memset>
 8009ff4:	4620      	mov	r0, r4
 8009ff6:	bd70      	pop	{r4, r5, r6, pc}

08009ff8 <__sfp_lock_acquire>:
 8009ff8:	4801      	ldr	r0, [pc, #4]	; (800a000 <__sfp_lock_acquire+0x8>)
 8009ffa:	f000 b8b3 	b.w	800a164 <__retarget_lock_acquire_recursive>
 8009ffe:	bf00      	nop
 800a000:	200020b1 	.word	0x200020b1

0800a004 <__sfp_lock_release>:
 800a004:	4801      	ldr	r0, [pc, #4]	; (800a00c <__sfp_lock_release+0x8>)
 800a006:	f000 b8ae 	b.w	800a166 <__retarget_lock_release_recursive>
 800a00a:	bf00      	nop
 800a00c:	200020b1 	.word	0x200020b1

0800a010 <__sinit_lock_acquire>:
 800a010:	4801      	ldr	r0, [pc, #4]	; (800a018 <__sinit_lock_acquire+0x8>)
 800a012:	f000 b8a7 	b.w	800a164 <__retarget_lock_acquire_recursive>
 800a016:	bf00      	nop
 800a018:	200020b2 	.word	0x200020b2

0800a01c <__sinit_lock_release>:
 800a01c:	4801      	ldr	r0, [pc, #4]	; (800a024 <__sinit_lock_release+0x8>)
 800a01e:	f000 b8a2 	b.w	800a166 <__retarget_lock_release_recursive>
 800a022:	bf00      	nop
 800a024:	200020b2 	.word	0x200020b2

0800a028 <__sinit>:
 800a028:	b510      	push	{r4, lr}
 800a02a:	4604      	mov	r4, r0
 800a02c:	f7ff fff0 	bl	800a010 <__sinit_lock_acquire>
 800a030:	69a3      	ldr	r3, [r4, #24]
 800a032:	b11b      	cbz	r3, 800a03c <__sinit+0x14>
 800a034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a038:	f7ff bff0 	b.w	800a01c <__sinit_lock_release>
 800a03c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a040:	6523      	str	r3, [r4, #80]	; 0x50
 800a042:	4b13      	ldr	r3, [pc, #76]	; (800a090 <__sinit+0x68>)
 800a044:	4a13      	ldr	r2, [pc, #76]	; (800a094 <__sinit+0x6c>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	62a2      	str	r2, [r4, #40]	; 0x28
 800a04a:	42a3      	cmp	r3, r4
 800a04c:	bf04      	itt	eq
 800a04e:	2301      	moveq	r3, #1
 800a050:	61a3      	streq	r3, [r4, #24]
 800a052:	4620      	mov	r0, r4
 800a054:	f000 f820 	bl	800a098 <__sfp>
 800a058:	6060      	str	r0, [r4, #4]
 800a05a:	4620      	mov	r0, r4
 800a05c:	f000 f81c 	bl	800a098 <__sfp>
 800a060:	60a0      	str	r0, [r4, #8]
 800a062:	4620      	mov	r0, r4
 800a064:	f000 f818 	bl	800a098 <__sfp>
 800a068:	2200      	movs	r2, #0
 800a06a:	60e0      	str	r0, [r4, #12]
 800a06c:	2104      	movs	r1, #4
 800a06e:	6860      	ldr	r0, [r4, #4]
 800a070:	f7ff ff82 	bl	8009f78 <std>
 800a074:	68a0      	ldr	r0, [r4, #8]
 800a076:	2201      	movs	r2, #1
 800a078:	2109      	movs	r1, #9
 800a07a:	f7ff ff7d 	bl	8009f78 <std>
 800a07e:	68e0      	ldr	r0, [r4, #12]
 800a080:	2202      	movs	r2, #2
 800a082:	2112      	movs	r1, #18
 800a084:	f7ff ff78 	bl	8009f78 <std>
 800a088:	2301      	movs	r3, #1
 800a08a:	61a3      	str	r3, [r4, #24]
 800a08c:	e7d2      	b.n	800a034 <__sinit+0xc>
 800a08e:	bf00      	nop
 800a090:	0800a558 	.word	0x0800a558
 800a094:	08009fc1 	.word	0x08009fc1

0800a098 <__sfp>:
 800a098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a09a:	4607      	mov	r7, r0
 800a09c:	f7ff ffac 	bl	8009ff8 <__sfp_lock_acquire>
 800a0a0:	4b1e      	ldr	r3, [pc, #120]	; (800a11c <__sfp+0x84>)
 800a0a2:	681e      	ldr	r6, [r3, #0]
 800a0a4:	69b3      	ldr	r3, [r6, #24]
 800a0a6:	b913      	cbnz	r3, 800a0ae <__sfp+0x16>
 800a0a8:	4630      	mov	r0, r6
 800a0aa:	f7ff ffbd 	bl	800a028 <__sinit>
 800a0ae:	3648      	adds	r6, #72	; 0x48
 800a0b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a0b4:	3b01      	subs	r3, #1
 800a0b6:	d503      	bpl.n	800a0c0 <__sfp+0x28>
 800a0b8:	6833      	ldr	r3, [r6, #0]
 800a0ba:	b30b      	cbz	r3, 800a100 <__sfp+0x68>
 800a0bc:	6836      	ldr	r6, [r6, #0]
 800a0be:	e7f7      	b.n	800a0b0 <__sfp+0x18>
 800a0c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a0c4:	b9d5      	cbnz	r5, 800a0fc <__sfp+0x64>
 800a0c6:	4b16      	ldr	r3, [pc, #88]	; (800a120 <__sfp+0x88>)
 800a0c8:	60e3      	str	r3, [r4, #12]
 800a0ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a0ce:	6665      	str	r5, [r4, #100]	; 0x64
 800a0d0:	f000 f847 	bl	800a162 <__retarget_lock_init_recursive>
 800a0d4:	f7ff ff96 	bl	800a004 <__sfp_lock_release>
 800a0d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a0dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a0e0:	6025      	str	r5, [r4, #0]
 800a0e2:	61a5      	str	r5, [r4, #24]
 800a0e4:	2208      	movs	r2, #8
 800a0e6:	4629      	mov	r1, r5
 800a0e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a0ec:	f7fb fd4a 	bl	8005b84 <memset>
 800a0f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a0f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a0f8:	4620      	mov	r0, r4
 800a0fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0fc:	3468      	adds	r4, #104	; 0x68
 800a0fe:	e7d9      	b.n	800a0b4 <__sfp+0x1c>
 800a100:	2104      	movs	r1, #4
 800a102:	4638      	mov	r0, r7
 800a104:	f7ff ff62 	bl	8009fcc <__sfmoreglue>
 800a108:	4604      	mov	r4, r0
 800a10a:	6030      	str	r0, [r6, #0]
 800a10c:	2800      	cmp	r0, #0
 800a10e:	d1d5      	bne.n	800a0bc <__sfp+0x24>
 800a110:	f7ff ff78 	bl	800a004 <__sfp_lock_release>
 800a114:	230c      	movs	r3, #12
 800a116:	603b      	str	r3, [r7, #0]
 800a118:	e7ee      	b.n	800a0f8 <__sfp+0x60>
 800a11a:	bf00      	nop
 800a11c:	0800a558 	.word	0x0800a558
 800a120:	ffff0001 	.word	0xffff0001

0800a124 <_fwalk_reent>:
 800a124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a128:	4606      	mov	r6, r0
 800a12a:	4688      	mov	r8, r1
 800a12c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a130:	2700      	movs	r7, #0
 800a132:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a136:	f1b9 0901 	subs.w	r9, r9, #1
 800a13a:	d505      	bpl.n	800a148 <_fwalk_reent+0x24>
 800a13c:	6824      	ldr	r4, [r4, #0]
 800a13e:	2c00      	cmp	r4, #0
 800a140:	d1f7      	bne.n	800a132 <_fwalk_reent+0xe>
 800a142:	4638      	mov	r0, r7
 800a144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a148:	89ab      	ldrh	r3, [r5, #12]
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d907      	bls.n	800a15e <_fwalk_reent+0x3a>
 800a14e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a152:	3301      	adds	r3, #1
 800a154:	d003      	beq.n	800a15e <_fwalk_reent+0x3a>
 800a156:	4629      	mov	r1, r5
 800a158:	4630      	mov	r0, r6
 800a15a:	47c0      	blx	r8
 800a15c:	4307      	orrs	r7, r0
 800a15e:	3568      	adds	r5, #104	; 0x68
 800a160:	e7e9      	b.n	800a136 <_fwalk_reent+0x12>

0800a162 <__retarget_lock_init_recursive>:
 800a162:	4770      	bx	lr

0800a164 <__retarget_lock_acquire_recursive>:
 800a164:	4770      	bx	lr

0800a166 <__retarget_lock_release_recursive>:
 800a166:	4770      	bx	lr

0800a168 <__swhatbuf_r>:
 800a168:	b570      	push	{r4, r5, r6, lr}
 800a16a:	460e      	mov	r6, r1
 800a16c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a170:	2900      	cmp	r1, #0
 800a172:	b096      	sub	sp, #88	; 0x58
 800a174:	4614      	mov	r4, r2
 800a176:	461d      	mov	r5, r3
 800a178:	da08      	bge.n	800a18c <__swhatbuf_r+0x24>
 800a17a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a17e:	2200      	movs	r2, #0
 800a180:	602a      	str	r2, [r5, #0]
 800a182:	061a      	lsls	r2, r3, #24
 800a184:	d410      	bmi.n	800a1a8 <__swhatbuf_r+0x40>
 800a186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a18a:	e00e      	b.n	800a1aa <__swhatbuf_r+0x42>
 800a18c:	466a      	mov	r2, sp
 800a18e:	f000 f903 	bl	800a398 <_fstat_r>
 800a192:	2800      	cmp	r0, #0
 800a194:	dbf1      	blt.n	800a17a <__swhatbuf_r+0x12>
 800a196:	9a01      	ldr	r2, [sp, #4]
 800a198:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a19c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a1a0:	425a      	negs	r2, r3
 800a1a2:	415a      	adcs	r2, r3
 800a1a4:	602a      	str	r2, [r5, #0]
 800a1a6:	e7ee      	b.n	800a186 <__swhatbuf_r+0x1e>
 800a1a8:	2340      	movs	r3, #64	; 0x40
 800a1aa:	2000      	movs	r0, #0
 800a1ac:	6023      	str	r3, [r4, #0]
 800a1ae:	b016      	add	sp, #88	; 0x58
 800a1b0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a1b4 <__smakebuf_r>:
 800a1b4:	898b      	ldrh	r3, [r1, #12]
 800a1b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1b8:	079d      	lsls	r5, r3, #30
 800a1ba:	4606      	mov	r6, r0
 800a1bc:	460c      	mov	r4, r1
 800a1be:	d507      	bpl.n	800a1d0 <__smakebuf_r+0x1c>
 800a1c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1c4:	6023      	str	r3, [r4, #0]
 800a1c6:	6123      	str	r3, [r4, #16]
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	6163      	str	r3, [r4, #20]
 800a1cc:	b002      	add	sp, #8
 800a1ce:	bd70      	pop	{r4, r5, r6, pc}
 800a1d0:	ab01      	add	r3, sp, #4
 800a1d2:	466a      	mov	r2, sp
 800a1d4:	f7ff ffc8 	bl	800a168 <__swhatbuf_r>
 800a1d8:	9900      	ldr	r1, [sp, #0]
 800a1da:	4605      	mov	r5, r0
 800a1dc:	4630      	mov	r0, r6
 800a1de:	f7ff f973 	bl	80094c8 <_malloc_r>
 800a1e2:	b948      	cbnz	r0, 800a1f8 <__smakebuf_r+0x44>
 800a1e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1e8:	059a      	lsls	r2, r3, #22
 800a1ea:	d4ef      	bmi.n	800a1cc <__smakebuf_r+0x18>
 800a1ec:	f023 0303 	bic.w	r3, r3, #3
 800a1f0:	f043 0302 	orr.w	r3, r3, #2
 800a1f4:	81a3      	strh	r3, [r4, #12]
 800a1f6:	e7e3      	b.n	800a1c0 <__smakebuf_r+0xc>
 800a1f8:	4b0d      	ldr	r3, [pc, #52]	; (800a230 <__smakebuf_r+0x7c>)
 800a1fa:	62b3      	str	r3, [r6, #40]	; 0x28
 800a1fc:	89a3      	ldrh	r3, [r4, #12]
 800a1fe:	6020      	str	r0, [r4, #0]
 800a200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a204:	81a3      	strh	r3, [r4, #12]
 800a206:	9b00      	ldr	r3, [sp, #0]
 800a208:	6163      	str	r3, [r4, #20]
 800a20a:	9b01      	ldr	r3, [sp, #4]
 800a20c:	6120      	str	r0, [r4, #16]
 800a20e:	b15b      	cbz	r3, 800a228 <__smakebuf_r+0x74>
 800a210:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a214:	4630      	mov	r0, r6
 800a216:	f000 f8d1 	bl	800a3bc <_isatty_r>
 800a21a:	b128      	cbz	r0, 800a228 <__smakebuf_r+0x74>
 800a21c:	89a3      	ldrh	r3, [r4, #12]
 800a21e:	f023 0303 	bic.w	r3, r3, #3
 800a222:	f043 0301 	orr.w	r3, r3, #1
 800a226:	81a3      	strh	r3, [r4, #12]
 800a228:	89a0      	ldrh	r0, [r4, #12]
 800a22a:	4305      	orrs	r5, r0
 800a22c:	81a5      	strh	r5, [r4, #12]
 800a22e:	e7cd      	b.n	800a1cc <__smakebuf_r+0x18>
 800a230:	08009fc1 	.word	0x08009fc1

0800a234 <_malloc_usable_size_r>:
 800a234:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a238:	1f18      	subs	r0, r3, #4
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	bfbc      	itt	lt
 800a23e:	580b      	ldrlt	r3, [r1, r0]
 800a240:	18c0      	addlt	r0, r0, r3
 800a242:	4770      	bx	lr

0800a244 <_raise_r>:
 800a244:	291f      	cmp	r1, #31
 800a246:	b538      	push	{r3, r4, r5, lr}
 800a248:	4604      	mov	r4, r0
 800a24a:	460d      	mov	r5, r1
 800a24c:	d904      	bls.n	800a258 <_raise_r+0x14>
 800a24e:	2316      	movs	r3, #22
 800a250:	6003      	str	r3, [r0, #0]
 800a252:	f04f 30ff 	mov.w	r0, #4294967295
 800a256:	bd38      	pop	{r3, r4, r5, pc}
 800a258:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a25a:	b112      	cbz	r2, 800a262 <_raise_r+0x1e>
 800a25c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a260:	b94b      	cbnz	r3, 800a276 <_raise_r+0x32>
 800a262:	4620      	mov	r0, r4
 800a264:	f000 f830 	bl	800a2c8 <_getpid_r>
 800a268:	462a      	mov	r2, r5
 800a26a:	4601      	mov	r1, r0
 800a26c:	4620      	mov	r0, r4
 800a26e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a272:	f000 b817 	b.w	800a2a4 <_kill_r>
 800a276:	2b01      	cmp	r3, #1
 800a278:	d00a      	beq.n	800a290 <_raise_r+0x4c>
 800a27a:	1c59      	adds	r1, r3, #1
 800a27c:	d103      	bne.n	800a286 <_raise_r+0x42>
 800a27e:	2316      	movs	r3, #22
 800a280:	6003      	str	r3, [r0, #0]
 800a282:	2001      	movs	r0, #1
 800a284:	e7e7      	b.n	800a256 <_raise_r+0x12>
 800a286:	2400      	movs	r4, #0
 800a288:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a28c:	4628      	mov	r0, r5
 800a28e:	4798      	blx	r3
 800a290:	2000      	movs	r0, #0
 800a292:	e7e0      	b.n	800a256 <_raise_r+0x12>

0800a294 <raise>:
 800a294:	4b02      	ldr	r3, [pc, #8]	; (800a2a0 <raise+0xc>)
 800a296:	4601      	mov	r1, r0
 800a298:	6818      	ldr	r0, [r3, #0]
 800a29a:	f7ff bfd3 	b.w	800a244 <_raise_r>
 800a29e:	bf00      	nop
 800a2a0:	20000108 	.word	0x20000108

0800a2a4 <_kill_r>:
 800a2a4:	b538      	push	{r3, r4, r5, lr}
 800a2a6:	4d07      	ldr	r5, [pc, #28]	; (800a2c4 <_kill_r+0x20>)
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	4604      	mov	r4, r0
 800a2ac:	4608      	mov	r0, r1
 800a2ae:	4611      	mov	r1, r2
 800a2b0:	602b      	str	r3, [r5, #0]
 800a2b2:	f7f6 ffad 	bl	8001210 <_kill>
 800a2b6:	1c43      	adds	r3, r0, #1
 800a2b8:	d102      	bne.n	800a2c0 <_kill_r+0x1c>
 800a2ba:	682b      	ldr	r3, [r5, #0]
 800a2bc:	b103      	cbz	r3, 800a2c0 <_kill_r+0x1c>
 800a2be:	6023      	str	r3, [r4, #0]
 800a2c0:	bd38      	pop	{r3, r4, r5, pc}
 800a2c2:	bf00      	nop
 800a2c4:	200020ac 	.word	0x200020ac

0800a2c8 <_getpid_r>:
 800a2c8:	f7f6 bfa0 	b.w	800120c <_getpid>

0800a2cc <__sread>:
 800a2cc:	b510      	push	{r4, lr}
 800a2ce:	460c      	mov	r4, r1
 800a2d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2d4:	f000 f894 	bl	800a400 <_read_r>
 800a2d8:	2800      	cmp	r0, #0
 800a2da:	bfab      	itete	ge
 800a2dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a2de:	89a3      	ldrhlt	r3, [r4, #12]
 800a2e0:	181b      	addge	r3, r3, r0
 800a2e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a2e6:	bfac      	ite	ge
 800a2e8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a2ea:	81a3      	strhlt	r3, [r4, #12]
 800a2ec:	bd10      	pop	{r4, pc}

0800a2ee <__swrite>:
 800a2ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2f2:	461f      	mov	r7, r3
 800a2f4:	898b      	ldrh	r3, [r1, #12]
 800a2f6:	05db      	lsls	r3, r3, #23
 800a2f8:	4605      	mov	r5, r0
 800a2fa:	460c      	mov	r4, r1
 800a2fc:	4616      	mov	r6, r2
 800a2fe:	d505      	bpl.n	800a30c <__swrite+0x1e>
 800a300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a304:	2302      	movs	r3, #2
 800a306:	2200      	movs	r2, #0
 800a308:	f000 f868 	bl	800a3dc <_lseek_r>
 800a30c:	89a3      	ldrh	r3, [r4, #12]
 800a30e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a312:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a316:	81a3      	strh	r3, [r4, #12]
 800a318:	4632      	mov	r2, r6
 800a31a:	463b      	mov	r3, r7
 800a31c:	4628      	mov	r0, r5
 800a31e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a322:	f000 b817 	b.w	800a354 <_write_r>

0800a326 <__sseek>:
 800a326:	b510      	push	{r4, lr}
 800a328:	460c      	mov	r4, r1
 800a32a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a32e:	f000 f855 	bl	800a3dc <_lseek_r>
 800a332:	1c43      	adds	r3, r0, #1
 800a334:	89a3      	ldrh	r3, [r4, #12]
 800a336:	bf15      	itete	ne
 800a338:	6560      	strne	r0, [r4, #84]	; 0x54
 800a33a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a33e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a342:	81a3      	strheq	r3, [r4, #12]
 800a344:	bf18      	it	ne
 800a346:	81a3      	strhne	r3, [r4, #12]
 800a348:	bd10      	pop	{r4, pc}

0800a34a <__sclose>:
 800a34a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a34e:	f000 b813 	b.w	800a378 <_close_r>
	...

0800a354 <_write_r>:
 800a354:	b538      	push	{r3, r4, r5, lr}
 800a356:	4d07      	ldr	r5, [pc, #28]	; (800a374 <_write_r+0x20>)
 800a358:	4604      	mov	r4, r0
 800a35a:	4608      	mov	r0, r1
 800a35c:	4611      	mov	r1, r2
 800a35e:	2200      	movs	r2, #0
 800a360:	602a      	str	r2, [r5, #0]
 800a362:	461a      	mov	r2, r3
 800a364:	f7f6 ff70 	bl	8001248 <_write>
 800a368:	1c43      	adds	r3, r0, #1
 800a36a:	d102      	bne.n	800a372 <_write_r+0x1e>
 800a36c:	682b      	ldr	r3, [r5, #0]
 800a36e:	b103      	cbz	r3, 800a372 <_write_r+0x1e>
 800a370:	6023      	str	r3, [r4, #0]
 800a372:	bd38      	pop	{r3, r4, r5, pc}
 800a374:	200020ac 	.word	0x200020ac

0800a378 <_close_r>:
 800a378:	b538      	push	{r3, r4, r5, lr}
 800a37a:	4d06      	ldr	r5, [pc, #24]	; (800a394 <_close_r+0x1c>)
 800a37c:	2300      	movs	r3, #0
 800a37e:	4604      	mov	r4, r0
 800a380:	4608      	mov	r0, r1
 800a382:	602b      	str	r3, [r5, #0]
 800a384:	f7f6 ff6e 	bl	8001264 <_close>
 800a388:	1c43      	adds	r3, r0, #1
 800a38a:	d102      	bne.n	800a392 <_close_r+0x1a>
 800a38c:	682b      	ldr	r3, [r5, #0]
 800a38e:	b103      	cbz	r3, 800a392 <_close_r+0x1a>
 800a390:	6023      	str	r3, [r4, #0]
 800a392:	bd38      	pop	{r3, r4, r5, pc}
 800a394:	200020ac 	.word	0x200020ac

0800a398 <_fstat_r>:
 800a398:	b538      	push	{r3, r4, r5, lr}
 800a39a:	4d07      	ldr	r5, [pc, #28]	; (800a3b8 <_fstat_r+0x20>)
 800a39c:	2300      	movs	r3, #0
 800a39e:	4604      	mov	r4, r0
 800a3a0:	4608      	mov	r0, r1
 800a3a2:	4611      	mov	r1, r2
 800a3a4:	602b      	str	r3, [r5, #0]
 800a3a6:	f7f6 ff61 	bl	800126c <_fstat>
 800a3aa:	1c43      	adds	r3, r0, #1
 800a3ac:	d102      	bne.n	800a3b4 <_fstat_r+0x1c>
 800a3ae:	682b      	ldr	r3, [r5, #0]
 800a3b0:	b103      	cbz	r3, 800a3b4 <_fstat_r+0x1c>
 800a3b2:	6023      	str	r3, [r4, #0]
 800a3b4:	bd38      	pop	{r3, r4, r5, pc}
 800a3b6:	bf00      	nop
 800a3b8:	200020ac 	.word	0x200020ac

0800a3bc <_isatty_r>:
 800a3bc:	b538      	push	{r3, r4, r5, lr}
 800a3be:	4d06      	ldr	r5, [pc, #24]	; (800a3d8 <_isatty_r+0x1c>)
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	4604      	mov	r4, r0
 800a3c4:	4608      	mov	r0, r1
 800a3c6:	602b      	str	r3, [r5, #0]
 800a3c8:	f7f6 ff56 	bl	8001278 <_isatty>
 800a3cc:	1c43      	adds	r3, r0, #1
 800a3ce:	d102      	bne.n	800a3d6 <_isatty_r+0x1a>
 800a3d0:	682b      	ldr	r3, [r5, #0]
 800a3d2:	b103      	cbz	r3, 800a3d6 <_isatty_r+0x1a>
 800a3d4:	6023      	str	r3, [r4, #0]
 800a3d6:	bd38      	pop	{r3, r4, r5, pc}
 800a3d8:	200020ac 	.word	0x200020ac

0800a3dc <_lseek_r>:
 800a3dc:	b538      	push	{r3, r4, r5, lr}
 800a3de:	4d07      	ldr	r5, [pc, #28]	; (800a3fc <_lseek_r+0x20>)
 800a3e0:	4604      	mov	r4, r0
 800a3e2:	4608      	mov	r0, r1
 800a3e4:	4611      	mov	r1, r2
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	602a      	str	r2, [r5, #0]
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	f7f6 ff46 	bl	800127c <_lseek>
 800a3f0:	1c43      	adds	r3, r0, #1
 800a3f2:	d102      	bne.n	800a3fa <_lseek_r+0x1e>
 800a3f4:	682b      	ldr	r3, [r5, #0]
 800a3f6:	b103      	cbz	r3, 800a3fa <_lseek_r+0x1e>
 800a3f8:	6023      	str	r3, [r4, #0]
 800a3fa:	bd38      	pop	{r3, r4, r5, pc}
 800a3fc:	200020ac 	.word	0x200020ac

0800a400 <_read_r>:
 800a400:	b538      	push	{r3, r4, r5, lr}
 800a402:	4d07      	ldr	r5, [pc, #28]	; (800a420 <_read_r+0x20>)
 800a404:	4604      	mov	r4, r0
 800a406:	4608      	mov	r0, r1
 800a408:	4611      	mov	r1, r2
 800a40a:	2200      	movs	r2, #0
 800a40c:	602a      	str	r2, [r5, #0]
 800a40e:	461a      	mov	r2, r3
 800a410:	f7f6 ff0c 	bl	800122c <_read>
 800a414:	1c43      	adds	r3, r0, #1
 800a416:	d102      	bne.n	800a41e <_read_r+0x1e>
 800a418:	682b      	ldr	r3, [r5, #0]
 800a41a:	b103      	cbz	r3, 800a41e <_read_r+0x1e>
 800a41c:	6023      	str	r3, [r4, #0]
 800a41e:	bd38      	pop	{r3, r4, r5, pc}
 800a420:	200020ac 	.word	0x200020ac

0800a424 <_init>:
 800a424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a426:	bf00      	nop
 800a428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a42a:	bc08      	pop	{r3}
 800a42c:	469e      	mov	lr, r3
 800a42e:	4770      	bx	lr

0800a430 <_fini>:
 800a430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a432:	bf00      	nop
 800a434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a436:	bc08      	pop	{r3}
 800a438:	469e      	mov	lr, r3
 800a43a:	4770      	bx	lr
