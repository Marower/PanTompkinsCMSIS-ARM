
PanTompkins-speedComparison.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2ac  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f14  0800c3f0  0800c3f0  0001c3f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800e304  0800e304  0001e304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800e308  0800e308  0001e308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000002d8  20000004  0800e30c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000044ac  200002e0  0800e5e4  000202e0  2**3
                  ALLOC
  7 ._user_heap_stack 00000604  2000478c  0800e5e4  0002478c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000202dc  2**0
                  CONTENTS, READONLY
  9 .debug_info   0003dfaa  00000000  00000000  0002030c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000606e  00000000  00000000  0005e2b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00050c0c  00000000  00000000  00064324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001878  00000000  00000000  000b4f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00006e98  00000000  00000000  000b67a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000275b7  00000000  00000000  000bd640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003f6a9  00000000  00000000  000e4bf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e7c15  00000000  00000000  001242a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0020beb5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000066ec  00000000  00000000  0020bf08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002e0 	.word	0x200002e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c3d4 	.word	0x0800c3d4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002e4 	.word	0x200002e4
 800017c:	0800c3d4 	.word	0x0800c3d4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_d2lz>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460d      	mov	r5, r1
 8000c42:	f7ff ff23 	bl	8000a8c <__aeabi_dcmplt>
 8000c46:	b928      	cbnz	r0, 8000c54 <__aeabi_d2lz+0x1c>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c50:	f000 b80a 	b.w	8000c68 <__aeabi_d2ulz>
 8000c54:	4620      	mov	r0, r4
 8000c56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5a:	f000 f805 	bl	8000c68 <__aeabi_d2ulz>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2ulz>:
 8000c68:	b5d0      	push	{r4, r6, r7, lr}
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__aeabi_d2ulz+0x34>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	f7ff fc99 	bl	80005a8 <__aeabi_dmul>
 8000c76:	f7ff ff6f 	bl	8000b58 <__aeabi_d2uiz>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	f7ff fc1a 	bl	80004b4 <__aeabi_ui2d>
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <__aeabi_d2ulz+0x38>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f7ff fc90 	bl	80005a8 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	4639      	mov	r1, r7
 8000c90:	f7ff fad2 	bl	8000238 <__aeabi_dsub>
 8000c94:	f7ff ff60 	bl	8000b58 <__aeabi_d2uiz>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c9c:	3df00000 	.word	0x3df00000
 8000ca0:	41f00000 	.word	0x41f00000

08000ca4 <PT_init>:
	and filter Buffers.

 *******************************************************************************/

void PT_init( void )
{
 8000ca4:	b570      	push	{r4, r5, r6, lr}
	/**************************************************
	Initialize Pan_Tompkins structure.
	**************************************************/

	memset(&PT_data, 0, sizeof(PT_data));
 8000ca6:	4d35      	ldr	r5, [pc, #212]	; (8000d7c <PT_init+0xd8>)
	}

	/**************************************************
	Initialize all static variables 
	**************************************************/
	Prev_val = Prev_Prev_val = 0;									// Place holders for peak detector in Integrated Sig
 8000ca8:	4e35      	ldr	r6, [pc, #212]	; (8000d80 <PT_init+0xdc>)
		PT_dptr->LP_buf[idex]		= 0;							//  LP filter buffer
 8000caa:	2400      	movs	r4, #0
	memset(&PT_data, 0, sizeof(PT_data));
 8000cac:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8000cb0:	4621      	mov	r1, r4
 8000cb2:	4628      	mov	r0, r5
 8000cb4:	f006 ff3e 	bl	8007b34 <memset>
	PT_dptr->Recent_RR_M = PT_dptr->RR_M =  PT1000MS;
 8000cb8:	4b32      	ldr	r3, [pc, #200]	; (8000d84 <PT_init+0xe0>)
 8000cba:	626b      	str	r3, [r5, #36]	; 0x24
 8000cbc:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8000cc0:	4b31      	ldr	r3, [pc, #196]	; (8000d88 <PT_init+0xe4>)
 8000cc2:	8128      	strh	r0, [r5, #8]
		PT_dptr->HP_buf[idex]		= 0;							//  HP filter buffer
 8000cc4:	2240      	movs	r2, #64	; 0x40
 8000cc6:	4621      	mov	r1, r4
 8000cc8:	f105 0046 	add.w	r0, r5, #70	; 0x46
	PT_dptr->Recent_RR_M = PT_dptr->RR_M =  PT1000MS;
 8000ccc:	62ab      	str	r3, [r5, #40]	; 0x28
		PT_dptr->LP_buf[idex]		= 0;							//  LP filter buffer
 8000cce:	f8c5 402e 	str.w	r4, [r5, #46]	; 0x2e
 8000cd2:	f8c5 4032 	str.w	r4, [r5, #50]	; 0x32
 8000cd6:	f8c5 4036 	str.w	r4, [r5, #54]	; 0x36
 8000cda:	f8c5 403a 	str.w	r4, [r5, #58]	; 0x3a
 8000cde:	f8c5 403e 	str.w	r4, [r5, #62]	; 0x3e
 8000ce2:	f8c5 4042 	str.w	r4, [r5, #66]	; 0x42
		PT_dptr->HP_buf[idex]		= 0;							//  HP filter buffer
 8000ce6:	f006 ff25 	bl	8007b34 <memset>
		PT_dptr->MVA_buf[idex]		= 0;							//  MVA filter buffer
 8000cea:	226c      	movs	r2, #108	; 0x6c
 8000cec:	4621      	mov	r1, r4
 8000cee:	f105 008e 	add.w	r0, r5, #142	; 0x8e
 8000cf2:	f006 ff1f 	bl	8007b34 <memset>
	Prev_val = Prev_Prev_val = 0;									// Place holders for peak detector in Integrated Sig
 8000cf6:	4a25      	ldr	r2, [pc, #148]	; (8000d8c <PT_init+0xe8>)
	Prev_valBP = Prev_Prev_valBP = Best_PeakBP = 0;					// Place holders for peak detector in BP signal
 8000cf8:	4925      	ldr	r1, [pc, #148]	; (8000d90 <PT_init+0xec>)
	Prev_val = Prev_Prev_val = 0;									// Place holders for peak detector in Integrated Sig
 8000cfa:	8014      	strh	r4, [r2, #0]
	Prev_valBP = Prev_Prev_valBP = Best_PeakBP = 0;					// Place holders for peak detector in BP signal
 8000cfc:	4a25      	ldr	r2, [pc, #148]	; (8000d94 <PT_init+0xf0>)
			PT_dptr->RR_AVRG2_buf[idex] = PT1000MS;					//  Normal	and extreme RR buffers
 8000cfe:	4b26      	ldr	r3, [pc, #152]	; (8000d98 <PT_init+0xf4>)
	Prev_valBP = Prev_Prev_valBP = Best_PeakBP = 0;					// Place holders for peak detector in BP signal
 8000d00:	800c      	strh	r4, [r1, #0]
 8000d02:	8014      	strh	r4, [r2, #0]
	Prev_valDR = Prev_Prev_valDR = Best_PeakDR = Old_PeakDR = 0;	// Place holders for peak detector in Derivative signal (Used for T-wave discrimination)
 8000d04:	4925      	ldr	r1, [pc, #148]	; (8000d9c <PT_init+0xf8>)
 8000d06:	4a26      	ldr	r2, [pc, #152]	; (8000da0 <PT_init+0xfc>)
			PT_dptr->RR_AVRG2_buf[idex] = PT1000MS;					//  Normal	and extreme RR buffers
 8000d08:	f8c5 310a 	str.w	r3, [r5, #266]	; 0x10a
		PT_dptr->RR_AVRG1_buf[idex] = 
 8000d0c:	f8c5 30fa 	str.w	r3, [r5, #250]	; 0xfa
			PT_dptr->RR_AVRG2_buf[idex] = PT1000MS;					//  Normal	and extreme RR buffers
 8000d10:	f8c5 310e 	str.w	r3, [r5, #270]	; 0x10e
		PT_dptr->RR_AVRG1_buf[idex] = 
 8000d14:	f8c5 30fe 	str.w	r3, [r5, #254]	; 0xfe
			PT_dptr->RR_AVRG2_buf[idex] = PT1000MS;					//  Normal	and extreme RR buffers
 8000d18:	f8c5 3112 	str.w	r3, [r5, #274]	; 0x112
		PT_dptr->RR_AVRG1_buf[idex] = 
 8000d1c:	f8c5 3102 	str.w	r3, [r5, #258]	; 0x102
			PT_dptr->RR_AVRG2_buf[idex] = PT1000MS;					//  Normal	and extreme RR buffers
 8000d20:	f8c5 3116 	str.w	r3, [r5, #278]	; 0x116
		PT_dptr->RR_AVRG1_buf[idex] = 
 8000d24:	f8c5 3106 	str.w	r3, [r5, #262]	; 0x106
	Prev_valDR = Prev_Prev_valDR = Best_PeakDR = Old_PeakDR = 0;	// Place holders for peak detector in Derivative signal (Used for T-wave discrimination)
 8000d28:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <PT_init+0x100>)
 8000d2a:	800c      	strh	r4, [r1, #0]
 8000d2c:	8014      	strh	r4, [r2, #0]
	Prev_valBP = Prev_Prev_valBP = Best_PeakBP = 0;					// Place holders for peak detector in BP signal
 8000d2e:	481e      	ldr	r0, [pc, #120]	; (8000da8 <PT_init+0x104>)
	Count_SinceRR = 0;												// Nr of samples since last qrs peak
 8000d30:	491e      	ldr	r1, [pc, #120]	; (8000dac <PT_init+0x108>)
	RR1_p = RR2_p = 0;												// Pointers to RR average 1 and 2 resepectively
	MV_sum = 0;														// sum for moving average filter
 8000d32:	4a1f      	ldr	r2, [pc, #124]	; (8000db0 <PT_init+0x10c>)
	Prev_valDR = Prev_Prev_valDR = Best_PeakDR = Old_PeakDR = 0;	// Place holders for peak detector in Derivative signal (Used for T-wave discrimination)
 8000d34:	801c      	strh	r4, [r3, #0]
	RR1_p = RR2_p = 0;												// Pointers to RR average 1 and 2 resepectively
 8000d36:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <PT_init+0x110>)
	Prev_valBP = Prev_Prev_valBP = Best_PeakBP = 0;					// Place holders for peak detector in BP signal
 8000d38:	8004      	strh	r4, [r0, #0]
	Count_SinceRR = 0;												// Nr of samples since last qrs peak
 8000d3a:	800c      	strh	r4, [r1, #0]
	MV_sum = 0;														// sum for moving average filter
 8000d3c:	8014      	strh	r4, [r2, #0]
	Prev_valDR = Prev_Prev_valDR = Best_PeakDR = Old_PeakDR = 0;	// Place holders for peak detector in Derivative signal (Used for T-wave discrimination)
 8000d3e:	481e      	ldr	r0, [pc, #120]	; (8000db8 <PT_init+0x114>)
	RR1_sum = RR2_sum = PT1000MS << 3;								// Sum of RR1 and RR2 buffers
 8000d40:	491e      	ldr	r1, [pc, #120]	; (8000dbc <PT_init+0x118>)
 8000d42:	4a1f      	ldr	r2, [pc, #124]	; (8000dc0 <PT_init+0x11c>)
	RR1_p = RR2_p = 0;												// Pointers to RR average 1 and 2 resepectively
 8000d44:	801c      	strh	r4, [r3, #0]
	RR1_sum = RR2_sum = PT1000MS << 3;								// Sum of RR1 and RR2 buffers
 8000d46:	f44f 6334 	mov.w	r3, #2880	; 0xb40
	Prev_valDR = Prev_Prev_valDR = Best_PeakDR = Old_PeakDR = 0;	// Place holders for peak detector in Derivative signal (Used for T-wave discrimination)
 8000d4a:	8004      	strh	r4, [r0, #0]
	RR1_sum = RR2_sum = PT1000MS << 3;								// Sum of RR1 and RR2 buffers
 8000d4c:	800b      	strh	r3, [r1, #0]
 8000d4e:	8013      	strh	r3, [r2, #0]
	RR1_p = RR2_p = 0;												// Pointers to RR average 1 and 2 resepectively
 8000d50:	481c      	ldr	r0, [pc, #112]	; (8000dc4 <PT_init+0x120>)
	BlankTimeCnt = 0;												// Counter for blank-time.
	SBcntI = 0;														// For searchback index in Integ Signal
 8000d52:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <PT_init+0x124>)
	RR1_p = RR2_p = 0;												// Pointers to RR average 1 and 2 resepectively
 8000d54:	8004      	strh	r4, [r0, #0]
	SBcntI = 0;														// For searchback index in Integ Signal
 8000d56:	801c      	strh	r4, [r3, #0]
	BlankTimeCnt = 0;												// Counter for blank-time.
 8000d58:	481c      	ldr	r0, [pc, #112]	; (8000dcc <PT_init+0x128>)
	SB_peakI = 0;													// For searchback in Integ sig
 8000d5a:	491d      	ldr	r1, [pc, #116]	; (8000dd0 <PT_init+0x12c>)
	SB_peakBP = SB_peakDR = 0;										// For searchback peak holders in BP and slope signal
 8000d5c:	4a1d      	ldr	r2, [pc, #116]	; (8000dd4 <PT_init+0x130>)
	st_mx_pk = 0;													// Used in learning phase 1 to estimate thresholds
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <PT_init+0x134>)
	BlankTimeCnt = 0;												// Counter for blank-time.
 8000d60:	8004      	strh	r4, [r0, #0]
	SB_peakI = 0;													// For searchback in Integ sig
 8000d62:	800c      	strh	r4, [r1, #0]
	SB_peakBP = SB_peakDR = 0;										// For searchback peak holders in BP and slope signal
 8000d64:	8014      	strh	r4, [r2, #0]
	st_mx_pk = 0;													// Used in learning phase 1 to estimate thresholds
 8000d66:	801c      	strh	r4, [r3, #0]
	SB_peakBP = SB_peakDR = 0;										// For searchback peak holders in BP and slope signal
 8000d68:	481c      	ldr	r0, [pc, #112]	; (8000ddc <PT_init+0x138>)
	y_h = 0;														// recusrively used in HP filter
 8000d6a:	491d      	ldr	r1, [pc, #116]	; (8000de0 <PT_init+0x13c>)

#if (FILTER_FORM == 2)
	LP_y_new = LP_y_old = 0;										// Parameters for DirectForm || LP filter
 8000d6c:	4a1d      	ldr	r2, [pc, #116]	; (8000de4 <PT_init+0x140>)
 8000d6e:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <PT_init+0x144>)
	Prev_val = Prev_Prev_val = 0;									// Place holders for peak detector in Integrated Sig
 8000d70:	8034      	strh	r4, [r6, #0]
	SB_peakBP = SB_peakDR = 0;										// For searchback peak holders in BP and slope signal
 8000d72:	8004      	strh	r4, [r0, #0]
	y_h = 0;														// recusrively used in HP filter
 8000d74:	800c      	strh	r4, [r1, #0]
	LP_y_new = LP_y_old = 0;										// Parameters for DirectForm || LP filter
 8000d76:	8014      	strh	r4, [r2, #0]
 8000d78:	801c      	strh	r4, [r3, #0]
#endif
}
 8000d7a:	bd70      	pop	{r4, r5, r6, pc}
 8000d7c:	20000310 	.word	0x20000310
 8000d80:	20000430 	.word	0x20000430
 8000d84:	014c0168 	.word	0x014c0168
 8000d88:	025801a2 	.word	0x025801a2
 8000d8c:	2000042a 	.word	0x2000042a
 8000d90:	200002fc 	.word	0x200002fc
 8000d94:	20000432 	.word	0x20000432
 8000d98:	01680168 	.word	0x01680168
 8000d9c:	2000030a 	.word	0x2000030a
 8000da0:	20000434 	.word	0x20000434
 8000da4:	200002fe 	.word	0x200002fe
 8000da8:	2000042c 	.word	0x2000042c
 8000dac:	20000302 	.word	0x20000302
 8000db0:	20000308 	.word	0x20000308
 8000db4:	2000043a 	.word	0x2000043a
 8000db8:	2000042e 	.word	0x2000042e
 8000dbc:	2000043c 	.word	0x2000043c
 8000dc0:	20000438 	.word	0x20000438
 8000dc4:	20000436 	.word	0x20000436
 8000dc8:	20000444 	.word	0x20000444
 8000dcc:	20000300 	.word	0x20000300
 8000dd0:	20000442 	.word	0x20000442
 8000dd4:	20000440 	.word	0x20000440
 8000dd8:	2000044a 	.word	0x2000044a
 8000ddc:	2000043e 	.word	0x2000043e
 8000de0:	2000044c 	.word	0x2000044c
 8000de4:	20000306 	.word	0x20000306
 8000de8:	20000304 	.word	0x20000304

08000dec <LearningPhase1>:
 **********************************************************************************/

void LearningPhase1(uint16_t *pkI, int16_t *pkBP)
{
	//---- Recursively compute the average and max of peaks ------ //
	if (*pkI > st_mx_pk) st_mx_pk = *pkI;
 8000dec:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <LearningPhase1+0xac>)
 8000dee:	f8b0 c000 	ldrh.w	ip, [r0]
 8000df2:	881a      	ldrh	r2, [r3, #0]
 8000df4:	4594      	cmp	ip, r2
{
 8000df6:	b410      	push	{r4}
	if (*pkI > st_mx_pk) st_mx_pk = *pkI;
 8000df8:	bf88      	it	hi
 8000dfa:	f8a3 c000 	strhhi.w	ip, [r3]

	// ---- If the very first time calling this function --- //
	if (PT_dptr->PT_state == START_UP) {
 8000dfe:	4b27      	ldr	r3, [pc, #156]	; (8000e9c <LearningPhase1+0xb0>)
 8000e00:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
	if (*pkI > st_mx_pk) st_mx_pk = *pkI;
 8000e04:	bf88      	it	hi
 8000e06:	4662      	movhi	r2, ip
	if (PT_dptr->PT_state == START_UP) {
 8000e08:	b954      	cbnz	r4, 8000e20 <LearningPhase1+0x34>
		PT_dptr->PT_state = LEARN_PH_1;
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	80da      	strh	r2, [r3, #6]
		st_mean_pk = *pkI;
 8000e0e:	4c24      	ldr	r4, [pc, #144]	; (8000ea0 <LearningPhase1+0xb4>)
		st_mean_pkBP = *pkBP; 
 8000e10:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <LearningPhase1+0xb8>)
		st_mean_pk = *pkI;
 8000e12:	8800      	ldrh	r0, [r0, #0]
		st_mean_pkBP = *pkBP; 
 8000e14:	880a      	ldrh	r2, [r1, #0]
		st_mean_pk = *pkI;
 8000e16:	8020      	strh	r0, [r4, #0]
		st_mean_pkBP = *pkBP; 
 8000e18:	801a      	strh	r2, [r3, #0]
		PT_dptr->NPKF = (st_mean_pkBP >> 3);
		PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
		PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;

	}
}
 8000e1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e1e:	4770      	bx	lr
	else if(Count_SinceRR < PT2000MS){
 8000e20:	4821      	ldr	r0, [pc, #132]	; (8000ea8 <LearningPhase1+0xbc>)
 8000e22:	f9b0 0000 	ldrsh.w	r0, [r0]
 8000e26:	f5b0 7f34 	cmp.w	r0, #720	; 0x2d0
 8000e2a:	da11      	bge.n	8000e50 <LearningPhase1+0x64>
		st_mean_pk = (st_mean_pk + *pkI) >> 1;
 8000e2c:	4c1c      	ldr	r4, [pc, #112]	; (8000ea0 <LearningPhase1+0xb4>)
		st_mean_pkBP = (st_mean_pkBP + *pkBP) >> 1;
 8000e2e:	481d      	ldr	r0, [pc, #116]	; (8000ea4 <LearningPhase1+0xb8>)
		st_mean_pk = (st_mean_pk + *pkI) >> 1;
 8000e30:	8822      	ldrh	r2, [r4, #0]
		st_mean_pkBP = (st_mean_pkBP + *pkBP) >> 1;
 8000e32:	f9b0 3000 	ldrsh.w	r3, [r0]
 8000e36:	f9b1 1000 	ldrsh.w	r1, [r1]
		st_mean_pk = (st_mean_pk + *pkI) >> 1;
 8000e3a:	4494      	add	ip, r2
		st_mean_pkBP = (st_mean_pkBP + *pkBP) >> 1;
 8000e3c:	440b      	add	r3, r1
		st_mean_pk = (st_mean_pk + *pkI) >> 1;
 8000e3e:	ea4f 0c6c 	mov.w	ip, ip, asr #1
		st_mean_pkBP = (st_mean_pkBP + *pkBP) >> 1;
 8000e42:	105b      	asrs	r3, r3, #1
		st_mean_pk = (st_mean_pk + *pkI) >> 1;
 8000e44:	f8a4 c000 	strh.w	ip, [r4]
		st_mean_pkBP = (st_mean_pkBP + *pkBP) >> 1;
 8000e48:	8003      	strh	r3, [r0, #0]
}
 8000e4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e4e:	4770      	bx	lr
		PT_dptr->NPKI = (st_mean_pk >> 3);
 8000e50:	4913      	ldr	r1, [pc, #76]	; (8000ea0 <LearningPhase1+0xb4>)
 8000e52:	8808      	ldrh	r0, [r1, #0]
		PT_dptr->SPKI = (st_mx_pk >> 1);
 8000e54:	0852      	lsrs	r2, r2, #1
		PT_dptr->NPKI = (st_mean_pk >> 3);
 8000e56:	08c0      	lsrs	r0, r0, #3
		PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 8000e58:	1a11      	subs	r1, r2, r0
 8000e5a:	eb00 01a1 	add.w	r1, r0, r1, asr #2
		PT_dptr->SPKI = (st_mx_pk >> 1);
 8000e5e:	82da      	strh	r2, [r3, #22]
		PT_dptr->NPKI = (st_mean_pk >> 3);
 8000e60:	8318      	strh	r0, [r3, #24]
		PT_dptr->NPKF = (st_mean_pkBP >> 3);
 8000e62:	4a10      	ldr	r2, [pc, #64]	; (8000ea4 <LearningPhase1+0xb8>)
		PT_dptr->SPKF = (Best_PeakBP >> 1);
 8000e64:	4811      	ldr	r0, [pc, #68]	; (8000eac <LearningPhase1+0xc0>)
		PT_dptr->NPKF = (st_mean_pkBP >> 3);
 8000e66:	f9b2 2000 	ldrsh.w	r2, [r2]
		PT_dptr->PT_state = LEARN_PH_2;
 8000e6a:	2402      	movs	r4, #2
 8000e6c:	80dc      	strh	r4, [r3, #6]
		PT_dptr->SPKF = (Best_PeakBP >> 1);
 8000e6e:	f9b0 4000 	ldrsh.w	r4, [r0]
		PT_dptr->NPKF = (st_mean_pkBP >> 3);
 8000e72:	10d2      	asrs	r2, r2, #3
		PT_dptr->SPKF = (Best_PeakBP >> 1);
 8000e74:	1064      	asrs	r4, r4, #1
		PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 8000e76:	1aa0      	subs	r0, r4, r2
		PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 8000e78:	b289      	uxth	r1, r1
		PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 8000e7a:	eb02 00a0 	add.w	r0, r2, r0, asr #2
		PT_dptr->ThI2 = PT_dptr->ThI1 >> 1;
 8000e7e:	ea4f 0c51 	mov.w	ip, r1, lsr #1
		PT_dptr->NPKF = (st_mean_pkBP >> 3);
 8000e82:	841a      	strh	r2, [r3, #32]
		PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;
 8000e84:	1042      	asrs	r2, r0, #1
		PT_dptr->SPKF = (Best_PeakBP >> 1);
 8000e86:	83dc      	strh	r4, [r3, #30]
		PT_dptr->ThI2 = PT_dptr->ThI1 >> 1;
 8000e88:	f8a3 c01a 	strh.w	ip, [r3, #26]
}
 8000e8c:	f85d 4b04 	ldr.w	r4, [sp], #4
		PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 8000e90:	8299      	strh	r1, [r3, #20]
		PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 8000e92:	8398      	strh	r0, [r3, #28]
		PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;
 8000e94:	845a      	strh	r2, [r3, #34]	; 0x22
}
 8000e96:	4770      	bx	lr
 8000e98:	2000044a 	.word	0x2000044a
 8000e9c:	20000310 	.word	0x20000310
 8000ea0:	20000446 	.word	0x20000446
 8000ea4:	20000448 	.word	0x20000448
 8000ea8:	20000302 	.word	0x20000302
 8000eac:	200002fc 	.word	0x200002fc

08000eb0 <LPFilter>:
void LPFilter(int16_t *val)
{
	// -- To avoid using modulo employ half-pointer -- //
	int16_t half_pointer, w;

	half_pointer = PT_dptr->LP_pointer - (LP_BUFFER_SIZE >> 1);
 8000eb0:	4919      	ldr	r1, [pc, #100]	; (8000f18 <LPFilter+0x68>)
 8000eb2:	f9b1 c000 	ldrsh.w	ip, [r1]
 8000eb6:	fa1f f28c 	uxth.w	r2, ip
 8000eba:	1f93      	subs	r3, r2, #6
 8000ebc:	b21b      	sxth	r3, r3

	if (half_pointer < 0) 
 8000ebe:	2b00      	cmp	r3, #0
		half_pointer += LP_BUFFER_SIZE;
 8000ec0:	bfbc      	itt	lt
 8000ec2:	1d93      	addlt	r3, r2, #6
 8000ec4:	b21b      	sxthlt	r3, r3
{
 8000ec6:	b570      	push	{r4, r5, r6, lr}
#if (FILTER_FORM == 1)
		w = *val + (PT_dptr->LP_buf[1] << 1) - PT_dptr->LP_buf[0];
		*val = w - (PT_dptr->LP_buf[half_pointer] << 1) + PT_dptr->LP_buf[PT_dptr->LP_pointer];
		PT_dptr->LP_buf[PT_dptr->LP_pointer] = w;
#else
		w = (LP_y_old << 1) - LP_y_new + *val - (PT_dptr->LP_buf[half_pointer] << 1) + PT_dptr->LP_buf[PT_dptr->LP_pointer];
 8000ec8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8000ecc:	f9b0 e000 	ldrsh.w	lr, [r0]
 8000ed0:	4d12      	ldr	r5, [pc, #72]	; (8000f1c <LPFilter+0x6c>)
 8000ed2:	4813      	ldr	r0, [pc, #76]	; (8000f20 <LPFilter+0x70>)
 8000ed4:	8dde      	ldrh	r6, [r3, #46]	; 0x2e
 8000ed6:	f9b0 4000 	ldrsh.w	r4, [r0]
 8000eda:	882b      	ldrh	r3, [r5, #0]
		LP_y_new = LP_y_old;
 8000edc:	802c      	strh	r4, [r5, #0]
		w = (LP_y_old << 1) - LP_y_new + *val - (PT_dptr->LP_buf[half_pointer] << 1) + PT_dptr->LP_buf[PT_dptr->LP_pointer];
 8000ede:	f10c 0c14 	add.w	ip, ip, #20
 8000ee2:	eb01 0c4c 	add.w	ip, r1, ip, lsl #1
 8000ee6:	ebc3 0344 	rsb	r3, r3, r4, lsl #1
 8000eea:	f8bc 4006 	ldrh.w	r4, [ip, #6]
		LP_y_old = w;
		PT_dptr->LP_buf[PT_dptr->LP_pointer] = *val;
 8000eee:	f8ac e006 	strh.w	lr, [ip, #6]
		w = (LP_y_old << 1) - LP_y_new + *val - (PT_dptr->LP_buf[half_pointer] << 1) + PT_dptr->LP_buf[PT_dptr->LP_pointer];
 8000ef2:	4423      	add	r3, r4
		if (w >= 0)
			PT_dptr->LPF_val = w >> 5;
		else
			PT_dptr->LPF_val = (w >> 5) | 0xF800;

		if (++PT_dptr->LP_pointer == LP_BUFFER_SIZE) 
 8000ef4:	3201      	adds	r2, #1
		w = (LP_y_old << 1) - LP_y_new + *val - (PT_dptr->LP_buf[half_pointer] << 1) + PT_dptr->LP_buf[PT_dptr->LP_pointer];
 8000ef6:	4473      	add	r3, lr
		if (++PT_dptr->LP_pointer == LP_BUFFER_SIZE) 
 8000ef8:	b212      	sxth	r2, r2
		w = (LP_y_old << 1) - LP_y_new + *val - (PT_dptr->LP_buf[half_pointer] << 1) + PT_dptr->LP_buf[PT_dptr->LP_pointer];
 8000efa:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
 8000efe:	b21b      	sxth	r3, r3
		if (++PT_dptr->LP_pointer == LP_BUFFER_SIZE) 
 8000f00:	2a0c      	cmp	r2, #12
			PT_dptr->LPF_val = (w >> 5) | 0xF800;
 8000f02:	ea4f 1463 	mov.w	r4, r3, asr #5
		LP_y_old = w;
 8000f06:	8003      	strh	r3, [r0, #0]
			PT_dptr->LP_pointer = 0;
 8000f08:	bf08      	it	eq
 8000f0a:	2300      	moveq	r3, #0
 8000f0c:	814c      	strh	r4, [r1, #10]
		if (++PT_dptr->LP_pointer == LP_BUFFER_SIZE) 
 8000f0e:	bf14      	ite	ne
 8000f10:	800a      	strhne	r2, [r1, #0]
			PT_dptr->LP_pointer = 0;
 8000f12:	800b      	strheq	r3, [r1, #0]
}
 8000f14:	bd70      	pop	{r4, r5, r6, pc}
 8000f16:	bf00      	nop
 8000f18:	20000310 	.word	0x20000310
 8000f1c:	20000304 	.word	0x20000304
 8000f20:	20000306 	.word	0x20000306

08000f24 <HPFilter>:
**********************************************************************************/
void HPFilter(void)
{
	// -- To avoid using modulo employ half-pointer -- //
	int16_t half_pointer, h_prev_pointer;
	half_pointer = PT_dptr->HP_pointer - (HP_BUFFER_SIZE >> 1);
 8000f24:	4923      	ldr	r1, [pc, #140]	; (8000fb4 <HPFilter+0x90>)
 8000f26:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8000f2a:	b282      	uxth	r2, r0
 8000f2c:	f1a2 0310 	sub.w	r3, r2, #16
 8000f30:	fa1f fc83 	uxth.w	ip, r3
 8000f34:	b21b      	sxth	r3, r3

	if (half_pointer < 0)
 8000f36:	2b00      	cmp	r3, #0
{
 8000f38:	b570      	push	{r4, r5, r6, lr}
	if (half_pointer < 0)
 8000f3a:	db34      	blt.n	8000fa6 <HPFilter+0x82>
		half_pointer += HP_BUFFER_SIZE;
	
	if (!half_pointer)
 8000f3c:	b383      	cbz	r3, 8000fa0 <HPFilter+0x7c>
		h_prev_pointer = HP_BUFFER_SIZE - 1;
	else
		h_prev_pointer = half_pointer - 1;
 8000f3e:	f10c 3cff 	add.w	ip, ip, #4294967295
#if (FILTER_FORM == 1)
	y_h = PT_dptr->LPF_val + PT_dptr->HP_buf[0];
	PT_dptr->LPF_val = ((PT_dptr->HP_buf[PT_dptr->HP_pointer] - y_h) >> 5) + PT_dptr->HP_buf[half_pointer] - PT_dptr->HP_buf[h_prev_pointer];
	PT_dptr->HP_buf[PT_dptr->HP_pointer] = y_h;
#else
	y_h += (PT_dptr->HP_buf[PT_dptr->HP_pointer] >> 5) - (PT_dptr->LPF_val >> 5) + PT_dptr->HP_buf[half_pointer] - PT_dptr->HP_buf[h_prev_pointer];
 8000f42:	fa0f fc8c 	sxth.w	ip, ip
 8000f46:	4c1c      	ldr	r4, [pc, #112]	; (8000fb8 <HPFilter+0x94>)
 8000f48:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8000f4c:	eb01 0c4c 	add.w	ip, r1, ip, lsl #1
 8000f50:	3020      	adds	r0, #32
 8000f52:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8000f56:	f8b3 5046 	ldrh.w	r5, [r3, #70]	; 0x46
 8000f5a:	f8bc e046 	ldrh.w	lr, [ip, #70]	; 0x46
 8000f5e:	8823      	ldrh	r3, [r4, #0]
 8000f60:	f9b1 c00a 	ldrsh.w	ip, [r1, #10]
 8000f64:	f9b0 6006 	ldrsh.w	r6, [r0, #6]
	PT_dptr->HP_buf[PT_dptr->HP_pointer] = PT_dptr->LPF_val;
 8000f68:	f8a0 c006 	strh.w	ip, [r0, #6]
	y_h += (PT_dptr->HP_buf[PT_dptr->HP_pointer] >> 5) - (PT_dptr->LPF_val >> 5) + PT_dptr->HP_buf[half_pointer] - PT_dptr->HP_buf[h_prev_pointer];
 8000f6c:	eba3 136c 	sub.w	r3, r3, ip, asr #5
 8000f70:	eb03 1366 	add.w	r3, r3, r6, asr #5
 8000f74:	442b      	add	r3, r5
 8000f76:	eba3 030e 	sub.w	r3, r3, lr
 8000f7a:	b21b      	sxth	r3, r3
	
#endif
	// ------- Again slightly gaining down --------- //
	if (y_h >= 0)
 8000f7c:	2b00      	cmp	r3, #0
		PT_dptr->HPF_val = (y_h >> 1);
	else
		PT_dptr->HPF_val = (y_h >> 1) | 0xF800;
 8000f7e:	bfb8      	it	lt
 8000f80:	480e      	ldrlt	r0, [pc, #56]	; (8000fbc <HPFilter+0x98>)
	y_h += (PT_dptr->HP_buf[PT_dptr->HP_pointer] >> 5) - (PT_dptr->LPF_val >> 5) + PT_dptr->HP_buf[half_pointer] - PT_dptr->HP_buf[h_prev_pointer];
 8000f82:	8023      	strh	r3, [r4, #0]

	if (++PT_dptr->HP_pointer == HP_BUFFER_SIZE) PT_dptr->HP_pointer = 0;
 8000f84:	f102 0201 	add.w	r2, r2, #1
 8000f88:	b212      	sxth	r2, r2
		PT_dptr->HPF_val = (y_h >> 1);
 8000f8a:	bfac      	ite	ge
 8000f8c:	105b      	asrge	r3, r3, #1
		PT_dptr->HPF_val = (y_h >> 1) | 0xF800;
 8000f8e:	ea40 0363 	orrlt.w	r3, r0, r3, asr #1
	if (++PT_dptr->HP_pointer == HP_BUFFER_SIZE) PT_dptr->HP_pointer = 0;
 8000f92:	2a20      	cmp	r2, #32
 8000f94:	818b      	strh	r3, [r1, #12]
 8000f96:	bf0a      	itet	eq
 8000f98:	2300      	moveq	r3, #0
 8000f9a:	804a      	strhne	r2, [r1, #2]
 8000f9c:	804b      	strheq	r3, [r1, #2]
}
 8000f9e:	bd70      	pop	{r4, r5, r6, pc}
 8000fa0:	f04f 0c1f 	mov.w	ip, #31
 8000fa4:	e7cf      	b.n	8000f46 <HPFilter+0x22>
		half_pointer += HP_BUFFER_SIZE;
 8000fa6:	f102 0310 	add.w	r3, r2, #16
 8000faa:	fa1f fc83 	uxth.w	ip, r3
 8000fae:	b21b      	sxth	r3, r3
 8000fb0:	e7c4      	b.n	8000f3c <HPFilter+0x18>
 8000fb2:	bf00      	nop
 8000fb4:	20000310 	.word	0x20000310
 8000fb8:	2000044c 	.word	0x2000044c
 8000fbc:	fffff800 	.word	0xfffff800

08000fc0 <UpdateRR>:
RR_High_Lim		= 1.16*RR_M = ((116/100) * RR_M) = RR_M + (4/25)*RR_M
RR_Missed_Lim	= 1.66*RR_M = ((166/100) * RR_M) = RR_M + (33/50)*RR_M

**********************************************************************************/
void UpdateRR(int16_t qrs)
{   
 8000fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
	// ---------- Update most 8 Recent RR mean Interval------------- //
	RR1_sum += qrs;
	RR1_sum -= PT_dptr->RR_AVRG1_buf[RR1_p];
 8000fc2:	4c3d      	ldr	r4, [pc, #244]	; (80010b8 <UpdateRR+0xf8>)
 8000fc4:	4a3d      	ldr	r2, [pc, #244]	; (80010bc <UpdateRR+0xfc>)
 8000fc6:	f9b4 1000 	ldrsh.w	r1, [r4]
	RR1_sum += qrs;
 8000fca:	4d3d      	ldr	r5, [pc, #244]	; (80010c0 <UpdateRR+0x100>)
	RR1_sum -= PT_dptr->RR_AVRG1_buf[RR1_p];
 8000fcc:	f101 0e7c 	add.w	lr, r1, #124	; 0x7c
 8000fd0:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
	RR1_sum += qrs;
 8000fd4:	882b      	ldrh	r3, [r5, #0]
	RR1_sum -= PT_dptr->RR_AVRG1_buf[RR1_p];
 8000fd6:	f8be 6002 	ldrh.w	r6, [lr, #2]

	PT_dptr->RR_AVRG1_buf[RR1_p] = qrs;
 8000fda:	f8ae 0002 	strh.w	r0, [lr, #2]
	RR1_sum += qrs;
 8000fde:	fa1f fc80 	uxth.w	ip, r0
 8000fe2:	4463      	add	r3, ip
	RR1_sum -= PT_dptr->RR_AVRG1_buf[RR1_p];
 8000fe4:	1b9b      	subs	r3, r3, r6
 8000fe6:	b21b      	sxth	r3, r3
	PT_dptr->Recent_RR_M = RR1_sum/RR_BUFFER_SIZE; 
	if (++RR1_p == RR_BUFFER_SIZE) 
 8000fe8:	3101      	adds	r1, #1
 8000fea:	b209      	sxth	r1, r1
	RR1_sum -= PT_dptr->RR_AVRG1_buf[RR1_p];
 8000fec:	802b      	strh	r3, [r5, #0]
	PT_dptr->Recent_RR_M = RR1_sum/RR_BUFFER_SIZE; 
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	bfb8      	it	lt
 8000ff2:	3307      	addlt	r3, #7
	if (++RR1_p == RR_BUFFER_SIZE) 
 8000ff4:	2908      	cmp	r1, #8
		RR1_p = 0;
 8000ff6:	bf08      	it	eq
 8000ff8:	2100      	moveq	r1, #0
 8000ffa:	8021      	strh	r1, [r4, #0]



	// ------ Update Selected Beat RR mean if qrs in range --------- //
	if (qrs >= PT_dptr->RR_Low_L && qrs <= PT_dptr->RR_High_L) {
 8000ffc:	f9b2 1026 	ldrsh.w	r1, [r2, #38]	; 0x26
	PT_dptr->Recent_RR_M = RR1_sum/RR_BUFFER_SIZE; 
 8001000:	10db      	asrs	r3, r3, #3
	if (qrs >= PT_dptr->RR_Low_L && qrs <= PT_dptr->RR_High_L) {
 8001002:	4281      	cmp	r1, r0
	PT_dptr->Recent_RR_M = RR1_sum/RR_BUFFER_SIZE; 
 8001004:	8113      	strh	r3, [r2, #8]
	if (qrs >= PT_dptr->RR_Low_L && qrs <= PT_dptr->RR_High_L) {
 8001006:	dc42      	bgt.n	800108e <UpdateRR+0xce>
 8001008:	f9b2 1028 	ldrsh.w	r1, [r2, #40]	; 0x28
 800100c:	4281      	cmp	r1, r0
 800100e:	db3e      	blt.n	800108e <UpdateRR+0xce>
		// ------ Update selective RR mean ----- //
		RR2_sum += qrs;
		RR2_sum -= PT_dptr->RR_AVRG2_buf[RR2_p];
 8001010:	4e2c      	ldr	r6, [pc, #176]	; (80010c4 <UpdateRR+0x104>)
		RR2_sum += qrs;
 8001012:	4f2d      	ldr	r7, [pc, #180]	; (80010c8 <UpdateRR+0x108>)
		RR2_sum -= PT_dptr->RR_AVRG2_buf[RR2_p];
 8001014:	f9b6 4000 	ldrsh.w	r4, [r6]
		RR2_sum += qrs;
 8001018:	8839      	ldrh	r1, [r7, #0]
		RR2_sum -= PT_dptr->RR_AVRG2_buf[RR2_p];
 800101a:	f104 0584 	add.w	r5, r4, #132	; 0x84
 800101e:	eb02 0545 	add.w	r5, r2, r5, lsl #1
		RR2_sum += qrs;
 8001022:	4461      	add	r1, ip
		RR2_sum -= PT_dptr->RR_AVRG2_buf[RR2_p];
 8001024:	f8b5 c002 	ldrh.w	ip, [r5, #2]

		PT_dptr->RR_AVRG2_buf[RR2_p] = qrs;
 8001028:	8068      	strh	r0, [r5, #2]
		RR2_sum -= PT_dptr->RR_AVRG2_buf[RR2_p];
 800102a:	eba1 010c 	sub.w	r1, r1, ip
 800102e:	b209      	sxth	r1, r1
		PT_dptr->RR_M = RR2_sum / RR_BUFFER_SIZE;
		if (++RR2_p == RR_BUFFER_SIZE) 
 8001030:	3401      	adds	r4, #1
 8001032:	b224      	sxth	r4, r4
		RR2_sum -= PT_dptr->RR_AVRG2_buf[RR2_p];
 8001034:	8039      	strh	r1, [r7, #0]
		PT_dptr->RR_M = RR2_sum / RR_BUFFER_SIZE;
 8001036:	2900      	cmp	r1, #0
			RR2_p = 0;

		// --------- Update Limits ------------ //
		PT_dptr->RR_Low_L = PT_dptr->Recent_RR_M - (PT_dptr->Recent_RR_M << 1) / 25;
 8001038:	4d24      	ldr	r5, [pc, #144]	; (80010cc <UpdateRR+0x10c>)
		PT_dptr->RR_M = RR2_sum / RR_BUFFER_SIZE;
 800103a:	bfb8      	it	lt
 800103c:	3107      	addlt	r1, #7
		if (++RR2_p == RR_BUFFER_SIZE) 
 800103e:	2c08      	cmp	r4, #8
 8001040:	bf18      	it	ne
 8001042:	8034      	strhne	r4, [r6, #0]
		PT_dptr->RR_Low_L = PT_dptr->Recent_RR_M - (PT_dptr->Recent_RR_M << 1) / 25;
 8001044:	ea4f 0443 	mov.w	r4, r3, lsl #1
 8001048:	fb85 c704 	smull	ip, r7, r5, r4
			RR2_p = 0;
 800104c:	bf08      	it	eq
 800104e:	2000      	moveq	r0, #0
		PT_dptr->RR_Low_L = PT_dptr->Recent_RR_M - (PT_dptr->Recent_RR_M << 1) / 25;
 8001050:	ea4f 74e4 	mov.w	r4, r4, asr #31
			RR2_p = 0;
 8001054:	bf08      	it	eq
 8001056:	8030      	strheq	r0, [r6, #0]
		PT_dptr->RR_Low_L = PT_dptr->Recent_RR_M - (PT_dptr->Recent_RR_M << 1) / 25;
 8001058:	eba4 04e7 	sub.w	r4, r4, r7, asr #3
 800105c:	b29e      	uxth	r6, r3
		PT_dptr->RR_M = RR2_sum / RR_BUFFER_SIZE;
 800105e:	10c9      	asrs	r1, r1, #3
		PT_dptr->RR_High_L = PT_dptr->Recent_RR_M + (PT_dptr->Recent_RR_M << 2) / 25;
 8001060:	009b      	lsls	r3, r3, #2
		PT_dptr->RR_Low_L = PT_dptr->Recent_RR_M - (PT_dptr->Recent_RR_M << 1) / 25;
 8001062:	4434      	add	r4, r6
		PT_dptr->RR_Missed_L = PT_dptr->RR_M + (PT_dptr->RR_M * 33) / 50;
 8001064:	eb01 1041 	add.w	r0, r1, r1, lsl #5
		PT_dptr->RR_Low_L = PT_dptr->Recent_RR_M - (PT_dptr->Recent_RR_M << 1) / 25;
 8001068:	84d4      	strh	r4, [r2, #38]	; 0x26
		PT_dptr->RR_High_L = PT_dptr->Recent_RR_M + (PT_dptr->Recent_RR_M << 2) / 25;
 800106a:	fb85 7403 	smull	r7, r4, r5, r3
 800106e:	17db      	asrs	r3, r3, #31
 8001070:	ebc3 03e4 	rsb	r3, r3, r4, asr #3
		PT_dptr->RR_Missed_L = PT_dptr->RR_M + (PT_dptr->RR_M * 33) / 50;
 8001074:	fb85 4500 	smull	r4, r5, r5, r0
 8001078:	17c0      	asrs	r0, r0, #31
 800107a:	ebc0 1025 	rsb	r0, r0, r5, asr #4
		PT_dptr->RR_M = RR2_sum / RR_BUFFER_SIZE;
 800107e:	8491      	strh	r1, [r2, #36]	; 0x24
		PT_dptr->RR_High_L = PT_dptr->Recent_RR_M + (PT_dptr->Recent_RR_M << 2) / 25;
 8001080:	4433      	add	r3, r6
		PT_dptr->RR_Missed_L = PT_dptr->RR_M + (PT_dptr->RR_M * 33) / 50;
 8001082:	4401      	add	r1, r0
		PT_dptr->HR_State = REGULAR_HR;
 8001084:	2000      	movs	r0, #0
		PT_dptr->RR_High_L = PT_dptr->Recent_RR_M + (PT_dptr->Recent_RR_M << 2) / 25;
 8001086:	8513      	strh	r3, [r2, #40]	; 0x28
		PT_dptr->RR_Missed_L = PT_dptr->RR_M + (PT_dptr->RR_M * 33) / 50;
 8001088:	8551      	strh	r1, [r2, #42]	; 0x2a
		PT_dptr->HR_State = REGULAR_HR;
 800108a:	8590      	strh	r0, [r2, #44]	; 0x2c
		PT_dptr->ThI1 >>= 1;
		PT_dptr->ThF1 >>= 1;
		PT_dptr->HR_State = IRREGULAR_HR;
	}
	
}
 800108c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PT_dptr->RR_Missed_L = PT_dptr->Recent_RR_M + (PT_dptr->Recent_RR_M * 33) / 50;
 800108e:	480f      	ldr	r0, [pc, #60]	; (80010cc <UpdateRR+0x10c>)
 8001090:	eb03 1143 	add.w	r1, r3, r3, lsl #5
 8001094:	fb80 4001 	smull	r4, r0, r0, r1
 8001098:	17c9      	asrs	r1, r1, #31
 800109a:	ebc1 1120 	rsb	r1, r1, r0, asr #4
		PT_dptr->ThI1 >>= 1;
 800109e:	8a94      	ldrh	r4, [r2, #20]
		PT_dptr->ThF1 >>= 1;
 80010a0:	f9b2 001c 	ldrsh.w	r0, [r2, #28]
		PT_dptr->RR_Missed_L = PT_dptr->Recent_RR_M + (PT_dptr->Recent_RR_M * 33) / 50;
 80010a4:	440b      	add	r3, r1
		PT_dptr->ThI1 >>= 1;
 80010a6:	0864      	lsrs	r4, r4, #1
		PT_dptr->ThF1 >>= 1;
 80010a8:	1041      	asrs	r1, r0, #1
		PT_dptr->RR_Missed_L = PT_dptr->Recent_RR_M + (PT_dptr->Recent_RR_M * 33) / 50;
 80010aa:	8553      	strh	r3, [r2, #42]	; 0x2a
		PT_dptr->HR_State = IRREGULAR_HR;
 80010ac:	2301      	movs	r3, #1
		PT_dptr->ThI1 >>= 1;
 80010ae:	8294      	strh	r4, [r2, #20]
		PT_dptr->ThF1 >>= 1;
 80010b0:	8391      	strh	r1, [r2, #28]
		PT_dptr->HR_State = IRREGULAR_HR;
 80010b2:	8593      	strh	r3, [r2, #44]	; 0x2c
}
 80010b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000436 	.word	0x20000436
 80010bc:	20000310 	.word	0x20000310
 80010c0:	20000438 	.word	0x20000438
 80010c4:	2000043a 	.word	0x2000043a
 80010c8:	2000043c 	.word	0x2000043c
 80010cc:	51eb851f 	.word	0x51eb851f

080010d0 <PT_StateMachine>:
{
 80010d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	PeakDtcBP(PT_dptr->HPF_val);							// Store BP signal highest peak
 80010d4:	4ca1      	ldr	r4, [pc, #644]	; (800135c <PT_StateMachine+0x28c>)
	if (DR_sample <= Prev_valBP && Prev_valBP > Prev_Prev_valBP) {
 80010d6:	4da2      	ldr	r5, [pc, #648]	; (8001360 <PT_StateMachine+0x290>)
 80010d8:	4ea2      	ldr	r6, [pc, #648]	; (8001364 <PT_StateMachine+0x294>)
{
 80010da:	b085      	sub	sp, #20
 80010dc:	4603      	mov	r3, r0
	LPFilter(&datum);										// LowPass filtering
 80010de:	f10d 0006 	add.w	r0, sp, #6
{
 80010e2:	f8ad 3006 	strh.w	r3, [sp, #6]
	LPFilter(&datum);										// LowPass filtering
 80010e6:	f7ff fee3 	bl	8000eb0 <LPFilter>
	HPFilter();												// HighPass filtering
 80010ea:	f7ff ff1b 	bl	8000f24 <HPFilter>
	PeakDtcBP(PT_dptr->HPF_val);							// Store BP signal highest peak
 80010ee:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
	if (DR_sample <= Prev_valBP && Prev_valBP > Prev_Prev_valBP) {
 80010f2:	f9b5 2000 	ldrsh.w	r2, [r5]
	if (DR_sample < 0) DR_sample = -DR_sample;
 80010f6:	2900      	cmp	r1, #0
 80010f8:	b28b      	uxth	r3, r1
 80010fa:	bfb6      	itet	lt
 80010fc:	4258      	neglt	r0, r3
 80010fe:	4608      	movge	r0, r1
 8001100:	b200      	sxthlt	r0, r0
	if (DR_sample <= Prev_valBP && Prev_valBP > Prev_Prev_valBP) {
 8001102:	4282      	cmp	r2, r0
 8001104:	db04      	blt.n	8001110 <PT_StateMachine+0x40>
 8001106:	f9b6 7000 	ldrsh.w	r7, [r6]
 800110a:	4297      	cmp	r7, r2
 800110c:	f2c0 80ba 	blt.w	8001284 <PT_StateMachine+0x1b4>
	Prev_valBP = DR_sample;
 8001110:	8028      	strh	r0, [r5, #0]
	Prev_Prev_valBP = Prev_valBP;
 8001112:	8032      	strh	r2, [r6, #0]
	w = PT_dptr->DR_buf[0] - PT_dptr->DR_buf[2];
 8001114:	f9b4 0086 	ldrsh.w	r0, [r4, #134]	; 0x86
 8001118:	f9b4 208a 	ldrsh.w	r2, [r4, #138]	; 0x8a
	PT_dptr->DR_buf[0] = PT_dptr->HPF_val;
 800111c:	f8a4 1086 	strh.w	r1, [r4, #134]	; 0x86
	w += ((PT_dptr->HPF_val - PT_dptr->DR_buf[3]) << 1);
 8001120:	f8b4 108c 	ldrh.w	r1, [r4, #140]	; 0x8c
	PT_dptr->DR_buf[3] = PT_dptr->DR_buf[2];
 8001124:	f8a4 208c 	strh.w	r2, [r4, #140]	; 0x8c
	w += ((PT_dptr->HPF_val - PT_dptr->DR_buf[3]) << 1);
 8001128:	1a59      	subs	r1, r3, r1
	w = PT_dptr->DR_buf[0] - PT_dptr->DR_buf[2];
 800112a:	1a83      	subs	r3, r0, r2
	w += ((PT_dptr->HPF_val - PT_dptr->DR_buf[3]) << 1);
 800112c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
	w >>= 3;
 8001130:	f343 03cc 	sbfx	r3, r3, #3, #13
	PT_dptr->DR_buf[2] = PT_dptr->DR_buf[1];
 8001134:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88
	PT_dptr->DR_buf[1] = PT_dptr->DR_buf[0];
 8001138:	f8a4 0088 	strh.w	r0, [r4, #136]	; 0x88
	if (DR_sample <= Prev_valDR && Prev_valDR > Prev_Prev_valDR) {
 800113c:	488a      	ldr	r0, [pc, #552]	; (8001368 <PT_StateMachine+0x298>)
	PT_dptr->DR_buf[2] = PT_dptr->DR_buf[1];
 800113e:	f8a4 208a 	strh.w	r2, [r4, #138]	; 0x8a
	if (DR_sample < 0) DR_sample = -DR_sample;
 8001142:	2b00      	cmp	r3, #0
 8001144:	b29a      	uxth	r2, r3
	PT_dptr->DRF_val = w;
 8001146:	81e3      	strh	r3, [r4, #14]
	if (DR_sample <= Prev_valDR && Prev_valDR > Prev_Prev_valDR) {
 8001148:	f9b0 1000 	ldrsh.w	r1, [r0]
 800114c:	4d87      	ldr	r5, [pc, #540]	; (800136c <PT_StateMachine+0x29c>)
	if (DR_sample < 0) DR_sample = -DR_sample;
 800114e:	bfbc      	itt	lt
 8001150:	4253      	neglt	r3, r2
 8001152:	b21b      	sxthlt	r3, r3
	if (DR_sample <= Prev_valDR && Prev_valDR > Prev_Prev_valDR) {
 8001154:	4299      	cmp	r1, r3
 8001156:	db04      	blt.n	8001162 <PT_StateMachine+0x92>
 8001158:	f9b5 6000 	ldrsh.w	r6, [r5]
 800115c:	428e      	cmp	r6, r1
 800115e:	f2c0 808a 	blt.w	8001276 <PT_StateMachine+0x1a6>
	Prev_Prev_valDR = Prev_valDR;
 8001162:	8029      	strh	r1, [r5, #0]
	if (PT_dptr->DRF_val > SQR_LIM_VAL || PT_dptr->DRF_val < (-SQR_LIM_VAL))
 8001164:	f502 7180 	add.w	r1, r2, #256	; 0x100
 8001168:	b289      	uxth	r1, r1
 800116a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
	Prev_valDR = DR_sample;
 800116e:	8003      	strh	r3, [r0, #0]
	if (PT_dptr->DRF_val > SQR_LIM_VAL || PT_dptr->DRF_val < (-SQR_LIM_VAL))
 8001170:	d80b      	bhi.n	800118a <PT_StateMachine+0xba>
		PT_dptr->SQF_val = temp*temp;
 8001172:	fb12 f202 	smulbb	r2, r2, r2
 8001176:	b293      	uxth	r3, r2
	if (PT_dptr->SQF_val > SQR_LIM_OUT)
 8001178:	f247 5230 	movw	r2, #30000	; 0x7530
 800117c:	4293      	cmp	r3, r2
 800117e:	8223      	strh	r3, [r4, #16]
 8001180:	d803      	bhi.n	800118a <PT_StateMachine+0xba>
	if (MV_sum < (UINT16_MAX - PT_dptr->SQF_val))
 8001182:	f5c3 417f 	rsb	r1, r3, #65280	; 0xff00
 8001186:	31ff      	adds	r1, #255	; 0xff
 8001188:	e004      	b.n	8001194 <PT_StateMachine+0xc4>
		PT_dptr->SQF_val = SQR_LIM_OUT;
 800118a:	f247 5330 	movw	r3, #30000	; 0x7530
 800118e:	8223      	strh	r3, [r4, #16]
 8001190:	f648 21cf 	movw	r1, #35535	; 0x8acf
	if (MV_sum < (UINT16_MAX - PT_dptr->SQF_val))
 8001194:	4876      	ldr	r0, [pc, #472]	; (8001370 <PT_StateMachine+0x2a0>)
 8001196:	8802      	ldrh	r2, [r0, #0]
 8001198:	428a      	cmp	r2, r1
	if (MV_sum > PT_dptr->MVA_buf[PT_dptr->MVA_pointer])
 800119a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800119e:	f101 0544 	add.w	r5, r1, #68	; 0x44
 80011a2:	eb04 0545 	add.w	r5, r4, r5, lsl #1
		MV_sum += PT_dptr->SQF_val;
 80011a6:	bfb8      	it	lt
 80011a8:	18d2      	addlt	r2, r2, r3
	if (MV_sum > PT_dptr->MVA_buf[PT_dptr->MVA_pointer])
 80011aa:	88ee      	ldrh	r6, [r5, #6]
	PT_dptr->MVA_buf[PT_dptr->MVA_pointer] = PT_dptr->SQF_val;
 80011ac:	80eb      	strh	r3, [r5, #6]
		MV_sum += PT_dptr->SQF_val;
 80011ae:	bfb4      	ite	lt
 80011b0:	b292      	uxthlt	r2, r2
		MV_sum = UINT16_MAX;
 80011b2:	f64f 72ff 	movwge	r2, #65535	; 0xffff
	if (MV_sum > PT_dptr->MVA_buf[PT_dptr->MVA_pointer])
 80011b6:	4296      	cmp	r6, r2
 80011b8:	d229      	bcs.n	800120e <PT_StateMachine+0x13e>
		MV_sum -= PT_dptr->MVA_buf[PT_dptr->MVA_pointer];
 80011ba:	1b92      	subs	r2, r2, r6
 80011bc:	b292      	uxth	r2, r2
	PT_dptr->MVA_val = MV_sum/(uint16_t) MVA_BUFFER_SIZE;
 80011be:	4d6d      	ldr	r5, [pc, #436]	; (8001374 <PT_StateMachine+0x2a4>)
 80011c0:	8002      	strh	r2, [r0, #0]
 80011c2:	0853      	lsrs	r3, r2, #1
	if (++PT_dptr->MVA_pointer == MVA_BUFFER_SIZE) 
 80011c4:	3101      	adds	r1, #1
 80011c6:	b209      	sxth	r1, r1
	PT_dptr->MVA_val = MV_sum/(uint16_t) MVA_BUFFER_SIZE;
 80011c8:	fba5 5303 	umull	r5, r3, r5, r3
 80011cc:	08db      	lsrs	r3, r3, #3
	if (++PT_dptr->MVA_pointer == MVA_BUFFER_SIZE) 
 80011ce:	2936      	cmp	r1, #54	; 0x36
	PT_dptr->MVA_val = MV_sum/(uint16_t) MVA_BUFFER_SIZE;
 80011d0:	8263      	strh	r3, [r4, #18]
	if (++PT_dptr->MVA_pointer == MVA_BUFFER_SIZE) 
 80011d2:	80a1      	strh	r1, [r4, #4]
 80011d4:	f000 80b9 	beq.w	800134a <PT_StateMachine+0x27a>
	if (PT_dptr->MVA_val <= Prev_val && Prev_val > Prev_Prev_val) {
 80011d8:	4967      	ldr	r1, [pc, #412]	; (8001378 <PT_StateMachine+0x2a8>)
 80011da:	880a      	ldrh	r2, [r1, #0]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d221      	bcs.n	8001224 <PT_StateMachine+0x154>
 80011e0:	4866      	ldr	r0, [pc, #408]	; (800137c <PT_StateMachine+0x2ac>)
	Prev_Prev_val = Prev_val;
 80011e2:	8002      	strh	r2, [r0, #0]
	PEAKI = PeakDtcI();
 80011e4:	2200      	movs	r2, #0
	Prev_val = PT_dptr->MVA_val;
 80011e6:	800b      	strh	r3, [r1, #0]
	PEAKI = PeakDtcI();
 80011e8:	f8ad 200e 	strh.w	r2, [sp, #14]
	if (!PEAKI && BlankTimeCnt)								// No beat, decrement BlankTime
 80011ec:	4a64      	ldr	r2, [pc, #400]	; (8001380 <PT_StateMachine+0x2b0>)
 80011ee:	f9b2 3000 	ldrsh.w	r3, [r2]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 80d0 	beq.w	8001398 <PT_StateMachine+0x2c8>
		if (--BlankTimeCnt == 0)							// If blanktime over place the oldest peak
 80011f8:	3b01      	subs	r3, #1
 80011fa:	b21b      	sxth	r3, r3
 80011fc:	8013      	strh	r3, [r2, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f040 8132 	bne.w	8001468 <PT_StateMachine+0x398>
			PEAKI = PEAKI_temp;
 8001204:	4b5f      	ldr	r3, [pc, #380]	; (8001384 <PT_StateMachine+0x2b4>)
 8001206:	8819      	ldrh	r1, [r3, #0]
 8001208:	f8ad 100e 	strh.w	r1, [sp, #14]
 800120c:	e04e      	b.n	80012ac <PT_StateMachine+0x1dc>
	if (++PT_dptr->MVA_pointer == MVA_BUFFER_SIZE) 
 800120e:	3101      	adds	r1, #1
 8001210:	b209      	sxth	r1, r1
 8001212:	2300      	movs	r3, #0
 8001214:	2936      	cmp	r1, #54	; 0x36
 8001216:	80a1      	strh	r1, [r4, #4]
 8001218:	8003      	strh	r3, [r0, #0]
	PT_dptr->MVA_val = MV_sum/(uint16_t) MVA_BUFFER_SIZE;
 800121a:	8263      	strh	r3, [r4, #18]
	if (++PT_dptr->MVA_pointer == MVA_BUFFER_SIZE) 
 800121c:	f000 8095 	beq.w	800134a <PT_StateMachine+0x27a>
	if (PT_dptr->MVA_val <= Prev_val && Prev_val > Prev_Prev_val) {
 8001220:	4955      	ldr	r1, [pc, #340]	; (8001378 <PT_StateMachine+0x2a8>)
 8001222:	880a      	ldrh	r2, [r1, #0]
 8001224:	4855      	ldr	r0, [pc, #340]	; (800137c <PT_StateMachine+0x2ac>)
 8001226:	8805      	ldrh	r5, [r0, #0]
 8001228:	4295      	cmp	r5, r2
 800122a:	d2da      	bcs.n	80011e2 <PT_StateMachine+0x112>
	Prev_Prev_val = Prev_val;
 800122c:	8002      	strh	r2, [r0, #0]
	Prev_val = PT_dptr->MVA_val;
 800122e:	800b      	strh	r3, [r1, #0]
	PEAKI = PeakDtcI();
 8001230:	f8ad 200e 	strh.w	r2, [sp, #14]
	if (!PEAKI && BlankTimeCnt)								// No beat, decrement BlankTime
 8001234:	2a00      	cmp	r2, #0
 8001236:	d0d9      	beq.n	80011ec <PT_StateMachine+0x11c>
	else if (PEAKI && !BlankTimeCnt)						// If no peak for peak for last 200msec, save the current peak
 8001238:	4851      	ldr	r0, [pc, #324]	; (8001380 <PT_StateMachine+0x2b0>)
 800123a:	f9b0 3000 	ldrsh.w	r3, [r0]
 800123e:	bb43      	cbnz	r3, 8001292 <PT_StateMachine+0x1c2>
	++Count_SinceRR;
 8001240:	4f51      	ldr	r7, [pc, #324]	; (8001388 <PT_StateMachine+0x2b8>)
		PEAKI = 0;
 8001242:	f8ad 300e 	strh.w	r3, [sp, #14]
	++Count_SinceRR;
 8001246:	883e      	ldrh	r6, [r7, #0]
	if (Count_SinceRR > PT_dptr->RR_Missed_L && SB_peakI > PT_dptr->ThI2 && PT_dptr->PT_state == DETECTING)
 8001248:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
		BlankTimeCnt = PT200MS;
 800124c:	2148      	movs	r1, #72	; 0x48
	++Count_SinceRR;
 800124e:	3601      	adds	r6, #1
 8001250:	b235      	sxth	r5, r6
		BlankTimeCnt = PT200MS;
 8001252:	8001      	strh	r1, [r0, #0]
		PEAKI_temp   = PEAKI;
 8001254:	494b      	ldr	r1, [pc, #300]	; (8001384 <PT_StateMachine+0x2b4>)
	++Count_SinceRR;
 8001256:	803d      	strh	r5, [r7, #0]
	if (Count_SinceRR > PT_dptr->RR_Missed_L && SB_peakI > PT_dptr->ThI2 && PT_dptr->PT_state == DETECTING)
 8001258:	42ab      	cmp	r3, r5
		PEAKI_temp   = PEAKI;
 800125a:	800a      	strh	r2, [r1, #0]
	++Count_SinceRR;
 800125c:	b2b6      	uxth	r6, r6
	if (Count_SinceRR > PT_dptr->RR_Missed_L && SB_peakI > PT_dptr->ThI2 && PT_dptr->PT_state == DETECTING)
 800125e:	f2c0 80a6 	blt.w	80013ae <PT_StateMachine+0x2de>
 8001262:	f04f 0800 	mov.w	r8, #0
	if (Count_SinceRR > PT4000MS) {
 8001266:	2d90      	cmp	r5, #144	; 0x90
 8001268:	dd01      	ble.n	800126e <PT_StateMachine+0x19e>
		PT_init();
 800126a:	f7ff fd1b 	bl	8000ca4 <PT_init>
}
 800126e:	4640      	mov	r0, r8
 8001270:	b005      	add	sp, #20
 8001272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (Prev_valDR > Best_PeakDR) Best_PeakDR = Prev_valDR;
 8001276:	4e45      	ldr	r6, [pc, #276]	; (800138c <PT_StateMachine+0x2bc>)
 8001278:	f9b6 7000 	ldrsh.w	r7, [r6]
 800127c:	428f      	cmp	r7, r1
 800127e:	bfb8      	it	lt
 8001280:	8031      	strhlt	r1, [r6, #0]
 8001282:	e76e      	b.n	8001162 <PT_StateMachine+0x92>
		if (Prev_valBP > Best_PeakBP) Best_PeakBP = Prev_valBP;
 8001284:	4f42      	ldr	r7, [pc, #264]	; (8001390 <PT_StateMachine+0x2c0>)
 8001286:	f9b7 c000 	ldrsh.w	ip, [r7]
 800128a:	4594      	cmp	ip, r2
 800128c:	bfb8      	it	lt
 800128e:	803a      	strhlt	r2, [r7, #0]
 8001290:	e73e      	b.n	8001110 <PT_StateMachine+0x40>
		if (PEAKI > PEAKI_temp)
 8001292:	4d3c      	ldr	r5, [pc, #240]	; (8001384 <PT_StateMachine+0x2b4>)
 8001294:	8829      	ldrh	r1, [r5, #0]
 8001296:	4291      	cmp	r1, r2
 8001298:	f0c0 80de 	bcc.w	8001458 <PT_StateMachine+0x388>
		else if (--BlankTimeCnt == 0)
 800129c:	3b01      	subs	r3, #1
 800129e:	b21b      	sxth	r3, r3
 80012a0:	8003      	strh	r3, [r0, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f040 815f 	bne.w	8001566 <PT_StateMachine+0x496>
			PEAKI = PEAKI_temp;
 80012a8:	f8ad 100e 	strh.w	r1, [sp, #14]
	++Count_SinceRR;
 80012ac:	4f36      	ldr	r7, [pc, #216]	; (8001388 <PT_StateMachine+0x2b8>)
	if (PT_dptr->PT_state == START_UP || PT_dptr->PT_state == LEARN_PH_1)		
 80012ae:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
	++Count_SinceRR;
 80012b2:	883d      	ldrh	r5, [r7, #0]
	if (PT_dptr->PT_state == START_UP || PT_dptr->PT_state == LEARN_PH_1)		
 80012b4:	b293      	uxth	r3, r2
	++Count_SinceRR;
 80012b6:	3501      	adds	r5, #1
 80012b8:	b2ae      	uxth	r6, r5
	if (PT_dptr->PT_state == START_UP || PT_dptr->PT_state == LEARN_PH_1)		
 80012ba:	2b01      	cmp	r3, #1
	++Count_SinceRR;
 80012bc:	b22d      	sxth	r5, r5
 80012be:	803d      	strh	r5, [r7, #0]
	if (PT_dptr->PT_state == START_UP || PT_dptr->PT_state == LEARN_PH_1)		
 80012c0:	f240 8148 	bls.w	8001554 <PT_StateMachine+0x484>
		if (PEAKI > PT_dptr->ThI1 && Best_PeakBP > PT_dptr->ThF1)
 80012c4:	8aa3      	ldrh	r3, [r4, #20]
 80012c6:	428b      	cmp	r3, r1
 80012c8:	f080 8107 	bcs.w	80014da <PT_StateMachine+0x40a>
 80012cc:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8001390 <PT_StateMachine+0x2c0>
 80012d0:	f9b4 001c 	ldrsh.w	r0, [r4, #28]
 80012d4:	f9b8 3000 	ldrsh.w	r3, [r8]
 80012d8:	4298      	cmp	r0, r3
 80012da:	f280 80fe 	bge.w	80014da <PT_StateMachine+0x40a>
			if (PT_dptr->PT_state == LEARN_PH_2)
 80012de:	2a02      	cmp	r2, #2
 80012e0:	f000 814b 	beq.w	800157a <PT_StateMachine+0x4aa>
				if (Count_SinceRR < PT360MS && (Best_PeakDR < (Old_PeakDR >> 2)))
 80012e4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800138c <PT_StateMachine+0x2bc>
 80012e8:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8001394 <PT_StateMachine+0x2c4>
 80012ec:	f9b9 b000 	ldrsh.w	fp, [r9]
 80012f0:	2d81      	cmp	r5, #129	; 0x81
 80012f2:	f300 80bc 	bgt.w	800146e <PT_StateMachine+0x39e>
 80012f6:	f9ba 2000 	ldrsh.w	r2, [sl]
 80012fa:	ebbb 0fa2 	cmp.w	fp, r2, asr #2
 80012fe:	f280 80b6 	bge.w	800146e <PT_StateMachine+0x39e>
**********************************************************************************/
void UpdateThF(int16_t *PEAKF, int8_t NOISE_F)
{
	// ------ Update Noise & Signal Estimate ------ //
	if (NOISE_F) {
		PT_dptr->NPKF -= PT_dptr->NPKF >> 3;
 8001302:	f9b4 2020 	ldrsh.w	r2, [r4, #32]
		PT_dptr->NPKF += *PEAKF >> 3;
 8001306:	eb02 03e3 	add.w	r3, r2, r3, asr #3
 800130a:	eba3 03e2 	sub.w	r3, r3, r2, asr #3
		PT_dptr->NPKI -= PT_dptr->NPKI >> 3;
 800130e:	8b22      	ldrh	r2, [r4, #24]
		PT_dptr->NPKI += *PEAKI >> 3;
 8001310:	eba2 02d2 	sub.w	r2, r2, r2, lsr #3
 8001314:	eb02 01d1 	add.w	r1, r2, r1, lsr #3
		PT_dptr->SPKF -= PT_dptr->SPKF >> 3;
		PT_dptr->SPKF += *PEAKF >> 3;
	}

	// --------- Update Thresholds ---------------- //
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 8001318:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
		PT_dptr->NPKF += *PEAKF >> 3;
 800131c:	b218      	sxth	r0, r3
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 800131e:	1a12      	subs	r2, r2, r0
 8001320:	1092      	asrs	r2, r2, #2
 8001322:	fa12 f383 	uxtah	r3, r2, r3
 8001326:	b21b      	sxth	r3, r3
 8001328:	83a3      	strh	r3, [r4, #28]
	PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;
 800132a:	105b      	asrs	r3, r3, #1
 800132c:	8463      	strh	r3, [r4, #34]	; 0x22
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 800132e:	8ae3      	ldrh	r3, [r4, #22]
		PT_dptr->NPKF += *PEAKF >> 3;
 8001330:	8420      	strh	r0, [r4, #32]
		PT_dptr->NPKI += *PEAKI >> 3;
 8001332:	b289      	uxth	r1, r1
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 8001334:	1a5b      	subs	r3, r3, r1
		PT_dptr->NPKI += *PEAKI >> 3;
 8001336:	8321      	strh	r1, [r4, #24]
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 8001338:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 800133c:	b289      	uxth	r1, r1
 800133e:	82a1      	strh	r1, [r4, #20]
	PT_dptr->ThI2 = PT_dptr->ThI1 >> 1;
 8001340:	0849      	lsrs	r1, r1, #1
 8001342:	8361      	strh	r1, [r4, #26]
	int16_t BeatDelay = 0;
 8001344:	f04f 0800 	mov.w	r8, #0
}
 8001348:	e146      	b.n	80015d8 <PT_StateMachine+0x508>
	if (PT_dptr->MVA_val <= Prev_val && Prev_val > Prev_Prev_val) {
 800134a:	490b      	ldr	r1, [pc, #44]	; (8001378 <PT_StateMachine+0x2a8>)
		PT_dptr->MVA_pointer = 0;
 800134c:	2200      	movs	r2, #0
 800134e:	80a2      	strh	r2, [r4, #4]
	if (PT_dptr->MVA_val <= Prev_val && Prev_val > Prev_Prev_val) {
 8001350:	880a      	ldrh	r2, [r1, #0]
 8001352:	429a      	cmp	r2, r3
 8001354:	f4ff af44 	bcc.w	80011e0 <PT_StateMachine+0x110>
 8001358:	e764      	b.n	8001224 <PT_StateMachine+0x154>
 800135a:	bf00      	nop
 800135c:	20000310 	.word	0x20000310
 8001360:	20000432 	.word	0x20000432
 8001364:	2000042c 	.word	0x2000042c
 8001368:	20000434 	.word	0x20000434
 800136c:	2000042e 	.word	0x2000042e
 8001370:	20000308 	.word	0x20000308
 8001374:	4bda12f7 	.word	0x4bda12f7
 8001378:	20000430 	.word	0x20000430
 800137c:	2000042a 	.word	0x2000042a
 8001380:	20000300 	.word	0x20000300
 8001384:	2000030c 	.word	0x2000030c
 8001388:	20000302 	.word	0x20000302
 800138c:	200002fe 	.word	0x200002fe
 8001390:	200002fc 	.word	0x200002fc
 8001394:	2000030a 	.word	0x2000030a
	++Count_SinceRR;
 8001398:	4f95      	ldr	r7, [pc, #596]	; (80015f0 <PT_StateMachine+0x520>)
 800139a:	883e      	ldrh	r6, [r7, #0]
 800139c:	3601      	adds	r6, #1
 800139e:	b235      	sxth	r5, r6
 80013a0:	803d      	strh	r5, [r7, #0]
 80013a2:	b2b6      	uxth	r6, r6
	if (Count_SinceRR > PT_dptr->RR_Missed_L && SB_peakI > PT_dptr->ThI2 && PT_dptr->PT_state == DETECTING)
 80013a4:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
 80013a8:	42ab      	cmp	r3, r5
 80013aa:	f6bf af5a 	bge.w	8001262 <PT_StateMachine+0x192>
 80013ae:	4a91      	ldr	r2, [pc, #580]	; (80015f4 <PT_StateMachine+0x524>)
 80013b0:	8b61      	ldrh	r1, [r4, #26]
 80013b2:	8813      	ldrh	r3, [r2, #0]
 80013b4:	4299      	cmp	r1, r3
 80013b6:	f04f 0800 	mov.w	r8, #0
 80013ba:	f4bf af54 	bcs.w	8001266 <PT_StateMachine+0x196>
 80013be:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80013c2:	2903      	cmp	r1, #3
 80013c4:	f47f af4f 	bne.w	8001266 <PT_StateMachine+0x196>
		if (SB_peakBP > PT_dptr->ThF2)
 80013c8:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8001608 <PT_StateMachine+0x538>
 80013cc:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80013d0:	f9b9 1000 	ldrsh.w	r1, [r9]
 80013d4:	4288      	cmp	r0, r1
 80013d6:	f6bf af46 	bge.w	8001266 <PT_StateMachine+0x196>
		PT_dptr->SPKI -= PT_dptr->SPKI >> 3;
 80013da:	8ae0      	ldrh	r0, [r4, #22]
			UpdateRR(SBcntI);
 80013dc:	4d86      	ldr	r5, [pc, #536]	; (80015f8 <PT_StateMachine+0x528>)
 80013de:	9200      	str	r2, [sp, #0]
		PT_dptr->SPKI += *PEAKI >> 3;
 80013e0:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 80013e4:	eba3 03d0 	sub.w	r3, r3, r0, lsr #3
		PT_dptr->SPKF -= PT_dptr->SPKF >> 3;
 80013e8:	f9b4 001e 	ldrsh.w	r0, [r4, #30]
		PT_dptr->SPKF += *PEAKF >> 3;
 80013ec:	eb00 01e1 	add.w	r1, r0, r1, asr #3
 80013f0:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 80013f4:	8b20      	ldrh	r0, [r4, #24]
		PT_dptr->SPKI += *PEAKI >> 3;
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	82e3      	strh	r3, [r4, #22]
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 80013fa:	1a1b      	subs	r3, r3, r0
 80013fc:	eb00 03a3 	add.w	r3, r0, r3, asr #2
 8001400:	b29b      	uxth	r3, r3
 8001402:	82a3      	strh	r3, [r4, #20]
	PT_dptr->ThI2 = PT_dptr->ThI1 >> 1;
 8001404:	085b      	lsrs	r3, r3, #1
 8001406:	8363      	strh	r3, [r4, #26]
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 8001408:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
		PT_dptr->SPKF += *PEAKF >> 3;
 800140c:	b209      	sxth	r1, r1
 800140e:	83e1      	strh	r1, [r4, #30]
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 8001410:	1ac9      	subs	r1, r1, r3
 8001412:	eb03 01a1 	add.w	r1, r3, r1, asr #2
 8001416:	b209      	sxth	r1, r1
 8001418:	83a1      	strh	r1, [r4, #28]
	PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;
 800141a:	1049      	asrs	r1, r1, #1
 800141c:	8461      	strh	r1, [r4, #34]	; 0x22
			UpdateRR(SBcntI);
 800141e:	f9b5 4000 	ldrsh.w	r4, [r5]
 8001422:	4620      	mov	r0, r4
 8001424:	f7ff fdcc 	bl	8000fc0 <UpdateRR>
			Old_PeakDR = SB_peakDR;		// Store the derivative for T-wave test
 8001428:	4974      	ldr	r1, [pc, #464]	; (80015fc <PT_StateMachine+0x52c>)
			SB_peakI = 0;
 800142a:	9a00      	ldr	r2, [sp, #0]
			Old_PeakDR = SB_peakDR;		// Store the derivative for T-wave test
 800142c:	4874      	ldr	r0, [pc, #464]	; (8001600 <PT_StateMachine+0x530>)
			Best_PeakDR = Best_PeakBP = 0;
 800142e:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 800160c <PT_StateMachine+0x53c>
 8001432:	2300      	movs	r3, #0
			BeatDelay = Count_SinceRR = Count_SinceRR - SBcntI;
 8001434:	1b34      	subs	r4, r6, r4
			Best_PeakDR = Best_PeakBP = 0;
 8001436:	4e73      	ldr	r6, [pc, #460]	; (8001604 <PT_StateMachine+0x534>)
			SBcntI = 0;
 8001438:	802b      	strh	r3, [r5, #0]
			SB_peakI = 0;
 800143a:	8013      	strh	r3, [r2, #0]
			BeatDelay = Count_SinceRR = Count_SinceRR - SBcntI;
 800143c:	b225      	sxth	r5, r4
			Old_PeakDR = SB_peakDR;		// Store the derivative for T-wave test
 800143e:	880a      	ldrh	r2, [r1, #0]
			Best_PeakDR = Best_PeakBP = 0;
 8001440:	f8ac 3000 	strh.w	r3, [ip]
			BeatDelay += (GENERAL_DELAY + PT200MS);
 8001444:	347a      	adds	r4, #122	; 0x7a
			Best_PeakDR = Best_PeakBP = 0;
 8001446:	8033      	strh	r3, [r6, #0]
			SB_peakBP = 0;
 8001448:	f8a9 3000 	strh.w	r3, [r9]
			Old_PeakDR = SB_peakDR;		// Store the derivative for T-wave test
 800144c:	8002      	strh	r2, [r0, #0]
			SB_peakDR = 0;
 800144e:	800b      	strh	r3, [r1, #0]
			BeatDelay = Count_SinceRR = Count_SinceRR - SBcntI;
 8001450:	803d      	strh	r5, [r7, #0]
			BeatDelay += (GENERAL_DELAY + PT200MS);
 8001452:	fa0f f884 	sxth.w	r8, r4
			SB_peakI = 0;
 8001456:	e706      	b.n	8001266 <PT_StateMachine+0x196>
			BlankTimeCnt = PT200MS;
 8001458:	2348      	movs	r3, #72	; 0x48
 800145a:	8003      	strh	r3, [r0, #0]
			PEAKI = 0;
 800145c:	2300      	movs	r3, #0
	++Count_SinceRR;
 800145e:	4f64      	ldr	r7, [pc, #400]	; (80015f0 <PT_StateMachine+0x520>)
			PEAKI_temp = PEAKI;
 8001460:	802a      	strh	r2, [r5, #0]
			PEAKI = 0;
 8001462:	f8ad 300e 	strh.w	r3, [sp, #14]
	++Count_SinceRR;
 8001466:	e798      	b.n	800139a <PT_StateMachine+0x2ca>
		if (PEAKI > 0)
 8001468:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800146c:	e71e      	b.n	80012ac <PT_StateMachine+0x1dc>
		PT_dptr->SPKF -= PT_dptr->SPKF >> 3;
 800146e:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
		PT_dptr->SPKF += *PEAKF >> 3;
 8001472:	eb02 03e3 	add.w	r3, r2, r3, asr #3
 8001476:	eba3 03e2 	sub.w	r3, r3, r2, asr #3
		PT_dptr->SPKI -= PT_dptr->SPKI >> 3;
 800147a:	8ae2      	ldrh	r2, [r4, #22]
		PT_dptr->SPKI += *PEAKI >> 3;
 800147c:	eba2 02d2 	sub.w	r2, r2, r2, lsr #3
 8001480:	eb02 01d1 	add.w	r1, r2, r1, lsr #3
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 8001484:	8b22      	ldrh	r2, [r4, #24]
		PT_dptr->SPKI += *PEAKI >> 3;
 8001486:	b289      	uxth	r1, r1
 8001488:	82e1      	strh	r1, [r4, #22]
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 800148a:	1a89      	subs	r1, r1, r2
 800148c:	eb02 01a1 	add.w	r1, r2, r1, asr #2
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 8001490:	f9b4 2020 	ldrsh.w	r2, [r4, #32]
		PT_dptr->SPKF += *PEAKF >> 3;
 8001494:	b21b      	sxth	r3, r3
 8001496:	83e3      	strh	r3, [r4, #30]
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 8001498:	1a9b      	subs	r3, r3, r2
 800149a:	eb02 03a3 	add.w	r3, r2, r3, asr #2
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 800149e:	b289      	uxth	r1, r1
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 80014a0:	b21b      	sxth	r3, r3
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 80014a2:	82a1      	strh	r1, [r4, #20]
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 80014a4:	83a3      	strh	r3, [r4, #28]
	PT_dptr->ThI2 = PT_dptr->ThI1 >> 1;
 80014a6:	0849      	lsrs	r1, r1, #1
	PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;
 80014a8:	105b      	asrs	r3, r3, #1
					UpdateRR(Count_SinceRR);
 80014aa:	4628      	mov	r0, r5
	PT_dptr->ThI2 = PT_dptr->ThI1 >> 1;
 80014ac:	8361      	strh	r1, [r4, #26]
	PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;
 80014ae:	8463      	strh	r3, [r4, #34]	; 0x22
					UpdateRR(Count_SinceRR);
 80014b0:	f7ff fd86 	bl	8000fc0 <UpdateRR>
					SBcntI = 0;
 80014b4:	4c50      	ldr	r4, [pc, #320]	; (80015f8 <PT_StateMachine+0x528>)
					SB_peakBP = 0;
 80014b6:	4854      	ldr	r0, [pc, #336]	; (8001608 <PT_StateMachine+0x538>)
					SB_peakDR = 0;
 80014b8:	4950      	ldr	r1, [pc, #320]	; (80015fc <PT_StateMachine+0x52c>)
					SB_peakI = 0;
 80014ba:	4a4e      	ldr	r2, [pc, #312]	; (80015f4 <PT_StateMachine+0x524>)
					Old_PeakDR = Best_PeakDR;									// Store the derivative for T-wave test
 80014bc:	f8aa b000 	strh.w	fp, [sl]
					Count_SinceRR = 0;
 80014c0:	2300      	movs	r3, #0
					Best_PeakDR = Best_PeakBP = 0;
 80014c2:	f8a8 3000 	strh.w	r3, [r8]
					Count_SinceRR = 0;
 80014c6:	803b      	strh	r3, [r7, #0]
					Best_PeakDR = Best_PeakBP = 0;
 80014c8:	f8a9 3000 	strh.w	r3, [r9]
					SBcntI = 0;
 80014cc:	8023      	strh	r3, [r4, #0]
					SB_peakBP = 0;
 80014ce:	8003      	strh	r3, [r0, #0]
					SB_peakDR = 0;
 80014d0:	800b      	strh	r3, [r1, #0]
					SB_peakI = 0;
 80014d2:	8013      	strh	r3, [r2, #0]
					BeatDelay = GENERAL_DELAY + PT200MS;
 80014d4:	f04f 087a 	mov.w	r8, #122	; 0x7a
 80014d8:	e6c9      	b.n	800126e <PT_StateMachine+0x19e>
		else if (PEAKI > 0)
 80014da:	2900      	cmp	r1, #0
 80014dc:	f43f af62 	beq.w	80013a4 <PT_StateMachine+0x2d4>
		PT_dptr->NPKF += *PEAKF >> 3;
 80014e0:	4b4a      	ldr	r3, [pc, #296]	; (800160c <PT_StateMachine+0x53c>)
		PT_dptr->NPKF -= PT_dptr->NPKF >> 3;
 80014e2:	f9b4 c020 	ldrsh.w	ip, [r4, #32]
		PT_dptr->NPKF += *PEAKF >> 3;
 80014e6:	f9b3 0000 	ldrsh.w	r0, [r3]
		PT_dptr->NPKI -= PT_dptr->NPKI >> 3;
 80014ea:	8b23      	ldrh	r3, [r4, #24]
		PT_dptr->NPKF += *PEAKF >> 3;
 80014ec:	eb0c 02e0 	add.w	r2, ip, r0, asr #3
 80014f0:	eba2 02ec 	sub.w	r2, r2, ip, asr #3
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 80014f4:	f9b4 c01e 	ldrsh.w	ip, [r4, #30]
		PT_dptr->NPKF += *PEAKF >> 3;
 80014f8:	fa0f fe82 	sxth.w	lr, r2
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 80014fc:	ebac 0c0e 	sub.w	ip, ip, lr
 8001500:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8001504:	fa1c f282 	uxtah	r2, ip, r2
 8001508:	b212      	sxth	r2, r2
		PT_dptr->NPKI += *PEAKI >> 3;
 800150a:	eba3 03d3 	sub.w	r3, r3, r3, lsr #3
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 800150e:	83a2      	strh	r2, [r4, #28]
	PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;
 8001510:	1052      	asrs	r2, r2, #1
		PT_dptr->NPKI += *PEAKI >> 3;
 8001512:	eb03 03d1 	add.w	r3, r3, r1, lsr #3
	PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;
 8001516:	8462      	strh	r2, [r4, #34]	; 0x22
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 8001518:	8ae2      	ldrh	r2, [r4, #22]
		PT_dptr->NPKF += *PEAKF >> 3;
 800151a:	f8a4 e020 	strh.w	lr, [r4, #32]
		PT_dptr->NPKI += *PEAKI >> 3;
 800151e:	b29b      	uxth	r3, r3
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 8001520:	1ad2      	subs	r2, r2, r3
		PT_dptr->NPKI += *PEAKI >> 3;
 8001522:	8323      	strh	r3, [r4, #24]
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 8001524:	eb03 03a2 	add.w	r3, r3, r2, asr #2
 8001528:	b29b      	uxth	r3, r3
 800152a:	82a3      	strh	r3, [r4, #20]
	PT_dptr->ThI2 = PT_dptr->ThI1 >> 1;
 800152c:	085b      	lsrs	r3, r3, #1
 800152e:	8363      	strh	r3, [r4, #26]
			if (PEAKI > SB_peakI && Count_SinceRR >= PT360MS)
 8001530:	4b30      	ldr	r3, [pc, #192]	; (80015f4 <PT_StateMachine+0x524>)
 8001532:	881a      	ldrh	r2, [r3, #0]
 8001534:	428a      	cmp	r2, r1
 8001536:	f4bf af35 	bcs.w	80013a4 <PT_StateMachine+0x2d4>
 800153a:	2d81      	cmp	r5, #129	; 0x81
 800153c:	f77f af32 	ble.w	80013a4 <PT_StateMachine+0x2d4>
				SB_peakI = PEAKI;											// Store Integ Sig peak 
 8001540:	8019      	strh	r1, [r3, #0]
				SB_peakDR = Best_PeakDR;									// Derivative of SB point
 8001542:	4b30      	ldr	r3, [pc, #192]	; (8001604 <PT_StateMachine+0x534>)
 8001544:	881a      	ldrh	r2, [r3, #0]
				SB_peakBP = Best_PeakBP;									// Store BP Sig peak
 8001546:	4b30      	ldr	r3, [pc, #192]	; (8001608 <PT_StateMachine+0x538>)
 8001548:	8018      	strh	r0, [r3, #0]
				SB_peakDR = Best_PeakDR;									// Derivative of SB point
 800154a:	4b2c      	ldr	r3, [pc, #176]	; (80015fc <PT_StateMachine+0x52c>)
 800154c:	801a      	strh	r2, [r3, #0]
				SBcntI = Count_SinceRR;										// Store Indice
 800154e:	4b2a      	ldr	r3, [pc, #168]	; (80015f8 <PT_StateMachine+0x528>)
 8001550:	801d      	strh	r5, [r3, #0]
 8001552:	e727      	b.n	80013a4 <PT_StateMachine+0x2d4>
		if (PEAKI > 0)
 8001554:	2900      	cmp	r1, #0
 8001556:	f43f af25 	beq.w	80013a4 <PT_StateMachine+0x2d4>
			LearningPhase1(&PEAKI, &Best_PeakBP);
 800155a:	492c      	ldr	r1, [pc, #176]	; (800160c <PT_StateMachine+0x53c>)
 800155c:	f10d 000e 	add.w	r0, sp, #14
 8001560:	f7ff fc44 	bl	8000dec <LearningPhase1>
 8001564:	e71e      	b.n	80013a4 <PT_StateMachine+0x2d4>
	++Count_SinceRR;
 8001566:	4f22      	ldr	r7, [pc, #136]	; (80015f0 <PT_StateMachine+0x520>)
 8001568:	883d      	ldrh	r5, [r7, #0]
 800156a:	3501      	adds	r5, #1
			PEAKI = 0;
 800156c:	2300      	movs	r3, #0
	++Count_SinceRR;
 800156e:	b2ae      	uxth	r6, r5
 8001570:	b22d      	sxth	r5, r5
			PEAKI = 0;
 8001572:	f8ad 300e 	strh.w	r3, [sp, #14]
	++Count_SinceRR;
 8001576:	803d      	strh	r5, [r7, #0]
	if (PT_dptr->PT_state == START_UP || PT_dptr->PT_state == LEARN_PH_1)		
 8001578:	e714      	b.n	80013a4 <PT_StateMachine+0x2d4>
		PT_dptr->SPKF -= PT_dptr->SPKF >> 3;
 800157a:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
				Old_PeakDR = Best_PeakDR;
 800157e:	4820      	ldr	r0, [pc, #128]	; (8001600 <PT_StateMachine+0x530>)
		PT_dptr->SPKF += *PEAKF >> 3;
 8001580:	eb02 03e3 	add.w	r3, r2, r3, asr #3
 8001584:	eba3 03e2 	sub.w	r3, r3, r2, asr #3
		PT_dptr->SPKI -= PT_dptr->SPKI >> 3;
 8001588:	8ae2      	ldrh	r2, [r4, #22]
		PT_dptr->SPKI += *PEAKI >> 3;
 800158a:	eba2 02d2 	sub.w	r2, r2, r2, lsr #3
 800158e:	eb02 01d1 	add.w	r1, r2, r1, lsr #3
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 8001592:	8b22      	ldrh	r2, [r4, #24]
		PT_dptr->SPKI += *PEAKI >> 3;
 8001594:	b289      	uxth	r1, r1
 8001596:	82e1      	strh	r1, [r4, #22]
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 8001598:	1a89      	subs	r1, r1, r2
 800159a:	eb02 01a1 	add.w	r1, r2, r1, asr #2
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 800159e:	f9b4 2020 	ldrsh.w	r2, [r4, #32]
		PT_dptr->SPKF += *PEAKF >> 3;
 80015a2:	b21b      	sxth	r3, r3
 80015a4:	83e3      	strh	r3, [r4, #30]
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 80015a6:	1a9b      	subs	r3, r3, r2
 80015a8:	eb02 03a3 	add.w	r3, r2, r3, asr #2
				PT_dptr->PT_state = DETECTING;
 80015ac:	2203      	movs	r2, #3
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 80015ae:	b21b      	sxth	r3, r3
				PT_dptr->PT_state = DETECTING;
 80015b0:	80e2      	strh	r2, [r4, #6]
				Old_PeakDR = Best_PeakDR;
 80015b2:	4a14      	ldr	r2, [pc, #80]	; (8001604 <PT_StateMachine+0x534>)
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 80015b4:	83a3      	strh	r3, [r4, #28]
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 80015b6:	b289      	uxth	r1, r1
	PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;
 80015b8:	105b      	asrs	r3, r3, #1
				Old_PeakDR = Best_PeakDR;
 80015ba:	8815      	ldrh	r5, [r2, #0]
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 80015bc:	82a1      	strh	r1, [r4, #20]
	PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;
 80015be:	8463      	strh	r3, [r4, #34]	; 0x22
	PT_dptr->ThI2 = PT_dptr->ThI1 >> 1;
 80015c0:	0849      	lsrs	r1, r1, #1
				Count_SinceRR = 0;
 80015c2:	2300      	movs	r3, #0
				Best_PeakBP = 0;
 80015c4:	f8a8 3000 	strh.w	r3, [r8]
				Old_PeakDR = Best_PeakDR;
 80015c8:	8005      	strh	r5, [r0, #0]
	PT_dptr->ThI2 = PT_dptr->ThI1 >> 1;
 80015ca:	8361      	strh	r1, [r4, #26]
				Count_SinceRR = 0;
 80015cc:	803b      	strh	r3, [r7, #0]
				Best_PeakDR = 0;
 80015ce:	461e      	mov	r6, r3
 80015d0:	8013      	strh	r3, [r2, #0]
				PT_dptr->PT_state = DETECTING;
 80015d2:	461d      	mov	r5, r3
				BeatDelay = GENERAL_DELAY + PT200MS;
 80015d4:	f04f 087a 	mov.w	r8, #122	; 0x7a
	if (Count_SinceRR > PT_dptr->RR_Missed_L && SB_peakI > PT_dptr->ThI2 && PT_dptr->PT_state == DETECTING)
 80015d8:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
 80015dc:	42ab      	cmp	r3, r5
 80015de:	f6bf ae46 	bge.w	800126e <PT_StateMachine+0x19e>
 80015e2:	4a04      	ldr	r2, [pc, #16]	; (80015f4 <PT_StateMachine+0x524>)
 80015e4:	8813      	ldrh	r3, [r2, #0]
 80015e6:	428b      	cmp	r3, r1
 80015e8:	f63f aee9 	bhi.w	80013be <PT_StateMachine+0x2ee>
 80015ec:	e63f      	b.n	800126e <PT_StateMachine+0x19e>
 80015ee:	bf00      	nop
 80015f0:	20000302 	.word	0x20000302
 80015f4:	20000442 	.word	0x20000442
 80015f8:	20000444 	.word	0x20000444
 80015fc:	20000440 	.word	0x20000440
 8001600:	2000030a 	.word	0x2000030a
 8001604:	200002fe 	.word	0x200002fe
 8001608:	2000043e 	.word	0x2000043e
 800160c:	200002fc 	.word	0x200002fc

08001610 <arm_PT_init>:
		movingAverageBufferIndex = 0;
	}
}

void arm_PT_init()
{
 8001610:	b510      	push	{r4, lr}
 8001612:	b082      	sub	sp, #8
	//Initiate filter function
	arm_fir_init_f32(&Derivative, NUM_DERIVATIVE_TAPS, (float32_t *)&firDerivativeCoefficients[0], &firStateF32[0], BLOCK_SIZE);
 8001614:	2401      	movs	r4, #1
 8001616:	9400      	str	r4, [sp, #0]
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <arm_PT_init+0x50>)
 800161a:	4a12      	ldr	r2, [pc, #72]	; (8001664 <arm_PT_init+0x54>)
 800161c:	4812      	ldr	r0, [pc, #72]	; (8001668 <arm_PT_init+0x58>)
 800161e:	2105      	movs	r1, #5
 8001620:	f005 fef4 	bl	800740c <arm_fir_init_f32>
	arm_biquad_cascade_df1_init_f32 (&highPassFilter,1, (float32_t *)&iirHighPassFilterCoefficients[0], &highPassFilterStateF32[0]);
 8001624:	4621      	mov	r1, r4
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <arm_PT_init+0x5c>)
 8001628:	4a11      	ldr	r2, [pc, #68]	; (8001670 <arm_PT_init+0x60>)
 800162a:	4812      	ldr	r0, [pc, #72]	; (8001674 <arm_PT_init+0x64>)
 800162c:	f005 feaa 	bl	8007384 <arm_biquad_cascade_df1_init_f32>
	arm_biquad_cascade_df1_init_f32 (&lowPassFilter,1, (float32_t *)&iirLowPassFilterCoefficients[0], &lowPassFilterStateF32[0]);
 8001630:	4621      	mov	r1, r4
 8001632:	4a11      	ldr	r2, [pc, #68]	; (8001678 <arm_PT_init+0x68>)
 8001634:	4811      	ldr	r0, [pc, #68]	; (800167c <arm_PT_init+0x6c>)
 8001636:	4b12      	ldr	r3, [pc, #72]	; (8001680 <arm_PT_init+0x70>)
	//Reset buffors
	for (int i = 0; i<NUM_DERIVATIVE_TAPS_ARRAY_SIZE; i++)
	{
		derivativeBuffer[i]=0;
	}
	movingAverageBufferIndex=0;
 8001638:	4c12      	ldr	r4, [pc, #72]	; (8001684 <arm_PT_init+0x74>)
	arm_biquad_cascade_df1_init_f32 (&lowPassFilter,1, (float32_t *)&iirLowPassFilterCoefficients[0], &lowPassFilterStateF32[0]);
 800163a:	f005 fea3 	bl	8007384 <arm_biquad_cascade_df1_init_f32>
		derivativeBuffer[i]=0;
 800163e:	4b12      	ldr	r3, [pc, #72]	; (8001688 <arm_PT_init+0x78>)
 8001640:	2000      	movs	r0, #0
 8001642:	6018      	str	r0, [r3, #0]
 8001644:	6058      	str	r0, [r3, #4]
 8001646:	6098      	str	r0, [r3, #8]
 8001648:	60d8      	str	r0, [r3, #12]
 800164a:	6118      	str	r0, [r3, #16]
	for (int i = 0; i<MovingAverageSampleCount; i++)
	{
		movingAverageBuffer[i] = 0;
 800164c:	480f      	ldr	r0, [pc, #60]	; (800168c <arm_PT_init+0x7c>)
	movingAverageBufferIndex=0;
 800164e:	2100      	movs	r1, #0
		movingAverageBuffer[i] = 0;
 8001650:	22d8      	movs	r2, #216	; 0xd8
	movingAverageBufferIndex=0;
 8001652:	6021      	str	r1, [r4, #0]
	}
}
 8001654:	b002      	add	sp, #8
 8001656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		movingAverageBuffer[i] = 0;
 800165a:	f006 ba6b 	b.w	8007b34 <memset>
 800165e:	bf00      	nop
 8001660:	2000048c 	.word	0x2000048c
 8001664:	0800c400 	.word	0x0800c400
 8001668:	20000450 	.word	0x20000450
 800166c:	200004b0 	.word	0x200004b0
 8001670:	0800c414 	.word	0x0800c414
 8001674:	200004a0 	.word	0x200004a0
 8001678:	0800c428 	.word	0x0800c428
 800167c:	200004c4 	.word	0x200004c4
 8001680:	200004d4 	.word	0x200004d4
 8001684:	200005c0 	.word	0x200005c0
 8001688:	20000478 	.word	0x20000478
 800168c:	200004e8 	.word	0x200004e8

08001690 <arm_PT_ST>:
float previousMean = 0, TresholdI = 0, SignalLevelI = 0, NoiseLevelI = 0;
float previousSignalPeak = 0, TresholdF = 0, SignalLevelF = 0, NoiseLevelF = 0;
uint16_t peakTimeDelay = 0, latencyDelay = 0;
uint8_t rissingEdge = 0;
int16_t arm_PT_ST(int16_t sample)
{
 8001690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001694:	ed2d 8b04 	vpush	{d8-d9}
	float32_t newSample = (float)sample;
 8001698:	ee07 0a90 	vmov	s15, r0
	//low pass filter operation
	arm_biquad_cascade_df1_f32 (&lowPassFilter, &newSample,&lowPassFilterResult,1);
 800169c:	4ca6      	ldr	r4, [pc, #664]	; (8001938 <arm_PT_ST+0x2a8>)
 800169e:	48a7      	ldr	r0, [pc, #668]	; (800193c <arm_PT_ST+0x2ac>)



	//Store potential peak value (QRS can be also minimum or maximum)
	float potentialPeak = lowPassFilterResult*lowPassFilterResult;
	if (potentialPeak>previousSignalPeak)
 80016a0:	4da7      	ldr	r5, [pc, #668]	; (8001940 <arm_PT_ST+0x2b0>)
 80016a2:	f8df 830c 	ldr.w	r8, [pc, #780]	; 80019b0 <arm_PT_ST+0x320>
	float32_t newSample = (float)sample;
 80016a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 80016aa:	b085      	sub	sp, #20
	arm_biquad_cascade_df1_f32 (&lowPassFilter, &newSample,&lowPassFilterResult,1);
 80016ac:	2301      	movs	r3, #1
 80016ae:	4622      	mov	r2, r4
 80016b0:	a903      	add	r1, sp, #12
	float32_t newSample = (float)sample;
 80016b2:	edcd 7a03 	vstr	s15, [sp, #12]
	arm_biquad_cascade_df1_f32 (&lowPassFilter, &newSample,&lowPassFilterResult,1);
 80016b6:	f005 fe15 	bl	80072e4 <arm_biquad_cascade_df1_f32>
	arm_biquad_cascade_df1_f32 (&highPassFilter, &lowPassFilterResult,&highPassFilterResult,1);
 80016ba:	4aa2      	ldr	r2, [pc, #648]	; (8001944 <arm_PT_ST+0x2b4>)
 80016bc:	48a2      	ldr	r0, [pc, #648]	; (8001948 <arm_PT_ST+0x2b8>)
 80016be:	2301      	movs	r3, #1
 80016c0:	4621      	mov	r1, r4
 80016c2:	f005 fe0f 	bl	80072e4 <arm_biquad_cascade_df1_f32>
	float potentialPeak = lowPassFilterResult*lowPassFilterResult;
 80016c6:	edd4 7a00 	vldr	s15, [r4]
	if (potentialPeak>previousSignalPeak)
 80016ca:	ed95 7a00 	vldr	s14, [r5]
	float potentialPeak = lowPassFilterResult*lowPassFilterResult;
 80016ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
	if (potentialPeak>previousSignalPeak)
 80016d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016da:	d468      	bmi.n	80017ae <arm_PT_ST+0x11e>
	{//Store maximum of squared signal
		previousSignalPeak = potentialPeak;
		peakTimeDelay = 0;
	}
	peakTimeDelay++;
 80016dc:	f8b8 3000 	ldrh.w	r3, [r8]
 80016e0:	3301      	adds	r3, #1
 80016e2:	b29b      	uxth	r3, r3
	if (latencyDelay < latencyTreshold)
 80016e4:	4c99      	ldr	r4, [pc, #612]	; (800194c <arm_PT_ST+0x2bc>)
	peakTimeDelay++;
 80016e6:	f8a8 3000 	strh.w	r3, [r8]
	if (latencyDelay < latencyTreshold)
 80016ea:	8823      	ldrh	r3, [r4, #0]
 80016ec:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 80016f0:	d26a      	bcs.n	80017c8 <arm_PT_ST+0x138>
	{
		latencyDelay++;
 80016f2:	3301      	adds	r3, #1
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	4e96      	ldr	r6, [pc, #600]	; (8001950 <arm_PT_ST+0x2c0>)
 80016f8:	8023      	strh	r3, [r4, #0]
	else
	{//If peak wasn't find in given time restart variables
		latencyDelay = 0;
		arm_PT_init();
	}
	if (latencyDelay == (latencyTreshold>>1))
 80016fa:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 80016fe:	d10f      	bne.n	8001720 <arm_PT_ST+0x90>
	{//In original algorithm this should be look-back
		//here only decrease thresholds
		TresholdI = TresholdI * 0.5;
 8001700:	4b94      	ldr	r3, [pc, #592]	; (8001954 <arm_PT_ST+0x2c4>)
 8001702:	ed93 7a00 	vldr	s14, [r3]
 8001706:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800170a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800170e:	ed83 7a00 	vstr	s14, [r3]
		TresholdF = TresholdF * 0.5;
 8001712:	4b91      	ldr	r3, [pc, #580]	; (8001958 <arm_PT_ST+0x2c8>)
 8001714:	edd3 7a00 	vldr	s15, [r3]
 8001718:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800171c:	edc3 7a00 	vstr	s15, [r3]
	}
	//Derivative with FIR filter
	arm_fir_f32 (&Derivative,&lowPassFilterResult,&derivativeOutput[0],BLOCK_SIZE);
 8001720:	4f8e      	ldr	r7, [pc, #568]	; (800195c <arm_PT_ST+0x2cc>)
 8001722:	4985      	ldr	r1, [pc, #532]	; (8001938 <arm_PT_ST+0x2a8>)
 8001724:	488e      	ldr	r0, [pc, #568]	; (8001960 <arm_PT_ST+0x2d0>)
	return MeanSum * meanDivider;
 8001726:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8001964 <arm_PT_ST+0x2d4>
	 */
	//putOnMovingAverageBuffer(squaredValue);
	//arm_mean_f32 (&movingAverageBuffer[0], MovingAverageSampleCount, &meanValue);

	//Detection of maximum in moving average signal
	if (meanValue!=previousMean)
 800172a:	f8df a288 	ldr.w	sl, [pc, #648]	; 80019b4 <arm_PT_ST+0x324>
	arm_fir_f32 (&Derivative,&lowPassFilterResult,&derivativeOutput[0],BLOCK_SIZE);
 800172e:	2301      	movs	r3, #1
 8001730:	463a      	mov	r2, r7
 8001732:	f005 fe33 	bl	800739c <arm_fir_f32>
	squaredValue = derivativeOutput[0] * derivativeOutput[0];
 8001736:	ed97 8a00 	vldr	s16, [r7]
 800173a:	4b8b      	ldr	r3, [pc, #556]	; (8001968 <arm_PT_ST+0x2d8>)
	MeanSum -= movingAverageBuffer[movingAverageBufferIndex];
 800173c:	6832      	ldr	r2, [r6, #0]
	squaredValue = derivativeOutput[0] * derivativeOutput[0];
 800173e:	ee28 8a08 	vmul.f32	s16, s16, s16
	if (movingAverageBufferIndex==MovingAverageSampleCount)
 8001742:	2a35      	cmp	r2, #53	; 0x35
	squaredValue = derivativeOutput[0] * derivativeOutput[0];
 8001744:	ed83 8a00 	vstr	s16, [r3]
	MeanSum -= movingAverageBuffer[movingAverageBufferIndex];
 8001748:	4b88      	ldr	r3, [pc, #544]	; (800196c <arm_PT_ST+0x2dc>)
 800174a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800174e:	ed93 7a00 	vldr	s14, [r3]
	movingAverageBuffer[movingAverageBufferIndex] = sample;
 8001752:	ed83 8a00 	vstr	s16, [r3]
	MeanSum -= movingAverageBuffer[movingAverageBufferIndex];
 8001756:	4b86      	ldr	r3, [pc, #536]	; (8001970 <arm_PT_ST+0x2e0>)
 8001758:	edd3 7a00 	vldr	s15, [r3]
 800175c:	ee77 7ac7 	vsub.f32	s15, s15, s14
	MeanSum += sample;
 8001760:	ee38 8a27 	vadd.f32	s16, s16, s15
	if (meanValue!=previousMean)
 8001764:	edda 7a00 	vldr	s15, [sl]
	MeanSum += sample;
 8001768:	ed83 8a00 	vstr	s16, [r3]
	return MeanSum * meanDivider;
 800176c:	ee28 8a28 	vmul.f32	s16, s16, s17
	movingAverageBufferIndex++;
 8001770:	f102 0301 	add.w	r3, r2, #1
		movingAverageBufferIndex = 0;
 8001774:	bf08      	it	eq
 8001776:	2300      	moveq	r3, #0
 8001778:	6033      	str	r3, [r6, #0]
	if (meanValue!=previousMean)
 800177a:	eef4 7a48 	vcmp.f32	s15, s16
	meanValue = putOnMovingAverageBufferAndGetMean(squaredValue);
 800177e:	4b7d      	ldr	r3, [pc, #500]	; (8001974 <arm_PT_ST+0x2e4>)
	if (meanValue!=previousMean)
 8001780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	meanValue = putOnMovingAverageBufferAndGetMean(squaredValue);
 8001784:	ed83 8a00 	vstr	s16, [r3]
	if (meanValue!=previousMean)
 8001788:	d00b      	beq.n	80017a2 <arm_PT_ST+0x112>
	{
		if (meanValue>previousMean)
 800178a:	eef4 7ac8 	vcmpe.f32	s15, s16
 800178e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001792:	d510      	bpl.n	80017b6 <arm_PT_ST+0x126>
		{//This is not maximum
			previousMean = meanValue;
			if (previousMean != 0)
 8001794:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8001798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			previousMean = meanValue;
 800179c:	ed8a 8a00 	vstr	s16, [sl]
			if (previousMean != 0)
 80017a0:	d138      	bne.n	8001814 <arm_PT_ST+0x184>
				previousSignalPeak = 0;
				previousMean = 0;
			}
		}
	}
	return 0;
 80017a2:	2000      	movs	r0, #0
}
 80017a4:	b005      	add	sp, #20
 80017a6:	ecbd 8b04 	vpop	{d8-d9}
 80017aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		previousSignalPeak = potentialPeak;
 80017ae:	edc5 7a00 	vstr	s15, [r5]
 80017b2:	2301      	movs	r3, #1
 80017b4:	e796      	b.n	80016e4 <arm_PT_ST+0x54>
			if(rissingEdge ==1)
 80017b6:	4b70      	ldr	r3, [pc, #448]	; (8001978 <arm_PT_ST+0x2e8>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d033      	beq.n	8001826 <arm_PT_ST+0x196>
				previousSignalPeak = 0;
 80017be:	edc5 8a00 	vstr	s17, [r5]
				previousMean = 0;
 80017c2:	edca 8a00 	vstr	s17, [sl]
 80017c6:	e7ec      	b.n	80017a2 <arm_PT_ST+0x112>
	arm_fir_init_f32(&Derivative, NUM_DERIVATIVE_TAPS, (float32_t *)&firDerivativeCoefficients[0], &firStateF32[0], BLOCK_SIZE);
 80017c8:	2601      	movs	r6, #1
		latencyDelay = 0;
 80017ca:	2700      	movs	r7, #0
	arm_fir_init_f32(&Derivative, NUM_DERIVATIVE_TAPS, (float32_t *)&firDerivativeCoefficients[0], &firStateF32[0], BLOCK_SIZE);
 80017cc:	9600      	str	r6, [sp, #0]
 80017ce:	4b6b      	ldr	r3, [pc, #428]	; (800197c <arm_PT_ST+0x2ec>)
 80017d0:	4a6b      	ldr	r2, [pc, #428]	; (8001980 <arm_PT_ST+0x2f0>)
 80017d2:	4863      	ldr	r0, [pc, #396]	; (8001960 <arm_PT_ST+0x2d0>)
		latencyDelay = 0;
 80017d4:	8027      	strh	r7, [r4, #0]
	arm_fir_init_f32(&Derivative, NUM_DERIVATIVE_TAPS, (float32_t *)&firDerivativeCoefficients[0], &firStateF32[0], BLOCK_SIZE);
 80017d6:	2105      	movs	r1, #5
 80017d8:	f005 fe18 	bl	800740c <arm_fir_init_f32>
	arm_biquad_cascade_df1_init_f32 (&highPassFilter,1, (float32_t *)&iirHighPassFilterCoefficients[0], &highPassFilterStateF32[0]);
 80017dc:	4631      	mov	r1, r6
 80017de:	4b69      	ldr	r3, [pc, #420]	; (8001984 <arm_PT_ST+0x2f4>)
 80017e0:	4a69      	ldr	r2, [pc, #420]	; (8001988 <arm_PT_ST+0x2f8>)
 80017e2:	4859      	ldr	r0, [pc, #356]	; (8001948 <arm_PT_ST+0x2b8>)
 80017e4:	f005 fdce 	bl	8007384 <arm_biquad_cascade_df1_init_f32>
	arm_biquad_cascade_df1_init_f32 (&lowPassFilter,1, (float32_t *)&iirLowPassFilterCoefficients[0], &lowPassFilterStateF32[0]);
 80017e8:	4631      	mov	r1, r6
 80017ea:	4b68      	ldr	r3, [pc, #416]	; (800198c <arm_PT_ST+0x2fc>)
 80017ec:	4a68      	ldr	r2, [pc, #416]	; (8001990 <arm_PT_ST+0x300>)
 80017ee:	4853      	ldr	r0, [pc, #332]	; (800193c <arm_PT_ST+0x2ac>)
	movingAverageBufferIndex=0;
 80017f0:	4e57      	ldr	r6, [pc, #348]	; (8001950 <arm_PT_ST+0x2c0>)
	arm_biquad_cascade_df1_init_f32 (&lowPassFilter,1, (float32_t *)&iirLowPassFilterCoefficients[0], &lowPassFilterStateF32[0]);
 80017f2:	f005 fdc7 	bl	8007384 <arm_biquad_cascade_df1_init_f32>
		derivativeBuffer[i]=0;
 80017f6:	4b67      	ldr	r3, [pc, #412]	; (8001994 <arm_PT_ST+0x304>)
		movingAverageBuffer[i] = 0;
 80017f8:	485c      	ldr	r0, [pc, #368]	; (800196c <arm_PT_ST+0x2dc>)
	movingAverageBufferIndex=0;
 80017fa:	6037      	str	r7, [r6, #0]
		derivativeBuffer[i]=0;
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
		movingAverageBuffer[i] = 0;
 8001808:	4639      	mov	r1, r7
 800180a:	22d8      	movs	r2, #216	; 0xd8
 800180c:	f006 f992 	bl	8007b34 <memset>
	if (latencyDelay == (latencyTreshold>>1))
 8001810:	8823      	ldrh	r3, [r4, #0]
 8001812:	e772      	b.n	80016fa <arm_PT_ST+0x6a>
				rissingEdge = 1;
 8001814:	4b58      	ldr	r3, [pc, #352]	; (8001978 <arm_PT_ST+0x2e8>)
 8001816:	2201      	movs	r2, #1
	return 0;
 8001818:	2000      	movs	r0, #0
				rissingEdge = 1;
 800181a:	701a      	strb	r2, [r3, #0]
}
 800181c:	b005      	add	sp, #20
 800181e:	ecbd 8b04 	vpop	{d8-d9}
 8001822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if ((previousMean > TresholdI) && (latencyDelay > latencyDelayTreshold))
 8001826:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8001954 <arm_PT_ST+0x2c4>
 800182a:	ed9b 7a00 	vldr	s14, [fp]
 800182e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001836:	f340 80bf 	ble.w	80019b8 <arm_PT_ST+0x328>
 800183a:	8823      	ldrh	r3, [r4, #0]
 800183c:	2b48      	cmp	r3, #72	; 0x48
 800183e:	f240 80bb 	bls.w	80019b8 <arm_PT_ST+0x328>
					if (previousSignalPeak>TresholdF)
 8001842:	4b45      	ldr	r3, [pc, #276]	; (8001958 <arm_PT_ST+0x2c8>)
 8001844:	682f      	ldr	r7, [r5, #0]
 8001846:	edd3 7a00 	vldr	s15, [r3]
 800184a:	ee07 7a10 	vmov	s14, r7
 800184e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001856:	f300 811d 	bgt.w	8001a94 <arm_PT_ST+0x404>
						NoiseLevelF = 0.125*previousSignalPeak + 0.875*NoiseLevelI;
 800185a:	4c4f      	ldr	r4, [pc, #316]	; (8001998 <arm_PT_ST+0x308>)
 800185c:	6820      	ldr	r0, [r4, #0]
 800185e:	f7fe fe4b 	bl	80004f8 <__aeabi_f2d>
 8001862:	4b4e      	ldr	r3, [pc, #312]	; (800199c <arm_PT_ST+0x30c>)
 8001864:	2200      	movs	r2, #0
 8001866:	f7fe fe9f 	bl	80005a8 <__aeabi_dmul>
 800186a:	4602      	mov	r2, r0
 800186c:	4638      	mov	r0, r7
 800186e:	4616      	mov	r6, r2
 8001870:	460f      	mov	r7, r1
 8001872:	f7fe fe41 	bl	80004f8 <__aeabi_f2d>
 8001876:	2200      	movs	r2, #0
 8001878:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800187c:	f7fe fe94 	bl	80005a8 <__aeabi_dmul>
 8001880:	4632      	mov	r2, r6
 8001882:	463b      	mov	r3, r7
 8001884:	f7fe fcda 	bl	800023c <__adddf3>
 8001888:	f7ff f986 	bl	8000b98 <__aeabi_d2f>
						TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 800188c:	4b44      	ldr	r3, [pc, #272]	; (80019a0 <arm_PT_ST+0x310>)
						NoiseLevelF = 0.125*previousSignalPeak + 0.875*NoiseLevelI;
 800188e:	ee09 0a10 	vmov	s18, r0
						TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 8001892:	edd3 7a00 	vldr	s15, [r3]
						NoiseLevelF = 0.125*previousSignalPeak + 0.875*NoiseLevelI;
 8001896:	4b43      	ldr	r3, [pc, #268]	; (80019a4 <arm_PT_ST+0x314>)
						TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 8001898:	ee77 7ac9 	vsub.f32	s15, s15, s18
						NoiseLevelF = 0.125*previousSignalPeak + 0.875*NoiseLevelI;
 800189c:	6018      	str	r0, [r3, #0]
						TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 800189e:	ee17 0a90 	vmov	r0, s15
 80018a2:	f7fe fe29 	bl	80004f8 <__aeabi_f2d>
 80018a6:	4b40      	ldr	r3, [pc, #256]	; (80019a8 <arm_PT_ST+0x318>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	f7fe fe7d 	bl	80005a8 <__aeabi_dmul>
 80018ae:	4680      	mov	r8, r0
 80018b0:	ee19 0a10 	vmov	r0, s18
 80018b4:	4689      	mov	r9, r1
 80018b6:	f7fe fe1f 	bl	80004f8 <__aeabi_f2d>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4640      	mov	r0, r8
 80018c0:	4649      	mov	r1, r9
 80018c2:	f7fe fcbb 	bl	800023c <__adddf3>
 80018c6:	f7ff f967 	bl	8000b98 <__aeabi_d2f>
 80018ca:	4b23      	ldr	r3, [pc, #140]	; (8001958 <arm_PT_ST+0x2c8>)
 80018cc:	6018      	str	r0, [r3, #0]
						NoiseLevelI = 0.125*meanValue + 0.875*NoiseLevelI;
 80018ce:	ee18 0a10 	vmov	r0, s16
 80018d2:	f7fe fe11 	bl	80004f8 <__aeabi_f2d>
 80018d6:	2200      	movs	r2, #0
 80018d8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80018dc:	f7fe fe64 	bl	80005a8 <__aeabi_dmul>
 80018e0:	4632      	mov	r2, r6
 80018e2:	463b      	mov	r3, r7
 80018e4:	f7fe fcaa 	bl	800023c <__adddf3>
 80018e8:	f7ff f956 	bl	8000b98 <__aeabi_d2f>
						TresholdI = NoiseLevelI + 0.25 * (SignalLevelI - NoiseLevelI);
 80018ec:	4b2f      	ldr	r3, [pc, #188]	; (80019ac <arm_PT_ST+0x31c>)
						NoiseLevelI = 0.125*meanValue + 0.875*NoiseLevelI;
 80018ee:	6020      	str	r0, [r4, #0]
 80018f0:	ee08 0a10 	vmov	s16, r0
						TresholdI = NoiseLevelI + 0.25 * (SignalLevelI - NoiseLevelI);
 80018f4:	edd3 7a00 	vldr	s15, [r3]
 80018f8:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80018fc:	ee17 0a90 	vmov	r0, s15
 8001900:	f7fe fdfa 	bl	80004f8 <__aeabi_f2d>
 8001904:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <arm_PT_ST+0x318>)
 8001906:	2200      	movs	r2, #0
 8001908:	f7fe fe4e 	bl	80005a8 <__aeabi_dmul>
 800190c:	4606      	mov	r6, r0
 800190e:	ee18 0a10 	vmov	r0, s16
 8001912:	460f      	mov	r7, r1
 8001914:	f7fe fdf0 	bl	80004f8 <__aeabi_f2d>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4630      	mov	r0, r6
 800191e:	4639      	mov	r1, r7
 8001920:	f7fe fc8c 	bl	800023c <__adddf3>
 8001924:	f7ff f938 	bl	8000b98 <__aeabi_d2f>
						previousSignalPeak = 0;
 8001928:	edc5 8a00 	vstr	s17, [r5]
						TresholdI = NoiseLevelI + 0.25 * (SignalLevelI - NoiseLevelI);
 800192c:	f8cb 0000 	str.w	r0, [fp]
						previousMean = 0;
 8001930:	edca 8a00 	vstr	s17, [sl]
	return 0;
 8001934:	2000      	movs	r0, #0
					if (previousSignalPeak>TresholdF)
 8001936:	e735      	b.n	80017a4 <arm_PT_ST+0x114>
 8001938:	200004d0 	.word	0x200004d0
 800193c:	200004c4 	.word	0x200004c4
 8001940:	200005cc 	.word	0x200005cc
 8001944:	200004ac 	.word	0x200004ac
 8001948:	200004a0 	.word	0x200004a0
 800194c:	200004c0 	.word	0x200004c0
 8001950:	200005c0 	.word	0x200005c0
 8001954:	20000474 	.word	0x20000474
 8001958:	20000470 	.word	0x20000470
 800195c:	2000048c 	.word	0x2000048c
 8001960:	20000450 	.word	0x20000450
 8001964:	00000000 	.word	0x00000000
 8001968:	200005d4 	.word	0x200005d4
 800196c:	200004e8 	.word	0x200004e8
 8001970:	2000045c 	.word	0x2000045c
 8001974:	200004e4 	.word	0x200004e4
 8001978:	200005d0 	.word	0x200005d0
 800197c:	2000048c 	.word	0x2000048c
 8001980:	0800c400 	.word	0x0800c400
 8001984:	200004b0 	.word	0x200004b0
 8001988:	0800c414 	.word	0x0800c414
 800198c:	200004d4 	.word	0x200004d4
 8001990:	0800c428 	.word	0x0800c428
 8001994:	20000478 	.word	0x20000478
 8001998:	20000464 	.word	0x20000464
 800199c:	3fec0000 	.word	0x3fec0000
 80019a0:	20000468 	.word	0x20000468
 80019a4:	20000460 	.word	0x20000460
 80019a8:	3fd00000 	.word	0x3fd00000
 80019ac:	2000046c 	.word	0x2000046c
 80019b0:	200005c4 	.word	0x200005c4
 80019b4:	200005c8 	.word	0x200005c8
					NoiseLevelF = 0.125*previousSignalPeak + 0.875*NoiseLevelI;
 80019b8:	4c78      	ldr	r4, [pc, #480]	; (8001b9c <arm_PT_ST+0x50c>)
 80019ba:	6820      	ldr	r0, [r4, #0]
 80019bc:	f7fe fd9c 	bl	80004f8 <__aeabi_f2d>
 80019c0:	4b77      	ldr	r3, [pc, #476]	; (8001ba0 <arm_PT_ST+0x510>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	f7fe fdf0 	bl	80005a8 <__aeabi_dmul>
 80019c8:	4606      	mov	r6, r0
 80019ca:	6828      	ldr	r0, [r5, #0]
 80019cc:	460f      	mov	r7, r1
 80019ce:	f7fe fd93 	bl	80004f8 <__aeabi_f2d>
 80019d2:	2200      	movs	r2, #0
 80019d4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80019d8:	f7fe fde6 	bl	80005a8 <__aeabi_dmul>
 80019dc:	4632      	mov	r2, r6
 80019de:	463b      	mov	r3, r7
 80019e0:	f7fe fc2c 	bl	800023c <__adddf3>
 80019e4:	f7ff f8d8 	bl	8000b98 <__aeabi_d2f>
					TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 80019e8:	4b6e      	ldr	r3, [pc, #440]	; (8001ba4 <arm_PT_ST+0x514>)
					NoiseLevelF = 0.125*previousSignalPeak + 0.875*NoiseLevelI;
 80019ea:	ee08 0a90 	vmov	s17, r0
					TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 80019ee:	edd3 7a00 	vldr	s15, [r3]
					NoiseLevelF = 0.125*previousSignalPeak + 0.875*NoiseLevelI;
 80019f2:	4b6d      	ldr	r3, [pc, #436]	; (8001ba8 <arm_PT_ST+0x518>)
					TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 80019f4:	ee77 7ae8 	vsub.f32	s15, s15, s17
					NoiseLevelF = 0.125*previousSignalPeak + 0.875*NoiseLevelI;
 80019f8:	6018      	str	r0, [r3, #0]
					TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 80019fa:	ee17 0a90 	vmov	r0, s15
 80019fe:	f7fe fd7b 	bl	80004f8 <__aeabi_f2d>
 8001a02:	4b6a      	ldr	r3, [pc, #424]	; (8001bac <arm_PT_ST+0x51c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	f7fe fdcf 	bl	80005a8 <__aeabi_dmul>
 8001a0a:	4680      	mov	r8, r0
 8001a0c:	ee18 0a90 	vmov	r0, s17
 8001a10:	4689      	mov	r9, r1
 8001a12:	f7fe fd71 	bl	80004f8 <__aeabi_f2d>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4640      	mov	r0, r8
 8001a1c:	4649      	mov	r1, r9
 8001a1e:	f7fe fc0d 	bl	800023c <__adddf3>
 8001a22:	f7ff f8b9 	bl	8000b98 <__aeabi_d2f>
 8001a26:	4b62      	ldr	r3, [pc, #392]	; (8001bb0 <arm_PT_ST+0x520>)
 8001a28:	6018      	str	r0, [r3, #0]
					NoiseLevelI = 0.125*meanValue + 0.875*NoiseLevelI;
 8001a2a:	ee18 0a10 	vmov	r0, s16
 8001a2e:	f7fe fd63 	bl	80004f8 <__aeabi_f2d>
 8001a32:	2200      	movs	r2, #0
 8001a34:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001a38:	f7fe fdb6 	bl	80005a8 <__aeabi_dmul>
 8001a3c:	4632      	mov	r2, r6
 8001a3e:	463b      	mov	r3, r7
 8001a40:	f7fe fbfc 	bl	800023c <__adddf3>
 8001a44:	f7ff f8a8 	bl	8000b98 <__aeabi_d2f>
					TresholdI = NoiseLevelI + 0.25 * (SignalLevelI - NoiseLevelI);
 8001a48:	4b5a      	ldr	r3, [pc, #360]	; (8001bb4 <arm_PT_ST+0x524>)
					NoiseLevelI = 0.125*meanValue + 0.875*NoiseLevelI;
 8001a4a:	6020      	str	r0, [r4, #0]
 8001a4c:	ee08 0a10 	vmov	s16, r0
					TresholdI = NoiseLevelI + 0.25 * (SignalLevelI - NoiseLevelI);
 8001a50:	edd3 7a00 	vldr	s15, [r3]
 8001a54:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8001a58:	ee17 0a90 	vmov	r0, s15
 8001a5c:	f7fe fd4c 	bl	80004f8 <__aeabi_f2d>
 8001a60:	4b52      	ldr	r3, [pc, #328]	; (8001bac <arm_PT_ST+0x51c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	f7fe fda0 	bl	80005a8 <__aeabi_dmul>
 8001a68:	4606      	mov	r6, r0
 8001a6a:	ee18 0a10 	vmov	r0, s16
 8001a6e:	460f      	mov	r7, r1
 8001a70:	f7fe fd42 	bl	80004f8 <__aeabi_f2d>
 8001a74:	460b      	mov	r3, r1
 8001a76:	4602      	mov	r2, r0
 8001a78:	4639      	mov	r1, r7
 8001a7a:	4630      	mov	r0, r6
 8001a7c:	f7fe fbde 	bl	800023c <__adddf3>
 8001a80:	f7ff f88a 	bl	8000b98 <__aeabi_d2f>
					previousSignalPeak = 0;
 8001a84:	2300      	movs	r3, #0
					TresholdI = NoiseLevelI + 0.25 * (SignalLevelI - NoiseLevelI);
 8001a86:	f8cb 0000 	str.w	r0, [fp]
					previousSignalPeak = 0;
 8001a8a:	602b      	str	r3, [r5, #0]
					previousMean = 0;
 8001a8c:	f8ca 3000 	str.w	r3, [sl]
	return 0;
 8001a90:	2000      	movs	r0, #0
 8001a92:	e687      	b.n	80017a4 <arm_PT_ST+0x114>
						SignalLevelF = 0.125*previousSignalPeak + 0.875*SignalLevelF;
 8001a94:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8001ba4 <arm_PT_ST+0x514>
 8001a98:	f8d9 0000 	ldr.w	r0, [r9]
 8001a9c:	f7fe fd2c 	bl	80004f8 <__aeabi_f2d>
 8001aa0:	4b3f      	ldr	r3, [pc, #252]	; (8001ba0 <arm_PT_ST+0x510>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f7fe fd80 	bl	80005a8 <__aeabi_dmul>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	4638      	mov	r0, r7
 8001aac:	4616      	mov	r6, r2
 8001aae:	460f      	mov	r7, r1
 8001ab0:	f7fe fd22 	bl	80004f8 <__aeabi_f2d>
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001aba:	f7fe fd75 	bl	80005a8 <__aeabi_dmul>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4630      	mov	r0, r6
 8001ac4:	4639      	mov	r1, r7
 8001ac6:	f7fe fbb9 	bl	800023c <__adddf3>
 8001aca:	f7ff f865 	bl	8000b98 <__aeabi_d2f>
						TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 8001ace:	4b36      	ldr	r3, [pc, #216]	; (8001ba8 <arm_PT_ST+0x518>)
						SignalLevelF = 0.125*previousSignalPeak + 0.875*SignalLevelF;
 8001ad0:	f8c9 0000 	str.w	r0, [r9]
						TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 8001ad4:	ed93 9a00 	vldr	s18, [r3]
						SignalLevelF = 0.125*previousSignalPeak + 0.875*SignalLevelF;
 8001ad8:	ee07 0a90 	vmov	s15, r0
						TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 8001adc:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8001ae0:	ee17 0a90 	vmov	r0, s15
 8001ae4:	f7fe fd08 	bl	80004f8 <__aeabi_f2d>
 8001ae8:	4b30      	ldr	r3, [pc, #192]	; (8001bac <arm_PT_ST+0x51c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	f7fe fd5c 	bl	80005a8 <__aeabi_dmul>
 8001af0:	4606      	mov	r6, r0
 8001af2:	ee19 0a10 	vmov	r0, s18
 8001af6:	460f      	mov	r7, r1
 8001af8:	f7fe fcfe 	bl	80004f8 <__aeabi_f2d>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4630      	mov	r0, r6
 8001b02:	4639      	mov	r1, r7
 8001b04:	f7fe fb9a 	bl	800023c <__adddf3>
 8001b08:	f7ff f846 	bl	8000b98 <__aeabi_d2f>
 8001b0c:	4b28      	ldr	r3, [pc, #160]	; (8001bb0 <arm_PT_ST+0x520>)
 8001b0e:	6018      	str	r0, [r3, #0]
						SignalLevelI = 0.125*meanValue + 0.875*SignalLevelI;
 8001b10:	4b28      	ldr	r3, [pc, #160]	; (8001bb4 <arm_PT_ST+0x524>)
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	f7fe fcf0 	bl	80004f8 <__aeabi_f2d>
 8001b18:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <arm_PT_ST+0x510>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f7fe fd44 	bl	80005a8 <__aeabi_dmul>
 8001b20:	4606      	mov	r6, r0
 8001b22:	ee18 0a10 	vmov	r0, s16
 8001b26:	460f      	mov	r7, r1
 8001b28:	f7fe fce6 	bl	80004f8 <__aeabi_f2d>
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001b32:	f7fe fd39 	bl	80005a8 <__aeabi_dmul>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4630      	mov	r0, r6
 8001b3c:	4639      	mov	r1, r7
 8001b3e:	f7fe fb7d 	bl	800023c <__adddf3>
 8001b42:	f7ff f829 	bl	8000b98 <__aeabi_d2f>
 8001b46:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <arm_PT_ST+0x524>)
 8001b48:	6018      	str	r0, [r3, #0]
						TresholdI = NoiseLevelI + 0.25 * (SignalLevelI - NoiseLevelI);
 8001b4a:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <arm_PT_ST+0x50c>)
						SignalLevelI = 0.125*meanValue + 0.875*SignalLevelI;
 8001b4c:	ee07 0a90 	vmov	s15, r0
						TresholdI = NoiseLevelI + 0.25 * (SignalLevelI - NoiseLevelI);
 8001b50:	ed93 8a00 	vldr	s16, [r3]
 8001b54:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8001b58:	ee17 0a90 	vmov	r0, s15
 8001b5c:	f7fe fccc 	bl	80004f8 <__aeabi_f2d>
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <arm_PT_ST+0x51c>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	f7fe fd20 	bl	80005a8 <__aeabi_dmul>
 8001b68:	4606      	mov	r6, r0
 8001b6a:	ee18 0a10 	vmov	r0, s16
 8001b6e:	460f      	mov	r7, r1
 8001b70:	f7fe fcc2 	bl	80004f8 <__aeabi_f2d>
 8001b74:	460b      	mov	r3, r1
 8001b76:	4602      	mov	r2, r0
 8001b78:	4639      	mov	r1, r7
 8001b7a:	4630      	mov	r0, r6
 8001b7c:	f7fe fb5e 	bl	800023c <__adddf3>
 8001b80:	f7ff f80a 	bl	8000b98 <__aeabi_d2f>
						latencyDelay = 0;
 8001b84:	2300      	movs	r3, #0
						TresholdI = NoiseLevelI + 0.25 * (SignalLevelI - NoiseLevelI);
 8001b86:	f8cb 0000 	str.w	r0, [fp]
						previousSignalPeak = 0;
 8001b8a:	edc5 8a00 	vstr	s17, [r5]
						return peakTimeDelay;
 8001b8e:	f9b8 0000 	ldrsh.w	r0, [r8]
						previousMean = 0;
 8001b92:	edca 8a00 	vstr	s17, [sl]
						latencyDelay = 0;
 8001b96:	8023      	strh	r3, [r4, #0]
						return peakTimeDelay;
 8001b98:	e604      	b.n	80017a4 <arm_PT_ST+0x114>
 8001b9a:	bf00      	nop
 8001b9c:	20000464 	.word	0x20000464
 8001ba0:	3fec0000 	.word	0x3fec0000
 8001ba4:	20000468 	.word	0x20000468
 8001ba8:	20000460 	.word	0x20000460
 8001bac:	3fd00000 	.word	0x3fd00000
 8001bb0:	20000470 	.word	0x20000470
 8001bb4:	2000046c 	.word	0x2000046c

08001bb8 <Rafael_init>:
{



	 rrlow = 0;
	 rrhigh = 0;
 8001bb8:	4b1a      	ldr	r3, [pc, #104]	; (8001c24 <Rafael_init+0x6c>)
	 rrlow = 0;
 8001bba:	481b      	ldr	r0, [pc, #108]	; (8001c28 <Rafael_init+0x70>)
	 rrmiss = 0;
 8001bbc:	491b      	ldr	r1, [pc, #108]	; (8001c2c <Rafael_init+0x74>)
{
 8001bbe:	b510      	push	{r4, lr}
	 rrlow = 0;
 8001bc0:	2400      	movs	r4, #0
	 rrhigh = 0;
 8001bc2:	601c      	str	r4, [r3, #0]


	sample = 0;
 8001bc4:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <Rafael_init+0x78>)
	 rrlow = 0;
 8001bc6:	6004      	str	r4, [r0, #0]
	sample = 0;
 8001bc8:	601c      	str	r4, [r3, #0]
	lastQRS = 0;
	lastSlope = 0;
 8001bca:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <Rafael_init+0x7c>)
	lastQRS = 0;
 8001bcc:	481a      	ldr	r0, [pc, #104]	; (8001c38 <Rafael_init+0x80>)
	lastSlope = 0;
 8001bce:	601c      	str	r4, [r3, #0]
	currentSlope = 0;

	peak_i = 0;
 8001bd0:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <Rafael_init+0x84>)
	 rrmiss = 0;
 8001bd2:	600c      	str	r4, [r1, #0]
	peak_i = 0;
 8001bd4:	801c      	strh	r4, [r3, #0]
	peak_f = 0;
	threshold_i1 = 0;
 8001bd6:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <Rafael_init+0x88>)
	currentSlope = 0;
 8001bd8:	491a      	ldr	r1, [pc, #104]	; (8001c44 <Rafael_init+0x8c>)
	threshold_i1 = 0;
 8001bda:	801c      	strh	r4, [r3, #0]
	threshold_i2 = 0;
	threshold_f1 = 0;
 8001bdc:	4b1a      	ldr	r3, [pc, #104]	; (8001c48 <Rafael_init+0x90>)
	lastQRS = 0;
 8001bde:	6004      	str	r4, [r0, #0]
	threshold_f1 = 0;
 8001be0:	801c      	strh	r4, [r3, #0]
	peak_f = 0;
 8001be2:	481a      	ldr	r0, [pc, #104]	; (8001c4c <Rafael_init+0x94>)
	threshold_f2 = 0;
	spk_i = 0;
 8001be4:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <Rafael_init+0x98>)
	currentSlope = 0;
 8001be6:	600c      	str	r4, [r1, #0]
	threshold_i2 = 0;
 8001be8:	491a      	ldr	r1, [pc, #104]	; (8001c54 <Rafael_init+0x9c>)
	peak_f = 0;
 8001bea:	8004      	strh	r4, [r0, #0]
	spk_i = 0;
 8001bec:	801c      	strh	r4, [r3, #0]
	threshold_f2 = 0;
 8001bee:	481a      	ldr	r0, [pc, #104]	; (8001c58 <Rafael_init+0xa0>)
	spk_f = 0;
	npk_i = 0;
 8001bf0:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <Rafael_init+0xa4>)
	threshold_i2 = 0;
 8001bf2:	800c      	strh	r4, [r1, #0]
	spk_f = 0;
 8001bf4:	491a      	ldr	r1, [pc, #104]	; (8001c60 <Rafael_init+0xa8>)
	threshold_f2 = 0;
 8001bf6:	8004      	strh	r4, [r0, #0]
	npk_i = 0;
 8001bf8:	801c      	strh	r4, [r3, #0]
	npk_f = 0;
 8001bfa:	481a      	ldr	r0, [pc, #104]	; (8001c64 <Rafael_init+0xac>)




	regular = true;
 8001bfc:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <Rafael_init+0xb0>)
	spk_f = 0;
 8001bfe:	800c      	strh	r4, [r1, #0]
	regular = true;
 8001c00:	2101      	movs	r1, #1
 8001c02:	7019      	strb	r1, [r3, #0]
	// Initializing the RR averages
	for (i = 0; i < 8; i++)
    {
        rr1[i] = 0;
 8001c04:	2220      	movs	r2, #32
	npk_f = 0;
 8001c06:	8004      	strh	r4, [r0, #0]
        rr1[i] = 0;
 8001c08:	4621      	mov	r1, r4
 8001c0a:	4818      	ldr	r0, [pc, #96]	; (8001c6c <Rafael_init+0xb4>)
 8001c0c:	f005 ff92 	bl	8007b34 <memset>
        rr2[i] = 0;
 8001c10:	2220      	movs	r2, #32
 8001c12:	4817      	ldr	r0, [pc, #92]	; (8001c70 <Rafael_init+0xb8>)
 8001c14:	4621      	mov	r1, r4
 8001c16:	f005 ff8d 	bl	8007b34 <memset>
 8001c1a:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <Rafael_init+0xbc>)
 8001c1c:	2208      	movs	r2, #8
 8001c1e:	601a      	str	r2, [r3, #0]
    }
}
 8001c20:	bd10      	pop	{r4, pc}
 8001c22:	bf00      	nop
 8001c24:	20002714 	.word	0x20002714
 8001c28:	20002718 	.word	0x20002718
 8001c2c:	2000271c 	.word	0x2000271c
 8001c30:	20002720 	.word	0x20002720
 8001c34:	20001d5c 	.word	0x20001d5c
 8001c38:	20001d58 	.word	0x20001d58
 8001c3c:	200026c6 	.word	0x200026c6
 8001c40:	20002bdc 	.word	0x20002bdc
 8001c44:	20000a8c 	.word	0x20000a8c
 8001c48:	20002bd8 	.word	0x20002bd8
 8001c4c:	200026c4 	.word	0x200026c4
 8001c50:	20002726 	.word	0x20002726
 8001c54:	20002bde 	.word	0x20002bde
 8001c58:	20002bda 	.word	0x20002bda
 8001c5c:	20002212 	.word	0x20002212
 8001c60:	20002724 	.word	0x20002724
 8001c64:	20002210 	.word	0x20002210
 8001c68:	20000004 	.word	0x20000004
 8001c6c:	200026cc 	.word	0x200026cc
 8001c70:	200026ec 	.word	0x200026ec
 8001c74:	200018a0 	.word	0x200018a0

08001c78 <Rafael_PanTompkins>:
    and updates the thresholds and averages until there are no more samples. More details both above and in
    shorter comments below.
*/
//Changes: remove loop, function analyse one sample, removed all output call.
void Rafael_PanTompkins(dataType InputSample)
{
 8001c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

        // Test if the buffers are full.
        // If they are, shift them, discarding the oldest sample and adding the new one at the end.
        // Else, just put the newest sample in the next free position.
        // Update 'current' so that the program knows where's the newest sample.
		if (sample >= BUFFSIZE)
 8001c7c:	4e70      	ldr	r6, [pc, #448]	; (8001e40 <Rafael_PanTompkins+0x1c8>)
{
 8001c7e:	ed2d 8b04 	vpush	{d8-d9}
		if (sample >= BUFFSIZE)
 8001c82:	6833      	ldr	r3, [r6, #0]
 8001c84:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
{
 8001c88:	b095      	sub	sp, #84	; 0x54
 8001c8a:	4604      	mov	r4, r0
		if (sample >= BUFFSIZE)
 8001c8c:	f0c0 82c7 	bcc.w	800221e <Rafael_PanTompkins+0x5a6>
		{
			for (i = 0; i < BUFFSIZE - 1; i++)
			{
				ECGsignal[i] = ECGsignal[i+1];
 8001c90:	4d6c      	ldr	r5, [pc, #432]	; (8001e44 <Rafael_PanTompkins+0x1cc>)
			current = InputSample;
		}
		ECGsignal[current] = InputSample;


		sample++; // Update sample counter
 8001c92:	1c5f      	adds	r7, r3, #1
				ECGsignal[i] = ECGsignal[i+1];
 8001c94:	f240 42ae 	movw	r2, #1198	; 0x4ae
 8001c98:	1ca9      	adds	r1, r5, #2
 8001c9a:	4628      	mov	r0, r5
		sample++; // Update sample counter
 8001c9c:	9704      	str	r7, [sp, #16]
				ECGsignal[i] = ECGsignal[i+1];
 8001c9e:	f005 ff2f 	bl	8007b00 <memmove>
				dcblock[i] = dcblock[i+1];
 8001ca2:	4969      	ldr	r1, [pc, #420]	; (8001e48 <Rafael_PanTompkins+0x1d0>)
 8001ca4:	4b69      	ldr	r3, [pc, #420]	; (8001e4c <Rafael_PanTompkins+0x1d4>)
 8001ca6:	9301      	str	r3, [sp, #4]
 8001ca8:	f240 42ae 	movw	r2, #1198	; 0x4ae
 8001cac:	1e88      	subs	r0, r1, #2
 8001cae:	f005 ff27 	bl	8007b00 <memmove>
				lowpass[i] = lowpass[i+1];
 8001cb2:	4967      	ldr	r1, [pc, #412]	; (8001e50 <Rafael_PanTompkins+0x1d8>)
 8001cb4:	f240 42ae 	movw	r2, #1198	; 0x4ae
 8001cb8:	1e88      	subs	r0, r1, #2
 8001cba:	f005 ff21 	bl	8007b00 <memmove>
				highpass[i] = highpass[i+1];
 8001cbe:	4965      	ldr	r1, [pc, #404]	; (8001e54 <Rafael_PanTompkins+0x1dc>)
 8001cc0:	f240 42ae 	movw	r2, #1198	; 0x4ae
 8001cc4:	1e88      	subs	r0, r1, #2
 8001cc6:	f005 ff1b 	bl	8007b00 <memmove>
				derivative[i] = derivative[i+1];
 8001cca:	4963      	ldr	r1, [pc, #396]	; (8001e58 <Rafael_PanTompkins+0x1e0>)
 8001ccc:	f240 42ae 	movw	r2, #1198	; 0x4ae
 8001cd0:	1e88      	subs	r0, r1, #2
 8001cd2:	f005 ff15 	bl	8007b00 <memmove>
				squared[i] = squared[i+1];
 8001cd6:	4961      	ldr	r1, [pc, #388]	; (8001e5c <Rafael_PanTompkins+0x1e4>)
 8001cd8:	f240 42ae 	movw	r2, #1198	; 0x4ae
 8001cdc:	1e88      	subs	r0, r1, #2
 8001cde:	f005 ff0f 	bl	8007b00 <memmove>
				integral[i] = integral[i+1];
 8001ce2:	495f      	ldr	r1, [pc, #380]	; (8001e60 <Rafael_PanTompkins+0x1e8>)
 8001ce4:	f240 42ae 	movw	r2, #1198	; 0x4ae
 8001ce8:	1e88      	subs	r0, r1, #2
 8001cea:	f005 ff09 	bl	8007b00 <memmove>
				outputSignal[i] = outputSignal[i+1];
 8001cee:	495d      	ldr	r1, [pc, #372]	; (8001e64 <Rafael_PanTompkins+0x1ec>)
 8001cf0:	f240 42ae 	movw	r2, #1198	; 0x4ae
 8001cf4:	1e88      	subs	r0, r1, #2
 8001cf6:	f005 ff03 	bl	8007b00 <memmove>
			current = BUFFSIZE - 1;
 8001cfa:	4a5b      	ldr	r2, [pc, #364]	; (8001e68 <Rafael_PanTompkins+0x1f0>)
		sample++; // Update sample counter
 8001cfc:	6037      	str	r7, [r6, #0]
 8001cfe:	f240 2357 	movw	r3, #599	; 0x257
			current = BUFFSIZE - 1;
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	4a51      	ldr	r2, [pc, #324]	; (8001e4c <Rafael_PanTompkins+0x1d4>)
		ECGsignal[current] = InputSample;
 8001d06:	f8a5 44ae 	strh.w	r4, [r5, #1198]	; 0x4ae
			current = InputSample;
 8001d0a:	f240 2656 	movw	r6, #598	; 0x256
 8001d0e:	6013      	str	r3, [r2, #0]
		ECGsignal[current] = InputSample;
 8001d10:	469a      	mov	sl, r3

		// DC Block filter
		// This was not proposed on the original paper.
		// It is not necessary and can be removed if your sensor or database has no DC noise.
		if (current >= 1)
			dcblock[current] = ECGsignal[current] - ECGsignal[current-1] + 0.995*dcblock[current-1];
 8001d12:	f935 0016 	ldrsh.w	r0, [r5, r6, lsl #1]
 8001d16:	4f55      	ldr	r7, [pc, #340]	; (8001e6c <Rafael_PanTompkins+0x1f4>)
 8001d18:	1a20      	subs	r0, r4, r0
 8001d1a:	f7fe fbdb 	bl	80004d4 <__aeabi_i2d>
 8001d1e:	4604      	mov	r4, r0
 8001d20:	f937 0016 	ldrsh.w	r0, [r7, r6, lsl #1]
 8001d24:	460d      	mov	r5, r1
 8001d26:	f7fe fbd5 	bl	80004d4 <__aeabi_i2d>
 8001d2a:	a343      	add	r3, pc, #268	; (adr r3, 8001e38 <Rafael_PanTompkins+0x1c0>)
 8001d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d30:	f7fe fc3a 	bl	80005a8 <__aeabi_dmul>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4620      	mov	r0, r4
 8001d3a:	4629      	mov	r1, r5
 8001d3c:	f7fe fa7e 	bl	800023c <__adddf3>
 8001d40:	f7fe fee2 	bl	8000b08 <__aeabi_d2iz>

		// Low Pass filter
		// Implemented as proposed by the original paper.
		// y(nT) = 2y(nT - T) - y(nT - 2T) + x(nT) - 2x(nT - 6T) + x(nT - 12T)
		// Can be removed if your signal was previously filtered, or replaced by a different filter.
		lowpass[current] = dcblock[current];
 8001d44:	4a4a      	ldr	r2, [pc, #296]	; (8001e70 <Rafael_PanTompkins+0x1f8>)
			dcblock[current] = ECGsignal[current] - ECGsignal[current-1] + 0.995*dcblock[current-1];
 8001d46:	b200      	sxth	r0, r0
		lowpass[current] = dcblock[current];
 8001d48:	f822 001a 	strh.w	r0, [r2, sl, lsl #1]
		if (current >= 1)
			lowpass[current] += 2*lowpass[current-1];
 8001d4c:	f832 3016 	ldrh.w	r3, [r2, r6, lsl #1]
			dcblock[current] = ECGsignal[current] - ECGsignal[current-1] + 0.995*dcblock[current-1];
 8001d50:	f827 001a 	strh.w	r0, [r7, sl, lsl #1]
			lowpass[current] += 2*lowpass[current-1];
 8001d54:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8001d58:	b280      	uxth	r0, r0
		if (current >= 2)
 8001d5a:	f1ba 0f01 	cmp.w	sl, #1
			lowpass[current] += 2*lowpass[current-1];
 8001d5e:	f822 001a 	strh.w	r0, [r2, sl, lsl #1]
		if (current >= 2)
 8001d62:	bf08      	it	eq
 8001d64:	4601      	moveq	r1, r0
 8001d66:	f000 83df 	beq.w	8002528 <Rafael_PanTompkins+0x8b0>
			lowpass[current] -= lowpass[current-2];
 8001d6a:	f1aa 0302 	sub.w	r3, sl, #2
		if (current >= 6)
 8001d6e:	f1ba 0f05 	cmp.w	sl, #5
			lowpass[current] -= lowpass[current-2];
 8001d72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d76:	eba0 0103 	sub.w	r1, r0, r3
 8001d7a:	b289      	uxth	r1, r1
 8001d7c:	f822 101a 	strh.w	r1, [r2, sl, lsl #1]
		if (current >= 6)
 8001d80:	f340 83d2 	ble.w	8002528 <Rafael_PanTompkins+0x8b0>
			lowpass[current] -= 2*dcblock[current-6];
 8001d84:	f1aa 0406 	sub.w	r4, sl, #6
		if (current >= 12)
 8001d88:	f1ba 0f0b 	cmp.w	sl, #11
			lowpass[current] -= 2*dcblock[current-6];
 8001d8c:	f837 4014 	ldrh.w	r4, [r7, r4, lsl #1]
 8001d90:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8001d94:	b2a4      	uxth	r4, r4
 8001d96:	eba1 0104 	sub.w	r1, r1, r4
 8001d9a:	b289      	uxth	r1, r1
 8001d9c:	f822 101a 	strh.w	r1, [r2, sl, lsl #1]
		if (current >= 12)
 8001da0:	f340 83c2 	ble.w	8002528 <Rafael_PanTompkins+0x8b0>
			lowpass[current] += dcblock[current-12];
 8001da4:	f1aa 050c 	sub.w	r5, sl, #12
 8001da8:	f837 5015 	ldrh.w	r5, [r7, r5, lsl #1]

		// High Pass filter
		// Implemented as proposed by the original paper.
		// y(nT) = 32x(nT - 16T) - [y(nT - T) + x(nT) - x(nT - 32T)]
		// Can be removed if your signal was previously filtered, or replaced by a different filter.
		highpass[current] = -lowpass[current];
 8001dac:	4f31      	ldr	r7, [pc, #196]	; (8001e74 <Rafael_PanTompkins+0x1fc>)
 8001dae:	1b64      	subs	r4, r4, r5
 8001db0:	4423      	add	r3, r4
 8001db2:	1a1b      	subs	r3, r3, r0
			lowpass[current] += dcblock[current-12];
 8001db4:	4429      	add	r1, r5
		highpass[current] = -lowpass[current];
 8001db6:	b29b      	uxth	r3, r3
			lowpass[current] += dcblock[current-12];
 8001db8:	f822 101a 	strh.w	r1, [r2, sl, lsl #1]
		highpass[current] = -lowpass[current];
 8001dbc:	f827 301a 	strh.w	r3, [r7, sl, lsl #1]
		if (current >= 1)
			highpass[current] -= highpass[current-1];
 8001dc0:	f837 1016 	ldrh.w	r1, [r7, r6, lsl #1]
 8001dc4:	1a5b      	subs	r3, r3, r1
 8001dc6:	fa0f fb83 	sxth.w	fp, r3
		if (current >= 16)
 8001dca:	f1ba 0f0f 	cmp.w	sl, #15
			highpass[current] -= highpass[current-1];
 8001dce:	f827 b01a 	strh.w	fp, [r7, sl, lsl #1]
 8001dd2:	b29b      	uxth	r3, r3
		if (current >= 16)
 8001dd4:	dd17      	ble.n	8001e06 <Rafael_PanTompkins+0x18e>
			highpass[current] += 32*lowpass[current-16];
 8001dd6:	f1aa 0110 	sub.w	r1, sl, #16
		if (current >= 32)
 8001dda:	f1ba 0f1f 	cmp.w	sl, #31
			highpass[current] += 32*lowpass[current-16];
 8001dde:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001de2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8001de6:	fa0f fb83 	sxth.w	fp, r3
 8001dea:	f827 b01a 	strh.w	fp, [r7, sl, lsl #1]
 8001dee:	b29b      	uxth	r3, r3
		if (current >= 32)
 8001df0:	dd09      	ble.n	8001e06 <Rafael_PanTompkins+0x18e>
			highpass[current] += lowpass[current-32];
 8001df2:	f1aa 0120 	sub.w	r1, sl, #32
 8001df6:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	fa0f fb83 	sxth.w	fp, r3
 8001e00:	f827 b01a 	strh.w	fp, [r7, sl, lsl #1]
 8001e04:	b29b      	uxth	r3, r3
		// f'(a) = [f(a+h) - f(a-h)]/2h
		// The original formula used by Pan-Tompkins was:
		// y(nT) = (1/8T)[-x(nT - 2T) - 2x(nT - T) + 2x(nT + T) + x(nT + 2T)]
        derivative[current] = highpass[current];
		if (current > 0)
			derivative[current] -= highpass[current-1];
 8001e06:	f837 2016 	ldrh.w	r2, [r7, r6, lsl #1]
 8001e0a:	1a9b      	subs	r3, r3, r2
 8001e0c:	4a1a      	ldr	r2, [pc, #104]	; (8001e78 <Rafael_PanTompkins+0x200>)
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	f822 301a 	strh.w	r3, [r2, sl, lsl #1]

		// This just squares the derivative, to get rid of negative values and emphasize high frequencies.
		// y(nT) = [x(nT)]^2.
		squared[current] = derivative[current]*derivative[current];
 8001e14:	fb13 f303 	smulbb	r3, r3, r3
 8001e18:	b21b      	sxth	r3, r3
 8001e1a:	4a18      	ldr	r2, [pc, #96]	; (8001e7c <Rafael_PanTompkins+0x204>)
		// Implemented as proposed by the original paper.
		// y(nT) = (1/N)[x(nT - (N - 1)T) + x(nT - (N - 2)T) + ... x(nT)]
		// WINDOWSIZE, in samples, must be defined so that the window is ~150ms.

		integral[current] = 0;
		for (i = 0; i < WINDOWSIZE; i++)
 8001e1c:	9901      	ldr	r1, [sp, #4]
		squared[current] = derivative[current]*derivative[current];
 8001e1e:	f822 301a 	strh.w	r3, [r2, sl, lsl #1]
		for (i = 0; i < WINDOWSIZE; i++)
 8001e22:	ea4f 004a 	mov.w	r0, sl, lsl #1
 8001e26:	2300      	movs	r3, #0
 8001e28:	1c85      	adds	r5, r0, #2
 8001e2a:	600b      	str	r3, [r1, #0]
 8001e2c:	4415      	add	r5, r2
 8001e2e:	4914      	ldr	r1, [pc, #80]	; (8001e80 <Rafael_PanTompkins+0x208>)
 8001e30:	461a      	mov	r2, r3
 8001e32:	461c      	mov	r4, r3
 8001e34:	e031      	b.n	8001e9a <Rafael_PanTompkins+0x222>
 8001e36:	bf00      	nop
 8001e38:	3d70a3d7 	.word	0x3d70a3d7
 8001e3c:	3fefd70a 	.word	0x3fefd70a
 8001e40:	20002720 	.word	0x20002720
 8001e44:	200005d8 	.word	0x200005d8
 8001e48:	20000a92 	.word	0x20000a92
 8001e4c:	200018a0 	.word	0x200018a0
 8001e50:	20001d62 	.word	0x20001d62
 8001e54:	200013f2 	.word	0x200013f2
 8001e58:	20000f42 	.word	0x20000f42
 8001e5c:	2000272a 	.word	0x2000272a
 8001e60:	200018a6 	.word	0x200018a6
 8001e64:	20002216 	.word	0x20002216
 8001e68:	20000a88 	.word	0x20000a88
 8001e6c:	20000a90 	.word	0x20000a90
 8001e70:	20001d60 	.word	0x20001d60
 8001e74:	200013f0 	.word	0x200013f0
 8001e78:	20000f40 	.word	0x20000f40
 8001e7c:	20002728 	.word	0x20002728
 8001e80:	200018a4 	.word	0x200018a4
		{
			if (current >= (dataType)i)
				integral[current] += squared[current - i];
 8001e84:	f835 2d02 	ldrh.w	r2, [r5, #-2]!
		for (i = 0; i < WINDOWSIZE; i++)
 8001e88:	3401      	adds	r4, #1
				integral[current] += squared[current - i];
 8001e8a:	4413      	add	r3, r2
 8001e8c:	b21b      	sxth	r3, r3
		for (i = 0; i < WINDOWSIZE; i++)
 8001e8e:	2c14      	cmp	r4, #20
				integral[current] += squared[current - i];
 8001e90:	f821 301a 	strh.w	r3, [r1, sl, lsl #1]
		for (i = 0; i < WINDOWSIZE; i++)
 8001e94:	f04f 0201 	mov.w	r2, #1
 8001e98:	d002      	beq.n	8001ea0 <Rafael_PanTompkins+0x228>
			if (current >= (dataType)i)
 8001e9a:	45a2      	cmp	sl, r4
 8001e9c:	daf2      	bge.n	8001e84 <Rafael_PanTompkins+0x20c>
 8001e9e:	b10a      	cbz	r2, 8001ea4 <Rafael_PanTompkins+0x22c>
 8001ea0:	9a01      	ldr	r2, [sp, #4]
 8001ea2:	6014      	str	r4, [r2, #0]
		integral[current] /= (dataType)i;

		qrs = false;

		// If the current signal is above one of the thresholds (integral or filtered signal), it's a peak candidate.
        if (integral[current] >= threshold_i1 || highpass[current] >= threshold_f1)
 8001ea4:	4a63      	ldr	r2, [pc, #396]	; (8002034 <Rafael_PanTompkins+0x3bc>)
		integral[current] /= (dataType)i;
 8001ea6:	fb93 f3f4 	sdiv	r3, r3, r4
        if (integral[current] >= threshold_i1 || highpass[current] >= threshold_f1)
 8001eaa:	f9b2 2000 	ldrsh.w	r2, [r2]
		qrs = false;
 8001eae:	4c62      	ldr	r4, [pc, #392]	; (8002038 <Rafael_PanTompkins+0x3c0>)
        if (integral[current] >= threshold_i1 || highpass[current] >= threshold_f1)
 8001eb0:	920b      	str	r2, [sp, #44]	; 0x2c
		integral[current] /= (dataType)i;
 8001eb2:	b21b      	sxth	r3, r3
		qrs = false;
 8001eb4:	2500      	movs	r5, #0
        if (integral[current] >= threshold_i1 || highpass[current] >= threshold_f1)
 8001eb6:	4293      	cmp	r3, r2
		integral[current] /= (dataType)i;
 8001eb8:	f821 301a 	strh.w	r3, [r1, sl, lsl #1]
 8001ebc:	9305      	str	r3, [sp, #20]
		qrs = false;
 8001ebe:	7025      	strb	r5, [r4, #0]
        if (integral[current] >= threshold_i1 || highpass[current] >= threshold_f1)
 8001ec0:	f280 80da 	bge.w	8002078 <Rafael_PanTompkins+0x400>
 8001ec4:	4b5d      	ldr	r3, [pc, #372]	; (800203c <Rafael_PanTompkins+0x3c4>)
 8001ec6:	9307      	str	r3, [sp, #28]
 8001ec8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ecc:	930c      	str	r3, [sp, #48]	; 0x30
 8001ece:	455b      	cmp	r3, fp
 8001ed0:	dc05      	bgt.n	8001ede <Rafael_PanTompkins+0x266>
        {
            peak_i = integral[current];
 8001ed2:	4b5b      	ldr	r3, [pc, #364]	; (8002040 <Rafael_PanTompkins+0x3c8>)
 8001ed4:	9a05      	ldr	r2, [sp, #20]
 8001ed6:	801a      	strh	r2, [r3, #0]
            peak_f = highpass[current];
 8001ed8:	4b5a      	ldr	r3, [pc, #360]	; (8002044 <Rafael_PanTompkins+0x3cc>)
 8001eda:	f8a3 b000 	strh.w	fp, [r3]
		// If no R-peak was detected, it's important to check how long it's been since the last detection.
		else
		{
		    // If no R-peak was detected for too long, use the lighter thresholds and do a back search.
			// However, the back search must respect the 200ms limit and the 360ms one (check the slope).
			if ((sample - lastQRS > (long unsigned int)rrmiss) && (sample > lastQRS + FS/5))
 8001ede:	4b5a      	ldr	r3, [pc, #360]	; (8002048 <Rafael_PanTompkins+0x3d0>)
 8001ee0:	9308      	str	r3, [sp, #32]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a59      	ldr	r2, [pc, #356]	; (800204c <Rafael_PanTompkins+0x3d4>)
 8001ee6:	9306      	str	r3, [sp, #24]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	9b04      	ldr	r3, [sp, #16]
 8001eec:	9210      	str	r2, [sp, #64]	; 0x40
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	1a1b      	subs	r3, r3, r0
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	f200 81b0 	bhi.w	8002258 <Rafael_PanTompkins+0x5e0>
 8001ef8:	4c55      	ldr	r4, [pc, #340]	; (8002050 <Rafael_PanTompkins+0x3d8>)

			// Definitely no signal peak was detected.
			if (!qrs)
			{
				// If some kind of peak had been detected, then it's certainly a noise peak. Thresholds must be updated accordinly.
				if ((integral[current] >= threshold_i1) || (highpass[current] >= threshold_f1))
 8001efa:	9b05      	ldr	r3, [sp, #20]
 8001efc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001efe:	4293      	cmp	r3, r2
 8001f00:	f2c0 8231 	blt.w	8002366 <Rafael_PanTompkins+0x6ee>
				{
					peak_i = integral[current];
 8001f04:	4b4e      	ldr	r3, [pc, #312]	; (8002040 <Rafael_PanTompkins+0x3c8>)
					npk_i = 0.125*peak_i + 0.875*npk_i;
 8001f06:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8002070 <Rafael_PanTompkins+0x3f8>
					peak_i = integral[current];
 8001f0a:	9e05      	ldr	r6, [sp, #20]
					npk_i = 0.125*peak_i + 0.875*npk_i;
 8001f0c:	f9b8 0000 	ldrsh.w	r0, [r8]
					peak_i = integral[current];
 8001f10:	801e      	strh	r6, [r3, #0]
					npk_i = 0.125*peak_i + 0.875*npk_i;
 8001f12:	f7fe fadf 	bl	80004d4 <__aeabi_i2d>
 8001f16:	4b4f      	ldr	r3, [pc, #316]	; (8002054 <Rafael_PanTompkins+0x3dc>)
					threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
					threshold_i2 = 0.5*threshold_i1;
					peak_f = highpass[current];
					npk_f = 0.125*peak_f + 0.875*npk_f;
 8001f18:	4d4f      	ldr	r5, [pc, #316]	; (8002058 <Rafael_PanTompkins+0x3e0>)
					threshold_i2 = 0.5*threshold_i1;
 8001f1a:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8002074 <Rafael_PanTompkins+0x3fc>
					npk_i = 0.125*peak_i + 0.875*npk_i;
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f7fe fb42 	bl	80005a8 <__aeabi_dmul>
 8001f24:	4602      	mov	r2, r0
 8001f26:	4630      	mov	r0, r6
 8001f28:	460f      	mov	r7, r1
 8001f2a:	4616      	mov	r6, r2
 8001f2c:	f7fe fad2 	bl	80004d4 <__aeabi_i2d>
 8001f30:	2200      	movs	r2, #0
 8001f32:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001f36:	f7fe fb37 	bl	80005a8 <__aeabi_dmul>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4630      	mov	r0, r6
 8001f40:	4639      	mov	r1, r7
 8001f42:	f7fe f97b 	bl	800023c <__adddf3>
 8001f46:	f7fe fddf 	bl	8000b08 <__aeabi_d2iz>
					threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8001f4a:	4b44      	ldr	r3, [pc, #272]	; (800205c <Rafael_PanTompkins+0x3e4>)
					npk_i = 0.125*peak_i + 0.875*npk_i;
 8001f4c:	b207      	sxth	r7, r0
					threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8001f4e:	f9b3 0000 	ldrsh.w	r0, [r3]
					npk_i = 0.125*peak_i + 0.875*npk_i;
 8001f52:	f8a8 7000 	strh.w	r7, [r8]
					threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8001f56:	1bc0      	subs	r0, r0, r7
 8001f58:	f7fe fabc 	bl	80004d4 <__aeabi_i2d>
 8001f5c:	4b40      	ldr	r3, [pc, #256]	; (8002060 <Rafael_PanTompkins+0x3e8>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f7fe fb22 	bl	80005a8 <__aeabi_dmul>
 8001f64:	4602      	mov	r2, r0
 8001f66:	4638      	mov	r0, r7
 8001f68:	4616      	mov	r6, r2
 8001f6a:	460f      	mov	r7, r1
 8001f6c:	f7fe fab2 	bl	80004d4 <__aeabi_i2d>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4630      	mov	r0, r6
 8001f76:	4639      	mov	r1, r7
 8001f78:	f7fe f960 	bl	800023c <__adddf3>
 8001f7c:	f7fe fdc4 	bl	8000b08 <__aeabi_d2iz>
 8001f80:	4b2c      	ldr	r3, [pc, #176]	; (8002034 <Rafael_PanTompkins+0x3bc>)
 8001f82:	b200      	sxth	r0, r0
 8001f84:	8018      	strh	r0, [r3, #0]
					threshold_i2 = 0.5*threshold_i1;
 8001f86:	f7fe faa5 	bl	80004d4 <__aeabi_i2d>
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	4b35      	ldr	r3, [pc, #212]	; (8002064 <Rafael_PanTompkins+0x3ec>)
 8001f8e:	f7fe fb0b 	bl	80005a8 <__aeabi_dmul>
 8001f92:	f7fe fdb9 	bl	8000b08 <__aeabi_d2iz>
					peak_f = highpass[current];
 8001f96:	4b2b      	ldr	r3, [pc, #172]	; (8002044 <Rafael_PanTompkins+0x3cc>)
					threshold_i2 = 0.5*threshold_i1;
 8001f98:	f8a9 0000 	strh.w	r0, [r9]
					peak_f = highpass[current];
 8001f9c:	f8a3 b000 	strh.w	fp, [r3]
					npk_f = 0.125*peak_f + 0.875*npk_f;
 8001fa0:	f9b5 0000 	ldrsh.w	r0, [r5]
 8001fa4:	f7fe fa96 	bl	80004d4 <__aeabi_i2d>
 8001fa8:	4b2a      	ldr	r3, [pc, #168]	; (8002054 <Rafael_PanTompkins+0x3dc>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	f7fe fafc 	bl	80005a8 <__aeabi_dmul>
 8001fb0:	4606      	mov	r6, r0
 8001fb2:	4658      	mov	r0, fp
 8001fb4:	460f      	mov	r7, r1
 8001fb6:	f7fe fa8d 	bl	80004d4 <__aeabi_i2d>
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001fc0:	f7fe faf2 	bl	80005a8 <__aeabi_dmul>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4630      	mov	r0, r6
 8001fca:	4639      	mov	r1, r7
 8001fcc:	f7fe f936 	bl	800023c <__adddf3>
 8001fd0:	f7fe fd9a 	bl	8000b08 <__aeabi_d2iz>
					threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 8001fd4:	4b24      	ldr	r3, [pc, #144]	; (8002068 <Rafael_PanTompkins+0x3f0>)
					npk_f = 0.125*peak_f + 0.875*npk_f;
 8001fd6:	b207      	sxth	r7, r0
					threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 8001fd8:	f9b3 0000 	ldrsh.w	r0, [r3]
					npk_f = 0.125*peak_f + 0.875*npk_f;
 8001fdc:	802f      	strh	r7, [r5, #0]
					threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 8001fde:	1bc0      	subs	r0, r0, r7
 8001fe0:	f7fe fa78 	bl	80004d4 <__aeabi_i2d>
 8001fe4:	4b1e      	ldr	r3, [pc, #120]	; (8002060 <Rafael_PanTompkins+0x3e8>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f7fe fade 	bl	80005a8 <__aeabi_dmul>
 8001fec:	4602      	mov	r2, r0
 8001fee:	4638      	mov	r0, r7
 8001ff0:	4616      	mov	r6, r2
 8001ff2:	460f      	mov	r7, r1
 8001ff4:	f7fe fa6e 	bl	80004d4 <__aeabi_i2d>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4630      	mov	r0, r6
 8001ffe:	4639      	mov	r1, r7
 8002000:	f7fe f91c 	bl	800023c <__adddf3>
 8002004:	f7fe fd80 	bl	8000b08 <__aeabi_d2iz>
 8002008:	9b07      	ldr	r3, [sp, #28]
 800200a:	b200      	sxth	r0, r0
 800200c:	8018      	strh	r0, [r3, #0]
					threshold_f2 = 0.5*threshold_f1;
 800200e:	f7fe fa61 	bl	80004d4 <__aeabi_i2d>
 8002012:	4b14      	ldr	r3, [pc, #80]	; (8002064 <Rafael_PanTompkins+0x3ec>)
 8002014:	2200      	movs	r2, #0
 8002016:	f7fe fac7 	bl	80005a8 <__aeabi_dmul>
 800201a:	f7fe fd75 	bl	8000b08 <__aeabi_d2iz>
 800201e:	4b13      	ldr	r3, [pc, #76]	; (800206c <Rafael_PanTompkins+0x3f4>)
 8002020:	8018      	strh	r0, [r3, #0]
 8002022:	2300      	movs	r3, #0
		// the desired application.
		// The 'if' accounts for the delay introduced by the filters: we only start outputting after the delay.
		// However, it updates a few samples back from the buffer. The reason is that if we update the detection
		// for the current sample, we might miss a peak that could've been found later by backsearching using
		// lighter thresholds. The final waveform output does match the original signal, though.
		outputSignal[current] = qrs;
 8002024:	f824 301a 	strh.w	r3, [r4, sl, lsl #1]

}
 8002028:	b015      	add	sp, #84	; 0x54
 800202a:	ecbd 8b04 	vpop	{d8-d9}
 800202e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002032:	bf00      	nop
 8002034:	20002bdc 	.word	0x20002bdc
 8002038:	200026c9 	.word	0x200026c9
 800203c:	20002bd8 	.word	0x20002bd8
 8002040:	200026c6 	.word	0x200026c6
 8002044:	200026c4 	.word	0x200026c4
 8002048:	20001d58 	.word	0x20001d58
 800204c:	2000271c 	.word	0x2000271c
 8002050:	20002214 	.word	0x20002214
 8002054:	3fec0000 	.word	0x3fec0000
 8002058:	20002210 	.word	0x20002210
 800205c:	20002726 	.word	0x20002726
 8002060:	3fd00000 	.word	0x3fd00000
 8002064:	3fe00000 	.word	0x3fe00000
 8002068:	20002724 	.word	0x20002724
 800206c:	20002bda 	.word	0x20002bda
 8002070:	20002212 	.word	0x20002212
 8002074:	20002bde 	.word	0x20002bde
 8002078:	461c      	mov	r4, r3
            peak_i = integral[current];
 800207a:	4bc1      	ldr	r3, [pc, #772]	; (8002380 <Rafael_PanTompkins+0x708>)
		if ((integral[current] >= threshold_i1) && (highpass[current] >= threshold_f1))
 800207c:	4ac1      	ldr	r2, [pc, #772]	; (8002384 <Rafael_PanTompkins+0x70c>)
            peak_i = integral[current];
 800207e:	801c      	strh	r4, [r3, #0]
            peak_f = highpass[current];
 8002080:	4bc1      	ldr	r3, [pc, #772]	; (8002388 <Rafael_PanTompkins+0x710>)
		if ((integral[current] >= threshold_i1) && (highpass[current] >= threshold_f1))
 8002082:	9207      	str	r2, [sp, #28]
            peak_f = highpass[current];
 8002084:	f8a3 b000 	strh.w	fp, [r3]
		if ((integral[current] >= threshold_i1) && (highpass[current] >= threshold_f1))
 8002088:	f9b2 3000 	ldrsh.w	r3, [r2]
 800208c:	930c      	str	r3, [sp, #48]	; 0x30
 800208e:	455b      	cmp	r3, fp
 8002090:	f73f af25 	bgt.w	8001ede <Rafael_PanTompkins+0x266>
			if (sample > lastQRS + FS/5)
 8002094:	4bbd      	ldr	r3, [pc, #756]	; (800238c <Rafael_PanTompkins+0x714>)
 8002096:	9308      	str	r3, [sp, #32]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	9a04      	ldr	r2, [sp, #16]
 800209c:	9306      	str	r3, [sp, #24]
 800209e:	f103 0648 	add.w	r6, r3, #72	; 0x48
 80020a2:	4296      	cmp	r6, r2
 80020a4:	f080 81a0 	bcs.w	80023e8 <Rafael_PanTompkins+0x770>
				if (sample <= lastQRS + (long unsigned int)(0.36*FS))
 80020a8:	3381      	adds	r3, #129	; 0x81
 80020aa:	4293      	cmp	r3, r2
				    currentSlope = 0;
 80020ac:	4bb8      	ldr	r3, [pc, #736]	; (8002390 <Rafael_PanTompkins+0x718>)
 80020ae:	9311      	str	r3, [sp, #68]	; 0x44
 80020b0:	601d      	str	r5, [r3, #0]
				    for (j = current - 10; j <= current; j++)
 80020b2:	4bb8      	ldr	r3, [pc, #736]	; (8002394 <Rafael_PanTompkins+0x71c>)
 80020b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80020b6:	461a      	mov	r2, r3
 80020b8:	f1aa 030a 	sub.w	r3, sl, #10
 80020bc:	6013      	str	r3, [r2, #0]
				if (sample <= lastQRS + (long unsigned int)(0.36*FS))
 80020be:	f0c0 8253 	bcc.w	8002568 <Rafael_PanTompkins+0x8f0>
				    for (j = current - 10; j <= current; j++)
 80020c2:	4553      	cmp	r3, sl
 80020c4:	f200 8387 	bhi.w	80027d6 <Rafael_PanTompkins+0xb5e>
 80020c8:	4ab3      	ldr	r2, [pc, #716]	; (8002398 <Rafael_PanTompkins+0x720>)
 80020ca:	3814      	subs	r0, #20
 80020cc:	4410      	add	r0, r2
 80020ce:	462c      	mov	r4, r5
                        if (squared[j] > currentSlope)
 80020d0:	f930 2b02 	ldrsh.w	r2, [r0], #2
				    for (j = current - 10; j <= current; j++)
 80020d4:	3301      	adds	r3, #1
                        if (squared[j] > currentSlope)
 80020d6:	42a2      	cmp	r2, r4
 80020d8:	bf84      	itt	hi
 80020da:	4614      	movhi	r4, r2
 80020dc:	2501      	movhi	r5, #1
				    for (j = current - 10; j <= current; j++)
 80020de:	4553      	cmp	r3, sl
 80020e0:	d9f6      	bls.n	80020d0 <Rafael_PanTompkins+0x458>
 80020e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	2d00      	cmp	r5, #0
 80020e8:	f000 8375 	beq.w	80027d6 <Rafael_PanTompkins+0xb5e>
 80020ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
				    if (currentSlope <= (dataType)(lastSlope/2))
 80020ee:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 80023e0 <Rafael_PanTompkins+0x768>
 80020f2:	601c      	str	r4, [r3, #0]
 80020f4:	f8d8 3000 	ldr.w	r3, [r8]
 80020f8:	f343 034f 	sbfx	r3, r3, #1, #16
 80020fc:	429c      	cmp	r4, r3
 80020fe:	f240 836a 	bls.w	80027d6 <Rafael_PanTompkins+0xb5e>
                        spk_i = 0.125*peak_i + 0.875*spk_i;
 8002102:	4da6      	ldr	r5, [pc, #664]	; (800239c <Rafael_PanTompkins+0x724>)
                        spk_f = 0.125*peak_f + 0.875*spk_f;
 8002104:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 80023e4 <Rafael_PanTompkins+0x76c>
                        spk_i = 0.125*peak_i + 0.875*spk_i;
 8002108:	f9b5 0000 	ldrsh.w	r0, [r5]
 800210c:	f7fe f9e2 	bl	80004d4 <__aeabi_i2d>
 8002110:	4ba3      	ldr	r3, [pc, #652]	; (80023a0 <Rafael_PanTompkins+0x728>)
 8002112:	2200      	movs	r2, #0
 8002114:	f7fe fa48 	bl	80005a8 <__aeabi_dmul>
 8002118:	4602      	mov	r2, r0
 800211a:	9805      	ldr	r0, [sp, #20]
 800211c:	4616      	mov	r6, r2
 800211e:	460f      	mov	r7, r1
 8002120:	f7fe f9d8 	bl	80004d4 <__aeabi_i2d>
 8002124:	2200      	movs	r2, #0
 8002126:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800212a:	f7fe fa3d 	bl	80005a8 <__aeabi_dmul>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4630      	mov	r0, r6
 8002134:	4639      	mov	r1, r7
 8002136:	f7fe f881 	bl	800023c <__adddf3>
 800213a:	f7fe fce5 	bl	8000b08 <__aeabi_d2iz>
                        threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 800213e:	4b99      	ldr	r3, [pc, #612]	; (80023a4 <Rafael_PanTompkins+0x72c>)
                        spk_i = 0.125*peak_i + 0.875*spk_i;
 8002140:	b200      	sxth	r0, r0
 8002142:	8028      	strh	r0, [r5, #0]
                        threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8002144:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002148:	1b40      	subs	r0, r0, r5
 800214a:	f7fe f9c3 	bl	80004d4 <__aeabi_i2d>
 800214e:	4b96      	ldr	r3, [pc, #600]	; (80023a8 <Rafael_PanTompkins+0x730>)
 8002150:	2200      	movs	r2, #0
 8002152:	f7fe fa29 	bl	80005a8 <__aeabi_dmul>
 8002156:	4606      	mov	r6, r0
 8002158:	4628      	mov	r0, r5
 800215a:	460f      	mov	r7, r1
 800215c:	f7fe f9ba 	bl	80004d4 <__aeabi_i2d>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4630      	mov	r0, r6
 8002166:	4639      	mov	r1, r7
 8002168:	f7fe f868 	bl	800023c <__adddf3>
 800216c:	f7fe fccc 	bl	8000b08 <__aeabi_d2iz>
 8002170:	4a8e      	ldr	r2, [pc, #568]	; (80023ac <Rafael_PanTompkins+0x734>)
 8002172:	b203      	sxth	r3, r0
 8002174:	8013      	strh	r3, [r2, #0]
                        threshold_i2 = 0.5*threshold_i1;
 8002176:	4618      	mov	r0, r3
                        threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8002178:	9302      	str	r3, [sp, #8]
                        threshold_i2 = 0.5*threshold_i1;
 800217a:	f7fe f9ab 	bl	80004d4 <__aeabi_i2d>
 800217e:	2200      	movs	r2, #0
 8002180:	4b8b      	ldr	r3, [pc, #556]	; (80023b0 <Rafael_PanTompkins+0x738>)
 8002182:	f7fe fa11 	bl	80005a8 <__aeabi_dmul>
 8002186:	f7fe fcbf 	bl	8000b08 <__aeabi_d2iz>
 800218a:	4b8a      	ldr	r3, [pc, #552]	; (80023b4 <Rafael_PanTompkins+0x73c>)
 800218c:	8018      	strh	r0, [r3, #0]
                        spk_f = 0.125*peak_f + 0.875*spk_f;
 800218e:	f9b9 0000 	ldrsh.w	r0, [r9]
 8002192:	f7fe f99f 	bl	80004d4 <__aeabi_i2d>
 8002196:	4b82      	ldr	r3, [pc, #520]	; (80023a0 <Rafael_PanTompkins+0x728>)
 8002198:	2200      	movs	r2, #0
 800219a:	f7fe fa05 	bl	80005a8 <__aeabi_dmul>
 800219e:	4606      	mov	r6, r0
 80021a0:	4658      	mov	r0, fp
 80021a2:	460f      	mov	r7, r1
 80021a4:	f7fe f996 	bl	80004d4 <__aeabi_i2d>
 80021a8:	2200      	movs	r2, #0
 80021aa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80021ae:	f7fe f9fb 	bl	80005a8 <__aeabi_dmul>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4630      	mov	r0, r6
 80021b8:	4639      	mov	r1, r7
 80021ba:	f7fe f83f 	bl	800023c <__adddf3>
 80021be:	f7fe fca3 	bl	8000b08 <__aeabi_d2iz>
                        threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 80021c2:	4b7d      	ldr	r3, [pc, #500]	; (80023b8 <Rafael_PanTompkins+0x740>)
 80021c4:	f9b3 5000 	ldrsh.w	r5, [r3]
                        spk_f = 0.125*peak_f + 0.875*spk_f;
 80021c8:	b200      	sxth	r0, r0
 80021ca:	f8a9 0000 	strh.w	r0, [r9]
                        threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 80021ce:	1b40      	subs	r0, r0, r5
 80021d0:	f7fe f980 	bl	80004d4 <__aeabi_i2d>
 80021d4:	4b74      	ldr	r3, [pc, #464]	; (80023a8 <Rafael_PanTompkins+0x730>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	f7fe f9e6 	bl	80005a8 <__aeabi_dmul>
 80021dc:	4606      	mov	r6, r0
 80021de:	4628      	mov	r0, r5
 80021e0:	460f      	mov	r7, r1
 80021e2:	f7fe f977 	bl	80004d4 <__aeabi_i2d>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	4630      	mov	r0, r6
 80021ec:	4639      	mov	r1, r7
 80021ee:	f7fe f825 	bl	800023c <__adddf3>
 80021f2:	f7fe fc89 	bl	8000b08 <__aeabi_d2iz>
 80021f6:	9b07      	ldr	r3, [sp, #28]
 80021f8:	b205      	sxth	r5, r0
 80021fa:	801d      	strh	r5, [r3, #0]
                        threshold_f2 = 0.5*threshold_f1;
 80021fc:	4628      	mov	r0, r5
 80021fe:	f7fe f969 	bl	80004d4 <__aeabi_i2d>
 8002202:	4b6b      	ldr	r3, [pc, #428]	; (80023b0 <Rafael_PanTompkins+0x738>)
 8002204:	2200      	movs	r2, #0
 8002206:	f7fe f9cf 	bl	80005a8 <__aeabi_dmul>
 800220a:	f7fe fc7d 	bl	8000b08 <__aeabi_d2iz>
 800220e:	4b6b      	ldr	r3, [pc, #428]	; (80023bc <Rafael_PanTompkins+0x744>)
                        qrs = true;
 8002210:	4a6b      	ldr	r2, [pc, #428]	; (80023c0 <Rafael_PanTompkins+0x748>)
                        threshold_f2 = 0.5*threshold_f1;
 8002212:	8018      	strh	r0, [r3, #0]
                        qrs = true;
 8002214:	2301      	movs	r3, #1
                        lastSlope = currentSlope;
 8002216:	f8c8 4000 	str.w	r4, [r8]
                        qrs = true;
 800221a:	7013      	strb	r3, [r2, #0]
 800221c:	e24b      	b.n	80026b6 <Rafael_PanTompkins+0xa3e>
			current = InputSample;
 800221e:	4a69      	ldr	r2, [pc, #420]	; (80023c4 <Rafael_PanTompkins+0x74c>)
		ECGsignal[current] = InputSample;
 8002220:	4d69      	ldr	r5, [pc, #420]	; (80023c8 <Rafael_PanTompkins+0x750>)
			current = InputSample;
 8002222:	6010      	str	r0, [r2, #0]
		sample++; // Update sample counter
 8002224:	3301      	adds	r3, #1
		if (current >= 1)
 8002226:	2800      	cmp	r0, #0
		ECGsignal[current] = InputSample;
 8002228:	f825 0014 	strh.w	r0, [r5, r4, lsl #1]
		sample++; // Update sample counter
 800222c:	9304      	str	r3, [sp, #16]
 800222e:	6033      	str	r3, [r6, #0]
			current = InputSample;
 8002230:	4682      	mov	sl, r0
		if (current >= 1)
 8002232:	f300 8168 	bgt.w	8002506 <Rafael_PanTompkins+0x88e>
		lowpass[current] = dcblock[current];
 8002236:	4a65      	ldr	r2, [pc, #404]	; (80023cc <Rafael_PanTompkins+0x754>)
			dcblock[current] = 0;
 8002238:	4965      	ldr	r1, [pc, #404]	; (80023d0 <Rafael_PanTompkins+0x758>)
		highpass[current] = -lowpass[current];
 800223a:	4f66      	ldr	r7, [pc, #408]	; (80023d4 <Rafael_PanTompkins+0x75c>)
			dcblock[current] = 0;
 800223c:	2300      	movs	r3, #0
		lowpass[current] = dcblock[current];
 800223e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
        derivative[current] = highpass[current];
 8002242:	4a65      	ldr	r2, [pc, #404]	; (80023d8 <Rafael_PanTompkins+0x760>)
			dcblock[current] = 0;
 8002244:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
        derivative[current] = highpass[current];
 8002248:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 800224c:	4a63      	ldr	r2, [pc, #396]	; (80023dc <Rafael_PanTompkins+0x764>)
		highpass[current] = -lowpass[current];
 800224e:	f827 3010 	strh.w	r3, [r7, r0, lsl #1]
		if (current > 0)
 8002252:	9201      	str	r2, [sp, #4]
        derivative[current] = highpass[current];
 8002254:	469b      	mov	fp, r3
 8002256:	e5e0      	b.n	8001e1a <Rafael_PanTompkins+0x1a2>
			if ((sample - lastQRS > (long unsigned int)rrmiss) && (sample > lastQRS + FS/5))
 8002258:	9b04      	ldr	r3, [sp, #16]
 800225a:	f100 0248 	add.w	r2, r0, #72	; 0x48
 800225e:	429a      	cmp	r2, r3
 8002260:	f4bf ae4a 	bcs.w	8001ef8 <Rafael_PanTompkins+0x280>
				for (i = current - (sample - lastQRS) + FS/5; i < (long unsigned int)current; i++)
 8002264:	9b04      	ldr	r3, [sp, #16]
 8002266:	ebaa 0303 	sub.w	r3, sl, r3
 800226a:	4413      	add	r3, r2
 800226c:	9a01      	ldr	r2, [sp, #4]
 800226e:	459a      	cmp	sl, r3
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	f67f ae41 	bls.w	8001ef8 <Rafael_PanTompkins+0x280>
 8002276:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800227a:	f1a3 080a 	sub.w	r8, r3, #10
                        if ((currentSlope < (dataType)(lastSlope/2)) && (i + sample) < lastQRS + 0.36*lastQRS)
 800227e:	4b58      	ldr	r3, [pc, #352]	; (80023e0 <Rafael_PanTompkins+0x768>)
 8002280:	4a43      	ldr	r2, [pc, #268]	; (8002390 <Rafael_PanTompkins+0x718>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6815      	ldr	r5, [r2, #0]
 8002286:	9211      	str	r2, [sp, #68]	; 0x44
 8002288:	f343 034f 	sbfx	r3, r3, #1, #16
 800228c:	f1aa 020a 	sub.w	r2, sl, #10
 8002290:	1e8e      	subs	r6, r1, #2
 8002292:	930d      	str	r3, [sp, #52]	; 0x34
 8002294:	2100      	movs	r1, #0
					if ( (integral[i] > threshold_i2) && (highpass[i] > threshold_f2))
 8002296:	4b47      	ldr	r3, [pc, #284]	; (80023b4 <Rafael_PanTompkins+0x73c>)
 8002298:	4c48      	ldr	r4, [pc, #288]	; (80023bc <Rafael_PanTompkins+0x744>)
 800229a:	483e      	ldr	r0, [pc, #248]	; (8002394 <Rafael_PanTompkins+0x71c>)
 800229c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022a0:	f9b4 4000 	ldrsh.w	r4, [r4]
 80022a4:	9409      	str	r4, [sp, #36]	; 0x24
                        if ((currentSlope < (dataType)(lastSlope/2)) && (i + sample) < lastQRS + 0.36*lastQRS)
 80022a6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80022aa:	9a04      	ldr	r2, [sp, #16]
 80022ac:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 80022b0:	320a      	adds	r2, #10
 80022b2:	6804      	ldr	r4, [r0, #0]
 80022b4:	900f      	str	r0, [sp, #60]	; 0x3c
 80022b6:	920e      	str	r2, [sp, #56]	; 0x38
 80022b8:	469a      	mov	sl, r3
 80022ba:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 80022be:	970a      	str	r7, [sp, #40]	; 0x28
 80022c0:	e009      	b.n	80022d6 <Rafael_PanTompkins+0x65e>
				for (i = current - (sample - lastQRS) + FS/5; i < (long unsigned int)current; i++)
 80022c2:	2201      	movs	r2, #1
 80022c4:	9202      	str	r2, [sp, #8]
 80022c6:	9a03      	ldr	r2, [sp, #12]
 80022c8:	f108 030b 	add.w	r3, r8, #11
 80022cc:	f108 0801 	add.w	r8, r8, #1
 80022d0:	4542      	cmp	r2, r8
 80022d2:	f000 811c 	beq.w	800250e <Rafael_PanTompkins+0x896>
					if ( (integral[i] > threshold_i2) && (highpass[i] > threshold_f2))
 80022d6:	f936 7f02 	ldrsh.w	r7, [r6, #2]!
 80022da:	f118 090a 	adds.w	r9, r8, #10
 80022de:	bf2c      	ite	cs
 80022e0:	2201      	movcs	r2, #1
 80022e2:	2200      	movcc	r2, #0
 80022e4:	4557      	cmp	r7, sl
 80022e6:	ddec      	ble.n	80022c2 <Rafael_PanTompkins+0x64a>
 80022e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80022ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80022ec:	eb03 0348 	add.w	r3, r3, r8, lsl #1
 80022f0:	f9b3 b014 	ldrsh.w	fp, [r3, #20]
 80022f4:	4583      	cmp	fp, r0
 80022f6:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80022fa:	dde2      	ble.n	80022c2 <Rafael_PanTompkins+0x64a>
                        for (j = i - 10; j <= i; j++)
 80022fc:	2a00      	cmp	r2, #0
 80022fe:	f040 829c 	bne.w	800283a <Rafael_PanTompkins+0xbc2>
 8002302:	4925      	ldr	r1, [pc, #148]	; (8002398 <Rafael_PanTompkins+0x720>)
					    currentSlope = 0;
 8002304:	4615      	mov	r5, r2
 8002306:	440b      	add	r3, r1
                        for (j = i - 10; j <= i; j++)
 8002308:	4644      	mov	r4, r8
                            if (squared[j] > currentSlope)
 800230a:	f933 2b02 	ldrsh.w	r2, [r3], #2
                        for (j = i - 10; j <= i; j++)
 800230e:	3401      	adds	r4, #1
 8002310:	4295      	cmp	r5, r2
 8002312:	bf38      	it	cc
 8002314:	4615      	movcc	r5, r2
 8002316:	45a1      	cmp	r9, r4
 8002318:	d2f7      	bcs.n	800230a <Rafael_PanTompkins+0x692>
                        if ((currentSlope < (dataType)(lastSlope/2)) && (i + sample) < lastQRS + 0.36*lastQRS)
 800231a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800231c:	42ab      	cmp	r3, r5
 800231e:	f240 82c9 	bls.w	80028b4 <Rafael_PanTompkins+0xc3c>
 8002322:	9806      	ldr	r0, [sp, #24]
 8002324:	f7fe f8c6 	bl	80004b4 <__aeabi_ui2d>
 8002328:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800232a:	ec41 0b18 	vmov	d8, r0, r1
 800232e:	eb03 0008 	add.w	r0, r3, r8
 8002332:	f7fe f8bf 	bl	80004b4 <__aeabi_ui2d>
 8002336:	a310      	add	r3, pc, #64	; (adr r3, 8002378 <Rafael_PanTompkins+0x700>)
 8002338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233c:	ec41 0b19 	vmov	d9, r0, r1
 8002340:	ec51 0b18 	vmov	r0, r1, d8
 8002344:	f7fe f930 	bl	80005a8 <__aeabi_dmul>
 8002348:	ec53 2b18 	vmov	r2, r3, d8
 800234c:	f7fd ff76 	bl	800023c <__adddf3>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	ec51 0b19 	vmov	r0, r1, d9
 8002358:	f7fe fb98 	bl	8000a8c <__aeabi_dcmplt>
 800235c:	2800      	cmp	r0, #0
 800235e:	f000 82a9 	beq.w	80028b4 <Rafael_PanTompkins+0xc3c>
 8002362:	2101      	movs	r1, #1
 8002364:	e7ad      	b.n	80022c2 <Rafael_PanTompkins+0x64a>
				if ((integral[current] >= threshold_i1) || (highpass[current] >= threshold_f1))
 8002366:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002368:	459b      	cmp	fp, r3
 800236a:	f6bf adcb 	bge.w	8001f04 <Rafael_PanTompkins+0x28c>
 800236e:	2300      	movs	r3, #0
 8002370:	e658      	b.n	8002024 <Rafael_PanTompkins+0x3ac>
 8002372:	bf00      	nop
 8002374:	f3af 8000 	nop.w
 8002378:	70a3d70a 	.word	0x70a3d70a
 800237c:	3fd70a3d 	.word	0x3fd70a3d
 8002380:	200026c6 	.word	0x200026c6
 8002384:	20002bd8 	.word	0x20002bd8
 8002388:	200026c4 	.word	0x200026c4
 800238c:	20001d58 	.word	0x20001d58
 8002390:	20000a8c 	.word	0x20000a8c
 8002394:	20001d54 	.word	0x20001d54
 8002398:	20002728 	.word	0x20002728
 800239c:	20002726 	.word	0x20002726
 80023a0:	3fec0000 	.word	0x3fec0000
 80023a4:	20002212 	.word	0x20002212
 80023a8:	3fd00000 	.word	0x3fd00000
 80023ac:	20002bdc 	.word	0x20002bdc
 80023b0:	3fe00000 	.word	0x3fe00000
 80023b4:	20002bde 	.word	0x20002bde
 80023b8:	20002210 	.word	0x20002210
 80023bc:	20002bda 	.word	0x20002bda
 80023c0:	200026c9 	.word	0x200026c9
 80023c4:	20000a88 	.word	0x20000a88
 80023c8:	200005d8 	.word	0x200005d8
 80023cc:	20001d60 	.word	0x20001d60
 80023d0:	20000a90 	.word	0x20000a90
 80023d4:	200013f0 	.word	0x200013f0
 80023d8:	20000f40 	.word	0x20000f40
 80023dc:	200018a0 	.word	0x200018a0
 80023e0:	20001d5c 	.word	0x20001d5c
 80023e4:	20002724 	.word	0x20002724
				npk_i = 0.125*peak_i + 0.875*npk_i;
 80023e8:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8002560 <Rafael_PanTompkins+0x8e8>
				npk_f = 0.125*peak_f + 0.875*npk_f;
 80023ec:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8002564 <Rafael_PanTompkins+0x8ec>
				npk_i = 0.125*peak_i + 0.875*npk_i;
 80023f0:	f9b8 0000 	ldrsh.w	r0, [r8]
				outputSignal[current] = qrs;
 80023f4:	4c4f      	ldr	r4, [pc, #316]	; (8002534 <Rafael_PanTompkins+0x8bc>)
				npk_i = 0.125*peak_i + 0.875*npk_i;
 80023f6:	f7fe f86d 	bl	80004d4 <__aeabi_i2d>
 80023fa:	4b4f      	ldr	r3, [pc, #316]	; (8002538 <Rafael_PanTompkins+0x8c0>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	f7fe f8d3 	bl	80005a8 <__aeabi_dmul>
 8002402:	4606      	mov	r6, r0
 8002404:	9805      	ldr	r0, [sp, #20]
 8002406:	460f      	mov	r7, r1
 8002408:	f7fe f864 	bl	80004d4 <__aeabi_i2d>
 800240c:	2200      	movs	r2, #0
 800240e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002412:	f7fe f8c9 	bl	80005a8 <__aeabi_dmul>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	4630      	mov	r0, r6
 800241c:	4639      	mov	r1, r7
 800241e:	f7fd ff0d 	bl	800023c <__adddf3>
 8002422:	f7fe fb71 	bl	8000b08 <__aeabi_d2iz>
				threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8002426:	4b45      	ldr	r3, [pc, #276]	; (800253c <Rafael_PanTompkins+0x8c4>)
				npk_i = 0.125*peak_i + 0.875*npk_i;
 8002428:	b207      	sxth	r7, r0
				threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 800242a:	f9b3 0000 	ldrsh.w	r0, [r3]
				npk_i = 0.125*peak_i + 0.875*npk_i;
 800242e:	f8a8 7000 	strh.w	r7, [r8]
				threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8002432:	1bc0      	subs	r0, r0, r7
 8002434:	f7fe f84e 	bl	80004d4 <__aeabi_i2d>
 8002438:	4b41      	ldr	r3, [pc, #260]	; (8002540 <Rafael_PanTompkins+0x8c8>)
 800243a:	2200      	movs	r2, #0
 800243c:	f7fe f8b4 	bl	80005a8 <__aeabi_dmul>
 8002440:	4602      	mov	r2, r0
 8002442:	4638      	mov	r0, r7
 8002444:	4616      	mov	r6, r2
 8002446:	460f      	mov	r7, r1
 8002448:	f7fe f844 	bl	80004d4 <__aeabi_i2d>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4630      	mov	r0, r6
 8002452:	4639      	mov	r1, r7
 8002454:	f7fd fef2 	bl	800023c <__adddf3>
 8002458:	f7fe fb56 	bl	8000b08 <__aeabi_d2iz>
 800245c:	4a39      	ldr	r2, [pc, #228]	; (8002544 <Rafael_PanTompkins+0x8cc>)
 800245e:	b203      	sxth	r3, r0
 8002460:	8013      	strh	r3, [r2, #0]
				threshold_i2 = 0.5*threshold_i1;
 8002462:	4618      	mov	r0, r3
				threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8002464:	930b      	str	r3, [sp, #44]	; 0x2c
				threshold_i2 = 0.5*threshold_i1;
 8002466:	f7fe f835 	bl	80004d4 <__aeabi_i2d>
 800246a:	2200      	movs	r2, #0
 800246c:	4b36      	ldr	r3, [pc, #216]	; (8002548 <Rafael_PanTompkins+0x8d0>)
 800246e:	f7fe f89b 	bl	80005a8 <__aeabi_dmul>
 8002472:	f7fe fb49 	bl	8000b08 <__aeabi_d2iz>
 8002476:	4b35      	ldr	r3, [pc, #212]	; (800254c <Rafael_PanTompkins+0x8d4>)
 8002478:	8018      	strh	r0, [r3, #0]
				npk_f = 0.125*peak_f + 0.875*npk_f;
 800247a:	f9b9 0000 	ldrsh.w	r0, [r9]
 800247e:	f7fe f829 	bl	80004d4 <__aeabi_i2d>
 8002482:	4b2d      	ldr	r3, [pc, #180]	; (8002538 <Rafael_PanTompkins+0x8c0>)
 8002484:	2200      	movs	r2, #0
 8002486:	f7fe f88f 	bl	80005a8 <__aeabi_dmul>
 800248a:	4606      	mov	r6, r0
 800248c:	4658      	mov	r0, fp
 800248e:	460f      	mov	r7, r1
 8002490:	f7fe f820 	bl	80004d4 <__aeabi_i2d>
 8002494:	2200      	movs	r2, #0
 8002496:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800249a:	f7fe f885 	bl	80005a8 <__aeabi_dmul>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	4630      	mov	r0, r6
 80024a4:	4639      	mov	r1, r7
 80024a6:	f7fd fec9 	bl	800023c <__adddf3>
 80024aa:	f7fe fb2d 	bl	8000b08 <__aeabi_d2iz>
				threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 80024ae:	4b28      	ldr	r3, [pc, #160]	; (8002550 <Rafael_PanTompkins+0x8d8>)
				npk_f = 0.125*peak_f + 0.875*npk_f;
 80024b0:	b206      	sxth	r6, r0
				threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 80024b2:	f9b3 0000 	ldrsh.w	r0, [r3]
				npk_f = 0.125*peak_f + 0.875*npk_f;
 80024b6:	f8a9 6000 	strh.w	r6, [r9]
				threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 80024ba:	1b80      	subs	r0, r0, r6
 80024bc:	f7fe f80a 	bl	80004d4 <__aeabi_i2d>
 80024c0:	4b1f      	ldr	r3, [pc, #124]	; (8002540 <Rafael_PanTompkins+0x8c8>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	f7fe f870 	bl	80005a8 <__aeabi_dmul>
 80024c8:	4680      	mov	r8, r0
 80024ca:	4630      	mov	r0, r6
 80024cc:	4689      	mov	r9, r1
 80024ce:	f7fe f801 	bl	80004d4 <__aeabi_i2d>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	4640      	mov	r0, r8
 80024d8:	4649      	mov	r1, r9
 80024da:	f7fd feaf 	bl	800023c <__adddf3>
 80024de:	f7fe fb13 	bl	8000b08 <__aeabi_d2iz>
 80024e2:	9a07      	ldr	r2, [sp, #28]
 80024e4:	b203      	sxth	r3, r0
                threshold_f2 = 0.5*threshold_f1;
 80024e6:	4618      	mov	r0, r3
				threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 80024e8:	930c      	str	r3, [sp, #48]	; 0x30
 80024ea:	8013      	strh	r3, [r2, #0]
                threshold_f2 = 0.5*threshold_f1;
 80024ec:	f7fd fff2 	bl	80004d4 <__aeabi_i2d>
 80024f0:	4b15      	ldr	r3, [pc, #84]	; (8002548 <Rafael_PanTompkins+0x8d0>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	f7fe f858 	bl	80005a8 <__aeabi_dmul>
 80024f8:	f7fe fb06 	bl	8000b08 <__aeabi_d2iz>
 80024fc:	4b15      	ldr	r3, [pc, #84]	; (8002554 <Rafael_PanTompkins+0x8dc>)
				outputSignal[current] = qrs;
 80024fe:	f824 501a 	strh.w	r5, [r4, sl, lsl #1]
                threshold_f2 = 0.5*threshold_f1;
 8002502:	8018      	strh	r0, [r3, #0]
			if ((sample - lastQRS > (long unsigned int)rrmiss) && (sample > lastQRS + FS/5))
 8002504:	e4f9      	b.n	8001efa <Rafael_PanTompkins+0x282>
 8002506:	4b14      	ldr	r3, [pc, #80]	; (8002558 <Rafael_PanTompkins+0x8e0>)
 8002508:	9301      	str	r3, [sp, #4]
			dcblock[current] = ECGsignal[current] - ECGsignal[current-1] + 0.995*dcblock[current-1];
 800250a:	1e46      	subs	r6, r0, #1
 800250c:	e401      	b.n	8001d12 <Rafael_PanTompkins+0x9a>
 800250e:	9a01      	ldr	r2, [sp, #4]
 8002510:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	2900      	cmp	r1, #0
 8002518:	f43f acee 	beq.w	8001ef8 <Rafael_PanTompkins+0x280>
 800251c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800251e:	601c      	str	r4, [r3, #0]
 8002520:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002522:	4c04      	ldr	r4, [pc, #16]	; (8002534 <Rafael_PanTompkins+0x8bc>)
 8002524:	601d      	str	r5, [r3, #0]
				if (qrs)
 8002526:	e4e8      	b.n	8001efa <Rafael_PanTompkins+0x282>
		highpass[current] = -lowpass[current];
 8002528:	4f0c      	ldr	r7, [pc, #48]	; (800255c <Rafael_PanTompkins+0x8e4>)
 800252a:	424b      	negs	r3, r1
 800252c:	b29b      	uxth	r3, r3
 800252e:	f827 301a 	strh.w	r3, [r7, sl, lsl #1]
		if (current >= 1)
 8002532:	e445      	b.n	8001dc0 <Rafael_PanTompkins+0x148>
 8002534:	20002214 	.word	0x20002214
 8002538:	3fec0000 	.word	0x3fec0000
 800253c:	20002726 	.word	0x20002726
 8002540:	3fd00000 	.word	0x3fd00000
 8002544:	20002bdc 	.word	0x20002bdc
 8002548:	3fe00000 	.word	0x3fe00000
 800254c:	20002bde 	.word	0x20002bde
 8002550:	20002724 	.word	0x20002724
 8002554:	20002bda 	.word	0x20002bda
 8002558:	200018a0 	.word	0x200018a0
 800255c:	200013f0 	.word	0x200013f0
 8002560:	20002212 	.word	0x20002212
 8002564:	20002210 	.word	0x20002210
                    for (j = current - 10; j <= current; j++)
 8002568:	4553      	cmp	r3, sl
 800256a:	f200 813f 	bhi.w	80027ec <Rafael_PanTompkins+0xb74>
 800256e:	4aba      	ldr	r2, [pc, #744]	; (8002858 <Rafael_PanTompkins+0xbe0>)
 8002570:	f1a0 0114 	sub.w	r1, r0, #20
 8002574:	4411      	add	r1, r2
 8002576:	462c      	mov	r4, r5
                        if (squared[j] > currentSlope)
 8002578:	f931 2b02 	ldrsh.w	r2, [r1], #2
                    for (j = current - 10; j <= current; j++)
 800257c:	3301      	adds	r3, #1
                        if (squared[j] > currentSlope)
 800257e:	42a2      	cmp	r2, r4
 8002580:	bf84      	itt	hi
 8002582:	4614      	movhi	r4, r2
 8002584:	2501      	movhi	r5, #1
                    for (j = current - 10; j <= current; j++)
 8002586:	459a      	cmp	sl, r3
 8002588:	d2f6      	bcs.n	8002578 <Rafael_PanTompkins+0x900>
 800258a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	2d00      	cmp	r5, #0
 8002590:	f000 812c 	beq.w	80027ec <Rafael_PanTompkins+0xb74>
 8002594:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002596:	601c      	str	r4, [r3, #0]
                    spk_i = 0.125*peak_i + 0.875*spk_i;
 8002598:	4db0      	ldr	r5, [pc, #704]	; (800285c <Rafael_PanTompkins+0xbe4>)
                    spk_f = 0.125*peak_f + 0.875*spk_f;
 800259a:	f8df 8308 	ldr.w	r8, [pc, #776]	; 80028a4 <Rafael_PanTompkins+0xc2c>
                    spk_i = 0.125*peak_i + 0.875*spk_i;
 800259e:	f9b5 0000 	ldrsh.w	r0, [r5]
                    threshold_i2 = 0.5*threshold_i1;
 80025a2:	f8df 9304 	ldr.w	r9, [pc, #772]	; 80028a8 <Rafael_PanTompkins+0xc30>
                    spk_i = 0.125*peak_i + 0.875*spk_i;
 80025a6:	f7fd ff95 	bl	80004d4 <__aeabi_i2d>
 80025aa:	4bad      	ldr	r3, [pc, #692]	; (8002860 <Rafael_PanTompkins+0xbe8>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	f7fd fffb 	bl	80005a8 <__aeabi_dmul>
 80025b2:	4602      	mov	r2, r0
 80025b4:	9805      	ldr	r0, [sp, #20]
 80025b6:	4616      	mov	r6, r2
 80025b8:	460f      	mov	r7, r1
 80025ba:	f7fd ff8b 	bl	80004d4 <__aeabi_i2d>
 80025be:	2200      	movs	r2, #0
 80025c0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80025c4:	f7fd fff0 	bl	80005a8 <__aeabi_dmul>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4630      	mov	r0, r6
 80025ce:	4639      	mov	r1, r7
 80025d0:	f7fd fe34 	bl	800023c <__adddf3>
 80025d4:	f7fe fa98 	bl	8000b08 <__aeabi_d2iz>
                    threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 80025d8:	4ba2      	ldr	r3, [pc, #648]	; (8002864 <Rafael_PanTompkins+0xbec>)
                    spk_i = 0.125*peak_i + 0.875*spk_i;
 80025da:	b200      	sxth	r0, r0
 80025dc:	8028      	strh	r0, [r5, #0]
                    threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 80025de:	f9b3 5000 	ldrsh.w	r5, [r3]
 80025e2:	1b40      	subs	r0, r0, r5
 80025e4:	f7fd ff76 	bl	80004d4 <__aeabi_i2d>
 80025e8:	4b9f      	ldr	r3, [pc, #636]	; (8002868 <Rafael_PanTompkins+0xbf0>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	f7fd ffdc 	bl	80005a8 <__aeabi_dmul>
 80025f0:	4606      	mov	r6, r0
 80025f2:	4628      	mov	r0, r5
 80025f4:	460f      	mov	r7, r1
 80025f6:	f7fd ff6d 	bl	80004d4 <__aeabi_i2d>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4630      	mov	r0, r6
 8002600:	4639      	mov	r1, r7
 8002602:	f7fd fe1b 	bl	800023c <__adddf3>
 8002606:	f7fe fa7f 	bl	8000b08 <__aeabi_d2iz>
 800260a:	4a98      	ldr	r2, [pc, #608]	; (800286c <Rafael_PanTompkins+0xbf4>)
 800260c:	b203      	sxth	r3, r0
 800260e:	8013      	strh	r3, [r2, #0]
                    threshold_i2 = 0.5*threshold_i1;
 8002610:	4618      	mov	r0, r3
                    threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8002612:	9302      	str	r3, [sp, #8]
                    threshold_i2 = 0.5*threshold_i1;
 8002614:	f7fd ff5e 	bl	80004d4 <__aeabi_i2d>
 8002618:	4b95      	ldr	r3, [pc, #596]	; (8002870 <Rafael_PanTompkins+0xbf8>)
 800261a:	2200      	movs	r2, #0
 800261c:	f7fd ffc4 	bl	80005a8 <__aeabi_dmul>
 8002620:	f7fe fa72 	bl	8000b08 <__aeabi_d2iz>
 8002624:	f8a9 0000 	strh.w	r0, [r9]
                    spk_f = 0.125*peak_f + 0.875*spk_f;
 8002628:	f9b8 0000 	ldrsh.w	r0, [r8]
 800262c:	f7fd ff52 	bl	80004d4 <__aeabi_i2d>
 8002630:	4b8b      	ldr	r3, [pc, #556]	; (8002860 <Rafael_PanTompkins+0xbe8>)
 8002632:	2200      	movs	r2, #0
 8002634:	f7fd ffb8 	bl	80005a8 <__aeabi_dmul>
 8002638:	4606      	mov	r6, r0
 800263a:	4658      	mov	r0, fp
 800263c:	460f      	mov	r7, r1
 800263e:	f7fd ff49 	bl	80004d4 <__aeabi_i2d>
 8002642:	2200      	movs	r2, #0
 8002644:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002648:	f7fd ffae 	bl	80005a8 <__aeabi_dmul>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4630      	mov	r0, r6
 8002652:	4639      	mov	r1, r7
 8002654:	f7fd fdf2 	bl	800023c <__adddf3>
 8002658:	f7fe fa56 	bl	8000b08 <__aeabi_d2iz>
                    threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 800265c:	4b85      	ldr	r3, [pc, #532]	; (8002874 <Rafael_PanTompkins+0xbfc>)
 800265e:	f9b3 5000 	ldrsh.w	r5, [r3]
                    spk_f = 0.125*peak_f + 0.875*spk_f;
 8002662:	b200      	sxth	r0, r0
 8002664:	f8a8 0000 	strh.w	r0, [r8]
                    threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 8002668:	1b40      	subs	r0, r0, r5
 800266a:	f7fd ff33 	bl	80004d4 <__aeabi_i2d>
 800266e:	4b7e      	ldr	r3, [pc, #504]	; (8002868 <Rafael_PanTompkins+0xbf0>)
 8002670:	2200      	movs	r2, #0
 8002672:	f7fd ff99 	bl	80005a8 <__aeabi_dmul>
 8002676:	4606      	mov	r6, r0
 8002678:	4628      	mov	r0, r5
 800267a:	460f      	mov	r7, r1
 800267c:	f7fd ff2a 	bl	80004d4 <__aeabi_i2d>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4630      	mov	r0, r6
 8002686:	4639      	mov	r1, r7
 8002688:	f7fd fdd8 	bl	800023c <__adddf3>
 800268c:	f7fe fa3c 	bl	8000b08 <__aeabi_d2iz>
 8002690:	9b07      	ldr	r3, [sp, #28]
 8002692:	b205      	sxth	r5, r0
 8002694:	801d      	strh	r5, [r3, #0]
                    threshold_f2 = 0.5*threshold_f1;
 8002696:	4628      	mov	r0, r5
 8002698:	f7fd ff1c 	bl	80004d4 <__aeabi_i2d>
 800269c:	4b74      	ldr	r3, [pc, #464]	; (8002870 <Rafael_PanTompkins+0xbf8>)
 800269e:	2200      	movs	r2, #0
 80026a0:	f7fd ff82 	bl	80005a8 <__aeabi_dmul>
 80026a4:	f7fe fa30 	bl	8000b08 <__aeabi_d2iz>
 80026a8:	4b73      	ldr	r3, [pc, #460]	; (8002878 <Rafael_PanTompkins+0xc00>)
                    qrs = true;
 80026aa:	4a74      	ldr	r2, [pc, #464]	; (800287c <Rafael_PanTompkins+0xc04>)
                    threshold_f2 = 0.5*threshold_f1;
 80026ac:	8018      	strh	r0, [r3, #0]
                    lastSlope = currentSlope;
 80026ae:	4b74      	ldr	r3, [pc, #464]	; (8002880 <Rafael_PanTompkins+0xc08>)
 80026b0:	601c      	str	r4, [r3, #0]
                    qrs = true;
 80026b2:	2301      	movs	r3, #1
 80026b4:	7013      	strb	r3, [r2, #0]
			lastQRS = sample;
 80026b6:	9a08      	ldr	r2, [sp, #32]
 80026b8:	9b04      	ldr	r3, [sp, #16]
 80026ba:	6013      	str	r3, [r2, #0]
			rr1[7] = sample - lastQRS;
 80026bc:	9a06      	ldr	r2, [sp, #24]
 80026be:	9901      	ldr	r1, [sp, #4]
			if ( (rr1[7] >= rrlow) && (rr1[7] <= rrhigh) )
 80026c0:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 80028ac <Rafael_PanTompkins+0xc34>
			rr1[7] = sample - lastQRS;
 80026c4:	1a9e      	subs	r6, r3, r2
				rr1[i] = rr1[i+1];
 80026c6:	4b6f      	ldr	r3, [pc, #444]	; (8002884 <Rafael_PanTompkins+0xc0c>)
 80026c8:	2207      	movs	r2, #7
 80026ca:	6858      	ldr	r0, [r3, #4]
 80026cc:	600a      	str	r2, [r1, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	6018      	str	r0, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]
				rravg1 += rr1[i];
 80026d4:	4410      	add	r0, r2
				rr1[i] = rr1[i+1];
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	609a      	str	r2, [r3, #8]
				rravg1 += rr1[i];
 80026da:	4410      	add	r0, r2
				rr1[i] = rr1[i+1];
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	60da      	str	r2, [r3, #12]
				rravg1 += rr1[i];
 80026e0:	4410      	add	r0, r2
				rr1[i] = rr1[i+1];
 80026e2:	695a      	ldr	r2, [r3, #20]
 80026e4:	611a      	str	r2, [r3, #16]
				rravg1 += rr1[i];
 80026e6:	4410      	add	r0, r2
				rr1[i] = rr1[i+1];
 80026e8:	699a      	ldr	r2, [r3, #24]
 80026ea:	615a      	str	r2, [r3, #20]
				rravg1 += rr1[i];
 80026ec:	4410      	add	r0, r2
				rr1[i] = rr1[i+1];
 80026ee:	69da      	ldr	r2, [r3, #28]
 80026f0:	619a      	str	r2, [r3, #24]
				rravg1 += rr1[i];
 80026f2:	4410      	add	r0, r2
			rr1[7] = sample - lastQRS;
 80026f4:	61de      	str	r6, [r3, #28]
			rravg1 *= 0.125;
 80026f6:	4430      	add	r0, r6
 80026f8:	f7fd feec 	bl	80004d4 <__aeabi_i2d>
 80026fc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002700:	2200      	movs	r2, #0
 8002702:	f7fd ff51 	bl	80005a8 <__aeabi_dmul>
 8002706:	f7fe f9ff 	bl	8000b08 <__aeabi_d2iz>
 800270a:	4b5f      	ldr	r3, [pc, #380]	; (8002888 <Rafael_PanTompkins+0xc10>)
 800270c:	6018      	str	r0, [r3, #0]
			if ( (rr1[7] >= rrlow) && (rr1[7] <= rrhigh) )
 800270e:	f8d9 3000 	ldr.w	r3, [r9]
 8002712:	429e      	cmp	r6, r3
			rravg1 *= 0.125;
 8002714:	4604      	mov	r4, r0
			if ( (rr1[7] >= rrlow) && (rr1[7] <= rrhigh) )
 8002716:	db6b      	blt.n	80027f0 <Rafael_PanTompkins+0xb78>
 8002718:	f8df b194 	ldr.w	fp, [pc, #404]	; 80028b0 <Rafael_PanTompkins+0xc38>
 800271c:	f8db 3000 	ldr.w	r3, [fp]
 8002720:	429e      	cmp	r6, r3
 8002722:	dc65      	bgt.n	80027f0 <Rafael_PanTompkins+0xb78>
					rr2[i] = rr2[i+1];
 8002724:	4b59      	ldr	r3, [pc, #356]	; (800288c <Rafael_PanTompkins+0xc14>)
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	6858      	ldr	r0, [r3, #4]
 800272a:	6018      	str	r0, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
					rravg2 += rr2[i];
 800272e:	4410      	add	r0, r2
					rr2[i] = rr2[i+1];
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	609a      	str	r2, [r3, #8]
					rravg2 += rr2[i];
 8002734:	4410      	add	r0, r2
					rr2[i] = rr2[i+1];
 8002736:	691a      	ldr	r2, [r3, #16]
 8002738:	60da      	str	r2, [r3, #12]
					rravg2 += rr2[i];
 800273a:	4410      	add	r0, r2
					rr2[i] = rr2[i+1];
 800273c:	695a      	ldr	r2, [r3, #20]
 800273e:	611a      	str	r2, [r3, #16]
					rravg2 += rr2[i];
 8002740:	4410      	add	r0, r2
					rr2[i] = rr2[i+1];
 8002742:	699a      	ldr	r2, [r3, #24]
 8002744:	615a      	str	r2, [r3, #20]
					rravg2 += rr2[i];
 8002746:	4410      	add	r0, r2
					rr2[i] = rr2[i+1];
 8002748:	69da      	ldr	r2, [r3, #28]
 800274a:	619a      	str	r2, [r3, #24]
					rravg2 += rr2[i];
 800274c:	4410      	add	r0, r2
				rr2[7] = rr1[7];
 800274e:	61de      	str	r6, [r3, #28]
				rravg2 *= 0.125;
 8002750:	4430      	add	r0, r6
 8002752:	f7fd febf 	bl	80004d4 <__aeabi_i2d>
 8002756:	2200      	movs	r2, #0
 8002758:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800275c:	f7fd ff24 	bl	80005a8 <__aeabi_dmul>
 8002760:	f7fe f9d2 	bl	8000b08 <__aeabi_d2iz>
 8002764:	4b4a      	ldr	r3, [pc, #296]	; (8002890 <Rafael_PanTompkins+0xc18>)
 8002766:	6018      	str	r0, [r3, #0]
 8002768:	4680      	mov	r8, r0
				rrlow = 0.92*rravg2;
 800276a:	f7fd feb3 	bl	80004d4 <__aeabi_i2d>
 800276e:	a334      	add	r3, pc, #208	; (adr r3, 8002840 <Rafael_PanTompkins+0xbc8>)
 8002770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002774:	4606      	mov	r6, r0
 8002776:	460f      	mov	r7, r1
 8002778:	f7fd ff16 	bl	80005a8 <__aeabi_dmul>
 800277c:	f7fe f9c4 	bl	8000b08 <__aeabi_d2iz>
				rrhigh = 1.16*rravg2;
 8002780:	a331      	add	r3, pc, #196	; (adr r3, 8002848 <Rafael_PanTompkins+0xbd0>)
 8002782:	e9d3 2300 	ldrd	r2, r3, [r3]
				rrlow = 0.92*rravg2;
 8002786:	f8c9 0000 	str.w	r0, [r9]
				rrhigh = 1.16*rravg2;
 800278a:	4639      	mov	r1, r7
 800278c:	4630      	mov	r0, r6
 800278e:	f7fd ff0b 	bl	80005a8 <__aeabi_dmul>
 8002792:	f7fe f9b9 	bl	8000b08 <__aeabi_d2iz>
				rrmiss = 1.66*rravg2;
 8002796:	a32e      	add	r3, pc, #184	; (adr r3, 8002850 <Rafael_PanTompkins+0xbd8>)
 8002798:	e9d3 2300 	ldrd	r2, r3, [r3]
				rrhigh = 1.16*rravg2;
 800279c:	f8cb 0000 	str.w	r0, [fp]
				rrmiss = 1.66*rravg2;
 80027a0:	4639      	mov	r1, r7
 80027a2:	4630      	mov	r0, r6
 80027a4:	f7fd ff00 	bl	80005a8 <__aeabi_dmul>
 80027a8:	f7fe f9ae 	bl	8000b08 <__aeabi_d2iz>
 80027ac:	4b39      	ldr	r3, [pc, #228]	; (8002894 <Rafael_PanTompkins+0xc1c>)
 80027ae:	6018      	str	r0, [r3, #0]
			prevRegular = regular;
 80027b0:	4a39      	ldr	r2, [pc, #228]	; (8002898 <Rafael_PanTompkins+0xc20>)
 80027b2:	493a      	ldr	r1, [pc, #232]	; (800289c <Rafael_PanTompkins+0xc24>)
 80027b4:	7813      	ldrb	r3, [r2, #0]
 80027b6:	700b      	strb	r3, [r1, #0]
			if (rravg1 == rravg2)
 80027b8:	4544      	cmp	r4, r8
 80027ba:	d01d      	beq.n	80027f8 <Rafael_PanTompkins+0xb80>
				regular = false;
 80027bc:	2100      	movs	r1, #0
 80027be:	7011      	strb	r1, [r2, #0]
				if (prevRegular)
 80027c0:	bb33      	cbnz	r3, 8002810 <Rafael_PanTompkins+0xb98>
		outputSignal[current] = qrs;
 80027c2:	4b2e      	ldr	r3, [pc, #184]	; (800287c <Rafael_PanTompkins+0xc04>)
 80027c4:	4c36      	ldr	r4, [pc, #216]	; (80028a0 <Rafael_PanTompkins+0xc28>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	f824 301a 	strh.w	r3, [r4, sl, lsl #1]
}
 80027cc:	b015      	add	sp, #84	; 0x54
 80027ce:	ecbd 8b04 	vpop	{d8-d9}
 80027d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((sample - lastQRS > (long unsigned int)rrmiss) && (sample > lastQRS + FS/5))
 80027d6:	4a2f      	ldr	r2, [pc, #188]	; (8002894 <Rafael_PanTompkins+0xc1c>)
 80027d8:	9b04      	ldr	r3, [sp, #16]
 80027da:	9806      	ldr	r0, [sp, #24]
 80027dc:	9210      	str	r2, [sp, #64]	; 0x40
 80027de:	6812      	ldr	r2, [r2, #0]
 80027e0:	1a1b      	subs	r3, r3, r0
 80027e2:	429a      	cmp	r2, r3
 80027e4:	f4bf ab88 	bcs.w	8001ef8 <Rafael_PanTompkins+0x280>
 80027e8:	4632      	mov	r2, r6
 80027ea:	e53b      	b.n	8002264 <Rafael_PanTompkins+0x5ec>
                        if (squared[j] > currentSlope)
 80027ec:	2400      	movs	r4, #0
 80027ee:	e6d3      	b.n	8002598 <Rafael_PanTompkins+0x920>
			if (rravg1 == rravg2)
 80027f0:	4b27      	ldr	r3, [pc, #156]	; (8002890 <Rafael_PanTompkins+0xc18>)
 80027f2:	f8d3 8000 	ldr.w	r8, [r3]
 80027f6:	e7db      	b.n	80027b0 <Rafael_PanTompkins+0xb38>
		outputSignal[current] = qrs;
 80027f8:	4b20      	ldr	r3, [pc, #128]	; (800287c <Rafael_PanTompkins+0xc04>)
 80027fa:	4c29      	ldr	r4, [pc, #164]	; (80028a0 <Rafael_PanTompkins+0xc28>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	f824 301a 	strh.w	r3, [r4, sl, lsl #1]
				regular = true;
 8002802:	2101      	movs	r1, #1
 8002804:	7011      	strb	r1, [r2, #0]
}
 8002806:	b015      	add	sp, #84	; 0x54
 8002808:	ecbd 8b04 	vpop	{d8-d9}
 800280c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					threshold_i1 /= 2;
 8002810:	9b02      	ldr	r3, [sp, #8]
 8002812:	4a16      	ldr	r2, [pc, #88]	; (800286c <Rafael_PanTompkins+0xbf4>)
 8002814:	4c22      	ldr	r4, [pc, #136]	; (80028a0 <Rafael_PanTompkins+0xc28>)
 8002816:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800281a:	105b      	asrs	r3, r3, #1
 800281c:	8013      	strh	r3, [r2, #0]
		outputSignal[current] = qrs;
 800281e:	4b17      	ldr	r3, [pc, #92]	; (800287c <Rafael_PanTompkins+0xc04>)
					threshold_f1 /= 2;
 8002820:	9a07      	ldr	r2, [sp, #28]
		outputSignal[current] = qrs;
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	f824 301a 	strh.w	r3, [r4, sl, lsl #1]
					threshold_f1 /= 2;
 8002828:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800282c:	106d      	asrs	r5, r5, #1
 800282e:	8015      	strh	r5, [r2, #0]
}
 8002830:	b015      	add	sp, #84	; 0x54
 8002832:	ecbd 8b04 	vpop	{d8-d9}
 8002836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        for (j = i - 10; j <= i; j++)
 800283a:	4644      	mov	r4, r8
					    currentSlope = 0;
 800283c:	2500      	movs	r5, #0
 800283e:	e56c      	b.n	800231a <Rafael_PanTompkins+0x6a2>
 8002840:	d70a3d71 	.word	0xd70a3d71
 8002844:	3fed70a3 	.word	0x3fed70a3
 8002848:	28f5c28f 	.word	0x28f5c28f
 800284c:	3ff28f5c 	.word	0x3ff28f5c
 8002850:	28f5c28f 	.word	0x28f5c28f
 8002854:	3ffa8f5c 	.word	0x3ffa8f5c
 8002858:	20002728 	.word	0x20002728
 800285c:	20002726 	.word	0x20002726
 8002860:	3fec0000 	.word	0x3fec0000
 8002864:	20002212 	.word	0x20002212
 8002868:	3fd00000 	.word	0x3fd00000
 800286c:	20002bdc 	.word	0x20002bdc
 8002870:	3fe00000 	.word	0x3fe00000
 8002874:	20002210 	.word	0x20002210
 8002878:	20002bda 	.word	0x20002bda
 800287c:	200026c9 	.word	0x200026c9
 8002880:	20001d5c 	.word	0x20001d5c
 8002884:	200026cc 	.word	0x200026cc
 8002888:	2000270c 	.word	0x2000270c
 800288c:	200026ec 	.word	0x200026ec
 8002890:	20002710 	.word	0x20002710
 8002894:	2000271c 	.word	0x2000271c
 8002898:	20000004 	.word	0x20000004
 800289c:	200026c8 	.word	0x200026c8
 80028a0:	20002214 	.word	0x20002214
 80028a4:	20002724 	.word	0x20002724
 80028a8:	20002bde 	.word	0x20002bde
 80028ac:	20002718 	.word	0x20002718
 80028b0:	20002714 	.word	0x20002714
 80028b4:	9b02      	ldr	r3, [sp, #8]
 80028b6:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 80028ba:	f8cd b00c 	str.w	fp, [sp, #12]
 80028be:	463a      	mov	r2, r7
 80028c0:	b113      	cbz	r3, 80028c8 <Rafael_PanTompkins+0xc50>
 80028c2:	9b01      	ldr	r3, [sp, #4]
 80028c4:	f8c3 9000 	str.w	r9, [r3]
                            peak_i = integral[i];
 80028c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
                            spk_i = 0.25*peak_i+ 0.75*spk_i;
 80028ca:	4fa3      	ldr	r7, [pc, #652]	; (8002b58 <Rafael_PanTompkins+0xee0>)
 80028cc:	601d      	str	r5, [r3, #0]
                            peak_i = integral[i];
 80028ce:	4ba3      	ldr	r3, [pc, #652]	; (8002b5c <Rafael_PanTompkins+0xee4>)
                            spk_i = 0.25*peak_i+ 0.75*spk_i;
 80028d0:	f9b7 0000 	ldrsh.w	r0, [r7]
                            peak_i = integral[i];
 80028d4:	801a      	strh	r2, [r3, #0]
                            peak_f = highpass[i];
 80028d6:	4ba2      	ldr	r3, [pc, #648]	; (8002b60 <Rafael_PanTompkins+0xee8>)
                            spk_f = 0.25*peak_f + 0.75*spk_f;
 80028d8:	4ca2      	ldr	r4, [pc, #648]	; (8002b64 <Rafael_PanTompkins+0xeec>)
                            peak_i = integral[i];
 80028da:	4616      	mov	r6, r2
                            peak_f = highpass[i];
 80028dc:	9a03      	ldr	r2, [sp, #12]
 80028de:	801a      	strh	r2, [r3, #0]
                            spk_i = 0.25*peak_i+ 0.75*spk_i;
 80028e0:	f7fd fdf8 	bl	80004d4 <__aeabi_i2d>
 80028e4:	4ba0      	ldr	r3, [pc, #640]	; (8002b68 <Rafael_PanTompkins+0xef0>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	f7fd fe5e 	bl	80005a8 <__aeabi_dmul>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4630      	mov	r0, r6
 80028f2:	ec43 2b18 	vmov	d8, r2, r3
 80028f6:	f7fd fded 	bl	80004d4 <__aeabi_i2d>
 80028fa:	4b9c      	ldr	r3, [pc, #624]	; (8002b6c <Rafael_PanTompkins+0xef4>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	f7fd fe53 	bl	80005a8 <__aeabi_dmul>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	ec51 0b18 	vmov	r0, r1, d8
 800290a:	f7fd fc97 	bl	800023c <__adddf3>
 800290e:	f7fe f8fb 	bl	8000b08 <__aeabi_d2iz>
 8002912:	b206      	sxth	r6, r0
 8002914:	803e      	strh	r6, [r7, #0]
                            spk_f = 0.25*peak_f + 0.75*spk_f;
 8002916:	f9b4 0000 	ldrsh.w	r0, [r4]
 800291a:	f7fd fddb 	bl	80004d4 <__aeabi_i2d>
 800291e:	4b92      	ldr	r3, [pc, #584]	; (8002b68 <Rafael_PanTompkins+0xef0>)
 8002920:	2200      	movs	r2, #0
 8002922:	f7fd fe41 	bl	80005a8 <__aeabi_dmul>
 8002926:	4602      	mov	r2, r0
 8002928:	9803      	ldr	r0, [sp, #12]
 800292a:	4617      	mov	r7, r2
 800292c:	4688      	mov	r8, r1
 800292e:	f7fd fdd1 	bl	80004d4 <__aeabi_i2d>
 8002932:	4b8e      	ldr	r3, [pc, #568]	; (8002b6c <Rafael_PanTompkins+0xef4>)
 8002934:	2200      	movs	r2, #0
 8002936:	f7fd fe37 	bl	80005a8 <__aeabi_dmul>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4638      	mov	r0, r7
 8002940:	4641      	mov	r1, r8
 8002942:	f7fd fc7b 	bl	800023c <__adddf3>
 8002946:	f7fe f8df 	bl	8000b08 <__aeabi_d2iz>
                            threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 800294a:	4b89      	ldr	r3, [pc, #548]	; (8002b70 <Rafael_PanTompkins+0xef8>)
                            spk_f = 0.25*peak_f + 0.75*spk_f;
 800294c:	b207      	sxth	r7, r0
 800294e:	8027      	strh	r7, [r4, #0]
                            threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8002950:	f9b3 4000 	ldrsh.w	r4, [r3]
 8002954:	1b30      	subs	r0, r6, r4
 8002956:	f7fd fdbd 	bl	80004d4 <__aeabi_i2d>
 800295a:	4b84      	ldr	r3, [pc, #528]	; (8002b6c <Rafael_PanTompkins+0xef4>)
 800295c:	2200      	movs	r2, #0
 800295e:	f7fd fe23 	bl	80005a8 <__aeabi_dmul>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4620      	mov	r0, r4
 8002968:	ec43 2b18 	vmov	d8, r2, r3
 800296c:	f7fd fdb2 	bl	80004d4 <__aeabi_i2d>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	ec51 0b18 	vmov	r0, r1, d8
 8002978:	f7fd fc60 	bl	800023c <__adddf3>
 800297c:	f7fe f8c4 	bl	8000b08 <__aeabi_d2iz>
 8002980:	4b7c      	ldr	r3, [pc, #496]	; (8002b74 <Rafael_PanTompkins+0xefc>)
 8002982:	fa0f f880 	sxth.w	r8, r0
 8002986:	f8a3 8000 	strh.w	r8, [r3]
                            threshold_i2 = 0.5*threshold_i1;
 800298a:	4640      	mov	r0, r8
 800298c:	f7fd fda2 	bl	80004d4 <__aeabi_i2d>
 8002990:	2200      	movs	r2, #0
 8002992:	4b79      	ldr	r3, [pc, #484]	; (8002b78 <Rafael_PanTompkins+0xf00>)
 8002994:	f7fd fe08 	bl	80005a8 <__aeabi_dmul>
 8002998:	f7fe f8b6 	bl	8000b08 <__aeabi_d2iz>
 800299c:	4b77      	ldr	r3, [pc, #476]	; (8002b7c <Rafael_PanTompkins+0xf04>)
 800299e:	8018      	strh	r0, [r3, #0]
                            lastSlope = currentSlope;
 80029a0:	4b77      	ldr	r3, [pc, #476]	; (8002b80 <Rafael_PanTompkins+0xf08>)
 80029a2:	601d      	str	r5, [r3, #0]
                            threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 80029a4:	4b77      	ldr	r3, [pc, #476]	; (8002b84 <Rafael_PanTompkins+0xf0c>)
 80029a6:	f9b3 4000 	ldrsh.w	r4, [r3]
 80029aa:	1b38      	subs	r0, r7, r4
 80029ac:	f7fd fd92 	bl	80004d4 <__aeabi_i2d>
 80029b0:	4b6e      	ldr	r3, [pc, #440]	; (8002b6c <Rafael_PanTompkins+0xef4>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	f7fd fdf8 	bl	80005a8 <__aeabi_dmul>
 80029b8:	4602      	mov	r2, r0
 80029ba:	4620      	mov	r0, r4
 80029bc:	460d      	mov	r5, r1
 80029be:	4614      	mov	r4, r2
 80029c0:	f7fd fd88 	bl	80004d4 <__aeabi_i2d>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4620      	mov	r0, r4
 80029ca:	4629      	mov	r1, r5
 80029cc:	f7fd fc36 	bl	800023c <__adddf3>
 80029d0:	f7fe f89a 	bl	8000b08 <__aeabi_d2iz>
 80029d4:	9b07      	ldr	r3, [sp, #28]
 80029d6:	b204      	sxth	r4, r0
 80029d8:	801c      	strh	r4, [r3, #0]
                            threshold_f2 = 0.5*threshold_f1;
 80029da:	4620      	mov	r0, r4
 80029dc:	f7fd fd7a 	bl	80004d4 <__aeabi_i2d>
 80029e0:	4b65      	ldr	r3, [pc, #404]	; (8002b78 <Rafael_PanTompkins+0xf00>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	f7fd fde0 	bl	80005a8 <__aeabi_dmul>
 80029e8:	f7fe f88e 	bl	8000b08 <__aeabi_d2iz>
 80029ec:	4b66      	ldr	r3, [pc, #408]	; (8002b88 <Rafael_PanTompkins+0xf10>)
                            qrs = true;
 80029ee:	4967      	ldr	r1, [pc, #412]	; (8002b8c <Rafael_PanTompkins+0xf14>)
                            threshold_f2 = 0.5*threshold_f1;
 80029f0:	8018      	strh	r0, [r3, #0]
                                rr1[j] = rr1[j+1];
 80029f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80029f4:	f04f 0b07 	mov.w	fp, #7
 80029f8:	f8c3 b000 	str.w	fp, [r3]
                            rr1[7] = sample - (current - i) - lastQRS;
 80029fc:	9b04      	ldr	r3, [sp, #16]
 80029fe:	eba3 060a 	sub.w	r6, r3, sl
                            lastQRS = sample - (current - i);
 8002a02:	9b08      	ldr	r3, [sp, #32]
                            rr1[7] = sample - (current - i) - lastQRS;
 8002a04:	444e      	add	r6, r9
                            lastQRS = sample - (current - i);
 8002a06:	601e      	str	r6, [r3, #0]
                            rr1[7] = sample - (current - i) - lastQRS;
 8002a08:	9b06      	ldr	r3, [sp, #24]
 8002a0a:	1af6      	subs	r6, r6, r3
                                rr1[j] = rr1[j+1];
 8002a0c:	4b60      	ldr	r3, [pc, #384]	; (8002b90 <Rafael_PanTompkins+0xf18>)
                            qrs = true;
 8002a0e:	2201      	movs	r2, #1
                                rr1[j] = rr1[j+1];
 8002a10:	6858      	ldr	r0, [r3, #4]
                            qrs = true;
 8002a12:	700a      	strb	r2, [r1, #0]
                                rr1[j] = rr1[j+1];
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	6018      	str	r0, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
                                rravg1 += rr1[j];
 8002a1a:	4410      	add	r0, r2
                                rr1[j] = rr1[j+1];
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	609a      	str	r2, [r3, #8]
                                rravg1 += rr1[j];
 8002a20:	4410      	add	r0, r2
                                rr1[j] = rr1[j+1];
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	60da      	str	r2, [r3, #12]
                                rravg1 += rr1[j];
 8002a26:	4410      	add	r0, r2
                                rr1[j] = rr1[j+1];
 8002a28:	695a      	ldr	r2, [r3, #20]
 8002a2a:	611a      	str	r2, [r3, #16]
                                rravg1 += rr1[j];
 8002a2c:	4410      	add	r0, r2
                                rr1[j] = rr1[j+1];
 8002a2e:	699a      	ldr	r2, [r3, #24]
 8002a30:	615a      	str	r2, [r3, #20]
                                rravg1 += rr1[j];
 8002a32:	4410      	add	r0, r2
                                rr1[j] = rr1[j+1];
 8002a34:	69da      	ldr	r2, [r3, #28]
 8002a36:	619a      	str	r2, [r3, #24]
                                rravg1 += rr1[j];
 8002a38:	4410      	add	r0, r2
                            rr1[7] = sample - (current - i) - lastQRS;
 8002a3a:	61de      	str	r6, [r3, #28]
                            rravg1 *= 0.125;
 8002a3c:	4430      	add	r0, r6
 8002a3e:	f7fd fd49 	bl	80004d4 <__aeabi_i2d>
 8002a42:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002a46:	2200      	movs	r2, #0
 8002a48:	f7fd fdae 	bl	80005a8 <__aeabi_dmul>
 8002a4c:	f7fe f85c 	bl	8000b08 <__aeabi_d2iz>
 8002a50:	4b50      	ldr	r3, [pc, #320]	; (8002b94 <Rafael_PanTompkins+0xf1c>)
 8002a52:	6018      	str	r0, [r3, #0]
                            if ( (rr1[7] >= rrlow) && (rr1[7] <= rrhigh) )
 8002a54:	4b50      	ldr	r3, [pc, #320]	; (8002b98 <Rafael_PanTompkins+0xf20>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	429e      	cmp	r6, r3
                            rravg1 *= 0.125;
 8002a5a:	4605      	mov	r5, r0
                            if ( (rr1[7] >= rrlow) && (rr1[7] <= rrhigh) )
 8002a5c:	db69      	blt.n	8002b32 <Rafael_PanTompkins+0xeba>
 8002a5e:	4f4f      	ldr	r7, [pc, #316]	; (8002b9c <Rafael_PanTompkins+0xf24>)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	429e      	cmp	r6, r3
 8002a64:	dc65      	bgt.n	8002b32 <Rafael_PanTompkins+0xeba>
                                    rr2[i] = rr2[i+1];
 8002a66:	9b01      	ldr	r3, [sp, #4]
 8002a68:	f8c3 b000 	str.w	fp, [r3]
 8002a6c:	4b4c      	ldr	r3, [pc, #304]	; (8002ba0 <Rafael_PanTompkins+0xf28>)
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	6898      	ldr	r0, [r3, #8]
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	6058      	str	r0, [r3, #4]
                                    rravg2 += rr2[i];
 8002a76:	4410      	add	r0, r2
                                    rr2[i] = rr2[i+1];
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	609a      	str	r2, [r3, #8]
                                    rravg2 += rr2[i];
 8002a7c:	4410      	add	r0, r2
                                    rr2[i] = rr2[i+1];
 8002a7e:	691a      	ldr	r2, [r3, #16]
 8002a80:	60da      	str	r2, [r3, #12]
                                    rravg2 += rr2[i];
 8002a82:	4410      	add	r0, r2
                                    rr2[i] = rr2[i+1];
 8002a84:	695a      	ldr	r2, [r3, #20]
 8002a86:	611a      	str	r2, [r3, #16]
                                    rravg2 += rr2[i];
 8002a88:	4410      	add	r0, r2
                                    rr2[i] = rr2[i+1];
 8002a8a:	699a      	ldr	r2, [r3, #24]
 8002a8c:	615a      	str	r2, [r3, #20]
                                    rravg2 += rr2[i];
 8002a8e:	4410      	add	r0, r2
                                    rr2[i] = rr2[i+1];
 8002a90:	69da      	ldr	r2, [r3, #28]
 8002a92:	619a      	str	r2, [r3, #24]
                                    rravg2 += rr2[i];
 8002a94:	4410      	add	r0, r2
                                rr2[7] = rr1[7];
 8002a96:	61de      	str	r6, [r3, #28]
                                rravg2 *= 0.125;
 8002a98:	4430      	add	r0, r6
 8002a9a:	f7fd fd1b 	bl	80004d4 <__aeabi_i2d>
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002aa4:	f7fd fd80 	bl	80005a8 <__aeabi_dmul>
 8002aa8:	f7fe f82e 	bl	8000b08 <__aeabi_d2iz>
 8002aac:	4b3d      	ldr	r3, [pc, #244]	; (8002ba4 <Rafael_PanTompkins+0xf2c>)
 8002aae:	6018      	str	r0, [r3, #0]
 8002ab0:	4606      	mov	r6, r0
                                rrlow = 0.92*rravg2;
 8002ab2:	f7fd fd0f 	bl	80004d4 <__aeabi_i2d>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	ec43 2b18 	vmov	d8, r2, r3
 8002abe:	a320      	add	r3, pc, #128	; (adr r3, 8002b40 <Rafael_PanTompkins+0xec8>)
 8002ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac4:	f7fd fd70 	bl	80005a8 <__aeabi_dmul>
 8002ac8:	f7fe f81e 	bl	8000b08 <__aeabi_d2iz>
 8002acc:	4b32      	ldr	r3, [pc, #200]	; (8002b98 <Rafael_PanTompkins+0xf20>)
 8002ace:	6018      	str	r0, [r3, #0]
                                rrhigh = 1.16*rravg2;
 8002ad0:	a31d      	add	r3, pc, #116	; (adr r3, 8002b48 <Rafael_PanTompkins+0xed0>)
 8002ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad6:	ec51 0b18 	vmov	r0, r1, d8
 8002ada:	f7fd fd65 	bl	80005a8 <__aeabi_dmul>
 8002ade:	f7fe f813 	bl	8000b08 <__aeabi_d2iz>
                                rrmiss = 1.66*rravg2;
 8002ae2:	a31b      	add	r3, pc, #108	; (adr r3, 8002b50 <Rafael_PanTompkins+0xed8>)
 8002ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
                                rrhigh = 1.16*rravg2;
 8002ae8:	6038      	str	r0, [r7, #0]
                                rrmiss = 1.66*rravg2;
 8002aea:	ec51 0b18 	vmov	r0, r1, d8
 8002aee:	f7fd fd5b 	bl	80005a8 <__aeabi_dmul>
 8002af2:	f7fe f809 	bl	8000b08 <__aeabi_d2iz>
 8002af6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002af8:	6018      	str	r0, [r3, #0]
                            prevRegular = regular;
 8002afa:	4b2b      	ldr	r3, [pc, #172]	; (8002ba8 <Rafael_PanTompkins+0xf30>)
 8002afc:	492b      	ldr	r1, [pc, #172]	; (8002bac <Rafael_PanTompkins+0xf34>)
 8002afe:	781a      	ldrb	r2, [r3, #0]
 8002b00:	700a      	strb	r2, [r1, #0]
                            if (rravg1 == rravg2)
 8002b02:	42b5      	cmp	r5, r6
 8002b04:	d018      	beq.n	8002b38 <Rafael_PanTompkins+0xec0>
                                regular = false;
 8002b06:	2100      	movs	r1, #0
 8002b08:	7019      	strb	r1, [r3, #0]
                                if (prevRegular)
 8002b0a:	b152      	cbz	r2, 8002b22 <Rafael_PanTompkins+0xeaa>
                                    threshold_i1 /= 2;
 8002b0c:	4a19      	ldr	r2, [pc, #100]	; (8002b74 <Rafael_PanTompkins+0xefc>)
 8002b0e:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 8002b12:	ea4f 0368 	mov.w	r3, r8, asr #1
 8002b16:	8013      	strh	r3, [r2, #0]
                                    threshold_f1 /= 2;
 8002b18:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8002b1c:	9a07      	ldr	r2, [sp, #28]
 8002b1e:	1063      	asrs	r3, r4, #1
 8002b20:	8013      	strh	r3, [r2, #0]
                    outputSignal[i] = true;
 8002b22:	9b01      	ldr	r3, [sp, #4]
 8002b24:	4c22      	ldr	r4, [pc, #136]	; (8002bb0 <Rafael_PanTompkins+0xf38>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	2301      	movs	r3, #1
 8002b2a:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
			if (!qrs)
 8002b2e:	f7ff ba79 	b.w	8002024 <Rafael_PanTompkins+0x3ac>
                            if (rravg1 == rravg2)
 8002b32:	4b1c      	ldr	r3, [pc, #112]	; (8002ba4 <Rafael_PanTompkins+0xf2c>)
 8002b34:	681e      	ldr	r6, [r3, #0]
 8002b36:	e7e0      	b.n	8002afa <Rafael_PanTompkins+0xe82>
                                regular = true;
 8002b38:	2201      	movs	r2, #1
 8002b3a:	701a      	strb	r2, [r3, #0]
 8002b3c:	e7f1      	b.n	8002b22 <Rafael_PanTompkins+0xeaa>
 8002b3e:	bf00      	nop
 8002b40:	d70a3d71 	.word	0xd70a3d71
 8002b44:	3fed70a3 	.word	0x3fed70a3
 8002b48:	28f5c28f 	.word	0x28f5c28f
 8002b4c:	3ff28f5c 	.word	0x3ff28f5c
 8002b50:	28f5c28f 	.word	0x28f5c28f
 8002b54:	3ffa8f5c 	.word	0x3ffa8f5c
 8002b58:	20002726 	.word	0x20002726
 8002b5c:	200026c6 	.word	0x200026c6
 8002b60:	200026c4 	.word	0x200026c4
 8002b64:	20002724 	.word	0x20002724
 8002b68:	3fe80000 	.word	0x3fe80000
 8002b6c:	3fd00000 	.word	0x3fd00000
 8002b70:	20002212 	.word	0x20002212
 8002b74:	20002bdc 	.word	0x20002bdc
 8002b78:	3fe00000 	.word	0x3fe00000
 8002b7c:	20002bde 	.word	0x20002bde
 8002b80:	20001d5c 	.word	0x20001d5c
 8002b84:	20002210 	.word	0x20002210
 8002b88:	20002bda 	.word	0x20002bda
 8002b8c:	200026c9 	.word	0x200026c9
 8002b90:	200026cc 	.word	0x200026cc
 8002b94:	2000270c 	.word	0x2000270c
 8002b98:	20002718 	.word	0x20002718
 8002b9c:	20002714 	.word	0x20002714
 8002ba0:	200026ec 	.word	0x200026ec
 8002ba4:	20002710 	.word	0x20002710
 8002ba8:	20000004 	.word	0x20000004
 8002bac:	200026c8 	.word	0x200026c8
 8002bb0:	20002214 	.word	0x20002214
 8002bb4:	00000000 	.word	0x00000000

08002bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bb8:	b510      	push	{r4, lr}
 8002bba:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bbc:	2228      	movs	r2, #40	; 0x28
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	a80b      	add	r0, sp, #44	; 0x2c
 8002bc2:	f004 ffb7 	bl	8007b34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002bcc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002bd0:	e9cd 3306 	strd	r3, r3, [sp, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bd4:	492a      	ldr	r1, [pc, #168]	; (8002c80 <SystemClock_Config+0xc8>)
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bd6:	9308      	str	r3, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bd8:	680a      	ldr	r2, [r1, #0]
 8002bda:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8002bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be2:	600a      	str	r2, [r1, #0]
 8002be4:	680a      	ldr	r2, [r1, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8002be6:	2026      	movs	r0, #38	; 0x26
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8002be8:	f44f 7180 	mov.w	r1, #256	; 0x100
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8002bec:	900a      	str	r0, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8002bee:	2000      	movs	r0, #0
 8002bf0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bf4:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bf8:	2040      	movs	r0, #64	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002bfa:	2160      	movs	r1, #96	; 0x60
 8002bfc:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c00:	9201      	str	r2, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c02:	2102      	movs	r1, #2
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002c04:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c06:	900e      	str	r0, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
  RCC_OscInitStruct.PLL.PLLN = 32;
 8002c08:	2020      	movs	r0, #32
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002c0a:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8002c0e:	e9cd 3017 	strd	r3, r0, [sp, #92]	; 0x5c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002c12:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c14:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002c18:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002c1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c20:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002c22:	e9cd 321a 	strd	r3, r2, [sp, #104]	; 0x68
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c26:	9c01      	ldr	r4, [sp, #4]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c28:	9119      	str	r1, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c2a:	f001 fd4f 	bl	80046cc <HAL_RCC_OscConfig>
 8002c2e:	b108      	cbz	r0, 8002c34 <SystemClock_Config+0x7c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c30:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c32:	e7fe      	b.n	8002c32 <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002c34:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8002c68 <SystemClock_Config+0xb0>
 8002c38:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002c3c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8002c70 <SystemClock_Config+0xb8>
 8002c40:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002c44:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8002c78 <SystemClock_Config+0xc0>
 8002c48:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002c4a:	2103      	movs	r1, #3
 8002c4c:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002c4e:	ed8d 7b06 	vstr	d7, [sp, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002c52:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002c54:	f002 f894 	bl	8004d80 <HAL_RCC_ClockConfig>
 8002c58:	b108      	cbz	r0, 8002c5e <SystemClock_Config+0xa6>
 8002c5a:	b672      	cpsid	i
  while (1)
 8002c5c:	e7fe      	b.n	8002c5c <SystemClock_Config+0xa4>
  HAL_RCCEx_EnableMSIPLLMode();
 8002c5e:	f002 fc05 	bl	800546c <HAL_RCCEx_EnableMSIPLLMode>
}
 8002c62:	b01c      	add	sp, #112	; 0x70
 8002c64:	bd10      	pop	{r4, pc}
 8002c66:	bf00      	nop
 8002c68:	0000006f 	.word	0x0000006f
 8002c6c:	00000003 	.word	0x00000003
	...
 8002c7c:	00000080 	.word	0x00000080
 8002c80:	58000400 	.word	0x58000400

08002c84 <PeriphCommonClock_Config>:
{
 8002c84:	b500      	push	{lr}
 8002c86:	b095      	sub	sp, #84	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c88:	2248      	movs	r2, #72	; 0x48
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	a801      	add	r0, sp, #4
 8002c8e:	f004 ff51 	bl	8007b34 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8002c92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002c96:	2310      	movs	r3, #16
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c98:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8002c9a:	9200      	str	r2, [sp, #0]
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002c9c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c9e:	f002 f9f5 	bl	800508c <HAL_RCCEx_PeriphCLKConfig>
 8002ca2:	b108      	cbz	r0, 8002ca8 <PeriphCommonClock_Config+0x24>
 8002ca4:	b672      	cpsid	i
  while (1)
 8002ca6:	e7fe      	b.n	8002ca6 <PeriphCommonClock_Config+0x22>
}
 8002ca8:	b015      	add	sp, #84	; 0x54
 8002caa:	f85d fb04 	ldr.w	pc, [sp], #4
 8002cae:	bf00      	nop

08002cb0 <main>:
{
 8002cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002cb4:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8002cb6:	f000 fa8f 	bl	80031d8 <HAL_Init>
  SystemClock_Config();
 8002cba:	f7ff ff7d 	bl	8002bb8 <SystemClock_Config>
  PeriphCommonClock_Config();
 8002cbe:	f7ff ffe1 	bl	8002c84 <PeriphCommonClock_Config>
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  hi2c1.Instance = I2C1;
 8002cc6:	4c88      	ldr	r4, [pc, #544]	; (8002ee8 <main+0x238>)
 8002cc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cca:	f042 0202 	orr.w	r2, r2, #2
 8002cce:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002cd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cd2:	f002 0202 	and.w	r2, r2, #2
 8002cd6:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8002cd8:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002cda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cdc:	f042 0201 	orr.w	r2, r2, #1
 8002ce0:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8002cea:	9b02      	ldr	r3, [sp, #8]
  MX_USB_Device_Init();
 8002cec:	f004 fb9e 	bl	800742c <MX_USB_Device_Init>
  hi2c1.Instance = I2C1;
 8002cf0:	487e      	ldr	r0, [pc, #504]	; (8002eec <main+0x23c>)
  hi2c1.Init.Timing = 0x10707DBC;
 8002cf2:	497f      	ldr	r1, [pc, #508]	; (8002ef0 <main+0x240>)
  hi2c1.Init.OwnAddress1 = 0;
 8002cf4:	2300      	movs	r3, #0
  hi2c1.Init.Timing = 0x10707DBC;
 8002cf6:	e9c4 0100 	strd	r0, r1, [r4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002cfa:	2201      	movs	r2, #1
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002cfc:	4620      	mov	r0, r4
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002cfe:	e9c4 3202 	strd	r3, r2, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8002d02:	e9c4 3304 	strd	r3, r3, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d06:	e9c4 3306 	strd	r3, r3, [r4, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d0a:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d0c:	f000 fbea 	bl	80034e4 <HAL_I2C_Init>
 8002d10:	b108      	cbz	r0, 8002d16 <main+0x66>
 8002d12:	b672      	cpsid	i
  while (1)
 8002d14:	e7fe      	b.n	8002d14 <main+0x64>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d16:	4601      	mov	r1, r0
 8002d18:	4620      	mov	r0, r4
 8002d1a:	f000 fc37 	bl	800358c <HAL_I2CEx_ConfigAnalogFilter>
 8002d1e:	4601      	mov	r1, r0
 8002d20:	b108      	cbz	r0, 8002d26 <main+0x76>
 8002d22:	b672      	cpsid	i
  while (1)
 8002d24:	e7fe      	b.n	8002d24 <main+0x74>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002d26:	4620      	mov	r0, r4
 8002d28:	f000 fc5a 	bl	80035e0 <HAL_I2CEx_ConfigDigitalFilter>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	b108      	cbz	r0, 8002d34 <main+0x84>
 8002d30:	b672      	cpsid	i
  while (1)
 8002d32:	e7fe      	b.n	8002d32 <main+0x82>
  htim2.Instance = TIM2;
 8002d34:	4c6f      	ldr	r4, [pc, #444]	; (8002ef4 <main+0x244>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d36:	9306      	str	r3, [sp, #24]
  htim2.Instance = TIM2;
 8002d38:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 63;
 8002d3c:	213f      	movs	r1, #63	; 0x3f
 8002d3e:	e9c4 0100 	strd	r0, r1, [r4]
  htim2.Init.Period = 4294967295;
 8002d42:	f04f 32ff 	mov.w	r2, #4294967295
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d46:	4620      	mov	r0, r4
  htim2.Init.Period = 4294967295;
 8002d48:	e9c4 3202 	strd	r3, r2, [r4, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d4c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d50:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002d54:	9303      	str	r3, [sp, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d56:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d58:	61a3      	str	r3, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d5a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d5c:	f002 fb8e 	bl	800547c <HAL_TIM_Base_Init>
 8002d60:	b108      	cbz	r0, 8002d66 <main+0xb6>
 8002d62:	b672      	cpsid	i
  while (1)
 8002d64:	e7fe      	b.n	8002d64 <main+0xb4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d6a:	a906      	add	r1, sp, #24
 8002d6c:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d6e:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d70:	f002 fc24 	bl	80055bc <HAL_TIM_ConfigClockSource>
 8002d74:	4603      	mov	r3, r0
 8002d76:	b108      	cbz	r0, 8002d7c <main+0xcc>
 8002d78:	b672      	cpsid	i
  while (1)
 8002d7a:	e7fe      	b.n	8002d7a <main+0xca>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d7c:	a903      	add	r1, sp, #12
 8002d7e:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d80:	9303      	str	r3, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d82:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d84:	f002 fcd2 	bl	800572c <HAL_TIMEx_MasterConfigSynchronization>
 8002d88:	b108      	cbz	r0, 8002d8e <main+0xde>
 8002d8a:	b672      	cpsid	i
  while (1)
 8002d8c:	e7fe      	b.n	8002d8c <main+0xdc>
  HAL_TIM_Base_Start_IT(&htim2);
 8002d8e:	4620      	mov	r0, r4
 8002d90:	f002 fbec 	bl	800556c <HAL_TIM_Base_Start_IT>
  uint16_t N = 100;
 8002d94:	4d58      	ldr	r5, [pc, #352]	; (8002ef8 <main+0x248>)
	sprintf(str,"%d iteration, %u samples, 1,000,000 ticks per second\r\n", N, ECG_samples);
 8002d96:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8002f10 <main+0x260>
 8002d9a:	4f58      	ldr	r7, [pc, #352]	; (8002efc <main+0x24c>)
	PT_init();
 8002d9c:	f7fd ff82 	bl	8000ca4 <PT_init>
	Rafael_init();
 8002da0:	f7fe ff0a 	bl	8001bb8 <Rafael_init>
	arm_PT_init();
 8002da4:	f7fe fc34 	bl	8001610 <arm_PT_init>
	sprintf(str,"%d iteration, %u samples, 1,000,000 ticks per second\r\n", N, ECG_samples);
 8002da8:	f640 436a 	movw	r3, #3178	; 0xc6a
 8002dac:	2264      	movs	r2, #100	; 0x64
 8002dae:	4641      	mov	r1, r8
 8002db0:	4638      	mov	r0, r7
 8002db2:	f005 fd47 	bl	8008844 <siprintf>
	while (str[end]!='\0')
 8002db6:	4a51      	ldr	r2, [pc, #324]	; (8002efc <main+0x24c>)
 8002db8:	2300      	movs	r3, #0
 8002dba:	e002      	b.n	8002dc2 <main+0x112>
		if (end == 250)
 8002dbc:	2bfa      	cmp	r3, #250	; 0xfa
 8002dbe:	f000 808b 	beq.w	8002ed8 <main+0x228>
	while (str[end]!='\0')
 8002dc2:	f812 0b01 	ldrb.w	r0, [r2], #1
 8002dc6:	b299      	uxth	r1, r3
		if (end == 250)
 8002dc8:	3301      	adds	r3, #1
	while (str[end]!='\0')
 8002dca:	2800      	cmp	r0, #0
 8002dcc:	d1f6      	bne.n	8002dbc <main+0x10c>
	while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8002dce:	4638      	mov	r0, r7
 8002dd0:	f004 fbae 	bl	8007530 <CDC_Transmit_FS>
 8002dd4:	2800      	cmp	r0, #0
 8002dd6:	d1ee      	bne.n	8002db6 <main+0x106>
	TIM2->CNT = 0;
 8002dd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ddc:	4e48      	ldr	r6, [pc, #288]	; (8002f00 <main+0x250>)
 8002dde:	6258      	str	r0, [r3, #36]	; 0x24
 8002de0:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002de4:	4c46      	ldr	r4, [pc, #280]	; (8002f00 <main+0x250>)
			arm_PT_ST (ECG[count]);
 8002de6:	f934 0f02 	ldrsh.w	r0, [r4, #2]!
 8002dea:	f7fe fc51 	bl	8001690 <arm_PT_ST>
		}while (count < ECG_samples);
 8002dee:	42ac      	cmp	r4, r5
 8002df0:	d1f9      	bne.n	8002de6 <main+0x136>
	for (uint16_t i = 0; i < N; i++)
 8002df2:	f109 39ff 	add.w	r9, r9, #4294967295
 8002df6:	fa1f f989 	uxth.w	r9, r9
 8002dfa:	f1b9 0f00 	cmp.w	r9, #0
 8002dfe:	d1f1      	bne.n	8002de4 <main+0x134>
	computationTime = TIM2->CNT;
 8002e00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	sprintf(str,"ARM CMSIS-DSP: %u ticks\r\n", computationTime);
 8002e04:	493f      	ldr	r1, [pc, #252]	; (8002f04 <main+0x254>)
	computationTime = TIM2->CNT;
 8002e06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	sprintf(str,"ARM CMSIS-DSP: %u ticks\r\n", computationTime);
 8002e08:	4638      	mov	r0, r7
 8002e0a:	f005 fd1b 	bl	8008844 <siprintf>
	while (str[end]!='\0')
 8002e0e:	463a      	mov	r2, r7
 8002e10:	2300      	movs	r3, #0
 8002e12:	e001      	b.n	8002e18 <main+0x168>
		if (end == 250)
 8002e14:	2bfa      	cmp	r3, #250	; 0xfa
 8002e16:	d061      	beq.n	8002edc <main+0x22c>
	while (str[end]!='\0')
 8002e18:	f812 0b01 	ldrb.w	r0, [r2], #1
 8002e1c:	b299      	uxth	r1, r3
		if (end == 250)
 8002e1e:	3301      	adds	r3, #1
	while (str[end]!='\0')
 8002e20:	2800      	cmp	r0, #0
 8002e22:	d1f7      	bne.n	8002e14 <main+0x164>
	while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8002e24:	4638      	mov	r0, r7
 8002e26:	f004 fb83 	bl	8007530 <CDC_Transmit_FS>
 8002e2a:	2800      	cmp	r0, #0
 8002e2c:	d1ef      	bne.n	8002e0e <main+0x15e>
	TIM2->CNT = 0;
 8002e2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e32:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002e36:	6258      	str	r0, [r3, #36]	; 0x24
 8002e38:	4634      	mov	r4, r6
			PT_StateMachine (ECG[count]);
 8002e3a:	f934 0f02 	ldrsh.w	r0, [r4, #2]!
 8002e3e:	f7fe f947 	bl	80010d0 <PT_StateMachine>
			}while (count < ECG_samples);
 8002e42:	42ac      	cmp	r4, r5
 8002e44:	d1f9      	bne.n	8002e3a <main+0x18a>
	for (uint16_t i = 0; i < N; i++)
 8002e46:	f109 39ff 	add.w	r9, r9, #4294967295
 8002e4a:	fa1f f989 	uxth.w	r9, r9
 8002e4e:	f1b9 0f00 	cmp.w	r9, #0
 8002e52:	d1f1      	bne.n	8002e38 <main+0x188>
	    computationTime = TIM2->CNT;
 8002e54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	 	sprintf(str,"hooman650: %u ticks\r\n", computationTime);
 8002e58:	492b      	ldr	r1, [pc, #172]	; (8002f08 <main+0x258>)
	    computationTime = TIM2->CNT;
 8002e5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	 	sprintf(str,"hooman650: %u ticks\r\n", computationTime);
 8002e5c:	4638      	mov	r0, r7
 8002e5e:	f005 fcf1 	bl	8008844 <siprintf>
	while (str[end]!='\0')
 8002e62:	463a      	mov	r2, r7
 8002e64:	2300      	movs	r3, #0
 8002e66:	e001      	b.n	8002e6c <main+0x1bc>
		if (end == 250)
 8002e68:	2bfa      	cmp	r3, #250	; 0xfa
 8002e6a:	d039      	beq.n	8002ee0 <main+0x230>
	while (str[end]!='\0')
 8002e6c:	f812 0b01 	ldrb.w	r0, [r2], #1
 8002e70:	b299      	uxth	r1, r3
		if (end == 250)
 8002e72:	3301      	adds	r3, #1
	while (str[end]!='\0')
 8002e74:	2800      	cmp	r0, #0
 8002e76:	d1f7      	bne.n	8002e68 <main+0x1b8>
	 	while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8002e78:	4638      	mov	r0, r7
 8002e7a:	f004 fb59 	bl	8007530 <CDC_Transmit_FS>
 8002e7e:	2800      	cmp	r0, #0
 8002e80:	d1ef      	bne.n	8002e62 <main+0x1b2>
	 TIM2->CNT = 0;
 8002e82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e86:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002e8a:	6258      	str	r0, [r3, #36]	; 0x24
 8002e8c:	4634      	mov	r4, r6
			Rafael_PanTompkins (ECG[count]);
 8002e8e:	f934 0f02 	ldrsh.w	r0, [r4, #2]!
 8002e92:	f7fe fef1 	bl	8001c78 <Rafael_PanTompkins>
			}while (count < ECG_samples);
 8002e96:	42ac      	cmp	r4, r5
 8002e98:	d1f9      	bne.n	8002e8e <main+0x1de>
	 for (uint16_t i = 0; i < N; i++)
 8002e9a:	f109 39ff 	add.w	r9, r9, #4294967295
 8002e9e:	fa1f f989 	uxth.w	r9, r9
 8002ea2:	f1b9 0f00 	cmp.w	r9, #0
 8002ea6:	d1f1      	bne.n	8002e8c <main+0x1dc>
		computationTime = TIM2->CNT;
 8002ea8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
		sprintf(str,"Rafael: %u ticks\r\n", computationTime);
 8002eac:	4917      	ldr	r1, [pc, #92]	; (8002f0c <main+0x25c>)
		computationTime = TIM2->CNT;
 8002eae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
		sprintf(str,"Rafael: %u ticks\r\n", computationTime);
 8002eb0:	4638      	mov	r0, r7
 8002eb2:	f005 fcc7 	bl	8008844 <siprintf>
	while (str[end]!='\0')
 8002eb6:	463a      	mov	r2, r7
 8002eb8:	2300      	movs	r3, #0
 8002eba:	e001      	b.n	8002ec0 <main+0x210>
		if (end == 250)
 8002ebc:	2bfa      	cmp	r3, #250	; 0xfa
 8002ebe:	d011      	beq.n	8002ee4 <main+0x234>
	while (str[end]!='\0')
 8002ec0:	f812 0b01 	ldrb.w	r0, [r2], #1
 8002ec4:	b299      	uxth	r1, r3
		if (end == 250)
 8002ec6:	3301      	adds	r3, #1
	while (str[end]!='\0')
 8002ec8:	2800      	cmp	r0, #0
 8002eca:	d1f7      	bne.n	8002ebc <main+0x20c>
		while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8002ecc:	4638      	mov	r0, r7
 8002ece:	f004 fb2f 	bl	8007530 <CDC_Transmit_FS>
 8002ed2:	2800      	cmp	r0, #0
 8002ed4:	d1ef      	bne.n	8002eb6 <main+0x206>
 8002ed6:	e761      	b.n	8002d9c <main+0xec>
 8002ed8:	4619      	mov	r1, r3
 8002eda:	e778      	b.n	8002dce <main+0x11e>
 8002edc:	4619      	mov	r1, r3
 8002ede:	e7a1      	b.n	8002e24 <main+0x174>
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	e7c9      	b.n	8002e78 <main+0x1c8>
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	e7f1      	b.n	8002ecc <main+0x21c>
 8002ee8:	20002be0 	.word	0x20002be0
 8002eec:	40005400 	.word	0x40005400
 8002ef0:	10707dbc 	.word	0x10707dbc
 8002ef4:	20002c34 	.word	0x20002c34
 8002ef8:	0800dd8e 	.word	0x0800dd8e
 8002efc:	20002c80 	.word	0x20002c80
 8002f00:	0800c4ba 	.word	0x0800c4ba
 8002f04:	0800c474 	.word	0x0800c474
 8002f08:	0800c490 	.word	0x0800c490
 8002f0c:	0800c4a8 	.word	0x0800c4a8
 8002f10:	0800c43c 	.word	0x0800c43c

08002f14 <Error_Handler>:
 8002f14:	b672      	cpsid	i
  while (1)
 8002f16:	e7fe      	b.n	8002f16 <Error_Handler+0x2>

08002f18 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop

08002f1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f1c:	b510      	push	{r4, lr}
 8002f1e:	4604      	mov	r4, r0
 8002f20:	b09c      	sub	sp, #112	; 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f22:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f24:	2250      	movs	r2, #80	; 0x50
 8002f26:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f28:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8002f2c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8002f30:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f32:	f004 fdff 	bl	8007b34 <memset>
  if(hi2c->Instance==I2C1)
 8002f36:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <HAL_I2C_MspInit+0x88>)
 8002f38:	6822      	ldr	r2, [r4, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d001      	beq.n	8002f42 <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f3e:	b01c      	add	sp, #112	; 0x70
 8002f40:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002f42:	2204      	movs	r2, #4
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002f44:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f48:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002f4a:	9208      	str	r2, [sp, #32]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002f4c:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f4e:	f002 f89d 	bl	800508c <HAL_RCCEx_PeriphCLKConfig>
 8002f52:	bb20      	cbnz	r0, 8002f9e <HAL_I2C_MspInit+0x82>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002f54:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f58:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002f5c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f5e:	4812      	ldr	r0, [pc, #72]	; (8002fa8 <HAL_I2C_MspInit+0x8c>)
 8002f60:	f043 0302 	orr.w	r3, r3, #2
 8002f64:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002f66:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f6e:	2312      	movs	r3, #18
 8002f70:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002f74:	2200      	movs	r2, #0
 8002f76:	2300      	movs	r3, #0
 8002f78:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f7c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f7e:	2304      	movs	r3, #4
 8002f80:	9306      	str	r3, [sp, #24]
  (void)tmpreg;
 8002f82:	9a01      	ldr	r2, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f84:	f000 f9d0 	bl	8003328 <HAL_GPIO_Init>
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002f88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f8e:	65a3      	str	r3, [r4, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002f90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f96:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8002f98:	9b00      	ldr	r3, [sp, #0]
}
 8002f9a:	b01c      	add	sp, #112	; 0x70
 8002f9c:	bd10      	pop	{r4, pc}
      Error_Handler();
 8002f9e:	f7ff ffb9 	bl	8002f14 <Error_Handler>
 8002fa2:	e7d7      	b.n	8002f54 <HAL_I2C_MspInit+0x38>
 8002fa4:	40005400 	.word	0x40005400
 8002fa8:	48000400 	.word	0x48000400

08002fac <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8002fac:	6803      	ldr	r3, [r0, #0]
 8002fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb2:	d000      	beq.n	8002fb6 <HAL_TIM_Base_MspInit+0xa>
 8002fb4:	4770      	bx	lr
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8002fba:	b082      	sub	sp, #8
 8002fbc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002fbe:	f042 0201 	orr.w	r2, r2, #1
 8002fc2:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002fcc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002fce:	b002      	add	sp, #8
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop

08002fd4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fd4:	e7fe      	b.n	8002fd4 <NMI_Handler>
 8002fd6:	bf00      	nop

08002fd8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fd8:	e7fe      	b.n	8002fd8 <HardFault_Handler>
 8002fda:	bf00      	nop

08002fdc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fdc:	e7fe      	b.n	8002fdc <MemManage_Handler>
 8002fde:	bf00      	nop

08002fe0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fe0:	e7fe      	b.n	8002fe0 <BusFault_Handler>
 8002fe2:	bf00      	nop

08002fe4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fe4:	e7fe      	b.n	8002fe4 <UsageFault_Handler>
 8002fe6:	bf00      	nop

08002fe8 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop

08002fec <DebugMon_Handler>:
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop

08002ff0 <PendSV_Handler>:
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop

08002ff4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ff4:	f000 b908 	b.w	8003208 <HAL_IncTick>

08002ff8 <USB_LP_IRQHandler>:
void USB_LP_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002ff8:	4801      	ldr	r0, [pc, #4]	; (8003000 <USB_LP_IRQHandler+0x8>)
 8002ffa:	f000 bb9b 	b.w	8003734 <HAL_PCD_IRQHandler>
 8002ffe:	bf00      	nop
 8003000:	20004268 	.word	0x20004268

08003004 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8003004:	2001      	movs	r0, #1
 8003006:	4770      	bx	lr

08003008 <_kill>:

int _kill(int pid, int sig)
{
 8003008:	b508      	push	{r3, lr}
	errno = EINVAL;
 800300a:	f004 fd41 	bl	8007a90 <__errno>
 800300e:	2316      	movs	r3, #22
 8003010:	6003      	str	r3, [r0, #0]
	return -1;
}
 8003012:	f04f 30ff 	mov.w	r0, #4294967295
 8003016:	bd08      	pop	{r3, pc}

08003018 <_exit>:

void _exit (int status)
{
 8003018:	b508      	push	{r3, lr}
	errno = EINVAL;
 800301a:	f004 fd39 	bl	8007a90 <__errno>
 800301e:	2316      	movs	r3, #22
 8003020:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8003022:	e7fe      	b.n	8003022 <_exit+0xa>

08003024 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003024:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003026:	1e16      	subs	r6, r2, #0
 8003028:	dd07      	ble.n	800303a <_read+0x16>
 800302a:	460c      	mov	r4, r1
 800302c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800302e:	f3af 8000 	nop.w
 8003032:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003036:	42a5      	cmp	r5, r4
 8003038:	d1f9      	bne.n	800302e <_read+0xa>
	}

return len;
}
 800303a:	4630      	mov	r0, r6
 800303c:	bd70      	pop	{r4, r5, r6, pc}
 800303e:	bf00      	nop

08003040 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003040:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003042:	1e16      	subs	r6, r2, #0
 8003044:	dd07      	ble.n	8003056 <_write+0x16>
 8003046:	460c      	mov	r4, r1
 8003048:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800304a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800304e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003052:	42ac      	cmp	r4, r5
 8003054:	d1f9      	bne.n	800304a <_write+0xa>
	}
	return len;
}
 8003056:	4630      	mov	r0, r6
 8003058:	bd70      	pop	{r4, r5, r6, pc}
 800305a:	bf00      	nop

0800305c <_close>:

int _close(int file)
{
	return -1;
}
 800305c:	f04f 30ff 	mov.w	r0, #4294967295
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop

08003064 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003068:	604b      	str	r3, [r1, #4]
	return 0;
}
 800306a:	2000      	movs	r0, #0
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop

08003070 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003070:	2001      	movs	r0, #1
 8003072:	4770      	bx	lr

08003074 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003074:	2000      	movs	r0, #0
 8003076:	4770      	bx	lr

08003078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003078:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800307a:	4c0c      	ldr	r4, [pc, #48]	; (80030ac <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800307c:	4b0c      	ldr	r3, [pc, #48]	; (80030b0 <_sbrk+0x38>)
 800307e:	490d      	ldr	r1, [pc, #52]	; (80030b4 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8003080:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003082:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 8003084:	b12a      	cbz	r2, 8003092 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003086:	4410      	add	r0, r2
 8003088:	4288      	cmp	r0, r1
 800308a:	d807      	bhi.n	800309c <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800308c:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 800308e:	4610      	mov	r0, r2
 8003090:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8003092:	4a09      	ldr	r2, [pc, #36]	; (80030b8 <_sbrk+0x40>)
 8003094:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8003096:	4410      	add	r0, r2
 8003098:	4288      	cmp	r0, r1
 800309a:	d9f7      	bls.n	800308c <_sbrk+0x14>
    errno = ENOMEM;
 800309c:	f004 fcf8 	bl	8007a90 <__errno>
 80030a0:	230c      	movs	r3, #12
    return (void *)-1;
 80030a2:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 80030a6:	6003      	str	r3, [r0, #0]
}
 80030a8:	4610      	mov	r0, r2
 80030aa:	bd10      	pop	{r4, pc}
 80030ac:	20002d7c 	.word	0x20002d7c
 80030b0:	20030000 	.word	0x20030000
 80030b4:	00000400 	.word	0x00000400
 80030b8:	20004790 	.word	0x20004790

080030bc <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80030bc:	4914      	ldr	r1, [pc, #80]	; (8003110 <SystemInit+0x54>)
 80030be:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80030c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80030c6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80030ca:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_MSION;
 80030ce:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80030d0:	4a10      	ldr	r2, [pc, #64]	; (8003114 <SystemInit+0x58>)
  RCC->CFGR = 0x00070000U;
 80030d2:	f44f 20e0 	mov.w	r0, #458752	; 0x70000
  RCC->CR |= RCC_CR_MSION;
 80030d6:	f041 0101 	orr.w	r1, r1, #1
 80030da:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00070000U;
 80030dc:	6098      	str	r0, [r3, #8]
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80030de:	6818      	ldr	r0, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80030e0:	490d      	ldr	r1, [pc, #52]	; (8003118 <SystemInit+0x5c>)
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80030e2:	4002      	ands	r2, r0
 80030e4:	601a      	str	r2, [r3, #0]
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80030e6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80030ea:	f022 0205 	bic.w	r2, r2, #5
 80030ee:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80030f2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80030f6:	f022 0201 	bic.w	r2, r2, #1
 80030fa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  RCC->PLLCFGR = 0x22041000U;
 80030fe:	60d9      	str	r1, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003100:	6119      	str	r1, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003102:	681a      	ldr	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003104:	2100      	movs	r1, #0
  RCC->CR &= 0xFFFBFFFFU;
 8003106:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800310a:	601a      	str	r2, [r3, #0]
  RCC->CIER = 0x00000000;
 800310c:	6199      	str	r1, [r3, #24]
}
 800310e:	4770      	bx	lr
 8003110:	e000ed00 	.word	0xe000ed00
 8003114:	faf6fefb 	.word	0xfaf6fefb
 8003118:	22041000 	.word	0x22041000

0800311c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800311c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800311e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003120:	3304      	adds	r3, #4

08003122 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003122:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003124:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003126:	d3f9      	bcc.n	800311c <CopyDataInit>
  bx lr
 8003128:	4770      	bx	lr

0800312a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800312a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800312c:	3004      	adds	r0, #4

0800312e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800312e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003130:	d3fb      	bcc.n	800312a <FillZerobss>
  bx lr
 8003132:	4770      	bx	lr

08003134 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003134:	480c      	ldr	r0, [pc, #48]	; (8003168 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8003136:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003138:	f7ff ffc0 	bl	80030bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800313c:	480b      	ldr	r0, [pc, #44]	; (800316c <LoopForever+0x8>)
 800313e:	490c      	ldr	r1, [pc, #48]	; (8003170 <LoopForever+0xc>)
 8003140:	4a0c      	ldr	r2, [pc, #48]	; (8003174 <LoopForever+0x10>)
 8003142:	2300      	movs	r3, #0
 8003144:	f7ff ffed 	bl	8003122 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003148:	480b      	ldr	r0, [pc, #44]	; (8003178 <LoopForever+0x14>)
 800314a:	490c      	ldr	r1, [pc, #48]	; (800317c <LoopForever+0x18>)
 800314c:	2300      	movs	r3, #0
 800314e:	f7ff ffee 	bl	800312e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003152:	480b      	ldr	r0, [pc, #44]	; (8003180 <LoopForever+0x1c>)
 8003154:	490b      	ldr	r1, [pc, #44]	; (8003184 <LoopForever+0x20>)
 8003156:	2300      	movs	r3, #0
 8003158:	f7ff ffe9 	bl	800312e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800315c:	f004 fc9e 	bl	8007a9c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8003160:	f7ff fda6 	bl	8002cb0 <main>

08003164 <LoopForever>:

LoopForever:
  b LoopForever
 8003164:	e7fe      	b.n	8003164 <LoopForever>
 8003166:	0000      	.short	0x0000
  ldr   r0, =_estack
 8003168:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800316c:	20000004 	.word	0x20000004
 8003170:	200002dc 	.word	0x200002dc
 8003174:	0800e30c 	.word	0x0800e30c
  INIT_BSS _sbss, _ebss
 8003178:	200002e0 	.word	0x200002e0
 800317c:	2000478c 	.word	0x2000478c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003180:	20030000 	.word	0x20030000
 8003184:	20030000 	.word	0x20030000

08003188 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003188:	e7fe      	b.n	8003188 <ADC1_IRQHandler>
	...

0800318c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800318c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0U)
 800318e:	4c10      	ldr	r4, [pc, #64]	; (80031d0 <HAL_InitTick+0x44>)
 8003190:	7823      	ldrb	r3, [r4, #0]
 8003192:	b90b      	cbnz	r3, 8003198 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8003194:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8003196:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003198:	4605      	mov	r5, r0
 800319a:	f001 ff3f 	bl	800501c <HAL_RCC_GetHCLKFreq>
 800319e:	7822      	ldrb	r2, [r4, #0]
 80031a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80031a8:	fbb0 f0f3 	udiv	r0, r0, r3
 80031ac:	f000 f8a2 	bl	80032f4 <HAL_SYSTICK_Config>
 80031b0:	4604      	mov	r4, r0
 80031b2:	2800      	cmp	r0, #0
 80031b4:	d1ee      	bne.n	8003194 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031b6:	2d0f      	cmp	r5, #15
 80031b8:	d8ec      	bhi.n	8003194 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031ba:	4602      	mov	r2, r0
 80031bc:	4629      	mov	r1, r5
 80031be:	f04f 30ff 	mov.w	r0, #4294967295
 80031c2:	f000 f84b 	bl	800325c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031c6:	4b03      	ldr	r3, [pc, #12]	; (80031d4 <HAL_InitTick+0x48>)
 80031c8:	4620      	mov	r0, r4
 80031ca:	601d      	str	r5, [r3, #0]
}
 80031cc:	bd38      	pop	{r3, r4, r5, pc}
 80031ce:	bf00      	nop
 80031d0:	2000000c 	.word	0x2000000c
 80031d4:	20000010 	.word	0x20000010

080031d8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031d8:	4a0a      	ldr	r2, [pc, #40]	; (8003204 <HAL_Init+0x2c>)
 80031da:	6813      	ldr	r3, [r2, #0]
 80031dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80031e0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031e2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031e4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031e6:	f000 f827 	bl	8003238 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031ea:	200f      	movs	r0, #15
 80031ec:	f7ff ffce 	bl	800318c <HAL_InitTick>
 80031f0:	b110      	cbz	r0, 80031f8 <HAL_Init+0x20>
    status = HAL_ERROR;
 80031f2:	2401      	movs	r4, #1
}
 80031f4:	4620      	mov	r0, r4
 80031f6:	bd10      	pop	{r4, pc}
 80031f8:	4604      	mov	r4, r0
    HAL_MspInit();
 80031fa:	f7ff fe8d 	bl	8002f18 <HAL_MspInit>
}
 80031fe:	4620      	mov	r0, r4
 8003200:	bd10      	pop	{r4, pc}
 8003202:	bf00      	nop
 8003204:	58004000 	.word	0x58004000

08003208 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003208:	4a03      	ldr	r2, [pc, #12]	; (8003218 <HAL_IncTick+0x10>)
 800320a:	4b04      	ldr	r3, [pc, #16]	; (800321c <HAL_IncTick+0x14>)
 800320c:	6811      	ldr	r1, [r2, #0]
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	440b      	add	r3, r1
 8003212:	6013      	str	r3, [r2, #0]
}
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	20002d80 	.word	0x20002d80
 800321c:	2000000c 	.word	0x2000000c

08003220 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003220:	4b01      	ldr	r3, [pc, #4]	; (8003228 <HAL_GetTick+0x8>)
 8003222:	6818      	ldr	r0, [r3, #0]
}
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	20002d80 	.word	0x20002d80

0800322c <HAL_GetTickPrio>:
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
 800322c:	4b01      	ldr	r3, [pc, #4]	; (8003234 <HAL_GetTickPrio+0x8>)
}
 800322e:	6818      	ldr	r0, [r3, #0]
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	20000010 	.word	0x20000010

08003238 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003238:	4907      	ldr	r1, [pc, #28]	; (8003258 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800323a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800323c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800323e:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003242:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003246:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003248:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800324a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800324e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003252:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	e000ed00 	.word	0xe000ed00

0800325c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800325c:	4b1c      	ldr	r3, [pc, #112]	; (80032d0 <HAL_NVIC_SetPriority+0x74>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003264:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003266:	f1c3 0e07 	rsb	lr, r3, #7
 800326a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800326e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003272:	bf28      	it	cs
 8003274:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003278:	f1bc 0f06 	cmp.w	ip, #6
 800327c:	d91b      	bls.n	80032b6 <HAL_NVIC_SetPriority+0x5a>
 800327e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003280:	f04f 3cff 	mov.w	ip, #4294967295
 8003284:	fa0c fc03 	lsl.w	ip, ip, r3
 8003288:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800328c:	f04f 3cff 	mov.w	ip, #4294967295
 8003290:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003294:	ea21 010c 	bic.w	r1, r1, ip
 8003298:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800329a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800329c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80032a0:	db0c      	blt.n	80032bc <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80032a6:	0109      	lsls	r1, r1, #4
 80032a8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80032ac:	b2c9      	uxtb	r1, r1
 80032ae:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80032b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80032b6:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032b8:	4613      	mov	r3, r2
 80032ba:	e7e7      	b.n	800328c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032bc:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <HAL_NVIC_SetPriority+0x78>)
 80032be:	f000 000f 	and.w	r0, r0, #15
 80032c2:	0109      	lsls	r1, r1, #4
 80032c4:	4403      	add	r3, r0
 80032c6:	b2c9      	uxtb	r1, r1
 80032c8:	7619      	strb	r1, [r3, #24]
 80032ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80032ce:	bf00      	nop
 80032d0:	e000ed00 	.word	0xe000ed00
 80032d4:	e000ecfc 	.word	0xe000ecfc

080032d8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80032d8:	2800      	cmp	r0, #0
 80032da:	db08      	blt.n	80032ee <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032dc:	4a04      	ldr	r2, [pc, #16]	; (80032f0 <HAL_NVIC_EnableIRQ+0x18>)
 80032de:	0941      	lsrs	r1, r0, #5
 80032e0:	2301      	movs	r3, #1
 80032e2:	f000 001f 	and.w	r0, r0, #31
 80032e6:	fa03 f000 	lsl.w	r0, r3, r0
 80032ea:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80032ee:	4770      	bx	lr
 80032f0:	e000e100 	.word	0xe000e100

080032f4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032f4:	3801      	subs	r0, #1
 80032f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80032fa:	d210      	bcs.n	800331e <HAL_SYSTICK_Config+0x2a>
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032fc:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032fe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003302:	4c08      	ldr	r4, [pc, #32]	; (8003324 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003304:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003306:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800330a:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800330e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003310:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003312:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003314:	619a      	str	r2, [r3, #24]
  return SysTick_Config(TicksNumb);
}
 8003316:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800331a:	6119      	str	r1, [r3, #16]
 800331c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800331e:	2001      	movs	r0, #1
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	e000ed00 	.word	0xe000ed00

08003328 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800332c:	680c      	ldr	r4, [r1, #0]
{
 800332e:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003330:	2c00      	cmp	r4, #0
 8003332:	d06e      	beq.n	8003412 <HAL_GPIO_Init+0xea>
 8003334:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003338:	4e65      	ldr	r6, [pc, #404]	; (80034d0 <HAL_GPIO_Init+0x1a8>)
  uint32_t position = 0x00u;
 800333a:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800333c:	f04f 0b01 	mov.w	fp, #1
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003340:	468e      	mov	lr, r1
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003342:	fa0b f703 	lsl.w	r7, fp, r3
    if (iocurrent != 0x00u)
 8003346:	ea17 0a04 	ands.w	sl, r7, r4
 800334a:	d05c      	beq.n	8003406 <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800334c:	f8de 1004 	ldr.w	r1, [lr, #4]
 8003350:	f001 0203 	and.w	r2, r1, #3
 8003354:	1e55      	subs	r5, r2, #1
 8003356:	2d01      	cmp	r5, #1
 8003358:	d95e      	bls.n	8003418 <HAL_GPIO_Init+0xf0>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800335a:	2a03      	cmp	r2, #3
 800335c:	f040 80a2 	bne.w	80034a4 <HAL_GPIO_Init+0x17c>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003360:	fa02 f20c 	lsl.w	r2, r2, ip
 8003364:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 8003366:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003368:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800336a:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800336c:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      GPIOx->MODER = temp;
 8003370:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003372:	d048      	beq.n	8003406 <HAL_GPIO_Init+0xde>
        temp = SYSCFG->EXTICR[position >> 2u];
 8003374:	f023 0203 	bic.w	r2, r3, #3
 8003378:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800337c:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003380:	f003 0503 	and.w	r5, r3, #3
 8003384:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp = SYSCFG->EXTICR[position >> 2u];
 8003388:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800338a:	250f      	movs	r5, #15
 800338c:	fa05 f809 	lsl.w	r8, r5, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003390:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003394:	ea27 0708 	bic.w	r7, r7, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003398:	d012      	beq.n	80033c0 <HAL_GPIO_Init+0x98>
 800339a:	4d4e      	ldr	r5, [pc, #312]	; (80034d4 <HAL_GPIO_Init+0x1ac>)
 800339c:	42a8      	cmp	r0, r5
 800339e:	f000 808c 	beq.w	80034ba <HAL_GPIO_Init+0x192>
 80033a2:	4d4d      	ldr	r5, [pc, #308]	; (80034d8 <HAL_GPIO_Init+0x1b0>)
 80033a4:	42a8      	cmp	r0, r5
 80033a6:	f000 808c 	beq.w	80034c2 <HAL_GPIO_Init+0x19a>
 80033aa:	4d4c      	ldr	r5, [pc, #304]	; (80034dc <HAL_GPIO_Init+0x1b4>)
 80033ac:	42a8      	cmp	r0, r5
 80033ae:	d07e      	beq.n	80034ae <HAL_GPIO_Init+0x186>
 80033b0:	4d4b      	ldr	r5, [pc, #300]	; (80034e0 <HAL_GPIO_Init+0x1b8>)
 80033b2:	42a8      	cmp	r0, r5
 80033b4:	bf0c      	ite	eq
 80033b6:	2504      	moveq	r5, #4
 80033b8:	2507      	movne	r5, #7
 80033ba:	fa05 f509 	lsl.w	r5, r5, r9
 80033be:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033c0:	6097      	str	r7, [r2, #8]
        temp = EXTI->RTSR1;
 80033c2:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033c4:	02cd      	lsls	r5, r1, #11
        temp &= ~(iocurrent);
 80033c6:	ea6f 070a 	mvn.w	r7, sl
 80033ca:	bf54      	ite	pl
 80033cc:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 80033ce:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->RTSR1 = temp;
 80033d2:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
 80033d4:	6875      	ldr	r5, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033d6:	028a      	lsls	r2, r1, #10
        temp &= ~(iocurrent);
 80033d8:	bf54      	ite	pl
 80033da:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80033dc:	ea4a 0505 	orrmi.w	r5, sl, r5
        }
        EXTI->FTSR1 = temp;
 80033e0:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80033e2:	f8d6 5080 	ldr.w	r5, [r6, #128]	; 0x80
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033e6:	03ca      	lsls	r2, r1, #15
        temp &= ~(iocurrent);
 80033e8:	bf54      	ite	pl
 80033ea:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80033ec:	ea4a 0505 	orrmi.w	r5, sl, r5
        }
        EXTI->IMR1 = temp;
 80033f0:	f8c6 5080 	str.w	r5, [r6, #128]	; 0x80

        temp = EXTI->EMR1;
 80033f4:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033f8:	0389      	lsls	r1, r1, #14
        temp &= ~(iocurrent);
 80033fa:	bf54      	ite	pl
 80033fc:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 80033fe:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->EMR1 = temp;
 8003402:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
      }
    }

    position++;
 8003406:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003408:	fa34 f203 	lsrs.w	r2, r4, r3
 800340c:	f10c 0c02 	add.w	ip, ip, #2
 8003410:	d197      	bne.n	8003342 <HAL_GPIO_Init+0x1a>
  }
}
 8003412:	b003      	add	sp, #12
 8003414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8003418:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800341c:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003420:	f04f 0803 	mov.w	r8, #3
 8003424:	fa08 f80c 	lsl.w	r8, r8, ip
 8003428:	ea29 0908 	bic.w	r9, r9, r8
        temp |= (GPIO_Init->Speed << (position * 2u));
 800342c:	fa05 f50c 	lsl.w	r5, r5, ip
 8003430:	ea45 0509 	orr.w	r5, r5, r9
        GPIOx->OSPEEDR = temp;
 8003434:	6085      	str	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003436:	ea6f 0508 	mvn.w	r5, r8
        temp = GPIOx->OTYPER;
 800343a:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800343e:	ea28 0807 	bic.w	r8, r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003442:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8003446:	409f      	lsls	r7, r3
 8003448:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 800344c:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800344e:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003450:	ea07 0805 	and.w	r8, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003454:	f8de 7008 	ldr.w	r7, [lr, #8]
 8003458:	fa07 f70c 	lsl.w	r7, r7, ip
 800345c:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003460:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8003462:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003464:	fa02 f20c 	lsl.w	r2, r2, ip
 8003468:	f47f af7d 	bne.w	8003366 <HAL_GPIO_Init+0x3e>
        temp = GPIOx->AFR[position >> 3u];
 800346c:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8003470:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003474:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8003478:	f8d9 7020 	ldr.w	r7, [r9, #32]
 800347c:	9700      	str	r7, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800347e:	f8de 7010 	ldr.w	r7, [lr, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003482:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003486:	fa07 f708 	lsl.w	r7, r7, r8
 800348a:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800348c:	270f      	movs	r7, #15
 800348e:	fa07 f808 	lsl.w	r8, r7, r8
 8003492:	9f00      	ldr	r7, [sp, #0]
 8003494:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003498:	9f01      	ldr	r7, [sp, #4]
 800349a:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3u] = temp;
 800349e:	f8c9 7020 	str.w	r7, [r9, #32]
 80034a2:	e760      	b.n	8003366 <HAL_GPIO_Init+0x3e>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034a4:	2503      	movs	r5, #3
 80034a6:	fa05 f50c 	lsl.w	r5, r5, ip
 80034aa:	43ed      	mvns	r5, r5
 80034ac:	e7cf      	b.n	800344e <HAL_GPIO_Init+0x126>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034ae:	f04f 0803 	mov.w	r8, #3
 80034b2:	fa08 f509 	lsl.w	r5, r8, r9
 80034b6:	432f      	orrs	r7, r5
 80034b8:	e782      	b.n	80033c0 <HAL_GPIO_Init+0x98>
 80034ba:	fa0b f509 	lsl.w	r5, fp, r9
 80034be:	432f      	orrs	r7, r5
 80034c0:	e77e      	b.n	80033c0 <HAL_GPIO_Init+0x98>
 80034c2:	f04f 0802 	mov.w	r8, #2
 80034c6:	fa08 f509 	lsl.w	r5, r8, r9
 80034ca:	432f      	orrs	r7, r5
 80034cc:	e778      	b.n	80033c0 <HAL_GPIO_Init+0x98>
 80034ce:	bf00      	nop
 80034d0:	58000800 	.word	0x58000800
 80034d4:	48000400 	.word	0x48000400
 80034d8:	48000800 	.word	0x48000800
 80034dc:	48000c00 	.word	0x48000c00
 80034e0:	48001000 	.word	0x48001000

080034e4 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034e4:	2800      	cmp	r0, #0
 80034e6:	d04f      	beq.n	8003588 <HAL_I2C_Init+0xa4>
{
 80034e8:	b510      	push	{r4, lr}
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034ea:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80034ee:	4604      	mov	r4, r0
 80034f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d042      	beq.n	800357e <HAL_I2C_Init+0x9a>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034f8:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80034fa:	2224      	movs	r2, #36	; 0x24
 80034fc:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003500:	6819      	ldr	r1, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003502:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 8003504:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003508:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 800350c:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800350e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003510:	689a      	ldr	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003512:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003514:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003518:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800351a:	609a      	str	r2, [r3, #8]
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800351c:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800351e:	d02a      	beq.n	8003576 <HAL_I2C_Init+0x92>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003520:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003524:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003526:	609a      	str	r2, [r3, #8]
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003528:	bf04      	itt	eq
 800352a:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800352e:	605a      	streq	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003530:	6859      	ldr	r1, [r3, #4]
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003532:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003534:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8003538:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800353c:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800353e:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003540:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003542:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003544:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003546:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800354a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800354e:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003550:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003552:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003554:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003556:	4301      	orrs	r1, r0
 8003558:	6019      	str	r1, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800355a:	6819      	ldr	r1, [r3, #0]
 800355c:	f041 0101 	orr.w	r1, r1, #1
 8003560:	6019      	str	r1, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003562:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8003564:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003566:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003568:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800356c:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800356e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42

  return HAL_OK;
 8003572:	4610      	mov	r0, r2
}
 8003574:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003576:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800357a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800357c:	e7d8      	b.n	8003530 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 800357e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003582:	f7ff fccb 	bl	8002f1c <HAL_I2C_MspInit>
 8003586:	e7b7      	b.n	80034f8 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8003588:	2001      	movs	r0, #1
}
 800358a:	4770      	bx	lr

0800358c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800358c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003590:	2a20      	cmp	r2, #32
 8003592:	d123      	bne.n	80035dc <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8003594:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003598:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800359c:	2a01      	cmp	r2, #1
 800359e:	4603      	mov	r3, r0
 80035a0:	d01c      	beq.n	80035dc <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035a2:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80035a4:	2024      	movs	r0, #36	; 0x24
{
 80035a6:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 80035a8:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80035ac:	6810      	ldr	r0, [r2, #0]
 80035ae:	f020 0001 	bic.w	r0, r0, #1
 80035b2:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035b4:	6810      	ldr	r0, [r2, #0]
 80035b6:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 80035ba:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035bc:	6810      	ldr	r0, [r2, #0]
 80035be:	4301      	orrs	r1, r0
 80035c0:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035c2:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035c4:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 80035c8:	f041 0101 	orr.w	r1, r1, #1
 80035cc:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80035ce:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80035d2:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40

    return HAL_OK;
 80035d6:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 80035d8:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 80035dc:	2002      	movs	r0, #2
}
 80035de:	4770      	bx	lr

080035e0 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035e0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80035e4:	2a20      	cmp	r2, #32
 80035e6:	d122      	bne.n	800362e <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 80035e8:	b500      	push	{lr}
 80035ea:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ee:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80035f2:	2a01      	cmp	r2, #1
 80035f4:	4603      	mov	r3, r0
 80035f6:	d01c      	beq.n	8003632 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035f8:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80035fa:	2024      	movs	r0, #36	; 0x24
 80035fc:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8003600:	6810      	ldr	r0, [r2, #0]
 8003602:	f020 0001 	bic.w	r0, r0, #1
 8003606:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003608:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800360a:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800360e:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003612:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003614:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003616:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 800361a:	f041 0101 	orr.w	r1, r1, #1
 800361e:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003620:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003624:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40

    return HAL_OK;
 8003628:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 800362a:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 800362e:	2002      	movs	r0, #2
}
 8003630:	4770      	bx	lr
    return HAL_BUSY;
 8003632:	2002      	movs	r0, #2
}
 8003634:	f85d fb04 	ldr.w	pc, [sp], #4

08003638 <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003638:	2800      	cmp	r0, #0
 800363a:	d05d      	beq.n	80036f8 <HAL_PCD_Init+0xc0>
{
 800363c:	b5f0      	push	{r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800363e:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
{
 8003642:	b087      	sub	sp, #28
 8003644:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003646:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800364a:	2b00      	cmp	r3, #0
 800364c:	d04f      	beq.n	80036ee <HAL_PCD_Init+0xb6>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800364e:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003650:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_BUSY;
 8003652:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8003656:	f002 f8a5 	bl	80057a4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800365a:	6865      	ldr	r5, [r4, #4]
 800365c:	b355      	cbz	r5, 80036b4 <HAL_PCD_Init+0x7c>
 800365e:	2300      	movs	r3, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003660:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003664:	4618      	mov	r0, r3
    hpcd->IN_ep[i].is_in = 1U;
 8003666:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800366a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800366e:	f103 0c01 	add.w	ip, r3, #1
    hpcd->IN_ep[i].num = i;
 8003672:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003676:	fa5f f38c 	uxtb.w	r3, ip
 800367a:	42ab      	cmp	r3, r5
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
 800367c:	e9c1 000e 	strd	r0, r0, [r1, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 8003680:	f881 e029 	strb.w	lr, [r1, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003684:	f881 002b 	strb.w	r0, [r1, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 8003688:	6408      	str	r0, [r1, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800368a:	d3ec      	bcc.n	8003666 <HAL_PCD_Init+0x2e>
 800368c:	2200      	movs	r2, #0
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800368e:	4611      	mov	r1, r2
 8003690:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8003694:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003698:	1c50      	adds	r0, r2, #1
    hpcd->OUT_ep[i].num = i;
 800369a:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800369e:	b2c2      	uxtb	r2, r0
 80036a0:	42aa      	cmp	r2, r5
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
    hpcd->OUT_ep[i].maxpacket = 0U;
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036a2:	e9c3 115e 	strd	r1, r1, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 80036a6:	f883 1169 	strb.w	r1, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036aa:	f883 116b 	strb.w	r1, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036ae:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036b2:	d3ed      	bcc.n	8003690 <HAL_PCD_Init+0x58>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80036b4:	4625      	mov	r5, r4
 80036b6:	46ec      	mov	ip, sp
 80036b8:	f855 7b10 	ldr.w	r7, [r5], #16
 80036bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80036c2:	682b      	ldr	r3, [r5, #0]
 80036c4:	f8cc 3000 	str.w	r3, [ip]
 80036c8:	f104 0e04 	add.w	lr, r4, #4
 80036cc:	e89e 000e 	ldmia.w	lr, {r1, r2, r3}
 80036d0:	4638      	mov	r0, r7
 80036d2:	f002 f871 	bl	80057b8 <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80036d6:	69e3      	ldr	r3, [r4, #28]
  hpcd->State = HAL_PCD_STATE_READY;
 80036d8:	2201      	movs	r2, #1
  hpcd->USB_Address = 0U;
 80036da:	2600      	movs	r6, #0
  if (hpcd->Init.lpm_enable == 1U)
 80036dc:	4293      	cmp	r3, r2
  hpcd->USB_Address = 0U;
 80036de:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80036e2:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
  if (hpcd->Init.lpm_enable == 1U)
 80036e6:	d009      	beq.n	80036fc <HAL_PCD_Init+0xc4>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 80036e8:	4630      	mov	r0, r6
}
 80036ea:	b007      	add	sp, #28
 80036ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80036ee:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 80036f2:	f004 f809 	bl	8007708 <HAL_PCD_MspInit>
 80036f6:	e7aa      	b.n	800364e <HAL_PCD_Init+0x16>
    return HAL_ERROR;
 80036f8:	2001      	movs	r0, #1
}
 80036fa:	4770      	bx	lr
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036fc:	4620      	mov	r0, r4
 80036fe:	f000 ff01 	bl	8004504 <HAL_PCDEx_ActivateLPM>
  return HAL_OK;
 8003702:	4630      	mov	r0, r6
}
 8003704:	b007      	add	sp, #28
 8003706:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003708 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8003708:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 800370c:	2b01      	cmp	r3, #1
 800370e:	d00e      	beq.n	800372e <HAL_PCD_Start+0x26>
{
 8003710:	b510      	push	{r4, lr}
 8003712:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003714:	2301      	movs	r3, #1
  __HAL_PCD_ENABLE(hpcd);
 8003716:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8003718:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800371c:	f002 f838 	bl	8005790 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003720:	6820      	ldr	r0, [r4, #0]
 8003722:	f002 fe6b 	bl	80063fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003726:	2000      	movs	r0, #0
 8003728:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 800372c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800372e:	2002      	movs	r0, #2
}
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop

08003734 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003738:	4604      	mov	r4, r0
 800373a:	b083      	sub	sp, #12
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800373c:	6800      	ldr	r0, [r0, #0]
 800373e:	f002 fe69 	bl	8006414 <USB_ReadInterrupts>

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003742:	f410 4500 	ands.w	r5, r0, #32768	; 0x8000
 8003746:	d12c      	bne.n	80037a2 <HAL_PCD_IRQHandler+0x6e>
    (void)PCD_EP_ISR_Handler(hpcd);

    return;
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003748:	0543      	lsls	r3, r0, #21
 800374a:	f100 817f 	bmi.w	8003a4c <HAL_PCD_IRQHandler+0x318>
    (void)HAL_PCD_SetAddress(hpcd, 0U);

    return;
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800374e:	0447      	lsls	r7, r0, #17
 8003750:	d41b      	bmi.n	800378a <HAL_PCD_IRQHandler+0x56>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);

    return;
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003752:	f410 5100 	ands.w	r1, r0, #8192	; 0x2000
 8003756:	f040 81f9 	bne.w	8003b4c <HAL_PCD_IRQHandler+0x418>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);

    return;
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800375a:	04c6      	lsls	r6, r0, #19
 800375c:	f100 8088 	bmi.w	8003870 <HAL_PCD_IRQHandler+0x13c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);

    return;
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003760:	0505      	lsls	r5, r0, #20
 8003762:	f100 834d 	bmi.w	8003e00 <HAL_PCD_IRQHandler+0x6cc>

    return;
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003766:	0601      	lsls	r1, r0, #24
 8003768:	f100 831e 	bmi.w	8003da8 <HAL_PCD_IRQHandler+0x674>
    }

    return;
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800376c:	0582      	lsls	r2, r0, #22
 800376e:	f100 841a 	bmi.w	8003fa6 <HAL_PCD_IRQHandler+0x872>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003772:	05c3      	lsls	r3, r0, #23
 8003774:	d512      	bpl.n	800379c <HAL_PCD_IRQHandler+0x68>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003776:	6822      	ldr	r2, [r4, #0]
 8003778:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800377c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003780:	041b      	lsls	r3, r3, #16
 8003782:	0c1b      	lsrs	r3, r3, #16
 8003784:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44

    return;
 8003788:	e008      	b.n	800379c <HAL_PCD_IRQHandler+0x68>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800378a:	6822      	ldr	r2, [r4, #0]
 800378c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003790:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003794:	041b      	lsls	r3, r3, #16
 8003796:	0c1b      	lsrs	r3, r3, #16
 8003798:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 800379c:	b003      	add	sp, #12
 800379e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80037a2:	6822      	ldr	r2, [r4, #0]
 80037a4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80037a8:	041f      	lsls	r7, r3, #16
 80037aa:	d5f7      	bpl.n	800379c <HAL_PCD_IRQHandler+0x68>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80037ac:	f8df baa8 	ldr.w	fp, [pc, #2728]	; 8004258 <HAL_PCD_IRQHandler+0xb24>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80037b0:	4610      	mov	r0, r2
 80037b2:	e010      	b.n	80037d6 <HAL_PCD_IRQHandler+0xa2>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80037b4:	f011 0110 	ands.w	r1, r1, #16
 80037b8:	f000 80c1 	beq.w	800393e <HAL_PCD_IRQHandler+0x20a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80037bc:	8801      	ldrh	r1, [r0, #0]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80037be:	f411 6500 	ands.w	r5, r1, #2048	; 0x800
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80037c2:	b28b      	uxth	r3, r1
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80037c4:	f040 80ec 	bne.w	80039a0 <HAL_PCD_IRQHandler+0x26c>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80037c8:	041e      	lsls	r6, r3, #16
 80037ca:	f100 815e 	bmi.w	8003a8a <HAL_PCD_IRQHandler+0x356>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80037ce:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80037d2:	041a      	lsls	r2, r3, #16
 80037d4:	d5e2      	bpl.n	800379c <HAL_PCD_IRQHandler+0x68>
    wIstr = hpcd->Instance->ISTR;
 80037d6:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 80037da:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 80037dc:	f015 050f 	ands.w	r5, r5, #15
 80037e0:	d0e8      	beq.n	80037b4 <HAL_PCD_IRQHandler+0x80>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80037e2:	b22e      	sxth	r6, r5
 80037e4:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 80037e8:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80037ea:	041b      	lsls	r3, r3, #16
 80037ec:	d463      	bmi.n	80038b6 <HAL_PCD_IRQHandler+0x182>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80037ee:	063b      	lsls	r3, r7, #24
 80037f0:	d5ed      	bpl.n	80037ce <HAL_PCD_IRQHandler+0x9a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80037f2:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	ea03 030b 	and.w	r3, r3, fp
 80037fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003800:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8003804:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8003808:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 800380c:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
 8003810:	2b01      	cmp	r3, #1
 8003812:	f000 81a7 	beq.w	8003b64 <HAL_PCD_IRQHandler+0x430>
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003816:	f417 7c80 	ands.w	ip, r7, #256	; 0x100
 800381a:	f040 81ce 	bne.w	8003bba <HAL_PCD_IRQHandler+0x486>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800381e:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8003822:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003826:	f240 4302 	movw	r3, #1026	; 0x402
 800382a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800382e:	fa10 f282 	uxtah	r2, r0, r2
 8003832:	5ad2      	ldrh	r2, [r2, r3]
            if (ep->xfer_len > TxPctSize)
 8003834:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8003838:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800383c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003840:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 8003842:	4296      	cmp	r6, r2
 8003844:	f240 80a5 	bls.w	8003992 <HAL_PCD_IRQHandler+0x25e>
              ep->xfer_len -= TxPctSize;
 8003848:	1ab6      	subs	r6, r6, r2
 800384a:	641e      	str	r6, [r3, #64]	; 0x40
            if (ep->xfer_len == 0U)
 800384c:	2e00      	cmp	r6, #0
 800384e:	f000 80a2 	beq.w	8003996 <HAL_PCD_IRQHandler+0x262>
        ep = &hpcd->IN_ep[epindex];
 8003852:	3501      	adds	r5, #1
 8003854:	eb05 0585 	add.w	r5, r5, r5, lsl #2
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003858:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
              ep->xfer_buff += TxPctSize;
 800385c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800385e:	4415      	add	r5, r2
 8003860:	63dd      	str	r5, [r3, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 8003862:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8003864:	442a      	add	r2, r5
 8003866:	645a      	str	r2, [r3, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003868:	f002 fa5e 	bl	8005d28 <USB_EPStartXfer>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800386c:	6820      	ldr	r0, [r4, #0]
 800386e:	e7ae      	b.n	80037ce <HAL_PCD_IRQHandler+0x9a>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003870:	6822      	ldr	r2, [r4, #0]
 8003872:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003876:	f023 0304 	bic.w	r3, r3, #4
 800387a:	041b      	lsls	r3, r3, #16
 800387c:	0c1b      	lsrs	r3, r3, #16
 800387e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003882:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003886:	f023 0308 	bic.w	r3, r3, #8
 800388a:	041b      	lsls	r3, r3, #16
 800388c:	0c1b      	lsrs	r3, r3, #16
 800388e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 8003892:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 8003896:	2b01      	cmp	r3, #1
 8003898:	f000 8393 	beq.w	8003fc2 <HAL_PCD_IRQHandler+0x88e>
    HAL_PCD_ResumeCallback(hpcd);
 800389c:	4620      	mov	r0, r4
 800389e:	f003 ffd9 	bl	8007854 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80038a2:	6822      	ldr	r2, [r4, #0]
 80038a4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80038a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038ac:	041b      	lsls	r3, r3, #16
 80038ae:	0c1b      	lsrs	r3, r3, #16
 80038b0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 80038b4:	e772      	b.n	800379c <HAL_PCD_IRQHandler+0x68>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80038b6:	f830 2026 	ldrh.w	r2, [r0, r6, lsl #2]
 80038ba:	f640 738f 	movw	r3, #3983	; 0xf8f
 80038be:	4013      	ands	r3, r2
 80038c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        if (ep->doublebuffer == 0U)
 80038c4:	eb05 0185 	add.w	r1, r5, r5, lsl #2
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80038c8:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80038cc:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80038d0:	ea4f 0885 	mov.w	r8, r5, lsl #2
 80038d4:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f040 8083 	bne.w	80039e4 <HAL_PCD_IRQHandler+0x2b0>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80038de:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80038e2:	f200 4206 	addw	r2, r0, #1030	; 0x406
 80038e6:	fa12 f383 	uxtah	r3, r2, r3
 80038ea:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 80038ee:	f833 9032 	ldrh.w	r9, [r3, r2, lsl #3]
 80038f2:	f3c9 0909 	ubfx	r9, r9, #0, #10
          if (count != 0U)
 80038f6:	f1b9 0f00 	cmp.w	r9, #0
 80038fa:	f040 81f5 	bne.w	8003ce8 <HAL_PCD_IRQHandler+0x5b4>
        ep->xfer_count += count;
 80038fe:	eb08 0305 	add.w	r3, r8, r5
 8003902:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8003906:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 800390a:	444a      	add	r2, r9
 800390c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8003910:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8003914:	444a      	add	r2, r9
 8003916:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800391a:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800391e:	b122      	cbz	r2, 800392a <HAL_PCD_IRQHandler+0x1f6>
 8003920:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8003924:	454b      	cmp	r3, r9
 8003926:	f240 81c1 	bls.w	8003cac <HAL_PCD_IRQHandler+0x578>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800392a:	44a8      	add	r8, r5
 800392c:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
 8003930:	4620      	mov	r0, r4
 8003932:	f898 1168 	ldrb.w	r1, [r8, #360]	; 0x168
 8003936:	f003 ff53 	bl	80077e0 <HAL_PCD_DataOutStageCallback>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800393a:	6820      	ldr	r0, [r4, #0]
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800393c:	e757      	b.n	80037ee <HAL_PCD_IRQHandler+0xba>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800393e:	8803      	ldrh	r3, [r0, #0]
 8003940:	b29b      	uxth	r3, r3
 8003942:	ea03 030b 	and.w	r3, r3, fp
 8003946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800394a:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800394c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003950:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8003954:	fa10 f083 	uxtah	r0, r0, r3
 8003958:	f240 4302 	movw	r3, #1026	; 0x402
 800395c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
        ep->xfer_buff += ep->xfer_count;
 8003960:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003962:	5ac3      	ldrh	r3, [r0, r3]
 8003964:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003968:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800396a:	4413      	add	r3, r2
 800396c:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800396e:	4620      	mov	r0, r4
 8003970:	f003 ff40 	bl	80077f4 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003974:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8003978:	b183      	cbz	r3, 800399c <HAL_PCD_IRQHandler+0x268>
 800397a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800397c:	b973      	cbnz	r3, 800399c <HAL_PCD_IRQHandler+0x268>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800397e:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8003982:	6820      	ldr	r0, [r4, #0]
 8003984:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003988:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800398c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8003990:	e71d      	b.n	80037ce <HAL_PCD_IRQHandler+0x9a>
 8003992:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003996:	4620      	mov	r0, r4
 8003998:	f003 ff2c 	bl	80077f4 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800399c:	6820      	ldr	r0, [r4, #0]
 800399e:	e716      	b.n	80037ce <HAL_PCD_IRQHandler+0x9a>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80039a0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80039a4:	f894 1168 	ldrb.w	r1, [r4, #360]	; 0x168
 80039a8:	f240 4306 	movw	r3, #1030	; 0x406
 80039ac:	fa10 f282 	uxtah	r2, r0, r2
 80039b0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80039b4:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 80039b8:	5ad3      	ldrh	r3, [r2, r3]
 80039ba:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 80039be:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80039c2:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80039c6:	f002 fd39 	bl	800643c <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80039ca:	6822      	ldr	r2, [r4, #0]
 80039cc:	8811      	ldrh	r1, [r2, #0]
 80039ce:	f640 738f 	movw	r3, #3983	; 0xf8f
 80039d2:	400b      	ands	r3, r1
 80039d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
          HAL_PCD_SetupStageCallback(hpcd);
 80039d8:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80039da:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80039dc:	f003 fefa 	bl	80077d4 <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80039e0:	6820      	ldr	r0, [r4, #0]
 80039e2:	e6f4      	b.n	80037ce <HAL_PCD_IRQHandler+0x9a>
          if (ep->type == EP_TYPE_BULK)
 80039e4:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	f000 8224 	beq.w	8003e36 <HAL_PCD_IRQHandler+0x702>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80039ee:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 80039f2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80039f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039fe:	041b      	lsls	r3, r3, #16
 8003a00:	0c1b      	lsrs	r3, r3, #16
 8003a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a0a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003a0e:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 8003a12:	b21a      	sxth	r2, r3
 8003a14:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
 8003a18:	f412 4f80 	tst.w	r2, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a1c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003a20:	f000 814e 	beq.w	8003cc0 <HAL_PCD_IRQHandler+0x58c>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a24:	f200 4c02 	addw	ip, r0, #1026	; 0x402
 8003a28:	fa1c f282 	uxtah	r2, ip, r2
 8003a2c:	f832 9033 	ldrh.w	r9, [r2, r3, lsl #3]
 8003a30:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 8003a34:	f1b9 0f00 	cmp.w	r9, #0
 8003a38:	f43f af61 	beq.w	80038fe <HAL_PCD_IRQHandler+0x1ca>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003a3c:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8003a40:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8003a44:	464b      	mov	r3, r9
 8003a46:	f002 fcf9 	bl	800643c <USB_ReadPMA>
 8003a4a:	e758      	b.n	80038fe <HAL_PCD_IRQHandler+0x1ca>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003a4c:	6822      	ldr	r2, [r4, #0]
 8003a4e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003a52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a56:	041b      	lsls	r3, r3, #16
 8003a58:	0c1b      	lsrs	r3, r3, #16
 8003a5a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8003a5e:	4620      	mov	r0, r4
 8003a60:	f003 fed6 	bl	8007810 <HAL_PCD_ResetCallback>
  __HAL_LOCK(hpcd);
 8003a64:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	f43f ae97 	beq.w	800379c <HAL_PCD_IRQHandler+0x68>
 8003a6e:	2301      	movs	r3, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a70:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8003a72:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003a76:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a7a:	4629      	mov	r1, r5
 8003a7c:	f002 fcb8 	bl	80063f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a80:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
}
 8003a84:	b003      	add	sp, #12
 8003a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a8a:	8802      	ldrh	r2, [r0, #0]
 8003a8c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003a90:	4013      	ands	r3, r2
 8003a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a96:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a98:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003a9c:	f894 1168 	ldrb.w	r1, [r4, #360]	; 0x168
 8003aa0:	f240 4306 	movw	r3, #1030	; 0x406
 8003aa4:	fa10 f282 	uxtah	r2, r0, r2
 8003aa8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003aac:	5ad3      	ldrh	r3, [r2, r3]
 8003aae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ab2:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003ab6:	b193      	cbz	r3, 8003ade <HAL_PCD_IRQHandler+0x3aa>
 8003ab8:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8003abc:	b179      	cbz	r1, 8003ade <HAL_PCD_IRQHandler+0x3aa>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003abe:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8003ac2:	f002 fcbb 	bl	800643c <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8003ac6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003aca:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
 8003ace:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003ad0:	4620      	mov	r0, r4
 8003ad2:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8003ad4:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003ad8:	f003 fe82 	bl	80077e0 <HAL_PCD_DataOutStageCallback>
 8003adc:	6820      	ldr	r0, [r4, #0]
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003ade:	8803      	ldrh	r3, [r0, #0]
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003ae0:	051d      	lsls	r5, r3, #20
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003ae2:	b29a      	uxth	r2, r3
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003ae4:	f53f ae73 	bmi.w	80037ce <HAL_PCD_IRQHandler+0x9a>
 8003ae8:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8003aec:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8003af0:	f43f ae6d 	beq.w	80037ce <HAL_PCD_IRQHandler+0x9a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003af4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003af8:	f8d4 1178 	ldr.w	r1, [r4, #376]	; 0x178
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8003b02:	293e      	cmp	r1, #62	; 0x3e
 8003b04:	5aea      	ldrh	r2, [r5, r3]
 8003b06:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003b0a:	52ea      	strh	r2, [r5, r3]
 8003b0c:	f240 81cf 	bls.w	8003eae <HAL_PCD_IRQHandler+0x77a>
 8003b10:	5aea      	ldrh	r2, [r5, r3]
 8003b12:	094e      	lsrs	r6, r1, #5
 8003b14:	06c9      	lsls	r1, r1, #27
 8003b16:	bf08      	it	eq
 8003b18:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8003b1c:	b292      	uxth	r2, r2
 8003b1e:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8003b22:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003b26:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003b2a:	b292      	uxth	r2, r2
 8003b2c:	52ea      	strh	r2, [r5, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003b2e:	8803      	ldrh	r3, [r0, #0]
 8003b30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b38:	041b      	lsls	r3, r3, #16
 8003b3a:	0c1b      	lsrs	r3, r3, #16
 8003b3c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003b40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b48:	8003      	strh	r3, [r0, #0]
 8003b4a:	e640      	b.n	80037ce <HAL_PCD_IRQHandler+0x9a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003b4c:	6822      	ldr	r2, [r4, #0]
 8003b4e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003b52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b56:	041b      	lsls	r3, r3, #16
 8003b58:	0c1b      	lsrs	r3, r3, #16
 8003b5a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8003b5e:	b003      	add	sp, #12
 8003b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          ep->xfer_len = 0U;
 8003b64:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8003b68:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8003b6c:	2300      	movs	r3, #0
          if (ep->doublebuffer != 0U)
 8003b6e:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
          ep->xfer_len = 0U;
 8003b72:	642b      	str	r3, [r5, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 8003b74:	b1d2      	cbz	r2, 8003bac <HAL_PCD_IRQHandler+0x478>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b76:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 8003b7a:	f040 8107 	bne.w	8003d8c <HAL_PCD_IRQHandler+0x658>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b7e:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f040 8223 	bne.w	8003fce <HAL_PCD_IRQHandler+0x89a>
 8003b88:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8003b8c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003b90:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8003b94:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003b98:	b292      	uxth	r2, r2
 8003b9a:	5a99      	ldrh	r1, [r3, r2]
 8003b9c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003ba0:	5299      	strh	r1, [r3, r2]
 8003ba2:	5a99      	ldrh	r1, [r3, r2]
 8003ba4:	b289      	uxth	r1, r1
 8003ba6:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003baa:	5299      	strh	r1, [r3, r2]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003bac:	4620      	mov	r0, r4
 8003bae:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8003bb2:	f003 fe1f 	bl	80077f4 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003bb6:	6820      	ldr	r0, [r4, #0]
 8003bb8:	e609      	b.n	80037ce <HAL_PCD_IRQHandler+0x9a>
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003bba:	f017 0340 	ands.w	r3, r7, #64	; 0x40
 8003bbe:	9301      	str	r3, [sp, #4]
 8003bc0:	f000 809a 	beq.w	8003cf8 <HAL_PCD_IRQHandler+0x5c4>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bc4:	f896 a028 	ldrb.w	sl, [r6, #40]	; 0x28
 8003bc8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003bcc:	ea4f 0cca 	mov.w	ip, sl, lsl #3
 8003bd0:	fa1c f383 	uxtah	r3, ip, r3
 8003bd4:	f200 4902 	addw	r9, r0, #1026	; 0x402
    if (ep->xfer_len > TxPctSize)
 8003bd8:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8003bdc:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003be0:	f833 3009 	ldrh.w	r3, [r3, r9]
    if (ep->xfer_len > TxPctSize)
 8003be4:	6c11      	ldr	r1, [r2, #64]	; 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003be6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len > TxPctSize)
 8003bea:	4299      	cmp	r1, r3
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bec:	fa0f fe8a 	sxth.w	lr, sl
    if (ep->xfer_len > TxPctSize)
 8003bf0:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8003bf4:	f240 8168 	bls.w	8003ec8 <HAL_PCD_IRQHandler+0x794>
      ep->xfer_len -= TxPctSize;
 8003bf8:	1ac9      	subs	r1, r1, r3
 8003bfa:	6411      	str	r1, [r2, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8003bfc:	2900      	cmp	r1, #0
 8003bfe:	f000 8165 	beq.w	8003ecc <HAL_PCD_IRQHandler+0x798>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c02:	0479      	lsls	r1, r7, #17
 8003c04:	d50d      	bpl.n	8003c22 <HAL_PCD_IRQHandler+0x4ee>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c06:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
 8003c0a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003c0e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c12:	0412      	lsls	r2, r2, #16
 8003c14:	0c12      	lsrs	r2, r2, #16
 8003c16:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003c1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c1e:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8003c22:	eb08 0705 	add.w	r7, r8, r5
 8003c26:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8003c2a:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8003c2e:	2a01      	cmp	r2, #1
 8003c30:	f040 809a 	bne.w	8003d68 <HAL_PCD_IRQHandler+0x634>
        ep->xfer_buff += TxPctSize;
 8003c34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8003c36:	f8d7 c048 	ldr.w	ip, [r7, #72]	; 0x48
        ep->xfer_buff += TxPctSize;
 8003c3a:	18d1      	adds	r1, r2, r3
        ep->xfer_count += TxPctSize;
 8003c3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
        ep->xfer_buff += TxPctSize;
 8003c3e:	63f9      	str	r1, [r7, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 8003c40:	441a      	add	r2, r3
 8003c42:	647a      	str	r2, [r7, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8003c44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c46:	4594      	cmp	ip, r2
 8003c48:	f0c0 82b0 	bcc.w	80041ac <HAL_PCD_IRQHandler+0xa78>
          ep->xfer_len_db -= len;
 8003c4c:	ebac 0302 	sub.w	r3, ip, r2
 8003c50:	64bb      	str	r3, [r7, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003c52:	b293      	uxth	r3, r2
 8003c54:	f896 7029 	ldrb.w	r7, [r6, #41]	; 0x29
 8003c58:	2f00      	cmp	r7, #0
 8003c5a:	f040 829d 	bne.w	8004198 <HAL_PCD_IRQHandler+0xa64>
 8003c5e:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8003c62:	fa19 f987 	uxtah	r9, r9, r7
 8003c66:	2a3e      	cmp	r2, #62	; 0x3e
 8003c68:	f839 703e 	ldrh.w	r7, [r9, lr, lsl #3]
 8003c6c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8003c70:	f829 703e 	strh.w	r7, [r9, lr, lsl #3]
 8003c74:	f240 82c1 	bls.w	80041fa <HAL_PCD_IRQHandler+0xac6>
 8003c78:	0957      	lsrs	r7, r2, #5
 8003c7a:	06d2      	lsls	r2, r2, #27
 8003c7c:	f839 203e 	ldrh.w	r2, [r9, lr, lsl #3]
 8003c80:	bf08      	it	eq
 8003c82:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8003c86:	b292      	uxth	r2, r2
 8003c88:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8003c8c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003c90:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003c94:	b292      	uxth	r2, r2
 8003c96:	f829 203e 	strh.w	r2, [r9, lr, lsl #3]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003c9a:	eb08 0205 	add.w	r2, r8, r5
 8003c9e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8003ca2:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8003ca4:	f002 fbba 	bl	800641c <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003ca8:	6820      	ldr	r0, [r4, #0]
 8003caa:	e05d      	b.n	8003d68 <HAL_PCD_IRQHandler+0x634>
        ep = &hpcd->OUT_ep[epindex];
 8003cac:	2128      	movs	r1, #40	; 0x28
 8003cae:	fb01 4105 	mla	r1, r1, r5, r4
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003cb2:	6820      	ldr	r0, [r4, #0]
 8003cb4:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8003cb8:	f002 f836 	bl	8005d28 <USB_EPStartXfer>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003cbc:	6820      	ldr	r0, [r4, #0]
 8003cbe:	e596      	b.n	80037ee <HAL_PCD_IRQHandler+0xba>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003cc0:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 8003cc4:	fa1c f282 	uxtah	r2, ip, r2
 8003cc8:	f832 9033 	ldrh.w	r9, [r2, r3, lsl #3]
 8003ccc:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 8003cd0:	f1b9 0f00 	cmp.w	r9, #0
 8003cd4:	f43f ae13 	beq.w	80038fe <HAL_PCD_IRQHandler+0x1ca>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003cd8:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8003cdc:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8003ce0:	464b      	mov	r3, r9
 8003ce2:	f002 fbab 	bl	800643c <USB_ReadPMA>
 8003ce6:	e60a      	b.n	80038fe <HAL_PCD_IRQHandler+0x1ca>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003ce8:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8003cec:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8003cf0:	464b      	mov	r3, r9
 8003cf2:	f002 fba3 	bl	800643c <USB_ReadPMA>
 8003cf6:	e602      	b.n	80038fe <HAL_PCD_IRQHandler+0x1ca>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003cf8:	f896 e028 	ldrb.w	lr, [r6, #40]	; 0x28
 8003cfc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003d00:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 8003d04:	fa1c f383 	uxtah	r3, ip, r3
 8003d08:	f200 4a06 	addw	sl, r0, #1030	; 0x406
    if (ep->xfer_len >= TxPctSize)
 8003d0c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8003d10:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d14:	f833 300a 	ldrh.w	r3, [r3, sl]
    if (ep->xfer_len >= TxPctSize)
 8003d18:	6c11      	ldr	r1, [r2, #64]	; 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= TxPctSize)
 8003d1e:	4299      	cmp	r1, r3
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d20:	fa0f f98e 	sxth.w	r9, lr
    if (ep->xfer_len >= TxPctSize)
 8003d24:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8003d28:	f0c0 810e 	bcc.w	8003f48 <HAL_PCD_IRQHandler+0x814>
      ep->xfer_len -= TxPctSize;
 8003d2c:	1ac9      	subs	r1, r1, r3
 8003d2e:	6411      	str	r1, [r2, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8003d30:	2900      	cmp	r1, #0
 8003d32:	f000 810b 	beq.w	8003f4c <HAL_PCD_IRQHandler+0x818>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d36:	0479      	lsls	r1, r7, #17
 8003d38:	d40d      	bmi.n	8003d56 <HAL_PCD_IRQHandler+0x622>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d3a:	f830 2029 	ldrh.w	r2, [r0, r9, lsl #2]
 8003d3e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003d42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003d46:	0412      	lsls	r2, r2, #16
 8003d48:	0c12      	lsrs	r2, r2, #16
 8003d4a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003d4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d52:	f820 2029 	strh.w	r2, [r0, r9, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8003d56:	eb08 0705 	add.w	r7, r8, r5
 8003d5a:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8003d5e:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8003d62:	2a01      	cmp	r2, #1
 8003d64:	f000 81df 	beq.w	8004126 <HAL_PCD_IRQHandler+0x9f2>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003d68:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 8003d6c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d7a:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8003d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d86:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

  return HAL_OK;
 8003d8a:	e520      	b.n	80037ce <HAL_PCD_IRQHandler+0x9a>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d8c:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
 8003d90:	2a00      	cmp	r2, #0
 8003d92:	f040 812a 	bne.w	8003fea <HAL_PCD_IRQHandler+0x8b6>
 8003d96:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8003d9a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003d9e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8003da2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003da6:	e6f7      	b.n	8003b98 <HAL_PCD_IRQHandler+0x464>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003da8:	6822      	ldr	r2, [r4, #0]
 8003daa:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003dae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003db2:	041b      	lsls	r3, r3, #16
 8003db4:	0c1b      	lsrs	r3, r3, #16
 8003db6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003dba:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d17e      	bne.n	8003ec0 <HAL_PCD_IRQHandler+0x78c>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003dc2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	f043 0304 	orr.w	r3, r3, #4
 8003dcc:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003dd0:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003dd4:	b29b      	uxth	r3, r3
      hpcd->LPM_State = LPM_L1;
 8003dd6:	2101      	movs	r1, #1
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003dd8:	f043 0308 	orr.w	r3, r3, #8
 8003ddc:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 8003de0:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003de4:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8003de8:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8003dec:	f003 033c 	and.w	r3, r3, #60	; 0x3c
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003df0:	4620      	mov	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003df2:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
}
 8003df6:	b003      	add	sp, #12
 8003df8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003dfc:	f003 be1a 	b.w	8007a34 <HAL_PCDEx_LPM_Callback>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003e00:	6822      	ldr	r2, [r4, #0]
 8003e02:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	f043 0308 	orr.w	r3, r3, #8
 8003e0c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003e10:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003e14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e18:	041b      	lsls	r3, r3, #16
 8003e1a:	0c1b      	lsrs	r3, r3, #16
 8003e1c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003e20:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	f043 0304 	orr.w	r3, r3, #4
    HAL_PCD_SuspendCallback(hpcd);
 8003e2a:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003e2c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8003e30:	f003 fd00 	bl	8007834 <HAL_PCD_SuspendCallback>
    return;
 8003e34:	e4b2      	b.n	800379c <HAL_PCD_IRQHandler+0x68>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e36:	f417 4280 	ands.w	r2, r7, #16384	; 0x4000
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e3a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e3e:	f000 80e2 	beq.w	8004006 <HAL_PCD_IRQHandler+0x8d2>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e42:	f200 4202 	addw	r2, r0, #1026	; 0x402
 8003e46:	fa12 f383 	uxtah	r3, r2, r3
 8003e4a:	f891 c168 	ldrb.w	ip, [r1, #360]	; 0x168
    if (ep->xfer_len >= count)
 8003e4e:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e52:	f833 303c 	ldrh.w	r3, [r3, ip, lsl #3]
 8003e56:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	4699      	mov	r9, r3
 8003e5e:	f0c0 814c 	bcc.w	80040fa <HAL_PCD_IRQHandler+0x9c6>
      ep->xfer_len -= count;
 8003e62:	1ad2      	subs	r2, r2, r3
 8003e64:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8003e68:	2a00      	cmp	r2, #0
 8003e6a:	f000 8149 	beq.w	8004100 <HAL_PCD_IRQHandler+0x9cc>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003e6e:	0679      	lsls	r1, r7, #25
 8003e70:	d50f      	bpl.n	8003e92 <HAL_PCD_IRQHandler+0x75e>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003e72:	fa0f fc8c 	sxth.w	ip, ip
 8003e76:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 8003e7a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003e7e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003e82:	0412      	lsls	r2, r2, #16
 8003e84:	0c12      	lsrs	r2, r2, #16
 8003e86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e8a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003e8e:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
    if (count != 0U)
 8003e92:	b90b      	cbnz	r3, 8003e98 <HAL_PCD_IRQHandler+0x764>
 8003e94:	4699      	mov	r9, r3
 8003e96:	e532      	b.n	80038fe <HAL_PCD_IRQHandler+0x1ca>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003e98:	eb08 0105 	add.w	r1, r8, r5
 8003e9c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8003ea0:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8003ea4:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8003ea8:	f002 fac8 	bl	800643c <USB_ReadPMA>
 8003eac:	e527      	b.n	80038fe <HAL_PCD_IRQHandler+0x1ca>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003eae:	2900      	cmp	r1, #0
 8003eb0:	f040 80de 	bne.w	8004070 <HAL_PCD_IRQHandler+0x93c>
 8003eb4:	5aea      	ldrh	r2, [r5, r3]
 8003eb6:	b292      	uxth	r2, r2
 8003eb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ebc:	52ea      	strh	r2, [r5, r3]
 8003ebe:	e636      	b.n	8003b2e <HAL_PCD_IRQHandler+0x3fa>
      HAL_PCD_SuspendCallback(hpcd);
 8003ec0:	4620      	mov	r0, r4
 8003ec2:	f003 fcb7 	bl	8007834 <HAL_PCD_SuspendCallback>
 8003ec6:	e469      	b.n	800379c <HAL_PCD_IRQHandler+0x68>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	6413      	str	r3, [r2, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ecc:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f040 80d9 	bne.w	8004088 <HAL_PCD_IRQHandler+0x954>
 8003ed6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003eda:	fa19 f983 	uxtah	r9, r9, r3
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ede:	f20c 4206 	addw	r2, ip, #1030	; 0x406
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ee2:	f839 303e 	ldrh.w	r3, [r9, lr, lsl #3]
 8003ee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eea:	f829 303e 	strh.w	r3, [r9, lr, lsl #3]
 8003eee:	f839 303e 	ldrh.w	r3, [r9, lr, lsl #3]
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ef8:	f829 303e 	strh.w	r3, [r9, lr, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003efc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003f00:	4402      	add	r2, r0
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	5ad1      	ldrh	r1, [r2, r3]
 8003f06:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003f0a:	52d1      	strh	r1, [r2, r3]
 8003f0c:	5ad1      	ldrh	r1, [r2, r3]
 8003f0e:	b289      	uxth	r1, r1
 8003f10:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003f14:	52d1      	strh	r1, [r2, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f16:	4620      	mov	r0, r4
 8003f18:	4651      	mov	r1, sl
 8003f1a:	f003 fc6b 	bl	80077f4 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f1e:	047d      	lsls	r5, r7, #17
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f20:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f22:	f57f af21 	bpl.w	8003d68 <HAL_PCD_IRQHandler+0x634>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f26:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 8003f2a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f36:	041b      	lsls	r3, r3, #16
 8003f38:	0c1b      	lsrs	r3, r3, #16
 8003f3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f42:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003f46:	e70f      	b.n	8003d68 <HAL_PCD_IRQHandler+0x634>
 8003f48:	9b01      	ldr	r3, [sp, #4]
 8003f4a:	6413      	str	r3, [r2, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f4c:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f040 80ab 	bne.w	80040ac <HAL_PCD_IRQHandler+0x978>
 8003f56:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003f5a:	f20c 4102 	addw	r1, ip, #1026	; 0x402
 8003f5e:	b292      	uxth	r2, r2
 8003f60:	4401      	add	r1, r0
 8003f62:	5a8b      	ldrh	r3, [r1, r2]
 8003f64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f68:	528b      	strh	r3, [r1, r2]
 8003f6a:	5a8b      	ldrh	r3, [r1, r2]
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f72:	528b      	strh	r3, [r1, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f74:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003f78:	fa1a f383 	uxtah	r3, sl, r3
 8003f7c:	f833 2039 	ldrh.w	r2, [r3, r9, lsl #3]
 8003f80:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003f84:	f823 2039 	strh.w	r2, [r3, r9, lsl #3]
 8003f88:	f833 2039 	ldrh.w	r2, [r3, r9, lsl #3]
 8003f8c:	b292      	uxth	r2, r2
 8003f8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f92:	f823 2039 	strh.w	r2, [r3, r9, lsl #3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f96:	4620      	mov	r0, r4
 8003f98:	4671      	mov	r1, lr
 8003f9a:	f003 fc2b 	bl	80077f4 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f9e:	047d      	lsls	r5, r7, #17
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003fa0:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003fa2:	d5c0      	bpl.n	8003f26 <HAL_PCD_IRQHandler+0x7f2>
 8003fa4:	e6e0      	b.n	8003d68 <HAL_PCD_IRQHandler+0x634>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003fa6:	6822      	ldr	r2, [r4, #0]
 8003fa8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003fac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fb0:	041b      	lsls	r3, r3, #16
 8003fb2:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_SOFCallback(hpcd);
 8003fb4:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003fb6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8003fba:	f003 fc25 	bl	8007808 <HAL_PCD_SOFCallback>
    return;
 8003fbe:	f7ff bbed 	b.w	800379c <HAL_PCD_IRQHandler+0x68>
      hpcd->LPM_State = LPM_L0;
 8003fc2:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003fc6:	4620      	mov	r0, r4
 8003fc8:	f003 fd34 	bl	8007a34 <HAL_PCDEx_LPM_Callback>
 8003fcc:	e466      	b.n	800389c <HAL_PCD_IRQHandler+0x168>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	f47f adec 	bne.w	8003bac <HAL_PCD_IRQHandler+0x478>
 8003fd4:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8003fd8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003fdc:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8003fe0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003fe4:	b292      	uxth	r2, r2
 8003fe6:	529f      	strh	r7, [r3, r2]
 8003fe8:	e5e0      	b.n	8003bac <HAL_PCD_IRQHandler+0x478>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fea:	2a01      	cmp	r2, #1
 8003fec:	f47f adde 	bne.w	8003bac <HAL_PCD_IRQHandler+0x478>
 8003ff0:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 8003ff4:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8003ff8:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8003ffc:	f202 4202 	addw	r2, r2, #1026	; 0x402
 8004000:	b289      	uxth	r1, r1
 8004002:	5253      	strh	r3, [r2, r1]
 8004004:	e5d2      	b.n	8003bac <HAL_PCD_IRQHandler+0x478>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004006:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 800400a:	fa1c f383 	uxtah	r3, ip, r3
 800400e:	f891 c168 	ldrb.w	ip, [r1, #360]	; 0x168
    if (ep->xfer_len >= count)
 8004012:	f8d1 e180 	ldr.w	lr, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004016:	f833 303c 	ldrh.w	r3, [r3, ip, lsl #3]
 800401a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 800401e:	459e      	cmp	lr, r3
 8004020:	4699      	mov	r9, r3
 8004022:	d355      	bcc.n	80040d0 <HAL_PCD_IRQHandler+0x99c>
      ep->xfer_len -= count;
 8004024:	ebae 0203 	sub.w	r2, lr, r3
 8004028:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 800402c:	2a00      	cmp	r2, #0
 800402e:	d051      	beq.n	80040d4 <HAL_PCD_IRQHandler+0x9a0>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004030:	067a      	lsls	r2, r7, #25
 8004032:	d40f      	bmi.n	8004054 <HAL_PCD_IRQHandler+0x920>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004034:	fa0f fc8c 	sxth.w	ip, ip
 8004038:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 800403c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004040:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004044:	0412      	lsls	r2, r2, #16
 8004046:	0c12      	lsrs	r2, r2, #16
 8004048:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800404c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004050:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
    if (count != 0U)
 8004054:	2b00      	cmp	r3, #0
 8004056:	f43f af1d 	beq.w	8003e94 <HAL_PCD_IRQHandler+0x760>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800405a:	eb08 0105 	add.w	r1, r8, r5
 800405e:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8004062:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8004066:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800406a:	f002 f9e7 	bl	800643c <USB_ReadPMA>
 800406e:	e446      	b.n	80038fe <HAL_PCD_IRQHandler+0x1ca>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004070:	07ca      	lsls	r2, r1, #31
 8004072:	5aea      	ldrh	r2, [r5, r3]
 8004074:	ea4f 0651 	mov.w	r6, r1, lsr #1
 8004078:	bf48      	it	mi
 800407a:	3601      	addmi	r6, #1
 800407c:	b292      	uxth	r2, r2
 800407e:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8004082:	b292      	uxth	r2, r2
 8004084:	52ea      	strh	r2, [r5, r3]
 8004086:	e552      	b.n	8003b2e <HAL_PCD_IRQHandler+0x3fa>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004088:	2b01      	cmp	r3, #1
 800408a:	f47f af44 	bne.w	8003f16 <HAL_PCD_IRQHandler+0x7e2>
 800408e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004092:	fa19 f983 	uxtah	r9, r9, r3
 8004096:	2100      	movs	r1, #0
 8004098:	f829 103e 	strh.w	r1, [r9, lr, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800409c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80040a0:	f20c 4206 	addw	r2, ip, #1030	; 0x406
 80040a4:	4402      	add	r2, r0
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	52d1      	strh	r1, [r2, r3]
 80040aa:	e734      	b.n	8003f16 <HAL_PCD_IRQHandler+0x7e2>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	f47f af72 	bne.w	8003f96 <HAL_PCD_IRQHandler+0x862>
 80040b2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80040b6:	f20c 4202 	addw	r2, ip, #1026	; 0x402
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	4402      	add	r2, r0
 80040be:	2100      	movs	r1, #0
 80040c0:	52d1      	strh	r1, [r2, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040c2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80040c6:	fa1a f383 	uxtah	r3, sl, r3
 80040ca:	f823 1039 	strh.w	r1, [r3, r9, lsl #3]
 80040ce:	e762      	b.n	8003f96 <HAL_PCD_IRQHandler+0x862>
 80040d0:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80040d4:	fa0f f18c 	sxth.w	r1, ip
 80040d8:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 80040dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80040e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80040e4:	0412      	lsls	r2, r2, #16
 80040e6:	0c12      	lsrs	r2, r2, #16
 80040e8:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 80040ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040f4:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 80040f8:	e79a      	b.n	8004030 <HAL_PCD_IRQHandler+0x8fc>
 80040fa:	2200      	movs	r2, #0
 80040fc:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004100:	fa0f f18c 	sxth.w	r1, ip
 8004104:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8004108:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800410c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004110:	0412      	lsls	r2, r2, #16
 8004112:	0c12      	lsrs	r2, r2, #16
 8004114:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8004118:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800411c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004120:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 8004124:	e6a3      	b.n	8003e6e <HAL_PCD_IRQHandler+0x73a>
        ep->xfer_buff += TxPctSize;
 8004126:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8004128:	f8d7 c048 	ldr.w	ip, [r7, #72]	; 0x48
        ep->xfer_buff += TxPctSize;
 800412c:	18d1      	adds	r1, r2, r3
        ep->xfer_count += TxPctSize;
 800412e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
        ep->xfer_buff += TxPctSize;
 8004130:	63f9      	str	r1, [r7, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 8004132:	441a      	add	r2, r3
 8004134:	647a      	str	r2, [r7, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8004136:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004138:	4594      	cmp	ip, r2
 800413a:	d347      	bcc.n	80041cc <HAL_PCD_IRQHandler+0xa98>
          ep->xfer_len_db -= len;
 800413c:	ebac 0302 	sub.w	r3, ip, r2
 8004140:	64bb      	str	r3, [r7, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004142:	b293      	uxth	r3, r2
 8004144:	f896 7029 	ldrb.w	r7, [r6, #41]	; 0x29
 8004148:	bbbf      	cbnz	r7, 80041ba <HAL_PCD_IRQHandler+0xa86>
 800414a:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 800414e:	fa1a f787 	uxtah	r7, sl, r7
 8004152:	2a3e      	cmp	r2, #62	; 0x3e
 8004154:	f837 c039 	ldrh.w	ip, [r7, r9, lsl #3]
 8004158:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800415c:	f827 c039 	strh.w	ip, [r7, r9, lsl #3]
 8004160:	d954      	bls.n	800420c <HAL_PCD_IRQHandler+0xad8>
 8004162:	ea4f 1c52 	mov.w	ip, r2, lsr #5
 8004166:	06d2      	lsls	r2, r2, #27
 8004168:	f837 2039 	ldrh.w	r2, [r7, r9, lsl #3]
 800416c:	bf08      	it	eq
 800416e:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8004172:	b292      	uxth	r2, r2
 8004174:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 8004178:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800417c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004180:	b292      	uxth	r2, r2
 8004182:	f827 2039 	strh.w	r2, [r7, r9, lsl #3]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004186:	eb08 0205 	add.w	r2, r8, r5
 800418a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800418e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8004190:	f002 f944 	bl	800641c <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004194:	6820      	ldr	r0, [r4, #0]
 8004196:	e5e7      	b.n	8003d68 <HAL_PCD_IRQHandler+0x634>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004198:	2f01      	cmp	r7, #1
 800419a:	f47f ad7e 	bne.w	8003c9a <HAL_PCD_IRQHandler+0x566>
 800419e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80041a2:	fa19 f982 	uxtah	r9, r9, r2
 80041a6:	f829 303e 	strh.w	r3, [r9, lr, lsl #3]
 80041aa:	e576      	b.n	8003c9a <HAL_PCD_IRQHandler+0x566>
        else if (ep->xfer_len_db == 0U)
 80041ac:	f1bc 0f00 	cmp.w	ip, #0
 80041b0:	d113      	bne.n	80041da <HAL_PCD_IRQHandler+0xaa6>
          ep->xfer_fill_db = 0U;
 80041b2:	f887 c04c 	strb.w	ip, [r7, #76]	; 0x4c
 80041b6:	461a      	mov	r2, r3
 80041b8:	e54c      	b.n	8003c54 <HAL_PCD_IRQHandler+0x520>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80041ba:	2f01      	cmp	r7, #1
 80041bc:	d1e3      	bne.n	8004186 <HAL_PCD_IRQHandler+0xa52>
 80041be:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80041c2:	fa1a f282 	uxtah	r2, sl, r2
 80041c6:	f822 3039 	strh.w	r3, [r2, r9, lsl #3]
 80041ca:	e7dc      	b.n	8004186 <HAL_PCD_IRQHandler+0xa52>
        else if (ep->xfer_len_db == 0U)
 80041cc:	f1bc 0f00 	cmp.w	ip, #0
 80041d0:	d10b      	bne.n	80041ea <HAL_PCD_IRQHandler+0xab6>
          ep->xfer_fill_db = 0U;
 80041d2:	f887 c04c 	strb.w	ip, [r7, #76]	; 0x4c
 80041d6:	461a      	mov	r2, r3
 80041d8:	e7b4      	b.n	8004144 <HAL_PCD_IRQHandler+0xa10>
          ep->xfer_fill_db = 0U;
 80041da:	2300      	movs	r3, #0
 80041dc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 80041e0:	64bb      	str	r3, [r7, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80041e2:	4662      	mov	r2, ip
 80041e4:	fa1f f38c 	uxth.w	r3, ip
 80041e8:	e534      	b.n	8003c54 <HAL_PCD_IRQHandler+0x520>
          ep->xfer_len_db = 0U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	64bb      	str	r3, [r7, #72]	; 0x48
          ep->xfer_fill_db = 0;
 80041ee:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80041f2:	4662      	mov	r2, ip
 80041f4:	fa1f f38c 	uxth.w	r3, ip
 80041f8:	e7a4      	b.n	8004144 <HAL_PCD_IRQHandler+0xa10>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80041fa:	b982      	cbnz	r2, 800421e <HAL_PCD_IRQHandler+0xaea>
 80041fc:	f839 203e 	ldrh.w	r2, [r9, lr, lsl #3]
 8004200:	b292      	uxth	r2, r2
 8004202:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004206:	f829 203e 	strh.w	r2, [r9, lr, lsl #3]
 800420a:	e546      	b.n	8003c9a <HAL_PCD_IRQHandler+0x566>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800420c:	b9a2      	cbnz	r2, 8004238 <HAL_PCD_IRQHandler+0xb04>
 800420e:	f837 2039 	ldrh.w	r2, [r7, r9, lsl #3]
 8004212:	b292      	uxth	r2, r2
 8004214:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004218:	f827 2039 	strh.w	r2, [r7, r9, lsl #3]
 800421c:	e7b3      	b.n	8004186 <HAL_PCD_IRQHandler+0xa52>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800421e:	0857      	lsrs	r7, r2, #1
 8004220:	07d2      	lsls	r2, r2, #31
 8004222:	f839 203e 	ldrh.w	r2, [r9, lr, lsl #3]
 8004226:	bf48      	it	mi
 8004228:	3701      	addmi	r7, #1
 800422a:	b292      	uxth	r2, r2
 800422c:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8004230:	b292      	uxth	r2, r2
 8004232:	f829 203e 	strh.w	r2, [r9, lr, lsl #3]
 8004236:	e530      	b.n	8003c9a <HAL_PCD_IRQHandler+0x566>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004238:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 800423c:	07d2      	lsls	r2, r2, #31
 800423e:	f837 2039 	ldrh.w	r2, [r7, r9, lsl #3]
 8004242:	bf48      	it	mi
 8004244:	f10c 0c01 	addmi.w	ip, ip, #1
 8004248:	b292      	uxth	r2, r2
 800424a:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 800424e:	b292      	uxth	r2, r2
 8004250:	f827 2039 	strh.w	r2, [r7, r9, lsl #3]
 8004254:	e797      	b.n	8004186 <HAL_PCD_IRQHandler+0xa52>
 8004256:	bf00      	nop
 8004258:	ffff8f0f 	.word	0xffff8f0f

0800425c <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800425c:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 8004260:	2a01      	cmp	r2, #1
 8004262:	d00d      	beq.n	8004280 <HAL_PCD_SetAddress+0x24>
{
 8004264:	b510      	push	{r4, lr}
 8004266:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8004268:	2201      	movs	r2, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800426a:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800426c:	f884 22a8 	strb.w	r2, [r4, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004270:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004274:	f002 f8bc 	bl	80063f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004278:	2000      	movs	r0, #0
 800427a:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800427e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8004280:	2002      	movs	r0, #2
}
 8004282:	4770      	bx	lr

08004284 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 8004284:	f001 0c07 	and.w	ip, r1, #7
 8004288:	0609      	lsls	r1, r1, #24
{
 800428a:	b510      	push	{r4, lr}
 800428c:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800428e:	d422      	bmi.n	80042d6 <HAL_PCD_EP_Open+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004290:	2128      	movs	r1, #40	; 0x28
 8004292:	fb01 010c 	mla	r1, r1, ip, r0
    ep->is_in = 0U;
 8004296:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
 800429a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800429e:	f04f 0e00 	mov.w	lr, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042a2:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 80042a6:	f880 e169 	strb.w	lr, [r0, #361]	; 0x169
  if (ep_type == EP_TYPE_BULK)
 80042aa:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 80042ac:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 80042ae:	bf04      	itt	eq
 80042b0:	2300      	moveq	r3, #0
 80042b2:	710b      	strbeq	r3, [r1, #4]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042b4:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 80042b8:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 80042ba:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d015      	beq.n	80042ee <HAL_PCD_EP_Open+0x6a>
 80042c2:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80042c4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80042c6:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80042ca:	f001 fa87 	bl	80057dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042ce:	2000      	movs	r0, #0
 80042d0:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80042d4:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042d6:	f10c 0101 	add.w	r1, ip, #1
    ep->is_in = 1U;
 80042da:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80042de:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80042e2:	f04f 0e01 	mov.w	lr, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042e6:	4601      	mov	r1, r0
    ep->is_in = 1U;
 80042e8:	f880 e001 	strb.w	lr, [r0, #1]
 80042ec:	e7dd      	b.n	80042aa <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 80042ee:	2002      	movs	r0, #2
}
 80042f0:	bd10      	pop	{r4, pc}
 80042f2:	bf00      	nop

080042f4 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80042f4:	060a      	lsls	r2, r1, #24
{
 80042f6:	b510      	push	{r4, lr}
 80042f8:	f001 0307 	and.w	r3, r1, #7
 80042fc:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80042fe:	d41a      	bmi.n	8004336 <HAL_PCD_EP_Close+0x42>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004300:	2128      	movs	r1, #40	; 0x28
 8004302:	fb01 0103 	mla	r1, r1, r3, r0
    ep->is_in = 0U;
 8004306:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800430a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800430e:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8004312:	2000      	movs	r0, #0
 8004314:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8004318:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800431a:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800431e:	2b01      	cmp	r3, #1
 8004320:	d016      	beq.n	8004350 <HAL_PCD_EP_Close+0x5c>
 8004322:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004324:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8004326:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800432a:	f001 fc1d 	bl	8005b68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800432e:	2000      	movs	r0, #0
 8004330:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8004334:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004336:	1c5a      	adds	r2, r3, #1
    ep->is_in = 1U;
 8004338:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800433c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004340:	4611      	mov	r1, r2
    ep->is_in = 1U;
 8004342:	2001      	movs	r0, #1
 8004344:	7050      	strb	r0, [r2, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004346:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8004348:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800434c:	2b01      	cmp	r3, #1
 800434e:	d1e8      	bne.n	8004322 <HAL_PCD_EP_Close+0x2e>
 8004350:	2002      	movs	r0, #2
}
 8004352:	bd10      	pop	{r4, pc}

08004354 <HAL_PCD_EP_Receive>:
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004354:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8004358:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
{
 800435c:	b510      	push	{r4, lr}
  ep->xfer_buff = pBuf;
 800435e:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
  ep->xfer_count = 0U;
 8004362:	2400      	movs	r4, #0
  ep->xfer_buff = pBuf;
 8004364:	f8cc 217c 	str.w	r2, [ip, #380]	; 0x17c
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004368:	2228      	movs	r2, #40	; 0x28
 800436a:	fb02 0201 	mla	r2, r2, r1, r0
  ep->num = ep_addr & EP_ADDR_MSK;
 800436e:	f88c 1168 	strb.w	r1, [ip, #360]	; 0x168
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004372:	6800      	ldr	r0, [r0, #0]
  ep->is_in = 0U;
 8004374:	f88c 4169 	strb.w	r4, [ip, #361]	; 0x169
  ep->xfer_count = 0U;
 8004378:	e9cc 3460 	strd	r3, r4, [ip, #384]	; 0x180
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800437c:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 8004380:	f001 fcd2 	bl	8005d28 <USB_EPStartXfer>
}
 8004384:	4620      	mov	r0, r4
 8004386:	bd10      	pop	{r4, pc}

08004388 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004388:	f001 0107 	and.w	r1, r1, #7
 800438c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004390:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8004394:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop

0800439c <HAL_PCD_EP_Transmit>:
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800439c:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 80043a0:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
{
 80043a4:	b510      	push	{r4, lr}
  ep->xfer_buff = pBuf;
 80043a6:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
{
 80043aa:	4686      	mov	lr, r0
  ep->xfer_fill_db = 1U;
 80043ac:	2001      	movs	r0, #1
  ep->xfer_len = len;
 80043ae:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
  ep->xfer_len_db = len;
 80043b2:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043b6:	180b      	adds	r3, r1, r0
  ep->xfer_count = 0U;
 80043b8:	2400      	movs	r4, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  ep->xfer_fill_db = 1U;
 80043be:	f88c 004c 	strb.w	r0, [ip, #76]	; 0x4c
  ep->is_in = 1U;
 80043c2:	f88c 0029 	strb.w	r0, [ip, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 80043c6:	f88c 1028 	strb.w	r1, [ip, #40]	; 0x28
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80043ca:	f8de 0000 	ldr.w	r0, [lr]
  ep->xfer_buff = pBuf;
 80043ce:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
  ep->xfer_count = 0U;
 80043d2:	f8cc 4044 	str.w	r4, [ip, #68]	; 0x44
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80043d6:	eb0e 01c3 	add.w	r1, lr, r3, lsl #3
 80043da:	f001 fca5 	bl	8005d28 <USB_EPStartXfer>
}
 80043de:	4620      	mov	r0, r4
 80043e0:	bd10      	pop	{r4, pc}
 80043e2:	bf00      	nop

080043e4 <HAL_PCD_EP_SetStall>:
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80043e4:	6842      	ldr	r2, [r0, #4]
 80043e6:	f001 0307 	and.w	r3, r1, #7
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d830      	bhi.n	8004450 <HAL_PCD_EP_SetStall+0x6c>
  if ((0x80U & ep_addr) == 0x80U)
 80043ee:	060a      	lsls	r2, r1, #24
{
 80043f0:	b510      	push	{r4, lr}
 80043f2:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80043f4:	d41b      	bmi.n	800442e <HAL_PCD_EP_SetStall+0x4a>
    ep->is_in = 0U;
 80043f6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 80043fa:	2028      	movs	r0, #40	; 0x28
 80043fc:	fb00 4101 	mla	r1, r0, r1, r4
    ep->is_in = 0U;
 8004400:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 8004404:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8004408:	2000      	movs	r0, #0
 800440a:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 1U;
 800440e:	2201      	movs	r2, #1
 8004410:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004412:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8004414:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8004418:	4293      	cmp	r3, r2
 800441a:	d017      	beq.n	800444c <HAL_PCD_EP_SetStall+0x68>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800441c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800441e:	f884 22a8 	strb.w	r2, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004422:	f001 ff6d 	bl	8006300 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 8004426:	2000      	movs	r0, #0
 8004428:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800442c:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800442e:	1c5a      	adds	r2, r3, #1
    ep->is_in = 1U;
 8004430:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004434:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004438:	4611      	mov	r1, r2
    ep->is_in = 1U;
 800443a:	2001      	movs	r0, #1
 800443c:	7050      	strb	r0, [r2, #1]
  ep->is_stall = 1U;
 800443e:	2201      	movs	r2, #1
 8004440:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004442:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8004444:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8004448:	4293      	cmp	r3, r2
 800444a:	d1e7      	bne.n	800441c <HAL_PCD_EP_SetStall+0x38>
 800444c:	2002      	movs	r0, #2
}
 800444e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004450:	2001      	movs	r0, #1
}
 8004452:	4770      	bx	lr

08004454 <HAL_PCD_EP_ClrStall>:
{
 8004454:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004456:	6843      	ldr	r3, [r0, #4]
 8004458:	f001 020f 	and.w	r2, r1, #15
 800445c:	429a      	cmp	r2, r3
 800445e:	d832      	bhi.n	80044c6 <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 8004460:	060a      	lsls	r2, r1, #24
 8004462:	4604      	mov	r4, r0
 8004464:	f001 0307 	and.w	r3, r1, #7
 8004468:	d41c      	bmi.n	80044a4 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800446a:	2128      	movs	r1, #40	; 0x28
 800446c:	fb01 0103 	mla	r1, r1, r3, r0
    ep->is_in = 0U;
 8004470:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004474:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004478:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 800447c:	2000      	movs	r0, #0
  ep->is_stall = 0U;
 800447e:	2500      	movs	r5, #0
    ep->is_in = 0U;
 8004480:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 8004484:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004486:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8004488:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800448c:	2b01      	cmp	r3, #1
 800448e:	d018      	beq.n	80044c2 <HAL_PCD_EP_ClrStall+0x6e>
 8004490:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004492:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8004494:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004498:	f001 ff5a 	bl	8006350 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800449c:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 80044a0:	4628      	mov	r0, r5
}
 80044a2:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044a4:	1c5a      	adds	r2, r3, #1
    ep->is_in = 1U;
 80044a6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80044aa:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044ae:	4611      	mov	r1, r2
    ep->is_in = 1U;
 80044b0:	2001      	movs	r0, #1
  ep->is_stall = 0U;
 80044b2:	2500      	movs	r5, #0
    ep->is_in = 1U;
 80044b4:	7050      	strb	r0, [r2, #1]
  ep->is_stall = 0U;
 80044b6:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044b8:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80044ba:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d1e6      	bne.n	8004490 <HAL_PCD_EP_ClrStall+0x3c>
 80044c2:	2002      	movs	r0, #2
}
 80044c4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80044c6:	2001      	movs	r0, #1
}
 80044c8:	bd38      	pop	{r3, r4, r5, pc}
 80044ca:	bf00      	nop

080044cc <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80044cc:	f011 0f80 	tst.w	r1, #128	; 0x80
 80044d0:	d00b      	beq.n	80044ea <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044d2:	f001 0107 	and.w	r1, r1, #7
 80044d6:	3101      	adds	r1, #1
 80044d8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80044dc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80044e0:	b95a      	cbnz	r2, 80044fa <HAL_PCDEx_PMAConfig+0x2e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80044e2:	80cb      	strh	r3, [r1, #6]
 80044e4:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80044e6:	2000      	movs	r0, #0
 80044e8:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 80044ea:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80044ee:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80044f2:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
 80044f6:	2a00      	cmp	r2, #0
 80044f8:	d0f3      	beq.n	80044e2 <HAL_PCDEx_PMAConfig+0x16>
    ep->doublebuffer = 1U;
 80044fa:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80044fc:	608b      	str	r3, [r1, #8]
 80044fe:	730a      	strb	r2, [r1, #12]
}
 8004500:	2000      	movs	r0, #0
 8004502:	4770      	bx	lr

08004504 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8004504:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 8004506:	2100      	movs	r1, #0
{
 8004508:	b410      	push	{r4}
  hpcd->LPM_State = LPM_L0;
 800450a:	f880 12e0 	strb.w	r1, [r0, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800450e:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
  hpcd->lpm_active = 1U;
 8004512:	2401      	movs	r4, #1
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004514:	b29b      	uxth	r3, r3
 8004516:	4323      	orrs	r3, r4
  hpcd->lpm_active = 1U;
 8004518:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800451c:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004520:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8004524:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004528:	b29b      	uxth	r3, r3
 800452a:	f043 0302 	orr.w	r3, r3, #2
}
 800452e:	4608      	mov	r0, r1
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004530:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
}
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop

08004538 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004538:	4a02      	ldr	r2, [pc, #8]	; (8004544 <HAL_PWR_EnableBkUpAccess+0xc>)
 800453a:	6813      	ldr	r3, [r2, #0]
 800453c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004540:	6013      	str	r3, [r2, #0]
}
 8004542:	4770      	bx	lr
 8004544:	58000400 	.word	0x58000400

08004548 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004548:	4b02      	ldr	r3, [pc, #8]	; (8004554 <HAL_PWREx_GetVoltageRange+0xc>)
 800454a:	6818      	ldr	r0, [r3, #0]
}
 800454c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	58000400 	.word	0x58000400

08004558 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004558:	4a02      	ldr	r2, [pc, #8]	; (8004564 <HAL_PWREx_EnableVddUSB+0xc>)
 800455a:	6853      	ldr	r3, [r2, #4]
 800455c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004560:	6053      	str	r3, [r2, #4]
}
 8004562:	4770      	bx	lr
 8004564:	58000400 	.word	0x58000400

08004568 <RCC_SetFlashLatencyFromMSIRange>:

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004568:	28b0      	cmp	r0, #176	; 0xb0
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800456a:	4b31      	ldr	r3, [pc, #196]	; (8004630 <RCC_SetFlashLatencyFromMSIRange+0xc8>)
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800456c:	4a31      	ldr	r2, [pc, #196]	; (8004634 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800456e:	bf98      	it	ls
 8004570:	0900      	lsrls	r0, r0, #4
{
 8004572:	b570      	push	{r4, r5, r6, lr}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004574:	bf8c      	ite	hi
 8004576:	6adc      	ldrhi	r4, [r3, #44]	; 0x2c
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004578:	f853 4020 	ldrls.w	r4, [r3, r0, lsl #2]
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800457c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8004580:	b084      	sub	sp, #16
 8004582:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004586:	f003 030f 	and.w	r3, r3, #15
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800458a:	ae04      	add	r6, sp, #16
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800458c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004590:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004594:	f7ff ffd8 	bl	8004548 <HAL_PWREx_GetVoltageRange>
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004598:	4b27      	ldr	r3, [pc, #156]	; (8004638 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800459a:	4605      	mov	r5, r0
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800459c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800459e:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80045a2:	e906 000f 	stmdb	r6, {r0, r1, r2, r3}
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045a6:	d029      	beq.n	80045fc <RCC_SetFlashLatencyFromMSIRange+0x94>
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80045a8:	4b24      	ldr	r3, [pc, #144]	; (800463c <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80045aa:	429c      	cmp	r4, r3
 80045ac:	d33a      	bcc.n	8004624 <RCC_SetFlashLatencyFromMSIRange+0xbc>
 80045ae:	f503 03b7 	add.w	r3, r3, #5996544	; 0x5b8000
 80045b2:	f603 537f 	addw	r3, r3, #3455	; 0xd7f
 80045b6:	429c      	cmp	r4, r3
 80045b8:	d936      	bls.n	8004628 <RCC_SetFlashLatencyFromMSIRange+0xc0>
 80045ba:	f503 1374 	add.w	r3, r3, #3997696	; 0x3d0000
 80045be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c2:	429c      	cmp	r4, r3
 80045c4:	d932      	bls.n	800462c <RCC_SetFlashLatencyFromMSIRange+0xc4>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80045c6:	2600      	movs	r6, #0
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80045c8:	4c1d      	ldr	r4, [pc, #116]	; (8004640 <RCC_SetFlashLatencyFromMSIRange+0xd8>)
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	f023 0307 	bic.w	r3, r3, #7
 80045d0:	4333      	orrs	r3, r6
 80045d2:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80045d4:	f7fe fe24 	bl	8003220 <HAL_GetTick>
 80045d8:	4605      	mov	r5, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80045da:	e004      	b.n	80045e6 <RCC_SetFlashLatencyFromMSIRange+0x7e>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80045dc:	f7fe fe20 	bl	8003220 <HAL_GetTick>
 80045e0:	1b40      	subs	r0, r0, r5
 80045e2:	2802      	cmp	r0, #2
 80045e4:	d807      	bhi.n	80045f6 <RCC_SetFlashLatencyFromMSIRange+0x8e>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	429e      	cmp	r6, r3
 80045ee:	d1f5      	bne.n	80045dc <RCC_SetFlashLatencyFromMSIRange+0x74>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80045f0:	2000      	movs	r0, #0
}
 80045f2:	b004      	add	sp, #16
 80045f4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 80045f6:	2003      	movs	r0, #3
}
 80045f8:	b004      	add	sp, #16
 80045fa:	bd70      	pop	{r4, r5, r6, pc}
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80045fc:	4b11      	ldr	r3, [pc, #68]	; (8004644 <RCC_SetFlashLatencyFromMSIRange+0xdc>)
 80045fe:	429c      	cmp	r4, r3
 8004600:	d910      	bls.n	8004624 <RCC_SetFlashLatencyFromMSIRange+0xbc>
 8004602:	4b11      	ldr	r3, [pc, #68]	; (8004648 <RCC_SetFlashLatencyFromMSIRange+0xe0>)
 8004604:	429c      	cmp	r4, r3
 8004606:	d90f      	bls.n	8004628 <RCC_SetFlashLatencyFromMSIRange+0xc0>
 8004608:	4b10      	ldr	r3, [pc, #64]	; (800464c <RCC_SetFlashLatencyFromMSIRange+0xe4>)
 800460a:	429c      	cmp	r4, r3
 800460c:	d90e      	bls.n	800462c <RCC_SetFlashLatencyFromMSIRange+0xc4>
 800460e:	4b10      	ldr	r3, [pc, #64]	; (8004650 <RCC_SetFlashLatencyFromMSIRange+0xe8>)
 8004610:	429c      	cmp	r4, r3
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004612:	bf38      	it	cc
 8004614:	2303      	movcc	r3, #3
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004616:	d2d6      	bcs.n	80045c6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
        latency = FLASH_LATENCY_RANGE[index];
 8004618:	aa04      	add	r2, sp, #16
 800461a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800461e:	f853 6c10 	ldr.w	r6, [r3, #-16]
        break;
 8004622:	e7d1      	b.n	80045c8 <RCC_SetFlashLatencyFromMSIRange+0x60>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004624:	2300      	movs	r3, #0
 8004626:	e7f7      	b.n	8004618 <RCC_SetFlashLatencyFromMSIRange+0xb0>
 8004628:	2301      	movs	r3, #1
 800462a:	e7f5      	b.n	8004618 <RCC_SetFlashLatencyFromMSIRange+0xb0>
 800462c:	2302      	movs	r3, #2
 800462e:	e7f3      	b.n	8004618 <RCC_SetFlashLatencyFromMSIRange+0xb0>
 8004630:	0800ddd4 	.word	0x0800ddd4
 8004634:	0800dd94 	.word	0x0800dd94
 8004638:	0800c3f0 	.word	0x0800c3f0
 800463c:	006acfc0 	.word	0x006acfc0
 8004640:	58004000 	.word	0x58004000
 8004644:	0121eabf 	.word	0x0121eabf
 8004648:	0234933f 	.word	0x0234933f
 800464c:	03473bbf 	.word	0x03473bbf
 8004650:	03dfd240 	.word	0x03dfd240

08004654 <HAL_RCC_GetSysClockFreq.part.0>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004654:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
uint32_t HAL_RCC_GetSysClockFreq(void)
 8004658:	b410      	push	{r4}
 800465a:	68d3      	ldr	r3, [r2, #12]
 800465c:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8004660:	2b02      	cmp	r3, #2
 8004662:	d01d      	beq.n	80046a0 <HAL_RCC_GetSysClockFreq.part.0+0x4c>
 8004664:	2b03      	cmp	r3, #3
 8004666:	d11d      	bne.n	80046a4 <HAL_RCC_GetSysClockFreq.part.0+0x50>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004668:	6812      	ldr	r2, [r2, #0]
          pllinputfreq = HSE_VALUE / 2U;
 800466a:	4b14      	ldr	r3, [pc, #80]	; (80046bc <HAL_RCC_GetSysClockFreq.part.0+0x68>)
 800466c:	4c14      	ldr	r4, [pc, #80]	; (80046c0 <HAL_RCC_GetSysClockFreq.part.0+0x6c>)
 800466e:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8004672:	bf08      	it	eq
 8004674:	461c      	moveq	r4, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004676:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800467a:	68cb      	ldr	r3, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800467c:	68ca      	ldr	r2, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800467e:	68c8      	ldr	r0, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004680:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004684:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8004688:	0f40      	lsrs	r0, r0, #29
 800468a:	fb04 f303 	mul.w	r3, r4, r3
 800468e:	3201      	adds	r2, #1
 8004690:	3001      	adds	r0, #1
 8004692:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8004696:	f85d 4b04 	ldr.w	r4, [sp], #4
 800469a:	fbb3 f0f0 	udiv	r0, r3, r0
 800469e:	4770      	bx	lr
    switch (pllsource)
 80046a0:	4c08      	ldr	r4, [pc, #32]	; (80046c4 <HAL_RCC_GetSysClockFreq.part.0+0x70>)
 80046a2:	e7e8      	b.n	8004676 <HAL_RCC_GetSysClockFreq.part.0+0x22>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80046a4:	6813      	ldr	r3, [r2, #0]
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80046a6:	4a08      	ldr	r2, [pc, #32]	; (80046c8 <HAL_RCC_GetSysClockFreq.part.0+0x74>)
 80046a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046ac:	2bb0      	cmp	r3, #176	; 0xb0
 80046ae:	bf28      	it	cs
 80046b0:	23b0      	movcs	r3, #176	; 0xb0
 80046b2:	091b      	lsrs	r3, r3, #4
 80046b4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
        break;
 80046b8:	e7dd      	b.n	8004676 <HAL_RCC_GetSysClockFreq.part.0+0x22>
 80046ba:	bf00      	nop
 80046bc:	007a1200 	.word	0x007a1200
 80046c0:	003d0900 	.word	0x003d0900
 80046c4:	00f42400 	.word	0x00f42400
 80046c8:	0800ddd4 	.word	0x0800ddd4

080046cc <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80046cc:	2800      	cmp	r0, #0
 80046ce:	f000 82bb 	beq.w	8004c48 <HAL_RCC_OscConfig+0x57c>
{
 80046d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80046d4:	6803      	ldr	r3, [r0, #0]
 80046d6:	069a      	lsls	r2, r3, #26
 80046d8:	4604      	mov	r4, r0
 80046da:	d529      	bpl.n	8004730 <HAL_RCC_OscConfig+0x64>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80046dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046e0:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80046e2:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80046e4:	f013 030c 	ands.w	r3, r3, #12
 80046e8:	f000 80f9 	beq.w	80048de <HAL_RCC_OscConfig+0x212>
 80046ec:	2b0c      	cmp	r3, #12
 80046ee:	f000 80f1 	beq.w	80048d4 <HAL_RCC_OscConfig+0x208>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80046f2:	69e3      	ldr	r3, [r4, #28]
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80046f4:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 8276 	beq.w	8004bea <HAL_RCC_OscConfig+0x51e>
 80046fe:	682b      	ldr	r3, [r5, #0]
 8004700:	f043 0301 	orr.w	r3, r3, #1
 8004704:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004706:	f7fe fd8b 	bl	8003220 <HAL_GetTick>
 800470a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800470c:	682b      	ldr	r3, [r5, #0]
 800470e:	079b      	lsls	r3, r3, #30
 8004710:	f140 827c 	bpl.w	8004c0c <HAL_RCC_OscConfig+0x540>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004714:	682b      	ldr	r3, [r5, #0]
 8004716:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004718:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800471c:	4313      	orrs	r3, r2
 800471e:	602b      	str	r3, [r5, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004720:	686b      	ldr	r3, [r5, #4]
 8004722:	6a22      	ldr	r2, [r4, #32]
 8004724:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004728:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800472c:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800472e:	6823      	ldr	r3, [r4, #0]
 8004730:	07dd      	lsls	r5, r3, #31
 8004732:	d527      	bpl.n	8004784 <HAL_RCC_OscConfig+0xb8>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004734:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004738:	688a      	ldr	r2, [r1, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800473a:	68c9      	ldr	r1, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800473c:	f002 020c 	and.w	r2, r2, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004740:	2a08      	cmp	r2, #8
 8004742:	f000 81f1 	beq.w	8004b28 <HAL_RCC_OscConfig+0x45c>
 8004746:	2a0c      	cmp	r2, #12
 8004748:	f000 81e9 	beq.w	8004b1e <HAL_RCC_OscConfig+0x452>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800474c:	6863      	ldr	r3, [r4, #4]
 800474e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004752:	f000 8235 	beq.w	8004bc0 <HAL_RCC_OscConfig+0x4f4>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004756:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800475a:	682a      	ldr	r2, [r5, #0]
 800475c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004760:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004762:	2b00      	cmp	r3, #0
 8004764:	f040 8232 	bne.w	8004bcc <HAL_RCC_OscConfig+0x500>
        tickstart = HAL_GetTick();
 8004768:	f7fe fd5a 	bl	8003220 <HAL_GetTick>
 800476c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800476e:	682b      	ldr	r3, [r5, #0]
 8004770:	0399      	lsls	r1, r3, #14
 8004772:	d506      	bpl.n	8004782 <HAL_RCC_OscConfig+0xb6>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004774:	f7fe fd54 	bl	8003220 <HAL_GetTick>
 8004778:	1b80      	subs	r0, r0, r6
 800477a:	2864      	cmp	r0, #100	; 0x64
 800477c:	d9f7      	bls.n	800476e <HAL_RCC_OscConfig+0xa2>
            return HAL_TIMEOUT;
 800477e:	2003      	movs	r0, #3
}
 8004780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	079a      	lsls	r2, r3, #30
 8004786:	d52c      	bpl.n	80047e2 <HAL_RCC_OscConfig+0x116>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004788:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800478c:	688a      	ldr	r2, [r1, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800478e:	68c9      	ldr	r1, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004790:	f002 020c 	and.w	r2, r2, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004794:	2a04      	cmp	r2, #4
 8004796:	f000 8120 	beq.w	80049da <HAL_RCC_OscConfig+0x30e>
 800479a:	2a0c      	cmp	r2, #12
 800479c:	f000 8118 	beq.w	80049d0 <HAL_RCC_OscConfig+0x304>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047a0:	68e3      	ldr	r3, [r4, #12]
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80047a2:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80047a6:	b183      	cbz	r3, 80047ca <HAL_RCC_OscConfig+0xfe>
 80047a8:	682b      	ldr	r3, [r5, #0]
 80047aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047ae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80047b0:	f7fe fd36 	bl	8003220 <HAL_GetTick>
 80047b4:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80047b6:	682b      	ldr	r3, [r5, #0]
 80047b8:	055b      	lsls	r3, r3, #21
 80047ba:	f100 8235 	bmi.w	8004c28 <HAL_RCC_OscConfig+0x55c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047be:	f7fe fd2f 	bl	8003220 <HAL_GetTick>
 80047c2:	1b80      	subs	r0, r0, r6
 80047c4:	2802      	cmp	r0, #2
 80047c6:	d9f6      	bls.n	80047b6 <HAL_RCC_OscConfig+0xea>
 80047c8:	e7d9      	b.n	800477e <HAL_RCC_OscConfig+0xb2>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80047ca:	682b      	ldr	r3, [r5, #0]
 80047cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047d0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80047d2:	f7fe fd25 	bl	8003220 <HAL_GetTick>
 80047d6:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80047d8:	682b      	ldr	r3, [r5, #0]
 80047da:	055f      	lsls	r7, r3, #21
 80047dc:	f100 822d 	bmi.w	8004c3a <HAL_RCC_OscConfig+0x56e>
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	f013 0f18 	tst.w	r3, #24
 80047e6:	d023      	beq.n	8004830 <HAL_RCC_OscConfig+0x164>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047e8:	6962      	ldr	r2, [r4, #20]
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80047ea:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80047ee:	2a00      	cmp	r2, #0
 80047f0:	f000 8100 	beq.w	80049f4 <HAL_RCC_OscConfig+0x328>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80047f4:	f013 0f10 	tst.w	r3, #16
 80047f8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80047fc:	f000 8238 	beq.w	8004c70 <HAL_RCC_OscConfig+0x5a4>
 8004800:	0798      	lsls	r0, r3, #30
 8004802:	f100 81a5 	bmi.w	8004b50 <HAL_RCC_OscConfig+0x484>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004806:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800480a:	f043 0301 	orr.w	r3, r3, #1
 800480e:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
          tickstart = HAL_GetTick();
 8004812:	f7fe fd05 	bl	8003220 <HAL_GetTick>
 8004816:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004818:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800481c:	0799      	lsls	r1, r3, #30
 800481e:	f100 8197 	bmi.w	8004b50 <HAL_RCC_OscConfig+0x484>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004822:	f7fe fcfd 	bl	8003220 <HAL_GetTick>
 8004826:	1b80      	subs	r0, r0, r6
 8004828:	2802      	cmp	r0, #2
 800482a:	d9f5      	bls.n	8004818 <HAL_RCC_OscConfig+0x14c>
 800482c:	e7a7      	b.n	800477e <HAL_RCC_OscConfig+0xb2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	075a      	lsls	r2, r3, #29
 8004832:	d422      	bmi.n	800487a <HAL_RCC_OscConfig+0x1ae>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004834:	065a      	lsls	r2, r3, #25
 8004836:	d51b      	bpl.n	8004870 <HAL_RCC_OscConfig+0x1a4>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004838:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800483a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 80b2 	beq.w	80049a8 <HAL_RCC_OscConfig+0x2dc>
 8004844:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004848:	f043 0301 	orr.w	r3, r3, #1
 800484c:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004850:	f7fe fce6 	bl	8003220 <HAL_GetTick>
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004854:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004858:	079b      	lsls	r3, r3, #30
 800485a:	4606      	mov	r6, r0
 800485c:	d408      	bmi.n	8004870 <HAL_RCC_OscConfig+0x1a4>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800485e:	f7fe fcdf 	bl	8003220 <HAL_GetTick>
 8004862:	1b80      	subs	r0, r0, r6
 8004864:	2802      	cmp	r0, #2
 8004866:	d88a      	bhi.n	800477e <HAL_RCC_OscConfig+0xb2>
 8004868:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800486c:	079b      	lsls	r3, r3, #30
 800486e:	d5f6      	bpl.n	800485e <HAL_RCC_OscConfig+0x192>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004870:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004872:	2b00      	cmp	r3, #0
 8004874:	d176      	bne.n	8004964 <HAL_RCC_OscConfig+0x298>
  return HAL_OK;
 8004876:	2000      	movs	r0, #0
}
 8004878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800487a:	4daf      	ldr	r5, [pc, #700]	; (8004b38 <HAL_RCC_OscConfig+0x46c>)
 800487c:	682b      	ldr	r3, [r5, #0]
 800487e:	05db      	lsls	r3, r3, #23
 8004880:	f140 80dc 	bpl.w	8004a3c <HAL_RCC_OscConfig+0x370>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004884:	68a3      	ldr	r3, [r4, #8]
 8004886:	2b01      	cmp	r3, #1
 8004888:	f000 8130 	beq.w	8004aec <HAL_RCC_OscConfig+0x420>
 800488c:	2b05      	cmp	r3, #5
 800488e:	f000 821e 	beq.w	8004cce <HAL_RCC_OscConfig+0x602>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004892:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8004896:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 800489a:	f022 0201 	bic.w	r2, r2, #1
 800489e:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80048a2:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 80048a6:	f022 0204 	bic.w	r2, r2, #4
 80048aa:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f040 8124 	bne.w	8004afc <HAL_RCC_OscConfig+0x430>
      tickstart = HAL_GetTick();
 80048b4:	f7fe fcb4 	bl	8003220 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b8:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80048bc:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80048be:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80048c2:	0799      	lsls	r1, r3, #30
 80048c4:	f140 8135 	bpl.w	8004b32 <HAL_RCC_OscConfig+0x466>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048c8:	f7fe fcaa 	bl	8003220 <HAL_GetTick>
 80048cc:	1b80      	subs	r0, r0, r6
 80048ce:	42b8      	cmp	r0, r7
 80048d0:	d9f5      	bls.n	80048be <HAL_RCC_OscConfig+0x1f2>
 80048d2:	e754      	b.n	800477e <HAL_RCC_OscConfig+0xb2>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80048d4:	f002 0203 	and.w	r2, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80048d8:	2a01      	cmp	r2, #1
 80048da:	f47f af0a 	bne.w	80046f2 <HAL_RCC_OscConfig+0x26>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80048de:	69e3      	ldr	r3, [r4, #28]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d03d      	beq.n	8004960 <HAL_RCC_OscConfig+0x294>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80048e4:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80048e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80048ea:	682b      	ldr	r3, [r5, #0]
 80048ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048f0:	2bb0      	cmp	r3, #176	; 0xb0
 80048f2:	bf28      	it	cs
 80048f4:	23b0      	movcs	r3, #176	; 0xb0
 80048f6:	4298      	cmp	r0, r3
 80048f8:	f240 81a8 	bls.w	8004c4c <HAL_RCC_OscConfig+0x580>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048fc:	f7ff fe34 	bl	8004568 <RCC_SetFlashLatencyFromMSIRange>
 8004900:	bb70      	cbnz	r0, 8004960 <HAL_RCC_OscConfig+0x294>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004902:	682b      	ldr	r3, [r5, #0]
 8004904:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004906:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800490a:	4313      	orrs	r3, r2
 800490c:	602b      	str	r3, [r5, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800490e:	686b      	ldr	r3, [r5, #4]
 8004910:	6a22      	ldr	r2, [r4, #32]
 8004912:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004916:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800491a:	606b      	str	r3, [r5, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800491c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004920:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004922:	f013 030c 	ands.w	r3, r3, #12
 8004926:	f000 81c7 	beq.w	8004cb8 <HAL_RCC_OscConfig+0x5ec>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800492a:	2b04      	cmp	r3, #4
 800492c:	f000 821d 	beq.w	8004d6a <HAL_RCC_OscConfig+0x69e>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004930:	2b08      	cmp	r3, #8
 8004932:	f000 8212 	beq.w	8004d5a <HAL_RCC_OscConfig+0x68e>
 8004936:	f7ff fe8d 	bl	8004654 <HAL_RCC_GetSysClockFreq.part.0>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800493a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800493e:	497f      	ldr	r1, [pc, #508]	; (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004940:	689b      	ldr	r3, [r3, #8]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004942:	4a7f      	ldr	r2, [pc, #508]	; (8004b40 <HAL_RCC_OscConfig+0x474>)
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004944:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004948:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800494c:	497d      	ldr	r1, [pc, #500]	; (8004b44 <HAL_RCC_OscConfig+0x478>)
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800494e:	fbb0 f3f3 	udiv	r3, r0, r3
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004952:	6808      	ldr	r0, [r1, #0]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004954:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004956:	f7fe fc19 	bl	800318c <HAL_InitTick>
 800495a:	2800      	cmp	r0, #0
 800495c:	f43f aee7 	beq.w	800472e <HAL_RCC_OscConfig+0x62>
          return HAL_ERROR;
 8004960:	2001      	movs	r0, #1
}
 8004962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004964:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004968:	2b02      	cmp	r3, #2
 800496a:	68aa      	ldr	r2, [r5, #8]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800496c:	68e9      	ldr	r1, [r5, #12]
 800496e:	f002 020c 	and.w	r2, r2, #12
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004972:	d073      	beq.n	8004a5c <HAL_RCC_OscConfig+0x390>
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004974:	2a0c      	cmp	r2, #12
 8004976:	d0f3      	beq.n	8004960 <HAL_RCC_OscConfig+0x294>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004978:	682b      	ldr	r3, [r5, #0]
 800497a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800497e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004980:	f7fe fc4e 	bl	8003220 <HAL_GetTick>
 8004984:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004986:	e005      	b.n	8004994 <HAL_RCC_OscConfig+0x2c8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004988:	f7fe fc4a 	bl	8003220 <HAL_GetTick>
 800498c:	1b00      	subs	r0, r0, r4
 800498e:	2802      	cmp	r0, #2
 8004990:	f63f aef5 	bhi.w	800477e <HAL_RCC_OscConfig+0xb2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004994:	682b      	ldr	r3, [r5, #0]
 8004996:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 800499a:	d1f5      	bne.n	8004988 <HAL_RCC_OscConfig+0x2bc>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800499c:	68e9      	ldr	r1, [r5, #12]
 800499e:	4a6a      	ldr	r2, [pc, #424]	; (8004b48 <HAL_RCC_OscConfig+0x47c>)
 80049a0:	400a      	ands	r2, r1
  return HAL_OK;
 80049a2:	4618      	mov	r0, r3
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80049a4:	60ea      	str	r2, [r5, #12]
}
 80049a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80049a8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80049ac:	f023 0301 	bic.w	r3, r3, #1
 80049b0:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 80049b4:	f7fe fc34 	bl	8003220 <HAL_GetTick>
 80049b8:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80049ba:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80049be:	079f      	lsls	r7, r3, #30
 80049c0:	f57f af56 	bpl.w	8004870 <HAL_RCC_OscConfig+0x1a4>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049c4:	f7fe fc2c 	bl	8003220 <HAL_GetTick>
 80049c8:	1b80      	subs	r0, r0, r6
 80049ca:	2802      	cmp	r0, #2
 80049cc:	d9f5      	bls.n	80049ba <HAL_RCC_OscConfig+0x2ee>
 80049ce:	e6d6      	b.n	800477e <HAL_RCC_OscConfig+0xb2>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80049d0:	f001 0103 	and.w	r1, r1, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80049d4:	2902      	cmp	r1, #2
 80049d6:	f47f aee3 	bne.w	80047a0 <HAL_RCC_OscConfig+0xd4>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80049da:	68e2      	ldr	r2, [r4, #12]
 80049dc:	2a00      	cmp	r2, #0
 80049de:	d0bf      	beq.n	8004960 <HAL_RCC_OscConfig+0x294>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80049e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049e4:	6920      	ldr	r0, [r4, #16]
 80049e6:	684a      	ldr	r2, [r1, #4]
 80049e8:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 80049ec:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80049f0:	604a      	str	r2, [r1, #4]
}
 80049f2:	e6f6      	b.n	80047e2 <HAL_RCC_OscConfig+0x116>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80049f4:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80049f8:	f023 0304 	bic.w	r3, r3, #4
 80049fc:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004a00:	f7fe fc0e 	bl	8003220 <HAL_GetTick>
 8004a04:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004a06:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004a0a:	0718      	lsls	r0, r3, #28
 8004a0c:	f100 8105 	bmi.w	8004c1a <HAL_RCC_OscConfig+0x54e>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004a10:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004a14:	f023 0301 	bic.w	r3, r3, #1
 8004a18:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004a1c:	f7fe fc00 	bl	8003220 <HAL_GetTick>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004a20:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8004a24:	4605      	mov	r5, r0
 8004a26:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8004a2a:	0799      	lsls	r1, r3, #30
 8004a2c:	f57f aeff 	bpl.w	800482e <HAL_RCC_OscConfig+0x162>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004a30:	f7fe fbf6 	bl	8003220 <HAL_GetTick>
 8004a34:	1b40      	subs	r0, r0, r5
 8004a36:	2802      	cmp	r0, #2
 8004a38:	d9f5      	bls.n	8004a26 <HAL_RCC_OscConfig+0x35a>
 8004a3a:	e6a0      	b.n	800477e <HAL_RCC_OscConfig+0xb2>
      HAL_PWR_EnableBkUpAccess();
 8004a3c:	f7ff fd7c 	bl	8004538 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8004a40:	f7fe fbee 	bl	8003220 <HAL_GetTick>
 8004a44:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a46:	e005      	b.n	8004a54 <HAL_RCC_OscConfig+0x388>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a48:	f7fe fbea 	bl	8003220 <HAL_GetTick>
 8004a4c:	1b80      	subs	r0, r0, r6
 8004a4e:	2802      	cmp	r0, #2
 8004a50:	f63f ae95 	bhi.w	800477e <HAL_RCC_OscConfig+0xb2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a54:	682b      	ldr	r3, [r5, #0]
 8004a56:	05df      	lsls	r7, r3, #23
 8004a58:	d5f6      	bpl.n	8004a48 <HAL_RCC_OscConfig+0x37c>
 8004a5a:	e713      	b.n	8004884 <HAL_RCC_OscConfig+0x1b8>
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a5c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004a5e:	f001 0303 	and.w	r3, r1, #3
 8004a62:	4283      	cmp	r3, r0
 8004a64:	f000 8142 	beq.w	8004cec <HAL_RCC_OscConfig+0x620>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a68:	2a0c      	cmp	r2, #12
 8004a6a:	f43f af79 	beq.w	8004960 <HAL_RCC_OscConfig+0x294>
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a6e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8004a72:	682b      	ldr	r3, [r5, #0]
 8004a74:	015e      	lsls	r6, r3, #5
 8004a76:	f53f af73 	bmi.w	8004960 <HAL_RCC_OscConfig+0x294>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004a7a:	682b      	ldr	r3, [r5, #0]
 8004a7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a80:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8004a82:	f7fe fbcd 	bl	8003220 <HAL_GetTick>
 8004a86:	4606      	mov	r6, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a88:	e005      	b.n	8004a96 <HAL_RCC_OscConfig+0x3ca>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a8a:	f7fe fbc9 	bl	8003220 <HAL_GetTick>
 8004a8e:	1b80      	subs	r0, r0, r6
 8004a90:	2802      	cmp	r0, #2
 8004a92:	f63f ae74 	bhi.w	800477e <HAL_RCC_OscConfig+0xb2>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a96:	682b      	ldr	r3, [r5, #0]
 8004a98:	0198      	lsls	r0, r3, #6
 8004a9a:	d4f6      	bmi.n	8004a8a <HAL_RCC_OscConfig+0x3be>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a9c:	e9d4 320c 	ldrd	r3, r2, [r4, #48]	; 0x30
 8004aa0:	68e9      	ldr	r1, [r5, #12]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	4a29      	ldr	r2, [pc, #164]	; (8004b4c <HAL_RCC_OscConfig+0x480>)
 8004aa6:	400a      	ands	r2, r1
 8004aa8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	430b      	orrs	r3, r1
 8004aae:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	; 0x40
 8004ab2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004ab4:	4303      	orrs	r3, r0
 8004ab6:	430b      	orrs	r3, r1
 8004ab8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004abc:	60eb      	str	r3, [r5, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004abe:	682b      	ldr	r3, [r5, #0]
 8004ac0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ac4:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ac6:	68eb      	ldr	r3, [r5, #12]
 8004ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004acc:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 8004ace:	f7fe fba7 	bl	8003220 <HAL_GetTick>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ad2:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
            tickstart = HAL_GetTick();
 8004ad6:	4604      	mov	r4, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ad8:	6833      	ldr	r3, [r6, #0]
 8004ada:	0199      	lsls	r1, r3, #6
 8004adc:	f53f aecb 	bmi.w	8004876 <HAL_RCC_OscConfig+0x1aa>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae0:	f7fe fb9e 	bl	8003220 <HAL_GetTick>
 8004ae4:	1b00      	subs	r0, r0, r4
 8004ae6:	2802      	cmp	r0, #2
 8004ae8:	d9f6      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x40c>
 8004aea:	e648      	b.n	800477e <HAL_RCC_OscConfig+0xb2>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004aec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004af0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004af4:	f043 0301 	orr.w	r3, r3, #1
 8004af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8004afc:	f7fe fb90 	bl	8003220 <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004b00:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8004b04:	4605      	mov	r5, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b06:	f241 3788 	movw	r7, #5000	; 0x1388
 8004b0a:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8004b0e:	0798      	lsls	r0, r3, #30
 8004b10:	d40f      	bmi.n	8004b32 <HAL_RCC_OscConfig+0x466>
 8004b12:	f7fe fb85 	bl	8003220 <HAL_GetTick>
 8004b16:	1b40      	subs	r0, r0, r5
 8004b18:	42b8      	cmp	r0, r7
 8004b1a:	d9f6      	bls.n	8004b0a <HAL_RCC_OscConfig+0x43e>
 8004b1c:	e62f      	b.n	800477e <HAL_RCC_OscConfig+0xb2>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004b1e:	f001 0103 	and.w	r1, r1, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004b22:	2903      	cmp	r1, #3
 8004b24:	f47f ae12 	bne.w	800474c <HAL_RCC_OscConfig+0x80>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004b28:	6862      	ldr	r2, [r4, #4]
 8004b2a:	2a00      	cmp	r2, #0
 8004b2c:	f47f ae2a 	bne.w	8004784 <HAL_RCC_OscConfig+0xb8>
 8004b30:	e716      	b.n	8004960 <HAL_RCC_OscConfig+0x294>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b32:	6823      	ldr	r3, [r4, #0]
 8004b34:	e67e      	b.n	8004834 <HAL_RCC_OscConfig+0x168>
 8004b36:	bf00      	nop
 8004b38:	58000400 	.word	0x58000400
 8004b3c:	0800dd94 	.word	0x0800dd94
 8004b40:	20000008 	.word	0x20000008
 8004b44:	20000010 	.word	0x20000010
 8004b48:	eefefffc 	.word	0xeefefffc
 8004b4c:	11c1808c 	.word	0x11c1808c
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004b50:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8004b54:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004b58:	f043 0304 	orr.w	r3, r3, #4
 8004b5c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8004b60:	f7fe fb5e 	bl	8003220 <HAL_GetTick>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004b64:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004b68:	071a      	lsls	r2, r3, #28
 8004b6a:	4606      	mov	r6, r0
 8004b6c:	d409      	bmi.n	8004b82 <HAL_RCC_OscConfig+0x4b6>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004b6e:	f7fe fb57 	bl	8003220 <HAL_GetTick>
 8004b72:	1b80      	subs	r0, r0, r6
 8004b74:	2803      	cmp	r0, #3
 8004b76:	f63f ae02 	bhi.w	800477e <HAL_RCC_OscConfig+0xb2>
 8004b7a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004b7e:	071a      	lsls	r2, r3, #28
 8004b80:	d5f5      	bpl.n	8004b6e <HAL_RCC_OscConfig+0x4a2>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004b82:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004b86:	69a2      	ldr	r2, [r4, #24]
 8004b88:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004b8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004b90:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004b94:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004b98:	f023 0301 	bic.w	r3, r3, #1
 8004b9c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8004ba0:	f7fe fb3e 	bl	8003220 <HAL_GetTick>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004ba4:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8004ba8:	4605      	mov	r5, r0
 8004baa:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8004bae:	079b      	lsls	r3, r3, #30
 8004bb0:	f57f ae3d 	bpl.w	800482e <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004bb4:	f7fe fb34 	bl	8003220 <HAL_GetTick>
 8004bb8:	1b40      	subs	r0, r0, r5
 8004bba:	2802      	cmp	r0, #2
 8004bbc:	d9f5      	bls.n	8004baa <HAL_RCC_OscConfig+0x4de>
 8004bbe:	e5de      	b.n	800477e <HAL_RCC_OscConfig+0xb2>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004bc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bc4:	6813      	ldr	r3, [r2, #0]
 8004bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bca:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004bcc:	f7fe fb28 	bl	8003220 <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004bd0:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8004bd4:	4605      	mov	r5, r0
 8004bd6:	6833      	ldr	r3, [r6, #0]
 8004bd8:	0398      	lsls	r0, r3, #14
 8004bda:	f53f add2 	bmi.w	8004782 <HAL_RCC_OscConfig+0xb6>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bde:	f7fe fb1f 	bl	8003220 <HAL_GetTick>
 8004be2:	1b40      	subs	r0, r0, r5
 8004be4:	2864      	cmp	r0, #100	; 0x64
 8004be6:	d9f6      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x50a>
 8004be8:	e5c9      	b.n	800477e <HAL_RCC_OscConfig+0xb2>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004bea:	682b      	ldr	r3, [r5, #0]
 8004bec:	f023 0301 	bic.w	r3, r3, #1
 8004bf0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004bf2:	f7fe fb15 	bl	8003220 <HAL_GetTick>
 8004bf6:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004bf8:	682b      	ldr	r3, [r5, #0]
 8004bfa:	079f      	lsls	r7, r3, #30
 8004bfc:	f57f ad97 	bpl.w	800472e <HAL_RCC_OscConfig+0x62>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c00:	f7fe fb0e 	bl	8003220 <HAL_GetTick>
 8004c04:	1b80      	subs	r0, r0, r6
 8004c06:	2802      	cmp	r0, #2
 8004c08:	d9f6      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x52c>
 8004c0a:	e5b8      	b.n	800477e <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c0c:	f7fe fb08 	bl	8003220 <HAL_GetTick>
 8004c10:	1b80      	subs	r0, r0, r6
 8004c12:	2802      	cmp	r0, #2
 8004c14:	f67f ad7a 	bls.w	800470c <HAL_RCC_OscConfig+0x40>
 8004c18:	e5b1      	b.n	800477e <HAL_RCC_OscConfig+0xb2>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004c1a:	f7fe fb01 	bl	8003220 <HAL_GetTick>
 8004c1e:	1b80      	subs	r0, r0, r6
 8004c20:	2803      	cmp	r0, #3
 8004c22:	f67f aef0 	bls.w	8004a06 <HAL_RCC_OscConfig+0x33a>
 8004c26:	e5aa      	b.n	800477e <HAL_RCC_OscConfig+0xb2>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004c28:	686b      	ldr	r3, [r5, #4]
 8004c2a:	6922      	ldr	r2, [r4, #16]
 8004c2c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004c30:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004c34:	606b      	str	r3, [r5, #4]
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004c36:	6823      	ldr	r3, [r4, #0]
}
 8004c38:	e5d3      	b.n	80047e2 <HAL_RCC_OscConfig+0x116>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c3a:	f7fe faf1 	bl	8003220 <HAL_GetTick>
 8004c3e:	1b80      	subs	r0, r0, r6
 8004c40:	2802      	cmp	r0, #2
 8004c42:	f67f adc9 	bls.w	80047d8 <HAL_RCC_OscConfig+0x10c>
 8004c46:	e59a      	b.n	800477e <HAL_RCC_OscConfig+0xb2>
    return HAL_ERROR;
 8004c48:	2001      	movs	r0, #1
}
 8004c4a:	4770      	bx	lr
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004c4c:	682b      	ldr	r3, [r5, #0]
 8004c4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c52:	4303      	orrs	r3, r0
 8004c54:	602b      	str	r3, [r5, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004c56:	686b      	ldr	r3, [r5, #4]
 8004c58:	6a22      	ldr	r2, [r4, #32]
 8004c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004c62:	606b      	str	r3, [r5, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c64:	f7ff fc80 	bl	8004568 <RCC_SetFlashLatencyFromMSIRange>
 8004c68:	2800      	cmp	r0, #0
 8004c6a:	f43f ae57 	beq.w	800491c <HAL_RCC_OscConfig+0x250>
 8004c6e:	e677      	b.n	8004960 <HAL_RCC_OscConfig+0x294>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004c70:	f043 0301 	orr.w	r3, r3, #1
 8004c74:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8004c78:	f7fe fad2 	bl	8003220 <HAL_GetTick>
 8004c7c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004c7e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004c82:	079f      	lsls	r7, r3, #30
 8004c84:	d405      	bmi.n	8004c92 <HAL_RCC_OscConfig+0x5c6>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004c86:	f7fe facb 	bl	8003220 <HAL_GetTick>
 8004c8a:	1b80      	subs	r0, r0, r6
 8004c8c:	2802      	cmp	r0, #2
 8004c8e:	d9f6      	bls.n	8004c7e <HAL_RCC_OscConfig+0x5b2>
 8004c90:	e575      	b.n	800477e <HAL_RCC_OscConfig+0xb2>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004c92:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004c96:	f023 0304 	bic.w	r3, r3, #4
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004c9a:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004c9e:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004ca2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004ca6:	071d      	lsls	r5, r3, #28
 8004ca8:	f57f adc1 	bpl.w	800482e <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004cac:	f7fe fab8 	bl	8003220 <HAL_GetTick>
 8004cb0:	1b80      	subs	r0, r0, r6
 8004cb2:	2803      	cmp	r0, #3
 8004cb4:	d9f5      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x5d6>
 8004cb6:	e562      	b.n	800477e <HAL_RCC_OscConfig+0xb2>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004cb8:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004cba:	4a2d      	ldr	r2, [pc, #180]	; (8004d70 <HAL_RCC_OscConfig+0x6a4>)
 8004cbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cc0:	2bb0      	cmp	r3, #176	; 0xb0
 8004cc2:	bf28      	it	cs
 8004cc4:	23b0      	movcs	r3, #176	; 0xb0
 8004cc6:	091b      	lsrs	r3, r3, #4
 8004cc8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004ccc:	e635      	b.n	800493a <HAL_RCC_OscConfig+0x26e>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cd2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004cd6:	f042 0204 	orr.w	r2, r2, #4
 8004cda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004cde:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004ce2:	f042 0201 	orr.w	r2, r2, #1
 8004ce6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cea:	e707      	b.n	8004afc <HAL_RCC_OscConfig+0x430>
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cec:	6b60      	ldr	r0, [r4, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cee:	f001 0370 	and.w	r3, r1, #112	; 0x70
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cf2:	4283      	cmp	r3, r0
 8004cf4:	f47f aeb8 	bne.w	8004a68 <HAL_RCC_OscConfig+0x39c>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cf8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004cfa:	f3c1 2306 	ubfx	r3, r1, #8, #7
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cfe:	4283      	cmp	r3, r0
 8004d00:	f47f aeb2 	bne.w	8004a68 <HAL_RCC_OscConfig+0x39c>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d04:	6be0      	ldr	r0, [r4, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d06:	f401 1378 	and.w	r3, r1, #4063232	; 0x3e0000
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d0a:	4283      	cmp	r3, r0
 8004d0c:	f47f aeac 	bne.w	8004a68 <HAL_RCC_OscConfig+0x39c>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d10:	6c20      	ldr	r0, [r4, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004d12:	f001 6360 	and.w	r3, r1, #234881024	; 0xe000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d16:	4283      	cmp	r3, r0
 8004d18:	f47f aea6 	bne.w	8004a68 <HAL_RCC_OscConfig+0x39c>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004d1c:	6c63      	ldr	r3, [r4, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004d1e:	f001 4160 	and.w	r1, r1, #3758096384	; 0xe0000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004d22:	4299      	cmp	r1, r3
 8004d24:	f47f aea0 	bne.w	8004a68 <HAL_RCC_OscConfig+0x39c>
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d28:	682b      	ldr	r3, [r5, #0]
 8004d2a:	019a      	lsls	r2, r3, #6
 8004d2c:	f53f ada3 	bmi.w	8004876 <HAL_RCC_OscConfig+0x1aa>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004d30:	682b      	ldr	r3, [r5, #0]
 8004d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d36:	602b      	str	r3, [r5, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d38:	68eb      	ldr	r3, [r5, #12]
 8004d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d3e:	60eb      	str	r3, [r5, #12]
          tickstart = HAL_GetTick();
 8004d40:	f7fe fa6e 	bl	8003220 <HAL_GetTick>
 8004d44:	4604      	mov	r4, r0
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d46:	682b      	ldr	r3, [r5, #0]
 8004d48:	019b      	lsls	r3, r3, #6
 8004d4a:	f53f ad94 	bmi.w	8004876 <HAL_RCC_OscConfig+0x1aa>
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d4e:	f7fe fa67 	bl	8003220 <HAL_GetTick>
 8004d52:	1b00      	subs	r0, r0, r4
 8004d54:	2802      	cmp	r0, #2
 8004d56:	d9f6      	bls.n	8004d46 <HAL_RCC_OscConfig+0x67a>
 8004d58:	e511      	b.n	800477e <HAL_RCC_OscConfig+0xb2>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004d5a:	6812      	ldr	r2, [r2, #0]
      sysclockfreq = HSE_VALUE;
 8004d5c:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <HAL_RCC_OscConfig+0x6a8>)
 8004d5e:	4806      	ldr	r0, [pc, #24]	; (8004d78 <HAL_RCC_OscConfig+0x6ac>)
 8004d60:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8004d64:	bf18      	it	ne
 8004d66:	4618      	movne	r0, r3
 8004d68:	e5e7      	b.n	800493a <HAL_RCC_OscConfig+0x26e>
    sysclockfreq = HSI_VALUE;
 8004d6a:	4804      	ldr	r0, [pc, #16]	; (8004d7c <HAL_RCC_OscConfig+0x6b0>)
 8004d6c:	e5e5      	b.n	800493a <HAL_RCC_OscConfig+0x26e>
 8004d6e:	bf00      	nop
 8004d70:	0800ddd4 	.word	0x0800ddd4
 8004d74:	003d0900 	.word	0x003d0900
 8004d78:	007a1200 	.word	0x007a1200
 8004d7c:	00f42400 	.word	0x00f42400

08004d80 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004d80:	2800      	cmp	r0, #0
 8004d82:	f000 8130 	beq.w	8004fe6 <HAL_RCC_ClockConfig+0x266>
{
 8004d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d8a:	4e9d      	ldr	r6, [pc, #628]	; (8005000 <HAL_RCC_ClockConfig+0x280>)
 8004d8c:	6833      	ldr	r3, [r6, #0]
 8004d8e:	f003 0307 	and.w	r3, r3, #7
 8004d92:	428b      	cmp	r3, r1
 8004d94:	460c      	mov	r4, r1
 8004d96:	4605      	mov	r5, r0
 8004d98:	f0c0 80d9 	bcc.w	8004f4e <HAL_RCC_ClockConfig+0x1ce>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d9c:	682b      	ldr	r3, [r5, #0]
 8004d9e:	079a      	lsls	r2, r3, #30
 8004da0:	d472      	bmi.n	8004e88 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004da2:	0698      	lsls	r0, r3, #26
 8004da4:	f100 8082 	bmi.w	8004eac <HAL_RCC_ClockConfig+0x12c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004da8:	065a      	lsls	r2, r3, #25
 8004daa:	f100 8094 	bmi.w	8004ed6 <HAL_RCC_ClockConfig+0x156>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dae:	0758      	lsls	r0, r3, #29
 8004db0:	f100 80a7 	bmi.w	8004f02 <HAL_RCC_ClockConfig+0x182>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004db4:	071a      	lsls	r2, r3, #28
 8004db6:	f100 80b6 	bmi.w	8004f26 <HAL_RCC_ClockConfig+0x1a6>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dba:	07df      	lsls	r7, r3, #31
 8004dbc:	d529      	bpl.n	8004e12 <HAL_RCC_ClockConfig+0x92>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dbe:	686b      	ldr	r3, [r5, #4]
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004dc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	6812      	ldr	r2, [r2, #0]
 8004dc8:	f000 8106 	beq.w	8004fd8 <HAL_RCC_ClockConfig+0x258>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dcc:	2b03      	cmp	r3, #3
 8004dce:	f000 80fd 	beq.w	8004fcc <HAL_RCC_ClockConfig+0x24c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f040 8104 	bne.w	8004fe0 <HAL_RCC_ClockConfig+0x260>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004dd8:	0791      	lsls	r1, r2, #30
 8004dda:	f140 80fa 	bpl.w	8004fd2 <HAL_RCC_ClockConfig+0x252>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004dde:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004de2:	f241 3888 	movw	r8, #5000	; 0x1388
 8004de6:	68b2      	ldr	r2, [r6, #8]
 8004de8:	f022 0203 	bic.w	r2, r2, #3
 8004dec:	4313      	orrs	r3, r2
 8004dee:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004df0:	f7fe fa16 	bl	8003220 <HAL_GetTick>
 8004df4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004df6:	e005      	b.n	8004e04 <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004df8:	f7fe fa12 	bl	8003220 <HAL_GetTick>
 8004dfc:	1bc0      	subs	r0, r0, r7
 8004dfe:	4540      	cmp	r0, r8
 8004e00:	f200 80b8 	bhi.w	8004f74 <HAL_RCC_ClockConfig+0x1f4>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004e04:	68b3      	ldr	r3, [r6, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e06:	686a      	ldr	r2, [r5, #4]
 8004e08:	f003 030c 	and.w	r3, r3, #12
 8004e0c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004e10:	d1f2      	bne.n	8004df8 <HAL_RCC_ClockConfig+0x78>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e12:	4d7b      	ldr	r5, [pc, #492]	; (8005000 <HAL_RCC_ClockConfig+0x280>)
 8004e14:	682b      	ldr	r3, [r5, #0]
 8004e16:	f003 0307 	and.w	r3, r3, #7
 8004e1a:	42a3      	cmp	r3, r4
 8004e1c:	d913      	bls.n	8004e46 <HAL_RCC_ClockConfig+0xc6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e1e:	682b      	ldr	r3, [r5, #0]
 8004e20:	f023 0307 	bic.w	r3, r3, #7
 8004e24:	4323      	orrs	r3, r4
 8004e26:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004e28:	f7fe f9fa 	bl	8003220 <HAL_GetTick>
 8004e2c:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e2e:	e005      	b.n	8004e3c <HAL_RCC_ClockConfig+0xbc>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004e30:	f7fe f9f6 	bl	8003220 <HAL_GetTick>
 8004e34:	1b80      	subs	r0, r0, r6
 8004e36:	2802      	cmp	r0, #2
 8004e38:	f200 809c 	bhi.w	8004f74 <HAL_RCC_ClockConfig+0x1f4>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e3c:	682b      	ldr	r3, [r5, #0]
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	42a3      	cmp	r3, r4
 8004e44:	d1f4      	bne.n	8004e30 <HAL_RCC_ClockConfig+0xb0>
 8004e46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e4a:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e4c:	f013 030c 	ands.w	r3, r3, #12
 8004e50:	f000 80b1 	beq.w	8004fb6 <HAL_RCC_ClockConfig+0x236>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e54:	2b04      	cmp	r3, #4
 8004e56:	f000 80d0 	beq.w	8004ffa <HAL_RCC_ClockConfig+0x27a>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e5a:	2b08      	cmp	r3, #8
 8004e5c:	f000 80c5 	beq.w	8004fea <HAL_RCC_ClockConfig+0x26a>
 8004e60:	f7ff fbf8 	bl	8004654 <HAL_RCC_GetSysClockFreq.part.0>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004e68:	4a66      	ldr	r2, [pc, #408]	; (8005004 <HAL_RCC_ClockConfig+0x284>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004e6c:	4966      	ldr	r1, [pc, #408]	; (8005008 <HAL_RCC_ClockConfig+0x288>)
 8004e6e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004e72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e76:	fbb0 f0f3 	udiv	r0, r0, r3
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004e7a:	6010      	str	r0, [r2, #0]
  return HAL_InitTick(HAL_GetTickPrio());
 8004e7c:	f7fe f9d6 	bl	800322c <HAL_GetTickPrio>
}
 8004e80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(HAL_GetTickPrio());
 8004e84:	f7fe b982 	b.w	800318c <HAL_InitTick>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004e88:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8004e8c:	68aa      	ldr	r2, [r5, #8]
 8004e8e:	68b3      	ldr	r3, [r6, #8]
 8004e90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e94:	4313      	orrs	r3, r2
 8004e96:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004e98:	f7fe f9c2 	bl	8003220 <HAL_GetTick>
 8004e9c:	4607      	mov	r7, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004e9e:	68b3      	ldr	r3, [r6, #8]
 8004ea0:	03db      	lsls	r3, r3, #15
 8004ea2:	d56a      	bpl.n	8004f7a <HAL_RCC_ClockConfig+0x1fa>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004ea4:	682b      	ldr	r3, [r5, #0]
 8004ea6:	0698      	lsls	r0, r3, #26
 8004ea8:	f57f af7e 	bpl.w	8004da8 <HAL_RCC_ClockConfig+0x28>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004eac:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8004eb0:	696a      	ldr	r2, [r5, #20]
 8004eb2:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8004eb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 8004ec0:	f7fe f9ae 	bl	8003220 <HAL_GetTick>
 8004ec4:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004ec6:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8004eca:	0399      	lsls	r1, r3, #14
 8004ecc:	d55b      	bpl.n	8004f86 <HAL_RCC_ClockConfig+0x206>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004ece:	682b      	ldr	r3, [r5, #0]
 8004ed0:	065a      	lsls	r2, r3, #25
 8004ed2:	f57f af6c 	bpl.w	8004dae <HAL_RCC_ClockConfig+0x2e>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004ed6:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8004eda:	69aa      	ldr	r2, [r5, #24]
 8004edc:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8004ee0:	f023 030f 	bic.w	r3, r3, #15
 8004ee4:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8004ee8:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 8004eec:	f7fe f998 	bl	8003220 <HAL_GetTick>
 8004ef0:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004ef2:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8004ef6:	03db      	lsls	r3, r3, #15
 8004ef8:	d54b      	bpl.n	8004f92 <HAL_RCC_ClockConfig+0x212>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004efa:	682b      	ldr	r3, [r5, #0]
 8004efc:	0758      	lsls	r0, r3, #29
 8004efe:	f57f af59 	bpl.w	8004db4 <HAL_RCC_ClockConfig+0x34>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004f02:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8004f06:	68ea      	ldr	r2, [r5, #12]
 8004f08:	68b3      	ldr	r3, [r6, #8]
 8004f0a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004f12:	f7fe f985 	bl	8003220 <HAL_GetTick>
 8004f16:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004f18:	68b3      	ldr	r3, [r6, #8]
 8004f1a:	0399      	lsls	r1, r3, #14
 8004f1c:	d53f      	bpl.n	8004f9e <HAL_RCC_ClockConfig+0x21e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f1e:	682b      	ldr	r3, [r5, #0]
 8004f20:	071a      	lsls	r2, r3, #28
 8004f22:	f57f af4a 	bpl.w	8004dba <HAL_RCC_ClockConfig+0x3a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004f26:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004f2a:	692a      	ldr	r2, [r5, #16]
 8004f2c:	68b3      	ldr	r3, [r6, #8]
 8004f2e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004f32:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004f36:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004f38:	f7fe f972 	bl	8003220 <HAL_GetTick>
 8004f3c:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004f3e:	68b3      	ldr	r3, [r6, #8]
 8004f40:	035b      	lsls	r3, r3, #13
 8004f42:	d532      	bpl.n	8004faa <HAL_RCC_ClockConfig+0x22a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f44:	682b      	ldr	r3, [r5, #0]
 8004f46:	07df      	lsls	r7, r3, #31
 8004f48:	f53f af39 	bmi.w	8004dbe <HAL_RCC_ClockConfig+0x3e>
 8004f4c:	e761      	b.n	8004e12 <HAL_RCC_ClockConfig+0x92>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f4e:	6833      	ldr	r3, [r6, #0]
 8004f50:	f023 0307 	bic.w	r3, r3, #7
 8004f54:	430b      	orrs	r3, r1
 8004f56:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004f58:	f7fe f962 	bl	8003220 <HAL_GetTick>
 8004f5c:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f5e:	6833      	ldr	r3, [r6, #0]
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	42a3      	cmp	r3, r4
 8004f66:	f43f af19 	beq.w	8004d9c <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004f6a:	f7fe f959 	bl	8003220 <HAL_GetTick>
 8004f6e:	1bc3      	subs	r3, r0, r7
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d9f4      	bls.n	8004f5e <HAL_RCC_ClockConfig+0x1de>
        return HAL_TIMEOUT;
 8004f74:	2003      	movs	r0, #3
}
 8004f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f7a:	f7fe f951 	bl	8003220 <HAL_GetTick>
 8004f7e:	1bc0      	subs	r0, r0, r7
 8004f80:	2802      	cmp	r0, #2
 8004f82:	d98c      	bls.n	8004e9e <HAL_RCC_ClockConfig+0x11e>
 8004f84:	e7f6      	b.n	8004f74 <HAL_RCC_ClockConfig+0x1f4>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f86:	f7fe f94b 	bl	8003220 <HAL_GetTick>
 8004f8a:	1bc0      	subs	r0, r0, r7
 8004f8c:	2802      	cmp	r0, #2
 8004f8e:	d99a      	bls.n	8004ec6 <HAL_RCC_ClockConfig+0x146>
 8004f90:	e7f0      	b.n	8004f74 <HAL_RCC_ClockConfig+0x1f4>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f92:	f7fe f945 	bl	8003220 <HAL_GetTick>
 8004f96:	1bc0      	subs	r0, r0, r7
 8004f98:	2802      	cmp	r0, #2
 8004f9a:	d9aa      	bls.n	8004ef2 <HAL_RCC_ClockConfig+0x172>
 8004f9c:	e7ea      	b.n	8004f74 <HAL_RCC_ClockConfig+0x1f4>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f9e:	f7fe f93f 	bl	8003220 <HAL_GetTick>
 8004fa2:	1bc0      	subs	r0, r0, r7
 8004fa4:	2802      	cmp	r0, #2
 8004fa6:	d9b7      	bls.n	8004f18 <HAL_RCC_ClockConfig+0x198>
 8004fa8:	e7e4      	b.n	8004f74 <HAL_RCC_ClockConfig+0x1f4>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004faa:	f7fe f939 	bl	8003220 <HAL_GetTick>
 8004fae:	1bc0      	subs	r0, r0, r7
 8004fb0:	2802      	cmp	r0, #2
 8004fb2:	d9c4      	bls.n	8004f3e <HAL_RCC_ClockConfig+0x1be>
 8004fb4:	e7de      	b.n	8004f74 <HAL_RCC_ClockConfig+0x1f4>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004fb6:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004fb8:	4a14      	ldr	r2, [pc, #80]	; (800500c <HAL_RCC_ClockConfig+0x28c>)
 8004fba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fbe:	2bb0      	cmp	r3, #176	; 0xb0
 8004fc0:	bf28      	it	cs
 8004fc2:	23b0      	movcs	r3, #176	; 0xb0
 8004fc4:	091b      	lsrs	r3, r3, #4
 8004fc6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004fca:	e74b      	b.n	8004e64 <HAL_RCC_ClockConfig+0xe4>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004fcc:	0190      	lsls	r0, r2, #6
 8004fce:	f53f af06 	bmi.w	8004dde <HAL_RCC_ClockConfig+0x5e>
    return HAL_ERROR;
 8004fd2:	2001      	movs	r0, #1
}
 8004fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004fd8:	0396      	lsls	r6, r2, #14
 8004fda:	f53f af00 	bmi.w	8004dde <HAL_RCC_ClockConfig+0x5e>
 8004fde:	e7f8      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004fe0:	0552      	lsls	r2, r2, #21
 8004fe2:	d5f6      	bpl.n	8004fd2 <HAL_RCC_ClockConfig+0x252>
 8004fe4:	e6fb      	b.n	8004dde <HAL_RCC_ClockConfig+0x5e>
    return HAL_ERROR;
 8004fe6:	2001      	movs	r0, #1
}
 8004fe8:	4770      	bx	lr
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004fea:	6812      	ldr	r2, [r2, #0]
      sysclockfreq = HSE_VALUE;
 8004fec:	4b08      	ldr	r3, [pc, #32]	; (8005010 <HAL_RCC_ClockConfig+0x290>)
 8004fee:	4809      	ldr	r0, [pc, #36]	; (8005014 <HAL_RCC_ClockConfig+0x294>)
 8004ff0:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8004ff4:	bf08      	it	eq
 8004ff6:	4618      	moveq	r0, r3
 8004ff8:	e734      	b.n	8004e64 <HAL_RCC_ClockConfig+0xe4>
    sysclockfreq = HSI_VALUE;
 8004ffa:	4807      	ldr	r0, [pc, #28]	; (8005018 <HAL_RCC_ClockConfig+0x298>)
 8004ffc:	e732      	b.n	8004e64 <HAL_RCC_ClockConfig+0xe4>
 8004ffe:	bf00      	nop
 8005000:	58004000 	.word	0x58004000
 8005004:	20000008 	.word	0x20000008
 8005008:	0800dd94 	.word	0x0800dd94
 800500c:	0800ddd4 	.word	0x0800ddd4
 8005010:	007a1200 	.word	0x007a1200
 8005014:	003d0900 	.word	0x003d0900
 8005018:	00f42400 	.word	0x00f42400

0800501c <HAL_RCC_GetHCLKFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800501c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
{
 8005020:	b508      	push	{r3, lr}
 8005022:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005024:	f013 030c 	ands.w	r3, r3, #12
 8005028:	d114      	bne.n	8005054 <HAL_RCC_GetHCLKFreq+0x38>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800502a:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800502c:	4a12      	ldr	r2, [pc, #72]	; (8005078 <HAL_RCC_GetHCLKFreq+0x5c>)
 800502e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005032:	2bb0      	cmp	r3, #176	; 0xb0
 8005034:	bf28      	it	cs
 8005036:	23b0      	movcs	r3, #176	; 0xb0
 8005038:	091b      	lsrs	r3, r3, #4
 800503a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800503e:	4a0f      	ldr	r2, [pc, #60]	; (800507c <HAL_RCC_GetHCLKFreq+0x60>)
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800504a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800504e:	fbb0 f0f3 	udiv	r0, r0, r3
 8005052:	bd08      	pop	{r3, pc}
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005054:	2b04      	cmp	r3, #4
 8005056:	d004      	beq.n	8005062 <HAL_RCC_GetHCLKFreq+0x46>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005058:	2b08      	cmp	r3, #8
 800505a:	d004      	beq.n	8005066 <HAL_RCC_GetHCLKFreq+0x4a>
 800505c:	f7ff fafa 	bl	8004654 <HAL_RCC_GetSysClockFreq.part.0>
 8005060:	e7ed      	b.n	800503e <HAL_RCC_GetHCLKFreq+0x22>
    sysclockfreq = HSI_VALUE;
 8005062:	4807      	ldr	r0, [pc, #28]	; (8005080 <HAL_RCC_GetHCLKFreq+0x64>)
 8005064:	e7eb      	b.n	800503e <HAL_RCC_GetHCLKFreq+0x22>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005066:	6812      	ldr	r2, [r2, #0]
      sysclockfreq = HSE_VALUE;
 8005068:	4b06      	ldr	r3, [pc, #24]	; (8005084 <HAL_RCC_GetHCLKFreq+0x68>)
 800506a:	4807      	ldr	r0, [pc, #28]	; (8005088 <HAL_RCC_GetHCLKFreq+0x6c>)
 800506c:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8005070:	bf08      	it	eq
 8005072:	4618      	moveq	r0, r3
 8005074:	e7e3      	b.n	800503e <HAL_RCC_GetHCLKFreq+0x22>
 8005076:	bf00      	nop
 8005078:	0800ddd4 	.word	0x0800ddd4
 800507c:	0800dd94 	.word	0x0800dd94
 8005080:	00f42400 	.word	0x00f42400
 8005084:	007a1200 	.word	0x007a1200
 8005088:	003d0900 	.word	0x003d0900

0800508c <HAL_RCCEx_PeriphCLKConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800508c:	6803      	ldr	r3, [r0, #0]
{
 800508e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005092:	f013 0540 	ands.w	r5, r3, #64	; 0x40
{
 8005096:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005098:	d040      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800509a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800509c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80050a0:	f000 8134 	beq.w	800530c <HAL_RCCEx_PeriphCLKConfig+0x280>
 80050a4:	f200 8119 	bhi.w	80052da <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80050a8:	2a00      	cmp	r2, #0
 80050aa:	f040 811c 	bne.w	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80050ae:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80050b2:	682b      	ldr	r3, [r5, #0]
 80050b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050b8:	602b      	str	r3, [r5, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80050ba:	f7fe f8b1 	bl	8003220 <HAL_GetTick>
 80050be:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80050c0:	682b      	ldr	r3, [r5, #0]
 80050c2:	011f      	lsls	r7, r3, #4
 80050c4:	f100 8131 	bmi.w	800532a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80050c8:	692b      	ldr	r3, [r5, #16]
 80050ca:	6862      	ldr	r2, [r4, #4]
 80050cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80050d4:	612b      	str	r3, [r5, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80050d6:	692b      	ldr	r3, [r5, #16]
 80050d8:	68a2      	ldr	r2, [r4, #8]
 80050da:	f423 1378 	bic.w	r3, r3, #4063232	; 0x3e0000
 80050de:	4313      	orrs	r3, r2
 80050e0:	612b      	str	r3, [r5, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80050e2:	682b      	ldr	r3, [r5, #0]
 80050e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050e8:	602b      	str	r3, [r5, #0]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ea:	f7fe f899 	bl	8003220 <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80050ee:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80050f2:	4605      	mov	r5, r0
 80050f4:	6833      	ldr	r3, [r6, #0]
 80050f6:	0118      	lsls	r0, r3, #4
 80050f8:	f140 81b0 	bpl.w	800545c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80050fc:	6962      	ldr	r2, [r4, #20]
 80050fe:	6933      	ldr	r3, [r6, #16]
 8005100:	4313      	orrs	r3, r2
 8005102:	6133      	str	r3, [r6, #16]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005104:	6b22      	ldr	r2, [r4, #48]	; 0x30
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005106:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005108:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
}
 800510c:	2500      	movs	r5, #0
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800510e:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8005112:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 8005116:	430a      	orrs	r2, r1
 8005118:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 800511c:	0519      	lsls	r1, r3, #20
 800511e:	d509      	bpl.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005120:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005124:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005126:	f8d7 6090 	ldr.w	r6, [r7, #144]	; 0x90
 800512a:	f406 7640 	and.w	r6, r6, #768	; 0x300
 800512e:	42b2      	cmp	r2, r6
 8005130:	f040 80b4 	bne.w	800529c <HAL_RCCEx_PeriphCLKConfig+0x210>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005134:	07d8      	lsls	r0, r3, #31
 8005136:	d509      	bpl.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005138:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800513c:	69a0      	ldr	r0, [r4, #24]
 800513e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005142:	f022 0203 	bic.w	r2, r2, #3
 8005146:	4302      	orrs	r2, r0
 8005148:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800514c:	0799      	lsls	r1, r3, #30
 800514e:	d509      	bpl.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005150:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005154:	69e0      	ldr	r0, [r4, #28]
 8005156:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800515a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800515e:	4302      	orrs	r2, r0
 8005160:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005164:	06da      	lsls	r2, r3, #27
 8005166:	d50c      	bpl.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005168:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800516a:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800516e:	0c31      	lsrs	r1, r6, #16
 8005170:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005174:	0409      	lsls	r1, r1, #16
 8005176:	ea22 0201 	bic.w	r2, r2, r1
 800517a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800517e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005182:	069f      	lsls	r7, r3, #26
 8005184:	d50c      	bpl.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005186:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005188:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800518c:	0c31      	lsrs	r1, r6, #16
 800518e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005192:	0409      	lsls	r1, r1, #16
 8005194:	ea22 0201 	bic.w	r2, r2, r1
 8005198:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800519c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051a0:	075e      	lsls	r6, r3, #29
 80051a2:	d50f      	bpl.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051a4:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80051a6:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80051aa:	0911      	lsrs	r1, r2, #4
 80051ac:	f401 207f 	and.w	r0, r1, #1044480	; 0xff000
 80051b0:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
 80051b4:	0112      	lsls	r2, r2, #4
 80051b6:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 80051ba:	ea21 0100 	bic.w	r1, r1, r0
 80051be:	430a      	orrs	r2, r1
 80051c0:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051c4:	0718      	lsls	r0, r3, #28
 80051c6:	d50f      	bpl.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80051ca:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80051ce:	0911      	lsrs	r1, r2, #4
 80051d0:	f401 207f 	and.w	r0, r1, #1044480	; 0xff000
 80051d4:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
 80051d8:	0112      	lsls	r2, r2, #4
 80051da:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 80051de:	ea21 0100 	bic.w	r1, r1, r0
 80051e2:	430a      	orrs	r2, r1
 80051e4:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051e8:	05d9      	lsls	r1, r3, #23
 80051ea:	d510      	bpl.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x182>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80051ec:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051f2:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 80051f6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80051fa:	430a      	orrs	r2, r1
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80051fc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8005200:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
 8005204:	d07d      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x276>
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005206:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800520a:	f000 80d2 	beq.w	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x326>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800520e:	059f      	lsls	r7, r3, #22
 8005210:	d513      	bpl.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005212:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005214:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005218:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800521c:	d003      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x19a>
 800521e:	f031 4280 	bics.w	r2, r1, #1073741824	; 0x40000000
 8005222:	f040 808b 	bne.w	800533c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005226:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800522a:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800522e:	430a      	orrs	r2, r1
 8005230:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005234:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
 8005238:	d057      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800523a:	055e      	lsls	r6, r3, #21
 800523c:	d50f      	bpl.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800523e:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005242:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005244:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 8005248:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800524c:	430a      	orrs	r2, r1
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800524e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8005252:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
 8005256:	d04f      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005258:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800525c:	d07e      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800525e:	04da      	lsls	r2, r3, #19
 8005260:	d509      	bpl.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005262:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005266:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005268:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 800526c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005270:	4302      	orrs	r2, r0
 8005272:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005276:	049b      	lsls	r3, r3, #18
 8005278:	d50d      	bpl.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800527a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800527e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005280:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8005282:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005286:	430b      	orrs	r3, r1
 8005288:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800528a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800528c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800528e:	f023 0303 	bic.w	r3, r3, #3
 8005292:	430b      	orrs	r3, r1
 8005294:	6253      	str	r3, [r2, #36]	; 0x24
}
 8005296:	4628      	mov	r0, r5
 8005298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      HAL_PWR_EnableBkUpAccess();
 800529c:	f7ff f94c 	bl	8004538 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80052a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80052a4:	2e00      	cmp	r6, #0
 80052a6:	d038      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80052a8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80052ac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80052b0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80052b4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80052b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80052bc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80052c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80052c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052c6:	4313      	orrs	r3, r2
        LL_RCC_WriteReg(BDCR, bdcr);
 80052c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80052cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80052d0:	07da      	lsls	r2, r3, #31
 80052d2:	f100 80b1 	bmi.w	8005438 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052d6:	6823      	ldr	r3, [r4, #0]
 80052d8:	e72c      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    switch (PeriphClkInit->Sai1ClockSelection)
 80052da:	f422 0180 	bic.w	r1, r2, #4194304	; 0x400000
 80052de:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80052e2:	f43f af11 	beq.w	8005108 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80052e6:	2501      	movs	r5, #1
 80052e8:	e718      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x90>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80052ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052ee:	68ca      	ldr	r2, [r1, #12]
 80052f0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80052f4:	60ca      	str	r2, [r1, #12]
 80052f6:	e7a0      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80052f8:	68f2      	ldr	r2, [r6, #12]
 80052fa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80052fe:	60f2      	str	r2, [r6, #12]
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005300:	e7ad      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005302:	68f2      	ldr	r2, [r6, #12]
 8005304:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005308:	60f2      	str	r2, [r6, #12]
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800530a:	e780      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x182>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800530c:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8005310:	68c1      	ldr	r1, [r0, #12]
 8005312:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8005316:	60c1      	str	r1, [r0, #12]
    if (ret == HAL_OK)
 8005318:	e6f6      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800531a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800531c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005320:	4313      	orrs	r3, r2
 8005322:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005326:	6823      	ldr	r3, [r4, #0]
}
 8005328:	e704      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800532a:	f7fd ff79 	bl	8003220 <HAL_GetTick>
 800532e:	1b80      	subs	r0, r0, r6
 8005330:	2802      	cmp	r0, #2
 8005332:	f67f aec5 	bls.w	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x34>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005336:	6823      	ldr	r3, [r4, #0]
 8005338:	2503      	movs	r5, #3
 800533a:	e6ef      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x90>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800533c:	f8d0 6088 	ldr.w	r6, [r0, #136]	; 0x88
 8005340:	f026 4640 	bic.w	r6, r6, #3221225472	; 0xc0000000
 8005344:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005348:	f8d0 6088 	ldr.w	r6, [r0, #136]	; 0x88
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800534c:	f021 5280 	bic.w	r2, r1, #268435456	; 0x10000000
 8005350:	f026 6640 	bic.w	r6, r6, #201326592	; 0xc000000
 8005354:	4332      	orrs	r2, r6
 8005356:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
}
 800535a:	e76b      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800535c:	6833      	ldr	r3, [r6, #0]
 800535e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005362:	6033      	str	r3, [r6, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005364:	f7fd ff5c 	bl	8003220 <HAL_GetTick>
 8005368:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800536a:	6833      	ldr	r3, [r6, #0]
 800536c:	0118      	lsls	r0, r3, #4
 800536e:	d451      	bmi.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x388>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005370:	6933      	ldr	r3, [r6, #16]
 8005372:	6862      	ldr	r2, [r4, #4]
 8005374:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005378:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800537c:	6133      	str	r3, [r6, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800537e:	6933      	ldr	r3, [r6, #16]
 8005380:	6922      	ldr	r2, [r4, #16]
 8005382:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8005386:	4313      	orrs	r3, r2
 8005388:	6133      	str	r3, [r6, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800538a:	6833      	ldr	r3, [r6, #0]
 800538c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005390:	6033      	str	r3, [r6, #0]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005392:	f7fd ff45 	bl	8003220 <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005396:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 800539a:	4606      	mov	r6, r0
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	0119      	lsls	r1, r3, #4
 80053a0:	d444      	bmi.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x3a0>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053a2:	f7fd ff3d 	bl	8003220 <HAL_GetTick>
 80053a6:	1b80      	subs	r0, r0, r6
 80053a8:	2802      	cmp	r0, #2
 80053aa:	d9f7      	bls.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x310>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80053ac:	6823      	ldr	r3, [r4, #0]
 80053ae:	2503      	movs	r5, #3
 80053b0:	e755      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80053b2:	6833      	ldr	r3, [r6, #0]
 80053b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053b8:	6033      	str	r3, [r6, #0]
  tickstart = HAL_GetTick();
 80053ba:	f7fd ff31 	bl	8003220 <HAL_GetTick>
 80053be:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80053c0:	6833      	ldr	r3, [r6, #0]
 80053c2:	011a      	lsls	r2, r3, #4
 80053c4:	d420      	bmi.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x37c>
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80053c6:	6933      	ldr	r3, [r6, #16]
 80053c8:	6862      	ldr	r2, [r4, #4]
 80053ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80053ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80053d2:	6133      	str	r3, [r6, #16]
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80053d4:	6933      	ldr	r3, [r6, #16]
 80053d6:	68e2      	ldr	r2, [r4, #12]
 80053d8:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80053dc:	4313      	orrs	r3, r2
 80053de:	6133      	str	r3, [r6, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80053e0:	6833      	ldr	r3, [r6, #0]
 80053e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053e6:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80053e8:	f7fd ff1a 	bl	8003220 <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80053ec:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80053f0:	4606      	mov	r6, r0
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	d413      	bmi.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x394>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053f8:	f7fd ff12 	bl	8003220 <HAL_GetTick>
 80053fc:	1b80      	subs	r0, r0, r6
 80053fe:	2802      	cmp	r0, #2
 8005400:	d9f7      	bls.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	2503      	movs	r5, #3
 8005406:	e702      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x182>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005408:	f7fd ff0a 	bl	8003220 <HAL_GetTick>
 800540c:	1bc0      	subs	r0, r0, r7
 800540e:	2802      	cmp	r0, #2
 8005410:	d9d6      	bls.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
 8005412:	e7f6      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x376>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005414:	f7fd ff04 	bl	8003220 <HAL_GetTick>
 8005418:	1bc0      	subs	r0, r0, r7
 800541a:	2802      	cmp	r0, #2
 800541c:	d9a5      	bls.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800541e:	e7c5      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x320>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	6962      	ldr	r2, [r4, #20]
 8005424:	4313      	orrs	r3, r2
 8005426:	613b      	str	r3, [r7, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005428:	6823      	ldr	r3, [r4, #0]
 800542a:	e6f0      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x182>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	6962      	ldr	r2, [r4, #20]
 8005430:	4313      	orrs	r3, r2
 8005432:	613b      	str	r3, [r7, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005434:	6823      	ldr	r3, [r4, #0]
 8005436:	e712      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
          tickstart = HAL_GetTick();
 8005438:	f7fd fef2 	bl	8003220 <HAL_GetTick>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800543c:	f241 3888 	movw	r8, #5000	; 0x1388
          tickstart = HAL_GetTick();
 8005440:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005442:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005446:	079b      	lsls	r3, r3, #30
 8005448:	f53f af45 	bmi.w	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800544c:	f7fd fee8 	bl	8003220 <HAL_GetTick>
 8005450:	1b80      	subs	r0, r0, r6
 8005452:	4540      	cmp	r0, r8
 8005454:	d9f5      	bls.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005456:	6823      	ldr	r3, [r4, #0]
              ret = HAL_TIMEOUT;
 8005458:	2503      	movs	r5, #3
 800545a:	e66b      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800545c:	f7fd fee0 	bl	8003220 <HAL_GetTick>
 8005460:	1b40      	subs	r0, r0, r5
 8005462:	2802      	cmp	r0, #2
 8005464:	f67f ae46 	bls.w	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8005468:	e765      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800546a:	bf00      	nop

0800546c <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800546c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005470:	6813      	ldr	r3, [r2, #0]
 8005472:	f043 0304 	orr.w	r3, r3, #4
 8005476:	6013      	str	r3, [r2, #0]
}
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop

0800547c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800547c:	2800      	cmp	r0, #0
 800547e:	d070      	beq.n	8005562 <HAL_TIM_Base_Init+0xe6>
{
 8005480:	b510      	push	{r4, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005482:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005486:	4604      	mov	r4, r0
 8005488:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800548c:	2b00      	cmp	r3, #0
 800548e:	d047      	beq.n	8005520 <HAL_TIM_Base_Init+0xa4>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005490:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005492:	4935      	ldr	r1, [pc, #212]	; (8005568 <HAL_TIM_Base_Init+0xec>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005494:	2302      	movs	r3, #2
 8005496:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800549a:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800549c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800549e:	d044      	beq.n	800552a <HAL_TIM_Base_Init+0xae>
 80054a0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80054a4:	d04b      	beq.n	800553e <HAL_TIM_Base_Init+0xc2>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054a6:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 80054aa:	428a      	cmp	r2, r1
 80054ac:	d00d      	beq.n	80054ca <HAL_TIM_Base_Init+0x4e>
 80054ae:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80054b2:	428a      	cmp	r2, r1
 80054b4:	d009      	beq.n	80054ca <HAL_TIM_Base_Init+0x4e>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054b6:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054b8:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054be:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80054c0:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054c2:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054c4:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80054c6:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054c8:	e00e      	b.n	80054e8 <HAL_TIM_Base_Init+0x6c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054ca:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054cc:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80054ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054d2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054d8:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80054da:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054dc:	68e3      	ldr	r3, [r4, #12]
 80054de:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80054e0:	6863      	ldr	r3, [r4, #4]
 80054e2:	6293      	str	r3, [r2, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054e4:	6963      	ldr	r3, [r4, #20]
 80054e6:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054e8:	2301      	movs	r3, #1
 80054ea:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054ec:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80054f4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80054f8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80054fc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005500:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005508:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800550c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005510:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005514:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005518:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800551c:	2000      	movs	r0, #0
}
 800551e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005520:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005524:	f7fd fd42 	bl	8002fac <HAL_TIM_Base_MspInit>
 8005528:	e7b2      	b.n	8005490 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 800552a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800552c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800552e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005532:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005538:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800553a:	69a1      	ldr	r1, [r4, #24]
 800553c:	e7ca      	b.n	80054d4 <HAL_TIM_Base_Init+0x58>
    tmpcr1 |= Structure->CounterMode;
 800553e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005540:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005546:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800554c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800554e:	69a1      	ldr	r1, [r4, #24]
 8005550:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005554:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005556:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005558:	68e3      	ldr	r3, [r4, #12]
 800555a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800555c:	6863      	ldr	r3, [r4, #4]
 800555e:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005560:	e7c2      	b.n	80054e8 <HAL_TIM_Base_Init+0x6c>
    return HAL_ERROR;
 8005562:	2001      	movs	r0, #1
}
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	40012c00 	.word	0x40012c00

0800556c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800556c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005570:	2b01      	cmp	r3, #1
 8005572:	d113      	bne.n	800559c <HAL_TIM_Base_Start_IT+0x30>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005574:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005576:	490f      	ldr	r1, [pc, #60]	; (80055b4 <HAL_TIM_Base_Start_IT+0x48>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005578:	2202      	movs	r2, #2
 800557a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800557e:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005580:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005582:	f042 0201 	orr.w	r2, r2, #1
 8005586:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005588:	d00a      	beq.n	80055a0 <HAL_TIM_Base_Start_IT+0x34>
 800558a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800558e:	d007      	beq.n	80055a0 <HAL_TIM_Base_Start_IT+0x34>
    __HAL_TIM_ENABLE(htim);
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8005596:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	4770      	bx	lr
    return HAL_ERROR;
 800559c:	2001      	movs	r0, #1
 800559e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055a0:	6899      	ldr	r1, [r3, #8]
 80055a2:	4a05      	ldr	r2, [pc, #20]	; (80055b8 <HAL_TIM_Base_Start_IT+0x4c>)
 80055a4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a6:	2a06      	cmp	r2, #6
 80055a8:	d002      	beq.n	80055b0 <HAL_TIM_Base_Start_IT+0x44>
 80055aa:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80055ae:	d1ef      	bne.n	8005590 <HAL_TIM_Base_Start_IT+0x24>
  return HAL_OK;
 80055b0:	2000      	movs	r0, #0
}
 80055b2:	4770      	bx	lr
 80055b4:	40012c00 	.word	0x40012c00
 80055b8:	00010007 	.word	0x00010007

080055bc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80055bc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d078      	beq.n	80056b6 <HAL_TIM_ConfigClockSource+0xfa>
 80055c4:	4602      	mov	r2, r0
{
 80055c6:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 80055c8:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 80055ca:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80055cc:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 80055d0:	2001      	movs	r0, #1
 80055d2:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80055d6:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055d8:	4b53      	ldr	r3, [pc, #332]	; (8005728 <HAL_TIM_ConfigClockSource+0x16c>)
 80055da:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 80055dc:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 80055de:	680b      	ldr	r3, [r1, #0]
 80055e0:	2b60      	cmp	r3, #96	; 0x60
 80055e2:	d06a      	beq.n	80056ba <HAL_TIM_ConfigClockSource+0xfe>
 80055e4:	d827      	bhi.n	8005636 <HAL_TIM_ConfigClockSource+0x7a>
 80055e6:	2b40      	cmp	r3, #64	; 0x40
 80055e8:	f000 8083 	beq.w	80056f2 <HAL_TIM_ConfigClockSource+0x136>
 80055ec:	d94d      	bls.n	800568a <HAL_TIM_ConfigClockSource+0xce>
 80055ee:	2b50      	cmp	r3, #80	; 0x50
 80055f0:	d119      	bne.n	8005626 <HAL_TIM_ConfigClockSource+0x6a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055f2:	6848      	ldr	r0, [r1, #4]
 80055f4:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055f6:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055f8:	6a25      	ldr	r5, [r4, #32]
 80055fa:	f025 0501 	bic.w	r5, r5, #1
 80055fe:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005600:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005602:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005606:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 800560a:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800560c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005610:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8005612:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005614:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005616:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800561a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800561e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8005622:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005624:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8005626:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8005628:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800562a:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800562e:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8005632:	bc70      	pop	{r4, r5, r6}
 8005634:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8005636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800563a:	d03a      	beq.n	80056b2 <HAL_TIM_ConfigClockSource+0xf6>
 800563c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005640:	d110      	bne.n	8005664 <HAL_TIM_ConfigClockSource+0xa8>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005642:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8005646:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005648:	432b      	orrs	r3, r5
 800564a:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800564c:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005650:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8005654:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005656:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005658:	68a3      	ldr	r3, [r4, #8]
 800565a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 800565e:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005660:	60a3      	str	r3, [r4, #8]
      break;
 8005662:	e7e0      	b.n	8005626 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 8005664:	2b70      	cmp	r3, #112	; 0x70
 8005666:	d1de      	bne.n	8005626 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005668:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800566c:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800566e:	432b      	orrs	r3, r5
 8005670:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005672:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005676:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800567a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800567c:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 800567e:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005680:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8005684:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 8005686:	60a3      	str	r3, [r4, #8]
      break;
 8005688:	e7cd      	b.n	8005626 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800568a:	2b20      	cmp	r3, #32
 800568c:	d002      	beq.n	8005694 <HAL_TIM_ConfigClockSource+0xd8>
 800568e:	d90c      	bls.n	80056aa <HAL_TIM_ConfigClockSource+0xee>
 8005690:	2b30      	cmp	r3, #48	; 0x30
 8005692:	d1c8      	bne.n	8005626 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr = TIMx->SMCR;
 8005694:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005696:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800569a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800569e:	430b      	orrs	r3, r1
 80056a0:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 80056a4:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 80056a6:	60a3      	str	r3, [r4, #8]
}
 80056a8:	e7bd      	b.n	8005626 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 80056aa:	f033 0110 	bics.w	r1, r3, #16
 80056ae:	d1ba      	bne.n	8005626 <HAL_TIM_ConfigClockSource+0x6a>
 80056b0:	e7f0      	b.n	8005694 <HAL_TIM_ConfigClockSource+0xd8>
  HAL_StatusTypeDef status = HAL_OK;
 80056b2:	2000      	movs	r0, #0
 80056b4:	e7b7      	b.n	8005626 <HAL_TIM_ConfigClockSource+0x6a>
  __HAL_LOCK(htim);
 80056b6:	2002      	movs	r0, #2
}
 80056b8:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056ba:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056bc:	68cb      	ldr	r3, [r1, #12]
 80056be:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056c0:	f020 0010 	bic.w	r0, r0, #16
 80056c4:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056c6:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056c8:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056cc:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 80056d0:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80056d2:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80056d8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 80056dc:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80056de:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80056e0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80056e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056e8:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 80056ec:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 80056ee:	60a3      	str	r3, [r4, #8]
}
 80056f0:	e799      	b.n	8005626 <HAL_TIM_ConfigClockSource+0x6a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056f2:	6848      	ldr	r0, [r1, #4]
 80056f4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80056f6:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056f8:	6a25      	ldr	r5, [r4, #32]
 80056fa:	f025 0501 	bic.w	r5, r5, #1
 80056fe:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005700:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005702:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005706:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 800570a:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800570c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005710:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8005712:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005714:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005716:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800571a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800571e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8005722:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8005724:	60a3      	str	r3, [r4, #8]
}
 8005726:	e77e      	b.n	8005626 <HAL_TIM_ConfigClockSource+0x6a>
 8005728:	ffce0088 	.word	0xffce0088

0800572c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800572c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005730:	2b01      	cmp	r3, #1
 8005732:	d029      	beq.n	8005788 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
{
 8005734:	b430      	push	{r4, r5}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005736:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005738:	4d14      	ldr	r5, [pc, #80]	; (800578c <HAL_TIMEx_MasterConfigSynchronization+0x60>)
  htim->State = HAL_TIM_STATE_BUSY;
 800573a:	2302      	movs	r3, #2
 800573c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005740:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8005742:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005744:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005746:	d010      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005748:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800574a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800574e:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005750:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8005754:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005756:	d011      	beq.n	800577c <HAL_TIMEx_MasterConfigSynchronization+0x50>
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005758:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800575a:	2201      	movs	r2, #1
 800575c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005760:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8005764:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8005766:	4618      	mov	r0, r3
}
 8005768:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800576a:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800576c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005770:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005772:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005778:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 800577a:	6053      	str	r3, [r2, #4]
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800577c:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800577e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005782:	431c      	orrs	r4, r3
    htim->Instance->SMCR = tmpsmcr;
 8005784:	6094      	str	r4, [r2, #8]
 8005786:	e7e7      	b.n	8005758 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  __HAL_LOCK(htim);
 8005788:	2002      	movs	r0, #2
}
 800578a:	4770      	bx	lr
 800578c:	40012c00 	.word	0x40012c00

08005790 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005790:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005792:	f64b 7280 	movw	r2, #49024	; 0xbf80
  USBx->ISTR = 0U;
 8005796:	2000      	movs	r0, #0
 8005798:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 800579c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop

080057a4 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80057a4:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40
{
 80057a8:	4603      	mov	r3, r0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80057aa:	f244 027f 	movw	r2, #16511	; 0x407f
 80057ae:	400a      	ands	r2, r1

  return HAL_OK;
}
 80057b0:	2000      	movs	r0, #0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80057b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 80057b6:	4770      	bx	lr

080057b8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80057b8:	b084      	sub	sp, #16
 80057ba:	4684      	mov	ip, r0
 80057bc:	a801      	add	r0, sp, #4
 80057be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80057c2:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80057c4:	2301      	movs	r3, #1
 80057c6:	f8ac 3040 	strh.w	r3, [ip, #64]	; 0x40

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 80057ca:	b004      	add	sp, #16
  USBx->CNTR = 0U;
 80057cc:	f8ac 0040 	strh.w	r0, [ip, #64]	; 0x40
  USBx->ISTR = 0U;
 80057d0:	f8ac 0044 	strh.w	r0, [ip, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 80057d4:	f8ac 0050 	strh.w	r0, [ip, #80]	; 0x50
}
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop

080057dc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80057de:	780c      	ldrb	r4, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80057e0:	f891 c003 	ldrb.w	ip, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80057e4:	b222      	sxth	r2, r4
 80057e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80057ea:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80057ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f2:	041b      	lsls	r3, r3, #16
 80057f4:	0c1b      	lsrs	r3, r3, #16
  switch (ep->type)
 80057f6:	f1bc 0f03 	cmp.w	ip, #3
 80057fa:	f200 819b 	bhi.w	8005b34 <USB_ActivateEndpoint+0x358>
 80057fe:	e8df f00c 	tbb	[pc, ip]
 8005802:	bfbc      	.short	0xbfbc
 8005804:	0272      	.short	0x0272
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005806:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800580a:	f248 0580 	movw	r5, #32896	; 0x8080
 800580e:	432b      	orrs	r3, r5
 8005810:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005814:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005818:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800581c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005820:	041b      	lsls	r3, r3, #16
 8005822:	0c1b      	lsrs	r3, r3, #16
 8005824:	4323      	orrs	r3, r4
 8005826:	432b      	orrs	r3, r5
 8005828:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 800582c:	7b0d      	ldrb	r5, [r1, #12]
 800582e:	2d00      	cmp	r5, #0
 8005830:	d06d      	beq.n	800590e <USB_ActivateEndpoint+0x132>
 8005832:	2500      	movs	r5, #0
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005834:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005838:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800583c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005840:	041b      	lsls	r3, r3, #16
 8005842:	0c1b      	lsrs	r3, r3, #16
 8005844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800584c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005850:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
 8005854:	890b      	ldrh	r3, [r1, #8]
 8005856:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800585a:	fa14 fe8e 	uxtah	lr, r4, lr
 800585e:	085b      	lsrs	r3, r3, #1
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	f8ae 3400 	strh.w	r3, [lr, #1024]	; 0x400
 8005866:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800586a:	fa14 f483 	uxtah	r4, r4, r3
 800586e:	894b      	ldrh	r3, [r1, #10]
 8005870:	085b      	lsrs	r3, r3, #1
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	f8a4 3404 	strh.w	r3, [r4, #1028]	; 0x404

    if (ep->is_in == 0U)
 8005878:	784b      	ldrb	r3, [r1, #1]
 800587a:	2b00      	cmp	r3, #0
 800587c:	f040 80d8 	bne.w	8005a30 <USB_ActivateEndpoint+0x254>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005880:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005884:	045e      	lsls	r6, r3, #17
 8005886:	d50d      	bpl.n	80058a4 <USB_ActivateEndpoint+0xc8>
 8005888:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800588c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005894:	041b      	lsls	r3, r3, #16
 8005896:	0c1b      	lsrs	r3, r3, #16
 8005898:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800589c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058a0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058a4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80058a8:	065c      	lsls	r4, r3, #25
 80058aa:	f100 8108 	bmi.w	8005abe <USB_ActivateEndpoint+0x2e2>

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80058ae:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80058b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ba:	041b      	lsls	r3, r3, #16
 80058bc:	0c1b      	lsrs	r3, r3, #16
 80058be:	f248 0180 	movw	r1, #32896	; 0x8080
 80058c2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80058c6:	430b      	orrs	r3, r1
 80058c8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058cc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80058d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058d8:	041b      	lsls	r3, r3, #16
 80058da:	0c1b      	lsrs	r3, r3, #16
 80058dc:	430b      	orrs	r3, r1
 80058de:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 80058e2:	4628      	mov	r0, r5
 80058e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80058e6:	f248 0e80 	movw	lr, #32896	; 0x8080
 80058ea:	ea43 030e 	orr.w	r3, r3, lr
 80058ee:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80058f2:	f830 5022 	ldrh.w	r5, [r0, r2, lsl #2]
 80058f6:	4e9b      	ldr	r6, [pc, #620]	; (8005b64 <USB_ActivateEndpoint+0x388>)
 80058f8:	b2ad      	uxth	r5, r5
 80058fa:	4035      	ands	r5, r6
 80058fc:	4325      	orrs	r5, r4
 80058fe:	ea4e 0505 	orr.w	r5, lr, r5
 8005902:	f820 5022 	strh.w	r5, [r0, r2, lsl #2]
  if (ep->doublebuffer == 0U)
 8005906:	7b0d      	ldrb	r5, [r1, #12]
 8005908:	2d00      	cmp	r5, #0
 800590a:	f040 80f9 	bne.w	8005b00 <USB_ActivateEndpoint+0x324>
    if (ep->is_in != 0U)
 800590e:	784b      	ldrb	r3, [r1, #1]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d042      	beq.n	800599a <USB_ActivateEndpoint+0x1be>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005914:	88cb      	ldrh	r3, [r1, #6]
 8005916:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 800591a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800591e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005922:	085b      	lsrs	r3, r3, #1
 8005924:	b289      	uxth	r1, r1
 8005926:	005b      	lsls	r3, r3, #1
 8005928:	5263      	strh	r3, [r4, r1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800592a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800592e:	065b      	lsls	r3, r3, #25
 8005930:	d50d      	bpl.n	800594e <USB_ActivateEndpoint+0x172>
 8005932:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800593a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593e:	041b      	lsls	r3, r3, #16
 8005940:	0c1b      	lsrs	r3, r3, #16
 8005942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005946:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800594a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800594e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005956:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800595a:	041b      	lsls	r3, r3, #16
      if (ep->type != EP_TYPE_ISOC)
 800595c:	f1bc 0f01 	cmp.w	ip, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005960:	ea4f 4313 	mov.w	r3, r3, lsr #16
      if (ep->type != EP_TYPE_ISOC)
 8005964:	d011      	beq.n	800598a <USB_ActivateEndpoint+0x1ae>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005966:	f083 0320 	eor.w	r3, r3, #32
 800596a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800596e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005972:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8005976:	4628      	mov	r0, r5
 8005978:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_CONTROL;
 800597a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      break;
 800597e:	e744      	b.n	800580a <USB_ActivateEndpoint+0x2e>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005980:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
      break;
 8005984:	e741      	b.n	800580a <USB_ActivateEndpoint+0x2e>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005986:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800598a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800598e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005992:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8005996:	4628      	mov	r0, r5
 8005998:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800599a:	88cb      	ldrh	r3, [r1, #6]
 800599c:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80059a0:	690f      	ldr	r7, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80059a2:	0859      	lsrs	r1, r3, #1
 80059a4:	eb00 03c4 	add.w	r3, r0, r4, lsl #3
 80059a8:	fa13 f686 	uxtah	r6, r3, r6
 80059ac:	0049      	lsls	r1, r1, #1
 80059ae:	f8a6 1404 	strh.w	r1, [r6, #1028]	; 0x404
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80059b2:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 80059b6:	fa13 f381 	uxtah	r3, r3, r1
 80059ba:	2f3e      	cmp	r7, #62	; 0x3e
 80059bc:	f8b3 1406 	ldrh.w	r1, [r3, #1030]	; 0x406
 80059c0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80059c4:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 80059c8:	f200 8088 	bhi.w	8005adc <USB_ActivateEndpoint+0x300>
 80059cc:	2f00      	cmp	r7, #0
 80059ce:	f040 80a3 	bne.w	8005b18 <USB_ActivateEndpoint+0x33c>
 80059d2:	f8b3 1406 	ldrh.w	r1, [r3, #1030]	; 0x406
 80059d6:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80059da:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80059de:	b289      	uxth	r1, r1
 80059e0:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059e4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80059e8:	045f      	lsls	r7, r3, #17
 80059ea:	d50d      	bpl.n	8005a08 <USB_ActivateEndpoint+0x22c>
 80059ec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80059f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f8:	041b      	lsls	r3, r3, #16
 80059fa:	0c1b      	lsrs	r3, r3, #16
 80059fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a04:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a08:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005a0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a14:	041b      	lsls	r3, r3, #16
 8005a16:	0c1b      	lsrs	r3, r3, #16
      if (ep->num == 0U)
 8005a18:	2c00      	cmp	r4, #0
 8005a1a:	d1b4      	bne.n	8005986 <USB_ActivateEndpoint+0x1aa>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a1c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8005a20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a28:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a30:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005a34:	0459      	lsls	r1, r3, #17
 8005a36:	d50d      	bpl.n	8005a54 <USB_ActivateEndpoint+0x278>
 8005a38:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005a3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a44:	041b      	lsls	r3, r3, #16
 8005a46:	0c1b      	lsrs	r3, r3, #16
 8005a48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a50:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a54:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005a58:	065b      	lsls	r3, r3, #25
 8005a5a:	d50d      	bpl.n	8005a78 <USB_ActivateEndpoint+0x29c>
 8005a5c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005a60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a68:	041b      	lsls	r3, r3, #16
 8005a6a:	0c1b      	lsrs	r3, r3, #16
 8005a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a74:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a78:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005a7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a84:	041b      	lsls	r3, r3, #16
 8005a86:	0c1b      	lsrs	r3, r3, #16
      if (ep->type != EP_TYPE_ISOC)
 8005a88:	f1bc 0f01 	cmp.w	ip, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a8c:	bf18      	it	ne
 8005a8e:	f083 0320 	eorne.w	r3, r3, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a9a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a9e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005aa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aaa:	041b      	lsls	r3, r3, #16
 8005aac:	0c1b      	lsrs	r3, r3, #16
 8005aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8005aba:	4628      	mov	r0, r5
 8005abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005abe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005ac2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aca:	041b      	lsls	r3, r3, #16
 8005acc:	0c1b      	lsrs	r3, r3, #16
 8005ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ad2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ad6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005ada:	e6e8      	b.n	80058ae <USB_ActivateEndpoint+0xd2>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005adc:	f8b3 1406 	ldrh.w	r1, [r3, #1030]	; 0x406
 8005ae0:	097e      	lsrs	r6, r7, #5
 8005ae2:	06ff      	lsls	r7, r7, #27
 8005ae4:	bf08      	it	eq
 8005ae6:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8005aea:	b289      	uxth	r1, r1
 8005aec:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8005af0:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8005af4:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005af8:	b289      	uxth	r1, r1
 8005afa:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 8005afe:	e771      	b.n	80059e4 <USB_ActivateEndpoint+0x208>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005b00:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	4033      	ands	r3, r6
 8005b08:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b10:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005b14:	2500      	movs	r5, #0
 8005b16:	e69b      	b.n	8005850 <USB_ActivateEndpoint+0x74>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005b18:	07f9      	lsls	r1, r7, #31
 8005b1a:	f8b3 1406 	ldrh.w	r1, [r3, #1030]	; 0x406
 8005b1e:	ea4f 0657 	mov.w	r6, r7, lsr #1
 8005b22:	bf48      	it	mi
 8005b24:	3601      	addmi	r6, #1
 8005b26:	b289      	uxth	r1, r1
 8005b28:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8005b2c:	b289      	uxth	r1, r1
 8005b2e:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 8005b32:	e757      	b.n	80059e4 <USB_ActivateEndpoint+0x208>
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005b34:	f248 0580 	movw	r5, #32896	; 0x8080
 8005b38:	432b      	orrs	r3, r5
 8005b3a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005b3e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4a:	041b      	lsls	r3, r3, #16
 8005b4c:	0c1b      	lsrs	r3, r3, #16
 8005b4e:	4323      	orrs	r3, r4
 8005b50:	432b      	orrs	r3, r5
 8005b52:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  if (ep->doublebuffer == 0U)
 8005b56:	7b0b      	ldrb	r3, [r1, #12]
 8005b58:	2501      	movs	r5, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f47f ae6a 	bne.w	8005834 <USB_ActivateEndpoint+0x58>
 8005b60:	e6d5      	b.n	800590e <USB_ActivateEndpoint+0x132>
 8005b62:	bf00      	nop
 8005b64:	ffff8f8f 	.word	0xffff8f8f

08005b68 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8005b68:	7b0b      	ldrb	r3, [r1, #12]
 8005b6a:	b9cb      	cbnz	r3, 8005ba0 <USB_DeactivateEndpoint+0x38>
  {
    if (ep->is_in != 0U)
 8005b6c:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b6e:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f000 80b1 	beq.w	8005cd8 <USB_DeactivateEndpoint+0x170>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b76:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005b7a:	0659      	lsls	r1, r3, #25
 8005b7c:	f100 80c5 	bmi.w	8005d0a <USB_DeactivateEndpoint+0x1a2>

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b80:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005b84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b8c:	041b      	lsls	r3, r3, #16
 8005b8e:	0c1b      	lsrs	r3, r3, #16
 8005b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b98:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	4770      	bx	lr
    if (ep->is_in == 0U)
 8005ba0:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ba2:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in == 0U)
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d14b      	bne.n	8005c40 <USB_DeactivateEndpoint+0xd8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ba8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005bac:	0459      	lsls	r1, r3, #17
 8005bae:	d50d      	bpl.n	8005bcc <USB_DeactivateEndpoint+0x64>
 8005bb0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005bb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bbc:	041b      	lsls	r3, r3, #16
 8005bbe:	0c1b      	lsrs	r3, r3, #16
 8005bc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bc8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bcc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005bd0:	065b      	lsls	r3, r3, #25
 8005bd2:	d50d      	bpl.n	8005bf0 <USB_DeactivateEndpoint+0x88>
 8005bd4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005bd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be0:	041b      	lsls	r3, r3, #16
 8005be2:	0c1b      	lsrs	r3, r3, #16
 8005be4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005be8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8005bf0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005bf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bfc:	041b      	lsls	r3, r3, #16
 8005bfe:	0c1b      	lsrs	r3, r3, #16
 8005c00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c08:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c0c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005c10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c18:	041b      	lsls	r3, r3, #16
 8005c1a:	f248 0180 	movw	r1, #32896	; 0x8080
 8005c1e:	0c1b      	lsrs	r3, r3, #16
 8005c20:	430b      	orrs	r3, r1
 8005c22:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c26:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c32:	041b      	lsls	r3, r3, #16
 8005c34:	0c1b      	lsrs	r3, r3, #16
 8005c36:	430b      	orrs	r3, r1
 8005c38:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8005c3c:	2000      	movs	r0, #0
 8005c3e:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c40:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005c44:	0459      	lsls	r1, r3, #17
 8005c46:	d50d      	bpl.n	8005c64 <USB_DeactivateEndpoint+0xfc>
 8005c48:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005c4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c54:	041b      	lsls	r3, r3, #16
 8005c56:	0c1b      	lsrs	r3, r3, #16
 8005c58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c60:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c64:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005c68:	065b      	lsls	r3, r3, #25
 8005c6a:	d50d      	bpl.n	8005c88 <USB_DeactivateEndpoint+0x120>
 8005c6c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005c70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c78:	041b      	lsls	r3, r3, #16
 8005c7a:	0c1b      	lsrs	r3, r3, #16
 8005c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c84:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8005c88:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005c8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c94:	041b      	lsls	r3, r3, #16
 8005c96:	0c1b      	lsrs	r3, r3, #16
 8005c98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ca0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ca4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005ca8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cb0:	041b      	lsls	r3, r3, #16
 8005cb2:	f248 0180 	movw	r1, #32896	; 0x8080
 8005cb6:	0c1b      	lsrs	r3, r3, #16
 8005cb8:	430b      	orrs	r3, r1
 8005cba:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cbe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005cc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cca:	041b      	lsls	r3, r3, #16
 8005ccc:	0c1b      	lsrs	r3, r3, #16
 8005cce:	430b      	orrs	r3, r1
 8005cd0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cd8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005cdc:	045b      	lsls	r3, r3, #17
 8005cde:	d50d      	bpl.n	8005cfc <USB_DeactivateEndpoint+0x194>
 8005ce0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005ce4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cec:	041b      	lsls	r3, r3, #16
 8005cee:	0c1b      	lsrs	r3, r3, #16
 8005cf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cfc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005d00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d08:	e740      	b.n	8005b8c <USB_DeactivateEndpoint+0x24>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d0a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d16:	041b      	lsls	r3, r3, #16
 8005d18:	0c1b      	lsrs	r3, r3, #16
 8005d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d22:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005d26:	e72b      	b.n	8005b80 <USB_DeactivateEndpoint+0x18>

08005d28 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d2c:	784b      	ldrb	r3, [r1, #1]
 8005d2e:	2b01      	cmp	r3, #1
{
 8005d30:	4602      	mov	r2, r0
  if (ep->is_in == 1U)
 8005d32:	f000 808b 	beq.w	8005e4c <USB_EPStartXfer+0x124>

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005d36:	7b08      	ldrb	r0, [r1, #12]
 8005d38:	2800      	cmp	r0, #0
 8005d3a:	d050      	beq.n	8005dde <USB_EPStartXfer+0xb6>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005d3c:	78c8      	ldrb	r0, [r1, #3]
 8005d3e:	2802      	cmp	r0, #2
 8005d40:	f000 811e 	beq.w	8005f80 <USB_EPStartXfer+0x258>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005d44:	2801      	cmp	r0, #1
 8005d46:	f040 80f2 	bne.w	8005f2e <USB_EPStartXfer+0x206>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005d4a:	6988      	ldr	r0, [r1, #24]
 8005d4c:	690c      	ldr	r4, [r1, #16]
 8005d4e:	42a0      	cmp	r0, r4
        {
          len = ep->maxpacket;
          ep->xfer_len -= len;
 8005d50:	bf8a      	itet	hi
 8005d52:	1b05      	subhi	r5, r0, r4
        }
        else
        {
          len = ep->xfer_len;
          ep->xfer_len = 0U;
 8005d54:	2500      	movls	r5, #0
 8005d56:	4620      	movhi	r0, r4
 8005d58:	618d      	str	r5, [r1, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f040 810e 	bne.w	8005f7c <USB_EPStartXfer+0x254>
 8005d60:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
 8005d64:	780b      	ldrb	r3, [r1, #0]
 8005d66:	f202 4402 	addw	r4, r2, #1026	; 0x402
 8005d6a:	fa14 f485 	uxtah	r4, r4, r5
 8005d6e:	283e      	cmp	r0, #62	; 0x3e
 8005d70:	f834 5033 	ldrh.w	r5, [r4, r3, lsl #3]
 8005d74:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005d78:	f824 5033 	strh.w	r5, [r4, r3, lsl #3]
 8005d7c:	f240 8233 	bls.w	80061e6 <USB_EPStartXfer+0x4be>
 8005d80:	f834 5033 	ldrh.w	r5, [r4, r3, lsl #3]
 8005d84:	0946      	lsrs	r6, r0, #5
 8005d86:	f010 001f 	ands.w	r0, r0, #31
 8005d8a:	4637      	mov	r7, r6
 8005d8c:	b2ad      	uxth	r5, r5
 8005d8e:	bf08      	it	eq
 8005d90:	f106 37ff 	addeq.w	r7, r6, #4294967295
 8005d94:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 8005d98:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 8005d9c:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 8005da0:	b2ad      	uxth	r5, r5
 8005da2:	f824 5033 	strh.w	r5, [r4, r3, lsl #3]
 8005da6:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
 8005daa:	f202 4406 	addw	r4, r2, #1030	; 0x406
 8005dae:	fa14 f485 	uxtah	r4, r4, r5
 8005db2:	f834 5033 	ldrh.w	r5, [r4, r3, lsl #3]
 8005db6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005dba:	f824 5033 	strh.w	r5, [r4, r3, lsl #3]
 8005dbe:	b900      	cbnz	r0, 8005dc2 <USB_EPStartXfer+0x9a>
 8005dc0:	3e01      	subs	r6, #1
 8005dc2:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 8005dc6:	b280      	uxth	r0, r0
 8005dc8:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8005dcc:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8005dd0:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8005dd4:	b280      	uxth	r0, r0
 8005dd6:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
 8005dda:	780b      	ldrb	r3, [r1, #0]
 8005ddc:	e022      	b.n	8005e24 <USB_EPStartXfer+0xfc>
      if (ep->xfer_len > ep->maxpacket)
 8005dde:	698b      	ldr	r3, [r1, #24]
 8005de0:	690c      	ldr	r4, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005de2:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
      if (ep->xfer_len > ep->maxpacket)
 8005de6:	42a3      	cmp	r3, r4
        ep->xfer_len -= len;
 8005de8:	bf88      	it	hi
 8005dea:	1b18      	subhi	r0, r3, r4
 8005dec:	6188      	str	r0, [r1, #24]
 8005dee:	bf88      	it	hi
 8005df0:	4623      	movhi	r3, r4
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005df2:	f202 4006 	addw	r0, r2, #1030	; 0x406
 8005df6:	780c      	ldrb	r4, [r1, #0]
 8005df8:	fa10 f08c 	uxtah	r0, r0, ip
 8005dfc:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8005e00:	2b3e      	cmp	r3, #62	; 0x3e
 8005e02:	8820      	ldrh	r0, [r4, #0]
 8005e04:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005e08:	8020      	strh	r0, [r4, #0]
 8005e0a:	f200 8086 	bhi.w	8005f1a <USB_EPStartXfer+0x1f2>
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f040 8116 	bne.w	8006040 <USB_EPStartXfer+0x318>
 8005e14:	8823      	ldrh	r3, [r4, #0]
 8005e16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	8023      	strh	r3, [r4, #0]
 8005e22:	780b      	ldrb	r3, [r1, #0]
        return HAL_ERROR;
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e24:	b219      	sxth	r1, r3
  }

  return HAL_OK;
 8005e26:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e28:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8005e2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e34:	041b      	lsls	r3, r3, #16
 8005e36:	0c1b      	lsrs	r3, r3, #16
 8005e38:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8005e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e44:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
}
 8005e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ep->xfer_len > ep->maxpacket)
 8005e4c:	690c      	ldr	r4, [r1, #16]
 8005e4e:	6988      	ldr	r0, [r1, #24]
    if (ep->doublebuffer == 0U)
 8005e50:	7b0b      	ldrb	r3, [r1, #12]
 8005e52:	42a0      	cmp	r0, r4
 8005e54:	bf28      	it	cs
 8005e56:	4620      	movcs	r0, r4
 8005e58:	bb93      	cbnz	r3, 8005ec0 <USB_EPStartXfer+0x198>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005e5a:	b284      	uxth	r4, r0
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005e5c:	4620      	mov	r0, r4
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005e5e:	f8b1 e006 	ldrh.w	lr, [r1, #6]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005e62:	694b      	ldr	r3, [r1, #20]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005e64:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005e66:	f502 6580 	add.w	r5, r2, #1024	; 0x400

  for (count = n; count != 0U; count--)
 8005e6a:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005e6c:	44ae      	add	lr, r5
  for (count = n; count != 0U; count--)
 8005e6e:	d009      	beq.n	8005e84 <USB_EPStartXfer+0x15c>
 8005e70:	eb03 0c40 	add.w	ip, r3, r0, lsl #1
 8005e74:	ebae 0e03 	sub.w	lr, lr, r3
  {
    WrVal = pBuf[0];
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005e78:	8818      	ldrh	r0, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8005e7a:	f823 000e 	strh.w	r0, [r3, lr]
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
 8005e7e:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 8005e80:	4563      	cmp	r3, ip
 8005e82:	d1f9      	bne.n	8005e78 <USB_EPStartXfer+0x150>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005e84:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005e88:	7808      	ldrb	r0, [r1, #0]
 8005e8a:	f202 4502 	addw	r5, r2, #1026	; 0x402
 8005e8e:	fa15 f383 	uxtah	r3, r5, r3
 8005e92:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8005e96:	801c      	strh	r4, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005e98:	7809      	ldrb	r1, [r1, #0]
 8005e9a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8005e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ea2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ea6:	041b      	lsls	r3, r3, #16
 8005ea8:	0c1b      	lsrs	r3, r3, #16
 8005eaa:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8005eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb6:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  return HAL_OK;
 8005eba:	2000      	movs	r0, #0
}
 8005ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ep->type == EP_TYPE_BULK)
 8005ec0:	78cb      	ldrb	r3, [r1, #3]
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	f000 80c8 	beq.w	8006058 <USB_EPStartXfer+0x330>
        ep->xfer_len_db -= len;
 8005ec8:	6a0b      	ldr	r3, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005eca:	780c      	ldrb	r4, [r1, #0]
        ep->xfer_len_db -= len;
 8005ecc:	1a1b      	subs	r3, r3, r0
 8005ece:	620b      	str	r3, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005ed0:	b223      	sxth	r3, r4
 8005ed2:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8005ed6:	f013 0f40 	tst.w	r3, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005eda:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005ede:	f000 8118 	beq.w	8006112 <USB_EPStartXfer+0x3ea>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ee2:	f202 4506 	addw	r5, r2, #1030	; 0x406
 8005ee6:	fa15 f383 	uxtah	r3, r5, r3
 8005eea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005eee:	b284      	uxth	r4, r0
 8005ef0:	801c      	strh	r4, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005ef2:	b280      	uxth	r0, r0
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ef4:	894c      	ldrh	r4, [r1, #10]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ef6:	694b      	ldr	r3, [r1, #20]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005ef8:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005efa:	f502 6c80 	add.w	ip, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 8005efe:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005f00:	44a4      	add	ip, r4
  for (count = n; count != 0U; count--)
 8005f02:	d0c9      	beq.n	8005e98 <USB_EPStartXfer+0x170>
 8005f04:	eb03 0440 	add.w	r4, r3, r0, lsl #1
 8005f08:	ebac 0c03 	sub.w	ip, ip, r3
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005f0c:	8818      	ldrh	r0, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8005f0e:	f823 000c 	strh.w	r0, [r3, ip]
    pBuf++;
 8005f12:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 8005f14:	42a3      	cmp	r3, r4
 8005f16:	d1f9      	bne.n	8005f0c <USB_EPStartXfer+0x1e4>
 8005f18:	e7be      	b.n	8005e98 <USB_EPStartXfer+0x170>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005f1a:	0958      	lsrs	r0, r3, #5
 8005f1c:	06dd      	lsls	r5, r3, #27
 8005f1e:	8823      	ldrh	r3, [r4, #0]
 8005f20:	bf08      	it	eq
 8005f22:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8005f2c:	e773      	b.n	8005e16 <USB_EPStartXfer+0xee>
        return HAL_ERROR;
 8005f2e:	2001      	movs	r0, #1
}
 8005f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005f34:	f834 5033 	ldrh.w	r5, [r4, r3, lsl #3]
 8005f38:	0846      	lsrs	r6, r0, #1
 8005f3a:	f010 0001 	ands.w	r0, r0, #1
 8005f3e:	4637      	mov	r7, r6
 8005f40:	b2ad      	uxth	r5, r5
 8005f42:	bf18      	it	ne
 8005f44:	1c77      	addne	r7, r6, #1
 8005f46:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 8005f4a:	b2ad      	uxth	r5, r5
 8005f4c:	f824 5033 	strh.w	r5, [r4, r3, lsl #3]
 8005f50:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
 8005f54:	f202 4406 	addw	r4, r2, #1030	; 0x406
 8005f58:	fa14 f485 	uxtah	r4, r4, r5
 8005f5c:	f834 5033 	ldrh.w	r5, [r4, r3, lsl #3]
 8005f60:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005f64:	f824 5033 	strh.w	r5, [r4, r3, lsl #3]
 8005f68:	b100      	cbz	r0, 8005f6c <USB_EPStartXfer+0x244>
 8005f6a:	3601      	adds	r6, #1
 8005f6c:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 8005f70:	b280      	uxth	r0, r0
 8005f72:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8005f76:	b280      	uxth	r0, r0
 8005f78:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
 8005f7c:	780b      	ldrb	r3, [r1, #0]
 8005f7e:	e751      	b.n	8005e24 <USB_EPStartXfer+0xfc>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d13d      	bne.n	8006000 <USB_EPStartXfer+0x2d8>
 8005f84:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 8005f88:	780b      	ldrb	r3, [r1, #0]
 8005f8a:	690d      	ldr	r5, [r1, #16]
 8005f8c:	f202 4002 	addw	r0, r2, #1026	; 0x402
 8005f90:	fa10 f084 	uxtah	r0, r0, r4
 8005f94:	2d3e      	cmp	r5, #62	; 0x3e
 8005f96:	f830 4033 	ldrh.w	r4, [r0, r3, lsl #3]
 8005f9a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005f9e:	f820 4033 	strh.w	r4, [r0, r3, lsl #3]
 8005fa2:	f240 80ff 	bls.w	80061a4 <USB_EPStartXfer+0x47c>
 8005fa6:	f830 4033 	ldrh.w	r4, [r0, r3, lsl #3]
 8005faa:	096e      	lsrs	r6, r5, #5
 8005fac:	f015 051f 	ands.w	r5, r5, #31
 8005fb0:	4637      	mov	r7, r6
 8005fb2:	b2a4      	uxth	r4, r4
 8005fb4:	bf08      	it	eq
 8005fb6:	f106 37ff 	addeq.w	r7, r6, #4294967295
 8005fba:	ea44 2487 	orr.w	r4, r4, r7, lsl #10
 8005fbe:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8005fc2:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8005fc6:	b2a4      	uxth	r4, r4
 8005fc8:	f820 4033 	strh.w	r4, [r0, r3, lsl #3]
 8005fcc:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8005fd0:	f202 4406 	addw	r4, r2, #1030	; 0x406
 8005fd4:	fa14 f480 	uxtah	r4, r4, r0
 8005fd8:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 8005fdc:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005fe0:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
 8005fe4:	b905      	cbnz	r5, 8005fe8 <USB_EPStartXfer+0x2c0>
 8005fe6:	3e01      	subs	r6, #1
 8005fe8:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 8005fec:	b280      	uxth	r0, r0
 8005fee:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8005ff2:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8005ff6:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8005ffa:	b280      	uxth	r0, r0
 8005ffc:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
        if (ep->xfer_count != 0U)
 8006000:	69cb      	ldr	r3, [r1, #28]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d0ba      	beq.n	8005f7c <USB_EPStartXfer+0x254>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006006:	780b      	ldrb	r3, [r1, #0]
 8006008:	b218      	sxth	r0, r3
 800600a:	f244 0440 	movw	r4, #16448	; 0x4040
 800600e:	f832 5020 	ldrh.w	r5, [r2, r0, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006012:	ea04 0605 	and.w	r6, r4, r5
 8006016:	43ac      	bics	r4, r5
 8006018:	d002      	beq.n	8006020 <USB_EPStartXfer+0x2f8>
 800601a:	2e00      	cmp	r6, #0
 800601c:	f47f af02 	bne.w	8005e24 <USB_EPStartXfer+0xfc>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006020:	f832 3020 	ldrh.w	r3, [r2, r0, lsl #2]
 8006024:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800602c:	041b      	lsls	r3, r3, #16
 800602e:	0c1b      	lsrs	r3, r3, #16
 8006030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006034:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006038:	f822 3020 	strh.w	r3, [r2, r0, lsl #2]
 800603c:	780b      	ldrb	r3, [r1, #0]
 800603e:	e6f1      	b.n	8005e24 <USB_EPStartXfer+0xfc>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006040:	0858      	lsrs	r0, r3, #1
 8006042:	07db      	lsls	r3, r3, #31
 8006044:	8823      	ldrh	r3, [r4, #0]
 8006046:	bf48      	it	mi
 8006048:	3001      	addmi	r0, #1
 800604a:	b29b      	uxth	r3, r3
 800604c:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8006050:	b29b      	uxth	r3, r3
 8006052:	8023      	strh	r3, [r4, #0]
 8006054:	780b      	ldrb	r3, [r1, #0]
 8006056:	e6e5      	b.n	8005e24 <USB_EPStartXfer+0xfc>
        if (ep->xfer_len_db > ep->maxpacket)
 8006058:	6a0b      	ldr	r3, [r1, #32]
 800605a:	429c      	cmp	r4, r3
 800605c:	d276      	bcs.n	800614c <USB_EPStartXfer+0x424>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800605e:	780d      	ldrb	r5, [r1, #0]
 8006060:	f832 c025 	ldrh.w	ip, [r2, r5, lsl #2]
 8006064:	f42c 4ce0 	bic.w	ip, ip, #28672	; 0x7000
 8006068:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 800606c:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8006070:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006074:	f44c 4c01 	orr.w	ip, ip, #33024	; 0x8100
 8006078:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 800607c:	f822 c025 	strh.w	ip, [r2, r5, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006080:	f832 6025 	ldrh.w	r6, [r2, r5, lsl #2]
          ep->xfer_len_db -= len;
 8006084:	1a1b      	subs	r3, r3, r0
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006086:	f016 0f40 	tst.w	r6, #64	; 0x40
          ep->xfer_len_db -= len;
 800608a:	620b      	str	r3, [r1, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800608c:	f8b2 6050 	ldrh.w	r6, [r2, #80]	; 0x50
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006090:	f000 80c4 	beq.w	800621c <USB_EPStartXfer+0x4f4>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006094:	f202 4706 	addw	r7, r2, #1030	; 0x406
 8006098:	fa17 f686 	uxtah	r6, r7, r6
 800609c:	fa1f fa80 	uxth.w	sl, r0
 80060a0:	f826 a035 	strh.w	sl, [r6, r5, lsl #3]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80060a4:	4657      	mov	r7, sl
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80060a6:	894e      	ldrh	r6, [r1, #10]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060a8:	f8d1 c014 	ldr.w	ip, [r1, #20]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80060ac:	3701      	adds	r7, #1
 80060ae:	f502 6980 	add.w	r9, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 80060b2:	087f      	lsrs	r7, r7, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80060b4:	444e      	add	r6, r9
  for (count = n; count != 0U; count--)
 80060b6:	d00c      	beq.n	80060d2 <USB_EPStartXfer+0x3aa>
 80060b8:	eba6 080c 	sub.w	r8, r6, ip
 80060bc:	eb0c 0b47 	add.w	fp, ip, r7, lsl #1
  uint8_t *pBuf = pbUsrBuf;
 80060c0:	46e6      	mov	lr, ip
    WrVal |= (uint16_t)pBuf[1] << 8;
 80060c2:	f8be 6000 	ldrh.w	r6, [lr]
    *pdwVal = (WrVal & 0xFFFFU);
 80060c6:	f82e 6008 	strh.w	r6, [lr, r8]
    pBuf++;
 80060ca:	f10e 0e02 	add.w	lr, lr, #2
  for (count = n; count != 0U; count--)
 80060ce:	45f3      	cmp	fp, lr
 80060d0:	d1f7      	bne.n	80060c2 <USB_EPStartXfer+0x39a>
            ep->xfer_buff += len;
 80060d2:	eb0c 0600 	add.w	r6, ip, r0
            if (ep->xfer_len_db > ep->maxpacket)
 80060d6:	429c      	cmp	r4, r3
            ep->xfer_buff += len;
 80060d8:	614e      	str	r6, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80060da:	f080 8109 	bcs.w	80062f0 <USB_EPStartXfer+0x5c8>
              ep->xfer_len_db -= len;
 80060de:	1a1b      	subs	r3, r3, r0
 80060e0:	620b      	str	r3, [r1, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060e2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80060e6:	f202 4002 	addw	r0, r2, #1026	; 0x402
 80060ea:	fa10 f383 	uxtah	r3, r0, r3
 80060ee:	f823 a035 	strh.w	sl, [r3, r5, lsl #3]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80060f2:	890b      	ldrh	r3, [r1, #8]
 80060f4:	eb03 0509 	add.w	r5, r3, r9
  for (count = n; count != 0U; count--)
 80060f8:	2f00      	cmp	r7, #0
 80060fa:	f43f aecd 	beq.w	8005e98 <USB_EPStartXfer+0x170>
 80060fe:	eb06 0447 	add.w	r4, r6, r7, lsl #1
  uint8_t *pBuf = pbUsrBuf;
 8006102:	4633      	mov	r3, r6
 8006104:	1bad      	subs	r5, r5, r6
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006106:	8818      	ldrh	r0, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8006108:	5358      	strh	r0, [r3, r5]
    pBuf++;
 800610a:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 800610c:	429c      	cmp	r4, r3
 800610e:	d1fa      	bne.n	8006106 <USB_EPStartXfer+0x3de>
 8006110:	e6c2      	b.n	8005e98 <USB_EPStartXfer+0x170>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006112:	f202 4502 	addw	r5, r2, #1026	; 0x402
 8006116:	fa15 f383 	uxtah	r3, r5, r3
 800611a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800611e:	b284      	uxth	r4, r0
 8006120:	801c      	strh	r4, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006122:	4620      	mov	r0, r4
 8006124:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006126:	890c      	ldrh	r4, [r1, #8]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006128:	694b      	ldr	r3, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800612a:	f502 6c80 	add.w	ip, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 800612e:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006130:	44a4      	add	ip, r4
  for (count = n; count != 0U; count--)
 8006132:	f43f aeb1 	beq.w	8005e98 <USB_EPStartXfer+0x170>
 8006136:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800613a:	ebac 0c03 	sub.w	ip, ip, r3
    WrVal |= (uint16_t)pBuf[1] << 8;
 800613e:	881c      	ldrh	r4, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8006140:	f823 400c 	strh.w	r4, [r3, ip]
    pBuf++;
 8006144:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 8006146:	4283      	cmp	r3, r0
 8006148:	d1f9      	bne.n	800613e <USB_EPStartXfer+0x416>
 800614a:	e6a5      	b.n	8005e98 <USB_EPStartXfer+0x170>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800614c:	780e      	ldrb	r6, [r1, #0]
 800614e:	b234      	sxth	r4, r6
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006150:	f202 4502 	addw	r5, r2, #1026	; 0x402
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006154:	f832 0024 	ldrh.w	r0, [r2, r4, lsl #2]
 8006158:	f420 40e2 	bic.w	r0, r0, #28928	; 0x7100
 800615c:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 8006160:	0400      	lsls	r0, r0, #16
 8006162:	0c00      	lsrs	r0, r0, #16
 8006164:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8006168:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800616c:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006170:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 8006174:	b29f      	uxth	r7, r3
 8006176:	fa15 f384 	uxtah	r3, r5, r4
 800617a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800617e:	1c78      	adds	r0, r7, #1
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006180:	801f      	strh	r7, [r3, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006182:	890d      	ldrh	r5, [r1, #8]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006184:	694b      	ldr	r3, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006186:	f502 6480 	add.w	r4, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 800618a:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800618c:	4425      	add	r5, r4
  for (count = n; count != 0U; count--)
 800618e:	f43f ae83 	beq.w	8005e98 <USB_EPStartXfer+0x170>
 8006192:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8006196:	1aed      	subs	r5, r5, r3
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006198:	881c      	ldrh	r4, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800619a:	535c      	strh	r4, [r3, r5]
    pBuf++;
 800619c:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 800619e:	4298      	cmp	r0, r3
 80061a0:	d1fa      	bne.n	8006198 <USB_EPStartXfer+0x470>
 80061a2:	e679      	b.n	8005e98 <USB_EPStartXfer+0x170>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80061a4:	2d00      	cmp	r5, #0
 80061a6:	d177      	bne.n	8006298 <USB_EPStartXfer+0x570>
 80061a8:	f830 4033 	ldrh.w	r4, [r0, r3, lsl #3]
 80061ac:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 80061b0:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80061b4:	b2a4      	uxth	r4, r4
 80061b6:	f820 4033 	strh.w	r4, [r0, r3, lsl #3]
 80061ba:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 80061be:	f202 4406 	addw	r4, r2, #1030	; 0x406
 80061c2:	fa14 f480 	uxtah	r4, r4, r0
 80061c6:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 80061ca:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80061ce:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
 80061d2:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 80061d6:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 80061da:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 80061de:	b280      	uxth	r0, r0
 80061e0:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
 80061e4:	e70c      	b.n	8006000 <USB_EPStartXfer+0x2d8>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80061e6:	2800      	cmp	r0, #0
 80061e8:	f47f aea4 	bne.w	8005f34 <USB_EPStartXfer+0x20c>
 80061ec:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 80061f0:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 80061f4:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 80061f8:	b280      	uxth	r0, r0
 80061fa:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
 80061fe:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8006202:	f202 4406 	addw	r4, r2, #1030	; 0x406
 8006206:	fa14 f480 	uxtah	r4, r4, r0
 800620a:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 800620e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8006212:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
 8006216:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 800621a:	e5d7      	b.n	8005dcc <USB_EPStartXfer+0xa4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800621c:	f202 4702 	addw	r7, r2, #1026	; 0x402
 8006220:	fa17 f686 	uxtah	r6, r7, r6
 8006224:	fa1f f980 	uxth.w	r9, r0
 8006228:	f826 9035 	strh.w	r9, [r6, r5, lsl #3]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800622c:	464f      	mov	r7, r9
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800622e:	890e      	ldrh	r6, [r1, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006230:	f8d1 c014 	ldr.w	ip, [r1, #20]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006234:	3701      	adds	r7, #1
 8006236:	f502 6880 	add.w	r8, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 800623a:	087f      	lsrs	r7, r7, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800623c:	4446      	add	r6, r8
  for (count = n; count != 0U; count--)
 800623e:	d00c      	beq.n	800625a <USB_EPStartXfer+0x532>
 8006240:	eba6 0a0c 	sub.w	sl, r6, ip
 8006244:	eb0c 0b47 	add.w	fp, ip, r7, lsl #1
  uint8_t *pBuf = pbUsrBuf;
 8006248:	46e6      	mov	lr, ip
    WrVal |= (uint16_t)pBuf[1] << 8;
 800624a:	f8be 6000 	ldrh.w	r6, [lr]
    *pdwVal = (WrVal & 0xFFFFU);
 800624e:	f82e 600a 	strh.w	r6, [lr, sl]
    pBuf++;
 8006252:	f10e 0e02 	add.w	lr, lr, #2
  for (count = n; count != 0U; count--)
 8006256:	45f3      	cmp	fp, lr
 8006258:	d1f7      	bne.n	800624a <USB_EPStartXfer+0x522>
            ep->xfer_buff += len;
 800625a:	eb0c 0600 	add.w	r6, ip, r0
            if (ep->xfer_len_db > ep->maxpacket)
 800625e:	429c      	cmp	r4, r3
            ep->xfer_buff += len;
 8006260:	614e      	str	r6, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8006262:	d23e      	bcs.n	80062e2 <USB_EPStartXfer+0x5ba>
              ep->xfer_len_db -= len;
 8006264:	1a1b      	subs	r3, r3, r0
 8006266:	620b      	str	r3, [r1, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006268:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800626c:	f202 4006 	addw	r0, r2, #1030	; 0x406
 8006270:	fa10 f383 	uxtah	r3, r0, r3
 8006274:	f823 9035 	strh.w	r9, [r3, r5, lsl #3]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006278:	894b      	ldrh	r3, [r1, #10]
 800627a:	eb03 0508 	add.w	r5, r3, r8
  for (count = n; count != 0U; count--)
 800627e:	2f00      	cmp	r7, #0
 8006280:	f43f ae0a 	beq.w	8005e98 <USB_EPStartXfer+0x170>
 8006284:	eb06 0447 	add.w	r4, r6, r7, lsl #1
  uint8_t *pBuf = pbUsrBuf;
 8006288:	4633      	mov	r3, r6
 800628a:	1bad      	subs	r5, r5, r6
    WrVal |= (uint16_t)pBuf[1] << 8;
 800628c:	8818      	ldrh	r0, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800628e:	5358      	strh	r0, [r3, r5]
    pBuf++;
 8006290:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 8006292:	429c      	cmp	r4, r3
 8006294:	d1fa      	bne.n	800628c <USB_EPStartXfer+0x564>
 8006296:	e5ff      	b.n	8005e98 <USB_EPStartXfer+0x170>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006298:	f830 4033 	ldrh.w	r4, [r0, r3, lsl #3]
 800629c:	086e      	lsrs	r6, r5, #1
 800629e:	f015 0501 	ands.w	r5, r5, #1
 80062a2:	4637      	mov	r7, r6
 80062a4:	b2a4      	uxth	r4, r4
 80062a6:	bf18      	it	ne
 80062a8:	1c77      	addne	r7, r6, #1
 80062aa:	ea44 2487 	orr.w	r4, r4, r7, lsl #10
 80062ae:	b2a4      	uxth	r4, r4
 80062b0:	f820 4033 	strh.w	r4, [r0, r3, lsl #3]
 80062b4:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 80062b8:	f202 4406 	addw	r4, r2, #1030	; 0x406
 80062bc:	fa14 f480 	uxtah	r4, r4, r0
 80062c0:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 80062c4:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80062c8:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
 80062cc:	b105      	cbz	r5, 80062d0 <USB_EPStartXfer+0x5a8>
 80062ce:	3601      	adds	r6, #1
 80062d0:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 80062d4:	b280      	uxth	r0, r0
 80062d6:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 80062da:	b280      	uxth	r0, r0
 80062dc:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
 80062e0:	e68e      	b.n	8006000 <USB_EPStartXfer+0x2d8>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80062e2:	b29c      	uxth	r4, r3
 80062e4:	3401      	adds	r4, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80062e6:	fa1f f983 	uxth.w	r9, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80062ea:	0867      	lsrs	r7, r4, #1
              ep->xfer_len_db = 0U;
 80062ec:	2300      	movs	r3, #0
 80062ee:	e7ba      	b.n	8006266 <USB_EPStartXfer+0x53e>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80062f0:	b29c      	uxth	r4, r3
 80062f2:	3401      	adds	r4, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80062f4:	fa1f fa83 	uxth.w	sl, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80062f8:	0867      	lsrs	r7, r4, #1
              ep->xfer_len_db = 0U;
 80062fa:	2300      	movs	r3, #0
 80062fc:	e6f0      	b.n	80060e0 <USB_EPStartXfer+0x3b8>
 80062fe:	bf00      	nop

08006300 <USB_EPSetStall>:
  if (ep->is_in != 0U)
 8006300:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006302:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8006304:	b18b      	cbz	r3, 800632a <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006306:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800630a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800630e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006312:	041b      	lsls	r3, r3, #16
 8006314:	0c1b      	lsrs	r3, r3, #16
 8006316:	f083 0310 	eor.w	r3, r3, #16
 800631a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800631e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006322:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8006326:	2000      	movs	r0, #0
 8006328:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800632a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800632e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006336:	041b      	lsls	r3, r3, #16
 8006338:	0c1b      	lsrs	r3, r3, #16
 800633a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800633e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006346:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800634a:	2000      	movs	r0, #0
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop

08006350 <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 8006350:	7b0b      	ldrb	r3, [r1, #12]
 8006352:	bb3b      	cbnz	r3, 80063a4 <USB_EPClearStall+0x54>
    if (ep->is_in != 0U)
 8006354:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006356:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8006358:	b333      	cbz	r3, 80063a8 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800635a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800635e:	065b      	lsls	r3, r3, #25
 8006360:	d50d      	bpl.n	800637e <USB_EPClearStall+0x2e>
 8006362:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800636a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800636e:	041b      	lsls	r3, r3, #16
 8006370:	0c1b      	lsrs	r3, r3, #16
 8006372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006376:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800637a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800637e:	78cb      	ldrb	r3, [r1, #3]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d00f      	beq.n	80063a4 <USB_EPClearStall+0x54>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006384:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006388:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800638c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006390:	041b      	lsls	r3, r3, #16
 8006392:	0c1b      	lsrs	r3, r3, #16
 8006394:	f083 0320 	eor.w	r3, r3, #32
 8006398:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800639c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063a0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80063a4:	2000      	movs	r0, #0
 80063a6:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063a8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80063ac:	045b      	lsls	r3, r3, #17
 80063ae:	d50d      	bpl.n	80063cc <USB_EPClearStall+0x7c>
 80063b0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80063b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063bc:	041b      	lsls	r3, r3, #16
 80063be:	0c1b      	lsrs	r3, r3, #16
 80063c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063c8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063cc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80063d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d8:	041b      	lsls	r3, r3, #16
 80063da:	0c1b      	lsrs	r3, r3, #16
 80063dc:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80063e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063e8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80063ec:	2000      	movs	r0, #0
 80063ee:	4770      	bx	lr

080063f0 <USB_SetDevAddress>:
  if (address == 0U)
 80063f0:	b911      	cbnz	r1, 80063f8 <USB_SetDevAddress+0x8>
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80063f2:	2380      	movs	r3, #128	; 0x80
 80063f4:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 80063f8:	2000      	movs	r0, #0
 80063fa:	4770      	bx	lr

080063fc <USB_DevConnect>:
{
 80063fc:	4602      	mov	r2, r0
}
 80063fe:	2000      	movs	r0, #0
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006400:	f8b2 3058 	ldrh.w	r3, [r2, #88]	; 0x58
 8006404:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006408:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800640c:	b29b      	uxth	r3, r3
 800640e:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58
}
 8006412:	4770      	bx	lr

08006414 <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 8006414:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
}
 8006418:	b280      	uxth	r0, r0
 800641a:	4770      	bx	lr

0800641c <USB_WritePMA>:
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800641c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006420:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006422:	4410      	add	r0, r2
  for (count = n; count != 0U; count--)
 8006424:	085a      	lsrs	r2, r3, #1
 8006426:	d008      	beq.n	800643a <USB_WritePMA+0x1e>
  uint8_t *pBuf = pbUsrBuf;
 8006428:	460b      	mov	r3, r1
 800642a:	1ac0      	subs	r0, r0, r3
 800642c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006430:	881a      	ldrh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8006432:	521a      	strh	r2, [r3, r0]
    pBuf++;
 8006434:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 8006436:	4299      	cmp	r1, r3
 8006438:	d1fa      	bne.n	8006430 <USB_WritePMA+0x14>
  }
}
 800643a:	4770      	bx	lr

0800643c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800643c:	b570      	push	{r4, r5, r6, lr}
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800643e:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (count = n; count != 0U; count--)
 8006442:	085e      	lsrs	r6, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006444:	4410      	add	r0, r2
  for (count = n; count != 0U; count--)
 8006446:	d01c      	beq.n	8006482 <USB_ReadPMA+0x46>
 8006448:	f06f 0501 	mvn.w	r5, #1
 800644c:	1a6d      	subs	r5, r5, r1
 800644e:	1c8a      	adds	r2, r1, #2
 8006450:	4405      	add	r5, r0
 8006452:	46b6      	mov	lr, r6
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006454:	f835 c002 	ldrh.w	ip, [r5, r2]
  for (count = n; count != 0U; count--)
 8006458:	3202      	adds	r2, #2
    RdVal = *(__IO uint16_t *)pdwVal;
 800645a:	fa1f fc8c 	uxth.w	ip, ip
    pdwVal++;
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800645e:	ea4f 241c 	mov.w	r4, ip, lsr #8
  for (count = n; count != 0U; count--)
 8006462:	f1be 0e01 	subs.w	lr, lr, #1
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006466:	f802 cc04 	strb.w	ip, [r2, #-4]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800646a:	f802 4c03 	strb.w	r4, [r2, #-3]
  for (count = n; count != 0U; count--)
 800646e:	d1f1      	bne.n	8006454 <USB_ReadPMA+0x18>
    pdwVal++;
 8006470:	eb00 0246 	add.w	r2, r0, r6, lsl #1
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006474:	07db      	lsls	r3, r3, #31
    pBuf++;
 8006476:	eb01 0146 	add.w	r1, r1, r6, lsl #1
  {
    RdVal = *pdwVal;
 800647a:	bf44      	itt	mi
 800647c:	8813      	ldrhmi	r3, [r2, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800647e:	700b      	strbmi	r3, [r1, #0]
  }
}
 8006480:	bd70      	pop	{r4, r5, r6, pc}
 8006482:	4602      	mov	r2, r0
  if ((wNBytes % 2U) != 0U)
 8006484:	07db      	lsls	r3, r3, #31
    RdVal = *pdwVal;
 8006486:	bf44      	itt	mi
 8006488:	8813      	ldrhmi	r3, [r2, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800648a:	700b      	strbmi	r3, [r1, #0]
}
 800648c:	bd70      	pop	{r4, r5, r6, pc}
 800648e:	bf00      	nop

08006490 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006490:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8006494:	eb00 0083 	add.w	r0, r0, r3, lsl #2
{
 8006498:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800649a:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0

  if (hcdc == NULL)
 800649e:	b184      	cbz	r4, 80064c2 <USBD_CDC_EP0_RxReady+0x32>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80064a0:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
 80064a4:	b15b      	cbz	r3, 80064be <USBD_CDC_EP0_RxReady+0x2e>
 80064a6:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80064aa:	28ff      	cmp	r0, #255	; 0xff
 80064ac:	d007      	beq.n	80064be <USBD_CDC_EP0_RxReady+0x2e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80064b4:	4621      	mov	r1, r4
 80064b6:	4798      	blx	r3
                                                                     (uint8_t *)hcdc->data,
                                                                     (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80064b8:	23ff      	movs	r3, #255	; 0xff
 80064ba:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80064be:	2000      	movs	r0, #0
}
 80064c0:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 80064c2:	2003      	movs	r0, #3
}
 80064c4:	bd10      	pop	{r4, pc}
 80064c6:	bf00      	nop

080064c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80064c8:	230a      	movs	r3, #10
 80064ca:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 80064cc:	4800      	ldr	r0, [pc, #0]	; (80064d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80064ce:	4770      	bx	lr
 80064d0:	20000090 	.word	0x20000090

080064d4 <USBD_CDC_GetFSCfgDesc>:
{
 80064d4:	b570      	push	{r4, r5, r6, lr}
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80064d6:	2182      	movs	r1, #130	; 0x82
{
 80064d8:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80064da:	480f      	ldr	r0, [pc, #60]	; (8006518 <USBD_CDC_GetFSCfgDesc+0x44>)
 80064dc:	f000 fbac 	bl	8006c38 <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80064e0:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80064e2:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80064e4:	480c      	ldr	r0, [pc, #48]	; (8006518 <USBD_CDC_GetFSCfgDesc+0x44>)
 80064e6:	f000 fba7 	bl	8006c38 <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80064ea:	2181      	movs	r1, #129	; 0x81
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80064ec:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80064ee:	480a      	ldr	r0, [pc, #40]	; (8006518 <USBD_CDC_GetFSCfgDesc+0x44>)
 80064f0:	f000 fba2 	bl	8006c38 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 80064f4:	b10d      	cbz	r5, 80064fa <USBD_CDC_GetFSCfgDesc+0x26>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80064f6:	2210      	movs	r2, #16
 80064f8:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 80064fa:	b11c      	cbz	r4, 8006504 <USBD_CDC_GetFSCfgDesc+0x30>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80064fc:	2200      	movs	r2, #0
 80064fe:	2140      	movs	r1, #64	; 0x40
 8006500:	7121      	strb	r1, [r4, #4]
 8006502:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8006504:	b118      	cbz	r0, 800650e <USBD_CDC_GetFSCfgDesc+0x3a>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006506:	2200      	movs	r2, #0
 8006508:	2140      	movs	r1, #64	; 0x40
 800650a:	7101      	strb	r1, [r0, #4]
 800650c:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800650e:	2343      	movs	r3, #67	; 0x43
}
 8006510:	4801      	ldr	r0, [pc, #4]	; (8006518 <USBD_CDC_GetFSCfgDesc+0x44>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006512:	8033      	strh	r3, [r6, #0]
}
 8006514:	bd70      	pop	{r4, r5, r6, pc}
 8006516:	bf00      	nop
 8006518:	2000004c 	.word	0x2000004c

0800651c <USBD_CDC_GetHSCfgDesc>:
{
 800651c:	b570      	push	{r4, r5, r6, lr}
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800651e:	2182      	movs	r1, #130	; 0x82
{
 8006520:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006522:	480f      	ldr	r0, [pc, #60]	; (8006560 <USBD_CDC_GetHSCfgDesc+0x44>)
 8006524:	f000 fb88 	bl	8006c38 <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006528:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800652a:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800652c:	480c      	ldr	r0, [pc, #48]	; (8006560 <USBD_CDC_GetHSCfgDesc+0x44>)
 800652e:	f000 fb83 	bl	8006c38 <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006532:	2181      	movs	r1, #129	; 0x81
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006534:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006536:	480a      	ldr	r0, [pc, #40]	; (8006560 <USBD_CDC_GetHSCfgDesc+0x44>)
 8006538:	f000 fb7e 	bl	8006c38 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 800653c:	b10d      	cbz	r5, 8006542 <USBD_CDC_GetHSCfgDesc+0x26>
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800653e:	2210      	movs	r2, #16
 8006540:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8006542:	b11c      	cbz	r4, 800654c <USBD_CDC_GetHSCfgDesc+0x30>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006544:	2100      	movs	r1, #0
 8006546:	2202      	movs	r2, #2
 8006548:	7121      	strb	r1, [r4, #4]
 800654a:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 800654c:	b118      	cbz	r0, 8006556 <USBD_CDC_GetHSCfgDesc+0x3a>
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800654e:	2100      	movs	r1, #0
 8006550:	2202      	movs	r2, #2
 8006552:	7101      	strb	r1, [r0, #4]
 8006554:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006556:	2343      	movs	r3, #67	; 0x43
}
 8006558:	4801      	ldr	r0, [pc, #4]	; (8006560 <USBD_CDC_GetHSCfgDesc+0x44>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800655a:	8033      	strh	r3, [r6, #0]
}
 800655c:	bd70      	pop	{r4, r5, r6, pc}
 800655e:	bf00      	nop
 8006560:	2000004c 	.word	0x2000004c

08006564 <USBD_CDC_DataOut>:
{
 8006564:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006566:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 800656a:	33b0      	adds	r3, #176	; 0xb0
 800656c:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006570:	b195      	cbz	r5, 8006598 <USBD_CDC_DataOut+0x34>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006572:	4604      	mov	r4, r0
 8006574:	f001 fa5a 	bl	8007a2c <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006578:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800657c:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006580:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8006584:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8006588:	f8d4 32c4 	ldr.w	r3, [r4, #708]	; 0x2c4
 800658c:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8006594:	2000      	movs	r0, #0
}
 8006596:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8006598:	2003      	movs	r0, #3
}
 800659a:	bd38      	pop	{r3, r4, r5, pc}

0800659c <USBD_CDC_DataIn>:
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800659c:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
{
 80065a0:	b570      	push	{r4, r5, r6, lr}
 80065a2:	eb00 0e83 	add.w	lr, r0, r3, lsl #2
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80065a6:	f8de 52c0 	ldr.w	r5, [lr, #704]	; 0x2c0
 80065aa:	b35d      	cbz	r5, 8006604 <USBD_CDC_DataIn+0x68>
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80065ac:	f001 030f 	and.w	r3, r1, #15
 80065b0:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80065b4:	eb00 068c 	add.w	r6, r0, ip, lsl #2
 80065b8:	460a      	mov	r2, r1
 80065ba:	69b3      	ldr	r3, [r6, #24]
 80065bc:	b96b      	cbnz	r3, 80065da <USBD_CDC_DataIn+0x3e>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80065be:	f8de 32c4 	ldr.w	r3, [lr, #708]	; 0x2c4
 80065c2:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 80065c4:	2400      	movs	r4, #0
 80065c6:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80065ca:	b1cb      	cbz	r3, 8006600 <USBD_CDC_DataIn+0x64>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80065cc:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 80065d0:	f505 7104 	add.w	r1, r5, #528	; 0x210
 80065d4:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80065d6:	4620      	mov	r0, r4
}
 80065d8:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80065da:	f8d0 42c8 	ldr.w	r4, [r0, #712]	; 0x2c8
 80065de:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 80065e2:	f8dc 4038 	ldr.w	r4, [ip, #56]	; 0x38
 80065e6:	fbb3 fcf4 	udiv	ip, r3, r4
 80065ea:	fb04 341c 	mls	r4, r4, ip, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80065ee:	2c00      	cmp	r4, #0
 80065f0:	d1e5      	bne.n	80065be <USBD_CDC_DataIn+0x22>
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80065f2:	61b4      	str	r4, [r6, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80065f4:	4623      	mov	r3, r4
 80065f6:	4622      	mov	r2, r4
 80065f8:	f001 f9fc 	bl	80079f4 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 80065fc:	4620      	mov	r0, r4
}
 80065fe:	bd70      	pop	{r4, r5, r6, pc}
  return (uint8_t)USBD_OK;
 8006600:	4618      	mov	r0, r3
}
 8006602:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_FAIL;
 8006604:	2003      	movs	r0, #3
}
 8006606:	bd70      	pop	{r4, r5, r6, pc}

08006608 <USBD_CDC_Setup>:
{
 8006608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800660a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 800660e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006612:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006614:	f8d3 72c0 	ldr.w	r7, [r3, #704]	; 0x2c0
{
 8006618:	4604      	mov	r4, r0
  uint8_t ifalt = 0U;
 800661a:	2000      	movs	r0, #0
 800661c:	f88d 0005 	strb.w	r0, [sp, #5]
  uint16_t status_info = 0U;
 8006620:	f8ad 0006 	strh.w	r0, [sp, #6]
  if (hcdc == NULL)
 8006624:	2f00      	cmp	r7, #0
 8006626:	d068      	beq.n	80066fa <USBD_CDC_Setup+0xf2>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006628:	f891 c000 	ldrb.w	ip, [r1]
 800662c:	f01c 0660 	ands.w	r6, ip, #96	; 0x60
 8006630:	460d      	mov	r5, r1
 8006632:	d01f      	beq.n	8006674 <USBD_CDC_Setup+0x6c>
 8006634:	2e20      	cmp	r6, #32
 8006636:	d007      	beq.n	8006648 <USBD_CDC_Setup+0x40>
          USBD_CtlError(pdev, req);
 8006638:	4629      	mov	r1, r5
 800663a:	4620      	mov	r0, r4
 800663c:	f000 fdd8 	bl	80071f0 <USBD_CtlError>
          ret = USBD_FAIL;
 8006640:	2603      	movs	r6, #3
}
 8006642:	4630      	mov	r0, r6
 8006644:	b003      	add	sp, #12
 8006646:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (req->wLength != 0U)
 8006648:	88ce      	ldrh	r6, [r1, #6]
 800664a:	b38e      	cbz	r6, 80066b0 <USBD_CDC_Setup+0xa8>
        if ((req->bmRequest & 0x80U) != 0U)
 800664c:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8006650:	d157      	bne.n	8006702 <USBD_CDC_Setup+0xfa>
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006652:	2e3f      	cmp	r6, #63	; 0x3f
          hcdc->CmdOpCode = req->bRequest;
 8006654:	784b      	ldrb	r3, [r1, #1]
 8006656:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800665a:	bf95      	itete	ls
 800665c:	4632      	movls	r2, r6
 800665e:	2340      	movhi	r3, #64	; 0x40
 8006660:	b2d3      	uxtbls	r3, r2
 8006662:	461a      	movhi	r2, r3
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006664:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006668:	4639      	mov	r1, r7
 800666a:	4620      	mov	r0, r4
 800666c:	f000 fe0c 	bl	8007288 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8006670:	2600      	movs	r6, #0
 8006672:	e7e6      	b.n	8006642 <USBD_CDC_Setup+0x3a>
      switch (req->bRequest)
 8006674:	784f      	ldrb	r7, [r1, #1]
 8006676:	2f0b      	cmp	r7, #11
 8006678:	d8de      	bhi.n	8006638 <USBD_CDC_Setup+0x30>
 800667a:	a301      	add	r3, pc, #4	; (adr r3, 8006680 <USBD_CDC_Setup+0x78>)
 800667c:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 8006680:	080066e3 	.word	0x080066e3
 8006684:	08006643 	.word	0x08006643
 8006688:	08006639 	.word	0x08006639
 800668c:	08006639 	.word	0x08006639
 8006690:	08006639 	.word	0x08006639
 8006694:	08006639 	.word	0x08006639
 8006698:	08006639 	.word	0x08006639
 800669c:	08006639 	.word	0x08006639
 80066a0:	08006639 	.word	0x08006639
 80066a4:	08006639 	.word	0x08006639
 80066a8:	080066cd 	.word	0x080066cd
 80066ac:	080066c3 	.word	0x080066c3
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80066b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80066b4:	7848      	ldrb	r0, [r1, #1]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	4632      	mov	r2, r6
 80066ba:	4798      	blx	r3
}
 80066bc:	4630      	mov	r0, r6
 80066be:	b003      	add	sp, #12
 80066c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80066c2:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80066c6:	2b03      	cmp	r3, #3
 80066c8:	d0bb      	beq.n	8006642 <USBD_CDC_Setup+0x3a>
 80066ca:	e7b5      	b.n	8006638 <USBD_CDC_Setup+0x30>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066cc:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80066d0:	2b03      	cmp	r3, #3
 80066d2:	d1b1      	bne.n	8006638 <USBD_CDC_Setup+0x30>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80066d4:	2201      	movs	r2, #1
 80066d6:	f10d 0105 	add.w	r1, sp, #5
 80066da:	4620      	mov	r0, r4
 80066dc:	f000 fdbe 	bl	800725c <USBD_CtlSendData>
 80066e0:	e7af      	b.n	8006642 <USBD_CDC_Setup+0x3a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066e2:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80066e6:	2b03      	cmp	r3, #3
 80066e8:	d1a6      	bne.n	8006638 <USBD_CDC_Setup+0x30>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80066ea:	2202      	movs	r2, #2
 80066ec:	f10d 0106 	add.w	r1, sp, #6
 80066f0:	4620      	mov	r0, r4
 80066f2:	f000 fdb3 	bl	800725c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80066f6:	463e      	mov	r6, r7
 80066f8:	e7a3      	b.n	8006642 <USBD_CDC_Setup+0x3a>
    return (uint8_t)USBD_FAIL;
 80066fa:	2603      	movs	r6, #3
}
 80066fc:	4630      	mov	r0, r6
 80066fe:	b003      	add	sp, #12
 8006700:	bdf0      	pop	{r4, r5, r6, r7, pc}
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006702:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006706:	4632      	mov	r2, r6
 8006708:	4639      	mov	r1, r7
 800670a:	689b      	ldr	r3, [r3, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 800670c:	4606      	mov	r6, r0
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800670e:	7868      	ldrb	r0, [r5, #1]
 8006710:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006712:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006714:	2a07      	cmp	r2, #7
 8006716:	4639      	mov	r1, r7
 8006718:	bf28      	it	cs
 800671a:	2207      	movcs	r2, #7
 800671c:	4620      	mov	r0, r4
 800671e:	f000 fd9d 	bl	800725c <USBD_CtlSendData>
 8006722:	e78e      	b.n	8006642 <USBD_CDC_Setup+0x3a>

08006724 <USBD_CDC_DeInit>:
{
 8006724:	b538      	push	{r3, r4, r5, lr}
 8006726:	4604      	mov	r4, r0
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006728:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800672a:	2181      	movs	r1, #129	; 0x81
 800672c:	f001 f916 	bl	800795c <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006730:	2101      	movs	r1, #1
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006732:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006734:	4620      	mov	r0, r4
 8006736:	f001 f911 	bl	800795c <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800673a:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800673e:	2182      	movs	r1, #130	; 0x82
 8006740:	4620      	mov	r0, r4
 8006742:	f001 f90b 	bl	800795c <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006746:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800674a:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800674c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006750:	f8d3 22c0 	ldr.w	r2, [r3, #704]	; 0x2c0
 8006754:	b18a      	cbz	r2, 800677a <USBD_CDC_DeInit+0x56>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006756:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800675e:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8006762:	33b0      	adds	r3, #176	; 0xb0
 8006764:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8006768:	f001 f990 	bl	8007a8c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800676c:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8006770:	33b0      	adds	r3, #176	; 0xb0
 8006772:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 8006776:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800677a:	2000      	movs	r0, #0
 800677c:	bd38      	pop	{r3, r4, r5, pc}
 800677e:	bf00      	nop

08006780 <USBD_CDC_Init>:
{
 8006780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006784:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006786:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800678a:	f001 f97b 	bl	8007a84 <USBD_static_malloc>
  if (hcdc == NULL)
 800678e:	4605      	mov	r5, r0
 8006790:	2800      	cmp	r0, #0
 8006792:	d05c      	beq.n	800684e <USBD_CDC_Init+0xce>
  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006794:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006798:	2100      	movs	r1, #0
 800679a:	f001 f9cb 	bl	8007b34 <memset>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800679e:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 80067a2:	33b0      	adds	r3, #176	; 0xb0
 80067a4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067a8:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80067aa:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067ae:	b3cb      	cbz	r3, 8006824 <USBD_CDC_Init+0xa4>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80067b0:	2340      	movs	r3, #64	; 0x40
 80067b2:	2202      	movs	r2, #2
 80067b4:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80067b6:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80067b8:	4620      	mov	r0, r4
 80067ba:	f001 f8bf 	bl	800793c <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80067be:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80067c0:	2340      	movs	r3, #64	; 0x40
 80067c2:	4631      	mov	r1, r6
 80067c4:	2202      	movs	r2, #2
 80067c6:	4620      	mov	r0, r4
 80067c8:	f001 f8b8 	bl	800793c <USBD_LL_OpenEP>
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80067cc:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80067ce:	2203      	movs	r2, #3
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80067d0:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80067d4:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80067d8:	2182      	movs	r1, #130	; 0x82
 80067da:	2308      	movs	r3, #8
 80067dc:	4620      	mov	r0, r4
 80067de:	f001 f8ad 	bl	800793c <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80067e2:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 80067e6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  hcdc->RxBuffer = NULL;
 80067ea:	2600      	movs	r6, #0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80067ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80067f0:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80067f4:	681b      	ldr	r3, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80067f6:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  hcdc->RxBuffer = NULL;
 80067fa:	f8c5 6204 	str.w	r6, [r5, #516]	; 0x204
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80067fe:	4798      	blx	r3
  if (hcdc->RxBuffer == NULL)
 8006800:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
  hcdc->TxState = 0U;
 8006804:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 8006808:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
  if (hcdc->RxBuffer == NULL)
 800680c:	b342      	cbz	r2, 8006860 <USBD_CDC_Init+0xe0>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800680e:	7c27      	ldrb	r7, [r4, #16]
 8006810:	b9a7      	cbnz	r7, 800683c <USBD_CDC_Init+0xbc>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006812:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006816:	4641      	mov	r1, r8
 8006818:	4620      	mov	r0, r4
 800681a:	f001 f8f9 	bl	8007a10 <USBD_LL_PrepareReceive>
}
 800681e:	4638      	mov	r0, r7
 8006820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006824:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006828:	2202      	movs	r2, #2
 800682a:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800682c:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800682e:	4620      	mov	r0, r4
 8006830:	f001 f884 	bl	800793c <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006834:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006836:	f44f 7300 	mov.w	r3, #512	; 0x200
 800683a:	e7c2      	b.n	80067c2 <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800683c:	2340      	movs	r3, #64	; 0x40
 800683e:	4641      	mov	r1, r8
 8006840:	4620      	mov	r0, r4
  return (uint8_t)USBD_OK;
 8006842:	4637      	mov	r7, r6
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006844:	f001 f8e4 	bl	8007a10 <USBD_LL_PrepareReceive>
}
 8006848:	4638      	mov	r0, r7
 800684a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800684e:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8006852:	33b0      	adds	r3, #176	; 0xb0
    return (uint8_t)USBD_EMEM;
 8006854:	2702      	movs	r7, #2
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006856:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
}
 800685a:	4638      	mov	r0, r7
 800685c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 8006860:	2702      	movs	r7, #2
 8006862:	e7dc      	b.n	800681e <USBD_CDC_Init+0x9e>

08006864 <USBD_CDC_GetOtherSpeedCfgDesc>:
 8006864:	b570      	push	{r4, r5, r6, lr}
 8006866:	2182      	movs	r1, #130	; 0x82
 8006868:	4606      	mov	r6, r0
 800686a:	480f      	ldr	r0, [pc, #60]	; (80068a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 800686c:	f000 f9e4 	bl	8006c38 <USBD_GetEpDesc>
 8006870:	2101      	movs	r1, #1
 8006872:	4605      	mov	r5, r0
 8006874:	480c      	ldr	r0, [pc, #48]	; (80068a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8006876:	f000 f9df 	bl	8006c38 <USBD_GetEpDesc>
 800687a:	2181      	movs	r1, #129	; 0x81
 800687c:	4604      	mov	r4, r0
 800687e:	480a      	ldr	r0, [pc, #40]	; (80068a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8006880:	f000 f9da 	bl	8006c38 <USBD_GetEpDesc>
 8006884:	b10d      	cbz	r5, 800688a <USBD_CDC_GetOtherSpeedCfgDesc+0x26>
 8006886:	2210      	movs	r2, #16
 8006888:	71aa      	strb	r2, [r5, #6]
 800688a:	b11c      	cbz	r4, 8006894 <USBD_CDC_GetOtherSpeedCfgDesc+0x30>
 800688c:	2200      	movs	r2, #0
 800688e:	2140      	movs	r1, #64	; 0x40
 8006890:	7121      	strb	r1, [r4, #4]
 8006892:	7162      	strb	r2, [r4, #5]
 8006894:	b118      	cbz	r0, 800689e <USBD_CDC_GetOtherSpeedCfgDesc+0x3a>
 8006896:	2200      	movs	r2, #0
 8006898:	2140      	movs	r1, #64	; 0x40
 800689a:	7101      	strb	r1, [r0, #4]
 800689c:	7142      	strb	r2, [r0, #5]
 800689e:	2343      	movs	r3, #67	; 0x43
 80068a0:	4801      	ldr	r0, [pc, #4]	; (80068a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 80068a2:	8033      	strh	r3, [r6, #0]
 80068a4:	bd70      	pop	{r4, r5, r6, pc}
 80068a6:	bf00      	nop
 80068a8:	2000004c 	.word	0x2000004c

080068ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80068ac:	4603      	mov	r3, r0
  if (fops == NULL)
 80068ae:	b139      	cbz	r1, 80068c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 80068b0:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 80068b4:	eb03 0382 	add.w	r3, r3, r2, lsl #2

  return (uint8_t)USBD_OK;
 80068b8:	2000      	movs	r0, #0
  pdev->pUserData[pdev->classId] = fops;
 80068ba:	f8c3 12c4 	str.w	r1, [r3, #708]	; 0x2c4
  return (uint8_t)USBD_OK;
 80068be:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80068c0:	2003      	movs	r0, #3
}
 80068c2:	4770      	bx	lr

080068c4 <USBD_CDC_SetTxBuffer>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068c4:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 80068c8:	33b0      	adds	r3, #176	; 0xb0
 80068ca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80068ce:	b12b      	cbz	r3, 80068dc <USBD_CDC_SetTxBuffer+0x18>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 80068d0:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80068d4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80068d8:	2000      	movs	r0, #0
 80068da:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80068dc:	2003      	movs	r0, #3
}
 80068de:	4770      	bx	lr

080068e0 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068e0:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 80068e4:	33b0      	adds	r3, #176	; 0xb0
 80068e6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 80068ea:	b11b      	cbz	r3, 80068f4 <USBD_CDC_SetRxBuffer+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 80068ec:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80068f0:	2000      	movs	r0, #0
 80068f2:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80068f4:	2003      	movs	r0, #3
}
 80068f6:	4770      	bx	lr

080068f8 <USBD_CDC_TransmitPacket>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068f8:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 80068fc:	33b0      	adds	r3, #176	; 0xb0
 80068fe:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006902:	b192      	cbz	r2, 800692a <USBD_CDC_TransmitPacket+0x32>
{
 8006904:	b510      	push	{r4, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 8006906:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800690a:	b10c      	cbz	r4, 8006910 <USBD_CDC_TransmitPacket+0x18>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800690c:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 800690e:	bd10      	pop	{r4, pc}
    hcdc->TxState = 1U;
 8006910:	2301      	movs	r3, #1
 8006912:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006916:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800691a:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800691e:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006920:	2181      	movs	r1, #129	; 0x81
 8006922:	f001 f867 	bl	80079f4 <USBD_LL_Transmit>
    ret = USBD_OK;
 8006926:	4620      	mov	r0, r4
}
 8006928:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800692a:	2003      	movs	r0, #3
}
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop

08006930 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006930:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 8006934:	32b0      	adds	r2, #176	; 0xb0
{
 8006936:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006938:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800693c:	b18a      	cbz	r2, 8006962 <USBD_CDC_ReceivePacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800693e:	7c04      	ldrb	r4, [r0, #16]
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006940:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006944:	b134      	cbz	r4, 8006954 <USBD_CDC_ReceivePacket+0x24>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006946:	2340      	movs	r3, #64	; 0x40
 8006948:	2101      	movs	r1, #1
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800694a:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800694c:	f001 f860 	bl	8007a10 <USBD_LL_PrepareReceive>
}
 8006950:	4620      	mov	r0, r4
 8006952:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006954:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006958:	2101      	movs	r1, #1
 800695a:	f001 f859 	bl	8007a10 <USBD_LL_PrepareReceive>
}
 800695e:	4620      	mov	r0, r4
 8006960:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8006962:	2403      	movs	r4, #3
}
 8006964:	4620      	mov	r0, r4
 8006966:	bd10      	pop	{r4, pc}

08006968 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006968:	b178      	cbz	r0, 800698a <USBD_Init+0x22>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800696a:	2300      	movs	r3, #0
 800696c:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006970:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006974:	f8c0 32d0 	str.w	r3, [r0, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006978:	b109      	cbz	r1, 800697e <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800697a:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800697e:	2301      	movs	r3, #1
 8006980:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 8006984:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006986:	f000 bf7f 	b.w	8007888 <USBD_LL_Init>

  return ret;
}
 800698a:	2003      	movs	r0, #3
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop

08006990 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006990:	b510      	push	{r4, lr}
 8006992:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8006994:	2300      	movs	r3, #0
 8006996:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800699a:	b189      	cbz	r1, 80069c0 <USBD_RegisterClass+0x30>
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800699c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  pdev->pClass[0] = pclass;
 800699e:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80069a2:	4604      	mov	r4, r0
 80069a4:	b123      	cbz	r3, 80069b0 <USBD_RegisterClass+0x20>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80069a6:	f10d 0006 	add.w	r0, sp, #6
 80069aa:	4798      	blx	r3
 80069ac:	f8c4 02d0 	str.w	r0, [r4, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80069b0:	f8d4 32d8 	ldr.w	r3, [r4, #728]	; 0x2d8

  return USBD_OK;
 80069b4:	2000      	movs	r0, #0
  pdev->NumClasses ++;
 80069b6:	3301      	adds	r3, #1
 80069b8:	f8c4 32d8 	str.w	r3, [r4, #728]	; 0x2d8
}
 80069bc:	b002      	add	sp, #8
 80069be:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80069c0:	2003      	movs	r0, #3
}
 80069c2:	b002      	add	sp, #8
 80069c4:	bd10      	pop	{r4, pc}
 80069c6:	bf00      	nop

080069c8 <USBD_Start>:
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80069c8:	f000 bfaa 	b.w	8007920 <USBD_LL_Start>

080069cc <USBD_SetClassConfig>:
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80069cc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80069d0:	b10b      	cbz	r3, 80069d6 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4718      	bx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop

080069dc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069dc:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80069de:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	4798      	blx	r3
  {
    ret = USBD_FAIL;
 80069e6:	2800      	cmp	r0, #0
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 80069e8:	bf18      	it	ne
 80069ea:	2003      	movne	r0, #3
 80069ec:	bd08      	pop	{r3, pc}
 80069ee:	bf00      	nop

080069f0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80069f0:	b538      	push	{r3, r4, r5, lr}
 80069f2:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80069f4:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 80069f8:	4628      	mov	r0, r5
 80069fa:	f000 fbed 	bl	80071d8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80069fe:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 8006a02:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	; 0x2b0
 8006a06:	f8c4 2298 	str.w	r2, [r4, #664]	; 0x298
  pdev->ep0_state = USBD_EP0_SETUP;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 8006a10:	f001 031f 	and.w	r3, r1, #31
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d009      	beq.n	8006a2c <USBD_LL_SetupStage+0x3c>
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d013      	beq.n	8006a44 <USBD_LL_SetupStage+0x54>
 8006a1c:	b163      	cbz	r3, 8006a38 <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a1e:	4620      	mov	r0, r4
 8006a20:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 8006a24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a28:	f000 bfa6 	b.w	8007978 <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006a2c:	4629      	mov	r1, r5
 8006a2e:	4620      	mov	r0, r4
}
 8006a30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006a34:	f000 baea 	b.w	800700c <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006a38:	4629      	mov	r1, r5
 8006a3a:	4620      	mov	r0, r4
}
 8006a3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006a40:	f000 b910 	b.w	8006c64 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006a44:	4629      	mov	r1, r5
 8006a46:	4620      	mov	r0, r4
}
 8006a48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006a4c:	f000 bb18 	b.w	8007080 <USBD_StdEPReq>

08006a50 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a50:	b510      	push	{r4, lr}
 8006a52:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
  uint8_t idx;

  if (epnum == 0U)
 8006a54:	b931      	cbnz	r1, 8006a64 <USBD_LL_DataOutStage+0x14>
 8006a56:	4694      	mov	ip, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006a58:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8006a5c:	2a03      	cmp	r2, #3
 8006a5e:	d010      	beq.n	8006a82 <USBD_LL_DataOutStage+0x32>
      }
    }
  }

  return USBD_OK;
}
 8006a60:	2000      	movs	r0, #0
 8006a62:	bd10      	pop	{r4, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a64:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006a68:	2b03      	cmp	r3, #3
 8006a6a:	d1f9      	bne.n	8006a60 <USBD_LL_DataOutStage+0x10>
        if (pdev->pClass[idx]->DataOut != NULL)
 8006a6c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d0f4      	beq.n	8006a60 <USBD_LL_DataOutStage+0x10>
          pdev->classId = idx;
 8006a76:	2200      	movs	r2, #0
}
 8006a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          pdev->classId = idx;
 8006a7c:	f8c0 22d4 	str.w	r2, [r0, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006a80:	4718      	bx	r3
 8006a82:	460b      	mov	r3, r1
      if (pep->rem_length > pep->maxpacket)
 8006a84:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	; 0x15c
 8006a88:	4291      	cmp	r1, r2
 8006a8a:	d808      	bhi.n	8006a9e <USBD_LL_DataOutStage+0x4e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a8c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8006a90:	2a03      	cmp	r2, #3
 8006a92:	d00e      	beq.n	8006ab2 <USBD_LL_DataOutStage+0x62>
        (void)USBD_CtlSendStatus(pdev);
 8006a94:	4620      	mov	r0, r4
 8006a96:	f000 fc0d 	bl	80072b4 <USBD_CtlSendStatus>
}
 8006a9a:	2000      	movs	r0, #0
 8006a9c:	bd10      	pop	{r4, pc}
        pep->rem_length -= pep->maxpacket;
 8006a9e:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006aa0:	428a      	cmp	r2, r1
 8006aa2:	bf28      	it	cs
 8006aa4:	460a      	movcs	r2, r1
        pep->rem_length -= pep->maxpacket;
 8006aa6:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006aaa:	4661      	mov	r1, ip
 8006aac:	f000 fbfa 	bl	80072a4 <USBD_CtlContinueRx>
 8006ab0:	e7d6      	b.n	8006a60 <USBD_LL_DataOutStage+0x10>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006ab2:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8006ab6:	6912      	ldr	r2, [r2, #16]
 8006ab8:	2a00      	cmp	r2, #0
 8006aba:	d0eb      	beq.n	8006a94 <USBD_LL_DataOutStage+0x44>
              pdev->classId = idx;
 8006abc:	f8c0 32d4 	str.w	r3, [r0, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006ac0:	4790      	blx	r2
 8006ac2:	e7e7      	b.n	8006a94 <USBD_LL_DataOutStage+0x44>

08006ac4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006ac4:	b570      	push	{r4, r5, r6, lr}
 8006ac6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006ac8:	b961      	cbnz	r1, 8006ae4 <USBD_LL_DataInStage+0x20>
 8006aca:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006acc:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8006ad0:	2a02      	cmp	r2, #2
 8006ad2:	d016      	beq.n	8006b02 <USBD_LL_DataInStage+0x3e>
          (void)USBD_CtlReceiveStatus(pdev);
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006ad4:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8006ad8:	b113      	cbz	r3, 8006ae0 <USBD_LL_DataInStage+0x1c>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8006ada:	2300      	movs	r3, #0
 8006adc:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
      }
    }
  }

  return USBD_OK;
}
 8006ae0:	2000      	movs	r0, #0
 8006ae2:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ae4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006ae8:	2b03      	cmp	r3, #3
 8006aea:	d1f9      	bne.n	8006ae0 <USBD_LL_DataInStage+0x1c>
        if (pdev->pClass[idx]->DataIn != NULL)
 8006aec:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d0f4      	beq.n	8006ae0 <USBD_LL_DataInStage+0x1c>
          pdev->classId = idx;
 8006af6:	2200      	movs	r2, #0
}
 8006af8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 8006afc:	f8c0 22d4 	str.w	r2, [r0, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006b00:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 8006b02:	e9d0 2607 	ldrd	r2, r6, [r0, #28]
 8006b06:	42b2      	cmp	r2, r6
 8006b08:	460d      	mov	r5, r1
 8006b0a:	d810      	bhi.n	8006b2e <USBD_LL_DataInStage+0x6a>
        if ((pep->maxpacket == pep->rem_length) &&
 8006b0c:	d01b      	beq.n	8006b46 <USBD_LL_DataInStage+0x82>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b0e:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8006b12:	2b03      	cmp	r3, #3
 8006b14:	d024      	beq.n	8006b60 <USBD_LL_DataInStage+0x9c>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b16:	2180      	movs	r1, #128	; 0x80
 8006b18:	4620      	mov	r0, r4
 8006b1a:	f000 ff2d 	bl	8007978 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006b1e:	4620      	mov	r0, r4
 8006b20:	f000 fbd4 	bl	80072cc <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode != 0U)
 8006b24:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d0d9      	beq.n	8006ae0 <USBD_LL_DataInStage+0x1c>
 8006b2c:	e7d5      	b.n	8006ada <USBD_LL_DataInStage+0x16>
        pep->rem_length -= pep->maxpacket;
 8006b2e:	1b92      	subs	r2, r2, r6
 8006b30:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006b32:	4619      	mov	r1, r3
 8006b34:	f000 fba0 	bl	8007278 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b38:	462b      	mov	r3, r5
 8006b3a:	462a      	mov	r2, r5
 8006b3c:	4629      	mov	r1, r5
 8006b3e:	4620      	mov	r0, r4
 8006b40:	f000 ff66 	bl	8007a10 <USBD_LL_PrepareReceive>
 8006b44:	e7c6      	b.n	8006ad4 <USBD_LL_DataInStage+0x10>
            (pep->total_length >= pep->maxpacket) &&
 8006b46:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d8e0      	bhi.n	8006b0e <USBD_LL_DataInStage+0x4a>
            (pep->total_length >= pep->maxpacket) &&
 8006b4c:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d2dc      	bcs.n	8006b0e <USBD_LL_DataInStage+0x4a>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b54:	460a      	mov	r2, r1
 8006b56:	f000 fb8f 	bl	8007278 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b5a:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8006b5e:	e7eb      	b.n	8006b38 <USBD_LL_DataInStage+0x74>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006b60:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d0d5      	beq.n	8006b16 <USBD_LL_DataInStage+0x52>
              pdev->classId = 0U;
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f8c4 22d4 	str.w	r2, [r4, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006b70:	4620      	mov	r0, r4
 8006b72:	4798      	blx	r3
 8006b74:	e7cf      	b.n	8006b16 <USBD_LL_DataInStage+0x52>
 8006b76:	bf00      	nop

08006b78 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006b7a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b7e:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b80:	2201      	movs	r2, #1
 8006b82:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
{
 8006b86:	4604      	mov	r4, r0
  pdev->dev_config = 0U;
 8006b88:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b8a:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_remote_wakeup = 0U;
 8006b8e:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006b92:	f880 12a0 	strb.w	r1, [r0, #672]	; 0x2a0
  if (pdev->pClass[0] != NULL)
 8006b96:	b11b      	cbz	r3, 8006ba0 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	b10b      	cbz	r3, 8006ba0 <USBD_LL_Reset+0x28>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006b9c:	4798      	blx	r3
 8006b9e:	b9b0      	cbnz	r0, 8006bce <USBD_LL_Reset+0x56>
  USBD_StatusTypeDef ret = USBD_OK;
 8006ba0:	2700      	movs	r7, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	2340      	movs	r3, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ba6:	461d      	mov	r5, r3
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ba8:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006baa:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bac:	4620      	mov	r0, r4
 8006bae:	f000 fec5 	bl	800793c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006bb2:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bb6:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bba:	462b      	mov	r3, r5
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	2180      	movs	r1, #128	; 0x80
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	f000 febb 	bl	800793c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006bc6:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bc8:	6225      	str	r5, [r4, #32]

  return ret;
}
 8006bca:	4638      	mov	r0, r7
 8006bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = USBD_FAIL;
 8006bce:	2703      	movs	r7, #3
 8006bd0:	e7e7      	b.n	8006ba2 <USBD_LL_Reset+0x2a>
 8006bd2:	bf00      	nop

08006bd4 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8006bd4:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8006bd6:	2000      	movs	r0, #0
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop

08006bdc <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006bdc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006be0:	2b04      	cmp	r3, #4
 8006be2:	d004      	beq.n	8006bee <USBD_LL_Suspend+0x12>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006be4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006bee:	2304      	movs	r3, #4
 8006bf0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8006bf4:	2000      	movs	r0, #0
 8006bf6:	4770      	bx	lr

08006bf8 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006bf8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006bfc:	2b04      	cmp	r3, #4
 8006bfe:	d104      	bne.n	8006c0a <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c00:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8006c0a:	2000      	movs	r0, #0
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop

08006c10 <USBD_LL_SOF>:
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c10:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8006c14:	2a03      	cmp	r2, #3
 8006c16:	d001      	beq.n	8006c1c <USBD_LL_SOF+0xc>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 8006c18:	2000      	movs	r0, #0
 8006c1a:	4770      	bx	lr
{
 8006c1c:	b508      	push	{r3, lr}
    if (pdev->pClass[0] != NULL)
 8006c1e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006c22:	b113      	cbz	r3, 8006c2a <USBD_LL_SOF+0x1a>
      if (pdev->pClass[0]->SOF != NULL)
 8006c24:	69db      	ldr	r3, [r3, #28]
 8006c26:	b103      	cbz	r3, 8006c2a <USBD_LL_SOF+0x1a>
        (void)pdev->pClass[0]->SOF(pdev);
 8006c28:	4798      	blx	r3
}
 8006c2a:	2000      	movs	r0, #0
 8006c2c:	bd08      	pop	{r3, pc}
 8006c2e:	bf00      	nop

08006c30 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8006c30:	2000      	movs	r0, #0
 8006c32:	4770      	bx	lr

08006c34 <USBD_CoreFindEP>:
 8006c34:	2000      	movs	r0, #0
 8006c36:	4770      	bx	lr

08006c38 <USBD_GetEpDesc>:
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
  USBD_EpDescTypeDef *pEpDesc = NULL;
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006c38:	7802      	ldrb	r2, [r0, #0]
 8006c3a:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 8006c3e:	4594      	cmp	ip, r2
 8006c40:	b293      	uxth	r3, r2
 8006c42:	d803      	bhi.n	8006c4c <USBD_GetEpDesc+0x14>
 8006c44:	e00c      	b.n	8006c60 <USBD_GetEpDesc+0x28>
  {
    ptr = desc->bLength;

    while (ptr < desc->wTotalLength)
 8006c46:	459c      	cmp	ip, r3
 8006c48:	d90a      	bls.n	8006c60 <USBD_GetEpDesc+0x28>
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 8006c4a:	7802      	ldrb	r2, [r0, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006c4c:	4410      	add	r0, r2
  *ptr += pnext->bLength;
 8006c4e:	4413      	add	r3, r2
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006c50:	7842      	ldrb	r2, [r0, #1]
 8006c52:	2a05      	cmp	r2, #5
  *ptr += pnext->bLength;
 8006c54:	b29b      	uxth	r3, r3
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006c56:	d1f6      	bne.n	8006c46 <USBD_GetEpDesc+0xe>
        if (pEpDesc->bEndpointAddress == EpAddr)
 8006c58:	7882      	ldrb	r2, [r0, #2]
 8006c5a:	428a      	cmp	r2, r1
 8006c5c:	d1f3      	bne.n	8006c46 <USBD_GetEpDesc+0xe>
}
 8006c5e:	4770      	bx	lr
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006c60:	2000      	movs	r0, #0
}
 8006c62:	4770      	bx	lr

08006c64 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c68:	780c      	ldrb	r4, [r1, #0]
 8006c6a:	f004 0460 	and.w	r4, r4, #96	; 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c6e:	2c20      	cmp	r4, #32
{
 8006c70:	b082      	sub	sp, #8
 8006c72:	460e      	mov	r6, r1
 8006c74:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c76:	d00f      	beq.n	8006c98 <USBD_StdDevReq+0x34>
 8006c78:	2c40      	cmp	r4, #64	; 0x40
 8006c7a:	d00d      	beq.n	8006c98 <USBD_StdDevReq+0x34>
 8006c7c:	b1c4      	cbz	r4, 8006cb0 <USBD_StdDevReq+0x4c>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c7e:	2180      	movs	r1, #128	; 0x80
 8006c80:	4628      	mov	r0, r5
 8006c82:	f000 fe79 	bl	8007978 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006c86:	2100      	movs	r1, #0
 8006c88:	4628      	mov	r0, r5
 8006c8a:	f000 fe75 	bl	8007978 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 8006c8e:	2400      	movs	r4, #0
}
 8006c90:	4620      	mov	r0, r4
 8006c92:	b002      	add	sp, #8
 8006c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006c98:	f8d5 32d4 	ldr.w	r3, [r5, #724]	; 0x2d4
 8006c9c:	33ae      	adds	r3, #174	; 0xae
 8006c9e:	4631      	mov	r1, r6
 8006ca0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	4628      	mov	r0, r5
}
 8006ca8:	b002      	add	sp, #8
 8006caa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006cae:	4718      	bx	r3
      switch (req->bRequest)
 8006cb0:	784f      	ldrb	r7, [r1, #1]
 8006cb2:	2f09      	cmp	r7, #9
 8006cb4:	d8e3      	bhi.n	8006c7e <USBD_StdDevReq+0x1a>
 8006cb6:	a301      	add	r3, pc, #4	; (adr r3, 8006cbc <USBD_StdDevReq+0x58>)
 8006cb8:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 8006cbc:	08006d21 	.word	0x08006d21
 8006cc0:	08006d4f 	.word	0x08006d4f
 8006cc4:	08006c7f 	.word	0x08006c7f
 8006cc8:	08006d6d 	.word	0x08006d6d
 8006ccc:	08006c7f 	.word	0x08006c7f
 8006cd0:	08006d91 	.word	0x08006d91
 8006cd4:	08006dc9 	.word	0x08006dc9
 8006cd8:	08006c7f 	.word	0x08006c7f
 8006cdc:	08006e1d 	.word	0x08006e1d
 8006ce0:	08006ce5 	.word	0x08006ce5
  cfgidx = (uint8_t)(req->wValue);
 8006ce4:	788e      	ldrb	r6, [r1, #2]
 8006ce6:	4fb3      	ldr	r7, [pc, #716]	; (8006fb4 <USBD_StdDevReq+0x350>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006ce8:	2e01      	cmp	r6, #1
  cfgidx = (uint8_t)(req->wValue);
 8006cea:	703e      	strb	r6, [r7, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006cec:	f200 8164 	bhi.w	8006fb8 <USBD_StdDevReq+0x354>
  switch (pdev->dev_state)
 8006cf0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	fa5f f883 	uxtb.w	r8, r3
 8006cfa:	f000 811c 	beq.w	8006f36 <USBD_StdDevReq+0x2d2>
 8006cfe:	f1b8 0f03 	cmp.w	r8, #3
 8006d02:	f000 812d 	beq.w	8006f60 <USBD_StdDevReq+0x2fc>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d06:	2180      	movs	r1, #128	; 0x80
 8006d08:	f000 fe36 	bl	8007978 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	4628      	mov	r0, r5
 8006d10:	f000 fe32 	bl	8007978 <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d14:	7839      	ldrb	r1, [r7, #0]
 8006d16:	4628      	mov	r0, r5
 8006d18:	f7ff fe60 	bl	80069dc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006d1c:	2403      	movs	r4, #3
      break;
 8006d1e:	e7b7      	b.n	8006c90 <USBD_StdDevReq+0x2c>
  switch (pdev->dev_state)
 8006d20:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006d24:	3b01      	subs	r3, #1
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d826      	bhi.n	8006d78 <USBD_StdDevReq+0x114>
      if (req->wLength != 0x2U)
 8006d2a:	88cb      	ldrh	r3, [r1, #6]
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d123      	bne.n	8006d78 <USBD_StdDevReq+0x114>
      if (pdev->dev_remote_wakeup != 0U)
 8006d30:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d34:	2201      	movs	r2, #1
 8006d36:	60c2      	str	r2, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 8006d38:	b10b      	cbz	r3, 8006d3e <USBD_StdDevReq+0xda>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006d3e:	2202      	movs	r2, #2
 8006d40:	f105 010c 	add.w	r1, r5, #12
 8006d44:	4628      	mov	r0, r5
 8006d46:	f000 fa89 	bl	800725c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8006d4a:	463c      	mov	r4, r7
      break;
 8006d4c:	e7a0      	b.n	8006c90 <USBD_StdDevReq+0x2c>
  switch (pdev->dev_state)
 8006d4e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006d52:	3b01      	subs	r3, #1
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d80f      	bhi.n	8006d78 <USBD_StdDevReq+0x114>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d58:	884b      	ldrh	r3, [r1, #2]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d198      	bne.n	8006c90 <USBD_StdDevReq+0x2c>
        pdev->dev_remote_wakeup = 0U;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006d64:	4628      	mov	r0, r5
 8006d66:	f000 faa5 	bl	80072b4 <USBD_CtlSendStatus>
 8006d6a:	e791      	b.n	8006c90 <USBD_StdDevReq+0x2c>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d6c:	884b      	ldrh	r3, [r1, #2]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d0f6      	beq.n	8006d60 <USBD_StdDevReq+0xfc>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	f000 8116 	beq.w	8006fa4 <USBD_StdDevReq+0x340>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d78:	2180      	movs	r1, #128	; 0x80
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	f000 fdfc 	bl	8007978 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006d80:	2100      	movs	r1, #0
 8006d82:	4628      	mov	r0, r5
 8006d84:	f000 fdf8 	bl	8007978 <USBD_LL_StallEP>
}
 8006d88:	4620      	mov	r0, r4
 8006d8a:	b002      	add	sp, #8
 8006d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006d90:	888b      	ldrh	r3, [r1, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1f0      	bne.n	8006d78 <USBD_StdDevReq+0x114>
 8006d96:	88cb      	ldrh	r3, [r1, #6]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1ed      	bne.n	8006d78 <USBD_StdDevReq+0x114>
 8006d9c:	884e      	ldrh	r6, [r1, #2]
 8006d9e:	2e7f      	cmp	r6, #127	; 0x7f
 8006da0:	d8ea      	bhi.n	8006d78 <USBD_StdDevReq+0x114>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006da6:	2b03      	cmp	r3, #3
 8006da8:	d0e6      	beq.n	8006d78 <USBD_StdDevReq+0x114>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006daa:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 8006dac:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006db0:	f000 fe12 	bl	80079d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006db4:	4628      	mov	r0, r5
 8006db6:	f000 fa7d 	bl	80072b4 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8006dba:	2e00      	cmp	r6, #0
 8006dbc:	f000 8121 	beq.w	8007002 <USBD_StdDevReq+0x39e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8006dc6:	e763      	b.n	8006c90 <USBD_StdDevReq+0x2c>
  switch (req->wValue >> 8)
 8006dc8:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8006dd0:	0a13      	lsrs	r3, r2, #8
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	2b0e      	cmp	r3, #14
 8006dd6:	d8cf      	bhi.n	8006d78 <USBD_StdDevReq+0x114>
 8006dd8:	a101      	add	r1, pc, #4	; (adr r1, 8006de0 <USBD_StdDevReq+0x17c>)
 8006dda:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006dde:	bf00      	nop
 8006de0:	08006ed1 	.word	0x08006ed1
 8006de4:	08006eb7 	.word	0x08006eb7
 8006de8:	08006ea5 	.word	0x08006ea5
 8006dec:	08006d79 	.word	0x08006d79
 8006df0:	08006d79 	.word	0x08006d79
 8006df4:	08006e8f 	.word	0x08006e8f
 8006df8:	08006e75 	.word	0x08006e75
 8006dfc:	08006d79 	.word	0x08006d79
 8006e00:	08006d79 	.word	0x08006d79
 8006e04:	08006d79 	.word	0x08006d79
 8006e08:	08006d79 	.word	0x08006d79
 8006e0c:	08006d79 	.word	0x08006d79
 8006e10:	08006d79 	.word	0x08006d79
 8006e14:	08006d79 	.word	0x08006d79
 8006e18:	08006e41 	.word	0x08006e41
  if (req->wLength != 1U)
 8006e1c:	88ca      	ldrh	r2, [r1, #6]
 8006e1e:	2a01      	cmp	r2, #1
 8006e20:	d1aa      	bne.n	8006d78 <USBD_StdDevReq+0x114>
    switch (pdev->dev_state)
 8006e22:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 8006e26:	2902      	cmp	r1, #2
 8006e28:	b2cb      	uxtb	r3, r1
 8006e2a:	d87d      	bhi.n	8006f28 <USBD_StdDevReq+0x2c4>
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f43f af26 	beq.w	8006c7e <USBD_StdDevReq+0x1a>
        pdev->dev_default_config = 0U;
 8006e32:	4601      	mov	r1, r0
 8006e34:	2300      	movs	r3, #0
 8006e36:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006e3a:	f000 fa0f 	bl	800725c <USBD_CtlSendData>
        break;
 8006e3e:	e727      	b.n	8006c90 <USBD_StdDevReq+0x2c>
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006e40:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006e44:	69db      	ldr	r3, [r3, #28]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d096      	beq.n	8006d78 <USBD_StdDevReq+0x114>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006e4a:	7c28      	ldrb	r0, [r5, #16]
 8006e4c:	f10d 0106 	add.w	r1, sp, #6
 8006e50:	4798      	blx	r3
  if (req->wLength != 0U)
 8006e52:	88f2      	ldrh	r2, [r6, #6]
 8006e54:	2a00      	cmp	r2, #0
 8006e56:	d085      	beq.n	8006d64 <USBD_StdDevReq+0x100>
    if (len != 0U)
 8006e58:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d08b      	beq.n	8006d78 <USBD_StdDevReq+0x114>
      len = MIN(len, req->wLength);
 8006e60:	429a      	cmp	r2, r3
 8006e62:	bf28      	it	cs
 8006e64:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e66:	4601      	mov	r1, r0
 8006e68:	4628      	mov	r0, r5
      len = MIN(len, req->wLength);
 8006e6a:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e6e:	f000 f9f5 	bl	800725c <USBD_CtlSendData>
 8006e72:	e70d      	b.n	8006c90 <USBD_StdDevReq+0x2c>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e74:	7c03      	ldrb	r3, [r0, #16]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f47f af7e 	bne.w	8006d78 <USBD_StdDevReq+0x114>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006e7c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006e80:	f10d 0006 	add.w	r0, sp, #6
 8006e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e86:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006e88:	2307      	movs	r3, #7
 8006e8a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006e8c:	e7e1      	b.n	8006e52 <USBD_StdDevReq+0x1ee>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e8e:	7c03      	ldrb	r3, [r0, #16]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f47f af71 	bne.w	8006d78 <USBD_StdDevReq+0x114>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006e96:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006e9a:	f10d 0006 	add.w	r0, sp, #6
 8006e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea0:	4798      	blx	r3
  if (err != 0U)
 8006ea2:	e7d6      	b.n	8006e52 <USBD_StdDevReq+0x1ee>
      switch ((uint8_t)(req->wValue))
 8006ea4:	b2d2      	uxtb	r2, r2
 8006ea6:	2a05      	cmp	r2, #5
 8006ea8:	f63f af66 	bhi.w	8006d78 <USBD_StdDevReq+0x114>
 8006eac:	e8df f002 	tbb	[pc, r2]
 8006eb0:	242a3036 	.word	0x242a3036
 8006eb4:	181e      	.short	0x181e
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eb6:	7c03      	ldrb	r3, [r0, #16]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f040 8092 	bne.w	8006fe2 <USBD_StdDevReq+0x37e>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006ebe:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006ec2:	f10d 0006 	add.w	r0, sp, #6
 8006ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec8:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006eca:	2302      	movs	r3, #2
 8006ecc:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006ece:	e7c0      	b.n	8006e52 <USBD_StdDevReq+0x1ee>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006ed0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006ed4:	7c00      	ldrb	r0, [r0, #16]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f10d 0106 	add.w	r1, sp, #6
 8006edc:	4798      	blx	r3
  if (err != 0U)
 8006ede:	e7b8      	b.n	8006e52 <USBD_StdDevReq+0x1ee>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ee0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1af      	bne.n	8006e4a <USBD_StdDevReq+0x1e6>
 8006eea:	e745      	b.n	8006d78 <USBD_StdDevReq+0x114>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006eec:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1a9      	bne.n	8006e4a <USBD_StdDevReq+0x1e6>
 8006ef6:	e73f      	b.n	8006d78 <USBD_StdDevReq+0x114>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006ef8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1a3      	bne.n	8006e4a <USBD_StdDevReq+0x1e6>
 8006f02:	e739      	b.n	8006d78 <USBD_StdDevReq+0x114>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006f04:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d19d      	bne.n	8006e4a <USBD_StdDevReq+0x1e6>
 8006f0e:	e733      	b.n	8006d78 <USBD_StdDevReq+0x114>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006f10:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d197      	bne.n	8006e4a <USBD_StdDevReq+0x1e6>
 8006f1a:	e72d      	b.n	8006d78 <USBD_StdDevReq+0x114>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006f1c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d191      	bne.n	8006e4a <USBD_StdDevReq+0x1e6>
 8006f26:	e727      	b.n	8006d78 <USBD_StdDevReq+0x114>
    switch (pdev->dev_state)
 8006f28:	2b03      	cmp	r3, #3
 8006f2a:	f47f aea8 	bne.w	8006c7e <USBD_StdDevReq+0x1a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006f2e:	1d01      	adds	r1, r0, #4
 8006f30:	f000 f994 	bl	800725c <USBD_CtlSendData>
        break;
 8006f34:	e6ac      	b.n	8006c90 <USBD_StdDevReq+0x2c>
      if (cfgidx != 0U)
 8006f36:	2e00      	cmp	r6, #0
 8006f38:	f43f af14 	beq.w	8006d64 <USBD_StdDevReq+0x100>
        pdev->dev_config = cfgidx;
 8006f3c:	2101      	movs	r1, #1
 8006f3e:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f40:	f7ff fd44 	bl	80069cc <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8006f44:	4604      	mov	r4, r0
 8006f46:	2800      	cmp	r0, #0
 8006f48:	d054      	beq.n	8006ff4 <USBD_StdDevReq+0x390>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f4a:	2180      	movs	r1, #128	; 0x80
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	f000 fd13 	bl	8007978 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006f52:	2100      	movs	r1, #0
 8006f54:	4628      	mov	r0, r5
 8006f56:	f000 fd0f 	bl	8007978 <USBD_LL_StallEP>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f5a:	f885 829c 	strb.w	r8, [r5, #668]	; 0x29c
 8006f5e:	e697      	b.n	8006c90 <USBD_StdDevReq+0x2c>
      if (cfgidx == 0U)
 8006f60:	b39e      	cbz	r6, 8006fca <USBD_StdDevReq+0x366>
      else if (cfgidx != pdev->dev_config)
 8006f62:	6841      	ldr	r1, [r0, #4]
 8006f64:	2901      	cmp	r1, #1
 8006f66:	f43f aefd 	beq.w	8006d64 <USBD_StdDevReq+0x100>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f6a:	b2c9      	uxtb	r1, r1
 8006f6c:	f7ff fd36 	bl	80069dc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006f70:	7839      	ldrb	r1, [r7, #0]
 8006f72:	6069      	str	r1, [r5, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f74:	4628      	mov	r0, r5
 8006f76:	f7ff fd29 	bl	80069cc <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8006f7a:	4606      	mov	r6, r0
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	f43f aef1 	beq.w	8006d64 <USBD_StdDevReq+0x100>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f82:	2180      	movs	r1, #128	; 0x80
 8006f84:	4628      	mov	r0, r5
 8006f86:	f000 fcf7 	bl	8007978 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006f8a:	2100      	movs	r1, #0
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	f000 fcf3 	bl	8007978 <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f92:	7929      	ldrb	r1, [r5, #4]
 8006f94:	4628      	mov	r0, r5
 8006f96:	f7ff fd21 	bl	80069dc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8006fa0:	4634      	mov	r4, r6
 8006fa2:	e675      	b.n	8006c90 <USBD_StdDevReq+0x2c>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006fa4:	888b      	ldrh	r3, [r1, #4]
 8006fa6:	0a1b      	lsrs	r3, r3, #8
 8006fa8:	f880 32a0 	strb.w	r3, [r0, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006fac:	f000 f982 	bl	80072b4 <USBD_CtlSendStatus>
 8006fb0:	e66e      	b.n	8006c90 <USBD_StdDevReq+0x2c>
 8006fb2:	bf00      	nop
 8006fb4:	20002d84 	.word	0x20002d84
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006fb8:	2180      	movs	r1, #128	; 0x80
 8006fba:	f000 fcdd 	bl	8007978 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	f000 fcd9 	bl	8007978 <USBD_LL_StallEP>
    return USBD_FAIL;
 8006fc6:	2403      	movs	r4, #3
 8006fc8:	e662      	b.n	8006c90 <USBD_StdDevReq+0x2c>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fca:	2302      	movs	r3, #2
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006fcc:	4631      	mov	r1, r6
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fce:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006fd2:	6046      	str	r6, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006fd4:	f7ff fd02 	bl	80069dc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006fd8:	4628      	mov	r0, r5
 8006fda:	f000 f96b 	bl	80072b4 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8006fde:	4634      	mov	r4, r6
 8006fe0:	e656      	b.n	8006c90 <USBD_StdDevReq+0x2c>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006fe2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006fe6:	f10d 0006 	add.w	r0, sp, #6
 8006fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fec:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006fee:	2302      	movs	r3, #2
 8006ff0:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006ff2:	e72e      	b.n	8006e52 <USBD_StdDevReq+0x1ee>
          (void)USBD_CtlSendStatus(pdev);
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	f000 f95d 	bl	80072b4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8007000:	e646      	b.n	8006c90 <USBD_StdDevReq+0x2c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007002:	2301      	movs	r3, #1
 8007004:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8007008:	e642      	b.n	8006c90 <USBD_StdDevReq+0x2c>
 800700a:	bf00      	nop

0800700c <USBD_StdItfReq>:
{
 800700c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800700e:	780b      	ldrb	r3, [r1, #0]
 8007010:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8007014:	2a40      	cmp	r2, #64	; 0x40
{
 8007016:	460d      	mov	r5, r1
 8007018:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800701a:	d00b      	beq.n	8007034 <USBD_StdItfReq+0x28>
 800701c:	065b      	lsls	r3, r3, #25
 800701e:	d509      	bpl.n	8007034 <USBD_StdItfReq+0x28>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007020:	2180      	movs	r1, #128	; 0x80
 8007022:	f000 fca9 	bl	8007978 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007026:	2100      	movs	r1, #0
 8007028:	4620      	mov	r0, r4
 800702a:	f000 fca5 	bl	8007978 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 800702e:	2500      	movs	r5, #0
}
 8007030:	4628      	mov	r0, r5
 8007032:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8007034:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8007038:	3b01      	subs	r3, #1
 800703a:	2b02      	cmp	r3, #2
 800703c:	d802      	bhi.n	8007044 <USBD_StdItfReq+0x38>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800703e:	7929      	ldrb	r1, [r5, #4]
 8007040:	2901      	cmp	r1, #1
 8007042:	d902      	bls.n	800704a <USBD_StdItfReq+0x3e>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007044:	2180      	movs	r1, #128	; 0x80
 8007046:	4620      	mov	r0, r4
 8007048:	e7eb      	b.n	8007022 <USBD_StdItfReq+0x16>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800704a:	4620      	mov	r0, r4
 800704c:	f7ff fdf0 	bl	8006c30 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007050:	b990      	cbnz	r0, 8007078 <USBD_StdItfReq+0x6c>
              if (pdev->pClass[idx]->Setup != NULL)
 8007052:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	b173      	cbz	r3, 8007078 <USBD_StdItfReq+0x6c>
                pdev->classId = idx;
 800705a:	f8c4 02d4 	str.w	r0, [r4, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800705e:	4629      	mov	r1, r5
 8007060:	4620      	mov	r0, r4
 8007062:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007064:	88eb      	ldrh	r3, [r5, #6]
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007066:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1e1      	bne.n	8007030 <USBD_StdItfReq+0x24>
 800706c:	2800      	cmp	r0, #0
 800706e:	d1df      	bne.n	8007030 <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 8007070:	4620      	mov	r0, r4
 8007072:	f000 f91f 	bl	80072b4 <USBD_CtlSendStatus>
 8007076:	e7db      	b.n	8007030 <USBD_StdItfReq+0x24>
              ret = USBD_FAIL;
 8007078:	2503      	movs	r5, #3
}
 800707a:	4628      	mov	r0, r5
 800707c:	bd38      	pop	{r3, r4, r5, pc}
 800707e:	bf00      	nop

08007080 <USBD_StdEPReq>:
{
 8007080:	b530      	push	{r4, r5, lr}
 8007082:	460c      	mov	r4, r1
  ep_addr = LOBYTE(req->wIndex);
 8007084:	888a      	ldrh	r2, [r1, #4]
 8007086:	7823      	ldrb	r3, [r4, #0]
 8007088:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800708c:	2b20      	cmp	r3, #32
{
 800708e:	b083      	sub	sp, #12
 8007090:	4605      	mov	r5, r0
  ep_addr = LOBYTE(req->wIndex);
 8007092:	b2d1      	uxtb	r1, r2
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007094:	d01e      	beq.n	80070d4 <USBD_StdEPReq+0x54>
 8007096:	2b40      	cmp	r3, #64	; 0x40
 8007098:	d01c      	beq.n	80070d4 <USBD_StdEPReq+0x54>
 800709a:	b36b      	cbz	r3, 80070f8 <USBD_StdEPReq+0x78>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800709c:	2180      	movs	r1, #128	; 0x80
 800709e:	4628      	mov	r0, r5
 80070a0:	f000 fc6a 	bl	8007978 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80070a4:	2100      	movs	r1, #0
 80070a6:	4628      	mov	r0, r5
 80070a8:	f000 fc66 	bl	8007978 <USBD_LL_StallEP>
}
 80070ac:	2000      	movs	r0, #0
 80070ae:	b003      	add	sp, #12
 80070b0:	bd30      	pop	{r4, r5, pc}
          switch (pdev->dev_state)
 80070b2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	b2da      	uxtb	r2, r3
 80070ba:	d05d      	beq.n	8007178 <USBD_StdEPReq+0xf8>
 80070bc:	2a03      	cmp	r2, #3
 80070be:	d1ed      	bne.n	800709c <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80070c0:	8863      	ldrh	r3, [r4, #2]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1f2      	bne.n	80070ac <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 80070c6:	064b      	lsls	r3, r1, #25
 80070c8:	d17a      	bne.n	80071c0 <USBD_StdEPReq+0x140>
                (void)USBD_CtlSendStatus(pdev);
 80070ca:	4628      	mov	r0, r5
 80070cc:	9101      	str	r1, [sp, #4]
 80070ce:	f000 f8f1 	bl	80072b4 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80070d2:	9901      	ldr	r1, [sp, #4]
 80070d4:	4628      	mov	r0, r5
 80070d6:	f7ff fdad 	bl	8006c34 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070da:	2800      	cmp	r0, #0
 80070dc:	d1e6      	bne.n	80070ac <USBD_StdEPReq+0x2c>
                  if (pdev->pClass[idx]->Setup != NULL)
 80070de:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
                  pdev->classId = idx;
 80070e2:	f8c5 02d4 	str.w	r0, [r5, #724]	; 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d0df      	beq.n	80070ac <USBD_StdEPReq+0x2c>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80070ec:	4621      	mov	r1, r4
 80070ee:	4628      	mov	r0, r5
}
 80070f0:	b003      	add	sp, #12
 80070f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80070f6:	4718      	bx	r3
      switch (req->bRequest)
 80070f8:	7863      	ldrb	r3, [r4, #1]
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d0d9      	beq.n	80070b2 <USBD_StdEPReq+0x32>
 80070fe:	2b03      	cmp	r3, #3
 8007100:	d029      	beq.n	8007156 <USBD_StdEPReq+0xd6>
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1ca      	bne.n	800709c <USBD_StdEPReq+0x1c>
          switch (pdev->dev_state)
 8007106:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800710a:	2b02      	cmp	r3, #2
 800710c:	b2d8      	uxtb	r0, r3
 800710e:	d03c      	beq.n	800718a <USBD_StdEPReq+0x10a>
 8007110:	2803      	cmp	r0, #3
 8007112:	d1c3      	bne.n	800709c <USBD_StdEPReq+0x1c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007114:	f001 030f 	and.w	r3, r1, #15
 8007118:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800711c:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800711e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8007122:	d441      	bmi.n	80071a8 <USBD_StdEPReq+0x128>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007124:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8007128:	2b00      	cmp	r3, #0
 800712a:	d0b7      	beq.n	800709c <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800712c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8007130:	2414      	movs	r4, #20
 8007132:	fb04 5403 	mla	r4, r4, r3, r5
 8007136:	f504 74aa 	add.w	r4, r4, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800713a:	b12b      	cbz	r3, 8007148 <USBD_StdEPReq+0xc8>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800713c:	4628      	mov	r0, r5
 800713e:	f000 fc37 	bl	80079b0 <USBD_LL_IsStallEP>
 8007142:	2800      	cmp	r0, #0
 8007144:	d041      	beq.n	80071ca <USBD_StdEPReq+0x14a>
                pep->status = 0x0001U;
 8007146:	2301      	movs	r3, #1
 8007148:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800714a:	2202      	movs	r2, #2
 800714c:	4621      	mov	r1, r4
 800714e:	4628      	mov	r0, r5
 8007150:	f000 f884 	bl	800725c <USBD_CtlSendData>
              break;
 8007154:	e7aa      	b.n	80070ac <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 8007156:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800715a:	2b02      	cmp	r3, #2
 800715c:	b2da      	uxtb	r2, r3
 800715e:	d00b      	beq.n	8007178 <USBD_StdEPReq+0xf8>
 8007160:	2a03      	cmp	r2, #3
 8007162:	d19b      	bne.n	800709c <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007164:	8863      	ldrh	r3, [r4, #2]
 8007166:	b91b      	cbnz	r3, 8007170 <USBD_StdEPReq+0xf0>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007168:	0648      	lsls	r0, r1, #25
 800716a:	d001      	beq.n	8007170 <USBD_StdEPReq+0xf0>
 800716c:	88e3      	ldrh	r3, [r4, #6]
 800716e:	b373      	cbz	r3, 80071ce <USBD_StdEPReq+0x14e>
              (void)USBD_CtlSendStatus(pdev);
 8007170:	4628      	mov	r0, r5
 8007172:	f000 f89f 	bl	80072b4 <USBD_CtlSendStatus>
              break;
 8007176:	e799      	b.n	80070ac <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007178:	064a      	lsls	r2, r1, #25
 800717a:	d08f      	beq.n	800709c <USBD_StdEPReq+0x1c>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800717c:	f000 fbfc 	bl	8007978 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007180:	2180      	movs	r1, #128	; 0x80
 8007182:	4628      	mov	r0, r5
 8007184:	f000 fbf8 	bl	8007978 <USBD_LL_StallEP>
 8007188:	e790      	b.n	80070ac <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800718a:	0648      	lsls	r0, r1, #25
 800718c:	d186      	bne.n	800709c <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800718e:	0611      	lsls	r1, r2, #24
 8007190:	bf4c      	ite	mi
 8007192:	f105 0114 	addmi.w	r1, r5, #20
 8007196:	f505 71aa 	addpl.w	r1, r5, #340	; 0x154
              pep->status = 0x0000U;
 800719a:	2300      	movs	r3, #0
 800719c:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800719e:	2202      	movs	r2, #2
 80071a0:	4628      	mov	r0, r5
 80071a2:	f000 f85b 	bl	800725c <USBD_CtlSendData>
              break;
 80071a6:	e781      	b.n	80070ac <USBD_StdEPReq+0x2c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80071a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f43f af76 	beq.w	800709c <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071b0:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 80071b4:	1c5c      	adds	r4, r3, #1
 80071b6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80071ba:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 80071be:	e7bc      	b.n	800713a <USBD_StdEPReq+0xba>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80071c0:	9101      	str	r1, [sp, #4]
 80071c2:	f000 fbe7 	bl	8007994 <USBD_LL_ClearStallEP>
 80071c6:	9901      	ldr	r1, [sp, #4]
 80071c8:	e77f      	b.n	80070ca <USBD_StdEPReq+0x4a>
                pep->status = 0x0000U;
 80071ca:	6020      	str	r0, [r4, #0]
 80071cc:	e7bd      	b.n	800714a <USBD_StdEPReq+0xca>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80071ce:	4628      	mov	r0, r5
 80071d0:	f000 fbd2 	bl	8007978 <USBD_LL_StallEP>
 80071d4:	e7cc      	b.n	8007170 <USBD_StdEPReq+0xf0>
 80071d6:	bf00      	nop

080071d8 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 80071d8:	780b      	ldrb	r3, [r1, #0]
 80071da:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 80071dc:	784b      	ldrb	r3, [r1, #1]
 80071de:	7043      	strb	r3, [r0, #1]
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 80071e0:	884b      	ldrh	r3, [r1, #2]
  req->wValue = SWAPBYTE(pbuff);
 80071e2:	8043      	strh	r3, [r0, #2]
 80071e4:	888b      	ldrh	r3, [r1, #4]
  req->wIndex = SWAPBYTE(pbuff);
 80071e6:	8083      	strh	r3, [r0, #4]
 80071e8:	88cb      	ldrh	r3, [r1, #6]
  req->wLength = SWAPBYTE(pbuff);
 80071ea:	80c3      	strh	r3, [r0, #6]
}
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop

080071f0 <USBD_CtlError>:
{
 80071f0:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80071f2:	2180      	movs	r1, #128	; 0x80
{
 80071f4:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80071f6:	f000 fbbf 	bl	8007978 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80071fa:	4620      	mov	r0, r4
 80071fc:	2100      	movs	r1, #0
}
 80071fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8007202:	f000 bbb9 	b.w	8007978 <USBD_LL_StallEP>
 8007206:	bf00      	nop

08007208 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8007208:	b318      	cbz	r0, 8007252 <USBD_GetString+0x4a>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800720a:	7803      	ldrb	r3, [r0, #0]
{
 800720c:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 800720e:	b30b      	cbz	r3, 8007254 <USBD_GetString+0x4c>
 8007210:	4604      	mov	r4, r0
 8007212:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 8007216:	eb04 030c 	add.w	r3, r4, ip
  while (*pbuff != (uint8_t)'\0')
 800721a:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800721e:	b2db      	uxtb	r3, r3
 8007220:	2d00      	cmp	r5, #0
 8007222:	d1f8      	bne.n	8007216 <USBD_GetString+0xe>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007224:	3301      	adds	r3, #1
 8007226:	005b      	lsls	r3, r3, #1
 8007228:	b2dc      	uxtb	r4, r3
 800722a:	8013      	strh	r3, [r2, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800722c:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 800722e:	700c      	strb	r4, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007230:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 8007232:	7804      	ldrb	r4, [r0, #0]
 8007234:	b15c      	cbz	r4, 800724e <USBD_GetString+0x46>
  idx++;
 8007236:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 8007238:	2500      	movs	r5, #0
    idx++;
 800723a:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 800723c:	b2d2      	uxtb	r2, r2
    unicode[idx] = *pdesc;
 800723e:	54cc      	strb	r4, [r1, r3]
    unicode[idx] = 0U;
 8007240:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 8007242:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    idx++;
 8007246:	3302      	adds	r3, #2
 8007248:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800724a:	2c00      	cmp	r4, #0
 800724c:	d1f5      	bne.n	800723a <USBD_GetString+0x32>
}
 800724e:	bc30      	pop	{r4, r5}
 8007250:	4770      	bx	lr
 8007252:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 8007254:	2402      	movs	r4, #2
 8007256:	4623      	mov	r3, r4
 8007258:	e7e7      	b.n	800722a <USBD_GetString+0x22>
 800725a:	bf00      	nop

0800725c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800725c:	b508      	push	{r3, lr}
 800725e:	4613      	mov	r3, r2
 8007260:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007262:	2102      	movs	r1, #2
  pdev->ep_in[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007264:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007268:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800726c:	2100      	movs	r1, #0
 800726e:	f000 fbc1 	bl	80079f4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007272:	2000      	movs	r0, #0
 8007274:	bd08      	pop	{r3, pc}
 8007276:	bf00      	nop

08007278 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007278:	b508      	push	{r3, lr}
 800727a:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800727c:	460a      	mov	r2, r1
 800727e:	2100      	movs	r1, #0
 8007280:	f000 fbb8 	bl	80079f4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007284:	2000      	movs	r0, #0
 8007286:	bd08      	pop	{r3, pc}

08007288 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007288:	b508      	push	{r3, lr}
 800728a:	4613      	mov	r3, r2
 800728c:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800728e:	2103      	movs	r1, #3
  pdev->ep_out[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007290:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007294:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007298:	2100      	movs	r1, #0
 800729a:	f000 fbb9 	bl	8007a10 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800729e:	2000      	movs	r0, #0
 80072a0:	bd08      	pop	{r3, pc}
 80072a2:	bf00      	nop

080072a4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80072a4:	b508      	push	{r3, lr}
 80072a6:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80072a8:	460a      	mov	r2, r1
 80072aa:	2100      	movs	r1, #0
 80072ac:	f000 fbb0 	bl	8007a10 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80072b0:	2000      	movs	r0, #0
 80072b2:	bd08      	pop	{r3, pc}

080072b4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80072b4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80072b6:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80072b8:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80072ba:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80072be:	461a      	mov	r2, r3
 80072c0:	4619      	mov	r1, r3
 80072c2:	f000 fb97 	bl	80079f4 <USBD_LL_Transmit>

  return USBD_OK;
}
 80072c6:	2000      	movs	r0, #0
 80072c8:	bd08      	pop	{r3, pc}
 80072ca:	bf00      	nop

080072cc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80072cc:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80072ce:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072d0:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80072d2:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072d6:	461a      	mov	r2, r3
 80072d8:	4619      	mov	r1, r3
 80072da:	f000 fb99 	bl	8007a10 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80072de:	2000      	movs	r0, #0
 80072e0:	bd08      	pop	{r3, pc}
 80072e2:	bf00      	nop

080072e4 <arm_biquad_cascade_df1_f32>:
void arm_biquad_cascade_df1_f32(
  const arm_biquad_casd_df1_inst_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 80072e4:	b530      	push	{r4, r5, lr}
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
        float32_t acc;                                 /* Accumulator */
        float32_t b0, b1, b2, a1, a2;                  /* Filter coefficients */
        float32_t Xn1, Xn2, Yn1, Yn2;                  /* Filter pState variables */
        float32_t Xn;                                  /* Temporary input */
        uint32_t sample, stage = S->numStages;         /* Loop counters */
 80072e6:	6805      	ldr	r5, [r0, #0]
 80072e8:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 80072ec:	3414      	adds	r4, #20
 80072ee:	f100 0e10 	add.w	lr, r0, #16

  do
  {
    /* Reading the coefficients */
    b0 = *pCoeffs++;
 80072f2:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
    b1 = *pCoeffs++;
 80072f6:	ed14 4a04 	vldr	s8, [r4, #-16]
    b2 = *pCoeffs++;
 80072fa:	ed54 3a03 	vldr	s7, [r4, #-12]
    a1 = *pCoeffs++;
 80072fe:	ed14 3a02 	vldr	s6, [r4, #-8]
    a2 = *pCoeffs++;
 8007302:	ed54 2a01 	vldr	s5, [r4, #-4]

    /* Reading the pState values */
    Xn1 = pState[0];
 8007306:	ed5e 6a04 	vldr	s13, [lr, #-16]
    Xn2 = pState[1];
 800730a:	ed5e 5a03 	vldr	s11, [lr, #-12]
    Yn1 = pState[2];
 800730e:	ed1e 7a02 	vldr	s14, [lr, #-8]
    Yn2 = pState[3];
 8007312:	ed1e 5a01 	vldr	s10, [lr, #-4]
    /* Initialize blkCnt with number of samples */
    sample = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (sample > 0U)
 8007316:	b353      	cbz	r3, 800736e <arm_biquad_cascade_df1_f32+0x8a>
 8007318:	4618      	mov	r0, r3
 800731a:	4694      	mov	ip, r2
 800731c:	e003      	b.n	8007326 <arm_biquad_cascade_df1_f32+0x42>
    {
      /* Read the input */
      Xn = *pIn++;

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      acc = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 800731e:	eeb0 7a67 	vmov.f32	s14, s15
      Xn = *pIn++;
 8007322:	eef0 6a46 	vmov.f32	s13, s12
 8007326:	ecb1 6a01 	vldmia	r1!, {s12}
      acc = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 800732a:	ee64 7a26 	vmul.f32	s15, s8, s13
    while (sample > 0U)
 800732e:	3801      	subs	r0, #1
      acc = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 8007330:	eee4 7a86 	vfma.f32	s15, s9, s12
 8007334:	eee3 7aa5 	vfma.f32	s15, s7, s11
 8007338:	eef0 5a66 	vmov.f32	s11, s13
 800733c:	eee3 7a07 	vfma.f32	s15, s6, s14
 8007340:	eee2 7a85 	vfma.f32	s15, s5, s10

      /* Store output in destination buffer. */
      *pOut++ = acc;
 8007344:	eeb0 5a47 	vmov.f32	s10, s14
 8007348:	ecec 7a01 	vstmia	ip!, {s15}
    while (sample > 0U)
 800734c:	d1e7      	bne.n	800731e <arm_biquad_cascade_df1_f32+0x3a>
    pOut = pDst;

    /* decrement loop counter */
    stage--;

  } while (stage > 0U);
 800734e:	3d01      	subs	r5, #1
    *pState++ = Xn1;
 8007350:	ed0e 6a04 	vstr	s12, [lr, #-16]
    *pState++ = Xn2;
 8007354:	ed4e 6a03 	vstr	s13, [lr, #-12]
    *pState++ = Yn1;
 8007358:	ed4e 7a02 	vstr	s15, [lr, #-8]
    *pState++ = Yn2;
 800735c:	ed0e 7a01 	vstr	s14, [lr, #-4]
  } while (stage > 0U);
 8007360:	f104 0414 	add.w	r4, r4, #20
 8007364:	f10e 0e10 	add.w	lr, lr, #16
 8007368:	d00a      	beq.n	8007380 <arm_biquad_cascade_df1_f32+0x9c>
    pIn = pDst;
 800736a:	4611      	mov	r1, r2
 800736c:	e7c1      	b.n	80072f2 <arm_biquad_cascade_df1_f32+0xe>
    Yn1 = pState[2];
 800736e:	eef0 7a47 	vmov.f32	s15, s14
    Xn1 = pState[0];
 8007372:	eeb0 6a66 	vmov.f32	s12, s13
    Yn2 = pState[3];
 8007376:	eeb0 7a45 	vmov.f32	s14, s10
    Xn2 = pState[1];
 800737a:	eef0 6a65 	vmov.f32	s13, s11
 800737e:	e7e6      	b.n	800734e <arm_biquad_cascade_df1_f32+0x6a>

}
 8007380:	bd30      	pop	{r4, r5, pc}
 8007382:	bf00      	nop

08007384 <arm_biquad_cascade_df1_init_f32>:
void arm_biquad_cascade_df1_init_f32(
        arm_biquad_casd_df1_inst_f32 * S,
        uint8_t numStages,
  const float32_t * pCoeffs,
        float32_t * pState)
{
 8007384:	b510      	push	{r4, lr}
  /* Assign filter stages */
  S->numStages = numStages;
 8007386:	6001      	str	r1, [r0, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 8007388:	6082      	str	r2, [r0, #8]
{
 800738a:	4604      	mov	r4, r0

  /* Clear state buffer and size is always 4 * numStages */
  memset(pState, 0, (4U * (uint32_t) numStages) * sizeof(float32_t));
 800738c:	010a      	lsls	r2, r1, #4
 800738e:	4618      	mov	r0, r3
 8007390:	2100      	movs	r1, #0
 8007392:	f000 fbcf 	bl	8007b34 <memset>

  /* Assign state pointer */
  S->pState = pState;
 8007396:	6060      	str	r0, [r4, #4]
}
 8007398:	bd10      	pop	{r4, pc}
 800739a:	bf00      	nop

0800739c <arm_fir_f32>:
void arm_fir_f32(
  const arm_fir_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 800739c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
        float32_t *pStateCurnt;                        /* Points to the current sample of the state */
        float32_t *px;                                 /* Temporary pointer for state buffer */
  const float32_t *pb;                                 /* Temporary pointer for coefficient buffer */
        float32_t acc0;                                /* Accumulator */
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 80073a0:	8804      	ldrh	r4, [r0, #0]
        float32_t *pState = S->pState;                 /* State pointer */
 80073a2:	f8d0 8004 	ldr.w	r8, [r0, #4]
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 80073a6:	f8d0 9008 	ldr.w	r9, [r0, #8]
        float32_t c0;                                           /* Temporary variable to hold coefficient value */
#endif

  /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
  /* pStateCurnt points to the location where the new input data should be written */
  pStateCurnt = &(S->pState[(numTaps - 1U)]);
 80073aa:	f104 4080 	add.w	r0, r4, #1073741824	; 0x40000000
 80073ae:	3801      	subs	r0, #1
 80073b0:	eb08 0780 	add.w	r7, r8, r0, lsl #2
  /* Initialize blkCnt with number of taps */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 80073b4:	b32b      	cbz	r3, 8007402 <arm_fir_f32+0x66>
 80073b6:	461d      	mov	r5, r3
        float32_t *pState = S->pState;                 /* State pointer */
 80073b8:	4646      	mov	r6, r8
  {
    /* Copy one sample at a time into state buffer */
    *pStateCurnt++ = *pSrc++;
 80073ba:	f851 0b04 	ldr.w	r0, [r1], #4
 80073be:	f847 0b04 	str.w	r0, [r7], #4

    /* Set the accumulator to zero */
    acc0 = 0.0f;
 80073c2:	eddf 7a11 	vldr	s15, [pc, #68]	; 8007408 <arm_fir_f32+0x6c>
    pb = pCoeffs;

    i = numTaps;

    /* Perform the multiply-accumulates */
    while (i > 0U)
 80073c6:	b154      	cbz	r4, 80073de <arm_fir_f32+0x42>
 80073c8:	4620      	mov	r0, r4
    pb = pCoeffs;
 80073ca:	46ce      	mov	lr, r9
    while (i > 0U)
 80073cc:	46b4      	mov	ip, r6
    {
      /* acc =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-numTaps-3] +...+ b[0] * x[0] */
      acc0 += *px++ * *pb++;
 80073ce:	ecfc 6a01 	vldmia	ip!, {s13}
 80073d2:	ecbe 7a01 	vldmia	lr!, {s14}
    while (i > 0U)
 80073d6:	3801      	subs	r0, #1
      acc0 += *px++ * *pb++;
 80073d8:	eee6 7a87 	vfma.f32	s15, s13, s14
    while (i > 0U)
 80073dc:	d1f7      	bne.n	80073ce <arm_fir_f32+0x32>
  while (blkCnt > 0U)
 80073de:	3d01      	subs	r5, #1

      i--;
    }

    /* Store result in destination buffer. */
    *pDst++ = acc0;
 80073e0:	ece2 7a01 	vstmia	r2!, {s15}

    /* Advance state pointer by 1 for the next sample */
    pState = pState + 1U;
 80073e4:	f106 0604 	add.w	r6, r6, #4
  while (blkCnt > 0U)
 80073e8:	d1e7      	bne.n	80073ba <arm_fir_f32+0x1e>
    pState = pState + 1U;
 80073ea:	eb08 0283 	add.w	r2, r8, r3, lsl #2
  tapCnt = (numTaps - 1U);

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy remaining data */
  while (tapCnt > 0U)
 80073ee:	1e63      	subs	r3, r4, #1
 80073f0:	d005      	beq.n	80073fe <arm_fir_f32+0x62>
  {
    *pStateCurnt++ = *pState++;
 80073f2:	f852 1b04 	ldr.w	r1, [r2], #4
 80073f6:	f848 1b04 	str.w	r1, [r8], #4
  while (tapCnt > 0U)
 80073fa:	3b01      	subs	r3, #1
 80073fc:	d1f9      	bne.n	80073f2 <arm_fir_f32+0x56>

    /* Decrement loop counter */
    tapCnt--;
  }

}
 80073fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        float32_t *pState = S->pState;                 /* State pointer */
 8007402:	4642      	mov	r2, r8
 8007404:	e7f3      	b.n	80073ee <arm_fir_f32+0x52>
 8007406:	bf00      	nop
 8007408:	00000000 	.word	0x00000000

0800740c <arm_fir_init_f32>:
        arm_fir_instance_f32 * S,
        uint16_t numTaps,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
 800740c:	b510      	push	{r4, lr}
 800740e:	4604      	mov	r4, r0

  /* Clear state buffer. The size is always (blockSize + numTaps - 1) */
#if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  memset(pState, 0, (numTaps + (blockSize - 1U) + blockSize) * sizeof(float32_t));
#else
  memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 8007410:	9802      	ldr	r0, [sp, #8]
  S->numTaps = numTaps;
 8007412:	8021      	strh	r1, [r4, #0]
  memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 8007414:	f100 3cff 	add.w	ip, r0, #4294967295
 8007418:	448c      	add	ip, r1
  S->pCoeffs = pCoeffs;
 800741a:	60a2      	str	r2, [r4, #8]
  memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 800741c:	2100      	movs	r1, #0
 800741e:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8007422:	4618      	mov	r0, r3
 8007424:	f000 fb86 	bl	8007b34 <memset>
#endif
  /* Assign state pointer */
  S->pState = pState;
 8007428:	6060      	str	r0, [r4, #4]
}
 800742a:	bd10      	pop	{r4, pc}

0800742c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800742c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800742e:	4918      	ldr	r1, [pc, #96]	; (8007490 <MX_USB_Device_Init+0x64>)
 8007430:	4818      	ldr	r0, [pc, #96]	; (8007494 <MX_USB_Device_Init+0x68>)
 8007432:	2200      	movs	r2, #0
 8007434:	f7ff fa98 	bl	8006968 <USBD_Init>
 8007438:	b970      	cbnz	r0, 8007458 <MX_USB_Device_Init+0x2c>
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800743a:	4917      	ldr	r1, [pc, #92]	; (8007498 <MX_USB_Device_Init+0x6c>)
 800743c:	4815      	ldr	r0, [pc, #84]	; (8007494 <MX_USB_Device_Init+0x68>)
 800743e:	f7ff faa7 	bl	8006990 <USBD_RegisterClass>
 8007442:	b988      	cbnz	r0, 8007468 <MX_USB_Device_Init+0x3c>
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8007444:	4915      	ldr	r1, [pc, #84]	; (800749c <MX_USB_Device_Init+0x70>)
 8007446:	4813      	ldr	r0, [pc, #76]	; (8007494 <MX_USB_Device_Init+0x68>)
 8007448:	f7ff fa30 	bl	80068ac <USBD_CDC_RegisterInterface>
 800744c:	b9a0      	cbnz	r0, 8007478 <MX_USB_Device_Init+0x4c>
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800744e:	4811      	ldr	r0, [pc, #68]	; (8007494 <MX_USB_Device_Init+0x68>)
 8007450:	f7ff faba 	bl	80069c8 <USBD_Start>
 8007454:	b9b8      	cbnz	r0, 8007486 <MX_USB_Device_Init+0x5a>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8007456:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007458:	f7fb fd5c 	bl	8002f14 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800745c:	490e      	ldr	r1, [pc, #56]	; (8007498 <MX_USB_Device_Init+0x6c>)
 800745e:	480d      	ldr	r0, [pc, #52]	; (8007494 <MX_USB_Device_Init+0x68>)
 8007460:	f7ff fa96 	bl	8006990 <USBD_RegisterClass>
 8007464:	2800      	cmp	r0, #0
 8007466:	d0ed      	beq.n	8007444 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8007468:	f7fb fd54 	bl	8002f14 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800746c:	490b      	ldr	r1, [pc, #44]	; (800749c <MX_USB_Device_Init+0x70>)
 800746e:	4809      	ldr	r0, [pc, #36]	; (8007494 <MX_USB_Device_Init+0x68>)
 8007470:	f7ff fa1c 	bl	80068ac <USBD_CDC_RegisterInterface>
 8007474:	2800      	cmp	r0, #0
 8007476:	d0ea      	beq.n	800744e <MX_USB_Device_Init+0x22>
    Error_Handler();
 8007478:	f7fb fd4c 	bl	8002f14 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800747c:	4805      	ldr	r0, [pc, #20]	; (8007494 <MX_USB_Device_Init+0x68>)
 800747e:	f7ff faa3 	bl	80069c8 <USBD_Start>
 8007482:	2800      	cmp	r0, #0
 8007484:	d0e7      	beq.n	8007456 <MX_USB_Device_Init+0x2a>
}
 8007486:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800748a:	f7fb bd43 	b.w	8002f14 <Error_Handler>
 800748e:	bf00      	nop
 8007490:	200000b4 	.word	0x200000b4
 8007494:	20002d88 	.word	0x20002d88
 8007498:	20000014 	.word	0x20000014
 800749c:	2000009c 	.word	0x2000009c

080074a0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80074a0:	2000      	movs	r0, #0
 80074a2:	4770      	bx	lr

080074a4 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80074a4:	2000      	movs	r0, #0
 80074a6:	4770      	bx	lr

080074a8 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 80074a8:	2000      	movs	r0, #0
 80074aa:	4770      	bx	lr

080074ac <CDC_Receive_FS>:
{
 80074ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (byteInBuffer>2047)
 80074ae:	4e12      	ldr	r6, [pc, #72]	; (80074f8 <CDC_Receive_FS+0x4c>)
	bufferFlag = 0;
 80074b0:	4f12      	ldr	r7, [pc, #72]	; (80074fc <CDC_Receive_FS+0x50>)
  if (byteInBuffer>2047)
 80074b2:	6833      	ldr	r3, [r6, #0]
	bufferFlag = 0;
 80074b4:	2500      	movs	r5, #0
  if (byteInBuffer>2047)
 80074b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
	bufferFlag = 0;
 80074ba:	703d      	strb	r5, [r7, #0]
{
 80074bc:	4602      	mov	r2, r0
 80074be:	460c      	mov	r4, r1
  if (byteInBuffer>2047)
 80074c0:	d215      	bcs.n	80074ee <CDC_Receive_FS+0x42>
  memcpy(&UserTxBufferFS[byteInBuffer],&Buf[0], *Len);
 80074c2:	480f      	ldr	r0, [pc, #60]	; (8007500 <CDC_Receive_FS+0x54>)
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[byteInBuffer]);
 80074c4:	18d5      	adds	r5, r2, r3
  memcpy(&UserTxBufferFS[byteInBuffer],&Buf[0], *Len);
 80074c6:	4418      	add	r0, r3
 80074c8:	4611      	mov	r1, r2
 80074ca:	6822      	ldr	r2, [r4, #0]
 80074cc:	f000 fb0a 	bl	8007ae4 <memcpy>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[byteInBuffer]);
 80074d0:	4629      	mov	r1, r5
 80074d2:	480c      	ldr	r0, [pc, #48]	; (8007504 <CDC_Receive_FS+0x58>)
 80074d4:	f7ff fa04 	bl	80068e0 <USBD_CDC_SetRxBuffer>
  byteInBuffer += *Len;
 80074d8:	6823      	ldr	r3, [r4, #0]
 80074da:	6832      	ldr	r2, [r6, #0]
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80074dc:	4809      	ldr	r0, [pc, #36]	; (8007504 <CDC_Receive_FS+0x58>)
  byteInBuffer += *Len;
 80074de:	4413      	add	r3, r2
 80074e0:	6033      	str	r3, [r6, #0]
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80074e2:	f7ff fa25 	bl	8006930 <USBD_CDC_ReceivePacket>
	bufferFlag = 1;
 80074e6:	2301      	movs	r3, #1
 80074e8:	703b      	strb	r3, [r7, #0]
}
 80074ea:	2000      	movs	r0, #0
 80074ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  byteInBuffer = 0;
 80074ee:	6035      	str	r5, [r6, #0]
 80074f0:	4605      	mov	r5, r0
 80074f2:	4803      	ldr	r0, [pc, #12]	; (8007500 <CDC_Receive_FS+0x54>)
 80074f4:	e7e8      	b.n	80074c8 <CDC_Receive_FS+0x1c>
 80074f6:	bf00      	nop
 80074f8:	20004064 	.word	0x20004064
 80074fc:	200000b0 	.word	0x200000b0
 8007500:	20003864 	.word	0x20003864
 8007504:	20002d88 	.word	0x20002d88

08007508 <CDC_Init_FS>:
{
 8007508:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800750a:	4c06      	ldr	r4, [pc, #24]	; (8007524 <CDC_Init_FS+0x1c>)
 800750c:	4906      	ldr	r1, [pc, #24]	; (8007528 <CDC_Init_FS+0x20>)
 800750e:	2200      	movs	r2, #0
 8007510:	4620      	mov	r0, r4
 8007512:	f7ff f9d7 	bl	80068c4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007516:	4905      	ldr	r1, [pc, #20]	; (800752c <CDC_Init_FS+0x24>)
 8007518:	4620      	mov	r0, r4
 800751a:	f7ff f9e1 	bl	80068e0 <USBD_CDC_SetRxBuffer>
}
 800751e:	2000      	movs	r0, #0
 8007520:	bd10      	pop	{r4, pc}
 8007522:	bf00      	nop
 8007524:	20002d88 	.word	0x20002d88
 8007528:	20003864 	.word	0x20003864
 800752c:	20003064 	.word	0x20003064

08007530 <CDC_Transmit_FS>:
{
 8007530:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007532:	4c09      	ldr	r4, [pc, #36]	; (8007558 <CDC_Transmit_FS+0x28>)
 8007534:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 8007538:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800753c:	b10b      	cbz	r3, 8007542 <CDC_Transmit_FS+0x12>
}
 800753e:	2001      	movs	r0, #1
 8007540:	bd10      	pop	{r4, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007542:	460a      	mov	r2, r1
 8007544:	4601      	mov	r1, r0
 8007546:	4620      	mov	r0, r4
 8007548:	f7ff f9bc 	bl	80068c4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800754c:	4620      	mov	r0, r4
}
 800754e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007552:	f7ff b9d1 	b.w	80068f8 <USBD_CDC_TransmitPacket>
 8007556:	bf00      	nop
 8007558:	20002d88 	.word	0x20002d88

0800755c <USBD_CDC_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800755c:	2312      	movs	r3, #18
  return USBD_CDC_DeviceDesc;
}
 800755e:	4801      	ldr	r0, [pc, #4]	; (8007564 <USBD_CDC_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_CDC_DeviceDesc);
 8007560:	800b      	strh	r3, [r1, #0]
}
 8007562:	4770      	bx	lr
 8007564:	200000d4 	.word	0x200000d4

08007568 <USBD_CDC_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007568:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800756a:	4801      	ldr	r0, [pc, #4]	; (8007570 <USBD_CDC_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800756c:	800b      	strh	r3, [r1, #0]
}
 800756e:	4770      	bx	lr
 8007570:	200000e8 	.word	0x200000e8

08007574 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007574:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007576:	4c04      	ldr	r4, [pc, #16]	; (8007588 <USBD_CDC_ManufacturerStrDescriptor+0x14>)
 8007578:	4804      	ldr	r0, [pc, #16]	; (800758c <USBD_CDC_ManufacturerStrDescriptor+0x18>)
{
 800757a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800757c:	4621      	mov	r1, r4
 800757e:	f7ff fe43 	bl	8007208 <USBD_GetString>
  return USBD_StrDesc;
}
 8007582:	4620      	mov	r0, r4
 8007584:	bd10      	pop	{r4, pc}
 8007586:	bf00      	nop
 8007588:	20004068 	.word	0x20004068
 800758c:	0800de14 	.word	0x0800de14

08007590 <USBD_CDC_ProductStrDescriptor>:
{
 8007590:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8007592:	4c04      	ldr	r4, [pc, #16]	; (80075a4 <USBD_CDC_ProductStrDescriptor+0x14>)
 8007594:	4804      	ldr	r0, [pc, #16]	; (80075a8 <USBD_CDC_ProductStrDescriptor+0x18>)
{
 8007596:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8007598:	4621      	mov	r1, r4
 800759a:	f7ff fe35 	bl	8007208 <USBD_GetString>
}
 800759e:	4620      	mov	r0, r4
 80075a0:	bd10      	pop	{r4, pc}
 80075a2:	bf00      	nop
 80075a4:	20004068 	.word	0x20004068
 80075a8:	0800de28 	.word	0x0800de28

080075ac <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075ac:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80075ae:	4c04      	ldr	r4, [pc, #16]	; (80075c0 <USBD_CDC_ConfigStrDescriptor+0x14>)
 80075b0:	4804      	ldr	r0, [pc, #16]	; (80075c4 <USBD_CDC_ConfigStrDescriptor+0x18>)
{
 80075b2:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80075b4:	4621      	mov	r1, r4
 80075b6:	f7ff fe27 	bl	8007208 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80075ba:	4620      	mov	r0, r4
 80075bc:	bd10      	pop	{r4, pc}
 80075be:	bf00      	nop
 80075c0:	20004068 	.word	0x20004068
 80075c4:	0800de40 	.word	0x0800de40

080075c8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075c8:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80075ca:	4c04      	ldr	r4, [pc, #16]	; (80075dc <USBD_CDC_InterfaceStrDescriptor+0x14>)
 80075cc:	4804      	ldr	r0, [pc, #16]	; (80075e0 <USBD_CDC_InterfaceStrDescriptor+0x18>)
{
 80075ce:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80075d0:	4621      	mov	r1, r4
 80075d2:	f7ff fe19 	bl	8007208 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80075d6:	4620      	mov	r0, r4
 80075d8:	bd10      	pop	{r4, pc}
 80075da:	bf00      	nop
 80075dc:	20004068 	.word	0x20004068
 80075e0:	0800de4c 	.word	0x0800de4c

080075e4 <USBD_CDC_SerialStrDescriptor>:
{
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80075e4:	4a45      	ldr	r2, [pc, #276]	; (80076fc <USBD_CDC_SerialStrDescriptor+0x118>)
 80075e6:	f8d2 0590 	ldr.w	r0, [r2, #1424]	; 0x590
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 80075ea:	f8d2 3598 	ldr.w	r3, [r2, #1432]	; 0x598
  *length = USB_SIZ_STRING_SERIAL;
 80075ee:	f04f 0c1a 	mov.w	ip, #26

  if (deviceserial0 != 0)
 80075f2:	18c3      	adds	r3, r0, r3
  *length = USB_SIZ_STRING_SERIAL;
 80075f4:	f8a1 c000 	strh.w	ip, [r1]
  if (deviceserial0 != 0)
 80075f8:	d101      	bne.n	80075fe <USBD_CDC_SerialStrDescriptor+0x1a>
}
 80075fa:	4841      	ldr	r0, [pc, #260]	; (8007700 <USBD_CDC_SerialStrDescriptor+0x11c>)
 80075fc:	4770      	bx	lr
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80075fe:	f8d2 1594 	ldr.w	r1, [r2, #1428]	; 0x594

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007602:	4a3f      	ldr	r2, [pc, #252]	; (8007700 <USBD_CDC_SerialStrDescriptor+0x11c>)
    if (((value >> 28)) < 0xA)
 8007604:	0f18      	lsrs	r0, r3, #28
 8007606:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800760a:	bf2c      	ite	cs
 800760c:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800760e:	3030      	addcc	r0, #48	; 0x30
 8007610:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 8007612:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8007616:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007618:	bf8c      	ite	hi
 800761a:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800761c:	3030      	addls	r0, #48	; 0x30
 800761e:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 8007620:	f3c3 5003 	ubfx	r0, r3, #20, #4
 8007624:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007626:	bf8c      	ite	hi
 8007628:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800762a:	3030      	addls	r0, #48	; 0x30
 800762c:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 800762e:	f3c3 4003 	ubfx	r0, r3, #16, #4
 8007632:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007634:	bf8c      	ite	hi
 8007636:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8007638:	3030      	addls	r0, #48	; 0x30
 800763a:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 800763c:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8007640:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007642:	bf8c      	ite	hi
 8007644:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8007646:	3030      	addls	r0, #48	; 0x30
 8007648:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 800764a:	f3c3 2003 	ubfx	r0, r3, #8, #4
 800764e:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007650:	bf8c      	ite	hi
 8007652:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8007654:	3030      	addls	r0, #48	; 0x30
 8007656:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 8007658:	f3c3 1003 	ubfx	r0, r3, #4, #4
 800765c:	2809      	cmp	r0, #9
 800765e:	f003 030f 	and.w	r3, r3, #15
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007662:	bf8c      	ite	hi
 8007664:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8007666:	3030      	addls	r0, #48	; 0x30
    if (((value >> 28)) < 0xA)
 8007668:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800766a:	bf94      	ite	ls
 800766c:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800766e:	3337      	addhi	r3, #55	; 0x37
 8007670:	7413      	strb	r3, [r2, #16]
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8007672:	2300      	movs	r3, #0
    if (((value >> 28)) < 0xA)
 8007674:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
    pbuf[2 * idx + 1] = 0;
 8007678:	7453      	strb	r3, [r2, #17]
    if (((value >> 28)) < 0xA)
 800767a:	ea4f 7311 	mov.w	r3, r1, lsr #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800767e:	bf2c      	ite	cs
 8007680:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8007682:	3330      	addcc	r3, #48	; 0x30
 8007684:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 8007686:	f3c1 6303 	ubfx	r3, r1, #24, #4
 800768a:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800768c:	bf8c      	ite	hi
 800768e:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8007690:	3330      	addls	r3, #48	; 0x30
 8007692:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 8007694:	f3c1 5303 	ubfx	r3, r1, #20, #4
 8007698:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 800769a:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800769e:	bf8c      	ite	hi
 80076a0:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80076a2:	3330      	addls	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 80076a4:	f882 c003 	strb.w	ip, [r2, #3]
 80076a8:	f04f 0c00 	mov.w	ip, #0
 80076ac:	f882 c005 	strb.w	ip, [r2, #5]
      pbuf[2 * idx] = (value >> 28) + '0';
 80076b0:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 80076b2:	f04f 0c00 	mov.w	ip, #0
 80076b6:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 80076b8:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 80076ba:	f3c1 4303 	ubfx	r3, r1, #16, #4
 80076be:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 80076c0:	f882 c007 	strb.w	ip, [r2, #7]
 80076c4:	73d0      	strb	r0, [r2, #15]
 80076c6:	f04f 0c00 	mov.w	ip, #0
 80076ca:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 80076ce:	bf94      	ite	ls
 80076d0:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076d2:	3337      	addhi	r3, #55	; 0x37
    pbuf[2 * idx + 1] = 0;
 80076d4:	f882 c009 	strb.w	ip, [r2, #9]
 80076d8:	74d0      	strb	r0, [r2, #19]
 80076da:	f04f 0c00 	mov.w	ip, #0
 80076de:	2000      	movs	r0, #0
 80076e0:	f882 c00b 	strb.w	ip, [r2, #11]
 80076e4:	7550      	strb	r0, [r2, #21]
 80076e6:	f04f 0c00 	mov.w	ip, #0
 80076ea:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076ec:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 80076ee:	2300      	movs	r3, #0
 80076f0:	75d0      	strb	r0, [r2, #23]
 80076f2:	f882 c00d 	strb.w	ip, [r2, #13]
}
 80076f6:	4802      	ldr	r0, [pc, #8]	; (8007700 <USBD_CDC_SerialStrDescriptor+0x11c>)
    pbuf[2 * idx + 1] = 0;
 80076f8:	7653      	strb	r3, [r2, #25]
}
 80076fa:	4770      	bx	lr
 80076fc:	1fff7000 	.word	0x1fff7000
 8007700:	200000ec 	.word	0x200000ec
 8007704:	00000000 	.word	0x00000000

08007708 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007708:	b510      	push	{r4, lr}
 800770a:	4604      	mov	r4, r0
 800770c:	b09c      	sub	sp, #112	; 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800770e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007710:	2250      	movs	r2, #80	; 0x50
 8007712:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007714:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8007718:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800771c:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800771e:	f000 fa09 	bl	8007b34 <memset>
  if(pcdHandle->Instance==USB)
 8007722:	4b2b      	ldr	r3, [pc, #172]	; (80077d0 <HAL_PCD_MspInit+0xc8>)
 8007724:	6822      	ldr	r2, [r4, #0]
 8007726:	429a      	cmp	r2, r3
 8007728:	d001      	beq.n	800772e <HAL_PCD_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800772a:	b01c      	add	sp, #112	; 0x70
 800772c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800772e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 80077b8 <HAL_PCD_MspInit+0xb0>
 8007732:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007736:	ed9f 7b22 	vldr	d7, [pc, #136]	; 80077c0 <HAL_PCD_MspInit+0xb8>
 800773a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800773e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 80077c8 <HAL_PCD_MspInit+0xc0>
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8007742:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007746:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007748:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800774c:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800774e:	f7fd fc9d 	bl	800508c <HAL_RCCEx_PeriphCLKConfig>
 8007752:	bb68      	cbnz	r0, 80077b0 <HAL_PCD_MspInit+0xa8>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007754:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007758:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800775c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800775e:	f043 0301 	orr.w	r3, r3, #1
 8007762:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007764:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007766:	f003 0301 	and.w	r3, r3, #1
 800776a:	9301      	str	r3, [sp, #4]
 800776c:	2302      	movs	r3, #2
 800776e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007772:	2200      	movs	r2, #0
 8007774:	2300      	movs	r3, #0
 8007776:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800777a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800777c:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800777e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  (void)tmpreg;
 8007782:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8007784:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007786:	f7fb fdcf 	bl	8003328 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 800778a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800778c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007790:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8007792:	6da3      	ldr	r3, [r4, #88]	; 0x58
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8007794:	2200      	movs	r2, #0
 8007796:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800779a:	9300      	str	r3, [sp, #0]
 800779c:	4611      	mov	r1, r2
 800779e:	2014      	movs	r0, #20
  (void)tmpreg;
 80077a0:	9b00      	ldr	r3, [sp, #0]
 80077a2:	f7fb fd5b 	bl	800325c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80077a6:	2014      	movs	r0, #20
 80077a8:	f7fb fd96 	bl	80032d8 <HAL_NVIC_EnableIRQ>
}
 80077ac:	b01c      	add	sp, #112	; 0x70
 80077ae:	bd10      	pop	{r4, pc}
      Error_Handler();
 80077b0:	f7fb fbb0 	bl	8002f14 <Error_Handler>
 80077b4:	e7ce      	b.n	8007754 <HAL_PCD_MspInit+0x4c>
 80077b6:	bf00      	nop
 80077b8:	00000100 	.word	0x00000100
 80077bc:	00000018 	.word	0x00000018
 80077c0:	00020000 	.word	0x00020000
 80077c4:	02000000 	.word	0x02000000
 80077c8:	20000000 	.word	0x20000000
 80077cc:	01000000 	.word	0x01000000
 80077d0:	40006800 	.word	0x40006800

080077d4 <HAL_PCD_SetupStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80077d4:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 80077d8:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 80077dc:	f7ff b908 	b.w	80069f0 <USBD_LL_SetupStage>

080077e0 <HAL_PCD_DataOutStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80077e0:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80077e4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80077e8:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 80077ec:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80077f0:	f7ff b92e 	b.w	8006a50 <USBD_LL_DataOutStage>

080077f4 <HAL_PCD_DataInStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80077f4:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80077f8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80077fc:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8007800:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007802:	f7ff b95f 	b.w	8006ac4 <USBD_LL_DataInStage>
 8007806:	bf00      	nop

08007808 <HAL_PCD_SOFCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007808:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800780c:	f7ff ba00 	b.w	8006c10 <USBD_LL_SOF>

08007810 <HAL_PCD_ResetCallback>:
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007810:	6883      	ldr	r3, [r0, #8]
 8007812:	2b02      	cmp	r3, #2
{
 8007814:	b510      	push	{r4, lr}
 8007816:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007818:	d001      	beq.n	800781e <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 800781a:	f7fb fb7b 	bl	8002f14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800781e:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 8007822:	2101      	movs	r1, #1
 8007824:	f7ff f9d6 	bl	8006bd4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007828:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800782c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007830:	f7ff b9a2 	b.w	8006b78 <USBD_LL_Reset>

08007834 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007834:	b510      	push	{r4, lr}
 8007836:	4604      	mov	r4, r0
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007838:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800783c:	f7ff f9ce 	bl	8006bdc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007840:	69a3      	ldr	r3, [r4, #24]
 8007842:	b123      	cbz	r3, 800784e <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007844:	4a02      	ldr	r2, [pc, #8]	; (8007850 <HAL_PCD_SuspendCallback+0x1c>)
 8007846:	6913      	ldr	r3, [r2, #16]
 8007848:	f043 0306 	orr.w	r3, r3, #6
 800784c:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800784e:	bd10      	pop	{r4, pc}
 8007850:	e000ed00 	.word	0xe000ed00

08007854 <HAL_PCD_ResumeCallback>:
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007854:	6983      	ldr	r3, [r0, #24]
{
 8007856:	b510      	push	{r4, lr}
 8007858:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 800785a:	b92b      	cbnz	r3, 8007868 <HAL_PCD_ResumeCallback+0x14>
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    SystemClockConfig_Resume();
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800785c:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8007860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007864:	f7ff b9c8 	b.w	8006bf8 <USBD_LL_Resume>
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007868:	4a06      	ldr	r2, [pc, #24]	; (8007884 <HAL_PCD_ResumeCallback+0x30>)
 800786a:	6913      	ldr	r3, [r2, #16]
 800786c:	f023 0306 	bic.w	r3, r3, #6
 8007870:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 8007872:	f7fb f9a1 	bl	8002bb8 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007876:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
}
 800787a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800787e:	f7ff b9bb 	b.w	8006bf8 <USBD_LL_Resume>
 8007882:	bf00      	nop
 8007884:	e000ed00 	.word	0xe000ed00

08007888 <USBD_LL_Init>:
{
 8007888:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_FS.pData = pdev;
 800788a:	4d23      	ldr	r5, [pc, #140]	; (8007918 <USBD_LL_Init+0x90>)
 800788c:	f8c5 02f0 	str.w	r0, [r5, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 8007890:	f8c0 52c8 	str.w	r5, [r0, #712]	; 0x2c8
{
 8007894:	4604      	mov	r4, r0
  HAL_PWREx_EnableVddUSB();
 8007896:	f7fc fe5f 	bl	8004558 <HAL_PWREx_EnableVddUSB>
  hpcd_USB_FS.Instance = USB;
 800789a:	4920      	ldr	r1, [pc, #128]	; (800791c <USBD_LL_Init+0x94>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800789c:	2308      	movs	r3, #8
 800789e:	e9c5 1300 	strd	r1, r3, [r5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80078a2:	2002      	movs	r0, #2
 80078a4:	2100      	movs	r1, #0
 80078a6:	e9c5 0104 	strd	r0, r1, [r5, #16]
 80078aa:	2000      	movs	r0, #0
 80078ac:	2100      	movs	r1, #0
 80078ae:	e9c5 0106 	strd	r0, r1, [r5, #24]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80078b2:	2202      	movs	r2, #2
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80078b4:	2300      	movs	r3, #0
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80078b6:	4628      	mov	r0, r5
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80078b8:	60aa      	str	r2, [r5, #8]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80078ba:	622b      	str	r3, [r5, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80078bc:	f7fb febc 	bl	8003638 <HAL_PCD_Init>
 80078c0:	bb30      	cbnz	r0, 8007910 <USBD_LL_Init+0x88>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80078c2:	2200      	movs	r2, #0
 80078c4:	4611      	mov	r1, r2
 80078c6:	f8d4 02c8 	ldr.w	r0, [r4, #712]	; 0x2c8
 80078ca:	2318      	movs	r3, #24
 80078cc:	f7fc fdfe 	bl	80044cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80078d0:	f8d4 02c8 	ldr.w	r0, [r4, #712]	; 0x2c8
 80078d4:	2358      	movs	r3, #88	; 0x58
 80078d6:	2200      	movs	r2, #0
 80078d8:	2180      	movs	r1, #128	; 0x80
 80078da:	f7fc fdf7 	bl	80044cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80078de:	f8d4 02c8 	ldr.w	r0, [r4, #712]	; 0x2c8
 80078e2:	23c0      	movs	r3, #192	; 0xc0
 80078e4:	2200      	movs	r2, #0
 80078e6:	2181      	movs	r1, #129	; 0x81
 80078e8:	f7fc fdf0 	bl	80044cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80078ec:	f8d4 02c8 	ldr.w	r0, [r4, #712]	; 0x2c8
 80078f0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80078f4:	2200      	movs	r2, #0
 80078f6:	2101      	movs	r1, #1
 80078f8:	f7fc fde8 	bl	80044cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80078fc:	f8d4 02c8 	ldr.w	r0, [r4, #712]	; 0x2c8
 8007900:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007904:	2200      	movs	r2, #0
 8007906:	2182      	movs	r1, #130	; 0x82
 8007908:	f7fc fde0 	bl	80044cc <HAL_PCDEx_PMAConfig>
}
 800790c:	2000      	movs	r0, #0
 800790e:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 8007910:	f7fb fb00 	bl	8002f14 <Error_Handler>
 8007914:	e7d5      	b.n	80078c2 <USBD_LL_Init+0x3a>
 8007916:	bf00      	nop
 8007918:	20004268 	.word	0x20004268
 800791c:	40006800 	.word	0x40006800

08007920 <USBD_LL_Start>:
{
 8007920:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8007922:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8007926:	f7fb feef 	bl	8003708 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800792a:	2803      	cmp	r0, #3
 800792c:	bf96      	itet	ls
 800792e:	4b02      	ldrls	r3, [pc, #8]	; (8007938 <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 8007930:	2003      	movhi	r0, #3
 8007932:	5c18      	ldrbls	r0, [r3, r0]
}
 8007934:	bd08      	pop	{r3, pc}
 8007936:	bf00      	nop
 8007938:	0800de5c 	.word	0x0800de5c

0800793c <USBD_LL_OpenEP>:
{
 800793c:	4694      	mov	ip, r2
 800793e:	b508      	push	{r3, lr}
 8007940:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007942:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8007946:	4663      	mov	r3, ip
 8007948:	f7fc fc9c 	bl	8004284 <HAL_PCD_EP_Open>
  switch (hal_status)
 800794c:	2803      	cmp	r0, #3
 800794e:	bf96      	itet	ls
 8007950:	4b01      	ldrls	r3, [pc, #4]	; (8007958 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007952:	2003      	movhi	r0, #3
 8007954:	5c18      	ldrbls	r0, [r3, r0]
}
 8007956:	bd08      	pop	{r3, pc}
 8007958:	0800de5c 	.word	0x0800de5c

0800795c <USBD_LL_CloseEP>:
{
 800795c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800795e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8007962:	f7fc fcc7 	bl	80042f4 <HAL_PCD_EP_Close>
  switch (hal_status)
 8007966:	2803      	cmp	r0, #3
 8007968:	bf96      	itet	ls
 800796a:	4b02      	ldrls	r3, [pc, #8]	; (8007974 <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800796c:	2003      	movhi	r0, #3
 800796e:	5c18      	ldrbls	r0, [r3, r0]
}
 8007970:	bd08      	pop	{r3, pc}
 8007972:	bf00      	nop
 8007974:	0800de5c 	.word	0x0800de5c

08007978 <USBD_LL_StallEP>:
{
 8007978:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800797a:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 800797e:	f7fc fd31 	bl	80043e4 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8007982:	2803      	cmp	r0, #3
 8007984:	bf96      	itet	ls
 8007986:	4b02      	ldrls	r3, [pc, #8]	; (8007990 <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007988:	2003      	movhi	r0, #3
 800798a:	5c18      	ldrbls	r0, [r3, r0]
}
 800798c:	bd08      	pop	{r3, pc}
 800798e:	bf00      	nop
 8007990:	0800de5c 	.word	0x0800de5c

08007994 <USBD_LL_ClearStallEP>:
{
 8007994:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007996:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 800799a:	f7fc fd5b 	bl	8004454 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 800799e:	2803      	cmp	r0, #3
 80079a0:	bf96      	itet	ls
 80079a2:	4b02      	ldrls	r3, [pc, #8]	; (80079ac <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80079a4:	2003      	movhi	r0, #3
 80079a6:	5c18      	ldrbls	r0, [r3, r0]
}
 80079a8:	bd08      	pop	{r3, pc}
 80079aa:	bf00      	nop
 80079ac:	0800de5c 	.word	0x0800de5c

080079b0 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 80079b0:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80079b2:	f8d0 32c8 	ldr.w	r3, [r0, #712]	; 0x2c8
  if((ep_addr & 0x80) == 0x80)
 80079b6:	d406      	bmi.n	80079c6 <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80079b8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80079bc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80079c0:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 80079c4:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80079c6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80079ca:	3101      	adds	r1, #1
 80079cc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80079d0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80079d4:	7888      	ldrb	r0, [r1, #2]
 80079d6:	4770      	bx	lr

080079d8 <USBD_LL_SetUSBAddress>:
{
 80079d8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80079da:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 80079de:	f7fc fc3d 	bl	800425c <HAL_PCD_SetAddress>
  switch (hal_status)
 80079e2:	2803      	cmp	r0, #3
 80079e4:	bf96      	itet	ls
 80079e6:	4b02      	ldrls	r3, [pc, #8]	; (80079f0 <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80079e8:	2003      	movhi	r0, #3
 80079ea:	5c18      	ldrbls	r0, [r3, r0]
}
 80079ec:	bd08      	pop	{r3, pc}
 80079ee:	bf00      	nop
 80079f0:	0800de5c 	.word	0x0800de5c

080079f4 <USBD_LL_Transmit>:
{
 80079f4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80079f6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 80079fa:	f7fc fccf 	bl	800439c <HAL_PCD_EP_Transmit>
  switch (hal_status)
 80079fe:	2803      	cmp	r0, #3
 8007a00:	bf96      	itet	ls
 8007a02:	4b02      	ldrls	r3, [pc, #8]	; (8007a0c <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007a04:	2003      	movhi	r0, #3
 8007a06:	5c18      	ldrbls	r0, [r3, r0]
}
 8007a08:	bd08      	pop	{r3, pc}
 8007a0a:	bf00      	nop
 8007a0c:	0800de5c 	.word	0x0800de5c

08007a10 <USBD_LL_PrepareReceive>:
{
 8007a10:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007a12:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8007a16:	f7fc fc9d 	bl	8004354 <HAL_PCD_EP_Receive>
  switch (hal_status)
 8007a1a:	2803      	cmp	r0, #3
 8007a1c:	bf96      	itet	ls
 8007a1e:	4b02      	ldrls	r3, [pc, #8]	; (8007a28 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007a20:	2003      	movhi	r0, #3
 8007a22:	5c18      	ldrbls	r0, [r3, r0]
}
 8007a24:	bd08      	pop	{r3, pc}
 8007a26:	bf00      	nop
 8007a28:	0800de5c 	.word	0x0800de5c

08007a2c <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007a2c:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8007a30:	f7fc bcaa 	b.w	8004388 <HAL_PCD_EP_GetRxCount>

08007a34 <HAL_PCDEx_LPM_Callback>:
{
 8007a34:	b510      	push	{r4, lr}
 8007a36:	4604      	mov	r4, r0
  switch (msg)
 8007a38:	b169      	cbz	r1, 8007a56 <HAL_PCDEx_LPM_Callback+0x22>
 8007a3a:	2901      	cmp	r1, #1
 8007a3c:	d10a      	bne.n	8007a54 <HAL_PCDEx_LPM_Callback+0x20>
    USBD_LL_Suspend(hpcd->pData);
 8007a3e:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8007a42:	f7ff f8cb 	bl	8006bdc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007a46:	69a3      	ldr	r3, [r4, #24]
 8007a48:	b123      	cbz	r3, 8007a54 <HAL_PCDEx_LPM_Callback+0x20>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a4a:	4a0d      	ldr	r2, [pc, #52]	; (8007a80 <HAL_PCDEx_LPM_Callback+0x4c>)
 8007a4c:	6913      	ldr	r3, [r2, #16]
 8007a4e:	f043 0306 	orr.w	r3, r3, #6
 8007a52:	6113      	str	r3, [r2, #16]
}
 8007a54:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8007a56:	6983      	ldr	r3, [r0, #24]
 8007a58:	b92b      	cbnz	r3, 8007a66 <HAL_PCDEx_LPM_Callback+0x32>
    USBD_LL_Resume(hpcd->pData);
 8007a5a:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
}
 8007a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 8007a62:	f7ff b8c9 	b.w	8006bf8 <USBD_LL_Resume>
  SystemClock_Config();
 8007a66:	f7fb f8a7 	bl	8002bb8 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a6a:	4a05      	ldr	r2, [pc, #20]	; (8007a80 <HAL_PCDEx_LPM_Callback+0x4c>)
    USBD_LL_Resume(hpcd->pData);
 8007a6c:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a70:	6913      	ldr	r3, [r2, #16]
 8007a72:	f023 0306 	bic.w	r3, r3, #6
}
 8007a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a7a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8007a7c:	f7ff b8bc 	b.w	8006bf8 <USBD_LL_Resume>
 8007a80:	e000ed00 	.word	0xe000ed00

08007a84 <USBD_static_malloc>:
}
 8007a84:	4800      	ldr	r0, [pc, #0]	; (8007a88 <USBD_static_malloc+0x4>)
 8007a86:	4770      	bx	lr
 8007a88:	2000455c 	.word	0x2000455c

08007a8c <USBD_static_free>:
}
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop

08007a90 <__errno>:
 8007a90:	4b01      	ldr	r3, [pc, #4]	; (8007a98 <__errno+0x8>)
 8007a92:	6818      	ldr	r0, [r3, #0]
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop
 8007a98:	20000108 	.word	0x20000108

08007a9c <__libc_init_array>:
 8007a9c:	b570      	push	{r4, r5, r6, lr}
 8007a9e:	4d0d      	ldr	r5, [pc, #52]	; (8007ad4 <__libc_init_array+0x38>)
 8007aa0:	4c0d      	ldr	r4, [pc, #52]	; (8007ad8 <__libc_init_array+0x3c>)
 8007aa2:	1b64      	subs	r4, r4, r5
 8007aa4:	10a4      	asrs	r4, r4, #2
 8007aa6:	2600      	movs	r6, #0
 8007aa8:	42a6      	cmp	r6, r4
 8007aaa:	d109      	bne.n	8007ac0 <__libc_init_array+0x24>
 8007aac:	4d0b      	ldr	r5, [pc, #44]	; (8007adc <__libc_init_array+0x40>)
 8007aae:	4c0c      	ldr	r4, [pc, #48]	; (8007ae0 <__libc_init_array+0x44>)
 8007ab0:	f004 fc90 	bl	800c3d4 <_init>
 8007ab4:	1b64      	subs	r4, r4, r5
 8007ab6:	10a4      	asrs	r4, r4, #2
 8007ab8:	2600      	movs	r6, #0
 8007aba:	42a6      	cmp	r6, r4
 8007abc:	d105      	bne.n	8007aca <__libc_init_array+0x2e>
 8007abe:	bd70      	pop	{r4, r5, r6, pc}
 8007ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ac4:	4798      	blx	r3
 8007ac6:	3601      	adds	r6, #1
 8007ac8:	e7ee      	b.n	8007aa8 <__libc_init_array+0xc>
 8007aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ace:	4798      	blx	r3
 8007ad0:	3601      	adds	r6, #1
 8007ad2:	e7f2      	b.n	8007aba <__libc_init_array+0x1e>
 8007ad4:	0800e304 	.word	0x0800e304
 8007ad8:	0800e304 	.word	0x0800e304
 8007adc:	0800e304 	.word	0x0800e304
 8007ae0:	0800e308 	.word	0x0800e308

08007ae4 <memcpy>:
 8007ae4:	440a      	add	r2, r1
 8007ae6:	4291      	cmp	r1, r2
 8007ae8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007aec:	d100      	bne.n	8007af0 <memcpy+0xc>
 8007aee:	4770      	bx	lr
 8007af0:	b510      	push	{r4, lr}
 8007af2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007af6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007afa:	4291      	cmp	r1, r2
 8007afc:	d1f9      	bne.n	8007af2 <memcpy+0xe>
 8007afe:	bd10      	pop	{r4, pc}

08007b00 <memmove>:
 8007b00:	4288      	cmp	r0, r1
 8007b02:	b510      	push	{r4, lr}
 8007b04:	eb01 0402 	add.w	r4, r1, r2
 8007b08:	d902      	bls.n	8007b10 <memmove+0x10>
 8007b0a:	4284      	cmp	r4, r0
 8007b0c:	4623      	mov	r3, r4
 8007b0e:	d807      	bhi.n	8007b20 <memmove+0x20>
 8007b10:	1e43      	subs	r3, r0, #1
 8007b12:	42a1      	cmp	r1, r4
 8007b14:	d008      	beq.n	8007b28 <memmove+0x28>
 8007b16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b1e:	e7f8      	b.n	8007b12 <memmove+0x12>
 8007b20:	4402      	add	r2, r0
 8007b22:	4601      	mov	r1, r0
 8007b24:	428a      	cmp	r2, r1
 8007b26:	d100      	bne.n	8007b2a <memmove+0x2a>
 8007b28:	bd10      	pop	{r4, pc}
 8007b2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b32:	e7f7      	b.n	8007b24 <memmove+0x24>

08007b34 <memset>:
 8007b34:	4402      	add	r2, r0
 8007b36:	4603      	mov	r3, r0
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d100      	bne.n	8007b3e <memset+0xa>
 8007b3c:	4770      	bx	lr
 8007b3e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b42:	e7f9      	b.n	8007b38 <memset+0x4>

08007b44 <__cvt>:
 8007b44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b48:	ec55 4b10 	vmov	r4, r5, d0
 8007b4c:	2d00      	cmp	r5, #0
 8007b4e:	460e      	mov	r6, r1
 8007b50:	4619      	mov	r1, r3
 8007b52:	462b      	mov	r3, r5
 8007b54:	bfbb      	ittet	lt
 8007b56:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007b5a:	461d      	movlt	r5, r3
 8007b5c:	2300      	movge	r3, #0
 8007b5e:	232d      	movlt	r3, #45	; 0x2d
 8007b60:	700b      	strb	r3, [r1, #0]
 8007b62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b64:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007b68:	4691      	mov	r9, r2
 8007b6a:	f023 0820 	bic.w	r8, r3, #32
 8007b6e:	bfbc      	itt	lt
 8007b70:	4622      	movlt	r2, r4
 8007b72:	4614      	movlt	r4, r2
 8007b74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b78:	d005      	beq.n	8007b86 <__cvt+0x42>
 8007b7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007b7e:	d100      	bne.n	8007b82 <__cvt+0x3e>
 8007b80:	3601      	adds	r6, #1
 8007b82:	2102      	movs	r1, #2
 8007b84:	e000      	b.n	8007b88 <__cvt+0x44>
 8007b86:	2103      	movs	r1, #3
 8007b88:	ab03      	add	r3, sp, #12
 8007b8a:	9301      	str	r3, [sp, #4]
 8007b8c:	ab02      	add	r3, sp, #8
 8007b8e:	9300      	str	r3, [sp, #0]
 8007b90:	ec45 4b10 	vmov	d0, r4, r5
 8007b94:	4653      	mov	r3, sl
 8007b96:	4632      	mov	r2, r6
 8007b98:	f001 fdae 	bl	80096f8 <_dtoa_r>
 8007b9c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007ba0:	4607      	mov	r7, r0
 8007ba2:	d102      	bne.n	8007baa <__cvt+0x66>
 8007ba4:	f019 0f01 	tst.w	r9, #1
 8007ba8:	d022      	beq.n	8007bf0 <__cvt+0xac>
 8007baa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007bae:	eb07 0906 	add.w	r9, r7, r6
 8007bb2:	d110      	bne.n	8007bd6 <__cvt+0x92>
 8007bb4:	783b      	ldrb	r3, [r7, #0]
 8007bb6:	2b30      	cmp	r3, #48	; 0x30
 8007bb8:	d10a      	bne.n	8007bd0 <__cvt+0x8c>
 8007bba:	2200      	movs	r2, #0
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	4629      	mov	r1, r5
 8007bc2:	f7f8 ff59 	bl	8000a78 <__aeabi_dcmpeq>
 8007bc6:	b918      	cbnz	r0, 8007bd0 <__cvt+0x8c>
 8007bc8:	f1c6 0601 	rsb	r6, r6, #1
 8007bcc:	f8ca 6000 	str.w	r6, [sl]
 8007bd0:	f8da 3000 	ldr.w	r3, [sl]
 8007bd4:	4499      	add	r9, r3
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	2300      	movs	r3, #0
 8007bda:	4620      	mov	r0, r4
 8007bdc:	4629      	mov	r1, r5
 8007bde:	f7f8 ff4b 	bl	8000a78 <__aeabi_dcmpeq>
 8007be2:	b108      	cbz	r0, 8007be8 <__cvt+0xa4>
 8007be4:	f8cd 900c 	str.w	r9, [sp, #12]
 8007be8:	2230      	movs	r2, #48	; 0x30
 8007bea:	9b03      	ldr	r3, [sp, #12]
 8007bec:	454b      	cmp	r3, r9
 8007bee:	d307      	bcc.n	8007c00 <__cvt+0xbc>
 8007bf0:	9b03      	ldr	r3, [sp, #12]
 8007bf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bf4:	1bdb      	subs	r3, r3, r7
 8007bf6:	4638      	mov	r0, r7
 8007bf8:	6013      	str	r3, [r2, #0]
 8007bfa:	b004      	add	sp, #16
 8007bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c00:	1c59      	adds	r1, r3, #1
 8007c02:	9103      	str	r1, [sp, #12]
 8007c04:	701a      	strb	r2, [r3, #0]
 8007c06:	e7f0      	b.n	8007bea <__cvt+0xa6>

08007c08 <__exponent>:
 8007c08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2900      	cmp	r1, #0
 8007c0e:	bfb8      	it	lt
 8007c10:	4249      	neglt	r1, r1
 8007c12:	f803 2b02 	strb.w	r2, [r3], #2
 8007c16:	bfb4      	ite	lt
 8007c18:	222d      	movlt	r2, #45	; 0x2d
 8007c1a:	222b      	movge	r2, #43	; 0x2b
 8007c1c:	2909      	cmp	r1, #9
 8007c1e:	7042      	strb	r2, [r0, #1]
 8007c20:	dd2a      	ble.n	8007c78 <__exponent+0x70>
 8007c22:	f10d 0407 	add.w	r4, sp, #7
 8007c26:	46a4      	mov	ip, r4
 8007c28:	270a      	movs	r7, #10
 8007c2a:	46a6      	mov	lr, r4
 8007c2c:	460a      	mov	r2, r1
 8007c2e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007c32:	fb07 1516 	mls	r5, r7, r6, r1
 8007c36:	3530      	adds	r5, #48	; 0x30
 8007c38:	2a63      	cmp	r2, #99	; 0x63
 8007c3a:	f104 34ff 	add.w	r4, r4, #4294967295
 8007c3e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007c42:	4631      	mov	r1, r6
 8007c44:	dcf1      	bgt.n	8007c2a <__exponent+0x22>
 8007c46:	3130      	adds	r1, #48	; 0x30
 8007c48:	f1ae 0502 	sub.w	r5, lr, #2
 8007c4c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007c50:	1c44      	adds	r4, r0, #1
 8007c52:	4629      	mov	r1, r5
 8007c54:	4561      	cmp	r1, ip
 8007c56:	d30a      	bcc.n	8007c6e <__exponent+0x66>
 8007c58:	f10d 0209 	add.w	r2, sp, #9
 8007c5c:	eba2 020e 	sub.w	r2, r2, lr
 8007c60:	4565      	cmp	r5, ip
 8007c62:	bf88      	it	hi
 8007c64:	2200      	movhi	r2, #0
 8007c66:	4413      	add	r3, r2
 8007c68:	1a18      	subs	r0, r3, r0
 8007c6a:	b003      	add	sp, #12
 8007c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c72:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007c76:	e7ed      	b.n	8007c54 <__exponent+0x4c>
 8007c78:	2330      	movs	r3, #48	; 0x30
 8007c7a:	3130      	adds	r1, #48	; 0x30
 8007c7c:	7083      	strb	r3, [r0, #2]
 8007c7e:	70c1      	strb	r1, [r0, #3]
 8007c80:	1d03      	adds	r3, r0, #4
 8007c82:	e7f1      	b.n	8007c68 <__exponent+0x60>

08007c84 <_printf_float>:
 8007c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c88:	ed2d 8b02 	vpush	{d8}
 8007c8c:	b08d      	sub	sp, #52	; 0x34
 8007c8e:	460c      	mov	r4, r1
 8007c90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007c94:	4616      	mov	r6, r2
 8007c96:	461f      	mov	r7, r3
 8007c98:	4605      	mov	r5, r0
 8007c9a:	f002 fe8b 	bl	800a9b4 <_localeconv_r>
 8007c9e:	f8d0 a000 	ldr.w	sl, [r0]
 8007ca2:	4650      	mov	r0, sl
 8007ca4:	f7f8 fa6c 	bl	8000180 <strlen>
 8007ca8:	2300      	movs	r3, #0
 8007caa:	930a      	str	r3, [sp, #40]	; 0x28
 8007cac:	6823      	ldr	r3, [r4, #0]
 8007cae:	9305      	str	r3, [sp, #20]
 8007cb0:	f8d8 3000 	ldr.w	r3, [r8]
 8007cb4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007cb8:	3307      	adds	r3, #7
 8007cba:	f023 0307 	bic.w	r3, r3, #7
 8007cbe:	f103 0208 	add.w	r2, r3, #8
 8007cc2:	f8c8 2000 	str.w	r2, [r8]
 8007cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007cce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007cd2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007cd6:	9307      	str	r3, [sp, #28]
 8007cd8:	f8cd 8018 	str.w	r8, [sp, #24]
 8007cdc:	ee08 0a10 	vmov	s16, r0
 8007ce0:	4b9f      	ldr	r3, [pc, #636]	; (8007f60 <_printf_float+0x2dc>)
 8007ce2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8007cea:	f7f8 fef7 	bl	8000adc <__aeabi_dcmpun>
 8007cee:	bb88      	cbnz	r0, 8007d54 <_printf_float+0xd0>
 8007cf0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cf4:	4b9a      	ldr	r3, [pc, #616]	; (8007f60 <_printf_float+0x2dc>)
 8007cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8007cfa:	f7f8 fed1 	bl	8000aa0 <__aeabi_dcmple>
 8007cfe:	bb48      	cbnz	r0, 8007d54 <_printf_float+0xd0>
 8007d00:	2200      	movs	r2, #0
 8007d02:	2300      	movs	r3, #0
 8007d04:	4640      	mov	r0, r8
 8007d06:	4649      	mov	r1, r9
 8007d08:	f7f8 fec0 	bl	8000a8c <__aeabi_dcmplt>
 8007d0c:	b110      	cbz	r0, 8007d14 <_printf_float+0x90>
 8007d0e:	232d      	movs	r3, #45	; 0x2d
 8007d10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d14:	4b93      	ldr	r3, [pc, #588]	; (8007f64 <_printf_float+0x2e0>)
 8007d16:	4894      	ldr	r0, [pc, #592]	; (8007f68 <_printf_float+0x2e4>)
 8007d18:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007d1c:	bf94      	ite	ls
 8007d1e:	4698      	movls	r8, r3
 8007d20:	4680      	movhi	r8, r0
 8007d22:	2303      	movs	r3, #3
 8007d24:	6123      	str	r3, [r4, #16]
 8007d26:	9b05      	ldr	r3, [sp, #20]
 8007d28:	f023 0204 	bic.w	r2, r3, #4
 8007d2c:	6022      	str	r2, [r4, #0]
 8007d2e:	f04f 0900 	mov.w	r9, #0
 8007d32:	9700      	str	r7, [sp, #0]
 8007d34:	4633      	mov	r3, r6
 8007d36:	aa0b      	add	r2, sp, #44	; 0x2c
 8007d38:	4621      	mov	r1, r4
 8007d3a:	4628      	mov	r0, r5
 8007d3c:	f000 f9d8 	bl	80080f0 <_printf_common>
 8007d40:	3001      	adds	r0, #1
 8007d42:	f040 8090 	bne.w	8007e66 <_printf_float+0x1e2>
 8007d46:	f04f 30ff 	mov.w	r0, #4294967295
 8007d4a:	b00d      	add	sp, #52	; 0x34
 8007d4c:	ecbd 8b02 	vpop	{d8}
 8007d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d54:	4642      	mov	r2, r8
 8007d56:	464b      	mov	r3, r9
 8007d58:	4640      	mov	r0, r8
 8007d5a:	4649      	mov	r1, r9
 8007d5c:	f7f8 febe 	bl	8000adc <__aeabi_dcmpun>
 8007d60:	b140      	cbz	r0, 8007d74 <_printf_float+0xf0>
 8007d62:	464b      	mov	r3, r9
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	bfbc      	itt	lt
 8007d68:	232d      	movlt	r3, #45	; 0x2d
 8007d6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d6e:	487f      	ldr	r0, [pc, #508]	; (8007f6c <_printf_float+0x2e8>)
 8007d70:	4b7f      	ldr	r3, [pc, #508]	; (8007f70 <_printf_float+0x2ec>)
 8007d72:	e7d1      	b.n	8007d18 <_printf_float+0x94>
 8007d74:	6863      	ldr	r3, [r4, #4]
 8007d76:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007d7a:	9206      	str	r2, [sp, #24]
 8007d7c:	1c5a      	adds	r2, r3, #1
 8007d7e:	d13f      	bne.n	8007e00 <_printf_float+0x17c>
 8007d80:	2306      	movs	r3, #6
 8007d82:	6063      	str	r3, [r4, #4]
 8007d84:	9b05      	ldr	r3, [sp, #20]
 8007d86:	6861      	ldr	r1, [r4, #4]
 8007d88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	9303      	str	r3, [sp, #12]
 8007d90:	ab0a      	add	r3, sp, #40	; 0x28
 8007d92:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007d96:	ab09      	add	r3, sp, #36	; 0x24
 8007d98:	ec49 8b10 	vmov	d0, r8, r9
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	6022      	str	r2, [r4, #0]
 8007da0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007da4:	4628      	mov	r0, r5
 8007da6:	f7ff fecd 	bl	8007b44 <__cvt>
 8007daa:	9b06      	ldr	r3, [sp, #24]
 8007dac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007dae:	2b47      	cmp	r3, #71	; 0x47
 8007db0:	4680      	mov	r8, r0
 8007db2:	d108      	bne.n	8007dc6 <_printf_float+0x142>
 8007db4:	1cc8      	adds	r0, r1, #3
 8007db6:	db02      	blt.n	8007dbe <_printf_float+0x13a>
 8007db8:	6863      	ldr	r3, [r4, #4]
 8007dba:	4299      	cmp	r1, r3
 8007dbc:	dd41      	ble.n	8007e42 <_printf_float+0x1be>
 8007dbe:	f1ab 0b02 	sub.w	fp, fp, #2
 8007dc2:	fa5f fb8b 	uxtb.w	fp, fp
 8007dc6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007dca:	d820      	bhi.n	8007e0e <_printf_float+0x18a>
 8007dcc:	3901      	subs	r1, #1
 8007dce:	465a      	mov	r2, fp
 8007dd0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007dd4:	9109      	str	r1, [sp, #36]	; 0x24
 8007dd6:	f7ff ff17 	bl	8007c08 <__exponent>
 8007dda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ddc:	1813      	adds	r3, r2, r0
 8007dde:	2a01      	cmp	r2, #1
 8007de0:	4681      	mov	r9, r0
 8007de2:	6123      	str	r3, [r4, #16]
 8007de4:	dc02      	bgt.n	8007dec <_printf_float+0x168>
 8007de6:	6822      	ldr	r2, [r4, #0]
 8007de8:	07d2      	lsls	r2, r2, #31
 8007dea:	d501      	bpl.n	8007df0 <_printf_float+0x16c>
 8007dec:	3301      	adds	r3, #1
 8007dee:	6123      	str	r3, [r4, #16]
 8007df0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d09c      	beq.n	8007d32 <_printf_float+0xae>
 8007df8:	232d      	movs	r3, #45	; 0x2d
 8007dfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dfe:	e798      	b.n	8007d32 <_printf_float+0xae>
 8007e00:	9a06      	ldr	r2, [sp, #24]
 8007e02:	2a47      	cmp	r2, #71	; 0x47
 8007e04:	d1be      	bne.n	8007d84 <_printf_float+0x100>
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1bc      	bne.n	8007d84 <_printf_float+0x100>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e7b9      	b.n	8007d82 <_printf_float+0xfe>
 8007e0e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007e12:	d118      	bne.n	8007e46 <_printf_float+0x1c2>
 8007e14:	2900      	cmp	r1, #0
 8007e16:	6863      	ldr	r3, [r4, #4]
 8007e18:	dd0b      	ble.n	8007e32 <_printf_float+0x1ae>
 8007e1a:	6121      	str	r1, [r4, #16]
 8007e1c:	b913      	cbnz	r3, 8007e24 <_printf_float+0x1a0>
 8007e1e:	6822      	ldr	r2, [r4, #0]
 8007e20:	07d0      	lsls	r0, r2, #31
 8007e22:	d502      	bpl.n	8007e2a <_printf_float+0x1a6>
 8007e24:	3301      	adds	r3, #1
 8007e26:	440b      	add	r3, r1
 8007e28:	6123      	str	r3, [r4, #16]
 8007e2a:	65a1      	str	r1, [r4, #88]	; 0x58
 8007e2c:	f04f 0900 	mov.w	r9, #0
 8007e30:	e7de      	b.n	8007df0 <_printf_float+0x16c>
 8007e32:	b913      	cbnz	r3, 8007e3a <_printf_float+0x1b6>
 8007e34:	6822      	ldr	r2, [r4, #0]
 8007e36:	07d2      	lsls	r2, r2, #31
 8007e38:	d501      	bpl.n	8007e3e <_printf_float+0x1ba>
 8007e3a:	3302      	adds	r3, #2
 8007e3c:	e7f4      	b.n	8007e28 <_printf_float+0x1a4>
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e7f2      	b.n	8007e28 <_printf_float+0x1a4>
 8007e42:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e48:	4299      	cmp	r1, r3
 8007e4a:	db05      	blt.n	8007e58 <_printf_float+0x1d4>
 8007e4c:	6823      	ldr	r3, [r4, #0]
 8007e4e:	6121      	str	r1, [r4, #16]
 8007e50:	07d8      	lsls	r0, r3, #31
 8007e52:	d5ea      	bpl.n	8007e2a <_printf_float+0x1a6>
 8007e54:	1c4b      	adds	r3, r1, #1
 8007e56:	e7e7      	b.n	8007e28 <_printf_float+0x1a4>
 8007e58:	2900      	cmp	r1, #0
 8007e5a:	bfd4      	ite	le
 8007e5c:	f1c1 0202 	rsble	r2, r1, #2
 8007e60:	2201      	movgt	r2, #1
 8007e62:	4413      	add	r3, r2
 8007e64:	e7e0      	b.n	8007e28 <_printf_float+0x1a4>
 8007e66:	6823      	ldr	r3, [r4, #0]
 8007e68:	055a      	lsls	r2, r3, #21
 8007e6a:	d407      	bmi.n	8007e7c <_printf_float+0x1f8>
 8007e6c:	6923      	ldr	r3, [r4, #16]
 8007e6e:	4642      	mov	r2, r8
 8007e70:	4631      	mov	r1, r6
 8007e72:	4628      	mov	r0, r5
 8007e74:	47b8      	blx	r7
 8007e76:	3001      	adds	r0, #1
 8007e78:	d12c      	bne.n	8007ed4 <_printf_float+0x250>
 8007e7a:	e764      	b.n	8007d46 <_printf_float+0xc2>
 8007e7c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e80:	f240 80e0 	bls.w	8008044 <_printf_float+0x3c0>
 8007e84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e88:	2200      	movs	r2, #0
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	f7f8 fdf4 	bl	8000a78 <__aeabi_dcmpeq>
 8007e90:	2800      	cmp	r0, #0
 8007e92:	d034      	beq.n	8007efe <_printf_float+0x27a>
 8007e94:	4a37      	ldr	r2, [pc, #220]	; (8007f74 <_printf_float+0x2f0>)
 8007e96:	2301      	movs	r3, #1
 8007e98:	4631      	mov	r1, r6
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	47b8      	blx	r7
 8007e9e:	3001      	adds	r0, #1
 8007ea0:	f43f af51 	beq.w	8007d46 <_printf_float+0xc2>
 8007ea4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	db02      	blt.n	8007eb2 <_printf_float+0x22e>
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	07d8      	lsls	r0, r3, #31
 8007eb0:	d510      	bpl.n	8007ed4 <_printf_float+0x250>
 8007eb2:	ee18 3a10 	vmov	r3, s16
 8007eb6:	4652      	mov	r2, sl
 8007eb8:	4631      	mov	r1, r6
 8007eba:	4628      	mov	r0, r5
 8007ebc:	47b8      	blx	r7
 8007ebe:	3001      	adds	r0, #1
 8007ec0:	f43f af41 	beq.w	8007d46 <_printf_float+0xc2>
 8007ec4:	f04f 0800 	mov.w	r8, #0
 8007ec8:	f104 091a 	add.w	r9, r4, #26
 8007ecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ece:	3b01      	subs	r3, #1
 8007ed0:	4543      	cmp	r3, r8
 8007ed2:	dc09      	bgt.n	8007ee8 <_printf_float+0x264>
 8007ed4:	6823      	ldr	r3, [r4, #0]
 8007ed6:	079b      	lsls	r3, r3, #30
 8007ed8:	f100 8105 	bmi.w	80080e6 <_printf_float+0x462>
 8007edc:	68e0      	ldr	r0, [r4, #12]
 8007ede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ee0:	4298      	cmp	r0, r3
 8007ee2:	bfb8      	it	lt
 8007ee4:	4618      	movlt	r0, r3
 8007ee6:	e730      	b.n	8007d4a <_printf_float+0xc6>
 8007ee8:	2301      	movs	r3, #1
 8007eea:	464a      	mov	r2, r9
 8007eec:	4631      	mov	r1, r6
 8007eee:	4628      	mov	r0, r5
 8007ef0:	47b8      	blx	r7
 8007ef2:	3001      	adds	r0, #1
 8007ef4:	f43f af27 	beq.w	8007d46 <_printf_float+0xc2>
 8007ef8:	f108 0801 	add.w	r8, r8, #1
 8007efc:	e7e6      	b.n	8007ecc <_printf_float+0x248>
 8007efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	dc39      	bgt.n	8007f78 <_printf_float+0x2f4>
 8007f04:	4a1b      	ldr	r2, [pc, #108]	; (8007f74 <_printf_float+0x2f0>)
 8007f06:	2301      	movs	r3, #1
 8007f08:	4631      	mov	r1, r6
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	47b8      	blx	r7
 8007f0e:	3001      	adds	r0, #1
 8007f10:	f43f af19 	beq.w	8007d46 <_printf_float+0xc2>
 8007f14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	d102      	bne.n	8007f22 <_printf_float+0x29e>
 8007f1c:	6823      	ldr	r3, [r4, #0]
 8007f1e:	07d9      	lsls	r1, r3, #31
 8007f20:	d5d8      	bpl.n	8007ed4 <_printf_float+0x250>
 8007f22:	ee18 3a10 	vmov	r3, s16
 8007f26:	4652      	mov	r2, sl
 8007f28:	4631      	mov	r1, r6
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	47b8      	blx	r7
 8007f2e:	3001      	adds	r0, #1
 8007f30:	f43f af09 	beq.w	8007d46 <_printf_float+0xc2>
 8007f34:	f04f 0900 	mov.w	r9, #0
 8007f38:	f104 0a1a 	add.w	sl, r4, #26
 8007f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f3e:	425b      	negs	r3, r3
 8007f40:	454b      	cmp	r3, r9
 8007f42:	dc01      	bgt.n	8007f48 <_printf_float+0x2c4>
 8007f44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f46:	e792      	b.n	8007e6e <_printf_float+0x1ea>
 8007f48:	2301      	movs	r3, #1
 8007f4a:	4652      	mov	r2, sl
 8007f4c:	4631      	mov	r1, r6
 8007f4e:	4628      	mov	r0, r5
 8007f50:	47b8      	blx	r7
 8007f52:	3001      	adds	r0, #1
 8007f54:	f43f aef7 	beq.w	8007d46 <_printf_float+0xc2>
 8007f58:	f109 0901 	add.w	r9, r9, #1
 8007f5c:	e7ee      	b.n	8007f3c <_printf_float+0x2b8>
 8007f5e:	bf00      	nop
 8007f60:	7fefffff 	.word	0x7fefffff
 8007f64:	0800de64 	.word	0x0800de64
 8007f68:	0800de68 	.word	0x0800de68
 8007f6c:	0800de70 	.word	0x0800de70
 8007f70:	0800de6c 	.word	0x0800de6c
 8007f74:	0800de74 	.word	0x0800de74
 8007f78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	bfa8      	it	ge
 8007f80:	461a      	movge	r2, r3
 8007f82:	2a00      	cmp	r2, #0
 8007f84:	4691      	mov	r9, r2
 8007f86:	dc37      	bgt.n	8007ff8 <_printf_float+0x374>
 8007f88:	f04f 0b00 	mov.w	fp, #0
 8007f8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f90:	f104 021a 	add.w	r2, r4, #26
 8007f94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f96:	9305      	str	r3, [sp, #20]
 8007f98:	eba3 0309 	sub.w	r3, r3, r9
 8007f9c:	455b      	cmp	r3, fp
 8007f9e:	dc33      	bgt.n	8008008 <_printf_float+0x384>
 8007fa0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	db3b      	blt.n	8008020 <_printf_float+0x39c>
 8007fa8:	6823      	ldr	r3, [r4, #0]
 8007faa:	07da      	lsls	r2, r3, #31
 8007fac:	d438      	bmi.n	8008020 <_printf_float+0x39c>
 8007fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fb0:	9a05      	ldr	r2, [sp, #20]
 8007fb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fb4:	1a9a      	subs	r2, r3, r2
 8007fb6:	eba3 0901 	sub.w	r9, r3, r1
 8007fba:	4591      	cmp	r9, r2
 8007fbc:	bfa8      	it	ge
 8007fbe:	4691      	movge	r9, r2
 8007fc0:	f1b9 0f00 	cmp.w	r9, #0
 8007fc4:	dc35      	bgt.n	8008032 <_printf_float+0x3ae>
 8007fc6:	f04f 0800 	mov.w	r8, #0
 8007fca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fce:	f104 0a1a 	add.w	sl, r4, #26
 8007fd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fd6:	1a9b      	subs	r3, r3, r2
 8007fd8:	eba3 0309 	sub.w	r3, r3, r9
 8007fdc:	4543      	cmp	r3, r8
 8007fde:	f77f af79 	ble.w	8007ed4 <_printf_float+0x250>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	4652      	mov	r2, sl
 8007fe6:	4631      	mov	r1, r6
 8007fe8:	4628      	mov	r0, r5
 8007fea:	47b8      	blx	r7
 8007fec:	3001      	adds	r0, #1
 8007fee:	f43f aeaa 	beq.w	8007d46 <_printf_float+0xc2>
 8007ff2:	f108 0801 	add.w	r8, r8, #1
 8007ff6:	e7ec      	b.n	8007fd2 <_printf_float+0x34e>
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	4631      	mov	r1, r6
 8007ffc:	4642      	mov	r2, r8
 8007ffe:	4628      	mov	r0, r5
 8008000:	47b8      	blx	r7
 8008002:	3001      	adds	r0, #1
 8008004:	d1c0      	bne.n	8007f88 <_printf_float+0x304>
 8008006:	e69e      	b.n	8007d46 <_printf_float+0xc2>
 8008008:	2301      	movs	r3, #1
 800800a:	4631      	mov	r1, r6
 800800c:	4628      	mov	r0, r5
 800800e:	9205      	str	r2, [sp, #20]
 8008010:	47b8      	blx	r7
 8008012:	3001      	adds	r0, #1
 8008014:	f43f ae97 	beq.w	8007d46 <_printf_float+0xc2>
 8008018:	9a05      	ldr	r2, [sp, #20]
 800801a:	f10b 0b01 	add.w	fp, fp, #1
 800801e:	e7b9      	b.n	8007f94 <_printf_float+0x310>
 8008020:	ee18 3a10 	vmov	r3, s16
 8008024:	4652      	mov	r2, sl
 8008026:	4631      	mov	r1, r6
 8008028:	4628      	mov	r0, r5
 800802a:	47b8      	blx	r7
 800802c:	3001      	adds	r0, #1
 800802e:	d1be      	bne.n	8007fae <_printf_float+0x32a>
 8008030:	e689      	b.n	8007d46 <_printf_float+0xc2>
 8008032:	9a05      	ldr	r2, [sp, #20]
 8008034:	464b      	mov	r3, r9
 8008036:	4442      	add	r2, r8
 8008038:	4631      	mov	r1, r6
 800803a:	4628      	mov	r0, r5
 800803c:	47b8      	blx	r7
 800803e:	3001      	adds	r0, #1
 8008040:	d1c1      	bne.n	8007fc6 <_printf_float+0x342>
 8008042:	e680      	b.n	8007d46 <_printf_float+0xc2>
 8008044:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008046:	2a01      	cmp	r2, #1
 8008048:	dc01      	bgt.n	800804e <_printf_float+0x3ca>
 800804a:	07db      	lsls	r3, r3, #31
 800804c:	d538      	bpl.n	80080c0 <_printf_float+0x43c>
 800804e:	2301      	movs	r3, #1
 8008050:	4642      	mov	r2, r8
 8008052:	4631      	mov	r1, r6
 8008054:	4628      	mov	r0, r5
 8008056:	47b8      	blx	r7
 8008058:	3001      	adds	r0, #1
 800805a:	f43f ae74 	beq.w	8007d46 <_printf_float+0xc2>
 800805e:	ee18 3a10 	vmov	r3, s16
 8008062:	4652      	mov	r2, sl
 8008064:	4631      	mov	r1, r6
 8008066:	4628      	mov	r0, r5
 8008068:	47b8      	blx	r7
 800806a:	3001      	adds	r0, #1
 800806c:	f43f ae6b 	beq.w	8007d46 <_printf_float+0xc2>
 8008070:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008074:	2200      	movs	r2, #0
 8008076:	2300      	movs	r3, #0
 8008078:	f7f8 fcfe 	bl	8000a78 <__aeabi_dcmpeq>
 800807c:	b9d8      	cbnz	r0, 80080b6 <_printf_float+0x432>
 800807e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008080:	f108 0201 	add.w	r2, r8, #1
 8008084:	3b01      	subs	r3, #1
 8008086:	4631      	mov	r1, r6
 8008088:	4628      	mov	r0, r5
 800808a:	47b8      	blx	r7
 800808c:	3001      	adds	r0, #1
 800808e:	d10e      	bne.n	80080ae <_printf_float+0x42a>
 8008090:	e659      	b.n	8007d46 <_printf_float+0xc2>
 8008092:	2301      	movs	r3, #1
 8008094:	4652      	mov	r2, sl
 8008096:	4631      	mov	r1, r6
 8008098:	4628      	mov	r0, r5
 800809a:	47b8      	blx	r7
 800809c:	3001      	adds	r0, #1
 800809e:	f43f ae52 	beq.w	8007d46 <_printf_float+0xc2>
 80080a2:	f108 0801 	add.w	r8, r8, #1
 80080a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080a8:	3b01      	subs	r3, #1
 80080aa:	4543      	cmp	r3, r8
 80080ac:	dcf1      	bgt.n	8008092 <_printf_float+0x40e>
 80080ae:	464b      	mov	r3, r9
 80080b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80080b4:	e6dc      	b.n	8007e70 <_printf_float+0x1ec>
 80080b6:	f04f 0800 	mov.w	r8, #0
 80080ba:	f104 0a1a 	add.w	sl, r4, #26
 80080be:	e7f2      	b.n	80080a6 <_printf_float+0x422>
 80080c0:	2301      	movs	r3, #1
 80080c2:	4642      	mov	r2, r8
 80080c4:	e7df      	b.n	8008086 <_printf_float+0x402>
 80080c6:	2301      	movs	r3, #1
 80080c8:	464a      	mov	r2, r9
 80080ca:	4631      	mov	r1, r6
 80080cc:	4628      	mov	r0, r5
 80080ce:	47b8      	blx	r7
 80080d0:	3001      	adds	r0, #1
 80080d2:	f43f ae38 	beq.w	8007d46 <_printf_float+0xc2>
 80080d6:	f108 0801 	add.w	r8, r8, #1
 80080da:	68e3      	ldr	r3, [r4, #12]
 80080dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080de:	1a5b      	subs	r3, r3, r1
 80080e0:	4543      	cmp	r3, r8
 80080e2:	dcf0      	bgt.n	80080c6 <_printf_float+0x442>
 80080e4:	e6fa      	b.n	8007edc <_printf_float+0x258>
 80080e6:	f04f 0800 	mov.w	r8, #0
 80080ea:	f104 0919 	add.w	r9, r4, #25
 80080ee:	e7f4      	b.n	80080da <_printf_float+0x456>

080080f0 <_printf_common>:
 80080f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080f4:	4616      	mov	r6, r2
 80080f6:	4699      	mov	r9, r3
 80080f8:	688a      	ldr	r2, [r1, #8]
 80080fa:	690b      	ldr	r3, [r1, #16]
 80080fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008100:	4293      	cmp	r3, r2
 8008102:	bfb8      	it	lt
 8008104:	4613      	movlt	r3, r2
 8008106:	6033      	str	r3, [r6, #0]
 8008108:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800810c:	4607      	mov	r7, r0
 800810e:	460c      	mov	r4, r1
 8008110:	b10a      	cbz	r2, 8008116 <_printf_common+0x26>
 8008112:	3301      	adds	r3, #1
 8008114:	6033      	str	r3, [r6, #0]
 8008116:	6823      	ldr	r3, [r4, #0]
 8008118:	0699      	lsls	r1, r3, #26
 800811a:	bf42      	ittt	mi
 800811c:	6833      	ldrmi	r3, [r6, #0]
 800811e:	3302      	addmi	r3, #2
 8008120:	6033      	strmi	r3, [r6, #0]
 8008122:	6825      	ldr	r5, [r4, #0]
 8008124:	f015 0506 	ands.w	r5, r5, #6
 8008128:	d106      	bne.n	8008138 <_printf_common+0x48>
 800812a:	f104 0a19 	add.w	sl, r4, #25
 800812e:	68e3      	ldr	r3, [r4, #12]
 8008130:	6832      	ldr	r2, [r6, #0]
 8008132:	1a9b      	subs	r3, r3, r2
 8008134:	42ab      	cmp	r3, r5
 8008136:	dc26      	bgt.n	8008186 <_printf_common+0x96>
 8008138:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800813c:	1e13      	subs	r3, r2, #0
 800813e:	6822      	ldr	r2, [r4, #0]
 8008140:	bf18      	it	ne
 8008142:	2301      	movne	r3, #1
 8008144:	0692      	lsls	r2, r2, #26
 8008146:	d42b      	bmi.n	80081a0 <_printf_common+0xb0>
 8008148:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800814c:	4649      	mov	r1, r9
 800814e:	4638      	mov	r0, r7
 8008150:	47c0      	blx	r8
 8008152:	3001      	adds	r0, #1
 8008154:	d01e      	beq.n	8008194 <_printf_common+0xa4>
 8008156:	6823      	ldr	r3, [r4, #0]
 8008158:	68e5      	ldr	r5, [r4, #12]
 800815a:	6832      	ldr	r2, [r6, #0]
 800815c:	f003 0306 	and.w	r3, r3, #6
 8008160:	2b04      	cmp	r3, #4
 8008162:	bf08      	it	eq
 8008164:	1aad      	subeq	r5, r5, r2
 8008166:	68a3      	ldr	r3, [r4, #8]
 8008168:	6922      	ldr	r2, [r4, #16]
 800816a:	bf0c      	ite	eq
 800816c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008170:	2500      	movne	r5, #0
 8008172:	4293      	cmp	r3, r2
 8008174:	bfc4      	itt	gt
 8008176:	1a9b      	subgt	r3, r3, r2
 8008178:	18ed      	addgt	r5, r5, r3
 800817a:	2600      	movs	r6, #0
 800817c:	341a      	adds	r4, #26
 800817e:	42b5      	cmp	r5, r6
 8008180:	d11a      	bne.n	80081b8 <_printf_common+0xc8>
 8008182:	2000      	movs	r0, #0
 8008184:	e008      	b.n	8008198 <_printf_common+0xa8>
 8008186:	2301      	movs	r3, #1
 8008188:	4652      	mov	r2, sl
 800818a:	4649      	mov	r1, r9
 800818c:	4638      	mov	r0, r7
 800818e:	47c0      	blx	r8
 8008190:	3001      	adds	r0, #1
 8008192:	d103      	bne.n	800819c <_printf_common+0xac>
 8008194:	f04f 30ff 	mov.w	r0, #4294967295
 8008198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800819c:	3501      	adds	r5, #1
 800819e:	e7c6      	b.n	800812e <_printf_common+0x3e>
 80081a0:	18e1      	adds	r1, r4, r3
 80081a2:	1c5a      	adds	r2, r3, #1
 80081a4:	2030      	movs	r0, #48	; 0x30
 80081a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80081aa:	4422      	add	r2, r4
 80081ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081b4:	3302      	adds	r3, #2
 80081b6:	e7c7      	b.n	8008148 <_printf_common+0x58>
 80081b8:	2301      	movs	r3, #1
 80081ba:	4622      	mov	r2, r4
 80081bc:	4649      	mov	r1, r9
 80081be:	4638      	mov	r0, r7
 80081c0:	47c0      	blx	r8
 80081c2:	3001      	adds	r0, #1
 80081c4:	d0e6      	beq.n	8008194 <_printf_common+0xa4>
 80081c6:	3601      	adds	r6, #1
 80081c8:	e7d9      	b.n	800817e <_printf_common+0x8e>
	...

080081cc <_printf_i>:
 80081cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081d0:	7e0f      	ldrb	r7, [r1, #24]
 80081d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80081d4:	2f78      	cmp	r7, #120	; 0x78
 80081d6:	4691      	mov	r9, r2
 80081d8:	4680      	mov	r8, r0
 80081da:	460c      	mov	r4, r1
 80081dc:	469a      	mov	sl, r3
 80081de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80081e2:	d807      	bhi.n	80081f4 <_printf_i+0x28>
 80081e4:	2f62      	cmp	r7, #98	; 0x62
 80081e6:	d80a      	bhi.n	80081fe <_printf_i+0x32>
 80081e8:	2f00      	cmp	r7, #0
 80081ea:	f000 80d8 	beq.w	800839e <_printf_i+0x1d2>
 80081ee:	2f58      	cmp	r7, #88	; 0x58
 80081f0:	f000 80a3 	beq.w	800833a <_printf_i+0x16e>
 80081f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081fc:	e03a      	b.n	8008274 <_printf_i+0xa8>
 80081fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008202:	2b15      	cmp	r3, #21
 8008204:	d8f6      	bhi.n	80081f4 <_printf_i+0x28>
 8008206:	a101      	add	r1, pc, #4	; (adr r1, 800820c <_printf_i+0x40>)
 8008208:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800820c:	08008265 	.word	0x08008265
 8008210:	08008279 	.word	0x08008279
 8008214:	080081f5 	.word	0x080081f5
 8008218:	080081f5 	.word	0x080081f5
 800821c:	080081f5 	.word	0x080081f5
 8008220:	080081f5 	.word	0x080081f5
 8008224:	08008279 	.word	0x08008279
 8008228:	080081f5 	.word	0x080081f5
 800822c:	080081f5 	.word	0x080081f5
 8008230:	080081f5 	.word	0x080081f5
 8008234:	080081f5 	.word	0x080081f5
 8008238:	08008385 	.word	0x08008385
 800823c:	080082a9 	.word	0x080082a9
 8008240:	08008367 	.word	0x08008367
 8008244:	080081f5 	.word	0x080081f5
 8008248:	080081f5 	.word	0x080081f5
 800824c:	080083a7 	.word	0x080083a7
 8008250:	080081f5 	.word	0x080081f5
 8008254:	080082a9 	.word	0x080082a9
 8008258:	080081f5 	.word	0x080081f5
 800825c:	080081f5 	.word	0x080081f5
 8008260:	0800836f 	.word	0x0800836f
 8008264:	682b      	ldr	r3, [r5, #0]
 8008266:	1d1a      	adds	r2, r3, #4
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	602a      	str	r2, [r5, #0]
 800826c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008270:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008274:	2301      	movs	r3, #1
 8008276:	e0a3      	b.n	80083c0 <_printf_i+0x1f4>
 8008278:	6820      	ldr	r0, [r4, #0]
 800827a:	6829      	ldr	r1, [r5, #0]
 800827c:	0606      	lsls	r6, r0, #24
 800827e:	f101 0304 	add.w	r3, r1, #4
 8008282:	d50a      	bpl.n	800829a <_printf_i+0xce>
 8008284:	680e      	ldr	r6, [r1, #0]
 8008286:	602b      	str	r3, [r5, #0]
 8008288:	2e00      	cmp	r6, #0
 800828a:	da03      	bge.n	8008294 <_printf_i+0xc8>
 800828c:	232d      	movs	r3, #45	; 0x2d
 800828e:	4276      	negs	r6, r6
 8008290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008294:	485e      	ldr	r0, [pc, #376]	; (8008410 <_printf_i+0x244>)
 8008296:	230a      	movs	r3, #10
 8008298:	e019      	b.n	80082ce <_printf_i+0x102>
 800829a:	680e      	ldr	r6, [r1, #0]
 800829c:	602b      	str	r3, [r5, #0]
 800829e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80082a2:	bf18      	it	ne
 80082a4:	b236      	sxthne	r6, r6
 80082a6:	e7ef      	b.n	8008288 <_printf_i+0xbc>
 80082a8:	682b      	ldr	r3, [r5, #0]
 80082aa:	6820      	ldr	r0, [r4, #0]
 80082ac:	1d19      	adds	r1, r3, #4
 80082ae:	6029      	str	r1, [r5, #0]
 80082b0:	0601      	lsls	r1, r0, #24
 80082b2:	d501      	bpl.n	80082b8 <_printf_i+0xec>
 80082b4:	681e      	ldr	r6, [r3, #0]
 80082b6:	e002      	b.n	80082be <_printf_i+0xf2>
 80082b8:	0646      	lsls	r6, r0, #25
 80082ba:	d5fb      	bpl.n	80082b4 <_printf_i+0xe8>
 80082bc:	881e      	ldrh	r6, [r3, #0]
 80082be:	4854      	ldr	r0, [pc, #336]	; (8008410 <_printf_i+0x244>)
 80082c0:	2f6f      	cmp	r7, #111	; 0x6f
 80082c2:	bf0c      	ite	eq
 80082c4:	2308      	moveq	r3, #8
 80082c6:	230a      	movne	r3, #10
 80082c8:	2100      	movs	r1, #0
 80082ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082ce:	6865      	ldr	r5, [r4, #4]
 80082d0:	60a5      	str	r5, [r4, #8]
 80082d2:	2d00      	cmp	r5, #0
 80082d4:	bfa2      	ittt	ge
 80082d6:	6821      	ldrge	r1, [r4, #0]
 80082d8:	f021 0104 	bicge.w	r1, r1, #4
 80082dc:	6021      	strge	r1, [r4, #0]
 80082de:	b90e      	cbnz	r6, 80082e4 <_printf_i+0x118>
 80082e0:	2d00      	cmp	r5, #0
 80082e2:	d04d      	beq.n	8008380 <_printf_i+0x1b4>
 80082e4:	4615      	mov	r5, r2
 80082e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80082ea:	fb03 6711 	mls	r7, r3, r1, r6
 80082ee:	5dc7      	ldrb	r7, [r0, r7]
 80082f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80082f4:	4637      	mov	r7, r6
 80082f6:	42bb      	cmp	r3, r7
 80082f8:	460e      	mov	r6, r1
 80082fa:	d9f4      	bls.n	80082e6 <_printf_i+0x11a>
 80082fc:	2b08      	cmp	r3, #8
 80082fe:	d10b      	bne.n	8008318 <_printf_i+0x14c>
 8008300:	6823      	ldr	r3, [r4, #0]
 8008302:	07de      	lsls	r6, r3, #31
 8008304:	d508      	bpl.n	8008318 <_printf_i+0x14c>
 8008306:	6923      	ldr	r3, [r4, #16]
 8008308:	6861      	ldr	r1, [r4, #4]
 800830a:	4299      	cmp	r1, r3
 800830c:	bfde      	ittt	le
 800830e:	2330      	movle	r3, #48	; 0x30
 8008310:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008314:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008318:	1b52      	subs	r2, r2, r5
 800831a:	6122      	str	r2, [r4, #16]
 800831c:	f8cd a000 	str.w	sl, [sp]
 8008320:	464b      	mov	r3, r9
 8008322:	aa03      	add	r2, sp, #12
 8008324:	4621      	mov	r1, r4
 8008326:	4640      	mov	r0, r8
 8008328:	f7ff fee2 	bl	80080f0 <_printf_common>
 800832c:	3001      	adds	r0, #1
 800832e:	d14c      	bne.n	80083ca <_printf_i+0x1fe>
 8008330:	f04f 30ff 	mov.w	r0, #4294967295
 8008334:	b004      	add	sp, #16
 8008336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800833a:	4835      	ldr	r0, [pc, #212]	; (8008410 <_printf_i+0x244>)
 800833c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008340:	6829      	ldr	r1, [r5, #0]
 8008342:	6823      	ldr	r3, [r4, #0]
 8008344:	f851 6b04 	ldr.w	r6, [r1], #4
 8008348:	6029      	str	r1, [r5, #0]
 800834a:	061d      	lsls	r5, r3, #24
 800834c:	d514      	bpl.n	8008378 <_printf_i+0x1ac>
 800834e:	07df      	lsls	r7, r3, #31
 8008350:	bf44      	itt	mi
 8008352:	f043 0320 	orrmi.w	r3, r3, #32
 8008356:	6023      	strmi	r3, [r4, #0]
 8008358:	b91e      	cbnz	r6, 8008362 <_printf_i+0x196>
 800835a:	6823      	ldr	r3, [r4, #0]
 800835c:	f023 0320 	bic.w	r3, r3, #32
 8008360:	6023      	str	r3, [r4, #0]
 8008362:	2310      	movs	r3, #16
 8008364:	e7b0      	b.n	80082c8 <_printf_i+0xfc>
 8008366:	6823      	ldr	r3, [r4, #0]
 8008368:	f043 0320 	orr.w	r3, r3, #32
 800836c:	6023      	str	r3, [r4, #0]
 800836e:	2378      	movs	r3, #120	; 0x78
 8008370:	4828      	ldr	r0, [pc, #160]	; (8008414 <_printf_i+0x248>)
 8008372:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008376:	e7e3      	b.n	8008340 <_printf_i+0x174>
 8008378:	0659      	lsls	r1, r3, #25
 800837a:	bf48      	it	mi
 800837c:	b2b6      	uxthmi	r6, r6
 800837e:	e7e6      	b.n	800834e <_printf_i+0x182>
 8008380:	4615      	mov	r5, r2
 8008382:	e7bb      	b.n	80082fc <_printf_i+0x130>
 8008384:	682b      	ldr	r3, [r5, #0]
 8008386:	6826      	ldr	r6, [r4, #0]
 8008388:	6961      	ldr	r1, [r4, #20]
 800838a:	1d18      	adds	r0, r3, #4
 800838c:	6028      	str	r0, [r5, #0]
 800838e:	0635      	lsls	r5, r6, #24
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	d501      	bpl.n	8008398 <_printf_i+0x1cc>
 8008394:	6019      	str	r1, [r3, #0]
 8008396:	e002      	b.n	800839e <_printf_i+0x1d2>
 8008398:	0670      	lsls	r0, r6, #25
 800839a:	d5fb      	bpl.n	8008394 <_printf_i+0x1c8>
 800839c:	8019      	strh	r1, [r3, #0]
 800839e:	2300      	movs	r3, #0
 80083a0:	6123      	str	r3, [r4, #16]
 80083a2:	4615      	mov	r5, r2
 80083a4:	e7ba      	b.n	800831c <_printf_i+0x150>
 80083a6:	682b      	ldr	r3, [r5, #0]
 80083a8:	1d1a      	adds	r2, r3, #4
 80083aa:	602a      	str	r2, [r5, #0]
 80083ac:	681d      	ldr	r5, [r3, #0]
 80083ae:	6862      	ldr	r2, [r4, #4]
 80083b0:	2100      	movs	r1, #0
 80083b2:	4628      	mov	r0, r5
 80083b4:	f7f7 feec 	bl	8000190 <memchr>
 80083b8:	b108      	cbz	r0, 80083be <_printf_i+0x1f2>
 80083ba:	1b40      	subs	r0, r0, r5
 80083bc:	6060      	str	r0, [r4, #4]
 80083be:	6863      	ldr	r3, [r4, #4]
 80083c0:	6123      	str	r3, [r4, #16]
 80083c2:	2300      	movs	r3, #0
 80083c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083c8:	e7a8      	b.n	800831c <_printf_i+0x150>
 80083ca:	6923      	ldr	r3, [r4, #16]
 80083cc:	462a      	mov	r2, r5
 80083ce:	4649      	mov	r1, r9
 80083d0:	4640      	mov	r0, r8
 80083d2:	47d0      	blx	sl
 80083d4:	3001      	adds	r0, #1
 80083d6:	d0ab      	beq.n	8008330 <_printf_i+0x164>
 80083d8:	6823      	ldr	r3, [r4, #0]
 80083da:	079b      	lsls	r3, r3, #30
 80083dc:	d413      	bmi.n	8008406 <_printf_i+0x23a>
 80083de:	68e0      	ldr	r0, [r4, #12]
 80083e0:	9b03      	ldr	r3, [sp, #12]
 80083e2:	4298      	cmp	r0, r3
 80083e4:	bfb8      	it	lt
 80083e6:	4618      	movlt	r0, r3
 80083e8:	e7a4      	b.n	8008334 <_printf_i+0x168>
 80083ea:	2301      	movs	r3, #1
 80083ec:	4632      	mov	r2, r6
 80083ee:	4649      	mov	r1, r9
 80083f0:	4640      	mov	r0, r8
 80083f2:	47d0      	blx	sl
 80083f4:	3001      	adds	r0, #1
 80083f6:	d09b      	beq.n	8008330 <_printf_i+0x164>
 80083f8:	3501      	adds	r5, #1
 80083fa:	68e3      	ldr	r3, [r4, #12]
 80083fc:	9903      	ldr	r1, [sp, #12]
 80083fe:	1a5b      	subs	r3, r3, r1
 8008400:	42ab      	cmp	r3, r5
 8008402:	dcf2      	bgt.n	80083ea <_printf_i+0x21e>
 8008404:	e7eb      	b.n	80083de <_printf_i+0x212>
 8008406:	2500      	movs	r5, #0
 8008408:	f104 0619 	add.w	r6, r4, #25
 800840c:	e7f5      	b.n	80083fa <_printf_i+0x22e>
 800840e:	bf00      	nop
 8008410:	0800de76 	.word	0x0800de76
 8008414:	0800de87 	.word	0x0800de87

08008418 <_scanf_float>:
 8008418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800841c:	b087      	sub	sp, #28
 800841e:	4617      	mov	r7, r2
 8008420:	9303      	str	r3, [sp, #12]
 8008422:	688b      	ldr	r3, [r1, #8]
 8008424:	1e5a      	subs	r2, r3, #1
 8008426:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800842a:	bf83      	ittte	hi
 800842c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008430:	195b      	addhi	r3, r3, r5
 8008432:	9302      	strhi	r3, [sp, #8]
 8008434:	2300      	movls	r3, #0
 8008436:	bf86      	itte	hi
 8008438:	f240 135d 	movwhi	r3, #349	; 0x15d
 800843c:	608b      	strhi	r3, [r1, #8]
 800843e:	9302      	strls	r3, [sp, #8]
 8008440:	680b      	ldr	r3, [r1, #0]
 8008442:	468b      	mov	fp, r1
 8008444:	2500      	movs	r5, #0
 8008446:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800844a:	f84b 3b1c 	str.w	r3, [fp], #28
 800844e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008452:	4680      	mov	r8, r0
 8008454:	460c      	mov	r4, r1
 8008456:	465e      	mov	r6, fp
 8008458:	46aa      	mov	sl, r5
 800845a:	46a9      	mov	r9, r5
 800845c:	9501      	str	r5, [sp, #4]
 800845e:	68a2      	ldr	r2, [r4, #8]
 8008460:	b152      	cbz	r2, 8008478 <_scanf_float+0x60>
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	2b4e      	cmp	r3, #78	; 0x4e
 8008468:	d864      	bhi.n	8008534 <_scanf_float+0x11c>
 800846a:	2b40      	cmp	r3, #64	; 0x40
 800846c:	d83c      	bhi.n	80084e8 <_scanf_float+0xd0>
 800846e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008472:	b2c8      	uxtb	r0, r1
 8008474:	280e      	cmp	r0, #14
 8008476:	d93a      	bls.n	80084ee <_scanf_float+0xd6>
 8008478:	f1b9 0f00 	cmp.w	r9, #0
 800847c:	d003      	beq.n	8008486 <_scanf_float+0x6e>
 800847e:	6823      	ldr	r3, [r4, #0]
 8008480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008484:	6023      	str	r3, [r4, #0]
 8008486:	f10a 3aff 	add.w	sl, sl, #4294967295
 800848a:	f1ba 0f01 	cmp.w	sl, #1
 800848e:	f200 8113 	bhi.w	80086b8 <_scanf_float+0x2a0>
 8008492:	455e      	cmp	r6, fp
 8008494:	f200 8105 	bhi.w	80086a2 <_scanf_float+0x28a>
 8008498:	2501      	movs	r5, #1
 800849a:	4628      	mov	r0, r5
 800849c:	b007      	add	sp, #28
 800849e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084a2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80084a6:	2a0d      	cmp	r2, #13
 80084a8:	d8e6      	bhi.n	8008478 <_scanf_float+0x60>
 80084aa:	a101      	add	r1, pc, #4	; (adr r1, 80084b0 <_scanf_float+0x98>)
 80084ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80084b0:	080085ef 	.word	0x080085ef
 80084b4:	08008479 	.word	0x08008479
 80084b8:	08008479 	.word	0x08008479
 80084bc:	08008479 	.word	0x08008479
 80084c0:	0800864f 	.word	0x0800864f
 80084c4:	08008627 	.word	0x08008627
 80084c8:	08008479 	.word	0x08008479
 80084cc:	08008479 	.word	0x08008479
 80084d0:	080085fd 	.word	0x080085fd
 80084d4:	08008479 	.word	0x08008479
 80084d8:	08008479 	.word	0x08008479
 80084dc:	08008479 	.word	0x08008479
 80084e0:	08008479 	.word	0x08008479
 80084e4:	080085b5 	.word	0x080085b5
 80084e8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80084ec:	e7db      	b.n	80084a6 <_scanf_float+0x8e>
 80084ee:	290e      	cmp	r1, #14
 80084f0:	d8c2      	bhi.n	8008478 <_scanf_float+0x60>
 80084f2:	a001      	add	r0, pc, #4	; (adr r0, 80084f8 <_scanf_float+0xe0>)
 80084f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80084f8:	080085a7 	.word	0x080085a7
 80084fc:	08008479 	.word	0x08008479
 8008500:	080085a7 	.word	0x080085a7
 8008504:	0800863b 	.word	0x0800863b
 8008508:	08008479 	.word	0x08008479
 800850c:	08008555 	.word	0x08008555
 8008510:	08008591 	.word	0x08008591
 8008514:	08008591 	.word	0x08008591
 8008518:	08008591 	.word	0x08008591
 800851c:	08008591 	.word	0x08008591
 8008520:	08008591 	.word	0x08008591
 8008524:	08008591 	.word	0x08008591
 8008528:	08008591 	.word	0x08008591
 800852c:	08008591 	.word	0x08008591
 8008530:	08008591 	.word	0x08008591
 8008534:	2b6e      	cmp	r3, #110	; 0x6e
 8008536:	d809      	bhi.n	800854c <_scanf_float+0x134>
 8008538:	2b60      	cmp	r3, #96	; 0x60
 800853a:	d8b2      	bhi.n	80084a2 <_scanf_float+0x8a>
 800853c:	2b54      	cmp	r3, #84	; 0x54
 800853e:	d077      	beq.n	8008630 <_scanf_float+0x218>
 8008540:	2b59      	cmp	r3, #89	; 0x59
 8008542:	d199      	bne.n	8008478 <_scanf_float+0x60>
 8008544:	2d07      	cmp	r5, #7
 8008546:	d197      	bne.n	8008478 <_scanf_float+0x60>
 8008548:	2508      	movs	r5, #8
 800854a:	e029      	b.n	80085a0 <_scanf_float+0x188>
 800854c:	2b74      	cmp	r3, #116	; 0x74
 800854e:	d06f      	beq.n	8008630 <_scanf_float+0x218>
 8008550:	2b79      	cmp	r3, #121	; 0x79
 8008552:	e7f6      	b.n	8008542 <_scanf_float+0x12a>
 8008554:	6821      	ldr	r1, [r4, #0]
 8008556:	05c8      	lsls	r0, r1, #23
 8008558:	d51a      	bpl.n	8008590 <_scanf_float+0x178>
 800855a:	9b02      	ldr	r3, [sp, #8]
 800855c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008560:	6021      	str	r1, [r4, #0]
 8008562:	f109 0901 	add.w	r9, r9, #1
 8008566:	b11b      	cbz	r3, 8008570 <_scanf_float+0x158>
 8008568:	3b01      	subs	r3, #1
 800856a:	3201      	adds	r2, #1
 800856c:	9302      	str	r3, [sp, #8]
 800856e:	60a2      	str	r2, [r4, #8]
 8008570:	68a3      	ldr	r3, [r4, #8]
 8008572:	3b01      	subs	r3, #1
 8008574:	60a3      	str	r3, [r4, #8]
 8008576:	6923      	ldr	r3, [r4, #16]
 8008578:	3301      	adds	r3, #1
 800857a:	6123      	str	r3, [r4, #16]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	3b01      	subs	r3, #1
 8008580:	2b00      	cmp	r3, #0
 8008582:	607b      	str	r3, [r7, #4]
 8008584:	f340 8084 	ble.w	8008690 <_scanf_float+0x278>
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	3301      	adds	r3, #1
 800858c:	603b      	str	r3, [r7, #0]
 800858e:	e766      	b.n	800845e <_scanf_float+0x46>
 8008590:	eb1a 0f05 	cmn.w	sl, r5
 8008594:	f47f af70 	bne.w	8008478 <_scanf_float+0x60>
 8008598:	6822      	ldr	r2, [r4, #0]
 800859a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800859e:	6022      	str	r2, [r4, #0]
 80085a0:	f806 3b01 	strb.w	r3, [r6], #1
 80085a4:	e7e4      	b.n	8008570 <_scanf_float+0x158>
 80085a6:	6822      	ldr	r2, [r4, #0]
 80085a8:	0610      	lsls	r0, r2, #24
 80085aa:	f57f af65 	bpl.w	8008478 <_scanf_float+0x60>
 80085ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085b2:	e7f4      	b.n	800859e <_scanf_float+0x186>
 80085b4:	f1ba 0f00 	cmp.w	sl, #0
 80085b8:	d10e      	bne.n	80085d8 <_scanf_float+0x1c0>
 80085ba:	f1b9 0f00 	cmp.w	r9, #0
 80085be:	d10e      	bne.n	80085de <_scanf_float+0x1c6>
 80085c0:	6822      	ldr	r2, [r4, #0]
 80085c2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80085c6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80085ca:	d108      	bne.n	80085de <_scanf_float+0x1c6>
 80085cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80085d0:	6022      	str	r2, [r4, #0]
 80085d2:	f04f 0a01 	mov.w	sl, #1
 80085d6:	e7e3      	b.n	80085a0 <_scanf_float+0x188>
 80085d8:	f1ba 0f02 	cmp.w	sl, #2
 80085dc:	d055      	beq.n	800868a <_scanf_float+0x272>
 80085de:	2d01      	cmp	r5, #1
 80085e0:	d002      	beq.n	80085e8 <_scanf_float+0x1d0>
 80085e2:	2d04      	cmp	r5, #4
 80085e4:	f47f af48 	bne.w	8008478 <_scanf_float+0x60>
 80085e8:	3501      	adds	r5, #1
 80085ea:	b2ed      	uxtb	r5, r5
 80085ec:	e7d8      	b.n	80085a0 <_scanf_float+0x188>
 80085ee:	f1ba 0f01 	cmp.w	sl, #1
 80085f2:	f47f af41 	bne.w	8008478 <_scanf_float+0x60>
 80085f6:	f04f 0a02 	mov.w	sl, #2
 80085fa:	e7d1      	b.n	80085a0 <_scanf_float+0x188>
 80085fc:	b97d      	cbnz	r5, 800861e <_scanf_float+0x206>
 80085fe:	f1b9 0f00 	cmp.w	r9, #0
 8008602:	f47f af3c 	bne.w	800847e <_scanf_float+0x66>
 8008606:	6822      	ldr	r2, [r4, #0]
 8008608:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800860c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008610:	f47f af39 	bne.w	8008486 <_scanf_float+0x6e>
 8008614:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008618:	6022      	str	r2, [r4, #0]
 800861a:	2501      	movs	r5, #1
 800861c:	e7c0      	b.n	80085a0 <_scanf_float+0x188>
 800861e:	2d03      	cmp	r5, #3
 8008620:	d0e2      	beq.n	80085e8 <_scanf_float+0x1d0>
 8008622:	2d05      	cmp	r5, #5
 8008624:	e7de      	b.n	80085e4 <_scanf_float+0x1cc>
 8008626:	2d02      	cmp	r5, #2
 8008628:	f47f af26 	bne.w	8008478 <_scanf_float+0x60>
 800862c:	2503      	movs	r5, #3
 800862e:	e7b7      	b.n	80085a0 <_scanf_float+0x188>
 8008630:	2d06      	cmp	r5, #6
 8008632:	f47f af21 	bne.w	8008478 <_scanf_float+0x60>
 8008636:	2507      	movs	r5, #7
 8008638:	e7b2      	b.n	80085a0 <_scanf_float+0x188>
 800863a:	6822      	ldr	r2, [r4, #0]
 800863c:	0591      	lsls	r1, r2, #22
 800863e:	f57f af1b 	bpl.w	8008478 <_scanf_float+0x60>
 8008642:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008646:	6022      	str	r2, [r4, #0]
 8008648:	f8cd 9004 	str.w	r9, [sp, #4]
 800864c:	e7a8      	b.n	80085a0 <_scanf_float+0x188>
 800864e:	6822      	ldr	r2, [r4, #0]
 8008650:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008654:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008658:	d006      	beq.n	8008668 <_scanf_float+0x250>
 800865a:	0550      	lsls	r0, r2, #21
 800865c:	f57f af0c 	bpl.w	8008478 <_scanf_float+0x60>
 8008660:	f1b9 0f00 	cmp.w	r9, #0
 8008664:	f43f af0f 	beq.w	8008486 <_scanf_float+0x6e>
 8008668:	0591      	lsls	r1, r2, #22
 800866a:	bf58      	it	pl
 800866c:	9901      	ldrpl	r1, [sp, #4]
 800866e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008672:	bf58      	it	pl
 8008674:	eba9 0101 	subpl.w	r1, r9, r1
 8008678:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800867c:	bf58      	it	pl
 800867e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008682:	6022      	str	r2, [r4, #0]
 8008684:	f04f 0900 	mov.w	r9, #0
 8008688:	e78a      	b.n	80085a0 <_scanf_float+0x188>
 800868a:	f04f 0a03 	mov.w	sl, #3
 800868e:	e787      	b.n	80085a0 <_scanf_float+0x188>
 8008690:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008694:	4639      	mov	r1, r7
 8008696:	4640      	mov	r0, r8
 8008698:	4798      	blx	r3
 800869a:	2800      	cmp	r0, #0
 800869c:	f43f aedf 	beq.w	800845e <_scanf_float+0x46>
 80086a0:	e6ea      	b.n	8008478 <_scanf_float+0x60>
 80086a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086aa:	463a      	mov	r2, r7
 80086ac:	4640      	mov	r0, r8
 80086ae:	4798      	blx	r3
 80086b0:	6923      	ldr	r3, [r4, #16]
 80086b2:	3b01      	subs	r3, #1
 80086b4:	6123      	str	r3, [r4, #16]
 80086b6:	e6ec      	b.n	8008492 <_scanf_float+0x7a>
 80086b8:	1e6b      	subs	r3, r5, #1
 80086ba:	2b06      	cmp	r3, #6
 80086bc:	d825      	bhi.n	800870a <_scanf_float+0x2f2>
 80086be:	2d02      	cmp	r5, #2
 80086c0:	d836      	bhi.n	8008730 <_scanf_float+0x318>
 80086c2:	455e      	cmp	r6, fp
 80086c4:	f67f aee8 	bls.w	8008498 <_scanf_float+0x80>
 80086c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086cc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086d0:	463a      	mov	r2, r7
 80086d2:	4640      	mov	r0, r8
 80086d4:	4798      	blx	r3
 80086d6:	6923      	ldr	r3, [r4, #16]
 80086d8:	3b01      	subs	r3, #1
 80086da:	6123      	str	r3, [r4, #16]
 80086dc:	e7f1      	b.n	80086c2 <_scanf_float+0x2aa>
 80086de:	9802      	ldr	r0, [sp, #8]
 80086e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086e4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80086e8:	9002      	str	r0, [sp, #8]
 80086ea:	463a      	mov	r2, r7
 80086ec:	4640      	mov	r0, r8
 80086ee:	4798      	blx	r3
 80086f0:	6923      	ldr	r3, [r4, #16]
 80086f2:	3b01      	subs	r3, #1
 80086f4:	6123      	str	r3, [r4, #16]
 80086f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086fa:	fa5f fa8a 	uxtb.w	sl, sl
 80086fe:	f1ba 0f02 	cmp.w	sl, #2
 8008702:	d1ec      	bne.n	80086de <_scanf_float+0x2c6>
 8008704:	3d03      	subs	r5, #3
 8008706:	b2ed      	uxtb	r5, r5
 8008708:	1b76      	subs	r6, r6, r5
 800870a:	6823      	ldr	r3, [r4, #0]
 800870c:	05da      	lsls	r2, r3, #23
 800870e:	d52f      	bpl.n	8008770 <_scanf_float+0x358>
 8008710:	055b      	lsls	r3, r3, #21
 8008712:	d510      	bpl.n	8008736 <_scanf_float+0x31e>
 8008714:	455e      	cmp	r6, fp
 8008716:	f67f aebf 	bls.w	8008498 <_scanf_float+0x80>
 800871a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800871e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008722:	463a      	mov	r2, r7
 8008724:	4640      	mov	r0, r8
 8008726:	4798      	blx	r3
 8008728:	6923      	ldr	r3, [r4, #16]
 800872a:	3b01      	subs	r3, #1
 800872c:	6123      	str	r3, [r4, #16]
 800872e:	e7f1      	b.n	8008714 <_scanf_float+0x2fc>
 8008730:	46aa      	mov	sl, r5
 8008732:	9602      	str	r6, [sp, #8]
 8008734:	e7df      	b.n	80086f6 <_scanf_float+0x2de>
 8008736:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800873a:	6923      	ldr	r3, [r4, #16]
 800873c:	2965      	cmp	r1, #101	; 0x65
 800873e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008742:	f106 35ff 	add.w	r5, r6, #4294967295
 8008746:	6123      	str	r3, [r4, #16]
 8008748:	d00c      	beq.n	8008764 <_scanf_float+0x34c>
 800874a:	2945      	cmp	r1, #69	; 0x45
 800874c:	d00a      	beq.n	8008764 <_scanf_float+0x34c>
 800874e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008752:	463a      	mov	r2, r7
 8008754:	4640      	mov	r0, r8
 8008756:	4798      	blx	r3
 8008758:	6923      	ldr	r3, [r4, #16]
 800875a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800875e:	3b01      	subs	r3, #1
 8008760:	1eb5      	subs	r5, r6, #2
 8008762:	6123      	str	r3, [r4, #16]
 8008764:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008768:	463a      	mov	r2, r7
 800876a:	4640      	mov	r0, r8
 800876c:	4798      	blx	r3
 800876e:	462e      	mov	r6, r5
 8008770:	6825      	ldr	r5, [r4, #0]
 8008772:	f015 0510 	ands.w	r5, r5, #16
 8008776:	d159      	bne.n	800882c <_scanf_float+0x414>
 8008778:	7035      	strb	r5, [r6, #0]
 800877a:	6823      	ldr	r3, [r4, #0]
 800877c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008784:	d11b      	bne.n	80087be <_scanf_float+0x3a6>
 8008786:	9b01      	ldr	r3, [sp, #4]
 8008788:	454b      	cmp	r3, r9
 800878a:	eba3 0209 	sub.w	r2, r3, r9
 800878e:	d123      	bne.n	80087d8 <_scanf_float+0x3c0>
 8008790:	2200      	movs	r2, #0
 8008792:	4659      	mov	r1, fp
 8008794:	4640      	mov	r0, r8
 8008796:	f000 fe99 	bl	80094cc <_strtod_r>
 800879a:	6822      	ldr	r2, [r4, #0]
 800879c:	9b03      	ldr	r3, [sp, #12]
 800879e:	f012 0f02 	tst.w	r2, #2
 80087a2:	ec57 6b10 	vmov	r6, r7, d0
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	d021      	beq.n	80087ee <_scanf_float+0x3d6>
 80087aa:	9903      	ldr	r1, [sp, #12]
 80087ac:	1d1a      	adds	r2, r3, #4
 80087ae:	600a      	str	r2, [r1, #0]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	e9c3 6700 	strd	r6, r7, [r3]
 80087b6:	68e3      	ldr	r3, [r4, #12]
 80087b8:	3301      	adds	r3, #1
 80087ba:	60e3      	str	r3, [r4, #12]
 80087bc:	e66d      	b.n	800849a <_scanf_float+0x82>
 80087be:	9b04      	ldr	r3, [sp, #16]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d0e5      	beq.n	8008790 <_scanf_float+0x378>
 80087c4:	9905      	ldr	r1, [sp, #20]
 80087c6:	230a      	movs	r3, #10
 80087c8:	462a      	mov	r2, r5
 80087ca:	3101      	adds	r1, #1
 80087cc:	4640      	mov	r0, r8
 80087ce:	f000 ff05 	bl	80095dc <_strtol_r>
 80087d2:	9b04      	ldr	r3, [sp, #16]
 80087d4:	9e05      	ldr	r6, [sp, #20]
 80087d6:	1ac2      	subs	r2, r0, r3
 80087d8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80087dc:	429e      	cmp	r6, r3
 80087de:	bf28      	it	cs
 80087e0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80087e4:	4912      	ldr	r1, [pc, #72]	; (8008830 <_scanf_float+0x418>)
 80087e6:	4630      	mov	r0, r6
 80087e8:	f000 f82c 	bl	8008844 <siprintf>
 80087ec:	e7d0      	b.n	8008790 <_scanf_float+0x378>
 80087ee:	9903      	ldr	r1, [sp, #12]
 80087f0:	f012 0f04 	tst.w	r2, #4
 80087f4:	f103 0204 	add.w	r2, r3, #4
 80087f8:	600a      	str	r2, [r1, #0]
 80087fa:	d1d9      	bne.n	80087b0 <_scanf_float+0x398>
 80087fc:	f8d3 8000 	ldr.w	r8, [r3]
 8008800:	ee10 2a10 	vmov	r2, s0
 8008804:	ee10 0a10 	vmov	r0, s0
 8008808:	463b      	mov	r3, r7
 800880a:	4639      	mov	r1, r7
 800880c:	f7f8 f966 	bl	8000adc <__aeabi_dcmpun>
 8008810:	b128      	cbz	r0, 800881e <_scanf_float+0x406>
 8008812:	4808      	ldr	r0, [pc, #32]	; (8008834 <_scanf_float+0x41c>)
 8008814:	f000 f810 	bl	8008838 <nanf>
 8008818:	ed88 0a00 	vstr	s0, [r8]
 800881c:	e7cb      	b.n	80087b6 <_scanf_float+0x39e>
 800881e:	4630      	mov	r0, r6
 8008820:	4639      	mov	r1, r7
 8008822:	f7f8 f9b9 	bl	8000b98 <__aeabi_d2f>
 8008826:	f8c8 0000 	str.w	r0, [r8]
 800882a:	e7c4      	b.n	80087b6 <_scanf_float+0x39e>
 800882c:	2500      	movs	r5, #0
 800882e:	e634      	b.n	800849a <_scanf_float+0x82>
 8008830:	0800de98 	.word	0x0800de98
 8008834:	0800e2a0 	.word	0x0800e2a0

08008838 <nanf>:
 8008838:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008840 <nanf+0x8>
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	7fc00000 	.word	0x7fc00000

08008844 <siprintf>:
 8008844:	b40e      	push	{r1, r2, r3}
 8008846:	b500      	push	{lr}
 8008848:	b09c      	sub	sp, #112	; 0x70
 800884a:	ab1d      	add	r3, sp, #116	; 0x74
 800884c:	9002      	str	r0, [sp, #8]
 800884e:	9006      	str	r0, [sp, #24]
 8008850:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008854:	4809      	ldr	r0, [pc, #36]	; (800887c <siprintf+0x38>)
 8008856:	9107      	str	r1, [sp, #28]
 8008858:	9104      	str	r1, [sp, #16]
 800885a:	4909      	ldr	r1, [pc, #36]	; (8008880 <siprintf+0x3c>)
 800885c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008860:	9105      	str	r1, [sp, #20]
 8008862:	6800      	ldr	r0, [r0, #0]
 8008864:	9301      	str	r3, [sp, #4]
 8008866:	a902      	add	r1, sp, #8
 8008868:	f002 fed6 	bl	800b618 <_svfiprintf_r>
 800886c:	9b02      	ldr	r3, [sp, #8]
 800886e:	2200      	movs	r2, #0
 8008870:	701a      	strb	r2, [r3, #0]
 8008872:	b01c      	add	sp, #112	; 0x70
 8008874:	f85d eb04 	ldr.w	lr, [sp], #4
 8008878:	b003      	add	sp, #12
 800887a:	4770      	bx	lr
 800887c:	20000108 	.word	0x20000108
 8008880:	ffff0208 	.word	0xffff0208

08008884 <sulp>:
 8008884:	b570      	push	{r4, r5, r6, lr}
 8008886:	4604      	mov	r4, r0
 8008888:	460d      	mov	r5, r1
 800888a:	ec45 4b10 	vmov	d0, r4, r5
 800888e:	4616      	mov	r6, r2
 8008890:	f002 fc20 	bl	800b0d4 <__ulp>
 8008894:	ec51 0b10 	vmov	r0, r1, d0
 8008898:	b17e      	cbz	r6, 80088ba <sulp+0x36>
 800889a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800889e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	dd09      	ble.n	80088ba <sulp+0x36>
 80088a6:	051b      	lsls	r3, r3, #20
 80088a8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80088ac:	2400      	movs	r4, #0
 80088ae:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80088b2:	4622      	mov	r2, r4
 80088b4:	462b      	mov	r3, r5
 80088b6:	f7f7 fe77 	bl	80005a8 <__aeabi_dmul>
 80088ba:	bd70      	pop	{r4, r5, r6, pc}
 80088bc:	0000      	movs	r0, r0
	...

080088c0 <_strtod_l>:
 80088c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c4:	ed2d 8b02 	vpush	{d8}
 80088c8:	b09d      	sub	sp, #116	; 0x74
 80088ca:	461f      	mov	r7, r3
 80088cc:	2300      	movs	r3, #0
 80088ce:	9318      	str	r3, [sp, #96]	; 0x60
 80088d0:	4ba2      	ldr	r3, [pc, #648]	; (8008b5c <_strtod_l+0x29c>)
 80088d2:	9213      	str	r2, [sp, #76]	; 0x4c
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	9305      	str	r3, [sp, #20]
 80088d8:	4604      	mov	r4, r0
 80088da:	4618      	mov	r0, r3
 80088dc:	4688      	mov	r8, r1
 80088de:	f7f7 fc4f 	bl	8000180 <strlen>
 80088e2:	f04f 0a00 	mov.w	sl, #0
 80088e6:	4605      	mov	r5, r0
 80088e8:	f04f 0b00 	mov.w	fp, #0
 80088ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80088f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80088f2:	781a      	ldrb	r2, [r3, #0]
 80088f4:	2a2b      	cmp	r2, #43	; 0x2b
 80088f6:	d04e      	beq.n	8008996 <_strtod_l+0xd6>
 80088f8:	d83b      	bhi.n	8008972 <_strtod_l+0xb2>
 80088fa:	2a0d      	cmp	r2, #13
 80088fc:	d834      	bhi.n	8008968 <_strtod_l+0xa8>
 80088fe:	2a08      	cmp	r2, #8
 8008900:	d834      	bhi.n	800896c <_strtod_l+0xac>
 8008902:	2a00      	cmp	r2, #0
 8008904:	d03e      	beq.n	8008984 <_strtod_l+0xc4>
 8008906:	2300      	movs	r3, #0
 8008908:	930a      	str	r3, [sp, #40]	; 0x28
 800890a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800890c:	7833      	ldrb	r3, [r6, #0]
 800890e:	2b30      	cmp	r3, #48	; 0x30
 8008910:	f040 80b0 	bne.w	8008a74 <_strtod_l+0x1b4>
 8008914:	7873      	ldrb	r3, [r6, #1]
 8008916:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800891a:	2b58      	cmp	r3, #88	; 0x58
 800891c:	d168      	bne.n	80089f0 <_strtod_l+0x130>
 800891e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008920:	9301      	str	r3, [sp, #4]
 8008922:	ab18      	add	r3, sp, #96	; 0x60
 8008924:	9702      	str	r7, [sp, #8]
 8008926:	9300      	str	r3, [sp, #0]
 8008928:	4a8d      	ldr	r2, [pc, #564]	; (8008b60 <_strtod_l+0x2a0>)
 800892a:	ab19      	add	r3, sp, #100	; 0x64
 800892c:	a917      	add	r1, sp, #92	; 0x5c
 800892e:	4620      	mov	r0, r4
 8008930:	f001 fd38 	bl	800a3a4 <__gethex>
 8008934:	f010 0707 	ands.w	r7, r0, #7
 8008938:	4605      	mov	r5, r0
 800893a:	d005      	beq.n	8008948 <_strtod_l+0x88>
 800893c:	2f06      	cmp	r7, #6
 800893e:	d12c      	bne.n	800899a <_strtod_l+0xda>
 8008940:	3601      	adds	r6, #1
 8008942:	2300      	movs	r3, #0
 8008944:	9617      	str	r6, [sp, #92]	; 0x5c
 8008946:	930a      	str	r3, [sp, #40]	; 0x28
 8008948:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800894a:	2b00      	cmp	r3, #0
 800894c:	f040 8590 	bne.w	8009470 <_strtod_l+0xbb0>
 8008950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008952:	b1eb      	cbz	r3, 8008990 <_strtod_l+0xd0>
 8008954:	4652      	mov	r2, sl
 8008956:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800895a:	ec43 2b10 	vmov	d0, r2, r3
 800895e:	b01d      	add	sp, #116	; 0x74
 8008960:	ecbd 8b02 	vpop	{d8}
 8008964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008968:	2a20      	cmp	r2, #32
 800896a:	d1cc      	bne.n	8008906 <_strtod_l+0x46>
 800896c:	3301      	adds	r3, #1
 800896e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008970:	e7be      	b.n	80088f0 <_strtod_l+0x30>
 8008972:	2a2d      	cmp	r2, #45	; 0x2d
 8008974:	d1c7      	bne.n	8008906 <_strtod_l+0x46>
 8008976:	2201      	movs	r2, #1
 8008978:	920a      	str	r2, [sp, #40]	; 0x28
 800897a:	1c5a      	adds	r2, r3, #1
 800897c:	9217      	str	r2, [sp, #92]	; 0x5c
 800897e:	785b      	ldrb	r3, [r3, #1]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1c2      	bne.n	800890a <_strtod_l+0x4a>
 8008984:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008986:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800898a:	2b00      	cmp	r3, #0
 800898c:	f040 856e 	bne.w	800946c <_strtod_l+0xbac>
 8008990:	4652      	mov	r2, sl
 8008992:	465b      	mov	r3, fp
 8008994:	e7e1      	b.n	800895a <_strtod_l+0x9a>
 8008996:	2200      	movs	r2, #0
 8008998:	e7ee      	b.n	8008978 <_strtod_l+0xb8>
 800899a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800899c:	b13a      	cbz	r2, 80089ae <_strtod_l+0xee>
 800899e:	2135      	movs	r1, #53	; 0x35
 80089a0:	a81a      	add	r0, sp, #104	; 0x68
 80089a2:	f002 fca2 	bl	800b2ea <__copybits>
 80089a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80089a8:	4620      	mov	r0, r4
 80089aa:	f002 f861 	bl	800aa70 <_Bfree>
 80089ae:	3f01      	subs	r7, #1
 80089b0:	2f04      	cmp	r7, #4
 80089b2:	d806      	bhi.n	80089c2 <_strtod_l+0x102>
 80089b4:	e8df f007 	tbb	[pc, r7]
 80089b8:	1714030a 	.word	0x1714030a
 80089bc:	0a          	.byte	0x0a
 80089bd:	00          	.byte	0x00
 80089be:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80089c2:	0728      	lsls	r0, r5, #28
 80089c4:	d5c0      	bpl.n	8008948 <_strtod_l+0x88>
 80089c6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80089ca:	e7bd      	b.n	8008948 <_strtod_l+0x88>
 80089cc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80089d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80089d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80089d6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80089da:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80089de:	e7f0      	b.n	80089c2 <_strtod_l+0x102>
 80089e0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008b64 <_strtod_l+0x2a4>
 80089e4:	e7ed      	b.n	80089c2 <_strtod_l+0x102>
 80089e6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80089ea:	f04f 3aff 	mov.w	sl, #4294967295
 80089ee:	e7e8      	b.n	80089c2 <_strtod_l+0x102>
 80089f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80089f2:	1c5a      	adds	r2, r3, #1
 80089f4:	9217      	str	r2, [sp, #92]	; 0x5c
 80089f6:	785b      	ldrb	r3, [r3, #1]
 80089f8:	2b30      	cmp	r3, #48	; 0x30
 80089fa:	d0f9      	beq.n	80089f0 <_strtod_l+0x130>
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d0a3      	beq.n	8008948 <_strtod_l+0x88>
 8008a00:	2301      	movs	r3, #1
 8008a02:	f04f 0900 	mov.w	r9, #0
 8008a06:	9304      	str	r3, [sp, #16]
 8008a08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a0a:	9308      	str	r3, [sp, #32]
 8008a0c:	f8cd 901c 	str.w	r9, [sp, #28]
 8008a10:	464f      	mov	r7, r9
 8008a12:	220a      	movs	r2, #10
 8008a14:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008a16:	7806      	ldrb	r6, [r0, #0]
 8008a18:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008a1c:	b2d9      	uxtb	r1, r3
 8008a1e:	2909      	cmp	r1, #9
 8008a20:	d92a      	bls.n	8008a78 <_strtod_l+0x1b8>
 8008a22:	9905      	ldr	r1, [sp, #20]
 8008a24:	462a      	mov	r2, r5
 8008a26:	f002 ff0f 	bl	800b848 <strncmp>
 8008a2a:	b398      	cbz	r0, 8008a94 <_strtod_l+0x1d4>
 8008a2c:	2000      	movs	r0, #0
 8008a2e:	4632      	mov	r2, r6
 8008a30:	463d      	mov	r5, r7
 8008a32:	9005      	str	r0, [sp, #20]
 8008a34:	4603      	mov	r3, r0
 8008a36:	2a65      	cmp	r2, #101	; 0x65
 8008a38:	d001      	beq.n	8008a3e <_strtod_l+0x17e>
 8008a3a:	2a45      	cmp	r2, #69	; 0x45
 8008a3c:	d118      	bne.n	8008a70 <_strtod_l+0x1b0>
 8008a3e:	b91d      	cbnz	r5, 8008a48 <_strtod_l+0x188>
 8008a40:	9a04      	ldr	r2, [sp, #16]
 8008a42:	4302      	orrs	r2, r0
 8008a44:	d09e      	beq.n	8008984 <_strtod_l+0xc4>
 8008a46:	2500      	movs	r5, #0
 8008a48:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008a4c:	f108 0201 	add.w	r2, r8, #1
 8008a50:	9217      	str	r2, [sp, #92]	; 0x5c
 8008a52:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008a56:	2a2b      	cmp	r2, #43	; 0x2b
 8008a58:	d075      	beq.n	8008b46 <_strtod_l+0x286>
 8008a5a:	2a2d      	cmp	r2, #45	; 0x2d
 8008a5c:	d07b      	beq.n	8008b56 <_strtod_l+0x296>
 8008a5e:	f04f 0c00 	mov.w	ip, #0
 8008a62:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008a66:	2909      	cmp	r1, #9
 8008a68:	f240 8082 	bls.w	8008b70 <_strtod_l+0x2b0>
 8008a6c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008a70:	2600      	movs	r6, #0
 8008a72:	e09d      	b.n	8008bb0 <_strtod_l+0x2f0>
 8008a74:	2300      	movs	r3, #0
 8008a76:	e7c4      	b.n	8008a02 <_strtod_l+0x142>
 8008a78:	2f08      	cmp	r7, #8
 8008a7a:	bfd8      	it	le
 8008a7c:	9907      	ldrle	r1, [sp, #28]
 8008a7e:	f100 0001 	add.w	r0, r0, #1
 8008a82:	bfda      	itte	le
 8008a84:	fb02 3301 	mlale	r3, r2, r1, r3
 8008a88:	9307      	strle	r3, [sp, #28]
 8008a8a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008a8e:	3701      	adds	r7, #1
 8008a90:	9017      	str	r0, [sp, #92]	; 0x5c
 8008a92:	e7bf      	b.n	8008a14 <_strtod_l+0x154>
 8008a94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a96:	195a      	adds	r2, r3, r5
 8008a98:	9217      	str	r2, [sp, #92]	; 0x5c
 8008a9a:	5d5a      	ldrb	r2, [r3, r5]
 8008a9c:	2f00      	cmp	r7, #0
 8008a9e:	d037      	beq.n	8008b10 <_strtod_l+0x250>
 8008aa0:	9005      	str	r0, [sp, #20]
 8008aa2:	463d      	mov	r5, r7
 8008aa4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008aa8:	2b09      	cmp	r3, #9
 8008aaa:	d912      	bls.n	8008ad2 <_strtod_l+0x212>
 8008aac:	2301      	movs	r3, #1
 8008aae:	e7c2      	b.n	8008a36 <_strtod_l+0x176>
 8008ab0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ab2:	1c5a      	adds	r2, r3, #1
 8008ab4:	9217      	str	r2, [sp, #92]	; 0x5c
 8008ab6:	785a      	ldrb	r2, [r3, #1]
 8008ab8:	3001      	adds	r0, #1
 8008aba:	2a30      	cmp	r2, #48	; 0x30
 8008abc:	d0f8      	beq.n	8008ab0 <_strtod_l+0x1f0>
 8008abe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008ac2:	2b08      	cmp	r3, #8
 8008ac4:	f200 84d9 	bhi.w	800947a <_strtod_l+0xbba>
 8008ac8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008aca:	9005      	str	r0, [sp, #20]
 8008acc:	2000      	movs	r0, #0
 8008ace:	9308      	str	r3, [sp, #32]
 8008ad0:	4605      	mov	r5, r0
 8008ad2:	3a30      	subs	r2, #48	; 0x30
 8008ad4:	f100 0301 	add.w	r3, r0, #1
 8008ad8:	d014      	beq.n	8008b04 <_strtod_l+0x244>
 8008ada:	9905      	ldr	r1, [sp, #20]
 8008adc:	4419      	add	r1, r3
 8008ade:	9105      	str	r1, [sp, #20]
 8008ae0:	462b      	mov	r3, r5
 8008ae2:	eb00 0e05 	add.w	lr, r0, r5
 8008ae6:	210a      	movs	r1, #10
 8008ae8:	4573      	cmp	r3, lr
 8008aea:	d113      	bne.n	8008b14 <_strtod_l+0x254>
 8008aec:	182b      	adds	r3, r5, r0
 8008aee:	2b08      	cmp	r3, #8
 8008af0:	f105 0501 	add.w	r5, r5, #1
 8008af4:	4405      	add	r5, r0
 8008af6:	dc1c      	bgt.n	8008b32 <_strtod_l+0x272>
 8008af8:	9907      	ldr	r1, [sp, #28]
 8008afa:	230a      	movs	r3, #10
 8008afc:	fb03 2301 	mla	r3, r3, r1, r2
 8008b00:	9307      	str	r3, [sp, #28]
 8008b02:	2300      	movs	r3, #0
 8008b04:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008b06:	1c51      	adds	r1, r2, #1
 8008b08:	9117      	str	r1, [sp, #92]	; 0x5c
 8008b0a:	7852      	ldrb	r2, [r2, #1]
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	e7c9      	b.n	8008aa4 <_strtod_l+0x1e4>
 8008b10:	4638      	mov	r0, r7
 8008b12:	e7d2      	b.n	8008aba <_strtod_l+0x1fa>
 8008b14:	2b08      	cmp	r3, #8
 8008b16:	dc04      	bgt.n	8008b22 <_strtod_l+0x262>
 8008b18:	9e07      	ldr	r6, [sp, #28]
 8008b1a:	434e      	muls	r6, r1
 8008b1c:	9607      	str	r6, [sp, #28]
 8008b1e:	3301      	adds	r3, #1
 8008b20:	e7e2      	b.n	8008ae8 <_strtod_l+0x228>
 8008b22:	f103 0c01 	add.w	ip, r3, #1
 8008b26:	f1bc 0f10 	cmp.w	ip, #16
 8008b2a:	bfd8      	it	le
 8008b2c:	fb01 f909 	mulle.w	r9, r1, r9
 8008b30:	e7f5      	b.n	8008b1e <_strtod_l+0x25e>
 8008b32:	2d10      	cmp	r5, #16
 8008b34:	bfdc      	itt	le
 8008b36:	230a      	movle	r3, #10
 8008b38:	fb03 2909 	mlale	r9, r3, r9, r2
 8008b3c:	e7e1      	b.n	8008b02 <_strtod_l+0x242>
 8008b3e:	2300      	movs	r3, #0
 8008b40:	9305      	str	r3, [sp, #20]
 8008b42:	2301      	movs	r3, #1
 8008b44:	e77c      	b.n	8008a40 <_strtod_l+0x180>
 8008b46:	f04f 0c00 	mov.w	ip, #0
 8008b4a:	f108 0202 	add.w	r2, r8, #2
 8008b4e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b50:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008b54:	e785      	b.n	8008a62 <_strtod_l+0x1a2>
 8008b56:	f04f 0c01 	mov.w	ip, #1
 8008b5a:	e7f6      	b.n	8008b4a <_strtod_l+0x28a>
 8008b5c:	0800e0e8 	.word	0x0800e0e8
 8008b60:	0800dea0 	.word	0x0800dea0
 8008b64:	7ff00000 	.word	0x7ff00000
 8008b68:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008b6a:	1c51      	adds	r1, r2, #1
 8008b6c:	9117      	str	r1, [sp, #92]	; 0x5c
 8008b6e:	7852      	ldrb	r2, [r2, #1]
 8008b70:	2a30      	cmp	r2, #48	; 0x30
 8008b72:	d0f9      	beq.n	8008b68 <_strtod_l+0x2a8>
 8008b74:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008b78:	2908      	cmp	r1, #8
 8008b7a:	f63f af79 	bhi.w	8008a70 <_strtod_l+0x1b0>
 8008b7e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008b82:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008b84:	9206      	str	r2, [sp, #24]
 8008b86:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008b88:	1c51      	adds	r1, r2, #1
 8008b8a:	9117      	str	r1, [sp, #92]	; 0x5c
 8008b8c:	7852      	ldrb	r2, [r2, #1]
 8008b8e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008b92:	2e09      	cmp	r6, #9
 8008b94:	d937      	bls.n	8008c06 <_strtod_l+0x346>
 8008b96:	9e06      	ldr	r6, [sp, #24]
 8008b98:	1b89      	subs	r1, r1, r6
 8008b9a:	2908      	cmp	r1, #8
 8008b9c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008ba0:	dc02      	bgt.n	8008ba8 <_strtod_l+0x2e8>
 8008ba2:	4576      	cmp	r6, lr
 8008ba4:	bfa8      	it	ge
 8008ba6:	4676      	movge	r6, lr
 8008ba8:	f1bc 0f00 	cmp.w	ip, #0
 8008bac:	d000      	beq.n	8008bb0 <_strtod_l+0x2f0>
 8008bae:	4276      	negs	r6, r6
 8008bb0:	2d00      	cmp	r5, #0
 8008bb2:	d14d      	bne.n	8008c50 <_strtod_l+0x390>
 8008bb4:	9904      	ldr	r1, [sp, #16]
 8008bb6:	4301      	orrs	r1, r0
 8008bb8:	f47f aec6 	bne.w	8008948 <_strtod_l+0x88>
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f47f aee1 	bne.w	8008984 <_strtod_l+0xc4>
 8008bc2:	2a69      	cmp	r2, #105	; 0x69
 8008bc4:	d027      	beq.n	8008c16 <_strtod_l+0x356>
 8008bc6:	dc24      	bgt.n	8008c12 <_strtod_l+0x352>
 8008bc8:	2a49      	cmp	r2, #73	; 0x49
 8008bca:	d024      	beq.n	8008c16 <_strtod_l+0x356>
 8008bcc:	2a4e      	cmp	r2, #78	; 0x4e
 8008bce:	f47f aed9 	bne.w	8008984 <_strtod_l+0xc4>
 8008bd2:	499f      	ldr	r1, [pc, #636]	; (8008e50 <_strtod_l+0x590>)
 8008bd4:	a817      	add	r0, sp, #92	; 0x5c
 8008bd6:	f001 fe3d 	bl	800a854 <__match>
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	f43f aed2 	beq.w	8008984 <_strtod_l+0xc4>
 8008be0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	2b28      	cmp	r3, #40	; 0x28
 8008be6:	d12d      	bne.n	8008c44 <_strtod_l+0x384>
 8008be8:	499a      	ldr	r1, [pc, #616]	; (8008e54 <_strtod_l+0x594>)
 8008bea:	aa1a      	add	r2, sp, #104	; 0x68
 8008bec:	a817      	add	r0, sp, #92	; 0x5c
 8008bee:	f001 fe45 	bl	800a87c <__hexnan>
 8008bf2:	2805      	cmp	r0, #5
 8008bf4:	d126      	bne.n	8008c44 <_strtod_l+0x384>
 8008bf6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008bf8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008bfc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008c00:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008c04:	e6a0      	b.n	8008948 <_strtod_l+0x88>
 8008c06:	210a      	movs	r1, #10
 8008c08:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008c0c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008c10:	e7b9      	b.n	8008b86 <_strtod_l+0x2c6>
 8008c12:	2a6e      	cmp	r2, #110	; 0x6e
 8008c14:	e7db      	b.n	8008bce <_strtod_l+0x30e>
 8008c16:	4990      	ldr	r1, [pc, #576]	; (8008e58 <_strtod_l+0x598>)
 8008c18:	a817      	add	r0, sp, #92	; 0x5c
 8008c1a:	f001 fe1b 	bl	800a854 <__match>
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	f43f aeb0 	beq.w	8008984 <_strtod_l+0xc4>
 8008c24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c26:	498d      	ldr	r1, [pc, #564]	; (8008e5c <_strtod_l+0x59c>)
 8008c28:	3b01      	subs	r3, #1
 8008c2a:	a817      	add	r0, sp, #92	; 0x5c
 8008c2c:	9317      	str	r3, [sp, #92]	; 0x5c
 8008c2e:	f001 fe11 	bl	800a854 <__match>
 8008c32:	b910      	cbnz	r0, 8008c3a <_strtod_l+0x37a>
 8008c34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c36:	3301      	adds	r3, #1
 8008c38:	9317      	str	r3, [sp, #92]	; 0x5c
 8008c3a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008e6c <_strtod_l+0x5ac>
 8008c3e:	f04f 0a00 	mov.w	sl, #0
 8008c42:	e681      	b.n	8008948 <_strtod_l+0x88>
 8008c44:	4886      	ldr	r0, [pc, #536]	; (8008e60 <_strtod_l+0x5a0>)
 8008c46:	f002 fde7 	bl	800b818 <nan>
 8008c4a:	ec5b ab10 	vmov	sl, fp, d0
 8008c4e:	e67b      	b.n	8008948 <_strtod_l+0x88>
 8008c50:	9b05      	ldr	r3, [sp, #20]
 8008c52:	9807      	ldr	r0, [sp, #28]
 8008c54:	1af3      	subs	r3, r6, r3
 8008c56:	2f00      	cmp	r7, #0
 8008c58:	bf08      	it	eq
 8008c5a:	462f      	moveq	r7, r5
 8008c5c:	2d10      	cmp	r5, #16
 8008c5e:	9306      	str	r3, [sp, #24]
 8008c60:	46a8      	mov	r8, r5
 8008c62:	bfa8      	it	ge
 8008c64:	f04f 0810 	movge.w	r8, #16
 8008c68:	f7f7 fc24 	bl	80004b4 <__aeabi_ui2d>
 8008c6c:	2d09      	cmp	r5, #9
 8008c6e:	4682      	mov	sl, r0
 8008c70:	468b      	mov	fp, r1
 8008c72:	dd13      	ble.n	8008c9c <_strtod_l+0x3dc>
 8008c74:	4b7b      	ldr	r3, [pc, #492]	; (8008e64 <_strtod_l+0x5a4>)
 8008c76:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008c7a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008c7e:	f7f7 fc93 	bl	80005a8 <__aeabi_dmul>
 8008c82:	4682      	mov	sl, r0
 8008c84:	4648      	mov	r0, r9
 8008c86:	468b      	mov	fp, r1
 8008c88:	f7f7 fc14 	bl	80004b4 <__aeabi_ui2d>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	460b      	mov	r3, r1
 8008c90:	4650      	mov	r0, sl
 8008c92:	4659      	mov	r1, fp
 8008c94:	f7f7 fad2 	bl	800023c <__adddf3>
 8008c98:	4682      	mov	sl, r0
 8008c9a:	468b      	mov	fp, r1
 8008c9c:	2d0f      	cmp	r5, #15
 8008c9e:	dc38      	bgt.n	8008d12 <_strtod_l+0x452>
 8008ca0:	9b06      	ldr	r3, [sp, #24]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f43f ae50 	beq.w	8008948 <_strtod_l+0x88>
 8008ca8:	dd24      	ble.n	8008cf4 <_strtod_l+0x434>
 8008caa:	2b16      	cmp	r3, #22
 8008cac:	dc0b      	bgt.n	8008cc6 <_strtod_l+0x406>
 8008cae:	496d      	ldr	r1, [pc, #436]	; (8008e64 <_strtod_l+0x5a4>)
 8008cb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008cb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cb8:	4652      	mov	r2, sl
 8008cba:	465b      	mov	r3, fp
 8008cbc:	f7f7 fc74 	bl	80005a8 <__aeabi_dmul>
 8008cc0:	4682      	mov	sl, r0
 8008cc2:	468b      	mov	fp, r1
 8008cc4:	e640      	b.n	8008948 <_strtod_l+0x88>
 8008cc6:	9a06      	ldr	r2, [sp, #24]
 8008cc8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	db20      	blt.n	8008d12 <_strtod_l+0x452>
 8008cd0:	4c64      	ldr	r4, [pc, #400]	; (8008e64 <_strtod_l+0x5a4>)
 8008cd2:	f1c5 050f 	rsb	r5, r5, #15
 8008cd6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008cda:	4652      	mov	r2, sl
 8008cdc:	465b      	mov	r3, fp
 8008cde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ce2:	f7f7 fc61 	bl	80005a8 <__aeabi_dmul>
 8008ce6:	9b06      	ldr	r3, [sp, #24]
 8008ce8:	1b5d      	subs	r5, r3, r5
 8008cea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008cee:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008cf2:	e7e3      	b.n	8008cbc <_strtod_l+0x3fc>
 8008cf4:	9b06      	ldr	r3, [sp, #24]
 8008cf6:	3316      	adds	r3, #22
 8008cf8:	db0b      	blt.n	8008d12 <_strtod_l+0x452>
 8008cfa:	9b05      	ldr	r3, [sp, #20]
 8008cfc:	1b9e      	subs	r6, r3, r6
 8008cfe:	4b59      	ldr	r3, [pc, #356]	; (8008e64 <_strtod_l+0x5a4>)
 8008d00:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008d04:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d08:	4650      	mov	r0, sl
 8008d0a:	4659      	mov	r1, fp
 8008d0c:	f7f7 fd76 	bl	80007fc <__aeabi_ddiv>
 8008d10:	e7d6      	b.n	8008cc0 <_strtod_l+0x400>
 8008d12:	9b06      	ldr	r3, [sp, #24]
 8008d14:	eba5 0808 	sub.w	r8, r5, r8
 8008d18:	4498      	add	r8, r3
 8008d1a:	f1b8 0f00 	cmp.w	r8, #0
 8008d1e:	dd74      	ble.n	8008e0a <_strtod_l+0x54a>
 8008d20:	f018 030f 	ands.w	r3, r8, #15
 8008d24:	d00a      	beq.n	8008d3c <_strtod_l+0x47c>
 8008d26:	494f      	ldr	r1, [pc, #316]	; (8008e64 <_strtod_l+0x5a4>)
 8008d28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d2c:	4652      	mov	r2, sl
 8008d2e:	465b      	mov	r3, fp
 8008d30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d34:	f7f7 fc38 	bl	80005a8 <__aeabi_dmul>
 8008d38:	4682      	mov	sl, r0
 8008d3a:	468b      	mov	fp, r1
 8008d3c:	f038 080f 	bics.w	r8, r8, #15
 8008d40:	d04f      	beq.n	8008de2 <_strtod_l+0x522>
 8008d42:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008d46:	dd22      	ble.n	8008d8e <_strtod_l+0x4ce>
 8008d48:	2500      	movs	r5, #0
 8008d4a:	462e      	mov	r6, r5
 8008d4c:	9507      	str	r5, [sp, #28]
 8008d4e:	9505      	str	r5, [sp, #20]
 8008d50:	2322      	movs	r3, #34	; 0x22
 8008d52:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008e6c <_strtod_l+0x5ac>
 8008d56:	6023      	str	r3, [r4, #0]
 8008d58:	f04f 0a00 	mov.w	sl, #0
 8008d5c:	9b07      	ldr	r3, [sp, #28]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	f43f adf2 	beq.w	8008948 <_strtod_l+0x88>
 8008d64:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008d66:	4620      	mov	r0, r4
 8008d68:	f001 fe82 	bl	800aa70 <_Bfree>
 8008d6c:	9905      	ldr	r1, [sp, #20]
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f001 fe7e 	bl	800aa70 <_Bfree>
 8008d74:	4631      	mov	r1, r6
 8008d76:	4620      	mov	r0, r4
 8008d78:	f001 fe7a 	bl	800aa70 <_Bfree>
 8008d7c:	9907      	ldr	r1, [sp, #28]
 8008d7e:	4620      	mov	r0, r4
 8008d80:	f001 fe76 	bl	800aa70 <_Bfree>
 8008d84:	4629      	mov	r1, r5
 8008d86:	4620      	mov	r0, r4
 8008d88:	f001 fe72 	bl	800aa70 <_Bfree>
 8008d8c:	e5dc      	b.n	8008948 <_strtod_l+0x88>
 8008d8e:	4b36      	ldr	r3, [pc, #216]	; (8008e68 <_strtod_l+0x5a8>)
 8008d90:	9304      	str	r3, [sp, #16]
 8008d92:	2300      	movs	r3, #0
 8008d94:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008d98:	4650      	mov	r0, sl
 8008d9a:	4659      	mov	r1, fp
 8008d9c:	4699      	mov	r9, r3
 8008d9e:	f1b8 0f01 	cmp.w	r8, #1
 8008da2:	dc21      	bgt.n	8008de8 <_strtod_l+0x528>
 8008da4:	b10b      	cbz	r3, 8008daa <_strtod_l+0x4ea>
 8008da6:	4682      	mov	sl, r0
 8008da8:	468b      	mov	fp, r1
 8008daa:	4b2f      	ldr	r3, [pc, #188]	; (8008e68 <_strtod_l+0x5a8>)
 8008dac:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008db0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008db4:	4652      	mov	r2, sl
 8008db6:	465b      	mov	r3, fp
 8008db8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008dbc:	f7f7 fbf4 	bl	80005a8 <__aeabi_dmul>
 8008dc0:	4b2a      	ldr	r3, [pc, #168]	; (8008e6c <_strtod_l+0x5ac>)
 8008dc2:	460a      	mov	r2, r1
 8008dc4:	400b      	ands	r3, r1
 8008dc6:	492a      	ldr	r1, [pc, #168]	; (8008e70 <_strtod_l+0x5b0>)
 8008dc8:	428b      	cmp	r3, r1
 8008dca:	4682      	mov	sl, r0
 8008dcc:	d8bc      	bhi.n	8008d48 <_strtod_l+0x488>
 8008dce:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008dd2:	428b      	cmp	r3, r1
 8008dd4:	bf86      	itte	hi
 8008dd6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008e74 <_strtod_l+0x5b4>
 8008dda:	f04f 3aff 	movhi.w	sl, #4294967295
 8008dde:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008de2:	2300      	movs	r3, #0
 8008de4:	9304      	str	r3, [sp, #16]
 8008de6:	e084      	b.n	8008ef2 <_strtod_l+0x632>
 8008de8:	f018 0f01 	tst.w	r8, #1
 8008dec:	d005      	beq.n	8008dfa <_strtod_l+0x53a>
 8008dee:	9b04      	ldr	r3, [sp, #16]
 8008df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df4:	f7f7 fbd8 	bl	80005a8 <__aeabi_dmul>
 8008df8:	2301      	movs	r3, #1
 8008dfa:	9a04      	ldr	r2, [sp, #16]
 8008dfc:	3208      	adds	r2, #8
 8008dfe:	f109 0901 	add.w	r9, r9, #1
 8008e02:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008e06:	9204      	str	r2, [sp, #16]
 8008e08:	e7c9      	b.n	8008d9e <_strtod_l+0x4de>
 8008e0a:	d0ea      	beq.n	8008de2 <_strtod_l+0x522>
 8008e0c:	f1c8 0800 	rsb	r8, r8, #0
 8008e10:	f018 020f 	ands.w	r2, r8, #15
 8008e14:	d00a      	beq.n	8008e2c <_strtod_l+0x56c>
 8008e16:	4b13      	ldr	r3, [pc, #76]	; (8008e64 <_strtod_l+0x5a4>)
 8008e18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e1c:	4650      	mov	r0, sl
 8008e1e:	4659      	mov	r1, fp
 8008e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e24:	f7f7 fcea 	bl	80007fc <__aeabi_ddiv>
 8008e28:	4682      	mov	sl, r0
 8008e2a:	468b      	mov	fp, r1
 8008e2c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008e30:	d0d7      	beq.n	8008de2 <_strtod_l+0x522>
 8008e32:	f1b8 0f1f 	cmp.w	r8, #31
 8008e36:	dd1f      	ble.n	8008e78 <_strtod_l+0x5b8>
 8008e38:	2500      	movs	r5, #0
 8008e3a:	462e      	mov	r6, r5
 8008e3c:	9507      	str	r5, [sp, #28]
 8008e3e:	9505      	str	r5, [sp, #20]
 8008e40:	2322      	movs	r3, #34	; 0x22
 8008e42:	f04f 0a00 	mov.w	sl, #0
 8008e46:	f04f 0b00 	mov.w	fp, #0
 8008e4a:	6023      	str	r3, [r4, #0]
 8008e4c:	e786      	b.n	8008d5c <_strtod_l+0x49c>
 8008e4e:	bf00      	nop
 8008e50:	0800de71 	.word	0x0800de71
 8008e54:	0800deb4 	.word	0x0800deb4
 8008e58:	0800de69 	.word	0x0800de69
 8008e5c:	0800dff4 	.word	0x0800dff4
 8008e60:	0800e2a0 	.word	0x0800e2a0
 8008e64:	0800e180 	.word	0x0800e180
 8008e68:	0800e158 	.word	0x0800e158
 8008e6c:	7ff00000 	.word	0x7ff00000
 8008e70:	7ca00000 	.word	0x7ca00000
 8008e74:	7fefffff 	.word	0x7fefffff
 8008e78:	f018 0310 	ands.w	r3, r8, #16
 8008e7c:	bf18      	it	ne
 8008e7e:	236a      	movne	r3, #106	; 0x6a
 8008e80:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009230 <_strtod_l+0x970>
 8008e84:	9304      	str	r3, [sp, #16]
 8008e86:	4650      	mov	r0, sl
 8008e88:	4659      	mov	r1, fp
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	f018 0f01 	tst.w	r8, #1
 8008e90:	d004      	beq.n	8008e9c <_strtod_l+0x5dc>
 8008e92:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008e96:	f7f7 fb87 	bl	80005a8 <__aeabi_dmul>
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008ea0:	f109 0908 	add.w	r9, r9, #8
 8008ea4:	d1f2      	bne.n	8008e8c <_strtod_l+0x5cc>
 8008ea6:	b10b      	cbz	r3, 8008eac <_strtod_l+0x5ec>
 8008ea8:	4682      	mov	sl, r0
 8008eaa:	468b      	mov	fp, r1
 8008eac:	9b04      	ldr	r3, [sp, #16]
 8008eae:	b1c3      	cbz	r3, 8008ee2 <_strtod_l+0x622>
 8008eb0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008eb4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	4659      	mov	r1, fp
 8008ebc:	dd11      	ble.n	8008ee2 <_strtod_l+0x622>
 8008ebe:	2b1f      	cmp	r3, #31
 8008ec0:	f340 8124 	ble.w	800910c <_strtod_l+0x84c>
 8008ec4:	2b34      	cmp	r3, #52	; 0x34
 8008ec6:	bfde      	ittt	le
 8008ec8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008ecc:	f04f 33ff 	movle.w	r3, #4294967295
 8008ed0:	fa03 f202 	lslle.w	r2, r3, r2
 8008ed4:	f04f 0a00 	mov.w	sl, #0
 8008ed8:	bfcc      	ite	gt
 8008eda:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008ede:	ea02 0b01 	andle.w	fp, r2, r1
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	4650      	mov	r0, sl
 8008ee8:	4659      	mov	r1, fp
 8008eea:	f7f7 fdc5 	bl	8000a78 <__aeabi_dcmpeq>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	d1a2      	bne.n	8008e38 <_strtod_l+0x578>
 8008ef2:	9b07      	ldr	r3, [sp, #28]
 8008ef4:	9300      	str	r3, [sp, #0]
 8008ef6:	9908      	ldr	r1, [sp, #32]
 8008ef8:	462b      	mov	r3, r5
 8008efa:	463a      	mov	r2, r7
 8008efc:	4620      	mov	r0, r4
 8008efe:	f001 fe1f 	bl	800ab40 <__s2b>
 8008f02:	9007      	str	r0, [sp, #28]
 8008f04:	2800      	cmp	r0, #0
 8008f06:	f43f af1f 	beq.w	8008d48 <_strtod_l+0x488>
 8008f0a:	9b05      	ldr	r3, [sp, #20]
 8008f0c:	1b9e      	subs	r6, r3, r6
 8008f0e:	9b06      	ldr	r3, [sp, #24]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	bfb4      	ite	lt
 8008f14:	4633      	movlt	r3, r6
 8008f16:	2300      	movge	r3, #0
 8008f18:	930c      	str	r3, [sp, #48]	; 0x30
 8008f1a:	9b06      	ldr	r3, [sp, #24]
 8008f1c:	2500      	movs	r5, #0
 8008f1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008f22:	9312      	str	r3, [sp, #72]	; 0x48
 8008f24:	462e      	mov	r6, r5
 8008f26:	9b07      	ldr	r3, [sp, #28]
 8008f28:	4620      	mov	r0, r4
 8008f2a:	6859      	ldr	r1, [r3, #4]
 8008f2c:	f001 fd60 	bl	800a9f0 <_Balloc>
 8008f30:	9005      	str	r0, [sp, #20]
 8008f32:	2800      	cmp	r0, #0
 8008f34:	f43f af0c 	beq.w	8008d50 <_strtod_l+0x490>
 8008f38:	9b07      	ldr	r3, [sp, #28]
 8008f3a:	691a      	ldr	r2, [r3, #16]
 8008f3c:	3202      	adds	r2, #2
 8008f3e:	f103 010c 	add.w	r1, r3, #12
 8008f42:	0092      	lsls	r2, r2, #2
 8008f44:	300c      	adds	r0, #12
 8008f46:	f7fe fdcd 	bl	8007ae4 <memcpy>
 8008f4a:	ec4b ab10 	vmov	d0, sl, fp
 8008f4e:	aa1a      	add	r2, sp, #104	; 0x68
 8008f50:	a919      	add	r1, sp, #100	; 0x64
 8008f52:	4620      	mov	r0, r4
 8008f54:	f002 f93a 	bl	800b1cc <__d2b>
 8008f58:	ec4b ab18 	vmov	d8, sl, fp
 8008f5c:	9018      	str	r0, [sp, #96]	; 0x60
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	f43f aef6 	beq.w	8008d50 <_strtod_l+0x490>
 8008f64:	2101      	movs	r1, #1
 8008f66:	4620      	mov	r0, r4
 8008f68:	f001 fe84 	bl	800ac74 <__i2b>
 8008f6c:	4606      	mov	r6, r0
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	f43f aeee 	beq.w	8008d50 <_strtod_l+0x490>
 8008f74:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008f76:	9904      	ldr	r1, [sp, #16]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	bfab      	itete	ge
 8008f7c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008f7e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008f80:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008f82:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008f86:	bfac      	ite	ge
 8008f88:	eb03 0902 	addge.w	r9, r3, r2
 8008f8c:	1ad7      	sublt	r7, r2, r3
 8008f8e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008f90:	eba3 0801 	sub.w	r8, r3, r1
 8008f94:	4490      	add	r8, r2
 8008f96:	4ba1      	ldr	r3, [pc, #644]	; (800921c <_strtod_l+0x95c>)
 8008f98:	f108 38ff 	add.w	r8, r8, #4294967295
 8008f9c:	4598      	cmp	r8, r3
 8008f9e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008fa2:	f280 80c7 	bge.w	8009134 <_strtod_l+0x874>
 8008fa6:	eba3 0308 	sub.w	r3, r3, r8
 8008faa:	2b1f      	cmp	r3, #31
 8008fac:	eba2 0203 	sub.w	r2, r2, r3
 8008fb0:	f04f 0101 	mov.w	r1, #1
 8008fb4:	f300 80b1 	bgt.w	800911a <_strtod_l+0x85a>
 8008fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8008fbc:	930d      	str	r3, [sp, #52]	; 0x34
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	9308      	str	r3, [sp, #32]
 8008fc2:	eb09 0802 	add.w	r8, r9, r2
 8008fc6:	9b04      	ldr	r3, [sp, #16]
 8008fc8:	45c1      	cmp	r9, r8
 8008fca:	4417      	add	r7, r2
 8008fcc:	441f      	add	r7, r3
 8008fce:	464b      	mov	r3, r9
 8008fd0:	bfa8      	it	ge
 8008fd2:	4643      	movge	r3, r8
 8008fd4:	42bb      	cmp	r3, r7
 8008fd6:	bfa8      	it	ge
 8008fd8:	463b      	movge	r3, r7
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	bfc2      	ittt	gt
 8008fde:	eba8 0803 	subgt.w	r8, r8, r3
 8008fe2:	1aff      	subgt	r7, r7, r3
 8008fe4:	eba9 0903 	subgt.w	r9, r9, r3
 8008fe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	dd17      	ble.n	800901e <_strtod_l+0x75e>
 8008fee:	4631      	mov	r1, r6
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	f001 fefe 	bl	800adf4 <__pow5mult>
 8008ff8:	4606      	mov	r6, r0
 8008ffa:	2800      	cmp	r0, #0
 8008ffc:	f43f aea8 	beq.w	8008d50 <_strtod_l+0x490>
 8009000:	4601      	mov	r1, r0
 8009002:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009004:	4620      	mov	r0, r4
 8009006:	f001 fe4b 	bl	800aca0 <__multiply>
 800900a:	900b      	str	r0, [sp, #44]	; 0x2c
 800900c:	2800      	cmp	r0, #0
 800900e:	f43f ae9f 	beq.w	8008d50 <_strtod_l+0x490>
 8009012:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009014:	4620      	mov	r0, r4
 8009016:	f001 fd2b 	bl	800aa70 <_Bfree>
 800901a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800901c:	9318      	str	r3, [sp, #96]	; 0x60
 800901e:	f1b8 0f00 	cmp.w	r8, #0
 8009022:	f300 808c 	bgt.w	800913e <_strtod_l+0x87e>
 8009026:	9b06      	ldr	r3, [sp, #24]
 8009028:	2b00      	cmp	r3, #0
 800902a:	dd08      	ble.n	800903e <_strtod_l+0x77e>
 800902c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800902e:	9905      	ldr	r1, [sp, #20]
 8009030:	4620      	mov	r0, r4
 8009032:	f001 fedf 	bl	800adf4 <__pow5mult>
 8009036:	9005      	str	r0, [sp, #20]
 8009038:	2800      	cmp	r0, #0
 800903a:	f43f ae89 	beq.w	8008d50 <_strtod_l+0x490>
 800903e:	2f00      	cmp	r7, #0
 8009040:	dd08      	ble.n	8009054 <_strtod_l+0x794>
 8009042:	9905      	ldr	r1, [sp, #20]
 8009044:	463a      	mov	r2, r7
 8009046:	4620      	mov	r0, r4
 8009048:	f001 ff2e 	bl	800aea8 <__lshift>
 800904c:	9005      	str	r0, [sp, #20]
 800904e:	2800      	cmp	r0, #0
 8009050:	f43f ae7e 	beq.w	8008d50 <_strtod_l+0x490>
 8009054:	f1b9 0f00 	cmp.w	r9, #0
 8009058:	dd08      	ble.n	800906c <_strtod_l+0x7ac>
 800905a:	4631      	mov	r1, r6
 800905c:	464a      	mov	r2, r9
 800905e:	4620      	mov	r0, r4
 8009060:	f001 ff22 	bl	800aea8 <__lshift>
 8009064:	4606      	mov	r6, r0
 8009066:	2800      	cmp	r0, #0
 8009068:	f43f ae72 	beq.w	8008d50 <_strtod_l+0x490>
 800906c:	9a05      	ldr	r2, [sp, #20]
 800906e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009070:	4620      	mov	r0, r4
 8009072:	f001 ffa5 	bl	800afc0 <__mdiff>
 8009076:	4605      	mov	r5, r0
 8009078:	2800      	cmp	r0, #0
 800907a:	f43f ae69 	beq.w	8008d50 <_strtod_l+0x490>
 800907e:	68c3      	ldr	r3, [r0, #12]
 8009080:	930b      	str	r3, [sp, #44]	; 0x2c
 8009082:	2300      	movs	r3, #0
 8009084:	60c3      	str	r3, [r0, #12]
 8009086:	4631      	mov	r1, r6
 8009088:	f001 ff7e 	bl	800af88 <__mcmp>
 800908c:	2800      	cmp	r0, #0
 800908e:	da60      	bge.n	8009152 <_strtod_l+0x892>
 8009090:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009092:	ea53 030a 	orrs.w	r3, r3, sl
 8009096:	f040 8082 	bne.w	800919e <_strtod_l+0x8de>
 800909a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d17d      	bne.n	800919e <_strtod_l+0x8de>
 80090a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80090a6:	0d1b      	lsrs	r3, r3, #20
 80090a8:	051b      	lsls	r3, r3, #20
 80090aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80090ae:	d976      	bls.n	800919e <_strtod_l+0x8de>
 80090b0:	696b      	ldr	r3, [r5, #20]
 80090b2:	b913      	cbnz	r3, 80090ba <_strtod_l+0x7fa>
 80090b4:	692b      	ldr	r3, [r5, #16]
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	dd71      	ble.n	800919e <_strtod_l+0x8de>
 80090ba:	4629      	mov	r1, r5
 80090bc:	2201      	movs	r2, #1
 80090be:	4620      	mov	r0, r4
 80090c0:	f001 fef2 	bl	800aea8 <__lshift>
 80090c4:	4631      	mov	r1, r6
 80090c6:	4605      	mov	r5, r0
 80090c8:	f001 ff5e 	bl	800af88 <__mcmp>
 80090cc:	2800      	cmp	r0, #0
 80090ce:	dd66      	ble.n	800919e <_strtod_l+0x8de>
 80090d0:	9904      	ldr	r1, [sp, #16]
 80090d2:	4a53      	ldr	r2, [pc, #332]	; (8009220 <_strtod_l+0x960>)
 80090d4:	465b      	mov	r3, fp
 80090d6:	2900      	cmp	r1, #0
 80090d8:	f000 8081 	beq.w	80091de <_strtod_l+0x91e>
 80090dc:	ea02 010b 	and.w	r1, r2, fp
 80090e0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80090e4:	dc7b      	bgt.n	80091de <_strtod_l+0x91e>
 80090e6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80090ea:	f77f aea9 	ble.w	8008e40 <_strtod_l+0x580>
 80090ee:	4b4d      	ldr	r3, [pc, #308]	; (8009224 <_strtod_l+0x964>)
 80090f0:	4650      	mov	r0, sl
 80090f2:	4659      	mov	r1, fp
 80090f4:	2200      	movs	r2, #0
 80090f6:	f7f7 fa57 	bl	80005a8 <__aeabi_dmul>
 80090fa:	460b      	mov	r3, r1
 80090fc:	4303      	orrs	r3, r0
 80090fe:	bf08      	it	eq
 8009100:	2322      	moveq	r3, #34	; 0x22
 8009102:	4682      	mov	sl, r0
 8009104:	468b      	mov	fp, r1
 8009106:	bf08      	it	eq
 8009108:	6023      	streq	r3, [r4, #0]
 800910a:	e62b      	b.n	8008d64 <_strtod_l+0x4a4>
 800910c:	f04f 32ff 	mov.w	r2, #4294967295
 8009110:	fa02 f303 	lsl.w	r3, r2, r3
 8009114:	ea03 0a0a 	and.w	sl, r3, sl
 8009118:	e6e3      	b.n	8008ee2 <_strtod_l+0x622>
 800911a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800911e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009122:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009126:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800912a:	fa01 f308 	lsl.w	r3, r1, r8
 800912e:	9308      	str	r3, [sp, #32]
 8009130:	910d      	str	r1, [sp, #52]	; 0x34
 8009132:	e746      	b.n	8008fc2 <_strtod_l+0x702>
 8009134:	2300      	movs	r3, #0
 8009136:	9308      	str	r3, [sp, #32]
 8009138:	2301      	movs	r3, #1
 800913a:	930d      	str	r3, [sp, #52]	; 0x34
 800913c:	e741      	b.n	8008fc2 <_strtod_l+0x702>
 800913e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009140:	4642      	mov	r2, r8
 8009142:	4620      	mov	r0, r4
 8009144:	f001 feb0 	bl	800aea8 <__lshift>
 8009148:	9018      	str	r0, [sp, #96]	; 0x60
 800914a:	2800      	cmp	r0, #0
 800914c:	f47f af6b 	bne.w	8009026 <_strtod_l+0x766>
 8009150:	e5fe      	b.n	8008d50 <_strtod_l+0x490>
 8009152:	465f      	mov	r7, fp
 8009154:	d16e      	bne.n	8009234 <_strtod_l+0x974>
 8009156:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009158:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800915c:	b342      	cbz	r2, 80091b0 <_strtod_l+0x8f0>
 800915e:	4a32      	ldr	r2, [pc, #200]	; (8009228 <_strtod_l+0x968>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d128      	bne.n	80091b6 <_strtod_l+0x8f6>
 8009164:	9b04      	ldr	r3, [sp, #16]
 8009166:	4651      	mov	r1, sl
 8009168:	b1eb      	cbz	r3, 80091a6 <_strtod_l+0x8e6>
 800916a:	4b2d      	ldr	r3, [pc, #180]	; (8009220 <_strtod_l+0x960>)
 800916c:	403b      	ands	r3, r7
 800916e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009172:	f04f 32ff 	mov.w	r2, #4294967295
 8009176:	d819      	bhi.n	80091ac <_strtod_l+0x8ec>
 8009178:	0d1b      	lsrs	r3, r3, #20
 800917a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800917e:	fa02 f303 	lsl.w	r3, r2, r3
 8009182:	4299      	cmp	r1, r3
 8009184:	d117      	bne.n	80091b6 <_strtod_l+0x8f6>
 8009186:	4b29      	ldr	r3, [pc, #164]	; (800922c <_strtod_l+0x96c>)
 8009188:	429f      	cmp	r7, r3
 800918a:	d102      	bne.n	8009192 <_strtod_l+0x8d2>
 800918c:	3101      	adds	r1, #1
 800918e:	f43f addf 	beq.w	8008d50 <_strtod_l+0x490>
 8009192:	4b23      	ldr	r3, [pc, #140]	; (8009220 <_strtod_l+0x960>)
 8009194:	403b      	ands	r3, r7
 8009196:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800919a:	f04f 0a00 	mov.w	sl, #0
 800919e:	9b04      	ldr	r3, [sp, #16]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d1a4      	bne.n	80090ee <_strtod_l+0x82e>
 80091a4:	e5de      	b.n	8008d64 <_strtod_l+0x4a4>
 80091a6:	f04f 33ff 	mov.w	r3, #4294967295
 80091aa:	e7ea      	b.n	8009182 <_strtod_l+0x8c2>
 80091ac:	4613      	mov	r3, r2
 80091ae:	e7e8      	b.n	8009182 <_strtod_l+0x8c2>
 80091b0:	ea53 030a 	orrs.w	r3, r3, sl
 80091b4:	d08c      	beq.n	80090d0 <_strtod_l+0x810>
 80091b6:	9b08      	ldr	r3, [sp, #32]
 80091b8:	b1db      	cbz	r3, 80091f2 <_strtod_l+0x932>
 80091ba:	423b      	tst	r3, r7
 80091bc:	d0ef      	beq.n	800919e <_strtod_l+0x8de>
 80091be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091c0:	9a04      	ldr	r2, [sp, #16]
 80091c2:	4650      	mov	r0, sl
 80091c4:	4659      	mov	r1, fp
 80091c6:	b1c3      	cbz	r3, 80091fa <_strtod_l+0x93a>
 80091c8:	f7ff fb5c 	bl	8008884 <sulp>
 80091cc:	4602      	mov	r2, r0
 80091ce:	460b      	mov	r3, r1
 80091d0:	ec51 0b18 	vmov	r0, r1, d8
 80091d4:	f7f7 f832 	bl	800023c <__adddf3>
 80091d8:	4682      	mov	sl, r0
 80091da:	468b      	mov	fp, r1
 80091dc:	e7df      	b.n	800919e <_strtod_l+0x8de>
 80091de:	4013      	ands	r3, r2
 80091e0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80091e4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80091e8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80091ec:	f04f 3aff 	mov.w	sl, #4294967295
 80091f0:	e7d5      	b.n	800919e <_strtod_l+0x8de>
 80091f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091f4:	ea13 0f0a 	tst.w	r3, sl
 80091f8:	e7e0      	b.n	80091bc <_strtod_l+0x8fc>
 80091fa:	f7ff fb43 	bl	8008884 <sulp>
 80091fe:	4602      	mov	r2, r0
 8009200:	460b      	mov	r3, r1
 8009202:	ec51 0b18 	vmov	r0, r1, d8
 8009206:	f7f7 f817 	bl	8000238 <__aeabi_dsub>
 800920a:	2200      	movs	r2, #0
 800920c:	2300      	movs	r3, #0
 800920e:	4682      	mov	sl, r0
 8009210:	468b      	mov	fp, r1
 8009212:	f7f7 fc31 	bl	8000a78 <__aeabi_dcmpeq>
 8009216:	2800      	cmp	r0, #0
 8009218:	d0c1      	beq.n	800919e <_strtod_l+0x8de>
 800921a:	e611      	b.n	8008e40 <_strtod_l+0x580>
 800921c:	fffffc02 	.word	0xfffffc02
 8009220:	7ff00000 	.word	0x7ff00000
 8009224:	39500000 	.word	0x39500000
 8009228:	000fffff 	.word	0x000fffff
 800922c:	7fefffff 	.word	0x7fefffff
 8009230:	0800dec8 	.word	0x0800dec8
 8009234:	4631      	mov	r1, r6
 8009236:	4628      	mov	r0, r5
 8009238:	f002 f824 	bl	800b284 <__ratio>
 800923c:	ec59 8b10 	vmov	r8, r9, d0
 8009240:	ee10 0a10 	vmov	r0, s0
 8009244:	2200      	movs	r2, #0
 8009246:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800924a:	4649      	mov	r1, r9
 800924c:	f7f7 fc28 	bl	8000aa0 <__aeabi_dcmple>
 8009250:	2800      	cmp	r0, #0
 8009252:	d07a      	beq.n	800934a <_strtod_l+0xa8a>
 8009254:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009256:	2b00      	cmp	r3, #0
 8009258:	d04a      	beq.n	80092f0 <_strtod_l+0xa30>
 800925a:	4b95      	ldr	r3, [pc, #596]	; (80094b0 <_strtod_l+0xbf0>)
 800925c:	2200      	movs	r2, #0
 800925e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009262:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80094b0 <_strtod_l+0xbf0>
 8009266:	f04f 0800 	mov.w	r8, #0
 800926a:	4b92      	ldr	r3, [pc, #584]	; (80094b4 <_strtod_l+0xbf4>)
 800926c:	403b      	ands	r3, r7
 800926e:	930d      	str	r3, [sp, #52]	; 0x34
 8009270:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009272:	4b91      	ldr	r3, [pc, #580]	; (80094b8 <_strtod_l+0xbf8>)
 8009274:	429a      	cmp	r2, r3
 8009276:	f040 80b0 	bne.w	80093da <_strtod_l+0xb1a>
 800927a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800927e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009282:	ec4b ab10 	vmov	d0, sl, fp
 8009286:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800928a:	f001 ff23 	bl	800b0d4 <__ulp>
 800928e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009292:	ec53 2b10 	vmov	r2, r3, d0
 8009296:	f7f7 f987 	bl	80005a8 <__aeabi_dmul>
 800929a:	4652      	mov	r2, sl
 800929c:	465b      	mov	r3, fp
 800929e:	f7f6 ffcd 	bl	800023c <__adddf3>
 80092a2:	460b      	mov	r3, r1
 80092a4:	4983      	ldr	r1, [pc, #524]	; (80094b4 <_strtod_l+0xbf4>)
 80092a6:	4a85      	ldr	r2, [pc, #532]	; (80094bc <_strtod_l+0xbfc>)
 80092a8:	4019      	ands	r1, r3
 80092aa:	4291      	cmp	r1, r2
 80092ac:	4682      	mov	sl, r0
 80092ae:	d960      	bls.n	8009372 <_strtod_l+0xab2>
 80092b0:	ee18 3a90 	vmov	r3, s17
 80092b4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d104      	bne.n	80092c6 <_strtod_l+0xa06>
 80092bc:	ee18 3a10 	vmov	r3, s16
 80092c0:	3301      	adds	r3, #1
 80092c2:	f43f ad45 	beq.w	8008d50 <_strtod_l+0x490>
 80092c6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80094c8 <_strtod_l+0xc08>
 80092ca:	f04f 3aff 	mov.w	sl, #4294967295
 80092ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80092d0:	4620      	mov	r0, r4
 80092d2:	f001 fbcd 	bl	800aa70 <_Bfree>
 80092d6:	9905      	ldr	r1, [sp, #20]
 80092d8:	4620      	mov	r0, r4
 80092da:	f001 fbc9 	bl	800aa70 <_Bfree>
 80092de:	4631      	mov	r1, r6
 80092e0:	4620      	mov	r0, r4
 80092e2:	f001 fbc5 	bl	800aa70 <_Bfree>
 80092e6:	4629      	mov	r1, r5
 80092e8:	4620      	mov	r0, r4
 80092ea:	f001 fbc1 	bl	800aa70 <_Bfree>
 80092ee:	e61a      	b.n	8008f26 <_strtod_l+0x666>
 80092f0:	f1ba 0f00 	cmp.w	sl, #0
 80092f4:	d11b      	bne.n	800932e <_strtod_l+0xa6e>
 80092f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092fa:	b9f3      	cbnz	r3, 800933a <_strtod_l+0xa7a>
 80092fc:	4b6c      	ldr	r3, [pc, #432]	; (80094b0 <_strtod_l+0xbf0>)
 80092fe:	2200      	movs	r2, #0
 8009300:	4640      	mov	r0, r8
 8009302:	4649      	mov	r1, r9
 8009304:	f7f7 fbc2 	bl	8000a8c <__aeabi_dcmplt>
 8009308:	b9d0      	cbnz	r0, 8009340 <_strtod_l+0xa80>
 800930a:	4640      	mov	r0, r8
 800930c:	4649      	mov	r1, r9
 800930e:	4b6c      	ldr	r3, [pc, #432]	; (80094c0 <_strtod_l+0xc00>)
 8009310:	2200      	movs	r2, #0
 8009312:	f7f7 f949 	bl	80005a8 <__aeabi_dmul>
 8009316:	4680      	mov	r8, r0
 8009318:	4689      	mov	r9, r1
 800931a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800931e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009322:	9315      	str	r3, [sp, #84]	; 0x54
 8009324:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009328:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800932c:	e79d      	b.n	800926a <_strtod_l+0x9aa>
 800932e:	f1ba 0f01 	cmp.w	sl, #1
 8009332:	d102      	bne.n	800933a <_strtod_l+0xa7a>
 8009334:	2f00      	cmp	r7, #0
 8009336:	f43f ad83 	beq.w	8008e40 <_strtod_l+0x580>
 800933a:	4b62      	ldr	r3, [pc, #392]	; (80094c4 <_strtod_l+0xc04>)
 800933c:	2200      	movs	r2, #0
 800933e:	e78e      	b.n	800925e <_strtod_l+0x99e>
 8009340:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80094c0 <_strtod_l+0xc00>
 8009344:	f04f 0800 	mov.w	r8, #0
 8009348:	e7e7      	b.n	800931a <_strtod_l+0xa5a>
 800934a:	4b5d      	ldr	r3, [pc, #372]	; (80094c0 <_strtod_l+0xc00>)
 800934c:	4640      	mov	r0, r8
 800934e:	4649      	mov	r1, r9
 8009350:	2200      	movs	r2, #0
 8009352:	f7f7 f929 	bl	80005a8 <__aeabi_dmul>
 8009356:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009358:	4680      	mov	r8, r0
 800935a:	4689      	mov	r9, r1
 800935c:	b933      	cbnz	r3, 800936c <_strtod_l+0xaac>
 800935e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009362:	900e      	str	r0, [sp, #56]	; 0x38
 8009364:	930f      	str	r3, [sp, #60]	; 0x3c
 8009366:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800936a:	e7dd      	b.n	8009328 <_strtod_l+0xa68>
 800936c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009370:	e7f9      	b.n	8009366 <_strtod_l+0xaa6>
 8009372:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009376:	9b04      	ldr	r3, [sp, #16]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d1a8      	bne.n	80092ce <_strtod_l+0xa0e>
 800937c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009380:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009382:	0d1b      	lsrs	r3, r3, #20
 8009384:	051b      	lsls	r3, r3, #20
 8009386:	429a      	cmp	r2, r3
 8009388:	d1a1      	bne.n	80092ce <_strtod_l+0xa0e>
 800938a:	4640      	mov	r0, r8
 800938c:	4649      	mov	r1, r9
 800938e:	f7f7 fc53 	bl	8000c38 <__aeabi_d2lz>
 8009392:	f7f7 f8db 	bl	800054c <__aeabi_l2d>
 8009396:	4602      	mov	r2, r0
 8009398:	460b      	mov	r3, r1
 800939a:	4640      	mov	r0, r8
 800939c:	4649      	mov	r1, r9
 800939e:	f7f6 ff4b 	bl	8000238 <__aeabi_dsub>
 80093a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80093a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093a8:	ea43 030a 	orr.w	r3, r3, sl
 80093ac:	4313      	orrs	r3, r2
 80093ae:	4680      	mov	r8, r0
 80093b0:	4689      	mov	r9, r1
 80093b2:	d055      	beq.n	8009460 <_strtod_l+0xba0>
 80093b4:	a336      	add	r3, pc, #216	; (adr r3, 8009490 <_strtod_l+0xbd0>)
 80093b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ba:	f7f7 fb67 	bl	8000a8c <__aeabi_dcmplt>
 80093be:	2800      	cmp	r0, #0
 80093c0:	f47f acd0 	bne.w	8008d64 <_strtod_l+0x4a4>
 80093c4:	a334      	add	r3, pc, #208	; (adr r3, 8009498 <_strtod_l+0xbd8>)
 80093c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ca:	4640      	mov	r0, r8
 80093cc:	4649      	mov	r1, r9
 80093ce:	f7f7 fb7b 	bl	8000ac8 <__aeabi_dcmpgt>
 80093d2:	2800      	cmp	r0, #0
 80093d4:	f43f af7b 	beq.w	80092ce <_strtod_l+0xa0e>
 80093d8:	e4c4      	b.n	8008d64 <_strtod_l+0x4a4>
 80093da:	9b04      	ldr	r3, [sp, #16]
 80093dc:	b333      	cbz	r3, 800942c <_strtod_l+0xb6c>
 80093de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093e0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80093e4:	d822      	bhi.n	800942c <_strtod_l+0xb6c>
 80093e6:	a32e      	add	r3, pc, #184	; (adr r3, 80094a0 <_strtod_l+0xbe0>)
 80093e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ec:	4640      	mov	r0, r8
 80093ee:	4649      	mov	r1, r9
 80093f0:	f7f7 fb56 	bl	8000aa0 <__aeabi_dcmple>
 80093f4:	b1a0      	cbz	r0, 8009420 <_strtod_l+0xb60>
 80093f6:	4649      	mov	r1, r9
 80093f8:	4640      	mov	r0, r8
 80093fa:	f7f7 fbad 	bl	8000b58 <__aeabi_d2uiz>
 80093fe:	2801      	cmp	r0, #1
 8009400:	bf38      	it	cc
 8009402:	2001      	movcc	r0, #1
 8009404:	f7f7 f856 	bl	80004b4 <__aeabi_ui2d>
 8009408:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800940a:	4680      	mov	r8, r0
 800940c:	4689      	mov	r9, r1
 800940e:	bb23      	cbnz	r3, 800945a <_strtod_l+0xb9a>
 8009410:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009414:	9010      	str	r0, [sp, #64]	; 0x40
 8009416:	9311      	str	r3, [sp, #68]	; 0x44
 8009418:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800941c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009422:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009424:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009428:	1a9b      	subs	r3, r3, r2
 800942a:	9309      	str	r3, [sp, #36]	; 0x24
 800942c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009430:	eeb0 0a48 	vmov.f32	s0, s16
 8009434:	eef0 0a68 	vmov.f32	s1, s17
 8009438:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800943c:	f001 fe4a 	bl	800b0d4 <__ulp>
 8009440:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009444:	ec53 2b10 	vmov	r2, r3, d0
 8009448:	f7f7 f8ae 	bl	80005a8 <__aeabi_dmul>
 800944c:	ec53 2b18 	vmov	r2, r3, d8
 8009450:	f7f6 fef4 	bl	800023c <__adddf3>
 8009454:	4682      	mov	sl, r0
 8009456:	468b      	mov	fp, r1
 8009458:	e78d      	b.n	8009376 <_strtod_l+0xab6>
 800945a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800945e:	e7db      	b.n	8009418 <_strtod_l+0xb58>
 8009460:	a311      	add	r3, pc, #68	; (adr r3, 80094a8 <_strtod_l+0xbe8>)
 8009462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009466:	f7f7 fb11 	bl	8000a8c <__aeabi_dcmplt>
 800946a:	e7b2      	b.n	80093d2 <_strtod_l+0xb12>
 800946c:	2300      	movs	r3, #0
 800946e:	930a      	str	r3, [sp, #40]	; 0x28
 8009470:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009472:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009474:	6013      	str	r3, [r2, #0]
 8009476:	f7ff ba6b 	b.w	8008950 <_strtod_l+0x90>
 800947a:	2a65      	cmp	r2, #101	; 0x65
 800947c:	f43f ab5f 	beq.w	8008b3e <_strtod_l+0x27e>
 8009480:	2a45      	cmp	r2, #69	; 0x45
 8009482:	f43f ab5c 	beq.w	8008b3e <_strtod_l+0x27e>
 8009486:	2301      	movs	r3, #1
 8009488:	f7ff bb94 	b.w	8008bb4 <_strtod_l+0x2f4>
 800948c:	f3af 8000 	nop.w
 8009490:	94a03595 	.word	0x94a03595
 8009494:	3fdfffff 	.word	0x3fdfffff
 8009498:	35afe535 	.word	0x35afe535
 800949c:	3fe00000 	.word	0x3fe00000
 80094a0:	ffc00000 	.word	0xffc00000
 80094a4:	41dfffff 	.word	0x41dfffff
 80094a8:	94a03595 	.word	0x94a03595
 80094ac:	3fcfffff 	.word	0x3fcfffff
 80094b0:	3ff00000 	.word	0x3ff00000
 80094b4:	7ff00000 	.word	0x7ff00000
 80094b8:	7fe00000 	.word	0x7fe00000
 80094bc:	7c9fffff 	.word	0x7c9fffff
 80094c0:	3fe00000 	.word	0x3fe00000
 80094c4:	bff00000 	.word	0xbff00000
 80094c8:	7fefffff 	.word	0x7fefffff

080094cc <_strtod_r>:
 80094cc:	4b01      	ldr	r3, [pc, #4]	; (80094d4 <_strtod_r+0x8>)
 80094ce:	f7ff b9f7 	b.w	80088c0 <_strtod_l>
 80094d2:	bf00      	nop
 80094d4:	20000170 	.word	0x20000170

080094d8 <_strtol_l.constprop.0>:
 80094d8:	2b01      	cmp	r3, #1
 80094da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094de:	d001      	beq.n	80094e4 <_strtol_l.constprop.0+0xc>
 80094e0:	2b24      	cmp	r3, #36	; 0x24
 80094e2:	d906      	bls.n	80094f2 <_strtol_l.constprop.0+0x1a>
 80094e4:	f7fe fad4 	bl	8007a90 <__errno>
 80094e8:	2316      	movs	r3, #22
 80094ea:	6003      	str	r3, [r0, #0]
 80094ec:	2000      	movs	r0, #0
 80094ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094f2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80095d8 <_strtol_l.constprop.0+0x100>
 80094f6:	460d      	mov	r5, r1
 80094f8:	462e      	mov	r6, r5
 80094fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094fe:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009502:	f017 0708 	ands.w	r7, r7, #8
 8009506:	d1f7      	bne.n	80094f8 <_strtol_l.constprop.0+0x20>
 8009508:	2c2d      	cmp	r4, #45	; 0x2d
 800950a:	d132      	bne.n	8009572 <_strtol_l.constprop.0+0x9a>
 800950c:	782c      	ldrb	r4, [r5, #0]
 800950e:	2701      	movs	r7, #1
 8009510:	1cb5      	adds	r5, r6, #2
 8009512:	2b00      	cmp	r3, #0
 8009514:	d05b      	beq.n	80095ce <_strtol_l.constprop.0+0xf6>
 8009516:	2b10      	cmp	r3, #16
 8009518:	d109      	bne.n	800952e <_strtol_l.constprop.0+0x56>
 800951a:	2c30      	cmp	r4, #48	; 0x30
 800951c:	d107      	bne.n	800952e <_strtol_l.constprop.0+0x56>
 800951e:	782c      	ldrb	r4, [r5, #0]
 8009520:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009524:	2c58      	cmp	r4, #88	; 0x58
 8009526:	d14d      	bne.n	80095c4 <_strtol_l.constprop.0+0xec>
 8009528:	786c      	ldrb	r4, [r5, #1]
 800952a:	2310      	movs	r3, #16
 800952c:	3502      	adds	r5, #2
 800952e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009532:	f108 38ff 	add.w	r8, r8, #4294967295
 8009536:	f04f 0c00 	mov.w	ip, #0
 800953a:	fbb8 f9f3 	udiv	r9, r8, r3
 800953e:	4666      	mov	r6, ip
 8009540:	fb03 8a19 	mls	sl, r3, r9, r8
 8009544:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009548:	f1be 0f09 	cmp.w	lr, #9
 800954c:	d816      	bhi.n	800957c <_strtol_l.constprop.0+0xa4>
 800954e:	4674      	mov	r4, lr
 8009550:	42a3      	cmp	r3, r4
 8009552:	dd24      	ble.n	800959e <_strtol_l.constprop.0+0xc6>
 8009554:	f1bc 0f00 	cmp.w	ip, #0
 8009558:	db1e      	blt.n	8009598 <_strtol_l.constprop.0+0xc0>
 800955a:	45b1      	cmp	r9, r6
 800955c:	d31c      	bcc.n	8009598 <_strtol_l.constprop.0+0xc0>
 800955e:	d101      	bne.n	8009564 <_strtol_l.constprop.0+0x8c>
 8009560:	45a2      	cmp	sl, r4
 8009562:	db19      	blt.n	8009598 <_strtol_l.constprop.0+0xc0>
 8009564:	fb06 4603 	mla	r6, r6, r3, r4
 8009568:	f04f 0c01 	mov.w	ip, #1
 800956c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009570:	e7e8      	b.n	8009544 <_strtol_l.constprop.0+0x6c>
 8009572:	2c2b      	cmp	r4, #43	; 0x2b
 8009574:	bf04      	itt	eq
 8009576:	782c      	ldrbeq	r4, [r5, #0]
 8009578:	1cb5      	addeq	r5, r6, #2
 800957a:	e7ca      	b.n	8009512 <_strtol_l.constprop.0+0x3a>
 800957c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009580:	f1be 0f19 	cmp.w	lr, #25
 8009584:	d801      	bhi.n	800958a <_strtol_l.constprop.0+0xb2>
 8009586:	3c37      	subs	r4, #55	; 0x37
 8009588:	e7e2      	b.n	8009550 <_strtol_l.constprop.0+0x78>
 800958a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800958e:	f1be 0f19 	cmp.w	lr, #25
 8009592:	d804      	bhi.n	800959e <_strtol_l.constprop.0+0xc6>
 8009594:	3c57      	subs	r4, #87	; 0x57
 8009596:	e7db      	b.n	8009550 <_strtol_l.constprop.0+0x78>
 8009598:	f04f 3cff 	mov.w	ip, #4294967295
 800959c:	e7e6      	b.n	800956c <_strtol_l.constprop.0+0x94>
 800959e:	f1bc 0f00 	cmp.w	ip, #0
 80095a2:	da05      	bge.n	80095b0 <_strtol_l.constprop.0+0xd8>
 80095a4:	2322      	movs	r3, #34	; 0x22
 80095a6:	6003      	str	r3, [r0, #0]
 80095a8:	4646      	mov	r6, r8
 80095aa:	b942      	cbnz	r2, 80095be <_strtol_l.constprop.0+0xe6>
 80095ac:	4630      	mov	r0, r6
 80095ae:	e79e      	b.n	80094ee <_strtol_l.constprop.0+0x16>
 80095b0:	b107      	cbz	r7, 80095b4 <_strtol_l.constprop.0+0xdc>
 80095b2:	4276      	negs	r6, r6
 80095b4:	2a00      	cmp	r2, #0
 80095b6:	d0f9      	beq.n	80095ac <_strtol_l.constprop.0+0xd4>
 80095b8:	f1bc 0f00 	cmp.w	ip, #0
 80095bc:	d000      	beq.n	80095c0 <_strtol_l.constprop.0+0xe8>
 80095be:	1e69      	subs	r1, r5, #1
 80095c0:	6011      	str	r1, [r2, #0]
 80095c2:	e7f3      	b.n	80095ac <_strtol_l.constprop.0+0xd4>
 80095c4:	2430      	movs	r4, #48	; 0x30
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d1b1      	bne.n	800952e <_strtol_l.constprop.0+0x56>
 80095ca:	2308      	movs	r3, #8
 80095cc:	e7af      	b.n	800952e <_strtol_l.constprop.0+0x56>
 80095ce:	2c30      	cmp	r4, #48	; 0x30
 80095d0:	d0a5      	beq.n	800951e <_strtol_l.constprop.0+0x46>
 80095d2:	230a      	movs	r3, #10
 80095d4:	e7ab      	b.n	800952e <_strtol_l.constprop.0+0x56>
 80095d6:	bf00      	nop
 80095d8:	0800def1 	.word	0x0800def1

080095dc <_strtol_r>:
 80095dc:	f7ff bf7c 	b.w	80094d8 <_strtol_l.constprop.0>

080095e0 <quorem>:
 80095e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e4:	6903      	ldr	r3, [r0, #16]
 80095e6:	690c      	ldr	r4, [r1, #16]
 80095e8:	42a3      	cmp	r3, r4
 80095ea:	4607      	mov	r7, r0
 80095ec:	f2c0 8081 	blt.w	80096f2 <quorem+0x112>
 80095f0:	3c01      	subs	r4, #1
 80095f2:	f101 0814 	add.w	r8, r1, #20
 80095f6:	f100 0514 	add.w	r5, r0, #20
 80095fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80095fe:	9301      	str	r3, [sp, #4]
 8009600:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009604:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009608:	3301      	adds	r3, #1
 800960a:	429a      	cmp	r2, r3
 800960c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009610:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009614:	fbb2 f6f3 	udiv	r6, r2, r3
 8009618:	d331      	bcc.n	800967e <quorem+0x9e>
 800961a:	f04f 0e00 	mov.w	lr, #0
 800961e:	4640      	mov	r0, r8
 8009620:	46ac      	mov	ip, r5
 8009622:	46f2      	mov	sl, lr
 8009624:	f850 2b04 	ldr.w	r2, [r0], #4
 8009628:	b293      	uxth	r3, r2
 800962a:	fb06 e303 	mla	r3, r6, r3, lr
 800962e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009632:	b29b      	uxth	r3, r3
 8009634:	ebaa 0303 	sub.w	r3, sl, r3
 8009638:	f8dc a000 	ldr.w	sl, [ip]
 800963c:	0c12      	lsrs	r2, r2, #16
 800963e:	fa13 f38a 	uxtah	r3, r3, sl
 8009642:	fb06 e202 	mla	r2, r6, r2, lr
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	9b00      	ldr	r3, [sp, #0]
 800964a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800964e:	b292      	uxth	r2, r2
 8009650:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009654:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009658:	f8bd 3000 	ldrh.w	r3, [sp]
 800965c:	4581      	cmp	r9, r0
 800965e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009662:	f84c 3b04 	str.w	r3, [ip], #4
 8009666:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800966a:	d2db      	bcs.n	8009624 <quorem+0x44>
 800966c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009670:	b92b      	cbnz	r3, 800967e <quorem+0x9e>
 8009672:	9b01      	ldr	r3, [sp, #4]
 8009674:	3b04      	subs	r3, #4
 8009676:	429d      	cmp	r5, r3
 8009678:	461a      	mov	r2, r3
 800967a:	d32e      	bcc.n	80096da <quorem+0xfa>
 800967c:	613c      	str	r4, [r7, #16]
 800967e:	4638      	mov	r0, r7
 8009680:	f001 fc82 	bl	800af88 <__mcmp>
 8009684:	2800      	cmp	r0, #0
 8009686:	db24      	blt.n	80096d2 <quorem+0xf2>
 8009688:	3601      	adds	r6, #1
 800968a:	4628      	mov	r0, r5
 800968c:	f04f 0c00 	mov.w	ip, #0
 8009690:	f858 2b04 	ldr.w	r2, [r8], #4
 8009694:	f8d0 e000 	ldr.w	lr, [r0]
 8009698:	b293      	uxth	r3, r2
 800969a:	ebac 0303 	sub.w	r3, ip, r3
 800969e:	0c12      	lsrs	r2, r2, #16
 80096a0:	fa13 f38e 	uxtah	r3, r3, lr
 80096a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80096a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096b2:	45c1      	cmp	r9, r8
 80096b4:	f840 3b04 	str.w	r3, [r0], #4
 80096b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80096bc:	d2e8      	bcs.n	8009690 <quorem+0xb0>
 80096be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096c6:	b922      	cbnz	r2, 80096d2 <quorem+0xf2>
 80096c8:	3b04      	subs	r3, #4
 80096ca:	429d      	cmp	r5, r3
 80096cc:	461a      	mov	r2, r3
 80096ce:	d30a      	bcc.n	80096e6 <quorem+0x106>
 80096d0:	613c      	str	r4, [r7, #16]
 80096d2:	4630      	mov	r0, r6
 80096d4:	b003      	add	sp, #12
 80096d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096da:	6812      	ldr	r2, [r2, #0]
 80096dc:	3b04      	subs	r3, #4
 80096de:	2a00      	cmp	r2, #0
 80096e0:	d1cc      	bne.n	800967c <quorem+0x9c>
 80096e2:	3c01      	subs	r4, #1
 80096e4:	e7c7      	b.n	8009676 <quorem+0x96>
 80096e6:	6812      	ldr	r2, [r2, #0]
 80096e8:	3b04      	subs	r3, #4
 80096ea:	2a00      	cmp	r2, #0
 80096ec:	d1f0      	bne.n	80096d0 <quorem+0xf0>
 80096ee:	3c01      	subs	r4, #1
 80096f0:	e7eb      	b.n	80096ca <quorem+0xea>
 80096f2:	2000      	movs	r0, #0
 80096f4:	e7ee      	b.n	80096d4 <quorem+0xf4>
	...

080096f8 <_dtoa_r>:
 80096f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096fc:	ed2d 8b04 	vpush	{d8-d9}
 8009700:	ec57 6b10 	vmov	r6, r7, d0
 8009704:	b093      	sub	sp, #76	; 0x4c
 8009706:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009708:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800970c:	9106      	str	r1, [sp, #24]
 800970e:	ee10 aa10 	vmov	sl, s0
 8009712:	4604      	mov	r4, r0
 8009714:	9209      	str	r2, [sp, #36]	; 0x24
 8009716:	930c      	str	r3, [sp, #48]	; 0x30
 8009718:	46bb      	mov	fp, r7
 800971a:	b975      	cbnz	r5, 800973a <_dtoa_r+0x42>
 800971c:	2010      	movs	r0, #16
 800971e:	f001 f94d 	bl	800a9bc <malloc>
 8009722:	4602      	mov	r2, r0
 8009724:	6260      	str	r0, [r4, #36]	; 0x24
 8009726:	b920      	cbnz	r0, 8009732 <_dtoa_r+0x3a>
 8009728:	4ba7      	ldr	r3, [pc, #668]	; (80099c8 <_dtoa_r+0x2d0>)
 800972a:	21ea      	movs	r1, #234	; 0xea
 800972c:	48a7      	ldr	r0, [pc, #668]	; (80099cc <_dtoa_r+0x2d4>)
 800972e:	f002 f8ad 	bl	800b88c <__assert_func>
 8009732:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009736:	6005      	str	r5, [r0, #0]
 8009738:	60c5      	str	r5, [r0, #12]
 800973a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800973c:	6819      	ldr	r1, [r3, #0]
 800973e:	b151      	cbz	r1, 8009756 <_dtoa_r+0x5e>
 8009740:	685a      	ldr	r2, [r3, #4]
 8009742:	604a      	str	r2, [r1, #4]
 8009744:	2301      	movs	r3, #1
 8009746:	4093      	lsls	r3, r2
 8009748:	608b      	str	r3, [r1, #8]
 800974a:	4620      	mov	r0, r4
 800974c:	f001 f990 	bl	800aa70 <_Bfree>
 8009750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009752:	2200      	movs	r2, #0
 8009754:	601a      	str	r2, [r3, #0]
 8009756:	1e3b      	subs	r3, r7, #0
 8009758:	bfaa      	itet	ge
 800975a:	2300      	movge	r3, #0
 800975c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009760:	f8c8 3000 	strge.w	r3, [r8]
 8009764:	4b9a      	ldr	r3, [pc, #616]	; (80099d0 <_dtoa_r+0x2d8>)
 8009766:	bfbc      	itt	lt
 8009768:	2201      	movlt	r2, #1
 800976a:	f8c8 2000 	strlt.w	r2, [r8]
 800976e:	ea33 030b 	bics.w	r3, r3, fp
 8009772:	d11b      	bne.n	80097ac <_dtoa_r+0xb4>
 8009774:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009776:	f242 730f 	movw	r3, #9999	; 0x270f
 800977a:	6013      	str	r3, [r2, #0]
 800977c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009780:	4333      	orrs	r3, r6
 8009782:	f000 8592 	beq.w	800a2aa <_dtoa_r+0xbb2>
 8009786:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009788:	b963      	cbnz	r3, 80097a4 <_dtoa_r+0xac>
 800978a:	4b92      	ldr	r3, [pc, #584]	; (80099d4 <_dtoa_r+0x2dc>)
 800978c:	e022      	b.n	80097d4 <_dtoa_r+0xdc>
 800978e:	4b92      	ldr	r3, [pc, #584]	; (80099d8 <_dtoa_r+0x2e0>)
 8009790:	9301      	str	r3, [sp, #4]
 8009792:	3308      	adds	r3, #8
 8009794:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009796:	6013      	str	r3, [r2, #0]
 8009798:	9801      	ldr	r0, [sp, #4]
 800979a:	b013      	add	sp, #76	; 0x4c
 800979c:	ecbd 8b04 	vpop	{d8-d9}
 80097a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a4:	4b8b      	ldr	r3, [pc, #556]	; (80099d4 <_dtoa_r+0x2dc>)
 80097a6:	9301      	str	r3, [sp, #4]
 80097a8:	3303      	adds	r3, #3
 80097aa:	e7f3      	b.n	8009794 <_dtoa_r+0x9c>
 80097ac:	2200      	movs	r2, #0
 80097ae:	2300      	movs	r3, #0
 80097b0:	4650      	mov	r0, sl
 80097b2:	4659      	mov	r1, fp
 80097b4:	f7f7 f960 	bl	8000a78 <__aeabi_dcmpeq>
 80097b8:	ec4b ab19 	vmov	d9, sl, fp
 80097bc:	4680      	mov	r8, r0
 80097be:	b158      	cbz	r0, 80097d8 <_dtoa_r+0xe0>
 80097c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097c2:	2301      	movs	r3, #1
 80097c4:	6013      	str	r3, [r2, #0]
 80097c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	f000 856b 	beq.w	800a2a4 <_dtoa_r+0xbac>
 80097ce:	4883      	ldr	r0, [pc, #524]	; (80099dc <_dtoa_r+0x2e4>)
 80097d0:	6018      	str	r0, [r3, #0]
 80097d2:	1e43      	subs	r3, r0, #1
 80097d4:	9301      	str	r3, [sp, #4]
 80097d6:	e7df      	b.n	8009798 <_dtoa_r+0xa0>
 80097d8:	ec4b ab10 	vmov	d0, sl, fp
 80097dc:	aa10      	add	r2, sp, #64	; 0x40
 80097de:	a911      	add	r1, sp, #68	; 0x44
 80097e0:	4620      	mov	r0, r4
 80097e2:	f001 fcf3 	bl	800b1cc <__d2b>
 80097e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80097ea:	ee08 0a10 	vmov	s16, r0
 80097ee:	2d00      	cmp	r5, #0
 80097f0:	f000 8084 	beq.w	80098fc <_dtoa_r+0x204>
 80097f4:	ee19 3a90 	vmov	r3, s19
 80097f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009800:	4656      	mov	r6, sl
 8009802:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009806:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800980a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800980e:	4b74      	ldr	r3, [pc, #464]	; (80099e0 <_dtoa_r+0x2e8>)
 8009810:	2200      	movs	r2, #0
 8009812:	4630      	mov	r0, r6
 8009814:	4639      	mov	r1, r7
 8009816:	f7f6 fd0f 	bl	8000238 <__aeabi_dsub>
 800981a:	a365      	add	r3, pc, #404	; (adr r3, 80099b0 <_dtoa_r+0x2b8>)
 800981c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009820:	f7f6 fec2 	bl	80005a8 <__aeabi_dmul>
 8009824:	a364      	add	r3, pc, #400	; (adr r3, 80099b8 <_dtoa_r+0x2c0>)
 8009826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982a:	f7f6 fd07 	bl	800023c <__adddf3>
 800982e:	4606      	mov	r6, r0
 8009830:	4628      	mov	r0, r5
 8009832:	460f      	mov	r7, r1
 8009834:	f7f6 fe4e 	bl	80004d4 <__aeabi_i2d>
 8009838:	a361      	add	r3, pc, #388	; (adr r3, 80099c0 <_dtoa_r+0x2c8>)
 800983a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983e:	f7f6 feb3 	bl	80005a8 <__aeabi_dmul>
 8009842:	4602      	mov	r2, r0
 8009844:	460b      	mov	r3, r1
 8009846:	4630      	mov	r0, r6
 8009848:	4639      	mov	r1, r7
 800984a:	f7f6 fcf7 	bl	800023c <__adddf3>
 800984e:	4606      	mov	r6, r0
 8009850:	460f      	mov	r7, r1
 8009852:	f7f7 f959 	bl	8000b08 <__aeabi_d2iz>
 8009856:	2200      	movs	r2, #0
 8009858:	9000      	str	r0, [sp, #0]
 800985a:	2300      	movs	r3, #0
 800985c:	4630      	mov	r0, r6
 800985e:	4639      	mov	r1, r7
 8009860:	f7f7 f914 	bl	8000a8c <__aeabi_dcmplt>
 8009864:	b150      	cbz	r0, 800987c <_dtoa_r+0x184>
 8009866:	9800      	ldr	r0, [sp, #0]
 8009868:	f7f6 fe34 	bl	80004d4 <__aeabi_i2d>
 800986c:	4632      	mov	r2, r6
 800986e:	463b      	mov	r3, r7
 8009870:	f7f7 f902 	bl	8000a78 <__aeabi_dcmpeq>
 8009874:	b910      	cbnz	r0, 800987c <_dtoa_r+0x184>
 8009876:	9b00      	ldr	r3, [sp, #0]
 8009878:	3b01      	subs	r3, #1
 800987a:	9300      	str	r3, [sp, #0]
 800987c:	9b00      	ldr	r3, [sp, #0]
 800987e:	2b16      	cmp	r3, #22
 8009880:	d85a      	bhi.n	8009938 <_dtoa_r+0x240>
 8009882:	9a00      	ldr	r2, [sp, #0]
 8009884:	4b57      	ldr	r3, [pc, #348]	; (80099e4 <_dtoa_r+0x2ec>)
 8009886:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800988a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988e:	ec51 0b19 	vmov	r0, r1, d9
 8009892:	f7f7 f8fb 	bl	8000a8c <__aeabi_dcmplt>
 8009896:	2800      	cmp	r0, #0
 8009898:	d050      	beq.n	800993c <_dtoa_r+0x244>
 800989a:	9b00      	ldr	r3, [sp, #0]
 800989c:	3b01      	subs	r3, #1
 800989e:	9300      	str	r3, [sp, #0]
 80098a0:	2300      	movs	r3, #0
 80098a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80098a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098a6:	1b5d      	subs	r5, r3, r5
 80098a8:	1e6b      	subs	r3, r5, #1
 80098aa:	9305      	str	r3, [sp, #20]
 80098ac:	bf45      	ittet	mi
 80098ae:	f1c5 0301 	rsbmi	r3, r5, #1
 80098b2:	9304      	strmi	r3, [sp, #16]
 80098b4:	2300      	movpl	r3, #0
 80098b6:	2300      	movmi	r3, #0
 80098b8:	bf4c      	ite	mi
 80098ba:	9305      	strmi	r3, [sp, #20]
 80098bc:	9304      	strpl	r3, [sp, #16]
 80098be:	9b00      	ldr	r3, [sp, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	db3d      	blt.n	8009940 <_dtoa_r+0x248>
 80098c4:	9b05      	ldr	r3, [sp, #20]
 80098c6:	9a00      	ldr	r2, [sp, #0]
 80098c8:	920a      	str	r2, [sp, #40]	; 0x28
 80098ca:	4413      	add	r3, r2
 80098cc:	9305      	str	r3, [sp, #20]
 80098ce:	2300      	movs	r3, #0
 80098d0:	9307      	str	r3, [sp, #28]
 80098d2:	9b06      	ldr	r3, [sp, #24]
 80098d4:	2b09      	cmp	r3, #9
 80098d6:	f200 8089 	bhi.w	80099ec <_dtoa_r+0x2f4>
 80098da:	2b05      	cmp	r3, #5
 80098dc:	bfc4      	itt	gt
 80098de:	3b04      	subgt	r3, #4
 80098e0:	9306      	strgt	r3, [sp, #24]
 80098e2:	9b06      	ldr	r3, [sp, #24]
 80098e4:	f1a3 0302 	sub.w	r3, r3, #2
 80098e8:	bfcc      	ite	gt
 80098ea:	2500      	movgt	r5, #0
 80098ec:	2501      	movle	r5, #1
 80098ee:	2b03      	cmp	r3, #3
 80098f0:	f200 8087 	bhi.w	8009a02 <_dtoa_r+0x30a>
 80098f4:	e8df f003 	tbb	[pc, r3]
 80098f8:	59383a2d 	.word	0x59383a2d
 80098fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009900:	441d      	add	r5, r3
 8009902:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009906:	2b20      	cmp	r3, #32
 8009908:	bfc1      	itttt	gt
 800990a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800990e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009912:	fa0b f303 	lslgt.w	r3, fp, r3
 8009916:	fa26 f000 	lsrgt.w	r0, r6, r0
 800991a:	bfda      	itte	le
 800991c:	f1c3 0320 	rsble	r3, r3, #32
 8009920:	fa06 f003 	lslle.w	r0, r6, r3
 8009924:	4318      	orrgt	r0, r3
 8009926:	f7f6 fdc5 	bl	80004b4 <__aeabi_ui2d>
 800992a:	2301      	movs	r3, #1
 800992c:	4606      	mov	r6, r0
 800992e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009932:	3d01      	subs	r5, #1
 8009934:	930e      	str	r3, [sp, #56]	; 0x38
 8009936:	e76a      	b.n	800980e <_dtoa_r+0x116>
 8009938:	2301      	movs	r3, #1
 800993a:	e7b2      	b.n	80098a2 <_dtoa_r+0x1aa>
 800993c:	900b      	str	r0, [sp, #44]	; 0x2c
 800993e:	e7b1      	b.n	80098a4 <_dtoa_r+0x1ac>
 8009940:	9b04      	ldr	r3, [sp, #16]
 8009942:	9a00      	ldr	r2, [sp, #0]
 8009944:	1a9b      	subs	r3, r3, r2
 8009946:	9304      	str	r3, [sp, #16]
 8009948:	4253      	negs	r3, r2
 800994a:	9307      	str	r3, [sp, #28]
 800994c:	2300      	movs	r3, #0
 800994e:	930a      	str	r3, [sp, #40]	; 0x28
 8009950:	e7bf      	b.n	80098d2 <_dtoa_r+0x1da>
 8009952:	2300      	movs	r3, #0
 8009954:	9308      	str	r3, [sp, #32]
 8009956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009958:	2b00      	cmp	r3, #0
 800995a:	dc55      	bgt.n	8009a08 <_dtoa_r+0x310>
 800995c:	2301      	movs	r3, #1
 800995e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009962:	461a      	mov	r2, r3
 8009964:	9209      	str	r2, [sp, #36]	; 0x24
 8009966:	e00c      	b.n	8009982 <_dtoa_r+0x28a>
 8009968:	2301      	movs	r3, #1
 800996a:	e7f3      	b.n	8009954 <_dtoa_r+0x25c>
 800996c:	2300      	movs	r3, #0
 800996e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009970:	9308      	str	r3, [sp, #32]
 8009972:	9b00      	ldr	r3, [sp, #0]
 8009974:	4413      	add	r3, r2
 8009976:	9302      	str	r3, [sp, #8]
 8009978:	3301      	adds	r3, #1
 800997a:	2b01      	cmp	r3, #1
 800997c:	9303      	str	r3, [sp, #12]
 800997e:	bfb8      	it	lt
 8009980:	2301      	movlt	r3, #1
 8009982:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009984:	2200      	movs	r2, #0
 8009986:	6042      	str	r2, [r0, #4]
 8009988:	2204      	movs	r2, #4
 800998a:	f102 0614 	add.w	r6, r2, #20
 800998e:	429e      	cmp	r6, r3
 8009990:	6841      	ldr	r1, [r0, #4]
 8009992:	d93d      	bls.n	8009a10 <_dtoa_r+0x318>
 8009994:	4620      	mov	r0, r4
 8009996:	f001 f82b 	bl	800a9f0 <_Balloc>
 800999a:	9001      	str	r0, [sp, #4]
 800999c:	2800      	cmp	r0, #0
 800999e:	d13b      	bne.n	8009a18 <_dtoa_r+0x320>
 80099a0:	4b11      	ldr	r3, [pc, #68]	; (80099e8 <_dtoa_r+0x2f0>)
 80099a2:	4602      	mov	r2, r0
 80099a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80099a8:	e6c0      	b.n	800972c <_dtoa_r+0x34>
 80099aa:	2301      	movs	r3, #1
 80099ac:	e7df      	b.n	800996e <_dtoa_r+0x276>
 80099ae:	bf00      	nop
 80099b0:	636f4361 	.word	0x636f4361
 80099b4:	3fd287a7 	.word	0x3fd287a7
 80099b8:	8b60c8b3 	.word	0x8b60c8b3
 80099bc:	3fc68a28 	.word	0x3fc68a28
 80099c0:	509f79fb 	.word	0x509f79fb
 80099c4:	3fd34413 	.word	0x3fd34413
 80099c8:	0800dffe 	.word	0x0800dffe
 80099cc:	0800e015 	.word	0x0800e015
 80099d0:	7ff00000 	.word	0x7ff00000
 80099d4:	0800dffa 	.word	0x0800dffa
 80099d8:	0800dff1 	.word	0x0800dff1
 80099dc:	0800de75 	.word	0x0800de75
 80099e0:	3ff80000 	.word	0x3ff80000
 80099e4:	0800e180 	.word	0x0800e180
 80099e8:	0800e070 	.word	0x0800e070
 80099ec:	2501      	movs	r5, #1
 80099ee:	2300      	movs	r3, #0
 80099f0:	9306      	str	r3, [sp, #24]
 80099f2:	9508      	str	r5, [sp, #32]
 80099f4:	f04f 33ff 	mov.w	r3, #4294967295
 80099f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80099fc:	2200      	movs	r2, #0
 80099fe:	2312      	movs	r3, #18
 8009a00:	e7b0      	b.n	8009964 <_dtoa_r+0x26c>
 8009a02:	2301      	movs	r3, #1
 8009a04:	9308      	str	r3, [sp, #32]
 8009a06:	e7f5      	b.n	80099f4 <_dtoa_r+0x2fc>
 8009a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a0a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009a0e:	e7b8      	b.n	8009982 <_dtoa_r+0x28a>
 8009a10:	3101      	adds	r1, #1
 8009a12:	6041      	str	r1, [r0, #4]
 8009a14:	0052      	lsls	r2, r2, #1
 8009a16:	e7b8      	b.n	800998a <_dtoa_r+0x292>
 8009a18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a1a:	9a01      	ldr	r2, [sp, #4]
 8009a1c:	601a      	str	r2, [r3, #0]
 8009a1e:	9b03      	ldr	r3, [sp, #12]
 8009a20:	2b0e      	cmp	r3, #14
 8009a22:	f200 809d 	bhi.w	8009b60 <_dtoa_r+0x468>
 8009a26:	2d00      	cmp	r5, #0
 8009a28:	f000 809a 	beq.w	8009b60 <_dtoa_r+0x468>
 8009a2c:	9b00      	ldr	r3, [sp, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	dd32      	ble.n	8009a98 <_dtoa_r+0x3a0>
 8009a32:	4ab7      	ldr	r2, [pc, #732]	; (8009d10 <_dtoa_r+0x618>)
 8009a34:	f003 030f 	and.w	r3, r3, #15
 8009a38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009a3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a40:	9b00      	ldr	r3, [sp, #0]
 8009a42:	05d8      	lsls	r0, r3, #23
 8009a44:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009a48:	d516      	bpl.n	8009a78 <_dtoa_r+0x380>
 8009a4a:	4bb2      	ldr	r3, [pc, #712]	; (8009d14 <_dtoa_r+0x61c>)
 8009a4c:	ec51 0b19 	vmov	r0, r1, d9
 8009a50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a54:	f7f6 fed2 	bl	80007fc <__aeabi_ddiv>
 8009a58:	f007 070f 	and.w	r7, r7, #15
 8009a5c:	4682      	mov	sl, r0
 8009a5e:	468b      	mov	fp, r1
 8009a60:	2503      	movs	r5, #3
 8009a62:	4eac      	ldr	r6, [pc, #688]	; (8009d14 <_dtoa_r+0x61c>)
 8009a64:	b957      	cbnz	r7, 8009a7c <_dtoa_r+0x384>
 8009a66:	4642      	mov	r2, r8
 8009a68:	464b      	mov	r3, r9
 8009a6a:	4650      	mov	r0, sl
 8009a6c:	4659      	mov	r1, fp
 8009a6e:	f7f6 fec5 	bl	80007fc <__aeabi_ddiv>
 8009a72:	4682      	mov	sl, r0
 8009a74:	468b      	mov	fp, r1
 8009a76:	e028      	b.n	8009aca <_dtoa_r+0x3d2>
 8009a78:	2502      	movs	r5, #2
 8009a7a:	e7f2      	b.n	8009a62 <_dtoa_r+0x36a>
 8009a7c:	07f9      	lsls	r1, r7, #31
 8009a7e:	d508      	bpl.n	8009a92 <_dtoa_r+0x39a>
 8009a80:	4640      	mov	r0, r8
 8009a82:	4649      	mov	r1, r9
 8009a84:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009a88:	f7f6 fd8e 	bl	80005a8 <__aeabi_dmul>
 8009a8c:	3501      	adds	r5, #1
 8009a8e:	4680      	mov	r8, r0
 8009a90:	4689      	mov	r9, r1
 8009a92:	107f      	asrs	r7, r7, #1
 8009a94:	3608      	adds	r6, #8
 8009a96:	e7e5      	b.n	8009a64 <_dtoa_r+0x36c>
 8009a98:	f000 809b 	beq.w	8009bd2 <_dtoa_r+0x4da>
 8009a9c:	9b00      	ldr	r3, [sp, #0]
 8009a9e:	4f9d      	ldr	r7, [pc, #628]	; (8009d14 <_dtoa_r+0x61c>)
 8009aa0:	425e      	negs	r6, r3
 8009aa2:	4b9b      	ldr	r3, [pc, #620]	; (8009d10 <_dtoa_r+0x618>)
 8009aa4:	f006 020f 	and.w	r2, r6, #15
 8009aa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab0:	ec51 0b19 	vmov	r0, r1, d9
 8009ab4:	f7f6 fd78 	bl	80005a8 <__aeabi_dmul>
 8009ab8:	1136      	asrs	r6, r6, #4
 8009aba:	4682      	mov	sl, r0
 8009abc:	468b      	mov	fp, r1
 8009abe:	2300      	movs	r3, #0
 8009ac0:	2502      	movs	r5, #2
 8009ac2:	2e00      	cmp	r6, #0
 8009ac4:	d17a      	bne.n	8009bbc <_dtoa_r+0x4c4>
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d1d3      	bne.n	8009a72 <_dtoa_r+0x37a>
 8009aca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f000 8082 	beq.w	8009bd6 <_dtoa_r+0x4de>
 8009ad2:	4b91      	ldr	r3, [pc, #580]	; (8009d18 <_dtoa_r+0x620>)
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	4650      	mov	r0, sl
 8009ad8:	4659      	mov	r1, fp
 8009ada:	f7f6 ffd7 	bl	8000a8c <__aeabi_dcmplt>
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	d079      	beq.n	8009bd6 <_dtoa_r+0x4de>
 8009ae2:	9b03      	ldr	r3, [sp, #12]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d076      	beq.n	8009bd6 <_dtoa_r+0x4de>
 8009ae8:	9b02      	ldr	r3, [sp, #8]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	dd36      	ble.n	8009b5c <_dtoa_r+0x464>
 8009aee:	9b00      	ldr	r3, [sp, #0]
 8009af0:	4650      	mov	r0, sl
 8009af2:	4659      	mov	r1, fp
 8009af4:	1e5f      	subs	r7, r3, #1
 8009af6:	2200      	movs	r2, #0
 8009af8:	4b88      	ldr	r3, [pc, #544]	; (8009d1c <_dtoa_r+0x624>)
 8009afa:	f7f6 fd55 	bl	80005a8 <__aeabi_dmul>
 8009afe:	9e02      	ldr	r6, [sp, #8]
 8009b00:	4682      	mov	sl, r0
 8009b02:	468b      	mov	fp, r1
 8009b04:	3501      	adds	r5, #1
 8009b06:	4628      	mov	r0, r5
 8009b08:	f7f6 fce4 	bl	80004d4 <__aeabi_i2d>
 8009b0c:	4652      	mov	r2, sl
 8009b0e:	465b      	mov	r3, fp
 8009b10:	f7f6 fd4a 	bl	80005a8 <__aeabi_dmul>
 8009b14:	4b82      	ldr	r3, [pc, #520]	; (8009d20 <_dtoa_r+0x628>)
 8009b16:	2200      	movs	r2, #0
 8009b18:	f7f6 fb90 	bl	800023c <__adddf3>
 8009b1c:	46d0      	mov	r8, sl
 8009b1e:	46d9      	mov	r9, fp
 8009b20:	4682      	mov	sl, r0
 8009b22:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009b26:	2e00      	cmp	r6, #0
 8009b28:	d158      	bne.n	8009bdc <_dtoa_r+0x4e4>
 8009b2a:	4b7e      	ldr	r3, [pc, #504]	; (8009d24 <_dtoa_r+0x62c>)
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	4640      	mov	r0, r8
 8009b30:	4649      	mov	r1, r9
 8009b32:	f7f6 fb81 	bl	8000238 <__aeabi_dsub>
 8009b36:	4652      	mov	r2, sl
 8009b38:	465b      	mov	r3, fp
 8009b3a:	4680      	mov	r8, r0
 8009b3c:	4689      	mov	r9, r1
 8009b3e:	f7f6 ffc3 	bl	8000ac8 <__aeabi_dcmpgt>
 8009b42:	2800      	cmp	r0, #0
 8009b44:	f040 8295 	bne.w	800a072 <_dtoa_r+0x97a>
 8009b48:	4652      	mov	r2, sl
 8009b4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009b4e:	4640      	mov	r0, r8
 8009b50:	4649      	mov	r1, r9
 8009b52:	f7f6 ff9b 	bl	8000a8c <__aeabi_dcmplt>
 8009b56:	2800      	cmp	r0, #0
 8009b58:	f040 8289 	bne.w	800a06e <_dtoa_r+0x976>
 8009b5c:	ec5b ab19 	vmov	sl, fp, d9
 8009b60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f2c0 8148 	blt.w	8009df8 <_dtoa_r+0x700>
 8009b68:	9a00      	ldr	r2, [sp, #0]
 8009b6a:	2a0e      	cmp	r2, #14
 8009b6c:	f300 8144 	bgt.w	8009df8 <_dtoa_r+0x700>
 8009b70:	4b67      	ldr	r3, [pc, #412]	; (8009d10 <_dtoa_r+0x618>)
 8009b72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b76:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	f280 80d5 	bge.w	8009d2c <_dtoa_r+0x634>
 8009b82:	9b03      	ldr	r3, [sp, #12]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f300 80d1 	bgt.w	8009d2c <_dtoa_r+0x634>
 8009b8a:	f040 826f 	bne.w	800a06c <_dtoa_r+0x974>
 8009b8e:	4b65      	ldr	r3, [pc, #404]	; (8009d24 <_dtoa_r+0x62c>)
 8009b90:	2200      	movs	r2, #0
 8009b92:	4640      	mov	r0, r8
 8009b94:	4649      	mov	r1, r9
 8009b96:	f7f6 fd07 	bl	80005a8 <__aeabi_dmul>
 8009b9a:	4652      	mov	r2, sl
 8009b9c:	465b      	mov	r3, fp
 8009b9e:	f7f6 ff89 	bl	8000ab4 <__aeabi_dcmpge>
 8009ba2:	9e03      	ldr	r6, [sp, #12]
 8009ba4:	4637      	mov	r7, r6
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	f040 8245 	bne.w	800a036 <_dtoa_r+0x93e>
 8009bac:	9d01      	ldr	r5, [sp, #4]
 8009bae:	2331      	movs	r3, #49	; 0x31
 8009bb0:	f805 3b01 	strb.w	r3, [r5], #1
 8009bb4:	9b00      	ldr	r3, [sp, #0]
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	9300      	str	r3, [sp, #0]
 8009bba:	e240      	b.n	800a03e <_dtoa_r+0x946>
 8009bbc:	07f2      	lsls	r2, r6, #31
 8009bbe:	d505      	bpl.n	8009bcc <_dtoa_r+0x4d4>
 8009bc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bc4:	f7f6 fcf0 	bl	80005a8 <__aeabi_dmul>
 8009bc8:	3501      	adds	r5, #1
 8009bca:	2301      	movs	r3, #1
 8009bcc:	1076      	asrs	r6, r6, #1
 8009bce:	3708      	adds	r7, #8
 8009bd0:	e777      	b.n	8009ac2 <_dtoa_r+0x3ca>
 8009bd2:	2502      	movs	r5, #2
 8009bd4:	e779      	b.n	8009aca <_dtoa_r+0x3d2>
 8009bd6:	9f00      	ldr	r7, [sp, #0]
 8009bd8:	9e03      	ldr	r6, [sp, #12]
 8009bda:	e794      	b.n	8009b06 <_dtoa_r+0x40e>
 8009bdc:	9901      	ldr	r1, [sp, #4]
 8009bde:	4b4c      	ldr	r3, [pc, #304]	; (8009d10 <_dtoa_r+0x618>)
 8009be0:	4431      	add	r1, r6
 8009be2:	910d      	str	r1, [sp, #52]	; 0x34
 8009be4:	9908      	ldr	r1, [sp, #32]
 8009be6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009bea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009bee:	2900      	cmp	r1, #0
 8009bf0:	d043      	beq.n	8009c7a <_dtoa_r+0x582>
 8009bf2:	494d      	ldr	r1, [pc, #308]	; (8009d28 <_dtoa_r+0x630>)
 8009bf4:	2000      	movs	r0, #0
 8009bf6:	f7f6 fe01 	bl	80007fc <__aeabi_ddiv>
 8009bfa:	4652      	mov	r2, sl
 8009bfc:	465b      	mov	r3, fp
 8009bfe:	f7f6 fb1b 	bl	8000238 <__aeabi_dsub>
 8009c02:	9d01      	ldr	r5, [sp, #4]
 8009c04:	4682      	mov	sl, r0
 8009c06:	468b      	mov	fp, r1
 8009c08:	4649      	mov	r1, r9
 8009c0a:	4640      	mov	r0, r8
 8009c0c:	f7f6 ff7c 	bl	8000b08 <__aeabi_d2iz>
 8009c10:	4606      	mov	r6, r0
 8009c12:	f7f6 fc5f 	bl	80004d4 <__aeabi_i2d>
 8009c16:	4602      	mov	r2, r0
 8009c18:	460b      	mov	r3, r1
 8009c1a:	4640      	mov	r0, r8
 8009c1c:	4649      	mov	r1, r9
 8009c1e:	f7f6 fb0b 	bl	8000238 <__aeabi_dsub>
 8009c22:	3630      	adds	r6, #48	; 0x30
 8009c24:	f805 6b01 	strb.w	r6, [r5], #1
 8009c28:	4652      	mov	r2, sl
 8009c2a:	465b      	mov	r3, fp
 8009c2c:	4680      	mov	r8, r0
 8009c2e:	4689      	mov	r9, r1
 8009c30:	f7f6 ff2c 	bl	8000a8c <__aeabi_dcmplt>
 8009c34:	2800      	cmp	r0, #0
 8009c36:	d163      	bne.n	8009d00 <_dtoa_r+0x608>
 8009c38:	4642      	mov	r2, r8
 8009c3a:	464b      	mov	r3, r9
 8009c3c:	4936      	ldr	r1, [pc, #216]	; (8009d18 <_dtoa_r+0x620>)
 8009c3e:	2000      	movs	r0, #0
 8009c40:	f7f6 fafa 	bl	8000238 <__aeabi_dsub>
 8009c44:	4652      	mov	r2, sl
 8009c46:	465b      	mov	r3, fp
 8009c48:	f7f6 ff20 	bl	8000a8c <__aeabi_dcmplt>
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	f040 80b5 	bne.w	8009dbc <_dtoa_r+0x6c4>
 8009c52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c54:	429d      	cmp	r5, r3
 8009c56:	d081      	beq.n	8009b5c <_dtoa_r+0x464>
 8009c58:	4b30      	ldr	r3, [pc, #192]	; (8009d1c <_dtoa_r+0x624>)
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	4650      	mov	r0, sl
 8009c5e:	4659      	mov	r1, fp
 8009c60:	f7f6 fca2 	bl	80005a8 <__aeabi_dmul>
 8009c64:	4b2d      	ldr	r3, [pc, #180]	; (8009d1c <_dtoa_r+0x624>)
 8009c66:	4682      	mov	sl, r0
 8009c68:	468b      	mov	fp, r1
 8009c6a:	4640      	mov	r0, r8
 8009c6c:	4649      	mov	r1, r9
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f7f6 fc9a 	bl	80005a8 <__aeabi_dmul>
 8009c74:	4680      	mov	r8, r0
 8009c76:	4689      	mov	r9, r1
 8009c78:	e7c6      	b.n	8009c08 <_dtoa_r+0x510>
 8009c7a:	4650      	mov	r0, sl
 8009c7c:	4659      	mov	r1, fp
 8009c7e:	f7f6 fc93 	bl	80005a8 <__aeabi_dmul>
 8009c82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c84:	9d01      	ldr	r5, [sp, #4]
 8009c86:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c88:	4682      	mov	sl, r0
 8009c8a:	468b      	mov	fp, r1
 8009c8c:	4649      	mov	r1, r9
 8009c8e:	4640      	mov	r0, r8
 8009c90:	f7f6 ff3a 	bl	8000b08 <__aeabi_d2iz>
 8009c94:	4606      	mov	r6, r0
 8009c96:	f7f6 fc1d 	bl	80004d4 <__aeabi_i2d>
 8009c9a:	3630      	adds	r6, #48	; 0x30
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	4640      	mov	r0, r8
 8009ca2:	4649      	mov	r1, r9
 8009ca4:	f7f6 fac8 	bl	8000238 <__aeabi_dsub>
 8009ca8:	f805 6b01 	strb.w	r6, [r5], #1
 8009cac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cae:	429d      	cmp	r5, r3
 8009cb0:	4680      	mov	r8, r0
 8009cb2:	4689      	mov	r9, r1
 8009cb4:	f04f 0200 	mov.w	r2, #0
 8009cb8:	d124      	bne.n	8009d04 <_dtoa_r+0x60c>
 8009cba:	4b1b      	ldr	r3, [pc, #108]	; (8009d28 <_dtoa_r+0x630>)
 8009cbc:	4650      	mov	r0, sl
 8009cbe:	4659      	mov	r1, fp
 8009cc0:	f7f6 fabc 	bl	800023c <__adddf3>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	4640      	mov	r0, r8
 8009cca:	4649      	mov	r1, r9
 8009ccc:	f7f6 fefc 	bl	8000ac8 <__aeabi_dcmpgt>
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	d173      	bne.n	8009dbc <_dtoa_r+0x6c4>
 8009cd4:	4652      	mov	r2, sl
 8009cd6:	465b      	mov	r3, fp
 8009cd8:	4913      	ldr	r1, [pc, #76]	; (8009d28 <_dtoa_r+0x630>)
 8009cda:	2000      	movs	r0, #0
 8009cdc:	f7f6 faac 	bl	8000238 <__aeabi_dsub>
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	4640      	mov	r0, r8
 8009ce6:	4649      	mov	r1, r9
 8009ce8:	f7f6 fed0 	bl	8000a8c <__aeabi_dcmplt>
 8009cec:	2800      	cmp	r0, #0
 8009cee:	f43f af35 	beq.w	8009b5c <_dtoa_r+0x464>
 8009cf2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009cf4:	1e6b      	subs	r3, r5, #1
 8009cf6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009cf8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009cfc:	2b30      	cmp	r3, #48	; 0x30
 8009cfe:	d0f8      	beq.n	8009cf2 <_dtoa_r+0x5fa>
 8009d00:	9700      	str	r7, [sp, #0]
 8009d02:	e049      	b.n	8009d98 <_dtoa_r+0x6a0>
 8009d04:	4b05      	ldr	r3, [pc, #20]	; (8009d1c <_dtoa_r+0x624>)
 8009d06:	f7f6 fc4f 	bl	80005a8 <__aeabi_dmul>
 8009d0a:	4680      	mov	r8, r0
 8009d0c:	4689      	mov	r9, r1
 8009d0e:	e7bd      	b.n	8009c8c <_dtoa_r+0x594>
 8009d10:	0800e180 	.word	0x0800e180
 8009d14:	0800e158 	.word	0x0800e158
 8009d18:	3ff00000 	.word	0x3ff00000
 8009d1c:	40240000 	.word	0x40240000
 8009d20:	401c0000 	.word	0x401c0000
 8009d24:	40140000 	.word	0x40140000
 8009d28:	3fe00000 	.word	0x3fe00000
 8009d2c:	9d01      	ldr	r5, [sp, #4]
 8009d2e:	4656      	mov	r6, sl
 8009d30:	465f      	mov	r7, fp
 8009d32:	4642      	mov	r2, r8
 8009d34:	464b      	mov	r3, r9
 8009d36:	4630      	mov	r0, r6
 8009d38:	4639      	mov	r1, r7
 8009d3a:	f7f6 fd5f 	bl	80007fc <__aeabi_ddiv>
 8009d3e:	f7f6 fee3 	bl	8000b08 <__aeabi_d2iz>
 8009d42:	4682      	mov	sl, r0
 8009d44:	f7f6 fbc6 	bl	80004d4 <__aeabi_i2d>
 8009d48:	4642      	mov	r2, r8
 8009d4a:	464b      	mov	r3, r9
 8009d4c:	f7f6 fc2c 	bl	80005a8 <__aeabi_dmul>
 8009d50:	4602      	mov	r2, r0
 8009d52:	460b      	mov	r3, r1
 8009d54:	4630      	mov	r0, r6
 8009d56:	4639      	mov	r1, r7
 8009d58:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009d5c:	f7f6 fa6c 	bl	8000238 <__aeabi_dsub>
 8009d60:	f805 6b01 	strb.w	r6, [r5], #1
 8009d64:	9e01      	ldr	r6, [sp, #4]
 8009d66:	9f03      	ldr	r7, [sp, #12]
 8009d68:	1bae      	subs	r6, r5, r6
 8009d6a:	42b7      	cmp	r7, r6
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	460b      	mov	r3, r1
 8009d70:	d135      	bne.n	8009dde <_dtoa_r+0x6e6>
 8009d72:	f7f6 fa63 	bl	800023c <__adddf3>
 8009d76:	4642      	mov	r2, r8
 8009d78:	464b      	mov	r3, r9
 8009d7a:	4606      	mov	r6, r0
 8009d7c:	460f      	mov	r7, r1
 8009d7e:	f7f6 fea3 	bl	8000ac8 <__aeabi_dcmpgt>
 8009d82:	b9d0      	cbnz	r0, 8009dba <_dtoa_r+0x6c2>
 8009d84:	4642      	mov	r2, r8
 8009d86:	464b      	mov	r3, r9
 8009d88:	4630      	mov	r0, r6
 8009d8a:	4639      	mov	r1, r7
 8009d8c:	f7f6 fe74 	bl	8000a78 <__aeabi_dcmpeq>
 8009d90:	b110      	cbz	r0, 8009d98 <_dtoa_r+0x6a0>
 8009d92:	f01a 0f01 	tst.w	sl, #1
 8009d96:	d110      	bne.n	8009dba <_dtoa_r+0x6c2>
 8009d98:	4620      	mov	r0, r4
 8009d9a:	ee18 1a10 	vmov	r1, s16
 8009d9e:	f000 fe67 	bl	800aa70 <_Bfree>
 8009da2:	2300      	movs	r3, #0
 8009da4:	9800      	ldr	r0, [sp, #0]
 8009da6:	702b      	strb	r3, [r5, #0]
 8009da8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009daa:	3001      	adds	r0, #1
 8009dac:	6018      	str	r0, [r3, #0]
 8009dae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	f43f acf1 	beq.w	8009798 <_dtoa_r+0xa0>
 8009db6:	601d      	str	r5, [r3, #0]
 8009db8:	e4ee      	b.n	8009798 <_dtoa_r+0xa0>
 8009dba:	9f00      	ldr	r7, [sp, #0]
 8009dbc:	462b      	mov	r3, r5
 8009dbe:	461d      	mov	r5, r3
 8009dc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009dc4:	2a39      	cmp	r2, #57	; 0x39
 8009dc6:	d106      	bne.n	8009dd6 <_dtoa_r+0x6de>
 8009dc8:	9a01      	ldr	r2, [sp, #4]
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d1f7      	bne.n	8009dbe <_dtoa_r+0x6c6>
 8009dce:	9901      	ldr	r1, [sp, #4]
 8009dd0:	2230      	movs	r2, #48	; 0x30
 8009dd2:	3701      	adds	r7, #1
 8009dd4:	700a      	strb	r2, [r1, #0]
 8009dd6:	781a      	ldrb	r2, [r3, #0]
 8009dd8:	3201      	adds	r2, #1
 8009dda:	701a      	strb	r2, [r3, #0]
 8009ddc:	e790      	b.n	8009d00 <_dtoa_r+0x608>
 8009dde:	4ba6      	ldr	r3, [pc, #664]	; (800a078 <_dtoa_r+0x980>)
 8009de0:	2200      	movs	r2, #0
 8009de2:	f7f6 fbe1 	bl	80005a8 <__aeabi_dmul>
 8009de6:	2200      	movs	r2, #0
 8009de8:	2300      	movs	r3, #0
 8009dea:	4606      	mov	r6, r0
 8009dec:	460f      	mov	r7, r1
 8009dee:	f7f6 fe43 	bl	8000a78 <__aeabi_dcmpeq>
 8009df2:	2800      	cmp	r0, #0
 8009df4:	d09d      	beq.n	8009d32 <_dtoa_r+0x63a>
 8009df6:	e7cf      	b.n	8009d98 <_dtoa_r+0x6a0>
 8009df8:	9a08      	ldr	r2, [sp, #32]
 8009dfa:	2a00      	cmp	r2, #0
 8009dfc:	f000 80d7 	beq.w	8009fae <_dtoa_r+0x8b6>
 8009e00:	9a06      	ldr	r2, [sp, #24]
 8009e02:	2a01      	cmp	r2, #1
 8009e04:	f300 80ba 	bgt.w	8009f7c <_dtoa_r+0x884>
 8009e08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e0a:	2a00      	cmp	r2, #0
 8009e0c:	f000 80b2 	beq.w	8009f74 <_dtoa_r+0x87c>
 8009e10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009e14:	9e07      	ldr	r6, [sp, #28]
 8009e16:	9d04      	ldr	r5, [sp, #16]
 8009e18:	9a04      	ldr	r2, [sp, #16]
 8009e1a:	441a      	add	r2, r3
 8009e1c:	9204      	str	r2, [sp, #16]
 8009e1e:	9a05      	ldr	r2, [sp, #20]
 8009e20:	2101      	movs	r1, #1
 8009e22:	441a      	add	r2, r3
 8009e24:	4620      	mov	r0, r4
 8009e26:	9205      	str	r2, [sp, #20]
 8009e28:	f000 ff24 	bl	800ac74 <__i2b>
 8009e2c:	4607      	mov	r7, r0
 8009e2e:	2d00      	cmp	r5, #0
 8009e30:	dd0c      	ble.n	8009e4c <_dtoa_r+0x754>
 8009e32:	9b05      	ldr	r3, [sp, #20]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	dd09      	ble.n	8009e4c <_dtoa_r+0x754>
 8009e38:	42ab      	cmp	r3, r5
 8009e3a:	9a04      	ldr	r2, [sp, #16]
 8009e3c:	bfa8      	it	ge
 8009e3e:	462b      	movge	r3, r5
 8009e40:	1ad2      	subs	r2, r2, r3
 8009e42:	9204      	str	r2, [sp, #16]
 8009e44:	9a05      	ldr	r2, [sp, #20]
 8009e46:	1aed      	subs	r5, r5, r3
 8009e48:	1ad3      	subs	r3, r2, r3
 8009e4a:	9305      	str	r3, [sp, #20]
 8009e4c:	9b07      	ldr	r3, [sp, #28]
 8009e4e:	b31b      	cbz	r3, 8009e98 <_dtoa_r+0x7a0>
 8009e50:	9b08      	ldr	r3, [sp, #32]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	f000 80af 	beq.w	8009fb6 <_dtoa_r+0x8be>
 8009e58:	2e00      	cmp	r6, #0
 8009e5a:	dd13      	ble.n	8009e84 <_dtoa_r+0x78c>
 8009e5c:	4639      	mov	r1, r7
 8009e5e:	4632      	mov	r2, r6
 8009e60:	4620      	mov	r0, r4
 8009e62:	f000 ffc7 	bl	800adf4 <__pow5mult>
 8009e66:	ee18 2a10 	vmov	r2, s16
 8009e6a:	4601      	mov	r1, r0
 8009e6c:	4607      	mov	r7, r0
 8009e6e:	4620      	mov	r0, r4
 8009e70:	f000 ff16 	bl	800aca0 <__multiply>
 8009e74:	ee18 1a10 	vmov	r1, s16
 8009e78:	4680      	mov	r8, r0
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	f000 fdf8 	bl	800aa70 <_Bfree>
 8009e80:	ee08 8a10 	vmov	s16, r8
 8009e84:	9b07      	ldr	r3, [sp, #28]
 8009e86:	1b9a      	subs	r2, r3, r6
 8009e88:	d006      	beq.n	8009e98 <_dtoa_r+0x7a0>
 8009e8a:	ee18 1a10 	vmov	r1, s16
 8009e8e:	4620      	mov	r0, r4
 8009e90:	f000 ffb0 	bl	800adf4 <__pow5mult>
 8009e94:	ee08 0a10 	vmov	s16, r0
 8009e98:	2101      	movs	r1, #1
 8009e9a:	4620      	mov	r0, r4
 8009e9c:	f000 feea 	bl	800ac74 <__i2b>
 8009ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	4606      	mov	r6, r0
 8009ea6:	f340 8088 	ble.w	8009fba <_dtoa_r+0x8c2>
 8009eaa:	461a      	mov	r2, r3
 8009eac:	4601      	mov	r1, r0
 8009eae:	4620      	mov	r0, r4
 8009eb0:	f000 ffa0 	bl	800adf4 <__pow5mult>
 8009eb4:	9b06      	ldr	r3, [sp, #24]
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	4606      	mov	r6, r0
 8009eba:	f340 8081 	ble.w	8009fc0 <_dtoa_r+0x8c8>
 8009ebe:	f04f 0800 	mov.w	r8, #0
 8009ec2:	6933      	ldr	r3, [r6, #16]
 8009ec4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009ec8:	6918      	ldr	r0, [r3, #16]
 8009eca:	f000 fe83 	bl	800abd4 <__hi0bits>
 8009ece:	f1c0 0020 	rsb	r0, r0, #32
 8009ed2:	9b05      	ldr	r3, [sp, #20]
 8009ed4:	4418      	add	r0, r3
 8009ed6:	f010 001f 	ands.w	r0, r0, #31
 8009eda:	f000 8092 	beq.w	800a002 <_dtoa_r+0x90a>
 8009ede:	f1c0 0320 	rsb	r3, r0, #32
 8009ee2:	2b04      	cmp	r3, #4
 8009ee4:	f340 808a 	ble.w	8009ffc <_dtoa_r+0x904>
 8009ee8:	f1c0 001c 	rsb	r0, r0, #28
 8009eec:	9b04      	ldr	r3, [sp, #16]
 8009eee:	4403      	add	r3, r0
 8009ef0:	9304      	str	r3, [sp, #16]
 8009ef2:	9b05      	ldr	r3, [sp, #20]
 8009ef4:	4403      	add	r3, r0
 8009ef6:	4405      	add	r5, r0
 8009ef8:	9305      	str	r3, [sp, #20]
 8009efa:	9b04      	ldr	r3, [sp, #16]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	dd07      	ble.n	8009f10 <_dtoa_r+0x818>
 8009f00:	ee18 1a10 	vmov	r1, s16
 8009f04:	461a      	mov	r2, r3
 8009f06:	4620      	mov	r0, r4
 8009f08:	f000 ffce 	bl	800aea8 <__lshift>
 8009f0c:	ee08 0a10 	vmov	s16, r0
 8009f10:	9b05      	ldr	r3, [sp, #20]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	dd05      	ble.n	8009f22 <_dtoa_r+0x82a>
 8009f16:	4631      	mov	r1, r6
 8009f18:	461a      	mov	r2, r3
 8009f1a:	4620      	mov	r0, r4
 8009f1c:	f000 ffc4 	bl	800aea8 <__lshift>
 8009f20:	4606      	mov	r6, r0
 8009f22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d06e      	beq.n	800a006 <_dtoa_r+0x90e>
 8009f28:	ee18 0a10 	vmov	r0, s16
 8009f2c:	4631      	mov	r1, r6
 8009f2e:	f001 f82b 	bl	800af88 <__mcmp>
 8009f32:	2800      	cmp	r0, #0
 8009f34:	da67      	bge.n	800a006 <_dtoa_r+0x90e>
 8009f36:	9b00      	ldr	r3, [sp, #0]
 8009f38:	3b01      	subs	r3, #1
 8009f3a:	ee18 1a10 	vmov	r1, s16
 8009f3e:	9300      	str	r3, [sp, #0]
 8009f40:	220a      	movs	r2, #10
 8009f42:	2300      	movs	r3, #0
 8009f44:	4620      	mov	r0, r4
 8009f46:	f000 fdb5 	bl	800aab4 <__multadd>
 8009f4a:	9b08      	ldr	r3, [sp, #32]
 8009f4c:	ee08 0a10 	vmov	s16, r0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	f000 81b1 	beq.w	800a2b8 <_dtoa_r+0xbc0>
 8009f56:	2300      	movs	r3, #0
 8009f58:	4639      	mov	r1, r7
 8009f5a:	220a      	movs	r2, #10
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	f000 fda9 	bl	800aab4 <__multadd>
 8009f62:	9b02      	ldr	r3, [sp, #8]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	4607      	mov	r7, r0
 8009f68:	f300 808e 	bgt.w	800a088 <_dtoa_r+0x990>
 8009f6c:	9b06      	ldr	r3, [sp, #24]
 8009f6e:	2b02      	cmp	r3, #2
 8009f70:	dc51      	bgt.n	800a016 <_dtoa_r+0x91e>
 8009f72:	e089      	b.n	800a088 <_dtoa_r+0x990>
 8009f74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009f7a:	e74b      	b.n	8009e14 <_dtoa_r+0x71c>
 8009f7c:	9b03      	ldr	r3, [sp, #12]
 8009f7e:	1e5e      	subs	r6, r3, #1
 8009f80:	9b07      	ldr	r3, [sp, #28]
 8009f82:	42b3      	cmp	r3, r6
 8009f84:	bfbf      	itttt	lt
 8009f86:	9b07      	ldrlt	r3, [sp, #28]
 8009f88:	9607      	strlt	r6, [sp, #28]
 8009f8a:	1af2      	sublt	r2, r6, r3
 8009f8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009f8e:	bfb6      	itet	lt
 8009f90:	189b      	addlt	r3, r3, r2
 8009f92:	1b9e      	subge	r6, r3, r6
 8009f94:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009f96:	9b03      	ldr	r3, [sp, #12]
 8009f98:	bfb8      	it	lt
 8009f9a:	2600      	movlt	r6, #0
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	bfb7      	itett	lt
 8009fa0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009fa4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009fa8:	1a9d      	sublt	r5, r3, r2
 8009faa:	2300      	movlt	r3, #0
 8009fac:	e734      	b.n	8009e18 <_dtoa_r+0x720>
 8009fae:	9e07      	ldr	r6, [sp, #28]
 8009fb0:	9d04      	ldr	r5, [sp, #16]
 8009fb2:	9f08      	ldr	r7, [sp, #32]
 8009fb4:	e73b      	b.n	8009e2e <_dtoa_r+0x736>
 8009fb6:	9a07      	ldr	r2, [sp, #28]
 8009fb8:	e767      	b.n	8009e8a <_dtoa_r+0x792>
 8009fba:	9b06      	ldr	r3, [sp, #24]
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	dc18      	bgt.n	8009ff2 <_dtoa_r+0x8fa>
 8009fc0:	f1ba 0f00 	cmp.w	sl, #0
 8009fc4:	d115      	bne.n	8009ff2 <_dtoa_r+0x8fa>
 8009fc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009fca:	b993      	cbnz	r3, 8009ff2 <_dtoa_r+0x8fa>
 8009fcc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009fd0:	0d1b      	lsrs	r3, r3, #20
 8009fd2:	051b      	lsls	r3, r3, #20
 8009fd4:	b183      	cbz	r3, 8009ff8 <_dtoa_r+0x900>
 8009fd6:	9b04      	ldr	r3, [sp, #16]
 8009fd8:	3301      	adds	r3, #1
 8009fda:	9304      	str	r3, [sp, #16]
 8009fdc:	9b05      	ldr	r3, [sp, #20]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	9305      	str	r3, [sp, #20]
 8009fe2:	f04f 0801 	mov.w	r8, #1
 8009fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	f47f af6a 	bne.w	8009ec2 <_dtoa_r+0x7ca>
 8009fee:	2001      	movs	r0, #1
 8009ff0:	e76f      	b.n	8009ed2 <_dtoa_r+0x7da>
 8009ff2:	f04f 0800 	mov.w	r8, #0
 8009ff6:	e7f6      	b.n	8009fe6 <_dtoa_r+0x8ee>
 8009ff8:	4698      	mov	r8, r3
 8009ffa:	e7f4      	b.n	8009fe6 <_dtoa_r+0x8ee>
 8009ffc:	f43f af7d 	beq.w	8009efa <_dtoa_r+0x802>
 800a000:	4618      	mov	r0, r3
 800a002:	301c      	adds	r0, #28
 800a004:	e772      	b.n	8009eec <_dtoa_r+0x7f4>
 800a006:	9b03      	ldr	r3, [sp, #12]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	dc37      	bgt.n	800a07c <_dtoa_r+0x984>
 800a00c:	9b06      	ldr	r3, [sp, #24]
 800a00e:	2b02      	cmp	r3, #2
 800a010:	dd34      	ble.n	800a07c <_dtoa_r+0x984>
 800a012:	9b03      	ldr	r3, [sp, #12]
 800a014:	9302      	str	r3, [sp, #8]
 800a016:	9b02      	ldr	r3, [sp, #8]
 800a018:	b96b      	cbnz	r3, 800a036 <_dtoa_r+0x93e>
 800a01a:	4631      	mov	r1, r6
 800a01c:	2205      	movs	r2, #5
 800a01e:	4620      	mov	r0, r4
 800a020:	f000 fd48 	bl	800aab4 <__multadd>
 800a024:	4601      	mov	r1, r0
 800a026:	4606      	mov	r6, r0
 800a028:	ee18 0a10 	vmov	r0, s16
 800a02c:	f000 ffac 	bl	800af88 <__mcmp>
 800a030:	2800      	cmp	r0, #0
 800a032:	f73f adbb 	bgt.w	8009bac <_dtoa_r+0x4b4>
 800a036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a038:	9d01      	ldr	r5, [sp, #4]
 800a03a:	43db      	mvns	r3, r3
 800a03c:	9300      	str	r3, [sp, #0]
 800a03e:	f04f 0800 	mov.w	r8, #0
 800a042:	4631      	mov	r1, r6
 800a044:	4620      	mov	r0, r4
 800a046:	f000 fd13 	bl	800aa70 <_Bfree>
 800a04a:	2f00      	cmp	r7, #0
 800a04c:	f43f aea4 	beq.w	8009d98 <_dtoa_r+0x6a0>
 800a050:	f1b8 0f00 	cmp.w	r8, #0
 800a054:	d005      	beq.n	800a062 <_dtoa_r+0x96a>
 800a056:	45b8      	cmp	r8, r7
 800a058:	d003      	beq.n	800a062 <_dtoa_r+0x96a>
 800a05a:	4641      	mov	r1, r8
 800a05c:	4620      	mov	r0, r4
 800a05e:	f000 fd07 	bl	800aa70 <_Bfree>
 800a062:	4639      	mov	r1, r7
 800a064:	4620      	mov	r0, r4
 800a066:	f000 fd03 	bl	800aa70 <_Bfree>
 800a06a:	e695      	b.n	8009d98 <_dtoa_r+0x6a0>
 800a06c:	2600      	movs	r6, #0
 800a06e:	4637      	mov	r7, r6
 800a070:	e7e1      	b.n	800a036 <_dtoa_r+0x93e>
 800a072:	9700      	str	r7, [sp, #0]
 800a074:	4637      	mov	r7, r6
 800a076:	e599      	b.n	8009bac <_dtoa_r+0x4b4>
 800a078:	40240000 	.word	0x40240000
 800a07c:	9b08      	ldr	r3, [sp, #32]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	f000 80ca 	beq.w	800a218 <_dtoa_r+0xb20>
 800a084:	9b03      	ldr	r3, [sp, #12]
 800a086:	9302      	str	r3, [sp, #8]
 800a088:	2d00      	cmp	r5, #0
 800a08a:	dd05      	ble.n	800a098 <_dtoa_r+0x9a0>
 800a08c:	4639      	mov	r1, r7
 800a08e:	462a      	mov	r2, r5
 800a090:	4620      	mov	r0, r4
 800a092:	f000 ff09 	bl	800aea8 <__lshift>
 800a096:	4607      	mov	r7, r0
 800a098:	f1b8 0f00 	cmp.w	r8, #0
 800a09c:	d05b      	beq.n	800a156 <_dtoa_r+0xa5e>
 800a09e:	6879      	ldr	r1, [r7, #4]
 800a0a0:	4620      	mov	r0, r4
 800a0a2:	f000 fca5 	bl	800a9f0 <_Balloc>
 800a0a6:	4605      	mov	r5, r0
 800a0a8:	b928      	cbnz	r0, 800a0b6 <_dtoa_r+0x9be>
 800a0aa:	4b87      	ldr	r3, [pc, #540]	; (800a2c8 <_dtoa_r+0xbd0>)
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a0b2:	f7ff bb3b 	b.w	800972c <_dtoa_r+0x34>
 800a0b6:	693a      	ldr	r2, [r7, #16]
 800a0b8:	3202      	adds	r2, #2
 800a0ba:	0092      	lsls	r2, r2, #2
 800a0bc:	f107 010c 	add.w	r1, r7, #12
 800a0c0:	300c      	adds	r0, #12
 800a0c2:	f7fd fd0f 	bl	8007ae4 <memcpy>
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	4629      	mov	r1, r5
 800a0ca:	4620      	mov	r0, r4
 800a0cc:	f000 feec 	bl	800aea8 <__lshift>
 800a0d0:	9b01      	ldr	r3, [sp, #4]
 800a0d2:	f103 0901 	add.w	r9, r3, #1
 800a0d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a0da:	4413      	add	r3, r2
 800a0dc:	9305      	str	r3, [sp, #20]
 800a0de:	f00a 0301 	and.w	r3, sl, #1
 800a0e2:	46b8      	mov	r8, r7
 800a0e4:	9304      	str	r3, [sp, #16]
 800a0e6:	4607      	mov	r7, r0
 800a0e8:	4631      	mov	r1, r6
 800a0ea:	ee18 0a10 	vmov	r0, s16
 800a0ee:	f7ff fa77 	bl	80095e0 <quorem>
 800a0f2:	4641      	mov	r1, r8
 800a0f4:	9002      	str	r0, [sp, #8]
 800a0f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a0fa:	ee18 0a10 	vmov	r0, s16
 800a0fe:	f000 ff43 	bl	800af88 <__mcmp>
 800a102:	463a      	mov	r2, r7
 800a104:	9003      	str	r0, [sp, #12]
 800a106:	4631      	mov	r1, r6
 800a108:	4620      	mov	r0, r4
 800a10a:	f000 ff59 	bl	800afc0 <__mdiff>
 800a10e:	68c2      	ldr	r2, [r0, #12]
 800a110:	f109 3bff 	add.w	fp, r9, #4294967295
 800a114:	4605      	mov	r5, r0
 800a116:	bb02      	cbnz	r2, 800a15a <_dtoa_r+0xa62>
 800a118:	4601      	mov	r1, r0
 800a11a:	ee18 0a10 	vmov	r0, s16
 800a11e:	f000 ff33 	bl	800af88 <__mcmp>
 800a122:	4602      	mov	r2, r0
 800a124:	4629      	mov	r1, r5
 800a126:	4620      	mov	r0, r4
 800a128:	9207      	str	r2, [sp, #28]
 800a12a:	f000 fca1 	bl	800aa70 <_Bfree>
 800a12e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a132:	ea43 0102 	orr.w	r1, r3, r2
 800a136:	9b04      	ldr	r3, [sp, #16]
 800a138:	430b      	orrs	r3, r1
 800a13a:	464d      	mov	r5, r9
 800a13c:	d10f      	bne.n	800a15e <_dtoa_r+0xa66>
 800a13e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a142:	d02a      	beq.n	800a19a <_dtoa_r+0xaa2>
 800a144:	9b03      	ldr	r3, [sp, #12]
 800a146:	2b00      	cmp	r3, #0
 800a148:	dd02      	ble.n	800a150 <_dtoa_r+0xa58>
 800a14a:	9b02      	ldr	r3, [sp, #8]
 800a14c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a150:	f88b a000 	strb.w	sl, [fp]
 800a154:	e775      	b.n	800a042 <_dtoa_r+0x94a>
 800a156:	4638      	mov	r0, r7
 800a158:	e7ba      	b.n	800a0d0 <_dtoa_r+0x9d8>
 800a15a:	2201      	movs	r2, #1
 800a15c:	e7e2      	b.n	800a124 <_dtoa_r+0xa2c>
 800a15e:	9b03      	ldr	r3, [sp, #12]
 800a160:	2b00      	cmp	r3, #0
 800a162:	db04      	blt.n	800a16e <_dtoa_r+0xa76>
 800a164:	9906      	ldr	r1, [sp, #24]
 800a166:	430b      	orrs	r3, r1
 800a168:	9904      	ldr	r1, [sp, #16]
 800a16a:	430b      	orrs	r3, r1
 800a16c:	d122      	bne.n	800a1b4 <_dtoa_r+0xabc>
 800a16e:	2a00      	cmp	r2, #0
 800a170:	ddee      	ble.n	800a150 <_dtoa_r+0xa58>
 800a172:	ee18 1a10 	vmov	r1, s16
 800a176:	2201      	movs	r2, #1
 800a178:	4620      	mov	r0, r4
 800a17a:	f000 fe95 	bl	800aea8 <__lshift>
 800a17e:	4631      	mov	r1, r6
 800a180:	ee08 0a10 	vmov	s16, r0
 800a184:	f000 ff00 	bl	800af88 <__mcmp>
 800a188:	2800      	cmp	r0, #0
 800a18a:	dc03      	bgt.n	800a194 <_dtoa_r+0xa9c>
 800a18c:	d1e0      	bne.n	800a150 <_dtoa_r+0xa58>
 800a18e:	f01a 0f01 	tst.w	sl, #1
 800a192:	d0dd      	beq.n	800a150 <_dtoa_r+0xa58>
 800a194:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a198:	d1d7      	bne.n	800a14a <_dtoa_r+0xa52>
 800a19a:	2339      	movs	r3, #57	; 0x39
 800a19c:	f88b 3000 	strb.w	r3, [fp]
 800a1a0:	462b      	mov	r3, r5
 800a1a2:	461d      	mov	r5, r3
 800a1a4:	3b01      	subs	r3, #1
 800a1a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a1aa:	2a39      	cmp	r2, #57	; 0x39
 800a1ac:	d071      	beq.n	800a292 <_dtoa_r+0xb9a>
 800a1ae:	3201      	adds	r2, #1
 800a1b0:	701a      	strb	r2, [r3, #0]
 800a1b2:	e746      	b.n	800a042 <_dtoa_r+0x94a>
 800a1b4:	2a00      	cmp	r2, #0
 800a1b6:	dd07      	ble.n	800a1c8 <_dtoa_r+0xad0>
 800a1b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a1bc:	d0ed      	beq.n	800a19a <_dtoa_r+0xaa2>
 800a1be:	f10a 0301 	add.w	r3, sl, #1
 800a1c2:	f88b 3000 	strb.w	r3, [fp]
 800a1c6:	e73c      	b.n	800a042 <_dtoa_r+0x94a>
 800a1c8:	9b05      	ldr	r3, [sp, #20]
 800a1ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a1ce:	4599      	cmp	r9, r3
 800a1d0:	d047      	beq.n	800a262 <_dtoa_r+0xb6a>
 800a1d2:	ee18 1a10 	vmov	r1, s16
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	220a      	movs	r2, #10
 800a1da:	4620      	mov	r0, r4
 800a1dc:	f000 fc6a 	bl	800aab4 <__multadd>
 800a1e0:	45b8      	cmp	r8, r7
 800a1e2:	ee08 0a10 	vmov	s16, r0
 800a1e6:	f04f 0300 	mov.w	r3, #0
 800a1ea:	f04f 020a 	mov.w	r2, #10
 800a1ee:	4641      	mov	r1, r8
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	d106      	bne.n	800a202 <_dtoa_r+0xb0a>
 800a1f4:	f000 fc5e 	bl	800aab4 <__multadd>
 800a1f8:	4680      	mov	r8, r0
 800a1fa:	4607      	mov	r7, r0
 800a1fc:	f109 0901 	add.w	r9, r9, #1
 800a200:	e772      	b.n	800a0e8 <_dtoa_r+0x9f0>
 800a202:	f000 fc57 	bl	800aab4 <__multadd>
 800a206:	4639      	mov	r1, r7
 800a208:	4680      	mov	r8, r0
 800a20a:	2300      	movs	r3, #0
 800a20c:	220a      	movs	r2, #10
 800a20e:	4620      	mov	r0, r4
 800a210:	f000 fc50 	bl	800aab4 <__multadd>
 800a214:	4607      	mov	r7, r0
 800a216:	e7f1      	b.n	800a1fc <_dtoa_r+0xb04>
 800a218:	9b03      	ldr	r3, [sp, #12]
 800a21a:	9302      	str	r3, [sp, #8]
 800a21c:	9d01      	ldr	r5, [sp, #4]
 800a21e:	ee18 0a10 	vmov	r0, s16
 800a222:	4631      	mov	r1, r6
 800a224:	f7ff f9dc 	bl	80095e0 <quorem>
 800a228:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a22c:	9b01      	ldr	r3, [sp, #4]
 800a22e:	f805 ab01 	strb.w	sl, [r5], #1
 800a232:	1aea      	subs	r2, r5, r3
 800a234:	9b02      	ldr	r3, [sp, #8]
 800a236:	4293      	cmp	r3, r2
 800a238:	dd09      	ble.n	800a24e <_dtoa_r+0xb56>
 800a23a:	ee18 1a10 	vmov	r1, s16
 800a23e:	2300      	movs	r3, #0
 800a240:	220a      	movs	r2, #10
 800a242:	4620      	mov	r0, r4
 800a244:	f000 fc36 	bl	800aab4 <__multadd>
 800a248:	ee08 0a10 	vmov	s16, r0
 800a24c:	e7e7      	b.n	800a21e <_dtoa_r+0xb26>
 800a24e:	9b02      	ldr	r3, [sp, #8]
 800a250:	2b00      	cmp	r3, #0
 800a252:	bfc8      	it	gt
 800a254:	461d      	movgt	r5, r3
 800a256:	9b01      	ldr	r3, [sp, #4]
 800a258:	bfd8      	it	le
 800a25a:	2501      	movle	r5, #1
 800a25c:	441d      	add	r5, r3
 800a25e:	f04f 0800 	mov.w	r8, #0
 800a262:	ee18 1a10 	vmov	r1, s16
 800a266:	2201      	movs	r2, #1
 800a268:	4620      	mov	r0, r4
 800a26a:	f000 fe1d 	bl	800aea8 <__lshift>
 800a26e:	4631      	mov	r1, r6
 800a270:	ee08 0a10 	vmov	s16, r0
 800a274:	f000 fe88 	bl	800af88 <__mcmp>
 800a278:	2800      	cmp	r0, #0
 800a27a:	dc91      	bgt.n	800a1a0 <_dtoa_r+0xaa8>
 800a27c:	d102      	bne.n	800a284 <_dtoa_r+0xb8c>
 800a27e:	f01a 0f01 	tst.w	sl, #1
 800a282:	d18d      	bne.n	800a1a0 <_dtoa_r+0xaa8>
 800a284:	462b      	mov	r3, r5
 800a286:	461d      	mov	r5, r3
 800a288:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a28c:	2a30      	cmp	r2, #48	; 0x30
 800a28e:	d0fa      	beq.n	800a286 <_dtoa_r+0xb8e>
 800a290:	e6d7      	b.n	800a042 <_dtoa_r+0x94a>
 800a292:	9a01      	ldr	r2, [sp, #4]
 800a294:	429a      	cmp	r2, r3
 800a296:	d184      	bne.n	800a1a2 <_dtoa_r+0xaaa>
 800a298:	9b00      	ldr	r3, [sp, #0]
 800a29a:	3301      	adds	r3, #1
 800a29c:	9300      	str	r3, [sp, #0]
 800a29e:	2331      	movs	r3, #49	; 0x31
 800a2a0:	7013      	strb	r3, [r2, #0]
 800a2a2:	e6ce      	b.n	800a042 <_dtoa_r+0x94a>
 800a2a4:	4b09      	ldr	r3, [pc, #36]	; (800a2cc <_dtoa_r+0xbd4>)
 800a2a6:	f7ff ba95 	b.w	80097d4 <_dtoa_r+0xdc>
 800a2aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	f47f aa6e 	bne.w	800978e <_dtoa_r+0x96>
 800a2b2:	4b07      	ldr	r3, [pc, #28]	; (800a2d0 <_dtoa_r+0xbd8>)
 800a2b4:	f7ff ba8e 	b.w	80097d4 <_dtoa_r+0xdc>
 800a2b8:	9b02      	ldr	r3, [sp, #8]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	dcae      	bgt.n	800a21c <_dtoa_r+0xb24>
 800a2be:	9b06      	ldr	r3, [sp, #24]
 800a2c0:	2b02      	cmp	r3, #2
 800a2c2:	f73f aea8 	bgt.w	800a016 <_dtoa_r+0x91e>
 800a2c6:	e7a9      	b.n	800a21c <_dtoa_r+0xb24>
 800a2c8:	0800e070 	.word	0x0800e070
 800a2cc:	0800de74 	.word	0x0800de74
 800a2d0:	0800dff1 	.word	0x0800dff1

0800a2d4 <rshift>:
 800a2d4:	6903      	ldr	r3, [r0, #16]
 800a2d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a2da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2de:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a2e2:	f100 0414 	add.w	r4, r0, #20
 800a2e6:	dd45      	ble.n	800a374 <rshift+0xa0>
 800a2e8:	f011 011f 	ands.w	r1, r1, #31
 800a2ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a2f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a2f4:	d10c      	bne.n	800a310 <rshift+0x3c>
 800a2f6:	f100 0710 	add.w	r7, r0, #16
 800a2fa:	4629      	mov	r1, r5
 800a2fc:	42b1      	cmp	r1, r6
 800a2fe:	d334      	bcc.n	800a36a <rshift+0x96>
 800a300:	1a9b      	subs	r3, r3, r2
 800a302:	009b      	lsls	r3, r3, #2
 800a304:	1eea      	subs	r2, r5, #3
 800a306:	4296      	cmp	r6, r2
 800a308:	bf38      	it	cc
 800a30a:	2300      	movcc	r3, #0
 800a30c:	4423      	add	r3, r4
 800a30e:	e015      	b.n	800a33c <rshift+0x68>
 800a310:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a314:	f1c1 0820 	rsb	r8, r1, #32
 800a318:	40cf      	lsrs	r7, r1
 800a31a:	f105 0e04 	add.w	lr, r5, #4
 800a31e:	46a1      	mov	r9, r4
 800a320:	4576      	cmp	r6, lr
 800a322:	46f4      	mov	ip, lr
 800a324:	d815      	bhi.n	800a352 <rshift+0x7e>
 800a326:	1a9a      	subs	r2, r3, r2
 800a328:	0092      	lsls	r2, r2, #2
 800a32a:	3a04      	subs	r2, #4
 800a32c:	3501      	adds	r5, #1
 800a32e:	42ae      	cmp	r6, r5
 800a330:	bf38      	it	cc
 800a332:	2200      	movcc	r2, #0
 800a334:	18a3      	adds	r3, r4, r2
 800a336:	50a7      	str	r7, [r4, r2]
 800a338:	b107      	cbz	r7, 800a33c <rshift+0x68>
 800a33a:	3304      	adds	r3, #4
 800a33c:	1b1a      	subs	r2, r3, r4
 800a33e:	42a3      	cmp	r3, r4
 800a340:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a344:	bf08      	it	eq
 800a346:	2300      	moveq	r3, #0
 800a348:	6102      	str	r2, [r0, #16]
 800a34a:	bf08      	it	eq
 800a34c:	6143      	streq	r3, [r0, #20]
 800a34e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a352:	f8dc c000 	ldr.w	ip, [ip]
 800a356:	fa0c fc08 	lsl.w	ip, ip, r8
 800a35a:	ea4c 0707 	orr.w	r7, ip, r7
 800a35e:	f849 7b04 	str.w	r7, [r9], #4
 800a362:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a366:	40cf      	lsrs	r7, r1
 800a368:	e7da      	b.n	800a320 <rshift+0x4c>
 800a36a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a36e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a372:	e7c3      	b.n	800a2fc <rshift+0x28>
 800a374:	4623      	mov	r3, r4
 800a376:	e7e1      	b.n	800a33c <rshift+0x68>

0800a378 <__hexdig_fun>:
 800a378:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a37c:	2b09      	cmp	r3, #9
 800a37e:	d802      	bhi.n	800a386 <__hexdig_fun+0xe>
 800a380:	3820      	subs	r0, #32
 800a382:	b2c0      	uxtb	r0, r0
 800a384:	4770      	bx	lr
 800a386:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a38a:	2b05      	cmp	r3, #5
 800a38c:	d801      	bhi.n	800a392 <__hexdig_fun+0x1a>
 800a38e:	3847      	subs	r0, #71	; 0x47
 800a390:	e7f7      	b.n	800a382 <__hexdig_fun+0xa>
 800a392:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a396:	2b05      	cmp	r3, #5
 800a398:	d801      	bhi.n	800a39e <__hexdig_fun+0x26>
 800a39a:	3827      	subs	r0, #39	; 0x27
 800a39c:	e7f1      	b.n	800a382 <__hexdig_fun+0xa>
 800a39e:	2000      	movs	r0, #0
 800a3a0:	4770      	bx	lr
	...

0800a3a4 <__gethex>:
 800a3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a8:	ed2d 8b02 	vpush	{d8}
 800a3ac:	b089      	sub	sp, #36	; 0x24
 800a3ae:	ee08 0a10 	vmov	s16, r0
 800a3b2:	9304      	str	r3, [sp, #16]
 800a3b4:	4bb4      	ldr	r3, [pc, #720]	; (800a688 <__gethex+0x2e4>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	9301      	str	r3, [sp, #4]
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	468b      	mov	fp, r1
 800a3be:	4690      	mov	r8, r2
 800a3c0:	f7f5 fede 	bl	8000180 <strlen>
 800a3c4:	9b01      	ldr	r3, [sp, #4]
 800a3c6:	f8db 2000 	ldr.w	r2, [fp]
 800a3ca:	4403      	add	r3, r0
 800a3cc:	4682      	mov	sl, r0
 800a3ce:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a3d2:	9305      	str	r3, [sp, #20]
 800a3d4:	1c93      	adds	r3, r2, #2
 800a3d6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a3da:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a3de:	32fe      	adds	r2, #254	; 0xfe
 800a3e0:	18d1      	adds	r1, r2, r3
 800a3e2:	461f      	mov	r7, r3
 800a3e4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a3e8:	9100      	str	r1, [sp, #0]
 800a3ea:	2830      	cmp	r0, #48	; 0x30
 800a3ec:	d0f8      	beq.n	800a3e0 <__gethex+0x3c>
 800a3ee:	f7ff ffc3 	bl	800a378 <__hexdig_fun>
 800a3f2:	4604      	mov	r4, r0
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	d13a      	bne.n	800a46e <__gethex+0xca>
 800a3f8:	9901      	ldr	r1, [sp, #4]
 800a3fa:	4652      	mov	r2, sl
 800a3fc:	4638      	mov	r0, r7
 800a3fe:	f001 fa23 	bl	800b848 <strncmp>
 800a402:	4605      	mov	r5, r0
 800a404:	2800      	cmp	r0, #0
 800a406:	d168      	bne.n	800a4da <__gethex+0x136>
 800a408:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a40c:	eb07 060a 	add.w	r6, r7, sl
 800a410:	f7ff ffb2 	bl	800a378 <__hexdig_fun>
 800a414:	2800      	cmp	r0, #0
 800a416:	d062      	beq.n	800a4de <__gethex+0x13a>
 800a418:	4633      	mov	r3, r6
 800a41a:	7818      	ldrb	r0, [r3, #0]
 800a41c:	2830      	cmp	r0, #48	; 0x30
 800a41e:	461f      	mov	r7, r3
 800a420:	f103 0301 	add.w	r3, r3, #1
 800a424:	d0f9      	beq.n	800a41a <__gethex+0x76>
 800a426:	f7ff ffa7 	bl	800a378 <__hexdig_fun>
 800a42a:	2301      	movs	r3, #1
 800a42c:	fab0 f480 	clz	r4, r0
 800a430:	0964      	lsrs	r4, r4, #5
 800a432:	4635      	mov	r5, r6
 800a434:	9300      	str	r3, [sp, #0]
 800a436:	463a      	mov	r2, r7
 800a438:	4616      	mov	r6, r2
 800a43a:	3201      	adds	r2, #1
 800a43c:	7830      	ldrb	r0, [r6, #0]
 800a43e:	f7ff ff9b 	bl	800a378 <__hexdig_fun>
 800a442:	2800      	cmp	r0, #0
 800a444:	d1f8      	bne.n	800a438 <__gethex+0x94>
 800a446:	9901      	ldr	r1, [sp, #4]
 800a448:	4652      	mov	r2, sl
 800a44a:	4630      	mov	r0, r6
 800a44c:	f001 f9fc 	bl	800b848 <strncmp>
 800a450:	b980      	cbnz	r0, 800a474 <__gethex+0xd0>
 800a452:	b94d      	cbnz	r5, 800a468 <__gethex+0xc4>
 800a454:	eb06 050a 	add.w	r5, r6, sl
 800a458:	462a      	mov	r2, r5
 800a45a:	4616      	mov	r6, r2
 800a45c:	3201      	adds	r2, #1
 800a45e:	7830      	ldrb	r0, [r6, #0]
 800a460:	f7ff ff8a 	bl	800a378 <__hexdig_fun>
 800a464:	2800      	cmp	r0, #0
 800a466:	d1f8      	bne.n	800a45a <__gethex+0xb6>
 800a468:	1bad      	subs	r5, r5, r6
 800a46a:	00ad      	lsls	r5, r5, #2
 800a46c:	e004      	b.n	800a478 <__gethex+0xd4>
 800a46e:	2400      	movs	r4, #0
 800a470:	4625      	mov	r5, r4
 800a472:	e7e0      	b.n	800a436 <__gethex+0x92>
 800a474:	2d00      	cmp	r5, #0
 800a476:	d1f7      	bne.n	800a468 <__gethex+0xc4>
 800a478:	7833      	ldrb	r3, [r6, #0]
 800a47a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a47e:	2b50      	cmp	r3, #80	; 0x50
 800a480:	d13b      	bne.n	800a4fa <__gethex+0x156>
 800a482:	7873      	ldrb	r3, [r6, #1]
 800a484:	2b2b      	cmp	r3, #43	; 0x2b
 800a486:	d02c      	beq.n	800a4e2 <__gethex+0x13e>
 800a488:	2b2d      	cmp	r3, #45	; 0x2d
 800a48a:	d02e      	beq.n	800a4ea <__gethex+0x146>
 800a48c:	1c71      	adds	r1, r6, #1
 800a48e:	f04f 0900 	mov.w	r9, #0
 800a492:	7808      	ldrb	r0, [r1, #0]
 800a494:	f7ff ff70 	bl	800a378 <__hexdig_fun>
 800a498:	1e43      	subs	r3, r0, #1
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	2b18      	cmp	r3, #24
 800a49e:	d82c      	bhi.n	800a4fa <__gethex+0x156>
 800a4a0:	f1a0 0210 	sub.w	r2, r0, #16
 800a4a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a4a8:	f7ff ff66 	bl	800a378 <__hexdig_fun>
 800a4ac:	1e43      	subs	r3, r0, #1
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	2b18      	cmp	r3, #24
 800a4b2:	d91d      	bls.n	800a4f0 <__gethex+0x14c>
 800a4b4:	f1b9 0f00 	cmp.w	r9, #0
 800a4b8:	d000      	beq.n	800a4bc <__gethex+0x118>
 800a4ba:	4252      	negs	r2, r2
 800a4bc:	4415      	add	r5, r2
 800a4be:	f8cb 1000 	str.w	r1, [fp]
 800a4c2:	b1e4      	cbz	r4, 800a4fe <__gethex+0x15a>
 800a4c4:	9b00      	ldr	r3, [sp, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	bf14      	ite	ne
 800a4ca:	2700      	movne	r7, #0
 800a4cc:	2706      	moveq	r7, #6
 800a4ce:	4638      	mov	r0, r7
 800a4d0:	b009      	add	sp, #36	; 0x24
 800a4d2:	ecbd 8b02 	vpop	{d8}
 800a4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4da:	463e      	mov	r6, r7
 800a4dc:	4625      	mov	r5, r4
 800a4de:	2401      	movs	r4, #1
 800a4e0:	e7ca      	b.n	800a478 <__gethex+0xd4>
 800a4e2:	f04f 0900 	mov.w	r9, #0
 800a4e6:	1cb1      	adds	r1, r6, #2
 800a4e8:	e7d3      	b.n	800a492 <__gethex+0xee>
 800a4ea:	f04f 0901 	mov.w	r9, #1
 800a4ee:	e7fa      	b.n	800a4e6 <__gethex+0x142>
 800a4f0:	230a      	movs	r3, #10
 800a4f2:	fb03 0202 	mla	r2, r3, r2, r0
 800a4f6:	3a10      	subs	r2, #16
 800a4f8:	e7d4      	b.n	800a4a4 <__gethex+0x100>
 800a4fa:	4631      	mov	r1, r6
 800a4fc:	e7df      	b.n	800a4be <__gethex+0x11a>
 800a4fe:	1bf3      	subs	r3, r6, r7
 800a500:	3b01      	subs	r3, #1
 800a502:	4621      	mov	r1, r4
 800a504:	2b07      	cmp	r3, #7
 800a506:	dc0b      	bgt.n	800a520 <__gethex+0x17c>
 800a508:	ee18 0a10 	vmov	r0, s16
 800a50c:	f000 fa70 	bl	800a9f0 <_Balloc>
 800a510:	4604      	mov	r4, r0
 800a512:	b940      	cbnz	r0, 800a526 <__gethex+0x182>
 800a514:	4b5d      	ldr	r3, [pc, #372]	; (800a68c <__gethex+0x2e8>)
 800a516:	4602      	mov	r2, r0
 800a518:	21de      	movs	r1, #222	; 0xde
 800a51a:	485d      	ldr	r0, [pc, #372]	; (800a690 <__gethex+0x2ec>)
 800a51c:	f001 f9b6 	bl	800b88c <__assert_func>
 800a520:	3101      	adds	r1, #1
 800a522:	105b      	asrs	r3, r3, #1
 800a524:	e7ee      	b.n	800a504 <__gethex+0x160>
 800a526:	f100 0914 	add.w	r9, r0, #20
 800a52a:	f04f 0b00 	mov.w	fp, #0
 800a52e:	f1ca 0301 	rsb	r3, sl, #1
 800a532:	f8cd 9008 	str.w	r9, [sp, #8]
 800a536:	f8cd b000 	str.w	fp, [sp]
 800a53a:	9306      	str	r3, [sp, #24]
 800a53c:	42b7      	cmp	r7, r6
 800a53e:	d340      	bcc.n	800a5c2 <__gethex+0x21e>
 800a540:	9802      	ldr	r0, [sp, #8]
 800a542:	9b00      	ldr	r3, [sp, #0]
 800a544:	f840 3b04 	str.w	r3, [r0], #4
 800a548:	eba0 0009 	sub.w	r0, r0, r9
 800a54c:	1080      	asrs	r0, r0, #2
 800a54e:	0146      	lsls	r6, r0, #5
 800a550:	6120      	str	r0, [r4, #16]
 800a552:	4618      	mov	r0, r3
 800a554:	f000 fb3e 	bl	800abd4 <__hi0bits>
 800a558:	1a30      	subs	r0, r6, r0
 800a55a:	f8d8 6000 	ldr.w	r6, [r8]
 800a55e:	42b0      	cmp	r0, r6
 800a560:	dd63      	ble.n	800a62a <__gethex+0x286>
 800a562:	1b87      	subs	r7, r0, r6
 800a564:	4639      	mov	r1, r7
 800a566:	4620      	mov	r0, r4
 800a568:	f000 fee2 	bl	800b330 <__any_on>
 800a56c:	4682      	mov	sl, r0
 800a56e:	b1a8      	cbz	r0, 800a59c <__gethex+0x1f8>
 800a570:	1e7b      	subs	r3, r7, #1
 800a572:	1159      	asrs	r1, r3, #5
 800a574:	f003 021f 	and.w	r2, r3, #31
 800a578:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a57c:	f04f 0a01 	mov.w	sl, #1
 800a580:	fa0a f202 	lsl.w	r2, sl, r2
 800a584:	420a      	tst	r2, r1
 800a586:	d009      	beq.n	800a59c <__gethex+0x1f8>
 800a588:	4553      	cmp	r3, sl
 800a58a:	dd05      	ble.n	800a598 <__gethex+0x1f4>
 800a58c:	1eb9      	subs	r1, r7, #2
 800a58e:	4620      	mov	r0, r4
 800a590:	f000 fece 	bl	800b330 <__any_on>
 800a594:	2800      	cmp	r0, #0
 800a596:	d145      	bne.n	800a624 <__gethex+0x280>
 800a598:	f04f 0a02 	mov.w	sl, #2
 800a59c:	4639      	mov	r1, r7
 800a59e:	4620      	mov	r0, r4
 800a5a0:	f7ff fe98 	bl	800a2d4 <rshift>
 800a5a4:	443d      	add	r5, r7
 800a5a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a5aa:	42ab      	cmp	r3, r5
 800a5ac:	da4c      	bge.n	800a648 <__gethex+0x2a4>
 800a5ae:	ee18 0a10 	vmov	r0, s16
 800a5b2:	4621      	mov	r1, r4
 800a5b4:	f000 fa5c 	bl	800aa70 <_Bfree>
 800a5b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	6013      	str	r3, [r2, #0]
 800a5be:	27a3      	movs	r7, #163	; 0xa3
 800a5c0:	e785      	b.n	800a4ce <__gethex+0x12a>
 800a5c2:	1e73      	subs	r3, r6, #1
 800a5c4:	9a05      	ldr	r2, [sp, #20]
 800a5c6:	9303      	str	r3, [sp, #12]
 800a5c8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d019      	beq.n	800a604 <__gethex+0x260>
 800a5d0:	f1bb 0f20 	cmp.w	fp, #32
 800a5d4:	d107      	bne.n	800a5e6 <__gethex+0x242>
 800a5d6:	9b02      	ldr	r3, [sp, #8]
 800a5d8:	9a00      	ldr	r2, [sp, #0]
 800a5da:	f843 2b04 	str.w	r2, [r3], #4
 800a5de:	9302      	str	r3, [sp, #8]
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	9300      	str	r3, [sp, #0]
 800a5e4:	469b      	mov	fp, r3
 800a5e6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a5ea:	f7ff fec5 	bl	800a378 <__hexdig_fun>
 800a5ee:	9b00      	ldr	r3, [sp, #0]
 800a5f0:	f000 000f 	and.w	r0, r0, #15
 800a5f4:	fa00 f00b 	lsl.w	r0, r0, fp
 800a5f8:	4303      	orrs	r3, r0
 800a5fa:	9300      	str	r3, [sp, #0]
 800a5fc:	f10b 0b04 	add.w	fp, fp, #4
 800a600:	9b03      	ldr	r3, [sp, #12]
 800a602:	e00d      	b.n	800a620 <__gethex+0x27c>
 800a604:	9b03      	ldr	r3, [sp, #12]
 800a606:	9a06      	ldr	r2, [sp, #24]
 800a608:	4413      	add	r3, r2
 800a60a:	42bb      	cmp	r3, r7
 800a60c:	d3e0      	bcc.n	800a5d0 <__gethex+0x22c>
 800a60e:	4618      	mov	r0, r3
 800a610:	9901      	ldr	r1, [sp, #4]
 800a612:	9307      	str	r3, [sp, #28]
 800a614:	4652      	mov	r2, sl
 800a616:	f001 f917 	bl	800b848 <strncmp>
 800a61a:	9b07      	ldr	r3, [sp, #28]
 800a61c:	2800      	cmp	r0, #0
 800a61e:	d1d7      	bne.n	800a5d0 <__gethex+0x22c>
 800a620:	461e      	mov	r6, r3
 800a622:	e78b      	b.n	800a53c <__gethex+0x198>
 800a624:	f04f 0a03 	mov.w	sl, #3
 800a628:	e7b8      	b.n	800a59c <__gethex+0x1f8>
 800a62a:	da0a      	bge.n	800a642 <__gethex+0x29e>
 800a62c:	1a37      	subs	r7, r6, r0
 800a62e:	4621      	mov	r1, r4
 800a630:	ee18 0a10 	vmov	r0, s16
 800a634:	463a      	mov	r2, r7
 800a636:	f000 fc37 	bl	800aea8 <__lshift>
 800a63a:	1bed      	subs	r5, r5, r7
 800a63c:	4604      	mov	r4, r0
 800a63e:	f100 0914 	add.w	r9, r0, #20
 800a642:	f04f 0a00 	mov.w	sl, #0
 800a646:	e7ae      	b.n	800a5a6 <__gethex+0x202>
 800a648:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a64c:	42a8      	cmp	r0, r5
 800a64e:	dd72      	ble.n	800a736 <__gethex+0x392>
 800a650:	1b45      	subs	r5, r0, r5
 800a652:	42ae      	cmp	r6, r5
 800a654:	dc36      	bgt.n	800a6c4 <__gethex+0x320>
 800a656:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a65a:	2b02      	cmp	r3, #2
 800a65c:	d02a      	beq.n	800a6b4 <__gethex+0x310>
 800a65e:	2b03      	cmp	r3, #3
 800a660:	d02c      	beq.n	800a6bc <__gethex+0x318>
 800a662:	2b01      	cmp	r3, #1
 800a664:	d11c      	bne.n	800a6a0 <__gethex+0x2fc>
 800a666:	42ae      	cmp	r6, r5
 800a668:	d11a      	bne.n	800a6a0 <__gethex+0x2fc>
 800a66a:	2e01      	cmp	r6, #1
 800a66c:	d112      	bne.n	800a694 <__gethex+0x2f0>
 800a66e:	9a04      	ldr	r2, [sp, #16]
 800a670:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a674:	6013      	str	r3, [r2, #0]
 800a676:	2301      	movs	r3, #1
 800a678:	6123      	str	r3, [r4, #16]
 800a67a:	f8c9 3000 	str.w	r3, [r9]
 800a67e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a680:	2762      	movs	r7, #98	; 0x62
 800a682:	601c      	str	r4, [r3, #0]
 800a684:	e723      	b.n	800a4ce <__gethex+0x12a>
 800a686:	bf00      	nop
 800a688:	0800e0e8 	.word	0x0800e0e8
 800a68c:	0800e070 	.word	0x0800e070
 800a690:	0800e081 	.word	0x0800e081
 800a694:	1e71      	subs	r1, r6, #1
 800a696:	4620      	mov	r0, r4
 800a698:	f000 fe4a 	bl	800b330 <__any_on>
 800a69c:	2800      	cmp	r0, #0
 800a69e:	d1e6      	bne.n	800a66e <__gethex+0x2ca>
 800a6a0:	ee18 0a10 	vmov	r0, s16
 800a6a4:	4621      	mov	r1, r4
 800a6a6:	f000 f9e3 	bl	800aa70 <_Bfree>
 800a6aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	6013      	str	r3, [r2, #0]
 800a6b0:	2750      	movs	r7, #80	; 0x50
 800a6b2:	e70c      	b.n	800a4ce <__gethex+0x12a>
 800a6b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d1f2      	bne.n	800a6a0 <__gethex+0x2fc>
 800a6ba:	e7d8      	b.n	800a66e <__gethex+0x2ca>
 800a6bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d1d5      	bne.n	800a66e <__gethex+0x2ca>
 800a6c2:	e7ed      	b.n	800a6a0 <__gethex+0x2fc>
 800a6c4:	1e6f      	subs	r7, r5, #1
 800a6c6:	f1ba 0f00 	cmp.w	sl, #0
 800a6ca:	d131      	bne.n	800a730 <__gethex+0x38c>
 800a6cc:	b127      	cbz	r7, 800a6d8 <__gethex+0x334>
 800a6ce:	4639      	mov	r1, r7
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	f000 fe2d 	bl	800b330 <__any_on>
 800a6d6:	4682      	mov	sl, r0
 800a6d8:	117b      	asrs	r3, r7, #5
 800a6da:	2101      	movs	r1, #1
 800a6dc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a6e0:	f007 071f 	and.w	r7, r7, #31
 800a6e4:	fa01 f707 	lsl.w	r7, r1, r7
 800a6e8:	421f      	tst	r7, r3
 800a6ea:	4629      	mov	r1, r5
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	bf18      	it	ne
 800a6f0:	f04a 0a02 	orrne.w	sl, sl, #2
 800a6f4:	1b76      	subs	r6, r6, r5
 800a6f6:	f7ff fded 	bl	800a2d4 <rshift>
 800a6fa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a6fe:	2702      	movs	r7, #2
 800a700:	f1ba 0f00 	cmp.w	sl, #0
 800a704:	d048      	beq.n	800a798 <__gethex+0x3f4>
 800a706:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a70a:	2b02      	cmp	r3, #2
 800a70c:	d015      	beq.n	800a73a <__gethex+0x396>
 800a70e:	2b03      	cmp	r3, #3
 800a710:	d017      	beq.n	800a742 <__gethex+0x39e>
 800a712:	2b01      	cmp	r3, #1
 800a714:	d109      	bne.n	800a72a <__gethex+0x386>
 800a716:	f01a 0f02 	tst.w	sl, #2
 800a71a:	d006      	beq.n	800a72a <__gethex+0x386>
 800a71c:	f8d9 0000 	ldr.w	r0, [r9]
 800a720:	ea4a 0a00 	orr.w	sl, sl, r0
 800a724:	f01a 0f01 	tst.w	sl, #1
 800a728:	d10e      	bne.n	800a748 <__gethex+0x3a4>
 800a72a:	f047 0710 	orr.w	r7, r7, #16
 800a72e:	e033      	b.n	800a798 <__gethex+0x3f4>
 800a730:	f04f 0a01 	mov.w	sl, #1
 800a734:	e7d0      	b.n	800a6d8 <__gethex+0x334>
 800a736:	2701      	movs	r7, #1
 800a738:	e7e2      	b.n	800a700 <__gethex+0x35c>
 800a73a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a73c:	f1c3 0301 	rsb	r3, r3, #1
 800a740:	9315      	str	r3, [sp, #84]	; 0x54
 800a742:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a744:	2b00      	cmp	r3, #0
 800a746:	d0f0      	beq.n	800a72a <__gethex+0x386>
 800a748:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a74c:	f104 0314 	add.w	r3, r4, #20
 800a750:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a754:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a758:	f04f 0c00 	mov.w	ip, #0
 800a75c:	4618      	mov	r0, r3
 800a75e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a762:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a766:	d01c      	beq.n	800a7a2 <__gethex+0x3fe>
 800a768:	3201      	adds	r2, #1
 800a76a:	6002      	str	r2, [r0, #0]
 800a76c:	2f02      	cmp	r7, #2
 800a76e:	f104 0314 	add.w	r3, r4, #20
 800a772:	d13f      	bne.n	800a7f4 <__gethex+0x450>
 800a774:	f8d8 2000 	ldr.w	r2, [r8]
 800a778:	3a01      	subs	r2, #1
 800a77a:	42b2      	cmp	r2, r6
 800a77c:	d10a      	bne.n	800a794 <__gethex+0x3f0>
 800a77e:	1171      	asrs	r1, r6, #5
 800a780:	2201      	movs	r2, #1
 800a782:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a786:	f006 061f 	and.w	r6, r6, #31
 800a78a:	fa02 f606 	lsl.w	r6, r2, r6
 800a78e:	421e      	tst	r6, r3
 800a790:	bf18      	it	ne
 800a792:	4617      	movne	r7, r2
 800a794:	f047 0720 	orr.w	r7, r7, #32
 800a798:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a79a:	601c      	str	r4, [r3, #0]
 800a79c:	9b04      	ldr	r3, [sp, #16]
 800a79e:	601d      	str	r5, [r3, #0]
 800a7a0:	e695      	b.n	800a4ce <__gethex+0x12a>
 800a7a2:	4299      	cmp	r1, r3
 800a7a4:	f843 cc04 	str.w	ip, [r3, #-4]
 800a7a8:	d8d8      	bhi.n	800a75c <__gethex+0x3b8>
 800a7aa:	68a3      	ldr	r3, [r4, #8]
 800a7ac:	459b      	cmp	fp, r3
 800a7ae:	db19      	blt.n	800a7e4 <__gethex+0x440>
 800a7b0:	6861      	ldr	r1, [r4, #4]
 800a7b2:	ee18 0a10 	vmov	r0, s16
 800a7b6:	3101      	adds	r1, #1
 800a7b8:	f000 f91a 	bl	800a9f0 <_Balloc>
 800a7bc:	4681      	mov	r9, r0
 800a7be:	b918      	cbnz	r0, 800a7c8 <__gethex+0x424>
 800a7c0:	4b1a      	ldr	r3, [pc, #104]	; (800a82c <__gethex+0x488>)
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	2184      	movs	r1, #132	; 0x84
 800a7c6:	e6a8      	b.n	800a51a <__gethex+0x176>
 800a7c8:	6922      	ldr	r2, [r4, #16]
 800a7ca:	3202      	adds	r2, #2
 800a7cc:	f104 010c 	add.w	r1, r4, #12
 800a7d0:	0092      	lsls	r2, r2, #2
 800a7d2:	300c      	adds	r0, #12
 800a7d4:	f7fd f986 	bl	8007ae4 <memcpy>
 800a7d8:	4621      	mov	r1, r4
 800a7da:	ee18 0a10 	vmov	r0, s16
 800a7de:	f000 f947 	bl	800aa70 <_Bfree>
 800a7e2:	464c      	mov	r4, r9
 800a7e4:	6923      	ldr	r3, [r4, #16]
 800a7e6:	1c5a      	adds	r2, r3, #1
 800a7e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a7ec:	6122      	str	r2, [r4, #16]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	615a      	str	r2, [r3, #20]
 800a7f2:	e7bb      	b.n	800a76c <__gethex+0x3c8>
 800a7f4:	6922      	ldr	r2, [r4, #16]
 800a7f6:	455a      	cmp	r2, fp
 800a7f8:	dd0b      	ble.n	800a812 <__gethex+0x46e>
 800a7fa:	2101      	movs	r1, #1
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	f7ff fd69 	bl	800a2d4 <rshift>
 800a802:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a806:	3501      	adds	r5, #1
 800a808:	42ab      	cmp	r3, r5
 800a80a:	f6ff aed0 	blt.w	800a5ae <__gethex+0x20a>
 800a80e:	2701      	movs	r7, #1
 800a810:	e7c0      	b.n	800a794 <__gethex+0x3f0>
 800a812:	f016 061f 	ands.w	r6, r6, #31
 800a816:	d0fa      	beq.n	800a80e <__gethex+0x46a>
 800a818:	4453      	add	r3, sl
 800a81a:	f1c6 0620 	rsb	r6, r6, #32
 800a81e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a822:	f000 f9d7 	bl	800abd4 <__hi0bits>
 800a826:	42b0      	cmp	r0, r6
 800a828:	dbe7      	blt.n	800a7fa <__gethex+0x456>
 800a82a:	e7f0      	b.n	800a80e <__gethex+0x46a>
 800a82c:	0800e070 	.word	0x0800e070

0800a830 <L_shift>:
 800a830:	f1c2 0208 	rsb	r2, r2, #8
 800a834:	0092      	lsls	r2, r2, #2
 800a836:	b570      	push	{r4, r5, r6, lr}
 800a838:	f1c2 0620 	rsb	r6, r2, #32
 800a83c:	6843      	ldr	r3, [r0, #4]
 800a83e:	6804      	ldr	r4, [r0, #0]
 800a840:	fa03 f506 	lsl.w	r5, r3, r6
 800a844:	432c      	orrs	r4, r5
 800a846:	40d3      	lsrs	r3, r2
 800a848:	6004      	str	r4, [r0, #0]
 800a84a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a84e:	4288      	cmp	r0, r1
 800a850:	d3f4      	bcc.n	800a83c <L_shift+0xc>
 800a852:	bd70      	pop	{r4, r5, r6, pc}

0800a854 <__match>:
 800a854:	b530      	push	{r4, r5, lr}
 800a856:	6803      	ldr	r3, [r0, #0]
 800a858:	3301      	adds	r3, #1
 800a85a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a85e:	b914      	cbnz	r4, 800a866 <__match+0x12>
 800a860:	6003      	str	r3, [r0, #0]
 800a862:	2001      	movs	r0, #1
 800a864:	bd30      	pop	{r4, r5, pc}
 800a866:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a86a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a86e:	2d19      	cmp	r5, #25
 800a870:	bf98      	it	ls
 800a872:	3220      	addls	r2, #32
 800a874:	42a2      	cmp	r2, r4
 800a876:	d0f0      	beq.n	800a85a <__match+0x6>
 800a878:	2000      	movs	r0, #0
 800a87a:	e7f3      	b.n	800a864 <__match+0x10>

0800a87c <__hexnan>:
 800a87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a880:	680b      	ldr	r3, [r1, #0]
 800a882:	115e      	asrs	r6, r3, #5
 800a884:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a888:	f013 031f 	ands.w	r3, r3, #31
 800a88c:	b087      	sub	sp, #28
 800a88e:	bf18      	it	ne
 800a890:	3604      	addne	r6, #4
 800a892:	2500      	movs	r5, #0
 800a894:	1f37      	subs	r7, r6, #4
 800a896:	4690      	mov	r8, r2
 800a898:	6802      	ldr	r2, [r0, #0]
 800a89a:	9301      	str	r3, [sp, #4]
 800a89c:	4682      	mov	sl, r0
 800a89e:	f846 5c04 	str.w	r5, [r6, #-4]
 800a8a2:	46b9      	mov	r9, r7
 800a8a4:	463c      	mov	r4, r7
 800a8a6:	9502      	str	r5, [sp, #8]
 800a8a8:	46ab      	mov	fp, r5
 800a8aa:	7851      	ldrb	r1, [r2, #1]
 800a8ac:	1c53      	adds	r3, r2, #1
 800a8ae:	9303      	str	r3, [sp, #12]
 800a8b0:	b341      	cbz	r1, 800a904 <__hexnan+0x88>
 800a8b2:	4608      	mov	r0, r1
 800a8b4:	9205      	str	r2, [sp, #20]
 800a8b6:	9104      	str	r1, [sp, #16]
 800a8b8:	f7ff fd5e 	bl	800a378 <__hexdig_fun>
 800a8bc:	2800      	cmp	r0, #0
 800a8be:	d14f      	bne.n	800a960 <__hexnan+0xe4>
 800a8c0:	9904      	ldr	r1, [sp, #16]
 800a8c2:	9a05      	ldr	r2, [sp, #20]
 800a8c4:	2920      	cmp	r1, #32
 800a8c6:	d818      	bhi.n	800a8fa <__hexnan+0x7e>
 800a8c8:	9b02      	ldr	r3, [sp, #8]
 800a8ca:	459b      	cmp	fp, r3
 800a8cc:	dd13      	ble.n	800a8f6 <__hexnan+0x7a>
 800a8ce:	454c      	cmp	r4, r9
 800a8d0:	d206      	bcs.n	800a8e0 <__hexnan+0x64>
 800a8d2:	2d07      	cmp	r5, #7
 800a8d4:	dc04      	bgt.n	800a8e0 <__hexnan+0x64>
 800a8d6:	462a      	mov	r2, r5
 800a8d8:	4649      	mov	r1, r9
 800a8da:	4620      	mov	r0, r4
 800a8dc:	f7ff ffa8 	bl	800a830 <L_shift>
 800a8e0:	4544      	cmp	r4, r8
 800a8e2:	d950      	bls.n	800a986 <__hexnan+0x10a>
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	f1a4 0904 	sub.w	r9, r4, #4
 800a8ea:	f844 3c04 	str.w	r3, [r4, #-4]
 800a8ee:	f8cd b008 	str.w	fp, [sp, #8]
 800a8f2:	464c      	mov	r4, r9
 800a8f4:	461d      	mov	r5, r3
 800a8f6:	9a03      	ldr	r2, [sp, #12]
 800a8f8:	e7d7      	b.n	800a8aa <__hexnan+0x2e>
 800a8fa:	2929      	cmp	r1, #41	; 0x29
 800a8fc:	d156      	bne.n	800a9ac <__hexnan+0x130>
 800a8fe:	3202      	adds	r2, #2
 800a900:	f8ca 2000 	str.w	r2, [sl]
 800a904:	f1bb 0f00 	cmp.w	fp, #0
 800a908:	d050      	beq.n	800a9ac <__hexnan+0x130>
 800a90a:	454c      	cmp	r4, r9
 800a90c:	d206      	bcs.n	800a91c <__hexnan+0xa0>
 800a90e:	2d07      	cmp	r5, #7
 800a910:	dc04      	bgt.n	800a91c <__hexnan+0xa0>
 800a912:	462a      	mov	r2, r5
 800a914:	4649      	mov	r1, r9
 800a916:	4620      	mov	r0, r4
 800a918:	f7ff ff8a 	bl	800a830 <L_shift>
 800a91c:	4544      	cmp	r4, r8
 800a91e:	d934      	bls.n	800a98a <__hexnan+0x10e>
 800a920:	f1a8 0204 	sub.w	r2, r8, #4
 800a924:	4623      	mov	r3, r4
 800a926:	f853 1b04 	ldr.w	r1, [r3], #4
 800a92a:	f842 1f04 	str.w	r1, [r2, #4]!
 800a92e:	429f      	cmp	r7, r3
 800a930:	d2f9      	bcs.n	800a926 <__hexnan+0xaa>
 800a932:	1b3b      	subs	r3, r7, r4
 800a934:	f023 0303 	bic.w	r3, r3, #3
 800a938:	3304      	adds	r3, #4
 800a93a:	3401      	adds	r4, #1
 800a93c:	3e03      	subs	r6, #3
 800a93e:	42b4      	cmp	r4, r6
 800a940:	bf88      	it	hi
 800a942:	2304      	movhi	r3, #4
 800a944:	4443      	add	r3, r8
 800a946:	2200      	movs	r2, #0
 800a948:	f843 2b04 	str.w	r2, [r3], #4
 800a94c:	429f      	cmp	r7, r3
 800a94e:	d2fb      	bcs.n	800a948 <__hexnan+0xcc>
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	b91b      	cbnz	r3, 800a95c <__hexnan+0xe0>
 800a954:	4547      	cmp	r7, r8
 800a956:	d127      	bne.n	800a9a8 <__hexnan+0x12c>
 800a958:	2301      	movs	r3, #1
 800a95a:	603b      	str	r3, [r7, #0]
 800a95c:	2005      	movs	r0, #5
 800a95e:	e026      	b.n	800a9ae <__hexnan+0x132>
 800a960:	3501      	adds	r5, #1
 800a962:	2d08      	cmp	r5, #8
 800a964:	f10b 0b01 	add.w	fp, fp, #1
 800a968:	dd06      	ble.n	800a978 <__hexnan+0xfc>
 800a96a:	4544      	cmp	r4, r8
 800a96c:	d9c3      	bls.n	800a8f6 <__hexnan+0x7a>
 800a96e:	2300      	movs	r3, #0
 800a970:	f844 3c04 	str.w	r3, [r4, #-4]
 800a974:	2501      	movs	r5, #1
 800a976:	3c04      	subs	r4, #4
 800a978:	6822      	ldr	r2, [r4, #0]
 800a97a:	f000 000f 	and.w	r0, r0, #15
 800a97e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a982:	6022      	str	r2, [r4, #0]
 800a984:	e7b7      	b.n	800a8f6 <__hexnan+0x7a>
 800a986:	2508      	movs	r5, #8
 800a988:	e7b5      	b.n	800a8f6 <__hexnan+0x7a>
 800a98a:	9b01      	ldr	r3, [sp, #4]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d0df      	beq.n	800a950 <__hexnan+0xd4>
 800a990:	f04f 32ff 	mov.w	r2, #4294967295
 800a994:	f1c3 0320 	rsb	r3, r3, #32
 800a998:	fa22 f303 	lsr.w	r3, r2, r3
 800a99c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a9a0:	401a      	ands	r2, r3
 800a9a2:	f846 2c04 	str.w	r2, [r6, #-4]
 800a9a6:	e7d3      	b.n	800a950 <__hexnan+0xd4>
 800a9a8:	3f04      	subs	r7, #4
 800a9aa:	e7d1      	b.n	800a950 <__hexnan+0xd4>
 800a9ac:	2004      	movs	r0, #4
 800a9ae:	b007      	add	sp, #28
 800a9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a9b4 <_localeconv_r>:
 800a9b4:	4800      	ldr	r0, [pc, #0]	; (800a9b8 <_localeconv_r+0x4>)
 800a9b6:	4770      	bx	lr
 800a9b8:	20000260 	.word	0x20000260

0800a9bc <malloc>:
 800a9bc:	4b02      	ldr	r3, [pc, #8]	; (800a9c8 <malloc+0xc>)
 800a9be:	4601      	mov	r1, r0
 800a9c0:	6818      	ldr	r0, [r3, #0]
 800a9c2:	f000 bd59 	b.w	800b478 <_malloc_r>
 800a9c6:	bf00      	nop
 800a9c8:	20000108 	.word	0x20000108

0800a9cc <__ascii_mbtowc>:
 800a9cc:	b082      	sub	sp, #8
 800a9ce:	b901      	cbnz	r1, 800a9d2 <__ascii_mbtowc+0x6>
 800a9d0:	a901      	add	r1, sp, #4
 800a9d2:	b142      	cbz	r2, 800a9e6 <__ascii_mbtowc+0x1a>
 800a9d4:	b14b      	cbz	r3, 800a9ea <__ascii_mbtowc+0x1e>
 800a9d6:	7813      	ldrb	r3, [r2, #0]
 800a9d8:	600b      	str	r3, [r1, #0]
 800a9da:	7812      	ldrb	r2, [r2, #0]
 800a9dc:	1e10      	subs	r0, r2, #0
 800a9de:	bf18      	it	ne
 800a9e0:	2001      	movne	r0, #1
 800a9e2:	b002      	add	sp, #8
 800a9e4:	4770      	bx	lr
 800a9e6:	4610      	mov	r0, r2
 800a9e8:	e7fb      	b.n	800a9e2 <__ascii_mbtowc+0x16>
 800a9ea:	f06f 0001 	mvn.w	r0, #1
 800a9ee:	e7f8      	b.n	800a9e2 <__ascii_mbtowc+0x16>

0800a9f0 <_Balloc>:
 800a9f0:	b570      	push	{r4, r5, r6, lr}
 800a9f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a9f4:	4604      	mov	r4, r0
 800a9f6:	460d      	mov	r5, r1
 800a9f8:	b976      	cbnz	r6, 800aa18 <_Balloc+0x28>
 800a9fa:	2010      	movs	r0, #16
 800a9fc:	f7ff ffde 	bl	800a9bc <malloc>
 800aa00:	4602      	mov	r2, r0
 800aa02:	6260      	str	r0, [r4, #36]	; 0x24
 800aa04:	b920      	cbnz	r0, 800aa10 <_Balloc+0x20>
 800aa06:	4b18      	ldr	r3, [pc, #96]	; (800aa68 <_Balloc+0x78>)
 800aa08:	4818      	ldr	r0, [pc, #96]	; (800aa6c <_Balloc+0x7c>)
 800aa0a:	2166      	movs	r1, #102	; 0x66
 800aa0c:	f000 ff3e 	bl	800b88c <__assert_func>
 800aa10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa14:	6006      	str	r6, [r0, #0]
 800aa16:	60c6      	str	r6, [r0, #12]
 800aa18:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aa1a:	68f3      	ldr	r3, [r6, #12]
 800aa1c:	b183      	cbz	r3, 800aa40 <_Balloc+0x50>
 800aa1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa26:	b9b8      	cbnz	r0, 800aa58 <_Balloc+0x68>
 800aa28:	2101      	movs	r1, #1
 800aa2a:	fa01 f605 	lsl.w	r6, r1, r5
 800aa2e:	1d72      	adds	r2, r6, #5
 800aa30:	0092      	lsls	r2, r2, #2
 800aa32:	4620      	mov	r0, r4
 800aa34:	f000 fc9d 	bl	800b372 <_calloc_r>
 800aa38:	b160      	cbz	r0, 800aa54 <_Balloc+0x64>
 800aa3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa3e:	e00e      	b.n	800aa5e <_Balloc+0x6e>
 800aa40:	2221      	movs	r2, #33	; 0x21
 800aa42:	2104      	movs	r1, #4
 800aa44:	4620      	mov	r0, r4
 800aa46:	f000 fc94 	bl	800b372 <_calloc_r>
 800aa4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa4c:	60f0      	str	r0, [r6, #12]
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d1e4      	bne.n	800aa1e <_Balloc+0x2e>
 800aa54:	2000      	movs	r0, #0
 800aa56:	bd70      	pop	{r4, r5, r6, pc}
 800aa58:	6802      	ldr	r2, [r0, #0]
 800aa5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aa5e:	2300      	movs	r3, #0
 800aa60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa64:	e7f7      	b.n	800aa56 <_Balloc+0x66>
 800aa66:	bf00      	nop
 800aa68:	0800dffe 	.word	0x0800dffe
 800aa6c:	0800e0fc 	.word	0x0800e0fc

0800aa70 <_Bfree>:
 800aa70:	b570      	push	{r4, r5, r6, lr}
 800aa72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aa74:	4605      	mov	r5, r0
 800aa76:	460c      	mov	r4, r1
 800aa78:	b976      	cbnz	r6, 800aa98 <_Bfree+0x28>
 800aa7a:	2010      	movs	r0, #16
 800aa7c:	f7ff ff9e 	bl	800a9bc <malloc>
 800aa80:	4602      	mov	r2, r0
 800aa82:	6268      	str	r0, [r5, #36]	; 0x24
 800aa84:	b920      	cbnz	r0, 800aa90 <_Bfree+0x20>
 800aa86:	4b09      	ldr	r3, [pc, #36]	; (800aaac <_Bfree+0x3c>)
 800aa88:	4809      	ldr	r0, [pc, #36]	; (800aab0 <_Bfree+0x40>)
 800aa8a:	218a      	movs	r1, #138	; 0x8a
 800aa8c:	f000 fefe 	bl	800b88c <__assert_func>
 800aa90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa94:	6006      	str	r6, [r0, #0]
 800aa96:	60c6      	str	r6, [r0, #12]
 800aa98:	b13c      	cbz	r4, 800aaaa <_Bfree+0x3a>
 800aa9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aa9c:	6862      	ldr	r2, [r4, #4]
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aaa4:	6021      	str	r1, [r4, #0]
 800aaa6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aaaa:	bd70      	pop	{r4, r5, r6, pc}
 800aaac:	0800dffe 	.word	0x0800dffe
 800aab0:	0800e0fc 	.word	0x0800e0fc

0800aab4 <__multadd>:
 800aab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aab8:	690d      	ldr	r5, [r1, #16]
 800aaba:	4607      	mov	r7, r0
 800aabc:	460c      	mov	r4, r1
 800aabe:	461e      	mov	r6, r3
 800aac0:	f101 0c14 	add.w	ip, r1, #20
 800aac4:	2000      	movs	r0, #0
 800aac6:	f8dc 3000 	ldr.w	r3, [ip]
 800aaca:	b299      	uxth	r1, r3
 800aacc:	fb02 6101 	mla	r1, r2, r1, r6
 800aad0:	0c1e      	lsrs	r6, r3, #16
 800aad2:	0c0b      	lsrs	r3, r1, #16
 800aad4:	fb02 3306 	mla	r3, r2, r6, r3
 800aad8:	b289      	uxth	r1, r1
 800aada:	3001      	adds	r0, #1
 800aadc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aae0:	4285      	cmp	r5, r0
 800aae2:	f84c 1b04 	str.w	r1, [ip], #4
 800aae6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aaea:	dcec      	bgt.n	800aac6 <__multadd+0x12>
 800aaec:	b30e      	cbz	r6, 800ab32 <__multadd+0x7e>
 800aaee:	68a3      	ldr	r3, [r4, #8]
 800aaf0:	42ab      	cmp	r3, r5
 800aaf2:	dc19      	bgt.n	800ab28 <__multadd+0x74>
 800aaf4:	6861      	ldr	r1, [r4, #4]
 800aaf6:	4638      	mov	r0, r7
 800aaf8:	3101      	adds	r1, #1
 800aafa:	f7ff ff79 	bl	800a9f0 <_Balloc>
 800aafe:	4680      	mov	r8, r0
 800ab00:	b928      	cbnz	r0, 800ab0e <__multadd+0x5a>
 800ab02:	4602      	mov	r2, r0
 800ab04:	4b0c      	ldr	r3, [pc, #48]	; (800ab38 <__multadd+0x84>)
 800ab06:	480d      	ldr	r0, [pc, #52]	; (800ab3c <__multadd+0x88>)
 800ab08:	21b5      	movs	r1, #181	; 0xb5
 800ab0a:	f000 febf 	bl	800b88c <__assert_func>
 800ab0e:	6922      	ldr	r2, [r4, #16]
 800ab10:	3202      	adds	r2, #2
 800ab12:	f104 010c 	add.w	r1, r4, #12
 800ab16:	0092      	lsls	r2, r2, #2
 800ab18:	300c      	adds	r0, #12
 800ab1a:	f7fc ffe3 	bl	8007ae4 <memcpy>
 800ab1e:	4621      	mov	r1, r4
 800ab20:	4638      	mov	r0, r7
 800ab22:	f7ff ffa5 	bl	800aa70 <_Bfree>
 800ab26:	4644      	mov	r4, r8
 800ab28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab2c:	3501      	adds	r5, #1
 800ab2e:	615e      	str	r6, [r3, #20]
 800ab30:	6125      	str	r5, [r4, #16]
 800ab32:	4620      	mov	r0, r4
 800ab34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab38:	0800e070 	.word	0x0800e070
 800ab3c:	0800e0fc 	.word	0x0800e0fc

0800ab40 <__s2b>:
 800ab40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab44:	460c      	mov	r4, r1
 800ab46:	4615      	mov	r5, r2
 800ab48:	461f      	mov	r7, r3
 800ab4a:	2209      	movs	r2, #9
 800ab4c:	3308      	adds	r3, #8
 800ab4e:	4606      	mov	r6, r0
 800ab50:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab54:	2100      	movs	r1, #0
 800ab56:	2201      	movs	r2, #1
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	db09      	blt.n	800ab70 <__s2b+0x30>
 800ab5c:	4630      	mov	r0, r6
 800ab5e:	f7ff ff47 	bl	800a9f0 <_Balloc>
 800ab62:	b940      	cbnz	r0, 800ab76 <__s2b+0x36>
 800ab64:	4602      	mov	r2, r0
 800ab66:	4b19      	ldr	r3, [pc, #100]	; (800abcc <__s2b+0x8c>)
 800ab68:	4819      	ldr	r0, [pc, #100]	; (800abd0 <__s2b+0x90>)
 800ab6a:	21ce      	movs	r1, #206	; 0xce
 800ab6c:	f000 fe8e 	bl	800b88c <__assert_func>
 800ab70:	0052      	lsls	r2, r2, #1
 800ab72:	3101      	adds	r1, #1
 800ab74:	e7f0      	b.n	800ab58 <__s2b+0x18>
 800ab76:	9b08      	ldr	r3, [sp, #32]
 800ab78:	6143      	str	r3, [r0, #20]
 800ab7a:	2d09      	cmp	r5, #9
 800ab7c:	f04f 0301 	mov.w	r3, #1
 800ab80:	6103      	str	r3, [r0, #16]
 800ab82:	dd16      	ble.n	800abb2 <__s2b+0x72>
 800ab84:	f104 0909 	add.w	r9, r4, #9
 800ab88:	46c8      	mov	r8, r9
 800ab8a:	442c      	add	r4, r5
 800ab8c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ab90:	4601      	mov	r1, r0
 800ab92:	3b30      	subs	r3, #48	; 0x30
 800ab94:	220a      	movs	r2, #10
 800ab96:	4630      	mov	r0, r6
 800ab98:	f7ff ff8c 	bl	800aab4 <__multadd>
 800ab9c:	45a0      	cmp	r8, r4
 800ab9e:	d1f5      	bne.n	800ab8c <__s2b+0x4c>
 800aba0:	f1a5 0408 	sub.w	r4, r5, #8
 800aba4:	444c      	add	r4, r9
 800aba6:	1b2d      	subs	r5, r5, r4
 800aba8:	1963      	adds	r3, r4, r5
 800abaa:	42bb      	cmp	r3, r7
 800abac:	db04      	blt.n	800abb8 <__s2b+0x78>
 800abae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abb2:	340a      	adds	r4, #10
 800abb4:	2509      	movs	r5, #9
 800abb6:	e7f6      	b.n	800aba6 <__s2b+0x66>
 800abb8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800abbc:	4601      	mov	r1, r0
 800abbe:	3b30      	subs	r3, #48	; 0x30
 800abc0:	220a      	movs	r2, #10
 800abc2:	4630      	mov	r0, r6
 800abc4:	f7ff ff76 	bl	800aab4 <__multadd>
 800abc8:	e7ee      	b.n	800aba8 <__s2b+0x68>
 800abca:	bf00      	nop
 800abcc:	0800e070 	.word	0x0800e070
 800abd0:	0800e0fc 	.word	0x0800e0fc

0800abd4 <__hi0bits>:
 800abd4:	0c03      	lsrs	r3, r0, #16
 800abd6:	041b      	lsls	r3, r3, #16
 800abd8:	b9d3      	cbnz	r3, 800ac10 <__hi0bits+0x3c>
 800abda:	0400      	lsls	r0, r0, #16
 800abdc:	2310      	movs	r3, #16
 800abde:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800abe2:	bf04      	itt	eq
 800abe4:	0200      	lsleq	r0, r0, #8
 800abe6:	3308      	addeq	r3, #8
 800abe8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800abec:	bf04      	itt	eq
 800abee:	0100      	lsleq	r0, r0, #4
 800abf0:	3304      	addeq	r3, #4
 800abf2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800abf6:	bf04      	itt	eq
 800abf8:	0080      	lsleq	r0, r0, #2
 800abfa:	3302      	addeq	r3, #2
 800abfc:	2800      	cmp	r0, #0
 800abfe:	db05      	blt.n	800ac0c <__hi0bits+0x38>
 800ac00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ac04:	f103 0301 	add.w	r3, r3, #1
 800ac08:	bf08      	it	eq
 800ac0a:	2320      	moveq	r3, #32
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	4770      	bx	lr
 800ac10:	2300      	movs	r3, #0
 800ac12:	e7e4      	b.n	800abde <__hi0bits+0xa>

0800ac14 <__lo0bits>:
 800ac14:	6803      	ldr	r3, [r0, #0]
 800ac16:	f013 0207 	ands.w	r2, r3, #7
 800ac1a:	4601      	mov	r1, r0
 800ac1c:	d00b      	beq.n	800ac36 <__lo0bits+0x22>
 800ac1e:	07da      	lsls	r2, r3, #31
 800ac20:	d423      	bmi.n	800ac6a <__lo0bits+0x56>
 800ac22:	0798      	lsls	r0, r3, #30
 800ac24:	bf49      	itett	mi
 800ac26:	085b      	lsrmi	r3, r3, #1
 800ac28:	089b      	lsrpl	r3, r3, #2
 800ac2a:	2001      	movmi	r0, #1
 800ac2c:	600b      	strmi	r3, [r1, #0]
 800ac2e:	bf5c      	itt	pl
 800ac30:	600b      	strpl	r3, [r1, #0]
 800ac32:	2002      	movpl	r0, #2
 800ac34:	4770      	bx	lr
 800ac36:	b298      	uxth	r0, r3
 800ac38:	b9a8      	cbnz	r0, 800ac66 <__lo0bits+0x52>
 800ac3a:	0c1b      	lsrs	r3, r3, #16
 800ac3c:	2010      	movs	r0, #16
 800ac3e:	b2da      	uxtb	r2, r3
 800ac40:	b90a      	cbnz	r2, 800ac46 <__lo0bits+0x32>
 800ac42:	3008      	adds	r0, #8
 800ac44:	0a1b      	lsrs	r3, r3, #8
 800ac46:	071a      	lsls	r2, r3, #28
 800ac48:	bf04      	itt	eq
 800ac4a:	091b      	lsreq	r3, r3, #4
 800ac4c:	3004      	addeq	r0, #4
 800ac4e:	079a      	lsls	r2, r3, #30
 800ac50:	bf04      	itt	eq
 800ac52:	089b      	lsreq	r3, r3, #2
 800ac54:	3002      	addeq	r0, #2
 800ac56:	07da      	lsls	r2, r3, #31
 800ac58:	d403      	bmi.n	800ac62 <__lo0bits+0x4e>
 800ac5a:	085b      	lsrs	r3, r3, #1
 800ac5c:	f100 0001 	add.w	r0, r0, #1
 800ac60:	d005      	beq.n	800ac6e <__lo0bits+0x5a>
 800ac62:	600b      	str	r3, [r1, #0]
 800ac64:	4770      	bx	lr
 800ac66:	4610      	mov	r0, r2
 800ac68:	e7e9      	b.n	800ac3e <__lo0bits+0x2a>
 800ac6a:	2000      	movs	r0, #0
 800ac6c:	4770      	bx	lr
 800ac6e:	2020      	movs	r0, #32
 800ac70:	4770      	bx	lr
	...

0800ac74 <__i2b>:
 800ac74:	b510      	push	{r4, lr}
 800ac76:	460c      	mov	r4, r1
 800ac78:	2101      	movs	r1, #1
 800ac7a:	f7ff feb9 	bl	800a9f0 <_Balloc>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	b928      	cbnz	r0, 800ac8e <__i2b+0x1a>
 800ac82:	4b05      	ldr	r3, [pc, #20]	; (800ac98 <__i2b+0x24>)
 800ac84:	4805      	ldr	r0, [pc, #20]	; (800ac9c <__i2b+0x28>)
 800ac86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ac8a:	f000 fdff 	bl	800b88c <__assert_func>
 800ac8e:	2301      	movs	r3, #1
 800ac90:	6144      	str	r4, [r0, #20]
 800ac92:	6103      	str	r3, [r0, #16]
 800ac94:	bd10      	pop	{r4, pc}
 800ac96:	bf00      	nop
 800ac98:	0800e070 	.word	0x0800e070
 800ac9c:	0800e0fc 	.word	0x0800e0fc

0800aca0 <__multiply>:
 800aca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca4:	4691      	mov	r9, r2
 800aca6:	690a      	ldr	r2, [r1, #16]
 800aca8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800acac:	429a      	cmp	r2, r3
 800acae:	bfb8      	it	lt
 800acb0:	460b      	movlt	r3, r1
 800acb2:	460c      	mov	r4, r1
 800acb4:	bfbc      	itt	lt
 800acb6:	464c      	movlt	r4, r9
 800acb8:	4699      	movlt	r9, r3
 800acba:	6927      	ldr	r7, [r4, #16]
 800acbc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800acc0:	68a3      	ldr	r3, [r4, #8]
 800acc2:	6861      	ldr	r1, [r4, #4]
 800acc4:	eb07 060a 	add.w	r6, r7, sl
 800acc8:	42b3      	cmp	r3, r6
 800acca:	b085      	sub	sp, #20
 800accc:	bfb8      	it	lt
 800acce:	3101      	addlt	r1, #1
 800acd0:	f7ff fe8e 	bl	800a9f0 <_Balloc>
 800acd4:	b930      	cbnz	r0, 800ace4 <__multiply+0x44>
 800acd6:	4602      	mov	r2, r0
 800acd8:	4b44      	ldr	r3, [pc, #272]	; (800adec <__multiply+0x14c>)
 800acda:	4845      	ldr	r0, [pc, #276]	; (800adf0 <__multiply+0x150>)
 800acdc:	f240 115d 	movw	r1, #349	; 0x15d
 800ace0:	f000 fdd4 	bl	800b88c <__assert_func>
 800ace4:	f100 0514 	add.w	r5, r0, #20
 800ace8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800acec:	462b      	mov	r3, r5
 800acee:	2200      	movs	r2, #0
 800acf0:	4543      	cmp	r3, r8
 800acf2:	d321      	bcc.n	800ad38 <__multiply+0x98>
 800acf4:	f104 0314 	add.w	r3, r4, #20
 800acf8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800acfc:	f109 0314 	add.w	r3, r9, #20
 800ad00:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ad04:	9202      	str	r2, [sp, #8]
 800ad06:	1b3a      	subs	r2, r7, r4
 800ad08:	3a15      	subs	r2, #21
 800ad0a:	f022 0203 	bic.w	r2, r2, #3
 800ad0e:	3204      	adds	r2, #4
 800ad10:	f104 0115 	add.w	r1, r4, #21
 800ad14:	428f      	cmp	r7, r1
 800ad16:	bf38      	it	cc
 800ad18:	2204      	movcc	r2, #4
 800ad1a:	9201      	str	r2, [sp, #4]
 800ad1c:	9a02      	ldr	r2, [sp, #8]
 800ad1e:	9303      	str	r3, [sp, #12]
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d80c      	bhi.n	800ad3e <__multiply+0x9e>
 800ad24:	2e00      	cmp	r6, #0
 800ad26:	dd03      	ble.n	800ad30 <__multiply+0x90>
 800ad28:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d05a      	beq.n	800ade6 <__multiply+0x146>
 800ad30:	6106      	str	r6, [r0, #16]
 800ad32:	b005      	add	sp, #20
 800ad34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad38:	f843 2b04 	str.w	r2, [r3], #4
 800ad3c:	e7d8      	b.n	800acf0 <__multiply+0x50>
 800ad3e:	f8b3 a000 	ldrh.w	sl, [r3]
 800ad42:	f1ba 0f00 	cmp.w	sl, #0
 800ad46:	d024      	beq.n	800ad92 <__multiply+0xf2>
 800ad48:	f104 0e14 	add.w	lr, r4, #20
 800ad4c:	46a9      	mov	r9, r5
 800ad4e:	f04f 0c00 	mov.w	ip, #0
 800ad52:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ad56:	f8d9 1000 	ldr.w	r1, [r9]
 800ad5a:	fa1f fb82 	uxth.w	fp, r2
 800ad5e:	b289      	uxth	r1, r1
 800ad60:	fb0a 110b 	mla	r1, sl, fp, r1
 800ad64:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ad68:	f8d9 2000 	ldr.w	r2, [r9]
 800ad6c:	4461      	add	r1, ip
 800ad6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ad72:	fb0a c20b 	mla	r2, sl, fp, ip
 800ad76:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ad7a:	b289      	uxth	r1, r1
 800ad7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ad80:	4577      	cmp	r7, lr
 800ad82:	f849 1b04 	str.w	r1, [r9], #4
 800ad86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ad8a:	d8e2      	bhi.n	800ad52 <__multiply+0xb2>
 800ad8c:	9a01      	ldr	r2, [sp, #4]
 800ad8e:	f845 c002 	str.w	ip, [r5, r2]
 800ad92:	9a03      	ldr	r2, [sp, #12]
 800ad94:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ad98:	3304      	adds	r3, #4
 800ad9a:	f1b9 0f00 	cmp.w	r9, #0
 800ad9e:	d020      	beq.n	800ade2 <__multiply+0x142>
 800ada0:	6829      	ldr	r1, [r5, #0]
 800ada2:	f104 0c14 	add.w	ip, r4, #20
 800ada6:	46ae      	mov	lr, r5
 800ada8:	f04f 0a00 	mov.w	sl, #0
 800adac:	f8bc b000 	ldrh.w	fp, [ip]
 800adb0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800adb4:	fb09 220b 	mla	r2, r9, fp, r2
 800adb8:	4492      	add	sl, r2
 800adba:	b289      	uxth	r1, r1
 800adbc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800adc0:	f84e 1b04 	str.w	r1, [lr], #4
 800adc4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800adc8:	f8be 1000 	ldrh.w	r1, [lr]
 800adcc:	0c12      	lsrs	r2, r2, #16
 800adce:	fb09 1102 	mla	r1, r9, r2, r1
 800add2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800add6:	4567      	cmp	r7, ip
 800add8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800addc:	d8e6      	bhi.n	800adac <__multiply+0x10c>
 800adde:	9a01      	ldr	r2, [sp, #4]
 800ade0:	50a9      	str	r1, [r5, r2]
 800ade2:	3504      	adds	r5, #4
 800ade4:	e79a      	b.n	800ad1c <__multiply+0x7c>
 800ade6:	3e01      	subs	r6, #1
 800ade8:	e79c      	b.n	800ad24 <__multiply+0x84>
 800adea:	bf00      	nop
 800adec:	0800e070 	.word	0x0800e070
 800adf0:	0800e0fc 	.word	0x0800e0fc

0800adf4 <__pow5mult>:
 800adf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adf8:	4615      	mov	r5, r2
 800adfa:	f012 0203 	ands.w	r2, r2, #3
 800adfe:	4606      	mov	r6, r0
 800ae00:	460f      	mov	r7, r1
 800ae02:	d007      	beq.n	800ae14 <__pow5mult+0x20>
 800ae04:	4c25      	ldr	r4, [pc, #148]	; (800ae9c <__pow5mult+0xa8>)
 800ae06:	3a01      	subs	r2, #1
 800ae08:	2300      	movs	r3, #0
 800ae0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae0e:	f7ff fe51 	bl	800aab4 <__multadd>
 800ae12:	4607      	mov	r7, r0
 800ae14:	10ad      	asrs	r5, r5, #2
 800ae16:	d03d      	beq.n	800ae94 <__pow5mult+0xa0>
 800ae18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ae1a:	b97c      	cbnz	r4, 800ae3c <__pow5mult+0x48>
 800ae1c:	2010      	movs	r0, #16
 800ae1e:	f7ff fdcd 	bl	800a9bc <malloc>
 800ae22:	4602      	mov	r2, r0
 800ae24:	6270      	str	r0, [r6, #36]	; 0x24
 800ae26:	b928      	cbnz	r0, 800ae34 <__pow5mult+0x40>
 800ae28:	4b1d      	ldr	r3, [pc, #116]	; (800aea0 <__pow5mult+0xac>)
 800ae2a:	481e      	ldr	r0, [pc, #120]	; (800aea4 <__pow5mult+0xb0>)
 800ae2c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ae30:	f000 fd2c 	bl	800b88c <__assert_func>
 800ae34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae38:	6004      	str	r4, [r0, #0]
 800ae3a:	60c4      	str	r4, [r0, #12]
 800ae3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ae40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ae44:	b94c      	cbnz	r4, 800ae5a <__pow5mult+0x66>
 800ae46:	f240 2171 	movw	r1, #625	; 0x271
 800ae4a:	4630      	mov	r0, r6
 800ae4c:	f7ff ff12 	bl	800ac74 <__i2b>
 800ae50:	2300      	movs	r3, #0
 800ae52:	f8c8 0008 	str.w	r0, [r8, #8]
 800ae56:	4604      	mov	r4, r0
 800ae58:	6003      	str	r3, [r0, #0]
 800ae5a:	f04f 0900 	mov.w	r9, #0
 800ae5e:	07eb      	lsls	r3, r5, #31
 800ae60:	d50a      	bpl.n	800ae78 <__pow5mult+0x84>
 800ae62:	4639      	mov	r1, r7
 800ae64:	4622      	mov	r2, r4
 800ae66:	4630      	mov	r0, r6
 800ae68:	f7ff ff1a 	bl	800aca0 <__multiply>
 800ae6c:	4639      	mov	r1, r7
 800ae6e:	4680      	mov	r8, r0
 800ae70:	4630      	mov	r0, r6
 800ae72:	f7ff fdfd 	bl	800aa70 <_Bfree>
 800ae76:	4647      	mov	r7, r8
 800ae78:	106d      	asrs	r5, r5, #1
 800ae7a:	d00b      	beq.n	800ae94 <__pow5mult+0xa0>
 800ae7c:	6820      	ldr	r0, [r4, #0]
 800ae7e:	b938      	cbnz	r0, 800ae90 <__pow5mult+0x9c>
 800ae80:	4622      	mov	r2, r4
 800ae82:	4621      	mov	r1, r4
 800ae84:	4630      	mov	r0, r6
 800ae86:	f7ff ff0b 	bl	800aca0 <__multiply>
 800ae8a:	6020      	str	r0, [r4, #0]
 800ae8c:	f8c0 9000 	str.w	r9, [r0]
 800ae90:	4604      	mov	r4, r0
 800ae92:	e7e4      	b.n	800ae5e <__pow5mult+0x6a>
 800ae94:	4638      	mov	r0, r7
 800ae96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae9a:	bf00      	nop
 800ae9c:	0800e248 	.word	0x0800e248
 800aea0:	0800dffe 	.word	0x0800dffe
 800aea4:	0800e0fc 	.word	0x0800e0fc

0800aea8 <__lshift>:
 800aea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aeac:	460c      	mov	r4, r1
 800aeae:	6849      	ldr	r1, [r1, #4]
 800aeb0:	6923      	ldr	r3, [r4, #16]
 800aeb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aeb6:	68a3      	ldr	r3, [r4, #8]
 800aeb8:	4607      	mov	r7, r0
 800aeba:	4691      	mov	r9, r2
 800aebc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aec0:	f108 0601 	add.w	r6, r8, #1
 800aec4:	42b3      	cmp	r3, r6
 800aec6:	db0b      	blt.n	800aee0 <__lshift+0x38>
 800aec8:	4638      	mov	r0, r7
 800aeca:	f7ff fd91 	bl	800a9f0 <_Balloc>
 800aece:	4605      	mov	r5, r0
 800aed0:	b948      	cbnz	r0, 800aee6 <__lshift+0x3e>
 800aed2:	4602      	mov	r2, r0
 800aed4:	4b2a      	ldr	r3, [pc, #168]	; (800af80 <__lshift+0xd8>)
 800aed6:	482b      	ldr	r0, [pc, #172]	; (800af84 <__lshift+0xdc>)
 800aed8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aedc:	f000 fcd6 	bl	800b88c <__assert_func>
 800aee0:	3101      	adds	r1, #1
 800aee2:	005b      	lsls	r3, r3, #1
 800aee4:	e7ee      	b.n	800aec4 <__lshift+0x1c>
 800aee6:	2300      	movs	r3, #0
 800aee8:	f100 0114 	add.w	r1, r0, #20
 800aeec:	f100 0210 	add.w	r2, r0, #16
 800aef0:	4618      	mov	r0, r3
 800aef2:	4553      	cmp	r3, sl
 800aef4:	db37      	blt.n	800af66 <__lshift+0xbe>
 800aef6:	6920      	ldr	r0, [r4, #16]
 800aef8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aefc:	f104 0314 	add.w	r3, r4, #20
 800af00:	f019 091f 	ands.w	r9, r9, #31
 800af04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800af0c:	d02f      	beq.n	800af6e <__lshift+0xc6>
 800af0e:	f1c9 0e20 	rsb	lr, r9, #32
 800af12:	468a      	mov	sl, r1
 800af14:	f04f 0c00 	mov.w	ip, #0
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	fa02 f209 	lsl.w	r2, r2, r9
 800af1e:	ea42 020c 	orr.w	r2, r2, ip
 800af22:	f84a 2b04 	str.w	r2, [sl], #4
 800af26:	f853 2b04 	ldr.w	r2, [r3], #4
 800af2a:	4298      	cmp	r0, r3
 800af2c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800af30:	d8f2      	bhi.n	800af18 <__lshift+0x70>
 800af32:	1b03      	subs	r3, r0, r4
 800af34:	3b15      	subs	r3, #21
 800af36:	f023 0303 	bic.w	r3, r3, #3
 800af3a:	3304      	adds	r3, #4
 800af3c:	f104 0215 	add.w	r2, r4, #21
 800af40:	4290      	cmp	r0, r2
 800af42:	bf38      	it	cc
 800af44:	2304      	movcc	r3, #4
 800af46:	f841 c003 	str.w	ip, [r1, r3]
 800af4a:	f1bc 0f00 	cmp.w	ip, #0
 800af4e:	d001      	beq.n	800af54 <__lshift+0xac>
 800af50:	f108 0602 	add.w	r6, r8, #2
 800af54:	3e01      	subs	r6, #1
 800af56:	4638      	mov	r0, r7
 800af58:	612e      	str	r6, [r5, #16]
 800af5a:	4621      	mov	r1, r4
 800af5c:	f7ff fd88 	bl	800aa70 <_Bfree>
 800af60:	4628      	mov	r0, r5
 800af62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af66:	f842 0f04 	str.w	r0, [r2, #4]!
 800af6a:	3301      	adds	r3, #1
 800af6c:	e7c1      	b.n	800aef2 <__lshift+0x4a>
 800af6e:	3904      	subs	r1, #4
 800af70:	f853 2b04 	ldr.w	r2, [r3], #4
 800af74:	f841 2f04 	str.w	r2, [r1, #4]!
 800af78:	4298      	cmp	r0, r3
 800af7a:	d8f9      	bhi.n	800af70 <__lshift+0xc8>
 800af7c:	e7ea      	b.n	800af54 <__lshift+0xac>
 800af7e:	bf00      	nop
 800af80:	0800e070 	.word	0x0800e070
 800af84:	0800e0fc 	.word	0x0800e0fc

0800af88 <__mcmp>:
 800af88:	b530      	push	{r4, r5, lr}
 800af8a:	6902      	ldr	r2, [r0, #16]
 800af8c:	690c      	ldr	r4, [r1, #16]
 800af8e:	1b12      	subs	r2, r2, r4
 800af90:	d10e      	bne.n	800afb0 <__mcmp+0x28>
 800af92:	f100 0314 	add.w	r3, r0, #20
 800af96:	3114      	adds	r1, #20
 800af98:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800af9c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800afa0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800afa4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800afa8:	42a5      	cmp	r5, r4
 800afaa:	d003      	beq.n	800afb4 <__mcmp+0x2c>
 800afac:	d305      	bcc.n	800afba <__mcmp+0x32>
 800afae:	2201      	movs	r2, #1
 800afb0:	4610      	mov	r0, r2
 800afb2:	bd30      	pop	{r4, r5, pc}
 800afb4:	4283      	cmp	r3, r0
 800afb6:	d3f3      	bcc.n	800afa0 <__mcmp+0x18>
 800afb8:	e7fa      	b.n	800afb0 <__mcmp+0x28>
 800afba:	f04f 32ff 	mov.w	r2, #4294967295
 800afbe:	e7f7      	b.n	800afb0 <__mcmp+0x28>

0800afc0 <__mdiff>:
 800afc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc4:	460c      	mov	r4, r1
 800afc6:	4606      	mov	r6, r0
 800afc8:	4611      	mov	r1, r2
 800afca:	4620      	mov	r0, r4
 800afcc:	4690      	mov	r8, r2
 800afce:	f7ff ffdb 	bl	800af88 <__mcmp>
 800afd2:	1e05      	subs	r5, r0, #0
 800afd4:	d110      	bne.n	800aff8 <__mdiff+0x38>
 800afd6:	4629      	mov	r1, r5
 800afd8:	4630      	mov	r0, r6
 800afda:	f7ff fd09 	bl	800a9f0 <_Balloc>
 800afde:	b930      	cbnz	r0, 800afee <__mdiff+0x2e>
 800afe0:	4b3a      	ldr	r3, [pc, #232]	; (800b0cc <__mdiff+0x10c>)
 800afe2:	4602      	mov	r2, r0
 800afe4:	f240 2132 	movw	r1, #562	; 0x232
 800afe8:	4839      	ldr	r0, [pc, #228]	; (800b0d0 <__mdiff+0x110>)
 800afea:	f000 fc4f 	bl	800b88c <__assert_func>
 800afee:	2301      	movs	r3, #1
 800aff0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aff4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aff8:	bfa4      	itt	ge
 800affa:	4643      	movge	r3, r8
 800affc:	46a0      	movge	r8, r4
 800affe:	4630      	mov	r0, r6
 800b000:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b004:	bfa6      	itte	ge
 800b006:	461c      	movge	r4, r3
 800b008:	2500      	movge	r5, #0
 800b00a:	2501      	movlt	r5, #1
 800b00c:	f7ff fcf0 	bl	800a9f0 <_Balloc>
 800b010:	b920      	cbnz	r0, 800b01c <__mdiff+0x5c>
 800b012:	4b2e      	ldr	r3, [pc, #184]	; (800b0cc <__mdiff+0x10c>)
 800b014:	4602      	mov	r2, r0
 800b016:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b01a:	e7e5      	b.n	800afe8 <__mdiff+0x28>
 800b01c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b020:	6926      	ldr	r6, [r4, #16]
 800b022:	60c5      	str	r5, [r0, #12]
 800b024:	f104 0914 	add.w	r9, r4, #20
 800b028:	f108 0514 	add.w	r5, r8, #20
 800b02c:	f100 0e14 	add.w	lr, r0, #20
 800b030:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b034:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b038:	f108 0210 	add.w	r2, r8, #16
 800b03c:	46f2      	mov	sl, lr
 800b03e:	2100      	movs	r1, #0
 800b040:	f859 3b04 	ldr.w	r3, [r9], #4
 800b044:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b048:	fa1f f883 	uxth.w	r8, r3
 800b04c:	fa11 f18b 	uxtah	r1, r1, fp
 800b050:	0c1b      	lsrs	r3, r3, #16
 800b052:	eba1 0808 	sub.w	r8, r1, r8
 800b056:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b05a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b05e:	fa1f f888 	uxth.w	r8, r8
 800b062:	1419      	asrs	r1, r3, #16
 800b064:	454e      	cmp	r6, r9
 800b066:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b06a:	f84a 3b04 	str.w	r3, [sl], #4
 800b06e:	d8e7      	bhi.n	800b040 <__mdiff+0x80>
 800b070:	1b33      	subs	r3, r6, r4
 800b072:	3b15      	subs	r3, #21
 800b074:	f023 0303 	bic.w	r3, r3, #3
 800b078:	3304      	adds	r3, #4
 800b07a:	3415      	adds	r4, #21
 800b07c:	42a6      	cmp	r6, r4
 800b07e:	bf38      	it	cc
 800b080:	2304      	movcc	r3, #4
 800b082:	441d      	add	r5, r3
 800b084:	4473      	add	r3, lr
 800b086:	469e      	mov	lr, r3
 800b088:	462e      	mov	r6, r5
 800b08a:	4566      	cmp	r6, ip
 800b08c:	d30e      	bcc.n	800b0ac <__mdiff+0xec>
 800b08e:	f10c 0203 	add.w	r2, ip, #3
 800b092:	1b52      	subs	r2, r2, r5
 800b094:	f022 0203 	bic.w	r2, r2, #3
 800b098:	3d03      	subs	r5, #3
 800b09a:	45ac      	cmp	ip, r5
 800b09c:	bf38      	it	cc
 800b09e:	2200      	movcc	r2, #0
 800b0a0:	441a      	add	r2, r3
 800b0a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b0a6:	b17b      	cbz	r3, 800b0c8 <__mdiff+0x108>
 800b0a8:	6107      	str	r7, [r0, #16]
 800b0aa:	e7a3      	b.n	800aff4 <__mdiff+0x34>
 800b0ac:	f856 8b04 	ldr.w	r8, [r6], #4
 800b0b0:	fa11 f288 	uxtah	r2, r1, r8
 800b0b4:	1414      	asrs	r4, r2, #16
 800b0b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b0ba:	b292      	uxth	r2, r2
 800b0bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b0c0:	f84e 2b04 	str.w	r2, [lr], #4
 800b0c4:	1421      	asrs	r1, r4, #16
 800b0c6:	e7e0      	b.n	800b08a <__mdiff+0xca>
 800b0c8:	3f01      	subs	r7, #1
 800b0ca:	e7ea      	b.n	800b0a2 <__mdiff+0xe2>
 800b0cc:	0800e070 	.word	0x0800e070
 800b0d0:	0800e0fc 	.word	0x0800e0fc

0800b0d4 <__ulp>:
 800b0d4:	b082      	sub	sp, #8
 800b0d6:	ed8d 0b00 	vstr	d0, [sp]
 800b0da:	9b01      	ldr	r3, [sp, #4]
 800b0dc:	4912      	ldr	r1, [pc, #72]	; (800b128 <__ulp+0x54>)
 800b0de:	4019      	ands	r1, r3
 800b0e0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b0e4:	2900      	cmp	r1, #0
 800b0e6:	dd05      	ble.n	800b0f4 <__ulp+0x20>
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	460b      	mov	r3, r1
 800b0ec:	ec43 2b10 	vmov	d0, r2, r3
 800b0f0:	b002      	add	sp, #8
 800b0f2:	4770      	bx	lr
 800b0f4:	4249      	negs	r1, r1
 800b0f6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b0fa:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b0fe:	f04f 0200 	mov.w	r2, #0
 800b102:	f04f 0300 	mov.w	r3, #0
 800b106:	da04      	bge.n	800b112 <__ulp+0x3e>
 800b108:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b10c:	fa41 f300 	asr.w	r3, r1, r0
 800b110:	e7ec      	b.n	800b0ec <__ulp+0x18>
 800b112:	f1a0 0114 	sub.w	r1, r0, #20
 800b116:	291e      	cmp	r1, #30
 800b118:	bfda      	itte	le
 800b11a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b11e:	fa20 f101 	lsrle.w	r1, r0, r1
 800b122:	2101      	movgt	r1, #1
 800b124:	460a      	mov	r2, r1
 800b126:	e7e1      	b.n	800b0ec <__ulp+0x18>
 800b128:	7ff00000 	.word	0x7ff00000

0800b12c <__b2d>:
 800b12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b12e:	6905      	ldr	r5, [r0, #16]
 800b130:	f100 0714 	add.w	r7, r0, #20
 800b134:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b138:	1f2e      	subs	r6, r5, #4
 800b13a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b13e:	4620      	mov	r0, r4
 800b140:	f7ff fd48 	bl	800abd4 <__hi0bits>
 800b144:	f1c0 0320 	rsb	r3, r0, #32
 800b148:	280a      	cmp	r0, #10
 800b14a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b1c8 <__b2d+0x9c>
 800b14e:	600b      	str	r3, [r1, #0]
 800b150:	dc14      	bgt.n	800b17c <__b2d+0x50>
 800b152:	f1c0 0e0b 	rsb	lr, r0, #11
 800b156:	fa24 f10e 	lsr.w	r1, r4, lr
 800b15a:	42b7      	cmp	r7, r6
 800b15c:	ea41 030c 	orr.w	r3, r1, ip
 800b160:	bf34      	ite	cc
 800b162:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b166:	2100      	movcs	r1, #0
 800b168:	3015      	adds	r0, #21
 800b16a:	fa04 f000 	lsl.w	r0, r4, r0
 800b16e:	fa21 f10e 	lsr.w	r1, r1, lr
 800b172:	ea40 0201 	orr.w	r2, r0, r1
 800b176:	ec43 2b10 	vmov	d0, r2, r3
 800b17a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b17c:	42b7      	cmp	r7, r6
 800b17e:	bf3a      	itte	cc
 800b180:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b184:	f1a5 0608 	subcc.w	r6, r5, #8
 800b188:	2100      	movcs	r1, #0
 800b18a:	380b      	subs	r0, #11
 800b18c:	d017      	beq.n	800b1be <__b2d+0x92>
 800b18e:	f1c0 0c20 	rsb	ip, r0, #32
 800b192:	fa04 f500 	lsl.w	r5, r4, r0
 800b196:	42be      	cmp	r6, r7
 800b198:	fa21 f40c 	lsr.w	r4, r1, ip
 800b19c:	ea45 0504 	orr.w	r5, r5, r4
 800b1a0:	bf8c      	ite	hi
 800b1a2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b1a6:	2400      	movls	r4, #0
 800b1a8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b1ac:	fa01 f000 	lsl.w	r0, r1, r0
 800b1b0:	fa24 f40c 	lsr.w	r4, r4, ip
 800b1b4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b1b8:	ea40 0204 	orr.w	r2, r0, r4
 800b1bc:	e7db      	b.n	800b176 <__b2d+0x4a>
 800b1be:	ea44 030c 	orr.w	r3, r4, ip
 800b1c2:	460a      	mov	r2, r1
 800b1c4:	e7d7      	b.n	800b176 <__b2d+0x4a>
 800b1c6:	bf00      	nop
 800b1c8:	3ff00000 	.word	0x3ff00000

0800b1cc <__d2b>:
 800b1cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b1d0:	4689      	mov	r9, r1
 800b1d2:	2101      	movs	r1, #1
 800b1d4:	ec57 6b10 	vmov	r6, r7, d0
 800b1d8:	4690      	mov	r8, r2
 800b1da:	f7ff fc09 	bl	800a9f0 <_Balloc>
 800b1de:	4604      	mov	r4, r0
 800b1e0:	b930      	cbnz	r0, 800b1f0 <__d2b+0x24>
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	4b25      	ldr	r3, [pc, #148]	; (800b27c <__d2b+0xb0>)
 800b1e6:	4826      	ldr	r0, [pc, #152]	; (800b280 <__d2b+0xb4>)
 800b1e8:	f240 310a 	movw	r1, #778	; 0x30a
 800b1ec:	f000 fb4e 	bl	800b88c <__assert_func>
 800b1f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b1f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b1f8:	bb35      	cbnz	r5, 800b248 <__d2b+0x7c>
 800b1fa:	2e00      	cmp	r6, #0
 800b1fc:	9301      	str	r3, [sp, #4]
 800b1fe:	d028      	beq.n	800b252 <__d2b+0x86>
 800b200:	4668      	mov	r0, sp
 800b202:	9600      	str	r6, [sp, #0]
 800b204:	f7ff fd06 	bl	800ac14 <__lo0bits>
 800b208:	9900      	ldr	r1, [sp, #0]
 800b20a:	b300      	cbz	r0, 800b24e <__d2b+0x82>
 800b20c:	9a01      	ldr	r2, [sp, #4]
 800b20e:	f1c0 0320 	rsb	r3, r0, #32
 800b212:	fa02 f303 	lsl.w	r3, r2, r3
 800b216:	430b      	orrs	r3, r1
 800b218:	40c2      	lsrs	r2, r0
 800b21a:	6163      	str	r3, [r4, #20]
 800b21c:	9201      	str	r2, [sp, #4]
 800b21e:	9b01      	ldr	r3, [sp, #4]
 800b220:	61a3      	str	r3, [r4, #24]
 800b222:	2b00      	cmp	r3, #0
 800b224:	bf14      	ite	ne
 800b226:	2202      	movne	r2, #2
 800b228:	2201      	moveq	r2, #1
 800b22a:	6122      	str	r2, [r4, #16]
 800b22c:	b1d5      	cbz	r5, 800b264 <__d2b+0x98>
 800b22e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b232:	4405      	add	r5, r0
 800b234:	f8c9 5000 	str.w	r5, [r9]
 800b238:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b23c:	f8c8 0000 	str.w	r0, [r8]
 800b240:	4620      	mov	r0, r4
 800b242:	b003      	add	sp, #12
 800b244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b248:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b24c:	e7d5      	b.n	800b1fa <__d2b+0x2e>
 800b24e:	6161      	str	r1, [r4, #20]
 800b250:	e7e5      	b.n	800b21e <__d2b+0x52>
 800b252:	a801      	add	r0, sp, #4
 800b254:	f7ff fcde 	bl	800ac14 <__lo0bits>
 800b258:	9b01      	ldr	r3, [sp, #4]
 800b25a:	6163      	str	r3, [r4, #20]
 800b25c:	2201      	movs	r2, #1
 800b25e:	6122      	str	r2, [r4, #16]
 800b260:	3020      	adds	r0, #32
 800b262:	e7e3      	b.n	800b22c <__d2b+0x60>
 800b264:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b268:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b26c:	f8c9 0000 	str.w	r0, [r9]
 800b270:	6918      	ldr	r0, [r3, #16]
 800b272:	f7ff fcaf 	bl	800abd4 <__hi0bits>
 800b276:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b27a:	e7df      	b.n	800b23c <__d2b+0x70>
 800b27c:	0800e070 	.word	0x0800e070
 800b280:	0800e0fc 	.word	0x0800e0fc

0800b284 <__ratio>:
 800b284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b288:	4688      	mov	r8, r1
 800b28a:	4669      	mov	r1, sp
 800b28c:	4681      	mov	r9, r0
 800b28e:	f7ff ff4d 	bl	800b12c <__b2d>
 800b292:	a901      	add	r1, sp, #4
 800b294:	4640      	mov	r0, r8
 800b296:	ec55 4b10 	vmov	r4, r5, d0
 800b29a:	f7ff ff47 	bl	800b12c <__b2d>
 800b29e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b2a2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b2a6:	eba3 0c02 	sub.w	ip, r3, r2
 800b2aa:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b2ae:	1a9b      	subs	r3, r3, r2
 800b2b0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b2b4:	ec51 0b10 	vmov	r0, r1, d0
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	bfd6      	itet	le
 800b2bc:	460a      	movle	r2, r1
 800b2be:	462a      	movgt	r2, r5
 800b2c0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b2c4:	468b      	mov	fp, r1
 800b2c6:	462f      	mov	r7, r5
 800b2c8:	bfd4      	ite	le
 800b2ca:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b2ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	ee10 2a10 	vmov	r2, s0
 800b2d8:	465b      	mov	r3, fp
 800b2da:	4639      	mov	r1, r7
 800b2dc:	f7f5 fa8e 	bl	80007fc <__aeabi_ddiv>
 800b2e0:	ec41 0b10 	vmov	d0, r0, r1
 800b2e4:	b003      	add	sp, #12
 800b2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b2ea <__copybits>:
 800b2ea:	3901      	subs	r1, #1
 800b2ec:	b570      	push	{r4, r5, r6, lr}
 800b2ee:	1149      	asrs	r1, r1, #5
 800b2f0:	6914      	ldr	r4, [r2, #16]
 800b2f2:	3101      	adds	r1, #1
 800b2f4:	f102 0314 	add.w	r3, r2, #20
 800b2f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b2fc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b300:	1f05      	subs	r5, r0, #4
 800b302:	42a3      	cmp	r3, r4
 800b304:	d30c      	bcc.n	800b320 <__copybits+0x36>
 800b306:	1aa3      	subs	r3, r4, r2
 800b308:	3b11      	subs	r3, #17
 800b30a:	f023 0303 	bic.w	r3, r3, #3
 800b30e:	3211      	adds	r2, #17
 800b310:	42a2      	cmp	r2, r4
 800b312:	bf88      	it	hi
 800b314:	2300      	movhi	r3, #0
 800b316:	4418      	add	r0, r3
 800b318:	2300      	movs	r3, #0
 800b31a:	4288      	cmp	r0, r1
 800b31c:	d305      	bcc.n	800b32a <__copybits+0x40>
 800b31e:	bd70      	pop	{r4, r5, r6, pc}
 800b320:	f853 6b04 	ldr.w	r6, [r3], #4
 800b324:	f845 6f04 	str.w	r6, [r5, #4]!
 800b328:	e7eb      	b.n	800b302 <__copybits+0x18>
 800b32a:	f840 3b04 	str.w	r3, [r0], #4
 800b32e:	e7f4      	b.n	800b31a <__copybits+0x30>

0800b330 <__any_on>:
 800b330:	f100 0214 	add.w	r2, r0, #20
 800b334:	6900      	ldr	r0, [r0, #16]
 800b336:	114b      	asrs	r3, r1, #5
 800b338:	4298      	cmp	r0, r3
 800b33a:	b510      	push	{r4, lr}
 800b33c:	db11      	blt.n	800b362 <__any_on+0x32>
 800b33e:	dd0a      	ble.n	800b356 <__any_on+0x26>
 800b340:	f011 011f 	ands.w	r1, r1, #31
 800b344:	d007      	beq.n	800b356 <__any_on+0x26>
 800b346:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b34a:	fa24 f001 	lsr.w	r0, r4, r1
 800b34e:	fa00 f101 	lsl.w	r1, r0, r1
 800b352:	428c      	cmp	r4, r1
 800b354:	d10b      	bne.n	800b36e <__any_on+0x3e>
 800b356:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d803      	bhi.n	800b366 <__any_on+0x36>
 800b35e:	2000      	movs	r0, #0
 800b360:	bd10      	pop	{r4, pc}
 800b362:	4603      	mov	r3, r0
 800b364:	e7f7      	b.n	800b356 <__any_on+0x26>
 800b366:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b36a:	2900      	cmp	r1, #0
 800b36c:	d0f5      	beq.n	800b35a <__any_on+0x2a>
 800b36e:	2001      	movs	r0, #1
 800b370:	e7f6      	b.n	800b360 <__any_on+0x30>

0800b372 <_calloc_r>:
 800b372:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b374:	fba1 2402 	umull	r2, r4, r1, r2
 800b378:	b94c      	cbnz	r4, 800b38e <_calloc_r+0x1c>
 800b37a:	4611      	mov	r1, r2
 800b37c:	9201      	str	r2, [sp, #4]
 800b37e:	f000 f87b 	bl	800b478 <_malloc_r>
 800b382:	9a01      	ldr	r2, [sp, #4]
 800b384:	4605      	mov	r5, r0
 800b386:	b930      	cbnz	r0, 800b396 <_calloc_r+0x24>
 800b388:	4628      	mov	r0, r5
 800b38a:	b003      	add	sp, #12
 800b38c:	bd30      	pop	{r4, r5, pc}
 800b38e:	220c      	movs	r2, #12
 800b390:	6002      	str	r2, [r0, #0]
 800b392:	2500      	movs	r5, #0
 800b394:	e7f8      	b.n	800b388 <_calloc_r+0x16>
 800b396:	4621      	mov	r1, r4
 800b398:	f7fc fbcc 	bl	8007b34 <memset>
 800b39c:	e7f4      	b.n	800b388 <_calloc_r+0x16>
	...

0800b3a0 <_free_r>:
 800b3a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b3a2:	2900      	cmp	r1, #0
 800b3a4:	d044      	beq.n	800b430 <_free_r+0x90>
 800b3a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3aa:	9001      	str	r0, [sp, #4]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	f1a1 0404 	sub.w	r4, r1, #4
 800b3b2:	bfb8      	it	lt
 800b3b4:	18e4      	addlt	r4, r4, r3
 800b3b6:	f000 fa99 	bl	800b8ec <__malloc_lock>
 800b3ba:	4a1e      	ldr	r2, [pc, #120]	; (800b434 <_free_r+0x94>)
 800b3bc:	9801      	ldr	r0, [sp, #4]
 800b3be:	6813      	ldr	r3, [r2, #0]
 800b3c0:	b933      	cbnz	r3, 800b3d0 <_free_r+0x30>
 800b3c2:	6063      	str	r3, [r4, #4]
 800b3c4:	6014      	str	r4, [r2, #0]
 800b3c6:	b003      	add	sp, #12
 800b3c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3cc:	f000 ba94 	b.w	800b8f8 <__malloc_unlock>
 800b3d0:	42a3      	cmp	r3, r4
 800b3d2:	d908      	bls.n	800b3e6 <_free_r+0x46>
 800b3d4:	6825      	ldr	r5, [r4, #0]
 800b3d6:	1961      	adds	r1, r4, r5
 800b3d8:	428b      	cmp	r3, r1
 800b3da:	bf01      	itttt	eq
 800b3dc:	6819      	ldreq	r1, [r3, #0]
 800b3de:	685b      	ldreq	r3, [r3, #4]
 800b3e0:	1949      	addeq	r1, r1, r5
 800b3e2:	6021      	streq	r1, [r4, #0]
 800b3e4:	e7ed      	b.n	800b3c2 <_free_r+0x22>
 800b3e6:	461a      	mov	r2, r3
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	b10b      	cbz	r3, 800b3f0 <_free_r+0x50>
 800b3ec:	42a3      	cmp	r3, r4
 800b3ee:	d9fa      	bls.n	800b3e6 <_free_r+0x46>
 800b3f0:	6811      	ldr	r1, [r2, #0]
 800b3f2:	1855      	adds	r5, r2, r1
 800b3f4:	42a5      	cmp	r5, r4
 800b3f6:	d10b      	bne.n	800b410 <_free_r+0x70>
 800b3f8:	6824      	ldr	r4, [r4, #0]
 800b3fa:	4421      	add	r1, r4
 800b3fc:	1854      	adds	r4, r2, r1
 800b3fe:	42a3      	cmp	r3, r4
 800b400:	6011      	str	r1, [r2, #0]
 800b402:	d1e0      	bne.n	800b3c6 <_free_r+0x26>
 800b404:	681c      	ldr	r4, [r3, #0]
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	6053      	str	r3, [r2, #4]
 800b40a:	4421      	add	r1, r4
 800b40c:	6011      	str	r1, [r2, #0]
 800b40e:	e7da      	b.n	800b3c6 <_free_r+0x26>
 800b410:	d902      	bls.n	800b418 <_free_r+0x78>
 800b412:	230c      	movs	r3, #12
 800b414:	6003      	str	r3, [r0, #0]
 800b416:	e7d6      	b.n	800b3c6 <_free_r+0x26>
 800b418:	6825      	ldr	r5, [r4, #0]
 800b41a:	1961      	adds	r1, r4, r5
 800b41c:	428b      	cmp	r3, r1
 800b41e:	bf04      	itt	eq
 800b420:	6819      	ldreq	r1, [r3, #0]
 800b422:	685b      	ldreq	r3, [r3, #4]
 800b424:	6063      	str	r3, [r4, #4]
 800b426:	bf04      	itt	eq
 800b428:	1949      	addeq	r1, r1, r5
 800b42a:	6021      	streq	r1, [r4, #0]
 800b42c:	6054      	str	r4, [r2, #4]
 800b42e:	e7ca      	b.n	800b3c6 <_free_r+0x26>
 800b430:	b003      	add	sp, #12
 800b432:	bd30      	pop	{r4, r5, pc}
 800b434:	2000477c 	.word	0x2000477c

0800b438 <sbrk_aligned>:
 800b438:	b570      	push	{r4, r5, r6, lr}
 800b43a:	4e0e      	ldr	r6, [pc, #56]	; (800b474 <sbrk_aligned+0x3c>)
 800b43c:	460c      	mov	r4, r1
 800b43e:	6831      	ldr	r1, [r6, #0]
 800b440:	4605      	mov	r5, r0
 800b442:	b911      	cbnz	r1, 800b44a <sbrk_aligned+0x12>
 800b444:	f000 f9f0 	bl	800b828 <_sbrk_r>
 800b448:	6030      	str	r0, [r6, #0]
 800b44a:	4621      	mov	r1, r4
 800b44c:	4628      	mov	r0, r5
 800b44e:	f000 f9eb 	bl	800b828 <_sbrk_r>
 800b452:	1c43      	adds	r3, r0, #1
 800b454:	d00a      	beq.n	800b46c <sbrk_aligned+0x34>
 800b456:	1cc4      	adds	r4, r0, #3
 800b458:	f024 0403 	bic.w	r4, r4, #3
 800b45c:	42a0      	cmp	r0, r4
 800b45e:	d007      	beq.n	800b470 <sbrk_aligned+0x38>
 800b460:	1a21      	subs	r1, r4, r0
 800b462:	4628      	mov	r0, r5
 800b464:	f000 f9e0 	bl	800b828 <_sbrk_r>
 800b468:	3001      	adds	r0, #1
 800b46a:	d101      	bne.n	800b470 <sbrk_aligned+0x38>
 800b46c:	f04f 34ff 	mov.w	r4, #4294967295
 800b470:	4620      	mov	r0, r4
 800b472:	bd70      	pop	{r4, r5, r6, pc}
 800b474:	20004780 	.word	0x20004780

0800b478 <_malloc_r>:
 800b478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b47c:	1ccd      	adds	r5, r1, #3
 800b47e:	f025 0503 	bic.w	r5, r5, #3
 800b482:	3508      	adds	r5, #8
 800b484:	2d0c      	cmp	r5, #12
 800b486:	bf38      	it	cc
 800b488:	250c      	movcc	r5, #12
 800b48a:	2d00      	cmp	r5, #0
 800b48c:	4607      	mov	r7, r0
 800b48e:	db01      	blt.n	800b494 <_malloc_r+0x1c>
 800b490:	42a9      	cmp	r1, r5
 800b492:	d905      	bls.n	800b4a0 <_malloc_r+0x28>
 800b494:	230c      	movs	r3, #12
 800b496:	603b      	str	r3, [r7, #0]
 800b498:	2600      	movs	r6, #0
 800b49a:	4630      	mov	r0, r6
 800b49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4a0:	4e2e      	ldr	r6, [pc, #184]	; (800b55c <_malloc_r+0xe4>)
 800b4a2:	f000 fa23 	bl	800b8ec <__malloc_lock>
 800b4a6:	6833      	ldr	r3, [r6, #0]
 800b4a8:	461c      	mov	r4, r3
 800b4aa:	bb34      	cbnz	r4, 800b4fa <_malloc_r+0x82>
 800b4ac:	4629      	mov	r1, r5
 800b4ae:	4638      	mov	r0, r7
 800b4b0:	f7ff ffc2 	bl	800b438 <sbrk_aligned>
 800b4b4:	1c43      	adds	r3, r0, #1
 800b4b6:	4604      	mov	r4, r0
 800b4b8:	d14d      	bne.n	800b556 <_malloc_r+0xde>
 800b4ba:	6834      	ldr	r4, [r6, #0]
 800b4bc:	4626      	mov	r6, r4
 800b4be:	2e00      	cmp	r6, #0
 800b4c0:	d140      	bne.n	800b544 <_malloc_r+0xcc>
 800b4c2:	6823      	ldr	r3, [r4, #0]
 800b4c4:	4631      	mov	r1, r6
 800b4c6:	4638      	mov	r0, r7
 800b4c8:	eb04 0803 	add.w	r8, r4, r3
 800b4cc:	f000 f9ac 	bl	800b828 <_sbrk_r>
 800b4d0:	4580      	cmp	r8, r0
 800b4d2:	d13a      	bne.n	800b54a <_malloc_r+0xd2>
 800b4d4:	6821      	ldr	r1, [r4, #0]
 800b4d6:	3503      	adds	r5, #3
 800b4d8:	1a6d      	subs	r5, r5, r1
 800b4da:	f025 0503 	bic.w	r5, r5, #3
 800b4de:	3508      	adds	r5, #8
 800b4e0:	2d0c      	cmp	r5, #12
 800b4e2:	bf38      	it	cc
 800b4e4:	250c      	movcc	r5, #12
 800b4e6:	4629      	mov	r1, r5
 800b4e8:	4638      	mov	r0, r7
 800b4ea:	f7ff ffa5 	bl	800b438 <sbrk_aligned>
 800b4ee:	3001      	adds	r0, #1
 800b4f0:	d02b      	beq.n	800b54a <_malloc_r+0xd2>
 800b4f2:	6823      	ldr	r3, [r4, #0]
 800b4f4:	442b      	add	r3, r5
 800b4f6:	6023      	str	r3, [r4, #0]
 800b4f8:	e00e      	b.n	800b518 <_malloc_r+0xa0>
 800b4fa:	6822      	ldr	r2, [r4, #0]
 800b4fc:	1b52      	subs	r2, r2, r5
 800b4fe:	d41e      	bmi.n	800b53e <_malloc_r+0xc6>
 800b500:	2a0b      	cmp	r2, #11
 800b502:	d916      	bls.n	800b532 <_malloc_r+0xba>
 800b504:	1961      	adds	r1, r4, r5
 800b506:	42a3      	cmp	r3, r4
 800b508:	6025      	str	r5, [r4, #0]
 800b50a:	bf18      	it	ne
 800b50c:	6059      	strne	r1, [r3, #4]
 800b50e:	6863      	ldr	r3, [r4, #4]
 800b510:	bf08      	it	eq
 800b512:	6031      	streq	r1, [r6, #0]
 800b514:	5162      	str	r2, [r4, r5]
 800b516:	604b      	str	r3, [r1, #4]
 800b518:	4638      	mov	r0, r7
 800b51a:	f104 060b 	add.w	r6, r4, #11
 800b51e:	f000 f9eb 	bl	800b8f8 <__malloc_unlock>
 800b522:	f026 0607 	bic.w	r6, r6, #7
 800b526:	1d23      	adds	r3, r4, #4
 800b528:	1af2      	subs	r2, r6, r3
 800b52a:	d0b6      	beq.n	800b49a <_malloc_r+0x22>
 800b52c:	1b9b      	subs	r3, r3, r6
 800b52e:	50a3      	str	r3, [r4, r2]
 800b530:	e7b3      	b.n	800b49a <_malloc_r+0x22>
 800b532:	6862      	ldr	r2, [r4, #4]
 800b534:	42a3      	cmp	r3, r4
 800b536:	bf0c      	ite	eq
 800b538:	6032      	streq	r2, [r6, #0]
 800b53a:	605a      	strne	r2, [r3, #4]
 800b53c:	e7ec      	b.n	800b518 <_malloc_r+0xa0>
 800b53e:	4623      	mov	r3, r4
 800b540:	6864      	ldr	r4, [r4, #4]
 800b542:	e7b2      	b.n	800b4aa <_malloc_r+0x32>
 800b544:	4634      	mov	r4, r6
 800b546:	6876      	ldr	r6, [r6, #4]
 800b548:	e7b9      	b.n	800b4be <_malloc_r+0x46>
 800b54a:	230c      	movs	r3, #12
 800b54c:	603b      	str	r3, [r7, #0]
 800b54e:	4638      	mov	r0, r7
 800b550:	f000 f9d2 	bl	800b8f8 <__malloc_unlock>
 800b554:	e7a1      	b.n	800b49a <_malloc_r+0x22>
 800b556:	6025      	str	r5, [r4, #0]
 800b558:	e7de      	b.n	800b518 <_malloc_r+0xa0>
 800b55a:	bf00      	nop
 800b55c:	2000477c 	.word	0x2000477c

0800b560 <__ssputs_r>:
 800b560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b564:	688e      	ldr	r6, [r1, #8]
 800b566:	429e      	cmp	r6, r3
 800b568:	4682      	mov	sl, r0
 800b56a:	460c      	mov	r4, r1
 800b56c:	4690      	mov	r8, r2
 800b56e:	461f      	mov	r7, r3
 800b570:	d838      	bhi.n	800b5e4 <__ssputs_r+0x84>
 800b572:	898a      	ldrh	r2, [r1, #12]
 800b574:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b578:	d032      	beq.n	800b5e0 <__ssputs_r+0x80>
 800b57a:	6825      	ldr	r5, [r4, #0]
 800b57c:	6909      	ldr	r1, [r1, #16]
 800b57e:	eba5 0901 	sub.w	r9, r5, r1
 800b582:	6965      	ldr	r5, [r4, #20]
 800b584:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b588:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b58c:	3301      	adds	r3, #1
 800b58e:	444b      	add	r3, r9
 800b590:	106d      	asrs	r5, r5, #1
 800b592:	429d      	cmp	r5, r3
 800b594:	bf38      	it	cc
 800b596:	461d      	movcc	r5, r3
 800b598:	0553      	lsls	r3, r2, #21
 800b59a:	d531      	bpl.n	800b600 <__ssputs_r+0xa0>
 800b59c:	4629      	mov	r1, r5
 800b59e:	f7ff ff6b 	bl	800b478 <_malloc_r>
 800b5a2:	4606      	mov	r6, r0
 800b5a4:	b950      	cbnz	r0, 800b5bc <__ssputs_r+0x5c>
 800b5a6:	230c      	movs	r3, #12
 800b5a8:	f8ca 3000 	str.w	r3, [sl]
 800b5ac:	89a3      	ldrh	r3, [r4, #12]
 800b5ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5b2:	81a3      	strh	r3, [r4, #12]
 800b5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5bc:	6921      	ldr	r1, [r4, #16]
 800b5be:	464a      	mov	r2, r9
 800b5c0:	f7fc fa90 	bl	8007ae4 <memcpy>
 800b5c4:	89a3      	ldrh	r3, [r4, #12]
 800b5c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b5ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5ce:	81a3      	strh	r3, [r4, #12]
 800b5d0:	6126      	str	r6, [r4, #16]
 800b5d2:	6165      	str	r5, [r4, #20]
 800b5d4:	444e      	add	r6, r9
 800b5d6:	eba5 0509 	sub.w	r5, r5, r9
 800b5da:	6026      	str	r6, [r4, #0]
 800b5dc:	60a5      	str	r5, [r4, #8]
 800b5de:	463e      	mov	r6, r7
 800b5e0:	42be      	cmp	r6, r7
 800b5e2:	d900      	bls.n	800b5e6 <__ssputs_r+0x86>
 800b5e4:	463e      	mov	r6, r7
 800b5e6:	6820      	ldr	r0, [r4, #0]
 800b5e8:	4632      	mov	r2, r6
 800b5ea:	4641      	mov	r1, r8
 800b5ec:	f7fc fa88 	bl	8007b00 <memmove>
 800b5f0:	68a3      	ldr	r3, [r4, #8]
 800b5f2:	1b9b      	subs	r3, r3, r6
 800b5f4:	60a3      	str	r3, [r4, #8]
 800b5f6:	6823      	ldr	r3, [r4, #0]
 800b5f8:	4433      	add	r3, r6
 800b5fa:	6023      	str	r3, [r4, #0]
 800b5fc:	2000      	movs	r0, #0
 800b5fe:	e7db      	b.n	800b5b8 <__ssputs_r+0x58>
 800b600:	462a      	mov	r2, r5
 800b602:	f000 f97f 	bl	800b904 <_realloc_r>
 800b606:	4606      	mov	r6, r0
 800b608:	2800      	cmp	r0, #0
 800b60a:	d1e1      	bne.n	800b5d0 <__ssputs_r+0x70>
 800b60c:	6921      	ldr	r1, [r4, #16]
 800b60e:	4650      	mov	r0, sl
 800b610:	f7ff fec6 	bl	800b3a0 <_free_r>
 800b614:	e7c7      	b.n	800b5a6 <__ssputs_r+0x46>
	...

0800b618 <_svfiprintf_r>:
 800b618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b61c:	4698      	mov	r8, r3
 800b61e:	898b      	ldrh	r3, [r1, #12]
 800b620:	061b      	lsls	r3, r3, #24
 800b622:	b09d      	sub	sp, #116	; 0x74
 800b624:	4607      	mov	r7, r0
 800b626:	460d      	mov	r5, r1
 800b628:	4614      	mov	r4, r2
 800b62a:	d50e      	bpl.n	800b64a <_svfiprintf_r+0x32>
 800b62c:	690b      	ldr	r3, [r1, #16]
 800b62e:	b963      	cbnz	r3, 800b64a <_svfiprintf_r+0x32>
 800b630:	2140      	movs	r1, #64	; 0x40
 800b632:	f7ff ff21 	bl	800b478 <_malloc_r>
 800b636:	6028      	str	r0, [r5, #0]
 800b638:	6128      	str	r0, [r5, #16]
 800b63a:	b920      	cbnz	r0, 800b646 <_svfiprintf_r+0x2e>
 800b63c:	230c      	movs	r3, #12
 800b63e:	603b      	str	r3, [r7, #0]
 800b640:	f04f 30ff 	mov.w	r0, #4294967295
 800b644:	e0d1      	b.n	800b7ea <_svfiprintf_r+0x1d2>
 800b646:	2340      	movs	r3, #64	; 0x40
 800b648:	616b      	str	r3, [r5, #20]
 800b64a:	2300      	movs	r3, #0
 800b64c:	9309      	str	r3, [sp, #36]	; 0x24
 800b64e:	2320      	movs	r3, #32
 800b650:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b654:	f8cd 800c 	str.w	r8, [sp, #12]
 800b658:	2330      	movs	r3, #48	; 0x30
 800b65a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b804 <_svfiprintf_r+0x1ec>
 800b65e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b662:	f04f 0901 	mov.w	r9, #1
 800b666:	4623      	mov	r3, r4
 800b668:	469a      	mov	sl, r3
 800b66a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b66e:	b10a      	cbz	r2, 800b674 <_svfiprintf_r+0x5c>
 800b670:	2a25      	cmp	r2, #37	; 0x25
 800b672:	d1f9      	bne.n	800b668 <_svfiprintf_r+0x50>
 800b674:	ebba 0b04 	subs.w	fp, sl, r4
 800b678:	d00b      	beq.n	800b692 <_svfiprintf_r+0x7a>
 800b67a:	465b      	mov	r3, fp
 800b67c:	4622      	mov	r2, r4
 800b67e:	4629      	mov	r1, r5
 800b680:	4638      	mov	r0, r7
 800b682:	f7ff ff6d 	bl	800b560 <__ssputs_r>
 800b686:	3001      	adds	r0, #1
 800b688:	f000 80aa 	beq.w	800b7e0 <_svfiprintf_r+0x1c8>
 800b68c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b68e:	445a      	add	r2, fp
 800b690:	9209      	str	r2, [sp, #36]	; 0x24
 800b692:	f89a 3000 	ldrb.w	r3, [sl]
 800b696:	2b00      	cmp	r3, #0
 800b698:	f000 80a2 	beq.w	800b7e0 <_svfiprintf_r+0x1c8>
 800b69c:	2300      	movs	r3, #0
 800b69e:	f04f 32ff 	mov.w	r2, #4294967295
 800b6a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6a6:	f10a 0a01 	add.w	sl, sl, #1
 800b6aa:	9304      	str	r3, [sp, #16]
 800b6ac:	9307      	str	r3, [sp, #28]
 800b6ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6b2:	931a      	str	r3, [sp, #104]	; 0x68
 800b6b4:	4654      	mov	r4, sl
 800b6b6:	2205      	movs	r2, #5
 800b6b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6bc:	4851      	ldr	r0, [pc, #324]	; (800b804 <_svfiprintf_r+0x1ec>)
 800b6be:	f7f4 fd67 	bl	8000190 <memchr>
 800b6c2:	9a04      	ldr	r2, [sp, #16]
 800b6c4:	b9d8      	cbnz	r0, 800b6fe <_svfiprintf_r+0xe6>
 800b6c6:	06d0      	lsls	r0, r2, #27
 800b6c8:	bf44      	itt	mi
 800b6ca:	2320      	movmi	r3, #32
 800b6cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6d0:	0711      	lsls	r1, r2, #28
 800b6d2:	bf44      	itt	mi
 800b6d4:	232b      	movmi	r3, #43	; 0x2b
 800b6d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6da:	f89a 3000 	ldrb.w	r3, [sl]
 800b6de:	2b2a      	cmp	r3, #42	; 0x2a
 800b6e0:	d015      	beq.n	800b70e <_svfiprintf_r+0xf6>
 800b6e2:	9a07      	ldr	r2, [sp, #28]
 800b6e4:	4654      	mov	r4, sl
 800b6e6:	2000      	movs	r0, #0
 800b6e8:	f04f 0c0a 	mov.w	ip, #10
 800b6ec:	4621      	mov	r1, r4
 800b6ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6f2:	3b30      	subs	r3, #48	; 0x30
 800b6f4:	2b09      	cmp	r3, #9
 800b6f6:	d94e      	bls.n	800b796 <_svfiprintf_r+0x17e>
 800b6f8:	b1b0      	cbz	r0, 800b728 <_svfiprintf_r+0x110>
 800b6fa:	9207      	str	r2, [sp, #28]
 800b6fc:	e014      	b.n	800b728 <_svfiprintf_r+0x110>
 800b6fe:	eba0 0308 	sub.w	r3, r0, r8
 800b702:	fa09 f303 	lsl.w	r3, r9, r3
 800b706:	4313      	orrs	r3, r2
 800b708:	9304      	str	r3, [sp, #16]
 800b70a:	46a2      	mov	sl, r4
 800b70c:	e7d2      	b.n	800b6b4 <_svfiprintf_r+0x9c>
 800b70e:	9b03      	ldr	r3, [sp, #12]
 800b710:	1d19      	adds	r1, r3, #4
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	9103      	str	r1, [sp, #12]
 800b716:	2b00      	cmp	r3, #0
 800b718:	bfbb      	ittet	lt
 800b71a:	425b      	neglt	r3, r3
 800b71c:	f042 0202 	orrlt.w	r2, r2, #2
 800b720:	9307      	strge	r3, [sp, #28]
 800b722:	9307      	strlt	r3, [sp, #28]
 800b724:	bfb8      	it	lt
 800b726:	9204      	strlt	r2, [sp, #16]
 800b728:	7823      	ldrb	r3, [r4, #0]
 800b72a:	2b2e      	cmp	r3, #46	; 0x2e
 800b72c:	d10c      	bne.n	800b748 <_svfiprintf_r+0x130>
 800b72e:	7863      	ldrb	r3, [r4, #1]
 800b730:	2b2a      	cmp	r3, #42	; 0x2a
 800b732:	d135      	bne.n	800b7a0 <_svfiprintf_r+0x188>
 800b734:	9b03      	ldr	r3, [sp, #12]
 800b736:	1d1a      	adds	r2, r3, #4
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	9203      	str	r2, [sp, #12]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	bfb8      	it	lt
 800b740:	f04f 33ff 	movlt.w	r3, #4294967295
 800b744:	3402      	adds	r4, #2
 800b746:	9305      	str	r3, [sp, #20]
 800b748:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b814 <_svfiprintf_r+0x1fc>
 800b74c:	7821      	ldrb	r1, [r4, #0]
 800b74e:	2203      	movs	r2, #3
 800b750:	4650      	mov	r0, sl
 800b752:	f7f4 fd1d 	bl	8000190 <memchr>
 800b756:	b140      	cbz	r0, 800b76a <_svfiprintf_r+0x152>
 800b758:	2340      	movs	r3, #64	; 0x40
 800b75a:	eba0 000a 	sub.w	r0, r0, sl
 800b75e:	fa03 f000 	lsl.w	r0, r3, r0
 800b762:	9b04      	ldr	r3, [sp, #16]
 800b764:	4303      	orrs	r3, r0
 800b766:	3401      	adds	r4, #1
 800b768:	9304      	str	r3, [sp, #16]
 800b76a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b76e:	4826      	ldr	r0, [pc, #152]	; (800b808 <_svfiprintf_r+0x1f0>)
 800b770:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b774:	2206      	movs	r2, #6
 800b776:	f7f4 fd0b 	bl	8000190 <memchr>
 800b77a:	2800      	cmp	r0, #0
 800b77c:	d038      	beq.n	800b7f0 <_svfiprintf_r+0x1d8>
 800b77e:	4b23      	ldr	r3, [pc, #140]	; (800b80c <_svfiprintf_r+0x1f4>)
 800b780:	bb1b      	cbnz	r3, 800b7ca <_svfiprintf_r+0x1b2>
 800b782:	9b03      	ldr	r3, [sp, #12]
 800b784:	3307      	adds	r3, #7
 800b786:	f023 0307 	bic.w	r3, r3, #7
 800b78a:	3308      	adds	r3, #8
 800b78c:	9303      	str	r3, [sp, #12]
 800b78e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b790:	4433      	add	r3, r6
 800b792:	9309      	str	r3, [sp, #36]	; 0x24
 800b794:	e767      	b.n	800b666 <_svfiprintf_r+0x4e>
 800b796:	fb0c 3202 	mla	r2, ip, r2, r3
 800b79a:	460c      	mov	r4, r1
 800b79c:	2001      	movs	r0, #1
 800b79e:	e7a5      	b.n	800b6ec <_svfiprintf_r+0xd4>
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	3401      	adds	r4, #1
 800b7a4:	9305      	str	r3, [sp, #20]
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	f04f 0c0a 	mov.w	ip, #10
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7b2:	3a30      	subs	r2, #48	; 0x30
 800b7b4:	2a09      	cmp	r2, #9
 800b7b6:	d903      	bls.n	800b7c0 <_svfiprintf_r+0x1a8>
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d0c5      	beq.n	800b748 <_svfiprintf_r+0x130>
 800b7bc:	9105      	str	r1, [sp, #20]
 800b7be:	e7c3      	b.n	800b748 <_svfiprintf_r+0x130>
 800b7c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7c4:	4604      	mov	r4, r0
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	e7f0      	b.n	800b7ac <_svfiprintf_r+0x194>
 800b7ca:	ab03      	add	r3, sp, #12
 800b7cc:	9300      	str	r3, [sp, #0]
 800b7ce:	462a      	mov	r2, r5
 800b7d0:	4b0f      	ldr	r3, [pc, #60]	; (800b810 <_svfiprintf_r+0x1f8>)
 800b7d2:	a904      	add	r1, sp, #16
 800b7d4:	4638      	mov	r0, r7
 800b7d6:	f7fc fa55 	bl	8007c84 <_printf_float>
 800b7da:	1c42      	adds	r2, r0, #1
 800b7dc:	4606      	mov	r6, r0
 800b7de:	d1d6      	bne.n	800b78e <_svfiprintf_r+0x176>
 800b7e0:	89ab      	ldrh	r3, [r5, #12]
 800b7e2:	065b      	lsls	r3, r3, #25
 800b7e4:	f53f af2c 	bmi.w	800b640 <_svfiprintf_r+0x28>
 800b7e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7ea:	b01d      	add	sp, #116	; 0x74
 800b7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f0:	ab03      	add	r3, sp, #12
 800b7f2:	9300      	str	r3, [sp, #0]
 800b7f4:	462a      	mov	r2, r5
 800b7f6:	4b06      	ldr	r3, [pc, #24]	; (800b810 <_svfiprintf_r+0x1f8>)
 800b7f8:	a904      	add	r1, sp, #16
 800b7fa:	4638      	mov	r0, r7
 800b7fc:	f7fc fce6 	bl	80081cc <_printf_i>
 800b800:	e7eb      	b.n	800b7da <_svfiprintf_r+0x1c2>
 800b802:	bf00      	nop
 800b804:	0800e254 	.word	0x0800e254
 800b808:	0800e25e 	.word	0x0800e25e
 800b80c:	08007c85 	.word	0x08007c85
 800b810:	0800b561 	.word	0x0800b561
 800b814:	0800e25a 	.word	0x0800e25a

0800b818 <nan>:
 800b818:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b820 <nan+0x8>
 800b81c:	4770      	bx	lr
 800b81e:	bf00      	nop
 800b820:	00000000 	.word	0x00000000
 800b824:	7ff80000 	.word	0x7ff80000

0800b828 <_sbrk_r>:
 800b828:	b538      	push	{r3, r4, r5, lr}
 800b82a:	4d06      	ldr	r5, [pc, #24]	; (800b844 <_sbrk_r+0x1c>)
 800b82c:	2300      	movs	r3, #0
 800b82e:	4604      	mov	r4, r0
 800b830:	4608      	mov	r0, r1
 800b832:	602b      	str	r3, [r5, #0]
 800b834:	f7f7 fc20 	bl	8003078 <_sbrk>
 800b838:	1c43      	adds	r3, r0, #1
 800b83a:	d102      	bne.n	800b842 <_sbrk_r+0x1a>
 800b83c:	682b      	ldr	r3, [r5, #0]
 800b83e:	b103      	cbz	r3, 800b842 <_sbrk_r+0x1a>
 800b840:	6023      	str	r3, [r4, #0]
 800b842:	bd38      	pop	{r3, r4, r5, pc}
 800b844:	20004784 	.word	0x20004784

0800b848 <strncmp>:
 800b848:	b510      	push	{r4, lr}
 800b84a:	b17a      	cbz	r2, 800b86c <strncmp+0x24>
 800b84c:	4603      	mov	r3, r0
 800b84e:	3901      	subs	r1, #1
 800b850:	1884      	adds	r4, r0, r2
 800b852:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b856:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b85a:	4290      	cmp	r0, r2
 800b85c:	d101      	bne.n	800b862 <strncmp+0x1a>
 800b85e:	42a3      	cmp	r3, r4
 800b860:	d101      	bne.n	800b866 <strncmp+0x1e>
 800b862:	1a80      	subs	r0, r0, r2
 800b864:	bd10      	pop	{r4, pc}
 800b866:	2800      	cmp	r0, #0
 800b868:	d1f3      	bne.n	800b852 <strncmp+0xa>
 800b86a:	e7fa      	b.n	800b862 <strncmp+0x1a>
 800b86c:	4610      	mov	r0, r2
 800b86e:	e7f9      	b.n	800b864 <strncmp+0x1c>

0800b870 <__ascii_wctomb>:
 800b870:	b149      	cbz	r1, 800b886 <__ascii_wctomb+0x16>
 800b872:	2aff      	cmp	r2, #255	; 0xff
 800b874:	bf85      	ittet	hi
 800b876:	238a      	movhi	r3, #138	; 0x8a
 800b878:	6003      	strhi	r3, [r0, #0]
 800b87a:	700a      	strbls	r2, [r1, #0]
 800b87c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b880:	bf98      	it	ls
 800b882:	2001      	movls	r0, #1
 800b884:	4770      	bx	lr
 800b886:	4608      	mov	r0, r1
 800b888:	4770      	bx	lr
	...

0800b88c <__assert_func>:
 800b88c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b88e:	4614      	mov	r4, r2
 800b890:	461a      	mov	r2, r3
 800b892:	4b09      	ldr	r3, [pc, #36]	; (800b8b8 <__assert_func+0x2c>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	4605      	mov	r5, r0
 800b898:	68d8      	ldr	r0, [r3, #12]
 800b89a:	b14c      	cbz	r4, 800b8b0 <__assert_func+0x24>
 800b89c:	4b07      	ldr	r3, [pc, #28]	; (800b8bc <__assert_func+0x30>)
 800b89e:	9100      	str	r1, [sp, #0]
 800b8a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b8a4:	4906      	ldr	r1, [pc, #24]	; (800b8c0 <__assert_func+0x34>)
 800b8a6:	462b      	mov	r3, r5
 800b8a8:	f000 f80e 	bl	800b8c8 <fiprintf>
 800b8ac:	f000 fa72 	bl	800bd94 <abort>
 800b8b0:	4b04      	ldr	r3, [pc, #16]	; (800b8c4 <__assert_func+0x38>)
 800b8b2:	461c      	mov	r4, r3
 800b8b4:	e7f3      	b.n	800b89e <__assert_func+0x12>
 800b8b6:	bf00      	nop
 800b8b8:	20000108 	.word	0x20000108
 800b8bc:	0800e265 	.word	0x0800e265
 800b8c0:	0800e272 	.word	0x0800e272
 800b8c4:	0800e2a0 	.word	0x0800e2a0

0800b8c8 <fiprintf>:
 800b8c8:	b40e      	push	{r1, r2, r3}
 800b8ca:	b503      	push	{r0, r1, lr}
 800b8cc:	4601      	mov	r1, r0
 800b8ce:	ab03      	add	r3, sp, #12
 800b8d0:	4805      	ldr	r0, [pc, #20]	; (800b8e8 <fiprintf+0x20>)
 800b8d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8d6:	6800      	ldr	r0, [r0, #0]
 800b8d8:	9301      	str	r3, [sp, #4]
 800b8da:	f000 f86b 	bl	800b9b4 <_vfiprintf_r>
 800b8de:	b002      	add	sp, #8
 800b8e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8e4:	b003      	add	sp, #12
 800b8e6:	4770      	bx	lr
 800b8e8:	20000108 	.word	0x20000108

0800b8ec <__malloc_lock>:
 800b8ec:	4801      	ldr	r0, [pc, #4]	; (800b8f4 <__malloc_lock+0x8>)
 800b8ee:	f000 bc11 	b.w	800c114 <__retarget_lock_acquire_recursive>
 800b8f2:	bf00      	nop
 800b8f4:	20004788 	.word	0x20004788

0800b8f8 <__malloc_unlock>:
 800b8f8:	4801      	ldr	r0, [pc, #4]	; (800b900 <__malloc_unlock+0x8>)
 800b8fa:	f000 bc0c 	b.w	800c116 <__retarget_lock_release_recursive>
 800b8fe:	bf00      	nop
 800b900:	20004788 	.word	0x20004788

0800b904 <_realloc_r>:
 800b904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b908:	4680      	mov	r8, r0
 800b90a:	4614      	mov	r4, r2
 800b90c:	460e      	mov	r6, r1
 800b90e:	b921      	cbnz	r1, 800b91a <_realloc_r+0x16>
 800b910:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b914:	4611      	mov	r1, r2
 800b916:	f7ff bdaf 	b.w	800b478 <_malloc_r>
 800b91a:	b92a      	cbnz	r2, 800b928 <_realloc_r+0x24>
 800b91c:	f7ff fd40 	bl	800b3a0 <_free_r>
 800b920:	4625      	mov	r5, r4
 800b922:	4628      	mov	r0, r5
 800b924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b928:	f000 fc5c 	bl	800c1e4 <_malloc_usable_size_r>
 800b92c:	4284      	cmp	r4, r0
 800b92e:	4607      	mov	r7, r0
 800b930:	d802      	bhi.n	800b938 <_realloc_r+0x34>
 800b932:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b936:	d812      	bhi.n	800b95e <_realloc_r+0x5a>
 800b938:	4621      	mov	r1, r4
 800b93a:	4640      	mov	r0, r8
 800b93c:	f7ff fd9c 	bl	800b478 <_malloc_r>
 800b940:	4605      	mov	r5, r0
 800b942:	2800      	cmp	r0, #0
 800b944:	d0ed      	beq.n	800b922 <_realloc_r+0x1e>
 800b946:	42bc      	cmp	r4, r7
 800b948:	4622      	mov	r2, r4
 800b94a:	4631      	mov	r1, r6
 800b94c:	bf28      	it	cs
 800b94e:	463a      	movcs	r2, r7
 800b950:	f7fc f8c8 	bl	8007ae4 <memcpy>
 800b954:	4631      	mov	r1, r6
 800b956:	4640      	mov	r0, r8
 800b958:	f7ff fd22 	bl	800b3a0 <_free_r>
 800b95c:	e7e1      	b.n	800b922 <_realloc_r+0x1e>
 800b95e:	4635      	mov	r5, r6
 800b960:	e7df      	b.n	800b922 <_realloc_r+0x1e>

0800b962 <__sfputc_r>:
 800b962:	6893      	ldr	r3, [r2, #8]
 800b964:	3b01      	subs	r3, #1
 800b966:	2b00      	cmp	r3, #0
 800b968:	b410      	push	{r4}
 800b96a:	6093      	str	r3, [r2, #8]
 800b96c:	da08      	bge.n	800b980 <__sfputc_r+0x1e>
 800b96e:	6994      	ldr	r4, [r2, #24]
 800b970:	42a3      	cmp	r3, r4
 800b972:	db01      	blt.n	800b978 <__sfputc_r+0x16>
 800b974:	290a      	cmp	r1, #10
 800b976:	d103      	bne.n	800b980 <__sfputc_r+0x1e>
 800b978:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b97c:	f000 b94a 	b.w	800bc14 <__swbuf_r>
 800b980:	6813      	ldr	r3, [r2, #0]
 800b982:	1c58      	adds	r0, r3, #1
 800b984:	6010      	str	r0, [r2, #0]
 800b986:	7019      	strb	r1, [r3, #0]
 800b988:	4608      	mov	r0, r1
 800b98a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b98e:	4770      	bx	lr

0800b990 <__sfputs_r>:
 800b990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b992:	4606      	mov	r6, r0
 800b994:	460f      	mov	r7, r1
 800b996:	4614      	mov	r4, r2
 800b998:	18d5      	adds	r5, r2, r3
 800b99a:	42ac      	cmp	r4, r5
 800b99c:	d101      	bne.n	800b9a2 <__sfputs_r+0x12>
 800b99e:	2000      	movs	r0, #0
 800b9a0:	e007      	b.n	800b9b2 <__sfputs_r+0x22>
 800b9a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9a6:	463a      	mov	r2, r7
 800b9a8:	4630      	mov	r0, r6
 800b9aa:	f7ff ffda 	bl	800b962 <__sfputc_r>
 800b9ae:	1c43      	adds	r3, r0, #1
 800b9b0:	d1f3      	bne.n	800b99a <__sfputs_r+0xa>
 800b9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b9b4 <_vfiprintf_r>:
 800b9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9b8:	460d      	mov	r5, r1
 800b9ba:	b09d      	sub	sp, #116	; 0x74
 800b9bc:	4614      	mov	r4, r2
 800b9be:	4698      	mov	r8, r3
 800b9c0:	4606      	mov	r6, r0
 800b9c2:	b118      	cbz	r0, 800b9cc <_vfiprintf_r+0x18>
 800b9c4:	6983      	ldr	r3, [r0, #24]
 800b9c6:	b90b      	cbnz	r3, 800b9cc <_vfiprintf_r+0x18>
 800b9c8:	f000 fb06 	bl	800bfd8 <__sinit>
 800b9cc:	4b89      	ldr	r3, [pc, #548]	; (800bbf4 <_vfiprintf_r+0x240>)
 800b9ce:	429d      	cmp	r5, r3
 800b9d0:	d11b      	bne.n	800ba0a <_vfiprintf_r+0x56>
 800b9d2:	6875      	ldr	r5, [r6, #4]
 800b9d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9d6:	07d9      	lsls	r1, r3, #31
 800b9d8:	d405      	bmi.n	800b9e6 <_vfiprintf_r+0x32>
 800b9da:	89ab      	ldrh	r3, [r5, #12]
 800b9dc:	059a      	lsls	r2, r3, #22
 800b9de:	d402      	bmi.n	800b9e6 <_vfiprintf_r+0x32>
 800b9e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9e2:	f000 fb97 	bl	800c114 <__retarget_lock_acquire_recursive>
 800b9e6:	89ab      	ldrh	r3, [r5, #12]
 800b9e8:	071b      	lsls	r3, r3, #28
 800b9ea:	d501      	bpl.n	800b9f0 <_vfiprintf_r+0x3c>
 800b9ec:	692b      	ldr	r3, [r5, #16]
 800b9ee:	b9eb      	cbnz	r3, 800ba2c <_vfiprintf_r+0x78>
 800b9f0:	4629      	mov	r1, r5
 800b9f2:	4630      	mov	r0, r6
 800b9f4:	f000 f960 	bl	800bcb8 <__swsetup_r>
 800b9f8:	b1c0      	cbz	r0, 800ba2c <_vfiprintf_r+0x78>
 800b9fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9fc:	07dc      	lsls	r4, r3, #31
 800b9fe:	d50e      	bpl.n	800ba1e <_vfiprintf_r+0x6a>
 800ba00:	f04f 30ff 	mov.w	r0, #4294967295
 800ba04:	b01d      	add	sp, #116	; 0x74
 800ba06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba0a:	4b7b      	ldr	r3, [pc, #492]	; (800bbf8 <_vfiprintf_r+0x244>)
 800ba0c:	429d      	cmp	r5, r3
 800ba0e:	d101      	bne.n	800ba14 <_vfiprintf_r+0x60>
 800ba10:	68b5      	ldr	r5, [r6, #8]
 800ba12:	e7df      	b.n	800b9d4 <_vfiprintf_r+0x20>
 800ba14:	4b79      	ldr	r3, [pc, #484]	; (800bbfc <_vfiprintf_r+0x248>)
 800ba16:	429d      	cmp	r5, r3
 800ba18:	bf08      	it	eq
 800ba1a:	68f5      	ldreq	r5, [r6, #12]
 800ba1c:	e7da      	b.n	800b9d4 <_vfiprintf_r+0x20>
 800ba1e:	89ab      	ldrh	r3, [r5, #12]
 800ba20:	0598      	lsls	r0, r3, #22
 800ba22:	d4ed      	bmi.n	800ba00 <_vfiprintf_r+0x4c>
 800ba24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba26:	f000 fb76 	bl	800c116 <__retarget_lock_release_recursive>
 800ba2a:	e7e9      	b.n	800ba00 <_vfiprintf_r+0x4c>
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	9309      	str	r3, [sp, #36]	; 0x24
 800ba30:	2320      	movs	r3, #32
 800ba32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba36:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba3a:	2330      	movs	r3, #48	; 0x30
 800ba3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bc00 <_vfiprintf_r+0x24c>
 800ba40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba44:	f04f 0901 	mov.w	r9, #1
 800ba48:	4623      	mov	r3, r4
 800ba4a:	469a      	mov	sl, r3
 800ba4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba50:	b10a      	cbz	r2, 800ba56 <_vfiprintf_r+0xa2>
 800ba52:	2a25      	cmp	r2, #37	; 0x25
 800ba54:	d1f9      	bne.n	800ba4a <_vfiprintf_r+0x96>
 800ba56:	ebba 0b04 	subs.w	fp, sl, r4
 800ba5a:	d00b      	beq.n	800ba74 <_vfiprintf_r+0xc0>
 800ba5c:	465b      	mov	r3, fp
 800ba5e:	4622      	mov	r2, r4
 800ba60:	4629      	mov	r1, r5
 800ba62:	4630      	mov	r0, r6
 800ba64:	f7ff ff94 	bl	800b990 <__sfputs_r>
 800ba68:	3001      	adds	r0, #1
 800ba6a:	f000 80aa 	beq.w	800bbc2 <_vfiprintf_r+0x20e>
 800ba6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba70:	445a      	add	r2, fp
 800ba72:	9209      	str	r2, [sp, #36]	; 0x24
 800ba74:	f89a 3000 	ldrb.w	r3, [sl]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	f000 80a2 	beq.w	800bbc2 <_vfiprintf_r+0x20e>
 800ba7e:	2300      	movs	r3, #0
 800ba80:	f04f 32ff 	mov.w	r2, #4294967295
 800ba84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba88:	f10a 0a01 	add.w	sl, sl, #1
 800ba8c:	9304      	str	r3, [sp, #16]
 800ba8e:	9307      	str	r3, [sp, #28]
 800ba90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba94:	931a      	str	r3, [sp, #104]	; 0x68
 800ba96:	4654      	mov	r4, sl
 800ba98:	2205      	movs	r2, #5
 800ba9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba9e:	4858      	ldr	r0, [pc, #352]	; (800bc00 <_vfiprintf_r+0x24c>)
 800baa0:	f7f4 fb76 	bl	8000190 <memchr>
 800baa4:	9a04      	ldr	r2, [sp, #16]
 800baa6:	b9d8      	cbnz	r0, 800bae0 <_vfiprintf_r+0x12c>
 800baa8:	06d1      	lsls	r1, r2, #27
 800baaa:	bf44      	itt	mi
 800baac:	2320      	movmi	r3, #32
 800baae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bab2:	0713      	lsls	r3, r2, #28
 800bab4:	bf44      	itt	mi
 800bab6:	232b      	movmi	r3, #43	; 0x2b
 800bab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800babc:	f89a 3000 	ldrb.w	r3, [sl]
 800bac0:	2b2a      	cmp	r3, #42	; 0x2a
 800bac2:	d015      	beq.n	800baf0 <_vfiprintf_r+0x13c>
 800bac4:	9a07      	ldr	r2, [sp, #28]
 800bac6:	4654      	mov	r4, sl
 800bac8:	2000      	movs	r0, #0
 800baca:	f04f 0c0a 	mov.w	ip, #10
 800bace:	4621      	mov	r1, r4
 800bad0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bad4:	3b30      	subs	r3, #48	; 0x30
 800bad6:	2b09      	cmp	r3, #9
 800bad8:	d94e      	bls.n	800bb78 <_vfiprintf_r+0x1c4>
 800bada:	b1b0      	cbz	r0, 800bb0a <_vfiprintf_r+0x156>
 800badc:	9207      	str	r2, [sp, #28]
 800bade:	e014      	b.n	800bb0a <_vfiprintf_r+0x156>
 800bae0:	eba0 0308 	sub.w	r3, r0, r8
 800bae4:	fa09 f303 	lsl.w	r3, r9, r3
 800bae8:	4313      	orrs	r3, r2
 800baea:	9304      	str	r3, [sp, #16]
 800baec:	46a2      	mov	sl, r4
 800baee:	e7d2      	b.n	800ba96 <_vfiprintf_r+0xe2>
 800baf0:	9b03      	ldr	r3, [sp, #12]
 800baf2:	1d19      	adds	r1, r3, #4
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	9103      	str	r1, [sp, #12]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	bfbb      	ittet	lt
 800bafc:	425b      	neglt	r3, r3
 800bafe:	f042 0202 	orrlt.w	r2, r2, #2
 800bb02:	9307      	strge	r3, [sp, #28]
 800bb04:	9307      	strlt	r3, [sp, #28]
 800bb06:	bfb8      	it	lt
 800bb08:	9204      	strlt	r2, [sp, #16]
 800bb0a:	7823      	ldrb	r3, [r4, #0]
 800bb0c:	2b2e      	cmp	r3, #46	; 0x2e
 800bb0e:	d10c      	bne.n	800bb2a <_vfiprintf_r+0x176>
 800bb10:	7863      	ldrb	r3, [r4, #1]
 800bb12:	2b2a      	cmp	r3, #42	; 0x2a
 800bb14:	d135      	bne.n	800bb82 <_vfiprintf_r+0x1ce>
 800bb16:	9b03      	ldr	r3, [sp, #12]
 800bb18:	1d1a      	adds	r2, r3, #4
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	9203      	str	r2, [sp, #12]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	bfb8      	it	lt
 800bb22:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb26:	3402      	adds	r4, #2
 800bb28:	9305      	str	r3, [sp, #20]
 800bb2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bc10 <_vfiprintf_r+0x25c>
 800bb2e:	7821      	ldrb	r1, [r4, #0]
 800bb30:	2203      	movs	r2, #3
 800bb32:	4650      	mov	r0, sl
 800bb34:	f7f4 fb2c 	bl	8000190 <memchr>
 800bb38:	b140      	cbz	r0, 800bb4c <_vfiprintf_r+0x198>
 800bb3a:	2340      	movs	r3, #64	; 0x40
 800bb3c:	eba0 000a 	sub.w	r0, r0, sl
 800bb40:	fa03 f000 	lsl.w	r0, r3, r0
 800bb44:	9b04      	ldr	r3, [sp, #16]
 800bb46:	4303      	orrs	r3, r0
 800bb48:	3401      	adds	r4, #1
 800bb4a:	9304      	str	r3, [sp, #16]
 800bb4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb50:	482c      	ldr	r0, [pc, #176]	; (800bc04 <_vfiprintf_r+0x250>)
 800bb52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb56:	2206      	movs	r2, #6
 800bb58:	f7f4 fb1a 	bl	8000190 <memchr>
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	d03f      	beq.n	800bbe0 <_vfiprintf_r+0x22c>
 800bb60:	4b29      	ldr	r3, [pc, #164]	; (800bc08 <_vfiprintf_r+0x254>)
 800bb62:	bb1b      	cbnz	r3, 800bbac <_vfiprintf_r+0x1f8>
 800bb64:	9b03      	ldr	r3, [sp, #12]
 800bb66:	3307      	adds	r3, #7
 800bb68:	f023 0307 	bic.w	r3, r3, #7
 800bb6c:	3308      	adds	r3, #8
 800bb6e:	9303      	str	r3, [sp, #12]
 800bb70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb72:	443b      	add	r3, r7
 800bb74:	9309      	str	r3, [sp, #36]	; 0x24
 800bb76:	e767      	b.n	800ba48 <_vfiprintf_r+0x94>
 800bb78:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb7c:	460c      	mov	r4, r1
 800bb7e:	2001      	movs	r0, #1
 800bb80:	e7a5      	b.n	800bace <_vfiprintf_r+0x11a>
 800bb82:	2300      	movs	r3, #0
 800bb84:	3401      	adds	r4, #1
 800bb86:	9305      	str	r3, [sp, #20]
 800bb88:	4619      	mov	r1, r3
 800bb8a:	f04f 0c0a 	mov.w	ip, #10
 800bb8e:	4620      	mov	r0, r4
 800bb90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb94:	3a30      	subs	r2, #48	; 0x30
 800bb96:	2a09      	cmp	r2, #9
 800bb98:	d903      	bls.n	800bba2 <_vfiprintf_r+0x1ee>
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d0c5      	beq.n	800bb2a <_vfiprintf_r+0x176>
 800bb9e:	9105      	str	r1, [sp, #20]
 800bba0:	e7c3      	b.n	800bb2a <_vfiprintf_r+0x176>
 800bba2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bba6:	4604      	mov	r4, r0
 800bba8:	2301      	movs	r3, #1
 800bbaa:	e7f0      	b.n	800bb8e <_vfiprintf_r+0x1da>
 800bbac:	ab03      	add	r3, sp, #12
 800bbae:	9300      	str	r3, [sp, #0]
 800bbb0:	462a      	mov	r2, r5
 800bbb2:	4b16      	ldr	r3, [pc, #88]	; (800bc0c <_vfiprintf_r+0x258>)
 800bbb4:	a904      	add	r1, sp, #16
 800bbb6:	4630      	mov	r0, r6
 800bbb8:	f7fc f864 	bl	8007c84 <_printf_float>
 800bbbc:	4607      	mov	r7, r0
 800bbbe:	1c78      	adds	r0, r7, #1
 800bbc0:	d1d6      	bne.n	800bb70 <_vfiprintf_r+0x1bc>
 800bbc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbc4:	07d9      	lsls	r1, r3, #31
 800bbc6:	d405      	bmi.n	800bbd4 <_vfiprintf_r+0x220>
 800bbc8:	89ab      	ldrh	r3, [r5, #12]
 800bbca:	059a      	lsls	r2, r3, #22
 800bbcc:	d402      	bmi.n	800bbd4 <_vfiprintf_r+0x220>
 800bbce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbd0:	f000 faa1 	bl	800c116 <__retarget_lock_release_recursive>
 800bbd4:	89ab      	ldrh	r3, [r5, #12]
 800bbd6:	065b      	lsls	r3, r3, #25
 800bbd8:	f53f af12 	bmi.w	800ba00 <_vfiprintf_r+0x4c>
 800bbdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbde:	e711      	b.n	800ba04 <_vfiprintf_r+0x50>
 800bbe0:	ab03      	add	r3, sp, #12
 800bbe2:	9300      	str	r3, [sp, #0]
 800bbe4:	462a      	mov	r2, r5
 800bbe6:	4b09      	ldr	r3, [pc, #36]	; (800bc0c <_vfiprintf_r+0x258>)
 800bbe8:	a904      	add	r1, sp, #16
 800bbea:	4630      	mov	r0, r6
 800bbec:	f7fc faee 	bl	80081cc <_printf_i>
 800bbf0:	e7e4      	b.n	800bbbc <_vfiprintf_r+0x208>
 800bbf2:	bf00      	nop
 800bbf4:	0800e2c4 	.word	0x0800e2c4
 800bbf8:	0800e2e4 	.word	0x0800e2e4
 800bbfc:	0800e2a4 	.word	0x0800e2a4
 800bc00:	0800e254 	.word	0x0800e254
 800bc04:	0800e25e 	.word	0x0800e25e
 800bc08:	08007c85 	.word	0x08007c85
 800bc0c:	0800b991 	.word	0x0800b991
 800bc10:	0800e25a 	.word	0x0800e25a

0800bc14 <__swbuf_r>:
 800bc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc16:	460e      	mov	r6, r1
 800bc18:	4614      	mov	r4, r2
 800bc1a:	4605      	mov	r5, r0
 800bc1c:	b118      	cbz	r0, 800bc26 <__swbuf_r+0x12>
 800bc1e:	6983      	ldr	r3, [r0, #24]
 800bc20:	b90b      	cbnz	r3, 800bc26 <__swbuf_r+0x12>
 800bc22:	f000 f9d9 	bl	800bfd8 <__sinit>
 800bc26:	4b21      	ldr	r3, [pc, #132]	; (800bcac <__swbuf_r+0x98>)
 800bc28:	429c      	cmp	r4, r3
 800bc2a:	d12b      	bne.n	800bc84 <__swbuf_r+0x70>
 800bc2c:	686c      	ldr	r4, [r5, #4]
 800bc2e:	69a3      	ldr	r3, [r4, #24]
 800bc30:	60a3      	str	r3, [r4, #8]
 800bc32:	89a3      	ldrh	r3, [r4, #12]
 800bc34:	071a      	lsls	r2, r3, #28
 800bc36:	d52f      	bpl.n	800bc98 <__swbuf_r+0x84>
 800bc38:	6923      	ldr	r3, [r4, #16]
 800bc3a:	b36b      	cbz	r3, 800bc98 <__swbuf_r+0x84>
 800bc3c:	6923      	ldr	r3, [r4, #16]
 800bc3e:	6820      	ldr	r0, [r4, #0]
 800bc40:	1ac0      	subs	r0, r0, r3
 800bc42:	6963      	ldr	r3, [r4, #20]
 800bc44:	b2f6      	uxtb	r6, r6
 800bc46:	4283      	cmp	r3, r0
 800bc48:	4637      	mov	r7, r6
 800bc4a:	dc04      	bgt.n	800bc56 <__swbuf_r+0x42>
 800bc4c:	4621      	mov	r1, r4
 800bc4e:	4628      	mov	r0, r5
 800bc50:	f000 f92e 	bl	800beb0 <_fflush_r>
 800bc54:	bb30      	cbnz	r0, 800bca4 <__swbuf_r+0x90>
 800bc56:	68a3      	ldr	r3, [r4, #8]
 800bc58:	3b01      	subs	r3, #1
 800bc5a:	60a3      	str	r3, [r4, #8]
 800bc5c:	6823      	ldr	r3, [r4, #0]
 800bc5e:	1c5a      	adds	r2, r3, #1
 800bc60:	6022      	str	r2, [r4, #0]
 800bc62:	701e      	strb	r6, [r3, #0]
 800bc64:	6963      	ldr	r3, [r4, #20]
 800bc66:	3001      	adds	r0, #1
 800bc68:	4283      	cmp	r3, r0
 800bc6a:	d004      	beq.n	800bc76 <__swbuf_r+0x62>
 800bc6c:	89a3      	ldrh	r3, [r4, #12]
 800bc6e:	07db      	lsls	r3, r3, #31
 800bc70:	d506      	bpl.n	800bc80 <__swbuf_r+0x6c>
 800bc72:	2e0a      	cmp	r6, #10
 800bc74:	d104      	bne.n	800bc80 <__swbuf_r+0x6c>
 800bc76:	4621      	mov	r1, r4
 800bc78:	4628      	mov	r0, r5
 800bc7a:	f000 f919 	bl	800beb0 <_fflush_r>
 800bc7e:	b988      	cbnz	r0, 800bca4 <__swbuf_r+0x90>
 800bc80:	4638      	mov	r0, r7
 800bc82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc84:	4b0a      	ldr	r3, [pc, #40]	; (800bcb0 <__swbuf_r+0x9c>)
 800bc86:	429c      	cmp	r4, r3
 800bc88:	d101      	bne.n	800bc8e <__swbuf_r+0x7a>
 800bc8a:	68ac      	ldr	r4, [r5, #8]
 800bc8c:	e7cf      	b.n	800bc2e <__swbuf_r+0x1a>
 800bc8e:	4b09      	ldr	r3, [pc, #36]	; (800bcb4 <__swbuf_r+0xa0>)
 800bc90:	429c      	cmp	r4, r3
 800bc92:	bf08      	it	eq
 800bc94:	68ec      	ldreq	r4, [r5, #12]
 800bc96:	e7ca      	b.n	800bc2e <__swbuf_r+0x1a>
 800bc98:	4621      	mov	r1, r4
 800bc9a:	4628      	mov	r0, r5
 800bc9c:	f000 f80c 	bl	800bcb8 <__swsetup_r>
 800bca0:	2800      	cmp	r0, #0
 800bca2:	d0cb      	beq.n	800bc3c <__swbuf_r+0x28>
 800bca4:	f04f 37ff 	mov.w	r7, #4294967295
 800bca8:	e7ea      	b.n	800bc80 <__swbuf_r+0x6c>
 800bcaa:	bf00      	nop
 800bcac:	0800e2c4 	.word	0x0800e2c4
 800bcb0:	0800e2e4 	.word	0x0800e2e4
 800bcb4:	0800e2a4 	.word	0x0800e2a4

0800bcb8 <__swsetup_r>:
 800bcb8:	4b32      	ldr	r3, [pc, #200]	; (800bd84 <__swsetup_r+0xcc>)
 800bcba:	b570      	push	{r4, r5, r6, lr}
 800bcbc:	681d      	ldr	r5, [r3, #0]
 800bcbe:	4606      	mov	r6, r0
 800bcc0:	460c      	mov	r4, r1
 800bcc2:	b125      	cbz	r5, 800bcce <__swsetup_r+0x16>
 800bcc4:	69ab      	ldr	r3, [r5, #24]
 800bcc6:	b913      	cbnz	r3, 800bcce <__swsetup_r+0x16>
 800bcc8:	4628      	mov	r0, r5
 800bcca:	f000 f985 	bl	800bfd8 <__sinit>
 800bcce:	4b2e      	ldr	r3, [pc, #184]	; (800bd88 <__swsetup_r+0xd0>)
 800bcd0:	429c      	cmp	r4, r3
 800bcd2:	d10f      	bne.n	800bcf4 <__swsetup_r+0x3c>
 800bcd4:	686c      	ldr	r4, [r5, #4]
 800bcd6:	89a3      	ldrh	r3, [r4, #12]
 800bcd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bcdc:	0719      	lsls	r1, r3, #28
 800bcde:	d42c      	bmi.n	800bd3a <__swsetup_r+0x82>
 800bce0:	06dd      	lsls	r5, r3, #27
 800bce2:	d411      	bmi.n	800bd08 <__swsetup_r+0x50>
 800bce4:	2309      	movs	r3, #9
 800bce6:	6033      	str	r3, [r6, #0]
 800bce8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bcec:	81a3      	strh	r3, [r4, #12]
 800bcee:	f04f 30ff 	mov.w	r0, #4294967295
 800bcf2:	e03e      	b.n	800bd72 <__swsetup_r+0xba>
 800bcf4:	4b25      	ldr	r3, [pc, #148]	; (800bd8c <__swsetup_r+0xd4>)
 800bcf6:	429c      	cmp	r4, r3
 800bcf8:	d101      	bne.n	800bcfe <__swsetup_r+0x46>
 800bcfa:	68ac      	ldr	r4, [r5, #8]
 800bcfc:	e7eb      	b.n	800bcd6 <__swsetup_r+0x1e>
 800bcfe:	4b24      	ldr	r3, [pc, #144]	; (800bd90 <__swsetup_r+0xd8>)
 800bd00:	429c      	cmp	r4, r3
 800bd02:	bf08      	it	eq
 800bd04:	68ec      	ldreq	r4, [r5, #12]
 800bd06:	e7e6      	b.n	800bcd6 <__swsetup_r+0x1e>
 800bd08:	0758      	lsls	r0, r3, #29
 800bd0a:	d512      	bpl.n	800bd32 <__swsetup_r+0x7a>
 800bd0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd0e:	b141      	cbz	r1, 800bd22 <__swsetup_r+0x6a>
 800bd10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd14:	4299      	cmp	r1, r3
 800bd16:	d002      	beq.n	800bd1e <__swsetup_r+0x66>
 800bd18:	4630      	mov	r0, r6
 800bd1a:	f7ff fb41 	bl	800b3a0 <_free_r>
 800bd1e:	2300      	movs	r3, #0
 800bd20:	6363      	str	r3, [r4, #52]	; 0x34
 800bd22:	89a3      	ldrh	r3, [r4, #12]
 800bd24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bd28:	81a3      	strh	r3, [r4, #12]
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	6063      	str	r3, [r4, #4]
 800bd2e:	6923      	ldr	r3, [r4, #16]
 800bd30:	6023      	str	r3, [r4, #0]
 800bd32:	89a3      	ldrh	r3, [r4, #12]
 800bd34:	f043 0308 	orr.w	r3, r3, #8
 800bd38:	81a3      	strh	r3, [r4, #12]
 800bd3a:	6923      	ldr	r3, [r4, #16]
 800bd3c:	b94b      	cbnz	r3, 800bd52 <__swsetup_r+0x9a>
 800bd3e:	89a3      	ldrh	r3, [r4, #12]
 800bd40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bd44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd48:	d003      	beq.n	800bd52 <__swsetup_r+0x9a>
 800bd4a:	4621      	mov	r1, r4
 800bd4c:	4630      	mov	r0, r6
 800bd4e:	f000 fa09 	bl	800c164 <__smakebuf_r>
 800bd52:	89a0      	ldrh	r0, [r4, #12]
 800bd54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd58:	f010 0301 	ands.w	r3, r0, #1
 800bd5c:	d00a      	beq.n	800bd74 <__swsetup_r+0xbc>
 800bd5e:	2300      	movs	r3, #0
 800bd60:	60a3      	str	r3, [r4, #8]
 800bd62:	6963      	ldr	r3, [r4, #20]
 800bd64:	425b      	negs	r3, r3
 800bd66:	61a3      	str	r3, [r4, #24]
 800bd68:	6923      	ldr	r3, [r4, #16]
 800bd6a:	b943      	cbnz	r3, 800bd7e <__swsetup_r+0xc6>
 800bd6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bd70:	d1ba      	bne.n	800bce8 <__swsetup_r+0x30>
 800bd72:	bd70      	pop	{r4, r5, r6, pc}
 800bd74:	0781      	lsls	r1, r0, #30
 800bd76:	bf58      	it	pl
 800bd78:	6963      	ldrpl	r3, [r4, #20]
 800bd7a:	60a3      	str	r3, [r4, #8]
 800bd7c:	e7f4      	b.n	800bd68 <__swsetup_r+0xb0>
 800bd7e:	2000      	movs	r0, #0
 800bd80:	e7f7      	b.n	800bd72 <__swsetup_r+0xba>
 800bd82:	bf00      	nop
 800bd84:	20000108 	.word	0x20000108
 800bd88:	0800e2c4 	.word	0x0800e2c4
 800bd8c:	0800e2e4 	.word	0x0800e2e4
 800bd90:	0800e2a4 	.word	0x0800e2a4

0800bd94 <abort>:
 800bd94:	b508      	push	{r3, lr}
 800bd96:	2006      	movs	r0, #6
 800bd98:	f000 fa54 	bl	800c244 <raise>
 800bd9c:	2001      	movs	r0, #1
 800bd9e:	f7f7 f93b 	bl	8003018 <_exit>
	...

0800bda4 <__sflush_r>:
 800bda4:	898a      	ldrh	r2, [r1, #12]
 800bda6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdaa:	4605      	mov	r5, r0
 800bdac:	0710      	lsls	r0, r2, #28
 800bdae:	460c      	mov	r4, r1
 800bdb0:	d458      	bmi.n	800be64 <__sflush_r+0xc0>
 800bdb2:	684b      	ldr	r3, [r1, #4]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	dc05      	bgt.n	800bdc4 <__sflush_r+0x20>
 800bdb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	dc02      	bgt.n	800bdc4 <__sflush_r+0x20>
 800bdbe:	2000      	movs	r0, #0
 800bdc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bdc6:	2e00      	cmp	r6, #0
 800bdc8:	d0f9      	beq.n	800bdbe <__sflush_r+0x1a>
 800bdca:	2300      	movs	r3, #0
 800bdcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bdd0:	682f      	ldr	r7, [r5, #0]
 800bdd2:	602b      	str	r3, [r5, #0]
 800bdd4:	d032      	beq.n	800be3c <__sflush_r+0x98>
 800bdd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bdd8:	89a3      	ldrh	r3, [r4, #12]
 800bdda:	075a      	lsls	r2, r3, #29
 800bddc:	d505      	bpl.n	800bdea <__sflush_r+0x46>
 800bdde:	6863      	ldr	r3, [r4, #4]
 800bde0:	1ac0      	subs	r0, r0, r3
 800bde2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bde4:	b10b      	cbz	r3, 800bdea <__sflush_r+0x46>
 800bde6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bde8:	1ac0      	subs	r0, r0, r3
 800bdea:	2300      	movs	r3, #0
 800bdec:	4602      	mov	r2, r0
 800bdee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bdf0:	6a21      	ldr	r1, [r4, #32]
 800bdf2:	4628      	mov	r0, r5
 800bdf4:	47b0      	blx	r6
 800bdf6:	1c43      	adds	r3, r0, #1
 800bdf8:	89a3      	ldrh	r3, [r4, #12]
 800bdfa:	d106      	bne.n	800be0a <__sflush_r+0x66>
 800bdfc:	6829      	ldr	r1, [r5, #0]
 800bdfe:	291d      	cmp	r1, #29
 800be00:	d82c      	bhi.n	800be5c <__sflush_r+0xb8>
 800be02:	4a2a      	ldr	r2, [pc, #168]	; (800beac <__sflush_r+0x108>)
 800be04:	40ca      	lsrs	r2, r1
 800be06:	07d6      	lsls	r6, r2, #31
 800be08:	d528      	bpl.n	800be5c <__sflush_r+0xb8>
 800be0a:	2200      	movs	r2, #0
 800be0c:	6062      	str	r2, [r4, #4]
 800be0e:	04d9      	lsls	r1, r3, #19
 800be10:	6922      	ldr	r2, [r4, #16]
 800be12:	6022      	str	r2, [r4, #0]
 800be14:	d504      	bpl.n	800be20 <__sflush_r+0x7c>
 800be16:	1c42      	adds	r2, r0, #1
 800be18:	d101      	bne.n	800be1e <__sflush_r+0x7a>
 800be1a:	682b      	ldr	r3, [r5, #0]
 800be1c:	b903      	cbnz	r3, 800be20 <__sflush_r+0x7c>
 800be1e:	6560      	str	r0, [r4, #84]	; 0x54
 800be20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be22:	602f      	str	r7, [r5, #0]
 800be24:	2900      	cmp	r1, #0
 800be26:	d0ca      	beq.n	800bdbe <__sflush_r+0x1a>
 800be28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be2c:	4299      	cmp	r1, r3
 800be2e:	d002      	beq.n	800be36 <__sflush_r+0x92>
 800be30:	4628      	mov	r0, r5
 800be32:	f7ff fab5 	bl	800b3a0 <_free_r>
 800be36:	2000      	movs	r0, #0
 800be38:	6360      	str	r0, [r4, #52]	; 0x34
 800be3a:	e7c1      	b.n	800bdc0 <__sflush_r+0x1c>
 800be3c:	6a21      	ldr	r1, [r4, #32]
 800be3e:	2301      	movs	r3, #1
 800be40:	4628      	mov	r0, r5
 800be42:	47b0      	blx	r6
 800be44:	1c41      	adds	r1, r0, #1
 800be46:	d1c7      	bne.n	800bdd8 <__sflush_r+0x34>
 800be48:	682b      	ldr	r3, [r5, #0]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d0c4      	beq.n	800bdd8 <__sflush_r+0x34>
 800be4e:	2b1d      	cmp	r3, #29
 800be50:	d001      	beq.n	800be56 <__sflush_r+0xb2>
 800be52:	2b16      	cmp	r3, #22
 800be54:	d101      	bne.n	800be5a <__sflush_r+0xb6>
 800be56:	602f      	str	r7, [r5, #0]
 800be58:	e7b1      	b.n	800bdbe <__sflush_r+0x1a>
 800be5a:	89a3      	ldrh	r3, [r4, #12]
 800be5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be60:	81a3      	strh	r3, [r4, #12]
 800be62:	e7ad      	b.n	800bdc0 <__sflush_r+0x1c>
 800be64:	690f      	ldr	r7, [r1, #16]
 800be66:	2f00      	cmp	r7, #0
 800be68:	d0a9      	beq.n	800bdbe <__sflush_r+0x1a>
 800be6a:	0793      	lsls	r3, r2, #30
 800be6c:	680e      	ldr	r6, [r1, #0]
 800be6e:	bf08      	it	eq
 800be70:	694b      	ldreq	r3, [r1, #20]
 800be72:	600f      	str	r7, [r1, #0]
 800be74:	bf18      	it	ne
 800be76:	2300      	movne	r3, #0
 800be78:	eba6 0807 	sub.w	r8, r6, r7
 800be7c:	608b      	str	r3, [r1, #8]
 800be7e:	f1b8 0f00 	cmp.w	r8, #0
 800be82:	dd9c      	ble.n	800bdbe <__sflush_r+0x1a>
 800be84:	6a21      	ldr	r1, [r4, #32]
 800be86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800be88:	4643      	mov	r3, r8
 800be8a:	463a      	mov	r2, r7
 800be8c:	4628      	mov	r0, r5
 800be8e:	47b0      	blx	r6
 800be90:	2800      	cmp	r0, #0
 800be92:	dc06      	bgt.n	800bea2 <__sflush_r+0xfe>
 800be94:	89a3      	ldrh	r3, [r4, #12]
 800be96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be9a:	81a3      	strh	r3, [r4, #12]
 800be9c:	f04f 30ff 	mov.w	r0, #4294967295
 800bea0:	e78e      	b.n	800bdc0 <__sflush_r+0x1c>
 800bea2:	4407      	add	r7, r0
 800bea4:	eba8 0800 	sub.w	r8, r8, r0
 800bea8:	e7e9      	b.n	800be7e <__sflush_r+0xda>
 800beaa:	bf00      	nop
 800beac:	20400001 	.word	0x20400001

0800beb0 <_fflush_r>:
 800beb0:	b538      	push	{r3, r4, r5, lr}
 800beb2:	690b      	ldr	r3, [r1, #16]
 800beb4:	4605      	mov	r5, r0
 800beb6:	460c      	mov	r4, r1
 800beb8:	b913      	cbnz	r3, 800bec0 <_fflush_r+0x10>
 800beba:	2500      	movs	r5, #0
 800bebc:	4628      	mov	r0, r5
 800bebe:	bd38      	pop	{r3, r4, r5, pc}
 800bec0:	b118      	cbz	r0, 800beca <_fflush_r+0x1a>
 800bec2:	6983      	ldr	r3, [r0, #24]
 800bec4:	b90b      	cbnz	r3, 800beca <_fflush_r+0x1a>
 800bec6:	f000 f887 	bl	800bfd8 <__sinit>
 800beca:	4b14      	ldr	r3, [pc, #80]	; (800bf1c <_fflush_r+0x6c>)
 800becc:	429c      	cmp	r4, r3
 800bece:	d11b      	bne.n	800bf08 <_fflush_r+0x58>
 800bed0:	686c      	ldr	r4, [r5, #4]
 800bed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d0ef      	beq.n	800beba <_fflush_r+0xa>
 800beda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bedc:	07d0      	lsls	r0, r2, #31
 800bede:	d404      	bmi.n	800beea <_fflush_r+0x3a>
 800bee0:	0599      	lsls	r1, r3, #22
 800bee2:	d402      	bmi.n	800beea <_fflush_r+0x3a>
 800bee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bee6:	f000 f915 	bl	800c114 <__retarget_lock_acquire_recursive>
 800beea:	4628      	mov	r0, r5
 800beec:	4621      	mov	r1, r4
 800beee:	f7ff ff59 	bl	800bda4 <__sflush_r>
 800bef2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bef4:	07da      	lsls	r2, r3, #31
 800bef6:	4605      	mov	r5, r0
 800bef8:	d4e0      	bmi.n	800bebc <_fflush_r+0xc>
 800befa:	89a3      	ldrh	r3, [r4, #12]
 800befc:	059b      	lsls	r3, r3, #22
 800befe:	d4dd      	bmi.n	800bebc <_fflush_r+0xc>
 800bf00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf02:	f000 f908 	bl	800c116 <__retarget_lock_release_recursive>
 800bf06:	e7d9      	b.n	800bebc <_fflush_r+0xc>
 800bf08:	4b05      	ldr	r3, [pc, #20]	; (800bf20 <_fflush_r+0x70>)
 800bf0a:	429c      	cmp	r4, r3
 800bf0c:	d101      	bne.n	800bf12 <_fflush_r+0x62>
 800bf0e:	68ac      	ldr	r4, [r5, #8]
 800bf10:	e7df      	b.n	800bed2 <_fflush_r+0x22>
 800bf12:	4b04      	ldr	r3, [pc, #16]	; (800bf24 <_fflush_r+0x74>)
 800bf14:	429c      	cmp	r4, r3
 800bf16:	bf08      	it	eq
 800bf18:	68ec      	ldreq	r4, [r5, #12]
 800bf1a:	e7da      	b.n	800bed2 <_fflush_r+0x22>
 800bf1c:	0800e2c4 	.word	0x0800e2c4
 800bf20:	0800e2e4 	.word	0x0800e2e4
 800bf24:	0800e2a4 	.word	0x0800e2a4

0800bf28 <std>:
 800bf28:	2300      	movs	r3, #0
 800bf2a:	b510      	push	{r4, lr}
 800bf2c:	4604      	mov	r4, r0
 800bf2e:	e9c0 3300 	strd	r3, r3, [r0]
 800bf32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf36:	6083      	str	r3, [r0, #8]
 800bf38:	8181      	strh	r1, [r0, #12]
 800bf3a:	6643      	str	r3, [r0, #100]	; 0x64
 800bf3c:	81c2      	strh	r2, [r0, #14]
 800bf3e:	6183      	str	r3, [r0, #24]
 800bf40:	4619      	mov	r1, r3
 800bf42:	2208      	movs	r2, #8
 800bf44:	305c      	adds	r0, #92	; 0x5c
 800bf46:	f7fb fdf5 	bl	8007b34 <memset>
 800bf4a:	4b05      	ldr	r3, [pc, #20]	; (800bf60 <std+0x38>)
 800bf4c:	6263      	str	r3, [r4, #36]	; 0x24
 800bf4e:	4b05      	ldr	r3, [pc, #20]	; (800bf64 <std+0x3c>)
 800bf50:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf52:	4b05      	ldr	r3, [pc, #20]	; (800bf68 <std+0x40>)
 800bf54:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf56:	4b05      	ldr	r3, [pc, #20]	; (800bf6c <std+0x44>)
 800bf58:	6224      	str	r4, [r4, #32]
 800bf5a:	6323      	str	r3, [r4, #48]	; 0x30
 800bf5c:	bd10      	pop	{r4, pc}
 800bf5e:	bf00      	nop
 800bf60:	0800c27d 	.word	0x0800c27d
 800bf64:	0800c29f 	.word	0x0800c29f
 800bf68:	0800c2d7 	.word	0x0800c2d7
 800bf6c:	0800c2fb 	.word	0x0800c2fb

0800bf70 <_cleanup_r>:
 800bf70:	4901      	ldr	r1, [pc, #4]	; (800bf78 <_cleanup_r+0x8>)
 800bf72:	f000 b8af 	b.w	800c0d4 <_fwalk_reent>
 800bf76:	bf00      	nop
 800bf78:	0800beb1 	.word	0x0800beb1

0800bf7c <__sfmoreglue>:
 800bf7c:	b570      	push	{r4, r5, r6, lr}
 800bf7e:	2268      	movs	r2, #104	; 0x68
 800bf80:	1e4d      	subs	r5, r1, #1
 800bf82:	4355      	muls	r5, r2
 800bf84:	460e      	mov	r6, r1
 800bf86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bf8a:	f7ff fa75 	bl	800b478 <_malloc_r>
 800bf8e:	4604      	mov	r4, r0
 800bf90:	b140      	cbz	r0, 800bfa4 <__sfmoreglue+0x28>
 800bf92:	2100      	movs	r1, #0
 800bf94:	e9c0 1600 	strd	r1, r6, [r0]
 800bf98:	300c      	adds	r0, #12
 800bf9a:	60a0      	str	r0, [r4, #8]
 800bf9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bfa0:	f7fb fdc8 	bl	8007b34 <memset>
 800bfa4:	4620      	mov	r0, r4
 800bfa6:	bd70      	pop	{r4, r5, r6, pc}

0800bfa8 <__sfp_lock_acquire>:
 800bfa8:	4801      	ldr	r0, [pc, #4]	; (800bfb0 <__sfp_lock_acquire+0x8>)
 800bfaa:	f000 b8b3 	b.w	800c114 <__retarget_lock_acquire_recursive>
 800bfae:	bf00      	nop
 800bfb0:	20004789 	.word	0x20004789

0800bfb4 <__sfp_lock_release>:
 800bfb4:	4801      	ldr	r0, [pc, #4]	; (800bfbc <__sfp_lock_release+0x8>)
 800bfb6:	f000 b8ae 	b.w	800c116 <__retarget_lock_release_recursive>
 800bfba:	bf00      	nop
 800bfbc:	20004789 	.word	0x20004789

0800bfc0 <__sinit_lock_acquire>:
 800bfc0:	4801      	ldr	r0, [pc, #4]	; (800bfc8 <__sinit_lock_acquire+0x8>)
 800bfc2:	f000 b8a7 	b.w	800c114 <__retarget_lock_acquire_recursive>
 800bfc6:	bf00      	nop
 800bfc8:	2000478a 	.word	0x2000478a

0800bfcc <__sinit_lock_release>:
 800bfcc:	4801      	ldr	r0, [pc, #4]	; (800bfd4 <__sinit_lock_release+0x8>)
 800bfce:	f000 b8a2 	b.w	800c116 <__retarget_lock_release_recursive>
 800bfd2:	bf00      	nop
 800bfd4:	2000478a 	.word	0x2000478a

0800bfd8 <__sinit>:
 800bfd8:	b510      	push	{r4, lr}
 800bfda:	4604      	mov	r4, r0
 800bfdc:	f7ff fff0 	bl	800bfc0 <__sinit_lock_acquire>
 800bfe0:	69a3      	ldr	r3, [r4, #24]
 800bfe2:	b11b      	cbz	r3, 800bfec <__sinit+0x14>
 800bfe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfe8:	f7ff bff0 	b.w	800bfcc <__sinit_lock_release>
 800bfec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bff0:	6523      	str	r3, [r4, #80]	; 0x50
 800bff2:	4b13      	ldr	r3, [pc, #76]	; (800c040 <__sinit+0x68>)
 800bff4:	4a13      	ldr	r2, [pc, #76]	; (800c044 <__sinit+0x6c>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	62a2      	str	r2, [r4, #40]	; 0x28
 800bffa:	42a3      	cmp	r3, r4
 800bffc:	bf04      	itt	eq
 800bffe:	2301      	moveq	r3, #1
 800c000:	61a3      	streq	r3, [r4, #24]
 800c002:	4620      	mov	r0, r4
 800c004:	f000 f820 	bl	800c048 <__sfp>
 800c008:	6060      	str	r0, [r4, #4]
 800c00a:	4620      	mov	r0, r4
 800c00c:	f000 f81c 	bl	800c048 <__sfp>
 800c010:	60a0      	str	r0, [r4, #8]
 800c012:	4620      	mov	r0, r4
 800c014:	f000 f818 	bl	800c048 <__sfp>
 800c018:	2200      	movs	r2, #0
 800c01a:	60e0      	str	r0, [r4, #12]
 800c01c:	2104      	movs	r1, #4
 800c01e:	6860      	ldr	r0, [r4, #4]
 800c020:	f7ff ff82 	bl	800bf28 <std>
 800c024:	68a0      	ldr	r0, [r4, #8]
 800c026:	2201      	movs	r2, #1
 800c028:	2109      	movs	r1, #9
 800c02a:	f7ff ff7d 	bl	800bf28 <std>
 800c02e:	68e0      	ldr	r0, [r4, #12]
 800c030:	2202      	movs	r2, #2
 800c032:	2112      	movs	r1, #18
 800c034:	f7ff ff78 	bl	800bf28 <std>
 800c038:	2301      	movs	r3, #1
 800c03a:	61a3      	str	r3, [r4, #24]
 800c03c:	e7d2      	b.n	800bfe4 <__sinit+0xc>
 800c03e:	bf00      	nop
 800c040:	0800de60 	.word	0x0800de60
 800c044:	0800bf71 	.word	0x0800bf71

0800c048 <__sfp>:
 800c048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c04a:	4607      	mov	r7, r0
 800c04c:	f7ff ffac 	bl	800bfa8 <__sfp_lock_acquire>
 800c050:	4b1e      	ldr	r3, [pc, #120]	; (800c0cc <__sfp+0x84>)
 800c052:	681e      	ldr	r6, [r3, #0]
 800c054:	69b3      	ldr	r3, [r6, #24]
 800c056:	b913      	cbnz	r3, 800c05e <__sfp+0x16>
 800c058:	4630      	mov	r0, r6
 800c05a:	f7ff ffbd 	bl	800bfd8 <__sinit>
 800c05e:	3648      	adds	r6, #72	; 0x48
 800c060:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c064:	3b01      	subs	r3, #1
 800c066:	d503      	bpl.n	800c070 <__sfp+0x28>
 800c068:	6833      	ldr	r3, [r6, #0]
 800c06a:	b30b      	cbz	r3, 800c0b0 <__sfp+0x68>
 800c06c:	6836      	ldr	r6, [r6, #0]
 800c06e:	e7f7      	b.n	800c060 <__sfp+0x18>
 800c070:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c074:	b9d5      	cbnz	r5, 800c0ac <__sfp+0x64>
 800c076:	4b16      	ldr	r3, [pc, #88]	; (800c0d0 <__sfp+0x88>)
 800c078:	60e3      	str	r3, [r4, #12]
 800c07a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c07e:	6665      	str	r5, [r4, #100]	; 0x64
 800c080:	f000 f847 	bl	800c112 <__retarget_lock_init_recursive>
 800c084:	f7ff ff96 	bl	800bfb4 <__sfp_lock_release>
 800c088:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c08c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c090:	6025      	str	r5, [r4, #0]
 800c092:	61a5      	str	r5, [r4, #24]
 800c094:	2208      	movs	r2, #8
 800c096:	4629      	mov	r1, r5
 800c098:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c09c:	f7fb fd4a 	bl	8007b34 <memset>
 800c0a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c0a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0ac:	3468      	adds	r4, #104	; 0x68
 800c0ae:	e7d9      	b.n	800c064 <__sfp+0x1c>
 800c0b0:	2104      	movs	r1, #4
 800c0b2:	4638      	mov	r0, r7
 800c0b4:	f7ff ff62 	bl	800bf7c <__sfmoreglue>
 800c0b8:	4604      	mov	r4, r0
 800c0ba:	6030      	str	r0, [r6, #0]
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	d1d5      	bne.n	800c06c <__sfp+0x24>
 800c0c0:	f7ff ff78 	bl	800bfb4 <__sfp_lock_release>
 800c0c4:	230c      	movs	r3, #12
 800c0c6:	603b      	str	r3, [r7, #0]
 800c0c8:	e7ee      	b.n	800c0a8 <__sfp+0x60>
 800c0ca:	bf00      	nop
 800c0cc:	0800de60 	.word	0x0800de60
 800c0d0:	ffff0001 	.word	0xffff0001

0800c0d4 <_fwalk_reent>:
 800c0d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0d8:	4606      	mov	r6, r0
 800c0da:	4688      	mov	r8, r1
 800c0dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c0e0:	2700      	movs	r7, #0
 800c0e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c0e6:	f1b9 0901 	subs.w	r9, r9, #1
 800c0ea:	d505      	bpl.n	800c0f8 <_fwalk_reent+0x24>
 800c0ec:	6824      	ldr	r4, [r4, #0]
 800c0ee:	2c00      	cmp	r4, #0
 800c0f0:	d1f7      	bne.n	800c0e2 <_fwalk_reent+0xe>
 800c0f2:	4638      	mov	r0, r7
 800c0f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0f8:	89ab      	ldrh	r3, [r5, #12]
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d907      	bls.n	800c10e <_fwalk_reent+0x3a>
 800c0fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c102:	3301      	adds	r3, #1
 800c104:	d003      	beq.n	800c10e <_fwalk_reent+0x3a>
 800c106:	4629      	mov	r1, r5
 800c108:	4630      	mov	r0, r6
 800c10a:	47c0      	blx	r8
 800c10c:	4307      	orrs	r7, r0
 800c10e:	3568      	adds	r5, #104	; 0x68
 800c110:	e7e9      	b.n	800c0e6 <_fwalk_reent+0x12>

0800c112 <__retarget_lock_init_recursive>:
 800c112:	4770      	bx	lr

0800c114 <__retarget_lock_acquire_recursive>:
 800c114:	4770      	bx	lr

0800c116 <__retarget_lock_release_recursive>:
 800c116:	4770      	bx	lr

0800c118 <__swhatbuf_r>:
 800c118:	b570      	push	{r4, r5, r6, lr}
 800c11a:	460e      	mov	r6, r1
 800c11c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c120:	2900      	cmp	r1, #0
 800c122:	b096      	sub	sp, #88	; 0x58
 800c124:	4614      	mov	r4, r2
 800c126:	461d      	mov	r5, r3
 800c128:	da08      	bge.n	800c13c <__swhatbuf_r+0x24>
 800c12a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c12e:	2200      	movs	r2, #0
 800c130:	602a      	str	r2, [r5, #0]
 800c132:	061a      	lsls	r2, r3, #24
 800c134:	d410      	bmi.n	800c158 <__swhatbuf_r+0x40>
 800c136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c13a:	e00e      	b.n	800c15a <__swhatbuf_r+0x42>
 800c13c:	466a      	mov	r2, sp
 800c13e:	f000 f903 	bl	800c348 <_fstat_r>
 800c142:	2800      	cmp	r0, #0
 800c144:	dbf1      	blt.n	800c12a <__swhatbuf_r+0x12>
 800c146:	9a01      	ldr	r2, [sp, #4]
 800c148:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c14c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c150:	425a      	negs	r2, r3
 800c152:	415a      	adcs	r2, r3
 800c154:	602a      	str	r2, [r5, #0]
 800c156:	e7ee      	b.n	800c136 <__swhatbuf_r+0x1e>
 800c158:	2340      	movs	r3, #64	; 0x40
 800c15a:	2000      	movs	r0, #0
 800c15c:	6023      	str	r3, [r4, #0]
 800c15e:	b016      	add	sp, #88	; 0x58
 800c160:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c164 <__smakebuf_r>:
 800c164:	898b      	ldrh	r3, [r1, #12]
 800c166:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c168:	079d      	lsls	r5, r3, #30
 800c16a:	4606      	mov	r6, r0
 800c16c:	460c      	mov	r4, r1
 800c16e:	d507      	bpl.n	800c180 <__smakebuf_r+0x1c>
 800c170:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c174:	6023      	str	r3, [r4, #0]
 800c176:	6123      	str	r3, [r4, #16]
 800c178:	2301      	movs	r3, #1
 800c17a:	6163      	str	r3, [r4, #20]
 800c17c:	b002      	add	sp, #8
 800c17e:	bd70      	pop	{r4, r5, r6, pc}
 800c180:	ab01      	add	r3, sp, #4
 800c182:	466a      	mov	r2, sp
 800c184:	f7ff ffc8 	bl	800c118 <__swhatbuf_r>
 800c188:	9900      	ldr	r1, [sp, #0]
 800c18a:	4605      	mov	r5, r0
 800c18c:	4630      	mov	r0, r6
 800c18e:	f7ff f973 	bl	800b478 <_malloc_r>
 800c192:	b948      	cbnz	r0, 800c1a8 <__smakebuf_r+0x44>
 800c194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c198:	059a      	lsls	r2, r3, #22
 800c19a:	d4ef      	bmi.n	800c17c <__smakebuf_r+0x18>
 800c19c:	f023 0303 	bic.w	r3, r3, #3
 800c1a0:	f043 0302 	orr.w	r3, r3, #2
 800c1a4:	81a3      	strh	r3, [r4, #12]
 800c1a6:	e7e3      	b.n	800c170 <__smakebuf_r+0xc>
 800c1a8:	4b0d      	ldr	r3, [pc, #52]	; (800c1e0 <__smakebuf_r+0x7c>)
 800c1aa:	62b3      	str	r3, [r6, #40]	; 0x28
 800c1ac:	89a3      	ldrh	r3, [r4, #12]
 800c1ae:	6020      	str	r0, [r4, #0]
 800c1b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1b4:	81a3      	strh	r3, [r4, #12]
 800c1b6:	9b00      	ldr	r3, [sp, #0]
 800c1b8:	6163      	str	r3, [r4, #20]
 800c1ba:	9b01      	ldr	r3, [sp, #4]
 800c1bc:	6120      	str	r0, [r4, #16]
 800c1be:	b15b      	cbz	r3, 800c1d8 <__smakebuf_r+0x74>
 800c1c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1c4:	4630      	mov	r0, r6
 800c1c6:	f000 f8d1 	bl	800c36c <_isatty_r>
 800c1ca:	b128      	cbz	r0, 800c1d8 <__smakebuf_r+0x74>
 800c1cc:	89a3      	ldrh	r3, [r4, #12]
 800c1ce:	f023 0303 	bic.w	r3, r3, #3
 800c1d2:	f043 0301 	orr.w	r3, r3, #1
 800c1d6:	81a3      	strh	r3, [r4, #12]
 800c1d8:	89a0      	ldrh	r0, [r4, #12]
 800c1da:	4305      	orrs	r5, r0
 800c1dc:	81a5      	strh	r5, [r4, #12]
 800c1de:	e7cd      	b.n	800c17c <__smakebuf_r+0x18>
 800c1e0:	0800bf71 	.word	0x0800bf71

0800c1e4 <_malloc_usable_size_r>:
 800c1e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1e8:	1f18      	subs	r0, r3, #4
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	bfbc      	itt	lt
 800c1ee:	580b      	ldrlt	r3, [r1, r0]
 800c1f0:	18c0      	addlt	r0, r0, r3
 800c1f2:	4770      	bx	lr

0800c1f4 <_raise_r>:
 800c1f4:	291f      	cmp	r1, #31
 800c1f6:	b538      	push	{r3, r4, r5, lr}
 800c1f8:	4604      	mov	r4, r0
 800c1fa:	460d      	mov	r5, r1
 800c1fc:	d904      	bls.n	800c208 <_raise_r+0x14>
 800c1fe:	2316      	movs	r3, #22
 800c200:	6003      	str	r3, [r0, #0]
 800c202:	f04f 30ff 	mov.w	r0, #4294967295
 800c206:	bd38      	pop	{r3, r4, r5, pc}
 800c208:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c20a:	b112      	cbz	r2, 800c212 <_raise_r+0x1e>
 800c20c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c210:	b94b      	cbnz	r3, 800c226 <_raise_r+0x32>
 800c212:	4620      	mov	r0, r4
 800c214:	f000 f830 	bl	800c278 <_getpid_r>
 800c218:	462a      	mov	r2, r5
 800c21a:	4601      	mov	r1, r0
 800c21c:	4620      	mov	r0, r4
 800c21e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c222:	f000 b817 	b.w	800c254 <_kill_r>
 800c226:	2b01      	cmp	r3, #1
 800c228:	d00a      	beq.n	800c240 <_raise_r+0x4c>
 800c22a:	1c59      	adds	r1, r3, #1
 800c22c:	d103      	bne.n	800c236 <_raise_r+0x42>
 800c22e:	2316      	movs	r3, #22
 800c230:	6003      	str	r3, [r0, #0]
 800c232:	2001      	movs	r0, #1
 800c234:	e7e7      	b.n	800c206 <_raise_r+0x12>
 800c236:	2400      	movs	r4, #0
 800c238:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c23c:	4628      	mov	r0, r5
 800c23e:	4798      	blx	r3
 800c240:	2000      	movs	r0, #0
 800c242:	e7e0      	b.n	800c206 <_raise_r+0x12>

0800c244 <raise>:
 800c244:	4b02      	ldr	r3, [pc, #8]	; (800c250 <raise+0xc>)
 800c246:	4601      	mov	r1, r0
 800c248:	6818      	ldr	r0, [r3, #0]
 800c24a:	f7ff bfd3 	b.w	800c1f4 <_raise_r>
 800c24e:	bf00      	nop
 800c250:	20000108 	.word	0x20000108

0800c254 <_kill_r>:
 800c254:	b538      	push	{r3, r4, r5, lr}
 800c256:	4d07      	ldr	r5, [pc, #28]	; (800c274 <_kill_r+0x20>)
 800c258:	2300      	movs	r3, #0
 800c25a:	4604      	mov	r4, r0
 800c25c:	4608      	mov	r0, r1
 800c25e:	4611      	mov	r1, r2
 800c260:	602b      	str	r3, [r5, #0]
 800c262:	f7f6 fed1 	bl	8003008 <_kill>
 800c266:	1c43      	adds	r3, r0, #1
 800c268:	d102      	bne.n	800c270 <_kill_r+0x1c>
 800c26a:	682b      	ldr	r3, [r5, #0]
 800c26c:	b103      	cbz	r3, 800c270 <_kill_r+0x1c>
 800c26e:	6023      	str	r3, [r4, #0]
 800c270:	bd38      	pop	{r3, r4, r5, pc}
 800c272:	bf00      	nop
 800c274:	20004784 	.word	0x20004784

0800c278 <_getpid_r>:
 800c278:	f7f6 bec4 	b.w	8003004 <_getpid>

0800c27c <__sread>:
 800c27c:	b510      	push	{r4, lr}
 800c27e:	460c      	mov	r4, r1
 800c280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c284:	f000 f894 	bl	800c3b0 <_read_r>
 800c288:	2800      	cmp	r0, #0
 800c28a:	bfab      	itete	ge
 800c28c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c28e:	89a3      	ldrhlt	r3, [r4, #12]
 800c290:	181b      	addge	r3, r3, r0
 800c292:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c296:	bfac      	ite	ge
 800c298:	6563      	strge	r3, [r4, #84]	; 0x54
 800c29a:	81a3      	strhlt	r3, [r4, #12]
 800c29c:	bd10      	pop	{r4, pc}

0800c29e <__swrite>:
 800c29e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2a2:	461f      	mov	r7, r3
 800c2a4:	898b      	ldrh	r3, [r1, #12]
 800c2a6:	05db      	lsls	r3, r3, #23
 800c2a8:	4605      	mov	r5, r0
 800c2aa:	460c      	mov	r4, r1
 800c2ac:	4616      	mov	r6, r2
 800c2ae:	d505      	bpl.n	800c2bc <__swrite+0x1e>
 800c2b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2b4:	2302      	movs	r3, #2
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	f000 f868 	bl	800c38c <_lseek_r>
 800c2bc:	89a3      	ldrh	r3, [r4, #12]
 800c2be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c2c6:	81a3      	strh	r3, [r4, #12]
 800c2c8:	4632      	mov	r2, r6
 800c2ca:	463b      	mov	r3, r7
 800c2cc:	4628      	mov	r0, r5
 800c2ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2d2:	f000 b817 	b.w	800c304 <_write_r>

0800c2d6 <__sseek>:
 800c2d6:	b510      	push	{r4, lr}
 800c2d8:	460c      	mov	r4, r1
 800c2da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2de:	f000 f855 	bl	800c38c <_lseek_r>
 800c2e2:	1c43      	adds	r3, r0, #1
 800c2e4:	89a3      	ldrh	r3, [r4, #12]
 800c2e6:	bf15      	itete	ne
 800c2e8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c2ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c2ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c2f2:	81a3      	strheq	r3, [r4, #12]
 800c2f4:	bf18      	it	ne
 800c2f6:	81a3      	strhne	r3, [r4, #12]
 800c2f8:	bd10      	pop	{r4, pc}

0800c2fa <__sclose>:
 800c2fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2fe:	f000 b813 	b.w	800c328 <_close_r>
	...

0800c304 <_write_r>:
 800c304:	b538      	push	{r3, r4, r5, lr}
 800c306:	4d07      	ldr	r5, [pc, #28]	; (800c324 <_write_r+0x20>)
 800c308:	4604      	mov	r4, r0
 800c30a:	4608      	mov	r0, r1
 800c30c:	4611      	mov	r1, r2
 800c30e:	2200      	movs	r2, #0
 800c310:	602a      	str	r2, [r5, #0]
 800c312:	461a      	mov	r2, r3
 800c314:	f7f6 fe94 	bl	8003040 <_write>
 800c318:	1c43      	adds	r3, r0, #1
 800c31a:	d102      	bne.n	800c322 <_write_r+0x1e>
 800c31c:	682b      	ldr	r3, [r5, #0]
 800c31e:	b103      	cbz	r3, 800c322 <_write_r+0x1e>
 800c320:	6023      	str	r3, [r4, #0]
 800c322:	bd38      	pop	{r3, r4, r5, pc}
 800c324:	20004784 	.word	0x20004784

0800c328 <_close_r>:
 800c328:	b538      	push	{r3, r4, r5, lr}
 800c32a:	4d06      	ldr	r5, [pc, #24]	; (800c344 <_close_r+0x1c>)
 800c32c:	2300      	movs	r3, #0
 800c32e:	4604      	mov	r4, r0
 800c330:	4608      	mov	r0, r1
 800c332:	602b      	str	r3, [r5, #0]
 800c334:	f7f6 fe92 	bl	800305c <_close>
 800c338:	1c43      	adds	r3, r0, #1
 800c33a:	d102      	bne.n	800c342 <_close_r+0x1a>
 800c33c:	682b      	ldr	r3, [r5, #0]
 800c33e:	b103      	cbz	r3, 800c342 <_close_r+0x1a>
 800c340:	6023      	str	r3, [r4, #0]
 800c342:	bd38      	pop	{r3, r4, r5, pc}
 800c344:	20004784 	.word	0x20004784

0800c348 <_fstat_r>:
 800c348:	b538      	push	{r3, r4, r5, lr}
 800c34a:	4d07      	ldr	r5, [pc, #28]	; (800c368 <_fstat_r+0x20>)
 800c34c:	2300      	movs	r3, #0
 800c34e:	4604      	mov	r4, r0
 800c350:	4608      	mov	r0, r1
 800c352:	4611      	mov	r1, r2
 800c354:	602b      	str	r3, [r5, #0]
 800c356:	f7f6 fe85 	bl	8003064 <_fstat>
 800c35a:	1c43      	adds	r3, r0, #1
 800c35c:	d102      	bne.n	800c364 <_fstat_r+0x1c>
 800c35e:	682b      	ldr	r3, [r5, #0]
 800c360:	b103      	cbz	r3, 800c364 <_fstat_r+0x1c>
 800c362:	6023      	str	r3, [r4, #0]
 800c364:	bd38      	pop	{r3, r4, r5, pc}
 800c366:	bf00      	nop
 800c368:	20004784 	.word	0x20004784

0800c36c <_isatty_r>:
 800c36c:	b538      	push	{r3, r4, r5, lr}
 800c36e:	4d06      	ldr	r5, [pc, #24]	; (800c388 <_isatty_r+0x1c>)
 800c370:	2300      	movs	r3, #0
 800c372:	4604      	mov	r4, r0
 800c374:	4608      	mov	r0, r1
 800c376:	602b      	str	r3, [r5, #0]
 800c378:	f7f6 fe7a 	bl	8003070 <_isatty>
 800c37c:	1c43      	adds	r3, r0, #1
 800c37e:	d102      	bne.n	800c386 <_isatty_r+0x1a>
 800c380:	682b      	ldr	r3, [r5, #0]
 800c382:	b103      	cbz	r3, 800c386 <_isatty_r+0x1a>
 800c384:	6023      	str	r3, [r4, #0]
 800c386:	bd38      	pop	{r3, r4, r5, pc}
 800c388:	20004784 	.word	0x20004784

0800c38c <_lseek_r>:
 800c38c:	b538      	push	{r3, r4, r5, lr}
 800c38e:	4d07      	ldr	r5, [pc, #28]	; (800c3ac <_lseek_r+0x20>)
 800c390:	4604      	mov	r4, r0
 800c392:	4608      	mov	r0, r1
 800c394:	4611      	mov	r1, r2
 800c396:	2200      	movs	r2, #0
 800c398:	602a      	str	r2, [r5, #0]
 800c39a:	461a      	mov	r2, r3
 800c39c:	f7f6 fe6a 	bl	8003074 <_lseek>
 800c3a0:	1c43      	adds	r3, r0, #1
 800c3a2:	d102      	bne.n	800c3aa <_lseek_r+0x1e>
 800c3a4:	682b      	ldr	r3, [r5, #0]
 800c3a6:	b103      	cbz	r3, 800c3aa <_lseek_r+0x1e>
 800c3a8:	6023      	str	r3, [r4, #0]
 800c3aa:	bd38      	pop	{r3, r4, r5, pc}
 800c3ac:	20004784 	.word	0x20004784

0800c3b0 <_read_r>:
 800c3b0:	b538      	push	{r3, r4, r5, lr}
 800c3b2:	4d07      	ldr	r5, [pc, #28]	; (800c3d0 <_read_r+0x20>)
 800c3b4:	4604      	mov	r4, r0
 800c3b6:	4608      	mov	r0, r1
 800c3b8:	4611      	mov	r1, r2
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	602a      	str	r2, [r5, #0]
 800c3be:	461a      	mov	r2, r3
 800c3c0:	f7f6 fe30 	bl	8003024 <_read>
 800c3c4:	1c43      	adds	r3, r0, #1
 800c3c6:	d102      	bne.n	800c3ce <_read_r+0x1e>
 800c3c8:	682b      	ldr	r3, [r5, #0]
 800c3ca:	b103      	cbz	r3, 800c3ce <_read_r+0x1e>
 800c3cc:	6023      	str	r3, [r4, #0]
 800c3ce:	bd38      	pop	{r3, r4, r5, pc}
 800c3d0:	20004784 	.word	0x20004784

0800c3d4 <_init>:
 800c3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3d6:	bf00      	nop
 800c3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3da:	bc08      	pop	{r3}
 800c3dc:	469e      	mov	lr, r3
 800c3de:	4770      	bx	lr

0800c3e0 <_fini>:
 800c3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3e2:	bf00      	nop
 800c3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3e6:	bc08      	pop	{r3}
 800c3e8:	469e      	mov	lr, r3
 800c3ea:	4770      	bx	lr
