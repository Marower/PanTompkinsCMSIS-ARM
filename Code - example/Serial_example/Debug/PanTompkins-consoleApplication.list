
PanTompkins-consoleApplication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000125a0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000654  080126e0  080126e0  000226e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08012d34  08012d34  00022d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08012d38  08012d38  00022d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000002e4  20000004  08012d3c  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00005458  200002e8  08013020  000302e8  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20005740  08013020  00035740  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000302e8  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002b008  00000000  00000000  00030318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000455c  00000000  00000000  0005b320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000020a8  00000000  00000000  0005f880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001ec0  00000000  00000000  00061928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00026af0  00000000  00000000  000637e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00028d32  00000000  00000000  0008a2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000e5098  00000000  00000000  000b300a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001980a2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000a19c  00000000  00000000  001980f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002e8 	.word	0x200002e8
 800015c:	00000000 	.word	0x00000000
 8000160:	080126c8 	.word	0x080126c8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002ec 	.word	0x200002ec
 800017c:	080126c8 	.word	0x080126c8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_d2lz>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460d      	mov	r5, r1
 8000c42:	f7ff ff23 	bl	8000a8c <__aeabi_dcmplt>
 8000c46:	b928      	cbnz	r0, 8000c54 <__aeabi_d2lz+0x1c>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c50:	f000 b80a 	b.w	8000c68 <__aeabi_d2ulz>
 8000c54:	4620      	mov	r0, r4
 8000c56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5a:	f000 f805 	bl	8000c68 <__aeabi_d2ulz>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2ulz>:
 8000c68:	b5d0      	push	{r4, r6, r7, lr}
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__aeabi_d2ulz+0x34>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	f7ff fc99 	bl	80005a8 <__aeabi_dmul>
 8000c76:	f7ff ff6f 	bl	8000b58 <__aeabi_d2uiz>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	f7ff fc1a 	bl	80004b4 <__aeabi_ui2d>
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <__aeabi_d2ulz+0x38>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f7ff fc90 	bl	80005a8 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	4639      	mov	r1, r7
 8000c90:	f7ff fad2 	bl	8000238 <__aeabi_dsub>
 8000c94:	f7ff ff60 	bl	8000b58 <__aeabi_d2uiz>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c9c:	3df00000 	.word	0x3df00000
 8000ca0:	41f00000 	.word	0x41f00000

08000ca4 <PT_init>:
	and filter Buffers.

 *******************************************************************************/

void PT_init( void )
{
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
	/**************************************************
	Initialize Pan_Tompkins structure.
	**************************************************/

	memset(&PT_data, 0, sizeof(PT_data));
 8000caa:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8000cae:	2100      	movs	r1, #0
 8000cb0:	487f      	ldr	r0, [pc, #508]	; (8000eb0 <PT_init+0x20c>)
 8000cb2:	f00d f893 	bl	800dddc <memset>

	PT_dptr->PT_state		= START_UP;
 8000cb6:	4b7e      	ldr	r3, [pc, #504]	; (8000eb0 <PT_init+0x20c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	80da      	strh	r2, [r3, #6]

	PT_dptr->Recent_RR_M = PT_dptr->RR_M =  PT1000MS;
 8000cbc:	4b7c      	ldr	r3, [pc, #496]	; (8000eb0 <PT_init+0x20c>)
 8000cbe:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000cc2:	849a      	strh	r2, [r3, #36]	; 0x24
 8000cc4:	4a7a      	ldr	r2, [pc, #488]	; (8000eb0 <PT_init+0x20c>)
 8000cc6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8000cca:	8113      	strh	r3, [r2, #8]

	PT_dptr->RR_Low_L		= RR92PERCENT;
 8000ccc:	4b78      	ldr	r3, [pc, #480]	; (8000eb0 <PT_init+0x20c>)
 8000cce:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8000cd2:	84da      	strh	r2, [r3, #38]	; 0x26
	PT_dptr->RR_High_L		= RR116PERCENT;
 8000cd4:	4b76      	ldr	r3, [pc, #472]	; (8000eb0 <PT_init+0x20c>)
 8000cd6:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 8000cda:	851a      	strh	r2, [r3, #40]	; 0x28
	PT_dptr->RR_Missed_L	= RR166PERCENT;
 8000cdc:	4b74      	ldr	r3, [pc, #464]	; (8000eb0 <PT_init+0x20c>)
 8000cde:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000ce2:	855a      	strh	r2, [r3, #42]	; 0x2a

	PT_dptr->LP_pointer		= 0;
 8000ce4:	4b72      	ldr	r3, [pc, #456]	; (8000eb0 <PT_init+0x20c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	801a      	strh	r2, [r3, #0]
	PT_dptr->HP_pointer		= 0;
 8000cea:	4b71      	ldr	r3, [pc, #452]	; (8000eb0 <PT_init+0x20c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	805a      	strh	r2, [r3, #2]
	PT_dptr->MVA_pointer	= 0;
 8000cf0:	4b6f      	ldr	r3, [pc, #444]	; (8000eb0 <PT_init+0x20c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	809a      	strh	r2, [r3, #4]

	PT_dptr->HR_State = REGULAR_HR;
 8000cf6:	4b6e      	ldr	r3, [pc, #440]	; (8000eb0 <PT_init+0x20c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	859a      	strh	r2, [r3, #44]	; 0x2c
	/**************************************************
	Initialize filter buffers
	**************************************************/
	int8_t idex;

	for (idex = 0; idex < LP_BUFFER_SIZE; idex++)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	71fb      	strb	r3, [r7, #7]
 8000d00:	e00d      	b.n	8000d1e <PT_init+0x7a>
		PT_dptr->LP_buf[idex]		= 0;							//  LP filter buffer
 8000d02:	4a6b      	ldr	r2, [pc, #428]	; (8000eb0 <PT_init+0x20c>)
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	3314      	adds	r3, #20
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	4413      	add	r3, r2
 8000d0e:	2200      	movs	r2, #0
 8000d10:	80da      	strh	r2, [r3, #6]
	for (idex = 0; idex < LP_BUFFER_SIZE; idex++)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	3301      	adds	r3, #1
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	71fb      	strb	r3, [r7, #7]
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	2b0b      	cmp	r3, #11
 8000d24:	dded      	ble.n	8000d02 <PT_init+0x5e>
	for (idex = 0; idex < HP_BUFFER_SIZE; idex++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	71fb      	strb	r3, [r7, #7]
 8000d2a:	e00d      	b.n	8000d48 <PT_init+0xa4>
		PT_dptr->HP_buf[idex]		= 0;							//  HP filter buffer
 8000d2c:	4a60      	ldr	r2, [pc, #384]	; (8000eb0 <PT_init+0x20c>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	3320      	adds	r3, #32
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	4413      	add	r3, r2
 8000d38:	2200      	movs	r2, #0
 8000d3a:	80da      	strh	r2, [r3, #6]
	for (idex = 0; idex < HP_BUFFER_SIZE; idex++)
 8000d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	3301      	adds	r3, #1
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	71fb      	strb	r3, [r7, #7]
 8000d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4c:	2b1f      	cmp	r3, #31
 8000d4e:	dded      	ble.n	8000d2c <PT_init+0x88>
	for (idex = 0; idex < DR_BUFFER_SIZE; idex++)
 8000d50:	2300      	movs	r3, #0
 8000d52:	71fb      	strb	r3, [r7, #7]
 8000d54:	e00d      	b.n	8000d72 <PT_init+0xce>
		PT_dptr->DR_buf[idex]		= 0;							//  DR filter buffer
 8000d56:	4a56      	ldr	r2, [pc, #344]	; (8000eb0 <PT_init+0x20c>)
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	3340      	adds	r3, #64	; 0x40
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	4413      	add	r3, r2
 8000d62:	2200      	movs	r2, #0
 8000d64:	80da      	strh	r2, [r3, #6]
	for (idex = 0; idex < DR_BUFFER_SIZE; idex++)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	71fb      	strb	r3, [r7, #7]
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	2b03      	cmp	r3, #3
 8000d78:	dded      	ble.n	8000d56 <PT_init+0xb2>
	for (idex = 0; idex < MVA_BUFFER_SIZE; idex++)
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	71fb      	strb	r3, [r7, #7]
 8000d7e:	e00d      	b.n	8000d9c <PT_init+0xf8>
		PT_dptr->MVA_buf[idex]		= 0;							//  MVA filter buffer
 8000d80:	4a4b      	ldr	r2, [pc, #300]	; (8000eb0 <PT_init+0x20c>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	3344      	adds	r3, #68	; 0x44
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	4413      	add	r3, r2
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	80da      	strh	r2, [r3, #6]
	for (idex = 0; idex < MVA_BUFFER_SIZE; idex++)
 8000d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	3301      	adds	r3, #1
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	71fb      	strb	r3, [r7, #7]
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	2b35      	cmp	r3, #53	; 0x35
 8000da2:	dded      	ble.n	8000d80 <PT_init+0xdc>
	for (idex = 0; idex < RR_BUFFER_SIZE; idex++) {
 8000da4:	2300      	movs	r3, #0
 8000da6:	71fb      	strb	r3, [r7, #7]
 8000da8:	e01d      	b.n	8000de6 <PT_init+0x142>
		PT_dptr->RR_AVRG1_buf[idex] = 
			PT_dptr->RR_AVRG2_buf[idex] = PT1000MS;					//  Normal	and extreme RR buffers
 8000daa:	4941      	ldr	r1, [pc, #260]	; (8000eb0 <PT_init+0x20c>)
 8000dac:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000db0:	f102 0384 	add.w	r3, r2, #132	; 0x84
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	440b      	add	r3, r1
 8000db8:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8000dbc:	8058      	strh	r0, [r3, #2]
		PT_dptr->RR_AVRG1_buf[idex] = 
 8000dbe:	4c3c      	ldr	r4, [pc, #240]	; (8000eb0 <PT_init+0x20c>)
 8000dc0:	f997 0007 	ldrsb.w	r0, [r7, #7]
			PT_dptr->RR_AVRG2_buf[idex] = PT1000MS;					//  Normal	and extreme RR buffers
 8000dc4:	f102 0384 	add.w	r3, r2, #132	; 0x84
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	440b      	add	r3, r1
 8000dcc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
		PT_dptr->RR_AVRG1_buf[idex] = 
 8000dd0:	f100 037c 	add.w	r3, r0, #124	; 0x7c
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	4423      	add	r3, r4
 8000dd8:	805a      	strh	r2, [r3, #2]
	for (idex = 0; idex < RR_BUFFER_SIZE; idex++) {
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	3301      	adds	r3, #1
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	71fb      	strb	r3, [r7, #7]
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	2b07      	cmp	r3, #7
 8000dec:	dddd      	ble.n	8000daa <PT_init+0x106>
	}

	/**************************************************
	Initialize all static variables 
	**************************************************/
	Prev_val = Prev_Prev_val = 0;									// Place holders for peak detector in Integrated Sig
 8000dee:	4b31      	ldr	r3, [pc, #196]	; (8000eb4 <PT_init+0x210>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	801a      	strh	r2, [r3, #0]
 8000df4:	4b2f      	ldr	r3, [pc, #188]	; (8000eb4 <PT_init+0x210>)
 8000df6:	881a      	ldrh	r2, [r3, #0]
 8000df8:	4b2f      	ldr	r3, [pc, #188]	; (8000eb8 <PT_init+0x214>)
 8000dfa:	801a      	strh	r2, [r3, #0]
	Prev_valBP = Prev_Prev_valBP = Best_PeakBP = 0;					// Place holders for peak detector in BP signal
 8000dfc:	4b2f      	ldr	r3, [pc, #188]	; (8000ebc <PT_init+0x218>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	801a      	strh	r2, [r3, #0]
 8000e02:	4b2e      	ldr	r3, [pc, #184]	; (8000ebc <PT_init+0x218>)
 8000e04:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e08:	4b2d      	ldr	r3, [pc, #180]	; (8000ec0 <PT_init+0x21c>)
 8000e0a:	801a      	strh	r2, [r3, #0]
 8000e0c:	4b2c      	ldr	r3, [pc, #176]	; (8000ec0 <PT_init+0x21c>)
 8000e0e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e12:	4b2c      	ldr	r3, [pc, #176]	; (8000ec4 <PT_init+0x220>)
 8000e14:	801a      	strh	r2, [r3, #0]
	Prev_valDR = Prev_Prev_valDR = Best_PeakDR = Old_PeakDR = 0;	// Place holders for peak detector in Derivative signal (Used for T-wave discrimination)
 8000e16:	4b2c      	ldr	r3, [pc, #176]	; (8000ec8 <PT_init+0x224>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	801a      	strh	r2, [r3, #0]
 8000e1c:	4b2a      	ldr	r3, [pc, #168]	; (8000ec8 <PT_init+0x224>)
 8000e1e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e22:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <PT_init+0x228>)
 8000e24:	801a      	strh	r2, [r3, #0]
 8000e26:	4b29      	ldr	r3, [pc, #164]	; (8000ecc <PT_init+0x228>)
 8000e28:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e2c:	4b28      	ldr	r3, [pc, #160]	; (8000ed0 <PT_init+0x22c>)
 8000e2e:	801a      	strh	r2, [r3, #0]
 8000e30:	4b27      	ldr	r3, [pc, #156]	; (8000ed0 <PT_init+0x22c>)
 8000e32:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e36:	4b27      	ldr	r3, [pc, #156]	; (8000ed4 <PT_init+0x230>)
 8000e38:	801a      	strh	r2, [r3, #0]
	Count_SinceRR = 0;												// Nr of samples since last qrs peak
 8000e3a:	4b27      	ldr	r3, [pc, #156]	; (8000ed8 <PT_init+0x234>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	801a      	strh	r2, [r3, #0]
	RR1_p = RR2_p = 0;												// Pointers to RR average 1 and 2 resepectively
 8000e40:	4b26      	ldr	r3, [pc, #152]	; (8000edc <PT_init+0x238>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	801a      	strh	r2, [r3, #0]
 8000e46:	4b25      	ldr	r3, [pc, #148]	; (8000edc <PT_init+0x238>)
 8000e48:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e4c:	4b24      	ldr	r3, [pc, #144]	; (8000ee0 <PT_init+0x23c>)
 8000e4e:	801a      	strh	r2, [r3, #0]
	MV_sum = 0;														// sum for moving average filter
 8000e50:	4b24      	ldr	r3, [pc, #144]	; (8000ee4 <PT_init+0x240>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	801a      	strh	r2, [r3, #0]
	RR1_sum = RR2_sum = PT1000MS << 3;								// Sum of RR1 and RR2 buffers
 8000e56:	4b24      	ldr	r3, [pc, #144]	; (8000ee8 <PT_init+0x244>)
 8000e58:	f44f 6234 	mov.w	r2, #2880	; 0xb40
 8000e5c:	801a      	strh	r2, [r3, #0]
 8000e5e:	4b22      	ldr	r3, [pc, #136]	; (8000ee8 <PT_init+0x244>)
 8000e60:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e64:	4b21      	ldr	r3, [pc, #132]	; (8000eec <PT_init+0x248>)
 8000e66:	801a      	strh	r2, [r3, #0]
	BlankTimeCnt = 0;												// Counter for blank-time.
 8000e68:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <PT_init+0x24c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	801a      	strh	r2, [r3, #0]
	SBcntI = 0;														// For searchback index in Integ Signal
 8000e6e:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <PT_init+0x250>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	801a      	strh	r2, [r3, #0]
	SB_peakI = 0;													// For searchback in Integ sig
 8000e74:	4b20      	ldr	r3, [pc, #128]	; (8000ef8 <PT_init+0x254>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	801a      	strh	r2, [r3, #0]
	SB_peakBP = SB_peakDR = 0;										// For searchback peak holders in BP and slope signal
 8000e7a:	4b20      	ldr	r3, [pc, #128]	; (8000efc <PT_init+0x258>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	801a      	strh	r2, [r3, #0]
 8000e80:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <PT_init+0x258>)
 8000e82:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e86:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <PT_init+0x25c>)
 8000e88:	801a      	strh	r2, [r3, #0]
	st_mx_pk = 0;													// Used in learning phase 1 to estimate thresholds
 8000e8a:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <PT_init+0x260>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	801a      	strh	r2, [r3, #0]
	y_h = 0;														// recusrively used in HP filter
 8000e90:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <PT_init+0x264>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	801a      	strh	r2, [r3, #0]

#if (FILTER_FORM == 2)
	LP_y_new = LP_y_old = 0;										// Parameters for DirectForm || LP filter
 8000e96:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <PT_init+0x268>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	801a      	strh	r2, [r3, #0]
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <PT_init+0x268>)
 8000e9e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ea2:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <PT_init+0x26c>)
 8000ea4:	801a      	strh	r2, [r3, #0]
#endif
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd90      	pop	{r4, r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000304 	.word	0x20000304
 8000eb4:	2000044c 	.word	0x2000044c
 8000eb8:	2000044a 	.word	0x2000044a
 8000ebc:	20000422 	.word	0x20000422
 8000ec0:	20000420 	.word	0x20000420
 8000ec4:	2000041e 	.word	0x2000041e
 8000ec8:	2000042a 	.word	0x2000042a
 8000ecc:	20000428 	.word	0x20000428
 8000ed0:	20000426 	.word	0x20000426
 8000ed4:	20000424 	.word	0x20000424
 8000ed8:	2000042c 	.word	0x2000042c
 8000edc:	20000430 	.word	0x20000430
 8000ee0:	2000042e 	.word	0x2000042e
 8000ee4:	20000442 	.word	0x20000442
 8000ee8:	20000434 	.word	0x20000434
 8000eec:	20000432 	.word	0x20000432
 8000ef0:	20000436 	.word	0x20000436
 8000ef4:	20000438 	.word	0x20000438
 8000ef8:	2000044e 	.word	0x2000044e
 8000efc:	2000043c 	.word	0x2000043c
 8000f00:	2000043a 	.word	0x2000043a
 8000f04:	20000446 	.word	0x20000446
 8000f08:	2000043e 	.word	0x2000043e
 8000f0c:	20000452 	.word	0x20000452
 8000f10:	20000450 	.word	0x20000450

08000f14 <PT_StateMachine>:
	peak delay to the current sample.

 **********************************************************************************/

int16_t PT_StateMachine(int16_t datum)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	80fb      	strh	r3, [r7, #6]
	int16_t BeatDelay = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	81fb      	strh	r3, [r7, #14]

	uint16_t PEAKI ;

	// ------- Preprocessing filtering and Peak detection --------- //
	LPFilter(&datum);										// LowPass filtering
 8000f22:	1dbb      	adds	r3, r7, #6
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 fa53 	bl	80013d0 <LPFilter>
	HPFilter();												// HighPass filtering
 8000f2a:	f000 fad7 	bl	80014dc <HPFilter>

	PeakDtcBP(PT_dptr->HPF_val);							// Store BP signal highest peak
 8000f2e:	4b80      	ldr	r3, [pc, #512]	; (8001130 <PT_StateMachine+0x21c>)
 8000f30:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f000 fcbf 	bl	80018b8 <PeakDtcBP>
	
	DerivFilter();
 8000f3a:	f000 fb5f 	bl	80015fc <DerivFilter>
	PeakDtcDR(PT_dptr->DRF_val);							// Store the highest slope for T wave discrimination
 8000f3e:	4b7c      	ldr	r3, [pc, #496]	; (8001130 <PT_StateMachine+0x21c>)
 8000f40:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f000 fc79 	bl	800183c <PeakDtcDR>

	SQRFilter();											//Squaring
 8000f4a:	f000 fb9d 	bl	8001688 <SQRFilter>

	MVAFilter();
 8000f4e:	f000 fbd7 	bl	8001700 <MVAFilter>
	PEAKI = PeakDtcI();
 8000f52:	f000 fc47 	bl	80017e4 <PeakDtcI>
 8000f56:	4603      	mov	r3, r0
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	81bb      	strh	r3, [r7, #12]

	// ---- Integrated Peak detection checks and blankTime ---- //
	if (!PEAKI && BlankTimeCnt)								// No beat, decrement BlankTime
 8000f5c:	89bb      	ldrh	r3, [r7, #12]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d116      	bne.n	8000f90 <PT_StateMachine+0x7c>
 8000f62:	4b74      	ldr	r3, [pc, #464]	; (8001134 <PT_StateMachine+0x220>)
 8000f64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d011      	beq.n	8000f90 <PT_StateMachine+0x7c>
	{
		if (--BlankTimeCnt == 0)							// If blanktime over place the oldest peak
 8000f6c:	4b71      	ldr	r3, [pc, #452]	; (8001134 <PT_StateMachine+0x220>)
 8000f6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	3b01      	subs	r3, #1
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	b21a      	sxth	r2, r3
 8000f7a:	4b6e      	ldr	r3, [pc, #440]	; (8001134 <PT_StateMachine+0x220>)
 8000f7c:	801a      	strh	r2, [r3, #0]
 8000f7e:	4b6d      	ldr	r3, [pc, #436]	; (8001134 <PT_StateMachine+0x220>)
 8000f80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d139      	bne.n	8000ffc <PT_StateMachine+0xe8>
			PEAKI = PEAKI_temp;
 8000f88:	4b6b      	ldr	r3, [pc, #428]	; (8001138 <PT_StateMachine+0x224>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	81bb      	strh	r3, [r7, #12]
		if (--BlankTimeCnt == 0)							// If blanktime over place the oldest peak
 8000f8e:	e035      	b.n	8000ffc <PT_StateMachine+0xe8>
	}
	else if (PEAKI && !BlankTimeCnt)						// If no peak for peak for last 200msec, save the current peak
 8000f90:	89bb      	ldrh	r3, [r7, #12]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d00d      	beq.n	8000fb2 <PT_StateMachine+0x9e>
 8000f96:	4b67      	ldr	r3, [pc, #412]	; (8001134 <PT_StateMachine+0x220>)
 8000f98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d108      	bne.n	8000fb2 <PT_StateMachine+0x9e>
	{
		BlankTimeCnt = PT200MS;
 8000fa0:	4b64      	ldr	r3, [pc, #400]	; (8001134 <PT_StateMachine+0x220>)
 8000fa2:	2248      	movs	r2, #72	; 0x48
 8000fa4:	801a      	strh	r2, [r3, #0]
		PEAKI_temp   = PEAKI;
 8000fa6:	89ba      	ldrh	r2, [r7, #12]
 8000fa8:	4b63      	ldr	r3, [pc, #396]	; (8001138 <PT_StateMachine+0x224>)
 8000faa:	801a      	strh	r2, [r3, #0]
		PEAKI = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	81bb      	strh	r3, [r7, #12]
 8000fb0:	e024      	b.n	8000ffc <PT_StateMachine+0xe8>
	}
	else if(PEAKI)											// If a bigger peak comes along, store it
 8000fb2:	89bb      	ldrh	r3, [r7, #12]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d021      	beq.n	8000ffc <PT_StateMachine+0xe8>
	{
		if (PEAKI > PEAKI_temp)
 8000fb8:	89ba      	ldrh	r2, [r7, #12]
 8000fba:	4b5f      	ldr	r3, [pc, #380]	; (8001138 <PT_StateMachine+0x224>)
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d908      	bls.n	8000fd4 <PT_StateMachine+0xc0>
		{
			BlankTimeCnt = PT200MS;
 8000fc2:	4b5c      	ldr	r3, [pc, #368]	; (8001134 <PT_StateMachine+0x220>)
 8000fc4:	2248      	movs	r2, #72	; 0x48
 8000fc6:	801a      	strh	r2, [r3, #0]
			PEAKI_temp = PEAKI;
 8000fc8:	89ba      	ldrh	r2, [r7, #12]
 8000fca:	4b5b      	ldr	r3, [pc, #364]	; (8001138 <PT_StateMachine+0x224>)
 8000fcc:	801a      	strh	r2, [r3, #0]
			PEAKI = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	81bb      	strh	r3, [r7, #12]
 8000fd2:	e013      	b.n	8000ffc <PT_StateMachine+0xe8>
		}
		else if (--BlankTimeCnt == 0)
 8000fd4:	4b57      	ldr	r3, [pc, #348]	; (8001134 <PT_StateMachine+0x220>)
 8000fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	4b54      	ldr	r3, [pc, #336]	; (8001134 <PT_StateMachine+0x220>)
 8000fe4:	801a      	strh	r2, [r3, #0]
 8000fe6:	4b53      	ldr	r3, [pc, #332]	; (8001134 <PT_StateMachine+0x220>)
 8000fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d103      	bne.n	8000ff8 <PT_StateMachine+0xe4>
			PEAKI = PEAKI_temp;
 8000ff0:	4b51      	ldr	r3, [pc, #324]	; (8001138 <PT_StateMachine+0x224>)
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	81bb      	strh	r3, [r7, #12]
 8000ff6:	e001      	b.n	8000ffc <PT_StateMachine+0xe8>
		else
			PEAKI = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	81bb      	strh	r3, [r7, #12]
	}

	// -- Run Different Phases of the Algo -> Learning Ph1, 2 and decision --//
	++Count_SinceRR;
 8000ffc:	4b4f      	ldr	r3, [pc, #316]	; (800113c <PT_StateMachine+0x228>)
 8000ffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001002:	b29b      	uxth	r3, r3
 8001004:	3301      	adds	r3, #1
 8001006:	b29b      	uxth	r3, r3
 8001008:	b21a      	sxth	r2, r3
 800100a:	4b4c      	ldr	r3, [pc, #304]	; (800113c <PT_StateMachine+0x228>)
 800100c:	801a      	strh	r2, [r3, #0]
	if (PT_dptr->PT_state == START_UP || PT_dptr->PT_state == LEARN_PH_1)		
 800100e:	4b48      	ldr	r3, [pc, #288]	; (8001130 <PT_StateMachine+0x21c>)
 8001010:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d004      	beq.n	8001022 <PT_StateMachine+0x10e>
 8001018:	4b45      	ldr	r3, [pc, #276]	; (8001130 <PT_StateMachine+0x21c>)
 800101a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d10a      	bne.n	8001038 <PT_StateMachine+0x124>
	{ 
		if (PEAKI > 0)
 8001022:	89bb      	ldrh	r3, [r7, #12]
 8001024:	2b00      	cmp	r3, #0
 8001026:	f000 80c2 	beq.w	80011ae <PT_StateMachine+0x29a>
			LearningPhase1(&PEAKI, &Best_PeakBP);
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	4944      	ldr	r1, [pc, #272]	; (8001140 <PT_StateMachine+0x22c>)
 8001030:	4618      	mov	r0, r3
 8001032:	f000 f931 	bl	8001298 <LearningPhase1>
		if (PEAKI > 0)
 8001036:	e0ba      	b.n	80011ae <PT_StateMachine+0x29a>
	}
	// ---- Once learning Phase 1 done, start storing beats ---- //
	else										
	{
		// ---- Is the peak taller than ThI1 and ThF1? ---- //
		if (PEAKI > PT_dptr->ThI1 && Best_PeakBP > PT_dptr->ThF1)
 8001038:	4b3d      	ldr	r3, [pc, #244]	; (8001130 <PT_StateMachine+0x21c>)
 800103a:	8a9a      	ldrh	r2, [r3, #20]
 800103c:	89bb      	ldrh	r3, [r7, #12]
 800103e:	429a      	cmp	r2, r3
 8001040:	f080 808c 	bcs.w	800115c <PT_StateMachine+0x248>
 8001044:	4b3a      	ldr	r3, [pc, #232]	; (8001130 <PT_StateMachine+0x21c>)
 8001046:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 800104a:	4b3d      	ldr	r3, [pc, #244]	; (8001140 <PT_StateMachine+0x22c>)
 800104c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001050:	429a      	cmp	r2, r3
 8001052:	f280 8083 	bge.w	800115c <PT_StateMachine+0x248>
		{

			// ---- Initiated phase 2 ---- //
			if (PT_dptr->PT_state == LEARN_PH_2)
 8001056:	4b36      	ldr	r3, [pc, #216]	; (8001130 <PT_StateMachine+0x21c>)
 8001058:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d11d      	bne.n	800109c <PT_StateMachine+0x188>
			{
				// ----- Update Integ & BP Th ------ //
				UpdateThI(&PEAKI, 0);
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f000 fd78 	bl	8001b5c <UpdateThI>
				UpdateThF(&Best_PeakBP, 0);
 800106c:	2100      	movs	r1, #0
 800106e:	4834      	ldr	r0, [pc, #208]	; (8001140 <PT_StateMachine+0x22c>)
 8001070:	f000 fdc4 	bl	8001bfc <UpdateThF>

				// --- First RR interval --- //
				BeatDelay = GENERAL_DELAY + PT200MS;
 8001074:	237a      	movs	r3, #122	; 0x7a
 8001076:	81fb      	strh	r3, [r7, #14]
				Count_SinceRR = 0;
 8001078:	4b30      	ldr	r3, [pc, #192]	; (800113c <PT_StateMachine+0x228>)
 800107a:	2200      	movs	r2, #0
 800107c:	801a      	strh	r2, [r3, #0]
				Old_PeakDR = Best_PeakDR;
 800107e:	4b31      	ldr	r3, [pc, #196]	; (8001144 <PT_StateMachine+0x230>)
 8001080:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001084:	4b30      	ldr	r3, [pc, #192]	; (8001148 <PT_StateMachine+0x234>)
 8001086:	801a      	strh	r2, [r3, #0]
				Best_PeakDR = 0;
 8001088:	4b2e      	ldr	r3, [pc, #184]	; (8001144 <PT_StateMachine+0x230>)
 800108a:	2200      	movs	r2, #0
 800108c:	801a      	strh	r2, [r3, #0]
				Best_PeakBP = 0;
 800108e:	4b2c      	ldr	r3, [pc, #176]	; (8001140 <PT_StateMachine+0x22c>)
 8001090:	2200      	movs	r2, #0
 8001092:	801a      	strh	r2, [r3, #0]

				// --- Now we can compute RR intervals --- //
				PT_dptr->PT_state = DETECTING;
 8001094:	4b26      	ldr	r3, [pc, #152]	; (8001130 <PT_StateMachine+0x21c>)
 8001096:	2203      	movs	r2, #3
 8001098:	80da      	strh	r2, [r3, #6]
			if (PT_dptr->PT_state == LEARN_PH_2)
 800109a:	e088      	b.n	80011ae <PT_StateMachine+0x29a>
			}
			// ------ Learning phases are done! -------- //
			else
			{
			// --- T-Wave Test if RR < 360msec, is current slope lower 0.5prev_slope then noise --- //
				if (Count_SinceRR < PT360MS && (Best_PeakDR < (Old_PeakDR >> 2)))
 800109c:	4b27      	ldr	r3, [pc, #156]	; (800113c <PT_StateMachine+0x228>)
 800109e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a2:	2b81      	cmp	r3, #129	; 0x81
 80010a4:	dc14      	bgt.n	80010d0 <PT_StateMachine+0x1bc>
 80010a6:	4b28      	ldr	r3, [pc, #160]	; (8001148 <PT_StateMachine+0x234>)
 80010a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ac:	109b      	asrs	r3, r3, #2
 80010ae:	b21a      	sxth	r2, r3
 80010b0:	4b24      	ldr	r3, [pc, #144]	; (8001144 <PT_StateMachine+0x230>)
 80010b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	dd0a      	ble.n	80010d0 <PT_StateMachine+0x1bc>
				{
					// ----- Update Integ & BP Th ------ //
					UpdateThI(&PEAKI, 1);
 80010ba:	f107 030c 	add.w	r3, r7, #12
 80010be:	2101      	movs	r1, #1
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 fd4b 	bl	8001b5c <UpdateThI>
					UpdateThF(&Best_PeakBP, 1);
 80010c6:	2101      	movs	r1, #1
 80010c8:	481d      	ldr	r0, [pc, #116]	; (8001140 <PT_StateMachine+0x22c>)
 80010ca:	f000 fd97 	bl	8001bfc <UpdateThF>
			if (PT_dptr->PT_state == LEARN_PH_2)
 80010ce:	e06e      	b.n	80011ae <PT_StateMachine+0x29a>

				}
				else
				{
					// ----- Update Integ & BP Th && RR buffers ------ //
					UpdateThI(&PEAKI, 0);
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 fd40 	bl	8001b5c <UpdateThI>
					UpdateThF(&Best_PeakBP, 0);
 80010dc:	2100      	movs	r1, #0
 80010de:	4818      	ldr	r0, [pc, #96]	; (8001140 <PT_StateMachine+0x22c>)
 80010e0:	f000 fd8c 	bl	8001bfc <UpdateThF>
					UpdateRR(Count_SinceRR);
 80010e4:	4b15      	ldr	r3, [pc, #84]	; (800113c <PT_StateMachine+0x228>)
 80010e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 fc22 	bl	8001934 <UpdateRR>

					// --- Reset parameters --- //
					BeatDelay = GENERAL_DELAY + PT200MS;
 80010f0:	237a      	movs	r3, #122	; 0x7a
 80010f2:	81fb      	strh	r3, [r7, #14]
					Count_SinceRR = 0;
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <PT_StateMachine+0x228>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	801a      	strh	r2, [r3, #0]
					Old_PeakDR = Best_PeakDR;									// Store the derivative for T-wave test
 80010fa:	4b12      	ldr	r3, [pc, #72]	; (8001144 <PT_StateMachine+0x230>)
 80010fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <PT_StateMachine+0x234>)
 8001102:	801a      	strh	r2, [r3, #0]
					Best_PeakDR = Best_PeakBP = 0;
 8001104:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <PT_StateMachine+0x22c>)
 8001106:	2200      	movs	r2, #0
 8001108:	801a      	strh	r2, [r3, #0]
 800110a:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <PT_StateMachine+0x22c>)
 800110c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <PT_StateMachine+0x230>)
 8001112:	801a      	strh	r2, [r3, #0]

					SBcntI = 0;
 8001114:	4b0d      	ldr	r3, [pc, #52]	; (800114c <PT_StateMachine+0x238>)
 8001116:	2200      	movs	r2, #0
 8001118:	801a      	strh	r2, [r3, #0]
					SB_peakBP = 0;
 800111a:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <PT_StateMachine+0x23c>)
 800111c:	2200      	movs	r2, #0
 800111e:	801a      	strh	r2, [r3, #0]
					SB_peakDR = 0;
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <PT_StateMachine+0x240>)
 8001122:	2200      	movs	r2, #0
 8001124:	801a      	strh	r2, [r3, #0]
					SB_peakI = 0;
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <PT_StateMachine+0x244>)
 8001128:	2200      	movs	r2, #0
 800112a:	801a      	strh	r2, [r3, #0]
			if (PT_dptr->PT_state == LEARN_PH_2)
 800112c:	e03f      	b.n	80011ae <PT_StateMachine+0x29a>
 800112e:	bf00      	nop
 8001130:	20000304 	.word	0x20000304
 8001134:	20000436 	.word	0x20000436
 8001138:	20000444 	.word	0x20000444
 800113c:	2000042c 	.word	0x2000042c
 8001140:	20000422 	.word	0x20000422
 8001144:	20000428 	.word	0x20000428
 8001148:	2000042a 	.word	0x2000042a
 800114c:	20000438 	.word	0x20000438
 8001150:	2000043a 	.word	0x2000043a
 8001154:	2000043c 	.word	0x2000043c
 8001158:	2000044e 	.word	0x2000044e

				}
			}
		}
		// ------ If the peak is noise ------- //
		else if (PEAKI > 0)
 800115c:	89bb      	ldrh	r3, [r7, #12]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d025      	beq.n	80011ae <PT_StateMachine+0x29a>
		{
			// ----- Update Integ & BP Th ------ //
			UpdateThI(&PEAKI, 1);
 8001162:	f107 030c 	add.w	r3, r7, #12
 8001166:	2101      	movs	r1, #1
 8001168:	4618      	mov	r0, r3
 800116a:	f000 fcf7 	bl	8001b5c <UpdateThI>
			UpdateThF(&Best_PeakBP, 1);
 800116e:	2101      	movs	r1, #1
 8001170:	4840      	ldr	r0, [pc, #256]	; (8001274 <PT_StateMachine+0x360>)
 8001172:	f000 fd43 	bl	8001bfc <UpdateThF>

			// ----- Store the peak for searchback ------ //
			if (PEAKI > SB_peakI && Count_SinceRR >= PT360MS)
 8001176:	89ba      	ldrh	r2, [r7, #12]
 8001178:	4b3f      	ldr	r3, [pc, #252]	; (8001278 <PT_StateMachine+0x364>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	429a      	cmp	r2, r3
 800117e:	d916      	bls.n	80011ae <PT_StateMachine+0x29a>
 8001180:	4b3e      	ldr	r3, [pc, #248]	; (800127c <PT_StateMachine+0x368>)
 8001182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001186:	2b81      	cmp	r3, #129	; 0x81
 8001188:	dd11      	ble.n	80011ae <PT_StateMachine+0x29a>
			{
				SB_peakI = PEAKI;											// Store Integ Sig peak 
 800118a:	89ba      	ldrh	r2, [r7, #12]
 800118c:	4b3a      	ldr	r3, [pc, #232]	; (8001278 <PT_StateMachine+0x364>)
 800118e:	801a      	strh	r2, [r3, #0]
				SB_peakBP = Best_PeakBP;									// Store BP Sig peak
 8001190:	4b38      	ldr	r3, [pc, #224]	; (8001274 <PT_StateMachine+0x360>)
 8001192:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001196:	4b3a      	ldr	r3, [pc, #232]	; (8001280 <PT_StateMachine+0x36c>)
 8001198:	801a      	strh	r2, [r3, #0]
				SB_peakDR = Best_PeakDR;									// Derivative of SB point
 800119a:	4b3a      	ldr	r3, [pc, #232]	; (8001284 <PT_StateMachine+0x370>)
 800119c:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011a0:	4b39      	ldr	r3, [pc, #228]	; (8001288 <PT_StateMachine+0x374>)
 80011a2:	801a      	strh	r2, [r3, #0]
				SBcntI = Count_SinceRR;										// Store Indice
 80011a4:	4b35      	ldr	r3, [pc, #212]	; (800127c <PT_StateMachine+0x368>)
 80011a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011aa:	4b38      	ldr	r3, [pc, #224]	; (800128c <PT_StateMachine+0x378>)
 80011ac:	801a      	strh	r2, [r3, #0]
		}

	}

	// -- Do search-back if we have no beats in PT_dptr->RR_Missed_L -- //
	if (Count_SinceRR > PT_dptr->RR_Missed_L && SB_peakI > PT_dptr->ThI2 && PT_dptr->PT_state == DETECTING)
 80011ae:	4b38      	ldr	r3, [pc, #224]	; (8001290 <PT_StateMachine+0x37c>)
 80011b0:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 80011b4:	4b31      	ldr	r3, [pc, #196]	; (800127c <PT_StateMachine+0x368>)
 80011b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	da4d      	bge.n	800125a <PT_StateMachine+0x346>
 80011be:	4b34      	ldr	r3, [pc, #208]	; (8001290 <PT_StateMachine+0x37c>)
 80011c0:	8b5a      	ldrh	r2, [r3, #26]
 80011c2:	4b2d      	ldr	r3, [pc, #180]	; (8001278 <PT_StateMachine+0x364>)
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d247      	bcs.n	800125a <PT_StateMachine+0x346>
 80011ca:	4b31      	ldr	r3, [pc, #196]	; (8001290 <PT_StateMachine+0x37c>)
 80011cc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	d142      	bne.n	800125a <PT_StateMachine+0x346>
	{
		// ---- Checking the BP signal ---- //
		if (SB_peakBP > PT_dptr->ThF2)
 80011d4:	4b2e      	ldr	r3, [pc, #184]	; (8001290 <PT_StateMachine+0x37c>)
 80011d6:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 80011da:	4b29      	ldr	r3, [pc, #164]	; (8001280 <PT_StateMachine+0x36c>)
 80011dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	da3a      	bge.n	800125a <PT_StateMachine+0x346>
		{
			// ----- Update Integ & BP Th && RR buffers ------ //
			UpdateThI(&SB_peakI, 0);
 80011e4:	2100      	movs	r1, #0
 80011e6:	4824      	ldr	r0, [pc, #144]	; (8001278 <PT_StateMachine+0x364>)
 80011e8:	f000 fcb8 	bl	8001b5c <UpdateThI>
			UpdateThF(&SB_peakBP, 0);
 80011ec:	2100      	movs	r1, #0
 80011ee:	4824      	ldr	r0, [pc, #144]	; (8001280 <PT_StateMachine+0x36c>)
 80011f0:	f000 fd04 	bl	8001bfc <UpdateThF>
			UpdateRR(SBcntI);
 80011f4:	4b25      	ldr	r3, [pc, #148]	; (800128c <PT_StateMachine+0x378>)
 80011f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 fb9a 	bl	8001934 <UpdateRR>

			// --- Reset parameters --- //
			BeatDelay = Count_SinceRR = Count_SinceRR - SBcntI;
 8001200:	4b1e      	ldr	r3, [pc, #120]	; (800127c <PT_StateMachine+0x368>)
 8001202:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001206:	b29a      	uxth	r2, r3
 8001208:	4b20      	ldr	r3, [pc, #128]	; (800128c <PT_StateMachine+0x378>)
 800120a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800120e:	b29b      	uxth	r3, r3
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	b29b      	uxth	r3, r3
 8001214:	b21a      	sxth	r2, r3
 8001216:	4b19      	ldr	r3, [pc, #100]	; (800127c <PT_StateMachine+0x368>)
 8001218:	801a      	strh	r2, [r3, #0]
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <PT_StateMachine+0x368>)
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	81fb      	strh	r3, [r7, #14]
			BeatDelay += (GENERAL_DELAY + PT200MS);
 8001220:	89fb      	ldrh	r3, [r7, #14]
 8001222:	337a      	adds	r3, #122	; 0x7a
 8001224:	b29b      	uxth	r3, r3
 8001226:	81fb      	strh	r3, [r7, #14]
			Old_PeakDR = SB_peakDR;		// Store the derivative for T-wave test
 8001228:	4b17      	ldr	r3, [pc, #92]	; (8001288 <PT_StateMachine+0x374>)
 800122a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <PT_StateMachine+0x380>)
 8001230:	801a      	strh	r2, [r3, #0]
			Best_PeakDR = Best_PeakBP = 0;
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <PT_StateMachine+0x360>)
 8001234:	2200      	movs	r2, #0
 8001236:	801a      	strh	r2, [r3, #0]
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <PT_StateMachine+0x360>)
 800123a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <PT_StateMachine+0x370>)
 8001240:	801a      	strh	r2, [r3, #0]

			SBcntI = 0;
 8001242:	4b12      	ldr	r3, [pc, #72]	; (800128c <PT_StateMachine+0x378>)
 8001244:	2200      	movs	r2, #0
 8001246:	801a      	strh	r2, [r3, #0]
			SB_peakBP = 0;
 8001248:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <PT_StateMachine+0x36c>)
 800124a:	2200      	movs	r2, #0
 800124c:	801a      	strh	r2, [r3, #0]
			SB_peakDR = 0;
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <PT_StateMachine+0x374>)
 8001250:	2200      	movs	r2, #0
 8001252:	801a      	strh	r2, [r3, #0]
			SB_peakI = 0;
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <PT_StateMachine+0x364>)
 8001256:	2200      	movs	r2, #0
 8001258:	801a      	strh	r2, [r3, #0]
	}

	// ---- Emergency and Faulty Condition Reset ---- //
	// If algorithm doest not find a beat in 4sec, then it resets itself
	// and starts learning phases.
	if (Count_SinceRR > PT4000MS) {
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <PT_StateMachine+0x368>)
 800125c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001260:	2b90      	cmp	r3, #144	; 0x90
 8001262:	dd01      	ble.n	8001268 <PT_StateMachine+0x354>
		PT_init();
 8001264:	f7ff fd1e 	bl	8000ca4 <PT_init>
	}

	return (BeatDelay);
 8001268:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
	
}
 800126c:	4618      	mov	r0, r3
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000422 	.word	0x20000422
 8001278:	2000044e 	.word	0x2000044e
 800127c:	2000042c 	.word	0x2000042c
 8001280:	2000043a 	.word	0x2000043a
 8001284:	20000428 	.word	0x20000428
 8001288:	2000043c 	.word	0x2000043c
 800128c:	20000438 	.word	0x20000438
 8001290:	20000304 	.word	0x20000304
 8001294:	2000042a 	.word	0x2000042a

08001298 <LearningPhase1>:
	peaks iteratively in both Integrated Signal and BP signal.

 **********************************************************************************/

void LearningPhase1(uint16_t *pkI, int16_t *pkBP)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
	//---- Recursively compute the average and max of peaks ------ //
	if (*pkI > st_mx_pk) st_mx_pk = *pkI;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	881a      	ldrh	r2, [r3, #0]
 80012a6:	4b44      	ldr	r3, [pc, #272]	; (80013b8 <LearningPhase1+0x120>)
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d903      	bls.n	80012b6 <LearningPhase1+0x1e>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	881a      	ldrh	r2, [r3, #0]
 80012b2:	4b41      	ldr	r3, [pc, #260]	; (80013b8 <LearningPhase1+0x120>)
 80012b4:	801a      	strh	r2, [r3, #0]

	// ---- If the very first time calling this function --- //
	if (PT_dptr->PT_state == START_UP) {
 80012b6:	4b41      	ldr	r3, [pc, #260]	; (80013bc <LearningPhase1+0x124>)
 80012b8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d10c      	bne.n	80012da <LearningPhase1+0x42>
		PT_dptr->PT_state = LEARN_PH_1;
 80012c0:	4b3e      	ldr	r3, [pc, #248]	; (80013bc <LearningPhase1+0x124>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	80da      	strh	r2, [r3, #6]
		st_mean_pk = *pkI;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	881a      	ldrh	r2, [r3, #0]
 80012ca:	4b3d      	ldr	r3, [pc, #244]	; (80013c0 <LearningPhase1+0x128>)
 80012cc:	801a      	strh	r2, [r3, #0]
		st_mean_pkBP = *pkBP; 
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012d4:	4b3b      	ldr	r3, [pc, #236]	; (80013c4 <LearningPhase1+0x12c>)
 80012d6:	801a      	strh	r2, [r3, #0]
		PT_dptr->NPKF = (st_mean_pkBP >> 3);
		PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
		PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;

	}
}
 80012d8:	e067      	b.n	80013aa <LearningPhase1+0x112>
	else if(Count_SinceRR < PT2000MS){
 80012da:	4b3b      	ldr	r3, [pc, #236]	; (80013c8 <LearningPhase1+0x130>)
 80012dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e0:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 80012e4:	da16      	bge.n	8001314 <LearningPhase1+0x7c>
		st_mean_pk = (st_mean_pk + *pkI) >> 1;
 80012e6:	4b36      	ldr	r3, [pc, #216]	; (80013c0 <LearningPhase1+0x128>)
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	4413      	add	r3, r2
 80012f2:	105b      	asrs	r3, r3, #1
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	4b32      	ldr	r3, [pc, #200]	; (80013c0 <LearningPhase1+0x128>)
 80012f8:	801a      	strh	r2, [r3, #0]
		st_mean_pkBP = (st_mean_pkBP + *pkBP) >> 1;
 80012fa:	4b32      	ldr	r3, [pc, #200]	; (80013c4 <LearningPhase1+0x12c>)
 80012fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001300:	461a      	mov	r2, r3
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001308:	4413      	add	r3, r2
 800130a:	105b      	asrs	r3, r3, #1
 800130c:	b21a      	sxth	r2, r3
 800130e:	4b2d      	ldr	r3, [pc, #180]	; (80013c4 <LearningPhase1+0x12c>)
 8001310:	801a      	strh	r2, [r3, #0]
}
 8001312:	e04a      	b.n	80013aa <LearningPhase1+0x112>
		PT_dptr->PT_state = LEARN_PH_2;
 8001314:	4b29      	ldr	r3, [pc, #164]	; (80013bc <LearningPhase1+0x124>)
 8001316:	2202      	movs	r2, #2
 8001318:	80da      	strh	r2, [r3, #6]
		PT_dptr->SPKI = (st_mx_pk >> 1);
 800131a:	4b27      	ldr	r3, [pc, #156]	; (80013b8 <LearningPhase1+0x120>)
 800131c:	881b      	ldrh	r3, [r3, #0]
 800131e:	4a27      	ldr	r2, [pc, #156]	; (80013bc <LearningPhase1+0x124>)
 8001320:	085b      	lsrs	r3, r3, #1
 8001322:	b29b      	uxth	r3, r3
 8001324:	82d3      	strh	r3, [r2, #22]
		PT_dptr->NPKI = (st_mean_pk >> 3);
 8001326:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <LearningPhase1+0x128>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	4a24      	ldr	r2, [pc, #144]	; (80013bc <LearningPhase1+0x124>)
 800132c:	08db      	lsrs	r3, r3, #3
 800132e:	b29b      	uxth	r3, r3
 8001330:	8313      	strh	r3, [r2, #24]
		PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 8001332:	4b22      	ldr	r3, [pc, #136]	; (80013bc <LearningPhase1+0x124>)
 8001334:	8b1a      	ldrh	r2, [r3, #24]
 8001336:	4b21      	ldr	r3, [pc, #132]	; (80013bc <LearningPhase1+0x124>)
 8001338:	8adb      	ldrh	r3, [r3, #22]
 800133a:	4619      	mov	r1, r3
 800133c:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <LearningPhase1+0x124>)
 800133e:	8b1b      	ldrh	r3, [r3, #24]
 8001340:	1acb      	subs	r3, r1, r3
 8001342:	109b      	asrs	r3, r3, #2
 8001344:	b29b      	uxth	r3, r3
 8001346:	491d      	ldr	r1, [pc, #116]	; (80013bc <LearningPhase1+0x124>)
 8001348:	4413      	add	r3, r2
 800134a:	b29b      	uxth	r3, r3
 800134c:	828b      	strh	r3, [r1, #20]
		PT_dptr->ThI2 = PT_dptr->ThI1 >> 1;
 800134e:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <LearningPhase1+0x124>)
 8001350:	8a9b      	ldrh	r3, [r3, #20]
 8001352:	4a1a      	ldr	r2, [pc, #104]	; (80013bc <LearningPhase1+0x124>)
 8001354:	085b      	lsrs	r3, r3, #1
 8001356:	b29b      	uxth	r3, r3
 8001358:	8353      	strh	r3, [r2, #26]
		PT_dptr->SPKF = (Best_PeakBP >> 1);
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <LearningPhase1+0x134>)
 800135c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001360:	4a16      	ldr	r2, [pc, #88]	; (80013bc <LearningPhase1+0x124>)
 8001362:	105b      	asrs	r3, r3, #1
 8001364:	b21b      	sxth	r3, r3
 8001366:	83d3      	strh	r3, [r2, #30]
		PT_dptr->NPKF = (st_mean_pkBP >> 3);
 8001368:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <LearningPhase1+0x12c>)
 800136a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800136e:	4a13      	ldr	r2, [pc, #76]	; (80013bc <LearningPhase1+0x124>)
 8001370:	10db      	asrs	r3, r3, #3
 8001372:	b21b      	sxth	r3, r3
 8001374:	8413      	strh	r3, [r2, #32]
		PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 8001376:	4b11      	ldr	r3, [pc, #68]	; (80013bc <LearningPhase1+0x124>)
 8001378:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800137c:	b29a      	uxth	r2, r3
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <LearningPhase1+0x124>)
 8001380:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001384:	4619      	mov	r1, r3
 8001386:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <LearningPhase1+0x124>)
 8001388:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800138c:	1acb      	subs	r3, r1, r3
 800138e:	109b      	asrs	r3, r3, #2
 8001390:	b29b      	uxth	r3, r3
 8001392:	4413      	add	r3, r2
 8001394:	b29a      	uxth	r2, r3
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <LearningPhase1+0x124>)
 8001398:	b212      	sxth	r2, r2
 800139a:	839a      	strh	r2, [r3, #28]
		PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <LearningPhase1+0x124>)
 800139e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80013a2:	4a06      	ldr	r2, [pc, #24]	; (80013bc <LearningPhase1+0x124>)
 80013a4:	105b      	asrs	r3, r3, #1
 80013a6:	b21b      	sxth	r3, r3
 80013a8:	8453      	strh	r3, [r2, #34]	; 0x22
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000446 	.word	0x20000446
 80013bc:	20000304 	.word	0x20000304
 80013c0:	20000448 	.word	0x20000448
 80013c4:	20000440 	.word	0x20000440
 80013c8:	2000042c 	.word	0x2000042c
 80013cc:	20000422 	.word	0x20000422

080013d0 <LPFilter>:
	type employed by setting FILTER_FORM to 1 or 2. Delay of the filter is 5.

 **********************************************************************************/

void LPFilter(int16_t *val)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	// -- To avoid using modulo employ half-pointer -- //
	int16_t half_pointer, w;

	half_pointer = PT_dptr->LP_pointer - (LP_BUFFER_SIZE >> 1);
 80013d8:	4b3d      	ldr	r3, [pc, #244]	; (80014d0 <LPFilter+0x100>)
 80013da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013de:	b29b      	uxth	r3, r3
 80013e0:	3b06      	subs	r3, #6
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	81fb      	strh	r3, [r7, #14]

	if (half_pointer < 0) 
 80013e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	da03      	bge.n	80013f6 <LPFilter+0x26>
		half_pointer += LP_BUFFER_SIZE;
 80013ee:	89fb      	ldrh	r3, [r7, #14]
 80013f0:	330c      	adds	r3, #12
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	81fb      	strh	r3, [r7, #14]
#if (FILTER_FORM == 1)
		w = *val + (PT_dptr->LP_buf[1] << 1) - PT_dptr->LP_buf[0];
		*val = w - (PT_dptr->LP_buf[half_pointer] << 1) + PT_dptr->LP_buf[PT_dptr->LP_pointer];
		PT_dptr->LP_buf[PT_dptr->LP_pointer] = w;
#else
		w = (LP_y_old << 1) - LP_y_new + *val - (PT_dptr->LP_buf[half_pointer] << 1) + PT_dptr->LP_buf[PT_dptr->LP_pointer];
 80013f6:	4b37      	ldr	r3, [pc, #220]	; (80014d4 <LPFilter+0x104>)
 80013f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	b29a      	uxth	r2, r3
 8001402:	4b35      	ldr	r3, [pc, #212]	; (80014d8 <LPFilter+0x108>)
 8001404:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001408:	b29b      	uxth	r3, r3
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	b29a      	uxth	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001414:	b29b      	uxth	r3, r3
 8001416:	4413      	add	r3, r2
 8001418:	b29a      	uxth	r2, r3
 800141a:	492d      	ldr	r1, [pc, #180]	; (80014d0 <LPFilter+0x100>)
 800141c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001420:	3314      	adds	r3, #20
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	440b      	add	r3, r1
 8001426:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800142a:	b29b      	uxth	r3, r3
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	b29b      	uxth	r3, r3
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	b29a      	uxth	r2, r3
 8001434:	4926      	ldr	r1, [pc, #152]	; (80014d0 <LPFilter+0x100>)
 8001436:	4b26      	ldr	r3, [pc, #152]	; (80014d0 <LPFilter+0x100>)
 8001438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800143c:	3314      	adds	r3, #20
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	440b      	add	r3, r1
 8001442:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001446:	b29b      	uxth	r3, r3
 8001448:	4413      	add	r3, r2
 800144a:	b29b      	uxth	r3, r3
 800144c:	81bb      	strh	r3, [r7, #12]
		LP_y_new = LP_y_old;
 800144e:	4b21      	ldr	r3, [pc, #132]	; (80014d4 <LPFilter+0x104>)
 8001450:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001454:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <LPFilter+0x108>)
 8001456:	801a      	strh	r2, [r3, #0]
		LP_y_old = w;
 8001458:	4a1e      	ldr	r2, [pc, #120]	; (80014d4 <LPFilter+0x104>)
 800145a:	89bb      	ldrh	r3, [r7, #12]
 800145c:	8013      	strh	r3, [r2, #0]
		PT_dptr->LP_buf[PT_dptr->LP_pointer] = *val;
 800145e:	4a1c      	ldr	r2, [pc, #112]	; (80014d0 <LPFilter+0x100>)
 8001460:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <LPFilter+0x100>)
 8001462:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001466:	4618      	mov	r0, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800146e:	f100 0314 	add.w	r3, r0, #20
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	4413      	add	r3, r2
 8001476:	460a      	mov	r2, r1
 8001478:	80da      	strh	r2, [r3, #6]
#endif
		// --- Avoid signal overflow by gaining down ---- //
		if (w >= 0)
 800147a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800147e:	2b00      	cmp	r3, #0
 8001480:	db06      	blt.n	8001490 <LPFilter+0xc0>
			PT_dptr->LPF_val = w >> 5;
 8001482:	4a13      	ldr	r2, [pc, #76]	; (80014d0 <LPFilter+0x100>)
 8001484:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001488:	115b      	asrs	r3, r3, #5
 800148a:	b21b      	sxth	r3, r3
 800148c:	8153      	strh	r3, [r2, #10]
 800148e:	e00a      	b.n	80014a6 <LPFilter+0xd6>
		else
			PT_dptr->LPF_val = (w >> 5) | 0xF800;
 8001490:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001494:	115b      	asrs	r3, r3, #5
 8001496:	b21b      	sxth	r3, r3
 8001498:	4a0d      	ldr	r2, [pc, #52]	; (80014d0 <LPFilter+0x100>)
 800149a:	ea6f 5343 	mvn.w	r3, r3, lsl #21
 800149e:	ea6f 5353 	mvn.w	r3, r3, lsr #21
 80014a2:	b21b      	sxth	r3, r3
 80014a4:	8153      	strh	r3, [r2, #10]

		if (++PT_dptr->LP_pointer == LP_BUFFER_SIZE) 
 80014a6:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <LPFilter+0x100>)
 80014a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80014ac:	b292      	uxth	r2, r2
 80014ae:	3201      	adds	r2, #1
 80014b0:	b292      	uxth	r2, r2
 80014b2:	b212      	sxth	r2, r2
 80014b4:	801a      	strh	r2, [r3, #0]
 80014b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ba:	2b0c      	cmp	r3, #12
 80014bc:	d102      	bne.n	80014c4 <LPFilter+0xf4>
			PT_dptr->LP_pointer = 0;
 80014be:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <LPFilter+0x100>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	801a      	strh	r2, [r3, #0]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	20000304 	.word	0x20000304
 80014d4:	20000452 	.word	0x20000452
 80014d8:	20000450 	.word	0x20000450

080014dc <HPFilter>:
function implements the filter both in Direct Form I and II. Select the
type employed by setting FILTER_FORM to 1 or 2. Delay 16 samples.

**********************************************************************************/
void HPFilter(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
	// -- To avoid using modulo employ half-pointer -- //
	int16_t half_pointer, h_prev_pointer;
	half_pointer = PT_dptr->HP_pointer - (HP_BUFFER_SIZE >> 1);
 80014e2:	4b44      	ldr	r3, [pc, #272]	; (80015f4 <HPFilter+0x118>)
 80014e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	3b10      	subs	r3, #16
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	80fb      	strh	r3, [r7, #6]

	if (half_pointer < 0)
 80014f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	da03      	bge.n	8001500 <HPFilter+0x24>
		half_pointer += HP_BUFFER_SIZE;
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	3320      	adds	r3, #32
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	80fb      	strh	r3, [r7, #6]
	
	if (!half_pointer)
 8001500:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d102      	bne.n	800150e <HPFilter+0x32>
		h_prev_pointer = HP_BUFFER_SIZE - 1;
 8001508:	231f      	movs	r3, #31
 800150a:	80bb      	strh	r3, [r7, #4]
 800150c:	e003      	b.n	8001516 <HPFilter+0x3a>
	else
		h_prev_pointer = half_pointer - 1;
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	3b01      	subs	r3, #1
 8001512:	b29b      	uxth	r3, r3
 8001514:	80bb      	strh	r3, [r7, #4]
#if (FILTER_FORM == 1)
	y_h = PT_dptr->LPF_val + PT_dptr->HP_buf[0];
	PT_dptr->LPF_val = ((PT_dptr->HP_buf[PT_dptr->HP_pointer] - y_h) >> 5) + PT_dptr->HP_buf[half_pointer] - PT_dptr->HP_buf[h_prev_pointer];
	PT_dptr->HP_buf[PT_dptr->HP_pointer] = y_h;
#else
	y_h += (PT_dptr->HP_buf[PT_dptr->HP_pointer] >> 5) - (PT_dptr->LPF_val >> 5) + PT_dptr->HP_buf[half_pointer] - PT_dptr->HP_buf[h_prev_pointer];
 8001516:	4a37      	ldr	r2, [pc, #220]	; (80015f4 <HPFilter+0x118>)
 8001518:	4b36      	ldr	r3, [pc, #216]	; (80015f4 <HPFilter+0x118>)
 800151a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800151e:	3320      	adds	r3, #32
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	4413      	add	r3, r2
 8001524:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001528:	115b      	asrs	r3, r3, #5
 800152a:	b21b      	sxth	r3, r3
 800152c:	b29a      	uxth	r2, r3
 800152e:	4b31      	ldr	r3, [pc, #196]	; (80015f4 <HPFilter+0x118>)
 8001530:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001534:	115b      	asrs	r3, r3, #5
 8001536:	b21b      	sxth	r3, r3
 8001538:	b29b      	uxth	r3, r3
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	b29a      	uxth	r2, r3
 800153e:	492d      	ldr	r1, [pc, #180]	; (80015f4 <HPFilter+0x118>)
 8001540:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001544:	3320      	adds	r3, #32
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	440b      	add	r3, r1
 800154a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800154e:	b29b      	uxth	r3, r3
 8001550:	4413      	add	r3, r2
 8001552:	b29a      	uxth	r2, r3
 8001554:	4927      	ldr	r1, [pc, #156]	; (80015f4 <HPFilter+0x118>)
 8001556:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800155a:	3320      	adds	r3, #32
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	440b      	add	r3, r1
 8001560:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001564:	b29b      	uxth	r3, r3
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	b29a      	uxth	r2, r3
 800156a:	4b23      	ldr	r3, [pc, #140]	; (80015f8 <HPFilter+0x11c>)
 800156c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001570:	b29b      	uxth	r3, r3
 8001572:	4413      	add	r3, r2
 8001574:	b29b      	uxth	r3, r3
 8001576:	b21a      	sxth	r2, r3
 8001578:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <HPFilter+0x11c>)
 800157a:	801a      	strh	r2, [r3, #0]
	PT_dptr->HP_buf[PT_dptr->HP_pointer] = PT_dptr->LPF_val;
 800157c:	4b1d      	ldr	r3, [pc, #116]	; (80015f4 <HPFilter+0x118>)
 800157e:	4a1d      	ldr	r2, [pc, #116]	; (80015f4 <HPFilter+0x118>)
 8001580:	491c      	ldr	r1, [pc, #112]	; (80015f4 <HPFilter+0x118>)
 8001582:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8001586:	4608      	mov	r0, r1
 8001588:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800158c:	f100 0320 	add.w	r3, r0, #32
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	4413      	add	r3, r2
 8001594:	460a      	mov	r2, r1
 8001596:	80da      	strh	r2, [r3, #6]
	
#endif
	// ------- Again slightly gaining down --------- //
	if (y_h >= 0)
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <HPFilter+0x11c>)
 800159a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	db07      	blt.n	80015b2 <HPFilter+0xd6>
		PT_dptr->HPF_val = (y_h >> 1);
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <HPFilter+0x11c>)
 80015a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a8:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <HPFilter+0x118>)
 80015aa:	105b      	asrs	r3, r3, #1
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	8193      	strh	r3, [r2, #12]
 80015b0:	e00b      	b.n	80015ca <HPFilter+0xee>
	else
		PT_dptr->HPF_val = (y_h >> 1) | 0xF800;
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HPFilter+0x11c>)
 80015b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b8:	105b      	asrs	r3, r3, #1
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	4a0d      	ldr	r2, [pc, #52]	; (80015f4 <HPFilter+0x118>)
 80015be:	ea6f 5343 	mvn.w	r3, r3, lsl #21
 80015c2:	ea6f 5353 	mvn.w	r3, r3, lsr #21
 80015c6:	b21b      	sxth	r3, r3
 80015c8:	8193      	strh	r3, [r2, #12]

	if (++PT_dptr->HP_pointer == HP_BUFFER_SIZE) PT_dptr->HP_pointer = 0;
 80015ca:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <HPFilter+0x118>)
 80015cc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80015d0:	b292      	uxth	r2, r2
 80015d2:	3201      	adds	r2, #1
 80015d4:	b292      	uxth	r2, r2
 80015d6:	b212      	sxth	r2, r2
 80015d8:	805a      	strh	r2, [r3, #2]
 80015da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015de:	2b20      	cmp	r3, #32
 80015e0:	d102      	bne.n	80015e8 <HPFilter+0x10c>
 80015e2:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <HPFilter+0x118>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	805a      	strh	r2, [r3, #2]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	20000304 	.word	0x20000304
 80015f8:	2000043e 	.word	0x2000043e

080015fc <DerivFilter>:
y[n] = 1/8(2x[n] + x[n - 1] - x[n - 3] - 2x[n - 4]) . Delay 2 samples.

**********************************************************************************/

void DerivFilter(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
	// --- Since it is only a 5 point derivative filter we avoid using pointers and half pointers for further efficieny ---- //
	int16_t w;

	w = PT_dptr->DR_buf[0] - PT_dptr->DR_buf[2];
 8001602:	4b20      	ldr	r3, [pc, #128]	; (8001684 <DerivFilter+0x88>)
 8001604:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	; 0x86
 8001608:	b29a      	uxth	r2, r3
 800160a:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <DerivFilter+0x88>)
 800160c:	f9b3 308a 	ldrsh.w	r3, [r3, #138]	; 0x8a
 8001610:	b29b      	uxth	r3, r3
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	b29b      	uxth	r3, r3
 8001616:	80fb      	strh	r3, [r7, #6]
	w += ((PT_dptr->HPF_val - PT_dptr->DR_buf[3]) << 1);
 8001618:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <DerivFilter+0x88>)
 800161a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800161e:	b29a      	uxth	r2, r3
 8001620:	4b18      	ldr	r3, [pc, #96]	; (8001684 <DerivFilter+0x88>)
 8001622:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8001626:	b29b      	uxth	r3, r3
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	b29b      	uxth	r3, r3
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	b29a      	uxth	r2, r3
 8001630:	88fb      	ldrh	r3, [r7, #6]
 8001632:	4413      	add	r3, r2
 8001634:	b29b      	uxth	r3, r3
 8001636:	80fb      	strh	r3, [r7, #6]
	w >>= 3;
 8001638:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800163c:	10db      	asrs	r3, r3, #3
 800163e:	80fb      	strh	r3, [r7, #6]
	PT_dptr->DR_buf[3] = PT_dptr->DR_buf[2];
 8001640:	4a10      	ldr	r2, [pc, #64]	; (8001684 <DerivFilter+0x88>)
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <DerivFilter+0x88>)
 8001644:	f9b2 208a 	ldrsh.w	r2, [r2, #138]	; 0x8a
 8001648:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	PT_dptr->DR_buf[2] = PT_dptr->DR_buf[1];
 800164c:	4a0d      	ldr	r2, [pc, #52]	; (8001684 <DerivFilter+0x88>)
 800164e:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <DerivFilter+0x88>)
 8001650:	f9b2 2088 	ldrsh.w	r2, [r2, #136]	; 0x88
 8001654:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	PT_dptr->DR_buf[1] = PT_dptr->DR_buf[0];
 8001658:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <DerivFilter+0x88>)
 800165a:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <DerivFilter+0x88>)
 800165c:	f9b2 2086 	ldrsh.w	r2, [r2, #134]	; 0x86
 8001660:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	PT_dptr->DR_buf[0] = PT_dptr->HPF_val;
 8001664:	4a07      	ldr	r2, [pc, #28]	; (8001684 <DerivFilter+0x88>)
 8001666:	4b07      	ldr	r3, [pc, #28]	; (8001684 <DerivFilter+0x88>)
 8001668:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800166c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	PT_dptr->DRF_val = w;
 8001670:	4a04      	ldr	r2, [pc, #16]	; (8001684 <DerivFilter+0x88>)
 8001672:	88fb      	ldrh	r3, [r7, #6]
 8001674:	81d3      	strh	r3, [r2, #14]
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	20000304 	.word	0x20000304

08001688 <SQRFilter>:
Description: Squares the signal based on Pan-Tompkins Eq. 10,
y[n] = x[n]^2. No delay.

**********************************************************************************/
void SQRFilter(void)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
	// ------------ Avoiding Overflow -------------- //
	uint16_t temp;
	if (PT_dptr->DRF_val > SQR_LIM_VAL || PT_dptr->DRF_val < (-SQR_LIM_VAL))
 800168e:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <SQRFilter+0x74>)
 8001690:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001698:	dc05      	bgt.n	80016a6 <SQRFilter+0x1e>
 800169a:	4b18      	ldr	r3, [pc, #96]	; (80016fc <SQRFilter+0x74>)
 800169c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80016a0:	f513 7f80 	cmn.w	r3, #256	; 0x100
 80016a4:	da04      	bge.n	80016b0 <SQRFilter+0x28>
		PT_dptr->SQF_val = UINT16_MAX;
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <SQRFilter+0x74>)
 80016a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016ac:	821a      	strh	r2, [r3, #16]
 80016ae:	e015      	b.n	80016dc <SQRFilter+0x54>
	else
	{
		if (PT_dptr->DRF_val < 0)
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <SQRFilter+0x74>)
 80016b2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	da06      	bge.n	80016c8 <SQRFilter+0x40>
			temp = (uint16_t)(-PT_dptr->DRF_val);
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <SQRFilter+0x74>)
 80016bc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	425b      	negs	r3, r3
 80016c4:	80fb      	strh	r3, [r7, #6]
 80016c6:	e003      	b.n	80016d0 <SQRFilter+0x48>
		else
			temp = (uint16_t)(PT_dptr->DRF_val);
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <SQRFilter+0x74>)
 80016ca:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80016ce:	80fb      	strh	r3, [r7, #6]
		PT_dptr->SQF_val = temp*temp;
 80016d0:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <SQRFilter+0x74>)
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	fb13 f303 	smulbb	r3, r3, r3
 80016d8:	b29b      	uxth	r3, r3
 80016da:	8213      	strh	r3, [r2, #16]
	}

	if (PT_dptr->SQF_val > SQR_LIM_OUT)
 80016dc:	4b07      	ldr	r3, [pc, #28]	; (80016fc <SQRFilter+0x74>)
 80016de:	8a1b      	ldrh	r3, [r3, #16]
 80016e0:	f247 5230 	movw	r2, #30000	; 0x7530
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d903      	bls.n	80016f0 <SQRFilter+0x68>
		PT_dptr->SQF_val = SQR_LIM_OUT;
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <SQRFilter+0x74>)
 80016ea:	f247 5230 	movw	r2, #30000	; 0x7530
 80016ee:	821a      	strh	r2, [r3, #16]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	20000304 	.word	0x20000304

08001700 <MVAFilter>:
Description: Computes the rolling moving average of the input signal
based on Eq. 11 of Pan-Tompkins, y[n] = (1/N)[sum(x[1]+...+x[N])]. Delay 15 Samples.

**********************************************************************************/
void MVAFilter(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
	//---- The MV_sum can easily overflow so we limit the bound by uint16 precision ------ //
	if (MV_sum < (UINT16_MAX - PT_dptr->SQF_val))
 8001704:	4b34      	ldr	r3, [pc, #208]	; (80017d8 <MVAFilter+0xd8>)
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	4b34      	ldr	r3, [pc, #208]	; (80017dc <MVAFilter+0xdc>)
 800170c:	8a1b      	ldrh	r3, [r3, #16]
 800170e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001712:	33ff      	adds	r3, #255	; 0xff
 8001714:	429a      	cmp	r2, r3
 8001716:	da08      	bge.n	800172a <MVAFilter+0x2a>
		MV_sum += PT_dptr->SQF_val;
 8001718:	4b30      	ldr	r3, [pc, #192]	; (80017dc <MVAFilter+0xdc>)
 800171a:	8a1a      	ldrh	r2, [r3, #16]
 800171c:	4b2e      	ldr	r3, [pc, #184]	; (80017d8 <MVAFilter+0xd8>)
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	4413      	add	r3, r2
 8001722:	b29a      	uxth	r2, r3
 8001724:	4b2c      	ldr	r3, [pc, #176]	; (80017d8 <MVAFilter+0xd8>)
 8001726:	801a      	strh	r2, [r3, #0]
 8001728:	e003      	b.n	8001732 <MVAFilter+0x32>
	else
		MV_sum = UINT16_MAX;
 800172a:	4b2b      	ldr	r3, [pc, #172]	; (80017d8 <MVAFilter+0xd8>)
 800172c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001730:	801a      	strh	r2, [r3, #0]

	if (MV_sum > PT_dptr->MVA_buf[PT_dptr->MVA_pointer])
 8001732:	4a2a      	ldr	r2, [pc, #168]	; (80017dc <MVAFilter+0xdc>)
 8001734:	4b29      	ldr	r3, [pc, #164]	; (80017dc <MVAFilter+0xdc>)
 8001736:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800173a:	3344      	adds	r3, #68	; 0x44
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	4413      	add	r3, r2
 8001740:	88da      	ldrh	r2, [r3, #6]
 8001742:	4b25      	ldr	r3, [pc, #148]	; (80017d8 <MVAFilter+0xd8>)
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d20e      	bcs.n	8001768 <MVAFilter+0x68>
		MV_sum -= PT_dptr->MVA_buf[PT_dptr->MVA_pointer];
 800174a:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <MVAFilter+0xd8>)
 800174c:	881a      	ldrh	r2, [r3, #0]
 800174e:	4923      	ldr	r1, [pc, #140]	; (80017dc <MVAFilter+0xdc>)
 8001750:	4b22      	ldr	r3, [pc, #136]	; (80017dc <MVAFilter+0xdc>)
 8001752:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001756:	3344      	adds	r3, #68	; 0x44
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	440b      	add	r3, r1
 800175c:	88db      	ldrh	r3, [r3, #6]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	b29a      	uxth	r2, r3
 8001762:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <MVAFilter+0xd8>)
 8001764:	801a      	strh	r2, [r3, #0]
 8001766:	e002      	b.n	800176e <MVAFilter+0x6e>
	else
		MV_sum = 0;
 8001768:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <MVAFilter+0xd8>)
 800176a:	2200      	movs	r2, #0
 800176c:	801a      	strh	r2, [r3, #0]

	PT_dptr->MVA_buf[PT_dptr->MVA_pointer] = PT_dptr->SQF_val;
 800176e:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <MVAFilter+0xdc>)
 8001770:	4a1a      	ldr	r2, [pc, #104]	; (80017dc <MVAFilter+0xdc>)
 8001772:	491a      	ldr	r1, [pc, #104]	; (80017dc <MVAFilter+0xdc>)
 8001774:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8001778:	4608      	mov	r0, r1
 800177a:	8a19      	ldrh	r1, [r3, #16]
 800177c:	f100 0344 	add.w	r3, r0, #68	; 0x44
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	4413      	add	r3, r2
 8001784:	460a      	mov	r2, r1
 8001786:	80da      	strh	r2, [r3, #6]

	PT_dptr->MVA_val = MV_sum/(uint16_t) MVA_BUFFER_SIZE;
 8001788:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <MVAFilter+0xd8>)
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	4a13      	ldr	r2, [pc, #76]	; (80017dc <MVAFilter+0xdc>)
 800178e:	085b      	lsrs	r3, r3, #1
 8001790:	4913      	ldr	r1, [pc, #76]	; (80017e0 <MVAFilter+0xe0>)
 8001792:	fba1 1303 	umull	r1, r3, r1, r3
 8001796:	08db      	lsrs	r3, r3, #3
 8001798:	b29b      	uxth	r3, r3
 800179a:	8253      	strh	r3, [r2, #18]

	if (PT_dptr->MVA_val > MVA_LIM_VAL)
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <MVAFilter+0xdc>)
 800179e:	8a5b      	ldrh	r3, [r3, #18]
 80017a0:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80017a4:	d903      	bls.n	80017ae <MVAFilter+0xae>
		PT_dptr->MVA_val = MVA_LIM_VAL;
 80017a6:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <MVAFilter+0xdc>)
 80017a8:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80017ac:	825a      	strh	r2, [r3, #18]

	if (++PT_dptr->MVA_pointer == MVA_BUFFER_SIZE) 
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <MVAFilter+0xdc>)
 80017b0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80017b4:	b292      	uxth	r2, r2
 80017b6:	3201      	adds	r2, #1
 80017b8:	b292      	uxth	r2, r2
 80017ba:	b212      	sxth	r2, r2
 80017bc:	809a      	strh	r2, [r3, #4]
 80017be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017c2:	2b36      	cmp	r3, #54	; 0x36
 80017c4:	d102      	bne.n	80017cc <MVAFilter+0xcc>
		PT_dptr->MVA_pointer = 0;
 80017c6:	4b05      	ldr	r3, [pc, #20]	; (80017dc <MVAFilter+0xdc>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	809a      	strh	r2, [r3, #4]
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	20000442 	.word	0x20000442
 80017dc:	20000304 	.word	0x20000304
 80017e0:	4bda12f7 	.word	0x4bda12f7

080017e4 <PeakDtcI>:
If the signal changes sign the value of the peak is asssumed ot be a peak.
if x[n-1] <= x[n] > x[n+1], then x[n] is a peak.

**********************************************************************************/
int16_t PeakDtcI(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
	int16_t p;
	// ---------- Local maxima or not --------- //
	if (PT_dptr->MVA_val <= Prev_val && Prev_val > Prev_Prev_val) {
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <PeakDtcI+0x4c>)
 80017ec:	8a5a      	ldrh	r2, [r3, #18]
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <PeakDtcI+0x50>)
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d809      	bhi.n	800180a <PeakDtcI+0x26>
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <PeakDtcI+0x50>)
 80017f8:	881a      	ldrh	r2, [r3, #0]
 80017fa:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <PeakDtcI+0x54>)
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d903      	bls.n	800180a <PeakDtcI+0x26>
		p = Prev_val;
 8001802:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <PeakDtcI+0x50>)
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	80fb      	strh	r3, [r7, #6]
 8001808:	e001      	b.n	800180e <PeakDtcI+0x2a>
	}
	else {
		p = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	80fb      	strh	r3, [r7, #6]
	}
	Prev_Prev_val = Prev_val;
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <PeakDtcI+0x50>)
 8001810:	881a      	ldrh	r2, [r3, #0]
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <PeakDtcI+0x54>)
 8001814:	801a      	strh	r2, [r3, #0]
	Prev_val = PT_dptr->MVA_val;
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <PeakDtcI+0x4c>)
 8001818:	8a5a      	ldrh	r2, [r3, #18]
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <PeakDtcI+0x50>)
 800181c:	801a      	strh	r2, [r3, #0]

	return (p);
 800181e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001822:	4618      	mov	r0, r3
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	20000304 	.word	0x20000304
 8001834:	2000044a 	.word	0x2000044a
 8001838:	2000044c 	.word	0x2000044c

0800183c <PeakDtcDR>:
For T-wave discrimination see T-wave identification of the paper.
if x[n-1] <= x[n] > x[n+1], then x[n] is a peak.

**********************************************************************************/
void PeakDtcDR(int16_t DR_sample)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	80fb      	strh	r3, [r7, #6]
	if (DR_sample < 0) DR_sample = -DR_sample;
 8001846:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800184a:	2b00      	cmp	r3, #0
 800184c:	da03      	bge.n	8001856 <PeakDtcDR+0x1a>
 800184e:	88fb      	ldrh	r3, [r7, #6]
 8001850:	425b      	negs	r3, r3
 8001852:	b29b      	uxth	r3, r3
 8001854:	80fb      	strh	r3, [r7, #6]
	// ---------- Local maxima or not --------- //
	if (DR_sample <= Prev_valDR && Prev_valDR > Prev_Prev_valDR) {
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <PeakDtcDR+0x70>)
 8001858:	f9b3 3000 	ldrsh.w	r3, [r3]
 800185c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001860:	429a      	cmp	r2, r3
 8001862:	dc14      	bgt.n	800188e <PeakDtcDR+0x52>
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <PeakDtcDR+0x70>)
 8001866:	f9b3 2000 	ldrsh.w	r2, [r3]
 800186a:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <PeakDtcDR+0x74>)
 800186c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001870:	429a      	cmp	r2, r3
 8001872:	dd0c      	ble.n	800188e <PeakDtcDR+0x52>
		//-- For T-wave discrimination store the highest slope -- //
		if (Prev_valDR > Best_PeakDR) Best_PeakDR = Prev_valDR;
 8001874:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <PeakDtcDR+0x70>)
 8001876:	f9b3 2000 	ldrsh.w	r2, [r3]
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <PeakDtcDR+0x78>)
 800187c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001880:	429a      	cmp	r2, r3
 8001882:	dd04      	ble.n	800188e <PeakDtcDR+0x52>
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <PeakDtcDR+0x70>)
 8001886:	f9b3 2000 	ldrsh.w	r2, [r3]
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <PeakDtcDR+0x78>)
 800188c:	801a      	strh	r2, [r3, #0]
	}
	Prev_Prev_valDR = Prev_valDR;
 800188e:	4b07      	ldr	r3, [pc, #28]	; (80018ac <PeakDtcDR+0x70>)
 8001890:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <PeakDtcDR+0x74>)
 8001896:	801a      	strh	r2, [r3, #0]
	Prev_valDR = DR_sample;
 8001898:	4a04      	ldr	r2, [pc, #16]	; (80018ac <PeakDtcDR+0x70>)
 800189a:	88fb      	ldrh	r3, [r7, #6]
 800189c:	8013      	strh	r3, [r2, #0]
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20000424 	.word	0x20000424
 80018b0:	20000426 	.word	0x20000426
 80018b4:	20000428 	.word	0x20000428

080018b8 <PeakDtcBP>:
against adaptive thresholds.
if x[n-1] <= x[n] > x[n+1], then x[n] is a peak.

**********************************************************************************/
void PeakDtcBP(int16_t DR_sample)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	80fb      	strh	r3, [r7, #6]
	if (DR_sample < 0) DR_sample = -DR_sample;
 80018c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	da03      	bge.n	80018d2 <PeakDtcBP+0x1a>
 80018ca:	88fb      	ldrh	r3, [r7, #6]
 80018cc:	425b      	negs	r3, r3
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	80fb      	strh	r3, [r7, #6]
	// ---------- Local maxima or not --------- //
	if (DR_sample <= Prev_valBP && Prev_valBP > Prev_Prev_valBP) {
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <PeakDtcBP+0x70>)
 80018d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80018dc:	429a      	cmp	r2, r3
 80018de:	dc14      	bgt.n	800190a <PeakDtcBP+0x52>
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <PeakDtcBP+0x70>)
 80018e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <PeakDtcBP+0x74>)
 80018e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	dd0c      	ble.n	800190a <PeakDtcBP+0x52>
		//-- For T-wave discrimination store the highest slope -- //
		if (Prev_valBP > Best_PeakBP) Best_PeakBP = Prev_valBP;
 80018f0:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <PeakDtcBP+0x70>)
 80018f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <PeakDtcBP+0x78>)
 80018f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	dd04      	ble.n	800190a <PeakDtcBP+0x52>
 8001900:	4b09      	ldr	r3, [pc, #36]	; (8001928 <PeakDtcBP+0x70>)
 8001902:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001906:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <PeakDtcBP+0x78>)
 8001908:	801a      	strh	r2, [r3, #0]
	}
	Prev_Prev_valBP = Prev_valBP;
 800190a:	4b07      	ldr	r3, [pc, #28]	; (8001928 <PeakDtcBP+0x70>)
 800190c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <PeakDtcBP+0x74>)
 8001912:	801a      	strh	r2, [r3, #0]
	Prev_valBP = DR_sample;
 8001914:	4a04      	ldr	r2, [pc, #16]	; (8001928 <PeakDtcBP+0x70>)
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	8013      	strh	r3, [r2, #0]
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	2000041e 	.word	0x2000041e
 800192c:	20000420 	.word	0x20000420
 8001930:	20000422 	.word	0x20000422

08001934 <UpdateRR>:
RR_High_Lim		= 1.16*RR_M = ((116/100) * RR_M) = RR_M + (4/25)*RR_M
RR_Missed_Lim	= 1.66*RR_M = ((166/100) * RR_M) = RR_M + (33/50)*RR_M

**********************************************************************************/
void UpdateRR(int16_t qrs)
{   
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	80fb      	strh	r3, [r7, #6]
	// ---------- Update most 8 Recent RR mean Interval------------- //
	RR1_sum += qrs;
 800193e:	4b81      	ldr	r3, [pc, #516]	; (8001b44 <UpdateRR+0x210>)
 8001940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001944:	b29a      	uxth	r2, r3
 8001946:	88fb      	ldrh	r3, [r7, #6]
 8001948:	4413      	add	r3, r2
 800194a:	b29b      	uxth	r3, r3
 800194c:	b21a      	sxth	r2, r3
 800194e:	4b7d      	ldr	r3, [pc, #500]	; (8001b44 <UpdateRR+0x210>)
 8001950:	801a      	strh	r2, [r3, #0]
	RR1_sum -= PT_dptr->RR_AVRG1_buf[RR1_p];
 8001952:	4b7c      	ldr	r3, [pc, #496]	; (8001b44 <UpdateRR+0x210>)
 8001954:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001958:	b29a      	uxth	r2, r3
 800195a:	497b      	ldr	r1, [pc, #492]	; (8001b48 <UpdateRR+0x214>)
 800195c:	4b7b      	ldr	r3, [pc, #492]	; (8001b4c <UpdateRR+0x218>)
 800195e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001962:	337c      	adds	r3, #124	; 0x7c
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	440b      	add	r3, r1
 8001968:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800196c:	b29b      	uxth	r3, r3
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	b29b      	uxth	r3, r3
 8001972:	b21a      	sxth	r2, r3
 8001974:	4b73      	ldr	r3, [pc, #460]	; (8001b44 <UpdateRR+0x210>)
 8001976:	801a      	strh	r2, [r3, #0]

	PT_dptr->RR_AVRG1_buf[RR1_p] = qrs;
 8001978:	4a73      	ldr	r2, [pc, #460]	; (8001b48 <UpdateRR+0x214>)
 800197a:	4b74      	ldr	r3, [pc, #464]	; (8001b4c <UpdateRR+0x218>)
 800197c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001980:	337c      	adds	r3, #124	; 0x7c
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4413      	add	r3, r2
 8001986:	88fa      	ldrh	r2, [r7, #6]
 8001988:	805a      	strh	r2, [r3, #2]
	PT_dptr->Recent_RR_M = RR1_sum/RR_BUFFER_SIZE; 
 800198a:	4b6e      	ldr	r3, [pc, #440]	; (8001b44 <UpdateRR+0x210>)
 800198c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001990:	4a6d      	ldr	r2, [pc, #436]	; (8001b48 <UpdateRR+0x214>)
 8001992:	2b00      	cmp	r3, #0
 8001994:	da00      	bge.n	8001998 <UpdateRR+0x64>
 8001996:	3307      	adds	r3, #7
 8001998:	10db      	asrs	r3, r3, #3
 800199a:	b21b      	sxth	r3, r3
 800199c:	8113      	strh	r3, [r2, #8]
	if (++RR1_p == RR_BUFFER_SIZE) 
 800199e:	4b6b      	ldr	r3, [pc, #428]	; (8001b4c <UpdateRR+0x218>)
 80019a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	3301      	adds	r3, #1
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	b21a      	sxth	r2, r3
 80019ac:	4b67      	ldr	r3, [pc, #412]	; (8001b4c <UpdateRR+0x218>)
 80019ae:	801a      	strh	r2, [r3, #0]
 80019b0:	4b66      	ldr	r3, [pc, #408]	; (8001b4c <UpdateRR+0x218>)
 80019b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b6:	2b08      	cmp	r3, #8
 80019b8:	d102      	bne.n	80019c0 <UpdateRR+0x8c>
		RR1_p = 0;
 80019ba:	4b64      	ldr	r3, [pc, #400]	; (8001b4c <UpdateRR+0x218>)
 80019bc:	2200      	movs	r2, #0
 80019be:	801a      	strh	r2, [r3, #0]



	// ------ Update Selected Beat RR mean if qrs in range --------- //
	if (qrs >= PT_dptr->RR_Low_L && qrs <= PT_dptr->RR_High_L) {
 80019c0:	4b61      	ldr	r3, [pc, #388]	; (8001b48 <UpdateRR+0x214>)
 80019c2:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80019c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	f2c0 808c 	blt.w	8001ae8 <UpdateRR+0x1b4>
 80019d0:	4b5d      	ldr	r3, [pc, #372]	; (8001b48 <UpdateRR+0x214>)
 80019d2:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80019d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80019da:	429a      	cmp	r2, r3
 80019dc:	f300 8084 	bgt.w	8001ae8 <UpdateRR+0x1b4>
		// ------ Update selective RR mean ----- //
		RR2_sum += qrs;
 80019e0:	4b5b      	ldr	r3, [pc, #364]	; (8001b50 <UpdateRR+0x21c>)
 80019e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	88fb      	ldrh	r3, [r7, #6]
 80019ea:	4413      	add	r3, r2
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	b21a      	sxth	r2, r3
 80019f0:	4b57      	ldr	r3, [pc, #348]	; (8001b50 <UpdateRR+0x21c>)
 80019f2:	801a      	strh	r2, [r3, #0]
		RR2_sum -= PT_dptr->RR_AVRG2_buf[RR2_p];
 80019f4:	4b56      	ldr	r3, [pc, #344]	; (8001b50 <UpdateRR+0x21c>)
 80019f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	4952      	ldr	r1, [pc, #328]	; (8001b48 <UpdateRR+0x214>)
 80019fe:	4b55      	ldr	r3, [pc, #340]	; (8001b54 <UpdateRR+0x220>)
 8001a00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a04:	3384      	adds	r3, #132	; 0x84
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	440b      	add	r3, r1
 8001a0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	b21a      	sxth	r2, r3
 8001a16:	4b4e      	ldr	r3, [pc, #312]	; (8001b50 <UpdateRR+0x21c>)
 8001a18:	801a      	strh	r2, [r3, #0]

		PT_dptr->RR_AVRG2_buf[RR2_p] = qrs;
 8001a1a:	4a4b      	ldr	r2, [pc, #300]	; (8001b48 <UpdateRR+0x214>)
 8001a1c:	4b4d      	ldr	r3, [pc, #308]	; (8001b54 <UpdateRR+0x220>)
 8001a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a22:	3384      	adds	r3, #132	; 0x84
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	4413      	add	r3, r2
 8001a28:	88fa      	ldrh	r2, [r7, #6]
 8001a2a:	805a      	strh	r2, [r3, #2]
		PT_dptr->RR_M = RR2_sum / RR_BUFFER_SIZE;
 8001a2c:	4b48      	ldr	r3, [pc, #288]	; (8001b50 <UpdateRR+0x21c>)
 8001a2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a32:	4a45      	ldr	r2, [pc, #276]	; (8001b48 <UpdateRR+0x214>)
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	da00      	bge.n	8001a3a <UpdateRR+0x106>
 8001a38:	3307      	adds	r3, #7
 8001a3a:	10db      	asrs	r3, r3, #3
 8001a3c:	b21b      	sxth	r3, r3
 8001a3e:	8493      	strh	r3, [r2, #36]	; 0x24
		if (++RR2_p == RR_BUFFER_SIZE) 
 8001a40:	4b44      	ldr	r3, [pc, #272]	; (8001b54 <UpdateRR+0x220>)
 8001a42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	3301      	adds	r3, #1
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	b21a      	sxth	r2, r3
 8001a4e:	4b41      	ldr	r3, [pc, #260]	; (8001b54 <UpdateRR+0x220>)
 8001a50:	801a      	strh	r2, [r3, #0]
 8001a52:	4b40      	ldr	r3, [pc, #256]	; (8001b54 <UpdateRR+0x220>)
 8001a54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a58:	2b08      	cmp	r3, #8
 8001a5a:	d102      	bne.n	8001a62 <UpdateRR+0x12e>
			RR2_p = 0;
 8001a5c:	4b3d      	ldr	r3, [pc, #244]	; (8001b54 <UpdateRR+0x220>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	801a      	strh	r2, [r3, #0]

		// --------- Update Limits ------------ //
		PT_dptr->RR_Low_L = PT_dptr->Recent_RR_M - (PT_dptr->Recent_RR_M << 1) / 25;
 8001a62:	4b39      	ldr	r3, [pc, #228]	; (8001b48 <UpdateRR+0x214>)
 8001a64:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	4b37      	ldr	r3, [pc, #220]	; (8001b48 <UpdateRR+0x214>)
 8001a6c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4939      	ldr	r1, [pc, #228]	; (8001b58 <UpdateRR+0x224>)
 8001a74:	fb81 0103 	smull	r0, r1, r1, r3
 8001a78:	10c9      	asrs	r1, r1, #3
 8001a7a:	17db      	asrs	r3, r3, #31
 8001a7c:	1a5b      	subs	r3, r3, r1
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	4413      	add	r3, r2
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	4b30      	ldr	r3, [pc, #192]	; (8001b48 <UpdateRR+0x214>)
 8001a86:	b212      	sxth	r2, r2
 8001a88:	84da      	strh	r2, [r3, #38]	; 0x26
		PT_dptr->RR_High_L = PT_dptr->Recent_RR_M + (PT_dptr->Recent_RR_M << 2) / 25;
 8001a8a:	4b2f      	ldr	r3, [pc, #188]	; (8001b48 <UpdateRR+0x214>)
 8001a8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	4b2d      	ldr	r3, [pc, #180]	; (8001b48 <UpdateRR+0x214>)
 8001a94:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	492f      	ldr	r1, [pc, #188]	; (8001b58 <UpdateRR+0x224>)
 8001a9c:	fb81 0103 	smull	r0, r1, r1, r3
 8001aa0:	10c9      	asrs	r1, r1, #3
 8001aa2:	17db      	asrs	r3, r3, #31
 8001aa4:	1acb      	subs	r3, r1, r3
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	4b26      	ldr	r3, [pc, #152]	; (8001b48 <UpdateRR+0x214>)
 8001aae:	b212      	sxth	r2, r2
 8001ab0:	851a      	strh	r2, [r3, #40]	; 0x28
		PT_dptr->RR_Missed_L = PT_dptr->RR_M + (PT_dptr->RR_M * 33) / 50;
 8001ab2:	4b25      	ldr	r3, [pc, #148]	; (8001b48 <UpdateRR+0x214>)
 8001ab4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	4b23      	ldr	r3, [pc, #140]	; (8001b48 <UpdateRR+0x214>)
 8001abc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	015b      	lsls	r3, r3, #5
 8001ac6:	440b      	add	r3, r1
 8001ac8:	4923      	ldr	r1, [pc, #140]	; (8001b58 <UpdateRR+0x224>)
 8001aca:	fb81 0103 	smull	r0, r1, r1, r3
 8001ace:	1109      	asrs	r1, r1, #4
 8001ad0:	17db      	asrs	r3, r3, #31
 8001ad2:	1acb      	subs	r3, r1, r3
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <UpdateRR+0x214>)
 8001adc:	b212      	sxth	r2, r2
 8001ade:	855a      	strh	r2, [r3, #42]	; 0x2a
		PT_dptr->HR_State = REGULAR_HR;
 8001ae0:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <UpdateRR+0x214>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	859a      	strh	r2, [r3, #44]	; 0x2c
 8001ae6:	e027      	b.n	8001b38 <UpdateRR+0x204>
	}
	// -------- Irregular heart-rate ---------- //
	else {
		PT_dptr->RR_Missed_L = PT_dptr->Recent_RR_M + (PT_dptr->Recent_RR_M * 33) / 50;
 8001ae8:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <UpdateRR+0x214>)
 8001aea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <UpdateRR+0x214>)
 8001af2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001af6:	4619      	mov	r1, r3
 8001af8:	460b      	mov	r3, r1
 8001afa:	015b      	lsls	r3, r3, #5
 8001afc:	440b      	add	r3, r1
 8001afe:	4916      	ldr	r1, [pc, #88]	; (8001b58 <UpdateRR+0x224>)
 8001b00:	fb81 0103 	smull	r0, r1, r1, r3
 8001b04:	1109      	asrs	r1, r1, #4
 8001b06:	17db      	asrs	r3, r3, #31
 8001b08:	1acb      	subs	r3, r1, r3
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <UpdateRR+0x214>)
 8001b12:	b212      	sxth	r2, r2
 8001b14:	855a      	strh	r2, [r3, #42]	; 0x2a
		PT_dptr->ThI1 >>= 1;
 8001b16:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <UpdateRR+0x214>)
 8001b18:	8a9b      	ldrh	r3, [r3, #20]
 8001b1a:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <UpdateRR+0x214>)
 8001b1c:	085b      	lsrs	r3, r3, #1
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	8293      	strh	r3, [r2, #20]
		PT_dptr->ThF1 >>= 1;
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <UpdateRR+0x214>)
 8001b24:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001b28:	4a07      	ldr	r2, [pc, #28]	; (8001b48 <UpdateRR+0x214>)
 8001b2a:	105b      	asrs	r3, r3, #1
 8001b2c:	b21b      	sxth	r3, r3
 8001b2e:	8393      	strh	r3, [r2, #28]
		PT_dptr->HR_State = IRREGULAR_HR;
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <UpdateRR+0x214>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	859a      	strh	r2, [r3, #44]	; 0x2c
	}
	
}
 8001b36:	bf00      	nop
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	20000432 	.word	0x20000432
 8001b48:	20000304 	.word	0x20000304
 8001b4c:	2000042e 	.word	0x2000042e
 8001b50:	20000434 	.word	0x20000434
 8001b54:	20000430 	.word	0x20000430
 8001b58:	51eb851f 	.word	0x51eb851f

08001b5c <UpdateThI>:
Description: This function recursively updates the adaptive noise and signal thresholds in
the Integrated signal. Implements Eq 12-16.

**********************************************************************************/
void UpdateThI( uint16_t *PEAKI, int8_t NOISE_F)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	460b      	mov	r3, r1
 8001b66:	70fb      	strb	r3, [r7, #3]
	// ------ Update Noise & Signal Estimate ------ //
	if (NOISE_F) {
 8001b68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d014      	beq.n	8001b9a <UpdateThI+0x3e>
		PT_dptr->NPKI -= PT_dptr->NPKI >> 3;
 8001b70:	4b21      	ldr	r3, [pc, #132]	; (8001bf8 <UpdateThI+0x9c>)
 8001b72:	8b1a      	ldrh	r2, [r3, #24]
 8001b74:	4b20      	ldr	r3, [pc, #128]	; (8001bf8 <UpdateThI+0x9c>)
 8001b76:	8b1b      	ldrh	r3, [r3, #24]
 8001b78:	08db      	lsrs	r3, r3, #3
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	491e      	ldr	r1, [pc, #120]	; (8001bf8 <UpdateThI+0x9c>)
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	830b      	strh	r3, [r1, #24]
		PT_dptr->NPKI += *PEAKI >> 3;
 8001b84:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <UpdateThI+0x9c>)
 8001b86:	8b1a      	ldrh	r2, [r3, #24]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	08db      	lsrs	r3, r3, #3
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	4919      	ldr	r1, [pc, #100]	; (8001bf8 <UpdateThI+0x9c>)
 8001b92:	4413      	add	r3, r2
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	830b      	strh	r3, [r1, #24]
 8001b98:	e013      	b.n	8001bc2 <UpdateThI+0x66>
	}
	else {
		PT_dptr->SPKI -= PT_dptr->SPKI >> 3;
 8001b9a:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <UpdateThI+0x9c>)
 8001b9c:	8ada      	ldrh	r2, [r3, #22]
 8001b9e:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <UpdateThI+0x9c>)
 8001ba0:	8adb      	ldrh	r3, [r3, #22]
 8001ba2:	08db      	lsrs	r3, r3, #3
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	4914      	ldr	r1, [pc, #80]	; (8001bf8 <UpdateThI+0x9c>)
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	82cb      	strh	r3, [r1, #22]
		PT_dptr->SPKI += *PEAKI >> 3;
 8001bae:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <UpdateThI+0x9c>)
 8001bb0:	8ada      	ldrh	r2, [r3, #22]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	08db      	lsrs	r3, r3, #3
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	490f      	ldr	r1, [pc, #60]	; (8001bf8 <UpdateThI+0x9c>)
 8001bbc:	4413      	add	r3, r2
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	82cb      	strh	r3, [r1, #22]
	}

	// --------- Update Thresholds ---------------- //
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 8001bc2:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <UpdateThI+0x9c>)
 8001bc4:	8b1a      	ldrh	r2, [r3, #24]
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <UpdateThI+0x9c>)
 8001bc8:	8adb      	ldrh	r3, [r3, #22]
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <UpdateThI+0x9c>)
 8001bce:	8b1b      	ldrh	r3, [r3, #24]
 8001bd0:	1acb      	subs	r3, r1, r3
 8001bd2:	109b      	asrs	r3, r3, #2
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	4908      	ldr	r1, [pc, #32]	; (8001bf8 <UpdateThI+0x9c>)
 8001bd8:	4413      	add	r3, r2
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	828b      	strh	r3, [r1, #20]
	PT_dptr->ThI2 = PT_dptr->ThI1 >> 1;
 8001bde:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <UpdateThI+0x9c>)
 8001be0:	8a9b      	ldrh	r3, [r3, #20]
 8001be2:	4a05      	ldr	r2, [pc, #20]	; (8001bf8 <UpdateThI+0x9c>)
 8001be4:	085b      	lsrs	r3, r3, #1
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	8353      	strh	r3, [r2, #26]
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	20000304 	.word	0x20000304

08001bfc <UpdateThF>:
Description: This function recursively updates the adaptive noise and signal thresholds in 
the BP signal. Implements Eq 17-21.

**********************************************************************************/
void UpdateThF(int16_t *PEAKF, int8_t NOISE_F)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	70fb      	strb	r3, [r7, #3]
	// ------ Update Noise & Signal Estimate ------ //
	if (NOISE_F) {
 8001c08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d01e      	beq.n	8001c4e <UpdateThF+0x52>
		PT_dptr->NPKF -= PT_dptr->NPKF >> 3;
 8001c10:	4b2e      	ldr	r3, [pc, #184]	; (8001ccc <UpdateThF+0xd0>)
 8001c12:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	4b2c      	ldr	r3, [pc, #176]	; (8001ccc <UpdateThF+0xd0>)
 8001c1a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001c1e:	10db      	asrs	r3, r3, #3
 8001c20:	b21b      	sxth	r3, r3
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	4b28      	ldr	r3, [pc, #160]	; (8001ccc <UpdateThF+0xd0>)
 8001c2a:	b212      	sxth	r2, r2
 8001c2c:	841a      	strh	r2, [r3, #32]
		PT_dptr->NPKF += *PEAKF >> 3;
 8001c2e:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <UpdateThF+0xd0>)
 8001c30:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c3c:	10db      	asrs	r3, r3, #3
 8001c3e:	b21b      	sxth	r3, r3
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	4413      	add	r3, r2
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	4b21      	ldr	r3, [pc, #132]	; (8001ccc <UpdateThF+0xd0>)
 8001c48:	b212      	sxth	r2, r2
 8001c4a:	841a      	strh	r2, [r3, #32]
 8001c4c:	e01d      	b.n	8001c8a <UpdateThF+0x8e>
	}
	else {
		PT_dptr->SPKF -= PT_dptr->SPKF >> 3;
 8001c4e:	4b1f      	ldr	r3, [pc, #124]	; (8001ccc <UpdateThF+0xd0>)
 8001c50:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <UpdateThF+0xd0>)
 8001c58:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001c5c:	10db      	asrs	r3, r3, #3
 8001c5e:	b21b      	sxth	r3, r3
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <UpdateThF+0xd0>)
 8001c68:	b212      	sxth	r2, r2
 8001c6a:	83da      	strh	r2, [r3, #30]
		PT_dptr->SPKF += *PEAKF >> 3;
 8001c6c:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <UpdateThF+0xd0>)
 8001c6e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c7a:	10db      	asrs	r3, r3, #3
 8001c7c:	b21b      	sxth	r3, r3
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	4413      	add	r3, r2
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <UpdateThF+0xd0>)
 8001c86:	b212      	sxth	r2, r2
 8001c88:	83da      	strh	r2, [r3, #30]
	}

	// --------- Update Thresholds ---------------- //
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <UpdateThF+0xd0>)
 8001c8c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <UpdateThF+0xd0>)
 8001c94:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <UpdateThF+0xd0>)
 8001c9c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001ca0:	1acb      	subs	r3, r1, r3
 8001ca2:	109b      	asrs	r3, r3, #2
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <UpdateThF+0xd0>)
 8001cac:	b212      	sxth	r2, r2
 8001cae:	839a      	strh	r2, [r3, #28]
	PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;
 8001cb0:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <UpdateThF+0xd0>)
 8001cb2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001cb6:	4a05      	ldr	r2, [pc, #20]	; (8001ccc <UpdateThF+0xd0>)
 8001cb8:	105b      	asrs	r3, r3, #1
 8001cba:	b21b      	sxth	r3, r3
 8001cbc:	8453      	strh	r3, [r2, #34]	; 0x22
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	20000304 	.word	0x20000304

08001cd0 <PT_get_LPFilter_output>:
}



// ------Returns LP filter value ------ //
int16_t PT_get_LPFilter_output(void) {
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
	return (PT_dptr->LPF_val);
 8001cd4:	4b03      	ldr	r3, [pc, #12]	; (8001ce4 <PT_get_LPFilter_output+0x14>)
 8001cd6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	20000304 	.word	0x20000304

08001ce8 <PT_get_HPFilter_output>:

// ------Returns HP filter value ------ //
int16_t PT_get_HPFilter_output(void) {
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
	return (PT_dptr->HPF_val);
 8001cec:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <PT_get_HPFilter_output+0x14>)
 8001cee:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	20000304 	.word	0x20000304

08001d00 <PT_get_DRFilter_output>:

// ------Returns Dr filter value ------ //
int16_t PT_get_DRFilter_output(void) {
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
	return (PT_dptr->DRF_val);
 8001d04:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <PT_get_DRFilter_output+0x14>)
 8001d06:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	20000304 	.word	0x20000304

08001d18 <PT_get_MVFilter_output>:

// ------Returns MVA filter value ------ //
uint16_t PT_get_MVFilter_output(void) {
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
	return (PT_dptr->MVA_val);
 8001d1c:	4b03      	ldr	r3, [pc, #12]	; (8001d2c <PT_get_MVFilter_output+0x14>)
 8001d1e:	8a5b      	ldrh	r3, [r3, #18]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	20000304 	.word	0x20000304

08001d30 <PT_get_SQRFilter_output>:

// ------Returns SQR filter value ------ //
uint16_t PT_get_SQRFilter_output(void) {
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
	return (PT_dptr->SQF_val);
 8001d34:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <PT_get_SQRFilter_output+0x14>)
 8001d36:	8a1b      	ldrh	r3, [r3, #16]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	20000304 	.word	0x20000304

08001d48 <PT_get_ThI1_output>:
	return (60 / (PT_dptr->RR_M / Fs));
}


// ------Returns the main threshold integrated signal Th value ------ //
uint16_t PT_get_ThI1_output(void) {
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
	return (PT_dptr->ThI1);
 8001d4c:	4b03      	ldr	r3, [pc, #12]	; (8001d5c <PT_get_ThI1_output+0x14>)
 8001d4e:	8a9b      	ldrh	r3, [r3, #20]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20000304 	.word	0x20000304

08001d60 <PT_get_ThF1_output>:

// ------Returns the main threshold BP signal Th value ------ //
int16_t PT_get_ThF1_output(void) {
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
	return (PT_dptr->ThF1);
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <PT_get_ThF1_output+0x14>)
 8001d66:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	20000304 	.word	0x20000304

08001d78 <putOnMovingAverageBufferAndGetMean>:
//static float32_t meanDivider = 1/ MovingAverageSampleCount; Problem, it can be round to 0
static float32_t meanDivider = 0.01852;
float32_t MeanSum, meanValue;

float32_t putOnMovingAverageBufferAndGetMean (float32_t sample)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	ed87 0a01 	vstr	s0, [r7, #4]
	MeanSum -= movingAverageBuffer[movingAverageBufferIndex];
 8001d82:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <putOnMovingAverageBufferAndGetMean+0x80>)
 8001d84:	ed93 7a00 	vldr	s14, [r3]
 8001d88:	4b1c      	ldr	r3, [pc, #112]	; (8001dfc <putOnMovingAverageBufferAndGetMean+0x84>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a1c      	ldr	r2, [pc, #112]	; (8001e00 <putOnMovingAverageBufferAndGetMean+0x88>)
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	edd3 7a00 	vldr	s15, [r3]
 8001d96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d9a:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <putOnMovingAverageBufferAndGetMean+0x80>)
 8001d9c:	edc3 7a00 	vstr	s15, [r3]
	movingAverageBuffer[movingAverageBufferIndex] = sample;
 8001da0:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <putOnMovingAverageBufferAndGetMean+0x84>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a16      	ldr	r2, [pc, #88]	; (8001e00 <putOnMovingAverageBufferAndGetMean+0x88>)
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	601a      	str	r2, [r3, #0]
	MeanSum += sample;
 8001dae:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <putOnMovingAverageBufferAndGetMean+0x80>)
 8001db0:	ed93 7a00 	vldr	s14, [r3]
 8001db4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001db8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dbc:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <putOnMovingAverageBufferAndGetMean+0x80>)
 8001dbe:	edc3 7a00 	vstr	s15, [r3]
	movingAverageBufferIndex++;
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <putOnMovingAverageBufferAndGetMean+0x84>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	4a0c      	ldr	r2, [pc, #48]	; (8001dfc <putOnMovingAverageBufferAndGetMean+0x84>)
 8001dca:	6013      	str	r3, [r2, #0]
	if (movingAverageBufferIndex==MovingAverageSampleCount)
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <putOnMovingAverageBufferAndGetMean+0x84>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b36      	cmp	r3, #54	; 0x36
 8001dd2:	d102      	bne.n	8001dda <putOnMovingAverageBufferAndGetMean+0x62>
	{
		movingAverageBufferIndex = 0;
 8001dd4:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <putOnMovingAverageBufferAndGetMean+0x84>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
	}
	return MeanSum * meanDivider;
 8001dda:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <putOnMovingAverageBufferAndGetMean+0x80>)
 8001ddc:	ed93 7a00 	vldr	s14, [r3]
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <putOnMovingAverageBufferAndGetMean+0x8c>)
 8001de2:	edd3 7a00 	vldr	s15, [r3]
 8001de6:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001dea:	eeb0 0a67 	vmov.f32	s0, s15
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	200005a8 	.word	0x200005a8
 8001dfc:	200004cc 	.word	0x200004cc
 8001e00:	200004d0 	.word	0x200004d0
 8001e04:	20000004 	.word	0x20000004

08001e08 <arm_PT_init>:
		movingAverageBufferIndex = 0;
	}
}

void arm_PT_init()
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af02      	add	r7, sp, #8
	//Initiate filter function
	arm_fir_init_f32(&Derivative, NUM_DERIVATIVE_TAPS, (float32_t *)&firDerivativeCoefficients[0], &firStateF32[0], BLOCK_SIZE);
 8001e0e:	2301      	movs	r3, #1
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	4b20      	ldr	r3, [pc, #128]	; (8001e94 <arm_PT_init+0x8c>)
 8001e14:	4a20      	ldr	r2, [pc, #128]	; (8001e98 <arm_PT_init+0x90>)
 8001e16:	2105      	movs	r1, #5
 8001e18:	4820      	ldr	r0, [pc, #128]	; (8001e9c <arm_PT_init+0x94>)
 8001e1a:	f00b f9f9 	bl	800d210 <arm_fir_init_f32>
	arm_biquad_cascade_df1_init_f32 (&highPassFilter,1, (float32_t *)&iirHighPassFilterCoefficients[0], &highPassFilterStateF32[0]);
 8001e1e:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <arm_PT_init+0x98>)
 8001e20:	4a20      	ldr	r2, [pc, #128]	; (8001ea4 <arm_PT_init+0x9c>)
 8001e22:	2101      	movs	r1, #1
 8001e24:	4820      	ldr	r0, [pc, #128]	; (8001ea8 <arm_PT_init+0xa0>)
 8001e26:	f00b f967 	bl	800d0f8 <arm_biquad_cascade_df1_init_f32>
	arm_biquad_cascade_df1_init_f32 (&lowPassFilter,1, (float32_t *)&iirLowPassFilterCoefficients[0], &lowPassFilterStateF32[0]);
 8001e2a:	4b20      	ldr	r3, [pc, #128]	; (8001eac <arm_PT_init+0xa4>)
 8001e2c:	4a20      	ldr	r2, [pc, #128]	; (8001eb0 <arm_PT_init+0xa8>)
 8001e2e:	2101      	movs	r1, #1
 8001e30:	4820      	ldr	r0, [pc, #128]	; (8001eb4 <arm_PT_init+0xac>)
 8001e32:	f00b f961 	bl	800d0f8 <arm_biquad_cascade_df1_init_f32>
	//Reset buffors
	for (int i = 0; i<NUM_DERIVATIVE_TAPS_ARRAY_SIZE; i++)
 8001e36:	2300      	movs	r3, #0
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	e009      	b.n	8001e50 <arm_PT_init+0x48>
	{
		derivativeBuffer[i]=0;
 8001e3c:	4a1e      	ldr	r2, [pc, #120]	; (8001eb8 <arm_PT_init+0xb0>)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
	for (int i = 0; i<NUM_DERIVATIVE_TAPS_ARRAY_SIZE; i++)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	ddf2      	ble.n	8001e3c <arm_PT_init+0x34>
	}
	movingAverageBufferIndex=0;
 8001e56:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <arm_PT_init+0xb4>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i<MovingAverageSampleCount; i++)
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	603b      	str	r3, [r7, #0]
 8001e60:	e009      	b.n	8001e76 <arm_PT_init+0x6e>
	{
		movingAverageBuffer[i] = 0;
 8001e62:	4a17      	ldr	r2, [pc, #92]	; (8001ec0 <arm_PT_init+0xb8>)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i<MovingAverageSampleCount; i++)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	3301      	adds	r3, #1
 8001e74:	603b      	str	r3, [r7, #0]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	2b35      	cmp	r3, #53	; 0x35
 8001e7a:	ddf2      	ble.n	8001e62 <arm_PT_init+0x5a>
	}
	MeanSum = 0;
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <arm_PT_init+0xbc>)
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
	meanValue = 0;
 8001e84:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <arm_PT_init+0xc0>)
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20000454 	.word	0x20000454
 8001e98:	080127d0 	.word	0x080127d0
 8001e9c:	20000468 	.word	0x20000468
 8001ea0:	20000488 	.word	0x20000488
 8001ea4:	080127e4 	.word	0x080127e4
 8001ea8:	20000498 	.word	0x20000498
 8001eac:	200004a8 	.word	0x200004a8
 8001eb0:	080127f8 	.word	0x080127f8
 8001eb4:	200004b8 	.word	0x200004b8
 8001eb8:	20000474 	.word	0x20000474
 8001ebc:	200004cc 	.word	0x200004cc
 8001ec0:	200004d0 	.word	0x200004d0
 8001ec4:	200005a8 	.word	0x200005a8
 8001ec8:	200005ac 	.word	0x200005ac

08001ecc <arm_PT_ST>:
float previousMean = 0, TresholdI = 0, SignalLevelI = 0, NoiseLevelI = 0;
float previousSignalPeak = 0, TresholdF = 0, SignalLevelF = 0, NoiseLevelF = 0;
uint16_t peakTimeDelay = 0, latencyDelay = 0;
uint8_t rissingEdge = 0;
int16_t arm_PT_ST(int16_t sample)
{
 8001ecc:	b5b0      	push	{r4, r5, r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	80fb      	strh	r3, [r7, #6]
	float32_t newSample = (float)sample;
 8001ed6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eda:	ee07 3a90 	vmov	s15, r3
 8001ede:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ee2:	edc7 7a02 	vstr	s15, [r7, #8]
	//low pass filter operation
	arm_biquad_cascade_df1_f32 (&lowPassFilter, &newSample,&lowPassFilterResult,1);
 8001ee6:	f107 0108 	add.w	r1, r7, #8
 8001eea:	2301      	movs	r3, #1
 8001eec:	4ab3      	ldr	r2, [pc, #716]	; (80021bc <arm_PT_ST+0x2f0>)
 8001eee:	48b4      	ldr	r0, [pc, #720]	; (80021c0 <arm_PT_ST+0x2f4>)
 8001ef0:	f00b f860 	bl	800cfb4 <arm_biquad_cascade_df1_f32>
	//high pass filter operation
	arm_biquad_cascade_df1_f32 (&highPassFilter, &lowPassFilterResult,&highPassFilterResult,1);
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	4ab3      	ldr	r2, [pc, #716]	; (80021c4 <arm_PT_ST+0x2f8>)
 8001ef8:	49b0      	ldr	r1, [pc, #704]	; (80021bc <arm_PT_ST+0x2f0>)
 8001efa:	48b3      	ldr	r0, [pc, #716]	; (80021c8 <arm_PT_ST+0x2fc>)
 8001efc:	f00b f85a 	bl	800cfb4 <arm_biquad_cascade_df1_f32>



	//Store potential peak value (QRS can be also minimum or maximum)
	float potentialPeak = lowPassFilterResult*lowPassFilterResult;
 8001f00:	4bae      	ldr	r3, [pc, #696]	; (80021bc <arm_PT_ST+0x2f0>)
 8001f02:	ed93 7a00 	vldr	s14, [r3]
 8001f06:	4bad      	ldr	r3, [pc, #692]	; (80021bc <arm_PT_ST+0x2f0>)
 8001f08:	edd3 7a00 	vldr	s15, [r3]
 8001f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f10:	edc7 7a03 	vstr	s15, [r7, #12]
	if (potentialPeak>previousSignalPeak)
 8001f14:	4bad      	ldr	r3, [pc, #692]	; (80021cc <arm_PT_ST+0x300>)
 8001f16:	edd3 7a00 	vldr	s15, [r3]
 8001f1a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f26:	dd05      	ble.n	8001f34 <arm_PT_ST+0x68>
	{//Store maximum of squared signal
		previousSignalPeak = potentialPeak;
 8001f28:	4aa8      	ldr	r2, [pc, #672]	; (80021cc <arm_PT_ST+0x300>)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6013      	str	r3, [r2, #0]
		peakTimeDelay = 0;
 8001f2e:	4ba8      	ldr	r3, [pc, #672]	; (80021d0 <arm_PT_ST+0x304>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	801a      	strh	r2, [r3, #0]
	}
	peakTimeDelay++;
 8001f34:	4ba6      	ldr	r3, [pc, #664]	; (80021d0 <arm_PT_ST+0x304>)
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	4ba4      	ldr	r3, [pc, #656]	; (80021d0 <arm_PT_ST+0x304>)
 8001f3e:	801a      	strh	r2, [r3, #0]
	if (latencyDelay < latencyTreshold)
 8001f40:	4ba4      	ldr	r3, [pc, #656]	; (80021d4 <arm_PT_ST+0x308>)
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 8001f48:	d206      	bcs.n	8001f58 <arm_PT_ST+0x8c>
	{
		latencyDelay++;
 8001f4a:	4ba2      	ldr	r3, [pc, #648]	; (80021d4 <arm_PT_ST+0x308>)
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	4ba0      	ldr	r3, [pc, #640]	; (80021d4 <arm_PT_ST+0x308>)
 8001f54:	801a      	strh	r2, [r3, #0]
 8001f56:	e004      	b.n	8001f62 <arm_PT_ST+0x96>
	}
	else
	{//If peak wasn't find in given time restart variables
		latencyDelay = 0;
 8001f58:	4b9e      	ldr	r3, [pc, #632]	; (80021d4 <arm_PT_ST+0x308>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	801a      	strh	r2, [r3, #0]
		arm_PT_init();
 8001f5e:	f7ff ff53 	bl	8001e08 <arm_PT_init>
	}
	if (latencyDelay == (latencyTreshold>>1))
 8001f62:	4b9c      	ldr	r3, [pc, #624]	; (80021d4 <arm_PT_ST+0x308>)
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8001f6a:	d113      	bne.n	8001f94 <arm_PT_ST+0xc8>
	{//In original algorithm this should be look-back
		//here only decrease thresholds
		TresholdI = TresholdI * 0.5;
 8001f6c:	4b9a      	ldr	r3, [pc, #616]	; (80021d8 <arm_PT_ST+0x30c>)
 8001f6e:	edd3 7a00 	vldr	s15, [r3]
 8001f72:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001f76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f7a:	4b97      	ldr	r3, [pc, #604]	; (80021d8 <arm_PT_ST+0x30c>)
 8001f7c:	edc3 7a00 	vstr	s15, [r3]
		TresholdF = TresholdF * 0.5;
 8001f80:	4b96      	ldr	r3, [pc, #600]	; (80021dc <arm_PT_ST+0x310>)
 8001f82:	edd3 7a00 	vldr	s15, [r3]
 8001f86:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001f8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f8e:	4b93      	ldr	r3, [pc, #588]	; (80021dc <arm_PT_ST+0x310>)
 8001f90:	edc3 7a00 	vstr	s15, [r3]
	}
	//Derivative with FIR filter
	arm_fir_f32 (&Derivative,&lowPassFilterResult,&derivativeOutput[0],BLOCK_SIZE);
 8001f94:	2301      	movs	r3, #1
 8001f96:	4a92      	ldr	r2, [pc, #584]	; (80021e0 <arm_PT_ST+0x314>)
 8001f98:	4988      	ldr	r1, [pc, #544]	; (80021bc <arm_PT_ST+0x2f0>)
 8001f9a:	4892      	ldr	r0, [pc, #584]	; (80021e4 <arm_PT_ST+0x318>)
 8001f9c:	f00b f8c8 	bl	800d130 <arm_fir_f32>
	//Square the value
	squaredValue = derivativeOutput[0] * derivativeOutput[0];
 8001fa0:	4b8f      	ldr	r3, [pc, #572]	; (80021e0 <arm_PT_ST+0x314>)
 8001fa2:	ed93 7a00 	vldr	s14, [r3]
 8001fa6:	4b8e      	ldr	r3, [pc, #568]	; (80021e0 <arm_PT_ST+0x314>)
 8001fa8:	edd3 7a00 	vldr	s15, [r3]
 8001fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fb0:	4b8d      	ldr	r3, [pc, #564]	; (80021e8 <arm_PT_ST+0x31c>)
 8001fb2:	edc3 7a00 	vstr	s15, [r3]
	//Compute moving average
	meanValue = putOnMovingAverageBufferAndGetMean(squaredValue);
 8001fb6:	4b8c      	ldr	r3, [pc, #560]	; (80021e8 <arm_PT_ST+0x31c>)
 8001fb8:	edd3 7a00 	vldr	s15, [r3]
 8001fbc:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc0:	f7ff feda 	bl	8001d78 <putOnMovingAverageBufferAndGetMean>
 8001fc4:	eef0 7a40 	vmov.f32	s15, s0
 8001fc8:	4b88      	ldr	r3, [pc, #544]	; (80021ec <arm_PT_ST+0x320>)
 8001fca:	edc3 7a00 	vstr	s15, [r3]
	 */
	//putOnMovingAverageBuffer(squaredValue);
	//arm_mean_f32 (&movingAverageBuffer[0], MovingAverageSampleCount, &meanValue);

	//Detection of maximum in moving average signal
	if (meanValue!=previousMean)
 8001fce:	4b87      	ldr	r3, [pc, #540]	; (80021ec <arm_PT_ST+0x320>)
 8001fd0:	ed93 7a00 	vldr	s14, [r3]
 8001fd4:	4b86      	ldr	r3, [pc, #536]	; (80021f0 <arm_PT_ST+0x324>)
 8001fd6:	edd3 7a00 	vldr	s15, [r3]
 8001fda:	eeb4 7a67 	vcmp.f32	s14, s15
 8001fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe2:	f000 826b 	beq.w	80024bc <arm_PT_ST+0x5f0>
	{
		if (meanValue>previousMean)
 8001fe6:	4b81      	ldr	r3, [pc, #516]	; (80021ec <arm_PT_ST+0x320>)
 8001fe8:	ed93 7a00 	vldr	s14, [r3]
 8001fec:	4b80      	ldr	r3, [pc, #512]	; (80021f0 <arm_PT_ST+0x324>)
 8001fee:	edd3 7a00 	vldr	s15, [r3]
 8001ff2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ffa:	dd10      	ble.n	800201e <arm_PT_ST+0x152>
		{//This is not maximum
			previousMean = meanValue;
 8001ffc:	4b7b      	ldr	r3, [pc, #492]	; (80021ec <arm_PT_ST+0x320>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a7b      	ldr	r2, [pc, #492]	; (80021f0 <arm_PT_ST+0x324>)
 8002002:	6013      	str	r3, [r2, #0]
			if (previousMean != 0)
 8002004:	4b7a      	ldr	r3, [pc, #488]	; (80021f0 <arm_PT_ST+0x324>)
 8002006:	edd3 7a00 	vldr	s15, [r3]
 800200a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800200e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002012:	f000 8253 	beq.w	80024bc <arm_PT_ST+0x5f0>
				//At least 3 sample are rissing
				rissingEdge = 1;
 8002016:	4b77      	ldr	r3, [pc, #476]	; (80021f4 <arm_PT_ST+0x328>)
 8002018:	2201      	movs	r2, #1
 800201a:	701a      	strb	r2, [r3, #0]
 800201c:	e24e      	b.n	80024bc <arm_PT_ST+0x5f0>
		}
		else
		{//Lets analysis maximum in integration signal
			if(rissingEdge ==1)
 800201e:	4b75      	ldr	r3, [pc, #468]	; (80021f4 <arm_PT_ST+0x328>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b01      	cmp	r3, #1
 8002024:	f040 8242 	bne.w	80024ac <arm_PT_ST+0x5e0>
			{
				if ((previousMean > TresholdI) && (latencyDelay > latencyDelayTreshold))
 8002028:	4b71      	ldr	r3, [pc, #452]	; (80021f0 <arm_PT_ST+0x324>)
 800202a:	ed93 7a00 	vldr	s14, [r3]
 800202e:	4b6a      	ldr	r3, [pc, #424]	; (80021d8 <arm_PT_ST+0x30c>)
 8002030:	edd3 7a00 	vldr	s15, [r3]
 8002034:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203c:	f340 818f 	ble.w	800235e <arm_PT_ST+0x492>
 8002040:	4b64      	ldr	r3, [pc, #400]	; (80021d4 <arm_PT_ST+0x308>)
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	2b48      	cmp	r3, #72	; 0x48
 8002046:	f240 818a 	bls.w	800235e <arm_PT_ST+0x492>
				{//It's potential QRS
					if (previousSignalPeak>TresholdF)
 800204a:	4b60      	ldr	r3, [pc, #384]	; (80021cc <arm_PT_ST+0x300>)
 800204c:	ed93 7a00 	vldr	s14, [r3]
 8002050:	4b62      	ldr	r3, [pc, #392]	; (80021dc <arm_PT_ST+0x310>)
 8002052:	edd3 7a00 	vldr	s15, [r3]
 8002056:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800205a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800205e:	f340 80d7 	ble.w	8002210 <arm_PT_ST+0x344>
					{//If peak is above threshold it's QRS
						SignalLevelF = 0.125*previousSignalPeak + 0.875*SignalLevelF;
 8002062:	4b5a      	ldr	r3, [pc, #360]	; (80021cc <arm_PT_ST+0x300>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe fa46 	bl	80004f8 <__aeabi_f2d>
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002074:	f7fe fa98 	bl	80005a8 <__aeabi_dmul>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4614      	mov	r4, r2
 800207e:	461d      	mov	r5, r3
 8002080:	4b5d      	ldr	r3, [pc, #372]	; (80021f8 <arm_PT_ST+0x32c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe fa37 	bl	80004f8 <__aeabi_f2d>
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	4b5b      	ldr	r3, [pc, #364]	; (80021fc <arm_PT_ST+0x330>)
 8002090:	f7fe fa8a 	bl	80005a8 <__aeabi_dmul>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4620      	mov	r0, r4
 800209a:	4629      	mov	r1, r5
 800209c:	f7fe f8ce 	bl	800023c <__adddf3>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4610      	mov	r0, r2
 80020a6:	4619      	mov	r1, r3
 80020a8:	f7fe fd76 	bl	8000b98 <__aeabi_d2f>
 80020ac:	4603      	mov	r3, r0
 80020ae:	4a52      	ldr	r2, [pc, #328]	; (80021f8 <arm_PT_ST+0x32c>)
 80020b0:	6013      	str	r3, [r2, #0]
						TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 80020b2:	4b53      	ldr	r3, [pc, #332]	; (8002200 <arm_PT_ST+0x334>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fa1e 	bl	80004f8 <__aeabi_f2d>
 80020bc:	4604      	mov	r4, r0
 80020be:	460d      	mov	r5, r1
 80020c0:	4b4d      	ldr	r3, [pc, #308]	; (80021f8 <arm_PT_ST+0x32c>)
 80020c2:	ed93 7a00 	vldr	s14, [r3]
 80020c6:	4b4e      	ldr	r3, [pc, #312]	; (8002200 <arm_PT_ST+0x334>)
 80020c8:	edd3 7a00 	vldr	s15, [r3]
 80020cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020d0:	ee17 0a90 	vmov	r0, s15
 80020d4:	f7fe fa10 	bl	80004f8 <__aeabi_f2d>
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	4b49      	ldr	r3, [pc, #292]	; (8002204 <arm_PT_ST+0x338>)
 80020de:	f7fe fa63 	bl	80005a8 <__aeabi_dmul>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4620      	mov	r0, r4
 80020e8:	4629      	mov	r1, r5
 80020ea:	f7fe f8a7 	bl	800023c <__adddf3>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4610      	mov	r0, r2
 80020f4:	4619      	mov	r1, r3
 80020f6:	f7fe fd4f 	bl	8000b98 <__aeabi_d2f>
 80020fa:	4603      	mov	r3, r0
 80020fc:	4a37      	ldr	r2, [pc, #220]	; (80021dc <arm_PT_ST+0x310>)
 80020fe:	6013      	str	r3, [r2, #0]

						SignalLevelI = 0.125*meanValue + 0.875*SignalLevelI;
 8002100:	4b3a      	ldr	r3, [pc, #232]	; (80021ec <arm_PT_ST+0x320>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe f9f7 	bl	80004f8 <__aeabi_f2d>
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002112:	f7fe fa49 	bl	80005a8 <__aeabi_dmul>
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	4614      	mov	r4, r2
 800211c:	461d      	mov	r5, r3
 800211e:	4b3a      	ldr	r3, [pc, #232]	; (8002208 <arm_PT_ST+0x33c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe f9e8 	bl	80004f8 <__aeabi_f2d>
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	4b33      	ldr	r3, [pc, #204]	; (80021fc <arm_PT_ST+0x330>)
 800212e:	f7fe fa3b 	bl	80005a8 <__aeabi_dmul>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	4620      	mov	r0, r4
 8002138:	4629      	mov	r1, r5
 800213a:	f7fe f87f 	bl	800023c <__adddf3>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4610      	mov	r0, r2
 8002144:	4619      	mov	r1, r3
 8002146:	f7fe fd27 	bl	8000b98 <__aeabi_d2f>
 800214a:	4603      	mov	r3, r0
 800214c:	4a2e      	ldr	r2, [pc, #184]	; (8002208 <arm_PT_ST+0x33c>)
 800214e:	6013      	str	r3, [r2, #0]
						TresholdI = NoiseLevelI + 0.25 * (SignalLevelI - NoiseLevelI);
 8002150:	4b2e      	ldr	r3, [pc, #184]	; (800220c <arm_PT_ST+0x340>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe f9cf 	bl	80004f8 <__aeabi_f2d>
 800215a:	4604      	mov	r4, r0
 800215c:	460d      	mov	r5, r1
 800215e:	4b2a      	ldr	r3, [pc, #168]	; (8002208 <arm_PT_ST+0x33c>)
 8002160:	ed93 7a00 	vldr	s14, [r3]
 8002164:	4b29      	ldr	r3, [pc, #164]	; (800220c <arm_PT_ST+0x340>)
 8002166:	edd3 7a00 	vldr	s15, [r3]
 800216a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800216e:	ee17 0a90 	vmov	r0, s15
 8002172:	f7fe f9c1 	bl	80004f8 <__aeabi_f2d>
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	4b22      	ldr	r3, [pc, #136]	; (8002204 <arm_PT_ST+0x338>)
 800217c:	f7fe fa14 	bl	80005a8 <__aeabi_dmul>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4620      	mov	r0, r4
 8002186:	4629      	mov	r1, r5
 8002188:	f7fe f858 	bl	800023c <__adddf3>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4610      	mov	r0, r2
 8002192:	4619      	mov	r1, r3
 8002194:	f7fe fd00 	bl	8000b98 <__aeabi_d2f>
 8002198:	4603      	mov	r3, r0
 800219a:	4a0f      	ldr	r2, [pc, #60]	; (80021d8 <arm_PT_ST+0x30c>)
 800219c:	6013      	str	r3, [r2, #0]
						previousSignalPeak = 0;
 800219e:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <arm_PT_ST+0x300>)
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
						previousMean = 0;
 80021a6:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <arm_PT_ST+0x324>)
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
						latencyDelay = 0;
 80021ae:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <arm_PT_ST+0x308>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	801a      	strh	r2, [r3, #0]
						return peakTimeDelay;
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <arm_PT_ST+0x304>)
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	b21b      	sxth	r3, r3
 80021ba:	e180      	b.n	80024be <arm_PT_ST+0x5f2>
 80021bc:	200004c4 	.word	0x200004c4
 80021c0:	200004b8 	.word	0x200004b8
 80021c4:	200004a4 	.word	0x200004a4
 80021c8:	20000498 	.word	0x20000498
 80021cc:	200005c0 	.word	0x200005c0
 80021d0:	200005d0 	.word	0x200005d0
 80021d4:	200005d2 	.word	0x200005d2
 80021d8:	200005b4 	.word	0x200005b4
 80021dc:	200005c4 	.word	0x200005c4
 80021e0:	20000488 	.word	0x20000488
 80021e4:	20000468 	.word	0x20000468
 80021e8:	200004c8 	.word	0x200004c8
 80021ec:	200005ac 	.word	0x200005ac
 80021f0:	200005b0 	.word	0x200005b0
 80021f4:	200005d4 	.word	0x200005d4
 80021f8:	200005c8 	.word	0x200005c8
 80021fc:	3fec0000 	.word	0x3fec0000
 8002200:	200005cc 	.word	0x200005cc
 8002204:	3fd00000 	.word	0x3fd00000
 8002208:	200005b8 	.word	0x200005b8
 800220c:	200005bc 	.word	0x200005bc

					}
					else
					{//It's noise peak
						NoiseLevelF = 0.125*previousSignalPeak + 0.875*NoiseLevelI;
 8002210:	4bad      	ldr	r3, [pc, #692]	; (80024c8 <arm_PT_ST+0x5fc>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe f96f 	bl	80004f8 <__aeabi_f2d>
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002222:	f7fe f9c1 	bl	80005a8 <__aeabi_dmul>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	4614      	mov	r4, r2
 800222c:	461d      	mov	r5, r3
 800222e:	4ba7      	ldr	r3, [pc, #668]	; (80024cc <arm_PT_ST+0x600>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe f960 	bl	80004f8 <__aeabi_f2d>
 8002238:	f04f 0200 	mov.w	r2, #0
 800223c:	4ba4      	ldr	r3, [pc, #656]	; (80024d0 <arm_PT_ST+0x604>)
 800223e:	f7fe f9b3 	bl	80005a8 <__aeabi_dmul>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4620      	mov	r0, r4
 8002248:	4629      	mov	r1, r5
 800224a:	f7fd fff7 	bl	800023c <__adddf3>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4610      	mov	r0, r2
 8002254:	4619      	mov	r1, r3
 8002256:	f7fe fc9f 	bl	8000b98 <__aeabi_d2f>
 800225a:	4603      	mov	r3, r0
 800225c:	4a9d      	ldr	r2, [pc, #628]	; (80024d4 <arm_PT_ST+0x608>)
 800225e:	6013      	str	r3, [r2, #0]
						TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 8002260:	4b9c      	ldr	r3, [pc, #624]	; (80024d4 <arm_PT_ST+0x608>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe f947 	bl	80004f8 <__aeabi_f2d>
 800226a:	4604      	mov	r4, r0
 800226c:	460d      	mov	r5, r1
 800226e:	4b9a      	ldr	r3, [pc, #616]	; (80024d8 <arm_PT_ST+0x60c>)
 8002270:	ed93 7a00 	vldr	s14, [r3]
 8002274:	4b97      	ldr	r3, [pc, #604]	; (80024d4 <arm_PT_ST+0x608>)
 8002276:	edd3 7a00 	vldr	s15, [r3]
 800227a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800227e:	ee17 0a90 	vmov	r0, s15
 8002282:	f7fe f939 	bl	80004f8 <__aeabi_f2d>
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	4b94      	ldr	r3, [pc, #592]	; (80024dc <arm_PT_ST+0x610>)
 800228c:	f7fe f98c 	bl	80005a8 <__aeabi_dmul>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4620      	mov	r0, r4
 8002296:	4629      	mov	r1, r5
 8002298:	f7fd ffd0 	bl	800023c <__adddf3>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4610      	mov	r0, r2
 80022a2:	4619      	mov	r1, r3
 80022a4:	f7fe fc78 	bl	8000b98 <__aeabi_d2f>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4a8d      	ldr	r2, [pc, #564]	; (80024e0 <arm_PT_ST+0x614>)
 80022ac:	6013      	str	r3, [r2, #0]

						NoiseLevelI = 0.125*meanValue + 0.875*NoiseLevelI;
 80022ae:	4b8d      	ldr	r3, [pc, #564]	; (80024e4 <arm_PT_ST+0x618>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe f920 	bl	80004f8 <__aeabi_f2d>
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80022c0:	f7fe f972 	bl	80005a8 <__aeabi_dmul>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4614      	mov	r4, r2
 80022ca:	461d      	mov	r5, r3
 80022cc:	4b7f      	ldr	r3, [pc, #508]	; (80024cc <arm_PT_ST+0x600>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7fe f911 	bl	80004f8 <__aeabi_f2d>
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	4b7d      	ldr	r3, [pc, #500]	; (80024d0 <arm_PT_ST+0x604>)
 80022dc:	f7fe f964 	bl	80005a8 <__aeabi_dmul>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4620      	mov	r0, r4
 80022e6:	4629      	mov	r1, r5
 80022e8:	f7fd ffa8 	bl	800023c <__adddf3>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4610      	mov	r0, r2
 80022f2:	4619      	mov	r1, r3
 80022f4:	f7fe fc50 	bl	8000b98 <__aeabi_d2f>
 80022f8:	4603      	mov	r3, r0
 80022fa:	4a74      	ldr	r2, [pc, #464]	; (80024cc <arm_PT_ST+0x600>)
 80022fc:	6013      	str	r3, [r2, #0]
						TresholdI = NoiseLevelI + 0.25 * (SignalLevelI - NoiseLevelI);
 80022fe:	4b73      	ldr	r3, [pc, #460]	; (80024cc <arm_PT_ST+0x600>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe f8f8 	bl	80004f8 <__aeabi_f2d>
 8002308:	4604      	mov	r4, r0
 800230a:	460d      	mov	r5, r1
 800230c:	4b76      	ldr	r3, [pc, #472]	; (80024e8 <arm_PT_ST+0x61c>)
 800230e:	ed93 7a00 	vldr	s14, [r3]
 8002312:	4b6e      	ldr	r3, [pc, #440]	; (80024cc <arm_PT_ST+0x600>)
 8002314:	edd3 7a00 	vldr	s15, [r3]
 8002318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800231c:	ee17 0a90 	vmov	r0, s15
 8002320:	f7fe f8ea 	bl	80004f8 <__aeabi_f2d>
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	4b6c      	ldr	r3, [pc, #432]	; (80024dc <arm_PT_ST+0x610>)
 800232a:	f7fe f93d 	bl	80005a8 <__aeabi_dmul>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4620      	mov	r0, r4
 8002334:	4629      	mov	r1, r5
 8002336:	f7fd ff81 	bl	800023c <__adddf3>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	4610      	mov	r0, r2
 8002340:	4619      	mov	r1, r3
 8002342:	f7fe fc29 	bl	8000b98 <__aeabi_d2f>
 8002346:	4603      	mov	r3, r0
 8002348:	4a68      	ldr	r2, [pc, #416]	; (80024ec <arm_PT_ST+0x620>)
 800234a:	6013      	str	r3, [r2, #0]

						previousSignalPeak = 0;
 800234c:	4b5e      	ldr	r3, [pc, #376]	; (80024c8 <arm_PT_ST+0x5fc>)
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
						previousMean = 0;
 8002354:	4b66      	ldr	r3, [pc, #408]	; (80024f0 <arm_PT_ST+0x624>)
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
					if (previousSignalPeak>TresholdF)
 800235c:	e0ae      	b.n	80024bc <arm_PT_ST+0x5f0>
					}
				}
				else
				{//It's just noise
					NoiseLevelF = 0.125*previousSignalPeak + 0.875*NoiseLevelI;
 800235e:	4b5a      	ldr	r3, [pc, #360]	; (80024c8 <arm_PT_ST+0x5fc>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe f8c8 	bl	80004f8 <__aeabi_f2d>
 8002368:	f04f 0200 	mov.w	r2, #0
 800236c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002370:	f7fe f91a 	bl	80005a8 <__aeabi_dmul>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4614      	mov	r4, r2
 800237a:	461d      	mov	r5, r3
 800237c:	4b53      	ldr	r3, [pc, #332]	; (80024cc <arm_PT_ST+0x600>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe f8b9 	bl	80004f8 <__aeabi_f2d>
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	4b51      	ldr	r3, [pc, #324]	; (80024d0 <arm_PT_ST+0x604>)
 800238c:	f7fe f90c 	bl	80005a8 <__aeabi_dmul>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4620      	mov	r0, r4
 8002396:	4629      	mov	r1, r5
 8002398:	f7fd ff50 	bl	800023c <__adddf3>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	4610      	mov	r0, r2
 80023a2:	4619      	mov	r1, r3
 80023a4:	f7fe fbf8 	bl	8000b98 <__aeabi_d2f>
 80023a8:	4603      	mov	r3, r0
 80023aa:	4a4a      	ldr	r2, [pc, #296]	; (80024d4 <arm_PT_ST+0x608>)
 80023ac:	6013      	str	r3, [r2, #0]
					TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 80023ae:	4b49      	ldr	r3, [pc, #292]	; (80024d4 <arm_PT_ST+0x608>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe f8a0 	bl	80004f8 <__aeabi_f2d>
 80023b8:	4604      	mov	r4, r0
 80023ba:	460d      	mov	r5, r1
 80023bc:	4b46      	ldr	r3, [pc, #280]	; (80024d8 <arm_PT_ST+0x60c>)
 80023be:	ed93 7a00 	vldr	s14, [r3]
 80023c2:	4b44      	ldr	r3, [pc, #272]	; (80024d4 <arm_PT_ST+0x608>)
 80023c4:	edd3 7a00 	vldr	s15, [r3]
 80023c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023cc:	ee17 0a90 	vmov	r0, s15
 80023d0:	f7fe f892 	bl	80004f8 <__aeabi_f2d>
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	4b40      	ldr	r3, [pc, #256]	; (80024dc <arm_PT_ST+0x610>)
 80023da:	f7fe f8e5 	bl	80005a8 <__aeabi_dmul>
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	4620      	mov	r0, r4
 80023e4:	4629      	mov	r1, r5
 80023e6:	f7fd ff29 	bl	800023c <__adddf3>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4610      	mov	r0, r2
 80023f0:	4619      	mov	r1, r3
 80023f2:	f7fe fbd1 	bl	8000b98 <__aeabi_d2f>
 80023f6:	4603      	mov	r3, r0
 80023f8:	4a39      	ldr	r2, [pc, #228]	; (80024e0 <arm_PT_ST+0x614>)
 80023fa:	6013      	str	r3, [r2, #0]

					NoiseLevelI = 0.125*meanValue + 0.875*NoiseLevelI;
 80023fc:	4b39      	ldr	r3, [pc, #228]	; (80024e4 <arm_PT_ST+0x618>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe f879 	bl	80004f8 <__aeabi_f2d>
 8002406:	f04f 0200 	mov.w	r2, #0
 800240a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800240e:	f7fe f8cb 	bl	80005a8 <__aeabi_dmul>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	4614      	mov	r4, r2
 8002418:	461d      	mov	r5, r3
 800241a:	4b2c      	ldr	r3, [pc, #176]	; (80024cc <arm_PT_ST+0x600>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe f86a 	bl	80004f8 <__aeabi_f2d>
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	4b29      	ldr	r3, [pc, #164]	; (80024d0 <arm_PT_ST+0x604>)
 800242a:	f7fe f8bd 	bl	80005a8 <__aeabi_dmul>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4620      	mov	r0, r4
 8002434:	4629      	mov	r1, r5
 8002436:	f7fd ff01 	bl	800023c <__adddf3>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4610      	mov	r0, r2
 8002440:	4619      	mov	r1, r3
 8002442:	f7fe fba9 	bl	8000b98 <__aeabi_d2f>
 8002446:	4603      	mov	r3, r0
 8002448:	4a20      	ldr	r2, [pc, #128]	; (80024cc <arm_PT_ST+0x600>)
 800244a:	6013      	str	r3, [r2, #0]
					TresholdI = NoiseLevelI + 0.25 * (SignalLevelI - NoiseLevelI);
 800244c:	4b1f      	ldr	r3, [pc, #124]	; (80024cc <arm_PT_ST+0x600>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe f851 	bl	80004f8 <__aeabi_f2d>
 8002456:	4604      	mov	r4, r0
 8002458:	460d      	mov	r5, r1
 800245a:	4b23      	ldr	r3, [pc, #140]	; (80024e8 <arm_PT_ST+0x61c>)
 800245c:	ed93 7a00 	vldr	s14, [r3]
 8002460:	4b1a      	ldr	r3, [pc, #104]	; (80024cc <arm_PT_ST+0x600>)
 8002462:	edd3 7a00 	vldr	s15, [r3]
 8002466:	ee77 7a67 	vsub.f32	s15, s14, s15
 800246a:	ee17 0a90 	vmov	r0, s15
 800246e:	f7fe f843 	bl	80004f8 <__aeabi_f2d>
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	4b19      	ldr	r3, [pc, #100]	; (80024dc <arm_PT_ST+0x610>)
 8002478:	f7fe f896 	bl	80005a8 <__aeabi_dmul>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4620      	mov	r0, r4
 8002482:	4629      	mov	r1, r5
 8002484:	f7fd feda 	bl	800023c <__adddf3>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4610      	mov	r0, r2
 800248e:	4619      	mov	r1, r3
 8002490:	f7fe fb82 	bl	8000b98 <__aeabi_d2f>
 8002494:	4603      	mov	r3, r0
 8002496:	4a15      	ldr	r2, [pc, #84]	; (80024ec <arm_PT_ST+0x620>)
 8002498:	6013      	str	r3, [r2, #0]

					previousSignalPeak = 0;
 800249a:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <arm_PT_ST+0x5fc>)
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
					previousMean = 0;
 80024a2:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <arm_PT_ST+0x624>)
 80024a4:	f04f 0200 	mov.w	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	e007      	b.n	80024bc <arm_PT_ST+0x5f0>
				}
			}
			else
			{
				previousSignalPeak = 0;
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <arm_PT_ST+0x5fc>)
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
				previousMean = 0;
 80024b4:	4b0e      	ldr	r3, [pc, #56]	; (80024f0 <arm_PT_ST+0x624>)
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
			}
		}
	}
	return 0;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bdb0      	pop	{r4, r5, r7, pc}
 80024c6:	bf00      	nop
 80024c8:	200005c0 	.word	0x200005c0
 80024cc:	200005bc 	.word	0x200005bc
 80024d0:	3fec0000 	.word	0x3fec0000
 80024d4:	200005cc 	.word	0x200005cc
 80024d8:	200005c8 	.word	0x200005c8
 80024dc:	3fd00000 	.word	0x3fd00000
 80024e0:	200005c4 	.word	0x200005c4
 80024e4:	200005ac 	.word	0x200005ac
 80024e8:	200005b8 	.word	0x200005b8
 80024ec:	200005b4 	.word	0x200005b4
 80024f0:	200005b0 	.word	0x200005b0

080024f4 <arm_get_LPFilter_output>:

float32_t arm_get_LPFilter_output()
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0

	return lowPassFilterResult;
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <arm_get_LPFilter_output+0x18>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	ee07 3a90 	vmov	s15, r3
}
 8002500:	eeb0 0a67 	vmov.f32	s0, s15
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	200004c4 	.word	0x200004c4

08002510 <arm_get_HPFilter_output>:

float32_t arm_get_HPFilter_output()
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0

	return highPassFilterResult;
 8002514:	4b04      	ldr	r3, [pc, #16]	; (8002528 <arm_get_HPFilter_output+0x18>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	ee07 3a90 	vmov	s15, r3
}
 800251c:	eeb0 0a67 	vmov.f32	s0, s15
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	200004a4 	.word	0x200004a4

0800252c <arm_get_DRFilter_output>:

float32_t arm_get_DRFilter_output()
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0

	return derivativeOutput[0];
 8002530:	4b04      	ldr	r3, [pc, #16]	; (8002544 <arm_get_DRFilter_output+0x18>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	ee07 3a90 	vmov	s15, r3
}
 8002538:	eeb0 0a67 	vmov.f32	s0, s15
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	20000488 	.word	0x20000488

08002548 <arm_get_SQRFilter_output>:

float32_t arm_get_SQRFilter_output()
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0

	return squaredValue;
 800254c:	4b04      	ldr	r3, [pc, #16]	; (8002560 <arm_get_SQRFilter_output+0x18>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	ee07 3a90 	vmov	s15, r3
}
 8002554:	eeb0 0a67 	vmov.f32	s0, s15
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	200004c8 	.word	0x200004c8

08002564 <arm_get_MVFilter_output>:

float32_t arm_get_MVFilter_output()
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
	return meanValue;
 8002568:	4b04      	ldr	r3, [pc, #16]	; (800257c <arm_get_MVFilter_output+0x18>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	ee07 3a90 	vmov	s15, r3
}
 8002570:	eeb0 0a67 	vmov.f32	s0, s15
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	200005ac 	.word	0x200005ac

08002580 <arm_get_ThI1_output>:

float32_t arm_get_ThI1_output()
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0

	return TresholdI;
 8002584:	4b04      	ldr	r3, [pc, #16]	; (8002598 <arm_get_ThI1_output+0x18>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	ee07 3a90 	vmov	s15, r3
}
 800258c:	eeb0 0a67 	vmov.f32	s0, s15
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	200005b4 	.word	0x200005b4

0800259c <arm_get_ThF1_output>:

float32_t arm_get_ThF1_output()
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0

	return TresholdF;
 80025a0:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <arm_get_ThF1_output+0x18>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	ee07 3a90 	vmov	s15, r3
}
 80025a8:	eeb0 0a67 	vmov.f32	s0, s15
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	200005c4 	.word	0x200005c4

080025b8 <Rafael_init>:
	// qrs tells whether there was a detection or not.
	// regular tells whether the heart pace is regular or not.
	// prevRegular tells whether the heart beat was regular before the newest RR-interval was calculated.
	bool qrs, regular = true, prevRegular;
void Rafael_init()
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0


	// Initializing the RR averages
	for (i = 0; i < 8; i++)
 80025bc:	4b29      	ldr	r3, [pc, #164]	; (8002664 <Rafael_init+0xac>)
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	e010      	b.n	80025e6 <Rafael_init+0x2e>
    {
        rr1[i] = 0;
 80025c4:	4b27      	ldr	r3, [pc, #156]	; (8002664 <Rafael_init+0xac>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a27      	ldr	r2, [pc, #156]	; (8002668 <Rafael_init+0xb0>)
 80025ca:	2100      	movs	r1, #0
 80025cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        rr2[i] = 0;
 80025d0:	4b24      	ldr	r3, [pc, #144]	; (8002664 <Rafael_init+0xac>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a25      	ldr	r2, [pc, #148]	; (800266c <Rafael_init+0xb4>)
 80025d6:	2100      	movs	r1, #0
 80025d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < 8; i++)
 80025dc:	4b21      	ldr	r3, [pc, #132]	; (8002664 <Rafael_init+0xac>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	3301      	adds	r3, #1
 80025e2:	4a20      	ldr	r2, [pc, #128]	; (8002664 <Rafael_init+0xac>)
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	4b1f      	ldr	r3, [pc, #124]	; (8002664 <Rafael_init+0xac>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2b07      	cmp	r3, #7
 80025ec:	d9ea      	bls.n	80025c4 <Rafael_init+0xc>
    }
	 rrlow = 0;
 80025ee:	4b20      	ldr	r3, [pc, #128]	; (8002670 <Rafael_init+0xb8>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
	 rrhigh = 0;
 80025f4:	4b1f      	ldr	r3, [pc, #124]	; (8002674 <Rafael_init+0xbc>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
	 rrmiss = 0;
 80025fa:	4b1f      	ldr	r3, [pc, #124]	; (8002678 <Rafael_init+0xc0>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
	 regular = true;
 8002600:	4b1e      	ldr	r3, [pc, #120]	; (800267c <Rafael_init+0xc4>)
 8002602:	2201      	movs	r2, #1
 8002604:	701a      	strb	r2, [r3, #0]
	 sample = 0;
 8002606:	4b1e      	ldr	r3, [pc, #120]	; (8002680 <Rafael_init+0xc8>)
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
	 lastQRS = 0;
 800260c:	4b1d      	ldr	r3, [pc, #116]	; (8002684 <Rafael_init+0xcc>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
	 lastSlope = 0;
 8002612:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <Rafael_init+0xd0>)
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
	 currentSlope = 0;
 8002618:	4b1c      	ldr	r3, [pc, #112]	; (800268c <Rafael_init+0xd4>)
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
	 peak_i = 0;
 800261e:	4b1c      	ldr	r3, [pc, #112]	; (8002690 <Rafael_init+0xd8>)
 8002620:	2200      	movs	r2, #0
 8002622:	801a      	strh	r2, [r3, #0]
	 peak_f = 0;
 8002624:	4b1b      	ldr	r3, [pc, #108]	; (8002694 <Rafael_init+0xdc>)
 8002626:	2200      	movs	r2, #0
 8002628:	801a      	strh	r2, [r3, #0]
	 threshold_i1 = 0;
 800262a:	4b1b      	ldr	r3, [pc, #108]	; (8002698 <Rafael_init+0xe0>)
 800262c:	2200      	movs	r2, #0
 800262e:	801a      	strh	r2, [r3, #0]
	 threshold_i2 = 0;
 8002630:	4b1a      	ldr	r3, [pc, #104]	; (800269c <Rafael_init+0xe4>)
 8002632:	2200      	movs	r2, #0
 8002634:	801a      	strh	r2, [r3, #0]
	 threshold_f1 = 0;
 8002636:	4b1a      	ldr	r3, [pc, #104]	; (80026a0 <Rafael_init+0xe8>)
 8002638:	2200      	movs	r2, #0
 800263a:	801a      	strh	r2, [r3, #0]
	 threshold_f2 = 0;
 800263c:	4b19      	ldr	r3, [pc, #100]	; (80026a4 <Rafael_init+0xec>)
 800263e:	2200      	movs	r2, #0
 8002640:	801a      	strh	r2, [r3, #0]
	 spk_i = 0;
 8002642:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <Rafael_init+0xf0>)
 8002644:	2200      	movs	r2, #0
 8002646:	801a      	strh	r2, [r3, #0]
	 spk_f = 0;
 8002648:	4b18      	ldr	r3, [pc, #96]	; (80026ac <Rafael_init+0xf4>)
 800264a:	2200      	movs	r2, #0
 800264c:	801a      	strh	r2, [r3, #0]
	 npk_i = 0;
 800264e:	4b18      	ldr	r3, [pc, #96]	; (80026b0 <Rafael_init+0xf8>)
 8002650:	2200      	movs	r2, #0
 8002652:	801a      	strh	r2, [r3, #0]
	 npk_f = 0;
 8002654:	4b17      	ldr	r3, [pc, #92]	; (80026b4 <Rafael_init+0xfc>)
 8002656:	2200      	movs	r2, #0
 8002658:	801a      	strh	r2, [r3, #0]
}
 800265a:	bf00      	nop
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	20002bac 	.word	0x20002bac
 8002668:	20002b58 	.word	0x20002b58
 800266c:	20002b78 	.word	0x20002b78
 8002670:	20002ba0 	.word	0x20002ba0
 8002674:	20002ba4 	.word	0x20002ba4
 8002678:	20002ba8 	.word	0x20002ba8
 800267c:	20000008 	.word	0x20000008
 8002680:	20002bb4 	.word	0x20002bb4
 8002684:	20002bb8 	.word	0x20002bb8
 8002688:	20002bbc 	.word	0x20002bbc
 800268c:	20002bc0 	.word	0x20002bc0
 8002690:	20002bc8 	.word	0x20002bc8
 8002694:	20002bca 	.word	0x20002bca
 8002698:	20002bcc 	.word	0x20002bcc
 800269c:	20002bce 	.word	0x20002bce
 80026a0:	20002bd0 	.word	0x20002bd0
 80026a4:	20002bd2 	.word	0x20002bd2
 80026a8:	20002bd4 	.word	0x20002bd4
 80026ac:	20002bd6 	.word	0x20002bd6
 80026b0:	20002bd8 	.word	0x20002bd8
 80026b4:	20002bda 	.word	0x20002bda

080026b8 <Rafael_PanTompkins>:
    and updates the thresholds and averages until there are no more samples. More details both above and in
    shorter comments below.
*/
//UPDATe: I changed the way that it operates, now works like hooman650's implementation
int16_t Rafael_PanTompkins(dataType input)
{
 80026b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026bc:	b084      	sub	sp, #16
 80026be:	af00      	add	r7, sp, #0
 80026c0:	4603      	mov	r3, r0
 80026c2:	80fb      	strh	r3, [r7, #6]

		int16_t result = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	81fb      	strh	r3, [r7, #14]
        // Test if the buffers are full.
        // If they are, shift them, discarding the oldest sample and adding the new one at the end.
        // Else, just put the newest sample in the next free position.
        // Update 'current' so that the program knows where's the newest sample.
		if (sample >= BUFFSIZE)
 80026c8:	4b5f      	ldr	r3, [pc, #380]	; (8002848 <Rafael_PanTompkins+0x190>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80026d0:	d36b      	bcc.n	80027aa <Rafael_PanTompkins+0xf2>
		{
			for (i = 0; i < BUFFSIZE - 1; i++)
 80026d2:	4b5e      	ldr	r3, [pc, #376]	; (800284c <Rafael_PanTompkins+0x194>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	e05c      	b.n	8002794 <Rafael_PanTompkins+0xdc>
			{
				RF_signal[i] =RF_signal[i+1];
 80026da:	4b5c      	ldr	r3, [pc, #368]	; (800284c <Rafael_PanTompkins+0x194>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	1c5a      	adds	r2, r3, #1
 80026e0:	4b5a      	ldr	r3, [pc, #360]	; (800284c <Rafael_PanTompkins+0x194>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	495a      	ldr	r1, [pc, #360]	; (8002850 <Rafael_PanTompkins+0x198>)
 80026e6:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80026ea:	4a59      	ldr	r2, [pc, #356]	; (8002850 <Rafael_PanTompkins+0x198>)
 80026ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_dcblock[i] = RF_dcblock[i+1];
 80026f0:	4b56      	ldr	r3, [pc, #344]	; (800284c <Rafael_PanTompkins+0x194>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	4b55      	ldr	r3, [pc, #340]	; (800284c <Rafael_PanTompkins+0x194>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4956      	ldr	r1, [pc, #344]	; (8002854 <Rafael_PanTompkins+0x19c>)
 80026fc:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002700:	4a54      	ldr	r2, [pc, #336]	; (8002854 <Rafael_PanTompkins+0x19c>)
 8002702:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_lowpass[i] = RF_lowpass[i+1];
 8002706:	4b51      	ldr	r3, [pc, #324]	; (800284c <Rafael_PanTompkins+0x194>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	4b4f      	ldr	r3, [pc, #316]	; (800284c <Rafael_PanTompkins+0x194>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4951      	ldr	r1, [pc, #324]	; (8002858 <Rafael_PanTompkins+0x1a0>)
 8002712:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002716:	4a50      	ldr	r2, [pc, #320]	; (8002858 <Rafael_PanTompkins+0x1a0>)
 8002718:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_highpass[i] = RF_highpass[i+1];
 800271c:	4b4b      	ldr	r3, [pc, #300]	; (800284c <Rafael_PanTompkins+0x194>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	4b4a      	ldr	r3, [pc, #296]	; (800284c <Rafael_PanTompkins+0x194>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	494d      	ldr	r1, [pc, #308]	; (800285c <Rafael_PanTompkins+0x1a4>)
 8002728:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800272c:	4a4b      	ldr	r2, [pc, #300]	; (800285c <Rafael_PanTompkins+0x1a4>)
 800272e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_derivative[i] = RF_derivative[i+1];
 8002732:	4b46      	ldr	r3, [pc, #280]	; (800284c <Rafael_PanTompkins+0x194>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	4b44      	ldr	r3, [pc, #272]	; (800284c <Rafael_PanTompkins+0x194>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4948      	ldr	r1, [pc, #288]	; (8002860 <Rafael_PanTompkins+0x1a8>)
 800273e:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002742:	4a47      	ldr	r2, [pc, #284]	; (8002860 <Rafael_PanTompkins+0x1a8>)
 8002744:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_squared[i] = RF_squared[i+1];
 8002748:	4b40      	ldr	r3, [pc, #256]	; (800284c <Rafael_PanTompkins+0x194>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	4b3f      	ldr	r3, [pc, #252]	; (800284c <Rafael_PanTompkins+0x194>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4944      	ldr	r1, [pc, #272]	; (8002864 <Rafael_PanTompkins+0x1ac>)
 8002754:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002758:	4a42      	ldr	r2, [pc, #264]	; (8002864 <Rafael_PanTompkins+0x1ac>)
 800275a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_integral[i] = RF_integral[i+1];
 800275e:	4b3b      	ldr	r3, [pc, #236]	; (800284c <Rafael_PanTompkins+0x194>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	1c5a      	adds	r2, r3, #1
 8002764:	4b39      	ldr	r3, [pc, #228]	; (800284c <Rafael_PanTompkins+0x194>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	493f      	ldr	r1, [pc, #252]	; (8002868 <Rafael_PanTompkins+0x1b0>)
 800276a:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800276e:	4a3e      	ldr	r2, [pc, #248]	; (8002868 <Rafael_PanTompkins+0x1b0>)
 8002770:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_outputSignal[i] = RF_outputSignal[i+1];
 8002774:	4b35      	ldr	r3, [pc, #212]	; (800284c <Rafael_PanTompkins+0x194>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	1c5a      	adds	r2, r3, #1
 800277a:	4b34      	ldr	r3, [pc, #208]	; (800284c <Rafael_PanTompkins+0x194>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	493b      	ldr	r1, [pc, #236]	; (800286c <Rafael_PanTompkins+0x1b4>)
 8002780:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002784:	4a39      	ldr	r2, [pc, #228]	; (800286c <Rafael_PanTompkins+0x1b4>)
 8002786:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (i = 0; i < BUFFSIZE - 1; i++)
 800278a:	4b30      	ldr	r3, [pc, #192]	; (800284c <Rafael_PanTompkins+0x194>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	3301      	adds	r3, #1
 8002790:	4a2e      	ldr	r2, [pc, #184]	; (800284c <Rafael_PanTompkins+0x194>)
 8002792:	6013      	str	r3, [r2, #0]
 8002794:	4b2d      	ldr	r3, [pc, #180]	; (800284c <Rafael_PanTompkins+0x194>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f240 2256 	movw	r2, #598	; 0x256
 800279c:	4293      	cmp	r3, r2
 800279e:	d99c      	bls.n	80026da <Rafael_PanTompkins+0x22>
			}
			current = BUFFSIZE - 1;
 80027a0:	4b33      	ldr	r3, [pc, #204]	; (8002870 <Rafael_PanTompkins+0x1b8>)
 80027a2:	f240 2257 	movw	r2, #599	; 0x257
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	e004      	b.n	80027b4 <Rafael_PanTompkins+0xfc>
		}
		else
		{
			current = sample;
 80027aa:	4b27      	ldr	r3, [pc, #156]	; (8002848 <Rafael_PanTompkins+0x190>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	4b2f      	ldr	r3, [pc, #188]	; (8002870 <Rafael_PanTompkins+0x1b8>)
 80027b2:	601a      	str	r2, [r3, #0]
		}
		RF_signal[current] = input;
 80027b4:	4b2e      	ldr	r3, [pc, #184]	; (8002870 <Rafael_PanTompkins+0x1b8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4925      	ldr	r1, [pc, #148]	; (8002850 <Rafael_PanTompkins+0x198>)
 80027ba:	88fa      	ldrh	r2, [r7, #6]
 80027bc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

		// If no sample was read, stop processing!
		//if (signal[current] == NOSAMPLE)
		//	break;
		sample++; // Update sample counter
 80027c0:	4b21      	ldr	r3, [pc, #132]	; (8002848 <Rafael_PanTompkins+0x190>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	3301      	adds	r3, #1
 80027c6:	4a20      	ldr	r2, [pc, #128]	; (8002848 <Rafael_PanTompkins+0x190>)
 80027c8:	6013      	str	r3, [r2, #0]

		// DC Block filter
		// This was not proposed on the original paper.
		// It is not necessary and can be removed if your sensor or database has no DC noise.
		if (current >= 1)
 80027ca:	4b29      	ldr	r3, [pc, #164]	; (8002870 <Rafael_PanTompkins+0x1b8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	dd50      	ble.n	8002874 <Rafael_PanTompkins+0x1bc>
			RF_dcblock[current] = RF_signal[current] - RF_signal[current-1] + 0.995*RF_dcblock[current-1];
 80027d2:	4b27      	ldr	r3, [pc, #156]	; (8002870 <Rafael_PanTompkins+0x1b8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a1e      	ldr	r2, [pc, #120]	; (8002850 <Rafael_PanTompkins+0x198>)
 80027d8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80027dc:	4619      	mov	r1, r3
 80027de:	4b24      	ldr	r3, [pc, #144]	; (8002870 <Rafael_PanTompkins+0x1b8>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	4a1a      	ldr	r2, [pc, #104]	; (8002850 <Rafael_PanTompkins+0x198>)
 80027e6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80027ea:	1acb      	subs	r3, r1, r3
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fd fe71 	bl	80004d4 <__aeabi_i2d>
 80027f2:	4604      	mov	r4, r0
 80027f4:	460d      	mov	r5, r1
 80027f6:	4b1e      	ldr	r3, [pc, #120]	; (8002870 <Rafael_PanTompkins+0x1b8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	3b01      	subs	r3, #1
 80027fc:	4a15      	ldr	r2, [pc, #84]	; (8002854 <Rafael_PanTompkins+0x19c>)
 80027fe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002802:	4618      	mov	r0, r3
 8002804:	f7fd fe66 	bl	80004d4 <__aeabi_i2d>
 8002808:	a30d      	add	r3, pc, #52	; (adr r3, 8002840 <Rafael_PanTompkins+0x188>)
 800280a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280e:	f7fd fecb 	bl	80005a8 <__aeabi_dmul>
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	4620      	mov	r0, r4
 8002818:	4629      	mov	r1, r5
 800281a:	f7fd fd0f 	bl	800023c <__adddf3>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	4913      	ldr	r1, [pc, #76]	; (8002870 <Rafael_PanTompkins+0x1b8>)
 8002824:	680c      	ldr	r4, [r1, #0]
 8002826:	4610      	mov	r0, r2
 8002828:	4619      	mov	r1, r3
 800282a:	f7fe f96d 	bl	8000b08 <__aeabi_d2iz>
 800282e:	4603      	mov	r3, r0
 8002830:	b21a      	sxth	r2, r3
 8002832:	4b08      	ldr	r3, [pc, #32]	; (8002854 <Rafael_PanTompkins+0x19c>)
 8002834:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8002838:	e022      	b.n	8002880 <Rafael_PanTompkins+0x1c8>
 800283a:	bf00      	nop
 800283c:	f3af 8000 	nop.w
 8002840:	3d70a3d7 	.word	0x3d70a3d7
 8002844:	3fefd70a 	.word	0x3fefd70a
 8002848:	20002bb4 	.word	0x20002bb4
 800284c:	20002bac 	.word	0x20002bac
 8002850:	200005d8 	.word	0x200005d8
 8002854:	20000a88 	.word	0x20000a88
 8002858:	20000f38 	.word	0x20000f38
 800285c:	200013e8 	.word	0x200013e8
 8002860:	20001898 	.word	0x20001898
 8002864:	20001d48 	.word	0x20001d48
 8002868:	200021f8 	.word	0x200021f8
 800286c:	200026a8 	.word	0x200026a8
 8002870:	20002bc4 	.word	0x20002bc4
		else
			RF_dcblock[current] = 0;
 8002874:	4b8a      	ldr	r3, [pc, #552]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a8a      	ldr	r2, [pc, #552]	; (8002aa4 <Rafael_PanTompkins+0x3ec>)
 800287a:	2100      	movs	r1, #0
 800287c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		// Low Pass filter
		// Implemented as proposed by the original paper.
		// y(nT) = 2y(nT - T) - y(nT - 2T) + x(nT) - 2x(nT - 6T) + x(nT - 12T)
		// Can be removed if your signal was previously filtered, or replaced by a different filter.
		RF_lowpass[current] = RF_dcblock[current];
 8002880:	4b87      	ldr	r3, [pc, #540]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	4b86      	ldr	r3, [pc, #536]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4986      	ldr	r1, [pc, #536]	; (8002aa4 <Rafael_PanTompkins+0x3ec>)
 800288a:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800288e:	4a86      	ldr	r2, [pc, #536]	; (8002aa8 <Rafael_PanTompkins+0x3f0>)
 8002890:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 1)
 8002894:	4b82      	ldr	r3, [pc, #520]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	dd16      	ble.n	80028ca <Rafael_PanTompkins+0x212>
			RF_lowpass[current] += 2*RF_lowpass[current-1];
 800289c:	4b80      	ldr	r3, [pc, #512]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a81      	ldr	r2, [pc, #516]	; (8002aa8 <Rafael_PanTompkins+0x3f0>)
 80028a2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	4b7d      	ldr	r3, [pc, #500]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	3b01      	subs	r3, #1
 80028ae:	497e      	ldr	r1, [pc, #504]	; (8002aa8 <Rafael_PanTompkins+0x3f0>)
 80028b0:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	4413      	add	r3, r2
 80028bc:	b29a      	uxth	r2, r3
 80028be:	4b78      	ldr	r3, [pc, #480]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	b211      	sxth	r1, r2
 80028c4:	4a78      	ldr	r2, [pc, #480]	; (8002aa8 <Rafael_PanTompkins+0x3f0>)
 80028c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 2)
 80028ca:	4b75      	ldr	r3, [pc, #468]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	dd14      	ble.n	80028fc <Rafael_PanTompkins+0x244>
			RF_lowpass[current] -= RF_lowpass[current-2];
 80028d2:	4b73      	ldr	r3, [pc, #460]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a74      	ldr	r2, [pc, #464]	; (8002aa8 <Rafael_PanTompkins+0x3f0>)
 80028d8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80028dc:	b29a      	uxth	r2, r3
 80028de:	4b70      	ldr	r3, [pc, #448]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	3b02      	subs	r3, #2
 80028e4:	4970      	ldr	r1, [pc, #448]	; (8002aa8 <Rafael_PanTompkins+0x3f0>)
 80028e6:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	4b6b      	ldr	r3, [pc, #428]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	b211      	sxth	r1, r2
 80028f6:	4a6c      	ldr	r2, [pc, #432]	; (8002aa8 <Rafael_PanTompkins+0x3f0>)
 80028f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 6)
 80028fc:	4b68      	ldr	r3, [pc, #416]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2b05      	cmp	r3, #5
 8002902:	dd16      	ble.n	8002932 <Rafael_PanTompkins+0x27a>
			RF_lowpass[current] -= 2*RF_dcblock[current-6];
 8002904:	4b66      	ldr	r3, [pc, #408]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a67      	ldr	r2, [pc, #412]	; (8002aa8 <Rafael_PanTompkins+0x3f0>)
 800290a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800290e:	b29a      	uxth	r2, r3
 8002910:	4b63      	ldr	r3, [pc, #396]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	3b06      	subs	r3, #6
 8002916:	4963      	ldr	r1, [pc, #396]	; (8002aa4 <Rafael_PanTompkins+0x3ec>)
 8002918:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800291c:	b29b      	uxth	r3, r3
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	b29b      	uxth	r3, r3
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	b29a      	uxth	r2, r3
 8002926:	4b5e      	ldr	r3, [pc, #376]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	b211      	sxth	r1, r2
 800292c:	4a5e      	ldr	r2, [pc, #376]	; (8002aa8 <Rafael_PanTompkins+0x3f0>)
 800292e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 12)
 8002932:	4b5b      	ldr	r3, [pc, #364]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b0b      	cmp	r3, #11
 8002938:	dd14      	ble.n	8002964 <Rafael_PanTompkins+0x2ac>
			RF_lowpass[current] += RF_dcblock[current-12];
 800293a:	4b59      	ldr	r3, [pc, #356]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a5a      	ldr	r2, [pc, #360]	; (8002aa8 <Rafael_PanTompkins+0x3f0>)
 8002940:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002944:	b29a      	uxth	r2, r3
 8002946:	4b56      	ldr	r3, [pc, #344]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	3b0c      	subs	r3, #12
 800294c:	4955      	ldr	r1, [pc, #340]	; (8002aa4 <Rafael_PanTompkins+0x3ec>)
 800294e:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002952:	b29b      	uxth	r3, r3
 8002954:	4413      	add	r3, r2
 8002956:	b29a      	uxth	r2, r3
 8002958:	4b51      	ldr	r3, [pc, #324]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	b211      	sxth	r1, r2
 800295e:	4a52      	ldr	r2, [pc, #328]	; (8002aa8 <Rafael_PanTompkins+0x3f0>)
 8002960:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		// High Pass filter
		// Implemented as proposed by the original paper.
		// y(nT) = 32x(nT - 16T) - [y(nT - T) + x(nT) - x(nT - 32T)]
		// Can be removed if your signal was previously filtered, or replaced by a different filter.
		RF_highpass[current] = -RF_lowpass[current];
 8002964:	4b4e      	ldr	r3, [pc, #312]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a4f      	ldr	r2, [pc, #316]	; (8002aa8 <Rafael_PanTompkins+0x3f0>)
 800296a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800296e:	b29b      	uxth	r3, r3
 8002970:	425b      	negs	r3, r3
 8002972:	b29a      	uxth	r2, r3
 8002974:	4b4a      	ldr	r3, [pc, #296]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	b211      	sxth	r1, r2
 800297a:	4a4c      	ldr	r2, [pc, #304]	; (8002aac <Rafael_PanTompkins+0x3f4>)
 800297c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 1)
 8002980:	4b47      	ldr	r3, [pc, #284]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	dd14      	ble.n	80029b2 <Rafael_PanTompkins+0x2fa>
			RF_highpass[current] -= RF_highpass[current-1];
 8002988:	4b45      	ldr	r3, [pc, #276]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a47      	ldr	r2, [pc, #284]	; (8002aac <Rafael_PanTompkins+0x3f4>)
 800298e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002992:	b29a      	uxth	r2, r3
 8002994:	4b42      	ldr	r3, [pc, #264]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	3b01      	subs	r3, #1
 800299a:	4944      	ldr	r1, [pc, #272]	; (8002aac <Rafael_PanTompkins+0x3f4>)
 800299c:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	4b3e      	ldr	r3, [pc, #248]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	b211      	sxth	r1, r2
 80029ac:	4a3f      	ldr	r2, [pc, #252]	; (8002aac <Rafael_PanTompkins+0x3f4>)
 80029ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 16)
 80029b2:	4b3b      	ldr	r3, [pc, #236]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2b0f      	cmp	r3, #15
 80029b8:	dd16      	ble.n	80029e8 <Rafael_PanTompkins+0x330>
			RF_highpass[current] += 32*RF_lowpass[current-16];
 80029ba:	4b39      	ldr	r3, [pc, #228]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a3b      	ldr	r2, [pc, #236]	; (8002aac <Rafael_PanTompkins+0x3f4>)
 80029c0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	4b36      	ldr	r3, [pc, #216]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	3b10      	subs	r3, #16
 80029cc:	4936      	ldr	r1, [pc, #216]	; (8002aa8 <Rafael_PanTompkins+0x3f0>)
 80029ce:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	015b      	lsls	r3, r3, #5
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	4413      	add	r3, r2
 80029da:	b29a      	uxth	r2, r3
 80029dc:	4b30      	ldr	r3, [pc, #192]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	b211      	sxth	r1, r2
 80029e2:	4a32      	ldr	r2, [pc, #200]	; (8002aac <Rafael_PanTompkins+0x3f4>)
 80029e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 32)
 80029e8:	4b2d      	ldr	r3, [pc, #180]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b1f      	cmp	r3, #31
 80029ee:	dd14      	ble.n	8002a1a <Rafael_PanTompkins+0x362>
			RF_highpass[current] += RF_lowpass[current-32];
 80029f0:	4b2b      	ldr	r3, [pc, #172]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a2d      	ldr	r2, [pc, #180]	; (8002aac <Rafael_PanTompkins+0x3f4>)
 80029f6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	4b28      	ldr	r3, [pc, #160]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	3b20      	subs	r3, #32
 8002a02:	4929      	ldr	r1, [pc, #164]	; (8002aa8 <Rafael_PanTompkins+0x3f0>)
 8002a04:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	b211      	sxth	r1, r2
 8002a14:	4a25      	ldr	r2, [pc, #148]	; (8002aac <Rafael_PanTompkins+0x3f4>)
 8002a16:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		// Derivative filter
		// This is an alternative implementation, the central difference method.
		// f'(a) = [f(a+h) - f(a-h)]/2h
		// The original formula used by Pan-Tompkins was:
		// y(nT) = (1/8T)[-x(nT - 2T) - 2x(nT - T) + 2x(nT + T) + x(nT + 2T)]
		RF_derivative[current] = RF_highpass[current];
 8002a1a:	4b21      	ldr	r3, [pc, #132]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	4b20      	ldr	r3, [pc, #128]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4922      	ldr	r1, [pc, #136]	; (8002aac <Rafael_PanTompkins+0x3f4>)
 8002a24:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002a28:	4a21      	ldr	r2, [pc, #132]	; (8002ab0 <Rafael_PanTompkins+0x3f8>)
 8002a2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current > 0)
 8002a2e:	4b1c      	ldr	r3, [pc, #112]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	dd14      	ble.n	8002a60 <Rafael_PanTompkins+0x3a8>
			RF_derivative[current] -= RF_highpass[current-1];
 8002a36:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a1d      	ldr	r2, [pc, #116]	; (8002ab0 <Rafael_PanTompkins+0x3f8>)
 8002a3c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	4b17      	ldr	r3, [pc, #92]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	4918      	ldr	r1, [pc, #96]	; (8002aac <Rafael_PanTompkins+0x3f4>)
 8002a4a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	b211      	sxth	r1, r2
 8002a5a:	4a15      	ldr	r2, [pc, #84]	; (8002ab0 <Rafael_PanTompkins+0x3f8>)
 8002a5c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		// This just squares the derivative, to get rid of negative values and emphasize high frequencies.
		// y(nT) = [x(nT)]^2.
		RF_squared[current] = RF_derivative[current]*RF_derivative[current];
 8002a60:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a12      	ldr	r2, [pc, #72]	; (8002ab0 <Rafael_PanTompkins+0x3f8>)
 8002a66:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	490f      	ldr	r1, [pc, #60]	; (8002ab0 <Rafael_PanTompkins+0x3f8>)
 8002a72:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	fb12 f303 	smulbb	r3, r2, r3
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	b211      	sxth	r1, r2
 8002a84:	4a0b      	ldr	r2, [pc, #44]	; (8002ab4 <Rafael_PanTompkins+0x3fc>)
 8002a86:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		// Moving-Window Integration
		// Implemented as proposed by the original paper.
		// y(nT) = (1/N)[x(nT - (N - 1)T) + x(nT - (N - 2)T) + ... x(nT)]
		// WINDOWSIZE, in samples, must be defined so that the window is ~150ms.

		RF_integral[current] = 0;
 8002a8a:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <Rafael_PanTompkins+0x3e8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <Rafael_PanTompkins+0x400>)
 8002a90:	2100      	movs	r1, #0
 8002a92:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (i = 0; i < WINDOWSIZE; i++)
 8002a96:	4b09      	ldr	r3, [pc, #36]	; (8002abc <Rafael_PanTompkins+0x404>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	e035      	b.n	8002b0a <Rafael_PanTompkins+0x452>
 8002a9e:	bf00      	nop
 8002aa0:	20002bc4 	.word	0x20002bc4
 8002aa4:	20000a88 	.word	0x20000a88
 8002aa8:	20000f38 	.word	0x20000f38
 8002aac:	200013e8 	.word	0x200013e8
 8002ab0:	20001898 	.word	0x20001898
 8002ab4:	20001d48 	.word	0x20001d48
 8002ab8:	200021f8 	.word	0x200021f8
 8002abc:	20002bac 	.word	0x20002bac
		{
			if (current >= (dataType)i)
 8002ac0:	4b5e      	ldr	r3, [pc, #376]	; (8002c3c <Rafael_PanTompkins+0x584>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	b21b      	sxth	r3, r3
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	4b5d      	ldr	r3, [pc, #372]	; (8002c40 <Rafael_PanTompkins+0x588>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	dc21      	bgt.n	8002b14 <Rafael_PanTompkins+0x45c>
				RF_integral[current] += RF_squared[current - i];
 8002ad0:	4b5b      	ldr	r3, [pc, #364]	; (8002c40 <Rafael_PanTompkins+0x588>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a5b      	ldr	r2, [pc, #364]	; (8002c44 <Rafael_PanTompkins+0x58c>)
 8002ad6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	4b58      	ldr	r3, [pc, #352]	; (8002c40 <Rafael_PanTompkins+0x588>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4b56      	ldr	r3, [pc, #344]	; (8002c3c <Rafael_PanTompkins+0x584>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	1acb      	subs	r3, r1, r3
 8002ae8:	4957      	ldr	r1, [pc, #348]	; (8002c48 <Rafael_PanTompkins+0x590>)
 8002aea:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	4413      	add	r3, r2
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	4b52      	ldr	r3, [pc, #328]	; (8002c40 <Rafael_PanTompkins+0x588>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	b211      	sxth	r1, r2
 8002afa:	4a52      	ldr	r2, [pc, #328]	; (8002c44 <Rafael_PanTompkins+0x58c>)
 8002afc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (i = 0; i < WINDOWSIZE; i++)
 8002b00:	4b4e      	ldr	r3, [pc, #312]	; (8002c3c <Rafael_PanTompkins+0x584>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	3301      	adds	r3, #1
 8002b06:	4a4d      	ldr	r2, [pc, #308]	; (8002c3c <Rafael_PanTompkins+0x584>)
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	4b4c      	ldr	r3, [pc, #304]	; (8002c3c <Rafael_PanTompkins+0x584>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b13      	cmp	r3, #19
 8002b10:	d9d6      	bls.n	8002ac0 <Rafael_PanTompkins+0x408>
 8002b12:	e000      	b.n	8002b16 <Rafael_PanTompkins+0x45e>
			else
				break;
 8002b14:	bf00      	nop
		}
		RF_integral[current] /= (dataType)i;
 8002b16:	4b4a      	ldr	r3, [pc, #296]	; (8002c40 <Rafael_PanTompkins+0x588>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a4a      	ldr	r2, [pc, #296]	; (8002c44 <Rafael_PanTompkins+0x58c>)
 8002b1c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002b20:	461a      	mov	r2, r3
 8002b22:	4b46      	ldr	r3, [pc, #280]	; (8002c3c <Rafael_PanTompkins+0x584>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	b21b      	sxth	r3, r3
 8002b28:	fb92 f2f3 	sdiv	r2, r2, r3
 8002b2c:	4b44      	ldr	r3, [pc, #272]	; (8002c40 <Rafael_PanTompkins+0x588>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	b211      	sxth	r1, r2
 8002b32:	4a44      	ldr	r2, [pc, #272]	; (8002c44 <Rafael_PanTompkins+0x58c>)
 8002b34:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		qrs = false;
 8002b38:	4b44      	ldr	r3, [pc, #272]	; (8002c4c <Rafael_PanTompkins+0x594>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	701a      	strb	r2, [r3, #0]

		// If the current signal is above one of the thresholds (integral or filtered signal), it's a peak candidate.
        if (RF_integral[current] >= threshold_i1 || RF_highpass[current] >= threshold_f1)
 8002b3e:	4b40      	ldr	r3, [pc, #256]	; (8002c40 <Rafael_PanTompkins+0x588>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a40      	ldr	r2, [pc, #256]	; (8002c44 <Rafael_PanTompkins+0x58c>)
 8002b44:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002b48:	4b41      	ldr	r3, [pc, #260]	; (8002c50 <Rafael_PanTompkins+0x598>)
 8002b4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	da09      	bge.n	8002b66 <Rafael_PanTompkins+0x4ae>
 8002b52:	4b3b      	ldr	r3, [pc, #236]	; (8002c40 <Rafael_PanTompkins+0x588>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a3f      	ldr	r2, [pc, #252]	; (8002c54 <Rafael_PanTompkins+0x59c>)
 8002b58:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002b5c:	4b3e      	ldr	r3, [pc, #248]	; (8002c58 <Rafael_PanTompkins+0x5a0>)
 8002b5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	db0d      	blt.n	8002b82 <Rafael_PanTompkins+0x4ca>
        {
            peak_i = RF_integral[current];
 8002b66:	4b36      	ldr	r3, [pc, #216]	; (8002c40 <Rafael_PanTompkins+0x588>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a36      	ldr	r2, [pc, #216]	; (8002c44 <Rafael_PanTompkins+0x58c>)
 8002b6c:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002b70:	4b3a      	ldr	r3, [pc, #232]	; (8002c5c <Rafael_PanTompkins+0x5a4>)
 8002b72:	801a      	strh	r2, [r3, #0]
            peak_f = RF_highpass[current];
 8002b74:	4b32      	ldr	r3, [pc, #200]	; (8002c40 <Rafael_PanTompkins+0x588>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a36      	ldr	r2, [pc, #216]	; (8002c54 <Rafael_PanTompkins+0x59c>)
 8002b7a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002b7e:	4b38      	ldr	r3, [pc, #224]	; (8002c60 <Rafael_PanTompkins+0x5a8>)
 8002b80:	801a      	strh	r2, [r3, #0]
        }

		// If both the integral and the signal are above their thresholds, they're probably signal peaks.
		if ((RF_integral[current] >= threshold_i1) && (RF_highpass[current] >= threshold_f1))
 8002b82:	4b2f      	ldr	r3, [pc, #188]	; (8002c40 <Rafael_PanTompkins+0x588>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a2f      	ldr	r2, [pc, #188]	; (8002c44 <Rafael_PanTompkins+0x58c>)
 8002b88:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002b8c:	4b30      	ldr	r3, [pc, #192]	; (8002c50 <Rafael_PanTompkins+0x598>)
 8002b8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	f2c0 837b 	blt.w	800328e <Rafael_PanTompkins+0xbd6>
 8002b98:	4b29      	ldr	r3, [pc, #164]	; (8002c40 <Rafael_PanTompkins+0x588>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a2d      	ldr	r2, [pc, #180]	; (8002c54 <Rafael_PanTompkins+0x59c>)
 8002b9e:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002ba2:	4b2d      	ldr	r3, [pc, #180]	; (8002c58 <Rafael_PanTompkins+0x5a0>)
 8002ba4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	f2c0 8370 	blt.w	800328e <Rafael_PanTompkins+0xbd6>
		{
			// There's a 200ms latency. If the new peak respects this condition, we can keep testing.
			if (sample > lastQRS + FS/5)
 8002bae:	4b2d      	ldr	r3, [pc, #180]	; (8002c64 <Rafael_PanTompkins+0x5ac>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002bb6:	4b2c      	ldr	r3, [pc, #176]	; (8002c68 <Rafael_PanTompkins+0x5b0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	f080 827e 	bcs.w	80030bc <Rafael_PanTompkins+0xa04>
			{
			    // If it respects the 200ms latency, but it doesn't respect the 360ms latency, we check the slope.
				if (sample <= lastQRS + (long unsigned int)(0.36*FS))
 8002bc0:	4b28      	ldr	r3, [pc, #160]	; (8002c64 <Rafael_PanTompkins+0x5ac>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f103 0281 	add.w	r2, r3, #129	; 0x81
 8002bc8:	4b27      	ldr	r3, [pc, #156]	; (8002c68 <Rafael_PanTompkins+0x5b0>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	f0c0 812b 	bcc.w	8002e28 <Rafael_PanTompkins+0x770>
				{
				    // The squared slope is "M" shaped. So we have to check nearby samples to make sure we're really looking
				    // at its peak value, rather than a low one.
				    currentSlope = 0;
 8002bd2:	4b26      	ldr	r3, [pc, #152]	; (8002c6c <Rafael_PanTompkins+0x5b4>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
				    for (j = current - 10; j <= current; j++)
 8002bd8:	4b19      	ldr	r3, [pc, #100]	; (8002c40 <Rafael_PanTompkins+0x588>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	3b0a      	subs	r3, #10
 8002bde:	461a      	mov	r2, r3
 8002be0:	4b23      	ldr	r3, [pc, #140]	; (8002c70 <Rafael_PanTompkins+0x5b8>)
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	e016      	b.n	8002c14 <Rafael_PanTompkins+0x55c>
                        if (RF_squared[j] > currentSlope)
 8002be6:	4b22      	ldr	r3, [pc, #136]	; (8002c70 <Rafael_PanTompkins+0x5b8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a17      	ldr	r2, [pc, #92]	; (8002c48 <Rafael_PanTompkins+0x590>)
 8002bec:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4b1e      	ldr	r3, [pc, #120]	; (8002c6c <Rafael_PanTompkins+0x5b4>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d907      	bls.n	8002c0a <Rafael_PanTompkins+0x552>
                            currentSlope = RF_squared[j];
 8002bfa:	4b1d      	ldr	r3, [pc, #116]	; (8002c70 <Rafael_PanTompkins+0x5b8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a12      	ldr	r2, [pc, #72]	; (8002c48 <Rafael_PanTompkins+0x590>)
 8002c00:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002c04:	461a      	mov	r2, r3
 8002c06:	4b19      	ldr	r3, [pc, #100]	; (8002c6c <Rafael_PanTompkins+0x5b4>)
 8002c08:	601a      	str	r2, [r3, #0]
				    for (j = current - 10; j <= current; j++)
 8002c0a:	4b19      	ldr	r3, [pc, #100]	; (8002c70 <Rafael_PanTompkins+0x5b8>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	4a17      	ldr	r2, [pc, #92]	; (8002c70 <Rafael_PanTompkins+0x5b8>)
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <Rafael_PanTompkins+0x5b8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a09      	ldr	r2, [pc, #36]	; (8002c40 <Rafael_PanTompkins+0x588>)
 8002c1a:	6812      	ldr	r2, [r2, #0]
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d9e2      	bls.n	8002be6 <Rafael_PanTompkins+0x52e>

				    if (currentSlope <= (dataType)(lastSlope/2))
 8002c20:	4b14      	ldr	r3, [pc, #80]	; (8002c74 <Rafael_PanTompkins+0x5bc>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	085b      	lsrs	r3, r3, #1
 8002c26:	b21b      	sxth	r3, r3
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <Rafael_PanTompkins+0x5b4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d322      	bcc.n	8002c78 <Rafael_PanTompkins+0x5c0>
                    {
                        qrs = false;
 8002c32:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <Rafael_PanTompkins+0x594>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	701a      	strb	r2, [r3, #0]
 8002c38:	e329      	b.n	800328e <Rafael_PanTompkins+0xbd6>
 8002c3a:	bf00      	nop
 8002c3c:	20002bac 	.word	0x20002bac
 8002c40:	20002bc4 	.word	0x20002bc4
 8002c44:	200021f8 	.word	0x200021f8
 8002c48:	20001d48 	.word	0x20001d48
 8002c4c:	20002bdc 	.word	0x20002bdc
 8002c50:	20002bcc 	.word	0x20002bcc
 8002c54:	200013e8 	.word	0x200013e8
 8002c58:	20002bd0 	.word	0x20002bd0
 8002c5c:	20002bc8 	.word	0x20002bc8
 8002c60:	20002bca 	.word	0x20002bca
 8002c64:	20002bb8 	.word	0x20002bb8
 8002c68:	20002bb4 	.word	0x20002bb4
 8002c6c:	20002bc0 	.word	0x20002bc0
 8002c70:	20002bb0 	.word	0x20002bb0
 8002c74:	20002bbc 	.word	0x20002bbc
                    }

                    else
                    {
                        spk_i = 0.125*peak_i + 0.875*spk_i;
 8002c78:	4b70      	ldr	r3, [pc, #448]	; (8002e3c <Rafael_PanTompkins+0x784>)
 8002c7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fd fc28 	bl	80004d4 <__aeabi_i2d>
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002c8c:	f7fd fc8c 	bl	80005a8 <__aeabi_dmul>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4614      	mov	r4, r2
 8002c96:	461d      	mov	r5, r3
 8002c98:	4b69      	ldr	r3, [pc, #420]	; (8002e40 <Rafael_PanTompkins+0x788>)
 8002c9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fd fc18 	bl	80004d4 <__aeabi_i2d>
 8002ca4:	f04f 0200 	mov.w	r2, #0
 8002ca8:	4b66      	ldr	r3, [pc, #408]	; (8002e44 <Rafael_PanTompkins+0x78c>)
 8002caa:	f7fd fc7d 	bl	80005a8 <__aeabi_dmul>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4620      	mov	r0, r4
 8002cb4:	4629      	mov	r1, r5
 8002cb6:	f7fd fac1 	bl	800023c <__adddf3>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4610      	mov	r0, r2
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	f7fd ff21 	bl	8000b08 <__aeabi_d2iz>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	b21a      	sxth	r2, r3
 8002cca:	4b5d      	ldr	r3, [pc, #372]	; (8002e40 <Rafael_PanTompkins+0x788>)
 8002ccc:	801a      	strh	r2, [r3, #0]
                        threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8002cce:	4b5e      	ldr	r3, [pc, #376]	; (8002e48 <Rafael_PanTompkins+0x790>)
 8002cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7fd fbfd 	bl	80004d4 <__aeabi_i2d>
 8002cda:	4604      	mov	r4, r0
 8002cdc:	460d      	mov	r5, r1
 8002cde:	4b58      	ldr	r3, [pc, #352]	; (8002e40 <Rafael_PanTompkins+0x788>)
 8002ce0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4b58      	ldr	r3, [pc, #352]	; (8002e48 <Rafael_PanTompkins+0x790>)
 8002ce8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fd fbf0 	bl	80004d4 <__aeabi_i2d>
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	4b54      	ldr	r3, [pc, #336]	; (8002e4c <Rafael_PanTompkins+0x794>)
 8002cfa:	f7fd fc55 	bl	80005a8 <__aeabi_dmul>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	4620      	mov	r0, r4
 8002d04:	4629      	mov	r1, r5
 8002d06:	f7fd fa99 	bl	800023c <__adddf3>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	4610      	mov	r0, r2
 8002d10:	4619      	mov	r1, r3
 8002d12:	f7fd fef9 	bl	8000b08 <__aeabi_d2iz>
 8002d16:	4603      	mov	r3, r0
 8002d18:	b21a      	sxth	r2, r3
 8002d1a:	4b4d      	ldr	r3, [pc, #308]	; (8002e50 <Rafael_PanTompkins+0x798>)
 8002d1c:	801a      	strh	r2, [r3, #0]
                        threshold_i2 = 0.5*threshold_i1;
 8002d1e:	4b4c      	ldr	r3, [pc, #304]	; (8002e50 <Rafael_PanTompkins+0x798>)
 8002d20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fd fbd5 	bl	80004d4 <__aeabi_i2d>
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	4b49      	ldr	r3, [pc, #292]	; (8002e54 <Rafael_PanTompkins+0x79c>)
 8002d30:	f7fd fc3a 	bl	80005a8 <__aeabi_dmul>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4610      	mov	r0, r2
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	f7fd fee4 	bl	8000b08 <__aeabi_d2iz>
 8002d40:	4603      	mov	r3, r0
 8002d42:	b21a      	sxth	r2, r3
 8002d44:	4b44      	ldr	r3, [pc, #272]	; (8002e58 <Rafael_PanTompkins+0x7a0>)
 8002d46:	801a      	strh	r2, [r3, #0]

                        spk_f = 0.125*peak_f + 0.875*spk_f;
 8002d48:	4b44      	ldr	r3, [pc, #272]	; (8002e5c <Rafael_PanTompkins+0x7a4>)
 8002d4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fd fbc0 	bl	80004d4 <__aeabi_i2d>
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002d5c:	f7fd fc24 	bl	80005a8 <__aeabi_dmul>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4614      	mov	r4, r2
 8002d66:	461d      	mov	r5, r3
 8002d68:	4b3d      	ldr	r3, [pc, #244]	; (8002e60 <Rafael_PanTompkins+0x7a8>)
 8002d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fd fbb0 	bl	80004d4 <__aeabi_i2d>
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	4b32      	ldr	r3, [pc, #200]	; (8002e44 <Rafael_PanTompkins+0x78c>)
 8002d7a:	f7fd fc15 	bl	80005a8 <__aeabi_dmul>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4620      	mov	r0, r4
 8002d84:	4629      	mov	r1, r5
 8002d86:	f7fd fa59 	bl	800023c <__adddf3>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4610      	mov	r0, r2
 8002d90:	4619      	mov	r1, r3
 8002d92:	f7fd feb9 	bl	8000b08 <__aeabi_d2iz>
 8002d96:	4603      	mov	r3, r0
 8002d98:	b21a      	sxth	r2, r3
 8002d9a:	4b31      	ldr	r3, [pc, #196]	; (8002e60 <Rafael_PanTompkins+0x7a8>)
 8002d9c:	801a      	strh	r2, [r3, #0]
                        threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 8002d9e:	4b31      	ldr	r3, [pc, #196]	; (8002e64 <Rafael_PanTompkins+0x7ac>)
 8002da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fd fb95 	bl	80004d4 <__aeabi_i2d>
 8002daa:	4604      	mov	r4, r0
 8002dac:	460d      	mov	r5, r1
 8002dae:	4b2c      	ldr	r3, [pc, #176]	; (8002e60 <Rafael_PanTompkins+0x7a8>)
 8002db0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002db4:	461a      	mov	r2, r3
 8002db6:	4b2b      	ldr	r3, [pc, #172]	; (8002e64 <Rafael_PanTompkins+0x7ac>)
 8002db8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fd fb88 	bl	80004d4 <__aeabi_i2d>
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	4b20      	ldr	r3, [pc, #128]	; (8002e4c <Rafael_PanTompkins+0x794>)
 8002dca:	f7fd fbed 	bl	80005a8 <__aeabi_dmul>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	4629      	mov	r1, r5
 8002dd6:	f7fd fa31 	bl	800023c <__adddf3>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4610      	mov	r0, r2
 8002de0:	4619      	mov	r1, r3
 8002de2:	f7fd fe91 	bl	8000b08 <__aeabi_d2iz>
 8002de6:	4603      	mov	r3, r0
 8002de8:	b21a      	sxth	r2, r3
 8002dea:	4b1f      	ldr	r3, [pc, #124]	; (8002e68 <Rafael_PanTompkins+0x7b0>)
 8002dec:	801a      	strh	r2, [r3, #0]
                        threshold_f2 = 0.5*threshold_f1;
 8002dee:	4b1e      	ldr	r3, [pc, #120]	; (8002e68 <Rafael_PanTompkins+0x7b0>)
 8002df0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7fd fb6d 	bl	80004d4 <__aeabi_i2d>
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	4b15      	ldr	r3, [pc, #84]	; (8002e54 <Rafael_PanTompkins+0x79c>)
 8002e00:	f7fd fbd2 	bl	80005a8 <__aeabi_dmul>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4610      	mov	r0, r2
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	f7fd fe7c 	bl	8000b08 <__aeabi_d2iz>
 8002e10:	4603      	mov	r3, r0
 8002e12:	b21a      	sxth	r2, r3
 8002e14:	4b15      	ldr	r3, [pc, #84]	; (8002e6c <Rafael_PanTompkins+0x7b4>)
 8002e16:	801a      	strh	r2, [r3, #0]

                        lastSlope = currentSlope;
 8002e18:	4b15      	ldr	r3, [pc, #84]	; (8002e70 <Rafael_PanTompkins+0x7b8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a15      	ldr	r2, [pc, #84]	; (8002e74 <Rafael_PanTompkins+0x7bc>)
 8002e1e:	6013      	str	r3, [r2, #0]
                        qrs = true;
 8002e20:	4b15      	ldr	r3, [pc, #84]	; (8002e78 <Rafael_PanTompkins+0x7c0>)
 8002e22:	2201      	movs	r2, #1
 8002e24:	701a      	strb	r2, [r3, #0]
 8002e26:	e232      	b.n	800328e <Rafael_PanTompkins+0xbd6>
                    }
				}
				// If it was above both thresholds and respects both latency periods, it certainly is a R peak.
				else
				{
				    currentSlope = 0;
 8002e28:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <Rafael_PanTompkins+0x7b8>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]
                    for (j = current - 10; j <= current; j++)
 8002e2e:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <Rafael_PanTompkins+0x7c4>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	3b0a      	subs	r3, #10
 8002e34:	461a      	mov	r2, r3
 8002e36:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <Rafael_PanTompkins+0x7c8>)
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	e03a      	b.n	8002eb2 <Rafael_PanTompkins+0x7fa>
 8002e3c:	20002bc8 	.word	0x20002bc8
 8002e40:	20002bd4 	.word	0x20002bd4
 8002e44:	3fec0000 	.word	0x3fec0000
 8002e48:	20002bd8 	.word	0x20002bd8
 8002e4c:	3fd00000 	.word	0x3fd00000
 8002e50:	20002bcc 	.word	0x20002bcc
 8002e54:	3fe00000 	.word	0x3fe00000
 8002e58:	20002bce 	.word	0x20002bce
 8002e5c:	20002bca 	.word	0x20002bca
 8002e60:	20002bd6 	.word	0x20002bd6
 8002e64:	20002bda 	.word	0x20002bda
 8002e68:	20002bd0 	.word	0x20002bd0
 8002e6c:	20002bd2 	.word	0x20002bd2
 8002e70:	20002bc0 	.word	0x20002bc0
 8002e74:	20002bbc 	.word	0x20002bbc
 8002e78:	20002bdc 	.word	0x20002bdc
 8002e7c:	20002bc4 	.word	0x20002bc4
 8002e80:	20002bb0 	.word	0x20002bb0
                        if (RF_squared[j] > currentSlope)
 8002e84:	4b7a      	ldr	r3, [pc, #488]	; (8003070 <Rafael_PanTompkins+0x9b8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a7a      	ldr	r2, [pc, #488]	; (8003074 <Rafael_PanTompkins+0x9bc>)
 8002e8a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	4b79      	ldr	r3, [pc, #484]	; (8003078 <Rafael_PanTompkins+0x9c0>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d907      	bls.n	8002ea8 <Rafael_PanTompkins+0x7f0>
                            currentSlope = RF_squared[j];
 8002e98:	4b75      	ldr	r3, [pc, #468]	; (8003070 <Rafael_PanTompkins+0x9b8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a75      	ldr	r2, [pc, #468]	; (8003074 <Rafael_PanTompkins+0x9bc>)
 8002e9e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	4b74      	ldr	r3, [pc, #464]	; (8003078 <Rafael_PanTompkins+0x9c0>)
 8002ea6:	601a      	str	r2, [r3, #0]
                    for (j = current - 10; j <= current; j++)
 8002ea8:	4b71      	ldr	r3, [pc, #452]	; (8003070 <Rafael_PanTompkins+0x9b8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	3301      	adds	r3, #1
 8002eae:	4a70      	ldr	r2, [pc, #448]	; (8003070 <Rafael_PanTompkins+0x9b8>)
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	4b6f      	ldr	r3, [pc, #444]	; (8003070 <Rafael_PanTompkins+0x9b8>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a71      	ldr	r2, [pc, #452]	; (800307c <Rafael_PanTompkins+0x9c4>)
 8002eb8:	6812      	ldr	r2, [r2, #0]
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d9e2      	bls.n	8002e84 <Rafael_PanTompkins+0x7cc>

                    spk_i = 0.125*peak_i + 0.875*spk_i;
 8002ebe:	4b70      	ldr	r3, [pc, #448]	; (8003080 <Rafael_PanTompkins+0x9c8>)
 8002ec0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7fd fb05 	bl	80004d4 <__aeabi_i2d>
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002ed2:	f7fd fb69 	bl	80005a8 <__aeabi_dmul>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4614      	mov	r4, r2
 8002edc:	461d      	mov	r5, r3
 8002ede:	4b69      	ldr	r3, [pc, #420]	; (8003084 <Rafael_PanTompkins+0x9cc>)
 8002ee0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fd faf5 	bl	80004d4 <__aeabi_i2d>
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	4b66      	ldr	r3, [pc, #408]	; (8003088 <Rafael_PanTompkins+0x9d0>)
 8002ef0:	f7fd fb5a 	bl	80005a8 <__aeabi_dmul>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4620      	mov	r0, r4
 8002efa:	4629      	mov	r1, r5
 8002efc:	f7fd f99e 	bl	800023c <__adddf3>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4610      	mov	r0, r2
 8002f06:	4619      	mov	r1, r3
 8002f08:	f7fd fdfe 	bl	8000b08 <__aeabi_d2iz>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	b21a      	sxth	r2, r3
 8002f10:	4b5c      	ldr	r3, [pc, #368]	; (8003084 <Rafael_PanTompkins+0x9cc>)
 8002f12:	801a      	strh	r2, [r3, #0]
                    threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8002f14:	4b5d      	ldr	r3, [pc, #372]	; (800308c <Rafael_PanTompkins+0x9d4>)
 8002f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fd fada 	bl	80004d4 <__aeabi_i2d>
 8002f20:	4604      	mov	r4, r0
 8002f22:	460d      	mov	r5, r1
 8002f24:	4b57      	ldr	r3, [pc, #348]	; (8003084 <Rafael_PanTompkins+0x9cc>)
 8002f26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	4b57      	ldr	r3, [pc, #348]	; (800308c <Rafael_PanTompkins+0x9d4>)
 8002f2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fd facd 	bl	80004d4 <__aeabi_i2d>
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	4b54      	ldr	r3, [pc, #336]	; (8003090 <Rafael_PanTompkins+0x9d8>)
 8002f40:	f7fd fb32 	bl	80005a8 <__aeabi_dmul>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4620      	mov	r0, r4
 8002f4a:	4629      	mov	r1, r5
 8002f4c:	f7fd f976 	bl	800023c <__adddf3>
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4610      	mov	r0, r2
 8002f56:	4619      	mov	r1, r3
 8002f58:	f7fd fdd6 	bl	8000b08 <__aeabi_d2iz>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	b21a      	sxth	r2, r3
 8002f60:	4b4c      	ldr	r3, [pc, #304]	; (8003094 <Rafael_PanTompkins+0x9dc>)
 8002f62:	801a      	strh	r2, [r3, #0]
                    threshold_i2 = 0.5*threshold_i1;
 8002f64:	4b4b      	ldr	r3, [pc, #300]	; (8003094 <Rafael_PanTompkins+0x9dc>)
 8002f66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fd fab2 	bl	80004d4 <__aeabi_i2d>
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	4b48      	ldr	r3, [pc, #288]	; (8003098 <Rafael_PanTompkins+0x9e0>)
 8002f76:	f7fd fb17 	bl	80005a8 <__aeabi_dmul>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4610      	mov	r0, r2
 8002f80:	4619      	mov	r1, r3
 8002f82:	f7fd fdc1 	bl	8000b08 <__aeabi_d2iz>
 8002f86:	4603      	mov	r3, r0
 8002f88:	b21a      	sxth	r2, r3
 8002f8a:	4b44      	ldr	r3, [pc, #272]	; (800309c <Rafael_PanTompkins+0x9e4>)
 8002f8c:	801a      	strh	r2, [r3, #0]

                    spk_f = 0.125*peak_f + 0.875*spk_f;
 8002f8e:	4b44      	ldr	r3, [pc, #272]	; (80030a0 <Rafael_PanTompkins+0x9e8>)
 8002f90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fd fa9d 	bl	80004d4 <__aeabi_i2d>
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002fa2:	f7fd fb01 	bl	80005a8 <__aeabi_dmul>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	4614      	mov	r4, r2
 8002fac:	461d      	mov	r5, r3
 8002fae:	4b3d      	ldr	r3, [pc, #244]	; (80030a4 <Rafael_PanTompkins+0x9ec>)
 8002fb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fd fa8d 	bl	80004d4 <__aeabi_i2d>
 8002fba:	f04f 0200 	mov.w	r2, #0
 8002fbe:	4b32      	ldr	r3, [pc, #200]	; (8003088 <Rafael_PanTompkins+0x9d0>)
 8002fc0:	f7fd faf2 	bl	80005a8 <__aeabi_dmul>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	4620      	mov	r0, r4
 8002fca:	4629      	mov	r1, r5
 8002fcc:	f7fd f936 	bl	800023c <__adddf3>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	f7fd fd96 	bl	8000b08 <__aeabi_d2iz>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	b21a      	sxth	r2, r3
 8002fe0:	4b30      	ldr	r3, [pc, #192]	; (80030a4 <Rafael_PanTompkins+0x9ec>)
 8002fe2:	801a      	strh	r2, [r3, #0]
                    threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 8002fe4:	4b30      	ldr	r3, [pc, #192]	; (80030a8 <Rafael_PanTompkins+0x9f0>)
 8002fe6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fd fa72 	bl	80004d4 <__aeabi_i2d>
 8002ff0:	4604      	mov	r4, r0
 8002ff2:	460d      	mov	r5, r1
 8002ff4:	4b2b      	ldr	r3, [pc, #172]	; (80030a4 <Rafael_PanTompkins+0x9ec>)
 8002ff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	4b2a      	ldr	r3, [pc, #168]	; (80030a8 <Rafael_PanTompkins+0x9f0>)
 8002ffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	4618      	mov	r0, r3
 8003006:	f7fd fa65 	bl	80004d4 <__aeabi_i2d>
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	4b20      	ldr	r3, [pc, #128]	; (8003090 <Rafael_PanTompkins+0x9d8>)
 8003010:	f7fd faca 	bl	80005a8 <__aeabi_dmul>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4620      	mov	r0, r4
 800301a:	4629      	mov	r1, r5
 800301c:	f7fd f90e 	bl	800023c <__adddf3>
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	4610      	mov	r0, r2
 8003026:	4619      	mov	r1, r3
 8003028:	f7fd fd6e 	bl	8000b08 <__aeabi_d2iz>
 800302c:	4603      	mov	r3, r0
 800302e:	b21a      	sxth	r2, r3
 8003030:	4b1e      	ldr	r3, [pc, #120]	; (80030ac <Rafael_PanTompkins+0x9f4>)
 8003032:	801a      	strh	r2, [r3, #0]
                    threshold_f2 = 0.5*threshold_f1;
 8003034:	4b1d      	ldr	r3, [pc, #116]	; (80030ac <Rafael_PanTompkins+0x9f4>)
 8003036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800303a:	4618      	mov	r0, r3
 800303c:	f7fd fa4a 	bl	80004d4 <__aeabi_i2d>
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	4b14      	ldr	r3, [pc, #80]	; (8003098 <Rafael_PanTompkins+0x9e0>)
 8003046:	f7fd faaf 	bl	80005a8 <__aeabi_dmul>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4610      	mov	r0, r2
 8003050:	4619      	mov	r1, r3
 8003052:	f7fd fd59 	bl	8000b08 <__aeabi_d2iz>
 8003056:	4603      	mov	r3, r0
 8003058:	b21a      	sxth	r2, r3
 800305a:	4b15      	ldr	r3, [pc, #84]	; (80030b0 <Rafael_PanTompkins+0x9f8>)
 800305c:	801a      	strh	r2, [r3, #0]

                    lastSlope = currentSlope;
 800305e:	4b06      	ldr	r3, [pc, #24]	; (8003078 <Rafael_PanTompkins+0x9c0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a14      	ldr	r2, [pc, #80]	; (80030b4 <Rafael_PanTompkins+0x9fc>)
 8003064:	6013      	str	r3, [r2, #0]
                    qrs = true;
 8003066:	4b14      	ldr	r3, [pc, #80]	; (80030b8 <Rafael_PanTompkins+0xa00>)
 8003068:	2201      	movs	r2, #1
 800306a:	701a      	strb	r2, [r3, #0]
 800306c:	e10f      	b.n	800328e <Rafael_PanTompkins+0xbd6>
 800306e:	bf00      	nop
 8003070:	20002bb0 	.word	0x20002bb0
 8003074:	20001d48 	.word	0x20001d48
 8003078:	20002bc0 	.word	0x20002bc0
 800307c:	20002bc4 	.word	0x20002bc4
 8003080:	20002bc8 	.word	0x20002bc8
 8003084:	20002bd4 	.word	0x20002bd4
 8003088:	3fec0000 	.word	0x3fec0000
 800308c:	20002bd8 	.word	0x20002bd8
 8003090:	3fd00000 	.word	0x3fd00000
 8003094:	20002bcc 	.word	0x20002bcc
 8003098:	3fe00000 	.word	0x3fe00000
 800309c:	20002bce 	.word	0x20002bce
 80030a0:	20002bca 	.word	0x20002bca
 80030a4:	20002bd6 	.word	0x20002bd6
 80030a8:	20002bda 	.word	0x20002bda
 80030ac:	20002bd0 	.word	0x20002bd0
 80030b0:	20002bd2 	.word	0x20002bd2
 80030b4:	20002bbc 	.word	0x20002bbc
 80030b8:	20002bdc 	.word	0x20002bdc
				}
			}
			// If the new peak doesn't respect the 200ms latency, it's noise. Update thresholds and move on to the next sample.
			else
            {
                peak_i = RF_integral[current];
 80030bc:	4ba7      	ldr	r3, [pc, #668]	; (800335c <Rafael_PanTompkins+0xca4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4aa7      	ldr	r2, [pc, #668]	; (8003360 <Rafael_PanTompkins+0xca8>)
 80030c2:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80030c6:	4ba7      	ldr	r3, [pc, #668]	; (8003364 <Rafael_PanTompkins+0xcac>)
 80030c8:	801a      	strh	r2, [r3, #0]
				npk_i = 0.125*peak_i + 0.875*npk_i;
 80030ca:	4ba6      	ldr	r3, [pc, #664]	; (8003364 <Rafael_PanTompkins+0xcac>)
 80030cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fd f9ff 	bl	80004d4 <__aeabi_i2d>
 80030d6:	f04f 0200 	mov.w	r2, #0
 80030da:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80030de:	f7fd fa63 	bl	80005a8 <__aeabi_dmul>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	4614      	mov	r4, r2
 80030e8:	461d      	mov	r5, r3
 80030ea:	4b9f      	ldr	r3, [pc, #636]	; (8003368 <Rafael_PanTompkins+0xcb0>)
 80030ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fd f9ef 	bl	80004d4 <__aeabi_i2d>
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	4b9c      	ldr	r3, [pc, #624]	; (800336c <Rafael_PanTompkins+0xcb4>)
 80030fc:	f7fd fa54 	bl	80005a8 <__aeabi_dmul>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	4620      	mov	r0, r4
 8003106:	4629      	mov	r1, r5
 8003108:	f7fd f898 	bl	800023c <__adddf3>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	4610      	mov	r0, r2
 8003112:	4619      	mov	r1, r3
 8003114:	f7fd fcf8 	bl	8000b08 <__aeabi_d2iz>
 8003118:	4603      	mov	r3, r0
 800311a:	b21a      	sxth	r2, r3
 800311c:	4b92      	ldr	r3, [pc, #584]	; (8003368 <Rafael_PanTompkins+0xcb0>)
 800311e:	801a      	strh	r2, [r3, #0]
				threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8003120:	4b91      	ldr	r3, [pc, #580]	; (8003368 <Rafael_PanTompkins+0xcb0>)
 8003122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003126:	4618      	mov	r0, r3
 8003128:	f7fd f9d4 	bl	80004d4 <__aeabi_i2d>
 800312c:	4604      	mov	r4, r0
 800312e:	460d      	mov	r5, r1
 8003130:	4b8f      	ldr	r3, [pc, #572]	; (8003370 <Rafael_PanTompkins+0xcb8>)
 8003132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003136:	461a      	mov	r2, r3
 8003138:	4b8b      	ldr	r3, [pc, #556]	; (8003368 <Rafael_PanTompkins+0xcb0>)
 800313a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	4618      	mov	r0, r3
 8003142:	f7fd f9c7 	bl	80004d4 <__aeabi_i2d>
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	4b8a      	ldr	r3, [pc, #552]	; (8003374 <Rafael_PanTompkins+0xcbc>)
 800314c:	f7fd fa2c 	bl	80005a8 <__aeabi_dmul>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4620      	mov	r0, r4
 8003156:	4629      	mov	r1, r5
 8003158:	f7fd f870 	bl	800023c <__adddf3>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4610      	mov	r0, r2
 8003162:	4619      	mov	r1, r3
 8003164:	f7fd fcd0 	bl	8000b08 <__aeabi_d2iz>
 8003168:	4603      	mov	r3, r0
 800316a:	b21a      	sxth	r2, r3
 800316c:	4b82      	ldr	r3, [pc, #520]	; (8003378 <Rafael_PanTompkins+0xcc0>)
 800316e:	801a      	strh	r2, [r3, #0]
				threshold_i2 = 0.5*threshold_i1;
 8003170:	4b81      	ldr	r3, [pc, #516]	; (8003378 <Rafael_PanTompkins+0xcc0>)
 8003172:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003176:	4618      	mov	r0, r3
 8003178:	f7fd f9ac 	bl	80004d4 <__aeabi_i2d>
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	4b7e      	ldr	r3, [pc, #504]	; (800337c <Rafael_PanTompkins+0xcc4>)
 8003182:	f7fd fa11 	bl	80005a8 <__aeabi_dmul>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	4610      	mov	r0, r2
 800318c:	4619      	mov	r1, r3
 800318e:	f7fd fcbb 	bl	8000b08 <__aeabi_d2iz>
 8003192:	4603      	mov	r3, r0
 8003194:	b21a      	sxth	r2, r3
 8003196:	4b7a      	ldr	r3, [pc, #488]	; (8003380 <Rafael_PanTompkins+0xcc8>)
 8003198:	801a      	strh	r2, [r3, #0]
				peak_f = RF_highpass[current];
 800319a:	4b70      	ldr	r3, [pc, #448]	; (800335c <Rafael_PanTompkins+0xca4>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a79      	ldr	r2, [pc, #484]	; (8003384 <Rafael_PanTompkins+0xccc>)
 80031a0:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80031a4:	4b78      	ldr	r3, [pc, #480]	; (8003388 <Rafael_PanTompkins+0xcd0>)
 80031a6:	801a      	strh	r2, [r3, #0]
				npk_f = 0.125*peak_f + 0.875*npk_f;
 80031a8:	4b77      	ldr	r3, [pc, #476]	; (8003388 <Rafael_PanTompkins+0xcd0>)
 80031aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fd f990 	bl	80004d4 <__aeabi_i2d>
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80031bc:	f7fd f9f4 	bl	80005a8 <__aeabi_dmul>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4614      	mov	r4, r2
 80031c6:	461d      	mov	r5, r3
 80031c8:	4b70      	ldr	r3, [pc, #448]	; (800338c <Rafael_PanTompkins+0xcd4>)
 80031ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fd f980 	bl	80004d4 <__aeabi_i2d>
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	4b64      	ldr	r3, [pc, #400]	; (800336c <Rafael_PanTompkins+0xcb4>)
 80031da:	f7fd f9e5 	bl	80005a8 <__aeabi_dmul>
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	4620      	mov	r0, r4
 80031e4:	4629      	mov	r1, r5
 80031e6:	f7fd f829 	bl	800023c <__adddf3>
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	4610      	mov	r0, r2
 80031f0:	4619      	mov	r1, r3
 80031f2:	f7fd fc89 	bl	8000b08 <__aeabi_d2iz>
 80031f6:	4603      	mov	r3, r0
 80031f8:	b21a      	sxth	r2, r3
 80031fa:	4b64      	ldr	r3, [pc, #400]	; (800338c <Rafael_PanTompkins+0xcd4>)
 80031fc:	801a      	strh	r2, [r3, #0]
				threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 80031fe:	4b63      	ldr	r3, [pc, #396]	; (800338c <Rafael_PanTompkins+0xcd4>)
 8003200:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003204:	4618      	mov	r0, r3
 8003206:	f7fd f965 	bl	80004d4 <__aeabi_i2d>
 800320a:	4604      	mov	r4, r0
 800320c:	460d      	mov	r5, r1
 800320e:	4b60      	ldr	r3, [pc, #384]	; (8003390 <Rafael_PanTompkins+0xcd8>)
 8003210:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003214:	461a      	mov	r2, r3
 8003216:	4b5d      	ldr	r3, [pc, #372]	; (800338c <Rafael_PanTompkins+0xcd4>)
 8003218:	f9b3 3000 	ldrsh.w	r3, [r3]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	4618      	mov	r0, r3
 8003220:	f7fd f958 	bl	80004d4 <__aeabi_i2d>
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	4b52      	ldr	r3, [pc, #328]	; (8003374 <Rafael_PanTompkins+0xcbc>)
 800322a:	f7fd f9bd 	bl	80005a8 <__aeabi_dmul>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	4620      	mov	r0, r4
 8003234:	4629      	mov	r1, r5
 8003236:	f7fd f801 	bl	800023c <__adddf3>
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	4610      	mov	r0, r2
 8003240:	4619      	mov	r1, r3
 8003242:	f7fd fc61 	bl	8000b08 <__aeabi_d2iz>
 8003246:	4603      	mov	r3, r0
 8003248:	b21a      	sxth	r2, r3
 800324a:	4b52      	ldr	r3, [pc, #328]	; (8003394 <Rafael_PanTompkins+0xcdc>)
 800324c:	801a      	strh	r2, [r3, #0]
                threshold_f2 = 0.5*threshold_f1;
 800324e:	4b51      	ldr	r3, [pc, #324]	; (8003394 <Rafael_PanTompkins+0xcdc>)
 8003250:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003254:	4618      	mov	r0, r3
 8003256:	f7fd f93d 	bl	80004d4 <__aeabi_i2d>
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	4b47      	ldr	r3, [pc, #284]	; (800337c <Rafael_PanTompkins+0xcc4>)
 8003260:	f7fd f9a2 	bl	80005a8 <__aeabi_dmul>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	4610      	mov	r0, r2
 800326a:	4619      	mov	r1, r3
 800326c:	f7fd fc4c 	bl	8000b08 <__aeabi_d2iz>
 8003270:	4603      	mov	r3, r0
 8003272:	b21a      	sxth	r2, r3
 8003274:	4b48      	ldr	r3, [pc, #288]	; (8003398 <Rafael_PanTompkins+0xce0>)
 8003276:	801a      	strh	r2, [r3, #0]
                qrs = false;
 8003278:	4b48      	ldr	r3, [pc, #288]	; (800339c <Rafael_PanTompkins+0xce4>)
 800327a:	2200      	movs	r2, #0
 800327c:	701a      	strb	r2, [r3, #0]
                RF_outputSignal[current] = qrs;
 800327e:	4b47      	ldr	r3, [pc, #284]	; (800339c <Rafael_PanTompkins+0xce4>)
 8003280:	781a      	ldrb	r2, [r3, #0]
 8003282:	4b36      	ldr	r3, [pc, #216]	; (800335c <Rafael_PanTompkins+0xca4>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	b211      	sxth	r1, r2
 8003288:	4a45      	ldr	r2, [pc, #276]	; (80033a0 <Rafael_PanTompkins+0xce8>)
 800328a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }

		}

		// If a R-peak was detected, the RR-averages must be updated.
		if (qrs)
 800328e:	4b43      	ldr	r3, [pc, #268]	; (800339c <Rafael_PanTompkins+0xce4>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 8137 	beq.w	8003506 <Rafael_PanTompkins+0xe4e>
		{
			// Add the newest RR-interval to the buffer and get the new average.
			rravg1 = 0;
 8003298:	4b42      	ldr	r3, [pc, #264]	; (80033a4 <Rafael_PanTompkins+0xcec>)
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]
			for (i = 0; i < 7; i++)
 800329e:	4b42      	ldr	r3, [pc, #264]	; (80033a8 <Rafael_PanTompkins+0xcf0>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	e019      	b.n	80032da <Rafael_PanTompkins+0xc22>
			{
				rr1[i] = rr1[i+1];
 80032a6:	4b40      	ldr	r3, [pc, #256]	; (80033a8 <Rafael_PanTompkins+0xcf0>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	1c5a      	adds	r2, r3, #1
 80032ac:	4b3e      	ldr	r3, [pc, #248]	; (80033a8 <Rafael_PanTompkins+0xcf0>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	493e      	ldr	r1, [pc, #248]	; (80033ac <Rafael_PanTompkins+0xcf4>)
 80032b2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80032b6:	493d      	ldr	r1, [pc, #244]	; (80033ac <Rafael_PanTompkins+0xcf4>)
 80032b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				rravg1 += rr1[i];
 80032bc:	4b3a      	ldr	r3, [pc, #232]	; (80033a8 <Rafael_PanTompkins+0xcf0>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a3a      	ldr	r2, [pc, #232]	; (80033ac <Rafael_PanTompkins+0xcf4>)
 80032c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80032c6:	4b37      	ldr	r3, [pc, #220]	; (80033a4 <Rafael_PanTompkins+0xcec>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4413      	add	r3, r2
 80032cc:	4a35      	ldr	r2, [pc, #212]	; (80033a4 <Rafael_PanTompkins+0xcec>)
 80032ce:	6013      	str	r3, [r2, #0]
			for (i = 0; i < 7; i++)
 80032d0:	4b35      	ldr	r3, [pc, #212]	; (80033a8 <Rafael_PanTompkins+0xcf0>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	3301      	adds	r3, #1
 80032d6:	4a34      	ldr	r2, [pc, #208]	; (80033a8 <Rafael_PanTompkins+0xcf0>)
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	4b33      	ldr	r3, [pc, #204]	; (80033a8 <Rafael_PanTompkins+0xcf0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b06      	cmp	r3, #6
 80032e0:	d9e1      	bls.n	80032a6 <Rafael_PanTompkins+0xbee>
			}
			rr1[7] = sample - lastQRS;
 80032e2:	4b33      	ldr	r3, [pc, #204]	; (80033b0 <Rafael_PanTompkins+0xcf8>)
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	4b33      	ldr	r3, [pc, #204]	; (80033b4 <Rafael_PanTompkins+0xcfc>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	461a      	mov	r2, r3
 80032ee:	4b2f      	ldr	r3, [pc, #188]	; (80033ac <Rafael_PanTompkins+0xcf4>)
 80032f0:	61da      	str	r2, [r3, #28]
			lastQRS = sample;
 80032f2:	4b2f      	ldr	r3, [pc, #188]	; (80033b0 <Rafael_PanTompkins+0xcf8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a2f      	ldr	r2, [pc, #188]	; (80033b4 <Rafael_PanTompkins+0xcfc>)
 80032f8:	6013      	str	r3, [r2, #0]
			rravg1 += rr1[7];
 80032fa:	4b2c      	ldr	r3, [pc, #176]	; (80033ac <Rafael_PanTompkins+0xcf4>)
 80032fc:	69da      	ldr	r2, [r3, #28]
 80032fe:	4b29      	ldr	r3, [pc, #164]	; (80033a4 <Rafael_PanTompkins+0xcec>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4413      	add	r3, r2
 8003304:	4a27      	ldr	r2, [pc, #156]	; (80033a4 <Rafael_PanTompkins+0xcec>)
 8003306:	6013      	str	r3, [r2, #0]
			rravg1 *= 0.125;
 8003308:	4b26      	ldr	r3, [pc, #152]	; (80033a4 <Rafael_PanTompkins+0xcec>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f7fd f8e1 	bl	80004d4 <__aeabi_i2d>
 8003312:	f04f 0200 	mov.w	r2, #0
 8003316:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800331a:	f7fd f945 	bl	80005a8 <__aeabi_dmul>
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	4610      	mov	r0, r2
 8003324:	4619      	mov	r1, r3
 8003326:	f7fd fbef 	bl	8000b08 <__aeabi_d2iz>
 800332a:	4603      	mov	r3, r0
 800332c:	4a1d      	ldr	r2, [pc, #116]	; (80033a4 <Rafael_PanTompkins+0xcec>)
 800332e:	6013      	str	r3, [r2, #0]

			// If the newly-discovered RR-average is normal, add it to the "normal" buffer and get the new "normal" average.
			// Update the "normal" beat parameters.
			if ( (rr1[7] >= rrlow) && (rr1[7] <= rrhigh) )
 8003330:	4b1e      	ldr	r3, [pc, #120]	; (80033ac <Rafael_PanTompkins+0xcf4>)
 8003332:	69da      	ldr	r2, [r3, #28]
 8003334:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <Rafael_PanTompkins+0xd00>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	f2c0 80b9 	blt.w	80034b0 <Rafael_PanTompkins+0xdf8>
 800333e:	4b1b      	ldr	r3, [pc, #108]	; (80033ac <Rafael_PanTompkins+0xcf4>)
 8003340:	69da      	ldr	r2, [r3, #28]
 8003342:	4b1e      	ldr	r3, [pc, #120]	; (80033bc <Rafael_PanTompkins+0xd04>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	f300 80b2 	bgt.w	80034b0 <Rafael_PanTompkins+0xdf8>
			{
				rravg2 = 0;
 800334c:	4b1c      	ldr	r3, [pc, #112]	; (80033c0 <Rafael_PanTompkins+0xd08>)
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
				for (i = 0; i < 7; i++)
 8003352:	4b15      	ldr	r3, [pc, #84]	; (80033a8 <Rafael_PanTompkins+0xcf0>)
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	e04e      	b.n	80033f8 <Rafael_PanTompkins+0xd40>
 800335a:	bf00      	nop
 800335c:	20002bc4 	.word	0x20002bc4
 8003360:	200021f8 	.word	0x200021f8
 8003364:	20002bc8 	.word	0x20002bc8
 8003368:	20002bd8 	.word	0x20002bd8
 800336c:	3fec0000 	.word	0x3fec0000
 8003370:	20002bd4 	.word	0x20002bd4
 8003374:	3fd00000 	.word	0x3fd00000
 8003378:	20002bcc 	.word	0x20002bcc
 800337c:	3fe00000 	.word	0x3fe00000
 8003380:	20002bce 	.word	0x20002bce
 8003384:	200013e8 	.word	0x200013e8
 8003388:	20002bca 	.word	0x20002bca
 800338c:	20002bda 	.word	0x20002bda
 8003390:	20002bd6 	.word	0x20002bd6
 8003394:	20002bd0 	.word	0x20002bd0
 8003398:	20002bd2 	.word	0x20002bd2
 800339c:	20002bdc 	.word	0x20002bdc
 80033a0:	200026a8 	.word	0x200026a8
 80033a4:	20002b98 	.word	0x20002b98
 80033a8:	20002bac 	.word	0x20002bac
 80033ac:	20002b58 	.word	0x20002b58
 80033b0:	20002bb4 	.word	0x20002bb4
 80033b4:	20002bb8 	.word	0x20002bb8
 80033b8:	20002ba0 	.word	0x20002ba0
 80033bc:	20002ba4 	.word	0x20002ba4
 80033c0:	20002b9c 	.word	0x20002b9c
				{
					rr2[i] = rr2[i+1];
 80033c4:	4ba2      	ldr	r3, [pc, #648]	; (8003650 <Rafael_PanTompkins+0xf98>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	1c5a      	adds	r2, r3, #1
 80033ca:	4ba1      	ldr	r3, [pc, #644]	; (8003650 <Rafael_PanTompkins+0xf98>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	49a1      	ldr	r1, [pc, #644]	; (8003654 <Rafael_PanTompkins+0xf9c>)
 80033d0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80033d4:	499f      	ldr	r1, [pc, #636]	; (8003654 <Rafael_PanTompkins+0xf9c>)
 80033d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					rravg2 += rr2[i];
 80033da:	4b9d      	ldr	r3, [pc, #628]	; (8003650 <Rafael_PanTompkins+0xf98>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a9d      	ldr	r2, [pc, #628]	; (8003654 <Rafael_PanTompkins+0xf9c>)
 80033e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80033e4:	4b9c      	ldr	r3, [pc, #624]	; (8003658 <Rafael_PanTompkins+0xfa0>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4413      	add	r3, r2
 80033ea:	4a9b      	ldr	r2, [pc, #620]	; (8003658 <Rafael_PanTompkins+0xfa0>)
 80033ec:	6013      	str	r3, [r2, #0]
				for (i = 0; i < 7; i++)
 80033ee:	4b98      	ldr	r3, [pc, #608]	; (8003650 <Rafael_PanTompkins+0xf98>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	3301      	adds	r3, #1
 80033f4:	4a96      	ldr	r2, [pc, #600]	; (8003650 <Rafael_PanTompkins+0xf98>)
 80033f6:	6013      	str	r3, [r2, #0]
 80033f8:	4b95      	ldr	r3, [pc, #596]	; (8003650 <Rafael_PanTompkins+0xf98>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b06      	cmp	r3, #6
 80033fe:	d9e1      	bls.n	80033c4 <Rafael_PanTompkins+0xd0c>
				}
				rr2[7] = rr1[7];
 8003400:	4b96      	ldr	r3, [pc, #600]	; (800365c <Rafael_PanTompkins+0xfa4>)
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	4a93      	ldr	r2, [pc, #588]	; (8003654 <Rafael_PanTompkins+0xf9c>)
 8003406:	61d3      	str	r3, [r2, #28]
				rravg2 += rr2[7];
 8003408:	4b92      	ldr	r3, [pc, #584]	; (8003654 <Rafael_PanTompkins+0xf9c>)
 800340a:	69da      	ldr	r2, [r3, #28]
 800340c:	4b92      	ldr	r3, [pc, #584]	; (8003658 <Rafael_PanTompkins+0xfa0>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4413      	add	r3, r2
 8003412:	4a91      	ldr	r2, [pc, #580]	; (8003658 <Rafael_PanTompkins+0xfa0>)
 8003414:	6013      	str	r3, [r2, #0]
				rravg2 *= 0.125;
 8003416:	4b90      	ldr	r3, [pc, #576]	; (8003658 <Rafael_PanTompkins+0xfa0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f7fd f85a 	bl	80004d4 <__aeabi_i2d>
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003428:	f7fd f8be 	bl	80005a8 <__aeabi_dmul>
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	4610      	mov	r0, r2
 8003432:	4619      	mov	r1, r3
 8003434:	f7fd fb68 	bl	8000b08 <__aeabi_d2iz>
 8003438:	4603      	mov	r3, r0
 800343a:	4a87      	ldr	r2, [pc, #540]	; (8003658 <Rafael_PanTompkins+0xfa0>)
 800343c:	6013      	str	r3, [r2, #0]
				rrlow = 0.92*rravg2;
 800343e:	4b86      	ldr	r3, [pc, #536]	; (8003658 <Rafael_PanTompkins+0xfa0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f7fd f846 	bl	80004d4 <__aeabi_i2d>
 8003448:	a379      	add	r3, pc, #484	; (adr r3, 8003630 <Rafael_PanTompkins+0xf78>)
 800344a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344e:	f7fd f8ab 	bl	80005a8 <__aeabi_dmul>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	4610      	mov	r0, r2
 8003458:	4619      	mov	r1, r3
 800345a:	f7fd fb55 	bl	8000b08 <__aeabi_d2iz>
 800345e:	4603      	mov	r3, r0
 8003460:	4a7f      	ldr	r2, [pc, #508]	; (8003660 <Rafael_PanTompkins+0xfa8>)
 8003462:	6013      	str	r3, [r2, #0]
				rrhigh = 1.16*rravg2;
 8003464:	4b7c      	ldr	r3, [pc, #496]	; (8003658 <Rafael_PanTompkins+0xfa0>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f7fd f833 	bl	80004d4 <__aeabi_i2d>
 800346e:	a372      	add	r3, pc, #456	; (adr r3, 8003638 <Rafael_PanTompkins+0xf80>)
 8003470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003474:	f7fd f898 	bl	80005a8 <__aeabi_dmul>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4610      	mov	r0, r2
 800347e:	4619      	mov	r1, r3
 8003480:	f7fd fb42 	bl	8000b08 <__aeabi_d2iz>
 8003484:	4603      	mov	r3, r0
 8003486:	4a77      	ldr	r2, [pc, #476]	; (8003664 <Rafael_PanTompkins+0xfac>)
 8003488:	6013      	str	r3, [r2, #0]
				rrmiss = 1.66*rravg2;
 800348a:	4b73      	ldr	r3, [pc, #460]	; (8003658 <Rafael_PanTompkins+0xfa0>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f7fd f820 	bl	80004d4 <__aeabi_i2d>
 8003494:	a36a      	add	r3, pc, #424	; (adr r3, 8003640 <Rafael_PanTompkins+0xf88>)
 8003496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349a:	f7fd f885 	bl	80005a8 <__aeabi_dmul>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	4610      	mov	r0, r2
 80034a4:	4619      	mov	r1, r3
 80034a6:	f7fd fb2f 	bl	8000b08 <__aeabi_d2iz>
 80034aa:	4603      	mov	r3, r0
 80034ac:	4a6e      	ldr	r2, [pc, #440]	; (8003668 <Rafael_PanTompkins+0xfb0>)
 80034ae:	6013      	str	r3, [r2, #0]
			}

			prevRegular = regular;
 80034b0:	4b6e      	ldr	r3, [pc, #440]	; (800366c <Rafael_PanTompkins+0xfb4>)
 80034b2:	781a      	ldrb	r2, [r3, #0]
 80034b4:	4b6e      	ldr	r3, [pc, #440]	; (8003670 <Rafael_PanTompkins+0xfb8>)
 80034b6:	701a      	strb	r2, [r3, #0]
			if (rravg1 == rravg2)
 80034b8:	4b6e      	ldr	r3, [pc, #440]	; (8003674 <Rafael_PanTompkins+0xfbc>)
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	4b66      	ldr	r3, [pc, #408]	; (8003658 <Rafael_PanTompkins+0xfa0>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d104      	bne.n	80034ce <Rafael_PanTompkins+0xe16>
			{
				regular = true;
 80034c4:	4b69      	ldr	r3, [pc, #420]	; (800366c <Rafael_PanTompkins+0xfb4>)
 80034c6:	2201      	movs	r2, #1
 80034c8:	701a      	strb	r2, [r3, #0]
 80034ca:	f000 bc5d 	b.w	8003d88 <Rafael_PanTompkins+0x16d0>
			}
			// If the beat had been normal but turned odd, change the thresholds.
			else
			{
				regular = false;
 80034ce:	4b67      	ldr	r3, [pc, #412]	; (800366c <Rafael_PanTompkins+0xfb4>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	701a      	strb	r2, [r3, #0]
				if (prevRegular)
 80034d4:	4b66      	ldr	r3, [pc, #408]	; (8003670 <Rafael_PanTompkins+0xfb8>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 8455 	beq.w	8003d88 <Rafael_PanTompkins+0x16d0>
				{
					threshold_i1 /= 2;
 80034de:	4b66      	ldr	r3, [pc, #408]	; (8003678 <Rafael_PanTompkins+0xfc0>)
 80034e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034e4:	0fda      	lsrs	r2, r3, #31
 80034e6:	4413      	add	r3, r2
 80034e8:	105b      	asrs	r3, r3, #1
 80034ea:	b21a      	sxth	r2, r3
 80034ec:	4b62      	ldr	r3, [pc, #392]	; (8003678 <Rafael_PanTompkins+0xfc0>)
 80034ee:	801a      	strh	r2, [r3, #0]
					threshold_f1 /= 2;
 80034f0:	4b62      	ldr	r3, [pc, #392]	; (800367c <Rafael_PanTompkins+0xfc4>)
 80034f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034f6:	0fda      	lsrs	r2, r3, #31
 80034f8:	4413      	add	r3, r2
 80034fa:	105b      	asrs	r3, r3, #1
 80034fc:	b21a      	sxth	r2, r3
 80034fe:	4b5f      	ldr	r3, [pc, #380]	; (800367c <Rafael_PanTompkins+0xfc4>)
 8003500:	801a      	strh	r2, [r3, #0]
 8003502:	f000 bc41 	b.w	8003d88 <Rafael_PanTompkins+0x16d0>
		// If no R-peak was detected, it's important to check how long it's been since the last detection.
		else
		{
		    // If no R-peak was detected for too long, use the lighter thresholds and do a back search.
			// However, the back search must respect the 200ms limit and the 360ms one (check the slope).
			if ((sample - lastQRS > (long unsigned int)rrmiss) && (sample > lastQRS + FS/5))
 8003506:	4b5e      	ldr	r3, [pc, #376]	; (8003680 <Rafael_PanTompkins+0xfc8>)
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	4b5e      	ldr	r3, [pc, #376]	; (8003684 <Rafael_PanTompkins+0xfcc>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	4a55      	ldr	r2, [pc, #340]	; (8003668 <Rafael_PanTompkins+0xfb0>)
 8003512:	6812      	ldr	r2, [r2, #0]
 8003514:	4293      	cmp	r3, r2
 8003516:	f240 833f 	bls.w	8003b98 <Rafael_PanTompkins+0x14e0>
 800351a:	4b5a      	ldr	r3, [pc, #360]	; (8003684 <Rafael_PanTompkins+0xfcc>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003522:	4b57      	ldr	r3, [pc, #348]	; (8003680 <Rafael_PanTompkins+0xfc8>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	f080 8336 	bcs.w	8003b98 <Rafael_PanTompkins+0x14e0>
			{
				for (i = current - (sample - lastQRS) + FS/5; i < (long unsigned int)current; i++)
 800352c:	4b55      	ldr	r3, [pc, #340]	; (8003684 <Rafael_PanTompkins+0xfcc>)
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	4b53      	ldr	r3, [pc, #332]	; (8003680 <Rafael_PanTompkins+0xfc8>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	4a54      	ldr	r2, [pc, #336]	; (8003688 <Rafael_PanTompkins+0xfd0>)
 8003538:	6812      	ldr	r2, [r2, #0]
 800353a:	4413      	add	r3, r2
 800353c:	3348      	adds	r3, #72	; 0x48
 800353e:	4a44      	ldr	r2, [pc, #272]	; (8003650 <Rafael_PanTompkins+0xf98>)
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	e2e0      	b.n	8003b06 <Rafael_PanTompkins+0x144e>
				{
					if ( (RF_integral[i] > threshold_i2) && (RF_highpass[i] > threshold_f2))
 8003544:	4b42      	ldr	r3, [pc, #264]	; (8003650 <Rafael_PanTompkins+0xf98>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a50      	ldr	r2, [pc, #320]	; (800368c <Rafael_PanTompkins+0xfd4>)
 800354a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800354e:	4b50      	ldr	r3, [pc, #320]	; (8003690 <Rafael_PanTompkins+0xfd8>)
 8003550:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003554:	429a      	cmp	r2, r3
 8003556:	f340 82d1 	ble.w	8003afc <Rafael_PanTompkins+0x1444>
 800355a:	4b3d      	ldr	r3, [pc, #244]	; (8003650 <Rafael_PanTompkins+0xf98>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a4d      	ldr	r2, [pc, #308]	; (8003694 <Rafael_PanTompkins+0xfdc>)
 8003560:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8003564:	4b4c      	ldr	r3, [pc, #304]	; (8003698 <Rafael_PanTompkins+0xfe0>)
 8003566:	f9b3 3000 	ldrsh.w	r3, [r3]
 800356a:	429a      	cmp	r2, r3
 800356c:	f340 82c6 	ble.w	8003afc <Rafael_PanTompkins+0x1444>
					{
					    currentSlope = 0;
 8003570:	4b4a      	ldr	r3, [pc, #296]	; (800369c <Rafael_PanTompkins+0xfe4>)
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
                        for (j = i - 10; j <= i; j++)
 8003576:	4b36      	ldr	r3, [pc, #216]	; (8003650 <Rafael_PanTompkins+0xf98>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	3b0a      	subs	r3, #10
 800357c:	4a48      	ldr	r2, [pc, #288]	; (80036a0 <Rafael_PanTompkins+0xfe8>)
 800357e:	6013      	str	r3, [r2, #0]
 8003580:	e016      	b.n	80035b0 <Rafael_PanTompkins+0xef8>
                            if (RF_squared[j] > currentSlope)
 8003582:	4b47      	ldr	r3, [pc, #284]	; (80036a0 <Rafael_PanTompkins+0xfe8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a47      	ldr	r2, [pc, #284]	; (80036a4 <Rafael_PanTompkins+0xfec>)
 8003588:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800358c:	461a      	mov	r2, r3
 800358e:	4b43      	ldr	r3, [pc, #268]	; (800369c <Rafael_PanTompkins+0xfe4>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d907      	bls.n	80035a6 <Rafael_PanTompkins+0xeee>
                                currentSlope = RF_squared[j];
 8003596:	4b42      	ldr	r3, [pc, #264]	; (80036a0 <Rafael_PanTompkins+0xfe8>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a42      	ldr	r2, [pc, #264]	; (80036a4 <Rafael_PanTompkins+0xfec>)
 800359c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80035a0:	461a      	mov	r2, r3
 80035a2:	4b3e      	ldr	r3, [pc, #248]	; (800369c <Rafael_PanTompkins+0xfe4>)
 80035a4:	601a      	str	r2, [r3, #0]
                        for (j = i - 10; j <= i; j++)
 80035a6:	4b3e      	ldr	r3, [pc, #248]	; (80036a0 <Rafael_PanTompkins+0xfe8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	3301      	adds	r3, #1
 80035ac:	4a3c      	ldr	r2, [pc, #240]	; (80036a0 <Rafael_PanTompkins+0xfe8>)
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	4b3b      	ldr	r3, [pc, #236]	; (80036a0 <Rafael_PanTompkins+0xfe8>)
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	4b26      	ldr	r3, [pc, #152]	; (8003650 <Rafael_PanTompkins+0xf98>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d9e2      	bls.n	8003582 <Rafael_PanTompkins+0xeca>

                        if ((currentSlope < (dataType)(lastSlope/2)) && (i + sample) < lastQRS + 0.36*lastQRS)
 80035bc:	4b3a      	ldr	r3, [pc, #232]	; (80036a8 <Rafael_PanTompkins+0xff0>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	085b      	lsrs	r3, r3, #1
 80035c2:	b21b      	sxth	r3, r3
 80035c4:	461a      	mov	r2, r3
 80035c6:	4b35      	ldr	r3, [pc, #212]	; (800369c <Rafael_PanTompkins+0xfe4>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d970      	bls.n	80036b0 <Rafael_PanTompkins+0xff8>
 80035ce:	4b20      	ldr	r3, [pc, #128]	; (8003650 <Rafael_PanTompkins+0xf98>)
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	4b2b      	ldr	r3, [pc, #172]	; (8003680 <Rafael_PanTompkins+0xfc8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4413      	add	r3, r2
 80035d8:	4618      	mov	r0, r3
 80035da:	f7fc ff6b 	bl	80004b4 <__aeabi_ui2d>
 80035de:	4604      	mov	r4, r0
 80035e0:	460d      	mov	r5, r1
 80035e2:	4b28      	ldr	r3, [pc, #160]	; (8003684 <Rafael_PanTompkins+0xfcc>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fc ff64 	bl	80004b4 <__aeabi_ui2d>
 80035ec:	4680      	mov	r8, r0
 80035ee:	4689      	mov	r9, r1
 80035f0:	4b24      	ldr	r3, [pc, #144]	; (8003684 <Rafael_PanTompkins+0xfcc>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fc ff5d 	bl	80004b4 <__aeabi_ui2d>
 80035fa:	a313      	add	r3, pc, #76	; (adr r3, 8003648 <Rafael_PanTompkins+0xf90>)
 80035fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003600:	f7fc ffd2 	bl	80005a8 <__aeabi_dmul>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4640      	mov	r0, r8
 800360a:	4649      	mov	r1, r9
 800360c:	f7fc fe16 	bl	800023c <__adddf3>
 8003610:	4602      	mov	r2, r0
 8003612:	460b      	mov	r3, r1
 8003614:	4620      	mov	r0, r4
 8003616:	4629      	mov	r1, r5
 8003618:	f7fd fa38 	bl	8000a8c <__aeabi_dcmplt>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d046      	beq.n	80036b0 <Rafael_PanTompkins+0xff8>
                        {
                            qrs = false;
 8003622:	4b22      	ldr	r3, [pc, #136]	; (80036ac <Rafael_PanTompkins+0xff4>)
 8003624:	2200      	movs	r2, #0
 8003626:	701a      	strb	r2, [r3, #0]
 8003628:	e268      	b.n	8003afc <Rafael_PanTompkins+0x1444>
 800362a:	bf00      	nop
 800362c:	f3af 8000 	nop.w
 8003630:	d70a3d71 	.word	0xd70a3d71
 8003634:	3fed70a3 	.word	0x3fed70a3
 8003638:	28f5c28f 	.word	0x28f5c28f
 800363c:	3ff28f5c 	.word	0x3ff28f5c
 8003640:	28f5c28f 	.word	0x28f5c28f
 8003644:	3ffa8f5c 	.word	0x3ffa8f5c
 8003648:	70a3d70a 	.word	0x70a3d70a
 800364c:	3fd70a3d 	.word	0x3fd70a3d
 8003650:	20002bac 	.word	0x20002bac
 8003654:	20002b78 	.word	0x20002b78
 8003658:	20002b9c 	.word	0x20002b9c
 800365c:	20002b58 	.word	0x20002b58
 8003660:	20002ba0 	.word	0x20002ba0
 8003664:	20002ba4 	.word	0x20002ba4
 8003668:	20002ba8 	.word	0x20002ba8
 800366c:	20000008 	.word	0x20000008
 8003670:	20002bdd 	.word	0x20002bdd
 8003674:	20002b98 	.word	0x20002b98
 8003678:	20002bcc 	.word	0x20002bcc
 800367c:	20002bd0 	.word	0x20002bd0
 8003680:	20002bb4 	.word	0x20002bb4
 8003684:	20002bb8 	.word	0x20002bb8
 8003688:	20002bc4 	.word	0x20002bc4
 800368c:	200021f8 	.word	0x200021f8
 8003690:	20002bce 	.word	0x20002bce
 8003694:	200013e8 	.word	0x200013e8
 8003698:	20002bd2 	.word	0x20002bd2
 800369c:	20002bc0 	.word	0x20002bc0
 80036a0:	20002bb0 	.word	0x20002bb0
 80036a4:	20001d48 	.word	0x20001d48
 80036a8:	20002bbc 	.word	0x20002bbc
 80036ac:	20002bdc 	.word	0x20002bdc
                        }
                        else
                        {
                            peak_i = RF_integral[i];
 80036b0:	4ba7      	ldr	r3, [pc, #668]	; (8003950 <Rafael_PanTompkins+0x1298>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4aa7      	ldr	r2, [pc, #668]	; (8003954 <Rafael_PanTompkins+0x129c>)
 80036b6:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80036ba:	4ba7      	ldr	r3, [pc, #668]	; (8003958 <Rafael_PanTompkins+0x12a0>)
 80036bc:	801a      	strh	r2, [r3, #0]
                            peak_f = RF_highpass[i];
 80036be:	4ba4      	ldr	r3, [pc, #656]	; (8003950 <Rafael_PanTompkins+0x1298>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4aa6      	ldr	r2, [pc, #664]	; (800395c <Rafael_PanTompkins+0x12a4>)
 80036c4:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80036c8:	4ba5      	ldr	r3, [pc, #660]	; (8003960 <Rafael_PanTompkins+0x12a8>)
 80036ca:	801a      	strh	r2, [r3, #0]
                            spk_i = 0.25*peak_i+ 0.75*spk_i;
 80036cc:	4ba2      	ldr	r3, [pc, #648]	; (8003958 <Rafael_PanTompkins+0x12a0>)
 80036ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fc fefe 	bl	80004d4 <__aeabi_i2d>
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	4ba1      	ldr	r3, [pc, #644]	; (8003964 <Rafael_PanTompkins+0x12ac>)
 80036de:	f7fc ff63 	bl	80005a8 <__aeabi_dmul>
 80036e2:	4602      	mov	r2, r0
 80036e4:	460b      	mov	r3, r1
 80036e6:	4614      	mov	r4, r2
 80036e8:	461d      	mov	r5, r3
 80036ea:	4b9f      	ldr	r3, [pc, #636]	; (8003968 <Rafael_PanTompkins+0x12b0>)
 80036ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fc feef 	bl	80004d4 <__aeabi_i2d>
 80036f6:	f04f 0200 	mov.w	r2, #0
 80036fa:	4b9c      	ldr	r3, [pc, #624]	; (800396c <Rafael_PanTompkins+0x12b4>)
 80036fc:	f7fc ff54 	bl	80005a8 <__aeabi_dmul>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	4620      	mov	r0, r4
 8003706:	4629      	mov	r1, r5
 8003708:	f7fc fd98 	bl	800023c <__adddf3>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4610      	mov	r0, r2
 8003712:	4619      	mov	r1, r3
 8003714:	f7fd f9f8 	bl	8000b08 <__aeabi_d2iz>
 8003718:	4603      	mov	r3, r0
 800371a:	b21a      	sxth	r2, r3
 800371c:	4b92      	ldr	r3, [pc, #584]	; (8003968 <Rafael_PanTompkins+0x12b0>)
 800371e:	801a      	strh	r2, [r3, #0]
                            spk_f = 0.25*peak_f + 0.75*spk_f;
 8003720:	4b8f      	ldr	r3, [pc, #572]	; (8003960 <Rafael_PanTompkins+0x12a8>)
 8003722:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003726:	4618      	mov	r0, r3
 8003728:	f7fc fed4 	bl	80004d4 <__aeabi_i2d>
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	4b8c      	ldr	r3, [pc, #560]	; (8003964 <Rafael_PanTompkins+0x12ac>)
 8003732:	f7fc ff39 	bl	80005a8 <__aeabi_dmul>
 8003736:	4602      	mov	r2, r0
 8003738:	460b      	mov	r3, r1
 800373a:	4614      	mov	r4, r2
 800373c:	461d      	mov	r5, r3
 800373e:	4b8c      	ldr	r3, [pc, #560]	; (8003970 <Rafael_PanTompkins+0x12b8>)
 8003740:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003744:	4618      	mov	r0, r3
 8003746:	f7fc fec5 	bl	80004d4 <__aeabi_i2d>
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	4b87      	ldr	r3, [pc, #540]	; (800396c <Rafael_PanTompkins+0x12b4>)
 8003750:	f7fc ff2a 	bl	80005a8 <__aeabi_dmul>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	4620      	mov	r0, r4
 800375a:	4629      	mov	r1, r5
 800375c:	f7fc fd6e 	bl	800023c <__adddf3>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4610      	mov	r0, r2
 8003766:	4619      	mov	r1, r3
 8003768:	f7fd f9ce 	bl	8000b08 <__aeabi_d2iz>
 800376c:	4603      	mov	r3, r0
 800376e:	b21a      	sxth	r2, r3
 8003770:	4b7f      	ldr	r3, [pc, #508]	; (8003970 <Rafael_PanTompkins+0x12b8>)
 8003772:	801a      	strh	r2, [r3, #0]
                            threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8003774:	4b7f      	ldr	r3, [pc, #508]	; (8003974 <Rafael_PanTompkins+0x12bc>)
 8003776:	f9b3 3000 	ldrsh.w	r3, [r3]
 800377a:	4618      	mov	r0, r3
 800377c:	f7fc feaa 	bl	80004d4 <__aeabi_i2d>
 8003780:	4604      	mov	r4, r0
 8003782:	460d      	mov	r5, r1
 8003784:	4b78      	ldr	r3, [pc, #480]	; (8003968 <Rafael_PanTompkins+0x12b0>)
 8003786:	f9b3 3000 	ldrsh.w	r3, [r3]
 800378a:	461a      	mov	r2, r3
 800378c:	4b79      	ldr	r3, [pc, #484]	; (8003974 <Rafael_PanTompkins+0x12bc>)
 800378e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	4618      	mov	r0, r3
 8003796:	f7fc fe9d 	bl	80004d4 <__aeabi_i2d>
 800379a:	f04f 0200 	mov.w	r2, #0
 800379e:	4b71      	ldr	r3, [pc, #452]	; (8003964 <Rafael_PanTompkins+0x12ac>)
 80037a0:	f7fc ff02 	bl	80005a8 <__aeabi_dmul>
 80037a4:	4602      	mov	r2, r0
 80037a6:	460b      	mov	r3, r1
 80037a8:	4620      	mov	r0, r4
 80037aa:	4629      	mov	r1, r5
 80037ac:	f7fc fd46 	bl	800023c <__adddf3>
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	4610      	mov	r0, r2
 80037b6:	4619      	mov	r1, r3
 80037b8:	f7fd f9a6 	bl	8000b08 <__aeabi_d2iz>
 80037bc:	4603      	mov	r3, r0
 80037be:	b21a      	sxth	r2, r3
 80037c0:	4b6d      	ldr	r3, [pc, #436]	; (8003978 <Rafael_PanTompkins+0x12c0>)
 80037c2:	801a      	strh	r2, [r3, #0]
                            threshold_i2 = 0.5*threshold_i1;
 80037c4:	4b6c      	ldr	r3, [pc, #432]	; (8003978 <Rafael_PanTompkins+0x12c0>)
 80037c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fc fe82 	bl	80004d4 <__aeabi_i2d>
 80037d0:	f04f 0200 	mov.w	r2, #0
 80037d4:	4b69      	ldr	r3, [pc, #420]	; (800397c <Rafael_PanTompkins+0x12c4>)
 80037d6:	f7fc fee7 	bl	80005a8 <__aeabi_dmul>
 80037da:	4602      	mov	r2, r0
 80037dc:	460b      	mov	r3, r1
 80037de:	4610      	mov	r0, r2
 80037e0:	4619      	mov	r1, r3
 80037e2:	f7fd f991 	bl	8000b08 <__aeabi_d2iz>
 80037e6:	4603      	mov	r3, r0
 80037e8:	b21a      	sxth	r2, r3
 80037ea:	4b65      	ldr	r3, [pc, #404]	; (8003980 <Rafael_PanTompkins+0x12c8>)
 80037ec:	801a      	strh	r2, [r3, #0]
                            lastSlope = currentSlope;
 80037ee:	4b65      	ldr	r3, [pc, #404]	; (8003984 <Rafael_PanTompkins+0x12cc>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a65      	ldr	r2, [pc, #404]	; (8003988 <Rafael_PanTompkins+0x12d0>)
 80037f4:	6013      	str	r3, [r2, #0]
                            threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 80037f6:	4b65      	ldr	r3, [pc, #404]	; (800398c <Rafael_PanTompkins+0x12d4>)
 80037f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fc fe69 	bl	80004d4 <__aeabi_i2d>
 8003802:	4604      	mov	r4, r0
 8003804:	460d      	mov	r5, r1
 8003806:	4b5a      	ldr	r3, [pc, #360]	; (8003970 <Rafael_PanTompkins+0x12b8>)
 8003808:	f9b3 3000 	ldrsh.w	r3, [r3]
 800380c:	461a      	mov	r2, r3
 800380e:	4b5f      	ldr	r3, [pc, #380]	; (800398c <Rafael_PanTompkins+0x12d4>)
 8003810:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	4618      	mov	r0, r3
 8003818:	f7fc fe5c 	bl	80004d4 <__aeabi_i2d>
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	4b50      	ldr	r3, [pc, #320]	; (8003964 <Rafael_PanTompkins+0x12ac>)
 8003822:	f7fc fec1 	bl	80005a8 <__aeabi_dmul>
 8003826:	4602      	mov	r2, r0
 8003828:	460b      	mov	r3, r1
 800382a:	4620      	mov	r0, r4
 800382c:	4629      	mov	r1, r5
 800382e:	f7fc fd05 	bl	800023c <__adddf3>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	4610      	mov	r0, r2
 8003838:	4619      	mov	r1, r3
 800383a:	f7fd f965 	bl	8000b08 <__aeabi_d2iz>
 800383e:	4603      	mov	r3, r0
 8003840:	b21a      	sxth	r2, r3
 8003842:	4b53      	ldr	r3, [pc, #332]	; (8003990 <Rafael_PanTompkins+0x12d8>)
 8003844:	801a      	strh	r2, [r3, #0]
                            threshold_f2 = 0.5*threshold_f1;
 8003846:	4b52      	ldr	r3, [pc, #328]	; (8003990 <Rafael_PanTompkins+0x12d8>)
 8003848:	f9b3 3000 	ldrsh.w	r3, [r3]
 800384c:	4618      	mov	r0, r3
 800384e:	f7fc fe41 	bl	80004d4 <__aeabi_i2d>
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	4b49      	ldr	r3, [pc, #292]	; (800397c <Rafael_PanTompkins+0x12c4>)
 8003858:	f7fc fea6 	bl	80005a8 <__aeabi_dmul>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4610      	mov	r0, r2
 8003862:	4619      	mov	r1, r3
 8003864:	f7fd f950 	bl	8000b08 <__aeabi_d2iz>
 8003868:	4603      	mov	r3, r0
 800386a:	b21a      	sxth	r2, r3
 800386c:	4b49      	ldr	r3, [pc, #292]	; (8003994 <Rafael_PanTompkins+0x12dc>)
 800386e:	801a      	strh	r2, [r3, #0]
                            // If a signal peak was detected on the back search, the RR attributes must be updated.
                            // This is the same thing done when a peak is detected on the first try.
                            //RR Average 1
                            rravg1 = 0;
 8003870:	4b49      	ldr	r3, [pc, #292]	; (8003998 <Rafael_PanTompkins+0x12e0>)
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]
                            for (j = 0; j < 7; j++)
 8003876:	4b49      	ldr	r3, [pc, #292]	; (800399c <Rafael_PanTompkins+0x12e4>)
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	e019      	b.n	80038b2 <Rafael_PanTompkins+0x11fa>
                            {
                                rr1[j] = rr1[j+1];
 800387e:	4b47      	ldr	r3, [pc, #284]	; (800399c <Rafael_PanTompkins+0x12e4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	1c5a      	adds	r2, r3, #1
 8003884:	4b45      	ldr	r3, [pc, #276]	; (800399c <Rafael_PanTompkins+0x12e4>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4945      	ldr	r1, [pc, #276]	; (80039a0 <Rafael_PanTompkins+0x12e8>)
 800388a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800388e:	4944      	ldr	r1, [pc, #272]	; (80039a0 <Rafael_PanTompkins+0x12e8>)
 8003890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                rravg1 += rr1[j];
 8003894:	4b41      	ldr	r3, [pc, #260]	; (800399c <Rafael_PanTompkins+0x12e4>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a41      	ldr	r2, [pc, #260]	; (80039a0 <Rafael_PanTompkins+0x12e8>)
 800389a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800389e:	4b3e      	ldr	r3, [pc, #248]	; (8003998 <Rafael_PanTompkins+0x12e0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4413      	add	r3, r2
 80038a4:	4a3c      	ldr	r2, [pc, #240]	; (8003998 <Rafael_PanTompkins+0x12e0>)
 80038a6:	6013      	str	r3, [r2, #0]
                            for (j = 0; j < 7; j++)
 80038a8:	4b3c      	ldr	r3, [pc, #240]	; (800399c <Rafael_PanTompkins+0x12e4>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3301      	adds	r3, #1
 80038ae:	4a3b      	ldr	r2, [pc, #236]	; (800399c <Rafael_PanTompkins+0x12e4>)
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	4b3a      	ldr	r3, [pc, #232]	; (800399c <Rafael_PanTompkins+0x12e4>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2b06      	cmp	r3, #6
 80038b8:	d9e1      	bls.n	800387e <Rafael_PanTompkins+0x11c6>
                            }
                            rr1[7] = sample - (current - i) - lastQRS;
 80038ba:	4b25      	ldr	r3, [pc, #148]	; (8003950 <Rafael_PanTompkins+0x1298>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a39      	ldr	r2, [pc, #228]	; (80039a4 <Rafael_PanTompkins+0x12ec>)
 80038c0:	6812      	ldr	r2, [r2, #0]
 80038c2:	1a9a      	subs	r2, r3, r2
 80038c4:	4b38      	ldr	r3, [pc, #224]	; (80039a8 <Rafael_PanTompkins+0x12f0>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	441a      	add	r2, r3
 80038ca:	4b38      	ldr	r3, [pc, #224]	; (80039ac <Rafael_PanTompkins+0x12f4>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	461a      	mov	r2, r3
 80038d2:	4b33      	ldr	r3, [pc, #204]	; (80039a0 <Rafael_PanTompkins+0x12e8>)
 80038d4:	61da      	str	r2, [r3, #28]
                            qrs = true;
 80038d6:	4b36      	ldr	r3, [pc, #216]	; (80039b0 <Rafael_PanTompkins+0x12f8>)
 80038d8:	2201      	movs	r2, #1
 80038da:	701a      	strb	r2, [r3, #0]
                            lastQRS = sample - (current - i);
 80038dc:	4b1c      	ldr	r3, [pc, #112]	; (8003950 <Rafael_PanTompkins+0x1298>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a30      	ldr	r2, [pc, #192]	; (80039a4 <Rafael_PanTompkins+0x12ec>)
 80038e2:	6812      	ldr	r2, [r2, #0]
 80038e4:	1a9a      	subs	r2, r3, r2
 80038e6:	4b30      	ldr	r3, [pc, #192]	; (80039a8 <Rafael_PanTompkins+0x12f0>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4413      	add	r3, r2
 80038ec:	4a2f      	ldr	r2, [pc, #188]	; (80039ac <Rafael_PanTompkins+0x12f4>)
 80038ee:	6013      	str	r3, [r2, #0]
                            rravg1 += rr1[7];
 80038f0:	4b2b      	ldr	r3, [pc, #172]	; (80039a0 <Rafael_PanTompkins+0x12e8>)
 80038f2:	69da      	ldr	r2, [r3, #28]
 80038f4:	4b28      	ldr	r3, [pc, #160]	; (8003998 <Rafael_PanTompkins+0x12e0>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4413      	add	r3, r2
 80038fa:	4a27      	ldr	r2, [pc, #156]	; (8003998 <Rafael_PanTompkins+0x12e0>)
 80038fc:	6013      	str	r3, [r2, #0]
                            rravg1 *= 0.125;
 80038fe:	4b26      	ldr	r3, [pc, #152]	; (8003998 <Rafael_PanTompkins+0x12e0>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f7fc fde6 	bl	80004d4 <__aeabi_i2d>
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003910:	f7fc fe4a 	bl	80005a8 <__aeabi_dmul>
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	4610      	mov	r0, r2
 800391a:	4619      	mov	r1, r3
 800391c:	f7fd f8f4 	bl	8000b08 <__aeabi_d2iz>
 8003920:	4603      	mov	r3, r0
 8003922:	4a1d      	ldr	r2, [pc, #116]	; (8003998 <Rafael_PanTompkins+0x12e0>)
 8003924:	6013      	str	r3, [r2, #0]

                            //RR Average 2
                            if ( (rr1[7] >= rrlow) && (rr1[7] <= rrhigh) )
 8003926:	4b1e      	ldr	r3, [pc, #120]	; (80039a0 <Rafael_PanTompkins+0x12e8>)
 8003928:	69da      	ldr	r2, [r3, #28]
 800392a:	4b22      	ldr	r3, [pc, #136]	; (80039b4 <Rafael_PanTompkins+0x12fc>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	429a      	cmp	r2, r3
 8003930:	f2c0 80bc 	blt.w	8003aac <Rafael_PanTompkins+0x13f4>
 8003934:	4b1a      	ldr	r3, [pc, #104]	; (80039a0 <Rafael_PanTompkins+0x12e8>)
 8003936:	69da      	ldr	r2, [r3, #28]
 8003938:	4b1f      	ldr	r3, [pc, #124]	; (80039b8 <Rafael_PanTompkins+0x1300>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	429a      	cmp	r2, r3
 800393e:	f300 80b5 	bgt.w	8003aac <Rafael_PanTompkins+0x13f4>
                            {
                                rravg2 = 0;
 8003942:	4b1e      	ldr	r3, [pc, #120]	; (80039bc <Rafael_PanTompkins+0x1304>)
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]
                                for (i = 0; i < 7; i++)
 8003948:	4b01      	ldr	r3, [pc, #4]	; (8003950 <Rafael_PanTompkins+0x1298>)
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	e051      	b.n	80039f4 <Rafael_PanTompkins+0x133c>
 8003950:	20002bac 	.word	0x20002bac
 8003954:	200021f8 	.word	0x200021f8
 8003958:	20002bc8 	.word	0x20002bc8
 800395c:	200013e8 	.word	0x200013e8
 8003960:	20002bca 	.word	0x20002bca
 8003964:	3fd00000 	.word	0x3fd00000
 8003968:	20002bd4 	.word	0x20002bd4
 800396c:	3fe80000 	.word	0x3fe80000
 8003970:	20002bd6 	.word	0x20002bd6
 8003974:	20002bd8 	.word	0x20002bd8
 8003978:	20002bcc 	.word	0x20002bcc
 800397c:	3fe00000 	.word	0x3fe00000
 8003980:	20002bce 	.word	0x20002bce
 8003984:	20002bc0 	.word	0x20002bc0
 8003988:	20002bbc 	.word	0x20002bbc
 800398c:	20002bda 	.word	0x20002bda
 8003990:	20002bd0 	.word	0x20002bd0
 8003994:	20002bd2 	.word	0x20002bd2
 8003998:	20002b98 	.word	0x20002b98
 800399c:	20002bb0 	.word	0x20002bb0
 80039a0:	20002b58 	.word	0x20002b58
 80039a4:	20002bc4 	.word	0x20002bc4
 80039a8:	20002bb4 	.word	0x20002bb4
 80039ac:	20002bb8 	.word	0x20002bb8
 80039b0:	20002bdc 	.word	0x20002bdc
 80039b4:	20002ba0 	.word	0x20002ba0
 80039b8:	20002ba4 	.word	0x20002ba4
 80039bc:	20002b9c 	.word	0x20002b9c
                                {
                                    rr2[i] = rr2[i+1];
 80039c0:	4b5b      	ldr	r3, [pc, #364]	; (8003b30 <Rafael_PanTompkins+0x1478>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	4b5a      	ldr	r3, [pc, #360]	; (8003b30 <Rafael_PanTompkins+0x1478>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	495a      	ldr	r1, [pc, #360]	; (8003b34 <Rafael_PanTompkins+0x147c>)
 80039cc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80039d0:	4958      	ldr	r1, [pc, #352]	; (8003b34 <Rafael_PanTompkins+0x147c>)
 80039d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                    rravg2 += rr2[i];
 80039d6:	4b56      	ldr	r3, [pc, #344]	; (8003b30 <Rafael_PanTompkins+0x1478>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a56      	ldr	r2, [pc, #344]	; (8003b34 <Rafael_PanTompkins+0x147c>)
 80039dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80039e0:	4b55      	ldr	r3, [pc, #340]	; (8003b38 <Rafael_PanTompkins+0x1480>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4413      	add	r3, r2
 80039e6:	4a54      	ldr	r2, [pc, #336]	; (8003b38 <Rafael_PanTompkins+0x1480>)
 80039e8:	6013      	str	r3, [r2, #0]
                                for (i = 0; i < 7; i++)
 80039ea:	4b51      	ldr	r3, [pc, #324]	; (8003b30 <Rafael_PanTompkins+0x1478>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	3301      	adds	r3, #1
 80039f0:	4a4f      	ldr	r2, [pc, #316]	; (8003b30 <Rafael_PanTompkins+0x1478>)
 80039f2:	6013      	str	r3, [r2, #0]
 80039f4:	4b4e      	ldr	r3, [pc, #312]	; (8003b30 <Rafael_PanTompkins+0x1478>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b06      	cmp	r3, #6
 80039fa:	d9e1      	bls.n	80039c0 <Rafael_PanTompkins+0x1308>
                                }
                                rr2[7] = rr1[7];
 80039fc:	4b4f      	ldr	r3, [pc, #316]	; (8003b3c <Rafael_PanTompkins+0x1484>)
 80039fe:	69db      	ldr	r3, [r3, #28]
 8003a00:	4a4c      	ldr	r2, [pc, #304]	; (8003b34 <Rafael_PanTompkins+0x147c>)
 8003a02:	61d3      	str	r3, [r2, #28]
                                rravg2 += rr2[7];
 8003a04:	4b4b      	ldr	r3, [pc, #300]	; (8003b34 <Rafael_PanTompkins+0x147c>)
 8003a06:	69da      	ldr	r2, [r3, #28]
 8003a08:	4b4b      	ldr	r3, [pc, #300]	; (8003b38 <Rafael_PanTompkins+0x1480>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	4a4a      	ldr	r2, [pc, #296]	; (8003b38 <Rafael_PanTompkins+0x1480>)
 8003a10:	6013      	str	r3, [r2, #0]
                                rravg2 *= 0.125;
 8003a12:	4b49      	ldr	r3, [pc, #292]	; (8003b38 <Rafael_PanTompkins+0x1480>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fc fd5c 	bl	80004d4 <__aeabi_i2d>
 8003a1c:	f04f 0200 	mov.w	r2, #0
 8003a20:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003a24:	f7fc fdc0 	bl	80005a8 <__aeabi_dmul>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4610      	mov	r0, r2
 8003a2e:	4619      	mov	r1, r3
 8003a30:	f7fd f86a 	bl	8000b08 <__aeabi_d2iz>
 8003a34:	4603      	mov	r3, r0
 8003a36:	4a40      	ldr	r2, [pc, #256]	; (8003b38 <Rafael_PanTompkins+0x1480>)
 8003a38:	6013      	str	r3, [r2, #0]
                                rrlow = 0.92*rravg2;
 8003a3a:	4b3f      	ldr	r3, [pc, #252]	; (8003b38 <Rafael_PanTompkins+0x1480>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fc fd48 	bl	80004d4 <__aeabi_i2d>
 8003a44:	a334      	add	r3, pc, #208	; (adr r3, 8003b18 <Rafael_PanTompkins+0x1460>)
 8003a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4a:	f7fc fdad 	bl	80005a8 <__aeabi_dmul>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	460b      	mov	r3, r1
 8003a52:	4610      	mov	r0, r2
 8003a54:	4619      	mov	r1, r3
 8003a56:	f7fd f857 	bl	8000b08 <__aeabi_d2iz>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	4a38      	ldr	r2, [pc, #224]	; (8003b40 <Rafael_PanTompkins+0x1488>)
 8003a5e:	6013      	str	r3, [r2, #0]
                                rrhigh = 1.16*rravg2;
 8003a60:	4b35      	ldr	r3, [pc, #212]	; (8003b38 <Rafael_PanTompkins+0x1480>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7fc fd35 	bl	80004d4 <__aeabi_i2d>
 8003a6a:	a32d      	add	r3, pc, #180	; (adr r3, 8003b20 <Rafael_PanTompkins+0x1468>)
 8003a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a70:	f7fc fd9a 	bl	80005a8 <__aeabi_dmul>
 8003a74:	4602      	mov	r2, r0
 8003a76:	460b      	mov	r3, r1
 8003a78:	4610      	mov	r0, r2
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	f7fd f844 	bl	8000b08 <__aeabi_d2iz>
 8003a80:	4603      	mov	r3, r0
 8003a82:	4a30      	ldr	r2, [pc, #192]	; (8003b44 <Rafael_PanTompkins+0x148c>)
 8003a84:	6013      	str	r3, [r2, #0]
                                rrmiss = 1.66*rravg2;
 8003a86:	4b2c      	ldr	r3, [pc, #176]	; (8003b38 <Rafael_PanTompkins+0x1480>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fc fd22 	bl	80004d4 <__aeabi_i2d>
 8003a90:	a325      	add	r3, pc, #148	; (adr r3, 8003b28 <Rafael_PanTompkins+0x1470>)
 8003a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a96:	f7fc fd87 	bl	80005a8 <__aeabi_dmul>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	4610      	mov	r0, r2
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	f7fd f831 	bl	8000b08 <__aeabi_d2iz>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	4a27      	ldr	r2, [pc, #156]	; (8003b48 <Rafael_PanTompkins+0x1490>)
 8003aaa:	6013      	str	r3, [r2, #0]
                            }

                            prevRegular = regular;
 8003aac:	4b27      	ldr	r3, [pc, #156]	; (8003b4c <Rafael_PanTompkins+0x1494>)
 8003aae:	781a      	ldrb	r2, [r3, #0]
 8003ab0:	4b27      	ldr	r3, [pc, #156]	; (8003b50 <Rafael_PanTompkins+0x1498>)
 8003ab2:	701a      	strb	r2, [r3, #0]
                            if (rravg1 == rravg2)
 8003ab4:	4b27      	ldr	r3, [pc, #156]	; (8003b54 <Rafael_PanTompkins+0x149c>)
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	4b1f      	ldr	r3, [pc, #124]	; (8003b38 <Rafael_PanTompkins+0x1480>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d103      	bne.n	8003ac8 <Rafael_PanTompkins+0x1410>
                            {
                                regular = true;
 8003ac0:	4b22      	ldr	r3, [pc, #136]	; (8003b4c <Rafael_PanTompkins+0x1494>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	701a      	strb	r2, [r3, #0]
                                    threshold_i1 /= 2;
                                    threshold_f1 /= 2;
                                }
                            }

                            break;
 8003ac6:	e04d      	b.n	8003b64 <Rafael_PanTompkins+0x14ac>
                                regular = false;
 8003ac8:	4b20      	ldr	r3, [pc, #128]	; (8003b4c <Rafael_PanTompkins+0x1494>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	701a      	strb	r2, [r3, #0]
                                if (prevRegular)
 8003ace:	4b20      	ldr	r3, [pc, #128]	; (8003b50 <Rafael_PanTompkins+0x1498>)
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d046      	beq.n	8003b64 <Rafael_PanTompkins+0x14ac>
                                    threshold_i1 /= 2;
 8003ad6:	4b20      	ldr	r3, [pc, #128]	; (8003b58 <Rafael_PanTompkins+0x14a0>)
 8003ad8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003adc:	0fda      	lsrs	r2, r3, #31
 8003ade:	4413      	add	r3, r2
 8003ae0:	105b      	asrs	r3, r3, #1
 8003ae2:	b21a      	sxth	r2, r3
 8003ae4:	4b1c      	ldr	r3, [pc, #112]	; (8003b58 <Rafael_PanTompkins+0x14a0>)
 8003ae6:	801a      	strh	r2, [r3, #0]
                                    threshold_f1 /= 2;
 8003ae8:	4b1c      	ldr	r3, [pc, #112]	; (8003b5c <Rafael_PanTompkins+0x14a4>)
 8003aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003aee:	0fda      	lsrs	r2, r3, #31
 8003af0:	4413      	add	r3, r2
 8003af2:	105b      	asrs	r3, r3, #1
 8003af4:	b21a      	sxth	r2, r3
 8003af6:	4b19      	ldr	r3, [pc, #100]	; (8003b5c <Rafael_PanTompkins+0x14a4>)
 8003af8:	801a      	strh	r2, [r3, #0]
                            break;
 8003afa:	e033      	b.n	8003b64 <Rafael_PanTompkins+0x14ac>
				for (i = current - (sample - lastQRS) + FS/5; i < (long unsigned int)current; i++)
 8003afc:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <Rafael_PanTompkins+0x1478>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3301      	adds	r3, #1
 8003b02:	4a0b      	ldr	r2, [pc, #44]	; (8003b30 <Rafael_PanTompkins+0x1478>)
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	4b0a      	ldr	r3, [pc, #40]	; (8003b30 <Rafael_PanTompkins+0x1478>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a15      	ldr	r2, [pc, #84]	; (8003b60 <Rafael_PanTompkins+0x14a8>)
 8003b0c:	6812      	ldr	r2, [r2, #0]
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	f4ff ad18 	bcc.w	8003544 <Rafael_PanTompkins+0xe8c>
 8003b14:	e027      	b.n	8003b66 <Rafael_PanTompkins+0x14ae>
 8003b16:	bf00      	nop
 8003b18:	d70a3d71 	.word	0xd70a3d71
 8003b1c:	3fed70a3 	.word	0x3fed70a3
 8003b20:	28f5c28f 	.word	0x28f5c28f
 8003b24:	3ff28f5c 	.word	0x3ff28f5c
 8003b28:	28f5c28f 	.word	0x28f5c28f
 8003b2c:	3ffa8f5c 	.word	0x3ffa8f5c
 8003b30:	20002bac 	.word	0x20002bac
 8003b34:	20002b78 	.word	0x20002b78
 8003b38:	20002b9c 	.word	0x20002b9c
 8003b3c:	20002b58 	.word	0x20002b58
 8003b40:	20002ba0 	.word	0x20002ba0
 8003b44:	20002ba4 	.word	0x20002ba4
 8003b48:	20002ba8 	.word	0x20002ba8
 8003b4c:	20000008 	.word	0x20000008
 8003b50:	20002bdd 	.word	0x20002bdd
 8003b54:	20002b98 	.word	0x20002b98
 8003b58:	20002bcc 	.word	0x20002bcc
 8003b5c:	20002bd0 	.word	0x20002bd0
 8003b60:	20002bc4 	.word	0x20002bc4
                            break;
 8003b64:	bf00      	nop
                        }
                    }
				}

				if (qrs)
 8003b66:	4b8c      	ldr	r3, [pc, #560]	; (8003d98 <Rafael_PanTompkins+0x16e0>)
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d014      	beq.n	8003b98 <Rafael_PanTompkins+0x14e0>
                {
					RF_outputSignal[current] = false;
 8003b6e:	4b8b      	ldr	r3, [pc, #556]	; (8003d9c <Rafael_PanTompkins+0x16e4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a8b      	ldr	r2, [pc, #556]	; (8003da0 <Rafael_PanTompkins+0x16e8>)
 8003b74:	2100      	movs	r1, #0
 8003b76:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					RF_outputSignal[i] = true;
 8003b7a:	4b8a      	ldr	r3, [pc, #552]	; (8003da4 <Rafael_PanTompkins+0x16ec>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a88      	ldr	r2, [pc, #544]	; (8003da0 <Rafael_PanTompkins+0x16e8>)
 8003b80:	2101      	movs	r1, #1
 8003b82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    result = (current - i);
 8003b86:	4b85      	ldr	r3, [pc, #532]	; (8003d9c <Rafael_PanTompkins+0x16e4>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	4b85      	ldr	r3, [pc, #532]	; (8003da4 <Rafael_PanTompkins+0x16ec>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	81fb      	strh	r3, [r7, #14]
                }
			}

			// Definitely no signal peak was detected.
			if (!qrs)
 8003b98:	4b7f      	ldr	r3, [pc, #508]	; (8003d98 <Rafael_PanTompkins+0x16e0>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f040 80f3 	bne.w	8003d88 <Rafael_PanTompkins+0x16d0>
			{
				// If some kind of peak had been detected, then it's certainly a noise peak. Thresholds must be updated accordinly.
				if ((RF_integral[current] >= threshold_i1) || (RF_highpass[current] >= threshold_f1))
 8003ba2:	4b7e      	ldr	r3, [pc, #504]	; (8003d9c <Rafael_PanTompkins+0x16e4>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a80      	ldr	r2, [pc, #512]	; (8003da8 <Rafael_PanTompkins+0x16f0>)
 8003ba8:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8003bac:	4b7f      	ldr	r3, [pc, #508]	; (8003dac <Rafael_PanTompkins+0x16f4>)
 8003bae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	da0a      	bge.n	8003bcc <Rafael_PanTompkins+0x1514>
 8003bb6:	4b79      	ldr	r3, [pc, #484]	; (8003d9c <Rafael_PanTompkins+0x16e4>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a7d      	ldr	r2, [pc, #500]	; (8003db0 <Rafael_PanTompkins+0x16f8>)
 8003bbc:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8003bc0:	4b7c      	ldr	r3, [pc, #496]	; (8003db4 <Rafael_PanTompkins+0x16fc>)
 8003bc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	f2c0 80de 	blt.w	8003d88 <Rafael_PanTompkins+0x16d0>
				{
					peak_i = RF_integral[current];
 8003bcc:	4b73      	ldr	r3, [pc, #460]	; (8003d9c <Rafael_PanTompkins+0x16e4>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a75      	ldr	r2, [pc, #468]	; (8003da8 <Rafael_PanTompkins+0x16f0>)
 8003bd2:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8003bd6:	4b78      	ldr	r3, [pc, #480]	; (8003db8 <Rafael_PanTompkins+0x1700>)
 8003bd8:	801a      	strh	r2, [r3, #0]
					npk_i = 0.125*peak_i + 0.875*npk_i;
 8003bda:	4b77      	ldr	r3, [pc, #476]	; (8003db8 <Rafael_PanTompkins+0x1700>)
 8003bdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fc fc77 	bl	80004d4 <__aeabi_i2d>
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003bee:	f7fc fcdb 	bl	80005a8 <__aeabi_dmul>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	4614      	mov	r4, r2
 8003bf8:	461d      	mov	r5, r3
 8003bfa:	4b70      	ldr	r3, [pc, #448]	; (8003dbc <Rafael_PanTompkins+0x1704>)
 8003bfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fc fc67 	bl	80004d4 <__aeabi_i2d>
 8003c06:	f04f 0200 	mov.w	r2, #0
 8003c0a:	4b6d      	ldr	r3, [pc, #436]	; (8003dc0 <Rafael_PanTompkins+0x1708>)
 8003c0c:	f7fc fccc 	bl	80005a8 <__aeabi_dmul>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4620      	mov	r0, r4
 8003c16:	4629      	mov	r1, r5
 8003c18:	f7fc fb10 	bl	800023c <__adddf3>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4610      	mov	r0, r2
 8003c22:	4619      	mov	r1, r3
 8003c24:	f7fc ff70 	bl	8000b08 <__aeabi_d2iz>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	b21a      	sxth	r2, r3
 8003c2c:	4b63      	ldr	r3, [pc, #396]	; (8003dbc <Rafael_PanTompkins+0x1704>)
 8003c2e:	801a      	strh	r2, [r3, #0]
					threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8003c30:	4b62      	ldr	r3, [pc, #392]	; (8003dbc <Rafael_PanTompkins+0x1704>)
 8003c32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fc fc4c 	bl	80004d4 <__aeabi_i2d>
 8003c3c:	4604      	mov	r4, r0
 8003c3e:	460d      	mov	r5, r1
 8003c40:	4b60      	ldr	r3, [pc, #384]	; (8003dc4 <Rafael_PanTompkins+0x170c>)
 8003c42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c46:	461a      	mov	r2, r3
 8003c48:	4b5c      	ldr	r3, [pc, #368]	; (8003dbc <Rafael_PanTompkins+0x1704>)
 8003c4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7fc fc3f 	bl	80004d4 <__aeabi_i2d>
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	4b5b      	ldr	r3, [pc, #364]	; (8003dc8 <Rafael_PanTompkins+0x1710>)
 8003c5c:	f7fc fca4 	bl	80005a8 <__aeabi_dmul>
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	4620      	mov	r0, r4
 8003c66:	4629      	mov	r1, r5
 8003c68:	f7fc fae8 	bl	800023c <__adddf3>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4610      	mov	r0, r2
 8003c72:	4619      	mov	r1, r3
 8003c74:	f7fc ff48 	bl	8000b08 <__aeabi_d2iz>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	b21a      	sxth	r2, r3
 8003c7c:	4b4b      	ldr	r3, [pc, #300]	; (8003dac <Rafael_PanTompkins+0x16f4>)
 8003c7e:	801a      	strh	r2, [r3, #0]
					threshold_i2 = 0.5*threshold_i1;
 8003c80:	4b4a      	ldr	r3, [pc, #296]	; (8003dac <Rafael_PanTompkins+0x16f4>)
 8003c82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fc fc24 	bl	80004d4 <__aeabi_i2d>
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	4b4e      	ldr	r3, [pc, #312]	; (8003dcc <Rafael_PanTompkins+0x1714>)
 8003c92:	f7fc fc89 	bl	80005a8 <__aeabi_dmul>
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4610      	mov	r0, r2
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	f7fc ff33 	bl	8000b08 <__aeabi_d2iz>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	b21a      	sxth	r2, r3
 8003ca6:	4b4a      	ldr	r3, [pc, #296]	; (8003dd0 <Rafael_PanTompkins+0x1718>)
 8003ca8:	801a      	strh	r2, [r3, #0]
					peak_f = RF_highpass[current];
 8003caa:	4b3c      	ldr	r3, [pc, #240]	; (8003d9c <Rafael_PanTompkins+0x16e4>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a40      	ldr	r2, [pc, #256]	; (8003db0 <Rafael_PanTompkins+0x16f8>)
 8003cb0:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8003cb4:	4b47      	ldr	r3, [pc, #284]	; (8003dd4 <Rafael_PanTompkins+0x171c>)
 8003cb6:	801a      	strh	r2, [r3, #0]
					npk_f = 0.125*peak_f + 0.875*npk_f;
 8003cb8:	4b46      	ldr	r3, [pc, #280]	; (8003dd4 <Rafael_PanTompkins+0x171c>)
 8003cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fc fc08 	bl	80004d4 <__aeabi_i2d>
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003ccc:	f7fc fc6c 	bl	80005a8 <__aeabi_dmul>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4614      	mov	r4, r2
 8003cd6:	461d      	mov	r5, r3
 8003cd8:	4b3f      	ldr	r3, [pc, #252]	; (8003dd8 <Rafael_PanTompkins+0x1720>)
 8003cda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fc fbf8 	bl	80004d4 <__aeabi_i2d>
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	4b35      	ldr	r3, [pc, #212]	; (8003dc0 <Rafael_PanTompkins+0x1708>)
 8003cea:	f7fc fc5d 	bl	80005a8 <__aeabi_dmul>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	4629      	mov	r1, r5
 8003cf6:	f7fc faa1 	bl	800023c <__adddf3>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4610      	mov	r0, r2
 8003d00:	4619      	mov	r1, r3
 8003d02:	f7fc ff01 	bl	8000b08 <__aeabi_d2iz>
 8003d06:	4603      	mov	r3, r0
 8003d08:	b21a      	sxth	r2, r3
 8003d0a:	4b33      	ldr	r3, [pc, #204]	; (8003dd8 <Rafael_PanTompkins+0x1720>)
 8003d0c:	801a      	strh	r2, [r3, #0]
					threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 8003d0e:	4b32      	ldr	r3, [pc, #200]	; (8003dd8 <Rafael_PanTompkins+0x1720>)
 8003d10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fc fbdd 	bl	80004d4 <__aeabi_i2d>
 8003d1a:	4604      	mov	r4, r0
 8003d1c:	460d      	mov	r5, r1
 8003d1e:	4b2f      	ldr	r3, [pc, #188]	; (8003ddc <Rafael_PanTompkins+0x1724>)
 8003d20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d24:	461a      	mov	r2, r3
 8003d26:	4b2c      	ldr	r3, [pc, #176]	; (8003dd8 <Rafael_PanTompkins+0x1720>)
 8003d28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fc fbd0 	bl	80004d4 <__aeabi_i2d>
 8003d34:	f04f 0200 	mov.w	r2, #0
 8003d38:	4b23      	ldr	r3, [pc, #140]	; (8003dc8 <Rafael_PanTompkins+0x1710>)
 8003d3a:	f7fc fc35 	bl	80005a8 <__aeabi_dmul>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	4620      	mov	r0, r4
 8003d44:	4629      	mov	r1, r5
 8003d46:	f7fc fa79 	bl	800023c <__adddf3>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	4610      	mov	r0, r2
 8003d50:	4619      	mov	r1, r3
 8003d52:	f7fc fed9 	bl	8000b08 <__aeabi_d2iz>
 8003d56:	4603      	mov	r3, r0
 8003d58:	b21a      	sxth	r2, r3
 8003d5a:	4b16      	ldr	r3, [pc, #88]	; (8003db4 <Rafael_PanTompkins+0x16fc>)
 8003d5c:	801a      	strh	r2, [r3, #0]
					threshold_f2 = 0.5*threshold_f1;
 8003d5e:	4b15      	ldr	r3, [pc, #84]	; (8003db4 <Rafael_PanTompkins+0x16fc>)
 8003d60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fc fbb5 	bl	80004d4 <__aeabi_i2d>
 8003d6a:	f04f 0200 	mov.w	r2, #0
 8003d6e:	4b17      	ldr	r3, [pc, #92]	; (8003dcc <Rafael_PanTompkins+0x1714>)
 8003d70:	f7fc fc1a 	bl	80005a8 <__aeabi_dmul>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4610      	mov	r0, r2
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	f7fc fec4 	bl	8000b08 <__aeabi_d2iz>
 8003d80:	4603      	mov	r3, r0
 8003d82:	b21a      	sxth	r2, r3
 8003d84:	4b16      	ldr	r3, [pc, #88]	; (8003de0 <Rafael_PanTompkins+0x1728>)
 8003d86:	801a      	strh	r2, [r3, #0]
		// However, it updates a few samples back from the buffer. The reason is that if we update the detection
		// for the current sample, we might miss a peak that could've been found later by backsearching using
		// lighter thresholds. The final waveform output does match the original signal, though.

		//My UPDATE: If peak was detected returns sample delay, else returns 0
		return result;
 8003d88:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003d96:	bf00      	nop
 8003d98:	20002bdc 	.word	0x20002bdc
 8003d9c:	20002bc4 	.word	0x20002bc4
 8003da0:	200026a8 	.word	0x200026a8
 8003da4:	20002bac 	.word	0x20002bac
 8003da8:	200021f8 	.word	0x200021f8
 8003dac:	20002bcc 	.word	0x20002bcc
 8003db0:	200013e8 	.word	0x200013e8
 8003db4:	20002bd0 	.word	0x20002bd0
 8003db8:	20002bc8 	.word	0x20002bc8
 8003dbc:	20002bd8 	.word	0x20002bd8
 8003dc0:	3fec0000 	.word	0x3fec0000
 8003dc4:	20002bd4 	.word	0x20002bd4
 8003dc8:	3fd00000 	.word	0x3fd00000
 8003dcc:	3fe00000 	.word	0x3fe00000
 8003dd0:	20002bce 	.word	0x20002bce
 8003dd4:	20002bca 	.word	0x20002bca
 8003dd8:	20002bda 	.word	0x20002bda
 8003ddc:	20002bd6 	.word	0x20002bd6
 8003de0:	20002bd2 	.word	0x20002bd2

08003de4 <Rafael_get_LPFilter_output>:


int16_t Rafael_get_LPFilter_output()
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
	return RF_lowpass[BUFFSIZE];
 8003de8:	4b03      	ldr	r3, [pc, #12]	; (8003df8 <Rafael_get_LPFilter_output+0x14>)
 8003dea:	f9b3 34b0 	ldrsh.w	r3, [r3, #1200]	; 0x4b0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	20000f38 	.word	0x20000f38

08003dfc <Rafael_get_HPFilter_output>:
int16_t Rafael_get_HPFilter_output()
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
	return RF_highpass[BUFFSIZE];
 8003e00:	4b03      	ldr	r3, [pc, #12]	; (8003e10 <Rafael_get_HPFilter_output+0x14>)
 8003e02:	f9b3 34b0 	ldrsh.w	r3, [r3, #1200]	; 0x4b0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	200013e8 	.word	0x200013e8

08003e14 <Rafael_get_DRFilter_output>:
int16_t Rafael_get_DRFilter_output()
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
	return RF_derivative[BUFFSIZE];
 8003e18:	4b03      	ldr	r3, [pc, #12]	; (8003e28 <Rafael_get_DRFilter_output+0x14>)
 8003e1a:	f9b3 34b0 	ldrsh.w	r3, [r3, #1200]	; 0x4b0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	20001898 	.word	0x20001898

08003e2c <Rafael_get_SQRFilter_output>:
int16_t Rafael_get_SQRFilter_output()
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
	return RF_squared[current];
 8003e30:	4b04      	ldr	r3, [pc, #16]	; (8003e44 <Rafael_get_SQRFilter_output+0x18>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a04      	ldr	r2, [pc, #16]	; (8003e48 <Rafael_get_SQRFilter_output+0x1c>)
 8003e36:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	20002bc4 	.word	0x20002bc4
 8003e48:	20001d48 	.word	0x20001d48

08003e4c <Rafael_get_MVFilter_output>:
int16_t Rafael_get_MVFilter_output()
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
	return RF_integral[current];
 8003e50:	4b04      	ldr	r3, [pc, #16]	; (8003e64 <Rafael_get_MVFilter_output+0x18>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a04      	ldr	r2, [pc, #16]	; (8003e68 <Rafael_get_MVFilter_output+0x1c>)
 8003e56:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	20002bc4 	.word	0x20002bc4
 8003e68:	200021f8 	.word	0x200021f8

08003e6c <Rafael_get_ThI1_output>:
int16_t Rafael_get_ThI1_output()
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
	return threshold_i1;
 8003e70:	4b03      	ldr	r3, [pc, #12]	; (8003e80 <Rafael_get_ThI1_output+0x14>)
 8003e72:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	20002bcc 	.word	0x20002bcc

08003e84 <Rafael_get_ThF1_output>:
int16_t Rafael_get_ThF1_output()
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
	return threshold_f1;
 8003e88:	4b03      	ldr	r3, [pc, #12]	; (8003e98 <Rafael_get_ThF1_output+0x14>)
 8003e8a:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	20002bd0 	.word	0x20002bd0

08003e9c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003eaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
}
 8003ec2:	bf00      	nop
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
	...

08003ed0 <sendUSBData>:
uint8_t USBBuffer[2048];
uint8_t USBReciveBuffer[2048];
uint16_t USBBuffer_index = 0;

void sendUSBData (uint8_t* Buf, uint16_t Len)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	460b      	mov	r3, r1
 8003eda:	807b      	strh	r3, [r7, #2]
	memcpy(&USBBuffer[USBBuffer_index], Buf, Len);
 8003edc:	4b13      	ldr	r3, [pc, #76]	; (8003f2c <sendUSBData+0x5c>)
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	4b13      	ldr	r3, [pc, #76]	; (8003f30 <sendUSBData+0x60>)
 8003ee4:	4413      	add	r3, r2
 8003ee6:	887a      	ldrh	r2, [r7, #2]
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f009 ff68 	bl	800ddc0 <memcpy>
	USBBuffer_index += Len;
 8003ef0:	4b0e      	ldr	r3, [pc, #56]	; (8003f2c <sendUSBData+0x5c>)
 8003ef2:	881a      	ldrh	r2, [r3, #0]
 8003ef4:	887b      	ldrh	r3, [r7, #2]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	4b0c      	ldr	r3, [pc, #48]	; (8003f2c <sendUSBData+0x5c>)
 8003efc:	801a      	strh	r2, [r3, #0]
	if (USBBuffer_index>2000)
 8003efe:	4b0b      	ldr	r3, [pc, #44]	; (8003f2c <sendUSBData+0x5c>)
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003f06:	d90c      	bls.n	8003f22 <sendUSBData+0x52>
	{
		while (CDC_Transmit_FS(USBBuffer, USBBuffer_index)!= USBD_OK){};
 8003f08:	bf00      	nop
 8003f0a:	4b08      	ldr	r3, [pc, #32]	; (8003f2c <sendUSBData+0x5c>)
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	4619      	mov	r1, r3
 8003f10:	4807      	ldr	r0, [pc, #28]	; (8003f30 <sendUSBData+0x60>)
 8003f12:	f009 fa83 	bl	800d41c <CDC_Transmit_FS>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1f6      	bne.n	8003f0a <sendUSBData+0x3a>
		USBBuffer_index = 0;
 8003f1c:	4b03      	ldr	r3, [pc, #12]	; (8003f2c <sendUSBData+0x5c>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	801a      	strh	r2, [r3, #0]
	}
}
 8003f22:	bf00      	nop
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20003d2c 	.word	0x20003d2c
 8003f30:	20002d2c 	.word	0x20002d2c

08003f34 <findStrEnd>:

uint16_t findStrEnd ()
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
	uint16_t end = 10;
 8003f3a:	230a      	movs	r3, #10
 8003f3c:	80fb      	strh	r3, [r7, #6]
	while (str[end]!='\0')
 8003f3e:	e005      	b.n	8003f4c <findStrEnd+0x18>
	{
		end++;
 8003f40:	88fb      	ldrh	r3, [r7, #6]
 8003f42:	3301      	adds	r3, #1
 8003f44:	80fb      	strh	r3, [r7, #6]
		if (end == 250)
 8003f46:	88fb      	ldrh	r3, [r7, #6]
 8003f48:	2bfa      	cmp	r3, #250	; 0xfa
 8003f4a:	d005      	beq.n	8003f58 <findStrEnd+0x24>
	while (str[end]!='\0')
 8003f4c:	88fb      	ldrh	r3, [r7, #6]
 8003f4e:	4a06      	ldr	r2, [pc, #24]	; (8003f68 <findStrEnd+0x34>)
 8003f50:	5cd3      	ldrb	r3, [r2, r3]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f4      	bne.n	8003f40 <findStrEnd+0xc>
 8003f56:	e000      	b.n	8003f5a <findStrEnd+0x26>
		{
			break;
 8003f58:	bf00      	nop
		}
	}
	return end;
 8003f5a:	88fb      	ldrh	r3, [r7, #6]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	20002c30 	.word	0x20002c30

08003f6c <parseLine>:



void parseLine (uint8_t* Buf, uint32_t Len)
{//Function parse one line from serial port
 8003f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f70:	b0a3      	sub	sp, #140	; 0x8c
 8003f72:	af0e      	add	r7, sp, #56	; 0x38
 8003f74:	61f8      	str	r0, [r7, #28]
 8003f76:	61b9      	str	r1, [r7, #24]
	//In line can be command or data
	if (Len>6)
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	2b06      	cmp	r3, #6
 8003f7c:	d97f      	bls.n	800407e <parseLine+0x112>
	{//command mast be longer than 6 bytes
		if (Buf[0]==0x2B && Buf[1]==0x2B && Buf[2]==0x2B)
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b2b      	cmp	r3, #43	; 0x2b
 8003f84:	d17b      	bne.n	800407e <parseLine+0x112>
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b2b      	cmp	r3, #43	; 0x2b
 8003f8e:	d176      	bne.n	800407e <parseLine+0x112>
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	3302      	adds	r3, #2
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2b2b      	cmp	r3, #43	; 0x2b
 8003f98:	d171      	bne.n	800407e <parseLine+0x112>
		{//three ++ indicate command
			switch (Buf[3])
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	3303      	adds	r3, #3
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b41      	cmp	r3, #65	; 0x41
 8003fa2:	d002      	beq.n	8003faa <parseLine+0x3e>
 8003fa4:	2b42      	cmp	r3, #66	; 0x42
 8003fa6:	d014      	beq.n	8003fd2 <parseLine+0x66>
 8003fa8:	e057      	b.n	800405a <parseLine+0xee>
			{
			case changeDataFormat:
				applicationState.dataType = Buf[4];
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	791a      	ldrb	r2, [r3, #4]
 8003fae:	4b95      	ldr	r3, [pc, #596]	; (8004204 <parseLine+0x298>)
 8003fb0:	701a      	strb	r2, [r3, #0]
				sprintf(str,"OK, done.   \r\n");
 8003fb2:	4995      	ldr	r1, [pc, #596]	; (8004208 <parseLine+0x29c>)
 8003fb4:	4895      	ldr	r0, [pc, #596]	; (800420c <parseLine+0x2a0>)
 8003fb6:	f00a fd99 	bl	800eaec <siprintf>
				while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8003fba:	bf00      	nop
 8003fbc:	f7ff ffba 	bl	8003f34 <findStrEnd>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	4891      	ldr	r0, [pc, #580]	; (800420c <parseLine+0x2a0>)
 8003fc6:	f009 fa29 	bl	800d41c <CDC_Transmit_FS>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1f5      	bne.n	8003fbc <parseLine+0x50>
				break;
 8003fd0:	e054      	b.n	800407c <parseLine+0x110>
			case changeSelectedAlgorithm:
				applicationState.selectedImplementation = Buf[4];
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	791a      	ldrb	r2, [r3, #4]
 8003fd6:	4b8b      	ldr	r3, [pc, #556]	; (8004204 <parseLine+0x298>)
 8003fd8:	705a      	strb	r2, [r3, #1]
				if (applicationState.selectedImplementation == hoomam650)
 8003fda:	4b8a      	ldr	r3, [pc, #552]	; (8004204 <parseLine+0x298>)
 8003fdc:	785b      	ldrb	r3, [r3, #1]
 8003fde:	2b31      	cmp	r3, #49	; 0x31
 8003fe0:	d110      	bne.n	8004004 <parseLine+0x98>
				{
					PT_init();
 8003fe2:	f7fc fe5f 	bl	8000ca4 <PT_init>
					sprintf(str,"OK, done.   \r\n");
 8003fe6:	4988      	ldr	r1, [pc, #544]	; (8004208 <parseLine+0x29c>)
 8003fe8:	4888      	ldr	r0, [pc, #544]	; (800420c <parseLine+0x2a0>)
 8003fea:	f00a fd7f 	bl	800eaec <siprintf>
					while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8003fee:	bf00      	nop
 8003ff0:	f7ff ffa0 	bl	8003f34 <findStrEnd>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	4884      	ldr	r0, [pc, #528]	; (800420c <parseLine+0x2a0>)
 8003ffa:	f009 fa0f 	bl	800d41c <CDC_Transmit_FS>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1f5      	bne.n	8003ff0 <parseLine+0x84>
				}
				if (applicationState.selectedImplementation == rafalmmoreira)
 8004004:	4b7f      	ldr	r3, [pc, #508]	; (8004204 <parseLine+0x298>)
 8004006:	785b      	ldrb	r3, [r3, #1]
 8004008:	2b32      	cmp	r3, #50	; 0x32
 800400a:	d110      	bne.n	800402e <parseLine+0xc2>
				{
					Rafael_init();
 800400c:	f7fe fad4 	bl	80025b8 <Rafael_init>
					sprintf(str,"OK, done.   \r\n");
 8004010:	497d      	ldr	r1, [pc, #500]	; (8004208 <parseLine+0x29c>)
 8004012:	487e      	ldr	r0, [pc, #504]	; (800420c <parseLine+0x2a0>)
 8004014:	f00a fd6a 	bl	800eaec <siprintf>
					while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8004018:	bf00      	nop
 800401a:	f7ff ff8b 	bl	8003f34 <findStrEnd>
 800401e:	4603      	mov	r3, r0
 8004020:	4619      	mov	r1, r3
 8004022:	487a      	ldr	r0, [pc, #488]	; (800420c <parseLine+0x2a0>)
 8004024:	f009 f9fa 	bl	800d41c <CDC_Transmit_FS>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f5      	bne.n	800401a <parseLine+0xae>
				}
				if (applicationState.selectedImplementation == marower)
 800402e:	4b75      	ldr	r3, [pc, #468]	; (8004204 <parseLine+0x298>)
 8004030:	785b      	ldrb	r3, [r3, #1]
 8004032:	2b33      	cmp	r3, #51	; 0x33
 8004034:	d121      	bne.n	800407a <parseLine+0x10e>
				{
					arm_PT_init();
 8004036:	f7fd fee7 	bl	8001e08 <arm_PT_init>
					sprintf(str,"OK, done.   \r\n");
 800403a:	4973      	ldr	r1, [pc, #460]	; (8004208 <parseLine+0x29c>)
 800403c:	4873      	ldr	r0, [pc, #460]	; (800420c <parseLine+0x2a0>)
 800403e:	f00a fd55 	bl	800eaec <siprintf>
					while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8004042:	bf00      	nop
 8004044:	f7ff ff76 	bl	8003f34 <findStrEnd>
 8004048:	4603      	mov	r3, r0
 800404a:	4619      	mov	r1, r3
 800404c:	486f      	ldr	r0, [pc, #444]	; (800420c <parseLine+0x2a0>)
 800404e:	f009 f9e5 	bl	800d41c <CDC_Transmit_FS>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1f5      	bne.n	8004044 <parseLine+0xd8>
				}
				break;
 8004058:	e00f      	b.n	800407a <parseLine+0x10e>
			default:
				sprintf(str,"error...\r\n");
 800405a:	496d      	ldr	r1, [pc, #436]	; (8004210 <parseLine+0x2a4>)
 800405c:	486b      	ldr	r0, [pc, #428]	; (800420c <parseLine+0x2a0>)
 800405e:	f00a fd45 	bl	800eaec <siprintf>
				while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8004062:	bf00      	nop
 8004064:	f7ff ff66 	bl	8003f34 <findStrEnd>
 8004068:	4603      	mov	r3, r0
 800406a:	4619      	mov	r1, r3
 800406c:	4867      	ldr	r0, [pc, #412]	; (800420c <parseLine+0x2a0>)
 800406e:	f009 f9d5 	bl	800d41c <CDC_Transmit_FS>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1f5      	bne.n	8004064 <parseLine+0xf8>
				break;
 8004078:	e000      	b.n	800407c <parseLine+0x110>
				break;
 800407a:	bf00      	nop
			}
			return;
 800407c:	e139      	b.n	80042f2 <parseLine+0x386>
		}
	}

	int16_t dataSample;
	switch (applicationState.dataType)
 800407e:	4b61      	ldr	r3, [pc, #388]	; (8004204 <parseLine+0x298>)
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	2b31      	cmp	r3, #49	; 0x31
 8004084:	d00d      	beq.n	80040a2 <parseLine+0x136>
 8004086:	2b32      	cmp	r3, #50	; 0x32
 8004088:	d112      	bne.n	80040b0 <parseLine+0x144>
	{//decode data
	case int16asBytes:
		dataSample = (Buf[0]<<8)|Buf[1];
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	021b      	lsls	r3, r3, #8
 8004090:	b21a      	sxth	r2, r3
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	3301      	adds	r3, #1
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	b21b      	sxth	r3, r3
 800409a:	4313      	orrs	r3, r2
 800409c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

		break;
 80040a0:	e016      	b.n	80040d0 <parseLine+0x164>
	case intasString:
		dataSample = atoi (Buf);
 80040a2:	69f8      	ldr	r0, [r7, #28]
 80040a4:	f009 fe5e 	bl	800dd64 <atoi>
 80040a8:	4603      	mov	r3, r0
 80040aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

		break;
 80040ae:	e00f      	b.n	80040d0 <parseLine+0x164>
	default:
		sprintf(str,"error...\r\n");
 80040b0:	4957      	ldr	r1, [pc, #348]	; (8004210 <parseLine+0x2a4>)
 80040b2:	4856      	ldr	r0, [pc, #344]	; (800420c <parseLine+0x2a0>)
 80040b4:	f00a fd1a 	bl	800eaec <siprintf>
		while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 80040b8:	bf00      	nop
 80040ba:	f7ff ff3b 	bl	8003f34 <findStrEnd>
 80040be:	4603      	mov	r3, r0
 80040c0:	4619      	mov	r1, r3
 80040c2:	4852      	ldr	r0, [pc, #328]	; (800420c <parseLine+0x2a0>)
 80040c4:	f009 f9aa 	bl	800d41c <CDC_Transmit_FS>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1f5      	bne.n	80040ba <parseLine+0x14e>
		return;
 80040ce:	e110      	b.n	80042f2 <parseLine+0x386>
	float32_t s3_f32;
	float32_t s4_f32;
	float32_t s5_f32;
	float32_t ThI1_f32;
	float32_t ThF1_f32;
	switch (applicationState.selectedImplementation)
 80040d0:	4b4c      	ldr	r3, [pc, #304]	; (8004204 <parseLine+0x298>)
 80040d2:	785b      	ldrb	r3, [r3, #1]
 80040d4:	2b33      	cmp	r3, #51	; 0x33
 80040d6:	f000 80a1 	beq.w	800421c <parseLine+0x2b0>
 80040da:	2b33      	cmp	r3, #51	; 0x33
 80040dc:	f300 8108 	bgt.w	80042f0 <parseLine+0x384>
 80040e0:	2b31      	cmp	r3, #49	; 0x31
 80040e2:	d002      	beq.n	80040ea <parseLine+0x17e>
 80040e4:	2b32      	cmp	r3, #50	; 0x32
 80040e6:	d046      	beq.n	8004176 <parseLine+0x20a>
		ThF1_f32 = arm_get_ThF1_output();
		sprintf(str,"%d,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\r\n", delay, s1_f32, s2_f32, s3_f32, s4_f32, s5_f32, ThI1_f32, ThF1_f32);
		sendUSBData (str, findStrEnd());
		break;
	default:
		return;
 80040e8:	e102      	b.n	80042f0 <parseLine+0x384>
		delay = PT_StateMachine (dataSample);
 80040ea:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fc ff10 	bl	8000f14 <PT_StateMachine>
 80040f4:	4603      	mov	r3, r0
 80040f6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		s1 = PT_get_LPFilter_output();
 80040fa:	f7fd fde9 	bl	8001cd0 <PT_get_LPFilter_output>
 80040fe:	4603      	mov	r3, r0
 8004100:	85fb      	strh	r3, [r7, #46]	; 0x2e
		s2 = PT_get_HPFilter_output();
 8004102:	f7fd fdf1 	bl	8001ce8 <PT_get_HPFilter_output>
 8004106:	4603      	mov	r3, r0
 8004108:	85bb      	strh	r3, [r7, #44]	; 0x2c
		s3 = PT_get_DRFilter_output();
 800410a:	f7fd fdf9 	bl	8001d00 <PT_get_DRFilter_output>
 800410e:	4603      	mov	r3, r0
 8004110:	857b      	strh	r3, [r7, #42]	; 0x2a
		s4 = PT_get_SQRFilter_output();
 8004112:	f7fd fe0d 	bl	8001d30 <PT_get_SQRFilter_output>
 8004116:	4603      	mov	r3, r0
 8004118:	853b      	strh	r3, [r7, #40]	; 0x28
		s5 = PT_get_MVFilter_output();
 800411a:	f7fd fdfd 	bl	8001d18 <PT_get_MVFilter_output>
 800411e:	4603      	mov	r3, r0
 8004120:	84fb      	strh	r3, [r7, #38]	; 0x26
		ThI1 = PT_get_ThI1_output();
 8004122:	f7fd fe11 	bl	8001d48 <PT_get_ThI1_output>
 8004126:	4603      	mov	r3, r0
 8004128:	84bb      	strh	r3, [r7, #36]	; 0x24
		ThF1 = PT_get_ThF1_output();
 800412a:	f7fd fe19 	bl	8001d60 <PT_get_ThF1_output>
 800412e:	4603      	mov	r3, r0
 8004130:	847b      	strh	r3, [r7, #34]	; 0x22
		sprintf(str,"%d,%d,%d,%d,%u,%u,%u,%d\r\n", delay, s1, s2, s3, s4, s5, ThI1, ThF1);
 8004132:	f9b7 604c 	ldrsh.w	r6, [r7, #76]	; 0x4c
 8004136:	f9b7 c02e 	ldrsh.w	ip, [r7, #46]	; 0x2e
 800413a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800413e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8004142:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8004144:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8004146:	f9b7 4024 	ldrsh.w	r4, [r7, #36]	; 0x24
 800414a:	f9b7 5022 	ldrsh.w	r5, [r7, #34]	; 0x22
 800414e:	9505      	str	r5, [sp, #20]
 8004150:	9404      	str	r4, [sp, #16]
 8004152:	9003      	str	r0, [sp, #12]
 8004154:	9102      	str	r1, [sp, #8]
 8004156:	9201      	str	r2, [sp, #4]
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	4663      	mov	r3, ip
 800415c:	4632      	mov	r2, r6
 800415e:	492d      	ldr	r1, [pc, #180]	; (8004214 <parseLine+0x2a8>)
 8004160:	482a      	ldr	r0, [pc, #168]	; (800420c <parseLine+0x2a0>)
 8004162:	f00a fcc3 	bl	800eaec <siprintf>
		sendUSBData (str, findStrEnd());
 8004166:	f7ff fee5 	bl	8003f34 <findStrEnd>
 800416a:	4603      	mov	r3, r0
 800416c:	4619      	mov	r1, r3
 800416e:	4827      	ldr	r0, [pc, #156]	; (800420c <parseLine+0x2a0>)
 8004170:	f7ff feae 	bl	8003ed0 <sendUSBData>
		break;
 8004174:	e0bd      	b.n	80042f2 <parseLine+0x386>
		delay = Rafael_PanTompkins(dataSample);
 8004176:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800417a:	4618      	mov	r0, r3
 800417c:	f7fe fa9c 	bl	80026b8 <Rafael_PanTompkins>
 8004180:	4603      	mov	r3, r0
 8004182:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		s1 = Rafael_get_LPFilter_output();
 8004186:	f7ff fe2d 	bl	8003de4 <Rafael_get_LPFilter_output>
 800418a:	4603      	mov	r3, r0
 800418c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		s2 = Rafael_get_HPFilter_output();
 800418e:	f7ff fe35 	bl	8003dfc <Rafael_get_HPFilter_output>
 8004192:	4603      	mov	r3, r0
 8004194:	85bb      	strh	r3, [r7, #44]	; 0x2c
		s3 = Rafael_get_DRFilter_output();
 8004196:	f7ff fe3d 	bl	8003e14 <Rafael_get_DRFilter_output>
 800419a:	4603      	mov	r3, r0
 800419c:	857b      	strh	r3, [r7, #42]	; 0x2a
		s4 = Rafael_get_SQRFilter_output();
 800419e:	f7ff fe45 	bl	8003e2c <Rafael_get_SQRFilter_output>
 80041a2:	4603      	mov	r3, r0
 80041a4:	853b      	strh	r3, [r7, #40]	; 0x28
		s5 = Rafael_get_MVFilter_output();
 80041a6:	f7ff fe51 	bl	8003e4c <Rafael_get_MVFilter_output>
 80041aa:	4603      	mov	r3, r0
 80041ac:	84fb      	strh	r3, [r7, #38]	; 0x26
		ThI1 = Rafael_get_ThI1_output();
 80041ae:	f7ff fe5d 	bl	8003e6c <Rafael_get_ThI1_output>
 80041b2:	4603      	mov	r3, r0
 80041b4:	84bb      	strh	r3, [r7, #36]	; 0x24
		ThF1 = Rafael_get_ThF1_output();
 80041b6:	f7ff fe65 	bl	8003e84 <Rafael_get_ThF1_output>
 80041ba:	4603      	mov	r3, r0
 80041bc:	847b      	strh	r3, [r7, #34]	; 0x22
		sprintf(str,"%d,%d,%d,%d,%d,%d,%d,%d\r\n", delay, s1, s2, s3, s4, s5, ThI1, ThF1);
 80041be:	f9b7 604c 	ldrsh.w	r6, [r7, #76]	; 0x4c
 80041c2:	f9b7 c02e 	ldrsh.w	ip, [r7, #46]	; 0x2e
 80041c6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80041ca:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80041ce:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80041d0:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80041d2:	f9b7 4024 	ldrsh.w	r4, [r7, #36]	; 0x24
 80041d6:	f9b7 5022 	ldrsh.w	r5, [r7, #34]	; 0x22
 80041da:	9505      	str	r5, [sp, #20]
 80041dc:	9404      	str	r4, [sp, #16]
 80041de:	9003      	str	r0, [sp, #12]
 80041e0:	9102      	str	r1, [sp, #8]
 80041e2:	9201      	str	r2, [sp, #4]
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	4663      	mov	r3, ip
 80041e8:	4632      	mov	r2, r6
 80041ea:	490b      	ldr	r1, [pc, #44]	; (8004218 <parseLine+0x2ac>)
 80041ec:	4807      	ldr	r0, [pc, #28]	; (800420c <parseLine+0x2a0>)
 80041ee:	f00a fc7d 	bl	800eaec <siprintf>
		sendUSBData (str, findStrEnd());
 80041f2:	f7ff fe9f 	bl	8003f34 <findStrEnd>
 80041f6:	4603      	mov	r3, r0
 80041f8:	4619      	mov	r1, r3
 80041fa:	4804      	ldr	r0, [pc, #16]	; (800420c <parseLine+0x2a0>)
 80041fc:	f7ff fe68 	bl	8003ed0 <sendUSBData>
		break;
 8004200:	e077      	b.n	80042f2 <parseLine+0x386>
 8004202:	bf00      	nop
 8004204:	20002c2c 	.word	0x20002c2c
 8004208:	080126e0 	.word	0x080126e0
 800420c:	20002c30 	.word	0x20002c30
 8004210:	080126f0 	.word	0x080126f0
 8004214:	080126fc 	.word	0x080126fc
 8004218:	08012718 	.word	0x08012718
		delay = arm_PT_ST(dataSample);
 800421c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8004220:	4618      	mov	r0, r3
 8004222:	f7fd fe53 	bl	8001ecc <arm_PT_ST>
 8004226:	4603      	mov	r3, r0
 8004228:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		s1_f32 = arm_get_LPFilter_output();
 800422c:	f7fe f962 	bl	80024f4 <arm_get_LPFilter_output>
 8004230:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
		s2_f32 = arm_get_HPFilter_output();
 8004234:	f7fe f96c 	bl	8002510 <arm_get_HPFilter_output>
 8004238:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
		s3_f32 = arm_get_DRFilter_output();
 800423c:	f7fe f976 	bl	800252c <arm_get_DRFilter_output>
 8004240:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
		s4_f32 = arm_get_SQRFilter_output();
 8004244:	f7fe f980 	bl	8002548 <arm_get_SQRFilter_output>
 8004248:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
		s5_f32 = arm_get_MVFilter_output();
 800424c:	f7fe f98a 	bl	8002564 <arm_get_MVFilter_output>
 8004250:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
		ThI1_f32 = arm_get_ThI1_output();
 8004254:	f7fe f994 	bl	8002580 <arm_get_ThI1_output>
 8004258:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
		ThF1_f32 = arm_get_ThF1_output();
 800425c:	f7fe f99e 	bl	800259c <arm_get_ThF1_output>
 8004260:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
		sprintf(str,"%d,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\r\n", delay, s1_f32, s2_f32, s3_f32, s4_f32, s5_f32, ThI1_f32, ThF1_f32);
 8004264:	f9b7 604c 	ldrsh.w	r6, [r7, #76]	; 0x4c
 8004268:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800426a:	f7fc f945 	bl	80004f8 <__aeabi_f2d>
 800426e:	4680      	mov	r8, r0
 8004270:	4689      	mov	r9, r1
 8004272:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004274:	f7fc f940 	bl	80004f8 <__aeabi_f2d>
 8004278:	4682      	mov	sl, r0
 800427a:	468b      	mov	fp, r1
 800427c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800427e:	f7fc f93b 	bl	80004f8 <__aeabi_f2d>
 8004282:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8004286:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004288:	f7fc f936 	bl	80004f8 <__aeabi_f2d>
 800428c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004290:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004292:	f7fc f931 	bl	80004f8 <__aeabi_f2d>
 8004296:	e9c7 0100 	strd	r0, r1, [r7]
 800429a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800429c:	f7fc f92c 	bl	80004f8 <__aeabi_f2d>
 80042a0:	4604      	mov	r4, r0
 80042a2:	460d      	mov	r5, r1
 80042a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042a6:	f7fc f927 	bl	80004f8 <__aeabi_f2d>
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80042b2:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 80042b6:	ed97 7b00 	vldr	d7, [r7]
 80042ba:	ed8d 7b08 	vstr	d7, [sp, #32]
 80042be:	ed97 7b02 	vldr	d7, [r7, #8]
 80042c2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80042c6:	ed97 7b04 	vldr	d7, [r7, #16]
 80042ca:	ed8d 7b04 	vstr	d7, [sp, #16]
 80042ce:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80042d2:	e9cd 8900 	strd	r8, r9, [sp]
 80042d6:	4632      	mov	r2, r6
 80042d8:	4908      	ldr	r1, [pc, #32]	; (80042fc <parseLine+0x390>)
 80042da:	4809      	ldr	r0, [pc, #36]	; (8004300 <parseLine+0x394>)
 80042dc:	f00a fc06 	bl	800eaec <siprintf>
		sendUSBData (str, findStrEnd());
 80042e0:	f7ff fe28 	bl	8003f34 <findStrEnd>
 80042e4:	4603      	mov	r3, r0
 80042e6:	4619      	mov	r1, r3
 80042e8:	4805      	ldr	r0, [pc, #20]	; (8004300 <parseLine+0x394>)
 80042ea:	f7ff fdf1 	bl	8003ed0 <sendUSBData>
		break;
 80042ee:	e000      	b.n	80042f2 <parseLine+0x386>
		return;
 80042f0:	bf00      	nop
		break;
	}
}
 80042f2:	3754      	adds	r7, #84	; 0x54
 80042f4:	46bd      	mov	sp, r7
 80042f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042fa:	bf00      	nop
 80042fc:	08012734 	.word	0x08012734
 8004300:	20002c30 	.word	0x20002c30

08004304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800430a:	f000 fb0d 	bl	8004928 <HAL_Init>

  /* USER CODE BEGIN Init */
  applicationState.dataType = int16asBytes;
 800430e:	4b2a      	ldr	r3, [pc, #168]	; (80043b8 <main+0xb4>)
 8004310:	2232      	movs	r2, #50	; 0x32
 8004312:	701a      	strb	r2, [r3, #0]
  applicationState.selectedImplementation = marower;
 8004314:	4b28      	ldr	r3, [pc, #160]	; (80043b8 <main+0xb4>)
 8004316:	2233      	movs	r2, #51	; 0x33
 8004318:	705a      	strb	r2, [r3, #1]
  arm_PT_init();
 800431a:	f7fd fd75 	bl	8001e08 <arm_PT_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800431e:	f000 f857 	bl	80043d0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8004322:	f000 f8c1 	bl	80044a8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004326:	f000 f903 	bl	8004530 <MX_GPIO_Init>
  MX_USB_Device_Init();
 800432a:	f008 ff91 	bl	800d250 <MX_USB_Device_Init>
  MX_TIM16_Init();
 800432e:	f000 f8d9 	bl	80044e4 <MX_TIM16_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  extern uint32_t byteInBuffer;
  extern uint8_t* bufferPointer;
  extern uint8_t bufferFlag;
  HAL_TIM_Base_Start_IT(&htim16);
 8004332:	4822      	ldr	r0, [pc, #136]	; (80043bc <main+0xb8>)
 8004334:	f004 f948 	bl	80085c8 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if ((byteInBuffer>0) && (bufferFlag == 1))
 8004338:	4b21      	ldr	r3, [pc, #132]	; (80043c0 <main+0xbc>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0fb      	beq.n	8004338 <main+0x34>
 8004340:	4b20      	ldr	r3, [pc, #128]	; (80043c4 <main+0xc0>)
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d1f7      	bne.n	8004338 <main+0x34>
	 	  {
		  	  memcpy(&USBReciveBuffer[0],bufferPointer, byteInBuffer);
 8004348:	4b1f      	ldr	r3, [pc, #124]	; (80043c8 <main+0xc4>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a1c      	ldr	r2, [pc, #112]	; (80043c0 <main+0xbc>)
 800434e:	6812      	ldr	r2, [r2, #0]
 8004350:	4619      	mov	r1, r3
 8004352:	481e      	ldr	r0, [pc, #120]	; (80043cc <main+0xc8>)
 8004354:	f009 fd34 	bl	800ddc0 <memcpy>
		  	  uint32_t dataCount = byteInBuffer;
 8004358:	4b19      	ldr	r3, [pc, #100]	; (80043c0 <main+0xbc>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	603b      	str	r3, [r7, #0]
		  	  byteInBuffer = 0;
 800435e:	4b18      	ldr	r3, [pc, #96]	; (80043c0 <main+0xbc>)
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]
	 		  uint32_t count = 0;
 8004364:	2300      	movs	r3, #0
 8004366:	60fb      	str	r3, [r7, #12]
	 		  uint32_t i = 0;
 8004368:	2300      	movs	r3, #0
 800436a:	60bb      	str	r3, [r7, #8]
	 		  uint32_t index = 0;
 800436c:	2300      	movs	r3, #0
 800436e:	607b      	str	r3, [r7, #4]
	 		  do
	 		  {
	 			  i++;
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	3301      	adds	r3, #1
 8004374:	60bb      	str	r3, [r7, #8]
	 			  count++;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	3301      	adds	r3, #1
 800437a:	60fb      	str	r3, [r7, #12]
	 			  if (USBReciveBuffer[i]=='\n')
 800437c:	4a13      	ldr	r2, [pc, #76]	; (80043cc <main+0xc8>)
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	4413      	add	r3, r2
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b0a      	cmp	r3, #10
 8004386:	d112      	bne.n	80043ae <main+0xaa>
	 			  {
	 				 count++;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	3301      	adds	r3, #1
 800438c:	60fb      	str	r3, [r7, #12]
	 				 parseLine (&USBReciveBuffer[index], count);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a0e      	ldr	r2, [pc, #56]	; (80043cc <main+0xc8>)
 8004392:	4413      	add	r3, r2
 8004394:	68f9      	ldr	r1, [r7, #12]
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff fde8 	bl	8003f6c <parseLine>
	 				 index += count;
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4413      	add	r3, r2
 80043a2:	607b      	str	r3, [r7, #4]
	 				 i++;
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	3301      	adds	r3, #1
 80043a8:	60bb      	str	r3, [r7, #8]
	 				 count = 0;
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]
	 			  }
	 		  }while (i<dataCount);
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d3dc      	bcc.n	8004370 <main+0x6c>
	  if ((byteInBuffer>0) && (bufferFlag == 1))
 80043b6:	e7bf      	b.n	8004338 <main+0x34>
 80043b8:	20002c2c 	.word	0x20002c2c
 80043bc:	20002be0 	.word	0x20002be0
 80043c0:	20005018 	.word	0x20005018
 80043c4:	200000a8 	.word	0x200000a8
 80043c8:	200000a4 	.word	0x200000a4
 80043cc:	2000352c 	.word	0x2000352c

080043d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b09a      	sub	sp, #104	; 0x68
 80043d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80043d6:	f107 0320 	add.w	r3, r7, #32
 80043da:	2248      	movs	r2, #72	; 0x48
 80043dc:	2100      	movs	r1, #0
 80043de:	4618      	mov	r0, r3
 80043e0:	f009 fcfc 	bl	800dddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80043e4:	1d3b      	adds	r3, r7, #4
 80043e6:	2200      	movs	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	605a      	str	r2, [r3, #4]
 80043ec:	609a      	str	r2, [r3, #8]
 80043ee:	60da      	str	r2, [r3, #12]
 80043f0:	611a      	str	r2, [r3, #16]
 80043f2:	615a      	str	r2, [r3, #20]
 80043f4:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80043f6:	4b2b      	ldr	r3, [pc, #172]	; (80044a4 <SystemClock_Config+0xd4>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043fe:	4a29      	ldr	r2, [pc, #164]	; (80044a4 <SystemClock_Config+0xd4>)
 8004400:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	4b27      	ldr	r3, [pc, #156]	; (80044a4 <SystemClock_Config+0xd4>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800440e:	603b      	str	r3, [r7, #0]
 8004410:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8004412:	2326      	movs	r3, #38	; 0x26
 8004414:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8004416:	2300      	movs	r3, #0
 8004418:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800441a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800441e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004420:	2301      	movs	r3, #1
 8004422:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004424:	2340      	movs	r3, #64	; 0x40
 8004426:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8004428:	2300      	movs	r3, #0
 800442a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800442c:	2360      	movs	r3, #96	; 0x60
 800442e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004430:	2302      	movs	r3, #2
 8004432:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004434:	2301      	movs	r3, #1
 8004436:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004438:	2300      	movs	r3, #0
 800443a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 800443c:	2320      	movs	r3, #32
 800443e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004440:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004444:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004446:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800444a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800444c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004450:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004452:	f107 0320 	add.w	r3, r7, #32
 8004456:	4618      	mov	r0, r3
 8004458:	f002 fe3c 	bl	80070d4 <HAL_RCC_OscConfig>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8004462:	f000 f891 	bl	8004588 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8004466:	236f      	movs	r3, #111	; 0x6f
 8004468:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800446a:	2303      	movs	r3, #3
 800446c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800446e:	2300      	movs	r3, #0
 8004470:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004472:	2300      	movs	r3, #0
 8004474:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004476:	2300      	movs	r3, #0
 8004478:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800447a:	2380      	movs	r3, #128	; 0x80
 800447c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800447e:	2300      	movs	r3, #0
 8004480:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004482:	1d3b      	adds	r3, r7, #4
 8004484:	2103      	movs	r1, #3
 8004486:	4618      	mov	r0, r3
 8004488:	f003 f998 	bl	80077bc <HAL_RCC_ClockConfig>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8004492:	f000 f879 	bl	8004588 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8004496:	f003 ff29 	bl	80082ec <HAL_RCCEx_EnableMSIPLLMode>
}
 800449a:	bf00      	nop
 800449c:	3768      	adds	r7, #104	; 0x68
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	58000400 	.word	0x58000400

080044a8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b094      	sub	sp, #80	; 0x50
 80044ac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80044ae:	463b      	mov	r3, r7
 80044b0:	2250      	movs	r2, #80	; 0x50
 80044b2:	2100      	movs	r1, #0
 80044b4:	4618      	mov	r0, r3
 80044b6:	f009 fc91 	bl	800dddc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80044ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044be:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80044c0:	2300      	movs	r3, #0
 80044c2:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80044c4:	2310      	movs	r3, #16
 80044c6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80044c8:	463b      	mov	r3, r7
 80044ca:	4618      	mov	r0, r3
 80044cc:	f003 fd98 	bl	8008000 <HAL_RCCEx_PeriphCLKConfig>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80044d6:	f000 f857 	bl	8004588 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80044da:	bf00      	nop
 80044dc:	3750      	adds	r7, #80	; 0x50
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
	...

080044e4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80044e8:	4b0f      	ldr	r3, [pc, #60]	; (8004528 <MX_TIM16_Init+0x44>)
 80044ea:	4a10      	ldr	r2, [pc, #64]	; (800452c <MX_TIM16_Init+0x48>)
 80044ec:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 639;
 80044ee:	4b0e      	ldr	r3, [pc, #56]	; (8004528 <MX_TIM16_Init+0x44>)
 80044f0:	f240 227f 	movw	r2, #639	; 0x27f
 80044f4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044f6:	4b0c      	ldr	r3, [pc, #48]	; (8004528 <MX_TIM16_Init+0x44>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 80044fc:	4b0a      	ldr	r3, [pc, #40]	; (8004528 <MX_TIM16_Init+0x44>)
 80044fe:	2264      	movs	r2, #100	; 0x64
 8004500:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004502:	4b09      	ldr	r3, [pc, #36]	; (8004528 <MX_TIM16_Init+0x44>)
 8004504:	2200      	movs	r2, #0
 8004506:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004508:	4b07      	ldr	r3, [pc, #28]	; (8004528 <MX_TIM16_Init+0x44>)
 800450a:	2200      	movs	r2, #0
 800450c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800450e:	4b06      	ldr	r3, [pc, #24]	; (8004528 <MX_TIM16_Init+0x44>)
 8004510:	2200      	movs	r2, #0
 8004512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004514:	4804      	ldr	r0, [pc, #16]	; (8004528 <MX_TIM16_Init+0x44>)
 8004516:	f004 f800 	bl	800851a <HAL_TIM_Base_Init>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8004520:	f000 f832 	bl	8004588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004524:	bf00      	nop
 8004526:	bd80      	pop	{r7, pc}
 8004528:	20002be0 	.word	0x20002be0
 800452c:	40014400 	.word	0x40014400

08004530 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004534:	2001      	movs	r0, #1
 8004536:	f7ff fcb1 	bl	8003e9c <LL_AHB2_GRP1_EnableClock>

}
 800453a:	bf00      	nop
 800453c:	bd80      	pop	{r7, pc}
	...

08004540 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim16)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a0c      	ldr	r2, [pc, #48]	; (800457c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d110      	bne.n	8004572 <HAL_TIM_PeriodElapsedCallback+0x32>
  {
	  if (USBBuffer_index> 0)
 8004550:	4b0b      	ldr	r3, [pc, #44]	; (8004580 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8004552:	881b      	ldrh	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00c      	beq.n	8004572 <HAL_TIM_PeriodElapsedCallback+0x32>
	  {
		  while (CDC_Transmit_FS(USBBuffer, USBBuffer_index)!= USBD_OK){};
 8004558:	bf00      	nop
 800455a:	4b09      	ldr	r3, [pc, #36]	; (8004580 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800455c:	881b      	ldrh	r3, [r3, #0]
 800455e:	4619      	mov	r1, r3
 8004560:	4808      	ldr	r0, [pc, #32]	; (8004584 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8004562:	f008 ff5b 	bl	800d41c <CDC_Transmit_FS>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1f6      	bne.n	800455a <HAL_TIM_PeriodElapsedCallback+0x1a>
		  USBBuffer_index = 0;
 800456c:	4b04      	ldr	r3, [pc, #16]	; (8004580 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800456e:	2200      	movs	r2, #0
 8004570:	801a      	strh	r2, [r3, #0]
	  }
  }
}
 8004572:	bf00      	nop
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	20002be0 	.word	0x20002be0
 8004580:	20003d2c 	.word	0x20003d2c
 8004584:	20002d2c 	.word	0x20002d2c

08004588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800458c:	b672      	cpsid	i
}
 800458e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004590:	e7fe      	b.n	8004590 <Error_Handler+0x8>

08004592 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004592:	b480      	push	{r7}
 8004594:	b085      	sub	sp, #20
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800459a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800459e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80045a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80045aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4013      	ands	r3, r2
 80045b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80045b6:	68fb      	ldr	r3, [r7, #12]
}
 80045b8:	bf00      	nop
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045c8:	bf00      	nop
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
	...

080045d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a09      	ldr	r2, [pc, #36]	; (8004608 <HAL_TIM_Base_MspInit+0x34>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d10b      	bne.n	80045fe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80045e6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80045ea:	f7ff ffd2 	bl	8004592 <LL_APB2_GRP1_EnableClock>
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80045ee:	2200      	movs	r2, #0
 80045f0:	2100      	movs	r1, #0
 80045f2:	2019      	movs	r0, #25
 80045f4:	f000 faf9 	bl	8004bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80045f8:	2019      	movs	r0, #25
 80045fa:	f000 fb10 	bl	8004c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80045fe:	bf00      	nop
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	40014400 	.word	0x40014400

0800460c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004610:	e7fe      	b.n	8004610 <NMI_Handler+0x4>

08004612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004612:	b480      	push	{r7}
 8004614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004616:	e7fe      	b.n	8004616 <HardFault_Handler+0x4>

08004618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800461c:	e7fe      	b.n	800461c <MemManage_Handler+0x4>

0800461e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800461e:	b480      	push	{r7}
 8004620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004622:	e7fe      	b.n	8004622 <BusFault_Handler+0x4>

08004624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004628:	e7fe      	b.n	8004628 <UsageFault_Handler+0x4>

0800462a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800462a:	b480      	push	{r7}
 800462c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800462e:	bf00      	nop
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800463c:	bf00      	nop
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004646:	b480      	push	{r7}
 8004648:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800464a:	bf00      	nop
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004658:	f000 f9c0 	bl	80049dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800465c:	bf00      	nop
 800465e:	bd80      	pop	{r7, pc}

08004660 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004664:	4802      	ldr	r0, [pc, #8]	; (8004670 <USB_LP_IRQHandler+0x10>)
 8004666:	f000 fd60 	bl	800512a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800466a:	bf00      	nop
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	2000521c 	.word	0x2000521c

08004674 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004678:	4802      	ldr	r0, [pc, #8]	; (8004684 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800467a:	f003 fff3 	bl	8008664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800467e:	bf00      	nop
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	20002be0 	.word	0x20002be0

08004688 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
	return 1;
 800468c:	2301      	movs	r3, #1
}
 800468e:	4618      	mov	r0, r3
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <_kill>:

int _kill(int pid, int sig)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80046a2:	f009 fb63 	bl	800dd6c <__errno>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2216      	movs	r2, #22
 80046aa:	601a      	str	r2, [r3, #0]
	return -1;
 80046ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <_exit>:

void _exit (int status)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80046c0:	f04f 31ff 	mov.w	r1, #4294967295
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7ff ffe7 	bl	8004698 <_kill>
	while (1) {}		/* Make sure we hang here */
 80046ca:	e7fe      	b.n	80046ca <_exit+0x12>

080046cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046d8:	2300      	movs	r3, #0
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	e00a      	b.n	80046f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80046de:	f3af 8000 	nop.w
 80046e2:	4601      	mov	r1, r0
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	60ba      	str	r2, [r7, #8]
 80046ea:	b2ca      	uxtb	r2, r1
 80046ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	3301      	adds	r3, #1
 80046f2:	617b      	str	r3, [r7, #20]
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	dbf0      	blt.n	80046de <_read+0x12>
	}

return len;
 80046fc:	687b      	ldr	r3, [r7, #4]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b086      	sub	sp, #24
 800470a:	af00      	add	r7, sp, #0
 800470c:	60f8      	str	r0, [r7, #12]
 800470e:	60b9      	str	r1, [r7, #8]
 8004710:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004712:	2300      	movs	r3, #0
 8004714:	617b      	str	r3, [r7, #20]
 8004716:	e009      	b.n	800472c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	1c5a      	adds	r2, r3, #1
 800471c:	60ba      	str	r2, [r7, #8]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	3301      	adds	r3, #1
 800472a:	617b      	str	r3, [r7, #20]
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	429a      	cmp	r2, r3
 8004732:	dbf1      	blt.n	8004718 <_write+0x12>
	}
	return len;
 8004734:	687b      	ldr	r3, [r7, #4]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3718      	adds	r7, #24
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <_close>:

int _close(int file)
{
 800473e:	b480      	push	{r7}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
	return -1;
 8004746:	f04f 33ff 	mov.w	r3, #4294967295
}
 800474a:	4618      	mov	r0, r3
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004756:	b480      	push	{r7}
 8004758:	b083      	sub	sp, #12
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004766:	605a      	str	r2, [r3, #4]
	return 0;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <_isatty>:

int _isatty(int file)
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
	return 1;
 800477e:	2301      	movs	r3, #1
}
 8004780:	4618      	mov	r0, r3
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
	return 0;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
	...

080047a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80047b0:	4a14      	ldr	r2, [pc, #80]	; (8004804 <_sbrk+0x5c>)
 80047b2:	4b15      	ldr	r3, [pc, #84]	; (8004808 <_sbrk+0x60>)
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80047bc:	4b13      	ldr	r3, [pc, #76]	; (800480c <_sbrk+0x64>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d102      	bne.n	80047ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80047c4:	4b11      	ldr	r3, [pc, #68]	; (800480c <_sbrk+0x64>)
 80047c6:	4a12      	ldr	r2, [pc, #72]	; (8004810 <_sbrk+0x68>)
 80047c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80047ca:	4b10      	ldr	r3, [pc, #64]	; (800480c <_sbrk+0x64>)
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4413      	add	r3, r2
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d207      	bcs.n	80047e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80047d8:	f009 fac8 	bl	800dd6c <__errno>
 80047dc:	4603      	mov	r3, r0
 80047de:	220c      	movs	r2, #12
 80047e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80047e2:	f04f 33ff 	mov.w	r3, #4294967295
 80047e6:	e009      	b.n	80047fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80047e8:	4b08      	ldr	r3, [pc, #32]	; (800480c <_sbrk+0x64>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80047ee:	4b07      	ldr	r3, [pc, #28]	; (800480c <_sbrk+0x64>)
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4413      	add	r3, r2
 80047f6:	4a05      	ldr	r2, [pc, #20]	; (800480c <_sbrk+0x64>)
 80047f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80047fa:	68fb      	ldr	r3, [r7, #12]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	20030000 	.word	0x20030000
 8004808:	00000400 	.word	0x00000400
 800480c:	20003d30 	.word	0x20003d30
 8004810:	20005740 	.word	0x20005740

08004814 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8004818:	4b24      	ldr	r3, [pc, #144]	; (80048ac <SystemInit+0x98>)
 800481a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481e:	4a23      	ldr	r2, [pc, #140]	; (80048ac <SystemInit+0x98>)
 8004820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004824:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004832:	f043 0301 	orr.w	r3, r3, #1
 8004836:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8004838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800483c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8004840:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8004842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800484c:	4b18      	ldr	r3, [pc, #96]	; (80048b0 <SystemInit+0x9c>)
 800484e:	4013      	ands	r3, r2
 8004850:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8004852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800485a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800485e:	f023 0305 	bic.w	r3, r3, #5
 8004862:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800486a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800486e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004872:	f023 0301 	bic.w	r3, r3, #1
 8004876:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800487a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800487e:	4a0d      	ldr	r2, [pc, #52]	; (80048b4 <SystemInit+0xa0>)
 8004880:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8004882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004886:	4a0b      	ldr	r2, [pc, #44]	; (80048b4 <SystemInit+0xa0>)
 8004888:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800488a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004894:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004898:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800489a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800489e:	2200      	movs	r2, #0
 80048a0:	619a      	str	r2, [r3, #24]
}
 80048a2:	bf00      	nop
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	e000ed00 	.word	0xe000ed00
 80048b0:	faf6fefb 	.word	0xfaf6fefb
 80048b4:	22041000 	.word	0x22041000

080048b8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80048b8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048ba:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048bc:	3304      	adds	r3, #4

080048be <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048be:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048c0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80048c2:	d3f9      	bcc.n	80048b8 <CopyDataInit>
  bx lr
 80048c4:	4770      	bx	lr

080048c6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80048c6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80048c8:	3004      	adds	r0, #4

080048ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80048ca:	4288      	cmp	r0, r1
  bcc FillZerobss
 80048cc:	d3fb      	bcc.n	80048c6 <FillZerobss>
  bx lr
 80048ce:	4770      	bx	lr

080048d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80048d0:	480c      	ldr	r0, [pc, #48]	; (8004904 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80048d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80048d4:	f7ff ff9e 	bl	8004814 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80048d8:	480b      	ldr	r0, [pc, #44]	; (8004908 <LoopForever+0x8>)
 80048da:	490c      	ldr	r1, [pc, #48]	; (800490c <LoopForever+0xc>)
 80048dc:	4a0c      	ldr	r2, [pc, #48]	; (8004910 <LoopForever+0x10>)
 80048de:	2300      	movs	r3, #0
 80048e0:	f7ff ffed 	bl	80048be <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80048e4:	480b      	ldr	r0, [pc, #44]	; (8004914 <LoopForever+0x14>)
 80048e6:	490c      	ldr	r1, [pc, #48]	; (8004918 <LoopForever+0x18>)
 80048e8:	2300      	movs	r3, #0
 80048ea:	f7ff ffee 	bl	80048ca <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80048ee:	480b      	ldr	r0, [pc, #44]	; (800491c <LoopForever+0x1c>)
 80048f0:	490b      	ldr	r1, [pc, #44]	; (8004920 <LoopForever+0x20>)
 80048f2:	2300      	movs	r3, #0
 80048f4:	f7ff ffe9 	bl	80048ca <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80048f8:	f009 fa3e 	bl	800dd78 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80048fc:	f7ff fd02 	bl	8004304 <main>

08004900 <LoopForever>:

LoopForever:
  b LoopForever
 8004900:	e7fe      	b.n	8004900 <LoopForever>
 8004902:	0000      	.short	0x0000
  ldr   r0, =_estack
 8004904:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8004908:	20000004 	.word	0x20000004
 800490c:	200002e8 	.word	0x200002e8
 8004910:	08012d3c 	.word	0x08012d3c
  INIT_BSS _sbss, _ebss
 8004914:	200002e8 	.word	0x200002e8
 8004918:	20005740 	.word	0x20005740
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800491c:	20030000 	.word	0x20030000
 8004920:	20030000 	.word	0x20030000

08004924 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004924:	e7fe      	b.n	8004924 <ADC1_IRQHandler>
	...

08004928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004932:	4b0c      	ldr	r3, [pc, #48]	; (8004964 <HAL_Init+0x3c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a0b      	ldr	r2, [pc, #44]	; (8004964 <HAL_Init+0x3c>)
 8004938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800493c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800493e:	2003      	movs	r0, #3
 8004940:	f000 f948 	bl	8004bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004944:	200f      	movs	r0, #15
 8004946:	f000 f80f 	bl	8004968 <HAL_InitTick>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d002      	beq.n	8004956 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	71fb      	strb	r3, [r7, #7]
 8004954:	e001      	b.n	800495a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004956:	f7ff fe35 	bl	80045c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800495a:	79fb      	ldrb	r3, [r7, #7]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	58004000 	.word	0x58004000

08004968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004970:	2300      	movs	r3, #0
 8004972:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8004974:	4b17      	ldr	r3, [pc, #92]	; (80049d4 <HAL_InitTick+0x6c>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d024      	beq.n	80049c6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800497c:	f003 f8cc 	bl	8007b18 <HAL_RCC_GetHCLKFreq>
 8004980:	4602      	mov	r2, r0
 8004982:	4b14      	ldr	r3, [pc, #80]	; (80049d4 <HAL_InitTick+0x6c>)
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	4619      	mov	r1, r3
 8004988:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800498c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004990:	fbb2 f3f3 	udiv	r3, r2, r3
 8004994:	4618      	mov	r0, r3
 8004996:	f000 f950 	bl	8004c3a <HAL_SYSTICK_Config>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10f      	bne.n	80049c0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b0f      	cmp	r3, #15
 80049a4:	d809      	bhi.n	80049ba <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049a6:	2200      	movs	r2, #0
 80049a8:	6879      	ldr	r1, [r7, #4]
 80049aa:	f04f 30ff 	mov.w	r0, #4294967295
 80049ae:	f000 f91c 	bl	8004bea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80049b2:	4a09      	ldr	r2, [pc, #36]	; (80049d8 <HAL_InitTick+0x70>)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6013      	str	r3, [r2, #0]
 80049b8:	e007      	b.n	80049ca <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	73fb      	strb	r3, [r7, #15]
 80049be:	e004      	b.n	80049ca <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	73fb      	strb	r3, [r7, #15]
 80049c4:	e001      	b.n	80049ca <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80049ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	20000014 	.word	0x20000014
 80049d8:	20000010 	.word	0x20000010

080049dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80049e0:	4b06      	ldr	r3, [pc, #24]	; (80049fc <HAL_IncTick+0x20>)
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	461a      	mov	r2, r3
 80049e6:	4b06      	ldr	r3, [pc, #24]	; (8004a00 <HAL_IncTick+0x24>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4413      	add	r3, r2
 80049ec:	4a04      	ldr	r2, [pc, #16]	; (8004a00 <HAL_IncTick+0x24>)
 80049ee:	6013      	str	r3, [r2, #0]
}
 80049f0:	bf00      	nop
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	20000014 	.word	0x20000014
 8004a00:	20003d34 	.word	0x20003d34

08004a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
  return uwTick;
 8004a08:	4b03      	ldr	r3, [pc, #12]	; (8004a18 <HAL_GetTick+0x14>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	20003d34 	.word	0x20003d34

08004a1c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004a20:	4b03      	ldr	r3, [pc, #12]	; (8004a30 <HAL_GetTickPrio+0x14>)
 8004a22:	681b      	ldr	r3, [r3, #0]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	20000010 	.word	0x20000010

08004a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f003 0307 	and.w	r3, r3, #7
 8004a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a44:	4b0c      	ldr	r3, [pc, #48]	; (8004a78 <__NVIC_SetPriorityGrouping+0x44>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a50:	4013      	ands	r3, r2
 8004a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a66:	4a04      	ldr	r2, [pc, #16]	; (8004a78 <__NVIC_SetPriorityGrouping+0x44>)
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	60d3      	str	r3, [r2, #12]
}
 8004a6c:	bf00      	nop
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	e000ed00 	.word	0xe000ed00

08004a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a80:	4b04      	ldr	r3, [pc, #16]	; (8004a94 <__NVIC_GetPriorityGrouping+0x18>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	0a1b      	lsrs	r3, r3, #8
 8004a86:	f003 0307 	and.w	r3, r3, #7
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	e000ed00 	.word	0xe000ed00

08004a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	db0b      	blt.n	8004ac2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004aaa:	79fb      	ldrb	r3, [r7, #7]
 8004aac:	f003 021f 	and.w	r2, r3, #31
 8004ab0:	4907      	ldr	r1, [pc, #28]	; (8004ad0 <__NVIC_EnableIRQ+0x38>)
 8004ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab6:	095b      	lsrs	r3, r3, #5
 8004ab8:	2001      	movs	r0, #1
 8004aba:	fa00 f202 	lsl.w	r2, r0, r2
 8004abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	e000e100 	.word	0xe000e100

08004ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	4603      	mov	r3, r0
 8004adc:	6039      	str	r1, [r7, #0]
 8004ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	db0a      	blt.n	8004afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	b2da      	uxtb	r2, r3
 8004aec:	490c      	ldr	r1, [pc, #48]	; (8004b20 <__NVIC_SetPriority+0x4c>)
 8004aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af2:	0112      	lsls	r2, r2, #4
 8004af4:	b2d2      	uxtb	r2, r2
 8004af6:	440b      	add	r3, r1
 8004af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004afc:	e00a      	b.n	8004b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	4908      	ldr	r1, [pc, #32]	; (8004b24 <__NVIC_SetPriority+0x50>)
 8004b04:	79fb      	ldrb	r3, [r7, #7]
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	3b04      	subs	r3, #4
 8004b0c:	0112      	lsls	r2, r2, #4
 8004b0e:	b2d2      	uxtb	r2, r2
 8004b10:	440b      	add	r3, r1
 8004b12:	761a      	strb	r2, [r3, #24]
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	e000e100 	.word	0xe000e100
 8004b24:	e000ed00 	.word	0xe000ed00

08004b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b089      	sub	sp, #36	; 0x24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	f1c3 0307 	rsb	r3, r3, #7
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	bf28      	it	cs
 8004b46:	2304      	movcs	r3, #4
 8004b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	2b06      	cmp	r3, #6
 8004b50:	d902      	bls.n	8004b58 <NVIC_EncodePriority+0x30>
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	3b03      	subs	r3, #3
 8004b56:	e000      	b.n	8004b5a <NVIC_EncodePriority+0x32>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	fa02 f303 	lsl.w	r3, r2, r3
 8004b66:	43da      	mvns	r2, r3
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	401a      	ands	r2, r3
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b70:	f04f 31ff 	mov.w	r1, #4294967295
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7a:	43d9      	mvns	r1, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b80:	4313      	orrs	r3, r2
         );
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3724      	adds	r7, #36	; 0x24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
	...

08004b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ba0:	d301      	bcc.n	8004ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e00f      	b.n	8004bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ba6:	4a0a      	ldr	r2, [pc, #40]	; (8004bd0 <SysTick_Config+0x40>)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	3b01      	subs	r3, #1
 8004bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bae:	210f      	movs	r1, #15
 8004bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb4:	f7ff ff8e 	bl	8004ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bb8:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <SysTick_Config+0x40>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bbe:	4b04      	ldr	r3, [pc, #16]	; (8004bd0 <SysTick_Config+0x40>)
 8004bc0:	2207      	movs	r2, #7
 8004bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	e000e010 	.word	0xe000e010

08004bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7ff ff29 	bl	8004a34 <__NVIC_SetPriorityGrouping>
}
 8004be2:	bf00      	nop
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b086      	sub	sp, #24
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	60b9      	str	r1, [r7, #8]
 8004bf4:	607a      	str	r2, [r7, #4]
 8004bf6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004bf8:	f7ff ff40 	bl	8004a7c <__NVIC_GetPriorityGrouping>
 8004bfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	68b9      	ldr	r1, [r7, #8]
 8004c02:	6978      	ldr	r0, [r7, #20]
 8004c04:	f7ff ff90 	bl	8004b28 <NVIC_EncodePriority>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c0e:	4611      	mov	r1, r2
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7ff ff5f 	bl	8004ad4 <__NVIC_SetPriority>
}
 8004c16:	bf00      	nop
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b082      	sub	sp, #8
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	4603      	mov	r3, r0
 8004c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7ff ff33 	bl	8004a98 <__NVIC_EnableIRQ>
}
 8004c32:	bf00      	nop
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b082      	sub	sp, #8
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7ff ffa4 	bl	8004b90 <SysTick_Config>
 8004c48:	4603      	mov	r3, r0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b087      	sub	sp, #28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c62:	e14c      	b.n	8004efe <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	2101      	movs	r1, #1
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c70:	4013      	ands	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f000 813e 	beq.w	8004ef8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f003 0303 	and.w	r3, r3, #3
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d005      	beq.n	8004c94 <HAL_GPIO_Init+0x40>
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f003 0303 	and.w	r3, r3, #3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d130      	bne.n	8004cf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	2203      	movs	r2, #3
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	43db      	mvns	r3, r3
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cca:	2201      	movs	r2, #1
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd2:	43db      	mvns	r3, r3
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	091b      	lsrs	r3, r3, #4
 8004ce0:	f003 0201 	and.w	r2, r3, #1
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f003 0303 	and.w	r3, r3, #3
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	d017      	beq.n	8004d32 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	2203      	movs	r2, #3
 8004d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d12:	43db      	mvns	r3, r3
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	4013      	ands	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	689a      	ldr	r2, [r3, #8]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	fa02 f303 	lsl.w	r3, r2, r3
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f003 0303 	and.w	r3, r3, #3
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d123      	bne.n	8004d86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	08da      	lsrs	r2, r3, #3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	3208      	adds	r2, #8
 8004d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f003 0307 	and.w	r3, r3, #7
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	220f      	movs	r2, #15
 8004d56:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5a:	43db      	mvns	r3, r3
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	691a      	ldr	r2, [r3, #16]
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	08da      	lsrs	r2, r3, #3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3208      	adds	r2, #8
 8004d80:	6939      	ldr	r1, [r7, #16]
 8004d82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	2203      	movs	r2, #3
 8004d92:	fa02 f303 	lsl.w	r3, r2, r3
 8004d96:	43db      	mvns	r3, r3
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f003 0203 	and.w	r2, r3, #3
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f000 8098 	beq.w	8004ef8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004dc8:	4a54      	ldr	r2, [pc, #336]	; (8004f1c <HAL_GPIO_Init+0x2c8>)
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	089b      	lsrs	r3, r3, #2
 8004dce:	3302      	adds	r3, #2
 8004dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f003 0303 	and.w	r3, r3, #3
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	220f      	movs	r2, #15
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	43db      	mvns	r3, r3
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	4013      	ands	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004df2:	d019      	beq.n	8004e28 <HAL_GPIO_Init+0x1d4>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a4a      	ldr	r2, [pc, #296]	; (8004f20 <HAL_GPIO_Init+0x2cc>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d013      	beq.n	8004e24 <HAL_GPIO_Init+0x1d0>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a49      	ldr	r2, [pc, #292]	; (8004f24 <HAL_GPIO_Init+0x2d0>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d00d      	beq.n	8004e20 <HAL_GPIO_Init+0x1cc>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a48      	ldr	r2, [pc, #288]	; (8004f28 <HAL_GPIO_Init+0x2d4>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d007      	beq.n	8004e1c <HAL_GPIO_Init+0x1c8>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a47      	ldr	r2, [pc, #284]	; (8004f2c <HAL_GPIO_Init+0x2d8>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d101      	bne.n	8004e18 <HAL_GPIO_Init+0x1c4>
 8004e14:	2304      	movs	r3, #4
 8004e16:	e008      	b.n	8004e2a <HAL_GPIO_Init+0x1d6>
 8004e18:	2307      	movs	r3, #7
 8004e1a:	e006      	b.n	8004e2a <HAL_GPIO_Init+0x1d6>
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e004      	b.n	8004e2a <HAL_GPIO_Init+0x1d6>
 8004e20:	2302      	movs	r3, #2
 8004e22:	e002      	b.n	8004e2a <HAL_GPIO_Init+0x1d6>
 8004e24:	2301      	movs	r3, #1
 8004e26:	e000      	b.n	8004e2a <HAL_GPIO_Init+0x1d6>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	f002 0203 	and.w	r2, r2, #3
 8004e30:	0092      	lsls	r2, r2, #2
 8004e32:	4093      	lsls	r3, r2
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004e3a:	4938      	ldr	r1, [pc, #224]	; (8004f1c <HAL_GPIO_Init+0x2c8>)
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	089b      	lsrs	r3, r3, #2
 8004e40:	3302      	adds	r3, #2
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e48:	4b39      	ldr	r3, [pc, #228]	; (8004f30 <HAL_GPIO_Init+0x2dc>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	43db      	mvns	r3, r3
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	4013      	ands	r3, r2
 8004e56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d003      	beq.n	8004e6c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e6c:	4a30      	ldr	r2, [pc, #192]	; (8004f30 <HAL_GPIO_Init+0x2dc>)
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004e72:	4b2f      	ldr	r3, [pc, #188]	; (8004f30 <HAL_GPIO_Init+0x2dc>)
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	43db      	mvns	r3, r3
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e96:	4a26      	ldr	r2, [pc, #152]	; (8004f30 <HAL_GPIO_Init+0x2dc>)
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004e9c:	4b24      	ldr	r3, [pc, #144]	; (8004f30 <HAL_GPIO_Init+0x2dc>)
 8004e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	43db      	mvns	r3, r3
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004ec2:	4a1b      	ldr	r2, [pc, #108]	; (8004f30 <HAL_GPIO_Init+0x2dc>)
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004eca:	4b19      	ldr	r3, [pc, #100]	; (8004f30 <HAL_GPIO_Init+0x2dc>)
 8004ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	43db      	mvns	r3, r3
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	4013      	ands	r3, r2
 8004eda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d003      	beq.n	8004ef0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ef0:	4a0f      	ldr	r2, [pc, #60]	; (8004f30 <HAL_GPIO_Init+0x2dc>)
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	3301      	adds	r3, #1
 8004efc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	fa22 f303 	lsr.w	r3, r2, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f47f aeab 	bne.w	8004c64 <HAL_GPIO_Init+0x10>
  }
}
 8004f0e:	bf00      	nop
 8004f10:	bf00      	nop
 8004f12:	371c      	adds	r7, #28
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	40010000 	.word	0x40010000
 8004f20:	48000400 	.word	0x48000400
 8004f24:	48000800 	.word	0x48000800
 8004f28:	48000c00 	.word	0x48000c00
 8004f2c:	48001000 	.word	0x48001000
 8004f30:	58000800 	.word	0x58000800

08004f34 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f36:	b08b      	sub	sp, #44	; 0x2c
 8004f38:	af06      	add	r7, sp, #24
 8004f3a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e0cb      	b.n	80050de <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d106      	bne.n	8004f60 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f008 fbd8 	bl	800d710 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2203      	movs	r2, #3
 8004f64:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f003 fd5a 	bl	8008a26 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f72:	2300      	movs	r3, #0
 8004f74:	73fb      	strb	r3, [r7, #15]
 8004f76:	e040      	b.n	8004ffa <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
 8004f7a:	6879      	ldr	r1, [r7, #4]
 8004f7c:	1c5a      	adds	r2, r3, #1
 8004f7e:	4613      	mov	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	440b      	add	r3, r1
 8004f88:	3301      	adds	r3, #1
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
 8004f90:	6879      	ldr	r1, [r7, #4]
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	4613      	mov	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	440b      	add	r3, r1
 8004f9e:	7bfa      	ldrb	r2, [r7, #15]
 8004fa0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004fa2:	7bfb      	ldrb	r3, [r7, #15]
 8004fa4:	6879      	ldr	r1, [r7, #4]
 8004fa6:	1c5a      	adds	r2, r3, #1
 8004fa8:	4613      	mov	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	440b      	add	r3, r1
 8004fb2:	3303      	adds	r3, #3
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004fb8:	7bfa      	ldrb	r2, [r7, #15]
 8004fba:	6879      	ldr	r1, [r7, #4]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	00db      	lsls	r3, r3, #3
 8004fc4:	440b      	add	r3, r1
 8004fc6:	3338      	adds	r3, #56	; 0x38
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004fcc:	7bfa      	ldrb	r2, [r7, #15]
 8004fce:	6879      	ldr	r1, [r7, #4]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	440b      	add	r3, r1
 8004fda:	333c      	adds	r3, #60	; 0x3c
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004fe0:	7bfa      	ldrb	r2, [r7, #15]
 8004fe2:	6879      	ldr	r1, [r7, #4]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	440b      	add	r3, r1
 8004fee:	3340      	adds	r3, #64	; 0x40
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ff4:	7bfb      	ldrb	r3, [r7, #15]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	73fb      	strb	r3, [r7, #15]
 8004ffa:	7bfa      	ldrb	r2, [r7, #15]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	429a      	cmp	r2, r3
 8005002:	d3b9      	bcc.n	8004f78 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005004:	2300      	movs	r3, #0
 8005006:	73fb      	strb	r3, [r7, #15]
 8005008:	e044      	b.n	8005094 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800500a:	7bfa      	ldrb	r2, [r7, #15]
 800500c:	6879      	ldr	r1, [r7, #4]
 800500e:	4613      	mov	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	00db      	lsls	r3, r3, #3
 8005016:	440b      	add	r3, r1
 8005018:	f203 1369 	addw	r3, r3, #361	; 0x169
 800501c:	2200      	movs	r2, #0
 800501e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005020:	7bfa      	ldrb	r2, [r7, #15]
 8005022:	6879      	ldr	r1, [r7, #4]
 8005024:	4613      	mov	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	00db      	lsls	r3, r3, #3
 800502c:	440b      	add	r3, r1
 800502e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005032:	7bfa      	ldrb	r2, [r7, #15]
 8005034:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005036:	7bfa      	ldrb	r2, [r7, #15]
 8005038:	6879      	ldr	r1, [r7, #4]
 800503a:	4613      	mov	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	440b      	add	r3, r1
 8005044:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005048:	2200      	movs	r2, #0
 800504a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800504c:	7bfa      	ldrb	r2, [r7, #15]
 800504e:	6879      	ldr	r1, [r7, #4]
 8005050:	4613      	mov	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	440b      	add	r3, r1
 800505a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800505e:	2200      	movs	r2, #0
 8005060:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005062:	7bfa      	ldrb	r2, [r7, #15]
 8005064:	6879      	ldr	r1, [r7, #4]
 8005066:	4613      	mov	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	00db      	lsls	r3, r3, #3
 800506e:	440b      	add	r3, r1
 8005070:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005074:	2200      	movs	r2, #0
 8005076:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005078:	7bfa      	ldrb	r2, [r7, #15]
 800507a:	6879      	ldr	r1, [r7, #4]
 800507c:	4613      	mov	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	440b      	add	r3, r1
 8005086:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800508a:	2200      	movs	r2, #0
 800508c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800508e:	7bfb      	ldrb	r3, [r7, #15]
 8005090:	3301      	adds	r3, #1
 8005092:	73fb      	strb	r3, [r7, #15]
 8005094:	7bfa      	ldrb	r2, [r7, #15]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	429a      	cmp	r2, r3
 800509c:	d3b5      	bcc.n	800500a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	603b      	str	r3, [r7, #0]
 80050a4:	687e      	ldr	r6, [r7, #4]
 80050a6:	466d      	mov	r5, sp
 80050a8:	f106 0410 	add.w	r4, r6, #16
 80050ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050b0:	6823      	ldr	r3, [r4, #0]
 80050b2:	602b      	str	r3, [r5, #0]
 80050b4:	1d33      	adds	r3, r6, #4
 80050b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050b8:	6838      	ldr	r0, [r7, #0]
 80050ba:	f003 fccf 	bl	8008a5c <USB_DevInit>

  hpcd->USB_Address = 0U;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d102      	bne.n	80050dc <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f001 fc45 	bl	8006966 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3714      	adds	r7, #20
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080050e6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b082      	sub	sp, #8
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d101      	bne.n	80050fc <HAL_PCD_Start+0x16>
 80050f8:	2302      	movs	r3, #2
 80050fa:	e012      	b.n	8005122 <HAL_PCD_Start+0x3c>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4618      	mov	r0, r3
 800510a:	f003 fc75 	bl	80089f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4618      	mov	r0, r3
 8005114:	f005 ff39 	bl	800af8a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b084      	sub	sp, #16
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4618      	mov	r0, r3
 8005138:	f005 ff3e 	bl	800afb8 <USB_ReadInterrupts>
 800513c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d003      	beq.n	8005150 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 fb05 	bl	8005758 <PCD_EP_ISR_Handler>

    return;
 800514e:	e110      	b.n	8005372 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005156:	2b00      	cmp	r3, #0
 8005158:	d013      	beq.n	8005182 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005162:	b29a      	uxth	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800516c:	b292      	uxth	r2, r2
 800516e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f008 fb7f 	bl	800d876 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005178:	2100      	movs	r1, #0
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f8fc 	bl	8005378 <HAL_PCD_SetAddress>

    return;
 8005180:	e0f7      	b.n	8005372 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00c      	beq.n	80051a6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005194:	b29a      	uxth	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800519e:	b292      	uxth	r2, r2
 80051a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80051a4:	e0e5      	b.n	8005372 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00c      	beq.n	80051ca <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051c2:	b292      	uxth	r2, r2
 80051c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80051c8:	e0d3      	b.n	8005372 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d034      	beq.n	800523e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80051dc:	b29a      	uxth	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 0204 	bic.w	r2, r2, #4
 80051e6:	b292      	uxth	r2, r2
 80051e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 0208 	bic.w	r2, r2, #8
 80051fe:	b292      	uxth	r2, r2
 8005200:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800520a:	2b01      	cmp	r3, #1
 800520c:	d107      	bne.n	800521e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005216:	2100      	movs	r1, #0
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f008 fd23 	bl	800dc64 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f008 fb62 	bl	800d8e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800522c:	b29a      	uxth	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005236:	b292      	uxth	r2, r2
 8005238:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800523c:	e099      	b.n	8005372 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005244:	2b00      	cmp	r3, #0
 8005246:	d027      	beq.n	8005298 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005250:	b29a      	uxth	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0208 	orr.w	r2, r2, #8
 800525a:	b292      	uxth	r2, r2
 800525c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005268:	b29a      	uxth	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005272:	b292      	uxth	r2, r2
 8005274:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005280:	b29a      	uxth	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f042 0204 	orr.w	r2, r2, #4
 800528a:	b292      	uxth	r2, r2
 800528c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f008 fb0f 	bl	800d8b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005296:	e06c      	b.n	8005372 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d040      	beq.n	8005324 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052b4:	b292      	uxth	r2, r2
 80052b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d12b      	bne.n	800531c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0204 	orr.w	r2, r2, #4
 80052d6:	b292      	uxth	r2, r2
 80052d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 0208 	orr.w	r2, r2, #8
 80052ee:	b292      	uxth	r2, r2
 80052f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005304:	b29b      	uxth	r3, r3
 8005306:	089b      	lsrs	r3, r3, #2
 8005308:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005312:	2101      	movs	r1, #1
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f008 fca5 	bl	800dc64 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800531a:	e02a      	b.n	8005372 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f008 fac9 	bl	800d8b4 <HAL_PCD_SuspendCallback>
    return;
 8005322:	e026      	b.n	8005372 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00f      	beq.n	800534e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005336:	b29a      	uxth	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005340:	b292      	uxth	r2, r2
 8005342:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f008 fa87 	bl	800d85a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800534c:	e011      	b.n	8005372 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00c      	beq.n	8005372 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005360:	b29a      	uxth	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800536a:	b292      	uxth	r2, r2
 800536c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005370:	bf00      	nop
  }
}
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	460b      	mov	r3, r1
 8005382:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800538a:	2b01      	cmp	r3, #1
 800538c:	d101      	bne.n	8005392 <HAL_PCD_SetAddress+0x1a>
 800538e:	2302      	movs	r3, #2
 8005390:	e013      	b.n	80053ba <HAL_PCD_SetAddress+0x42>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	78fa      	ldrb	r2, [r7, #3]
 800539e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	78fa      	ldrb	r2, [r7, #3]
 80053a8:	4611      	mov	r1, r2
 80053aa:	4618      	mov	r0, r3
 80053ac:	f005 fdd9 	bl	800af62 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b084      	sub	sp, #16
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	4608      	mov	r0, r1
 80053cc:	4611      	mov	r1, r2
 80053ce:	461a      	mov	r2, r3
 80053d0:	4603      	mov	r3, r0
 80053d2:	70fb      	strb	r3, [r7, #3]
 80053d4:	460b      	mov	r3, r1
 80053d6:	803b      	strh	r3, [r7, #0]
 80053d8:	4613      	mov	r3, r2
 80053da:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80053dc:	2300      	movs	r3, #0
 80053de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80053e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	da0e      	bge.n	8005406 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053e8:	78fb      	ldrb	r3, [r7, #3]
 80053ea:	f003 0307 	and.w	r3, r3, #7
 80053ee:	1c5a      	adds	r2, r3, #1
 80053f0:	4613      	mov	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	4413      	add	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2201      	movs	r2, #1
 8005402:	705a      	strb	r2, [r3, #1]
 8005404:	e00e      	b.n	8005424 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005406:	78fb      	ldrb	r3, [r7, #3]
 8005408:	f003 0207 	and.w	r2, r3, #7
 800540c:	4613      	mov	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	4413      	add	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005424:	78fb      	ldrb	r3, [r7, #3]
 8005426:	f003 0307 	and.w	r3, r3, #7
 800542a:	b2da      	uxtb	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005430:	883a      	ldrh	r2, [r7, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	78ba      	ldrb	r2, [r7, #2]
 800543a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800543c:	78bb      	ldrb	r3, [r7, #2]
 800543e:	2b02      	cmp	r3, #2
 8005440:	d102      	bne.n	8005448 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800544e:	2b01      	cmp	r3, #1
 8005450:	d101      	bne.n	8005456 <HAL_PCD_EP_Open+0x94>
 8005452:	2302      	movs	r3, #2
 8005454:	e00e      	b.n	8005474 <HAL_PCD_EP_Open+0xb2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68f9      	ldr	r1, [r7, #12]
 8005464:	4618      	mov	r0, r3
 8005466:	f003 fb1b 	bl	8008aa0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005472:	7afb      	ldrb	r3, [r7, #11]
}
 8005474:	4618      	mov	r0, r3
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	460b      	mov	r3, r1
 8005486:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005488:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800548c:	2b00      	cmp	r3, #0
 800548e:	da0e      	bge.n	80054ae <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005490:	78fb      	ldrb	r3, [r7, #3]
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	1c5a      	adds	r2, r3, #1
 8005498:	4613      	mov	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	4413      	add	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2201      	movs	r2, #1
 80054aa:	705a      	strb	r2, [r3, #1]
 80054ac:	e00e      	b.n	80054cc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054ae:	78fb      	ldrb	r3, [r7, #3]
 80054b0:	f003 0207 	and.w	r2, r3, #7
 80054b4:	4613      	mov	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	4413      	add	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80054cc:	78fb      	ldrb	r3, [r7, #3]
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d101      	bne.n	80054e6 <HAL_PCD_EP_Close+0x6a>
 80054e2:	2302      	movs	r3, #2
 80054e4:	e00e      	b.n	8005504 <HAL_PCD_EP_Close+0x88>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68f9      	ldr	r1, [r7, #12]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f003 fe97 	bl	8009228 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	607a      	str	r2, [r7, #4]
 8005516:	603b      	str	r3, [r7, #0]
 8005518:	460b      	mov	r3, r1
 800551a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800551c:	7afb      	ldrb	r3, [r7, #11]
 800551e:	f003 0207 	and.w	r2, r3, #7
 8005522:	4613      	mov	r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4413      	add	r3, r2
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	4413      	add	r3, r2
 8005532:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	2200      	movs	r2, #0
 8005544:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2200      	movs	r2, #0
 800554a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800554c:	7afb      	ldrb	r3, [r7, #11]
 800554e:	f003 0307 	and.w	r3, r3, #7
 8005552:	b2da      	uxtb	r2, r3
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6979      	ldr	r1, [r7, #20]
 800555e:	4618      	mov	r0, r3
 8005560:	f004 f84f 	bl	8009602 <USB_EPStartXfer>

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800556e:	b480      	push	{r7}
 8005570:	b083      	sub	sp, #12
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
 8005576:	460b      	mov	r3, r1
 8005578:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800557a:	78fb      	ldrb	r3, [r7, #3]
 800557c:	f003 0207 	and.w	r2, r3, #7
 8005580:	6879      	ldr	r1, [r7, #4]
 8005582:	4613      	mov	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	00db      	lsls	r3, r3, #3
 800558a:	440b      	add	r3, r1
 800558c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005590:	681b      	ldr	r3, [r3, #0]
}
 8005592:	4618      	mov	r0, r3
 8005594:	370c      	adds	r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b086      	sub	sp, #24
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	60f8      	str	r0, [r7, #12]
 80055a6:	607a      	str	r2, [r7, #4]
 80055a8:	603b      	str	r3, [r7, #0]
 80055aa:	460b      	mov	r3, r1
 80055ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055ae:	7afb      	ldrb	r3, [r7, #11]
 80055b0:	f003 0307 	and.w	r3, r3, #7
 80055b4:	1c5a      	adds	r2, r3, #1
 80055b6:	4613      	mov	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	00db      	lsls	r3, r3, #3
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	4413      	add	r3, r2
 80055c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	2200      	movs	r2, #0
 80055e2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	2201      	movs	r2, #1
 80055e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055ea:	7afb      	ldrb	r3, [r7, #11]
 80055ec:	f003 0307 	and.w	r3, r3, #7
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	6979      	ldr	r1, [r7, #20]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f004 f800 	bl	8009602 <USB_EPStartXfer>

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3718      	adds	r7, #24
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	460b      	mov	r3, r1
 8005616:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005618:	78fb      	ldrb	r3, [r7, #3]
 800561a:	f003 0207 	and.w	r2, r3, #7
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	429a      	cmp	r2, r3
 8005624:	d901      	bls.n	800562a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e03e      	b.n	80056a8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800562a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800562e:	2b00      	cmp	r3, #0
 8005630:	da0e      	bge.n	8005650 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005632:	78fb      	ldrb	r3, [r7, #3]
 8005634:	f003 0307 	and.w	r3, r3, #7
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	4613      	mov	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4413      	add	r3, r2
 8005640:	00db      	lsls	r3, r3, #3
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	4413      	add	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2201      	movs	r2, #1
 800564c:	705a      	strb	r2, [r3, #1]
 800564e:	e00c      	b.n	800566a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005650:	78fa      	ldrb	r2, [r7, #3]
 8005652:	4613      	mov	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	4413      	add	r3, r2
 8005662:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2201      	movs	r2, #1
 800566e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005670:	78fb      	ldrb	r3, [r7, #3]
 8005672:	f003 0307 	and.w	r3, r3, #7
 8005676:	b2da      	uxtb	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005682:	2b01      	cmp	r3, #1
 8005684:	d101      	bne.n	800568a <HAL_PCD_EP_SetStall+0x7e>
 8005686:	2302      	movs	r3, #2
 8005688:	e00e      	b.n	80056a8 <HAL_PCD_EP_SetStall+0x9c>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68f9      	ldr	r1, [r7, #12]
 8005698:	4618      	mov	r0, r3
 800569a:	f005 fb63 	bl	800ad64 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	460b      	mov	r3, r1
 80056ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80056bc:	78fb      	ldrb	r3, [r7, #3]
 80056be:	f003 020f 	and.w	r2, r3, #15
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d901      	bls.n	80056ce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e040      	b.n	8005750 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80056ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	da0e      	bge.n	80056f4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056d6:	78fb      	ldrb	r3, [r7, #3]
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	1c5a      	adds	r2, r3, #1
 80056de:	4613      	mov	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	4413      	add	r3, r2
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	4413      	add	r3, r2
 80056ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2201      	movs	r2, #1
 80056f0:	705a      	strb	r2, [r3, #1]
 80056f2:	e00e      	b.n	8005712 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056f4:	78fb      	ldrb	r3, [r7, #3]
 80056f6:	f003 0207 	and.w	r2, r3, #7
 80056fa:	4613      	mov	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	4413      	add	r3, r2
 800570a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005718:	78fb      	ldrb	r3, [r7, #3]
 800571a:	f003 0307 	and.w	r3, r3, #7
 800571e:	b2da      	uxtb	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800572a:	2b01      	cmp	r3, #1
 800572c:	d101      	bne.n	8005732 <HAL_PCD_EP_ClrStall+0x82>
 800572e:	2302      	movs	r3, #2
 8005730:	e00e      	b.n	8005750 <HAL_PCD_EP_ClrStall+0xa0>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68f9      	ldr	r1, [r7, #12]
 8005740:	4618      	mov	r0, r3
 8005742:	f005 fb60 	bl	800ae06 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b096      	sub	sp, #88	; 0x58
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005760:	e3b1      	b.n	8005ec6 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800576a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800576e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005772:	b2db      	uxtb	r3, r3
 8005774:	f003 030f 	and.w	r3, r3, #15
 8005778:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800577c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005780:	2b00      	cmp	r3, #0
 8005782:	f040 8173 	bne.w	8005a6c <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005786:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800578a:	f003 0310 	and.w	r3, r3, #16
 800578e:	2b00      	cmp	r3, #0
 8005790:	d150      	bne.n	8005834 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	881b      	ldrh	r3, [r3, #0]
 8005798:	b29b      	uxth	r3, r3
 800579a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800579e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a2:	81fb      	strh	r3, [r7, #14]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	89fb      	ldrh	r3, [r7, #14]
 80057aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	3328      	adds	r3, #40	; 0x28
 80057ba:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	461a      	mov	r2, r3
 80057c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	4413      	add	r3, r2
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	6812      	ldr	r2, [r2, #0]
 80057d4:	4413      	add	r3, r2
 80057d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80057e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057e2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80057e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057e6:	695a      	ldr	r2, [r3, #20]
 80057e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057ea:	69db      	ldr	r3, [r3, #28]
 80057ec:	441a      	add	r2, r3
 80057ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057f0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80057f2:	2100      	movs	r1, #0
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f008 f816 	bl	800d826 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 835f 	beq.w	8005ec6 <PCD_EP_ISR_Handler+0x76e>
 8005808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	2b00      	cmp	r3, #0
 800580e:	f040 835a 	bne.w	8005ec6 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005818:	b2db      	uxtb	r3, r3
 800581a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800581e:	b2da      	uxtb	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	b292      	uxth	r2, r2
 8005826:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005832:	e348      	b.n	8005ec6 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800583a:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005846:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800584a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800584e:	2b00      	cmp	r3, #0
 8005850:	d032      	beq.n	80058b8 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800585a:	b29b      	uxth	r3, r3
 800585c:	461a      	mov	r2, r3
 800585e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	4413      	add	r3, r2
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6812      	ldr	r2, [r2, #0]
 800586a:	4413      	add	r3, r2
 800586c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005870:	881b      	ldrh	r3, [r3, #0]
 8005872:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005878:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6818      	ldr	r0, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005886:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800588a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800588c:	b29b      	uxth	r3, r3
 800588e:	f005 fbe5 	bl	800b05c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	b29a      	uxth	r2, r3
 800589a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800589e:	4013      	ands	r3, r2
 80058a0:	823b      	strh	r3, [r7, #16]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	8a3a      	ldrh	r2, [r7, #16]
 80058a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058ac:	b292      	uxth	r2, r2
 80058ae:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f007 ff8b 	bl	800d7cc <HAL_PCD_SetupStageCallback>
 80058b6:	e306      	b.n	8005ec6 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80058b8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f280 8302 	bge.w	8005ec6 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	881b      	ldrh	r3, [r3, #0]
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	f640 738f 	movw	r3, #3983	; 0xf8f
 80058ce:	4013      	ands	r3, r2
 80058d0:	83fb      	strh	r3, [r7, #30]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	8bfa      	ldrh	r2, [r7, #30]
 80058d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058dc:	b292      	uxth	r2, r2
 80058de:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	461a      	mov	r2, r3
 80058ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	00db      	lsls	r3, r3, #3
 80058f2:	4413      	add	r3, r2
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	6812      	ldr	r2, [r2, #0]
 80058f8:	4413      	add	r3, r2
 80058fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058fe:	881b      	ldrh	r3, [r3, #0]
 8005900:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005906:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d019      	beq.n	8005944 <PCD_EP_ISR_Handler+0x1ec>
 8005910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d015      	beq.n	8005944 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6818      	ldr	r0, [r3, #0]
 800591c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800591e:	6959      	ldr	r1, [r3, #20]
 8005920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005922:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005926:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005928:	b29b      	uxth	r3, r3
 800592a:	f005 fb97 	bl	800b05c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800592e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005930:	695a      	ldr	r2, [r3, #20]
 8005932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	441a      	add	r2, r3
 8005938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800593a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800593c:	2100      	movs	r1, #0
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f007 ff56 	bl	800d7f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	881b      	ldrh	r3, [r3, #0]
 800594a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800594e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005952:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005956:	2b00      	cmp	r3, #0
 8005958:	f040 82b5 	bne.w	8005ec6 <PCD_EP_ISR_Handler+0x76e>
 800595c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005960:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005964:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005968:	f000 82ad 	beq.w	8005ec6 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	61bb      	str	r3, [r7, #24]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800597a:	b29b      	uxth	r3, r3
 800597c:	461a      	mov	r2, r3
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	4413      	add	r3, r2
 8005982:	61bb      	str	r3, [r7, #24]
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800598a:	617b      	str	r3, [r7, #20]
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	881b      	ldrh	r3, [r3, #0]
 8005990:	b29b      	uxth	r3, r3
 8005992:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005996:	b29a      	uxth	r2, r3
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	801a      	strh	r2, [r3, #0]
 800599c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	2b3e      	cmp	r3, #62	; 0x3e
 80059a2:	d91d      	bls.n	80059e0 <PCD_EP_ISR_Handler+0x288>
 80059a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	095b      	lsrs	r3, r3, #5
 80059aa:	647b      	str	r3, [r7, #68]	; 0x44
 80059ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	f003 031f 	and.w	r3, r3, #31
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d102      	bne.n	80059be <PCD_EP_ISR_Handler+0x266>
 80059b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059ba:	3b01      	subs	r3, #1
 80059bc:	647b      	str	r3, [r7, #68]	; 0x44
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	881b      	ldrh	r3, [r3, #0]
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	029b      	lsls	r3, r3, #10
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	4313      	orrs	r3, r2
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059d8:	b29a      	uxth	r2, r3
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	801a      	strh	r2, [r3, #0]
 80059de:	e026      	b.n	8005a2e <PCD_EP_ISR_Handler+0x2d6>
 80059e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10a      	bne.n	80059fe <PCD_EP_ISR_Handler+0x2a6>
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	881b      	ldrh	r3, [r3, #0]
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	801a      	strh	r2, [r3, #0]
 80059fc:	e017      	b.n	8005a2e <PCD_EP_ISR_Handler+0x2d6>
 80059fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	085b      	lsrs	r3, r3, #1
 8005a04:	647b      	str	r3, [r7, #68]	; 0x44
 8005a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d002      	beq.n	8005a18 <PCD_EP_ISR_Handler+0x2c0>
 8005a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a14:	3301      	adds	r3, #1
 8005a16:	647b      	str	r3, [r7, #68]	; 0x44
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	881b      	ldrh	r3, [r3, #0]
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	029b      	lsls	r3, r3, #10
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	4313      	orrs	r3, r2
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	881b      	ldrh	r3, [r3, #0]
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a3e:	827b      	strh	r3, [r7, #18]
 8005a40:	8a7b      	ldrh	r3, [r7, #18]
 8005a42:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005a46:	827b      	strh	r3, [r7, #18]
 8005a48:	8a7b      	ldrh	r3, [r7, #18]
 8005a4a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a4e:	827b      	strh	r3, [r7, #18]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	8a7b      	ldrh	r3, [r7, #18]
 8005a56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	8013      	strh	r3, [r2, #0]
 8005a6a:	e22c      	b.n	8005ec6 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	461a      	mov	r2, r3
 8005a72:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4413      	add	r3, r2
 8005a7a:	881b      	ldrh	r3, [r3, #0]
 8005a7c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005a80:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f280 80f6 	bge.w	8005c76 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005ab8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005abc:	b292      	uxth	r2, r2
 8005abe:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005ac0:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005ad6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ad8:	7b1b      	ldrb	r3, [r3, #12]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d123      	bne.n	8005b26 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	461a      	mov	r2, r3
 8005aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	00db      	lsls	r3, r3, #3
 8005af0:	4413      	add	r3, r2
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	6812      	ldr	r2, [r2, #0]
 8005af6:	4413      	add	r3, r2
 8005af8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005afc:	881b      	ldrh	r3, [r3, #0]
 8005afe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b02:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8005b06:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 808e 	beq.w	8005c2c <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6818      	ldr	r0, [r3, #0]
 8005b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b16:	6959      	ldr	r1, [r3, #20]
 8005b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b1a:	88da      	ldrh	r2, [r3, #6]
 8005b1c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005b20:	f005 fa9c 	bl	800b05c <USB_ReadPMA>
 8005b24:	e082      	b.n	8005c2c <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b28:	78db      	ldrb	r3, [r3, #3]
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d10a      	bne.n	8005b44 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005b2e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005b32:	461a      	mov	r2, r3
 8005b34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f9d3 	bl	8005ee2 <HAL_PCD_EP_DB_Receive>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8005b42:	e073      	b.n	8005c2c <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b5e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	461a      	mov	r2, r3
 8005b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	441a      	add	r2, r3
 8005b70:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005b74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	881b      	ldrh	r3, [r3, #0]
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d022      	beq.n	8005be8 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	461a      	mov	r2, r3
 8005bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	00db      	lsls	r3, r3, #3
 8005bb4:	4413      	add	r3, r2
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	6812      	ldr	r2, [r2, #0]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bc6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8005bca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d02c      	beq.n	8005c2c <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6818      	ldr	r0, [r3, #0]
 8005bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bd8:	6959      	ldr	r1, [r3, #20]
 8005bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bdc:	891a      	ldrh	r2, [r3, #8]
 8005bde:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005be2:	f005 fa3b 	bl	800b05c <USB_ReadPMA>
 8005be6:	e021      	b.n	8005c2c <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	00db      	lsls	r3, r3, #3
 8005bfa:	4413      	add	r3, r2
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6812      	ldr	r2, [r2, #0]
 8005c00:	4413      	add	r3, r2
 8005c02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c0c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8005c10:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d009      	beq.n	8005c2c <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6818      	ldr	r0, [r3, #0]
 8005c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c1e:	6959      	ldr	r1, [r3, #20]
 8005c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c22:	895a      	ldrh	r2, [r3, #10]
 8005c24:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005c28:	f005 fa18 	bl	800b05c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c2e:	69da      	ldr	r2, [r3, #28]
 8005c30:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005c34:	441a      	add	r2, r3
 8005c36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c38:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c3c:	695a      	ldr	r2, [r3, #20]
 8005c3e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005c42:	441a      	add	r2, r3
 8005c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c46:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d005      	beq.n	8005c5c <PCD_EP_ISR_Handler+0x504>
 8005c50:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8005c54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d206      	bcs.n	8005c6a <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	4619      	mov	r1, r3
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f007 fdc4 	bl	800d7f0 <HAL_PCD_DataOutStageCallback>
 8005c68:	e005      	b.n	8005c76 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c70:	4618      	mov	r0, r3
 8005c72:	f003 fcc6 	bl	8009602 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005c76:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f000 8121 	beq.w	8005ec6 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8005c84:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005c88:	1c5a      	adds	r2, r3, #1
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	00db      	lsls	r3, r3, #3
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	4413      	add	r3, r2
 8005c96:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	461a      	mov	r2, r3
 8005cbc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	441a      	add	r2, r3
 8005cc4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005cc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ccc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cd6:	78db      	ldrb	r3, [r3, #3]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	f040 80a2 	bne.w	8005e22 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8005cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005ce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ce6:	7b1b      	ldrb	r3, [r3, #12]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 8093 	beq.w	8005e14 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005cee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d046      	beq.n	8005d88 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cfc:	785b      	ldrb	r3, [r3, #1]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d126      	bne.n	8005d50 <PCD_EP_ISR_Handler+0x5f8>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	627b      	str	r3, [r7, #36]	; 0x24
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	461a      	mov	r2, r3
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	4413      	add	r3, r2
 8005d18:	627b      	str	r3, [r7, #36]	; 0x24
 8005d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	00da      	lsls	r2, r3, #3
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	4413      	add	r3, r2
 8005d24:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d28:	623b      	str	r3, [r7, #32]
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	881b      	ldrh	r3, [r3, #0]
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	6a3b      	ldr	r3, [r7, #32]
 8005d38:	801a      	strh	r2, [r3, #0]
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	881b      	ldrh	r3, [r3, #0]
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	6a3b      	ldr	r3, [r7, #32]
 8005d4c:	801a      	strh	r2, [r3, #0]
 8005d4e:	e061      	b.n	8005e14 <PCD_EP_ISR_Handler+0x6bc>
 8005d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d52:	785b      	ldrb	r3, [r3, #1]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d15d      	bne.n	8005e14 <PCD_EP_ISR_Handler+0x6bc>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	461a      	mov	r2, r3
 8005d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6c:	4413      	add	r3, r2
 8005d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	00da      	lsls	r2, r3, #3
 8005d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d78:	4413      	add	r3, r2
 8005d7a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d82:	2200      	movs	r2, #0
 8005d84:	801a      	strh	r2, [r3, #0]
 8005d86:	e045      	b.n	8005e14 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d90:	785b      	ldrb	r3, [r3, #1]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d126      	bne.n	8005de4 <PCD_EP_ISR_Handler+0x68c>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	461a      	mov	r2, r3
 8005da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005daa:	4413      	add	r3, r2
 8005dac:	637b      	str	r3, [r7, #52]	; 0x34
 8005dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	00da      	lsls	r2, r3, #3
 8005db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db6:	4413      	add	r3, r2
 8005db8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005dbc:	633b      	str	r3, [r7, #48]	; 0x30
 8005dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dcc:	801a      	strh	r2, [r3, #0]
 8005dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd0:	881b      	ldrh	r3, [r3, #0]
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de0:	801a      	strh	r2, [r3, #0]
 8005de2:	e017      	b.n	8005e14 <PCD_EP_ISR_Handler+0x6bc>
 8005de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005de6:	785b      	ldrb	r3, [r3, #1]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d113      	bne.n	8005e14 <PCD_EP_ISR_Handler+0x6bc>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	461a      	mov	r2, r3
 8005df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dfa:	4413      	add	r3, r2
 8005dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	00da      	lsls	r2, r3, #3
 8005e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e06:	4413      	add	r3, r2
 8005e08:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e10:	2200      	movs	r2, #0
 8005e12:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	4619      	mov	r1, r3
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f007 fd03 	bl	800d826 <HAL_PCD_DataInStageCallback>
 8005e20:	e051      	b.n	8005ec6 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005e22:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d144      	bne.n	8005eb8 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	461a      	mov	r2, r3
 8005e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	4413      	add	r3, r2
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	6812      	ldr	r2, [r2, #0]
 8005e46:	4413      	add	r3, r2
 8005e48:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e52:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8005e56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e58:	699a      	ldr	r2, [r3, #24]
 8005e5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d907      	bls.n	8005e72 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8005e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e64:	699a      	ldr	r2, [r3, #24]
 8005e66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e6a:	1ad2      	subs	r2, r2, r3
 8005e6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e6e:	619a      	str	r2, [r3, #24]
 8005e70:	e002      	b.n	8005e78 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8005e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e74:	2200      	movs	r2, #0
 8005e76:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005e78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d106      	bne.n	8005e8e <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005e80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	4619      	mov	r1, r3
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f007 fccd 	bl	800d826 <HAL_PCD_DataInStageCallback>
 8005e8c:	e01b      	b.n	8005ec6 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e90:	695a      	ldr	r2, [r3, #20]
 8005e92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e96:	441a      	add	r2, r3
 8005e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e9a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e9e:	69da      	ldr	r2, [r3, #28]
 8005ea0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005ea4:	441a      	add	r2, r3
 8005ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ea8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f003 fba6 	bl	8009602 <USB_EPStartXfer>
 8005eb6:	e006      	b.n	8005ec6 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005eb8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f917 	bl	80060f4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	b21b      	sxth	r3, r3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f6ff ac45 	blt.w	8005762 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3758      	adds	r7, #88	; 0x58
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b088      	sub	sp, #32
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	60f8      	str	r0, [r7, #12]
 8005eea:	60b9      	str	r1, [r7, #8]
 8005eec:	4613      	mov	r3, r2
 8005eee:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005ef0:	88fb      	ldrh	r3, [r7, #6]
 8005ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d07c      	beq.n	8005ff4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	461a      	mov	r2, r3
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	4413      	add	r3, r2
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	6812      	ldr	r2, [r2, #0]
 8005f12:	4413      	add	r3, r2
 8005f14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f18:	881b      	ldrh	r3, [r3, #0]
 8005f1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f1e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	699a      	ldr	r2, [r3, #24]
 8005f24:	8b7b      	ldrh	r3, [r7, #26]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d306      	bcc.n	8005f38 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	699a      	ldr	r2, [r3, #24]
 8005f2e:	8b7b      	ldrh	r3, [r7, #26]
 8005f30:	1ad2      	subs	r2, r2, r3
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	619a      	str	r2, [r3, #24]
 8005f36:	e002      	b.n	8005f3e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d123      	bne.n	8005f8e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f60:	833b      	strh	r3, [r7, #24]
 8005f62:	8b3b      	ldrh	r3, [r7, #24]
 8005f64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005f68:	833b      	strh	r3, [r7, #24]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	441a      	add	r2, r3
 8005f78:	8b3b      	ldrh	r3, [r7, #24]
 8005f7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005f8e:	88fb      	ldrh	r3, [r7, #6]
 8005f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d01f      	beq.n	8005fd8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	881b      	ldrh	r3, [r3, #0]
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb2:	82fb      	strh	r3, [r7, #22]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	461a      	mov	r2, r3
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	441a      	add	r2, r3
 8005fc2:	8afb      	ldrh	r3, [r7, #22]
 8005fc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005fd8:	8b7b      	ldrh	r3, [r7, #26]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f000 8085 	beq.w	80060ea <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6818      	ldr	r0, [r3, #0]
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	6959      	ldr	r1, [r3, #20]
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	891a      	ldrh	r2, [r3, #8]
 8005fec:	8b7b      	ldrh	r3, [r7, #26]
 8005fee:	f005 f835 	bl	800b05c <USB_ReadPMA>
 8005ff2:	e07a      	b.n	80060ea <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	461a      	mov	r2, r3
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	00db      	lsls	r3, r3, #3
 8006006:	4413      	add	r3, r2
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	6812      	ldr	r2, [r2, #0]
 800600c:	4413      	add	r3, r2
 800600e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006018:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	699a      	ldr	r2, [r3, #24]
 800601e:	8b7b      	ldrh	r3, [r7, #26]
 8006020:	429a      	cmp	r2, r3
 8006022:	d306      	bcc.n	8006032 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	699a      	ldr	r2, [r3, #24]
 8006028:	8b7b      	ldrh	r3, [r7, #26]
 800602a:	1ad2      	subs	r2, r2, r3
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	619a      	str	r2, [r3, #24]
 8006030:	e002      	b.n	8006038 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	2200      	movs	r2, #0
 8006036:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d123      	bne.n	8006088 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	461a      	mov	r2, r3
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	881b      	ldrh	r3, [r3, #0]
 8006050:	b29b      	uxth	r3, r3
 8006052:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800605a:	83fb      	strh	r3, [r7, #30]
 800605c:	8bfb      	ldrh	r3, [r7, #30]
 800605e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006062:	83fb      	strh	r3, [r7, #30]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	461a      	mov	r2, r3
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	441a      	add	r2, r3
 8006072:	8bfb      	ldrh	r3, [r7, #30]
 8006074:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006078:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800607c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006084:	b29b      	uxth	r3, r3
 8006086:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006088:	88fb      	ldrh	r3, [r7, #6]
 800608a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608e:	2b00      	cmp	r3, #0
 8006090:	d11f      	bne.n	80060d2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	461a      	mov	r2, r3
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	881b      	ldrh	r3, [r3, #0]
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ac:	83bb      	strh	r3, [r7, #28]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	461a      	mov	r2, r3
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	441a      	add	r2, r3
 80060bc:	8bbb      	ldrh	r3, [r7, #28]
 80060be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80060d2:	8b7b      	ldrh	r3, [r7, #26]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d008      	beq.n	80060ea <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6818      	ldr	r0, [r3, #0]
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	6959      	ldr	r1, [r3, #20]
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	895a      	ldrh	r2, [r3, #10]
 80060e4:	8b7b      	ldrh	r3, [r7, #26]
 80060e6:	f004 ffb9 	bl	800b05c <USB_ReadPMA>
    }
  }

  return count;
 80060ea:	8b7b      	ldrh	r3, [r7, #26]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3720      	adds	r7, #32
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b0a4      	sub	sp, #144	; 0x90
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	4613      	mov	r3, r2
 8006100:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006102:	88fb      	ldrh	r3, [r7, #6]
 8006104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006108:	2b00      	cmp	r3, #0
 800610a:	f000 81db 	beq.w	80064c4 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006116:	b29b      	uxth	r3, r3
 8006118:	461a      	mov	r2, r3
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	00db      	lsls	r3, r3, #3
 8006120:	4413      	add	r3, r2
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	6812      	ldr	r2, [r2, #0]
 8006126:	4413      	add	r3, r2
 8006128:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006132:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	699a      	ldr	r2, [r3, #24]
 800613a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800613e:	429a      	cmp	r2, r3
 8006140:	d907      	bls.n	8006152 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	699a      	ldr	r2, [r3, #24]
 8006146:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800614a:	1ad2      	subs	r2, r2, r3
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	619a      	str	r2, [r3, #24]
 8006150:	e002      	b.n	8006158 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2200      	movs	r2, #0
 8006156:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	2b00      	cmp	r3, #0
 800615e:	f040 80b9 	bne.w	80062d4 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	785b      	ldrb	r3, [r3, #1]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d126      	bne.n	80061b8 <HAL_PCD_EP_DB_Transmit+0xc4>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006178:	b29b      	uxth	r3, r3
 800617a:	461a      	mov	r2, r3
 800617c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617e:	4413      	add	r3, r2
 8006180:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	00da      	lsls	r2, r3, #3
 8006188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618a:	4413      	add	r3, r2
 800618c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006190:	62bb      	str	r3, [r7, #40]	; 0x28
 8006192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	b29b      	uxth	r3, r3
 8006198:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800619c:	b29a      	uxth	r2, r3
 800619e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a0:	801a      	strh	r2, [r3, #0]
 80061a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a4:	881b      	ldrh	r3, [r3, #0]
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b4:	801a      	strh	r2, [r3, #0]
 80061b6:	e01a      	b.n	80061ee <HAL_PCD_EP_DB_Transmit+0xfa>
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	785b      	ldrb	r3, [r3, #1]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d116      	bne.n	80061ee <HAL_PCD_EP_DB_Transmit+0xfa>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	637b      	str	r3, [r7, #52]	; 0x34
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	461a      	mov	r2, r3
 80061d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061d4:	4413      	add	r3, r2
 80061d6:	637b      	str	r3, [r7, #52]	; 0x34
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	00da      	lsls	r2, r3, #3
 80061de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e0:	4413      	add	r3, r2
 80061e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061e6:	633b      	str	r3, [r7, #48]	; 0x30
 80061e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ea:	2200      	movs	r2, #0
 80061ec:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	627b      	str	r3, [r7, #36]	; 0x24
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	785b      	ldrb	r3, [r3, #1]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d126      	bne.n	800624a <HAL_PCD_EP_DB_Transmit+0x156>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	61fb      	str	r3, [r7, #28]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800620a:	b29b      	uxth	r3, r3
 800620c:	461a      	mov	r2, r3
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	4413      	add	r3, r2
 8006212:	61fb      	str	r3, [r7, #28]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	00da      	lsls	r2, r3, #3
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	4413      	add	r3, r2
 800621e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006222:	61bb      	str	r3, [r7, #24]
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	b29b      	uxth	r3, r3
 800622a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800622e:	b29a      	uxth	r2, r3
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	801a      	strh	r2, [r3, #0]
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	b29b      	uxth	r3, r3
 800623a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800623e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006242:	b29a      	uxth	r2, r3
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	801a      	strh	r2, [r3, #0]
 8006248:	e017      	b.n	800627a <HAL_PCD_EP_DB_Transmit+0x186>
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	785b      	ldrb	r3, [r3, #1]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d113      	bne.n	800627a <HAL_PCD_EP_DB_Transmit+0x186>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800625a:	b29b      	uxth	r3, r3
 800625c:	461a      	mov	r2, r3
 800625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006260:	4413      	add	r3, r2
 8006262:	627b      	str	r3, [r7, #36]	; 0x24
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	00da      	lsls	r2, r3, #3
 800626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626c:	4413      	add	r3, r2
 800626e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006272:	623b      	str	r3, [r7, #32]
 8006274:	6a3b      	ldr	r3, [r7, #32]
 8006276:	2200      	movs	r2, #0
 8006278:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	4619      	mov	r1, r3
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f007 fad0 	bl	800d826 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006286:	88fb      	ldrh	r3, [r7, #6]
 8006288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800628c:	2b00      	cmp	r3, #0
 800628e:	f000 82fa 	beq.w	8006886 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	461a      	mov	r2, r3
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4413      	add	r3, r2
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ac:	82fb      	strh	r3, [r7, #22]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	461a      	mov	r2, r3
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	441a      	add	r2, r3
 80062bc:	8afb      	ldrh	r3, [r7, #22]
 80062be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	8013      	strh	r3, [r2, #0]
 80062d2:	e2d8      	b.n	8006886 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80062d4:	88fb      	ldrh	r3, [r7, #6]
 80062d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d021      	beq.n	8006322 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	461a      	mov	r2, r3
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	461a      	mov	r2, r3
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	441a      	add	r2, r3
 800630a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800630e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006312:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006316:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800631a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800631e:	b29b      	uxth	r3, r3
 8006320:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006328:	2b01      	cmp	r3, #1
 800632a:	f040 82ac 	bne.w	8006886 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	695a      	ldr	r2, [r3, #20]
 8006332:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006336:	441a      	add	r2, r3
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	69da      	ldr	r2, [r3, #28]
 8006340:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006344:	441a      	add	r2, r3
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	6a1a      	ldr	r2, [r3, #32]
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	429a      	cmp	r2, r3
 8006354:	d30b      	bcc.n	800636e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	6a1a      	ldr	r2, [r3, #32]
 8006362:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006366:	1ad2      	subs	r2, r2, r3
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	621a      	str	r2, [r3, #32]
 800636c:	e017      	b.n	800639e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d108      	bne.n	8006388 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8006376:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800637a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006386:	e00a      	b.n	800639e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	6a1b      	ldr	r3, [r3, #32]
 8006394:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	2200      	movs	r2, #0
 800639c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	785b      	ldrb	r3, [r3, #1]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d165      	bne.n	8006472 <HAL_PCD_EP_DB_Transmit+0x37e>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	461a      	mov	r2, r3
 80063b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ba:	4413      	add	r3, r2
 80063bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	00da      	lsls	r2, r3, #3
 80063c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063c6:	4413      	add	r3, r2
 80063c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80063cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80063ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d0:	881b      	ldrh	r3, [r3, #0]
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063d8:	b29a      	uxth	r2, r3
 80063da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063dc:	801a      	strh	r2, [r3, #0]
 80063de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063e2:	2b3e      	cmp	r3, #62	; 0x3e
 80063e4:	d91d      	bls.n	8006422 <HAL_PCD_EP_DB_Transmit+0x32e>
 80063e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063ea:	095b      	lsrs	r3, r3, #5
 80063ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80063ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063f2:	f003 031f 	and.w	r3, r3, #31
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d102      	bne.n	8006400 <HAL_PCD_EP_DB_Transmit+0x30c>
 80063fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063fc:	3b01      	subs	r3, #1
 80063fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006402:	881b      	ldrh	r3, [r3, #0]
 8006404:	b29a      	uxth	r2, r3
 8006406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006408:	b29b      	uxth	r3, r3
 800640a:	029b      	lsls	r3, r3, #10
 800640c:	b29b      	uxth	r3, r3
 800640e:	4313      	orrs	r3, r2
 8006410:	b29b      	uxth	r3, r3
 8006412:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006416:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800641a:	b29a      	uxth	r2, r3
 800641c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641e:	801a      	strh	r2, [r3, #0]
 8006420:	e044      	b.n	80064ac <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006422:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10a      	bne.n	8006440 <HAL_PCD_EP_DB_Transmit+0x34c>
 800642a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	b29b      	uxth	r3, r3
 8006430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006438:	b29a      	uxth	r2, r3
 800643a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643c:	801a      	strh	r2, [r3, #0]
 800643e:	e035      	b.n	80064ac <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006440:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006444:	085b      	lsrs	r3, r3, #1
 8006446:	64bb      	str	r3, [r7, #72]	; 0x48
 8006448:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800644c:	f003 0301 	and.w	r3, r3, #1
 8006450:	2b00      	cmp	r3, #0
 8006452:	d002      	beq.n	800645a <HAL_PCD_EP_DB_Transmit+0x366>
 8006454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006456:	3301      	adds	r3, #1
 8006458:	64bb      	str	r3, [r7, #72]	; 0x48
 800645a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	b29a      	uxth	r2, r3
 8006460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006462:	b29b      	uxth	r3, r3
 8006464:	029b      	lsls	r3, r3, #10
 8006466:	b29b      	uxth	r3, r3
 8006468:	4313      	orrs	r3, r2
 800646a:	b29a      	uxth	r2, r3
 800646c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646e:	801a      	strh	r2, [r3, #0]
 8006470:	e01c      	b.n	80064ac <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	785b      	ldrb	r3, [r3, #1]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d118      	bne.n	80064ac <HAL_PCD_EP_DB_Transmit+0x3b8>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	647b      	str	r3, [r7, #68]	; 0x44
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006488:	b29b      	uxth	r3, r3
 800648a:	461a      	mov	r2, r3
 800648c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800648e:	4413      	add	r3, r2
 8006490:	647b      	str	r3, [r7, #68]	; 0x44
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	00da      	lsls	r2, r3, #3
 8006498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800649a:	4413      	add	r3, r2
 800649c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80064a0:	643b      	str	r3, [r7, #64]	; 0x40
 80064a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064aa:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6818      	ldr	r0, [r3, #0]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	6959      	ldr	r1, [r3, #20]
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	891a      	ldrh	r2, [r3, #8]
 80064b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064bc:	b29b      	uxth	r3, r3
 80064be:	f004 fd8b 	bl	800afd8 <USB_WritePMA>
 80064c2:	e1e0      	b.n	8006886 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	461a      	mov	r2, r3
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	00db      	lsls	r3, r3, #3
 80064d6:	4413      	add	r3, r2
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	6812      	ldr	r2, [r2, #0]
 80064dc:	4413      	add	r3, r2
 80064de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064e2:	881b      	ldrh	r3, [r3, #0]
 80064e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064e8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	699a      	ldr	r2, [r3, #24]
 80064f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d307      	bcc.n	8006508 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	699a      	ldr	r2, [r3, #24]
 80064fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006500:	1ad2      	subs	r2, r2, r3
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	619a      	str	r2, [r3, #24]
 8006506:	e002      	b.n	800650e <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	2200      	movs	r2, #0
 800650c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	2b00      	cmp	r3, #0
 8006514:	f040 80c0 	bne.w	8006698 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	785b      	ldrb	r3, [r3, #1]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d126      	bne.n	800656e <HAL_PCD_EP_DB_Transmit+0x47a>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800652e:	b29b      	uxth	r3, r3
 8006530:	461a      	mov	r2, r3
 8006532:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006534:	4413      	add	r3, r2
 8006536:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	00da      	lsls	r2, r3, #3
 800653e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006540:	4413      	add	r3, r2
 8006542:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006546:	67bb      	str	r3, [r7, #120]	; 0x78
 8006548:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800654a:	881b      	ldrh	r3, [r3, #0]
 800654c:	b29b      	uxth	r3, r3
 800654e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006552:	b29a      	uxth	r2, r3
 8006554:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006556:	801a      	strh	r2, [r3, #0]
 8006558:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800655a:	881b      	ldrh	r3, [r3, #0]
 800655c:	b29b      	uxth	r3, r3
 800655e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006566:	b29a      	uxth	r2, r3
 8006568:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800656a:	801a      	strh	r2, [r3, #0]
 800656c:	e01a      	b.n	80065a4 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	785b      	ldrb	r3, [r3, #1]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d116      	bne.n	80065a4 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	667b      	str	r3, [r7, #100]	; 0x64
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006584:	b29b      	uxth	r3, r3
 8006586:	461a      	mov	r2, r3
 8006588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800658a:	4413      	add	r3, r2
 800658c:	667b      	str	r3, [r7, #100]	; 0x64
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	00da      	lsls	r2, r3, #3
 8006594:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006596:	4413      	add	r3, r2
 8006598:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800659c:	663b      	str	r3, [r7, #96]	; 0x60
 800659e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065a0:	2200      	movs	r2, #0
 80065a2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	677b      	str	r3, [r7, #116]	; 0x74
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	785b      	ldrb	r3, [r3, #1]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d12b      	bne.n	800660a <HAL_PCD_EP_DB_Transmit+0x516>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	461a      	mov	r2, r3
 80065c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065c6:	4413      	add	r3, r2
 80065c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	00da      	lsls	r2, r3, #3
 80065d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065d2:	4413      	add	r3, r2
 80065d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80065e0:	881b      	ldrh	r3, [r3, #0]
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80065ee:	801a      	strh	r2, [r3, #0]
 80065f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80065f4:	881b      	ldrh	r3, [r3, #0]
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006600:	b29a      	uxth	r2, r3
 8006602:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006606:	801a      	strh	r2, [r3, #0]
 8006608:	e017      	b.n	800663a <HAL_PCD_EP_DB_Transmit+0x546>
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	785b      	ldrb	r3, [r3, #1]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d113      	bne.n	800663a <HAL_PCD_EP_DB_Transmit+0x546>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800661a:	b29b      	uxth	r3, r3
 800661c:	461a      	mov	r2, r3
 800661e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006620:	4413      	add	r3, r2
 8006622:	677b      	str	r3, [r7, #116]	; 0x74
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	00da      	lsls	r2, r3, #3
 800662a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800662c:	4413      	add	r3, r2
 800662e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006632:	673b      	str	r3, [r7, #112]	; 0x70
 8006634:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006636:	2200      	movs	r2, #0
 8006638:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	4619      	mov	r1, r3
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f007 f8f0 	bl	800d826 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006646:	88fb      	ldrh	r3, [r7, #6]
 8006648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800664c:	2b00      	cmp	r3, #0
 800664e:	f040 811a 	bne.w	8006886 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	461a      	mov	r2, r3
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4413      	add	r3, r2
 8006660:	881b      	ldrh	r3, [r3, #0]
 8006662:	b29b      	uxth	r3, r3
 8006664:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800666c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	461a      	mov	r2, r3
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	441a      	add	r2, r3
 800667e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8006682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800668a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800668e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006692:	b29b      	uxth	r3, r3
 8006694:	8013      	strh	r3, [r2, #0]
 8006696:	e0f6      	b.n	8006886 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006698:	88fb      	ldrh	r3, [r7, #6]
 800669a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d121      	bne.n	80066e6 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	461a      	mov	r2, r3
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	881b      	ldrh	r3, [r3, #0]
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	461a      	mov	r2, r3
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	441a      	add	r2, r3
 80066ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80066d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	f040 80ca 	bne.w	8006886 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	695a      	ldr	r2, [r3, #20]
 80066f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80066fa:	441a      	add	r2, r3
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	69da      	ldr	r2, [r3, #28]
 8006704:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006708:	441a      	add	r2, r3
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	6a1a      	ldr	r2, [r3, #32]
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	429a      	cmp	r2, r3
 8006718:	d30b      	bcc.n	8006732 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	6a1a      	ldr	r2, [r3, #32]
 8006726:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800672a:	1ad2      	subs	r2, r2, r3
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	621a      	str	r2, [r3, #32]
 8006730:	e017      	b.n	8006762 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d108      	bne.n	800674c <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800673a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800673e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800674a:	e00a      	b.n	8006762 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	2200      	movs	r2, #0
 8006758:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	657b      	str	r3, [r7, #84]	; 0x54
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	785b      	ldrb	r3, [r3, #1]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d165      	bne.n	800683c <HAL_PCD_EP_DB_Transmit+0x748>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800677e:	b29b      	uxth	r3, r3
 8006780:	461a      	mov	r2, r3
 8006782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006784:	4413      	add	r3, r2
 8006786:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	00da      	lsls	r2, r3, #3
 800678e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006790:	4413      	add	r3, r2
 8006792:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006796:	65bb      	str	r3, [r7, #88]	; 0x58
 8006798:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800679a:	881b      	ldrh	r3, [r3, #0]
 800679c:	b29b      	uxth	r3, r3
 800679e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067a6:	801a      	strh	r2, [r3, #0]
 80067a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067ac:	2b3e      	cmp	r3, #62	; 0x3e
 80067ae:	d91d      	bls.n	80067ec <HAL_PCD_EP_DB_Transmit+0x6f8>
 80067b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067b4:	095b      	lsrs	r3, r3, #5
 80067b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80067b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067bc:	f003 031f 	and.w	r3, r3, #31
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d102      	bne.n	80067ca <HAL_PCD_EP_DB_Transmit+0x6d6>
 80067c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067c6:	3b01      	subs	r3, #1
 80067c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80067ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	029b      	lsls	r3, r3, #10
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	4313      	orrs	r3, r2
 80067da:	b29b      	uxth	r3, r3
 80067dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067e8:	801a      	strh	r2, [r3, #0]
 80067ea:	e041      	b.n	8006870 <HAL_PCD_EP_DB_Transmit+0x77c>
 80067ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10a      	bne.n	800680a <HAL_PCD_EP_DB_Transmit+0x716>
 80067f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067f6:	881b      	ldrh	r3, [r3, #0]
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006802:	b29a      	uxth	r2, r3
 8006804:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006806:	801a      	strh	r2, [r3, #0]
 8006808:	e032      	b.n	8006870 <HAL_PCD_EP_DB_Transmit+0x77c>
 800680a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800680e:	085b      	lsrs	r3, r3, #1
 8006810:	66bb      	str	r3, [r7, #104]	; 0x68
 8006812:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	d002      	beq.n	8006824 <HAL_PCD_EP_DB_Transmit+0x730>
 800681e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006820:	3301      	adds	r3, #1
 8006822:	66bb      	str	r3, [r7, #104]	; 0x68
 8006824:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006826:	881b      	ldrh	r3, [r3, #0]
 8006828:	b29a      	uxth	r2, r3
 800682a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800682c:	b29b      	uxth	r3, r3
 800682e:	029b      	lsls	r3, r3, #10
 8006830:	b29b      	uxth	r3, r3
 8006832:	4313      	orrs	r3, r2
 8006834:	b29a      	uxth	r2, r3
 8006836:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006838:	801a      	strh	r2, [r3, #0]
 800683a:	e019      	b.n	8006870 <HAL_PCD_EP_DB_Transmit+0x77c>
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	785b      	ldrb	r3, [r3, #1]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d115      	bne.n	8006870 <HAL_PCD_EP_DB_Transmit+0x77c>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800684c:	b29b      	uxth	r3, r3
 800684e:	461a      	mov	r2, r3
 8006850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006852:	4413      	add	r3, r2
 8006854:	657b      	str	r3, [r7, #84]	; 0x54
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	00da      	lsls	r2, r3, #3
 800685c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800685e:	4413      	add	r3, r2
 8006860:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006864:	653b      	str	r3, [r7, #80]	; 0x50
 8006866:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800686a:	b29a      	uxth	r2, r3
 800686c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800686e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6818      	ldr	r0, [r3, #0]
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	6959      	ldr	r1, [r3, #20]
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	895a      	ldrh	r2, [r3, #10]
 800687c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006880:	b29b      	uxth	r3, r3
 8006882:	f004 fba9 	bl	800afd8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	461a      	mov	r2, r3
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	4413      	add	r3, r2
 8006894:	881b      	ldrh	r3, [r3, #0]
 8006896:	b29b      	uxth	r3, r3
 8006898:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800689c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068a0:	82bb      	strh	r3, [r7, #20]
 80068a2:	8abb      	ldrh	r3, [r7, #20]
 80068a4:	f083 0310 	eor.w	r3, r3, #16
 80068a8:	82bb      	strh	r3, [r7, #20]
 80068aa:	8abb      	ldrh	r3, [r7, #20]
 80068ac:	f083 0320 	eor.w	r3, r3, #32
 80068b0:	82bb      	strh	r3, [r7, #20]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	461a      	mov	r2, r3
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	441a      	add	r2, r3
 80068c0:	8abb      	ldrh	r3, [r7, #20]
 80068c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3790      	adds	r7, #144	; 0x90
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b087      	sub	sp, #28
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	607b      	str	r3, [r7, #4]
 80068ea:	460b      	mov	r3, r1
 80068ec:	817b      	strh	r3, [r7, #10]
 80068ee:	4613      	mov	r3, r2
 80068f0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80068f2:	897b      	ldrh	r3, [r7, #10]
 80068f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00b      	beq.n	8006916 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068fe:	897b      	ldrh	r3, [r7, #10]
 8006900:	f003 0307 	and.w	r3, r3, #7
 8006904:	1c5a      	adds	r2, r3, #1
 8006906:	4613      	mov	r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	4413      	add	r3, r2
 800690c:	00db      	lsls	r3, r3, #3
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	4413      	add	r3, r2
 8006912:	617b      	str	r3, [r7, #20]
 8006914:	e009      	b.n	800692a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006916:	897a      	ldrh	r2, [r7, #10]
 8006918:	4613      	mov	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	00db      	lsls	r3, r3, #3
 8006920:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	4413      	add	r3, r2
 8006928:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800692a:	893b      	ldrh	r3, [r7, #8]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d107      	bne.n	8006940 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	2200      	movs	r2, #0
 8006934:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	b29a      	uxth	r2, r3
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	80da      	strh	r2, [r3, #6]
 800693e:	e00b      	b.n	8006958 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	2201      	movs	r2, #1
 8006944:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	b29a      	uxth	r2, r3
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	0c1b      	lsrs	r3, r3, #16
 8006952:	b29a      	uxth	r2, r3
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	371c      	adds	r7, #28
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006966:	b480      	push	{r7}
 8006968:	b085      	sub	sp, #20
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800698a:	b29b      	uxth	r3, r3
 800698c:	f043 0301 	orr.w	r3, r3, #1
 8006990:	b29a      	uxth	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800699e:	b29b      	uxth	r3, r3
 80069a0:	f043 0302 	orr.w	r3, r3, #2
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3714      	adds	r7, #20
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
	...

080069bc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80069bc:	b480      	push	{r7}
 80069be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069c0:	4b05      	ldr	r3, [pc, #20]	; (80069d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a04      	ldr	r2, [pc, #16]	; (80069d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80069c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069ca:	6013      	str	r3, [r2, #0]
}
 80069cc:	bf00      	nop
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	58000400 	.word	0x58000400

080069dc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80069dc:	b480      	push	{r7}
 80069de:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80069e0:	4b04      	ldr	r3, [pc, #16]	; (80069f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	58000400 	.word	0x58000400

080069f8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80069f8:	b480      	push	{r7}
 80069fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80069fc:	4b05      	ldr	r3, [pc, #20]	; (8006a14 <HAL_PWREx_EnableVddUSB+0x1c>)
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	4a04      	ldr	r2, [pc, #16]	; (8006a14 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006a02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a06:	6053      	str	r3, [r2, #4]
}
 8006a08:	bf00      	nop
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	58000400 	.word	0x58000400

08006a18 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a2a:	d101      	bne.n	8006a30 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e000      	b.n	8006a32 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a4e:	6013      	str	r3, [r2, #0]
}
 8006a50:	bf00      	nop
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a6c:	6013      	str	r3, [r2, #0]
}
 8006a6e:	bf00      	nop
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a8a:	d101      	bne.n	8006a90 <LL_RCC_HSE_IsReady+0x18>
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e000      	b.n	8006a92 <LL_RCC_HSE_IsReady+0x1a>
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aae:	6013      	str	r3, [r2, #0]
}
 8006ab0:	bf00      	nop
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8006aba:	b480      	push	{r7}
 8006abc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006acc:	6013      	str	r3, [r2, #0]
}
 8006ace:	bf00      	nop
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aea:	d101      	bne.n	8006af0 <LL_RCC_HSI_IsReady+0x18>
 8006aec:	2301      	movs	r3, #1
 8006aee:	e000      	b.n	8006af2 <LL_RCC_HSI_IsReady+0x1a>
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	061b      	lsls	r3, r3, #24
 8006b12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b16:	4313      	orrs	r3, r2
 8006b18:	604b      	str	r3, [r1, #4]
}
 8006b1a:	bf00      	nop
 8006b1c:	370c      	adds	r7, #12
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr

08006b26 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8006b26:	b480      	push	{r7}
 8006b28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b36:	f043 0301 	orr.w	r3, r3, #1
 8006b3a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8006b3e:	bf00      	nop
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b58:	f023 0301 	bic.w	r3, r3, #1
 8006b5c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8006b60:	bf00      	nop
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8006b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b76:	f003 0302 	and.w	r3, r3, #2
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d101      	bne.n	8006b82 <LL_RCC_HSI48_IsReady+0x18>
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e000      	b.n	8006b84 <LL_RCC_HSI48_IsReady+0x1a>
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b9e:	f043 0301 	orr.w	r3, r3, #1
 8006ba2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006ba6:	bf00      	nop
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bc0:	f023 0301 	bic.w	r3, r3, #1
 8006bc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006bc8:	bf00      	nop
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr

08006bd2 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8006bd2:	b480      	push	{r7}
 8006bd4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006be2:	f043 0304 	orr.w	r3, r3, #4
 8006be6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006bea:	bf00      	nop
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c04:	f023 0304 	bic.w	r3, r3, #4
 8006c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006c0c:	bf00      	nop
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8006c16:	b480      	push	{r7}
 8006c18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c22:	f003 0302 	and.w	r3, r3, #2
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d101      	bne.n	8006c2e <LL_RCC_LSE_IsReady+0x18>
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e000      	b.n	8006c30 <LL_RCC_LSE_IsReady+0x1a>
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c4a:	f043 0301 	orr.w	r3, r3, #1
 8006c4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006c52:	bf00      	nop
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c6c:	f023 0301 	bic.w	r3, r3, #1
 8006c70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006c74:	bf00      	nop
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr

08006c7e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8006c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c8a:	f003 0302 	and.w	r3, r3, #2
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d101      	bne.n	8006c96 <LL_RCC_LSI1_IsReady+0x18>
 8006c92:	2301      	movs	r3, #1
 8006c94:	e000      	b.n	8006c98 <LL_RCC_LSI1_IsReady+0x1a>
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006cb2:	f043 0304 	orr.w	r3, r3, #4
 8006cb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006cba:	bf00      	nop
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006cd4:	f023 0304 	bic.w	r3, r3, #4
 8006cd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006cdc:	bf00      	nop
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8006cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cf2:	f003 0308 	and.w	r3, r3, #8
 8006cf6:	2b08      	cmp	r3, #8
 8006cf8:	d101      	bne.n	8006cfe <LL_RCC_LSI2_IsReady+0x18>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e000      	b.n	8006d00 <LL_RCC_LSI2_IsReady+0x1a>
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	b083      	sub	sp, #12
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8006d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d1a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	021b      	lsls	r3, r3, #8
 8006d22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d26:	4313      	orrs	r3, r2
 8006d28:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d46:	f043 0301 	orr.w	r3, r3, #1
 8006d4a:	6013      	str	r3, [r2, #0]
}
 8006d4c:	bf00      	nop
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8006d56:	b480      	push	{r7}
 8006d58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d64:	f023 0301 	bic.w	r3, r3, #1
 8006d68:	6013      	str	r3, [r2, #0]
}
 8006d6a:	bf00      	nop
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8006d74:	b480      	push	{r7}
 8006d76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0302 	and.w	r3, r3, #2
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d101      	bne.n	8006d8a <LL_RCC_MSI_IsReady+0x16>
 8006d86:	2301      	movs	r3, #1
 8006d88:	e000      	b.n	8006d8c <LL_RCC_MSI_IsReady+0x18>
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b083      	sub	sp, #12
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8006d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006da8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	600b      	str	r3, [r1, #0]
}
 8006db2:	bf00      	nop
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b083      	sub	sp, #12
 8006dc2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dce:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2bb0      	cmp	r3, #176	; 0xb0
 8006dd4:	d901      	bls.n	8006dda <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8006dd6:	23b0      	movs	r3, #176	; 0xb0
 8006dd8:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8006dda:	687b      	ldr	r3, [r7, #4]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	021b      	lsls	r3, r3, #8
 8006dfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e02:	4313      	orrs	r3, r2
 8006e04:	604b      	str	r3, [r1, #4]
}
 8006e06:	bf00      	nop
 8006e08:	370c      	adds	r7, #12
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr

08006e12 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8006e12:	b480      	push	{r7}
 8006e14:	b083      	sub	sp, #12
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f023 0203 	bic.w	r2, r3, #3
 8006e24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	608b      	str	r3, [r1, #8]
}
 8006e2e:	bf00      	nop
 8006e30:	370c      	adds	r7, #12
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr

08006e3a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	f003 030c 	and.w	r3, r3, #12
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr

08006e52 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8006e52:	b480      	push	{r7}
 8006e54:	b083      	sub	sp, #12
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	608b      	str	r3, [r1, #8]
}
 8006e6e:	bf00      	nop
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	b083      	sub	sp, #12
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e86:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006e8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006e9a:	bf00      	nop
 8006e9c:	370c      	adds	r7, #12
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b083      	sub	sp, #12
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eb2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006eb6:	f023 020f 	bic.w	r2, r3, #15
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	091b      	lsrs	r3, r3, #4
 8006ebe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ee6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	608b      	str	r3, [r1, #8]
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006f0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	608b      	str	r3, [r1, #8]
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006f24:	b480      	push	{r7}
 8006f26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f44:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006f48:	011b      	lsls	r3, r3, #4
 8006f4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f6a:	6013      	str	r3, [r2, #0]
}
 8006f6c:	bf00      	nop
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006f76:	b480      	push	{r7}
 8006f78:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f88:	6013      	str	r3, [r2, #0]
}
 8006f8a:	bf00      	nop
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006f94:	b480      	push	{r7}
 8006f96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fa2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fa6:	d101      	bne.n	8006fac <LL_RCC_PLL_IsReady+0x18>
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e000      	b.n	8006fae <LL_RCC_PLL_IsReady+0x1a>
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	0a1b      	lsrs	r3, r3, #8
 8006fc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr

08006fea <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006fea:	b480      	push	{r7}
 8006fec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8007002:	b480      	push	{r7}
 8007004:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	f003 0303 	and.w	r3, r3, #3
}
 8007010:	4618      	mov	r0, r3
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr

0800701a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800701a:	b480      	push	{r7}
 800701c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800701e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800702c:	d101      	bne.n	8007032 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800702e:	2301      	movs	r3, #1
 8007030:	e000      	b.n	8007034 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800703e:	b480      	push	{r7}
 8007040:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8007042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007046:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800704a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800704e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007052:	d101      	bne.n	8007058 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8007054:	2301      	movs	r3, #1
 8007056:	e000      	b.n	800705a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8007064:	b480      	push	{r7}
 8007066:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8007068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800706c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007078:	d101      	bne.n	800707e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800707a:	2301      	movs	r3, #1
 800707c:	e000      	b.n	8007080 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr

0800708a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800708a:	b480      	push	{r7}
 800708c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800708e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007098:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800709c:	d101      	bne.n	80070a2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800709e:	2301      	movs	r3, #1
 80070a0:	e000      	b.n	80070a4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr

080070ae <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80070ae:	b480      	push	{r7}
 80070b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80070b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80070c0:	d101      	bne.n	80070c6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80070c2:	2301      	movs	r3, #1
 80070c4:	e000      	b.n	80070c8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
	...

080070d4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070d4:	b590      	push	{r4, r7, lr}
 80070d6:	b08d      	sub	sp, #52	; 0x34
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e363      	b.n	80077ae <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0320 	and.w	r3, r3, #32
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f000 808d 	beq.w	800720e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070f4:	f7ff fea1 	bl	8006e3a <LL_RCC_GetSysClkSource>
 80070f8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80070fa:	f7ff ff82 	bl	8007002 <LL_RCC_PLL_GetMainSource>
 80070fe:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007102:	2b00      	cmp	r3, #0
 8007104:	d005      	beq.n	8007112 <HAL_RCC_OscConfig+0x3e>
 8007106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007108:	2b0c      	cmp	r3, #12
 800710a:	d147      	bne.n	800719c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800710c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710e:	2b01      	cmp	r3, #1
 8007110:	d144      	bne.n	800719c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	69db      	ldr	r3, [r3, #28]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e347      	b.n	80077ae <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007122:	f7ff fe4c 	bl	8006dbe <LL_RCC_MSI_GetRange>
 8007126:	4603      	mov	r3, r0
 8007128:	429c      	cmp	r4, r3
 800712a:	d914      	bls.n	8007156 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007130:	4618      	mov	r0, r3
 8007132:	f000 fd05 	bl	8007b40 <RCC_SetFlashLatencyFromMSIRange>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d001      	beq.n	8007140 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e336      	b.n	80077ae <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007144:	4618      	mov	r0, r3
 8007146:	f7ff fe26 	bl	8006d96 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	4618      	mov	r0, r3
 8007150:	f7ff fe4a 	bl	8006de8 <LL_RCC_MSI_SetCalibTrimming>
 8007154:	e013      	b.n	800717e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715a:	4618      	mov	r0, r3
 800715c:	f7ff fe1b 	bl	8006d96 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a1b      	ldr	r3, [r3, #32]
 8007164:	4618      	mov	r0, r3
 8007166:	f7ff fe3f 	bl	8006de8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716e:	4618      	mov	r0, r3
 8007170:	f000 fce6 	bl	8007b40 <RCC_SetFlashLatencyFromMSIRange>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e317      	b.n	80077ae <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800717e:	f000 fccb 	bl	8007b18 <HAL_RCC_GetHCLKFreq>
 8007182:	4603      	mov	r3, r0
 8007184:	4aa4      	ldr	r2, [pc, #656]	; (8007418 <HAL_RCC_OscConfig+0x344>)
 8007186:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007188:	4ba4      	ldr	r3, [pc, #656]	; (800741c <HAL_RCC_OscConfig+0x348>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4618      	mov	r0, r3
 800718e:	f7fd fbeb 	bl	8004968 <HAL_InitTick>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d039      	beq.n	800720c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e308      	b.n	80077ae <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	69db      	ldr	r3, [r3, #28]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d01e      	beq.n	80071e2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80071a4:	f7ff fdc8 	bl	8006d38 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80071a8:	f7fd fc2c 	bl	8004a04 <HAL_GetTick>
 80071ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80071ae:	e008      	b.n	80071c2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80071b0:	f7fd fc28 	bl	8004a04 <HAL_GetTick>
 80071b4:	4602      	mov	r2, r0
 80071b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d901      	bls.n	80071c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e2f5      	b.n	80077ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80071c2:	f7ff fdd7 	bl	8006d74 <LL_RCC_MSI_IsReady>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d0f1      	beq.n	80071b0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7ff fde0 	bl	8006d96 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a1b      	ldr	r3, [r3, #32]
 80071da:	4618      	mov	r0, r3
 80071dc:	f7ff fe04 	bl	8006de8 <LL_RCC_MSI_SetCalibTrimming>
 80071e0:	e015      	b.n	800720e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80071e2:	f7ff fdb8 	bl	8006d56 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80071e6:	f7fd fc0d 	bl	8004a04 <HAL_GetTick>
 80071ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80071ec:	e008      	b.n	8007200 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80071ee:	f7fd fc09 	bl	8004a04 <HAL_GetTick>
 80071f2:	4602      	mov	r2, r0
 80071f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f6:	1ad3      	subs	r3, r2, r3
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d901      	bls.n	8007200 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80071fc:	2303      	movs	r3, #3
 80071fe:	e2d6      	b.n	80077ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8007200:	f7ff fdb8 	bl	8006d74 <LL_RCC_MSI_IsReady>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1f1      	bne.n	80071ee <HAL_RCC_OscConfig+0x11a>
 800720a:	e000      	b.n	800720e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800720c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	2b00      	cmp	r3, #0
 8007218:	d047      	beq.n	80072aa <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800721a:	f7ff fe0e 	bl	8006e3a <LL_RCC_GetSysClkSource>
 800721e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007220:	f7ff feef 	bl	8007002 <LL_RCC_PLL_GetMainSource>
 8007224:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	2b08      	cmp	r3, #8
 800722a:	d005      	beq.n	8007238 <HAL_RCC_OscConfig+0x164>
 800722c:	6a3b      	ldr	r3, [r7, #32]
 800722e:	2b0c      	cmp	r3, #12
 8007230:	d108      	bne.n	8007244 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	2b03      	cmp	r3, #3
 8007236:	d105      	bne.n	8007244 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d134      	bne.n	80072aa <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e2b4      	b.n	80077ae <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800724c:	d102      	bne.n	8007254 <HAL_RCC_OscConfig+0x180>
 800724e:	f7ff fbf5 	bl	8006a3c <LL_RCC_HSE_Enable>
 8007252:	e001      	b.n	8007258 <HAL_RCC_OscConfig+0x184>
 8007254:	f7ff fc01 	bl	8006a5a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d012      	beq.n	8007286 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007260:	f7fd fbd0 	bl	8004a04 <HAL_GetTick>
 8007264:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8007266:	e008      	b.n	800727a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007268:	f7fd fbcc 	bl	8004a04 <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	2b64      	cmp	r3, #100	; 0x64
 8007274:	d901      	bls.n	800727a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e299      	b.n	80077ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800727a:	f7ff fbfd 	bl	8006a78 <LL_RCC_HSE_IsReady>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d0f1      	beq.n	8007268 <HAL_RCC_OscConfig+0x194>
 8007284:	e011      	b.n	80072aa <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007286:	f7fd fbbd 	bl	8004a04 <HAL_GetTick>
 800728a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800728c:	e008      	b.n	80072a0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800728e:	f7fd fbb9 	bl	8004a04 <HAL_GetTick>
 8007292:	4602      	mov	r2, r0
 8007294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	2b64      	cmp	r3, #100	; 0x64
 800729a:	d901      	bls.n	80072a0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e286      	b.n	80077ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80072a0:	f7ff fbea 	bl	8006a78 <LL_RCC_HSE_IsReady>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1f1      	bne.n	800728e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0302 	and.w	r3, r3, #2
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d04c      	beq.n	8007350 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072b6:	f7ff fdc0 	bl	8006e3a <LL_RCC_GetSysClkSource>
 80072ba:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80072bc:	f7ff fea1 	bl	8007002 <LL_RCC_PLL_GetMainSource>
 80072c0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	2b04      	cmp	r3, #4
 80072c6:	d005      	beq.n	80072d4 <HAL_RCC_OscConfig+0x200>
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	2b0c      	cmp	r3, #12
 80072cc:	d10e      	bne.n	80072ec <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d10b      	bne.n	80072ec <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d101      	bne.n	80072e0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e266      	b.n	80077ae <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7ff fc09 	bl	8006afc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80072ea:	e031      	b.n	8007350 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d019      	beq.n	8007328 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072f4:	f7ff fbd2 	bl	8006a9c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072f8:	f7fd fb84 	bl	8004a04 <HAL_GetTick>
 80072fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80072fe:	e008      	b.n	8007312 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007300:	f7fd fb80 	bl	8004a04 <HAL_GetTick>
 8007304:	4602      	mov	r2, r0
 8007306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	2b02      	cmp	r3, #2
 800730c:	d901      	bls.n	8007312 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800730e:	2303      	movs	r3, #3
 8007310:	e24d      	b.n	80077ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8007312:	f7ff fbe1 	bl	8006ad8 <LL_RCC_HSI_IsReady>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d0f1      	beq.n	8007300 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	4618      	mov	r0, r3
 8007322:	f7ff fbeb 	bl	8006afc <LL_RCC_HSI_SetCalibTrimming>
 8007326:	e013      	b.n	8007350 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007328:	f7ff fbc7 	bl	8006aba <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800732c:	f7fd fb6a 	bl	8004a04 <HAL_GetTick>
 8007330:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8007332:	e008      	b.n	8007346 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007334:	f7fd fb66 	bl	8004a04 <HAL_GetTick>
 8007338:	4602      	mov	r2, r0
 800733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	2b02      	cmp	r3, #2
 8007340:	d901      	bls.n	8007346 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8007342:	2303      	movs	r3, #3
 8007344:	e233      	b.n	80077ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8007346:	f7ff fbc7 	bl	8006ad8 <LL_RCC_HSI_IsReady>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1f1      	bne.n	8007334 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0308 	and.w	r3, r3, #8
 8007358:	2b00      	cmp	r3, #0
 800735a:	d106      	bne.n	800736a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007364:	2b00      	cmp	r3, #0
 8007366:	f000 80a3 	beq.w	80074b0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d076      	beq.n	8007460 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0310 	and.w	r3, r3, #16
 800737a:	2b00      	cmp	r3, #0
 800737c:	d046      	beq.n	800740c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800737e:	f7ff fc7e 	bl	8006c7e <LL_RCC_LSI1_IsReady>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d113      	bne.n	80073b0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8007388:	f7ff fc57 	bl	8006c3a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800738c:	f7fd fb3a 	bl	8004a04 <HAL_GetTick>
 8007390:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007392:	e008      	b.n	80073a6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007394:	f7fd fb36 	bl	8004a04 <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d901      	bls.n	80073a6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e203      	b.n	80077ae <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80073a6:	f7ff fc6a 	bl	8006c7e <LL_RCC_LSI1_IsReady>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d0f1      	beq.n	8007394 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80073b0:	f7ff fc77 	bl	8006ca2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073b4:	f7fd fb26 	bl	8004a04 <HAL_GetTick>
 80073b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80073ba:	e008      	b.n	80073ce <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80073bc:	f7fd fb22 	bl	8004a04 <HAL_GetTick>
 80073c0:	4602      	mov	r2, r0
 80073c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	2b03      	cmp	r3, #3
 80073c8:	d901      	bls.n	80073ce <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80073ca:	2303      	movs	r3, #3
 80073cc:	e1ef      	b.n	80077ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80073ce:	f7ff fc8a 	bl	8006ce6 <LL_RCC_LSI2_IsReady>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d0f1      	beq.n	80073bc <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	4618      	mov	r0, r3
 80073de:	f7ff fc94 	bl	8006d0a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80073e2:	f7ff fc3b 	bl	8006c5c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073e6:	f7fd fb0d 	bl	8004a04 <HAL_GetTick>
 80073ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80073ec:	e008      	b.n	8007400 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80073ee:	f7fd fb09 	bl	8004a04 <HAL_GetTick>
 80073f2:	4602      	mov	r2, r0
 80073f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d901      	bls.n	8007400 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	e1d6      	b.n	80077ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007400:	f7ff fc3d 	bl	8006c7e <LL_RCC_LSI1_IsReady>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1f1      	bne.n	80073ee <HAL_RCC_OscConfig+0x31a>
 800740a:	e051      	b.n	80074b0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800740c:	f7ff fc15 	bl	8006c3a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007410:	f7fd faf8 	bl	8004a04 <HAL_GetTick>
 8007414:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007416:	e00c      	b.n	8007432 <HAL_RCC_OscConfig+0x35e>
 8007418:	2000000c 	.word	0x2000000c
 800741c:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007420:	f7fd faf0 	bl	8004a04 <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	2b02      	cmp	r3, #2
 800742c:	d901      	bls.n	8007432 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	e1bd      	b.n	80077ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007432:	f7ff fc24 	bl	8006c7e <LL_RCC_LSI1_IsReady>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d0f1      	beq.n	8007420 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800743c:	f7ff fc42 	bl	8006cc4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007440:	e008      	b.n	8007454 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007442:	f7fd fadf 	bl	8004a04 <HAL_GetTick>
 8007446:	4602      	mov	r2, r0
 8007448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	2b03      	cmp	r3, #3
 800744e:	d901      	bls.n	8007454 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8007450:	2303      	movs	r3, #3
 8007452:	e1ac      	b.n	80077ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007454:	f7ff fc47 	bl	8006ce6 <LL_RCC_LSI2_IsReady>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1f1      	bne.n	8007442 <HAL_RCC_OscConfig+0x36e>
 800745e:	e027      	b.n	80074b0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8007460:	f7ff fc30 	bl	8006cc4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007464:	f7fd face 	bl	8004a04 <HAL_GetTick>
 8007468:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800746a:	e008      	b.n	800747e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800746c:	f7fd faca 	bl	8004a04 <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	2b03      	cmp	r3, #3
 8007478:	d901      	bls.n	800747e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e197      	b.n	80077ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800747e:	f7ff fc32 	bl	8006ce6 <LL_RCC_LSI2_IsReady>
 8007482:	4603      	mov	r3, r0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1f1      	bne.n	800746c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8007488:	f7ff fbe8 	bl	8006c5c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800748c:	f7fd faba 	bl	8004a04 <HAL_GetTick>
 8007490:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007492:	e008      	b.n	80074a6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007494:	f7fd fab6 	bl	8004a04 <HAL_GetTick>
 8007498:	4602      	mov	r2, r0
 800749a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749c:	1ad3      	subs	r3, r2, r3
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d901      	bls.n	80074a6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80074a2:	2303      	movs	r3, #3
 80074a4:	e183      	b.n	80077ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80074a6:	f7ff fbea 	bl	8006c7e <LL_RCC_LSI1_IsReady>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1f1      	bne.n	8007494 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0304 	and.w	r3, r3, #4
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d05b      	beq.n	8007574 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074bc:	4ba7      	ldr	r3, [pc, #668]	; (800775c <HAL_RCC_OscConfig+0x688>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d114      	bne.n	80074f2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80074c8:	f7ff fa78 	bl	80069bc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074cc:	f7fd fa9a 	bl	8004a04 <HAL_GetTick>
 80074d0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074d2:	e008      	b.n	80074e6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074d4:	f7fd fa96 	bl	8004a04 <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d901      	bls.n	80074e6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e163      	b.n	80077ae <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074e6:	4b9d      	ldr	r3, [pc, #628]	; (800775c <HAL_RCC_OscConfig+0x688>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d0f0      	beq.n	80074d4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d102      	bne.n	8007500 <HAL_RCC_OscConfig+0x42c>
 80074fa:	f7ff fb48 	bl	8006b8e <LL_RCC_LSE_Enable>
 80074fe:	e00c      	b.n	800751a <HAL_RCC_OscConfig+0x446>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	2b05      	cmp	r3, #5
 8007506:	d104      	bne.n	8007512 <HAL_RCC_OscConfig+0x43e>
 8007508:	f7ff fb63 	bl	8006bd2 <LL_RCC_LSE_EnableBypass>
 800750c:	f7ff fb3f 	bl	8006b8e <LL_RCC_LSE_Enable>
 8007510:	e003      	b.n	800751a <HAL_RCC_OscConfig+0x446>
 8007512:	f7ff fb4d 	bl	8006bb0 <LL_RCC_LSE_Disable>
 8007516:	f7ff fb6d 	bl	8006bf4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d014      	beq.n	800754c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007522:	f7fd fa6f 	bl	8004a04 <HAL_GetTick>
 8007526:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8007528:	e00a      	b.n	8007540 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800752a:	f7fd fa6b 	bl	8004a04 <HAL_GetTick>
 800752e:	4602      	mov	r2, r0
 8007530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	f241 3288 	movw	r2, #5000	; 0x1388
 8007538:	4293      	cmp	r3, r2
 800753a:	d901      	bls.n	8007540 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800753c:	2303      	movs	r3, #3
 800753e:	e136      	b.n	80077ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007540:	f7ff fb69 	bl	8006c16 <LL_RCC_LSE_IsReady>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d0ef      	beq.n	800752a <HAL_RCC_OscConfig+0x456>
 800754a:	e013      	b.n	8007574 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800754c:	f7fd fa5a 	bl	8004a04 <HAL_GetTick>
 8007550:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007552:	e00a      	b.n	800756a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007554:	f7fd fa56 	bl	8004a04 <HAL_GetTick>
 8007558:	4602      	mov	r2, r0
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007562:	4293      	cmp	r3, r2
 8007564:	d901      	bls.n	800756a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	e121      	b.n	80077ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800756a:	f7ff fb54 	bl	8006c16 <LL_RCC_LSE_IsReady>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1ef      	bne.n	8007554 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800757c:	2b00      	cmp	r3, #0
 800757e:	d02c      	beq.n	80075da <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007584:	2b00      	cmp	r3, #0
 8007586:	d014      	beq.n	80075b2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007588:	f7ff facd 	bl	8006b26 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800758c:	f7fd fa3a 	bl	8004a04 <HAL_GetTick>
 8007590:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007592:	e008      	b.n	80075a6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007594:	f7fd fa36 	bl	8004a04 <HAL_GetTick>
 8007598:	4602      	mov	r2, r0
 800759a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	2b02      	cmp	r3, #2
 80075a0:	d901      	bls.n	80075a6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e103      	b.n	80077ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80075a6:	f7ff fae0 	bl	8006b6a <LL_RCC_HSI48_IsReady>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d0f1      	beq.n	8007594 <HAL_RCC_OscConfig+0x4c0>
 80075b0:	e013      	b.n	80075da <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80075b2:	f7ff fac9 	bl	8006b48 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075b6:	f7fd fa25 	bl	8004a04 <HAL_GetTick>
 80075ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80075bc:	e008      	b.n	80075d0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80075be:	f7fd fa21 	bl	8004a04 <HAL_GetTick>
 80075c2:	4602      	mov	r2, r0
 80075c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d901      	bls.n	80075d0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	e0ee      	b.n	80077ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80075d0:	f7ff facb 	bl	8006b6a <LL_RCC_HSI48_IsReady>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1f1      	bne.n	80075be <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f000 80e4 	beq.w	80077ac <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80075e4:	f7ff fc29 	bl	8006e3a <LL_RCC_GetSysClkSource>
 80075e8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80075ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	f040 80b4 	bne.w	8007764 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f003 0203 	and.w	r2, r3, #3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007606:	429a      	cmp	r2, r3
 8007608:	d123      	bne.n	8007652 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007614:	429a      	cmp	r2, r3
 8007616:	d11c      	bne.n	8007652 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	0a1b      	lsrs	r3, r3, #8
 800761c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007624:	429a      	cmp	r2, r3
 8007626:	d114      	bne.n	8007652 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007632:	429a      	cmp	r2, r3
 8007634:	d10d      	bne.n	8007652 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007640:	429a      	cmp	r2, r3
 8007642:	d106      	bne.n	8007652 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800764e:	429a      	cmp	r2, r3
 8007650:	d05d      	beq.n	800770e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	2b0c      	cmp	r3, #12
 8007656:	d058      	beq.n	800770a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d001      	beq.n	800766a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e0a1      	b.n	80077ae <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800766a:	f7ff fc84 	bl	8006f76 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800766e:	f7fd f9c9 	bl	8004a04 <HAL_GetTick>
 8007672:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007674:	e008      	b.n	8007688 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007676:	f7fd f9c5 	bl	8004a04 <HAL_GetTick>
 800767a:	4602      	mov	r2, r0
 800767c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	2b02      	cmp	r3, #2
 8007682:	d901      	bls.n	8007688 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8007684:	2303      	movs	r3, #3
 8007686:	e092      	b.n	80077ae <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1ef      	bne.n	8007676 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800769a:	68da      	ldr	r2, [r3, #12]
 800769c:	4b30      	ldr	r3, [pc, #192]	; (8007760 <HAL_RCC_OscConfig+0x68c>)
 800769e:	4013      	ands	r3, r2
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80076a8:	4311      	orrs	r1, r2
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80076ae:	0212      	lsls	r2, r2, #8
 80076b0:	4311      	orrs	r1, r2
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80076b6:	4311      	orrs	r1, r2
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80076bc:	4311      	orrs	r1, r2
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80076c2:	430a      	orrs	r2, r1
 80076c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076c8:	4313      	orrs	r3, r2
 80076ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80076cc:	f7ff fc44 	bl	8006f58 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80076d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80076e0:	f7fd f990 	bl	8004a04 <HAL_GetTick>
 80076e4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076e6:	e008      	b.n	80076fa <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076e8:	f7fd f98c 	bl	8004a04 <HAL_GetTick>
 80076ec:	4602      	mov	r2, r0
 80076ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d901      	bls.n	80076fa <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80076f6:	2303      	movs	r3, #3
 80076f8:	e059      	b.n	80077ae <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d0ef      	beq.n	80076e8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007708:	e050      	b.n	80077ac <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e04f      	b.n	80077ae <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800770e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d147      	bne.n	80077ac <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800771c:	f7ff fc1c 	bl	8006f58 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800772a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800772e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007730:	f7fd f968 	bl	8004a04 <HAL_GetTick>
 8007734:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007736:	e008      	b.n	800774a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007738:	f7fd f964 	bl	8004a04 <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	2b02      	cmp	r3, #2
 8007744:	d901      	bls.n	800774a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e031      	b.n	80077ae <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800774a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d0ef      	beq.n	8007738 <HAL_RCC_OscConfig+0x664>
 8007758:	e028      	b.n	80077ac <HAL_RCC_OscConfig+0x6d8>
 800775a:	bf00      	nop
 800775c:	58000400 	.word	0x58000400
 8007760:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	2b0c      	cmp	r3, #12
 8007768:	d01e      	beq.n	80077a8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800776a:	f7ff fc04 	bl	8006f76 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800776e:	f7fd f949 	bl	8004a04 <HAL_GetTick>
 8007772:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007774:	e008      	b.n	8007788 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007776:	f7fd f945 	bl	8004a04 <HAL_GetTick>
 800777a:	4602      	mov	r2, r0
 800777c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777e:	1ad3      	subs	r3, r2, r3
 8007780:	2b02      	cmp	r3, #2
 8007782:	d901      	bls.n	8007788 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8007784:	2303      	movs	r3, #3
 8007786:	e012      	b.n	80077ae <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1ef      	bne.n	8007776 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8007796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800779a:	68da      	ldr	r2, [r3, #12]
 800779c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80077a0:	4b05      	ldr	r3, [pc, #20]	; (80077b8 <HAL_RCC_OscConfig+0x6e4>)
 80077a2:	4013      	ands	r3, r2
 80077a4:	60cb      	str	r3, [r1, #12]
 80077a6:	e001      	b.n	80077ac <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e000      	b.n	80077ae <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3734      	adds	r7, #52	; 0x34
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd90      	pop	{r4, r7, pc}
 80077b6:	bf00      	nop
 80077b8:	eefefffc 	.word	0xeefefffc

080077bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d101      	bne.n	80077d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e12d      	b.n	8007a2c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80077d0:	4b98      	ldr	r3, [pc, #608]	; (8007a34 <HAL_RCC_ClockConfig+0x278>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 0307 	and.w	r3, r3, #7
 80077d8:	683a      	ldr	r2, [r7, #0]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d91b      	bls.n	8007816 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077de:	4b95      	ldr	r3, [pc, #596]	; (8007a34 <HAL_RCC_ClockConfig+0x278>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f023 0207 	bic.w	r2, r3, #7
 80077e6:	4993      	ldr	r1, [pc, #588]	; (8007a34 <HAL_RCC_ClockConfig+0x278>)
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077ee:	f7fd f909 	bl	8004a04 <HAL_GetTick>
 80077f2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077f4:	e008      	b.n	8007808 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80077f6:	f7fd f905 	bl	8004a04 <HAL_GetTick>
 80077fa:	4602      	mov	r2, r0
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	2b02      	cmp	r3, #2
 8007802:	d901      	bls.n	8007808 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007804:	2303      	movs	r3, #3
 8007806:	e111      	b.n	8007a2c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007808:	4b8a      	ldr	r3, [pc, #552]	; (8007a34 <HAL_RCC_ClockConfig+0x278>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 0307 	and.w	r3, r3, #7
 8007810:	683a      	ldr	r2, [r7, #0]
 8007812:	429a      	cmp	r2, r3
 8007814:	d1ef      	bne.n	80077f6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 0302 	and.w	r3, r3, #2
 800781e:	2b00      	cmp	r3, #0
 8007820:	d016      	beq.n	8007850 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	4618      	mov	r0, r3
 8007828:	f7ff fb13 	bl	8006e52 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800782c:	f7fd f8ea 	bl	8004a04 <HAL_GetTick>
 8007830:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007832:	e008      	b.n	8007846 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007834:	f7fd f8e6 	bl	8004a04 <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	2b02      	cmp	r3, #2
 8007840:	d901      	bls.n	8007846 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	e0f2      	b.n	8007a2c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007846:	f7ff fbe8 	bl	800701a <LL_RCC_IsActiveFlag_HPRE>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d0f1      	beq.n	8007834 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f003 0320 	and.w	r3, r3, #32
 8007858:	2b00      	cmp	r3, #0
 800785a:	d016      	beq.n	800788a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	695b      	ldr	r3, [r3, #20]
 8007860:	4618      	mov	r0, r3
 8007862:	f7ff fb0a 	bl	8006e7a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007866:	f7fd f8cd 	bl	8004a04 <HAL_GetTick>
 800786a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800786c:	e008      	b.n	8007880 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800786e:	f7fd f8c9 	bl	8004a04 <HAL_GetTick>
 8007872:	4602      	mov	r2, r0
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	2b02      	cmp	r3, #2
 800787a:	d901      	bls.n	8007880 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800787c:	2303      	movs	r3, #3
 800787e:	e0d5      	b.n	8007a2c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007880:	f7ff fbdd 	bl	800703e <LL_RCC_IsActiveFlag_C2HPRE>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d0f1      	beq.n	800786e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007892:	2b00      	cmp	r3, #0
 8007894:	d016      	beq.n	80078c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	4618      	mov	r0, r3
 800789c:	f7ff fb03 	bl	8006ea6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80078a0:	f7fd f8b0 	bl	8004a04 <HAL_GetTick>
 80078a4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80078a6:	e008      	b.n	80078ba <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80078a8:	f7fd f8ac 	bl	8004a04 <HAL_GetTick>
 80078ac:	4602      	mov	r2, r0
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d901      	bls.n	80078ba <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80078b6:	2303      	movs	r3, #3
 80078b8:	e0b8      	b.n	8007a2c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80078ba:	f7ff fbd3 	bl	8007064 <LL_RCC_IsActiveFlag_SHDHPRE>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d0f1      	beq.n	80078a8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 0304 	and.w	r3, r3, #4
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d016      	beq.n	80078fe <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7ff fafd 	bl	8006ed4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80078da:	f7fd f893 	bl	8004a04 <HAL_GetTick>
 80078de:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80078e0:	e008      	b.n	80078f4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80078e2:	f7fd f88f 	bl	8004a04 <HAL_GetTick>
 80078e6:	4602      	mov	r2, r0
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d901      	bls.n	80078f4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e09b      	b.n	8007a2c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80078f4:	f7ff fbc9 	bl	800708a <LL_RCC_IsActiveFlag_PPRE1>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d0f1      	beq.n	80078e2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 0308 	and.w	r3, r3, #8
 8007906:	2b00      	cmp	r3, #0
 8007908:	d017      	beq.n	800793a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	00db      	lsls	r3, r3, #3
 8007910:	4618      	mov	r0, r3
 8007912:	f7ff faf3 	bl	8006efc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007916:	f7fd f875 	bl	8004a04 <HAL_GetTick>
 800791a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800791c:	e008      	b.n	8007930 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800791e:	f7fd f871 	bl	8004a04 <HAL_GetTick>
 8007922:	4602      	mov	r2, r0
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	2b02      	cmp	r3, #2
 800792a:	d901      	bls.n	8007930 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800792c:	2303      	movs	r3, #3
 800792e:	e07d      	b.n	8007a2c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007930:	f7ff fbbd 	bl	80070ae <LL_RCC_IsActiveFlag_PPRE2>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d0f1      	beq.n	800791e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 0301 	and.w	r3, r3, #1
 8007942:	2b00      	cmp	r3, #0
 8007944:	d043      	beq.n	80079ce <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	2b02      	cmp	r3, #2
 800794c:	d106      	bne.n	800795c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800794e:	f7ff f893 	bl	8006a78 <LL_RCC_HSE_IsReady>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d11e      	bne.n	8007996 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e067      	b.n	8007a2c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	2b03      	cmp	r3, #3
 8007962:	d106      	bne.n	8007972 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007964:	f7ff fb16 	bl	8006f94 <LL_RCC_PLL_IsReady>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d113      	bne.n	8007996 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e05c      	b.n	8007a2c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d106      	bne.n	8007988 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800797a:	f7ff f9fb 	bl	8006d74 <LL_RCC_MSI_IsReady>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d108      	bne.n	8007996 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e051      	b.n	8007a2c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007988:	f7ff f8a6 	bl	8006ad8 <LL_RCC_HSI_IsReady>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d101      	bne.n	8007996 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	e04a      	b.n	8007a2c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	4618      	mov	r0, r3
 800799c:	f7ff fa39 	bl	8006e12 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079a0:	f7fd f830 	bl	8004a04 <HAL_GetTick>
 80079a4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079a6:	e00a      	b.n	80079be <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079a8:	f7fd f82c 	bl	8004a04 <HAL_GetTick>
 80079ac:	4602      	mov	r2, r0
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d901      	bls.n	80079be <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e036      	b.n	8007a2c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079be:	f7ff fa3c 	bl	8006e3a <LL_RCC_GetSysClkSource>
 80079c2:	4602      	mov	r2, r0
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d1ec      	bne.n	80079a8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80079ce:	4b19      	ldr	r3, [pc, #100]	; (8007a34 <HAL_RCC_ClockConfig+0x278>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 0307 	and.w	r3, r3, #7
 80079d6:	683a      	ldr	r2, [r7, #0]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d21b      	bcs.n	8007a14 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079dc:	4b15      	ldr	r3, [pc, #84]	; (8007a34 <HAL_RCC_ClockConfig+0x278>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f023 0207 	bic.w	r2, r3, #7
 80079e4:	4913      	ldr	r1, [pc, #76]	; (8007a34 <HAL_RCC_ClockConfig+0x278>)
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079ec:	f7fd f80a 	bl	8004a04 <HAL_GetTick>
 80079f0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079f2:	e008      	b.n	8007a06 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80079f4:	f7fd f806 	bl	8004a04 <HAL_GetTick>
 80079f8:	4602      	mov	r2, r0
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d901      	bls.n	8007a06 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8007a02:	2303      	movs	r3, #3
 8007a04:	e012      	b.n	8007a2c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a06:	4b0b      	ldr	r3, [pc, #44]	; (8007a34 <HAL_RCC_ClockConfig+0x278>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 0307 	and.w	r3, r3, #7
 8007a0e:	683a      	ldr	r2, [r7, #0]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d1ef      	bne.n	80079f4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007a14:	f000 f880 	bl	8007b18 <HAL_RCC_GetHCLKFreq>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	4a07      	ldr	r2, [pc, #28]	; (8007a38 <HAL_RCC_ClockConfig+0x27c>)
 8007a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8007a1e:	f7fc fffd 	bl	8004a1c <HAL_GetTickPrio>
 8007a22:	4603      	mov	r3, r0
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7fc ff9f 	bl	8004968 <HAL_InitTick>
 8007a2a:	4603      	mov	r3, r0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	58004000 	.word	0x58004000
 8007a38:	2000000c 	.word	0x2000000c

08007a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a3c:	b590      	push	{r4, r7, lr}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a42:	f7ff f9fa 	bl	8006e3a <LL_RCC_GetSysClkSource>
 8007a46:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10a      	bne.n	8007a64 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007a4e:	f7ff f9b6 	bl	8006dbe <LL_RCC_MSI_GetRange>
 8007a52:	4603      	mov	r3, r0
 8007a54:	091b      	lsrs	r3, r3, #4
 8007a56:	f003 030f 	and.w	r3, r3, #15
 8007a5a:	4a2b      	ldr	r2, [pc, #172]	; (8007b08 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a60:	60fb      	str	r3, [r7, #12]
 8007a62:	e04b      	b.n	8007afc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2b04      	cmp	r3, #4
 8007a68:	d102      	bne.n	8007a70 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007a6a:	4b28      	ldr	r3, [pc, #160]	; (8007b0c <HAL_RCC_GetSysClockFreq+0xd0>)
 8007a6c:	60fb      	str	r3, [r7, #12]
 8007a6e:	e045      	b.n	8007afc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2b08      	cmp	r3, #8
 8007a74:	d10a      	bne.n	8007a8c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007a76:	f7fe ffcf 	bl	8006a18 <LL_RCC_HSE_IsEnabledDiv2>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d102      	bne.n	8007a86 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007a80:	4b23      	ldr	r3, [pc, #140]	; (8007b10 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007a82:	60fb      	str	r3, [r7, #12]
 8007a84:	e03a      	b.n	8007afc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007a86:	4b23      	ldr	r3, [pc, #140]	; (8007b14 <HAL_RCC_GetSysClockFreq+0xd8>)
 8007a88:	60fb      	str	r3, [r7, #12]
 8007a8a:	e037      	b.n	8007afc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007a8c:	f7ff fab9 	bl	8007002 <LL_RCC_PLL_GetMainSource>
 8007a90:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d003      	beq.n	8007aa0 <HAL_RCC_GetSysClockFreq+0x64>
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	2b03      	cmp	r3, #3
 8007a9c:	d003      	beq.n	8007aa6 <HAL_RCC_GetSysClockFreq+0x6a>
 8007a9e:	e00d      	b.n	8007abc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007aa0:	4b1a      	ldr	r3, [pc, #104]	; (8007b0c <HAL_RCC_GetSysClockFreq+0xd0>)
 8007aa2:	60bb      	str	r3, [r7, #8]
        break;
 8007aa4:	e015      	b.n	8007ad2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007aa6:	f7fe ffb7 	bl	8006a18 <LL_RCC_HSE_IsEnabledDiv2>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d102      	bne.n	8007ab6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007ab0:	4b17      	ldr	r3, [pc, #92]	; (8007b10 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007ab2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007ab4:	e00d      	b.n	8007ad2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8007ab6:	4b17      	ldr	r3, [pc, #92]	; (8007b14 <HAL_RCC_GetSysClockFreq+0xd8>)
 8007ab8:	60bb      	str	r3, [r7, #8]
        break;
 8007aba:	e00a      	b.n	8007ad2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007abc:	f7ff f97f 	bl	8006dbe <LL_RCC_MSI_GetRange>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	091b      	lsrs	r3, r3, #4
 8007ac4:	f003 030f 	and.w	r3, r3, #15
 8007ac8:	4a0f      	ldr	r2, [pc, #60]	; (8007b08 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ace:	60bb      	str	r3, [r7, #8]
        break;
 8007ad0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8007ad2:	f7ff fa71 	bl	8006fb8 <LL_RCC_PLL_GetN>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	fb03 f402 	mul.w	r4, r3, r2
 8007ade:	f7ff fa84 	bl	8006fea <LL_RCC_PLL_GetDivider>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	091b      	lsrs	r3, r3, #4
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	fbb4 f4f3 	udiv	r4, r4, r3
 8007aec:	f7ff fa71 	bl	8006fd2 <LL_RCC_PLL_GetR>
 8007af0:	4603      	mov	r3, r0
 8007af2:	0f5b      	lsrs	r3, r3, #29
 8007af4:	3301      	adds	r3, #1
 8007af6:	fbb4 f3f3 	udiv	r3, r4, r3
 8007afa:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8007afc:	68fb      	ldr	r3, [r7, #12]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3714      	adds	r7, #20
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd90      	pop	{r4, r7, pc}
 8007b06:	bf00      	nop
 8007b08:	0801284c 	.word	0x0801284c
 8007b0c:	00f42400 	.word	0x00f42400
 8007b10:	003d0900 	.word	0x003d0900
 8007b14:	007a1200 	.word	0x007a1200

08007b18 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b18:	b598      	push	{r3, r4, r7, lr}
 8007b1a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007b1c:	f7ff ff8e 	bl	8007a3c <HAL_RCC_GetSysClockFreq>
 8007b20:	4604      	mov	r4, r0
 8007b22:	f7ff f9ff 	bl	8006f24 <LL_RCC_GetAHBPrescaler>
 8007b26:	4603      	mov	r3, r0
 8007b28:	091b      	lsrs	r3, r3, #4
 8007b2a:	f003 030f 	and.w	r3, r3, #15
 8007b2e:	4a03      	ldr	r2, [pc, #12]	; (8007b3c <HAL_RCC_GetHCLKFreq+0x24>)
 8007b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b34:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	bd98      	pop	{r3, r4, r7, pc}
 8007b3c:	0801280c 	.word	0x0801280c

08007b40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007b40:	b590      	push	{r4, r7, lr}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2bb0      	cmp	r3, #176	; 0xb0
 8007b4c:	d903      	bls.n	8007b56 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8007b4e:	4b15      	ldr	r3, [pc, #84]	; (8007ba4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b52:	60fb      	str	r3, [r7, #12]
 8007b54:	e007      	b.n	8007b66 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	091b      	lsrs	r3, r3, #4
 8007b5a:	f003 030f 	and.w	r3, r3, #15
 8007b5e:	4a11      	ldr	r2, [pc, #68]	; (8007ba4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b64:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8007b66:	f7ff f9e9 	bl	8006f3c <LL_RCC_GetAHB4Prescaler>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	091b      	lsrs	r3, r3, #4
 8007b6e:	f003 030f 	and.w	r3, r3, #15
 8007b72:	4a0d      	ldr	r2, [pc, #52]	; (8007ba8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8007b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b7e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	4a0a      	ldr	r2, [pc, #40]	; (8007bac <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8007b84:	fba2 2303 	umull	r2, r3, r2, r3
 8007b88:	0c9c      	lsrs	r4, r3, #18
 8007b8a:	f7fe ff27 	bl	80069dc <HAL_PWREx_GetVoltageRange>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	4619      	mov	r1, r3
 8007b92:	4620      	mov	r0, r4
 8007b94:	f000 f80c 	bl	8007bb0 <RCC_SetFlashLatency>
 8007b98:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3714      	adds	r7, #20
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd90      	pop	{r4, r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	0801284c 	.word	0x0801284c
 8007ba8:	0801280c 	.word	0x0801280c
 8007bac:	431bde83 	.word	0x431bde83

08007bb0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007bb0:	b590      	push	{r4, r7, lr}
 8007bb2:	b093      	sub	sp, #76	; 0x4c
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8007bba:	4b37      	ldr	r3, [pc, #220]	; (8007c98 <RCC_SetFlashLatency+0xe8>)
 8007bbc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8007bc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007bc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8007bc6:	4a35      	ldr	r2, [pc, #212]	; (8007c9c <RCC_SetFlashLatency+0xec>)
 8007bc8:	f107 031c 	add.w	r3, r7, #28
 8007bcc:	ca07      	ldmia	r2, {r0, r1, r2}
 8007bce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8007bd2:	4b33      	ldr	r3, [pc, #204]	; (8007ca0 <RCC_SetFlashLatency+0xf0>)
 8007bd4:	f107 040c 	add.w	r4, r7, #12
 8007bd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007bda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007bde:	2300      	movs	r3, #0
 8007be0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007be8:	d11a      	bne.n	8007c20 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007bea:	2300      	movs	r3, #0
 8007bec:	643b      	str	r3, [r7, #64]	; 0x40
 8007bee:	e013      	b.n	8007c18 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	3348      	adds	r3, #72	; 0x48
 8007bf6:	443b      	add	r3, r7
 8007bf8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d807      	bhi.n	8007c12 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	3348      	adds	r3, #72	; 0x48
 8007c08:	443b      	add	r3, r7
 8007c0a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007c0e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007c10:	e020      	b.n	8007c54 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007c12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c14:	3301      	adds	r3, #1
 8007c16:	643b      	str	r3, [r7, #64]	; 0x40
 8007c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c1a:	2b03      	cmp	r3, #3
 8007c1c:	d9e8      	bls.n	8007bf0 <RCC_SetFlashLatency+0x40>
 8007c1e:	e019      	b.n	8007c54 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007c20:	2300      	movs	r3, #0
 8007c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c24:	e013      	b.n	8007c4e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	3348      	adds	r3, #72	; 0x48
 8007c2c:	443b      	add	r3, r7
 8007c2e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d807      	bhi.n	8007c48 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	3348      	adds	r3, #72	; 0x48
 8007c3e:	443b      	add	r3, r7
 8007c40:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007c44:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007c46:	e005      	b.n	8007c54 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	d9e8      	bls.n	8007c26 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8007c54:	4b13      	ldr	r3, [pc, #76]	; (8007ca4 <RCC_SetFlashLatency+0xf4>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f023 0207 	bic.w	r2, r3, #7
 8007c5c:	4911      	ldr	r1, [pc, #68]	; (8007ca4 <RCC_SetFlashLatency+0xf4>)
 8007c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c60:	4313      	orrs	r3, r2
 8007c62:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007c64:	f7fc fece 	bl	8004a04 <HAL_GetTick>
 8007c68:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007c6a:	e008      	b.n	8007c7e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007c6c:	f7fc feca 	bl	8004a04 <HAL_GetTick>
 8007c70:	4602      	mov	r2, r0
 8007c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d901      	bls.n	8007c7e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	e007      	b.n	8007c8e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007c7e:	4b09      	ldr	r3, [pc, #36]	; (8007ca4 <RCC_SetFlashLatency+0xf4>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 0307 	and.w	r3, r3, #7
 8007c86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d1ef      	bne.n	8007c6c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	374c      	adds	r7, #76	; 0x4c
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd90      	pop	{r4, r7, pc}
 8007c96:	bf00      	nop
 8007c98:	0801275c 	.word	0x0801275c
 8007c9c:	0801276c 	.word	0x0801276c
 8007ca0:	08012778 	.word	0x08012778
 8007ca4:	58004000 	.word	0x58004000

08007ca8 <LL_RCC_LSE_IsEnabled>:
{
 8007ca8:	b480      	push	{r7}
 8007caa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb4:	f003 0301 	and.w	r3, r3, #1
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d101      	bne.n	8007cc0 <LL_RCC_LSE_IsEnabled+0x18>
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e000      	b.n	8007cc2 <LL_RCC_LSE_IsEnabled+0x1a>
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <LL_RCC_LSE_IsReady>:
{
 8007ccc:	b480      	push	{r7}
 8007cce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cd8:	f003 0302 	and.w	r3, r3, #2
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d101      	bne.n	8007ce4 <LL_RCC_LSE_IsReady+0x18>
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e000      	b.n	8007ce6 <LL_RCC_LSE_IsReady+0x1a>
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <LL_RCC_MSI_EnablePLLMode>:
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8007cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cfe:	f043 0304 	orr.w	r3, r3, #4
 8007d02:	6013      	str	r3, [r2, #0]
}
 8007d04:	bf00      	nop
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <LL_RCC_SetRFWKPClockSource>:
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b083      	sub	sp, #12
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8007d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d1e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007d22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8007d2e:	bf00      	nop
 8007d30:	370c      	adds	r7, #12
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <LL_RCC_SetSMPSClockSource>:
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	b083      	sub	sp, #12
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8007d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d48:	f023 0203 	bic.w	r2, r3, #3
 8007d4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007d56:	bf00      	nop
 8007d58:	370c      	adds	r7, #12
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr

08007d62 <LL_RCC_SetSMPSPrescaler>:
{
 8007d62:	b480      	push	{r7}
 8007d64:	b083      	sub	sp, #12
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8007d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007d74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007d7e:	bf00      	nop
 8007d80:	370c      	adds	r7, #12
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <LL_RCC_SetUSARTClockSource>:
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b083      	sub	sp, #12
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8007d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d9a:	f023 0203 	bic.w	r2, r3, #3
 8007d9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007daa:	bf00      	nop
 8007dac:	370c      	adds	r7, #12
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <LL_RCC_SetLPUARTClockSource>:
{
 8007db6:	b480      	push	{r7}
 8007db8:	b083      	sub	sp, #12
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dc6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007dca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007dd6:	bf00      	nop
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <LL_RCC_SetI2CClockSource>:
{
 8007de2:	b480      	push	{r7}
 8007de4:	b083      	sub	sp, #12
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	091b      	lsrs	r3, r3, #4
 8007df6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007dfa:	43db      	mvns	r3, r3
 8007dfc:	401a      	ands	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	011b      	lsls	r3, r3, #4
 8007e02:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007e06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007e10:	bf00      	nop
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <LL_RCC_SetLPTIMClockSource>:
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e28:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	0c1b      	lsrs	r3, r3, #16
 8007e30:	041b      	lsls	r3, r3, #16
 8007e32:	43db      	mvns	r3, r3
 8007e34:	401a      	ands	r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	041b      	lsls	r3, r3, #16
 8007e3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <LL_RCC_SetSAIClockSource>:
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8007e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007e64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007e70:	bf00      	nop
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <LL_RCC_SetRNGClockSource>:
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e8c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007e90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007e9c:	bf00      	nop
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <LL_RCC_SetCLK48ClockSource>:
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8007eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eb8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007ebc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007ec8:	bf00      	nop
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <LL_RCC_SetUSBClockSource>:
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f7ff ffe3 	bl	8007ea8 <LL_RCC_SetCLK48ClockSource>
}
 8007ee2:	bf00      	nop
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <LL_RCC_SetADCClockSource>:
{
 8007eea:	b480      	push	{r7}
 8007eec:	b083      	sub	sp, #12
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007efa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007efe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007f0a:	bf00      	nop
 8007f0c:	370c      	adds	r7, #12
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr

08007f16 <LL_RCC_SetRTCClockSource>:
{
 8007f16:	b480      	push	{r7}
 8007f18:	b083      	sub	sp, #12
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007f36:	bf00      	nop
 8007f38:	370c      	adds	r7, #12
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr

08007f42 <LL_RCC_GetRTCClockSource>:
{
 8007f42:	b480      	push	{r7}
 8007f44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <LL_RCC_ForceBackupDomainReset>:
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007f74:	bf00      	nop
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <LL_RCC_ReleaseBackupDomainReset>:
{
 8007f7e:	b480      	push	{r7}
 8007f80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007f96:	bf00      	nop
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <LL_RCC_PLLSAI1_Enable>:
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007fb2:	6013      	str	r3, [r2, #0]
}
 8007fb4:	bf00      	nop
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr

08007fbe <LL_RCC_PLLSAI1_Disable>:
{
 8007fbe:	b480      	push	{r7}
 8007fc0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fcc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007fd0:	6013      	str	r3, [r2, #0]
}
 8007fd2:	bf00      	nop
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <LL_RCC_PLLSAI1_IsReady>:
{
 8007fdc:	b480      	push	{r7}
 8007fde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8007fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fee:	d101      	bne.n	8007ff4 <LL_RCC_PLLSAI1_IsReady+0x18>
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e000      	b.n	8007ff6 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b088      	sub	sp, #32
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8008008:	2300      	movs	r3, #0
 800800a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800800c:	2300      	movs	r3, #0
 800800e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008018:	2b00      	cmp	r3, #0
 800801a:	d034      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008020:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008024:	d021      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8008026:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800802a:	d81b      	bhi.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800802c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008030:	d01d      	beq.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8008032:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008036:	d815      	bhi.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00b      	beq.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800803c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008040:	d110      	bne.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8008042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800804c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008050:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8008052:	e00d      	b.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	3304      	adds	r3, #4
 8008058:	4618      	mov	r0, r3
 800805a:	f000 f94d 	bl	80082f8 <RCCEx_PLLSAI1_ConfigNP>
 800805e:	4603      	mov	r3, r0
 8008060:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008062:	e005      	b.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	77fb      	strb	r3, [r7, #31]
        break;
 8008068:	e002      	b.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800806a:	bf00      	nop
 800806c:	e000      	b.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800806e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008070:	7ffb      	ldrb	r3, [r7, #31]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d105      	bne.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800807a:	4618      	mov	r0, r3
 800807c:	f7ff fee8 	bl	8007e50 <LL_RCC_SetSAIClockSource>
 8008080:	e001      	b.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008082:	7ffb      	ldrb	r3, [r7, #31]
 8008084:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800808e:	2b00      	cmp	r3, #0
 8008090:	d046      	beq.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8008092:	f7ff ff56 	bl	8007f42 <LL_RCC_GetRTCClockSource>
 8008096:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809c:	69ba      	ldr	r2, [r7, #24]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d03c      	beq.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80080a2:	f7fe fc8b 	bl	80069bc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d105      	bne.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7ff ff30 	bl	8007f16 <LL_RCC_SetRTCClockSource>
 80080b6:	e02e      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80080b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080c0:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80080c2:	f7ff ff4b 	bl	8007f5c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80080c6:	f7ff ff5a 	bl	8007f7e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d4:	4313      	orrs	r3, r2
 80080d6:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80080d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80080e2:	f7ff fde1 	bl	8007ca8 <LL_RCC_LSE_IsEnabled>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d114      	bne.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80080ec:	f7fc fc8a 	bl	8004a04 <HAL_GetTick>
 80080f0:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80080f2:	e00b      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080f4:	f7fc fc86 	bl	8004a04 <HAL_GetTick>
 80080f8:	4602      	mov	r2, r0
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008102:	4293      	cmp	r3, r2
 8008104:	d902      	bls.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	77fb      	strb	r3, [r7, #31]
              break;
 800810a:	e004      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800810c:	f7ff fdde 	bl	8007ccc <LL_RCC_LSE_IsReady>
 8008110:	4603      	mov	r3, r0
 8008112:	2b01      	cmp	r3, #1
 8008114:	d1ee      	bne.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8008116:	7ffb      	ldrb	r3, [r7, #31]
 8008118:	77bb      	strb	r3, [r7, #30]
 800811a:	e001      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800811c:	7ffb      	ldrb	r3, [r7, #31]
 800811e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0301 	and.w	r3, r3, #1
 8008128:	2b00      	cmp	r3, #0
 800812a:	d004      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	699b      	ldr	r3, [r3, #24]
 8008130:	4618      	mov	r0, r3
 8008132:	f7ff fe2a 	bl	8007d8a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f003 0302 	and.w	r3, r3, #2
 800813e:	2b00      	cmp	r3, #0
 8008140:	d004      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	69db      	ldr	r3, [r3, #28]
 8008146:	4618      	mov	r0, r3
 8008148:	f7ff fe35 	bl	8007db6 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 0310 	and.w	r3, r3, #16
 8008154:	2b00      	cmp	r3, #0
 8008156:	d004      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800815c:	4618      	mov	r0, r3
 800815e:	f7ff fe5d 	bl	8007e1c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f003 0320 	and.w	r3, r3, #32
 800816a:	2b00      	cmp	r3, #0
 800816c:	d004      	beq.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008172:	4618      	mov	r0, r3
 8008174:	f7ff fe52 	bl	8007e1c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 0304 	and.w	r3, r3, #4
 8008180:	2b00      	cmp	r3, #0
 8008182:	d004      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a1b      	ldr	r3, [r3, #32]
 8008188:	4618      	mov	r0, r3
 800818a:	f7ff fe2a 	bl	8007de2 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f003 0308 	and.w	r3, r3, #8
 8008196:	2b00      	cmp	r3, #0
 8008198:	d004      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819e:	4618      	mov	r0, r3
 80081a0:	f7ff fe1f 	bl	8007de2 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d022      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081b4:	4618      	mov	r0, r3
 80081b6:	f7ff fe8d 	bl	8007ed4 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081c2:	d107      	bne.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80081c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80081d2:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80081dc:	d10b      	bne.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	3304      	adds	r3, #4
 80081e2:	4618      	mov	r0, r3
 80081e4:	f000 f8e3 	bl	80083ae <RCCEx_PLLSAI1_ConfigNQ>
 80081e8:	4603      	mov	r3, r0
 80081ea:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80081ec:	7ffb      	ldrb	r3, [r7, #31]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d001      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80081f2:	7ffb      	ldrb	r3, [r7, #31]
 80081f4:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d02b      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800820a:	d008      	beq.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008210:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008214:	d003      	beq.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821a:	2b00      	cmp	r3, #0
 800821c:	d105      	bne.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008222:	4618      	mov	r0, r3
 8008224:	f7ff fe2a 	bl	8007e7c <LL_RCC_SetRNGClockSource>
 8008228:	e00a      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008232:	60fb      	str	r3, [r7, #12]
 8008234:	2000      	movs	r0, #0
 8008236:	f7ff fe21 	bl	8007e7c <LL_RCC_SetRNGClockSource>
 800823a:	68f8      	ldr	r0, [r7, #12]
 800823c:	f7ff fe34 	bl	8007ea8 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008244:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8008248:	d107      	bne.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800824a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008254:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008258:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008262:	2b00      	cmp	r3, #0
 8008264:	d022      	beq.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800826a:	4618      	mov	r0, r3
 800826c:	f7ff fe3d 	bl	8007eea <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008278:	d107      	bne.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800827a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008288:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800828e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008292:	d10b      	bne.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	3304      	adds	r3, #4
 8008298:	4618      	mov	r0, r3
 800829a:	f000 f8e3 	bl	8008464 <RCCEx_PLLSAI1_ConfigNR>
 800829e:	4603      	mov	r3, r0
 80082a0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80082a2:	7ffb      	ldrb	r3, [r7, #31]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d001      	beq.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80082a8:	7ffb      	ldrb	r3, [r7, #31]
 80082aa:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d004      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082bc:	4618      	mov	r0, r3
 80082be:	f7ff fd26 	bl	8007d0e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d009      	beq.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7ff fd45 	bl	8007d62 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082dc:	4618      	mov	r0, r3
 80082de:	f7ff fd2c 	bl	8007d3a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80082e2:	7fbb      	ldrb	r3, [r7, #30]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3720      	adds	r7, #32
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80082f0:	f7ff fcfe 	bl	8007cf0 <LL_RCC_MSI_EnablePLLMode>
}
 80082f4:	bf00      	nop
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008300:	2300      	movs	r3, #0
 8008302:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008304:	f7ff fe5b 	bl	8007fbe <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008308:	f7fc fb7c 	bl	8004a04 <HAL_GetTick>
 800830c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800830e:	e009      	b.n	8008324 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008310:	f7fc fb78 	bl	8004a04 <HAL_GetTick>
 8008314:	4602      	mov	r2, r0
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	1ad3      	subs	r3, r2, r3
 800831a:	2b02      	cmp	r3, #2
 800831c:	d902      	bls.n	8008324 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800831e:	2303      	movs	r3, #3
 8008320:	73fb      	strb	r3, [r7, #15]
      break;
 8008322:	e004      	b.n	800832e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008324:	f7ff fe5a 	bl	8007fdc <LL_RCC_PLLSAI1_IsReady>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d1f0      	bne.n	8008310 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800832e:	7bfb      	ldrb	r3, [r7, #15]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d137      	bne.n	80083a4 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	021b      	lsls	r3, r3, #8
 8008344:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008348:	4313      	orrs	r3, r2
 800834a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800834c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800835e:	4313      	orrs	r3, r2
 8008360:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008362:	f7ff fe1d 	bl	8007fa0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008366:	f7fc fb4d 	bl	8004a04 <HAL_GetTick>
 800836a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800836c:	e009      	b.n	8008382 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800836e:	f7fc fb49 	bl	8004a04 <HAL_GetTick>
 8008372:	4602      	mov	r2, r0
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	1ad3      	subs	r3, r2, r3
 8008378:	2b02      	cmp	r3, #2
 800837a:	d902      	bls.n	8008382 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800837c:	2303      	movs	r3, #3
 800837e:	73fb      	strb	r3, [r7, #15]
        break;
 8008380:	e004      	b.n	800838c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008382:	f7ff fe2b 	bl	8007fdc <LL_RCC_PLLSAI1_IsReady>
 8008386:	4603      	mov	r3, r0
 8008388:	2b01      	cmp	r3, #1
 800838a:	d1f0      	bne.n	800836e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800838c:	7bfb      	ldrb	r3, [r7, #15]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d108      	bne.n	80083a4 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008396:	691a      	ldr	r2, [r3, #16]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80083a0:	4313      	orrs	r3, r2
 80083a2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80083a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b084      	sub	sp, #16
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80083b6:	2300      	movs	r3, #0
 80083b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80083ba:	f7ff fe00 	bl	8007fbe <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80083be:	f7fc fb21 	bl	8004a04 <HAL_GetTick>
 80083c2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80083c4:	e009      	b.n	80083da <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80083c6:	f7fc fb1d 	bl	8004a04 <HAL_GetTick>
 80083ca:	4602      	mov	r2, r0
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	1ad3      	subs	r3, r2, r3
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d902      	bls.n	80083da <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80083d4:	2303      	movs	r3, #3
 80083d6:	73fb      	strb	r3, [r7, #15]
      break;
 80083d8:	e004      	b.n	80083e4 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80083da:	f7ff fdff 	bl	8007fdc <LL_RCC_PLLSAI1_IsReady>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1f0      	bne.n	80083c6 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80083e4:	7bfb      	ldrb	r3, [r7, #15]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d137      	bne.n	800845a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80083ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	021b      	lsls	r3, r3, #8
 80083fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80083fe:	4313      	orrs	r3, r2
 8008400:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8008402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008414:	4313      	orrs	r3, r2
 8008416:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008418:	f7ff fdc2 	bl	8007fa0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800841c:	f7fc faf2 	bl	8004a04 <HAL_GetTick>
 8008420:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008422:	e009      	b.n	8008438 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008424:	f7fc faee 	bl	8004a04 <HAL_GetTick>
 8008428:	4602      	mov	r2, r0
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	1ad3      	subs	r3, r2, r3
 800842e:	2b02      	cmp	r3, #2
 8008430:	d902      	bls.n	8008438 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8008432:	2303      	movs	r3, #3
 8008434:	73fb      	strb	r3, [r7, #15]
        break;
 8008436:	e004      	b.n	8008442 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008438:	f7ff fdd0 	bl	8007fdc <LL_RCC_PLLSAI1_IsReady>
 800843c:	4603      	mov	r3, r0
 800843e:	2b01      	cmp	r3, #1
 8008440:	d1f0      	bne.n	8008424 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8008442:	7bfb      	ldrb	r3, [r7, #15]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d108      	bne.n	800845a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800844c:	691a      	ldr	r2, [r3, #16]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008456:	4313      	orrs	r3, r2
 8008458:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800845a:	7bfb      	ldrb	r3, [r7, #15]
}
 800845c:	4618      	mov	r0, r3
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800846c:	2300      	movs	r3, #0
 800846e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008470:	f7ff fda5 	bl	8007fbe <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008474:	f7fc fac6 	bl	8004a04 <HAL_GetTick>
 8008478:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800847a:	e009      	b.n	8008490 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800847c:	f7fc fac2 	bl	8004a04 <HAL_GetTick>
 8008480:	4602      	mov	r2, r0
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	1ad3      	subs	r3, r2, r3
 8008486:	2b02      	cmp	r3, #2
 8008488:	d902      	bls.n	8008490 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800848a:	2303      	movs	r3, #3
 800848c:	73fb      	strb	r3, [r7, #15]
      break;
 800848e:	e004      	b.n	800849a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008490:	f7ff fda4 	bl	8007fdc <LL_RCC_PLLSAI1_IsReady>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1f0      	bne.n	800847c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800849a:	7bfb      	ldrb	r3, [r7, #15]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d137      	bne.n	8008510 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80084a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	021b      	lsls	r3, r3, #8
 80084b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80084b4:	4313      	orrs	r3, r2
 80084b6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80084b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80084ca:	4313      	orrs	r3, r2
 80084cc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80084ce:	f7ff fd67 	bl	8007fa0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084d2:	f7fc fa97 	bl	8004a04 <HAL_GetTick>
 80084d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80084d8:	e009      	b.n	80084ee <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80084da:	f7fc fa93 	bl	8004a04 <HAL_GetTick>
 80084de:	4602      	mov	r2, r0
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	1ad3      	subs	r3, r2, r3
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d902      	bls.n	80084ee <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80084e8:	2303      	movs	r3, #3
 80084ea:	73fb      	strb	r3, [r7, #15]
        break;
 80084ec:	e004      	b.n	80084f8 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80084ee:	f7ff fd75 	bl	8007fdc <LL_RCC_PLLSAI1_IsReady>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d1f0      	bne.n	80084da <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80084f8:	7bfb      	ldrb	r3, [r7, #15]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d108      	bne.n	8008510 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80084fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008502:	691a      	ldr	r2, [r3, #16]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800850c:	4313      	orrs	r3, r2
 800850e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008510:	7bfb      	ldrb	r3, [r7, #15]
}
 8008512:	4618      	mov	r0, r3
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b082      	sub	sp, #8
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d101      	bne.n	800852c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	e049      	b.n	80085c0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008532:	b2db      	uxtb	r3, r3
 8008534:	2b00      	cmp	r3, #0
 8008536:	d106      	bne.n	8008546 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f7fc f847 	bl	80045d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2202      	movs	r2, #2
 800854a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	3304      	adds	r3, #4
 8008556:	4619      	mov	r1, r3
 8008558:	4610      	mov	r0, r2
 800855a:	f000 f9cb 	bl	80088f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2201      	movs	r2, #1
 8008562:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2201      	movs	r2, #1
 800856a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2201      	movs	r2, #1
 8008572:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2201      	movs	r2, #1
 800857a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2201      	movs	r2, #1
 8008582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2201      	movs	r2, #1
 800859a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2201      	movs	r2, #1
 80085a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3708      	adds	r7, #8
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b085      	sub	sp, #20
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d001      	beq.n	80085e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	e036      	b.n	800864e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2202      	movs	r2, #2
 80085e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	68da      	ldr	r2, [r3, #12]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f042 0201 	orr.w	r2, r2, #1
 80085f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a17      	ldr	r2, [pc, #92]	; (800865c <HAL_TIM_Base_Start_IT+0x94>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d004      	beq.n	800860c <HAL_TIM_Base_Start_IT+0x44>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800860a:	d115      	bne.n	8008638 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	689a      	ldr	r2, [r3, #8]
 8008612:	4b13      	ldr	r3, [pc, #76]	; (8008660 <HAL_TIM_Base_Start_IT+0x98>)
 8008614:	4013      	ands	r3, r2
 8008616:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2b06      	cmp	r3, #6
 800861c:	d015      	beq.n	800864a <HAL_TIM_Base_Start_IT+0x82>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008624:	d011      	beq.n	800864a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f042 0201 	orr.w	r2, r2, #1
 8008634:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008636:	e008      	b.n	800864a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f042 0201 	orr.w	r2, r2, #1
 8008646:	601a      	str	r2, [r3, #0]
 8008648:	e000      	b.n	800864c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800864a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3714      	adds	r7, #20
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	40012c00 	.word	0x40012c00
 8008660:	00010007 	.word	0x00010007

08008664 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	f003 0302 	and.w	r3, r3, #2
 8008676:	2b02      	cmp	r3, #2
 8008678:	d122      	bne.n	80086c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	f003 0302 	and.w	r3, r3, #2
 8008684:	2b02      	cmp	r3, #2
 8008686:	d11b      	bne.n	80086c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f06f 0202 	mvn.w	r2, #2
 8008690:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	699b      	ldr	r3, [r3, #24]
 800869e:	f003 0303 	and.w	r3, r3, #3
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d003      	beq.n	80086ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f905 	bl	80088b6 <HAL_TIM_IC_CaptureCallback>
 80086ac:	e005      	b.n	80086ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f8f7 	bl	80088a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 f908 	bl	80088ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	f003 0304 	and.w	r3, r3, #4
 80086ca:	2b04      	cmp	r3, #4
 80086cc:	d122      	bne.n	8008714 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	f003 0304 	and.w	r3, r3, #4
 80086d8:	2b04      	cmp	r3, #4
 80086da:	d11b      	bne.n	8008714 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f06f 0204 	mvn.w	r2, #4
 80086e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2202      	movs	r2, #2
 80086ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	699b      	ldr	r3, [r3, #24]
 80086f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d003      	beq.n	8008702 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f8db 	bl	80088b6 <HAL_TIM_IC_CaptureCallback>
 8008700:	e005      	b.n	800870e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f8cd 	bl	80088a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 f8de 	bl	80088ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	691b      	ldr	r3, [r3, #16]
 800871a:	f003 0308 	and.w	r3, r3, #8
 800871e:	2b08      	cmp	r3, #8
 8008720:	d122      	bne.n	8008768 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	f003 0308 	and.w	r3, r3, #8
 800872c:	2b08      	cmp	r3, #8
 800872e:	d11b      	bne.n	8008768 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f06f 0208 	mvn.w	r2, #8
 8008738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2204      	movs	r2, #4
 800873e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	69db      	ldr	r3, [r3, #28]
 8008746:	f003 0303 	and.w	r3, r3, #3
 800874a:	2b00      	cmp	r3, #0
 800874c:	d003      	beq.n	8008756 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 f8b1 	bl	80088b6 <HAL_TIM_IC_CaptureCallback>
 8008754:	e005      	b.n	8008762 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 f8a3 	bl	80088a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 f8b4 	bl	80088ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	f003 0310 	and.w	r3, r3, #16
 8008772:	2b10      	cmp	r3, #16
 8008774:	d122      	bne.n	80087bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	f003 0310 	and.w	r3, r3, #16
 8008780:	2b10      	cmp	r3, #16
 8008782:	d11b      	bne.n	80087bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f06f 0210 	mvn.w	r2, #16
 800878c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2208      	movs	r2, #8
 8008792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	69db      	ldr	r3, [r3, #28]
 800879a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d003      	beq.n	80087aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f887 	bl	80088b6 <HAL_TIM_IC_CaptureCallback>
 80087a8:	e005      	b.n	80087b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 f879 	bl	80088a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 f88a 	bl	80088ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	691b      	ldr	r3, [r3, #16]
 80087c2:	f003 0301 	and.w	r3, r3, #1
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d10e      	bne.n	80087e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	f003 0301 	and.w	r3, r3, #1
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d107      	bne.n	80087e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f06f 0201 	mvn.w	r2, #1
 80087e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f7fb feac 	bl	8004540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087f2:	2b80      	cmp	r3, #128	; 0x80
 80087f4:	d10e      	bne.n	8008814 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008800:	2b80      	cmp	r3, #128	; 0x80
 8008802:	d107      	bne.n	8008814 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800880c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 f8de 	bl	80089d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800881e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008822:	d10e      	bne.n	8008842 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800882e:	2b80      	cmp	r3, #128	; 0x80
 8008830:	d107      	bne.n	8008842 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800883a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 f8d1 	bl	80089e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800884c:	2b40      	cmp	r3, #64	; 0x40
 800884e:	d10e      	bne.n	800886e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800885a:	2b40      	cmp	r3, #64	; 0x40
 800885c:	d107      	bne.n	800886e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 f838 	bl	80088de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	f003 0320 	and.w	r3, r3, #32
 8008878:	2b20      	cmp	r3, #32
 800887a:	d10e      	bne.n	800889a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	f003 0320 	and.w	r3, r3, #32
 8008886:	2b20      	cmp	r3, #32
 8008888:	d107      	bne.n	800889a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f06f 0220 	mvn.w	r2, #32
 8008892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 f891 	bl	80089bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800889a:	bf00      	nop
 800889c:	3708      	adds	r7, #8
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088a2:	b480      	push	{r7}
 80088a4:	b083      	sub	sp, #12
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80088aa:	bf00      	nop
 80088ac:	370c      	adds	r7, #12
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr

080088b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80088b6:	b480      	push	{r7}
 80088b8:	b083      	sub	sp, #12
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80088be:	bf00      	nop
 80088c0:	370c      	adds	r7, #12
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr

080088ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80088ca:	b480      	push	{r7}
 80088cc:	b083      	sub	sp, #12
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80088d2:	bf00      	nop
 80088d4:	370c      	adds	r7, #12
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr

080088de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80088de:	b480      	push	{r7}
 80088e0:	b083      	sub	sp, #12
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80088e6:	bf00      	nop
 80088e8:	370c      	adds	r7, #12
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr
	...

080088f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a2a      	ldr	r2, [pc, #168]	; (80089b0 <TIM_Base_SetConfig+0xbc>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d003      	beq.n	8008914 <TIM_Base_SetConfig+0x20>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008912:	d108      	bne.n	8008926 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800891a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	4313      	orrs	r3, r2
 8008924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4a21      	ldr	r2, [pc, #132]	; (80089b0 <TIM_Base_SetConfig+0xbc>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d00b      	beq.n	8008946 <TIM_Base_SetConfig+0x52>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008934:	d007      	beq.n	8008946 <TIM_Base_SetConfig+0x52>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a1e      	ldr	r2, [pc, #120]	; (80089b4 <TIM_Base_SetConfig+0xc0>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d003      	beq.n	8008946 <TIM_Base_SetConfig+0x52>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a1d      	ldr	r2, [pc, #116]	; (80089b8 <TIM_Base_SetConfig+0xc4>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d108      	bne.n	8008958 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800894c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	4313      	orrs	r3, r2
 8008956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	695b      	ldr	r3, [r3, #20]
 8008962:	4313      	orrs	r3, r2
 8008964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	68fa      	ldr	r2, [r7, #12]
 800896a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	689a      	ldr	r2, [r3, #8]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a0c      	ldr	r2, [pc, #48]	; (80089b0 <TIM_Base_SetConfig+0xbc>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d007      	beq.n	8008994 <TIM_Base_SetConfig+0xa0>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a0b      	ldr	r2, [pc, #44]	; (80089b4 <TIM_Base_SetConfig+0xc0>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d003      	beq.n	8008994 <TIM_Base_SetConfig+0xa0>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a0a      	ldr	r2, [pc, #40]	; (80089b8 <TIM_Base_SetConfig+0xc4>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d103      	bne.n	800899c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	691a      	ldr	r2, [r3, #16]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	615a      	str	r2, [r3, #20]
}
 80089a2:	bf00      	nop
 80089a4:	3714      	adds	r7, #20
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop
 80089b0:	40012c00 	.word	0x40012c00
 80089b4:	40014400 	.word	0x40014400
 80089b8:	40014800 	.word	0x40014800

080089bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80089c4:	bf00      	nop
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80089d8:	bf00      	nop
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80089ec:	bf00      	nop
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008a08:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008a0c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3714      	adds	r7, #20
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr

08008a26 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008a26:	b480      	push	{r7}
 8008a28:	b085      	sub	sp, #20
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008a2e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008a32:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008a3a:	b29a      	uxth	r2, r3
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	43db      	mvns	r3, r3
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	4013      	ands	r3, r2
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008a4e:	2300      	movs	r3, #0
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3714      	adds	r7, #20
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008a5c:	b084      	sub	sp, #16
 8008a5e:	b480      	push	{r7}
 8008a60:	b083      	sub	sp, #12
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
 8008a66:	f107 0014 	add.w	r0, r7, #20
 8008a6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2201      	movs	r2, #1
 8008a72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	b004      	add	sp, #16
 8008a9c:	4770      	bx	lr
	...

08008aa0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b09d      	sub	sp, #116	; 0x74
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	4413      	add	r3, r2
 8008aba:	881b      	ldrh	r3, [r3, #0]
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ac6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	78db      	ldrb	r3, [r3, #3]
 8008ace:	2b03      	cmp	r3, #3
 8008ad0:	d81f      	bhi.n	8008b12 <USB_ActivateEndpoint+0x72>
 8008ad2:	a201      	add	r2, pc, #4	; (adr r2, 8008ad8 <USB_ActivateEndpoint+0x38>)
 8008ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad8:	08008ae9 	.word	0x08008ae9
 8008adc:	08008b05 	.word	0x08008b05
 8008ae0:	08008b1b 	.word	0x08008b1b
 8008ae4:	08008af7 	.word	0x08008af7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008ae8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008aec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008af0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008af4:	e012      	b.n	8008b1c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008af6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008afa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008afe:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008b02:	e00b      	b.n	8008b1c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008b04:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008b08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008b0c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008b10:	e004      	b.n	8008b1c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8008b18:	e000      	b.n	8008b1c <USB_ActivateEndpoint+0x7c>
      break;
 8008b1a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	441a      	add	r2, r3
 8008b26:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008b2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	4413      	add	r3, r2
 8008b48:	881b      	ldrh	r3, [r3, #0]
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	b21b      	sxth	r3, r3
 8008b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b56:	b21a      	sxth	r2, r3
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	b21b      	sxth	r3, r3
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	b21b      	sxth	r3, r3
 8008b62:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	441a      	add	r2, r3
 8008b70:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008b74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	7b1b      	ldrb	r3, [r3, #12]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	f040 8178 	bne.w	8008e82 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	785b      	ldrb	r3, [r3, #1]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	f000 8084 	beq.w	8008ca4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	61bb      	str	r3, [r7, #24]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	461a      	mov	r2, r3
 8008baa:	69bb      	ldr	r3, [r7, #24]
 8008bac:	4413      	add	r3, r2
 8008bae:	61bb      	str	r3, [r7, #24]
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	00da      	lsls	r2, r3, #3
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	4413      	add	r3, r2
 8008bba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bbe:	617b      	str	r3, [r7, #20]
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	88db      	ldrh	r3, [r3, #6]
 8008bc4:	085b      	lsrs	r3, r3, #1
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	005b      	lsls	r3, r3, #1
 8008bca:	b29a      	uxth	r2, r3
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4413      	add	r3, r2
 8008bda:	881b      	ldrh	r3, [r3, #0]
 8008bdc:	827b      	strh	r3, [r7, #18]
 8008bde:	8a7b      	ldrh	r3, [r7, #18]
 8008be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d01b      	beq.n	8008c20 <USB_ActivateEndpoint+0x180>
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	4413      	add	r3, r2
 8008bf2:	881b      	ldrh	r3, [r3, #0]
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bfe:	823b      	strh	r3, [r7, #16]
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	441a      	add	r2, r3
 8008c0a:	8a3b      	ldrh	r3, [r7, #16]
 8008c0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	78db      	ldrb	r3, [r3, #3]
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d020      	beq.n	8008c6a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	4413      	add	r3, r2
 8008c32:	881b      	ldrh	r3, [r3, #0]
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c3e:	81bb      	strh	r3, [r7, #12]
 8008c40:	89bb      	ldrh	r3, [r7, #12]
 8008c42:	f083 0320 	eor.w	r3, r3, #32
 8008c46:	81bb      	strh	r3, [r7, #12]
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	441a      	add	r2, r3
 8008c52:	89bb      	ldrh	r3, [r7, #12]
 8008c54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	8013      	strh	r3, [r2, #0]
 8008c68:	e2d5      	b.n	8009216 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	4413      	add	r3, r2
 8008c74:	881b      	ldrh	r3, [r3, #0]
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c80:	81fb      	strh	r3, [r7, #14]
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	441a      	add	r2, r3
 8008c8c:	89fb      	ldrh	r3, [r7, #14]
 8008c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	8013      	strh	r3, [r2, #0]
 8008ca2:	e2b8      	b.n	8009216 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	633b      	str	r3, [r7, #48]	; 0x30
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb4:	4413      	add	r3, r2
 8008cb6:	633b      	str	r3, [r7, #48]	; 0x30
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	00da      	lsls	r2, r3, #3
 8008cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc0:	4413      	add	r3, r2
 8008cc2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	88db      	ldrh	r3, [r3, #6]
 8008ccc:	085b      	lsrs	r3, r3, #1
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	005b      	lsls	r3, r3, #1
 8008cd2:	b29a      	uxth	r2, r3
 8008cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce8:	4413      	add	r3, r2
 8008cea:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	00da      	lsls	r2, r3, #3
 8008cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf4:	4413      	add	r3, r2
 8008cf6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8008cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfe:	881b      	ldrh	r3, [r3, #0]
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d06:	b29a      	uxth	r2, r3
 8008d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0a:	801a      	strh	r2, [r3, #0]
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	2b3e      	cmp	r3, #62	; 0x3e
 8008d12:	d91d      	bls.n	8008d50 <USB_ActivateEndpoint+0x2b0>
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	095b      	lsrs	r3, r3, #5
 8008d1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	f003 031f 	and.w	r3, r3, #31
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d102      	bne.n	8008d2e <USB_ActivateEndpoint+0x28e>
 8008d28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d30:	881b      	ldrh	r3, [r3, #0]
 8008d32:	b29a      	uxth	r2, r3
 8008d34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	029b      	lsls	r3, r3, #10
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d48:	b29a      	uxth	r2, r3
 8008d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4c:	801a      	strh	r2, [r3, #0]
 8008d4e:	e026      	b.n	8008d9e <USB_ActivateEndpoint+0x2fe>
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10a      	bne.n	8008d6e <USB_ActivateEndpoint+0x2ce>
 8008d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5a:	881b      	ldrh	r3, [r3, #0]
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d66:	b29a      	uxth	r2, r3
 8008d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6a:	801a      	strh	r2, [r3, #0]
 8008d6c:	e017      	b.n	8008d9e <USB_ActivateEndpoint+0x2fe>
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	691b      	ldr	r3, [r3, #16]
 8008d72:	085b      	lsrs	r3, r3, #1
 8008d74:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	f003 0301 	and.w	r3, r3, #1
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d002      	beq.n	8008d88 <USB_ActivateEndpoint+0x2e8>
 8008d82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d84:	3301      	adds	r3, #1
 8008d86:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8a:	881b      	ldrh	r3, [r3, #0]
 8008d8c:	b29a      	uxth	r2, r3
 8008d8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	029b      	lsls	r3, r3, #10
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	4313      	orrs	r3, r2
 8008d98:	b29a      	uxth	r2, r3
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	4413      	add	r3, r2
 8008da8:	881b      	ldrh	r3, [r3, #0]
 8008daa:	847b      	strh	r3, [r7, #34]	; 0x22
 8008dac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d01b      	beq.n	8008dee <USB_ActivateEndpoint+0x34e>
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	4413      	add	r3, r2
 8008dc0:	881b      	ldrh	r3, [r3, #0]
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dcc:	843b      	strh	r3, [r7, #32]
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	441a      	add	r2, r3
 8008dd8:	8c3b      	ldrh	r3, [r7, #32]
 8008dda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008de2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d124      	bne.n	8008e40 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	4413      	add	r3, r2
 8008e00:	881b      	ldrh	r3, [r3, #0]
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e0c:	83bb      	strh	r3, [r7, #28]
 8008e0e:	8bbb      	ldrh	r3, [r7, #28]
 8008e10:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008e14:	83bb      	strh	r3, [r7, #28]
 8008e16:	8bbb      	ldrh	r3, [r7, #28]
 8008e18:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008e1c:	83bb      	strh	r3, [r7, #28]
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	441a      	add	r2, r3
 8008e28:	8bbb      	ldrh	r3, [r7, #28]
 8008e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	8013      	strh	r3, [r2, #0]
 8008e3e:	e1ea      	b.n	8009216 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	4413      	add	r3, r2
 8008e4a:	881b      	ldrh	r3, [r3, #0]
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e56:	83fb      	strh	r3, [r7, #30]
 8008e58:	8bfb      	ldrh	r3, [r7, #30]
 8008e5a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008e5e:	83fb      	strh	r3, [r7, #30]
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	441a      	add	r2, r3
 8008e6a:	8bfb      	ldrh	r3, [r7, #30]
 8008e6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	8013      	strh	r3, [r2, #0]
 8008e80:	e1c9      	b.n	8009216 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	78db      	ldrb	r3, [r3, #3]
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d11e      	bne.n	8008ec8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	4413      	add	r3, r2
 8008e94:	881b      	ldrh	r3, [r3, #0]
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ea0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	441a      	add	r2, r3
 8008eae:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008eba:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	8013      	strh	r3, [r2, #0]
 8008ec6:	e01d      	b.n	8008f04 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	4413      	add	r3, r2
 8008ed2:	881b      	ldrh	r3, [r3, #0]
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ede:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	441a      	add	r2, r3
 8008eec:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008ef0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ef4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	461a      	mov	r2, r3
 8008f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f14:	4413      	add	r3, r2
 8008f16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	00da      	lsls	r2, r3, #3
 8008f1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f20:	4413      	add	r3, r2
 8008f22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f26:	65bb      	str	r3, [r7, #88]	; 0x58
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	891b      	ldrh	r3, [r3, #8]
 8008f2c:	085b      	lsrs	r3, r3, #1
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	005b      	lsls	r3, r3, #1
 8008f32:	b29a      	uxth	r2, r3
 8008f34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f36:	801a      	strh	r2, [r3, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	657b      	str	r3, [r7, #84]	; 0x54
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	461a      	mov	r2, r3
 8008f46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f48:	4413      	add	r3, r2
 8008f4a:	657b      	str	r3, [r7, #84]	; 0x54
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	00da      	lsls	r2, r3, #3
 8008f52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f54:	4413      	add	r3, r2
 8008f56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008f5a:	653b      	str	r3, [r7, #80]	; 0x50
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	895b      	ldrh	r3, [r3, #10]
 8008f60:	085b      	lsrs	r3, r3, #1
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	005b      	lsls	r3, r3, #1
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f6a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	785b      	ldrb	r3, [r3, #1]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f040 8093 	bne.w	800909c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	4413      	add	r3, r2
 8008f80:	881b      	ldrh	r3, [r3, #0]
 8008f82:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008f86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d01b      	beq.n	8008fca <USB_ActivateEndpoint+0x52a>
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	4413      	add	r3, r2
 8008f9c:	881b      	ldrh	r3, [r3, #0]
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fa8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	441a      	add	r2, r3
 8008fb4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008fb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	4413      	add	r3, r2
 8008fd4:	881b      	ldrh	r3, [r3, #0]
 8008fd6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008fd8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d01b      	beq.n	800901a <USB_ActivateEndpoint+0x57a>
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	4413      	add	r3, r2
 8008fec:	881b      	ldrh	r3, [r3, #0]
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ff8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	441a      	add	r2, r3
 8009004:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800900a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800900e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009012:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009016:	b29b      	uxth	r3, r3
 8009018:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	4413      	add	r3, r2
 8009024:	881b      	ldrh	r3, [r3, #0]
 8009026:	b29b      	uxth	r3, r3
 8009028:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800902c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009030:	873b      	strh	r3, [r7, #56]	; 0x38
 8009032:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009034:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009038:	873b      	strh	r3, [r7, #56]	; 0x38
 800903a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800903c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009040:	873b      	strh	r3, [r7, #56]	; 0x38
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	441a      	add	r2, r3
 800904c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800904e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800905a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800905e:	b29b      	uxth	r3, r3
 8009060:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4413      	add	r3, r2
 800906c:	881b      	ldrh	r3, [r3, #0]
 800906e:	b29b      	uxth	r3, r3
 8009070:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009078:	86fb      	strh	r3, [r7, #54]	; 0x36
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	441a      	add	r2, r3
 8009084:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800908a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800908e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009096:	b29b      	uxth	r3, r3
 8009098:	8013      	strh	r3, [r2, #0]
 800909a:	e0bc      	b.n	8009216 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	4413      	add	r3, r2
 80090a6:	881b      	ldrh	r3, [r3, #0]
 80090a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80090ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80090b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d01d      	beq.n	80090f4 <USB_ActivateEndpoint+0x654>
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	4413      	add	r3, r2
 80090c2:	881b      	ldrh	r3, [r3, #0]
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090ce:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	441a      	add	r2, r3
 80090dc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80090e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80090ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	4413      	add	r3, r2
 80090fe:	881b      	ldrh	r3, [r3, #0]
 8009100:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009104:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800910c:	2b00      	cmp	r3, #0
 800910e:	d01d      	beq.n	800914c <USB_ActivateEndpoint+0x6ac>
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	4413      	add	r3, r2
 800911a:	881b      	ldrh	r3, [r3, #0]
 800911c:	b29b      	uxth	r3, r3
 800911e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009126:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	441a      	add	r2, r3
 8009134:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009138:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800913c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009140:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009144:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009148:	b29b      	uxth	r3, r3
 800914a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	78db      	ldrb	r3, [r3, #3]
 8009150:	2b01      	cmp	r3, #1
 8009152:	d024      	beq.n	800919e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	4413      	add	r3, r2
 800915e:	881b      	ldrh	r3, [r3, #0]
 8009160:	b29b      	uxth	r3, r3
 8009162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800916a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800916e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009172:	f083 0320 	eor.w	r3, r3, #32
 8009176:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	441a      	add	r2, r3
 8009184:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009188:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800918c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009198:	b29b      	uxth	r3, r3
 800919a:	8013      	strh	r3, [r2, #0]
 800919c:	e01d      	b.n	80091da <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	4413      	add	r3, r2
 80091a8:	881b      	ldrh	r3, [r3, #0]
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091b4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	441a      	add	r2, r3
 80091c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80091c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	4413      	add	r3, r2
 80091e4:	881b      	ldrh	r3, [r3, #0]
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091f0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	441a      	add	r2, r3
 80091fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800920a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800920e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009212:	b29b      	uxth	r3, r3
 8009214:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009216:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800921a:	4618      	mov	r0, r3
 800921c:	3774      	adds	r7, #116	; 0x74
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr
 8009226:	bf00      	nop

08009228 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009228:	b480      	push	{r7}
 800922a:	b08d      	sub	sp, #52	; 0x34
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	7b1b      	ldrb	r3, [r3, #12]
 8009236:	2b00      	cmp	r3, #0
 8009238:	f040 808e 	bne.w	8009358 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	785b      	ldrb	r3, [r3, #1]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d044      	beq.n	80092ce <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	4413      	add	r3, r2
 800924e:	881b      	ldrh	r3, [r3, #0]
 8009250:	81bb      	strh	r3, [r7, #12]
 8009252:	89bb      	ldrh	r3, [r7, #12]
 8009254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009258:	2b00      	cmp	r3, #0
 800925a:	d01b      	beq.n	8009294 <USB_DeactivateEndpoint+0x6c>
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	4413      	add	r3, r2
 8009266:	881b      	ldrh	r3, [r3, #0]
 8009268:	b29b      	uxth	r3, r3
 800926a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800926e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009272:	817b      	strh	r3, [r7, #10]
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	441a      	add	r2, r3
 800927e:	897b      	ldrh	r3, [r7, #10]
 8009280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009284:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800928c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009290:	b29b      	uxth	r3, r3
 8009292:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	4413      	add	r3, r2
 800929e:	881b      	ldrh	r3, [r3, #0]
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092aa:	813b      	strh	r3, [r7, #8]
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	441a      	add	r2, r3
 80092b6:	893b      	ldrh	r3, [r7, #8]
 80092b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	8013      	strh	r3, [r2, #0]
 80092cc:	e192      	b.n	80095f4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	4413      	add	r3, r2
 80092d8:	881b      	ldrh	r3, [r3, #0]
 80092da:	827b      	strh	r3, [r7, #18]
 80092dc:	8a7b      	ldrh	r3, [r7, #18]
 80092de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d01b      	beq.n	800931e <USB_DeactivateEndpoint+0xf6>
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	4413      	add	r3, r2
 80092f0:	881b      	ldrh	r3, [r3, #0]
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092fc:	823b      	strh	r3, [r7, #16]
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	441a      	add	r2, r3
 8009308:	8a3b      	ldrh	r3, [r7, #16]
 800930a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800930e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009312:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800931a:	b29b      	uxth	r3, r3
 800931c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	4413      	add	r3, r2
 8009328:	881b      	ldrh	r3, [r3, #0]
 800932a:	b29b      	uxth	r3, r3
 800932c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009334:	81fb      	strh	r3, [r7, #14]
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	441a      	add	r2, r3
 8009340:	89fb      	ldrh	r3, [r7, #14]
 8009342:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009346:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800934a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800934e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009352:	b29b      	uxth	r3, r3
 8009354:	8013      	strh	r3, [r2, #0]
 8009356:	e14d      	b.n	80095f4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	785b      	ldrb	r3, [r3, #1]
 800935c:	2b00      	cmp	r3, #0
 800935e:	f040 80a5 	bne.w	80094ac <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	4413      	add	r3, r2
 800936c:	881b      	ldrh	r3, [r3, #0]
 800936e:	843b      	strh	r3, [r7, #32]
 8009370:	8c3b      	ldrh	r3, [r7, #32]
 8009372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009376:	2b00      	cmp	r3, #0
 8009378:	d01b      	beq.n	80093b2 <USB_DeactivateEndpoint+0x18a>
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	4413      	add	r3, r2
 8009384:	881b      	ldrh	r3, [r3, #0]
 8009386:	b29b      	uxth	r3, r3
 8009388:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800938c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009390:	83fb      	strh	r3, [r7, #30]
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	441a      	add	r2, r3
 800939c:	8bfb      	ldrh	r3, [r7, #30]
 800939e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80093aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	4413      	add	r3, r2
 80093bc:	881b      	ldrh	r3, [r3, #0]
 80093be:	83bb      	strh	r3, [r7, #28]
 80093c0:	8bbb      	ldrh	r3, [r7, #28]
 80093c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d01b      	beq.n	8009402 <USB_DeactivateEndpoint+0x1da>
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	4413      	add	r3, r2
 80093d4:	881b      	ldrh	r3, [r3, #0]
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093e0:	837b      	strh	r3, [r7, #26]
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	441a      	add	r2, r3
 80093ec:	8b7b      	ldrh	r3, [r7, #26]
 80093ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80093fe:	b29b      	uxth	r3, r3
 8009400:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	4413      	add	r3, r2
 800940c:	881b      	ldrh	r3, [r3, #0]
 800940e:	b29b      	uxth	r3, r3
 8009410:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009418:	833b      	strh	r3, [r7, #24]
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	441a      	add	r2, r3
 8009424:	8b3b      	ldrh	r3, [r7, #24]
 8009426:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800942a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800942e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009432:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009436:	b29b      	uxth	r3, r3
 8009438:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	4413      	add	r3, r2
 8009444:	881b      	ldrh	r3, [r3, #0]
 8009446:	b29b      	uxth	r3, r3
 8009448:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800944c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009450:	82fb      	strh	r3, [r7, #22]
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	441a      	add	r2, r3
 800945c:	8afb      	ldrh	r3, [r7, #22]
 800945e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800946a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800946e:	b29b      	uxth	r3, r3
 8009470:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	4413      	add	r3, r2
 800947c:	881b      	ldrh	r3, [r3, #0]
 800947e:	b29b      	uxth	r3, r3
 8009480:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009488:	82bb      	strh	r3, [r7, #20]
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	441a      	add	r2, r3
 8009494:	8abb      	ldrh	r3, [r7, #20]
 8009496:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800949a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800949e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	8013      	strh	r3, [r2, #0]
 80094aa:	e0a3      	b.n	80095f4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	4413      	add	r3, r2
 80094b6:	881b      	ldrh	r3, [r3, #0]
 80094b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80094ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80094bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d01b      	beq.n	80094fc <USB_DeactivateEndpoint+0x2d4>
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	4413      	add	r3, r2
 80094ce:	881b      	ldrh	r3, [r3, #0]
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094da:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	441a      	add	r2, r3
 80094e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80094e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80094f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	4413      	add	r3, r2
 8009506:	881b      	ldrh	r3, [r3, #0]
 8009508:	857b      	strh	r3, [r7, #42]	; 0x2a
 800950a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800950c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009510:	2b00      	cmp	r3, #0
 8009512:	d01b      	beq.n	800954c <USB_DeactivateEndpoint+0x324>
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	4413      	add	r3, r2
 800951e:	881b      	ldrh	r3, [r3, #0]
 8009520:	b29b      	uxth	r3, r3
 8009522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800952a:	853b      	strh	r3, [r7, #40]	; 0x28
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	441a      	add	r2, r3
 8009536:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009538:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800953c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009540:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009544:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009548:	b29b      	uxth	r3, r3
 800954a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	4413      	add	r3, r2
 8009556:	881b      	ldrh	r3, [r3, #0]
 8009558:	b29b      	uxth	r3, r3
 800955a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800955e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009562:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	441a      	add	r2, r3
 800956e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009578:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800957c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009580:	b29b      	uxth	r3, r3
 8009582:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	4413      	add	r3, r2
 800958e:	881b      	ldrh	r3, [r3, #0]
 8009590:	b29b      	uxth	r3, r3
 8009592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800959a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	441a      	add	r2, r3
 80095a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	4413      	add	r3, r2
 80095c6:	881b      	ldrh	r3, [r3, #0]
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80095ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	441a      	add	r2, r3
 80095de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80095e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3734      	adds	r7, #52	; 0x34
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr

08009602 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b0c2      	sub	sp, #264	; 0x108
 8009606:	af00      	add	r7, sp, #0
 8009608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800960c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009610:	6018      	str	r0, [r3, #0]
 8009612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800961a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800961c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	785b      	ldrb	r3, [r3, #1]
 8009628:	2b01      	cmp	r3, #1
 800962a:	f040 86b7 	bne.w	800a39c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800962e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009632:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	699a      	ldr	r2, [r3, #24]
 800963a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800963e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	691b      	ldr	r3, [r3, #16]
 8009646:	429a      	cmp	r2, r3
 8009648:	d908      	bls.n	800965c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800964a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800964e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800965a:	e007      	b.n	800966c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800965c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009660:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	699b      	ldr	r3, [r3, #24]
 8009668:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800966c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	7b1b      	ldrb	r3, [r3, #12]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d13a      	bne.n	80096f2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800967c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009680:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	6959      	ldr	r1, [r3, #20]
 8009688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800968c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	88da      	ldrh	r2, [r3, #6]
 8009694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009698:	b29b      	uxth	r3, r3
 800969a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800969e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80096a2:	6800      	ldr	r0, [r0, #0]
 80096a4:	f001 fc98 	bl	800afd8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80096a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	613b      	str	r3, [r7, #16]
 80096b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	461a      	mov	r2, r3
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	4413      	add	r3, r2
 80096ca:	613b      	str	r3, [r7, #16]
 80096cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	00da      	lsls	r2, r3, #3
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	4413      	add	r3, r2
 80096de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80096e2:	60fb      	str	r3, [r7, #12]
 80096e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096e8:	b29a      	uxth	r2, r3
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	801a      	strh	r2, [r3, #0]
 80096ee:	f000 be1f 	b.w	800a330 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80096f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	78db      	ldrb	r3, [r3, #3]
 80096fe:	2b02      	cmp	r3, #2
 8009700:	f040 8462 	bne.w	8009fc8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	6a1a      	ldr	r2, [r3, #32]
 8009710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	691b      	ldr	r3, [r3, #16]
 800971c:	429a      	cmp	r2, r3
 800971e:	f240 83df 	bls.w	8009ee0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009726:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009730:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	4413      	add	r3, r2
 800973c:	881b      	ldrh	r3, [r3, #0]
 800973e:	b29b      	uxth	r3, r3
 8009740:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009748:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800974c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009750:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800975a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	441a      	add	r2, r3
 8009766:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800976a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800976e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009772:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800977a:	b29b      	uxth	r3, r3
 800977c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800977e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009782:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	6a1a      	ldr	r2, [r3, #32]
 800978a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800978e:	1ad2      	subs	r2, r2, r3
 8009790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800979c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	4413      	add	r3, r2
 80097b6:	881b      	ldrh	r3, [r3, #0]
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097be:	2b00      	cmp	r3, #0
 80097c0:	f000 81c7 	beq.w	8009b52 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80097c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	633b      	str	r3, [r7, #48]	; 0x30
 80097d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	785b      	ldrb	r3, [r3, #1]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d177      	bne.n	80098d0 <USB_EPStartXfer+0x2ce>
 80097e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80097ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	461a      	mov	r2, r3
 80097fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009800:	4413      	add	r3, r2
 8009802:	62bb      	str	r3, [r7, #40]	; 0x28
 8009804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009808:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	00da      	lsls	r2, r3, #3
 8009812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009814:	4413      	add	r3, r2
 8009816:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800981a:	627b      	str	r3, [r7, #36]	; 0x24
 800981c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981e:	881b      	ldrh	r3, [r3, #0]
 8009820:	b29b      	uxth	r3, r3
 8009822:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009826:	b29a      	uxth	r2, r3
 8009828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982a:	801a      	strh	r2, [r3, #0]
 800982c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009830:	2b3e      	cmp	r3, #62	; 0x3e
 8009832:	d921      	bls.n	8009878 <USB_EPStartXfer+0x276>
 8009834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009838:	095b      	lsrs	r3, r3, #5
 800983a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800983e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009842:	f003 031f 	and.w	r3, r3, #31
 8009846:	2b00      	cmp	r3, #0
 8009848:	d104      	bne.n	8009854 <USB_EPStartXfer+0x252>
 800984a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800984e:	3b01      	subs	r3, #1
 8009850:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009856:	881b      	ldrh	r3, [r3, #0]
 8009858:	b29a      	uxth	r2, r3
 800985a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800985e:	b29b      	uxth	r3, r3
 8009860:	029b      	lsls	r3, r3, #10
 8009862:	b29b      	uxth	r3, r3
 8009864:	4313      	orrs	r3, r2
 8009866:	b29b      	uxth	r3, r3
 8009868:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800986c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009870:	b29a      	uxth	r2, r3
 8009872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009874:	801a      	strh	r2, [r3, #0]
 8009876:	e050      	b.n	800991a <USB_EPStartXfer+0x318>
 8009878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800987c:	2b00      	cmp	r3, #0
 800987e:	d10a      	bne.n	8009896 <USB_EPStartXfer+0x294>
 8009880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009882:	881b      	ldrh	r3, [r3, #0]
 8009884:	b29b      	uxth	r3, r3
 8009886:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800988a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800988e:	b29a      	uxth	r2, r3
 8009890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009892:	801a      	strh	r2, [r3, #0]
 8009894:	e041      	b.n	800991a <USB_EPStartXfer+0x318>
 8009896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800989a:	085b      	lsrs	r3, r3, #1
 800989c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80098a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098a4:	f003 0301 	and.w	r3, r3, #1
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d004      	beq.n	80098b6 <USB_EPStartXfer+0x2b4>
 80098ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80098b0:	3301      	adds	r3, #1
 80098b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80098b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b8:	881b      	ldrh	r3, [r3, #0]
 80098ba:	b29a      	uxth	r2, r3
 80098bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	029b      	lsls	r3, r3, #10
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	4313      	orrs	r3, r2
 80098c8:	b29a      	uxth	r2, r3
 80098ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098cc:	801a      	strh	r2, [r3, #0]
 80098ce:	e024      	b.n	800991a <USB_EPStartXfer+0x318>
 80098d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	785b      	ldrb	r3, [r3, #1]
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d11c      	bne.n	800991a <USB_EPStartXfer+0x318>
 80098e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	461a      	mov	r2, r3
 80098f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f4:	4413      	add	r3, r2
 80098f6:	633b      	str	r3, [r7, #48]	; 0x30
 80098f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	00da      	lsls	r2, r3, #3
 8009906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009908:	4413      	add	r3, r2
 800990a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800990e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009914:	b29a      	uxth	r2, r3
 8009916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009918:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800991a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800991e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	895b      	ldrh	r3, [r3, #10]
 8009926:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800992a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800992e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	6959      	ldr	r1, [r3, #20]
 8009936:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800993a:	b29b      	uxth	r3, r3
 800993c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009940:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009944:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009948:	6800      	ldr	r0, [r0, #0]
 800994a:	f001 fb45 	bl	800afd8 <USB_WritePMA>
            ep->xfer_buff += len;
 800994e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009952:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	695a      	ldr	r2, [r3, #20]
 800995a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800995e:	441a      	add	r2, r3
 8009960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009964:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800996c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009970:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	6a1a      	ldr	r2, [r3, #32]
 8009978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800997c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	429a      	cmp	r2, r3
 8009986:	d90f      	bls.n	80099a8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8009988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800998c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	6a1a      	ldr	r2, [r3, #32]
 8009994:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009998:	1ad2      	subs	r2, r2, r3
 800999a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800999e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	621a      	str	r2, [r3, #32]
 80099a6:	e00e      	b.n	80099c6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80099a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	6a1b      	ldr	r3, [r3, #32]
 80099b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80099b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2200      	movs	r2, #0
 80099c4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80099c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	785b      	ldrb	r3, [r3, #1]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d177      	bne.n	8009ac6 <USB_EPStartXfer+0x4c4>
 80099d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	61bb      	str	r3, [r7, #24]
 80099e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	461a      	mov	r2, r3
 80099f4:	69bb      	ldr	r3, [r7, #24]
 80099f6:	4413      	add	r3, r2
 80099f8:	61bb      	str	r3, [r7, #24]
 80099fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	00da      	lsls	r2, r3, #3
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009a10:	617b      	str	r3, [r7, #20]
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	881b      	ldrh	r3, [r3, #0]
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a1c:	b29a      	uxth	r2, r3
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	801a      	strh	r2, [r3, #0]
 8009a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a26:	2b3e      	cmp	r3, #62	; 0x3e
 8009a28:	d921      	bls.n	8009a6e <USB_EPStartXfer+0x46c>
 8009a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a2e:	095b      	lsrs	r3, r3, #5
 8009a30:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a38:	f003 031f 	and.w	r3, r3, #31
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d104      	bne.n	8009a4a <USB_EPStartXfer+0x448>
 8009a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a44:	3b01      	subs	r3, #1
 8009a46:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	881b      	ldrh	r3, [r3, #0]
 8009a4e:	b29a      	uxth	r2, r3
 8009a50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	029b      	lsls	r3, r3, #10
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a66:	b29a      	uxth	r2, r3
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	801a      	strh	r2, [r3, #0]
 8009a6c:	e056      	b.n	8009b1c <USB_EPStartXfer+0x51a>
 8009a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d10a      	bne.n	8009a8c <USB_EPStartXfer+0x48a>
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	881b      	ldrh	r3, [r3, #0]
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a84:	b29a      	uxth	r2, r3
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	801a      	strh	r2, [r3, #0]
 8009a8a:	e047      	b.n	8009b1c <USB_EPStartXfer+0x51a>
 8009a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a90:	085b      	lsrs	r3, r3, #1
 8009a92:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a9a:	f003 0301 	and.w	r3, r3, #1
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d004      	beq.n	8009aac <USB_EPStartXfer+0x4aa>
 8009aa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	881b      	ldrh	r3, [r3, #0]
 8009ab0:	b29a      	uxth	r2, r3
 8009ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	029b      	lsls	r3, r3, #10
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	4313      	orrs	r3, r2
 8009abe:	b29a      	uxth	r2, r3
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	801a      	strh	r2, [r3, #0]
 8009ac4:	e02a      	b.n	8009b1c <USB_EPStartXfer+0x51a>
 8009ac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	785b      	ldrb	r3, [r3, #1]
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d122      	bne.n	8009b1c <USB_EPStartXfer+0x51a>
 8009ad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ada:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	623b      	str	r3, [r7, #32]
 8009ae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ae6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	461a      	mov	r2, r3
 8009af4:	6a3b      	ldr	r3, [r7, #32]
 8009af6:	4413      	add	r3, r2
 8009af8:	623b      	str	r3, [r7, #32]
 8009afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009afe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	00da      	lsls	r2, r3, #3
 8009b08:	6a3b      	ldr	r3, [r7, #32]
 8009b0a:	4413      	add	r3, r2
 8009b0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009b10:	61fb      	str	r3, [r7, #28]
 8009b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b16:	b29a      	uxth	r2, r3
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009b1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	891b      	ldrh	r3, [r3, #8]
 8009b28:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	6959      	ldr	r1, [r3, #20]
 8009b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009b42:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009b46:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009b4a:	6800      	ldr	r0, [r0, #0]
 8009b4c:	f001 fa44 	bl	800afd8 <USB_WritePMA>
 8009b50:	e3ee      	b.n	800a330 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	785b      	ldrb	r3, [r3, #1]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d177      	bne.n	8009c52 <USB_EPStartXfer+0x650>
 8009b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	461a      	mov	r2, r3
 8009b80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b82:	4413      	add	r3, r2
 8009b84:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	00da      	lsls	r2, r3, #3
 8009b94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b96:	4413      	add	r3, r2
 8009b98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009b9c:	647b      	str	r3, [r7, #68]	; 0x44
 8009b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ba0:	881b      	ldrh	r3, [r3, #0]
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ba8:	b29a      	uxth	r2, r3
 8009baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bac:	801a      	strh	r2, [r3, #0]
 8009bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bb2:	2b3e      	cmp	r3, #62	; 0x3e
 8009bb4:	d921      	bls.n	8009bfa <USB_EPStartXfer+0x5f8>
 8009bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bba:	095b      	lsrs	r3, r3, #5
 8009bbc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bc4:	f003 031f 	and.w	r3, r3, #31
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d104      	bne.n	8009bd6 <USB_EPStartXfer+0x5d4>
 8009bcc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009bd0:	3b01      	subs	r3, #1
 8009bd2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009bd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bd8:	881b      	ldrh	r3, [r3, #0]
 8009bda:	b29a      	uxth	r2, r3
 8009bdc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	029b      	lsls	r3, r3, #10
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	4313      	orrs	r3, r2
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bf2:	b29a      	uxth	r2, r3
 8009bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bf6:	801a      	strh	r2, [r3, #0]
 8009bf8:	e056      	b.n	8009ca8 <USB_EPStartXfer+0x6a6>
 8009bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d10a      	bne.n	8009c18 <USB_EPStartXfer+0x616>
 8009c02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c04:	881b      	ldrh	r3, [r3, #0]
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c14:	801a      	strh	r2, [r3, #0]
 8009c16:	e047      	b.n	8009ca8 <USB_EPStartXfer+0x6a6>
 8009c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c1c:	085b      	lsrs	r3, r3, #1
 8009c1e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c26:	f003 0301 	and.w	r3, r3, #1
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d004      	beq.n	8009c38 <USB_EPStartXfer+0x636>
 8009c2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009c32:	3301      	adds	r3, #1
 8009c34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c3a:	881b      	ldrh	r3, [r3, #0]
 8009c3c:	b29a      	uxth	r2, r3
 8009c3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	029b      	lsls	r3, r3, #10
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	b29a      	uxth	r2, r3
 8009c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c4e:	801a      	strh	r2, [r3, #0]
 8009c50:	e02a      	b.n	8009ca8 <USB_EPStartXfer+0x6a6>
 8009c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	785b      	ldrb	r3, [r3, #1]
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d122      	bne.n	8009ca8 <USB_EPStartXfer+0x6a6>
 8009c62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	653b      	str	r3, [r7, #80]	; 0x50
 8009c6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	461a      	mov	r2, r3
 8009c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c82:	4413      	add	r3, r2
 8009c84:	653b      	str	r3, [r7, #80]	; 0x50
 8009c86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	00da      	lsls	r2, r3, #3
 8009c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c96:	4413      	add	r3, r2
 8009c98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ca2:	b29a      	uxth	r2, r3
 8009ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ca6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009ca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	891b      	ldrh	r3, [r3, #8]
 8009cb4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009cb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	6959      	ldr	r1, [r3, #20]
 8009cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009cce:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009cd2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009cd6:	6800      	ldr	r0, [r0, #0]
 8009cd8:	f001 f97e 	bl	800afd8 <USB_WritePMA>
            ep->xfer_buff += len;
 8009cdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ce0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	695a      	ldr	r2, [r3, #20]
 8009ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cec:	441a      	add	r2, r3
 8009cee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	6a1a      	ldr	r2, [r3, #32]
 8009d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	691b      	ldr	r3, [r3, #16]
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d90f      	bls.n	8009d36 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8009d16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	6a1a      	ldr	r2, [r3, #32]
 8009d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d26:	1ad2      	subs	r2, r2, r3
 8009d28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	621a      	str	r2, [r3, #32]
 8009d34:	e00e      	b.n	8009d54 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8009d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	6a1b      	ldr	r3, [r3, #32]
 8009d42:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009d46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2200      	movs	r2, #0
 8009d52:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	643b      	str	r3, [r7, #64]	; 0x40
 8009d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	785b      	ldrb	r3, [r3, #1]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d177      	bne.n	8009e60 <USB_EPStartXfer+0x85e>
 8009d70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d90:	4413      	add	r3, r2
 8009d92:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	781b      	ldrb	r3, [r3, #0]
 8009da0:	00da      	lsls	r2, r3, #3
 8009da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da4:	4413      	add	r3, r2
 8009da6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009daa:	637b      	str	r3, [r7, #52]	; 0x34
 8009dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dae:	881b      	ldrh	r3, [r3, #0]
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009db6:	b29a      	uxth	r2, r3
 8009db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dba:	801a      	strh	r2, [r3, #0]
 8009dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dc0:	2b3e      	cmp	r3, #62	; 0x3e
 8009dc2:	d921      	bls.n	8009e08 <USB_EPStartXfer+0x806>
 8009dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dc8:	095b      	lsrs	r3, r3, #5
 8009dca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dd2:	f003 031f 	and.w	r3, r3, #31
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d104      	bne.n	8009de4 <USB_EPStartXfer+0x7e2>
 8009dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dde:	3b01      	subs	r3, #1
 8009de0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009de6:	881b      	ldrh	r3, [r3, #0]
 8009de8:	b29a      	uxth	r2, r3
 8009dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	029b      	lsls	r3, r3, #10
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	4313      	orrs	r3, r2
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e04:	801a      	strh	r2, [r3, #0]
 8009e06:	e050      	b.n	8009eaa <USB_EPStartXfer+0x8a8>
 8009e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d10a      	bne.n	8009e26 <USB_EPStartXfer+0x824>
 8009e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e12:	881b      	ldrh	r3, [r3, #0]
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e1e:	b29a      	uxth	r2, r3
 8009e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e22:	801a      	strh	r2, [r3, #0]
 8009e24:	e041      	b.n	8009eaa <USB_EPStartXfer+0x8a8>
 8009e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e2a:	085b      	lsrs	r3, r3, #1
 8009e2c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e34:	f003 0301 	and.w	r3, r3, #1
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d004      	beq.n	8009e46 <USB_EPStartXfer+0x844>
 8009e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e40:	3301      	adds	r3, #1
 8009e42:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e48:	881b      	ldrh	r3, [r3, #0]
 8009e4a:	b29a      	uxth	r2, r3
 8009e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	029b      	lsls	r3, r3, #10
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	4313      	orrs	r3, r2
 8009e58:	b29a      	uxth	r2, r3
 8009e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e5c:	801a      	strh	r2, [r3, #0]
 8009e5e:	e024      	b.n	8009eaa <USB_EPStartXfer+0x8a8>
 8009e60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	785b      	ldrb	r3, [r3, #1]
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d11c      	bne.n	8009eaa <USB_EPStartXfer+0x8a8>
 8009e70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	461a      	mov	r2, r3
 8009e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e84:	4413      	add	r3, r2
 8009e86:	643b      	str	r3, [r7, #64]	; 0x40
 8009e88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	00da      	lsls	r2, r3, #3
 8009e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e98:	4413      	add	r3, r2
 8009e9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ea4:	b29a      	uxth	r2, r3
 8009ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ea8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009eaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	895b      	ldrh	r3, [r3, #10]
 8009eb6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009eba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ebe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	6959      	ldr	r1, [r3, #20]
 8009ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009ed0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009ed4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009ed8:	6800      	ldr	r0, [r0, #0]
 8009eda:	f001 f87d 	bl	800afd8 <USB_WritePMA>
 8009ede:	e227      	b.n	800a330 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ee4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	6a1b      	ldr	r3, [r3, #32]
 8009eec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ef4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009efe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	4413      	add	r3, r2
 8009f0a:	881b      	ldrh	r3, [r3, #0]
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f16:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009f1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	441a      	add	r2, r3
 8009f34:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009f38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f48:	b29b      	uxth	r3, r3
 8009f4a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	461a      	mov	r2, r3
 8009f6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f6c:	4413      	add	r3, r2
 8009f6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	00da      	lsls	r2, r3, #3
 8009f7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f80:	4413      	add	r3, r2
 8009f82:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009f86:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f8c:	b29a      	uxth	r2, r3
 8009f8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f90:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	891b      	ldrh	r3, [r3, #8]
 8009f9e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	6959      	ldr	r1, [r3, #20]
 8009fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009fb8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009fbc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009fc0:	6800      	ldr	r0, [r0, #0]
 8009fc2:	f001 f809 	bl	800afd8 <USB_WritePMA>
 8009fc6:	e1b3      	b.n	800a330 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	6a1a      	ldr	r2, [r3, #32]
 8009fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fd8:	1ad2      	subs	r2, r2, r3
 8009fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fee:	681a      	ldr	r2, [r3, #0]
 8009ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	4413      	add	r3, r2
 800a000:	881b      	ldrh	r3, [r3, #0]
 800a002:	b29b      	uxth	r3, r3
 800a004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a008:	2b00      	cmp	r3, #0
 800a00a:	f000 80c6 	beq.w	800a19a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a00e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a012:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	673b      	str	r3, [r7, #112]	; 0x70
 800a01a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a01e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	785b      	ldrb	r3, [r3, #1]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d177      	bne.n	800a11a <USB_EPStartXfer+0xb18>
 800a02a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a02e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	66bb      	str	r3, [r7, #104]	; 0x68
 800a036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a03a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a044:	b29b      	uxth	r3, r3
 800a046:	461a      	mov	r2, r3
 800a048:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a04a:	4413      	add	r3, r2
 800a04c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a04e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a052:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	00da      	lsls	r2, r3, #3
 800a05c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a05e:	4413      	add	r3, r2
 800a060:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a064:	667b      	str	r3, [r7, #100]	; 0x64
 800a066:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a068:	881b      	ldrh	r3, [r3, #0]
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a070:	b29a      	uxth	r2, r3
 800a072:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a074:	801a      	strh	r2, [r3, #0]
 800a076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a07a:	2b3e      	cmp	r3, #62	; 0x3e
 800a07c:	d921      	bls.n	800a0c2 <USB_EPStartXfer+0xac0>
 800a07e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a082:	095b      	lsrs	r3, r3, #5
 800a084:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a088:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a08c:	f003 031f 	and.w	r3, r3, #31
 800a090:	2b00      	cmp	r3, #0
 800a092:	d104      	bne.n	800a09e <USB_EPStartXfer+0xa9c>
 800a094:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a098:	3b01      	subs	r3, #1
 800a09a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a09e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0a0:	881b      	ldrh	r3, [r3, #0]
 800a0a2:	b29a      	uxth	r2, r3
 800a0a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	029b      	lsls	r3, r3, #10
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0ba:	b29a      	uxth	r2, r3
 800a0bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0be:	801a      	strh	r2, [r3, #0]
 800a0c0:	e050      	b.n	800a164 <USB_EPStartXfer+0xb62>
 800a0c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d10a      	bne.n	800a0e0 <USB_EPStartXfer+0xade>
 800a0ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0cc:	881b      	ldrh	r3, [r3, #0]
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0d8:	b29a      	uxth	r2, r3
 800a0da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0dc:	801a      	strh	r2, [r3, #0]
 800a0de:	e041      	b.n	800a164 <USB_EPStartXfer+0xb62>
 800a0e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0e4:	085b      	lsrs	r3, r3, #1
 800a0e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a0ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0ee:	f003 0301 	and.w	r3, r3, #1
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d004      	beq.n	800a100 <USB_EPStartXfer+0xafe>
 800a0f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a100:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a102:	881b      	ldrh	r3, [r3, #0]
 800a104:	b29a      	uxth	r2, r3
 800a106:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	029b      	lsls	r3, r3, #10
 800a10e:	b29b      	uxth	r3, r3
 800a110:	4313      	orrs	r3, r2
 800a112:	b29a      	uxth	r2, r3
 800a114:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a116:	801a      	strh	r2, [r3, #0]
 800a118:	e024      	b.n	800a164 <USB_EPStartXfer+0xb62>
 800a11a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a11e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	785b      	ldrb	r3, [r3, #1]
 800a126:	2b01      	cmp	r3, #1
 800a128:	d11c      	bne.n	800a164 <USB_EPStartXfer+0xb62>
 800a12a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a12e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a138:	b29b      	uxth	r3, r3
 800a13a:	461a      	mov	r2, r3
 800a13c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a13e:	4413      	add	r3, r2
 800a140:	673b      	str	r3, [r7, #112]	; 0x70
 800a142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	00da      	lsls	r2, r3, #3
 800a150:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a152:	4413      	add	r3, r2
 800a154:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a158:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a15a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a15e:	b29a      	uxth	r2, r3
 800a160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a162:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	895b      	ldrh	r3, [r3, #10]
 800a170:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	6959      	ldr	r1, [r3, #20]
 800a180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a184:	b29b      	uxth	r3, r3
 800a186:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a18a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a18e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a192:	6800      	ldr	r0, [r0, #0]
 800a194:	f000 ff20 	bl	800afd8 <USB_WritePMA>
 800a198:	e0ca      	b.n	800a330 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a19a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a19e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	785b      	ldrb	r3, [r3, #1]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d177      	bne.n	800a29a <USB_EPStartXfer+0xc98>
 800a1aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a1b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a1ca:	4413      	add	r3, r2
 800a1cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a1ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	00da      	lsls	r2, r3, #3
 800a1dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a1de:	4413      	add	r3, r2
 800a1e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a1e4:	67bb      	str	r3, [r7, #120]	; 0x78
 800a1e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1e8:	881b      	ldrh	r3, [r3, #0]
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a1f0:	b29a      	uxth	r2, r3
 800a1f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1f4:	801a      	strh	r2, [r3, #0]
 800a1f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1fa:	2b3e      	cmp	r3, #62	; 0x3e
 800a1fc:	d921      	bls.n	800a242 <USB_EPStartXfer+0xc40>
 800a1fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a202:	095b      	lsrs	r3, r3, #5
 800a204:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a208:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a20c:	f003 031f 	and.w	r3, r3, #31
 800a210:	2b00      	cmp	r3, #0
 800a212:	d104      	bne.n	800a21e <USB_EPStartXfer+0xc1c>
 800a214:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a218:	3b01      	subs	r3, #1
 800a21a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a21e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a220:	881b      	ldrh	r3, [r3, #0]
 800a222:	b29a      	uxth	r2, r3
 800a224:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a228:	b29b      	uxth	r3, r3
 800a22a:	029b      	lsls	r3, r3, #10
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	4313      	orrs	r3, r2
 800a230:	b29b      	uxth	r3, r3
 800a232:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a236:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a23a:	b29a      	uxth	r2, r3
 800a23c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a23e:	801a      	strh	r2, [r3, #0]
 800a240:	e05c      	b.n	800a2fc <USB_EPStartXfer+0xcfa>
 800a242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a246:	2b00      	cmp	r3, #0
 800a248:	d10a      	bne.n	800a260 <USB_EPStartXfer+0xc5e>
 800a24a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a24c:	881b      	ldrh	r3, [r3, #0]
 800a24e:	b29b      	uxth	r3, r3
 800a250:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a254:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a258:	b29a      	uxth	r2, r3
 800a25a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a25c:	801a      	strh	r2, [r3, #0]
 800a25e:	e04d      	b.n	800a2fc <USB_EPStartXfer+0xcfa>
 800a260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a264:	085b      	lsrs	r3, r3, #1
 800a266:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a26a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a26e:	f003 0301 	and.w	r3, r3, #1
 800a272:	2b00      	cmp	r3, #0
 800a274:	d004      	beq.n	800a280 <USB_EPStartXfer+0xc7e>
 800a276:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a27a:	3301      	adds	r3, #1
 800a27c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a280:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a282:	881b      	ldrh	r3, [r3, #0]
 800a284:	b29a      	uxth	r2, r3
 800a286:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	029b      	lsls	r3, r3, #10
 800a28e:	b29b      	uxth	r3, r3
 800a290:	4313      	orrs	r3, r2
 800a292:	b29a      	uxth	r2, r3
 800a294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a296:	801a      	strh	r2, [r3, #0]
 800a298:	e030      	b.n	800a2fc <USB_EPStartXfer+0xcfa>
 800a29a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a29e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	785b      	ldrb	r3, [r3, #1]
 800a2a6:	2b01      	cmp	r3, #1
 800a2a8:	d128      	bne.n	800a2fc <USB_EPStartXfer+0xcfa>
 800a2aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a2b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a2ce:	4413      	add	r3, r2
 800a2d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a2d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	00da      	lsls	r2, r3, #3
 800a2e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a2e6:	4413      	add	r3, r2
 800a2e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a2ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a2f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2f4:	b29a      	uxth	r2, r3
 800a2f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a2fa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a2fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a300:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	891b      	ldrh	r3, [r3, #8]
 800a308:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a30c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	6959      	ldr	r1, [r3, #20]
 800a318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a31c:	b29b      	uxth	r3, r3
 800a31e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a322:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a326:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a32a:	6800      	ldr	r0, [r0, #0]
 800a32c:	f000 fe54 	bl	800afd8 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a334:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a33e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	4413      	add	r3, r2
 800a34a:	881b      	ldrh	r3, [r3, #0]
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a356:	817b      	strh	r3, [r7, #10]
 800a358:	897b      	ldrh	r3, [r7, #10]
 800a35a:	f083 0310 	eor.w	r3, r3, #16
 800a35e:	817b      	strh	r3, [r7, #10]
 800a360:	897b      	ldrh	r3, [r7, #10]
 800a362:	f083 0320 	eor.w	r3, r3, #32
 800a366:	817b      	strh	r3, [r7, #10]
 800a368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a36c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a376:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	441a      	add	r2, r3
 800a382:	897b      	ldrh	r3, [r7, #10]
 800a384:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a388:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a38c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a394:	b29b      	uxth	r3, r3
 800a396:	8013      	strh	r3, [r2, #0]
 800a398:	f000 bcde 	b.w	800ad58 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a39c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	7b1b      	ldrb	r3, [r3, #12]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	f040 80bb 	bne.w	800a524 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a3ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	699a      	ldr	r2, [r3, #24]
 800a3ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	691b      	ldr	r3, [r3, #16]
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d917      	bls.n	800a3fa <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800a3ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	691b      	ldr	r3, [r3, #16]
 800a3d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800a3da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	699a      	ldr	r2, [r3, #24]
 800a3e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3ea:	1ad2      	subs	r2, r2, r3
 800a3ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	619a      	str	r2, [r3, #24]
 800a3f8:	e00e      	b.n	800a418 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800a3fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	699b      	ldr	r3, [r3, #24]
 800a406:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800a40a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a40e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	2200      	movs	r2, #0
 800a416:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a41c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a42a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a434:	b29b      	uxth	r3, r3
 800a436:	461a      	mov	r2, r3
 800a438:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a43c:	4413      	add	r3, r2
 800a43e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	00da      	lsls	r2, r3, #3
 800a450:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a454:	4413      	add	r3, r2
 800a456:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a45a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a45e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a462:	881b      	ldrh	r3, [r3, #0]
 800a464:	b29b      	uxth	r3, r3
 800a466:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a46a:	b29a      	uxth	r2, r3
 800a46c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a470:	801a      	strh	r2, [r3, #0]
 800a472:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a476:	2b3e      	cmp	r3, #62	; 0x3e
 800a478:	d924      	bls.n	800a4c4 <USB_EPStartXfer+0xec2>
 800a47a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a47e:	095b      	lsrs	r3, r3, #5
 800a480:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a488:	f003 031f 	and.w	r3, r3, #31
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d104      	bne.n	800a49a <USB_EPStartXfer+0xe98>
 800a490:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a494:	3b01      	subs	r3, #1
 800a496:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a49a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a49e:	881b      	ldrh	r3, [r3, #0]
 800a4a0:	b29a      	uxth	r2, r3
 800a4a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	029b      	lsls	r3, r3, #10
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	b29b      	uxth	r3, r3
 800a4b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4b8:	b29a      	uxth	r2, r3
 800a4ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a4be:	801a      	strh	r2, [r3, #0]
 800a4c0:	f000 bc10 	b.w	800ace4 <USB_EPStartXfer+0x16e2>
 800a4c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d10c      	bne.n	800a4e6 <USB_EPStartXfer+0xee4>
 800a4cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a4d0:	881b      	ldrh	r3, [r3, #0]
 800a4d2:	b29b      	uxth	r3, r3
 800a4d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4dc:	b29a      	uxth	r2, r3
 800a4de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a4e2:	801a      	strh	r2, [r3, #0]
 800a4e4:	e3fe      	b.n	800ace4 <USB_EPStartXfer+0x16e2>
 800a4e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4ea:	085b      	lsrs	r3, r3, #1
 800a4ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a4f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4f4:	f003 0301 	and.w	r3, r3, #1
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d004      	beq.n	800a506 <USB_EPStartXfer+0xf04>
 800a4fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a500:	3301      	adds	r3, #1
 800a502:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a506:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a50a:	881b      	ldrh	r3, [r3, #0]
 800a50c:	b29a      	uxth	r2, r3
 800a50e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a512:	b29b      	uxth	r3, r3
 800a514:	029b      	lsls	r3, r3, #10
 800a516:	b29b      	uxth	r3, r3
 800a518:	4313      	orrs	r3, r2
 800a51a:	b29a      	uxth	r2, r3
 800a51c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a520:	801a      	strh	r2, [r3, #0]
 800a522:	e3df      	b.n	800ace4 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a528:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	78db      	ldrb	r3, [r3, #3]
 800a530:	2b02      	cmp	r3, #2
 800a532:	f040 8218 	bne.w	800a966 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a53a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	785b      	ldrb	r3, [r3, #1]
 800a542:	2b00      	cmp	r3, #0
 800a544:	f040 809d 	bne.w	800a682 <USB_EPStartXfer+0x1080>
 800a548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a54c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a55a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a564:	b29b      	uxth	r3, r3
 800a566:	461a      	mov	r2, r3
 800a568:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a56c:	4413      	add	r3, r2
 800a56e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	00da      	lsls	r2, r3, #3
 800a580:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a584:	4413      	add	r3, r2
 800a586:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a58a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a58e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a592:	881b      	ldrh	r3, [r3, #0]
 800a594:	b29b      	uxth	r3, r3
 800a596:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a59a:	b29a      	uxth	r2, r3
 800a59c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a5a0:	801a      	strh	r2, [r3, #0]
 800a5a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	691b      	ldr	r3, [r3, #16]
 800a5ae:	2b3e      	cmp	r3, #62	; 0x3e
 800a5b0:	d92b      	bls.n	800a60a <USB_EPStartXfer+0x1008>
 800a5b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	691b      	ldr	r3, [r3, #16]
 800a5be:	095b      	lsrs	r3, r3, #5
 800a5c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a5c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	691b      	ldr	r3, [r3, #16]
 800a5d0:	f003 031f 	and.w	r3, r3, #31
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d104      	bne.n	800a5e2 <USB_EPStartXfer+0xfe0>
 800a5d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5dc:	3b01      	subs	r3, #1
 800a5de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a5e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a5e6:	881b      	ldrh	r3, [r3, #0]
 800a5e8:	b29a      	uxth	r2, r3
 800a5ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	029b      	lsls	r3, r3, #10
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a600:	b29a      	uxth	r2, r3
 800a602:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a606:	801a      	strh	r2, [r3, #0]
 800a608:	e070      	b.n	800a6ec <USB_EPStartXfer+0x10ea>
 800a60a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a60e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	691b      	ldr	r3, [r3, #16]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d10c      	bne.n	800a634 <USB_EPStartXfer+0x1032>
 800a61a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a61e:	881b      	ldrh	r3, [r3, #0]
 800a620:	b29b      	uxth	r3, r3
 800a622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a62a:	b29a      	uxth	r2, r3
 800a62c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a630:	801a      	strh	r2, [r3, #0]
 800a632:	e05b      	b.n	800a6ec <USB_EPStartXfer+0x10ea>
 800a634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a638:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	691b      	ldr	r3, [r3, #16]
 800a640:	085b      	lsrs	r3, r3, #1
 800a642:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a64a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	691b      	ldr	r3, [r3, #16]
 800a652:	f003 0301 	and.w	r3, r3, #1
 800a656:	2b00      	cmp	r3, #0
 800a658:	d004      	beq.n	800a664 <USB_EPStartXfer+0x1062>
 800a65a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a65e:	3301      	adds	r3, #1
 800a660:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a664:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a668:	881b      	ldrh	r3, [r3, #0]
 800a66a:	b29a      	uxth	r2, r3
 800a66c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a670:	b29b      	uxth	r3, r3
 800a672:	029b      	lsls	r3, r3, #10
 800a674:	b29b      	uxth	r3, r3
 800a676:	4313      	orrs	r3, r2
 800a678:	b29a      	uxth	r2, r3
 800a67a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a67e:	801a      	strh	r2, [r3, #0]
 800a680:	e034      	b.n	800a6ec <USB_EPStartXfer+0x10ea>
 800a682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	785b      	ldrb	r3, [r3, #1]
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d12c      	bne.n	800a6ec <USB_EPStartXfer+0x10ea>
 800a692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a696:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a6a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a6b6:	4413      	add	r3, r2
 800a6b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a6bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	00da      	lsls	r2, r3, #3
 800a6ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a6ce:	4413      	add	r3, r2
 800a6d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a6d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a6d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	691b      	ldr	r3, [r3, #16]
 800a6e4:	b29a      	uxth	r2, r3
 800a6e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a6ea:	801a      	strh	r2, [r3, #0]
 800a6ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a6fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	785b      	ldrb	r3, [r3, #1]
 800a706:	2b00      	cmp	r3, #0
 800a708:	f040 809d 	bne.w	800a846 <USB_EPStartXfer+0x1244>
 800a70c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a710:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a71a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a71e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a728:	b29b      	uxth	r3, r3
 800a72a:	461a      	mov	r2, r3
 800a72c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a730:	4413      	add	r3, r2
 800a732:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a73a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	781b      	ldrb	r3, [r3, #0]
 800a742:	00da      	lsls	r2, r3, #3
 800a744:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a748:	4413      	add	r3, r2
 800a74a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a74e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a752:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a756:	881b      	ldrh	r3, [r3, #0]
 800a758:	b29b      	uxth	r3, r3
 800a75a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a75e:	b29a      	uxth	r2, r3
 800a760:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a764:	801a      	strh	r2, [r3, #0]
 800a766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a76a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	691b      	ldr	r3, [r3, #16]
 800a772:	2b3e      	cmp	r3, #62	; 0x3e
 800a774:	d92b      	bls.n	800a7ce <USB_EPStartXfer+0x11cc>
 800a776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a77a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	691b      	ldr	r3, [r3, #16]
 800a782:	095b      	lsrs	r3, r3, #5
 800a784:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a78c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	691b      	ldr	r3, [r3, #16]
 800a794:	f003 031f 	and.w	r3, r3, #31
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d104      	bne.n	800a7a6 <USB_EPStartXfer+0x11a4>
 800a79c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7a0:	3b01      	subs	r3, #1
 800a7a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a7a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a7aa:	881b      	ldrh	r3, [r3, #0]
 800a7ac:	b29a      	uxth	r2, r3
 800a7ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	029b      	lsls	r3, r3, #10
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7c4:	b29a      	uxth	r2, r3
 800a7c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a7ca:	801a      	strh	r2, [r3, #0]
 800a7cc:	e069      	b.n	800a8a2 <USB_EPStartXfer+0x12a0>
 800a7ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	691b      	ldr	r3, [r3, #16]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d10c      	bne.n	800a7f8 <USB_EPStartXfer+0x11f6>
 800a7de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a7e2:	881b      	ldrh	r3, [r3, #0]
 800a7e4:	b29b      	uxth	r3, r3
 800a7e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7ee:	b29a      	uxth	r2, r3
 800a7f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a7f4:	801a      	strh	r2, [r3, #0]
 800a7f6:	e054      	b.n	800a8a2 <USB_EPStartXfer+0x12a0>
 800a7f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	691b      	ldr	r3, [r3, #16]
 800a804:	085b      	lsrs	r3, r3, #1
 800a806:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a80a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a80e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	691b      	ldr	r3, [r3, #16]
 800a816:	f003 0301 	and.w	r3, r3, #1
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d004      	beq.n	800a828 <USB_EPStartXfer+0x1226>
 800a81e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a822:	3301      	adds	r3, #1
 800a824:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a828:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a82c:	881b      	ldrh	r3, [r3, #0]
 800a82e:	b29a      	uxth	r2, r3
 800a830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a834:	b29b      	uxth	r3, r3
 800a836:	029b      	lsls	r3, r3, #10
 800a838:	b29b      	uxth	r3, r3
 800a83a:	4313      	orrs	r3, r2
 800a83c:	b29a      	uxth	r2, r3
 800a83e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a842:	801a      	strh	r2, [r3, #0]
 800a844:	e02d      	b.n	800a8a2 <USB_EPStartXfer+0x12a0>
 800a846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a84a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	785b      	ldrb	r3, [r3, #1]
 800a852:	2b01      	cmp	r3, #1
 800a854:	d125      	bne.n	800a8a2 <USB_EPStartXfer+0x12a0>
 800a856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a85a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a864:	b29b      	uxth	r3, r3
 800a866:	461a      	mov	r2, r3
 800a868:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a86c:	4413      	add	r3, r2
 800a86e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a876:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	00da      	lsls	r2, r3, #3
 800a880:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a884:	4413      	add	r3, r2
 800a886:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a88a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a88e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	691b      	ldr	r3, [r3, #16]
 800a89a:	b29a      	uxth	r2, r3
 800a89c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a8a0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a8a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	69db      	ldr	r3, [r3, #28]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	f000 8218 	beq.w	800ace4 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a8b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8bc:	681a      	ldr	r2, [r3, #0]
 800a8be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	4413      	add	r3, r2
 800a8ce:	881b      	ldrh	r3, [r3, #0]
 800a8d0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a8d4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a8d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d005      	beq.n	800a8ec <USB_EPStartXfer+0x12ea>
 800a8e0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a8e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10d      	bne.n	800a908 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a8ec:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a8f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	f040 81f5 	bne.w	800ace4 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a8fa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a8fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a902:	2b00      	cmp	r3, #0
 800a904:	f040 81ee 	bne.w	800ace4 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a90c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	009b      	lsls	r3, r3, #2
 800a920:	4413      	add	r3, r2
 800a922:	881b      	ldrh	r3, [r3, #0]
 800a924:	b29b      	uxth	r3, r3
 800a926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a92a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a92e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800a932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a936:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a93a:	681a      	ldr	r2, [r3, #0]
 800a93c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a940:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	441a      	add	r2, r3
 800a94c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800a950:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a954:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a958:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a95c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a960:	b29b      	uxth	r3, r3
 800a962:	8013      	strh	r3, [r2, #0]
 800a964:	e1be      	b.n	800ace4 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a96a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	78db      	ldrb	r3, [r3, #3]
 800a972:	2b01      	cmp	r3, #1
 800a974:	f040 81b4 	bne.w	800ace0 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a97c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	699a      	ldr	r2, [r3, #24]
 800a984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	691b      	ldr	r3, [r3, #16]
 800a990:	429a      	cmp	r2, r3
 800a992:	d917      	bls.n	800a9c4 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800a994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a998:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	691b      	ldr	r3, [r3, #16]
 800a9a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800a9a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	699a      	ldr	r2, [r3, #24]
 800a9b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9b4:	1ad2      	subs	r2, r2, r3
 800a9b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	619a      	str	r2, [r3, #24]
 800a9c2:	e00e      	b.n	800a9e2 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800a9c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	699b      	ldr	r3, [r3, #24]
 800a9d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800a9d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a9e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	785b      	ldrb	r3, [r3, #1]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	f040 8085 	bne.w	800aafe <USB_EPStartXfer+0x14fc>
 800a9f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aa02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	461a      	mov	r2, r3
 800aa14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800aa18:	4413      	add	r3, r2
 800aa1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aa1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	781b      	ldrb	r3, [r3, #0]
 800aa2a:	00da      	lsls	r2, r3, #3
 800aa2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800aa30:	4413      	add	r3, r2
 800aa32:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aa3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aa3e:	881b      	ldrh	r3, [r3, #0]
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa46:	b29a      	uxth	r2, r3
 800aa48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aa4c:	801a      	strh	r2, [r3, #0]
 800aa4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa52:	2b3e      	cmp	r3, #62	; 0x3e
 800aa54:	d923      	bls.n	800aa9e <USB_EPStartXfer+0x149c>
 800aa56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa5a:	095b      	lsrs	r3, r3, #5
 800aa5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800aa60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa64:	f003 031f 	and.w	r3, r3, #31
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d104      	bne.n	800aa76 <USB_EPStartXfer+0x1474>
 800aa6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa70:	3b01      	subs	r3, #1
 800aa72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800aa76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aa7a:	881b      	ldrh	r3, [r3, #0]
 800aa7c:	b29a      	uxth	r2, r3
 800aa7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	029b      	lsls	r3, r3, #10
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	b29b      	uxth	r3, r3
 800aa8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa94:	b29a      	uxth	r2, r3
 800aa96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aa9a:	801a      	strh	r2, [r3, #0]
 800aa9c:	e060      	b.n	800ab60 <USB_EPStartXfer+0x155e>
 800aa9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d10c      	bne.n	800aac0 <USB_EPStartXfer+0x14be>
 800aaa6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aaaa:	881b      	ldrh	r3, [r3, #0]
 800aaac:	b29b      	uxth	r3, r3
 800aaae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aab2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aab6:	b29a      	uxth	r2, r3
 800aab8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aabc:	801a      	strh	r2, [r3, #0]
 800aabe:	e04f      	b.n	800ab60 <USB_EPStartXfer+0x155e>
 800aac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aac4:	085b      	lsrs	r3, r3, #1
 800aac6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800aaca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aace:	f003 0301 	and.w	r3, r3, #1
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d004      	beq.n	800aae0 <USB_EPStartXfer+0x14de>
 800aad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aada:	3301      	adds	r3, #1
 800aadc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800aae0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aae4:	881b      	ldrh	r3, [r3, #0]
 800aae6:	b29a      	uxth	r2, r3
 800aae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aaec:	b29b      	uxth	r3, r3
 800aaee:	029b      	lsls	r3, r3, #10
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	b29a      	uxth	r2, r3
 800aaf6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aafa:	801a      	strh	r2, [r3, #0]
 800aafc:	e030      	b.n	800ab60 <USB_EPStartXfer+0x155e>
 800aafe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	785b      	ldrb	r3, [r3, #1]
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d128      	bne.n	800ab60 <USB_EPStartXfer+0x155e>
 800ab0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ab1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	461a      	mov	r2, r3
 800ab2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ab32:	4413      	add	r3, r2
 800ab34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ab38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	00da      	lsls	r2, r3, #3
 800ab46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ab4a:	4413      	add	r3, r2
 800ab4c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ab50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ab54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab58:	b29a      	uxth	r2, r3
 800ab5a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ab5e:	801a      	strh	r2, [r3, #0]
 800ab60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ab6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	785b      	ldrb	r3, [r3, #1]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	f040 8085 	bne.w	800ac8a <USB_EPStartXfer+0x1688>
 800ab80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ab8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	461a      	mov	r2, r3
 800aba0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800aba4:	4413      	add	r3, r2
 800aba6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800abaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	781b      	ldrb	r3, [r3, #0]
 800abb6:	00da      	lsls	r2, r3, #3
 800abb8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800abbc:	4413      	add	r3, r2
 800abbe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800abc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800abc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800abca:	881b      	ldrh	r3, [r3, #0]
 800abcc:	b29b      	uxth	r3, r3
 800abce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abd2:	b29a      	uxth	r2, r3
 800abd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800abd8:	801a      	strh	r2, [r3, #0]
 800abda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abde:	2b3e      	cmp	r3, #62	; 0x3e
 800abe0:	d923      	bls.n	800ac2a <USB_EPStartXfer+0x1628>
 800abe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abe6:	095b      	lsrs	r3, r3, #5
 800abe8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800abec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abf0:	f003 031f 	and.w	r3, r3, #31
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d104      	bne.n	800ac02 <USB_EPStartXfer+0x1600>
 800abf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800abfc:	3b01      	subs	r3, #1
 800abfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ac02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ac06:	881b      	ldrh	r3, [r3, #0]
 800ac08:	b29a      	uxth	r2, r3
 800ac0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	029b      	lsls	r3, r3, #10
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	4313      	orrs	r3, r2
 800ac16:	b29b      	uxth	r3, r3
 800ac18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac20:	b29a      	uxth	r2, r3
 800ac22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ac26:	801a      	strh	r2, [r3, #0]
 800ac28:	e05c      	b.n	800ace4 <USB_EPStartXfer+0x16e2>
 800ac2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d10c      	bne.n	800ac4c <USB_EPStartXfer+0x164a>
 800ac32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ac36:	881b      	ldrh	r3, [r3, #0]
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac42:	b29a      	uxth	r2, r3
 800ac44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ac48:	801a      	strh	r2, [r3, #0]
 800ac4a:	e04b      	b.n	800ace4 <USB_EPStartXfer+0x16e2>
 800ac4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac50:	085b      	lsrs	r3, r3, #1
 800ac52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ac56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac5a:	f003 0301 	and.w	r3, r3, #1
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d004      	beq.n	800ac6c <USB_EPStartXfer+0x166a>
 800ac62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ac66:	3301      	adds	r3, #1
 800ac68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ac6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ac70:	881b      	ldrh	r3, [r3, #0]
 800ac72:	b29a      	uxth	r2, r3
 800ac74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	029b      	lsls	r3, r3, #10
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	b29a      	uxth	r2, r3
 800ac82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ac86:	801a      	strh	r2, [r3, #0]
 800ac88:	e02c      	b.n	800ace4 <USB_EPStartXfer+0x16e2>
 800ac8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	785b      	ldrb	r3, [r3, #1]
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d124      	bne.n	800ace4 <USB_EPStartXfer+0x16e2>
 800ac9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	461a      	mov	r2, r3
 800acac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800acb0:	4413      	add	r3, r2
 800acb2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800acb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	781b      	ldrb	r3, [r3, #0]
 800acc2:	00da      	lsls	r2, r3, #3
 800acc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800acc8:	4413      	add	r3, r2
 800acca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800acce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800acd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acd6:	b29a      	uxth	r2, r3
 800acd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800acdc:	801a      	strh	r2, [r3, #0]
 800acde:	e001      	b.n	800ace4 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800ace0:	2301      	movs	r3, #1
 800ace2:	e03a      	b.n	800ad5a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ace4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ace8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800acec:	681a      	ldr	r2, [r3, #0]
 800acee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	4413      	add	r3, r2
 800acfe:	881b      	ldrh	r3, [r3, #0]
 800ad00:	b29b      	uxth	r3, r3
 800ad02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad0a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ad0e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ad12:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ad16:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ad1a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ad1e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ad22:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ad26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	441a      	add	r2, r3
 800ad40:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ad44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ad58:	2300      	movs	r3, #0
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b085      	sub	sp, #20
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	785b      	ldrb	r3, [r3, #1]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d020      	beq.n	800adb8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ad76:	687a      	ldr	r2, [r7, #4]
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	4413      	add	r3, r2
 800ad80:	881b      	ldrh	r3, [r3, #0]
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad8c:	81bb      	strh	r3, [r7, #12]
 800ad8e:	89bb      	ldrh	r3, [r7, #12]
 800ad90:	f083 0310 	eor.w	r3, r3, #16
 800ad94:	81bb      	strh	r3, [r7, #12]
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	009b      	lsls	r3, r3, #2
 800ad9e:	441a      	add	r2, r3
 800ada0:	89bb      	ldrh	r3, [r7, #12]
 800ada2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ada6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adb2:	b29b      	uxth	r3, r3
 800adb4:	8013      	strh	r3, [r2, #0]
 800adb6:	e01f      	b.n	800adf8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800adb8:	687a      	ldr	r2, [r7, #4]
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	009b      	lsls	r3, r3, #2
 800adc0:	4413      	add	r3, r2
 800adc2:	881b      	ldrh	r3, [r3, #0]
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800adca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adce:	81fb      	strh	r3, [r7, #14]
 800add0:	89fb      	ldrh	r3, [r7, #14]
 800add2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800add6:	81fb      	strh	r3, [r7, #14]
 800add8:	687a      	ldr	r2, [r7, #4]
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	441a      	add	r2, r3
 800ade2:	89fb      	ldrh	r3, [r7, #14]
 800ade4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ade8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adf4:	b29b      	uxth	r3, r3
 800adf6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800adf8:	2300      	movs	r3, #0
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3714      	adds	r7, #20
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr

0800ae06 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ae06:	b480      	push	{r7}
 800ae08:	b087      	sub	sp, #28
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6078      	str	r0, [r7, #4]
 800ae0e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	7b1b      	ldrb	r3, [r3, #12]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	f040 809d 	bne.w	800af54 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	785b      	ldrb	r3, [r3, #1]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d04c      	beq.n	800aebc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	4413      	add	r3, r2
 800ae2c:	881b      	ldrh	r3, [r3, #0]
 800ae2e:	823b      	strh	r3, [r7, #16]
 800ae30:	8a3b      	ldrh	r3, [r7, #16]
 800ae32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d01b      	beq.n	800ae72 <USB_EPClearStall+0x6c>
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	4413      	add	r3, r2
 800ae44:	881b      	ldrh	r3, [r3, #0]
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae50:	81fb      	strh	r3, [r7, #14]
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	441a      	add	r2, r3
 800ae5c:	89fb      	ldrh	r3, [r7, #14]
 800ae5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ae6e:	b29b      	uxth	r3, r3
 800ae70:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	78db      	ldrb	r3, [r3, #3]
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d06c      	beq.n	800af54 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	4413      	add	r3, r2
 800ae84:	881b      	ldrh	r3, [r3, #0]
 800ae86:	b29b      	uxth	r3, r3
 800ae88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae90:	81bb      	strh	r3, [r7, #12]
 800ae92:	89bb      	ldrh	r3, [r7, #12]
 800ae94:	f083 0320 	eor.w	r3, r3, #32
 800ae98:	81bb      	strh	r3, [r7, #12]
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	009b      	lsls	r3, r3, #2
 800aea2:	441a      	add	r2, r3
 800aea4:	89bb      	ldrh	r3, [r7, #12]
 800aea6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aeaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aeae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aeb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aeb6:	b29b      	uxth	r3, r3
 800aeb8:	8013      	strh	r3, [r2, #0]
 800aeba:	e04b      	b.n	800af54 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aebc:	687a      	ldr	r2, [r7, #4]
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	009b      	lsls	r3, r3, #2
 800aec4:	4413      	add	r3, r2
 800aec6:	881b      	ldrh	r3, [r3, #0]
 800aec8:	82fb      	strh	r3, [r7, #22]
 800aeca:	8afb      	ldrh	r3, [r7, #22]
 800aecc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d01b      	beq.n	800af0c <USB_EPClearStall+0x106>
 800aed4:	687a      	ldr	r2, [r7, #4]
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	4413      	add	r3, r2
 800aede:	881b      	ldrh	r3, [r3, #0]
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aeea:	82bb      	strh	r3, [r7, #20]
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	441a      	add	r2, r3
 800aef6:	8abb      	ldrh	r3, [r7, #20]
 800aef8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aefc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800af04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af08:	b29b      	uxth	r3, r3
 800af0a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800af0c:	687a      	ldr	r2, [r7, #4]
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	4413      	add	r3, r2
 800af16:	881b      	ldrh	r3, [r3, #0]
 800af18:	b29b      	uxth	r3, r3
 800af1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800af1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af22:	827b      	strh	r3, [r7, #18]
 800af24:	8a7b      	ldrh	r3, [r7, #18]
 800af26:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800af2a:	827b      	strh	r3, [r7, #18]
 800af2c:	8a7b      	ldrh	r3, [r7, #18]
 800af2e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800af32:	827b      	strh	r3, [r7, #18]
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	441a      	add	r2, r3
 800af3e:	8a7b      	ldrh	r3, [r7, #18]
 800af40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af50:	b29b      	uxth	r3, r3
 800af52:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800af54:	2300      	movs	r3, #0
}
 800af56:	4618      	mov	r0, r3
 800af58:	371c      	adds	r7, #28
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr

0800af62 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800af62:	b480      	push	{r7}
 800af64:	b083      	sub	sp, #12
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
 800af6a:	460b      	mov	r3, r1
 800af6c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800af6e:	78fb      	ldrb	r3, [r7, #3]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d103      	bne.n	800af7c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2280      	movs	r2, #128	; 0x80
 800af78:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800af7c:	2300      	movs	r3, #0
}
 800af7e:	4618      	mov	r0, r3
 800af80:	370c      	adds	r7, #12
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr

0800af8a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800af8a:	b480      	push	{r7}
 800af8c:	b083      	sub	sp, #12
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800af98:	b29b      	uxth	r3, r3
 800af9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afa2:	b29a      	uxth	r2, r3
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800afaa:	2300      	movs	r3, #0
}
 800afac:	4618      	mov	r0, r3
 800afae:	370c      	adds	r7, #12
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr

0800afb8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800afb8:	b480      	push	{r7}
 800afba:	b085      	sub	sp, #20
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800afc6:	b29b      	uxth	r3, r3
 800afc8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800afca:	68fb      	ldr	r3, [r7, #12]
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3714      	adds	r7, #20
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800afd8:	b480      	push	{r7}
 800afda:	b08b      	sub	sp, #44	; 0x2c
 800afdc:	af00      	add	r7, sp, #0
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	4611      	mov	r1, r2
 800afe4:	461a      	mov	r2, r3
 800afe6:	460b      	mov	r3, r1
 800afe8:	80fb      	strh	r3, [r7, #6]
 800afea:	4613      	mov	r3, r2
 800afec:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800afee:	88bb      	ldrh	r3, [r7, #4]
 800aff0:	3301      	adds	r3, #1
 800aff2:	085b      	lsrs	r3, r3, #1
 800aff4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800affe:	88fa      	ldrh	r2, [r7, #6]
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	4413      	add	r3, r2
 800b004:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b008:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b00a:	69bb      	ldr	r3, [r7, #24]
 800b00c:	627b      	str	r3, [r7, #36]	; 0x24
 800b00e:	e01b      	b.n	800b048 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b016:	69fb      	ldr	r3, [r7, #28]
 800b018:	3301      	adds	r3, #1
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	021b      	lsls	r3, r3, #8
 800b01e:	b21a      	sxth	r2, r3
 800b020:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b024:	4313      	orrs	r3, r2
 800b026:	b21b      	sxth	r3, r3
 800b028:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b02a:	6a3b      	ldr	r3, [r7, #32]
 800b02c:	8a7a      	ldrh	r2, [r7, #18]
 800b02e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b030:	6a3b      	ldr	r3, [r7, #32]
 800b032:	3302      	adds	r3, #2
 800b034:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b036:	69fb      	ldr	r3, [r7, #28]
 800b038:	3301      	adds	r3, #1
 800b03a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b03c:	69fb      	ldr	r3, [r7, #28]
 800b03e:	3301      	adds	r3, #1
 800b040:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b044:	3b01      	subs	r3, #1
 800b046:	627b      	str	r3, [r7, #36]	; 0x24
 800b048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d1e0      	bne.n	800b010 <USB_WritePMA+0x38>
  }
}
 800b04e:	bf00      	nop
 800b050:	bf00      	nop
 800b052:	372c      	adds	r7, #44	; 0x2c
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr

0800b05c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b08b      	sub	sp, #44	; 0x2c
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	4611      	mov	r1, r2
 800b068:	461a      	mov	r2, r3
 800b06a:	460b      	mov	r3, r1
 800b06c:	80fb      	strh	r3, [r7, #6]
 800b06e:	4613      	mov	r3, r2
 800b070:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b072:	88bb      	ldrh	r3, [r7, #4]
 800b074:	085b      	lsrs	r3, r3, #1
 800b076:	b29b      	uxth	r3, r3
 800b078:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b082:	88fa      	ldrh	r2, [r7, #6]
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	4413      	add	r3, r2
 800b088:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b08c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b08e:	69bb      	ldr	r3, [r7, #24]
 800b090:	627b      	str	r3, [r7, #36]	; 0x24
 800b092:	e018      	b.n	800b0c6 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b094:	6a3b      	ldr	r3, [r7, #32]
 800b096:	881b      	ldrh	r3, [r3, #0]
 800b098:	b29b      	uxth	r3, r3
 800b09a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b09c:	6a3b      	ldr	r3, [r7, #32]
 800b09e:	3302      	adds	r3, #2
 800b0a0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	b2da      	uxtb	r2, r3
 800b0a6:	69fb      	ldr	r3, [r7, #28]
 800b0a8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b0aa:	69fb      	ldr	r3, [r7, #28]
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	0a1b      	lsrs	r3, r3, #8
 800b0b4:	b2da      	uxtb	r2, r3
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b0ba:	69fb      	ldr	r3, [r7, #28]
 800b0bc:	3301      	adds	r3, #1
 800b0be:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c2:	3b01      	subs	r3, #1
 800b0c4:	627b      	str	r3, [r7, #36]	; 0x24
 800b0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d1e3      	bne.n	800b094 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b0cc:	88bb      	ldrh	r3, [r7, #4]
 800b0ce:	f003 0301 	and.w	r3, r3, #1
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d007      	beq.n	800b0e8 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800b0d8:	6a3b      	ldr	r3, [r7, #32]
 800b0da:	881b      	ldrh	r3, [r3, #0]
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	b2da      	uxtb	r2, r3
 800b0e4:	69fb      	ldr	r3, [r7, #28]
 800b0e6:	701a      	strb	r2, [r3, #0]
  }
}
 800b0e8:	bf00      	nop
 800b0ea:	372c      	adds	r7, #44	; 0x2c
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr

0800b0f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b100:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b104:	f002 fde4 	bl	800dcd0 <USBD_static_malloc>
 800b108:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d109      	bne.n	800b124 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	32b0      	adds	r2, #176	; 0xb0
 800b11a:	2100      	movs	r1, #0
 800b11c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b120:	2302      	movs	r3, #2
 800b122:	e0d4      	b.n	800b2ce <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b124:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b128:	2100      	movs	r1, #0
 800b12a:	68f8      	ldr	r0, [r7, #12]
 800b12c:	f002 fe56 	bl	800dddc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	32b0      	adds	r2, #176	; 0xb0
 800b13a:	68f9      	ldr	r1, [r7, #12]
 800b13c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	32b0      	adds	r2, #176	; 0xb0
 800b14a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	7c1b      	ldrb	r3, [r3, #16]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d138      	bne.n	800b1ce <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b15c:	4b5e      	ldr	r3, [pc, #376]	; (800b2d8 <USBD_CDC_Init+0x1e4>)
 800b15e:	7819      	ldrb	r1, [r3, #0]
 800b160:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b164:	2202      	movs	r2, #2
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f002 fc57 	bl	800da1a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b16c:	4b5a      	ldr	r3, [pc, #360]	; (800b2d8 <USBD_CDC_Init+0x1e4>)
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	f003 020f 	and.w	r2, r3, #15
 800b174:	6879      	ldr	r1, [r7, #4]
 800b176:	4613      	mov	r3, r2
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	4413      	add	r3, r2
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	440b      	add	r3, r1
 800b180:	3324      	adds	r3, #36	; 0x24
 800b182:	2201      	movs	r2, #1
 800b184:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b186:	4b55      	ldr	r3, [pc, #340]	; (800b2dc <USBD_CDC_Init+0x1e8>)
 800b188:	7819      	ldrb	r1, [r3, #0]
 800b18a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b18e:	2202      	movs	r2, #2
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f002 fc42 	bl	800da1a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b196:	4b51      	ldr	r3, [pc, #324]	; (800b2dc <USBD_CDC_Init+0x1e8>)
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	f003 020f 	and.w	r2, r3, #15
 800b19e:	6879      	ldr	r1, [r7, #4]
 800b1a0:	4613      	mov	r3, r2
 800b1a2:	009b      	lsls	r3, r3, #2
 800b1a4:	4413      	add	r3, r2
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	440b      	add	r3, r1
 800b1aa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b1b2:	4b4b      	ldr	r3, [pc, #300]	; (800b2e0 <USBD_CDC_Init+0x1ec>)
 800b1b4:	781b      	ldrb	r3, [r3, #0]
 800b1b6:	f003 020f 	and.w	r2, r3, #15
 800b1ba:	6879      	ldr	r1, [r7, #4]
 800b1bc:	4613      	mov	r3, r2
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	4413      	add	r3, r2
 800b1c2:	009b      	lsls	r3, r3, #2
 800b1c4:	440b      	add	r3, r1
 800b1c6:	3326      	adds	r3, #38	; 0x26
 800b1c8:	2210      	movs	r2, #16
 800b1ca:	801a      	strh	r2, [r3, #0]
 800b1cc:	e035      	b.n	800b23a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b1ce:	4b42      	ldr	r3, [pc, #264]	; (800b2d8 <USBD_CDC_Init+0x1e4>)
 800b1d0:	7819      	ldrb	r1, [r3, #0]
 800b1d2:	2340      	movs	r3, #64	; 0x40
 800b1d4:	2202      	movs	r2, #2
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f002 fc1f 	bl	800da1a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b1dc:	4b3e      	ldr	r3, [pc, #248]	; (800b2d8 <USBD_CDC_Init+0x1e4>)
 800b1de:	781b      	ldrb	r3, [r3, #0]
 800b1e0:	f003 020f 	and.w	r2, r3, #15
 800b1e4:	6879      	ldr	r1, [r7, #4]
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	4413      	add	r3, r2
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	440b      	add	r3, r1
 800b1f0:	3324      	adds	r3, #36	; 0x24
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b1f6:	4b39      	ldr	r3, [pc, #228]	; (800b2dc <USBD_CDC_Init+0x1e8>)
 800b1f8:	7819      	ldrb	r1, [r3, #0]
 800b1fa:	2340      	movs	r3, #64	; 0x40
 800b1fc:	2202      	movs	r2, #2
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f002 fc0b 	bl	800da1a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b204:	4b35      	ldr	r3, [pc, #212]	; (800b2dc <USBD_CDC_Init+0x1e8>)
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	f003 020f 	and.w	r2, r3, #15
 800b20c:	6879      	ldr	r1, [r7, #4]
 800b20e:	4613      	mov	r3, r2
 800b210:	009b      	lsls	r3, r3, #2
 800b212:	4413      	add	r3, r2
 800b214:	009b      	lsls	r3, r3, #2
 800b216:	440b      	add	r3, r1
 800b218:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b21c:	2201      	movs	r2, #1
 800b21e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b220:	4b2f      	ldr	r3, [pc, #188]	; (800b2e0 <USBD_CDC_Init+0x1ec>)
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	f003 020f 	and.w	r2, r3, #15
 800b228:	6879      	ldr	r1, [r7, #4]
 800b22a:	4613      	mov	r3, r2
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	4413      	add	r3, r2
 800b230:	009b      	lsls	r3, r3, #2
 800b232:	440b      	add	r3, r1
 800b234:	3326      	adds	r3, #38	; 0x26
 800b236:	2210      	movs	r2, #16
 800b238:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b23a:	4b29      	ldr	r3, [pc, #164]	; (800b2e0 <USBD_CDC_Init+0x1ec>)
 800b23c:	7819      	ldrb	r1, [r3, #0]
 800b23e:	2308      	movs	r3, #8
 800b240:	2203      	movs	r2, #3
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f002 fbe9 	bl	800da1a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b248:	4b25      	ldr	r3, [pc, #148]	; (800b2e0 <USBD_CDC_Init+0x1ec>)
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	f003 020f 	and.w	r2, r3, #15
 800b250:	6879      	ldr	r1, [r7, #4]
 800b252:	4613      	mov	r3, r2
 800b254:	009b      	lsls	r3, r3, #2
 800b256:	4413      	add	r3, r2
 800b258:	009b      	lsls	r3, r3, #2
 800b25a:	440b      	add	r3, r1
 800b25c:	3324      	adds	r3, #36	; 0x24
 800b25e:	2201      	movs	r2, #1
 800b260:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2200      	movs	r2, #0
 800b266:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	33b0      	adds	r3, #176	; 0xb0
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	4413      	add	r3, r2
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2200      	movs	r2, #0
 800b282:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2200      	movs	r2, #0
 800b28a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b294:	2b00      	cmp	r3, #0
 800b296:	d101      	bne.n	800b29c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b298:	2302      	movs	r3, #2
 800b29a:	e018      	b.n	800b2ce <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	7c1b      	ldrb	r3, [r3, #16]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d10a      	bne.n	800b2ba <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b2a4:	4b0d      	ldr	r3, [pc, #52]	; (800b2dc <USBD_CDC_Init+0x1e8>)
 800b2a6:	7819      	ldrb	r1, [r3, #0]
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b2ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f002 fca1 	bl	800dbfa <USBD_LL_PrepareReceive>
 800b2b8:	e008      	b.n	800b2cc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b2ba:	4b08      	ldr	r3, [pc, #32]	; (800b2dc <USBD_CDC_Init+0x1e8>)
 800b2bc:	7819      	ldrb	r1, [r3, #0]
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b2c4:	2340      	movs	r3, #64	; 0x40
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f002 fc97 	bl	800dbfa <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b2cc:	2300      	movs	r3, #0
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3710      	adds	r7, #16
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
 800b2d6:	bf00      	nop
 800b2d8:	2000009f 	.word	0x2000009f
 800b2dc:	200000a0 	.word	0x200000a0
 800b2e0:	200000a1 	.word	0x200000a1

0800b2e4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b082      	sub	sp, #8
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b2f0:	4b3a      	ldr	r3, [pc, #232]	; (800b3dc <USBD_CDC_DeInit+0xf8>)
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f002 fbb5 	bl	800da66 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b2fc:	4b37      	ldr	r3, [pc, #220]	; (800b3dc <USBD_CDC_DeInit+0xf8>)
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	f003 020f 	and.w	r2, r3, #15
 800b304:	6879      	ldr	r1, [r7, #4]
 800b306:	4613      	mov	r3, r2
 800b308:	009b      	lsls	r3, r3, #2
 800b30a:	4413      	add	r3, r2
 800b30c:	009b      	lsls	r3, r3, #2
 800b30e:	440b      	add	r3, r1
 800b310:	3324      	adds	r3, #36	; 0x24
 800b312:	2200      	movs	r2, #0
 800b314:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b316:	4b32      	ldr	r3, [pc, #200]	; (800b3e0 <USBD_CDC_DeInit+0xfc>)
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	4619      	mov	r1, r3
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f002 fba2 	bl	800da66 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b322:	4b2f      	ldr	r3, [pc, #188]	; (800b3e0 <USBD_CDC_DeInit+0xfc>)
 800b324:	781b      	ldrb	r3, [r3, #0]
 800b326:	f003 020f 	and.w	r2, r3, #15
 800b32a:	6879      	ldr	r1, [r7, #4]
 800b32c:	4613      	mov	r3, r2
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	4413      	add	r3, r2
 800b332:	009b      	lsls	r3, r3, #2
 800b334:	440b      	add	r3, r1
 800b336:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b33a:	2200      	movs	r2, #0
 800b33c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b33e:	4b29      	ldr	r3, [pc, #164]	; (800b3e4 <USBD_CDC_DeInit+0x100>)
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	4619      	mov	r1, r3
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f002 fb8e 	bl	800da66 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b34a:	4b26      	ldr	r3, [pc, #152]	; (800b3e4 <USBD_CDC_DeInit+0x100>)
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	f003 020f 	and.w	r2, r3, #15
 800b352:	6879      	ldr	r1, [r7, #4]
 800b354:	4613      	mov	r3, r2
 800b356:	009b      	lsls	r3, r3, #2
 800b358:	4413      	add	r3, r2
 800b35a:	009b      	lsls	r3, r3, #2
 800b35c:	440b      	add	r3, r1
 800b35e:	3324      	adds	r3, #36	; 0x24
 800b360:	2200      	movs	r2, #0
 800b362:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b364:	4b1f      	ldr	r3, [pc, #124]	; (800b3e4 <USBD_CDC_DeInit+0x100>)
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	f003 020f 	and.w	r2, r3, #15
 800b36c:	6879      	ldr	r1, [r7, #4]
 800b36e:	4613      	mov	r3, r2
 800b370:	009b      	lsls	r3, r3, #2
 800b372:	4413      	add	r3, r2
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	440b      	add	r3, r1
 800b378:	3326      	adds	r3, #38	; 0x26
 800b37a:	2200      	movs	r2, #0
 800b37c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	32b0      	adds	r2, #176	; 0xb0
 800b388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d01f      	beq.n	800b3d0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b396:	687a      	ldr	r2, [r7, #4]
 800b398:	33b0      	adds	r3, #176	; 0xb0
 800b39a:	009b      	lsls	r3, r3, #2
 800b39c:	4413      	add	r3, r2
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	32b0      	adds	r2, #176	; 0xb0
 800b3ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f002 fc9a 	bl	800dcec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	32b0      	adds	r2, #176	; 0xb0
 800b3c2:	2100      	movs	r1, #0
 800b3c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b3d0:	2300      	movs	r3, #0
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3708      	adds	r7, #8
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	2000009f 	.word	0x2000009f
 800b3e0:	200000a0 	.word	0x200000a0
 800b3e4:	200000a1 	.word	0x200000a1

0800b3e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b086      	sub	sp, #24
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	32b0      	adds	r2, #176	; 0xb0
 800b3fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b400:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b402:	2300      	movs	r3, #0
 800b404:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b406:	2300      	movs	r3, #0
 800b408:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b40a:	2300      	movs	r3, #0
 800b40c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d101      	bne.n	800b418 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b414:	2303      	movs	r3, #3
 800b416:	e0bf      	b.n	800b598 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b420:	2b00      	cmp	r3, #0
 800b422:	d050      	beq.n	800b4c6 <USBD_CDC_Setup+0xde>
 800b424:	2b20      	cmp	r3, #32
 800b426:	f040 80af 	bne.w	800b588 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	88db      	ldrh	r3, [r3, #6]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d03a      	beq.n	800b4a8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	b25b      	sxtb	r3, r3
 800b438:	2b00      	cmp	r3, #0
 800b43a:	da1b      	bge.n	800b474 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b442:	687a      	ldr	r2, [r7, #4]
 800b444:	33b0      	adds	r3, #176	; 0xb0
 800b446:	009b      	lsls	r3, r3, #2
 800b448:	4413      	add	r3, r2
 800b44a:	685b      	ldr	r3, [r3, #4]
 800b44c:	689b      	ldr	r3, [r3, #8]
 800b44e:	683a      	ldr	r2, [r7, #0]
 800b450:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b452:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b454:	683a      	ldr	r2, [r7, #0]
 800b456:	88d2      	ldrh	r2, [r2, #6]
 800b458:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	88db      	ldrh	r3, [r3, #6]
 800b45e:	2b07      	cmp	r3, #7
 800b460:	bf28      	it	cs
 800b462:	2307      	movcs	r3, #7
 800b464:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	89fa      	ldrh	r2, [r7, #14]
 800b46a:	4619      	mov	r1, r3
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f001 fd21 	bl	800ceb4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b472:	e090      	b.n	800b596 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	785a      	ldrb	r2, [r3, #1]
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	88db      	ldrh	r3, [r3, #6]
 800b482:	2b3f      	cmp	r3, #63	; 0x3f
 800b484:	d803      	bhi.n	800b48e <USBD_CDC_Setup+0xa6>
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	88db      	ldrh	r3, [r3, #6]
 800b48a:	b2da      	uxtb	r2, r3
 800b48c:	e000      	b.n	800b490 <USBD_CDC_Setup+0xa8>
 800b48e:	2240      	movs	r2, #64	; 0x40
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b496:	6939      	ldr	r1, [r7, #16]
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b49e:	461a      	mov	r2, r3
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f001 fd33 	bl	800cf0c <USBD_CtlPrepareRx>
      break;
 800b4a6:	e076      	b.n	800b596 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	33b0      	adds	r3, #176	; 0xb0
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	4413      	add	r3, r2
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	689b      	ldr	r3, [r3, #8]
 800b4ba:	683a      	ldr	r2, [r7, #0]
 800b4bc:	7850      	ldrb	r0, [r2, #1]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	6839      	ldr	r1, [r7, #0]
 800b4c2:	4798      	blx	r3
      break;
 800b4c4:	e067      	b.n	800b596 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	785b      	ldrb	r3, [r3, #1]
 800b4ca:	2b0b      	cmp	r3, #11
 800b4cc:	d851      	bhi.n	800b572 <USBD_CDC_Setup+0x18a>
 800b4ce:	a201      	add	r2, pc, #4	; (adr r2, 800b4d4 <USBD_CDC_Setup+0xec>)
 800b4d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4d4:	0800b505 	.word	0x0800b505
 800b4d8:	0800b581 	.word	0x0800b581
 800b4dc:	0800b573 	.word	0x0800b573
 800b4e0:	0800b573 	.word	0x0800b573
 800b4e4:	0800b573 	.word	0x0800b573
 800b4e8:	0800b573 	.word	0x0800b573
 800b4ec:	0800b573 	.word	0x0800b573
 800b4f0:	0800b573 	.word	0x0800b573
 800b4f4:	0800b573 	.word	0x0800b573
 800b4f8:	0800b573 	.word	0x0800b573
 800b4fc:	0800b52f 	.word	0x0800b52f
 800b500:	0800b559 	.word	0x0800b559
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b50a:	b2db      	uxtb	r3, r3
 800b50c:	2b03      	cmp	r3, #3
 800b50e:	d107      	bne.n	800b520 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b510:	f107 030a 	add.w	r3, r7, #10
 800b514:	2202      	movs	r2, #2
 800b516:	4619      	mov	r1, r3
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f001 fccb 	bl	800ceb4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b51e:	e032      	b.n	800b586 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b520:	6839      	ldr	r1, [r7, #0]
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f001 fc55 	bl	800cdd2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b528:	2303      	movs	r3, #3
 800b52a:	75fb      	strb	r3, [r7, #23]
          break;
 800b52c:	e02b      	b.n	800b586 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b534:	b2db      	uxtb	r3, r3
 800b536:	2b03      	cmp	r3, #3
 800b538:	d107      	bne.n	800b54a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b53a:	f107 030d 	add.w	r3, r7, #13
 800b53e:	2201      	movs	r2, #1
 800b540:	4619      	mov	r1, r3
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f001 fcb6 	bl	800ceb4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b548:	e01d      	b.n	800b586 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b54a:	6839      	ldr	r1, [r7, #0]
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f001 fc40 	bl	800cdd2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b552:	2303      	movs	r3, #3
 800b554:	75fb      	strb	r3, [r7, #23]
          break;
 800b556:	e016      	b.n	800b586 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	2b03      	cmp	r3, #3
 800b562:	d00f      	beq.n	800b584 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b564:	6839      	ldr	r1, [r7, #0]
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f001 fc33 	bl	800cdd2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b56c:	2303      	movs	r3, #3
 800b56e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b570:	e008      	b.n	800b584 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b572:	6839      	ldr	r1, [r7, #0]
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f001 fc2c 	bl	800cdd2 <USBD_CtlError>
          ret = USBD_FAIL;
 800b57a:	2303      	movs	r3, #3
 800b57c:	75fb      	strb	r3, [r7, #23]
          break;
 800b57e:	e002      	b.n	800b586 <USBD_CDC_Setup+0x19e>
          break;
 800b580:	bf00      	nop
 800b582:	e008      	b.n	800b596 <USBD_CDC_Setup+0x1ae>
          break;
 800b584:	bf00      	nop
      }
      break;
 800b586:	e006      	b.n	800b596 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b588:	6839      	ldr	r1, [r7, #0]
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f001 fc21 	bl	800cdd2 <USBD_CtlError>
      ret = USBD_FAIL;
 800b590:	2303      	movs	r3, #3
 800b592:	75fb      	strb	r3, [r7, #23]
      break;
 800b594:	bf00      	nop
  }

  return (uint8_t)ret;
 800b596:	7dfb      	ldrb	r3, [r7, #23]
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3718      	adds	r7, #24
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	460b      	mov	r3, r1
 800b5aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b5b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	32b0      	adds	r2, #176	; 0xb0
 800b5be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d101      	bne.n	800b5ca <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b5c6:	2303      	movs	r3, #3
 800b5c8:	e065      	b.n	800b696 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	32b0      	adds	r2, #176	; 0xb0
 800b5d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5d8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b5da:	78fb      	ldrb	r3, [r7, #3]
 800b5dc:	f003 020f 	and.w	r2, r3, #15
 800b5e0:	6879      	ldr	r1, [r7, #4]
 800b5e2:	4613      	mov	r3, r2
 800b5e4:	009b      	lsls	r3, r3, #2
 800b5e6:	4413      	add	r3, r2
 800b5e8:	009b      	lsls	r3, r3, #2
 800b5ea:	440b      	add	r3, r1
 800b5ec:	3318      	adds	r3, #24
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d02f      	beq.n	800b654 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b5f4:	78fb      	ldrb	r3, [r7, #3]
 800b5f6:	f003 020f 	and.w	r2, r3, #15
 800b5fa:	6879      	ldr	r1, [r7, #4]
 800b5fc:	4613      	mov	r3, r2
 800b5fe:	009b      	lsls	r3, r3, #2
 800b600:	4413      	add	r3, r2
 800b602:	009b      	lsls	r3, r3, #2
 800b604:	440b      	add	r3, r1
 800b606:	3318      	adds	r3, #24
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	78fb      	ldrb	r3, [r7, #3]
 800b60c:	f003 010f 	and.w	r1, r3, #15
 800b610:	68f8      	ldr	r0, [r7, #12]
 800b612:	460b      	mov	r3, r1
 800b614:	009b      	lsls	r3, r3, #2
 800b616:	440b      	add	r3, r1
 800b618:	00db      	lsls	r3, r3, #3
 800b61a:	4403      	add	r3, r0
 800b61c:	3338      	adds	r3, #56	; 0x38
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	fbb2 f1f3 	udiv	r1, r2, r3
 800b624:	fb01 f303 	mul.w	r3, r1, r3
 800b628:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d112      	bne.n	800b654 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b62e:	78fb      	ldrb	r3, [r7, #3]
 800b630:	f003 020f 	and.w	r2, r3, #15
 800b634:	6879      	ldr	r1, [r7, #4]
 800b636:	4613      	mov	r3, r2
 800b638:	009b      	lsls	r3, r3, #2
 800b63a:	4413      	add	r3, r2
 800b63c:	009b      	lsls	r3, r3, #2
 800b63e:	440b      	add	r3, r1
 800b640:	3318      	adds	r3, #24
 800b642:	2200      	movs	r2, #0
 800b644:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b646:	78f9      	ldrb	r1, [r7, #3]
 800b648:	2300      	movs	r3, #0
 800b64a:	2200      	movs	r2, #0
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f002 fab3 	bl	800dbb8 <USBD_LL_Transmit>
 800b652:	e01f      	b.n	800b694 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	2200      	movs	r2, #0
 800b658:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b662:	687a      	ldr	r2, [r7, #4]
 800b664:	33b0      	adds	r3, #176	; 0xb0
 800b666:	009b      	lsls	r3, r3, #2
 800b668:	4413      	add	r3, r2
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	691b      	ldr	r3, [r3, #16]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d010      	beq.n	800b694 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b678:	687a      	ldr	r2, [r7, #4]
 800b67a:	33b0      	adds	r3, #176	; 0xb0
 800b67c:	009b      	lsls	r3, r3, #2
 800b67e:	4413      	add	r3, r2
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	691b      	ldr	r3, [r3, #16]
 800b684:	68ba      	ldr	r2, [r7, #8]
 800b686:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b68a:	68ba      	ldr	r2, [r7, #8]
 800b68c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b690:	78fa      	ldrb	r2, [r7, #3]
 800b692:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b694:	2300      	movs	r3, #0
}
 800b696:	4618      	mov	r0, r3
 800b698:	3710      	adds	r7, #16
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}

0800b69e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b69e:	b580      	push	{r7, lr}
 800b6a0:	b084      	sub	sp, #16
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
 800b6a6:	460b      	mov	r3, r1
 800b6a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	32b0      	adds	r2, #176	; 0xb0
 800b6b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6b8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	32b0      	adds	r2, #176	; 0xb0
 800b6c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d101      	bne.n	800b6d0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b6cc:	2303      	movs	r3, #3
 800b6ce:	e01a      	b.n	800b706 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b6d0:	78fb      	ldrb	r3, [r7, #3]
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f002 fab1 	bl	800dc3c <USBD_LL_GetRxDataSize>
 800b6da:	4602      	mov	r2, r0
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b6e8:	687a      	ldr	r2, [r7, #4]
 800b6ea:	33b0      	adds	r3, #176	; 0xb0
 800b6ec:	009b      	lsls	r3, r3, #2
 800b6ee:	4413      	add	r3, r2
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	68db      	ldr	r3, [r3, #12]
 800b6f4:	68fa      	ldr	r2, [r7, #12]
 800b6f6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b6fa:	68fa      	ldr	r2, [r7, #12]
 800b6fc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b700:	4611      	mov	r1, r2
 800b702:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b704:	2300      	movs	r3, #0
}
 800b706:	4618      	mov	r0, r3
 800b708:	3710      	adds	r7, #16
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}

0800b70e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b70e:	b580      	push	{r7, lr}
 800b710:	b084      	sub	sp, #16
 800b712:	af00      	add	r7, sp, #0
 800b714:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	32b0      	adds	r2, #176	; 0xb0
 800b720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b724:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d101      	bne.n	800b730 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b72c:	2303      	movs	r3, #3
 800b72e:	e025      	b.n	800b77c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	33b0      	adds	r3, #176	; 0xb0
 800b73a:	009b      	lsls	r3, r3, #2
 800b73c:	4413      	add	r3, r2
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d01a      	beq.n	800b77a <USBD_CDC_EP0_RxReady+0x6c>
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b74a:	2bff      	cmp	r3, #255	; 0xff
 800b74c:	d015      	beq.n	800b77a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b754:	687a      	ldr	r2, [r7, #4]
 800b756:	33b0      	adds	r3, #176	; 0xb0
 800b758:	009b      	lsls	r3, r3, #2
 800b75a:	4413      	add	r3, r2
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	689b      	ldr	r3, [r3, #8]
 800b760:	68fa      	ldr	r2, [r7, #12]
 800b762:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b766:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b768:	68fa      	ldr	r2, [r7, #12]
 800b76a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b76e:	b292      	uxth	r2, r2
 800b770:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	22ff      	movs	r2, #255	; 0xff
 800b776:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b77a:	2300      	movs	r3, #0
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3710      	adds	r7, #16
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}

0800b784 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b086      	sub	sp, #24
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b78c:	2182      	movs	r1, #130	; 0x82
 800b78e:	4818      	ldr	r0, [pc, #96]	; (800b7f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b790:	f000 fcbd 	bl	800c10e <USBD_GetEpDesc>
 800b794:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b796:	2101      	movs	r1, #1
 800b798:	4815      	ldr	r0, [pc, #84]	; (800b7f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b79a:	f000 fcb8 	bl	800c10e <USBD_GetEpDesc>
 800b79e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b7a0:	2181      	movs	r1, #129	; 0x81
 800b7a2:	4813      	ldr	r0, [pc, #76]	; (800b7f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b7a4:	f000 fcb3 	bl	800c10e <USBD_GetEpDesc>
 800b7a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d002      	beq.n	800b7b6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	2210      	movs	r2, #16
 800b7b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d006      	beq.n	800b7ca <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b7c4:	711a      	strb	r2, [r3, #4]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d006      	beq.n	800b7de <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b7d8:	711a      	strb	r2, [r3, #4]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2243      	movs	r2, #67	; 0x43
 800b7e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b7e4:	4b02      	ldr	r3, [pc, #8]	; (800b7f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3718      	adds	r7, #24
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	2000005c 	.word	0x2000005c

0800b7f4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b086      	sub	sp, #24
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b7fc:	2182      	movs	r1, #130	; 0x82
 800b7fe:	4818      	ldr	r0, [pc, #96]	; (800b860 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b800:	f000 fc85 	bl	800c10e <USBD_GetEpDesc>
 800b804:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b806:	2101      	movs	r1, #1
 800b808:	4815      	ldr	r0, [pc, #84]	; (800b860 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b80a:	f000 fc80 	bl	800c10e <USBD_GetEpDesc>
 800b80e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b810:	2181      	movs	r1, #129	; 0x81
 800b812:	4813      	ldr	r0, [pc, #76]	; (800b860 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b814:	f000 fc7b 	bl	800c10e <USBD_GetEpDesc>
 800b818:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d002      	beq.n	800b826 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	2210      	movs	r2, #16
 800b824:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d006      	beq.n	800b83a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	2200      	movs	r2, #0
 800b830:	711a      	strb	r2, [r3, #4]
 800b832:	2200      	movs	r2, #0
 800b834:	f042 0202 	orr.w	r2, r2, #2
 800b838:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d006      	beq.n	800b84e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2200      	movs	r2, #0
 800b844:	711a      	strb	r2, [r3, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	f042 0202 	orr.w	r2, r2, #2
 800b84c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2243      	movs	r2, #67	; 0x43
 800b852:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b854:	4b02      	ldr	r3, [pc, #8]	; (800b860 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b856:	4618      	mov	r0, r3
 800b858:	3718      	adds	r7, #24
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	2000005c 	.word	0x2000005c

0800b864 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b086      	sub	sp, #24
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b86c:	2182      	movs	r1, #130	; 0x82
 800b86e:	4818      	ldr	r0, [pc, #96]	; (800b8d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b870:	f000 fc4d 	bl	800c10e <USBD_GetEpDesc>
 800b874:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b876:	2101      	movs	r1, #1
 800b878:	4815      	ldr	r0, [pc, #84]	; (800b8d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b87a:	f000 fc48 	bl	800c10e <USBD_GetEpDesc>
 800b87e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b880:	2181      	movs	r1, #129	; 0x81
 800b882:	4813      	ldr	r0, [pc, #76]	; (800b8d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b884:	f000 fc43 	bl	800c10e <USBD_GetEpDesc>
 800b888:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d002      	beq.n	800b896 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	2210      	movs	r2, #16
 800b894:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d006      	beq.n	800b8aa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b8a4:	711a      	strb	r2, [r3, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d006      	beq.n	800b8be <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b8b8:	711a      	strb	r2, [r3, #4]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2243      	movs	r2, #67	; 0x43
 800b8c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b8c4:	4b02      	ldr	r3, [pc, #8]	; (800b8d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3718      	adds	r7, #24
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	2000005c 	.word	0x2000005c

0800b8d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b083      	sub	sp, #12
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	220a      	movs	r2, #10
 800b8e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b8e2:	4b03      	ldr	r3, [pc, #12]	; (800b8f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	370c      	adds	r7, #12
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ee:	4770      	bx	lr
 800b8f0:	20000018 	.word	0x20000018

0800b8f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b083      	sub	sp, #12
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d101      	bne.n	800b908 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b904:	2303      	movs	r3, #3
 800b906:	e009      	b.n	800b91c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b90e:	687a      	ldr	r2, [r7, #4]
 800b910:	33b0      	adds	r3, #176	; 0xb0
 800b912:	009b      	lsls	r3, r3, #2
 800b914:	4413      	add	r3, r2
 800b916:	683a      	ldr	r2, [r7, #0]
 800b918:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b91a:	2300      	movs	r3, #0
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	370c      	adds	r7, #12
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr

0800b928 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b928:	b480      	push	{r7}
 800b92a:	b087      	sub	sp, #28
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	60b9      	str	r1, [r7, #8]
 800b932:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	32b0      	adds	r2, #176	; 0xb0
 800b93e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b942:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d101      	bne.n	800b94e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b94a:	2303      	movs	r3, #3
 800b94c:	e008      	b.n	800b960 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	68ba      	ldr	r2, [r7, #8]
 800b952:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b95e:	2300      	movs	r3, #0
}
 800b960:	4618      	mov	r0, r3
 800b962:	371c      	adds	r7, #28
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr

0800b96c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b085      	sub	sp, #20
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	32b0      	adds	r2, #176	; 0xb0
 800b980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b984:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d101      	bne.n	800b990 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b98c:	2303      	movs	r3, #3
 800b98e:	e004      	b.n	800b99a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	683a      	ldr	r2, [r7, #0]
 800b994:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b998:	2300      	movs	r3, #0
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3714      	adds	r7, #20
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a4:	4770      	bx	lr
	...

0800b9a8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	32b0      	adds	r2, #176	; 0xb0
 800b9ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9be:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d101      	bne.n	800b9ce <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b9ca:	2303      	movs	r3, #3
 800b9cc:	e025      	b.n	800ba1a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d11f      	bne.n	800ba18 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b9e0:	4b10      	ldr	r3, [pc, #64]	; (800ba24 <USBD_CDC_TransmitPacket+0x7c>)
 800b9e2:	781b      	ldrb	r3, [r3, #0]
 800b9e4:	f003 020f 	and.w	r2, r3, #15
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	4613      	mov	r3, r2
 800b9f2:	009b      	lsls	r3, r3, #2
 800b9f4:	4413      	add	r3, r2
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	4403      	add	r3, r0
 800b9fa:	3318      	adds	r3, #24
 800b9fc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b9fe:	4b09      	ldr	r3, [pc, #36]	; (800ba24 <USBD_CDC_TransmitPacket+0x7c>)
 800ba00:	7819      	ldrb	r1, [r3, #0]
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f002 f8d2 	bl	800dbb8 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ba14:	2300      	movs	r3, #0
 800ba16:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ba18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3710      	adds	r7, #16
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
 800ba22:	bf00      	nop
 800ba24:	2000009f 	.word	0x2000009f

0800ba28 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b084      	sub	sp, #16
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	32b0      	adds	r2, #176	; 0xb0
 800ba3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba3e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	32b0      	adds	r2, #176	; 0xb0
 800ba4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d101      	bne.n	800ba56 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ba52:	2303      	movs	r3, #3
 800ba54:	e018      	b.n	800ba88 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	7c1b      	ldrb	r3, [r3, #16]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d10a      	bne.n	800ba74 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ba5e:	4b0c      	ldr	r3, [pc, #48]	; (800ba90 <USBD_CDC_ReceivePacket+0x68>)
 800ba60:	7819      	ldrb	r1, [r3, #0]
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ba68:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f002 f8c4 	bl	800dbfa <USBD_LL_PrepareReceive>
 800ba72:	e008      	b.n	800ba86 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ba74:	4b06      	ldr	r3, [pc, #24]	; (800ba90 <USBD_CDC_ReceivePacket+0x68>)
 800ba76:	7819      	ldrb	r1, [r3, #0]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ba7e:	2340      	movs	r3, #64	; 0x40
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f002 f8ba 	bl	800dbfa <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ba86:	2300      	movs	r3, #0
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3710      	adds	r7, #16
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}
 800ba90:	200000a0 	.word	0x200000a0

0800ba94 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b086      	sub	sp, #24
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	60f8      	str	r0, [r7, #12]
 800ba9c:	60b9      	str	r1, [r7, #8]
 800ba9e:	4613      	mov	r3, r2
 800baa0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d101      	bne.n	800baac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800baa8:	2303      	movs	r3, #3
 800baaa:	e01f      	b.n	800baec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	2200      	movs	r2, #0
 800bab0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2200      	movs	r2, #0
 800bab8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	2200      	movs	r2, #0
 800bac0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d003      	beq.n	800bad2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	68ba      	ldr	r2, [r7, #8]
 800bace:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	2201      	movs	r2, #1
 800bad6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	79fa      	ldrb	r2, [r7, #7]
 800bade:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bae0:	68f8      	ldr	r0, [r7, #12]
 800bae2:	f001 ff1d 	bl	800d920 <USBD_LL_Init>
 800bae6:	4603      	mov	r3, r0
 800bae8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800baea:	7dfb      	ldrb	r3, [r7, #23]
}
 800baec:	4618      	mov	r0, r3
 800baee:	3718      	adds	r7, #24
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bafe:	2300      	movs	r3, #0
 800bb00:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d101      	bne.n	800bb0c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bb08:	2303      	movs	r3, #3
 800bb0a:	e025      	b.n	800bb58 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	683a      	ldr	r2, [r7, #0]
 800bb10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	32ae      	adds	r2, #174	; 0xae
 800bb1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d00f      	beq.n	800bb48 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	32ae      	adds	r2, #174	; 0xae
 800bb32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb38:	f107 020e 	add.w	r2, r7, #14
 800bb3c:	4610      	mov	r0, r2
 800bb3e:	4798      	blx	r3
 800bb40:	4602      	mov	r2, r0
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bb4e:	1c5a      	adds	r2, r3, #1
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800bb56:	2300      	movs	r3, #0
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3710      	adds	r7, #16
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b082      	sub	sp, #8
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f001 ff3b 	bl	800d9e4 <USBD_LL_Start>
 800bb6e:	4603      	mov	r3, r0
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3708      	adds	r7, #8
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b083      	sub	sp, #12
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bb80:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	370c      	adds	r7, #12
 800bb86:	46bd      	mov	sp, r7
 800bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8c:	4770      	bx	lr

0800bb8e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb8e:	b580      	push	{r7, lr}
 800bb90:	b084      	sub	sp, #16
 800bb92:	af00      	add	r7, sp, #0
 800bb94:	6078      	str	r0, [r7, #4]
 800bb96:	460b      	mov	r3, r1
 800bb98:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d009      	beq.n	800bbbc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	78fa      	ldrb	r2, [r7, #3]
 800bbb2:	4611      	mov	r1, r2
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	4798      	blx	r3
 800bbb8:	4603      	mov	r3, r0
 800bbba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bbbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3710      	adds	r7, #16
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}

0800bbc6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bbc6:	b580      	push	{r7, lr}
 800bbc8:	b084      	sub	sp, #16
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]
 800bbce:	460b      	mov	r3, r1
 800bbd0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	78fa      	ldrb	r2, [r7, #3]
 800bbe0:	4611      	mov	r1, r2
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	4798      	blx	r3
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d001      	beq.n	800bbf0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bbec:	2303      	movs	r3, #3
 800bbee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bbf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3710      	adds	r7, #16
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}

0800bbfa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bbfa:	b580      	push	{r7, lr}
 800bbfc:	b084      	sub	sp, #16
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
 800bc02:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bc0a:	6839      	ldr	r1, [r7, #0]
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f001 f8a6 	bl	800cd5e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2201      	movs	r2, #1
 800bc16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bc20:	461a      	mov	r2, r3
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bc2e:	f003 031f 	and.w	r3, r3, #31
 800bc32:	2b02      	cmp	r3, #2
 800bc34:	d01a      	beq.n	800bc6c <USBD_LL_SetupStage+0x72>
 800bc36:	2b02      	cmp	r3, #2
 800bc38:	d822      	bhi.n	800bc80 <USBD_LL_SetupStage+0x86>
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d002      	beq.n	800bc44 <USBD_LL_SetupStage+0x4a>
 800bc3e:	2b01      	cmp	r3, #1
 800bc40:	d00a      	beq.n	800bc58 <USBD_LL_SetupStage+0x5e>
 800bc42:	e01d      	b.n	800bc80 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f000 fad3 	bl	800c1f8 <USBD_StdDevReq>
 800bc52:	4603      	mov	r3, r0
 800bc54:	73fb      	strb	r3, [r7, #15]
      break;
 800bc56:	e020      	b.n	800bc9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bc5e:	4619      	mov	r1, r3
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f000 fb3b 	bl	800c2dc <USBD_StdItfReq>
 800bc66:	4603      	mov	r3, r0
 800bc68:	73fb      	strb	r3, [r7, #15]
      break;
 800bc6a:	e016      	b.n	800bc9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bc72:	4619      	mov	r1, r3
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 fb9d 	bl	800c3b4 <USBD_StdEPReq>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	73fb      	strb	r3, [r7, #15]
      break;
 800bc7e:	e00c      	b.n	800bc9a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bc86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f001 ff08 	bl	800daa4 <USBD_LL_StallEP>
 800bc94:	4603      	mov	r3, r0
 800bc96:	73fb      	strb	r3, [r7, #15]
      break;
 800bc98:	bf00      	nop
  }

  return ret;
 800bc9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3710      	adds	r7, #16
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b086      	sub	sp, #24
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	60f8      	str	r0, [r7, #12]
 800bcac:	460b      	mov	r3, r1
 800bcae:	607a      	str	r2, [r7, #4]
 800bcb0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800bcb6:	7afb      	ldrb	r3, [r7, #11]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d16e      	bne.n	800bd9a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bcc2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bcca:	2b03      	cmp	r3, #3
 800bccc:	f040 8098 	bne.w	800be00 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	689a      	ldr	r2, [r3, #8]
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	68db      	ldr	r3, [r3, #12]
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d913      	bls.n	800bd04 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	689a      	ldr	r2, [r3, #8]
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	68db      	ldr	r3, [r3, #12]
 800bce4:	1ad2      	subs	r2, r2, r3
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	68da      	ldr	r2, [r3, #12]
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	689b      	ldr	r3, [r3, #8]
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	bf28      	it	cs
 800bcf6:	4613      	movcs	r3, r2
 800bcf8:	461a      	mov	r2, r3
 800bcfa:	6879      	ldr	r1, [r7, #4]
 800bcfc:	68f8      	ldr	r0, [r7, #12]
 800bcfe:	f001 f922 	bl	800cf46 <USBD_CtlContinueRx>
 800bd02:	e07d      	b.n	800be00 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bd0a:	f003 031f 	and.w	r3, r3, #31
 800bd0e:	2b02      	cmp	r3, #2
 800bd10:	d014      	beq.n	800bd3c <USBD_LL_DataOutStage+0x98>
 800bd12:	2b02      	cmp	r3, #2
 800bd14:	d81d      	bhi.n	800bd52 <USBD_LL_DataOutStage+0xae>
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d002      	beq.n	800bd20 <USBD_LL_DataOutStage+0x7c>
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	d003      	beq.n	800bd26 <USBD_LL_DataOutStage+0x82>
 800bd1e:	e018      	b.n	800bd52 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bd20:	2300      	movs	r3, #0
 800bd22:	75bb      	strb	r3, [r7, #22]
            break;
 800bd24:	e018      	b.n	800bd58 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bd2c:	b2db      	uxtb	r3, r3
 800bd2e:	4619      	mov	r1, r3
 800bd30:	68f8      	ldr	r0, [r7, #12]
 800bd32:	f000 f9d2 	bl	800c0da <USBD_CoreFindIF>
 800bd36:	4603      	mov	r3, r0
 800bd38:	75bb      	strb	r3, [r7, #22]
            break;
 800bd3a:	e00d      	b.n	800bd58 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bd42:	b2db      	uxtb	r3, r3
 800bd44:	4619      	mov	r1, r3
 800bd46:	68f8      	ldr	r0, [r7, #12]
 800bd48:	f000 f9d4 	bl	800c0f4 <USBD_CoreFindEP>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	75bb      	strb	r3, [r7, #22]
            break;
 800bd50:	e002      	b.n	800bd58 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bd52:	2300      	movs	r3, #0
 800bd54:	75bb      	strb	r3, [r7, #22]
            break;
 800bd56:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bd58:	7dbb      	ldrb	r3, [r7, #22]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d119      	bne.n	800bd92 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd64:	b2db      	uxtb	r3, r3
 800bd66:	2b03      	cmp	r3, #3
 800bd68:	d113      	bne.n	800bd92 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bd6a:	7dba      	ldrb	r2, [r7, #22]
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	32ae      	adds	r2, #174	; 0xae
 800bd70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd74:	691b      	ldr	r3, [r3, #16]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d00b      	beq.n	800bd92 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bd7a:	7dba      	ldrb	r2, [r7, #22]
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bd82:	7dba      	ldrb	r2, [r7, #22]
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	32ae      	adds	r2, #174	; 0xae
 800bd88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd8c:	691b      	ldr	r3, [r3, #16]
 800bd8e:	68f8      	ldr	r0, [r7, #12]
 800bd90:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bd92:	68f8      	ldr	r0, [r7, #12]
 800bd94:	f001 f8e8 	bl	800cf68 <USBD_CtlSendStatus>
 800bd98:	e032      	b.n	800be00 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bd9a:	7afb      	ldrb	r3, [r7, #11]
 800bd9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bda0:	b2db      	uxtb	r3, r3
 800bda2:	4619      	mov	r1, r3
 800bda4:	68f8      	ldr	r0, [r7, #12]
 800bda6:	f000 f9a5 	bl	800c0f4 <USBD_CoreFindEP>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bdae:	7dbb      	ldrb	r3, [r7, #22]
 800bdb0:	2bff      	cmp	r3, #255	; 0xff
 800bdb2:	d025      	beq.n	800be00 <USBD_LL_DataOutStage+0x15c>
 800bdb4:	7dbb      	ldrb	r3, [r7, #22]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d122      	bne.n	800be00 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdc0:	b2db      	uxtb	r3, r3
 800bdc2:	2b03      	cmp	r3, #3
 800bdc4:	d117      	bne.n	800bdf6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bdc6:	7dba      	ldrb	r2, [r7, #22]
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	32ae      	adds	r2, #174	; 0xae
 800bdcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdd0:	699b      	ldr	r3, [r3, #24]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d00f      	beq.n	800bdf6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bdd6:	7dba      	ldrb	r2, [r7, #22]
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bdde:	7dba      	ldrb	r2, [r7, #22]
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	32ae      	adds	r2, #174	; 0xae
 800bde4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bde8:	699b      	ldr	r3, [r3, #24]
 800bdea:	7afa      	ldrb	r2, [r7, #11]
 800bdec:	4611      	mov	r1, r2
 800bdee:	68f8      	ldr	r0, [r7, #12]
 800bdf0:	4798      	blx	r3
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bdf6:	7dfb      	ldrb	r3, [r7, #23]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d001      	beq.n	800be00 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bdfc:	7dfb      	ldrb	r3, [r7, #23]
 800bdfe:	e000      	b.n	800be02 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800be00:	2300      	movs	r3, #0
}
 800be02:	4618      	mov	r0, r3
 800be04:	3718      	adds	r7, #24
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}

0800be0a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800be0a:	b580      	push	{r7, lr}
 800be0c:	b086      	sub	sp, #24
 800be0e:	af00      	add	r7, sp, #0
 800be10:	60f8      	str	r0, [r7, #12]
 800be12:	460b      	mov	r3, r1
 800be14:	607a      	str	r2, [r7, #4]
 800be16:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800be18:	7afb      	ldrb	r3, [r7, #11]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d16f      	bne.n	800befe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	3314      	adds	r3, #20
 800be22:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800be2a:	2b02      	cmp	r3, #2
 800be2c:	d15a      	bne.n	800bee4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	689a      	ldr	r2, [r3, #8]
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	68db      	ldr	r3, [r3, #12]
 800be36:	429a      	cmp	r2, r3
 800be38:	d914      	bls.n	800be64 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	689a      	ldr	r2, [r3, #8]
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	68db      	ldr	r3, [r3, #12]
 800be42:	1ad2      	subs	r2, r2, r3
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	689b      	ldr	r3, [r3, #8]
 800be4c:	461a      	mov	r2, r3
 800be4e:	6879      	ldr	r1, [r7, #4]
 800be50:	68f8      	ldr	r0, [r7, #12]
 800be52:	f001 f84a 	bl	800ceea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800be56:	2300      	movs	r3, #0
 800be58:	2200      	movs	r2, #0
 800be5a:	2100      	movs	r1, #0
 800be5c:	68f8      	ldr	r0, [r7, #12]
 800be5e:	f001 fecc 	bl	800dbfa <USBD_LL_PrepareReceive>
 800be62:	e03f      	b.n	800bee4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	68da      	ldr	r2, [r3, #12]
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	689b      	ldr	r3, [r3, #8]
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d11c      	bne.n	800beaa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	685a      	ldr	r2, [r3, #4]
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800be78:	429a      	cmp	r2, r3
 800be7a:	d316      	bcc.n	800beaa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	685a      	ldr	r2, [r3, #4]
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800be86:	429a      	cmp	r2, r3
 800be88:	d20f      	bcs.n	800beaa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800be8a:	2200      	movs	r2, #0
 800be8c:	2100      	movs	r1, #0
 800be8e:	68f8      	ldr	r0, [r7, #12]
 800be90:	f001 f82b 	bl	800ceea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2200      	movs	r2, #0
 800be98:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800be9c:	2300      	movs	r3, #0
 800be9e:	2200      	movs	r2, #0
 800bea0:	2100      	movs	r1, #0
 800bea2:	68f8      	ldr	r0, [r7, #12]
 800bea4:	f001 fea9 	bl	800dbfa <USBD_LL_PrepareReceive>
 800bea8:	e01c      	b.n	800bee4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800beb0:	b2db      	uxtb	r3, r3
 800beb2:	2b03      	cmp	r3, #3
 800beb4:	d10f      	bne.n	800bed6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bebc:	68db      	ldr	r3, [r3, #12]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d009      	beq.n	800bed6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2200      	movs	r2, #0
 800bec6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bed0:	68db      	ldr	r3, [r3, #12]
 800bed2:	68f8      	ldr	r0, [r7, #12]
 800bed4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bed6:	2180      	movs	r1, #128	; 0x80
 800bed8:	68f8      	ldr	r0, [r7, #12]
 800beda:	f001 fde3 	bl	800daa4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bede:	68f8      	ldr	r0, [r7, #12]
 800bee0:	f001 f855 	bl	800cf8e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800beea:	2b00      	cmp	r3, #0
 800beec:	d03a      	beq.n	800bf64 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800beee:	68f8      	ldr	r0, [r7, #12]
 800bef0:	f7ff fe42 	bl	800bb78 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	2200      	movs	r2, #0
 800bef8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800befc:	e032      	b.n	800bf64 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800befe:	7afb      	ldrb	r3, [r7, #11]
 800bf00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bf04:	b2db      	uxtb	r3, r3
 800bf06:	4619      	mov	r1, r3
 800bf08:	68f8      	ldr	r0, [r7, #12]
 800bf0a:	f000 f8f3 	bl	800c0f4 <USBD_CoreFindEP>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf12:	7dfb      	ldrb	r3, [r7, #23]
 800bf14:	2bff      	cmp	r3, #255	; 0xff
 800bf16:	d025      	beq.n	800bf64 <USBD_LL_DataInStage+0x15a>
 800bf18:	7dfb      	ldrb	r3, [r7, #23]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d122      	bne.n	800bf64 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf24:	b2db      	uxtb	r3, r3
 800bf26:	2b03      	cmp	r3, #3
 800bf28:	d11c      	bne.n	800bf64 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bf2a:	7dfa      	ldrb	r2, [r7, #23]
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	32ae      	adds	r2, #174	; 0xae
 800bf30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf34:	695b      	ldr	r3, [r3, #20]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d014      	beq.n	800bf64 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bf3a:	7dfa      	ldrb	r2, [r7, #23]
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bf42:	7dfa      	ldrb	r2, [r7, #23]
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	32ae      	adds	r2, #174	; 0xae
 800bf48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf4c:	695b      	ldr	r3, [r3, #20]
 800bf4e:	7afa      	ldrb	r2, [r7, #11]
 800bf50:	4611      	mov	r1, r2
 800bf52:	68f8      	ldr	r0, [r7, #12]
 800bf54:	4798      	blx	r3
 800bf56:	4603      	mov	r3, r0
 800bf58:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bf5a:	7dbb      	ldrb	r3, [r7, #22]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d001      	beq.n	800bf64 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bf60:	7dbb      	ldrb	r3, [r7, #22]
 800bf62:	e000      	b.n	800bf66 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bf64:	2300      	movs	r3, #0
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3718      	adds	r7, #24
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}

0800bf6e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bf6e:	b580      	push	{r7, lr}
 800bf70:	b084      	sub	sp, #16
 800bf72:	af00      	add	r7, sp, #0
 800bf74:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf76:	2300      	movs	r3, #0
 800bf78:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2201      	movs	r2, #1
 800bf7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2200      	movs	r2, #0
 800bf86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2200      	movs	r2, #0
 800bf94:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d014      	beq.n	800bfd4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfb0:	685b      	ldr	r3, [r3, #4]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d00e      	beq.n	800bfd4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfbc:	685b      	ldr	r3, [r3, #4]
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	6852      	ldr	r2, [r2, #4]
 800bfc2:	b2d2      	uxtb	r2, r2
 800bfc4:	4611      	mov	r1, r2
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	4798      	blx	r3
 800bfca:	4603      	mov	r3, r0
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d001      	beq.n	800bfd4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bfd0:	2303      	movs	r3, #3
 800bfd2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bfd4:	2340      	movs	r3, #64	; 0x40
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	2100      	movs	r1, #0
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f001 fd1d 	bl	800da1a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2240      	movs	r2, #64	; 0x40
 800bfec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bff0:	2340      	movs	r3, #64	; 0x40
 800bff2:	2200      	movs	r2, #0
 800bff4:	2180      	movs	r1, #128	; 0x80
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f001 fd0f 	bl	800da1a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2201      	movs	r2, #1
 800c000:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2240      	movs	r2, #64	; 0x40
 800c006:	621a      	str	r2, [r3, #32]

  return ret;
 800c008:	7bfb      	ldrb	r3, [r7, #15]
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3710      	adds	r7, #16
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}

0800c012 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c012:	b480      	push	{r7}
 800c014:	b083      	sub	sp, #12
 800c016:	af00      	add	r7, sp, #0
 800c018:	6078      	str	r0, [r7, #4]
 800c01a:	460b      	mov	r3, r1
 800c01c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	78fa      	ldrb	r2, [r7, #3]
 800c022:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c024:	2300      	movs	r3, #0
}
 800c026:	4618      	mov	r0, r3
 800c028:	370c      	adds	r7, #12
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr

0800c032 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c032:	b480      	push	{r7}
 800c034:	b083      	sub	sp, #12
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c040:	b2db      	uxtb	r3, r3
 800c042:	2b04      	cmp	r3, #4
 800c044:	d006      	beq.n	800c054 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c04c:	b2da      	uxtb	r2, r3
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2204      	movs	r2, #4
 800c058:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c05c:	2300      	movs	r3, #0
}
 800c05e:	4618      	mov	r0, r3
 800c060:	370c      	adds	r7, #12
 800c062:	46bd      	mov	sp, r7
 800c064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c068:	4770      	bx	lr

0800c06a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c06a:	b480      	push	{r7}
 800c06c:	b083      	sub	sp, #12
 800c06e:	af00      	add	r7, sp, #0
 800c070:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c078:	b2db      	uxtb	r3, r3
 800c07a:	2b04      	cmp	r3, #4
 800c07c:	d106      	bne.n	800c08c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c084:	b2da      	uxtb	r2, r3
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c08c:	2300      	movs	r3, #0
}
 800c08e:	4618      	mov	r0, r3
 800c090:	370c      	adds	r7, #12
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr

0800c09a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c09a:	b580      	push	{r7, lr}
 800c09c:	b082      	sub	sp, #8
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	2b03      	cmp	r3, #3
 800c0ac:	d110      	bne.n	800c0d0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d00b      	beq.n	800c0d0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0be:	69db      	ldr	r3, [r3, #28]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d005      	beq.n	800c0d0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0ca:	69db      	ldr	r3, [r3, #28]
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c0d0:	2300      	movs	r3, #0
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3708      	adds	r7, #8
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}

0800c0da <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c0da:	b480      	push	{r7}
 800c0dc:	b083      	sub	sp, #12
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]
 800c0e2:	460b      	mov	r3, r1
 800c0e4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c0e6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	370c      	adds	r7, #12
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr

0800c0f4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b083      	sub	sp, #12
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	460b      	mov	r3, r1
 800c0fe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c100:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c102:	4618      	mov	r0, r3
 800c104:	370c      	adds	r7, #12
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr

0800c10e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c10e:	b580      	push	{r7, lr}
 800c110:	b086      	sub	sp, #24
 800c112:	af00      	add	r7, sp, #0
 800c114:	6078      	str	r0, [r7, #4]
 800c116:	460b      	mov	r3, r1
 800c118:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c122:	2300      	movs	r3, #0
 800c124:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	885b      	ldrh	r3, [r3, #2]
 800c12a:	b29a      	uxth	r2, r3
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	b29b      	uxth	r3, r3
 800c132:	429a      	cmp	r2, r3
 800c134:	d920      	bls.n	800c178 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c13e:	e013      	b.n	800c168 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c140:	f107 030a 	add.w	r3, r7, #10
 800c144:	4619      	mov	r1, r3
 800c146:	6978      	ldr	r0, [r7, #20]
 800c148:	f000 f81b 	bl	800c182 <USBD_GetNextDesc>
 800c14c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	785b      	ldrb	r3, [r3, #1]
 800c152:	2b05      	cmp	r3, #5
 800c154:	d108      	bne.n	800c168 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	789b      	ldrb	r3, [r3, #2]
 800c15e:	78fa      	ldrb	r2, [r7, #3]
 800c160:	429a      	cmp	r2, r3
 800c162:	d008      	beq.n	800c176 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c164:	2300      	movs	r3, #0
 800c166:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	885b      	ldrh	r3, [r3, #2]
 800c16c:	b29a      	uxth	r2, r3
 800c16e:	897b      	ldrh	r3, [r7, #10]
 800c170:	429a      	cmp	r2, r3
 800c172:	d8e5      	bhi.n	800c140 <USBD_GetEpDesc+0x32>
 800c174:	e000      	b.n	800c178 <USBD_GetEpDesc+0x6a>
          break;
 800c176:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c178:	693b      	ldr	r3, [r7, #16]
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3718      	adds	r7, #24
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}

0800c182 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c182:	b480      	push	{r7}
 800c184:	b085      	sub	sp, #20
 800c186:	af00      	add	r7, sp, #0
 800c188:	6078      	str	r0, [r7, #4]
 800c18a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	881a      	ldrh	r2, [r3, #0]
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	b29b      	uxth	r3, r3
 800c19a:	4413      	add	r3, r2
 800c19c:	b29a      	uxth	r2, r3
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	4413      	add	r3, r2
 800c1ac:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c1ae:	68fb      	ldr	r3, [r7, #12]
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3714      	adds	r7, #20
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr

0800c1bc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b087      	sub	sp, #28
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	3301      	adds	r3, #1
 800c1d2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	781b      	ldrb	r3, [r3, #0]
 800c1d8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c1da:	8a3b      	ldrh	r3, [r7, #16]
 800c1dc:	021b      	lsls	r3, r3, #8
 800c1de:	b21a      	sxth	r2, r3
 800c1e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c1e4:	4313      	orrs	r3, r2
 800c1e6:	b21b      	sxth	r3, r3
 800c1e8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c1ea:	89fb      	ldrh	r3, [r7, #14]
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	371c      	adds	r7, #28
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr

0800c1f8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b084      	sub	sp, #16
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c202:	2300      	movs	r3, #0
 800c204:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	781b      	ldrb	r3, [r3, #0]
 800c20a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c20e:	2b40      	cmp	r3, #64	; 0x40
 800c210:	d005      	beq.n	800c21e <USBD_StdDevReq+0x26>
 800c212:	2b40      	cmp	r3, #64	; 0x40
 800c214:	d857      	bhi.n	800c2c6 <USBD_StdDevReq+0xce>
 800c216:	2b00      	cmp	r3, #0
 800c218:	d00f      	beq.n	800c23a <USBD_StdDevReq+0x42>
 800c21a:	2b20      	cmp	r3, #32
 800c21c:	d153      	bne.n	800c2c6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	32ae      	adds	r2, #174	; 0xae
 800c228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c22c:	689b      	ldr	r3, [r3, #8]
 800c22e:	6839      	ldr	r1, [r7, #0]
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	4798      	blx	r3
 800c234:	4603      	mov	r3, r0
 800c236:	73fb      	strb	r3, [r7, #15]
      break;
 800c238:	e04a      	b.n	800c2d0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	785b      	ldrb	r3, [r3, #1]
 800c23e:	2b09      	cmp	r3, #9
 800c240:	d83b      	bhi.n	800c2ba <USBD_StdDevReq+0xc2>
 800c242:	a201      	add	r2, pc, #4	; (adr r2, 800c248 <USBD_StdDevReq+0x50>)
 800c244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c248:	0800c29d 	.word	0x0800c29d
 800c24c:	0800c2b1 	.word	0x0800c2b1
 800c250:	0800c2bb 	.word	0x0800c2bb
 800c254:	0800c2a7 	.word	0x0800c2a7
 800c258:	0800c2bb 	.word	0x0800c2bb
 800c25c:	0800c27b 	.word	0x0800c27b
 800c260:	0800c271 	.word	0x0800c271
 800c264:	0800c2bb 	.word	0x0800c2bb
 800c268:	0800c293 	.word	0x0800c293
 800c26c:	0800c285 	.word	0x0800c285
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c270:	6839      	ldr	r1, [r7, #0]
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f000 fa3c 	bl	800c6f0 <USBD_GetDescriptor>
          break;
 800c278:	e024      	b.n	800c2c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c27a:	6839      	ldr	r1, [r7, #0]
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 fbcb 	bl	800ca18 <USBD_SetAddress>
          break;
 800c282:	e01f      	b.n	800c2c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c284:	6839      	ldr	r1, [r7, #0]
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f000 fc0a 	bl	800caa0 <USBD_SetConfig>
 800c28c:	4603      	mov	r3, r0
 800c28e:	73fb      	strb	r3, [r7, #15]
          break;
 800c290:	e018      	b.n	800c2c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c292:	6839      	ldr	r1, [r7, #0]
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f000 fcad 	bl	800cbf4 <USBD_GetConfig>
          break;
 800c29a:	e013      	b.n	800c2c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c29c:	6839      	ldr	r1, [r7, #0]
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f000 fcde 	bl	800cc60 <USBD_GetStatus>
          break;
 800c2a4:	e00e      	b.n	800c2c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c2a6:	6839      	ldr	r1, [r7, #0]
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f000 fd0d 	bl	800ccc8 <USBD_SetFeature>
          break;
 800c2ae:	e009      	b.n	800c2c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c2b0:	6839      	ldr	r1, [r7, #0]
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f000 fd31 	bl	800cd1a <USBD_ClrFeature>
          break;
 800c2b8:	e004      	b.n	800c2c4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c2ba:	6839      	ldr	r1, [r7, #0]
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f000 fd88 	bl	800cdd2 <USBD_CtlError>
          break;
 800c2c2:	bf00      	nop
      }
      break;
 800c2c4:	e004      	b.n	800c2d0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c2c6:	6839      	ldr	r1, [r7, #0]
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f000 fd82 	bl	800cdd2 <USBD_CtlError>
      break;
 800c2ce:	bf00      	nop
  }

  return ret;
 800c2d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3710      	adds	r7, #16
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
 800c2da:	bf00      	nop

0800c2dc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b084      	sub	sp, #16
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
 800c2e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	781b      	ldrb	r3, [r3, #0]
 800c2ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c2f2:	2b40      	cmp	r3, #64	; 0x40
 800c2f4:	d005      	beq.n	800c302 <USBD_StdItfReq+0x26>
 800c2f6:	2b40      	cmp	r3, #64	; 0x40
 800c2f8:	d852      	bhi.n	800c3a0 <USBD_StdItfReq+0xc4>
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d001      	beq.n	800c302 <USBD_StdItfReq+0x26>
 800c2fe:	2b20      	cmp	r3, #32
 800c300:	d14e      	bne.n	800c3a0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c308:	b2db      	uxtb	r3, r3
 800c30a:	3b01      	subs	r3, #1
 800c30c:	2b02      	cmp	r3, #2
 800c30e:	d840      	bhi.n	800c392 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	889b      	ldrh	r3, [r3, #4]
 800c314:	b2db      	uxtb	r3, r3
 800c316:	2b01      	cmp	r3, #1
 800c318:	d836      	bhi.n	800c388 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	889b      	ldrh	r3, [r3, #4]
 800c31e:	b2db      	uxtb	r3, r3
 800c320:	4619      	mov	r1, r3
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f7ff fed9 	bl	800c0da <USBD_CoreFindIF>
 800c328:	4603      	mov	r3, r0
 800c32a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c32c:	7bbb      	ldrb	r3, [r7, #14]
 800c32e:	2bff      	cmp	r3, #255	; 0xff
 800c330:	d01d      	beq.n	800c36e <USBD_StdItfReq+0x92>
 800c332:	7bbb      	ldrb	r3, [r7, #14]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d11a      	bne.n	800c36e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c338:	7bba      	ldrb	r2, [r7, #14]
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	32ae      	adds	r2, #174	; 0xae
 800c33e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c342:	689b      	ldr	r3, [r3, #8]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d00f      	beq.n	800c368 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c348:	7bba      	ldrb	r2, [r7, #14]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c350:	7bba      	ldrb	r2, [r7, #14]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	32ae      	adds	r2, #174	; 0xae
 800c356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c35a:	689b      	ldr	r3, [r3, #8]
 800c35c:	6839      	ldr	r1, [r7, #0]
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	4798      	blx	r3
 800c362:	4603      	mov	r3, r0
 800c364:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c366:	e004      	b.n	800c372 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c368:	2303      	movs	r3, #3
 800c36a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c36c:	e001      	b.n	800c372 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c36e:	2303      	movs	r3, #3
 800c370:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	88db      	ldrh	r3, [r3, #6]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d110      	bne.n	800c39c <USBD_StdItfReq+0xc0>
 800c37a:	7bfb      	ldrb	r3, [r7, #15]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d10d      	bne.n	800c39c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f000 fdf1 	bl	800cf68 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c386:	e009      	b.n	800c39c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c388:	6839      	ldr	r1, [r7, #0]
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f000 fd21 	bl	800cdd2 <USBD_CtlError>
          break;
 800c390:	e004      	b.n	800c39c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c392:	6839      	ldr	r1, [r7, #0]
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f000 fd1c 	bl	800cdd2 <USBD_CtlError>
          break;
 800c39a:	e000      	b.n	800c39e <USBD_StdItfReq+0xc2>
          break;
 800c39c:	bf00      	nop
      }
      break;
 800c39e:	e004      	b.n	800c3aa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c3a0:	6839      	ldr	r1, [r7, #0]
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 fd15 	bl	800cdd2 <USBD_CtlError>
      break;
 800c3a8:	bf00      	nop
  }

  return ret;
 800c3aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3710      	adds	r7, #16
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}

0800c3b4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b084      	sub	sp, #16
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	889b      	ldrh	r3, [r3, #4]
 800c3c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c3d0:	2b40      	cmp	r3, #64	; 0x40
 800c3d2:	d007      	beq.n	800c3e4 <USBD_StdEPReq+0x30>
 800c3d4:	2b40      	cmp	r3, #64	; 0x40
 800c3d6:	f200 817f 	bhi.w	800c6d8 <USBD_StdEPReq+0x324>
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d02a      	beq.n	800c434 <USBD_StdEPReq+0x80>
 800c3de:	2b20      	cmp	r3, #32
 800c3e0:	f040 817a 	bne.w	800c6d8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c3e4:	7bbb      	ldrb	r3, [r7, #14]
 800c3e6:	4619      	mov	r1, r3
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f7ff fe83 	bl	800c0f4 <USBD_CoreFindEP>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c3f2:	7b7b      	ldrb	r3, [r7, #13]
 800c3f4:	2bff      	cmp	r3, #255	; 0xff
 800c3f6:	f000 8174 	beq.w	800c6e2 <USBD_StdEPReq+0x32e>
 800c3fa:	7b7b      	ldrb	r3, [r7, #13]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	f040 8170 	bne.w	800c6e2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c402:	7b7a      	ldrb	r2, [r7, #13]
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c40a:	7b7a      	ldrb	r2, [r7, #13]
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	32ae      	adds	r2, #174	; 0xae
 800c410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c414:	689b      	ldr	r3, [r3, #8]
 800c416:	2b00      	cmp	r3, #0
 800c418:	f000 8163 	beq.w	800c6e2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c41c:	7b7a      	ldrb	r2, [r7, #13]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	32ae      	adds	r2, #174	; 0xae
 800c422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c426:	689b      	ldr	r3, [r3, #8]
 800c428:	6839      	ldr	r1, [r7, #0]
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	4798      	blx	r3
 800c42e:	4603      	mov	r3, r0
 800c430:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c432:	e156      	b.n	800c6e2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	785b      	ldrb	r3, [r3, #1]
 800c438:	2b03      	cmp	r3, #3
 800c43a:	d008      	beq.n	800c44e <USBD_StdEPReq+0x9a>
 800c43c:	2b03      	cmp	r3, #3
 800c43e:	f300 8145 	bgt.w	800c6cc <USBD_StdEPReq+0x318>
 800c442:	2b00      	cmp	r3, #0
 800c444:	f000 809b 	beq.w	800c57e <USBD_StdEPReq+0x1ca>
 800c448:	2b01      	cmp	r3, #1
 800c44a:	d03c      	beq.n	800c4c6 <USBD_StdEPReq+0x112>
 800c44c:	e13e      	b.n	800c6cc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c454:	b2db      	uxtb	r3, r3
 800c456:	2b02      	cmp	r3, #2
 800c458:	d002      	beq.n	800c460 <USBD_StdEPReq+0xac>
 800c45a:	2b03      	cmp	r3, #3
 800c45c:	d016      	beq.n	800c48c <USBD_StdEPReq+0xd8>
 800c45e:	e02c      	b.n	800c4ba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c460:	7bbb      	ldrb	r3, [r7, #14]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d00d      	beq.n	800c482 <USBD_StdEPReq+0xce>
 800c466:	7bbb      	ldrb	r3, [r7, #14]
 800c468:	2b80      	cmp	r3, #128	; 0x80
 800c46a:	d00a      	beq.n	800c482 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c46c:	7bbb      	ldrb	r3, [r7, #14]
 800c46e:	4619      	mov	r1, r3
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f001 fb17 	bl	800daa4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c476:	2180      	movs	r1, #128	; 0x80
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f001 fb13 	bl	800daa4 <USBD_LL_StallEP>
 800c47e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c480:	e020      	b.n	800c4c4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c482:	6839      	ldr	r1, [r7, #0]
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f000 fca4 	bl	800cdd2 <USBD_CtlError>
              break;
 800c48a:	e01b      	b.n	800c4c4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	885b      	ldrh	r3, [r3, #2]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d10e      	bne.n	800c4b2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c494:	7bbb      	ldrb	r3, [r7, #14]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d00b      	beq.n	800c4b2 <USBD_StdEPReq+0xfe>
 800c49a:	7bbb      	ldrb	r3, [r7, #14]
 800c49c:	2b80      	cmp	r3, #128	; 0x80
 800c49e:	d008      	beq.n	800c4b2 <USBD_StdEPReq+0xfe>
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	88db      	ldrh	r3, [r3, #6]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d104      	bne.n	800c4b2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c4a8:	7bbb      	ldrb	r3, [r7, #14]
 800c4aa:	4619      	mov	r1, r3
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f001 faf9 	bl	800daa4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f000 fd58 	bl	800cf68 <USBD_CtlSendStatus>

              break;
 800c4b8:	e004      	b.n	800c4c4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c4ba:	6839      	ldr	r1, [r7, #0]
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f000 fc88 	bl	800cdd2 <USBD_CtlError>
              break;
 800c4c2:	bf00      	nop
          }
          break;
 800c4c4:	e107      	b.n	800c6d6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	2b02      	cmp	r3, #2
 800c4d0:	d002      	beq.n	800c4d8 <USBD_StdEPReq+0x124>
 800c4d2:	2b03      	cmp	r3, #3
 800c4d4:	d016      	beq.n	800c504 <USBD_StdEPReq+0x150>
 800c4d6:	e04b      	b.n	800c570 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c4d8:	7bbb      	ldrb	r3, [r7, #14]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d00d      	beq.n	800c4fa <USBD_StdEPReq+0x146>
 800c4de:	7bbb      	ldrb	r3, [r7, #14]
 800c4e0:	2b80      	cmp	r3, #128	; 0x80
 800c4e2:	d00a      	beq.n	800c4fa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c4e4:	7bbb      	ldrb	r3, [r7, #14]
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f001 fadb 	bl	800daa4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4ee:	2180      	movs	r1, #128	; 0x80
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f001 fad7 	bl	800daa4 <USBD_LL_StallEP>
 800c4f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c4f8:	e040      	b.n	800c57c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c4fa:	6839      	ldr	r1, [r7, #0]
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f000 fc68 	bl	800cdd2 <USBD_CtlError>
              break;
 800c502:	e03b      	b.n	800c57c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	885b      	ldrh	r3, [r3, #2]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d136      	bne.n	800c57a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c50c:	7bbb      	ldrb	r3, [r7, #14]
 800c50e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c512:	2b00      	cmp	r3, #0
 800c514:	d004      	beq.n	800c520 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c516:	7bbb      	ldrb	r3, [r7, #14]
 800c518:	4619      	mov	r1, r3
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f001 fae1 	bl	800dae2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f000 fd21 	bl	800cf68 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c526:	7bbb      	ldrb	r3, [r7, #14]
 800c528:	4619      	mov	r1, r3
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f7ff fde2 	bl	800c0f4 <USBD_CoreFindEP>
 800c530:	4603      	mov	r3, r0
 800c532:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c534:	7b7b      	ldrb	r3, [r7, #13]
 800c536:	2bff      	cmp	r3, #255	; 0xff
 800c538:	d01f      	beq.n	800c57a <USBD_StdEPReq+0x1c6>
 800c53a:	7b7b      	ldrb	r3, [r7, #13]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d11c      	bne.n	800c57a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c540:	7b7a      	ldrb	r2, [r7, #13]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c548:	7b7a      	ldrb	r2, [r7, #13]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	32ae      	adds	r2, #174	; 0xae
 800c54e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c552:	689b      	ldr	r3, [r3, #8]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d010      	beq.n	800c57a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c558:	7b7a      	ldrb	r2, [r7, #13]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	32ae      	adds	r2, #174	; 0xae
 800c55e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c562:	689b      	ldr	r3, [r3, #8]
 800c564:	6839      	ldr	r1, [r7, #0]
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	4798      	blx	r3
 800c56a:	4603      	mov	r3, r0
 800c56c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c56e:	e004      	b.n	800c57a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c570:	6839      	ldr	r1, [r7, #0]
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f000 fc2d 	bl	800cdd2 <USBD_CtlError>
              break;
 800c578:	e000      	b.n	800c57c <USBD_StdEPReq+0x1c8>
              break;
 800c57a:	bf00      	nop
          }
          break;
 800c57c:	e0ab      	b.n	800c6d6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c584:	b2db      	uxtb	r3, r3
 800c586:	2b02      	cmp	r3, #2
 800c588:	d002      	beq.n	800c590 <USBD_StdEPReq+0x1dc>
 800c58a:	2b03      	cmp	r3, #3
 800c58c:	d032      	beq.n	800c5f4 <USBD_StdEPReq+0x240>
 800c58e:	e097      	b.n	800c6c0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c590:	7bbb      	ldrb	r3, [r7, #14]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d007      	beq.n	800c5a6 <USBD_StdEPReq+0x1f2>
 800c596:	7bbb      	ldrb	r3, [r7, #14]
 800c598:	2b80      	cmp	r3, #128	; 0x80
 800c59a:	d004      	beq.n	800c5a6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c59c:	6839      	ldr	r1, [r7, #0]
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 fc17 	bl	800cdd2 <USBD_CtlError>
                break;
 800c5a4:	e091      	b.n	800c6ca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	da0b      	bge.n	800c5c6 <USBD_StdEPReq+0x212>
 800c5ae:	7bbb      	ldrb	r3, [r7, #14]
 800c5b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c5b4:	4613      	mov	r3, r2
 800c5b6:	009b      	lsls	r3, r3, #2
 800c5b8:	4413      	add	r3, r2
 800c5ba:	009b      	lsls	r3, r3, #2
 800c5bc:	3310      	adds	r3, #16
 800c5be:	687a      	ldr	r2, [r7, #4]
 800c5c0:	4413      	add	r3, r2
 800c5c2:	3304      	adds	r3, #4
 800c5c4:	e00b      	b.n	800c5de <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c5c6:	7bbb      	ldrb	r3, [r7, #14]
 800c5c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5cc:	4613      	mov	r3, r2
 800c5ce:	009b      	lsls	r3, r3, #2
 800c5d0:	4413      	add	r3, r2
 800c5d2:	009b      	lsls	r3, r3, #2
 800c5d4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c5d8:	687a      	ldr	r2, [r7, #4]
 800c5da:	4413      	add	r3, r2
 800c5dc:	3304      	adds	r3, #4
 800c5de:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	2202      	movs	r2, #2
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f000 fc61 	bl	800ceb4 <USBD_CtlSendData>
              break;
 800c5f2:	e06a      	b.n	800c6ca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c5f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	da11      	bge.n	800c620 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c5fc:	7bbb      	ldrb	r3, [r7, #14]
 800c5fe:	f003 020f 	and.w	r2, r3, #15
 800c602:	6879      	ldr	r1, [r7, #4]
 800c604:	4613      	mov	r3, r2
 800c606:	009b      	lsls	r3, r3, #2
 800c608:	4413      	add	r3, r2
 800c60a:	009b      	lsls	r3, r3, #2
 800c60c:	440b      	add	r3, r1
 800c60e:	3324      	adds	r3, #36	; 0x24
 800c610:	881b      	ldrh	r3, [r3, #0]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d117      	bne.n	800c646 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c616:	6839      	ldr	r1, [r7, #0]
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f000 fbda 	bl	800cdd2 <USBD_CtlError>
                  break;
 800c61e:	e054      	b.n	800c6ca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c620:	7bbb      	ldrb	r3, [r7, #14]
 800c622:	f003 020f 	and.w	r2, r3, #15
 800c626:	6879      	ldr	r1, [r7, #4]
 800c628:	4613      	mov	r3, r2
 800c62a:	009b      	lsls	r3, r3, #2
 800c62c:	4413      	add	r3, r2
 800c62e:	009b      	lsls	r3, r3, #2
 800c630:	440b      	add	r3, r1
 800c632:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c636:	881b      	ldrh	r3, [r3, #0]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d104      	bne.n	800c646 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c63c:	6839      	ldr	r1, [r7, #0]
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f000 fbc7 	bl	800cdd2 <USBD_CtlError>
                  break;
 800c644:	e041      	b.n	800c6ca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c646:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	da0b      	bge.n	800c666 <USBD_StdEPReq+0x2b2>
 800c64e:	7bbb      	ldrb	r3, [r7, #14]
 800c650:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c654:	4613      	mov	r3, r2
 800c656:	009b      	lsls	r3, r3, #2
 800c658:	4413      	add	r3, r2
 800c65a:	009b      	lsls	r3, r3, #2
 800c65c:	3310      	adds	r3, #16
 800c65e:	687a      	ldr	r2, [r7, #4]
 800c660:	4413      	add	r3, r2
 800c662:	3304      	adds	r3, #4
 800c664:	e00b      	b.n	800c67e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c666:	7bbb      	ldrb	r3, [r7, #14]
 800c668:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c66c:	4613      	mov	r3, r2
 800c66e:	009b      	lsls	r3, r3, #2
 800c670:	4413      	add	r3, r2
 800c672:	009b      	lsls	r3, r3, #2
 800c674:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	4413      	add	r3, r2
 800c67c:	3304      	adds	r3, #4
 800c67e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c680:	7bbb      	ldrb	r3, [r7, #14]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d002      	beq.n	800c68c <USBD_StdEPReq+0x2d8>
 800c686:	7bbb      	ldrb	r3, [r7, #14]
 800c688:	2b80      	cmp	r3, #128	; 0x80
 800c68a:	d103      	bne.n	800c694 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	2200      	movs	r2, #0
 800c690:	601a      	str	r2, [r3, #0]
 800c692:	e00e      	b.n	800c6b2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c694:	7bbb      	ldrb	r3, [r7, #14]
 800c696:	4619      	mov	r1, r3
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f001 fa41 	bl	800db20 <USBD_LL_IsStallEP>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d003      	beq.n	800c6ac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	601a      	str	r2, [r3, #0]
 800c6aa:	e002      	b.n	800c6b2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	2202      	movs	r2, #2
 800c6b6:	4619      	mov	r1, r3
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f000 fbfb 	bl	800ceb4 <USBD_CtlSendData>
              break;
 800c6be:	e004      	b.n	800c6ca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c6c0:	6839      	ldr	r1, [r7, #0]
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f000 fb85 	bl	800cdd2 <USBD_CtlError>
              break;
 800c6c8:	bf00      	nop
          }
          break;
 800c6ca:	e004      	b.n	800c6d6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c6cc:	6839      	ldr	r1, [r7, #0]
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 fb7f 	bl	800cdd2 <USBD_CtlError>
          break;
 800c6d4:	bf00      	nop
      }
      break;
 800c6d6:	e005      	b.n	800c6e4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c6d8:	6839      	ldr	r1, [r7, #0]
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f000 fb79 	bl	800cdd2 <USBD_CtlError>
      break;
 800c6e0:	e000      	b.n	800c6e4 <USBD_StdEPReq+0x330>
      break;
 800c6e2:	bf00      	nop
  }

  return ret;
 800c6e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3710      	adds	r7, #16
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
	...

0800c6f0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b084      	sub	sp, #16
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c6fe:	2300      	movs	r3, #0
 800c700:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c702:	2300      	movs	r3, #0
 800c704:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	885b      	ldrh	r3, [r3, #2]
 800c70a:	0a1b      	lsrs	r3, r3, #8
 800c70c:	b29b      	uxth	r3, r3
 800c70e:	3b01      	subs	r3, #1
 800c710:	2b0e      	cmp	r3, #14
 800c712:	f200 8152 	bhi.w	800c9ba <USBD_GetDescriptor+0x2ca>
 800c716:	a201      	add	r2, pc, #4	; (adr r2, 800c71c <USBD_GetDescriptor+0x2c>)
 800c718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c71c:	0800c78d 	.word	0x0800c78d
 800c720:	0800c7a5 	.word	0x0800c7a5
 800c724:	0800c7e5 	.word	0x0800c7e5
 800c728:	0800c9bb 	.word	0x0800c9bb
 800c72c:	0800c9bb 	.word	0x0800c9bb
 800c730:	0800c95b 	.word	0x0800c95b
 800c734:	0800c987 	.word	0x0800c987
 800c738:	0800c9bb 	.word	0x0800c9bb
 800c73c:	0800c9bb 	.word	0x0800c9bb
 800c740:	0800c9bb 	.word	0x0800c9bb
 800c744:	0800c9bb 	.word	0x0800c9bb
 800c748:	0800c9bb 	.word	0x0800c9bb
 800c74c:	0800c9bb 	.word	0x0800c9bb
 800c750:	0800c9bb 	.word	0x0800c9bb
 800c754:	0800c759 	.word	0x0800c759
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c75e:	69db      	ldr	r3, [r3, #28]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d00b      	beq.n	800c77c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c76a:	69db      	ldr	r3, [r3, #28]
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	7c12      	ldrb	r2, [r2, #16]
 800c770:	f107 0108 	add.w	r1, r7, #8
 800c774:	4610      	mov	r0, r2
 800c776:	4798      	blx	r3
 800c778:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c77a:	e126      	b.n	800c9ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c77c:	6839      	ldr	r1, [r7, #0]
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f000 fb27 	bl	800cdd2 <USBD_CtlError>
        err++;
 800c784:	7afb      	ldrb	r3, [r7, #11]
 800c786:	3301      	adds	r3, #1
 800c788:	72fb      	strb	r3, [r7, #11]
      break;
 800c78a:	e11e      	b.n	800c9ca <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	687a      	ldr	r2, [r7, #4]
 800c796:	7c12      	ldrb	r2, [r2, #16]
 800c798:	f107 0108 	add.w	r1, r7, #8
 800c79c:	4610      	mov	r0, r2
 800c79e:	4798      	blx	r3
 800c7a0:	60f8      	str	r0, [r7, #12]
      break;
 800c7a2:	e112      	b.n	800c9ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	7c1b      	ldrb	r3, [r3, #16]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d10d      	bne.n	800c7c8 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7b4:	f107 0208 	add.w	r2, r7, #8
 800c7b8:	4610      	mov	r0, r2
 800c7ba:	4798      	blx	r3
 800c7bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	2202      	movs	r2, #2
 800c7c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c7c6:	e100      	b.n	800c9ca <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7d0:	f107 0208 	add.w	r2, r7, #8
 800c7d4:	4610      	mov	r0, r2
 800c7d6:	4798      	blx	r3
 800c7d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	3301      	adds	r3, #1
 800c7de:	2202      	movs	r2, #2
 800c7e0:	701a      	strb	r2, [r3, #0]
      break;
 800c7e2:	e0f2      	b.n	800c9ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	885b      	ldrh	r3, [r3, #2]
 800c7e8:	b2db      	uxtb	r3, r3
 800c7ea:	2b05      	cmp	r3, #5
 800c7ec:	f200 80ac 	bhi.w	800c948 <USBD_GetDescriptor+0x258>
 800c7f0:	a201      	add	r2, pc, #4	; (adr r2, 800c7f8 <USBD_GetDescriptor+0x108>)
 800c7f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7f6:	bf00      	nop
 800c7f8:	0800c811 	.word	0x0800c811
 800c7fc:	0800c845 	.word	0x0800c845
 800c800:	0800c879 	.word	0x0800c879
 800c804:	0800c8ad 	.word	0x0800c8ad
 800c808:	0800c8e1 	.word	0x0800c8e1
 800c80c:	0800c915 	.word	0x0800c915
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d00b      	beq.n	800c834 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	7c12      	ldrb	r2, [r2, #16]
 800c828:	f107 0108 	add.w	r1, r7, #8
 800c82c:	4610      	mov	r0, r2
 800c82e:	4798      	blx	r3
 800c830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c832:	e091      	b.n	800c958 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c834:	6839      	ldr	r1, [r7, #0]
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f000 facb 	bl	800cdd2 <USBD_CtlError>
            err++;
 800c83c:	7afb      	ldrb	r3, [r7, #11]
 800c83e:	3301      	adds	r3, #1
 800c840:	72fb      	strb	r3, [r7, #11]
          break;
 800c842:	e089      	b.n	800c958 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c84a:	689b      	ldr	r3, [r3, #8]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d00b      	beq.n	800c868 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c856:	689b      	ldr	r3, [r3, #8]
 800c858:	687a      	ldr	r2, [r7, #4]
 800c85a:	7c12      	ldrb	r2, [r2, #16]
 800c85c:	f107 0108 	add.w	r1, r7, #8
 800c860:	4610      	mov	r0, r2
 800c862:	4798      	blx	r3
 800c864:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c866:	e077      	b.n	800c958 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c868:	6839      	ldr	r1, [r7, #0]
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f000 fab1 	bl	800cdd2 <USBD_CtlError>
            err++;
 800c870:	7afb      	ldrb	r3, [r7, #11]
 800c872:	3301      	adds	r3, #1
 800c874:	72fb      	strb	r3, [r7, #11]
          break;
 800c876:	e06f      	b.n	800c958 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c87e:	68db      	ldr	r3, [r3, #12]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d00b      	beq.n	800c89c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c88a:	68db      	ldr	r3, [r3, #12]
 800c88c:	687a      	ldr	r2, [r7, #4]
 800c88e:	7c12      	ldrb	r2, [r2, #16]
 800c890:	f107 0108 	add.w	r1, r7, #8
 800c894:	4610      	mov	r0, r2
 800c896:	4798      	blx	r3
 800c898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c89a:	e05d      	b.n	800c958 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c89c:	6839      	ldr	r1, [r7, #0]
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f000 fa97 	bl	800cdd2 <USBD_CtlError>
            err++;
 800c8a4:	7afb      	ldrb	r3, [r7, #11]
 800c8a6:	3301      	adds	r3, #1
 800c8a8:	72fb      	strb	r3, [r7, #11]
          break;
 800c8aa:	e055      	b.n	800c958 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8b2:	691b      	ldr	r3, [r3, #16]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d00b      	beq.n	800c8d0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8be:	691b      	ldr	r3, [r3, #16]
 800c8c0:	687a      	ldr	r2, [r7, #4]
 800c8c2:	7c12      	ldrb	r2, [r2, #16]
 800c8c4:	f107 0108 	add.w	r1, r7, #8
 800c8c8:	4610      	mov	r0, r2
 800c8ca:	4798      	blx	r3
 800c8cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8ce:	e043      	b.n	800c958 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c8d0:	6839      	ldr	r1, [r7, #0]
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f000 fa7d 	bl	800cdd2 <USBD_CtlError>
            err++;
 800c8d8:	7afb      	ldrb	r3, [r7, #11]
 800c8da:	3301      	adds	r3, #1
 800c8dc:	72fb      	strb	r3, [r7, #11]
          break;
 800c8de:	e03b      	b.n	800c958 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8e6:	695b      	ldr	r3, [r3, #20]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d00b      	beq.n	800c904 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8f2:	695b      	ldr	r3, [r3, #20]
 800c8f4:	687a      	ldr	r2, [r7, #4]
 800c8f6:	7c12      	ldrb	r2, [r2, #16]
 800c8f8:	f107 0108 	add.w	r1, r7, #8
 800c8fc:	4610      	mov	r0, r2
 800c8fe:	4798      	blx	r3
 800c900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c902:	e029      	b.n	800c958 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c904:	6839      	ldr	r1, [r7, #0]
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f000 fa63 	bl	800cdd2 <USBD_CtlError>
            err++;
 800c90c:	7afb      	ldrb	r3, [r7, #11]
 800c90e:	3301      	adds	r3, #1
 800c910:	72fb      	strb	r3, [r7, #11]
          break;
 800c912:	e021      	b.n	800c958 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c91a:	699b      	ldr	r3, [r3, #24]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d00b      	beq.n	800c938 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c926:	699b      	ldr	r3, [r3, #24]
 800c928:	687a      	ldr	r2, [r7, #4]
 800c92a:	7c12      	ldrb	r2, [r2, #16]
 800c92c:	f107 0108 	add.w	r1, r7, #8
 800c930:	4610      	mov	r0, r2
 800c932:	4798      	blx	r3
 800c934:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c936:	e00f      	b.n	800c958 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c938:	6839      	ldr	r1, [r7, #0]
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f000 fa49 	bl	800cdd2 <USBD_CtlError>
            err++;
 800c940:	7afb      	ldrb	r3, [r7, #11]
 800c942:	3301      	adds	r3, #1
 800c944:	72fb      	strb	r3, [r7, #11]
          break;
 800c946:	e007      	b.n	800c958 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c948:	6839      	ldr	r1, [r7, #0]
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f000 fa41 	bl	800cdd2 <USBD_CtlError>
          err++;
 800c950:	7afb      	ldrb	r3, [r7, #11]
 800c952:	3301      	adds	r3, #1
 800c954:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c956:	bf00      	nop
      }
      break;
 800c958:	e037      	b.n	800c9ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	7c1b      	ldrb	r3, [r3, #16]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d109      	bne.n	800c976 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c96a:	f107 0208 	add.w	r2, r7, #8
 800c96e:	4610      	mov	r0, r2
 800c970:	4798      	blx	r3
 800c972:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c974:	e029      	b.n	800c9ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c976:	6839      	ldr	r1, [r7, #0]
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f000 fa2a 	bl	800cdd2 <USBD_CtlError>
        err++;
 800c97e:	7afb      	ldrb	r3, [r7, #11]
 800c980:	3301      	adds	r3, #1
 800c982:	72fb      	strb	r3, [r7, #11]
      break;
 800c984:	e021      	b.n	800c9ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	7c1b      	ldrb	r3, [r3, #16]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d10d      	bne.n	800c9aa <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c996:	f107 0208 	add.w	r2, r7, #8
 800c99a:	4610      	mov	r0, r2
 800c99c:	4798      	blx	r3
 800c99e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	2207      	movs	r2, #7
 800c9a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c9a8:	e00f      	b.n	800c9ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c9aa:	6839      	ldr	r1, [r7, #0]
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f000 fa10 	bl	800cdd2 <USBD_CtlError>
        err++;
 800c9b2:	7afb      	ldrb	r3, [r7, #11]
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	72fb      	strb	r3, [r7, #11]
      break;
 800c9b8:	e007      	b.n	800c9ca <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c9ba:	6839      	ldr	r1, [r7, #0]
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f000 fa08 	bl	800cdd2 <USBD_CtlError>
      err++;
 800c9c2:	7afb      	ldrb	r3, [r7, #11]
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	72fb      	strb	r3, [r7, #11]
      break;
 800c9c8:	bf00      	nop
  }

  if (err != 0U)
 800c9ca:	7afb      	ldrb	r3, [r7, #11]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d11e      	bne.n	800ca0e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	88db      	ldrh	r3, [r3, #6]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d016      	beq.n	800ca06 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c9d8:	893b      	ldrh	r3, [r7, #8]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d00e      	beq.n	800c9fc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	88da      	ldrh	r2, [r3, #6]
 800c9e2:	893b      	ldrh	r3, [r7, #8]
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	bf28      	it	cs
 800c9e8:	4613      	movcs	r3, r2
 800c9ea:	b29b      	uxth	r3, r3
 800c9ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c9ee:	893b      	ldrh	r3, [r7, #8]
 800c9f0:	461a      	mov	r2, r3
 800c9f2:	68f9      	ldr	r1, [r7, #12]
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f000 fa5d 	bl	800ceb4 <USBD_CtlSendData>
 800c9fa:	e009      	b.n	800ca10 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c9fc:	6839      	ldr	r1, [r7, #0]
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f000 f9e7 	bl	800cdd2 <USBD_CtlError>
 800ca04:	e004      	b.n	800ca10 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f000 faae 	bl	800cf68 <USBD_CtlSendStatus>
 800ca0c:	e000      	b.n	800ca10 <USBD_GetDescriptor+0x320>
    return;
 800ca0e:	bf00      	nop
  }
}
 800ca10:	3710      	adds	r7, #16
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
 800ca16:	bf00      	nop

0800ca18 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b084      	sub	sp, #16
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	889b      	ldrh	r3, [r3, #4]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d131      	bne.n	800ca8e <USBD_SetAddress+0x76>
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	88db      	ldrh	r3, [r3, #6]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d12d      	bne.n	800ca8e <USBD_SetAddress+0x76>
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	885b      	ldrh	r3, [r3, #2]
 800ca36:	2b7f      	cmp	r3, #127	; 0x7f
 800ca38:	d829      	bhi.n	800ca8e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	885b      	ldrh	r3, [r3, #2]
 800ca3e:	b2db      	uxtb	r3, r3
 800ca40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca44:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca4c:	b2db      	uxtb	r3, r3
 800ca4e:	2b03      	cmp	r3, #3
 800ca50:	d104      	bne.n	800ca5c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ca52:	6839      	ldr	r1, [r7, #0]
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f000 f9bc 	bl	800cdd2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca5a:	e01d      	b.n	800ca98 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	7bfa      	ldrb	r2, [r7, #15]
 800ca60:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ca64:	7bfb      	ldrb	r3, [r7, #15]
 800ca66:	4619      	mov	r1, r3
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f001 f886 	bl	800db7a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f000 fa7a 	bl	800cf68 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ca74:	7bfb      	ldrb	r3, [r7, #15]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d004      	beq.n	800ca84 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2202      	movs	r2, #2
 800ca7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca82:	e009      	b.n	800ca98 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2201      	movs	r2, #1
 800ca88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca8c:	e004      	b.n	800ca98 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ca8e:	6839      	ldr	r1, [r7, #0]
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f000 f99e 	bl	800cdd2 <USBD_CtlError>
  }
}
 800ca96:	bf00      	nop
 800ca98:	bf00      	nop
 800ca9a:	3710      	adds	r7, #16
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b084      	sub	sp, #16
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800caaa:	2300      	movs	r3, #0
 800caac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	885b      	ldrh	r3, [r3, #2]
 800cab2:	b2da      	uxtb	r2, r3
 800cab4:	4b4e      	ldr	r3, [pc, #312]	; (800cbf0 <USBD_SetConfig+0x150>)
 800cab6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cab8:	4b4d      	ldr	r3, [pc, #308]	; (800cbf0 <USBD_SetConfig+0x150>)
 800caba:	781b      	ldrb	r3, [r3, #0]
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	d905      	bls.n	800cacc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cac0:	6839      	ldr	r1, [r7, #0]
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f000 f985 	bl	800cdd2 <USBD_CtlError>
    return USBD_FAIL;
 800cac8:	2303      	movs	r3, #3
 800caca:	e08c      	b.n	800cbe6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cad2:	b2db      	uxtb	r3, r3
 800cad4:	2b02      	cmp	r3, #2
 800cad6:	d002      	beq.n	800cade <USBD_SetConfig+0x3e>
 800cad8:	2b03      	cmp	r3, #3
 800cada:	d029      	beq.n	800cb30 <USBD_SetConfig+0x90>
 800cadc:	e075      	b.n	800cbca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cade:	4b44      	ldr	r3, [pc, #272]	; (800cbf0 <USBD_SetConfig+0x150>)
 800cae0:	781b      	ldrb	r3, [r3, #0]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d020      	beq.n	800cb28 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800cae6:	4b42      	ldr	r3, [pc, #264]	; (800cbf0 <USBD_SetConfig+0x150>)
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	461a      	mov	r2, r3
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800caf0:	4b3f      	ldr	r3, [pc, #252]	; (800cbf0 <USBD_SetConfig+0x150>)
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	4619      	mov	r1, r3
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f7ff f849 	bl	800bb8e <USBD_SetClassConfig>
 800cafc:	4603      	mov	r3, r0
 800cafe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cb00:	7bfb      	ldrb	r3, [r7, #15]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d008      	beq.n	800cb18 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cb06:	6839      	ldr	r1, [r7, #0]
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f000 f962 	bl	800cdd2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2202      	movs	r2, #2
 800cb12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cb16:	e065      	b.n	800cbe4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f000 fa25 	bl	800cf68 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2203      	movs	r2, #3
 800cb22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cb26:	e05d      	b.n	800cbe4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f000 fa1d 	bl	800cf68 <USBD_CtlSendStatus>
      break;
 800cb2e:	e059      	b.n	800cbe4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cb30:	4b2f      	ldr	r3, [pc, #188]	; (800cbf0 <USBD_SetConfig+0x150>)
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d112      	bne.n	800cb5e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2202      	movs	r2, #2
 800cb3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cb40:	4b2b      	ldr	r3, [pc, #172]	; (800cbf0 <USBD_SetConfig+0x150>)
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	461a      	mov	r2, r3
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cb4a:	4b29      	ldr	r3, [pc, #164]	; (800cbf0 <USBD_SetConfig+0x150>)
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	4619      	mov	r1, r3
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f7ff f838 	bl	800bbc6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f000 fa06 	bl	800cf68 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cb5c:	e042      	b.n	800cbe4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cb5e:	4b24      	ldr	r3, [pc, #144]	; (800cbf0 <USBD_SetConfig+0x150>)
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	461a      	mov	r2, r3
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d02a      	beq.n	800cbc2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	b2db      	uxtb	r3, r3
 800cb72:	4619      	mov	r1, r3
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f7ff f826 	bl	800bbc6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cb7a:	4b1d      	ldr	r3, [pc, #116]	; (800cbf0 <USBD_SetConfig+0x150>)
 800cb7c:	781b      	ldrb	r3, [r3, #0]
 800cb7e:	461a      	mov	r2, r3
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cb84:	4b1a      	ldr	r3, [pc, #104]	; (800cbf0 <USBD_SetConfig+0x150>)
 800cb86:	781b      	ldrb	r3, [r3, #0]
 800cb88:	4619      	mov	r1, r3
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f7fe ffff 	bl	800bb8e <USBD_SetClassConfig>
 800cb90:	4603      	mov	r3, r0
 800cb92:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cb94:	7bfb      	ldrb	r3, [r7, #15]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d00f      	beq.n	800cbba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cb9a:	6839      	ldr	r1, [r7, #0]
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f000 f918 	bl	800cdd2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	685b      	ldr	r3, [r3, #4]
 800cba6:	b2db      	uxtb	r3, r3
 800cba8:	4619      	mov	r1, r3
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f7ff f80b 	bl	800bbc6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2202      	movs	r2, #2
 800cbb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cbb8:	e014      	b.n	800cbe4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f000 f9d4 	bl	800cf68 <USBD_CtlSendStatus>
      break;
 800cbc0:	e010      	b.n	800cbe4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f000 f9d0 	bl	800cf68 <USBD_CtlSendStatus>
      break;
 800cbc8:	e00c      	b.n	800cbe4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cbca:	6839      	ldr	r1, [r7, #0]
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f000 f900 	bl	800cdd2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cbd2:	4b07      	ldr	r3, [pc, #28]	; (800cbf0 <USBD_SetConfig+0x150>)
 800cbd4:	781b      	ldrb	r3, [r3, #0]
 800cbd6:	4619      	mov	r1, r3
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f7fe fff4 	bl	800bbc6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cbde:	2303      	movs	r3, #3
 800cbe0:	73fb      	strb	r3, [r7, #15]
      break;
 800cbe2:	bf00      	nop
  }

  return ret;
 800cbe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3710      	adds	r7, #16
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	20003d38 	.word	0x20003d38

0800cbf4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b082      	sub	sp, #8
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
 800cbfc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	88db      	ldrh	r3, [r3, #6]
 800cc02:	2b01      	cmp	r3, #1
 800cc04:	d004      	beq.n	800cc10 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cc06:	6839      	ldr	r1, [r7, #0]
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f000 f8e2 	bl	800cdd2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cc0e:	e023      	b.n	800cc58 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc16:	b2db      	uxtb	r3, r3
 800cc18:	2b02      	cmp	r3, #2
 800cc1a:	dc02      	bgt.n	800cc22 <USBD_GetConfig+0x2e>
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	dc03      	bgt.n	800cc28 <USBD_GetConfig+0x34>
 800cc20:	e015      	b.n	800cc4e <USBD_GetConfig+0x5a>
 800cc22:	2b03      	cmp	r3, #3
 800cc24:	d00b      	beq.n	800cc3e <USBD_GetConfig+0x4a>
 800cc26:	e012      	b.n	800cc4e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	3308      	adds	r3, #8
 800cc32:	2201      	movs	r2, #1
 800cc34:	4619      	mov	r1, r3
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f000 f93c 	bl	800ceb4 <USBD_CtlSendData>
        break;
 800cc3c:	e00c      	b.n	800cc58 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	3304      	adds	r3, #4
 800cc42:	2201      	movs	r2, #1
 800cc44:	4619      	mov	r1, r3
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f000 f934 	bl	800ceb4 <USBD_CtlSendData>
        break;
 800cc4c:	e004      	b.n	800cc58 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cc4e:	6839      	ldr	r1, [r7, #0]
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f000 f8be 	bl	800cdd2 <USBD_CtlError>
        break;
 800cc56:	bf00      	nop
}
 800cc58:	bf00      	nop
 800cc5a:	3708      	adds	r7, #8
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}

0800cc60 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b082      	sub	sp, #8
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc70:	b2db      	uxtb	r3, r3
 800cc72:	3b01      	subs	r3, #1
 800cc74:	2b02      	cmp	r3, #2
 800cc76:	d81e      	bhi.n	800ccb6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	88db      	ldrh	r3, [r3, #6]
 800cc7c:	2b02      	cmp	r3, #2
 800cc7e:	d004      	beq.n	800cc8a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cc80:	6839      	ldr	r1, [r7, #0]
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f000 f8a5 	bl	800cdd2 <USBD_CtlError>
        break;
 800cc88:	e01a      	b.n	800ccc0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d005      	beq.n	800cca6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	68db      	ldr	r3, [r3, #12]
 800cc9e:	f043 0202 	orr.w	r2, r3, #2
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	330c      	adds	r3, #12
 800ccaa:	2202      	movs	r2, #2
 800ccac:	4619      	mov	r1, r3
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f000 f900 	bl	800ceb4 <USBD_CtlSendData>
      break;
 800ccb4:	e004      	b.n	800ccc0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ccb6:	6839      	ldr	r1, [r7, #0]
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f000 f88a 	bl	800cdd2 <USBD_CtlError>
      break;
 800ccbe:	bf00      	nop
  }
}
 800ccc0:	bf00      	nop
 800ccc2:	3708      	adds	r7, #8
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b082      	sub	sp, #8
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	885b      	ldrh	r3, [r3, #2]
 800ccd6:	2b01      	cmp	r3, #1
 800ccd8:	d107      	bne.n	800ccea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2201      	movs	r2, #1
 800ccde:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f000 f940 	bl	800cf68 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cce8:	e013      	b.n	800cd12 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	885b      	ldrh	r3, [r3, #2]
 800ccee:	2b02      	cmp	r3, #2
 800ccf0:	d10b      	bne.n	800cd0a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	889b      	ldrh	r3, [r3, #4]
 800ccf6:	0a1b      	lsrs	r3, r3, #8
 800ccf8:	b29b      	uxth	r3, r3
 800ccfa:	b2da      	uxtb	r2, r3
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f000 f930 	bl	800cf68 <USBD_CtlSendStatus>
}
 800cd08:	e003      	b.n	800cd12 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cd0a:	6839      	ldr	r1, [r7, #0]
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f000 f860 	bl	800cdd2 <USBD_CtlError>
}
 800cd12:	bf00      	nop
 800cd14:	3708      	adds	r7, #8
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}

0800cd1a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd1a:	b580      	push	{r7, lr}
 800cd1c:	b082      	sub	sp, #8
 800cd1e:	af00      	add	r7, sp, #0
 800cd20:	6078      	str	r0, [r7, #4]
 800cd22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd2a:	b2db      	uxtb	r3, r3
 800cd2c:	3b01      	subs	r3, #1
 800cd2e:	2b02      	cmp	r3, #2
 800cd30:	d80b      	bhi.n	800cd4a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	885b      	ldrh	r3, [r3, #2]
 800cd36:	2b01      	cmp	r3, #1
 800cd38:	d10c      	bne.n	800cd54 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f000 f910 	bl	800cf68 <USBD_CtlSendStatus>
      }
      break;
 800cd48:	e004      	b.n	800cd54 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cd4a:	6839      	ldr	r1, [r7, #0]
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f000 f840 	bl	800cdd2 <USBD_CtlError>
      break;
 800cd52:	e000      	b.n	800cd56 <USBD_ClrFeature+0x3c>
      break;
 800cd54:	bf00      	nop
  }
}
 800cd56:	bf00      	nop
 800cd58:	3708      	adds	r7, #8
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}

0800cd5e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cd5e:	b580      	push	{r7, lr}
 800cd60:	b084      	sub	sp, #16
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	6078      	str	r0, [r7, #4]
 800cd66:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	781a      	ldrb	r2, [r3, #0]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	3301      	adds	r3, #1
 800cd78:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	781a      	ldrb	r2, [r3, #0]
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	3301      	adds	r3, #1
 800cd86:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cd88:	68f8      	ldr	r0, [r7, #12]
 800cd8a:	f7ff fa17 	bl	800c1bc <SWAPBYTE>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	461a      	mov	r2, r3
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	3301      	adds	r3, #1
 800cd9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	3301      	adds	r3, #1
 800cda0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cda2:	68f8      	ldr	r0, [r7, #12]
 800cda4:	f7ff fa0a 	bl	800c1bc <SWAPBYTE>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	461a      	mov	r2, r3
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	3301      	adds	r3, #1
 800cdb4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	3301      	adds	r3, #1
 800cdba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cdbc:	68f8      	ldr	r0, [r7, #12]
 800cdbe:	f7ff f9fd 	bl	800c1bc <SWAPBYTE>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	461a      	mov	r2, r3
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	80da      	strh	r2, [r3, #6]
}
 800cdca:	bf00      	nop
 800cdcc:	3710      	adds	r7, #16
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}

0800cdd2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdd2:	b580      	push	{r7, lr}
 800cdd4:	b082      	sub	sp, #8
 800cdd6:	af00      	add	r7, sp, #0
 800cdd8:	6078      	str	r0, [r7, #4]
 800cdda:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cddc:	2180      	movs	r1, #128	; 0x80
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f000 fe60 	bl	800daa4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cde4:	2100      	movs	r1, #0
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f000 fe5c 	bl	800daa4 <USBD_LL_StallEP>
}
 800cdec:	bf00      	nop
 800cdee:	3708      	adds	r7, #8
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b086      	sub	sp, #24
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	60f8      	str	r0, [r7, #12]
 800cdfc:	60b9      	str	r1, [r7, #8]
 800cdfe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ce00:	2300      	movs	r3, #0
 800ce02:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d036      	beq.n	800ce78 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ce0e:	6938      	ldr	r0, [r7, #16]
 800ce10:	f000 f836 	bl	800ce80 <USBD_GetLen>
 800ce14:	4603      	mov	r3, r0
 800ce16:	3301      	adds	r3, #1
 800ce18:	b29b      	uxth	r3, r3
 800ce1a:	005b      	lsls	r3, r3, #1
 800ce1c:	b29a      	uxth	r2, r3
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ce22:	7dfb      	ldrb	r3, [r7, #23]
 800ce24:	68ba      	ldr	r2, [r7, #8]
 800ce26:	4413      	add	r3, r2
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	7812      	ldrb	r2, [r2, #0]
 800ce2c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ce2e:	7dfb      	ldrb	r3, [r7, #23]
 800ce30:	3301      	adds	r3, #1
 800ce32:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ce34:	7dfb      	ldrb	r3, [r7, #23]
 800ce36:	68ba      	ldr	r2, [r7, #8]
 800ce38:	4413      	add	r3, r2
 800ce3a:	2203      	movs	r2, #3
 800ce3c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ce3e:	7dfb      	ldrb	r3, [r7, #23]
 800ce40:	3301      	adds	r3, #1
 800ce42:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ce44:	e013      	b.n	800ce6e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ce46:	7dfb      	ldrb	r3, [r7, #23]
 800ce48:	68ba      	ldr	r2, [r7, #8]
 800ce4a:	4413      	add	r3, r2
 800ce4c:	693a      	ldr	r2, [r7, #16]
 800ce4e:	7812      	ldrb	r2, [r2, #0]
 800ce50:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	3301      	adds	r3, #1
 800ce56:	613b      	str	r3, [r7, #16]
    idx++;
 800ce58:	7dfb      	ldrb	r3, [r7, #23]
 800ce5a:	3301      	adds	r3, #1
 800ce5c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ce5e:	7dfb      	ldrb	r3, [r7, #23]
 800ce60:	68ba      	ldr	r2, [r7, #8]
 800ce62:	4413      	add	r3, r2
 800ce64:	2200      	movs	r2, #0
 800ce66:	701a      	strb	r2, [r3, #0]
    idx++;
 800ce68:	7dfb      	ldrb	r3, [r7, #23]
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	781b      	ldrb	r3, [r3, #0]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d1e7      	bne.n	800ce46 <USBD_GetString+0x52>
 800ce76:	e000      	b.n	800ce7a <USBD_GetString+0x86>
    return;
 800ce78:	bf00      	nop
  }
}
 800ce7a:	3718      	adds	r7, #24
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ce80:	b480      	push	{r7}
 800ce82:	b085      	sub	sp, #20
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ce88:	2300      	movs	r3, #0
 800ce8a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ce90:	e005      	b.n	800ce9e <USBD_GetLen+0x1e>
  {
    len++;
 800ce92:	7bfb      	ldrb	r3, [r7, #15]
 800ce94:	3301      	adds	r3, #1
 800ce96:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d1f5      	bne.n	800ce92 <USBD_GetLen+0x12>
  }

  return len;
 800cea6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3714      	adds	r7, #20
 800ceac:	46bd      	mov	sp, r7
 800ceae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb2:	4770      	bx	lr

0800ceb4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b084      	sub	sp, #16
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	60f8      	str	r0, [r7, #12]
 800cebc:	60b9      	str	r1, [r7, #8]
 800cebe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	2202      	movs	r2, #2
 800cec4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	687a      	ldr	r2, [r7, #4]
 800cecc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	687a      	ldr	r2, [r7, #4]
 800ced2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	68ba      	ldr	r2, [r7, #8]
 800ced8:	2100      	movs	r1, #0
 800ceda:	68f8      	ldr	r0, [r7, #12]
 800cedc:	f000 fe6c 	bl	800dbb8 <USBD_LL_Transmit>

  return USBD_OK;
 800cee0:	2300      	movs	r3, #0
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3710      	adds	r7, #16
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}

0800ceea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ceea:	b580      	push	{r7, lr}
 800ceec:	b084      	sub	sp, #16
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	60f8      	str	r0, [r7, #12]
 800cef2:	60b9      	str	r1, [r7, #8]
 800cef4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	68ba      	ldr	r2, [r7, #8]
 800cefa:	2100      	movs	r1, #0
 800cefc:	68f8      	ldr	r0, [r7, #12]
 800cefe:	f000 fe5b 	bl	800dbb8 <USBD_LL_Transmit>

  return USBD_OK;
 800cf02:	2300      	movs	r3, #0
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	3710      	adds	r7, #16
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b084      	sub	sp, #16
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	60f8      	str	r0, [r7, #12]
 800cf14:	60b9      	str	r1, [r7, #8]
 800cf16:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	2203      	movs	r2, #3
 800cf1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	687a      	ldr	r2, [r7, #4]
 800cf24:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	687a      	ldr	r2, [r7, #4]
 800cf2c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	68ba      	ldr	r2, [r7, #8]
 800cf34:	2100      	movs	r1, #0
 800cf36:	68f8      	ldr	r0, [r7, #12]
 800cf38:	f000 fe5f 	bl	800dbfa <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf3c:	2300      	movs	r3, #0
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3710      	adds	r7, #16
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}

0800cf46 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cf46:	b580      	push	{r7, lr}
 800cf48:	b084      	sub	sp, #16
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	60f8      	str	r0, [r7, #12]
 800cf4e:	60b9      	str	r1, [r7, #8]
 800cf50:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	68ba      	ldr	r2, [r7, #8]
 800cf56:	2100      	movs	r1, #0
 800cf58:	68f8      	ldr	r0, [r7, #12]
 800cf5a:	f000 fe4e 	bl	800dbfa <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf5e:	2300      	movs	r3, #0
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3710      	adds	r7, #16
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}

0800cf68 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b082      	sub	sp, #8
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2204      	movs	r2, #4
 800cf74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cf78:	2300      	movs	r3, #0
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	2100      	movs	r1, #0
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f000 fe1a 	bl	800dbb8 <USBD_LL_Transmit>

  return USBD_OK;
 800cf84:	2300      	movs	r3, #0
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	3708      	adds	r7, #8
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}

0800cf8e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cf8e:	b580      	push	{r7, lr}
 800cf90:	b082      	sub	sp, #8
 800cf92:	af00      	add	r7, sp, #0
 800cf94:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2205      	movs	r2, #5
 800cf9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	2100      	movs	r1, #0
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f000 fe28 	bl	800dbfa <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cfaa:	2300      	movs	r3, #0
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3708      	adds	r7, #8
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}

0800cfb4 <arm_biquad_cascade_df1_f32>:
void arm_biquad_cascade_df1_f32(
  const arm_biquad_casd_df1_inst_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b097      	sub	sp, #92	; 0x5c
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	60f8      	str	r0, [r7, #12]
 800cfbc:	60b9      	str	r1, [r7, #8]
 800cfbe:	607a      	str	r2, [r7, #4]
 800cfc0:	603b      	str	r3, [r7, #0]
  const float32_t *pIn = pSrc;                         /* Source pointer */
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	657b      	str	r3, [r7, #84]	; 0x54
        float32_t *pOut = pDst;                        /* Destination pointer */
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	653b      	str	r3, [r7, #80]	; 0x50
        float32_t *pState = S->pState;                 /* pState pointer */
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	685b      	ldr	r3, [r3, #4]
 800cfce:	64fb      	str	r3, [r7, #76]	; 0x4c
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	689b      	ldr	r3, [r3, #8]
 800cfd4:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t acc;                                 /* Accumulator */
        float32_t b0, b1, b2, a1, a2;                  /* Filter coefficients */
        float32_t Xn1, Xn2, Yn1, Yn2;                  /* Filter pState variables */
        float32_t Xn;                                  /* Temporary input */
        uint32_t sample, stage = S->numStages;         /* Loop counters */
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	633b      	str	r3, [r7, #48]	; 0x30

  do
  {
    /* Reading the coefficients */
    b0 = *pCoeffs++;
 800cfdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfde:	1d1a      	adds	r2, r3, #4
 800cfe0:	64ba      	str	r2, [r7, #72]	; 0x48
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    b1 = *pCoeffs++;
 800cfe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfe8:	1d1a      	adds	r2, r3, #4
 800cfea:	64ba      	str	r2, [r7, #72]	; 0x48
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	62bb      	str	r3, [r7, #40]	; 0x28
    b2 = *pCoeffs++;
 800cff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cff2:	1d1a      	adds	r2, r3, #4
 800cff4:	64ba      	str	r2, [r7, #72]	; 0x48
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	627b      	str	r3, [r7, #36]	; 0x24
    a1 = *pCoeffs++;
 800cffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cffc:	1d1a      	adds	r2, r3, #4
 800cffe:	64ba      	str	r2, [r7, #72]	; 0x48
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	623b      	str	r3, [r7, #32]
    a2 = *pCoeffs++;
 800d004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d006:	1d1a      	adds	r2, r3, #4
 800d008:	64ba      	str	r2, [r7, #72]	; 0x48
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	61fb      	str	r3, [r7, #28]

    /* Reading the pState values */
    Xn1 = pState[0];
 800d00e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	647b      	str	r3, [r7, #68]	; 0x44
    Xn2 = pState[1];
 800d014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	643b      	str	r3, [r7, #64]	; 0x40
    Yn1 = pState[2];
 800d01a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d01c:	689b      	ldr	r3, [r3, #8]
 800d01e:	63fb      	str	r3, [r7, #60]	; 0x3c
    Yn2 = pState[3];
 800d020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d022:	68db      	ldr	r3, [r3, #12]
 800d024:	63bb      	str	r3, [r7, #56]	; 0x38
    sample = blockSize & 0x3U;

#else

    /* Initialize blkCnt with number of samples */
    sample = blockSize;
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	637b      	str	r3, [r7, #52]	; 0x34

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (sample > 0U)
 800d02a:	e03c      	b.n	800d0a6 <arm_biquad_cascade_df1_f32+0xf2>
    {
      /* Read the input */
      Xn = *pIn++;
 800d02c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d02e:	1d1a      	adds	r2, r3, #4
 800d030:	657a      	str	r2, [r7, #84]	; 0x54
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	61bb      	str	r3, [r7, #24]

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      acc = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 800d036:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800d03a:	edd7 7a06 	vldr	s15, [r7, #24]
 800d03e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d042:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d046:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d04a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d04e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d052:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800d056:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800d05a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d05e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d062:	edd7 6a08 	vldr	s13, [r7, #32]
 800d066:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800d06a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d06e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d072:	edd7 6a07 	vldr	s13, [r7, #28]
 800d076:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800d07a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d07e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d082:	edc7 7a05 	vstr	s15, [r7, #20]

      /* Store output in destination buffer. */
      *pOut++ = acc;
 800d086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d088:	1d1a      	adds	r2, r3, #4
 800d08a:	653a      	str	r2, [r7, #80]	; 0x50
 800d08c:	697a      	ldr	r2, [r7, #20]
 800d08e:	601a      	str	r2, [r3, #0]
      /* The states should be updated as: */
      /* Xn2 = Xn1 */
      /* Xn1 = Xn  */
      /* Yn2 = Yn1 */
      /* Yn1 = acc */
      Xn2 = Xn1;
 800d090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d092:	643b      	str	r3, [r7, #64]	; 0x40
      Xn1 = Xn;
 800d094:	69bb      	ldr	r3, [r7, #24]
 800d096:	647b      	str	r3, [r7, #68]	; 0x44
      Yn2 = Yn1;
 800d098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d09a:	63bb      	str	r3, [r7, #56]	; 0x38
      Yn1 = acc;
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	63fb      	str	r3, [r7, #60]	; 0x3c

      /* decrement loop counter */
      sample--;
 800d0a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0a2:	3b01      	subs	r3, #1
 800d0a4:	637b      	str	r3, [r7, #52]	; 0x34
    while (sample > 0U)
 800d0a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d1bf      	bne.n	800d02c <arm_biquad_cascade_df1_f32+0x78>
    }

    /* Store the updated state variables back into the pState array */
    *pState++ = Xn1;
 800d0ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0ae:	1d1a      	adds	r2, r3, #4
 800d0b0:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d0b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d0b4:	601a      	str	r2, [r3, #0]
    *pState++ = Xn2;
 800d0b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0b8:	1d1a      	adds	r2, r3, #4
 800d0ba:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d0bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d0be:	601a      	str	r2, [r3, #0]
    *pState++ = Yn1;
 800d0c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0c2:	1d1a      	adds	r2, r3, #4
 800d0c4:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d0c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d0c8:	601a      	str	r2, [r3, #0]
    *pState++ = Yn2;
 800d0ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0cc:	1d1a      	adds	r2, r3, #4
 800d0ce:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d0d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0d2:	601a      	str	r2, [r3, #0]

    /* The first stage goes from the input buffer to the output buffer. */
    /* Subsequent numStages occur in-place in the output buffer */
    pIn = pDst;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	657b      	str	r3, [r7, #84]	; 0x54

    /* Reset output pointer */
    pOut = pDst;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	653b      	str	r3, [r7, #80]	; 0x50

    /* decrement loop counter */
    stage--;
 800d0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0de:	3b01      	subs	r3, #1
 800d0e0:	633b      	str	r3, [r7, #48]	; 0x30

  } while (stage > 0U);
 800d0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	f47f af79 	bne.w	800cfdc <arm_biquad_cascade_df1_f32+0x28>

}
 800d0ea:	bf00      	nop
 800d0ec:	bf00      	nop
 800d0ee:	375c      	adds	r7, #92	; 0x5c
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f6:	4770      	bx	lr

0800d0f8 <arm_biquad_cascade_df1_init_f32>:
void arm_biquad_cascade_df1_init_f32(
        arm_biquad_casd_df1_inst_f32 * S,
        uint8_t numStages,
  const float32_t * pCoeffs,
        float32_t * pState)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b084      	sub	sp, #16
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	60f8      	str	r0, [r7, #12]
 800d100:	607a      	str	r2, [r7, #4]
 800d102:	603b      	str	r3, [r7, #0]
 800d104:	460b      	mov	r3, r1
 800d106:	72fb      	strb	r3, [r7, #11]
  /* Assign filter stages */
  S->numStages = numStages;
 800d108:	7afa      	ldrb	r2, [r7, #11]
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	601a      	str	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	687a      	ldr	r2, [r7, #4]
 800d112:	609a      	str	r2, [r3, #8]

  /* Clear state buffer and size is always 4 * numStages */
  memset(pState, 0, (4U * (uint32_t) numStages) * sizeof(float32_t));
 800d114:	7afb      	ldrb	r3, [r7, #11]
 800d116:	011b      	lsls	r3, r3, #4
 800d118:	461a      	mov	r2, r3
 800d11a:	2100      	movs	r1, #0
 800d11c:	6838      	ldr	r0, [r7, #0]
 800d11e:	f000 fe5d 	bl	800dddc <memset>

  /* Assign state pointer */
  S->pState = pState;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	683a      	ldr	r2, [r7, #0]
 800d126:	605a      	str	r2, [r3, #4]
}
 800d128:	bf00      	nop
 800d12a:	3710      	adds	r7, #16
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}

0800d130 <arm_fir_f32>:
void arm_fir_f32(
  const arm_fir_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 800d130:	b480      	push	{r7}
 800d132:	b08f      	sub	sp, #60	; 0x3c
 800d134:	af00      	add	r7, sp, #0
 800d136:	60f8      	str	r0, [r7, #12]
 800d138:	60b9      	str	r1, [r7, #8]
 800d13a:	607a      	str	r2, [r7, #4]
 800d13c:	603b      	str	r3, [r7, #0]
        float32_t *pState = S->pState;                 /* State pointer */
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	685b      	ldr	r3, [r3, #4]
 800d142:	637b      	str	r3, [r7, #52]	; 0x34
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	689b      	ldr	r3, [r3, #8]
 800d148:	617b      	str	r3, [r7, #20]
        float32_t *pStateCurnt;                        /* Points to the current sample of the state */
        float32_t *px;                                 /* Temporary pointer for state buffer */
  const float32_t *pb;                                 /* Temporary pointer for coefficient buffer */
        float32_t acc0;                                /* Accumulator */
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	881b      	ldrh	r3, [r3, #0]
 800d14e:	613b      	str	r3, [r7, #16]
        float32_t c0;                                           /* Temporary variable to hold coefficient value */
#endif

  /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
  /* pStateCurnt points to the location where the new input data should be written */
  pStateCurnt = &(S->pState[(numTaps - 1U)]);
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	685a      	ldr	r2, [r3, #4]
 800d154:	693b      	ldr	r3, [r7, #16]
 800d156:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d15a:	3b01      	subs	r3, #1
 800d15c:	009b      	lsls	r3, r3, #2
 800d15e:	4413      	add	r3, r2
 800d160:	633b      	str	r3, [r7, #48]	; 0x30
  blkCnt = blockSize % 0x8U;

#else

  /* Initialize blkCnt with number of taps */
  blkCnt = blockSize;
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800d166:	e034      	b.n	800d1d2 <arm_fir_f32+0xa2>
  {
    /* Copy one sample at a time into state buffer */
    *pStateCurnt++ = *pSrc++;
 800d168:	68ba      	ldr	r2, [r7, #8]
 800d16a:	1d13      	adds	r3, r2, #4
 800d16c:	60bb      	str	r3, [r7, #8]
 800d16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d170:	1d19      	adds	r1, r3, #4
 800d172:	6339      	str	r1, [r7, #48]	; 0x30
 800d174:	6812      	ldr	r2, [r2, #0]
 800d176:	601a      	str	r2, [r3, #0]

    /* Set the accumulator to zero */
    acc0 = 0.0f;
 800d178:	f04f 0300 	mov.w	r3, #0
 800d17c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Initialize state pointer */
    px = pState;
 800d17e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d180:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Initialize Coefficient pointer */
    pb = pCoeffs;
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	62bb      	str	r3, [r7, #40]	; 0x28

    i = numTaps;
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	623b      	str	r3, [r7, #32]

    /* Perform the multiply-accumulates */
    while (i > 0U)
 800d18a:	e014      	b.n	800d1b6 <arm_fir_f32+0x86>
    {
      /* acc =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-numTaps-3] +...+ b[0] * x[0] */
      acc0 += *px++ * *pb++;
 800d18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d18e:	1d1a      	adds	r2, r3, #4
 800d190:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d192:	ed93 7a00 	vldr	s14, [r3]
 800d196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d198:	1d1a      	adds	r2, r3, #4
 800d19a:	62ba      	str	r2, [r7, #40]	; 0x28
 800d19c:	edd3 7a00 	vldr	s15, [r3]
 800d1a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1a4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800d1a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d1ac:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

      i--;
 800d1b0:	6a3b      	ldr	r3, [r7, #32]
 800d1b2:	3b01      	subs	r3, #1
 800d1b4:	623b      	str	r3, [r7, #32]
    while (i > 0U)
 800d1b6:	6a3b      	ldr	r3, [r7, #32]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d1e7      	bne.n	800d18c <arm_fir_f32+0x5c>
    }

    /* Store result in destination buffer. */
    *pDst++ = acc0;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	1d1a      	adds	r2, r3, #4
 800d1c0:	607a      	str	r2, [r7, #4]
 800d1c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1c4:	601a      	str	r2, [r3, #0]

    /* Advance state pointer by 1 for the next sample */
    pState = pState + 1U;
 800d1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1c8:	3304      	adds	r3, #4
 800d1ca:	637b      	str	r3, [r7, #52]	; 0x34

    /* Decrement loop counter */
    blkCnt--;
 800d1cc:	69bb      	ldr	r3, [r7, #24]
 800d1ce:	3b01      	subs	r3, #1
 800d1d0:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 800d1d2:	69bb      	ldr	r3, [r7, #24]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d1c7      	bne.n	800d168 <arm_fir_f32+0x38>
  /* Processing is complete.
     Now copy the last numTaps - 1 samples to the start of the state buffer.
     This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCurnt = S->pState;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	685b      	ldr	r3, [r3, #4]
 800d1dc:	633b      	str	r3, [r7, #48]	; 0x30
  tapCnt = (numTaps - 1U) % 0x4U;

#else

  /* Initialize tapCnt with number of taps */
  tapCnt = (numTaps - 1U);
 800d1de:	693b      	ldr	r3, [r7, #16]
 800d1e0:	3b01      	subs	r3, #1
 800d1e2:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy remaining data */
  while (tapCnt > 0U)
 800d1e4:	e00a      	b.n	800d1fc <arm_fir_f32+0xcc>
  {
    *pStateCurnt++ = *pState++;
 800d1e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1e8:	1d13      	adds	r3, r2, #4
 800d1ea:	637b      	str	r3, [r7, #52]	; 0x34
 800d1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ee:	1d19      	adds	r1, r3, #4
 800d1f0:	6339      	str	r1, [r7, #48]	; 0x30
 800d1f2:	6812      	ldr	r2, [r2, #0]
 800d1f4:	601a      	str	r2, [r3, #0]

    /* Decrement loop counter */
    tapCnt--;
 800d1f6:	69fb      	ldr	r3, [r7, #28]
 800d1f8:	3b01      	subs	r3, #1
 800d1fa:	61fb      	str	r3, [r7, #28]
  while (tapCnt > 0U)
 800d1fc:	69fb      	ldr	r3, [r7, #28]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d1f1      	bne.n	800d1e6 <arm_fir_f32+0xb6>
  }

}
 800d202:	bf00      	nop
 800d204:	bf00      	nop
 800d206:	373c      	adds	r7, #60	; 0x3c
 800d208:	46bd      	mov	sp, r7
 800d20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20e:	4770      	bx	lr

0800d210 <arm_fir_init_f32>:
        arm_fir_instance_f32 * S,
        uint16_t numTaps,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b084      	sub	sp, #16
 800d214:	af00      	add	r7, sp, #0
 800d216:	60f8      	str	r0, [r7, #12]
 800d218:	607a      	str	r2, [r7, #4]
 800d21a:	603b      	str	r3, [r7, #0]
 800d21c:	460b      	mov	r3, r1
 800d21e:	817b      	strh	r3, [r7, #10]
  /* Assign filter taps */
  S->numTaps = numTaps;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	897a      	ldrh	r2, [r7, #10]
 800d224:	801a      	strh	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	687a      	ldr	r2, [r7, #4]
 800d22a:	609a      	str	r2, [r3, #8]

  /* Clear state buffer. The size is always (blockSize + numTaps - 1) */
#if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  memset(pState, 0, (numTaps + (blockSize - 1U) + blockSize) * sizeof(float32_t));
#else
  memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 800d22c:	897a      	ldrh	r2, [r7, #10]
 800d22e:	69bb      	ldr	r3, [r7, #24]
 800d230:	4413      	add	r3, r2
 800d232:	3b01      	subs	r3, #1
 800d234:	009b      	lsls	r3, r3, #2
 800d236:	461a      	mov	r2, r3
 800d238:	2100      	movs	r1, #0
 800d23a:	6838      	ldr	r0, [r7, #0]
 800d23c:	f000 fdce 	bl	800dddc <memset>
#endif
  /* Assign state pointer */
  S->pState = pState;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	683a      	ldr	r2, [r7, #0]
 800d244:	605a      	str	r2, [r3, #4]
}
 800d246:	bf00      	nop
 800d248:	3710      	adds	r7, #16
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}
	...

0800d250 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800d254:	2200      	movs	r2, #0
 800d256:	4912      	ldr	r1, [pc, #72]	; (800d2a0 <MX_USB_Device_Init+0x50>)
 800d258:	4812      	ldr	r0, [pc, #72]	; (800d2a4 <MX_USB_Device_Init+0x54>)
 800d25a:	f7fe fc1b 	bl	800ba94 <USBD_Init>
 800d25e:	4603      	mov	r3, r0
 800d260:	2b00      	cmp	r3, #0
 800d262:	d001      	beq.n	800d268 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800d264:	f7f7 f990 	bl	8004588 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800d268:	490f      	ldr	r1, [pc, #60]	; (800d2a8 <MX_USB_Device_Init+0x58>)
 800d26a:	480e      	ldr	r0, [pc, #56]	; (800d2a4 <MX_USB_Device_Init+0x54>)
 800d26c:	f7fe fc42 	bl	800baf4 <USBD_RegisterClass>
 800d270:	4603      	mov	r3, r0
 800d272:	2b00      	cmp	r3, #0
 800d274:	d001      	beq.n	800d27a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800d276:	f7f7 f987 	bl	8004588 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800d27a:	490c      	ldr	r1, [pc, #48]	; (800d2ac <MX_USB_Device_Init+0x5c>)
 800d27c:	4809      	ldr	r0, [pc, #36]	; (800d2a4 <MX_USB_Device_Init+0x54>)
 800d27e:	f7fe fb39 	bl	800b8f4 <USBD_CDC_RegisterInterface>
 800d282:	4603      	mov	r3, r0
 800d284:	2b00      	cmp	r3, #0
 800d286:	d001      	beq.n	800d28c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800d288:	f7f7 f97e 	bl	8004588 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800d28c:	4805      	ldr	r0, [pc, #20]	; (800d2a4 <MX_USB_Device_Init+0x54>)
 800d28e:	f7fe fc67 	bl	800bb60 <USBD_Start>
 800d292:	4603      	mov	r3, r0
 800d294:	2b00      	cmp	r3, #0
 800d296:	d001      	beq.n	800d29c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800d298:	f7f7 f976 	bl	8004588 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800d29c:	bf00      	nop
 800d29e:	bd80      	pop	{r7, pc}
 800d2a0:	200000c0 	.word	0x200000c0
 800d2a4:	20003d3c 	.word	0x20003d3c
 800d2a8:	20000024 	.word	0x20000024
 800d2ac:	200000ac 	.word	0x200000ac

0800d2b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	4905      	ldr	r1, [pc, #20]	; (800d2cc <CDC_Init_FS+0x1c>)
 800d2b8:	4805      	ldr	r0, [pc, #20]	; (800d2d0 <CDC_Init_FS+0x20>)
 800d2ba:	f7fe fb35 	bl	800b928 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d2be:	4905      	ldr	r1, [pc, #20]	; (800d2d4 <CDC_Init_FS+0x24>)
 800d2c0:	4803      	ldr	r0, [pc, #12]	; (800d2d0 <CDC_Init_FS+0x20>)
 800d2c2:	f7fe fb53 	bl	800b96c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d2c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	bd80      	pop	{r7, pc}
 800d2cc:	20004818 	.word	0x20004818
 800d2d0:	20003d3c 	.word	0x20003d3c
 800d2d4:	20004018 	.word	0x20004018

0800d2d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d2dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e6:	4770      	bx	lr

0800d2e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d2e8:	b480      	push	{r7}
 800d2ea:	b083      	sub	sp, #12
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	6039      	str	r1, [r7, #0]
 800d2f2:	71fb      	strb	r3, [r7, #7]
 800d2f4:	4613      	mov	r3, r2
 800d2f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d2f8:	79fb      	ldrb	r3, [r7, #7]
 800d2fa:	2b23      	cmp	r3, #35	; 0x23
 800d2fc:	d84a      	bhi.n	800d394 <CDC_Control_FS+0xac>
 800d2fe:	a201      	add	r2, pc, #4	; (adr r2, 800d304 <CDC_Control_FS+0x1c>)
 800d300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d304:	0800d395 	.word	0x0800d395
 800d308:	0800d395 	.word	0x0800d395
 800d30c:	0800d395 	.word	0x0800d395
 800d310:	0800d395 	.word	0x0800d395
 800d314:	0800d395 	.word	0x0800d395
 800d318:	0800d395 	.word	0x0800d395
 800d31c:	0800d395 	.word	0x0800d395
 800d320:	0800d395 	.word	0x0800d395
 800d324:	0800d395 	.word	0x0800d395
 800d328:	0800d395 	.word	0x0800d395
 800d32c:	0800d395 	.word	0x0800d395
 800d330:	0800d395 	.word	0x0800d395
 800d334:	0800d395 	.word	0x0800d395
 800d338:	0800d395 	.word	0x0800d395
 800d33c:	0800d395 	.word	0x0800d395
 800d340:	0800d395 	.word	0x0800d395
 800d344:	0800d395 	.word	0x0800d395
 800d348:	0800d395 	.word	0x0800d395
 800d34c:	0800d395 	.word	0x0800d395
 800d350:	0800d395 	.word	0x0800d395
 800d354:	0800d395 	.word	0x0800d395
 800d358:	0800d395 	.word	0x0800d395
 800d35c:	0800d395 	.word	0x0800d395
 800d360:	0800d395 	.word	0x0800d395
 800d364:	0800d395 	.word	0x0800d395
 800d368:	0800d395 	.word	0x0800d395
 800d36c:	0800d395 	.word	0x0800d395
 800d370:	0800d395 	.word	0x0800d395
 800d374:	0800d395 	.word	0x0800d395
 800d378:	0800d395 	.word	0x0800d395
 800d37c:	0800d395 	.word	0x0800d395
 800d380:	0800d395 	.word	0x0800d395
 800d384:	0800d395 	.word	0x0800d395
 800d388:	0800d395 	.word	0x0800d395
 800d38c:	0800d395 	.word	0x0800d395
 800d390:	0800d395 	.word	0x0800d395
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d394:	bf00      	nop
  }

  return (USBD_OK);
 800d396:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d398:	4618      	mov	r0, r3
 800d39a:	370c      	adds	r7, #12
 800d39c:	46bd      	mov	sp, r7
 800d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a2:	4770      	bx	lr

0800d3a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b082      	sub	sp, #8
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
 800d3ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  bufferFlag = 0;
 800d3ae:	4b17      	ldr	r3, [pc, #92]	; (800d40c <CDC_Receive_FS+0x68>)
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	701a      	strb	r2, [r3, #0]
  if (byteInBuffer>2047)
 800d3b4:	4b16      	ldr	r3, [pc, #88]	; (800d410 <CDC_Receive_FS+0x6c>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d3bc:	d302      	bcc.n	800d3c4 <CDC_Receive_FS+0x20>
  {//This is a error data loss...
	  byteInBuffer = 0;
 800d3be:	4b14      	ldr	r3, [pc, #80]	; (800d410 <CDC_Receive_FS+0x6c>)
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	601a      	str	r2, [r3, #0]
  }
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[byteInBuffer]);
 800d3c4:	4b12      	ldr	r3, [pc, #72]	; (800d410 <CDC_Receive_FS+0x6c>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	687a      	ldr	r2, [r7, #4]
 800d3ca:	4413      	add	r3, r2
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	4811      	ldr	r0, [pc, #68]	; (800d414 <CDC_Receive_FS+0x70>)
 800d3d0:	f7fe facc 	bl	800b96c <USBD_CDC_SetRxBuffer>
  memcpy(&UserTxBufferFS[byteInBuffer],&Buf[0], *Len);
 800d3d4:	4b0e      	ldr	r3, [pc, #56]	; (800d410 <CDC_Receive_FS+0x6c>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	4a0f      	ldr	r2, [pc, #60]	; (800d418 <CDC_Receive_FS+0x74>)
 800d3da:	1898      	adds	r0, r3, r2
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	461a      	mov	r2, r3
 800d3e2:	6879      	ldr	r1, [r7, #4]
 800d3e4:	f000 fcec 	bl	800ddc0 <memcpy>

  byteInBuffer += *Len;
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	681a      	ldr	r2, [r3, #0]
 800d3ec:	4b08      	ldr	r3, [pc, #32]	; (800d410 <CDC_Receive_FS+0x6c>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	4413      	add	r3, r2
 800d3f2:	4a07      	ldr	r2, [pc, #28]	; (800d410 <CDC_Receive_FS+0x6c>)
 800d3f4:	6013      	str	r3, [r2, #0]

  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d3f6:	4807      	ldr	r0, [pc, #28]	; (800d414 <CDC_Receive_FS+0x70>)
 800d3f8:	f7fe fb16 	bl	800ba28 <USBD_CDC_ReceivePacket>
  bufferFlag = 1;
 800d3fc:	4b03      	ldr	r3, [pc, #12]	; (800d40c <CDC_Receive_FS+0x68>)
 800d3fe:	2201      	movs	r2, #1
 800d400:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800d402:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d404:	4618      	mov	r0, r3
 800d406:	3708      	adds	r7, #8
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}
 800d40c:	200000a8 	.word	0x200000a8
 800d410:	20005018 	.word	0x20005018
 800d414:	20003d3c 	.word	0x20003d3c
 800d418:	20004818 	.word	0x20004818

0800d41c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b084      	sub	sp, #16
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
 800d424:	460b      	mov	r3, r1
 800d426:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d428:	2300      	movs	r3, #0
 800d42a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d42c:	4b0d      	ldr	r3, [pc, #52]	; (800d464 <CDC_Transmit_FS+0x48>)
 800d42e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d432:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d001      	beq.n	800d442 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d43e:	2301      	movs	r3, #1
 800d440:	e00b      	b.n	800d45a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d442:	887b      	ldrh	r3, [r7, #2]
 800d444:	461a      	mov	r2, r3
 800d446:	6879      	ldr	r1, [r7, #4]
 800d448:	4806      	ldr	r0, [pc, #24]	; (800d464 <CDC_Transmit_FS+0x48>)
 800d44a:	f7fe fa6d 	bl	800b928 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d44e:	4805      	ldr	r0, [pc, #20]	; (800d464 <CDC_Transmit_FS+0x48>)
 800d450:	f7fe faaa 	bl	800b9a8 <USBD_CDC_TransmitPacket>
 800d454:	4603      	mov	r3, r0
 800d456:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d458:	7bfb      	ldrb	r3, [r7, #15]
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	3710      	adds	r7, #16
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}
 800d462:	bf00      	nop
 800d464:	20003d3c 	.word	0x20003d3c

0800d468 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d468:	b480      	push	{r7}
 800d46a:	b087      	sub	sp, #28
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	60f8      	str	r0, [r7, #12]
 800d470:	60b9      	str	r1, [r7, #8]
 800d472:	4613      	mov	r3, r2
 800d474:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d476:	2300      	movs	r3, #0
 800d478:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d47a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d47e:	4618      	mov	r0, r3
 800d480:	371c      	adds	r7, #28
 800d482:	46bd      	mov	sp, r7
 800d484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d488:	4770      	bx	lr
	...

0800d48c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d48c:	b480      	push	{r7}
 800d48e:	b083      	sub	sp, #12
 800d490:	af00      	add	r7, sp, #0
 800d492:	4603      	mov	r3, r0
 800d494:	6039      	str	r1, [r7, #0]
 800d496:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	2212      	movs	r2, #18
 800d49c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800d49e:	4b03      	ldr	r3, [pc, #12]	; (800d4ac <USBD_CDC_DeviceDescriptor+0x20>)
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	370c      	adds	r7, #12
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr
 800d4ac:	200000e0 	.word	0x200000e0

0800d4b0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b083      	sub	sp, #12
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	6039      	str	r1, [r7, #0]
 800d4ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	2204      	movs	r2, #4
 800d4c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d4c2:	4b03      	ldr	r3, [pc, #12]	; (800d4d0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	370c      	adds	r7, #12
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ce:	4770      	bx	lr
 800d4d0:	200000f4 	.word	0x200000f4

0800d4d4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b082      	sub	sp, #8
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	4603      	mov	r3, r0
 800d4dc:	6039      	str	r1, [r7, #0]
 800d4de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d4e0:	79fb      	ldrb	r3, [r7, #7]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d105      	bne.n	800d4f2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d4e6:	683a      	ldr	r2, [r7, #0]
 800d4e8:	4907      	ldr	r1, [pc, #28]	; (800d508 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d4ea:	4808      	ldr	r0, [pc, #32]	; (800d50c <USBD_CDC_ProductStrDescriptor+0x38>)
 800d4ec:	f7ff fc82 	bl	800cdf4 <USBD_GetString>
 800d4f0:	e004      	b.n	800d4fc <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d4f2:	683a      	ldr	r2, [r7, #0]
 800d4f4:	4904      	ldr	r1, [pc, #16]	; (800d508 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d4f6:	4805      	ldr	r0, [pc, #20]	; (800d50c <USBD_CDC_ProductStrDescriptor+0x38>)
 800d4f8:	f7ff fc7c 	bl	800cdf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d4fc:	4b02      	ldr	r3, [pc, #8]	; (800d508 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3708      	adds	r7, #8
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}
 800d506:	bf00      	nop
 800d508:	2000501c 	.word	0x2000501c
 800d50c:	08012788 	.word	0x08012788

0800d510 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b082      	sub	sp, #8
 800d514:	af00      	add	r7, sp, #0
 800d516:	4603      	mov	r3, r0
 800d518:	6039      	str	r1, [r7, #0]
 800d51a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d51c:	683a      	ldr	r2, [r7, #0]
 800d51e:	4904      	ldr	r1, [pc, #16]	; (800d530 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800d520:	4804      	ldr	r0, [pc, #16]	; (800d534 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800d522:	f7ff fc67 	bl	800cdf4 <USBD_GetString>
  return USBD_StrDesc;
 800d526:	4b02      	ldr	r3, [pc, #8]	; (800d530 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800d528:	4618      	mov	r0, r3
 800d52a:	3708      	adds	r7, #8
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}
 800d530:	2000501c 	.word	0x2000501c
 800d534:	080127a0 	.word	0x080127a0

0800d538 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b082      	sub	sp, #8
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	4603      	mov	r3, r0
 800d540:	6039      	str	r1, [r7, #0]
 800d542:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	221a      	movs	r2, #26
 800d548:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d54a:	f000 f843 	bl	800d5d4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800d54e:	4b02      	ldr	r3, [pc, #8]	; (800d558 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800d550:	4618      	mov	r0, r3
 800d552:	3708      	adds	r7, #8
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}
 800d558:	200000f8 	.word	0x200000f8

0800d55c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b082      	sub	sp, #8
 800d560:	af00      	add	r7, sp, #0
 800d562:	4603      	mov	r3, r0
 800d564:	6039      	str	r1, [r7, #0]
 800d566:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d568:	79fb      	ldrb	r3, [r7, #7]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d105      	bne.n	800d57a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d56e:	683a      	ldr	r2, [r7, #0]
 800d570:	4907      	ldr	r1, [pc, #28]	; (800d590 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d572:	4808      	ldr	r0, [pc, #32]	; (800d594 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d574:	f7ff fc3e 	bl	800cdf4 <USBD_GetString>
 800d578:	e004      	b.n	800d584 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d57a:	683a      	ldr	r2, [r7, #0]
 800d57c:	4904      	ldr	r1, [pc, #16]	; (800d590 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d57e:	4805      	ldr	r0, [pc, #20]	; (800d594 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d580:	f7ff fc38 	bl	800cdf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d584:	4b02      	ldr	r3, [pc, #8]	; (800d590 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800d586:	4618      	mov	r0, r3
 800d588:	3708      	adds	r7, #8
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
 800d58e:	bf00      	nop
 800d590:	2000501c 	.word	0x2000501c
 800d594:	080127b4 	.word	0x080127b4

0800d598 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b082      	sub	sp, #8
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	4603      	mov	r3, r0
 800d5a0:	6039      	str	r1, [r7, #0]
 800d5a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d5a4:	79fb      	ldrb	r3, [r7, #7]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d105      	bne.n	800d5b6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d5aa:	683a      	ldr	r2, [r7, #0]
 800d5ac:	4907      	ldr	r1, [pc, #28]	; (800d5cc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d5ae:	4808      	ldr	r0, [pc, #32]	; (800d5d0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d5b0:	f7ff fc20 	bl	800cdf4 <USBD_GetString>
 800d5b4:	e004      	b.n	800d5c0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d5b6:	683a      	ldr	r2, [r7, #0]
 800d5b8:	4904      	ldr	r1, [pc, #16]	; (800d5cc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d5ba:	4805      	ldr	r0, [pc, #20]	; (800d5d0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d5bc:	f7ff fc1a 	bl	800cdf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d5c0:	4b02      	ldr	r3, [pc, #8]	; (800d5cc <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3708      	adds	r7, #8
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}
 800d5ca:	bf00      	nop
 800d5cc:	2000501c 	.word	0x2000501c
 800d5d0:	080127c0 	.word	0x080127c0

0800d5d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d5da:	4b0f      	ldr	r3, [pc, #60]	; (800d618 <Get_SerialNum+0x44>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d5e0:	4b0e      	ldr	r3, [pc, #56]	; (800d61c <Get_SerialNum+0x48>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d5e6:	4b0e      	ldr	r3, [pc, #56]	; (800d620 <Get_SerialNum+0x4c>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d5ec:	68fa      	ldr	r2, [r7, #12]
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	4413      	add	r3, r2
 800d5f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d009      	beq.n	800d60e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d5fa:	2208      	movs	r2, #8
 800d5fc:	4909      	ldr	r1, [pc, #36]	; (800d624 <Get_SerialNum+0x50>)
 800d5fe:	68f8      	ldr	r0, [r7, #12]
 800d600:	f000 f814 	bl	800d62c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d604:	2204      	movs	r2, #4
 800d606:	4908      	ldr	r1, [pc, #32]	; (800d628 <Get_SerialNum+0x54>)
 800d608:	68b8      	ldr	r0, [r7, #8]
 800d60a:	f000 f80f 	bl	800d62c <IntToUnicode>
  }
}
 800d60e:	bf00      	nop
 800d610:	3710      	adds	r7, #16
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop
 800d618:	1fff7590 	.word	0x1fff7590
 800d61c:	1fff7594 	.word	0x1fff7594
 800d620:	1fff7598 	.word	0x1fff7598
 800d624:	200000fa 	.word	0x200000fa
 800d628:	2000010a 	.word	0x2000010a

0800d62c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d62c:	b480      	push	{r7}
 800d62e:	b087      	sub	sp, #28
 800d630:	af00      	add	r7, sp, #0
 800d632:	60f8      	str	r0, [r7, #12]
 800d634:	60b9      	str	r1, [r7, #8]
 800d636:	4613      	mov	r3, r2
 800d638:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d63a:	2300      	movs	r3, #0
 800d63c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d63e:	2300      	movs	r3, #0
 800d640:	75fb      	strb	r3, [r7, #23]
 800d642:	e027      	b.n	800d694 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	0f1b      	lsrs	r3, r3, #28
 800d648:	2b09      	cmp	r3, #9
 800d64a:	d80b      	bhi.n	800d664 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	0f1b      	lsrs	r3, r3, #28
 800d650:	b2da      	uxtb	r2, r3
 800d652:	7dfb      	ldrb	r3, [r7, #23]
 800d654:	005b      	lsls	r3, r3, #1
 800d656:	4619      	mov	r1, r3
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	440b      	add	r3, r1
 800d65c:	3230      	adds	r2, #48	; 0x30
 800d65e:	b2d2      	uxtb	r2, r2
 800d660:	701a      	strb	r2, [r3, #0]
 800d662:	e00a      	b.n	800d67a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	0f1b      	lsrs	r3, r3, #28
 800d668:	b2da      	uxtb	r2, r3
 800d66a:	7dfb      	ldrb	r3, [r7, #23]
 800d66c:	005b      	lsls	r3, r3, #1
 800d66e:	4619      	mov	r1, r3
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	440b      	add	r3, r1
 800d674:	3237      	adds	r2, #55	; 0x37
 800d676:	b2d2      	uxtb	r2, r2
 800d678:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	011b      	lsls	r3, r3, #4
 800d67e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d680:	7dfb      	ldrb	r3, [r7, #23]
 800d682:	005b      	lsls	r3, r3, #1
 800d684:	3301      	adds	r3, #1
 800d686:	68ba      	ldr	r2, [r7, #8]
 800d688:	4413      	add	r3, r2
 800d68a:	2200      	movs	r2, #0
 800d68c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d68e:	7dfb      	ldrb	r3, [r7, #23]
 800d690:	3301      	adds	r3, #1
 800d692:	75fb      	strb	r3, [r7, #23]
 800d694:	7dfa      	ldrb	r2, [r7, #23]
 800d696:	79fb      	ldrb	r3, [r7, #7]
 800d698:	429a      	cmp	r2, r3
 800d69a:	d3d3      	bcc.n	800d644 <IntToUnicode+0x18>
  }
}
 800d69c:	bf00      	nop
 800d69e:	bf00      	nop
 800d6a0:	371c      	adds	r7, #28
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a8:	4770      	bx	lr

0800d6aa <LL_AHB2_GRP1_EnableClock>:
{
 800d6aa:	b480      	push	{r7}
 800d6ac:	b085      	sub	sp, #20
 800d6ae:	af00      	add	r7, sp, #0
 800d6b0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800d6b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d6b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d6b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	4313      	orrs	r3, r2
 800d6c0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800d6c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d6c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	4013      	ands	r3, r2
 800d6cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
}
 800d6d0:	bf00      	nop
 800d6d2:	3714      	adds	r7, #20
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6da:	4770      	bx	lr

0800d6dc <LL_APB1_GRP1_EnableClock>:
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b085      	sub	sp, #20
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800d6e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d6e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d6ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	4313      	orrs	r3, r2
 800d6f2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800d6f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d6f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	4013      	ands	r3, r2
 800d6fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d700:	68fb      	ldr	r3, [r7, #12]
}
 800d702:	bf00      	nop
 800d704:	3714      	adds	r7, #20
 800d706:	46bd      	mov	sp, r7
 800d708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70c:	4770      	bx	lr
	...

0800d710 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b09c      	sub	sp, #112	; 0x70
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d718:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d71c:	2200      	movs	r2, #0
 800d71e:	601a      	str	r2, [r3, #0]
 800d720:	605a      	str	r2, [r3, #4]
 800d722:	609a      	str	r2, [r3, #8]
 800d724:	60da      	str	r2, [r3, #12]
 800d726:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d728:	f107 030c 	add.w	r3, r7, #12
 800d72c:	2250      	movs	r2, #80	; 0x50
 800d72e:	2100      	movs	r1, #0
 800d730:	4618      	mov	r0, r3
 800d732:	f000 fb53 	bl	800dddc <memset>
  if(pcdHandle->Instance==USB)
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	4a23      	ldr	r2, [pc, #140]	; (800d7c8 <HAL_PCD_MspInit+0xb8>)
 800d73c:	4293      	cmp	r3, r2
 800d73e:	d13e      	bne.n	800d7be <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d740:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d744:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800d746:	2318      	movs	r3, #24
 800d748:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800d74a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d74e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800d750:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d754:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800d756:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800d75a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800d75c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d760:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800d762:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d766:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d768:	f107 030c 	add.w	r3, r7, #12
 800d76c:	4618      	mov	r0, r3
 800d76e:	f7fa fc47 	bl	8008000 <HAL_RCCEx_PeriphCLKConfig>
 800d772:	4603      	mov	r3, r0
 800d774:	2b00      	cmp	r3, #0
 800d776:	d001      	beq.n	800d77c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800d778:	f7f6 ff06 	bl	8004588 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d77c:	2001      	movs	r0, #1
 800d77e:	f7ff ff94 	bl	800d6aa <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d782:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d786:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d788:	2302      	movs	r3, #2
 800d78a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d78c:	2300      	movs	r3, #0
 800d78e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d790:	2300      	movs	r3, #0
 800d792:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800d794:	230a      	movs	r3, #10
 800d796:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d798:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d79c:	4619      	mov	r1, r3
 800d79e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d7a2:	f7f7 fa57 	bl	8004c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d7a6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800d7aa:	f7ff ff97 	bl	800d6dc <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	2100      	movs	r1, #0
 800d7b2:	2014      	movs	r0, #20
 800d7b4:	f7f7 fa19 	bl	8004bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800d7b8:	2014      	movs	r0, #20
 800d7ba:	f7f7 fa30 	bl	8004c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d7be:	bf00      	nop
 800d7c0:	3770      	adds	r7, #112	; 0x70
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}
 800d7c6:	bf00      	nop
 800d7c8:	40006800 	.word	0x40006800

0800d7cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b082      	sub	sp, #8
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	4610      	mov	r0, r2
 800d7e4:	f7fe fa09 	bl	800bbfa <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800d7e8:	bf00      	nop
 800d7ea:	3708      	adds	r7, #8
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}

0800d7f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b082      	sub	sp, #8
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	460b      	mov	r3, r1
 800d7fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800d802:	78fa      	ldrb	r2, [r7, #3]
 800d804:	6879      	ldr	r1, [r7, #4]
 800d806:	4613      	mov	r3, r2
 800d808:	009b      	lsls	r3, r3, #2
 800d80a:	4413      	add	r3, r2
 800d80c:	00db      	lsls	r3, r3, #3
 800d80e:	440b      	add	r3, r1
 800d810:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d814:	681a      	ldr	r2, [r3, #0]
 800d816:	78fb      	ldrb	r3, [r7, #3]
 800d818:	4619      	mov	r1, r3
 800d81a:	f7fe fa43 	bl	800bca4 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800d81e:	bf00      	nop
 800d820:	3708      	adds	r7, #8
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}

0800d826 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d826:	b580      	push	{r7, lr}
 800d828:	b082      	sub	sp, #8
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	6078      	str	r0, [r7, #4]
 800d82e:	460b      	mov	r3, r1
 800d830:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800d838:	78fa      	ldrb	r2, [r7, #3]
 800d83a:	6879      	ldr	r1, [r7, #4]
 800d83c:	4613      	mov	r3, r2
 800d83e:	009b      	lsls	r3, r3, #2
 800d840:	4413      	add	r3, r2
 800d842:	00db      	lsls	r3, r3, #3
 800d844:	440b      	add	r3, r1
 800d846:	333c      	adds	r3, #60	; 0x3c
 800d848:	681a      	ldr	r2, [r3, #0]
 800d84a:	78fb      	ldrb	r3, [r7, #3]
 800d84c:	4619      	mov	r1, r3
 800d84e:	f7fe fadc 	bl	800be0a <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800d852:	bf00      	nop
 800d854:	3708      	adds	r7, #8
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}

0800d85a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d85a:	b580      	push	{r7, lr}
 800d85c:	b082      	sub	sp, #8
 800d85e:	af00      	add	r7, sp, #0
 800d860:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d868:	4618      	mov	r0, r3
 800d86a:	f7fe fc16 	bl	800c09a <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800d86e:	bf00      	nop
 800d870:	3708      	adds	r7, #8
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}

0800d876 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d876:	b580      	push	{r7, lr}
 800d878:	b084      	sub	sp, #16
 800d87a:	af00      	add	r7, sp, #0
 800d87c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d87e:	2301      	movs	r3, #1
 800d880:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	689b      	ldr	r3, [r3, #8]
 800d886:	2b02      	cmp	r3, #2
 800d888:	d001      	beq.n	800d88e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d88a:	f7f6 fe7d 	bl	8004588 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d894:	7bfa      	ldrb	r2, [r7, #15]
 800d896:	4611      	mov	r1, r2
 800d898:	4618      	mov	r0, r3
 800d89a:	f7fe fbba 	bl	800c012 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f7fe fb62 	bl	800bf6e <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800d8aa:	bf00      	nop
 800d8ac:	3710      	adds	r7, #16
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	bd80      	pop	{r7, pc}
	...

0800d8b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b082      	sub	sp, #8
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f7fe fbb5 	bl	800c032 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	699b      	ldr	r3, [r3, #24]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d005      	beq.n	800d8dc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d8d0:	4b04      	ldr	r3, [pc, #16]	; (800d8e4 <HAL_PCD_SuspendCallback+0x30>)
 800d8d2:	691b      	ldr	r3, [r3, #16]
 800d8d4:	4a03      	ldr	r2, [pc, #12]	; (800d8e4 <HAL_PCD_SuspendCallback+0x30>)
 800d8d6:	f043 0306 	orr.w	r3, r3, #6
 800d8da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800d8dc:	bf00      	nop
 800d8de:	3708      	adds	r7, #8
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}
 800d8e4:	e000ed00 	.word	0xe000ed00

0800d8e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b082      	sub	sp, #8
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	699b      	ldr	r3, [r3, #24]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d007      	beq.n	800d908 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d8f8:	4b08      	ldr	r3, [pc, #32]	; (800d91c <HAL_PCD_ResumeCallback+0x34>)
 800d8fa:	691b      	ldr	r3, [r3, #16]
 800d8fc:	4a07      	ldr	r2, [pc, #28]	; (800d91c <HAL_PCD_ResumeCallback+0x34>)
 800d8fe:	f023 0306 	bic.w	r3, r3, #6
 800d902:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d904:	f000 f9fc 	bl	800dd00 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d90e:	4618      	mov	r0, r3
 800d910:	f7fe fbab 	bl	800c06a <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800d914:	bf00      	nop
 800d916:	3708      	adds	r7, #8
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}
 800d91c:	e000ed00 	.word	0xe000ed00

0800d920 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b082      	sub	sp, #8
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800d928:	4a2c      	ldr	r2, [pc, #176]	; (800d9dc <USBD_LL_Init+0xbc>)
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	4a2a      	ldr	r2, [pc, #168]	; (800d9dc <USBD_LL_Init+0xbc>)
 800d934:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800d938:	f7f9 f85e 	bl	80069f8 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800d93c:	4b27      	ldr	r3, [pc, #156]	; (800d9dc <USBD_LL_Init+0xbc>)
 800d93e:	4a28      	ldr	r2, [pc, #160]	; (800d9e0 <USBD_LL_Init+0xc0>)
 800d940:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d942:	4b26      	ldr	r3, [pc, #152]	; (800d9dc <USBD_LL_Init+0xbc>)
 800d944:	2208      	movs	r2, #8
 800d946:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d948:	4b24      	ldr	r3, [pc, #144]	; (800d9dc <USBD_LL_Init+0xbc>)
 800d94a:	2202      	movs	r2, #2
 800d94c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d94e:	4b23      	ldr	r3, [pc, #140]	; (800d9dc <USBD_LL_Init+0xbc>)
 800d950:	2202      	movs	r2, #2
 800d952:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d954:	4b21      	ldr	r3, [pc, #132]	; (800d9dc <USBD_LL_Init+0xbc>)
 800d956:	2200      	movs	r2, #0
 800d958:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d95a:	4b20      	ldr	r3, [pc, #128]	; (800d9dc <USBD_LL_Init+0xbc>)
 800d95c:	2200      	movs	r2, #0
 800d95e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d960:	4b1e      	ldr	r3, [pc, #120]	; (800d9dc <USBD_LL_Init+0xbc>)
 800d962:	2200      	movs	r2, #0
 800d964:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d966:	4b1d      	ldr	r3, [pc, #116]	; (800d9dc <USBD_LL_Init+0xbc>)
 800d968:	2200      	movs	r2, #0
 800d96a:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d96c:	481b      	ldr	r0, [pc, #108]	; (800d9dc <USBD_LL_Init+0xbc>)
 800d96e:	f7f7 fae1 	bl	8004f34 <HAL_PCD_Init>
 800d972:	4603      	mov	r3, r0
 800d974:	2b00      	cmp	r3, #0
 800d976:	d001      	beq.n	800d97c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800d978:	f7f6 fe06 	bl	8004588 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d982:	2318      	movs	r3, #24
 800d984:	2200      	movs	r2, #0
 800d986:	2100      	movs	r1, #0
 800d988:	f7f8 ffaa 	bl	80068e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d992:	2358      	movs	r3, #88	; 0x58
 800d994:	2200      	movs	r2, #0
 800d996:	2180      	movs	r1, #128	; 0x80
 800d998:	f7f8 ffa2 	bl	80068e0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d9a2:	23c0      	movs	r3, #192	; 0xc0
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	2181      	movs	r1, #129	; 0x81
 800d9a8:	f7f8 ff9a 	bl	80068e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d9b2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	2101      	movs	r1, #1
 800d9ba:	f7f8 ff91 	bl	80068e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d9c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	2182      	movs	r1, #130	; 0x82
 800d9cc:	f7f8 ff88 	bl	80068e0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d9d0:	2300      	movs	r3, #0
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3708      	adds	r7, #8
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}
 800d9da:	bf00      	nop
 800d9dc:	2000521c 	.word	0x2000521c
 800d9e0:	40006800 	.word	0x40006800

0800d9e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b084      	sub	sp, #16
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f7f7 fb73 	bl	80050e6 <HAL_PCD_Start>
 800da00:	4603      	mov	r3, r0
 800da02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da04:	7bfb      	ldrb	r3, [r7, #15]
 800da06:	4618      	mov	r0, r3
 800da08:	f000 f980 	bl	800dd0c <USBD_Get_USB_Status>
 800da0c:	4603      	mov	r3, r0
 800da0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da10:	7bbb      	ldrb	r3, [r7, #14]
}
 800da12:	4618      	mov	r0, r3
 800da14:	3710      	adds	r7, #16
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}

0800da1a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800da1a:	b580      	push	{r7, lr}
 800da1c:	b084      	sub	sp, #16
 800da1e:	af00      	add	r7, sp, #0
 800da20:	6078      	str	r0, [r7, #4]
 800da22:	4608      	mov	r0, r1
 800da24:	4611      	mov	r1, r2
 800da26:	461a      	mov	r2, r3
 800da28:	4603      	mov	r3, r0
 800da2a:	70fb      	strb	r3, [r7, #3]
 800da2c:	460b      	mov	r3, r1
 800da2e:	70bb      	strb	r3, [r7, #2]
 800da30:	4613      	mov	r3, r2
 800da32:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da34:	2300      	movs	r3, #0
 800da36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da38:	2300      	movs	r3, #0
 800da3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800da42:	78bb      	ldrb	r3, [r7, #2]
 800da44:	883a      	ldrh	r2, [r7, #0]
 800da46:	78f9      	ldrb	r1, [r7, #3]
 800da48:	f7f7 fcbb 	bl	80053c2 <HAL_PCD_EP_Open>
 800da4c:	4603      	mov	r3, r0
 800da4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da50:	7bfb      	ldrb	r3, [r7, #15]
 800da52:	4618      	mov	r0, r3
 800da54:	f000 f95a 	bl	800dd0c <USBD_Get_USB_Status>
 800da58:	4603      	mov	r3, r0
 800da5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3710      	adds	r7, #16
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}

0800da66 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da66:	b580      	push	{r7, lr}
 800da68:	b084      	sub	sp, #16
 800da6a:	af00      	add	r7, sp, #0
 800da6c:	6078      	str	r0, [r7, #4]
 800da6e:	460b      	mov	r3, r1
 800da70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da72:	2300      	movs	r3, #0
 800da74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da76:	2300      	movs	r3, #0
 800da78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800da80:	78fa      	ldrb	r2, [r7, #3]
 800da82:	4611      	mov	r1, r2
 800da84:	4618      	mov	r0, r3
 800da86:	f7f7 fcf9 	bl	800547c <HAL_PCD_EP_Close>
 800da8a:	4603      	mov	r3, r0
 800da8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da8e:	7bfb      	ldrb	r3, [r7, #15]
 800da90:	4618      	mov	r0, r3
 800da92:	f000 f93b 	bl	800dd0c <USBD_Get_USB_Status>
 800da96:	4603      	mov	r3, r0
 800da98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	3710      	adds	r7, #16
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}

0800daa4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b084      	sub	sp, #16
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	460b      	mov	r3, r1
 800daae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dab0:	2300      	movs	r3, #0
 800dab2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dab4:	2300      	movs	r3, #0
 800dab6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dabe:	78fa      	ldrb	r2, [r7, #3]
 800dac0:	4611      	mov	r1, r2
 800dac2:	4618      	mov	r0, r3
 800dac4:	f7f7 fda2 	bl	800560c <HAL_PCD_EP_SetStall>
 800dac8:	4603      	mov	r3, r0
 800daca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dacc:	7bfb      	ldrb	r3, [r7, #15]
 800dace:	4618      	mov	r0, r3
 800dad0:	f000 f91c 	bl	800dd0c <USBD_Get_USB_Status>
 800dad4:	4603      	mov	r3, r0
 800dad6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dad8:	7bbb      	ldrb	r3, [r7, #14]
}
 800dada:	4618      	mov	r0, r3
 800dadc:	3710      	adds	r7, #16
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}

0800dae2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dae2:	b580      	push	{r7, lr}
 800dae4:	b084      	sub	sp, #16
 800dae6:	af00      	add	r7, sp, #0
 800dae8:	6078      	str	r0, [r7, #4]
 800daea:	460b      	mov	r3, r1
 800daec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800daee:	2300      	movs	r3, #0
 800daf0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800daf2:	2300      	movs	r3, #0
 800daf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dafc:	78fa      	ldrb	r2, [r7, #3]
 800dafe:	4611      	mov	r1, r2
 800db00:	4618      	mov	r0, r3
 800db02:	f7f7 fdd5 	bl	80056b0 <HAL_PCD_EP_ClrStall>
 800db06:	4603      	mov	r3, r0
 800db08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db0a:	7bfb      	ldrb	r3, [r7, #15]
 800db0c:	4618      	mov	r0, r3
 800db0e:	f000 f8fd 	bl	800dd0c <USBD_Get_USB_Status>
 800db12:	4603      	mov	r3, r0
 800db14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db16:	7bbb      	ldrb	r3, [r7, #14]
}
 800db18:	4618      	mov	r0, r3
 800db1a:	3710      	adds	r7, #16
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}

0800db20 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db20:	b480      	push	{r7}
 800db22:	b085      	sub	sp, #20
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
 800db28:	460b      	mov	r3, r1
 800db2a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800db32:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800db34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	da0c      	bge.n	800db56 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800db3c:	78fb      	ldrb	r3, [r7, #3]
 800db3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db42:	68f9      	ldr	r1, [r7, #12]
 800db44:	1c5a      	adds	r2, r3, #1
 800db46:	4613      	mov	r3, r2
 800db48:	009b      	lsls	r3, r3, #2
 800db4a:	4413      	add	r3, r2
 800db4c:	00db      	lsls	r3, r3, #3
 800db4e:	440b      	add	r3, r1
 800db50:	3302      	adds	r3, #2
 800db52:	781b      	ldrb	r3, [r3, #0]
 800db54:	e00b      	b.n	800db6e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800db56:	78fb      	ldrb	r3, [r7, #3]
 800db58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db5c:	68f9      	ldr	r1, [r7, #12]
 800db5e:	4613      	mov	r3, r2
 800db60:	009b      	lsls	r3, r3, #2
 800db62:	4413      	add	r3, r2
 800db64:	00db      	lsls	r3, r3, #3
 800db66:	440b      	add	r3, r1
 800db68:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800db6c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800db6e:	4618      	mov	r0, r3
 800db70:	3714      	adds	r7, #20
 800db72:	46bd      	mov	sp, r7
 800db74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db78:	4770      	bx	lr

0800db7a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800db7a:	b580      	push	{r7, lr}
 800db7c:	b084      	sub	sp, #16
 800db7e:	af00      	add	r7, sp, #0
 800db80:	6078      	str	r0, [r7, #4]
 800db82:	460b      	mov	r3, r1
 800db84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db86:	2300      	movs	r3, #0
 800db88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db8a:	2300      	movs	r3, #0
 800db8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800db94:	78fa      	ldrb	r2, [r7, #3]
 800db96:	4611      	mov	r1, r2
 800db98:	4618      	mov	r0, r3
 800db9a:	f7f7 fbed 	bl	8005378 <HAL_PCD_SetAddress>
 800db9e:	4603      	mov	r3, r0
 800dba0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dba2:	7bfb      	ldrb	r3, [r7, #15]
 800dba4:	4618      	mov	r0, r3
 800dba6:	f000 f8b1 	bl	800dd0c <USBD_Get_USB_Status>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbae:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3710      	adds	r7, #16
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b086      	sub	sp, #24
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	60f8      	str	r0, [r7, #12]
 800dbc0:	607a      	str	r2, [r7, #4]
 800dbc2:	603b      	str	r3, [r7, #0]
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dbd6:	7af9      	ldrb	r1, [r7, #11]
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	687a      	ldr	r2, [r7, #4]
 800dbdc:	f7f7 fcdf 	bl	800559e <HAL_PCD_EP_Transmit>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbe4:	7dfb      	ldrb	r3, [r7, #23]
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f000 f890 	bl	800dd0c <USBD_Get_USB_Status>
 800dbec:	4603      	mov	r3, r0
 800dbee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dbf0:	7dbb      	ldrb	r3, [r7, #22]
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3718      	adds	r7, #24
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}

0800dbfa <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dbfa:	b580      	push	{r7, lr}
 800dbfc:	b086      	sub	sp, #24
 800dbfe:	af00      	add	r7, sp, #0
 800dc00:	60f8      	str	r0, [r7, #12]
 800dc02:	607a      	str	r2, [r7, #4]
 800dc04:	603b      	str	r3, [r7, #0]
 800dc06:	460b      	mov	r3, r1
 800dc08:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dc18:	7af9      	ldrb	r1, [r7, #11]
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	687a      	ldr	r2, [r7, #4]
 800dc1e:	f7f7 fc75 	bl	800550c <HAL_PCD_EP_Receive>
 800dc22:	4603      	mov	r3, r0
 800dc24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc26:	7dfb      	ldrb	r3, [r7, #23]
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f000 f86f 	bl	800dd0c <USBD_Get_USB_Status>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dc32:	7dbb      	ldrb	r3, [r7, #22]
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3718      	adds	r7, #24
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}

0800dc3c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b082      	sub	sp, #8
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
 800dc44:	460b      	mov	r3, r1
 800dc46:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dc4e:	78fa      	ldrb	r2, [r7, #3]
 800dc50:	4611      	mov	r1, r2
 800dc52:	4618      	mov	r0, r3
 800dc54:	f7f7 fc8b 	bl	800556e <HAL_PCD_EP_GetRxCount>
 800dc58:	4603      	mov	r3, r0
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3708      	adds	r7, #8
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}
	...

0800dc64 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b082      	sub	sp, #8
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
 800dc6c:	460b      	mov	r3, r1
 800dc6e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800dc70:	78fb      	ldrb	r3, [r7, #3]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d002      	beq.n	800dc7c <HAL_PCDEx_LPM_Callback+0x18>
 800dc76:	2b01      	cmp	r3, #1
 800dc78:	d013      	beq.n	800dca2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800dc7a:	e023      	b.n	800dcc4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	699b      	ldr	r3, [r3, #24]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d007      	beq.n	800dc94 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800dc84:	f000 f83c 	bl	800dd00 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dc88:	4b10      	ldr	r3, [pc, #64]	; (800dccc <HAL_PCDEx_LPM_Callback+0x68>)
 800dc8a:	691b      	ldr	r3, [r3, #16]
 800dc8c:	4a0f      	ldr	r2, [pc, #60]	; (800dccc <HAL_PCDEx_LPM_Callback+0x68>)
 800dc8e:	f023 0306 	bic.w	r3, r3, #6
 800dc92:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f7fe f9e5 	bl	800c06a <USBD_LL_Resume>
    break;
 800dca0:	e010      	b.n	800dcc4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f7fe f9c2 	bl	800c032 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	699b      	ldr	r3, [r3, #24]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d005      	beq.n	800dcc2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dcb6:	4b05      	ldr	r3, [pc, #20]	; (800dccc <HAL_PCDEx_LPM_Callback+0x68>)
 800dcb8:	691b      	ldr	r3, [r3, #16]
 800dcba:	4a04      	ldr	r2, [pc, #16]	; (800dccc <HAL_PCDEx_LPM_Callback+0x68>)
 800dcbc:	f043 0306 	orr.w	r3, r3, #6
 800dcc0:	6113      	str	r3, [r2, #16]
    break;
 800dcc2:	bf00      	nop
}
 800dcc4:	bf00      	nop
 800dcc6:	3708      	adds	r7, #8
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}
 800dccc:	e000ed00 	.word	0xe000ed00

0800dcd0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b083      	sub	sp, #12
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dcd8:	4b03      	ldr	r3, [pc, #12]	; (800dce8 <USBD_static_malloc+0x18>)
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	370c      	adds	r7, #12
 800dcde:	46bd      	mov	sp, r7
 800dce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce4:	4770      	bx	lr
 800dce6:	bf00      	nop
 800dce8:	20005510 	.word	0x20005510

0800dcec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dcec:	b480      	push	{r7}
 800dcee:	b083      	sub	sp, #12
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800dcf4:	bf00      	nop
 800dcf6:	370c      	adds	r7, #12
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr

0800dd00 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800dd04:	f7f6 fb64 	bl	80043d0 <SystemClock_Config>
}
 800dd08:	bf00      	nop
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dd0c:	b480      	push	{r7}
 800dd0e:	b085      	sub	sp, #20
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	4603      	mov	r3, r0
 800dd14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd16:	2300      	movs	r3, #0
 800dd18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dd1a:	79fb      	ldrb	r3, [r7, #7]
 800dd1c:	2b03      	cmp	r3, #3
 800dd1e:	d817      	bhi.n	800dd50 <USBD_Get_USB_Status+0x44>
 800dd20:	a201      	add	r2, pc, #4	; (adr r2, 800dd28 <USBD_Get_USB_Status+0x1c>)
 800dd22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd26:	bf00      	nop
 800dd28:	0800dd39 	.word	0x0800dd39
 800dd2c:	0800dd3f 	.word	0x0800dd3f
 800dd30:	0800dd45 	.word	0x0800dd45
 800dd34:	0800dd4b 	.word	0x0800dd4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dd38:	2300      	movs	r3, #0
 800dd3a:	73fb      	strb	r3, [r7, #15]
    break;
 800dd3c:	e00b      	b.n	800dd56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dd3e:	2303      	movs	r3, #3
 800dd40:	73fb      	strb	r3, [r7, #15]
    break;
 800dd42:	e008      	b.n	800dd56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dd44:	2301      	movs	r3, #1
 800dd46:	73fb      	strb	r3, [r7, #15]
    break;
 800dd48:	e005      	b.n	800dd56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dd4a:	2303      	movs	r3, #3
 800dd4c:	73fb      	strb	r3, [r7, #15]
    break;
 800dd4e:	e002      	b.n	800dd56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dd50:	2303      	movs	r3, #3
 800dd52:	73fb      	strb	r3, [r7, #15]
    break;
 800dd54:	bf00      	nop
  }
  return usb_status;
 800dd56:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3714      	adds	r7, #20
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd62:	4770      	bx	lr

0800dd64 <atoi>:
 800dd64:	220a      	movs	r2, #10
 800dd66:	2100      	movs	r1, #0
 800dd68:	f001 bd8e 	b.w	800f888 <strtol>

0800dd6c <__errno>:
 800dd6c:	4b01      	ldr	r3, [pc, #4]	; (800dd74 <__errno+0x8>)
 800dd6e:	6818      	ldr	r0, [r3, #0]
 800dd70:	4770      	bx	lr
 800dd72:	bf00      	nop
 800dd74:	20000114 	.word	0x20000114

0800dd78 <__libc_init_array>:
 800dd78:	b570      	push	{r4, r5, r6, lr}
 800dd7a:	4d0d      	ldr	r5, [pc, #52]	; (800ddb0 <__libc_init_array+0x38>)
 800dd7c:	4c0d      	ldr	r4, [pc, #52]	; (800ddb4 <__libc_init_array+0x3c>)
 800dd7e:	1b64      	subs	r4, r4, r5
 800dd80:	10a4      	asrs	r4, r4, #2
 800dd82:	2600      	movs	r6, #0
 800dd84:	42a6      	cmp	r6, r4
 800dd86:	d109      	bne.n	800dd9c <__libc_init_array+0x24>
 800dd88:	4d0b      	ldr	r5, [pc, #44]	; (800ddb8 <__libc_init_array+0x40>)
 800dd8a:	4c0c      	ldr	r4, [pc, #48]	; (800ddbc <__libc_init_array+0x44>)
 800dd8c:	f004 fc9c 	bl	80126c8 <_init>
 800dd90:	1b64      	subs	r4, r4, r5
 800dd92:	10a4      	asrs	r4, r4, #2
 800dd94:	2600      	movs	r6, #0
 800dd96:	42a6      	cmp	r6, r4
 800dd98:	d105      	bne.n	800dda6 <__libc_init_array+0x2e>
 800dd9a:	bd70      	pop	{r4, r5, r6, pc}
 800dd9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800dda0:	4798      	blx	r3
 800dda2:	3601      	adds	r6, #1
 800dda4:	e7ee      	b.n	800dd84 <__libc_init_array+0xc>
 800dda6:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddaa:	4798      	blx	r3
 800ddac:	3601      	adds	r6, #1
 800ddae:	e7f2      	b.n	800dd96 <__libc_init_array+0x1e>
 800ddb0:	08012d34 	.word	0x08012d34
 800ddb4:	08012d34 	.word	0x08012d34
 800ddb8:	08012d34 	.word	0x08012d34
 800ddbc:	08012d38 	.word	0x08012d38

0800ddc0 <memcpy>:
 800ddc0:	440a      	add	r2, r1
 800ddc2:	4291      	cmp	r1, r2
 800ddc4:	f100 33ff 	add.w	r3, r0, #4294967295
 800ddc8:	d100      	bne.n	800ddcc <memcpy+0xc>
 800ddca:	4770      	bx	lr
 800ddcc:	b510      	push	{r4, lr}
 800ddce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ddd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ddd6:	4291      	cmp	r1, r2
 800ddd8:	d1f9      	bne.n	800ddce <memcpy+0xe>
 800ddda:	bd10      	pop	{r4, pc}

0800dddc <memset>:
 800dddc:	4402      	add	r2, r0
 800ddde:	4603      	mov	r3, r0
 800dde0:	4293      	cmp	r3, r2
 800dde2:	d100      	bne.n	800dde6 <memset+0xa>
 800dde4:	4770      	bx	lr
 800dde6:	f803 1b01 	strb.w	r1, [r3], #1
 800ddea:	e7f9      	b.n	800dde0 <memset+0x4>

0800ddec <__cvt>:
 800ddec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ddf0:	ec55 4b10 	vmov	r4, r5, d0
 800ddf4:	2d00      	cmp	r5, #0
 800ddf6:	460e      	mov	r6, r1
 800ddf8:	4619      	mov	r1, r3
 800ddfa:	462b      	mov	r3, r5
 800ddfc:	bfbb      	ittet	lt
 800ddfe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800de02:	461d      	movlt	r5, r3
 800de04:	2300      	movge	r3, #0
 800de06:	232d      	movlt	r3, #45	; 0x2d
 800de08:	700b      	strb	r3, [r1, #0]
 800de0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de0c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800de10:	4691      	mov	r9, r2
 800de12:	f023 0820 	bic.w	r8, r3, #32
 800de16:	bfbc      	itt	lt
 800de18:	4622      	movlt	r2, r4
 800de1a:	4614      	movlt	r4, r2
 800de1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800de20:	d005      	beq.n	800de2e <__cvt+0x42>
 800de22:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800de26:	d100      	bne.n	800de2a <__cvt+0x3e>
 800de28:	3601      	adds	r6, #1
 800de2a:	2102      	movs	r1, #2
 800de2c:	e000      	b.n	800de30 <__cvt+0x44>
 800de2e:	2103      	movs	r1, #3
 800de30:	ab03      	add	r3, sp, #12
 800de32:	9301      	str	r3, [sp, #4]
 800de34:	ab02      	add	r3, sp, #8
 800de36:	9300      	str	r3, [sp, #0]
 800de38:	ec45 4b10 	vmov	d0, r4, r5
 800de3c:	4653      	mov	r3, sl
 800de3e:	4632      	mov	r2, r6
 800de40:	f001 fdba 	bl	800f9b8 <_dtoa_r>
 800de44:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800de48:	4607      	mov	r7, r0
 800de4a:	d102      	bne.n	800de52 <__cvt+0x66>
 800de4c:	f019 0f01 	tst.w	r9, #1
 800de50:	d022      	beq.n	800de98 <__cvt+0xac>
 800de52:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800de56:	eb07 0906 	add.w	r9, r7, r6
 800de5a:	d110      	bne.n	800de7e <__cvt+0x92>
 800de5c:	783b      	ldrb	r3, [r7, #0]
 800de5e:	2b30      	cmp	r3, #48	; 0x30
 800de60:	d10a      	bne.n	800de78 <__cvt+0x8c>
 800de62:	2200      	movs	r2, #0
 800de64:	2300      	movs	r3, #0
 800de66:	4620      	mov	r0, r4
 800de68:	4629      	mov	r1, r5
 800de6a:	f7f2 fe05 	bl	8000a78 <__aeabi_dcmpeq>
 800de6e:	b918      	cbnz	r0, 800de78 <__cvt+0x8c>
 800de70:	f1c6 0601 	rsb	r6, r6, #1
 800de74:	f8ca 6000 	str.w	r6, [sl]
 800de78:	f8da 3000 	ldr.w	r3, [sl]
 800de7c:	4499      	add	r9, r3
 800de7e:	2200      	movs	r2, #0
 800de80:	2300      	movs	r3, #0
 800de82:	4620      	mov	r0, r4
 800de84:	4629      	mov	r1, r5
 800de86:	f7f2 fdf7 	bl	8000a78 <__aeabi_dcmpeq>
 800de8a:	b108      	cbz	r0, 800de90 <__cvt+0xa4>
 800de8c:	f8cd 900c 	str.w	r9, [sp, #12]
 800de90:	2230      	movs	r2, #48	; 0x30
 800de92:	9b03      	ldr	r3, [sp, #12]
 800de94:	454b      	cmp	r3, r9
 800de96:	d307      	bcc.n	800dea8 <__cvt+0xbc>
 800de98:	9b03      	ldr	r3, [sp, #12]
 800de9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de9c:	1bdb      	subs	r3, r3, r7
 800de9e:	4638      	mov	r0, r7
 800dea0:	6013      	str	r3, [r2, #0]
 800dea2:	b004      	add	sp, #16
 800dea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dea8:	1c59      	adds	r1, r3, #1
 800deaa:	9103      	str	r1, [sp, #12]
 800deac:	701a      	strb	r2, [r3, #0]
 800deae:	e7f0      	b.n	800de92 <__cvt+0xa6>

0800deb0 <__exponent>:
 800deb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800deb2:	4603      	mov	r3, r0
 800deb4:	2900      	cmp	r1, #0
 800deb6:	bfb8      	it	lt
 800deb8:	4249      	neglt	r1, r1
 800deba:	f803 2b02 	strb.w	r2, [r3], #2
 800debe:	bfb4      	ite	lt
 800dec0:	222d      	movlt	r2, #45	; 0x2d
 800dec2:	222b      	movge	r2, #43	; 0x2b
 800dec4:	2909      	cmp	r1, #9
 800dec6:	7042      	strb	r2, [r0, #1]
 800dec8:	dd2a      	ble.n	800df20 <__exponent+0x70>
 800deca:	f10d 0407 	add.w	r4, sp, #7
 800dece:	46a4      	mov	ip, r4
 800ded0:	270a      	movs	r7, #10
 800ded2:	46a6      	mov	lr, r4
 800ded4:	460a      	mov	r2, r1
 800ded6:	fb91 f6f7 	sdiv	r6, r1, r7
 800deda:	fb07 1516 	mls	r5, r7, r6, r1
 800dede:	3530      	adds	r5, #48	; 0x30
 800dee0:	2a63      	cmp	r2, #99	; 0x63
 800dee2:	f104 34ff 	add.w	r4, r4, #4294967295
 800dee6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800deea:	4631      	mov	r1, r6
 800deec:	dcf1      	bgt.n	800ded2 <__exponent+0x22>
 800deee:	3130      	adds	r1, #48	; 0x30
 800def0:	f1ae 0502 	sub.w	r5, lr, #2
 800def4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800def8:	1c44      	adds	r4, r0, #1
 800defa:	4629      	mov	r1, r5
 800defc:	4561      	cmp	r1, ip
 800defe:	d30a      	bcc.n	800df16 <__exponent+0x66>
 800df00:	f10d 0209 	add.w	r2, sp, #9
 800df04:	eba2 020e 	sub.w	r2, r2, lr
 800df08:	4565      	cmp	r5, ip
 800df0a:	bf88      	it	hi
 800df0c:	2200      	movhi	r2, #0
 800df0e:	4413      	add	r3, r2
 800df10:	1a18      	subs	r0, r3, r0
 800df12:	b003      	add	sp, #12
 800df14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df1a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800df1e:	e7ed      	b.n	800defc <__exponent+0x4c>
 800df20:	2330      	movs	r3, #48	; 0x30
 800df22:	3130      	adds	r1, #48	; 0x30
 800df24:	7083      	strb	r3, [r0, #2]
 800df26:	70c1      	strb	r1, [r0, #3]
 800df28:	1d03      	adds	r3, r0, #4
 800df2a:	e7f1      	b.n	800df10 <__exponent+0x60>

0800df2c <_printf_float>:
 800df2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df30:	ed2d 8b02 	vpush	{d8}
 800df34:	b08d      	sub	sp, #52	; 0x34
 800df36:	460c      	mov	r4, r1
 800df38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800df3c:	4616      	mov	r6, r2
 800df3e:	461f      	mov	r7, r3
 800df40:	4605      	mov	r5, r0
 800df42:	f002 fe97 	bl	8010c74 <_localeconv_r>
 800df46:	f8d0 a000 	ldr.w	sl, [r0]
 800df4a:	4650      	mov	r0, sl
 800df4c:	f7f2 f918 	bl	8000180 <strlen>
 800df50:	2300      	movs	r3, #0
 800df52:	930a      	str	r3, [sp, #40]	; 0x28
 800df54:	6823      	ldr	r3, [r4, #0]
 800df56:	9305      	str	r3, [sp, #20]
 800df58:	f8d8 3000 	ldr.w	r3, [r8]
 800df5c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800df60:	3307      	adds	r3, #7
 800df62:	f023 0307 	bic.w	r3, r3, #7
 800df66:	f103 0208 	add.w	r2, r3, #8
 800df6a:	f8c8 2000 	str.w	r2, [r8]
 800df6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df72:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800df76:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800df7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800df7e:	9307      	str	r3, [sp, #28]
 800df80:	f8cd 8018 	str.w	r8, [sp, #24]
 800df84:	ee08 0a10 	vmov	s16, r0
 800df88:	4b9f      	ldr	r3, [pc, #636]	; (800e208 <_printf_float+0x2dc>)
 800df8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800df8e:	f04f 32ff 	mov.w	r2, #4294967295
 800df92:	f7f2 fda3 	bl	8000adc <__aeabi_dcmpun>
 800df96:	bb88      	cbnz	r0, 800dffc <_printf_float+0xd0>
 800df98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800df9c:	4b9a      	ldr	r3, [pc, #616]	; (800e208 <_printf_float+0x2dc>)
 800df9e:	f04f 32ff 	mov.w	r2, #4294967295
 800dfa2:	f7f2 fd7d 	bl	8000aa0 <__aeabi_dcmple>
 800dfa6:	bb48      	cbnz	r0, 800dffc <_printf_float+0xd0>
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	2300      	movs	r3, #0
 800dfac:	4640      	mov	r0, r8
 800dfae:	4649      	mov	r1, r9
 800dfb0:	f7f2 fd6c 	bl	8000a8c <__aeabi_dcmplt>
 800dfb4:	b110      	cbz	r0, 800dfbc <_printf_float+0x90>
 800dfb6:	232d      	movs	r3, #45	; 0x2d
 800dfb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dfbc:	4b93      	ldr	r3, [pc, #588]	; (800e20c <_printf_float+0x2e0>)
 800dfbe:	4894      	ldr	r0, [pc, #592]	; (800e210 <_printf_float+0x2e4>)
 800dfc0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800dfc4:	bf94      	ite	ls
 800dfc6:	4698      	movls	r8, r3
 800dfc8:	4680      	movhi	r8, r0
 800dfca:	2303      	movs	r3, #3
 800dfcc:	6123      	str	r3, [r4, #16]
 800dfce:	9b05      	ldr	r3, [sp, #20]
 800dfd0:	f023 0204 	bic.w	r2, r3, #4
 800dfd4:	6022      	str	r2, [r4, #0]
 800dfd6:	f04f 0900 	mov.w	r9, #0
 800dfda:	9700      	str	r7, [sp, #0]
 800dfdc:	4633      	mov	r3, r6
 800dfde:	aa0b      	add	r2, sp, #44	; 0x2c
 800dfe0:	4621      	mov	r1, r4
 800dfe2:	4628      	mov	r0, r5
 800dfe4:	f000 f9d8 	bl	800e398 <_printf_common>
 800dfe8:	3001      	adds	r0, #1
 800dfea:	f040 8090 	bne.w	800e10e <_printf_float+0x1e2>
 800dfee:	f04f 30ff 	mov.w	r0, #4294967295
 800dff2:	b00d      	add	sp, #52	; 0x34
 800dff4:	ecbd 8b02 	vpop	{d8}
 800dff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dffc:	4642      	mov	r2, r8
 800dffe:	464b      	mov	r3, r9
 800e000:	4640      	mov	r0, r8
 800e002:	4649      	mov	r1, r9
 800e004:	f7f2 fd6a 	bl	8000adc <__aeabi_dcmpun>
 800e008:	b140      	cbz	r0, 800e01c <_printf_float+0xf0>
 800e00a:	464b      	mov	r3, r9
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	bfbc      	itt	lt
 800e010:	232d      	movlt	r3, #45	; 0x2d
 800e012:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e016:	487f      	ldr	r0, [pc, #508]	; (800e214 <_printf_float+0x2e8>)
 800e018:	4b7f      	ldr	r3, [pc, #508]	; (800e218 <_printf_float+0x2ec>)
 800e01a:	e7d1      	b.n	800dfc0 <_printf_float+0x94>
 800e01c:	6863      	ldr	r3, [r4, #4]
 800e01e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e022:	9206      	str	r2, [sp, #24]
 800e024:	1c5a      	adds	r2, r3, #1
 800e026:	d13f      	bne.n	800e0a8 <_printf_float+0x17c>
 800e028:	2306      	movs	r3, #6
 800e02a:	6063      	str	r3, [r4, #4]
 800e02c:	9b05      	ldr	r3, [sp, #20]
 800e02e:	6861      	ldr	r1, [r4, #4]
 800e030:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e034:	2300      	movs	r3, #0
 800e036:	9303      	str	r3, [sp, #12]
 800e038:	ab0a      	add	r3, sp, #40	; 0x28
 800e03a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e03e:	ab09      	add	r3, sp, #36	; 0x24
 800e040:	ec49 8b10 	vmov	d0, r8, r9
 800e044:	9300      	str	r3, [sp, #0]
 800e046:	6022      	str	r2, [r4, #0]
 800e048:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e04c:	4628      	mov	r0, r5
 800e04e:	f7ff fecd 	bl	800ddec <__cvt>
 800e052:	9b06      	ldr	r3, [sp, #24]
 800e054:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e056:	2b47      	cmp	r3, #71	; 0x47
 800e058:	4680      	mov	r8, r0
 800e05a:	d108      	bne.n	800e06e <_printf_float+0x142>
 800e05c:	1cc8      	adds	r0, r1, #3
 800e05e:	db02      	blt.n	800e066 <_printf_float+0x13a>
 800e060:	6863      	ldr	r3, [r4, #4]
 800e062:	4299      	cmp	r1, r3
 800e064:	dd41      	ble.n	800e0ea <_printf_float+0x1be>
 800e066:	f1ab 0b02 	sub.w	fp, fp, #2
 800e06a:	fa5f fb8b 	uxtb.w	fp, fp
 800e06e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e072:	d820      	bhi.n	800e0b6 <_printf_float+0x18a>
 800e074:	3901      	subs	r1, #1
 800e076:	465a      	mov	r2, fp
 800e078:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e07c:	9109      	str	r1, [sp, #36]	; 0x24
 800e07e:	f7ff ff17 	bl	800deb0 <__exponent>
 800e082:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e084:	1813      	adds	r3, r2, r0
 800e086:	2a01      	cmp	r2, #1
 800e088:	4681      	mov	r9, r0
 800e08a:	6123      	str	r3, [r4, #16]
 800e08c:	dc02      	bgt.n	800e094 <_printf_float+0x168>
 800e08e:	6822      	ldr	r2, [r4, #0]
 800e090:	07d2      	lsls	r2, r2, #31
 800e092:	d501      	bpl.n	800e098 <_printf_float+0x16c>
 800e094:	3301      	adds	r3, #1
 800e096:	6123      	str	r3, [r4, #16]
 800e098:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d09c      	beq.n	800dfda <_printf_float+0xae>
 800e0a0:	232d      	movs	r3, #45	; 0x2d
 800e0a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0a6:	e798      	b.n	800dfda <_printf_float+0xae>
 800e0a8:	9a06      	ldr	r2, [sp, #24]
 800e0aa:	2a47      	cmp	r2, #71	; 0x47
 800e0ac:	d1be      	bne.n	800e02c <_printf_float+0x100>
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d1bc      	bne.n	800e02c <_printf_float+0x100>
 800e0b2:	2301      	movs	r3, #1
 800e0b4:	e7b9      	b.n	800e02a <_printf_float+0xfe>
 800e0b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e0ba:	d118      	bne.n	800e0ee <_printf_float+0x1c2>
 800e0bc:	2900      	cmp	r1, #0
 800e0be:	6863      	ldr	r3, [r4, #4]
 800e0c0:	dd0b      	ble.n	800e0da <_printf_float+0x1ae>
 800e0c2:	6121      	str	r1, [r4, #16]
 800e0c4:	b913      	cbnz	r3, 800e0cc <_printf_float+0x1a0>
 800e0c6:	6822      	ldr	r2, [r4, #0]
 800e0c8:	07d0      	lsls	r0, r2, #31
 800e0ca:	d502      	bpl.n	800e0d2 <_printf_float+0x1a6>
 800e0cc:	3301      	adds	r3, #1
 800e0ce:	440b      	add	r3, r1
 800e0d0:	6123      	str	r3, [r4, #16]
 800e0d2:	65a1      	str	r1, [r4, #88]	; 0x58
 800e0d4:	f04f 0900 	mov.w	r9, #0
 800e0d8:	e7de      	b.n	800e098 <_printf_float+0x16c>
 800e0da:	b913      	cbnz	r3, 800e0e2 <_printf_float+0x1b6>
 800e0dc:	6822      	ldr	r2, [r4, #0]
 800e0de:	07d2      	lsls	r2, r2, #31
 800e0e0:	d501      	bpl.n	800e0e6 <_printf_float+0x1ba>
 800e0e2:	3302      	adds	r3, #2
 800e0e4:	e7f4      	b.n	800e0d0 <_printf_float+0x1a4>
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	e7f2      	b.n	800e0d0 <_printf_float+0x1a4>
 800e0ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e0ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0f0:	4299      	cmp	r1, r3
 800e0f2:	db05      	blt.n	800e100 <_printf_float+0x1d4>
 800e0f4:	6823      	ldr	r3, [r4, #0]
 800e0f6:	6121      	str	r1, [r4, #16]
 800e0f8:	07d8      	lsls	r0, r3, #31
 800e0fa:	d5ea      	bpl.n	800e0d2 <_printf_float+0x1a6>
 800e0fc:	1c4b      	adds	r3, r1, #1
 800e0fe:	e7e7      	b.n	800e0d0 <_printf_float+0x1a4>
 800e100:	2900      	cmp	r1, #0
 800e102:	bfd4      	ite	le
 800e104:	f1c1 0202 	rsble	r2, r1, #2
 800e108:	2201      	movgt	r2, #1
 800e10a:	4413      	add	r3, r2
 800e10c:	e7e0      	b.n	800e0d0 <_printf_float+0x1a4>
 800e10e:	6823      	ldr	r3, [r4, #0]
 800e110:	055a      	lsls	r2, r3, #21
 800e112:	d407      	bmi.n	800e124 <_printf_float+0x1f8>
 800e114:	6923      	ldr	r3, [r4, #16]
 800e116:	4642      	mov	r2, r8
 800e118:	4631      	mov	r1, r6
 800e11a:	4628      	mov	r0, r5
 800e11c:	47b8      	blx	r7
 800e11e:	3001      	adds	r0, #1
 800e120:	d12c      	bne.n	800e17c <_printf_float+0x250>
 800e122:	e764      	b.n	800dfee <_printf_float+0xc2>
 800e124:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e128:	f240 80e0 	bls.w	800e2ec <_printf_float+0x3c0>
 800e12c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e130:	2200      	movs	r2, #0
 800e132:	2300      	movs	r3, #0
 800e134:	f7f2 fca0 	bl	8000a78 <__aeabi_dcmpeq>
 800e138:	2800      	cmp	r0, #0
 800e13a:	d034      	beq.n	800e1a6 <_printf_float+0x27a>
 800e13c:	4a37      	ldr	r2, [pc, #220]	; (800e21c <_printf_float+0x2f0>)
 800e13e:	2301      	movs	r3, #1
 800e140:	4631      	mov	r1, r6
 800e142:	4628      	mov	r0, r5
 800e144:	47b8      	blx	r7
 800e146:	3001      	adds	r0, #1
 800e148:	f43f af51 	beq.w	800dfee <_printf_float+0xc2>
 800e14c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e150:	429a      	cmp	r2, r3
 800e152:	db02      	blt.n	800e15a <_printf_float+0x22e>
 800e154:	6823      	ldr	r3, [r4, #0]
 800e156:	07d8      	lsls	r0, r3, #31
 800e158:	d510      	bpl.n	800e17c <_printf_float+0x250>
 800e15a:	ee18 3a10 	vmov	r3, s16
 800e15e:	4652      	mov	r2, sl
 800e160:	4631      	mov	r1, r6
 800e162:	4628      	mov	r0, r5
 800e164:	47b8      	blx	r7
 800e166:	3001      	adds	r0, #1
 800e168:	f43f af41 	beq.w	800dfee <_printf_float+0xc2>
 800e16c:	f04f 0800 	mov.w	r8, #0
 800e170:	f104 091a 	add.w	r9, r4, #26
 800e174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e176:	3b01      	subs	r3, #1
 800e178:	4543      	cmp	r3, r8
 800e17a:	dc09      	bgt.n	800e190 <_printf_float+0x264>
 800e17c:	6823      	ldr	r3, [r4, #0]
 800e17e:	079b      	lsls	r3, r3, #30
 800e180:	f100 8105 	bmi.w	800e38e <_printf_float+0x462>
 800e184:	68e0      	ldr	r0, [r4, #12]
 800e186:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e188:	4298      	cmp	r0, r3
 800e18a:	bfb8      	it	lt
 800e18c:	4618      	movlt	r0, r3
 800e18e:	e730      	b.n	800dff2 <_printf_float+0xc6>
 800e190:	2301      	movs	r3, #1
 800e192:	464a      	mov	r2, r9
 800e194:	4631      	mov	r1, r6
 800e196:	4628      	mov	r0, r5
 800e198:	47b8      	blx	r7
 800e19a:	3001      	adds	r0, #1
 800e19c:	f43f af27 	beq.w	800dfee <_printf_float+0xc2>
 800e1a0:	f108 0801 	add.w	r8, r8, #1
 800e1a4:	e7e6      	b.n	800e174 <_printf_float+0x248>
 800e1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	dc39      	bgt.n	800e220 <_printf_float+0x2f4>
 800e1ac:	4a1b      	ldr	r2, [pc, #108]	; (800e21c <_printf_float+0x2f0>)
 800e1ae:	2301      	movs	r3, #1
 800e1b0:	4631      	mov	r1, r6
 800e1b2:	4628      	mov	r0, r5
 800e1b4:	47b8      	blx	r7
 800e1b6:	3001      	adds	r0, #1
 800e1b8:	f43f af19 	beq.w	800dfee <_printf_float+0xc2>
 800e1bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e1c0:	4313      	orrs	r3, r2
 800e1c2:	d102      	bne.n	800e1ca <_printf_float+0x29e>
 800e1c4:	6823      	ldr	r3, [r4, #0]
 800e1c6:	07d9      	lsls	r1, r3, #31
 800e1c8:	d5d8      	bpl.n	800e17c <_printf_float+0x250>
 800e1ca:	ee18 3a10 	vmov	r3, s16
 800e1ce:	4652      	mov	r2, sl
 800e1d0:	4631      	mov	r1, r6
 800e1d2:	4628      	mov	r0, r5
 800e1d4:	47b8      	blx	r7
 800e1d6:	3001      	adds	r0, #1
 800e1d8:	f43f af09 	beq.w	800dfee <_printf_float+0xc2>
 800e1dc:	f04f 0900 	mov.w	r9, #0
 800e1e0:	f104 0a1a 	add.w	sl, r4, #26
 800e1e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1e6:	425b      	negs	r3, r3
 800e1e8:	454b      	cmp	r3, r9
 800e1ea:	dc01      	bgt.n	800e1f0 <_printf_float+0x2c4>
 800e1ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1ee:	e792      	b.n	800e116 <_printf_float+0x1ea>
 800e1f0:	2301      	movs	r3, #1
 800e1f2:	4652      	mov	r2, sl
 800e1f4:	4631      	mov	r1, r6
 800e1f6:	4628      	mov	r0, r5
 800e1f8:	47b8      	blx	r7
 800e1fa:	3001      	adds	r0, #1
 800e1fc:	f43f aef7 	beq.w	800dfee <_printf_float+0xc2>
 800e200:	f109 0901 	add.w	r9, r9, #1
 800e204:	e7ee      	b.n	800e1e4 <_printf_float+0x2b8>
 800e206:	bf00      	nop
 800e208:	7fefffff 	.word	0x7fefffff
 800e20c:	08012890 	.word	0x08012890
 800e210:	08012894 	.word	0x08012894
 800e214:	0801289c 	.word	0x0801289c
 800e218:	08012898 	.word	0x08012898
 800e21c:	080128a0 	.word	0x080128a0
 800e220:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e222:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e224:	429a      	cmp	r2, r3
 800e226:	bfa8      	it	ge
 800e228:	461a      	movge	r2, r3
 800e22a:	2a00      	cmp	r2, #0
 800e22c:	4691      	mov	r9, r2
 800e22e:	dc37      	bgt.n	800e2a0 <_printf_float+0x374>
 800e230:	f04f 0b00 	mov.w	fp, #0
 800e234:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e238:	f104 021a 	add.w	r2, r4, #26
 800e23c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e23e:	9305      	str	r3, [sp, #20]
 800e240:	eba3 0309 	sub.w	r3, r3, r9
 800e244:	455b      	cmp	r3, fp
 800e246:	dc33      	bgt.n	800e2b0 <_printf_float+0x384>
 800e248:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e24c:	429a      	cmp	r2, r3
 800e24e:	db3b      	blt.n	800e2c8 <_printf_float+0x39c>
 800e250:	6823      	ldr	r3, [r4, #0]
 800e252:	07da      	lsls	r2, r3, #31
 800e254:	d438      	bmi.n	800e2c8 <_printf_float+0x39c>
 800e256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e258:	9a05      	ldr	r2, [sp, #20]
 800e25a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e25c:	1a9a      	subs	r2, r3, r2
 800e25e:	eba3 0901 	sub.w	r9, r3, r1
 800e262:	4591      	cmp	r9, r2
 800e264:	bfa8      	it	ge
 800e266:	4691      	movge	r9, r2
 800e268:	f1b9 0f00 	cmp.w	r9, #0
 800e26c:	dc35      	bgt.n	800e2da <_printf_float+0x3ae>
 800e26e:	f04f 0800 	mov.w	r8, #0
 800e272:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e276:	f104 0a1a 	add.w	sl, r4, #26
 800e27a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e27e:	1a9b      	subs	r3, r3, r2
 800e280:	eba3 0309 	sub.w	r3, r3, r9
 800e284:	4543      	cmp	r3, r8
 800e286:	f77f af79 	ble.w	800e17c <_printf_float+0x250>
 800e28a:	2301      	movs	r3, #1
 800e28c:	4652      	mov	r2, sl
 800e28e:	4631      	mov	r1, r6
 800e290:	4628      	mov	r0, r5
 800e292:	47b8      	blx	r7
 800e294:	3001      	adds	r0, #1
 800e296:	f43f aeaa 	beq.w	800dfee <_printf_float+0xc2>
 800e29a:	f108 0801 	add.w	r8, r8, #1
 800e29e:	e7ec      	b.n	800e27a <_printf_float+0x34e>
 800e2a0:	4613      	mov	r3, r2
 800e2a2:	4631      	mov	r1, r6
 800e2a4:	4642      	mov	r2, r8
 800e2a6:	4628      	mov	r0, r5
 800e2a8:	47b8      	blx	r7
 800e2aa:	3001      	adds	r0, #1
 800e2ac:	d1c0      	bne.n	800e230 <_printf_float+0x304>
 800e2ae:	e69e      	b.n	800dfee <_printf_float+0xc2>
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	4631      	mov	r1, r6
 800e2b4:	4628      	mov	r0, r5
 800e2b6:	9205      	str	r2, [sp, #20]
 800e2b8:	47b8      	blx	r7
 800e2ba:	3001      	adds	r0, #1
 800e2bc:	f43f ae97 	beq.w	800dfee <_printf_float+0xc2>
 800e2c0:	9a05      	ldr	r2, [sp, #20]
 800e2c2:	f10b 0b01 	add.w	fp, fp, #1
 800e2c6:	e7b9      	b.n	800e23c <_printf_float+0x310>
 800e2c8:	ee18 3a10 	vmov	r3, s16
 800e2cc:	4652      	mov	r2, sl
 800e2ce:	4631      	mov	r1, r6
 800e2d0:	4628      	mov	r0, r5
 800e2d2:	47b8      	blx	r7
 800e2d4:	3001      	adds	r0, #1
 800e2d6:	d1be      	bne.n	800e256 <_printf_float+0x32a>
 800e2d8:	e689      	b.n	800dfee <_printf_float+0xc2>
 800e2da:	9a05      	ldr	r2, [sp, #20]
 800e2dc:	464b      	mov	r3, r9
 800e2de:	4442      	add	r2, r8
 800e2e0:	4631      	mov	r1, r6
 800e2e2:	4628      	mov	r0, r5
 800e2e4:	47b8      	blx	r7
 800e2e6:	3001      	adds	r0, #1
 800e2e8:	d1c1      	bne.n	800e26e <_printf_float+0x342>
 800e2ea:	e680      	b.n	800dfee <_printf_float+0xc2>
 800e2ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e2ee:	2a01      	cmp	r2, #1
 800e2f0:	dc01      	bgt.n	800e2f6 <_printf_float+0x3ca>
 800e2f2:	07db      	lsls	r3, r3, #31
 800e2f4:	d538      	bpl.n	800e368 <_printf_float+0x43c>
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	4642      	mov	r2, r8
 800e2fa:	4631      	mov	r1, r6
 800e2fc:	4628      	mov	r0, r5
 800e2fe:	47b8      	blx	r7
 800e300:	3001      	adds	r0, #1
 800e302:	f43f ae74 	beq.w	800dfee <_printf_float+0xc2>
 800e306:	ee18 3a10 	vmov	r3, s16
 800e30a:	4652      	mov	r2, sl
 800e30c:	4631      	mov	r1, r6
 800e30e:	4628      	mov	r0, r5
 800e310:	47b8      	blx	r7
 800e312:	3001      	adds	r0, #1
 800e314:	f43f ae6b 	beq.w	800dfee <_printf_float+0xc2>
 800e318:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e31c:	2200      	movs	r2, #0
 800e31e:	2300      	movs	r3, #0
 800e320:	f7f2 fbaa 	bl	8000a78 <__aeabi_dcmpeq>
 800e324:	b9d8      	cbnz	r0, 800e35e <_printf_float+0x432>
 800e326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e328:	f108 0201 	add.w	r2, r8, #1
 800e32c:	3b01      	subs	r3, #1
 800e32e:	4631      	mov	r1, r6
 800e330:	4628      	mov	r0, r5
 800e332:	47b8      	blx	r7
 800e334:	3001      	adds	r0, #1
 800e336:	d10e      	bne.n	800e356 <_printf_float+0x42a>
 800e338:	e659      	b.n	800dfee <_printf_float+0xc2>
 800e33a:	2301      	movs	r3, #1
 800e33c:	4652      	mov	r2, sl
 800e33e:	4631      	mov	r1, r6
 800e340:	4628      	mov	r0, r5
 800e342:	47b8      	blx	r7
 800e344:	3001      	adds	r0, #1
 800e346:	f43f ae52 	beq.w	800dfee <_printf_float+0xc2>
 800e34a:	f108 0801 	add.w	r8, r8, #1
 800e34e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e350:	3b01      	subs	r3, #1
 800e352:	4543      	cmp	r3, r8
 800e354:	dcf1      	bgt.n	800e33a <_printf_float+0x40e>
 800e356:	464b      	mov	r3, r9
 800e358:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e35c:	e6dc      	b.n	800e118 <_printf_float+0x1ec>
 800e35e:	f04f 0800 	mov.w	r8, #0
 800e362:	f104 0a1a 	add.w	sl, r4, #26
 800e366:	e7f2      	b.n	800e34e <_printf_float+0x422>
 800e368:	2301      	movs	r3, #1
 800e36a:	4642      	mov	r2, r8
 800e36c:	e7df      	b.n	800e32e <_printf_float+0x402>
 800e36e:	2301      	movs	r3, #1
 800e370:	464a      	mov	r2, r9
 800e372:	4631      	mov	r1, r6
 800e374:	4628      	mov	r0, r5
 800e376:	47b8      	blx	r7
 800e378:	3001      	adds	r0, #1
 800e37a:	f43f ae38 	beq.w	800dfee <_printf_float+0xc2>
 800e37e:	f108 0801 	add.w	r8, r8, #1
 800e382:	68e3      	ldr	r3, [r4, #12]
 800e384:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e386:	1a5b      	subs	r3, r3, r1
 800e388:	4543      	cmp	r3, r8
 800e38a:	dcf0      	bgt.n	800e36e <_printf_float+0x442>
 800e38c:	e6fa      	b.n	800e184 <_printf_float+0x258>
 800e38e:	f04f 0800 	mov.w	r8, #0
 800e392:	f104 0919 	add.w	r9, r4, #25
 800e396:	e7f4      	b.n	800e382 <_printf_float+0x456>

0800e398 <_printf_common>:
 800e398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e39c:	4616      	mov	r6, r2
 800e39e:	4699      	mov	r9, r3
 800e3a0:	688a      	ldr	r2, [r1, #8]
 800e3a2:	690b      	ldr	r3, [r1, #16]
 800e3a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e3a8:	4293      	cmp	r3, r2
 800e3aa:	bfb8      	it	lt
 800e3ac:	4613      	movlt	r3, r2
 800e3ae:	6033      	str	r3, [r6, #0]
 800e3b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e3b4:	4607      	mov	r7, r0
 800e3b6:	460c      	mov	r4, r1
 800e3b8:	b10a      	cbz	r2, 800e3be <_printf_common+0x26>
 800e3ba:	3301      	adds	r3, #1
 800e3bc:	6033      	str	r3, [r6, #0]
 800e3be:	6823      	ldr	r3, [r4, #0]
 800e3c0:	0699      	lsls	r1, r3, #26
 800e3c2:	bf42      	ittt	mi
 800e3c4:	6833      	ldrmi	r3, [r6, #0]
 800e3c6:	3302      	addmi	r3, #2
 800e3c8:	6033      	strmi	r3, [r6, #0]
 800e3ca:	6825      	ldr	r5, [r4, #0]
 800e3cc:	f015 0506 	ands.w	r5, r5, #6
 800e3d0:	d106      	bne.n	800e3e0 <_printf_common+0x48>
 800e3d2:	f104 0a19 	add.w	sl, r4, #25
 800e3d6:	68e3      	ldr	r3, [r4, #12]
 800e3d8:	6832      	ldr	r2, [r6, #0]
 800e3da:	1a9b      	subs	r3, r3, r2
 800e3dc:	42ab      	cmp	r3, r5
 800e3de:	dc26      	bgt.n	800e42e <_printf_common+0x96>
 800e3e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e3e4:	1e13      	subs	r3, r2, #0
 800e3e6:	6822      	ldr	r2, [r4, #0]
 800e3e8:	bf18      	it	ne
 800e3ea:	2301      	movne	r3, #1
 800e3ec:	0692      	lsls	r2, r2, #26
 800e3ee:	d42b      	bmi.n	800e448 <_printf_common+0xb0>
 800e3f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e3f4:	4649      	mov	r1, r9
 800e3f6:	4638      	mov	r0, r7
 800e3f8:	47c0      	blx	r8
 800e3fa:	3001      	adds	r0, #1
 800e3fc:	d01e      	beq.n	800e43c <_printf_common+0xa4>
 800e3fe:	6823      	ldr	r3, [r4, #0]
 800e400:	68e5      	ldr	r5, [r4, #12]
 800e402:	6832      	ldr	r2, [r6, #0]
 800e404:	f003 0306 	and.w	r3, r3, #6
 800e408:	2b04      	cmp	r3, #4
 800e40a:	bf08      	it	eq
 800e40c:	1aad      	subeq	r5, r5, r2
 800e40e:	68a3      	ldr	r3, [r4, #8]
 800e410:	6922      	ldr	r2, [r4, #16]
 800e412:	bf0c      	ite	eq
 800e414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e418:	2500      	movne	r5, #0
 800e41a:	4293      	cmp	r3, r2
 800e41c:	bfc4      	itt	gt
 800e41e:	1a9b      	subgt	r3, r3, r2
 800e420:	18ed      	addgt	r5, r5, r3
 800e422:	2600      	movs	r6, #0
 800e424:	341a      	adds	r4, #26
 800e426:	42b5      	cmp	r5, r6
 800e428:	d11a      	bne.n	800e460 <_printf_common+0xc8>
 800e42a:	2000      	movs	r0, #0
 800e42c:	e008      	b.n	800e440 <_printf_common+0xa8>
 800e42e:	2301      	movs	r3, #1
 800e430:	4652      	mov	r2, sl
 800e432:	4649      	mov	r1, r9
 800e434:	4638      	mov	r0, r7
 800e436:	47c0      	blx	r8
 800e438:	3001      	adds	r0, #1
 800e43a:	d103      	bne.n	800e444 <_printf_common+0xac>
 800e43c:	f04f 30ff 	mov.w	r0, #4294967295
 800e440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e444:	3501      	adds	r5, #1
 800e446:	e7c6      	b.n	800e3d6 <_printf_common+0x3e>
 800e448:	18e1      	adds	r1, r4, r3
 800e44a:	1c5a      	adds	r2, r3, #1
 800e44c:	2030      	movs	r0, #48	; 0x30
 800e44e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e452:	4422      	add	r2, r4
 800e454:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e458:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e45c:	3302      	adds	r3, #2
 800e45e:	e7c7      	b.n	800e3f0 <_printf_common+0x58>
 800e460:	2301      	movs	r3, #1
 800e462:	4622      	mov	r2, r4
 800e464:	4649      	mov	r1, r9
 800e466:	4638      	mov	r0, r7
 800e468:	47c0      	blx	r8
 800e46a:	3001      	adds	r0, #1
 800e46c:	d0e6      	beq.n	800e43c <_printf_common+0xa4>
 800e46e:	3601      	adds	r6, #1
 800e470:	e7d9      	b.n	800e426 <_printf_common+0x8e>
	...

0800e474 <_printf_i>:
 800e474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e478:	7e0f      	ldrb	r7, [r1, #24]
 800e47a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e47c:	2f78      	cmp	r7, #120	; 0x78
 800e47e:	4691      	mov	r9, r2
 800e480:	4680      	mov	r8, r0
 800e482:	460c      	mov	r4, r1
 800e484:	469a      	mov	sl, r3
 800e486:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e48a:	d807      	bhi.n	800e49c <_printf_i+0x28>
 800e48c:	2f62      	cmp	r7, #98	; 0x62
 800e48e:	d80a      	bhi.n	800e4a6 <_printf_i+0x32>
 800e490:	2f00      	cmp	r7, #0
 800e492:	f000 80d8 	beq.w	800e646 <_printf_i+0x1d2>
 800e496:	2f58      	cmp	r7, #88	; 0x58
 800e498:	f000 80a3 	beq.w	800e5e2 <_printf_i+0x16e>
 800e49c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e4a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e4a4:	e03a      	b.n	800e51c <_printf_i+0xa8>
 800e4a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e4aa:	2b15      	cmp	r3, #21
 800e4ac:	d8f6      	bhi.n	800e49c <_printf_i+0x28>
 800e4ae:	a101      	add	r1, pc, #4	; (adr r1, 800e4b4 <_printf_i+0x40>)
 800e4b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e4b4:	0800e50d 	.word	0x0800e50d
 800e4b8:	0800e521 	.word	0x0800e521
 800e4bc:	0800e49d 	.word	0x0800e49d
 800e4c0:	0800e49d 	.word	0x0800e49d
 800e4c4:	0800e49d 	.word	0x0800e49d
 800e4c8:	0800e49d 	.word	0x0800e49d
 800e4cc:	0800e521 	.word	0x0800e521
 800e4d0:	0800e49d 	.word	0x0800e49d
 800e4d4:	0800e49d 	.word	0x0800e49d
 800e4d8:	0800e49d 	.word	0x0800e49d
 800e4dc:	0800e49d 	.word	0x0800e49d
 800e4e0:	0800e62d 	.word	0x0800e62d
 800e4e4:	0800e551 	.word	0x0800e551
 800e4e8:	0800e60f 	.word	0x0800e60f
 800e4ec:	0800e49d 	.word	0x0800e49d
 800e4f0:	0800e49d 	.word	0x0800e49d
 800e4f4:	0800e64f 	.word	0x0800e64f
 800e4f8:	0800e49d 	.word	0x0800e49d
 800e4fc:	0800e551 	.word	0x0800e551
 800e500:	0800e49d 	.word	0x0800e49d
 800e504:	0800e49d 	.word	0x0800e49d
 800e508:	0800e617 	.word	0x0800e617
 800e50c:	682b      	ldr	r3, [r5, #0]
 800e50e:	1d1a      	adds	r2, r3, #4
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	602a      	str	r2, [r5, #0]
 800e514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e518:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e51c:	2301      	movs	r3, #1
 800e51e:	e0a3      	b.n	800e668 <_printf_i+0x1f4>
 800e520:	6820      	ldr	r0, [r4, #0]
 800e522:	6829      	ldr	r1, [r5, #0]
 800e524:	0606      	lsls	r6, r0, #24
 800e526:	f101 0304 	add.w	r3, r1, #4
 800e52a:	d50a      	bpl.n	800e542 <_printf_i+0xce>
 800e52c:	680e      	ldr	r6, [r1, #0]
 800e52e:	602b      	str	r3, [r5, #0]
 800e530:	2e00      	cmp	r6, #0
 800e532:	da03      	bge.n	800e53c <_printf_i+0xc8>
 800e534:	232d      	movs	r3, #45	; 0x2d
 800e536:	4276      	negs	r6, r6
 800e538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e53c:	485e      	ldr	r0, [pc, #376]	; (800e6b8 <_printf_i+0x244>)
 800e53e:	230a      	movs	r3, #10
 800e540:	e019      	b.n	800e576 <_printf_i+0x102>
 800e542:	680e      	ldr	r6, [r1, #0]
 800e544:	602b      	str	r3, [r5, #0]
 800e546:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e54a:	bf18      	it	ne
 800e54c:	b236      	sxthne	r6, r6
 800e54e:	e7ef      	b.n	800e530 <_printf_i+0xbc>
 800e550:	682b      	ldr	r3, [r5, #0]
 800e552:	6820      	ldr	r0, [r4, #0]
 800e554:	1d19      	adds	r1, r3, #4
 800e556:	6029      	str	r1, [r5, #0]
 800e558:	0601      	lsls	r1, r0, #24
 800e55a:	d501      	bpl.n	800e560 <_printf_i+0xec>
 800e55c:	681e      	ldr	r6, [r3, #0]
 800e55e:	e002      	b.n	800e566 <_printf_i+0xf2>
 800e560:	0646      	lsls	r6, r0, #25
 800e562:	d5fb      	bpl.n	800e55c <_printf_i+0xe8>
 800e564:	881e      	ldrh	r6, [r3, #0]
 800e566:	4854      	ldr	r0, [pc, #336]	; (800e6b8 <_printf_i+0x244>)
 800e568:	2f6f      	cmp	r7, #111	; 0x6f
 800e56a:	bf0c      	ite	eq
 800e56c:	2308      	moveq	r3, #8
 800e56e:	230a      	movne	r3, #10
 800e570:	2100      	movs	r1, #0
 800e572:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e576:	6865      	ldr	r5, [r4, #4]
 800e578:	60a5      	str	r5, [r4, #8]
 800e57a:	2d00      	cmp	r5, #0
 800e57c:	bfa2      	ittt	ge
 800e57e:	6821      	ldrge	r1, [r4, #0]
 800e580:	f021 0104 	bicge.w	r1, r1, #4
 800e584:	6021      	strge	r1, [r4, #0]
 800e586:	b90e      	cbnz	r6, 800e58c <_printf_i+0x118>
 800e588:	2d00      	cmp	r5, #0
 800e58a:	d04d      	beq.n	800e628 <_printf_i+0x1b4>
 800e58c:	4615      	mov	r5, r2
 800e58e:	fbb6 f1f3 	udiv	r1, r6, r3
 800e592:	fb03 6711 	mls	r7, r3, r1, r6
 800e596:	5dc7      	ldrb	r7, [r0, r7]
 800e598:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e59c:	4637      	mov	r7, r6
 800e59e:	42bb      	cmp	r3, r7
 800e5a0:	460e      	mov	r6, r1
 800e5a2:	d9f4      	bls.n	800e58e <_printf_i+0x11a>
 800e5a4:	2b08      	cmp	r3, #8
 800e5a6:	d10b      	bne.n	800e5c0 <_printf_i+0x14c>
 800e5a8:	6823      	ldr	r3, [r4, #0]
 800e5aa:	07de      	lsls	r6, r3, #31
 800e5ac:	d508      	bpl.n	800e5c0 <_printf_i+0x14c>
 800e5ae:	6923      	ldr	r3, [r4, #16]
 800e5b0:	6861      	ldr	r1, [r4, #4]
 800e5b2:	4299      	cmp	r1, r3
 800e5b4:	bfde      	ittt	le
 800e5b6:	2330      	movle	r3, #48	; 0x30
 800e5b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e5bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e5c0:	1b52      	subs	r2, r2, r5
 800e5c2:	6122      	str	r2, [r4, #16]
 800e5c4:	f8cd a000 	str.w	sl, [sp]
 800e5c8:	464b      	mov	r3, r9
 800e5ca:	aa03      	add	r2, sp, #12
 800e5cc:	4621      	mov	r1, r4
 800e5ce:	4640      	mov	r0, r8
 800e5d0:	f7ff fee2 	bl	800e398 <_printf_common>
 800e5d4:	3001      	adds	r0, #1
 800e5d6:	d14c      	bne.n	800e672 <_printf_i+0x1fe>
 800e5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e5dc:	b004      	add	sp, #16
 800e5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5e2:	4835      	ldr	r0, [pc, #212]	; (800e6b8 <_printf_i+0x244>)
 800e5e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e5e8:	6829      	ldr	r1, [r5, #0]
 800e5ea:	6823      	ldr	r3, [r4, #0]
 800e5ec:	f851 6b04 	ldr.w	r6, [r1], #4
 800e5f0:	6029      	str	r1, [r5, #0]
 800e5f2:	061d      	lsls	r5, r3, #24
 800e5f4:	d514      	bpl.n	800e620 <_printf_i+0x1ac>
 800e5f6:	07df      	lsls	r7, r3, #31
 800e5f8:	bf44      	itt	mi
 800e5fa:	f043 0320 	orrmi.w	r3, r3, #32
 800e5fe:	6023      	strmi	r3, [r4, #0]
 800e600:	b91e      	cbnz	r6, 800e60a <_printf_i+0x196>
 800e602:	6823      	ldr	r3, [r4, #0]
 800e604:	f023 0320 	bic.w	r3, r3, #32
 800e608:	6023      	str	r3, [r4, #0]
 800e60a:	2310      	movs	r3, #16
 800e60c:	e7b0      	b.n	800e570 <_printf_i+0xfc>
 800e60e:	6823      	ldr	r3, [r4, #0]
 800e610:	f043 0320 	orr.w	r3, r3, #32
 800e614:	6023      	str	r3, [r4, #0]
 800e616:	2378      	movs	r3, #120	; 0x78
 800e618:	4828      	ldr	r0, [pc, #160]	; (800e6bc <_printf_i+0x248>)
 800e61a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e61e:	e7e3      	b.n	800e5e8 <_printf_i+0x174>
 800e620:	0659      	lsls	r1, r3, #25
 800e622:	bf48      	it	mi
 800e624:	b2b6      	uxthmi	r6, r6
 800e626:	e7e6      	b.n	800e5f6 <_printf_i+0x182>
 800e628:	4615      	mov	r5, r2
 800e62a:	e7bb      	b.n	800e5a4 <_printf_i+0x130>
 800e62c:	682b      	ldr	r3, [r5, #0]
 800e62e:	6826      	ldr	r6, [r4, #0]
 800e630:	6961      	ldr	r1, [r4, #20]
 800e632:	1d18      	adds	r0, r3, #4
 800e634:	6028      	str	r0, [r5, #0]
 800e636:	0635      	lsls	r5, r6, #24
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	d501      	bpl.n	800e640 <_printf_i+0x1cc>
 800e63c:	6019      	str	r1, [r3, #0]
 800e63e:	e002      	b.n	800e646 <_printf_i+0x1d2>
 800e640:	0670      	lsls	r0, r6, #25
 800e642:	d5fb      	bpl.n	800e63c <_printf_i+0x1c8>
 800e644:	8019      	strh	r1, [r3, #0]
 800e646:	2300      	movs	r3, #0
 800e648:	6123      	str	r3, [r4, #16]
 800e64a:	4615      	mov	r5, r2
 800e64c:	e7ba      	b.n	800e5c4 <_printf_i+0x150>
 800e64e:	682b      	ldr	r3, [r5, #0]
 800e650:	1d1a      	adds	r2, r3, #4
 800e652:	602a      	str	r2, [r5, #0]
 800e654:	681d      	ldr	r5, [r3, #0]
 800e656:	6862      	ldr	r2, [r4, #4]
 800e658:	2100      	movs	r1, #0
 800e65a:	4628      	mov	r0, r5
 800e65c:	f7f1 fd98 	bl	8000190 <memchr>
 800e660:	b108      	cbz	r0, 800e666 <_printf_i+0x1f2>
 800e662:	1b40      	subs	r0, r0, r5
 800e664:	6060      	str	r0, [r4, #4]
 800e666:	6863      	ldr	r3, [r4, #4]
 800e668:	6123      	str	r3, [r4, #16]
 800e66a:	2300      	movs	r3, #0
 800e66c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e670:	e7a8      	b.n	800e5c4 <_printf_i+0x150>
 800e672:	6923      	ldr	r3, [r4, #16]
 800e674:	462a      	mov	r2, r5
 800e676:	4649      	mov	r1, r9
 800e678:	4640      	mov	r0, r8
 800e67a:	47d0      	blx	sl
 800e67c:	3001      	adds	r0, #1
 800e67e:	d0ab      	beq.n	800e5d8 <_printf_i+0x164>
 800e680:	6823      	ldr	r3, [r4, #0]
 800e682:	079b      	lsls	r3, r3, #30
 800e684:	d413      	bmi.n	800e6ae <_printf_i+0x23a>
 800e686:	68e0      	ldr	r0, [r4, #12]
 800e688:	9b03      	ldr	r3, [sp, #12]
 800e68a:	4298      	cmp	r0, r3
 800e68c:	bfb8      	it	lt
 800e68e:	4618      	movlt	r0, r3
 800e690:	e7a4      	b.n	800e5dc <_printf_i+0x168>
 800e692:	2301      	movs	r3, #1
 800e694:	4632      	mov	r2, r6
 800e696:	4649      	mov	r1, r9
 800e698:	4640      	mov	r0, r8
 800e69a:	47d0      	blx	sl
 800e69c:	3001      	adds	r0, #1
 800e69e:	d09b      	beq.n	800e5d8 <_printf_i+0x164>
 800e6a0:	3501      	adds	r5, #1
 800e6a2:	68e3      	ldr	r3, [r4, #12]
 800e6a4:	9903      	ldr	r1, [sp, #12]
 800e6a6:	1a5b      	subs	r3, r3, r1
 800e6a8:	42ab      	cmp	r3, r5
 800e6aa:	dcf2      	bgt.n	800e692 <_printf_i+0x21e>
 800e6ac:	e7eb      	b.n	800e686 <_printf_i+0x212>
 800e6ae:	2500      	movs	r5, #0
 800e6b0:	f104 0619 	add.w	r6, r4, #25
 800e6b4:	e7f5      	b.n	800e6a2 <_printf_i+0x22e>
 800e6b6:	bf00      	nop
 800e6b8:	080128a2 	.word	0x080128a2
 800e6bc:	080128b3 	.word	0x080128b3

0800e6c0 <_scanf_float>:
 800e6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6c4:	b087      	sub	sp, #28
 800e6c6:	4617      	mov	r7, r2
 800e6c8:	9303      	str	r3, [sp, #12]
 800e6ca:	688b      	ldr	r3, [r1, #8]
 800e6cc:	1e5a      	subs	r2, r3, #1
 800e6ce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e6d2:	bf83      	ittte	hi
 800e6d4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e6d8:	195b      	addhi	r3, r3, r5
 800e6da:	9302      	strhi	r3, [sp, #8]
 800e6dc:	2300      	movls	r3, #0
 800e6de:	bf86      	itte	hi
 800e6e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e6e4:	608b      	strhi	r3, [r1, #8]
 800e6e6:	9302      	strls	r3, [sp, #8]
 800e6e8:	680b      	ldr	r3, [r1, #0]
 800e6ea:	468b      	mov	fp, r1
 800e6ec:	2500      	movs	r5, #0
 800e6ee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e6f2:	f84b 3b1c 	str.w	r3, [fp], #28
 800e6f6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e6fa:	4680      	mov	r8, r0
 800e6fc:	460c      	mov	r4, r1
 800e6fe:	465e      	mov	r6, fp
 800e700:	46aa      	mov	sl, r5
 800e702:	46a9      	mov	r9, r5
 800e704:	9501      	str	r5, [sp, #4]
 800e706:	68a2      	ldr	r2, [r4, #8]
 800e708:	b152      	cbz	r2, 800e720 <_scanf_float+0x60>
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	781b      	ldrb	r3, [r3, #0]
 800e70e:	2b4e      	cmp	r3, #78	; 0x4e
 800e710:	d864      	bhi.n	800e7dc <_scanf_float+0x11c>
 800e712:	2b40      	cmp	r3, #64	; 0x40
 800e714:	d83c      	bhi.n	800e790 <_scanf_float+0xd0>
 800e716:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e71a:	b2c8      	uxtb	r0, r1
 800e71c:	280e      	cmp	r0, #14
 800e71e:	d93a      	bls.n	800e796 <_scanf_float+0xd6>
 800e720:	f1b9 0f00 	cmp.w	r9, #0
 800e724:	d003      	beq.n	800e72e <_scanf_float+0x6e>
 800e726:	6823      	ldr	r3, [r4, #0]
 800e728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e72c:	6023      	str	r3, [r4, #0]
 800e72e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e732:	f1ba 0f01 	cmp.w	sl, #1
 800e736:	f200 8113 	bhi.w	800e960 <_scanf_float+0x2a0>
 800e73a:	455e      	cmp	r6, fp
 800e73c:	f200 8105 	bhi.w	800e94a <_scanf_float+0x28a>
 800e740:	2501      	movs	r5, #1
 800e742:	4628      	mov	r0, r5
 800e744:	b007      	add	sp, #28
 800e746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e74a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e74e:	2a0d      	cmp	r2, #13
 800e750:	d8e6      	bhi.n	800e720 <_scanf_float+0x60>
 800e752:	a101      	add	r1, pc, #4	; (adr r1, 800e758 <_scanf_float+0x98>)
 800e754:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e758:	0800e897 	.word	0x0800e897
 800e75c:	0800e721 	.word	0x0800e721
 800e760:	0800e721 	.word	0x0800e721
 800e764:	0800e721 	.word	0x0800e721
 800e768:	0800e8f7 	.word	0x0800e8f7
 800e76c:	0800e8cf 	.word	0x0800e8cf
 800e770:	0800e721 	.word	0x0800e721
 800e774:	0800e721 	.word	0x0800e721
 800e778:	0800e8a5 	.word	0x0800e8a5
 800e77c:	0800e721 	.word	0x0800e721
 800e780:	0800e721 	.word	0x0800e721
 800e784:	0800e721 	.word	0x0800e721
 800e788:	0800e721 	.word	0x0800e721
 800e78c:	0800e85d 	.word	0x0800e85d
 800e790:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800e794:	e7db      	b.n	800e74e <_scanf_float+0x8e>
 800e796:	290e      	cmp	r1, #14
 800e798:	d8c2      	bhi.n	800e720 <_scanf_float+0x60>
 800e79a:	a001      	add	r0, pc, #4	; (adr r0, 800e7a0 <_scanf_float+0xe0>)
 800e79c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e7a0:	0800e84f 	.word	0x0800e84f
 800e7a4:	0800e721 	.word	0x0800e721
 800e7a8:	0800e84f 	.word	0x0800e84f
 800e7ac:	0800e8e3 	.word	0x0800e8e3
 800e7b0:	0800e721 	.word	0x0800e721
 800e7b4:	0800e7fd 	.word	0x0800e7fd
 800e7b8:	0800e839 	.word	0x0800e839
 800e7bc:	0800e839 	.word	0x0800e839
 800e7c0:	0800e839 	.word	0x0800e839
 800e7c4:	0800e839 	.word	0x0800e839
 800e7c8:	0800e839 	.word	0x0800e839
 800e7cc:	0800e839 	.word	0x0800e839
 800e7d0:	0800e839 	.word	0x0800e839
 800e7d4:	0800e839 	.word	0x0800e839
 800e7d8:	0800e839 	.word	0x0800e839
 800e7dc:	2b6e      	cmp	r3, #110	; 0x6e
 800e7de:	d809      	bhi.n	800e7f4 <_scanf_float+0x134>
 800e7e0:	2b60      	cmp	r3, #96	; 0x60
 800e7e2:	d8b2      	bhi.n	800e74a <_scanf_float+0x8a>
 800e7e4:	2b54      	cmp	r3, #84	; 0x54
 800e7e6:	d077      	beq.n	800e8d8 <_scanf_float+0x218>
 800e7e8:	2b59      	cmp	r3, #89	; 0x59
 800e7ea:	d199      	bne.n	800e720 <_scanf_float+0x60>
 800e7ec:	2d07      	cmp	r5, #7
 800e7ee:	d197      	bne.n	800e720 <_scanf_float+0x60>
 800e7f0:	2508      	movs	r5, #8
 800e7f2:	e029      	b.n	800e848 <_scanf_float+0x188>
 800e7f4:	2b74      	cmp	r3, #116	; 0x74
 800e7f6:	d06f      	beq.n	800e8d8 <_scanf_float+0x218>
 800e7f8:	2b79      	cmp	r3, #121	; 0x79
 800e7fa:	e7f6      	b.n	800e7ea <_scanf_float+0x12a>
 800e7fc:	6821      	ldr	r1, [r4, #0]
 800e7fe:	05c8      	lsls	r0, r1, #23
 800e800:	d51a      	bpl.n	800e838 <_scanf_float+0x178>
 800e802:	9b02      	ldr	r3, [sp, #8]
 800e804:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e808:	6021      	str	r1, [r4, #0]
 800e80a:	f109 0901 	add.w	r9, r9, #1
 800e80e:	b11b      	cbz	r3, 800e818 <_scanf_float+0x158>
 800e810:	3b01      	subs	r3, #1
 800e812:	3201      	adds	r2, #1
 800e814:	9302      	str	r3, [sp, #8]
 800e816:	60a2      	str	r2, [r4, #8]
 800e818:	68a3      	ldr	r3, [r4, #8]
 800e81a:	3b01      	subs	r3, #1
 800e81c:	60a3      	str	r3, [r4, #8]
 800e81e:	6923      	ldr	r3, [r4, #16]
 800e820:	3301      	adds	r3, #1
 800e822:	6123      	str	r3, [r4, #16]
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	3b01      	subs	r3, #1
 800e828:	2b00      	cmp	r3, #0
 800e82a:	607b      	str	r3, [r7, #4]
 800e82c:	f340 8084 	ble.w	800e938 <_scanf_float+0x278>
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	3301      	adds	r3, #1
 800e834:	603b      	str	r3, [r7, #0]
 800e836:	e766      	b.n	800e706 <_scanf_float+0x46>
 800e838:	eb1a 0f05 	cmn.w	sl, r5
 800e83c:	f47f af70 	bne.w	800e720 <_scanf_float+0x60>
 800e840:	6822      	ldr	r2, [r4, #0]
 800e842:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e846:	6022      	str	r2, [r4, #0]
 800e848:	f806 3b01 	strb.w	r3, [r6], #1
 800e84c:	e7e4      	b.n	800e818 <_scanf_float+0x158>
 800e84e:	6822      	ldr	r2, [r4, #0]
 800e850:	0610      	lsls	r0, r2, #24
 800e852:	f57f af65 	bpl.w	800e720 <_scanf_float+0x60>
 800e856:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e85a:	e7f4      	b.n	800e846 <_scanf_float+0x186>
 800e85c:	f1ba 0f00 	cmp.w	sl, #0
 800e860:	d10e      	bne.n	800e880 <_scanf_float+0x1c0>
 800e862:	f1b9 0f00 	cmp.w	r9, #0
 800e866:	d10e      	bne.n	800e886 <_scanf_float+0x1c6>
 800e868:	6822      	ldr	r2, [r4, #0]
 800e86a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e86e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e872:	d108      	bne.n	800e886 <_scanf_float+0x1c6>
 800e874:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e878:	6022      	str	r2, [r4, #0]
 800e87a:	f04f 0a01 	mov.w	sl, #1
 800e87e:	e7e3      	b.n	800e848 <_scanf_float+0x188>
 800e880:	f1ba 0f02 	cmp.w	sl, #2
 800e884:	d055      	beq.n	800e932 <_scanf_float+0x272>
 800e886:	2d01      	cmp	r5, #1
 800e888:	d002      	beq.n	800e890 <_scanf_float+0x1d0>
 800e88a:	2d04      	cmp	r5, #4
 800e88c:	f47f af48 	bne.w	800e720 <_scanf_float+0x60>
 800e890:	3501      	adds	r5, #1
 800e892:	b2ed      	uxtb	r5, r5
 800e894:	e7d8      	b.n	800e848 <_scanf_float+0x188>
 800e896:	f1ba 0f01 	cmp.w	sl, #1
 800e89a:	f47f af41 	bne.w	800e720 <_scanf_float+0x60>
 800e89e:	f04f 0a02 	mov.w	sl, #2
 800e8a2:	e7d1      	b.n	800e848 <_scanf_float+0x188>
 800e8a4:	b97d      	cbnz	r5, 800e8c6 <_scanf_float+0x206>
 800e8a6:	f1b9 0f00 	cmp.w	r9, #0
 800e8aa:	f47f af3c 	bne.w	800e726 <_scanf_float+0x66>
 800e8ae:	6822      	ldr	r2, [r4, #0]
 800e8b0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e8b4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e8b8:	f47f af39 	bne.w	800e72e <_scanf_float+0x6e>
 800e8bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e8c0:	6022      	str	r2, [r4, #0]
 800e8c2:	2501      	movs	r5, #1
 800e8c4:	e7c0      	b.n	800e848 <_scanf_float+0x188>
 800e8c6:	2d03      	cmp	r5, #3
 800e8c8:	d0e2      	beq.n	800e890 <_scanf_float+0x1d0>
 800e8ca:	2d05      	cmp	r5, #5
 800e8cc:	e7de      	b.n	800e88c <_scanf_float+0x1cc>
 800e8ce:	2d02      	cmp	r5, #2
 800e8d0:	f47f af26 	bne.w	800e720 <_scanf_float+0x60>
 800e8d4:	2503      	movs	r5, #3
 800e8d6:	e7b7      	b.n	800e848 <_scanf_float+0x188>
 800e8d8:	2d06      	cmp	r5, #6
 800e8da:	f47f af21 	bne.w	800e720 <_scanf_float+0x60>
 800e8de:	2507      	movs	r5, #7
 800e8e0:	e7b2      	b.n	800e848 <_scanf_float+0x188>
 800e8e2:	6822      	ldr	r2, [r4, #0]
 800e8e4:	0591      	lsls	r1, r2, #22
 800e8e6:	f57f af1b 	bpl.w	800e720 <_scanf_float+0x60>
 800e8ea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e8ee:	6022      	str	r2, [r4, #0]
 800e8f0:	f8cd 9004 	str.w	r9, [sp, #4]
 800e8f4:	e7a8      	b.n	800e848 <_scanf_float+0x188>
 800e8f6:	6822      	ldr	r2, [r4, #0]
 800e8f8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e8fc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e900:	d006      	beq.n	800e910 <_scanf_float+0x250>
 800e902:	0550      	lsls	r0, r2, #21
 800e904:	f57f af0c 	bpl.w	800e720 <_scanf_float+0x60>
 800e908:	f1b9 0f00 	cmp.w	r9, #0
 800e90c:	f43f af0f 	beq.w	800e72e <_scanf_float+0x6e>
 800e910:	0591      	lsls	r1, r2, #22
 800e912:	bf58      	it	pl
 800e914:	9901      	ldrpl	r1, [sp, #4]
 800e916:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e91a:	bf58      	it	pl
 800e91c:	eba9 0101 	subpl.w	r1, r9, r1
 800e920:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e924:	bf58      	it	pl
 800e926:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e92a:	6022      	str	r2, [r4, #0]
 800e92c:	f04f 0900 	mov.w	r9, #0
 800e930:	e78a      	b.n	800e848 <_scanf_float+0x188>
 800e932:	f04f 0a03 	mov.w	sl, #3
 800e936:	e787      	b.n	800e848 <_scanf_float+0x188>
 800e938:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e93c:	4639      	mov	r1, r7
 800e93e:	4640      	mov	r0, r8
 800e940:	4798      	blx	r3
 800e942:	2800      	cmp	r0, #0
 800e944:	f43f aedf 	beq.w	800e706 <_scanf_float+0x46>
 800e948:	e6ea      	b.n	800e720 <_scanf_float+0x60>
 800e94a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e94e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e952:	463a      	mov	r2, r7
 800e954:	4640      	mov	r0, r8
 800e956:	4798      	blx	r3
 800e958:	6923      	ldr	r3, [r4, #16]
 800e95a:	3b01      	subs	r3, #1
 800e95c:	6123      	str	r3, [r4, #16]
 800e95e:	e6ec      	b.n	800e73a <_scanf_float+0x7a>
 800e960:	1e6b      	subs	r3, r5, #1
 800e962:	2b06      	cmp	r3, #6
 800e964:	d825      	bhi.n	800e9b2 <_scanf_float+0x2f2>
 800e966:	2d02      	cmp	r5, #2
 800e968:	d836      	bhi.n	800e9d8 <_scanf_float+0x318>
 800e96a:	455e      	cmp	r6, fp
 800e96c:	f67f aee8 	bls.w	800e740 <_scanf_float+0x80>
 800e970:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e974:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e978:	463a      	mov	r2, r7
 800e97a:	4640      	mov	r0, r8
 800e97c:	4798      	blx	r3
 800e97e:	6923      	ldr	r3, [r4, #16]
 800e980:	3b01      	subs	r3, #1
 800e982:	6123      	str	r3, [r4, #16]
 800e984:	e7f1      	b.n	800e96a <_scanf_float+0x2aa>
 800e986:	9802      	ldr	r0, [sp, #8]
 800e988:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e98c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e990:	9002      	str	r0, [sp, #8]
 800e992:	463a      	mov	r2, r7
 800e994:	4640      	mov	r0, r8
 800e996:	4798      	blx	r3
 800e998:	6923      	ldr	r3, [r4, #16]
 800e99a:	3b01      	subs	r3, #1
 800e99c:	6123      	str	r3, [r4, #16]
 800e99e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e9a2:	fa5f fa8a 	uxtb.w	sl, sl
 800e9a6:	f1ba 0f02 	cmp.w	sl, #2
 800e9aa:	d1ec      	bne.n	800e986 <_scanf_float+0x2c6>
 800e9ac:	3d03      	subs	r5, #3
 800e9ae:	b2ed      	uxtb	r5, r5
 800e9b0:	1b76      	subs	r6, r6, r5
 800e9b2:	6823      	ldr	r3, [r4, #0]
 800e9b4:	05da      	lsls	r2, r3, #23
 800e9b6:	d52f      	bpl.n	800ea18 <_scanf_float+0x358>
 800e9b8:	055b      	lsls	r3, r3, #21
 800e9ba:	d510      	bpl.n	800e9de <_scanf_float+0x31e>
 800e9bc:	455e      	cmp	r6, fp
 800e9be:	f67f aebf 	bls.w	800e740 <_scanf_float+0x80>
 800e9c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e9c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e9ca:	463a      	mov	r2, r7
 800e9cc:	4640      	mov	r0, r8
 800e9ce:	4798      	blx	r3
 800e9d0:	6923      	ldr	r3, [r4, #16]
 800e9d2:	3b01      	subs	r3, #1
 800e9d4:	6123      	str	r3, [r4, #16]
 800e9d6:	e7f1      	b.n	800e9bc <_scanf_float+0x2fc>
 800e9d8:	46aa      	mov	sl, r5
 800e9da:	9602      	str	r6, [sp, #8]
 800e9dc:	e7df      	b.n	800e99e <_scanf_float+0x2de>
 800e9de:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e9e2:	6923      	ldr	r3, [r4, #16]
 800e9e4:	2965      	cmp	r1, #101	; 0x65
 800e9e6:	f103 33ff 	add.w	r3, r3, #4294967295
 800e9ea:	f106 35ff 	add.w	r5, r6, #4294967295
 800e9ee:	6123      	str	r3, [r4, #16]
 800e9f0:	d00c      	beq.n	800ea0c <_scanf_float+0x34c>
 800e9f2:	2945      	cmp	r1, #69	; 0x45
 800e9f4:	d00a      	beq.n	800ea0c <_scanf_float+0x34c>
 800e9f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e9fa:	463a      	mov	r2, r7
 800e9fc:	4640      	mov	r0, r8
 800e9fe:	4798      	blx	r3
 800ea00:	6923      	ldr	r3, [r4, #16]
 800ea02:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ea06:	3b01      	subs	r3, #1
 800ea08:	1eb5      	subs	r5, r6, #2
 800ea0a:	6123      	str	r3, [r4, #16]
 800ea0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea10:	463a      	mov	r2, r7
 800ea12:	4640      	mov	r0, r8
 800ea14:	4798      	blx	r3
 800ea16:	462e      	mov	r6, r5
 800ea18:	6825      	ldr	r5, [r4, #0]
 800ea1a:	f015 0510 	ands.w	r5, r5, #16
 800ea1e:	d159      	bne.n	800ead4 <_scanf_float+0x414>
 800ea20:	7035      	strb	r5, [r6, #0]
 800ea22:	6823      	ldr	r3, [r4, #0]
 800ea24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ea28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea2c:	d11b      	bne.n	800ea66 <_scanf_float+0x3a6>
 800ea2e:	9b01      	ldr	r3, [sp, #4]
 800ea30:	454b      	cmp	r3, r9
 800ea32:	eba3 0209 	sub.w	r2, r3, r9
 800ea36:	d123      	bne.n	800ea80 <_scanf_float+0x3c0>
 800ea38:	2200      	movs	r2, #0
 800ea3a:	4659      	mov	r1, fp
 800ea3c:	4640      	mov	r0, r8
 800ea3e:	f000 fe99 	bl	800f774 <_strtod_r>
 800ea42:	6822      	ldr	r2, [r4, #0]
 800ea44:	9b03      	ldr	r3, [sp, #12]
 800ea46:	f012 0f02 	tst.w	r2, #2
 800ea4a:	ec57 6b10 	vmov	r6, r7, d0
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	d021      	beq.n	800ea96 <_scanf_float+0x3d6>
 800ea52:	9903      	ldr	r1, [sp, #12]
 800ea54:	1d1a      	adds	r2, r3, #4
 800ea56:	600a      	str	r2, [r1, #0]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	e9c3 6700 	strd	r6, r7, [r3]
 800ea5e:	68e3      	ldr	r3, [r4, #12]
 800ea60:	3301      	adds	r3, #1
 800ea62:	60e3      	str	r3, [r4, #12]
 800ea64:	e66d      	b.n	800e742 <_scanf_float+0x82>
 800ea66:	9b04      	ldr	r3, [sp, #16]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d0e5      	beq.n	800ea38 <_scanf_float+0x378>
 800ea6c:	9905      	ldr	r1, [sp, #20]
 800ea6e:	230a      	movs	r3, #10
 800ea70:	462a      	mov	r2, r5
 800ea72:	3101      	adds	r1, #1
 800ea74:	4640      	mov	r0, r8
 800ea76:	f000 ff05 	bl	800f884 <_strtol_r>
 800ea7a:	9b04      	ldr	r3, [sp, #16]
 800ea7c:	9e05      	ldr	r6, [sp, #20]
 800ea7e:	1ac2      	subs	r2, r0, r3
 800ea80:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ea84:	429e      	cmp	r6, r3
 800ea86:	bf28      	it	cs
 800ea88:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ea8c:	4912      	ldr	r1, [pc, #72]	; (800ead8 <_scanf_float+0x418>)
 800ea8e:	4630      	mov	r0, r6
 800ea90:	f000 f82c 	bl	800eaec <siprintf>
 800ea94:	e7d0      	b.n	800ea38 <_scanf_float+0x378>
 800ea96:	9903      	ldr	r1, [sp, #12]
 800ea98:	f012 0f04 	tst.w	r2, #4
 800ea9c:	f103 0204 	add.w	r2, r3, #4
 800eaa0:	600a      	str	r2, [r1, #0]
 800eaa2:	d1d9      	bne.n	800ea58 <_scanf_float+0x398>
 800eaa4:	f8d3 8000 	ldr.w	r8, [r3]
 800eaa8:	ee10 2a10 	vmov	r2, s0
 800eaac:	ee10 0a10 	vmov	r0, s0
 800eab0:	463b      	mov	r3, r7
 800eab2:	4639      	mov	r1, r7
 800eab4:	f7f2 f812 	bl	8000adc <__aeabi_dcmpun>
 800eab8:	b128      	cbz	r0, 800eac6 <_scanf_float+0x406>
 800eaba:	4808      	ldr	r0, [pc, #32]	; (800eadc <_scanf_float+0x41c>)
 800eabc:	f000 f810 	bl	800eae0 <nanf>
 800eac0:	ed88 0a00 	vstr	s0, [r8]
 800eac4:	e7cb      	b.n	800ea5e <_scanf_float+0x39e>
 800eac6:	4630      	mov	r0, r6
 800eac8:	4639      	mov	r1, r7
 800eaca:	f7f2 f865 	bl	8000b98 <__aeabi_d2f>
 800eace:	f8c8 0000 	str.w	r0, [r8]
 800ead2:	e7c4      	b.n	800ea5e <_scanf_float+0x39e>
 800ead4:	2500      	movs	r5, #0
 800ead6:	e634      	b.n	800e742 <_scanf_float+0x82>
 800ead8:	080128c4 	.word	0x080128c4
 800eadc:	08012cd0 	.word	0x08012cd0

0800eae0 <nanf>:
 800eae0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800eae8 <nanf+0x8>
 800eae4:	4770      	bx	lr
 800eae6:	bf00      	nop
 800eae8:	7fc00000 	.word	0x7fc00000

0800eaec <siprintf>:
 800eaec:	b40e      	push	{r1, r2, r3}
 800eaee:	b500      	push	{lr}
 800eaf0:	b09c      	sub	sp, #112	; 0x70
 800eaf2:	ab1d      	add	r3, sp, #116	; 0x74
 800eaf4:	9002      	str	r0, [sp, #8]
 800eaf6:	9006      	str	r0, [sp, #24]
 800eaf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eafc:	4809      	ldr	r0, [pc, #36]	; (800eb24 <siprintf+0x38>)
 800eafe:	9107      	str	r1, [sp, #28]
 800eb00:	9104      	str	r1, [sp, #16]
 800eb02:	4909      	ldr	r1, [pc, #36]	; (800eb28 <siprintf+0x3c>)
 800eb04:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb08:	9105      	str	r1, [sp, #20]
 800eb0a:	6800      	ldr	r0, [r0, #0]
 800eb0c:	9301      	str	r3, [sp, #4]
 800eb0e:	a902      	add	r1, sp, #8
 800eb10:	f002 fee2 	bl	80118d8 <_svfiprintf_r>
 800eb14:	9b02      	ldr	r3, [sp, #8]
 800eb16:	2200      	movs	r2, #0
 800eb18:	701a      	strb	r2, [r3, #0]
 800eb1a:	b01c      	add	sp, #112	; 0x70
 800eb1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb20:	b003      	add	sp, #12
 800eb22:	4770      	bx	lr
 800eb24:	20000114 	.word	0x20000114
 800eb28:	ffff0208 	.word	0xffff0208

0800eb2c <sulp>:
 800eb2c:	b570      	push	{r4, r5, r6, lr}
 800eb2e:	4604      	mov	r4, r0
 800eb30:	460d      	mov	r5, r1
 800eb32:	ec45 4b10 	vmov	d0, r4, r5
 800eb36:	4616      	mov	r6, r2
 800eb38:	f002 fc2c 	bl	8011394 <__ulp>
 800eb3c:	ec51 0b10 	vmov	r0, r1, d0
 800eb40:	b17e      	cbz	r6, 800eb62 <sulp+0x36>
 800eb42:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800eb46:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	dd09      	ble.n	800eb62 <sulp+0x36>
 800eb4e:	051b      	lsls	r3, r3, #20
 800eb50:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800eb54:	2400      	movs	r4, #0
 800eb56:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800eb5a:	4622      	mov	r2, r4
 800eb5c:	462b      	mov	r3, r5
 800eb5e:	f7f1 fd23 	bl	80005a8 <__aeabi_dmul>
 800eb62:	bd70      	pop	{r4, r5, r6, pc}
 800eb64:	0000      	movs	r0, r0
	...

0800eb68 <_strtod_l>:
 800eb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb6c:	ed2d 8b02 	vpush	{d8}
 800eb70:	b09d      	sub	sp, #116	; 0x74
 800eb72:	461f      	mov	r7, r3
 800eb74:	2300      	movs	r3, #0
 800eb76:	9318      	str	r3, [sp, #96]	; 0x60
 800eb78:	4ba2      	ldr	r3, [pc, #648]	; (800ee04 <_strtod_l+0x29c>)
 800eb7a:	9213      	str	r2, [sp, #76]	; 0x4c
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	9305      	str	r3, [sp, #20]
 800eb80:	4604      	mov	r4, r0
 800eb82:	4618      	mov	r0, r3
 800eb84:	4688      	mov	r8, r1
 800eb86:	f7f1 fafb 	bl	8000180 <strlen>
 800eb8a:	f04f 0a00 	mov.w	sl, #0
 800eb8e:	4605      	mov	r5, r0
 800eb90:	f04f 0b00 	mov.w	fp, #0
 800eb94:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800eb98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eb9a:	781a      	ldrb	r2, [r3, #0]
 800eb9c:	2a2b      	cmp	r2, #43	; 0x2b
 800eb9e:	d04e      	beq.n	800ec3e <_strtod_l+0xd6>
 800eba0:	d83b      	bhi.n	800ec1a <_strtod_l+0xb2>
 800eba2:	2a0d      	cmp	r2, #13
 800eba4:	d834      	bhi.n	800ec10 <_strtod_l+0xa8>
 800eba6:	2a08      	cmp	r2, #8
 800eba8:	d834      	bhi.n	800ec14 <_strtod_l+0xac>
 800ebaa:	2a00      	cmp	r2, #0
 800ebac:	d03e      	beq.n	800ec2c <_strtod_l+0xc4>
 800ebae:	2300      	movs	r3, #0
 800ebb0:	930a      	str	r3, [sp, #40]	; 0x28
 800ebb2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ebb4:	7833      	ldrb	r3, [r6, #0]
 800ebb6:	2b30      	cmp	r3, #48	; 0x30
 800ebb8:	f040 80b0 	bne.w	800ed1c <_strtod_l+0x1b4>
 800ebbc:	7873      	ldrb	r3, [r6, #1]
 800ebbe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ebc2:	2b58      	cmp	r3, #88	; 0x58
 800ebc4:	d168      	bne.n	800ec98 <_strtod_l+0x130>
 800ebc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebc8:	9301      	str	r3, [sp, #4]
 800ebca:	ab18      	add	r3, sp, #96	; 0x60
 800ebcc:	9702      	str	r7, [sp, #8]
 800ebce:	9300      	str	r3, [sp, #0]
 800ebd0:	4a8d      	ldr	r2, [pc, #564]	; (800ee08 <_strtod_l+0x2a0>)
 800ebd2:	ab19      	add	r3, sp, #100	; 0x64
 800ebd4:	a917      	add	r1, sp, #92	; 0x5c
 800ebd6:	4620      	mov	r0, r4
 800ebd8:	f001 fd44 	bl	8010664 <__gethex>
 800ebdc:	f010 0707 	ands.w	r7, r0, #7
 800ebe0:	4605      	mov	r5, r0
 800ebe2:	d005      	beq.n	800ebf0 <_strtod_l+0x88>
 800ebe4:	2f06      	cmp	r7, #6
 800ebe6:	d12c      	bne.n	800ec42 <_strtod_l+0xda>
 800ebe8:	3601      	adds	r6, #1
 800ebea:	2300      	movs	r3, #0
 800ebec:	9617      	str	r6, [sp, #92]	; 0x5c
 800ebee:	930a      	str	r3, [sp, #40]	; 0x28
 800ebf0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	f040 8590 	bne.w	800f718 <_strtod_l+0xbb0>
 800ebf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebfa:	b1eb      	cbz	r3, 800ec38 <_strtod_l+0xd0>
 800ebfc:	4652      	mov	r2, sl
 800ebfe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ec02:	ec43 2b10 	vmov	d0, r2, r3
 800ec06:	b01d      	add	sp, #116	; 0x74
 800ec08:	ecbd 8b02 	vpop	{d8}
 800ec0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec10:	2a20      	cmp	r2, #32
 800ec12:	d1cc      	bne.n	800ebae <_strtod_l+0x46>
 800ec14:	3301      	adds	r3, #1
 800ec16:	9317      	str	r3, [sp, #92]	; 0x5c
 800ec18:	e7be      	b.n	800eb98 <_strtod_l+0x30>
 800ec1a:	2a2d      	cmp	r2, #45	; 0x2d
 800ec1c:	d1c7      	bne.n	800ebae <_strtod_l+0x46>
 800ec1e:	2201      	movs	r2, #1
 800ec20:	920a      	str	r2, [sp, #40]	; 0x28
 800ec22:	1c5a      	adds	r2, r3, #1
 800ec24:	9217      	str	r2, [sp, #92]	; 0x5c
 800ec26:	785b      	ldrb	r3, [r3, #1]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d1c2      	bne.n	800ebb2 <_strtod_l+0x4a>
 800ec2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ec2e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	f040 856e 	bne.w	800f714 <_strtod_l+0xbac>
 800ec38:	4652      	mov	r2, sl
 800ec3a:	465b      	mov	r3, fp
 800ec3c:	e7e1      	b.n	800ec02 <_strtod_l+0x9a>
 800ec3e:	2200      	movs	r2, #0
 800ec40:	e7ee      	b.n	800ec20 <_strtod_l+0xb8>
 800ec42:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ec44:	b13a      	cbz	r2, 800ec56 <_strtod_l+0xee>
 800ec46:	2135      	movs	r1, #53	; 0x35
 800ec48:	a81a      	add	r0, sp, #104	; 0x68
 800ec4a:	f002 fcae 	bl	80115aa <__copybits>
 800ec4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ec50:	4620      	mov	r0, r4
 800ec52:	f002 f86d 	bl	8010d30 <_Bfree>
 800ec56:	3f01      	subs	r7, #1
 800ec58:	2f04      	cmp	r7, #4
 800ec5a:	d806      	bhi.n	800ec6a <_strtod_l+0x102>
 800ec5c:	e8df f007 	tbb	[pc, r7]
 800ec60:	1714030a 	.word	0x1714030a
 800ec64:	0a          	.byte	0x0a
 800ec65:	00          	.byte	0x00
 800ec66:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800ec6a:	0728      	lsls	r0, r5, #28
 800ec6c:	d5c0      	bpl.n	800ebf0 <_strtod_l+0x88>
 800ec6e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ec72:	e7bd      	b.n	800ebf0 <_strtod_l+0x88>
 800ec74:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800ec78:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ec7a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ec7e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ec82:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ec86:	e7f0      	b.n	800ec6a <_strtod_l+0x102>
 800ec88:	f8df b180 	ldr.w	fp, [pc, #384]	; 800ee0c <_strtod_l+0x2a4>
 800ec8c:	e7ed      	b.n	800ec6a <_strtod_l+0x102>
 800ec8e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ec92:	f04f 3aff 	mov.w	sl, #4294967295
 800ec96:	e7e8      	b.n	800ec6a <_strtod_l+0x102>
 800ec98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ec9a:	1c5a      	adds	r2, r3, #1
 800ec9c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ec9e:	785b      	ldrb	r3, [r3, #1]
 800eca0:	2b30      	cmp	r3, #48	; 0x30
 800eca2:	d0f9      	beq.n	800ec98 <_strtod_l+0x130>
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d0a3      	beq.n	800ebf0 <_strtod_l+0x88>
 800eca8:	2301      	movs	r3, #1
 800ecaa:	f04f 0900 	mov.w	r9, #0
 800ecae:	9304      	str	r3, [sp, #16]
 800ecb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ecb2:	9308      	str	r3, [sp, #32]
 800ecb4:	f8cd 901c 	str.w	r9, [sp, #28]
 800ecb8:	464f      	mov	r7, r9
 800ecba:	220a      	movs	r2, #10
 800ecbc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ecbe:	7806      	ldrb	r6, [r0, #0]
 800ecc0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ecc4:	b2d9      	uxtb	r1, r3
 800ecc6:	2909      	cmp	r1, #9
 800ecc8:	d92a      	bls.n	800ed20 <_strtod_l+0x1b8>
 800ecca:	9905      	ldr	r1, [sp, #20]
 800eccc:	462a      	mov	r2, r5
 800ecce:	f002 ff1b 	bl	8011b08 <strncmp>
 800ecd2:	b398      	cbz	r0, 800ed3c <_strtod_l+0x1d4>
 800ecd4:	2000      	movs	r0, #0
 800ecd6:	4632      	mov	r2, r6
 800ecd8:	463d      	mov	r5, r7
 800ecda:	9005      	str	r0, [sp, #20]
 800ecdc:	4603      	mov	r3, r0
 800ecde:	2a65      	cmp	r2, #101	; 0x65
 800ece0:	d001      	beq.n	800ece6 <_strtod_l+0x17e>
 800ece2:	2a45      	cmp	r2, #69	; 0x45
 800ece4:	d118      	bne.n	800ed18 <_strtod_l+0x1b0>
 800ece6:	b91d      	cbnz	r5, 800ecf0 <_strtod_l+0x188>
 800ece8:	9a04      	ldr	r2, [sp, #16]
 800ecea:	4302      	orrs	r2, r0
 800ecec:	d09e      	beq.n	800ec2c <_strtod_l+0xc4>
 800ecee:	2500      	movs	r5, #0
 800ecf0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ecf4:	f108 0201 	add.w	r2, r8, #1
 800ecf8:	9217      	str	r2, [sp, #92]	; 0x5c
 800ecfa:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ecfe:	2a2b      	cmp	r2, #43	; 0x2b
 800ed00:	d075      	beq.n	800edee <_strtod_l+0x286>
 800ed02:	2a2d      	cmp	r2, #45	; 0x2d
 800ed04:	d07b      	beq.n	800edfe <_strtod_l+0x296>
 800ed06:	f04f 0c00 	mov.w	ip, #0
 800ed0a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ed0e:	2909      	cmp	r1, #9
 800ed10:	f240 8082 	bls.w	800ee18 <_strtod_l+0x2b0>
 800ed14:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ed18:	2600      	movs	r6, #0
 800ed1a:	e09d      	b.n	800ee58 <_strtod_l+0x2f0>
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	e7c4      	b.n	800ecaa <_strtod_l+0x142>
 800ed20:	2f08      	cmp	r7, #8
 800ed22:	bfd8      	it	le
 800ed24:	9907      	ldrle	r1, [sp, #28]
 800ed26:	f100 0001 	add.w	r0, r0, #1
 800ed2a:	bfda      	itte	le
 800ed2c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ed30:	9307      	strle	r3, [sp, #28]
 800ed32:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ed36:	3701      	adds	r7, #1
 800ed38:	9017      	str	r0, [sp, #92]	; 0x5c
 800ed3a:	e7bf      	b.n	800ecbc <_strtod_l+0x154>
 800ed3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ed3e:	195a      	adds	r2, r3, r5
 800ed40:	9217      	str	r2, [sp, #92]	; 0x5c
 800ed42:	5d5a      	ldrb	r2, [r3, r5]
 800ed44:	2f00      	cmp	r7, #0
 800ed46:	d037      	beq.n	800edb8 <_strtod_l+0x250>
 800ed48:	9005      	str	r0, [sp, #20]
 800ed4a:	463d      	mov	r5, r7
 800ed4c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ed50:	2b09      	cmp	r3, #9
 800ed52:	d912      	bls.n	800ed7a <_strtod_l+0x212>
 800ed54:	2301      	movs	r3, #1
 800ed56:	e7c2      	b.n	800ecde <_strtod_l+0x176>
 800ed58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ed5a:	1c5a      	adds	r2, r3, #1
 800ed5c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ed5e:	785a      	ldrb	r2, [r3, #1]
 800ed60:	3001      	adds	r0, #1
 800ed62:	2a30      	cmp	r2, #48	; 0x30
 800ed64:	d0f8      	beq.n	800ed58 <_strtod_l+0x1f0>
 800ed66:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ed6a:	2b08      	cmp	r3, #8
 800ed6c:	f200 84d9 	bhi.w	800f722 <_strtod_l+0xbba>
 800ed70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ed72:	9005      	str	r0, [sp, #20]
 800ed74:	2000      	movs	r0, #0
 800ed76:	9308      	str	r3, [sp, #32]
 800ed78:	4605      	mov	r5, r0
 800ed7a:	3a30      	subs	r2, #48	; 0x30
 800ed7c:	f100 0301 	add.w	r3, r0, #1
 800ed80:	d014      	beq.n	800edac <_strtod_l+0x244>
 800ed82:	9905      	ldr	r1, [sp, #20]
 800ed84:	4419      	add	r1, r3
 800ed86:	9105      	str	r1, [sp, #20]
 800ed88:	462b      	mov	r3, r5
 800ed8a:	eb00 0e05 	add.w	lr, r0, r5
 800ed8e:	210a      	movs	r1, #10
 800ed90:	4573      	cmp	r3, lr
 800ed92:	d113      	bne.n	800edbc <_strtod_l+0x254>
 800ed94:	182b      	adds	r3, r5, r0
 800ed96:	2b08      	cmp	r3, #8
 800ed98:	f105 0501 	add.w	r5, r5, #1
 800ed9c:	4405      	add	r5, r0
 800ed9e:	dc1c      	bgt.n	800edda <_strtod_l+0x272>
 800eda0:	9907      	ldr	r1, [sp, #28]
 800eda2:	230a      	movs	r3, #10
 800eda4:	fb03 2301 	mla	r3, r3, r1, r2
 800eda8:	9307      	str	r3, [sp, #28]
 800edaa:	2300      	movs	r3, #0
 800edac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800edae:	1c51      	adds	r1, r2, #1
 800edb0:	9117      	str	r1, [sp, #92]	; 0x5c
 800edb2:	7852      	ldrb	r2, [r2, #1]
 800edb4:	4618      	mov	r0, r3
 800edb6:	e7c9      	b.n	800ed4c <_strtod_l+0x1e4>
 800edb8:	4638      	mov	r0, r7
 800edba:	e7d2      	b.n	800ed62 <_strtod_l+0x1fa>
 800edbc:	2b08      	cmp	r3, #8
 800edbe:	dc04      	bgt.n	800edca <_strtod_l+0x262>
 800edc0:	9e07      	ldr	r6, [sp, #28]
 800edc2:	434e      	muls	r6, r1
 800edc4:	9607      	str	r6, [sp, #28]
 800edc6:	3301      	adds	r3, #1
 800edc8:	e7e2      	b.n	800ed90 <_strtod_l+0x228>
 800edca:	f103 0c01 	add.w	ip, r3, #1
 800edce:	f1bc 0f10 	cmp.w	ip, #16
 800edd2:	bfd8      	it	le
 800edd4:	fb01 f909 	mulle.w	r9, r1, r9
 800edd8:	e7f5      	b.n	800edc6 <_strtod_l+0x25e>
 800edda:	2d10      	cmp	r5, #16
 800eddc:	bfdc      	itt	le
 800edde:	230a      	movle	r3, #10
 800ede0:	fb03 2909 	mlale	r9, r3, r9, r2
 800ede4:	e7e1      	b.n	800edaa <_strtod_l+0x242>
 800ede6:	2300      	movs	r3, #0
 800ede8:	9305      	str	r3, [sp, #20]
 800edea:	2301      	movs	r3, #1
 800edec:	e77c      	b.n	800ece8 <_strtod_l+0x180>
 800edee:	f04f 0c00 	mov.w	ip, #0
 800edf2:	f108 0202 	add.w	r2, r8, #2
 800edf6:	9217      	str	r2, [sp, #92]	; 0x5c
 800edf8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800edfc:	e785      	b.n	800ed0a <_strtod_l+0x1a2>
 800edfe:	f04f 0c01 	mov.w	ip, #1
 800ee02:	e7f6      	b.n	800edf2 <_strtod_l+0x28a>
 800ee04:	08012b18 	.word	0x08012b18
 800ee08:	080128cc 	.word	0x080128cc
 800ee0c:	7ff00000 	.word	0x7ff00000
 800ee10:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ee12:	1c51      	adds	r1, r2, #1
 800ee14:	9117      	str	r1, [sp, #92]	; 0x5c
 800ee16:	7852      	ldrb	r2, [r2, #1]
 800ee18:	2a30      	cmp	r2, #48	; 0x30
 800ee1a:	d0f9      	beq.n	800ee10 <_strtod_l+0x2a8>
 800ee1c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ee20:	2908      	cmp	r1, #8
 800ee22:	f63f af79 	bhi.w	800ed18 <_strtod_l+0x1b0>
 800ee26:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ee2a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ee2c:	9206      	str	r2, [sp, #24]
 800ee2e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ee30:	1c51      	adds	r1, r2, #1
 800ee32:	9117      	str	r1, [sp, #92]	; 0x5c
 800ee34:	7852      	ldrb	r2, [r2, #1]
 800ee36:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800ee3a:	2e09      	cmp	r6, #9
 800ee3c:	d937      	bls.n	800eeae <_strtod_l+0x346>
 800ee3e:	9e06      	ldr	r6, [sp, #24]
 800ee40:	1b89      	subs	r1, r1, r6
 800ee42:	2908      	cmp	r1, #8
 800ee44:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ee48:	dc02      	bgt.n	800ee50 <_strtod_l+0x2e8>
 800ee4a:	4576      	cmp	r6, lr
 800ee4c:	bfa8      	it	ge
 800ee4e:	4676      	movge	r6, lr
 800ee50:	f1bc 0f00 	cmp.w	ip, #0
 800ee54:	d000      	beq.n	800ee58 <_strtod_l+0x2f0>
 800ee56:	4276      	negs	r6, r6
 800ee58:	2d00      	cmp	r5, #0
 800ee5a:	d14d      	bne.n	800eef8 <_strtod_l+0x390>
 800ee5c:	9904      	ldr	r1, [sp, #16]
 800ee5e:	4301      	orrs	r1, r0
 800ee60:	f47f aec6 	bne.w	800ebf0 <_strtod_l+0x88>
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	f47f aee1 	bne.w	800ec2c <_strtod_l+0xc4>
 800ee6a:	2a69      	cmp	r2, #105	; 0x69
 800ee6c:	d027      	beq.n	800eebe <_strtod_l+0x356>
 800ee6e:	dc24      	bgt.n	800eeba <_strtod_l+0x352>
 800ee70:	2a49      	cmp	r2, #73	; 0x49
 800ee72:	d024      	beq.n	800eebe <_strtod_l+0x356>
 800ee74:	2a4e      	cmp	r2, #78	; 0x4e
 800ee76:	f47f aed9 	bne.w	800ec2c <_strtod_l+0xc4>
 800ee7a:	499f      	ldr	r1, [pc, #636]	; (800f0f8 <_strtod_l+0x590>)
 800ee7c:	a817      	add	r0, sp, #92	; 0x5c
 800ee7e:	f001 fe49 	bl	8010b14 <__match>
 800ee82:	2800      	cmp	r0, #0
 800ee84:	f43f aed2 	beq.w	800ec2c <_strtod_l+0xc4>
 800ee88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ee8a:	781b      	ldrb	r3, [r3, #0]
 800ee8c:	2b28      	cmp	r3, #40	; 0x28
 800ee8e:	d12d      	bne.n	800eeec <_strtod_l+0x384>
 800ee90:	499a      	ldr	r1, [pc, #616]	; (800f0fc <_strtod_l+0x594>)
 800ee92:	aa1a      	add	r2, sp, #104	; 0x68
 800ee94:	a817      	add	r0, sp, #92	; 0x5c
 800ee96:	f001 fe51 	bl	8010b3c <__hexnan>
 800ee9a:	2805      	cmp	r0, #5
 800ee9c:	d126      	bne.n	800eeec <_strtod_l+0x384>
 800ee9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eea0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800eea4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800eea8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800eeac:	e6a0      	b.n	800ebf0 <_strtod_l+0x88>
 800eeae:	210a      	movs	r1, #10
 800eeb0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800eeb4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800eeb8:	e7b9      	b.n	800ee2e <_strtod_l+0x2c6>
 800eeba:	2a6e      	cmp	r2, #110	; 0x6e
 800eebc:	e7db      	b.n	800ee76 <_strtod_l+0x30e>
 800eebe:	4990      	ldr	r1, [pc, #576]	; (800f100 <_strtod_l+0x598>)
 800eec0:	a817      	add	r0, sp, #92	; 0x5c
 800eec2:	f001 fe27 	bl	8010b14 <__match>
 800eec6:	2800      	cmp	r0, #0
 800eec8:	f43f aeb0 	beq.w	800ec2c <_strtod_l+0xc4>
 800eecc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eece:	498d      	ldr	r1, [pc, #564]	; (800f104 <_strtod_l+0x59c>)
 800eed0:	3b01      	subs	r3, #1
 800eed2:	a817      	add	r0, sp, #92	; 0x5c
 800eed4:	9317      	str	r3, [sp, #92]	; 0x5c
 800eed6:	f001 fe1d 	bl	8010b14 <__match>
 800eeda:	b910      	cbnz	r0, 800eee2 <_strtod_l+0x37a>
 800eedc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eede:	3301      	adds	r3, #1
 800eee0:	9317      	str	r3, [sp, #92]	; 0x5c
 800eee2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800f114 <_strtod_l+0x5ac>
 800eee6:	f04f 0a00 	mov.w	sl, #0
 800eeea:	e681      	b.n	800ebf0 <_strtod_l+0x88>
 800eeec:	4886      	ldr	r0, [pc, #536]	; (800f108 <_strtod_l+0x5a0>)
 800eeee:	f002 fdf3 	bl	8011ad8 <nan>
 800eef2:	ec5b ab10 	vmov	sl, fp, d0
 800eef6:	e67b      	b.n	800ebf0 <_strtod_l+0x88>
 800eef8:	9b05      	ldr	r3, [sp, #20]
 800eefa:	9807      	ldr	r0, [sp, #28]
 800eefc:	1af3      	subs	r3, r6, r3
 800eefe:	2f00      	cmp	r7, #0
 800ef00:	bf08      	it	eq
 800ef02:	462f      	moveq	r7, r5
 800ef04:	2d10      	cmp	r5, #16
 800ef06:	9306      	str	r3, [sp, #24]
 800ef08:	46a8      	mov	r8, r5
 800ef0a:	bfa8      	it	ge
 800ef0c:	f04f 0810 	movge.w	r8, #16
 800ef10:	f7f1 fad0 	bl	80004b4 <__aeabi_ui2d>
 800ef14:	2d09      	cmp	r5, #9
 800ef16:	4682      	mov	sl, r0
 800ef18:	468b      	mov	fp, r1
 800ef1a:	dd13      	ble.n	800ef44 <_strtod_l+0x3dc>
 800ef1c:	4b7b      	ldr	r3, [pc, #492]	; (800f10c <_strtod_l+0x5a4>)
 800ef1e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ef22:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ef26:	f7f1 fb3f 	bl	80005a8 <__aeabi_dmul>
 800ef2a:	4682      	mov	sl, r0
 800ef2c:	4648      	mov	r0, r9
 800ef2e:	468b      	mov	fp, r1
 800ef30:	f7f1 fac0 	bl	80004b4 <__aeabi_ui2d>
 800ef34:	4602      	mov	r2, r0
 800ef36:	460b      	mov	r3, r1
 800ef38:	4650      	mov	r0, sl
 800ef3a:	4659      	mov	r1, fp
 800ef3c:	f7f1 f97e 	bl	800023c <__adddf3>
 800ef40:	4682      	mov	sl, r0
 800ef42:	468b      	mov	fp, r1
 800ef44:	2d0f      	cmp	r5, #15
 800ef46:	dc38      	bgt.n	800efba <_strtod_l+0x452>
 800ef48:	9b06      	ldr	r3, [sp, #24]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	f43f ae50 	beq.w	800ebf0 <_strtod_l+0x88>
 800ef50:	dd24      	ble.n	800ef9c <_strtod_l+0x434>
 800ef52:	2b16      	cmp	r3, #22
 800ef54:	dc0b      	bgt.n	800ef6e <_strtod_l+0x406>
 800ef56:	496d      	ldr	r1, [pc, #436]	; (800f10c <_strtod_l+0x5a4>)
 800ef58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ef5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef60:	4652      	mov	r2, sl
 800ef62:	465b      	mov	r3, fp
 800ef64:	f7f1 fb20 	bl	80005a8 <__aeabi_dmul>
 800ef68:	4682      	mov	sl, r0
 800ef6a:	468b      	mov	fp, r1
 800ef6c:	e640      	b.n	800ebf0 <_strtod_l+0x88>
 800ef6e:	9a06      	ldr	r2, [sp, #24]
 800ef70:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ef74:	4293      	cmp	r3, r2
 800ef76:	db20      	blt.n	800efba <_strtod_l+0x452>
 800ef78:	4c64      	ldr	r4, [pc, #400]	; (800f10c <_strtod_l+0x5a4>)
 800ef7a:	f1c5 050f 	rsb	r5, r5, #15
 800ef7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ef82:	4652      	mov	r2, sl
 800ef84:	465b      	mov	r3, fp
 800ef86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef8a:	f7f1 fb0d 	bl	80005a8 <__aeabi_dmul>
 800ef8e:	9b06      	ldr	r3, [sp, #24]
 800ef90:	1b5d      	subs	r5, r3, r5
 800ef92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ef96:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ef9a:	e7e3      	b.n	800ef64 <_strtod_l+0x3fc>
 800ef9c:	9b06      	ldr	r3, [sp, #24]
 800ef9e:	3316      	adds	r3, #22
 800efa0:	db0b      	blt.n	800efba <_strtod_l+0x452>
 800efa2:	9b05      	ldr	r3, [sp, #20]
 800efa4:	1b9e      	subs	r6, r3, r6
 800efa6:	4b59      	ldr	r3, [pc, #356]	; (800f10c <_strtod_l+0x5a4>)
 800efa8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800efac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800efb0:	4650      	mov	r0, sl
 800efb2:	4659      	mov	r1, fp
 800efb4:	f7f1 fc22 	bl	80007fc <__aeabi_ddiv>
 800efb8:	e7d6      	b.n	800ef68 <_strtod_l+0x400>
 800efba:	9b06      	ldr	r3, [sp, #24]
 800efbc:	eba5 0808 	sub.w	r8, r5, r8
 800efc0:	4498      	add	r8, r3
 800efc2:	f1b8 0f00 	cmp.w	r8, #0
 800efc6:	dd74      	ble.n	800f0b2 <_strtod_l+0x54a>
 800efc8:	f018 030f 	ands.w	r3, r8, #15
 800efcc:	d00a      	beq.n	800efe4 <_strtod_l+0x47c>
 800efce:	494f      	ldr	r1, [pc, #316]	; (800f10c <_strtod_l+0x5a4>)
 800efd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800efd4:	4652      	mov	r2, sl
 800efd6:	465b      	mov	r3, fp
 800efd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800efdc:	f7f1 fae4 	bl	80005a8 <__aeabi_dmul>
 800efe0:	4682      	mov	sl, r0
 800efe2:	468b      	mov	fp, r1
 800efe4:	f038 080f 	bics.w	r8, r8, #15
 800efe8:	d04f      	beq.n	800f08a <_strtod_l+0x522>
 800efea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800efee:	dd22      	ble.n	800f036 <_strtod_l+0x4ce>
 800eff0:	2500      	movs	r5, #0
 800eff2:	462e      	mov	r6, r5
 800eff4:	9507      	str	r5, [sp, #28]
 800eff6:	9505      	str	r5, [sp, #20]
 800eff8:	2322      	movs	r3, #34	; 0x22
 800effa:	f8df b118 	ldr.w	fp, [pc, #280]	; 800f114 <_strtod_l+0x5ac>
 800effe:	6023      	str	r3, [r4, #0]
 800f000:	f04f 0a00 	mov.w	sl, #0
 800f004:	9b07      	ldr	r3, [sp, #28]
 800f006:	2b00      	cmp	r3, #0
 800f008:	f43f adf2 	beq.w	800ebf0 <_strtod_l+0x88>
 800f00c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f00e:	4620      	mov	r0, r4
 800f010:	f001 fe8e 	bl	8010d30 <_Bfree>
 800f014:	9905      	ldr	r1, [sp, #20]
 800f016:	4620      	mov	r0, r4
 800f018:	f001 fe8a 	bl	8010d30 <_Bfree>
 800f01c:	4631      	mov	r1, r6
 800f01e:	4620      	mov	r0, r4
 800f020:	f001 fe86 	bl	8010d30 <_Bfree>
 800f024:	9907      	ldr	r1, [sp, #28]
 800f026:	4620      	mov	r0, r4
 800f028:	f001 fe82 	bl	8010d30 <_Bfree>
 800f02c:	4629      	mov	r1, r5
 800f02e:	4620      	mov	r0, r4
 800f030:	f001 fe7e 	bl	8010d30 <_Bfree>
 800f034:	e5dc      	b.n	800ebf0 <_strtod_l+0x88>
 800f036:	4b36      	ldr	r3, [pc, #216]	; (800f110 <_strtod_l+0x5a8>)
 800f038:	9304      	str	r3, [sp, #16]
 800f03a:	2300      	movs	r3, #0
 800f03c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f040:	4650      	mov	r0, sl
 800f042:	4659      	mov	r1, fp
 800f044:	4699      	mov	r9, r3
 800f046:	f1b8 0f01 	cmp.w	r8, #1
 800f04a:	dc21      	bgt.n	800f090 <_strtod_l+0x528>
 800f04c:	b10b      	cbz	r3, 800f052 <_strtod_l+0x4ea>
 800f04e:	4682      	mov	sl, r0
 800f050:	468b      	mov	fp, r1
 800f052:	4b2f      	ldr	r3, [pc, #188]	; (800f110 <_strtod_l+0x5a8>)
 800f054:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f058:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f05c:	4652      	mov	r2, sl
 800f05e:	465b      	mov	r3, fp
 800f060:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f064:	f7f1 faa0 	bl	80005a8 <__aeabi_dmul>
 800f068:	4b2a      	ldr	r3, [pc, #168]	; (800f114 <_strtod_l+0x5ac>)
 800f06a:	460a      	mov	r2, r1
 800f06c:	400b      	ands	r3, r1
 800f06e:	492a      	ldr	r1, [pc, #168]	; (800f118 <_strtod_l+0x5b0>)
 800f070:	428b      	cmp	r3, r1
 800f072:	4682      	mov	sl, r0
 800f074:	d8bc      	bhi.n	800eff0 <_strtod_l+0x488>
 800f076:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f07a:	428b      	cmp	r3, r1
 800f07c:	bf86      	itte	hi
 800f07e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800f11c <_strtod_l+0x5b4>
 800f082:	f04f 3aff 	movhi.w	sl, #4294967295
 800f086:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f08a:	2300      	movs	r3, #0
 800f08c:	9304      	str	r3, [sp, #16]
 800f08e:	e084      	b.n	800f19a <_strtod_l+0x632>
 800f090:	f018 0f01 	tst.w	r8, #1
 800f094:	d005      	beq.n	800f0a2 <_strtod_l+0x53a>
 800f096:	9b04      	ldr	r3, [sp, #16]
 800f098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f09c:	f7f1 fa84 	bl	80005a8 <__aeabi_dmul>
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	9a04      	ldr	r2, [sp, #16]
 800f0a4:	3208      	adds	r2, #8
 800f0a6:	f109 0901 	add.w	r9, r9, #1
 800f0aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f0ae:	9204      	str	r2, [sp, #16]
 800f0b0:	e7c9      	b.n	800f046 <_strtod_l+0x4de>
 800f0b2:	d0ea      	beq.n	800f08a <_strtod_l+0x522>
 800f0b4:	f1c8 0800 	rsb	r8, r8, #0
 800f0b8:	f018 020f 	ands.w	r2, r8, #15
 800f0bc:	d00a      	beq.n	800f0d4 <_strtod_l+0x56c>
 800f0be:	4b13      	ldr	r3, [pc, #76]	; (800f10c <_strtod_l+0x5a4>)
 800f0c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f0c4:	4650      	mov	r0, sl
 800f0c6:	4659      	mov	r1, fp
 800f0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0cc:	f7f1 fb96 	bl	80007fc <__aeabi_ddiv>
 800f0d0:	4682      	mov	sl, r0
 800f0d2:	468b      	mov	fp, r1
 800f0d4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f0d8:	d0d7      	beq.n	800f08a <_strtod_l+0x522>
 800f0da:	f1b8 0f1f 	cmp.w	r8, #31
 800f0de:	dd1f      	ble.n	800f120 <_strtod_l+0x5b8>
 800f0e0:	2500      	movs	r5, #0
 800f0e2:	462e      	mov	r6, r5
 800f0e4:	9507      	str	r5, [sp, #28]
 800f0e6:	9505      	str	r5, [sp, #20]
 800f0e8:	2322      	movs	r3, #34	; 0x22
 800f0ea:	f04f 0a00 	mov.w	sl, #0
 800f0ee:	f04f 0b00 	mov.w	fp, #0
 800f0f2:	6023      	str	r3, [r4, #0]
 800f0f4:	e786      	b.n	800f004 <_strtod_l+0x49c>
 800f0f6:	bf00      	nop
 800f0f8:	0801289d 	.word	0x0801289d
 800f0fc:	080128e0 	.word	0x080128e0
 800f100:	08012895 	.word	0x08012895
 800f104:	08012a24 	.word	0x08012a24
 800f108:	08012cd0 	.word	0x08012cd0
 800f10c:	08012bb0 	.word	0x08012bb0
 800f110:	08012b88 	.word	0x08012b88
 800f114:	7ff00000 	.word	0x7ff00000
 800f118:	7ca00000 	.word	0x7ca00000
 800f11c:	7fefffff 	.word	0x7fefffff
 800f120:	f018 0310 	ands.w	r3, r8, #16
 800f124:	bf18      	it	ne
 800f126:	236a      	movne	r3, #106	; 0x6a
 800f128:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800f4d8 <_strtod_l+0x970>
 800f12c:	9304      	str	r3, [sp, #16]
 800f12e:	4650      	mov	r0, sl
 800f130:	4659      	mov	r1, fp
 800f132:	2300      	movs	r3, #0
 800f134:	f018 0f01 	tst.w	r8, #1
 800f138:	d004      	beq.n	800f144 <_strtod_l+0x5dc>
 800f13a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f13e:	f7f1 fa33 	bl	80005a8 <__aeabi_dmul>
 800f142:	2301      	movs	r3, #1
 800f144:	ea5f 0868 	movs.w	r8, r8, asr #1
 800f148:	f109 0908 	add.w	r9, r9, #8
 800f14c:	d1f2      	bne.n	800f134 <_strtod_l+0x5cc>
 800f14e:	b10b      	cbz	r3, 800f154 <_strtod_l+0x5ec>
 800f150:	4682      	mov	sl, r0
 800f152:	468b      	mov	fp, r1
 800f154:	9b04      	ldr	r3, [sp, #16]
 800f156:	b1c3      	cbz	r3, 800f18a <_strtod_l+0x622>
 800f158:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f15c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f160:	2b00      	cmp	r3, #0
 800f162:	4659      	mov	r1, fp
 800f164:	dd11      	ble.n	800f18a <_strtod_l+0x622>
 800f166:	2b1f      	cmp	r3, #31
 800f168:	f340 8124 	ble.w	800f3b4 <_strtod_l+0x84c>
 800f16c:	2b34      	cmp	r3, #52	; 0x34
 800f16e:	bfde      	ittt	le
 800f170:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800f174:	f04f 33ff 	movle.w	r3, #4294967295
 800f178:	fa03 f202 	lslle.w	r2, r3, r2
 800f17c:	f04f 0a00 	mov.w	sl, #0
 800f180:	bfcc      	ite	gt
 800f182:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f186:	ea02 0b01 	andle.w	fp, r2, r1
 800f18a:	2200      	movs	r2, #0
 800f18c:	2300      	movs	r3, #0
 800f18e:	4650      	mov	r0, sl
 800f190:	4659      	mov	r1, fp
 800f192:	f7f1 fc71 	bl	8000a78 <__aeabi_dcmpeq>
 800f196:	2800      	cmp	r0, #0
 800f198:	d1a2      	bne.n	800f0e0 <_strtod_l+0x578>
 800f19a:	9b07      	ldr	r3, [sp, #28]
 800f19c:	9300      	str	r3, [sp, #0]
 800f19e:	9908      	ldr	r1, [sp, #32]
 800f1a0:	462b      	mov	r3, r5
 800f1a2:	463a      	mov	r2, r7
 800f1a4:	4620      	mov	r0, r4
 800f1a6:	f001 fe2b 	bl	8010e00 <__s2b>
 800f1aa:	9007      	str	r0, [sp, #28]
 800f1ac:	2800      	cmp	r0, #0
 800f1ae:	f43f af1f 	beq.w	800eff0 <_strtod_l+0x488>
 800f1b2:	9b05      	ldr	r3, [sp, #20]
 800f1b4:	1b9e      	subs	r6, r3, r6
 800f1b6:	9b06      	ldr	r3, [sp, #24]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	bfb4      	ite	lt
 800f1bc:	4633      	movlt	r3, r6
 800f1be:	2300      	movge	r3, #0
 800f1c0:	930c      	str	r3, [sp, #48]	; 0x30
 800f1c2:	9b06      	ldr	r3, [sp, #24]
 800f1c4:	2500      	movs	r5, #0
 800f1c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f1ca:	9312      	str	r3, [sp, #72]	; 0x48
 800f1cc:	462e      	mov	r6, r5
 800f1ce:	9b07      	ldr	r3, [sp, #28]
 800f1d0:	4620      	mov	r0, r4
 800f1d2:	6859      	ldr	r1, [r3, #4]
 800f1d4:	f001 fd6c 	bl	8010cb0 <_Balloc>
 800f1d8:	9005      	str	r0, [sp, #20]
 800f1da:	2800      	cmp	r0, #0
 800f1dc:	f43f af0c 	beq.w	800eff8 <_strtod_l+0x490>
 800f1e0:	9b07      	ldr	r3, [sp, #28]
 800f1e2:	691a      	ldr	r2, [r3, #16]
 800f1e4:	3202      	adds	r2, #2
 800f1e6:	f103 010c 	add.w	r1, r3, #12
 800f1ea:	0092      	lsls	r2, r2, #2
 800f1ec:	300c      	adds	r0, #12
 800f1ee:	f7fe fde7 	bl	800ddc0 <memcpy>
 800f1f2:	ec4b ab10 	vmov	d0, sl, fp
 800f1f6:	aa1a      	add	r2, sp, #104	; 0x68
 800f1f8:	a919      	add	r1, sp, #100	; 0x64
 800f1fa:	4620      	mov	r0, r4
 800f1fc:	f002 f946 	bl	801148c <__d2b>
 800f200:	ec4b ab18 	vmov	d8, sl, fp
 800f204:	9018      	str	r0, [sp, #96]	; 0x60
 800f206:	2800      	cmp	r0, #0
 800f208:	f43f aef6 	beq.w	800eff8 <_strtod_l+0x490>
 800f20c:	2101      	movs	r1, #1
 800f20e:	4620      	mov	r0, r4
 800f210:	f001 fe90 	bl	8010f34 <__i2b>
 800f214:	4606      	mov	r6, r0
 800f216:	2800      	cmp	r0, #0
 800f218:	f43f aeee 	beq.w	800eff8 <_strtod_l+0x490>
 800f21c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f21e:	9904      	ldr	r1, [sp, #16]
 800f220:	2b00      	cmp	r3, #0
 800f222:	bfab      	itete	ge
 800f224:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800f226:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800f228:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800f22a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800f22e:	bfac      	ite	ge
 800f230:	eb03 0902 	addge.w	r9, r3, r2
 800f234:	1ad7      	sublt	r7, r2, r3
 800f236:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f238:	eba3 0801 	sub.w	r8, r3, r1
 800f23c:	4490      	add	r8, r2
 800f23e:	4ba1      	ldr	r3, [pc, #644]	; (800f4c4 <_strtod_l+0x95c>)
 800f240:	f108 38ff 	add.w	r8, r8, #4294967295
 800f244:	4598      	cmp	r8, r3
 800f246:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f24a:	f280 80c7 	bge.w	800f3dc <_strtod_l+0x874>
 800f24e:	eba3 0308 	sub.w	r3, r3, r8
 800f252:	2b1f      	cmp	r3, #31
 800f254:	eba2 0203 	sub.w	r2, r2, r3
 800f258:	f04f 0101 	mov.w	r1, #1
 800f25c:	f300 80b1 	bgt.w	800f3c2 <_strtod_l+0x85a>
 800f260:	fa01 f303 	lsl.w	r3, r1, r3
 800f264:	930d      	str	r3, [sp, #52]	; 0x34
 800f266:	2300      	movs	r3, #0
 800f268:	9308      	str	r3, [sp, #32]
 800f26a:	eb09 0802 	add.w	r8, r9, r2
 800f26e:	9b04      	ldr	r3, [sp, #16]
 800f270:	45c1      	cmp	r9, r8
 800f272:	4417      	add	r7, r2
 800f274:	441f      	add	r7, r3
 800f276:	464b      	mov	r3, r9
 800f278:	bfa8      	it	ge
 800f27a:	4643      	movge	r3, r8
 800f27c:	42bb      	cmp	r3, r7
 800f27e:	bfa8      	it	ge
 800f280:	463b      	movge	r3, r7
 800f282:	2b00      	cmp	r3, #0
 800f284:	bfc2      	ittt	gt
 800f286:	eba8 0803 	subgt.w	r8, r8, r3
 800f28a:	1aff      	subgt	r7, r7, r3
 800f28c:	eba9 0903 	subgt.w	r9, r9, r3
 800f290:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f292:	2b00      	cmp	r3, #0
 800f294:	dd17      	ble.n	800f2c6 <_strtod_l+0x75e>
 800f296:	4631      	mov	r1, r6
 800f298:	461a      	mov	r2, r3
 800f29a:	4620      	mov	r0, r4
 800f29c:	f001 ff0a 	bl	80110b4 <__pow5mult>
 800f2a0:	4606      	mov	r6, r0
 800f2a2:	2800      	cmp	r0, #0
 800f2a4:	f43f aea8 	beq.w	800eff8 <_strtod_l+0x490>
 800f2a8:	4601      	mov	r1, r0
 800f2aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f2ac:	4620      	mov	r0, r4
 800f2ae:	f001 fe57 	bl	8010f60 <__multiply>
 800f2b2:	900b      	str	r0, [sp, #44]	; 0x2c
 800f2b4:	2800      	cmp	r0, #0
 800f2b6:	f43f ae9f 	beq.w	800eff8 <_strtod_l+0x490>
 800f2ba:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f2bc:	4620      	mov	r0, r4
 800f2be:	f001 fd37 	bl	8010d30 <_Bfree>
 800f2c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f2c4:	9318      	str	r3, [sp, #96]	; 0x60
 800f2c6:	f1b8 0f00 	cmp.w	r8, #0
 800f2ca:	f300 808c 	bgt.w	800f3e6 <_strtod_l+0x87e>
 800f2ce:	9b06      	ldr	r3, [sp, #24]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	dd08      	ble.n	800f2e6 <_strtod_l+0x77e>
 800f2d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f2d6:	9905      	ldr	r1, [sp, #20]
 800f2d8:	4620      	mov	r0, r4
 800f2da:	f001 feeb 	bl	80110b4 <__pow5mult>
 800f2de:	9005      	str	r0, [sp, #20]
 800f2e0:	2800      	cmp	r0, #0
 800f2e2:	f43f ae89 	beq.w	800eff8 <_strtod_l+0x490>
 800f2e6:	2f00      	cmp	r7, #0
 800f2e8:	dd08      	ble.n	800f2fc <_strtod_l+0x794>
 800f2ea:	9905      	ldr	r1, [sp, #20]
 800f2ec:	463a      	mov	r2, r7
 800f2ee:	4620      	mov	r0, r4
 800f2f0:	f001 ff3a 	bl	8011168 <__lshift>
 800f2f4:	9005      	str	r0, [sp, #20]
 800f2f6:	2800      	cmp	r0, #0
 800f2f8:	f43f ae7e 	beq.w	800eff8 <_strtod_l+0x490>
 800f2fc:	f1b9 0f00 	cmp.w	r9, #0
 800f300:	dd08      	ble.n	800f314 <_strtod_l+0x7ac>
 800f302:	4631      	mov	r1, r6
 800f304:	464a      	mov	r2, r9
 800f306:	4620      	mov	r0, r4
 800f308:	f001 ff2e 	bl	8011168 <__lshift>
 800f30c:	4606      	mov	r6, r0
 800f30e:	2800      	cmp	r0, #0
 800f310:	f43f ae72 	beq.w	800eff8 <_strtod_l+0x490>
 800f314:	9a05      	ldr	r2, [sp, #20]
 800f316:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f318:	4620      	mov	r0, r4
 800f31a:	f001 ffb1 	bl	8011280 <__mdiff>
 800f31e:	4605      	mov	r5, r0
 800f320:	2800      	cmp	r0, #0
 800f322:	f43f ae69 	beq.w	800eff8 <_strtod_l+0x490>
 800f326:	68c3      	ldr	r3, [r0, #12]
 800f328:	930b      	str	r3, [sp, #44]	; 0x2c
 800f32a:	2300      	movs	r3, #0
 800f32c:	60c3      	str	r3, [r0, #12]
 800f32e:	4631      	mov	r1, r6
 800f330:	f001 ff8a 	bl	8011248 <__mcmp>
 800f334:	2800      	cmp	r0, #0
 800f336:	da60      	bge.n	800f3fa <_strtod_l+0x892>
 800f338:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f33a:	ea53 030a 	orrs.w	r3, r3, sl
 800f33e:	f040 8082 	bne.w	800f446 <_strtod_l+0x8de>
 800f342:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f346:	2b00      	cmp	r3, #0
 800f348:	d17d      	bne.n	800f446 <_strtod_l+0x8de>
 800f34a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f34e:	0d1b      	lsrs	r3, r3, #20
 800f350:	051b      	lsls	r3, r3, #20
 800f352:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f356:	d976      	bls.n	800f446 <_strtod_l+0x8de>
 800f358:	696b      	ldr	r3, [r5, #20]
 800f35a:	b913      	cbnz	r3, 800f362 <_strtod_l+0x7fa>
 800f35c:	692b      	ldr	r3, [r5, #16]
 800f35e:	2b01      	cmp	r3, #1
 800f360:	dd71      	ble.n	800f446 <_strtod_l+0x8de>
 800f362:	4629      	mov	r1, r5
 800f364:	2201      	movs	r2, #1
 800f366:	4620      	mov	r0, r4
 800f368:	f001 fefe 	bl	8011168 <__lshift>
 800f36c:	4631      	mov	r1, r6
 800f36e:	4605      	mov	r5, r0
 800f370:	f001 ff6a 	bl	8011248 <__mcmp>
 800f374:	2800      	cmp	r0, #0
 800f376:	dd66      	ble.n	800f446 <_strtod_l+0x8de>
 800f378:	9904      	ldr	r1, [sp, #16]
 800f37a:	4a53      	ldr	r2, [pc, #332]	; (800f4c8 <_strtod_l+0x960>)
 800f37c:	465b      	mov	r3, fp
 800f37e:	2900      	cmp	r1, #0
 800f380:	f000 8081 	beq.w	800f486 <_strtod_l+0x91e>
 800f384:	ea02 010b 	and.w	r1, r2, fp
 800f388:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f38c:	dc7b      	bgt.n	800f486 <_strtod_l+0x91e>
 800f38e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f392:	f77f aea9 	ble.w	800f0e8 <_strtod_l+0x580>
 800f396:	4b4d      	ldr	r3, [pc, #308]	; (800f4cc <_strtod_l+0x964>)
 800f398:	4650      	mov	r0, sl
 800f39a:	4659      	mov	r1, fp
 800f39c:	2200      	movs	r2, #0
 800f39e:	f7f1 f903 	bl	80005a8 <__aeabi_dmul>
 800f3a2:	460b      	mov	r3, r1
 800f3a4:	4303      	orrs	r3, r0
 800f3a6:	bf08      	it	eq
 800f3a8:	2322      	moveq	r3, #34	; 0x22
 800f3aa:	4682      	mov	sl, r0
 800f3ac:	468b      	mov	fp, r1
 800f3ae:	bf08      	it	eq
 800f3b0:	6023      	streq	r3, [r4, #0]
 800f3b2:	e62b      	b.n	800f00c <_strtod_l+0x4a4>
 800f3b4:	f04f 32ff 	mov.w	r2, #4294967295
 800f3b8:	fa02 f303 	lsl.w	r3, r2, r3
 800f3bc:	ea03 0a0a 	and.w	sl, r3, sl
 800f3c0:	e6e3      	b.n	800f18a <_strtod_l+0x622>
 800f3c2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800f3c6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800f3ca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800f3ce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800f3d2:	fa01 f308 	lsl.w	r3, r1, r8
 800f3d6:	9308      	str	r3, [sp, #32]
 800f3d8:	910d      	str	r1, [sp, #52]	; 0x34
 800f3da:	e746      	b.n	800f26a <_strtod_l+0x702>
 800f3dc:	2300      	movs	r3, #0
 800f3de:	9308      	str	r3, [sp, #32]
 800f3e0:	2301      	movs	r3, #1
 800f3e2:	930d      	str	r3, [sp, #52]	; 0x34
 800f3e4:	e741      	b.n	800f26a <_strtod_l+0x702>
 800f3e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f3e8:	4642      	mov	r2, r8
 800f3ea:	4620      	mov	r0, r4
 800f3ec:	f001 febc 	bl	8011168 <__lshift>
 800f3f0:	9018      	str	r0, [sp, #96]	; 0x60
 800f3f2:	2800      	cmp	r0, #0
 800f3f4:	f47f af6b 	bne.w	800f2ce <_strtod_l+0x766>
 800f3f8:	e5fe      	b.n	800eff8 <_strtod_l+0x490>
 800f3fa:	465f      	mov	r7, fp
 800f3fc:	d16e      	bne.n	800f4dc <_strtod_l+0x974>
 800f3fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f400:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f404:	b342      	cbz	r2, 800f458 <_strtod_l+0x8f0>
 800f406:	4a32      	ldr	r2, [pc, #200]	; (800f4d0 <_strtod_l+0x968>)
 800f408:	4293      	cmp	r3, r2
 800f40a:	d128      	bne.n	800f45e <_strtod_l+0x8f6>
 800f40c:	9b04      	ldr	r3, [sp, #16]
 800f40e:	4651      	mov	r1, sl
 800f410:	b1eb      	cbz	r3, 800f44e <_strtod_l+0x8e6>
 800f412:	4b2d      	ldr	r3, [pc, #180]	; (800f4c8 <_strtod_l+0x960>)
 800f414:	403b      	ands	r3, r7
 800f416:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f41a:	f04f 32ff 	mov.w	r2, #4294967295
 800f41e:	d819      	bhi.n	800f454 <_strtod_l+0x8ec>
 800f420:	0d1b      	lsrs	r3, r3, #20
 800f422:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f426:	fa02 f303 	lsl.w	r3, r2, r3
 800f42a:	4299      	cmp	r1, r3
 800f42c:	d117      	bne.n	800f45e <_strtod_l+0x8f6>
 800f42e:	4b29      	ldr	r3, [pc, #164]	; (800f4d4 <_strtod_l+0x96c>)
 800f430:	429f      	cmp	r7, r3
 800f432:	d102      	bne.n	800f43a <_strtod_l+0x8d2>
 800f434:	3101      	adds	r1, #1
 800f436:	f43f addf 	beq.w	800eff8 <_strtod_l+0x490>
 800f43a:	4b23      	ldr	r3, [pc, #140]	; (800f4c8 <_strtod_l+0x960>)
 800f43c:	403b      	ands	r3, r7
 800f43e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f442:	f04f 0a00 	mov.w	sl, #0
 800f446:	9b04      	ldr	r3, [sp, #16]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d1a4      	bne.n	800f396 <_strtod_l+0x82e>
 800f44c:	e5de      	b.n	800f00c <_strtod_l+0x4a4>
 800f44e:	f04f 33ff 	mov.w	r3, #4294967295
 800f452:	e7ea      	b.n	800f42a <_strtod_l+0x8c2>
 800f454:	4613      	mov	r3, r2
 800f456:	e7e8      	b.n	800f42a <_strtod_l+0x8c2>
 800f458:	ea53 030a 	orrs.w	r3, r3, sl
 800f45c:	d08c      	beq.n	800f378 <_strtod_l+0x810>
 800f45e:	9b08      	ldr	r3, [sp, #32]
 800f460:	b1db      	cbz	r3, 800f49a <_strtod_l+0x932>
 800f462:	423b      	tst	r3, r7
 800f464:	d0ef      	beq.n	800f446 <_strtod_l+0x8de>
 800f466:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f468:	9a04      	ldr	r2, [sp, #16]
 800f46a:	4650      	mov	r0, sl
 800f46c:	4659      	mov	r1, fp
 800f46e:	b1c3      	cbz	r3, 800f4a2 <_strtod_l+0x93a>
 800f470:	f7ff fb5c 	bl	800eb2c <sulp>
 800f474:	4602      	mov	r2, r0
 800f476:	460b      	mov	r3, r1
 800f478:	ec51 0b18 	vmov	r0, r1, d8
 800f47c:	f7f0 fede 	bl	800023c <__adddf3>
 800f480:	4682      	mov	sl, r0
 800f482:	468b      	mov	fp, r1
 800f484:	e7df      	b.n	800f446 <_strtod_l+0x8de>
 800f486:	4013      	ands	r3, r2
 800f488:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f48c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f490:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f494:	f04f 3aff 	mov.w	sl, #4294967295
 800f498:	e7d5      	b.n	800f446 <_strtod_l+0x8de>
 800f49a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f49c:	ea13 0f0a 	tst.w	r3, sl
 800f4a0:	e7e0      	b.n	800f464 <_strtod_l+0x8fc>
 800f4a2:	f7ff fb43 	bl	800eb2c <sulp>
 800f4a6:	4602      	mov	r2, r0
 800f4a8:	460b      	mov	r3, r1
 800f4aa:	ec51 0b18 	vmov	r0, r1, d8
 800f4ae:	f7f0 fec3 	bl	8000238 <__aeabi_dsub>
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	4682      	mov	sl, r0
 800f4b8:	468b      	mov	fp, r1
 800f4ba:	f7f1 fadd 	bl	8000a78 <__aeabi_dcmpeq>
 800f4be:	2800      	cmp	r0, #0
 800f4c0:	d0c1      	beq.n	800f446 <_strtod_l+0x8de>
 800f4c2:	e611      	b.n	800f0e8 <_strtod_l+0x580>
 800f4c4:	fffffc02 	.word	0xfffffc02
 800f4c8:	7ff00000 	.word	0x7ff00000
 800f4cc:	39500000 	.word	0x39500000
 800f4d0:	000fffff 	.word	0x000fffff
 800f4d4:	7fefffff 	.word	0x7fefffff
 800f4d8:	080128f8 	.word	0x080128f8
 800f4dc:	4631      	mov	r1, r6
 800f4de:	4628      	mov	r0, r5
 800f4e0:	f002 f830 	bl	8011544 <__ratio>
 800f4e4:	ec59 8b10 	vmov	r8, r9, d0
 800f4e8:	ee10 0a10 	vmov	r0, s0
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f4f2:	4649      	mov	r1, r9
 800f4f4:	f7f1 fad4 	bl	8000aa0 <__aeabi_dcmple>
 800f4f8:	2800      	cmp	r0, #0
 800f4fa:	d07a      	beq.n	800f5f2 <_strtod_l+0xa8a>
 800f4fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d04a      	beq.n	800f598 <_strtod_l+0xa30>
 800f502:	4b95      	ldr	r3, [pc, #596]	; (800f758 <_strtod_l+0xbf0>)
 800f504:	2200      	movs	r2, #0
 800f506:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f50a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f758 <_strtod_l+0xbf0>
 800f50e:	f04f 0800 	mov.w	r8, #0
 800f512:	4b92      	ldr	r3, [pc, #584]	; (800f75c <_strtod_l+0xbf4>)
 800f514:	403b      	ands	r3, r7
 800f516:	930d      	str	r3, [sp, #52]	; 0x34
 800f518:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f51a:	4b91      	ldr	r3, [pc, #580]	; (800f760 <_strtod_l+0xbf8>)
 800f51c:	429a      	cmp	r2, r3
 800f51e:	f040 80b0 	bne.w	800f682 <_strtod_l+0xb1a>
 800f522:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f526:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800f52a:	ec4b ab10 	vmov	d0, sl, fp
 800f52e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f532:	f001 ff2f 	bl	8011394 <__ulp>
 800f536:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f53a:	ec53 2b10 	vmov	r2, r3, d0
 800f53e:	f7f1 f833 	bl	80005a8 <__aeabi_dmul>
 800f542:	4652      	mov	r2, sl
 800f544:	465b      	mov	r3, fp
 800f546:	f7f0 fe79 	bl	800023c <__adddf3>
 800f54a:	460b      	mov	r3, r1
 800f54c:	4983      	ldr	r1, [pc, #524]	; (800f75c <_strtod_l+0xbf4>)
 800f54e:	4a85      	ldr	r2, [pc, #532]	; (800f764 <_strtod_l+0xbfc>)
 800f550:	4019      	ands	r1, r3
 800f552:	4291      	cmp	r1, r2
 800f554:	4682      	mov	sl, r0
 800f556:	d960      	bls.n	800f61a <_strtod_l+0xab2>
 800f558:	ee18 3a90 	vmov	r3, s17
 800f55c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f560:	4293      	cmp	r3, r2
 800f562:	d104      	bne.n	800f56e <_strtod_l+0xa06>
 800f564:	ee18 3a10 	vmov	r3, s16
 800f568:	3301      	adds	r3, #1
 800f56a:	f43f ad45 	beq.w	800eff8 <_strtod_l+0x490>
 800f56e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800f770 <_strtod_l+0xc08>
 800f572:	f04f 3aff 	mov.w	sl, #4294967295
 800f576:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f578:	4620      	mov	r0, r4
 800f57a:	f001 fbd9 	bl	8010d30 <_Bfree>
 800f57e:	9905      	ldr	r1, [sp, #20]
 800f580:	4620      	mov	r0, r4
 800f582:	f001 fbd5 	bl	8010d30 <_Bfree>
 800f586:	4631      	mov	r1, r6
 800f588:	4620      	mov	r0, r4
 800f58a:	f001 fbd1 	bl	8010d30 <_Bfree>
 800f58e:	4629      	mov	r1, r5
 800f590:	4620      	mov	r0, r4
 800f592:	f001 fbcd 	bl	8010d30 <_Bfree>
 800f596:	e61a      	b.n	800f1ce <_strtod_l+0x666>
 800f598:	f1ba 0f00 	cmp.w	sl, #0
 800f59c:	d11b      	bne.n	800f5d6 <_strtod_l+0xa6e>
 800f59e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f5a2:	b9f3      	cbnz	r3, 800f5e2 <_strtod_l+0xa7a>
 800f5a4:	4b6c      	ldr	r3, [pc, #432]	; (800f758 <_strtod_l+0xbf0>)
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	4640      	mov	r0, r8
 800f5aa:	4649      	mov	r1, r9
 800f5ac:	f7f1 fa6e 	bl	8000a8c <__aeabi_dcmplt>
 800f5b0:	b9d0      	cbnz	r0, 800f5e8 <_strtod_l+0xa80>
 800f5b2:	4640      	mov	r0, r8
 800f5b4:	4649      	mov	r1, r9
 800f5b6:	4b6c      	ldr	r3, [pc, #432]	; (800f768 <_strtod_l+0xc00>)
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	f7f0 fff5 	bl	80005a8 <__aeabi_dmul>
 800f5be:	4680      	mov	r8, r0
 800f5c0:	4689      	mov	r9, r1
 800f5c2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f5c6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800f5ca:	9315      	str	r3, [sp, #84]	; 0x54
 800f5cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f5d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f5d4:	e79d      	b.n	800f512 <_strtod_l+0x9aa>
 800f5d6:	f1ba 0f01 	cmp.w	sl, #1
 800f5da:	d102      	bne.n	800f5e2 <_strtod_l+0xa7a>
 800f5dc:	2f00      	cmp	r7, #0
 800f5de:	f43f ad83 	beq.w	800f0e8 <_strtod_l+0x580>
 800f5e2:	4b62      	ldr	r3, [pc, #392]	; (800f76c <_strtod_l+0xc04>)
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	e78e      	b.n	800f506 <_strtod_l+0x99e>
 800f5e8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800f768 <_strtod_l+0xc00>
 800f5ec:	f04f 0800 	mov.w	r8, #0
 800f5f0:	e7e7      	b.n	800f5c2 <_strtod_l+0xa5a>
 800f5f2:	4b5d      	ldr	r3, [pc, #372]	; (800f768 <_strtod_l+0xc00>)
 800f5f4:	4640      	mov	r0, r8
 800f5f6:	4649      	mov	r1, r9
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	f7f0 ffd5 	bl	80005a8 <__aeabi_dmul>
 800f5fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f600:	4680      	mov	r8, r0
 800f602:	4689      	mov	r9, r1
 800f604:	b933      	cbnz	r3, 800f614 <_strtod_l+0xaac>
 800f606:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f60a:	900e      	str	r0, [sp, #56]	; 0x38
 800f60c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f60e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800f612:	e7dd      	b.n	800f5d0 <_strtod_l+0xa68>
 800f614:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800f618:	e7f9      	b.n	800f60e <_strtod_l+0xaa6>
 800f61a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f61e:	9b04      	ldr	r3, [sp, #16]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d1a8      	bne.n	800f576 <_strtod_l+0xa0e>
 800f624:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f628:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f62a:	0d1b      	lsrs	r3, r3, #20
 800f62c:	051b      	lsls	r3, r3, #20
 800f62e:	429a      	cmp	r2, r3
 800f630:	d1a1      	bne.n	800f576 <_strtod_l+0xa0e>
 800f632:	4640      	mov	r0, r8
 800f634:	4649      	mov	r1, r9
 800f636:	f7f1 faff 	bl	8000c38 <__aeabi_d2lz>
 800f63a:	f7f0 ff87 	bl	800054c <__aeabi_l2d>
 800f63e:	4602      	mov	r2, r0
 800f640:	460b      	mov	r3, r1
 800f642:	4640      	mov	r0, r8
 800f644:	4649      	mov	r1, r9
 800f646:	f7f0 fdf7 	bl	8000238 <__aeabi_dsub>
 800f64a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f64c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f650:	ea43 030a 	orr.w	r3, r3, sl
 800f654:	4313      	orrs	r3, r2
 800f656:	4680      	mov	r8, r0
 800f658:	4689      	mov	r9, r1
 800f65a:	d055      	beq.n	800f708 <_strtod_l+0xba0>
 800f65c:	a336      	add	r3, pc, #216	; (adr r3, 800f738 <_strtod_l+0xbd0>)
 800f65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f662:	f7f1 fa13 	bl	8000a8c <__aeabi_dcmplt>
 800f666:	2800      	cmp	r0, #0
 800f668:	f47f acd0 	bne.w	800f00c <_strtod_l+0x4a4>
 800f66c:	a334      	add	r3, pc, #208	; (adr r3, 800f740 <_strtod_l+0xbd8>)
 800f66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f672:	4640      	mov	r0, r8
 800f674:	4649      	mov	r1, r9
 800f676:	f7f1 fa27 	bl	8000ac8 <__aeabi_dcmpgt>
 800f67a:	2800      	cmp	r0, #0
 800f67c:	f43f af7b 	beq.w	800f576 <_strtod_l+0xa0e>
 800f680:	e4c4      	b.n	800f00c <_strtod_l+0x4a4>
 800f682:	9b04      	ldr	r3, [sp, #16]
 800f684:	b333      	cbz	r3, 800f6d4 <_strtod_l+0xb6c>
 800f686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f688:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f68c:	d822      	bhi.n	800f6d4 <_strtod_l+0xb6c>
 800f68e:	a32e      	add	r3, pc, #184	; (adr r3, 800f748 <_strtod_l+0xbe0>)
 800f690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f694:	4640      	mov	r0, r8
 800f696:	4649      	mov	r1, r9
 800f698:	f7f1 fa02 	bl	8000aa0 <__aeabi_dcmple>
 800f69c:	b1a0      	cbz	r0, 800f6c8 <_strtod_l+0xb60>
 800f69e:	4649      	mov	r1, r9
 800f6a0:	4640      	mov	r0, r8
 800f6a2:	f7f1 fa59 	bl	8000b58 <__aeabi_d2uiz>
 800f6a6:	2801      	cmp	r0, #1
 800f6a8:	bf38      	it	cc
 800f6aa:	2001      	movcc	r0, #1
 800f6ac:	f7f0 ff02 	bl	80004b4 <__aeabi_ui2d>
 800f6b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6b2:	4680      	mov	r8, r0
 800f6b4:	4689      	mov	r9, r1
 800f6b6:	bb23      	cbnz	r3, 800f702 <_strtod_l+0xb9a>
 800f6b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f6bc:	9010      	str	r0, [sp, #64]	; 0x40
 800f6be:	9311      	str	r3, [sp, #68]	; 0x44
 800f6c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f6c4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f6c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f6cc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f6d0:	1a9b      	subs	r3, r3, r2
 800f6d2:	9309      	str	r3, [sp, #36]	; 0x24
 800f6d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f6d8:	eeb0 0a48 	vmov.f32	s0, s16
 800f6dc:	eef0 0a68 	vmov.f32	s1, s17
 800f6e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f6e4:	f001 fe56 	bl	8011394 <__ulp>
 800f6e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f6ec:	ec53 2b10 	vmov	r2, r3, d0
 800f6f0:	f7f0 ff5a 	bl	80005a8 <__aeabi_dmul>
 800f6f4:	ec53 2b18 	vmov	r2, r3, d8
 800f6f8:	f7f0 fda0 	bl	800023c <__adddf3>
 800f6fc:	4682      	mov	sl, r0
 800f6fe:	468b      	mov	fp, r1
 800f700:	e78d      	b.n	800f61e <_strtod_l+0xab6>
 800f702:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800f706:	e7db      	b.n	800f6c0 <_strtod_l+0xb58>
 800f708:	a311      	add	r3, pc, #68	; (adr r3, 800f750 <_strtod_l+0xbe8>)
 800f70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f70e:	f7f1 f9bd 	bl	8000a8c <__aeabi_dcmplt>
 800f712:	e7b2      	b.n	800f67a <_strtod_l+0xb12>
 800f714:	2300      	movs	r3, #0
 800f716:	930a      	str	r3, [sp, #40]	; 0x28
 800f718:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f71a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f71c:	6013      	str	r3, [r2, #0]
 800f71e:	f7ff ba6b 	b.w	800ebf8 <_strtod_l+0x90>
 800f722:	2a65      	cmp	r2, #101	; 0x65
 800f724:	f43f ab5f 	beq.w	800ede6 <_strtod_l+0x27e>
 800f728:	2a45      	cmp	r2, #69	; 0x45
 800f72a:	f43f ab5c 	beq.w	800ede6 <_strtod_l+0x27e>
 800f72e:	2301      	movs	r3, #1
 800f730:	f7ff bb94 	b.w	800ee5c <_strtod_l+0x2f4>
 800f734:	f3af 8000 	nop.w
 800f738:	94a03595 	.word	0x94a03595
 800f73c:	3fdfffff 	.word	0x3fdfffff
 800f740:	35afe535 	.word	0x35afe535
 800f744:	3fe00000 	.word	0x3fe00000
 800f748:	ffc00000 	.word	0xffc00000
 800f74c:	41dfffff 	.word	0x41dfffff
 800f750:	94a03595 	.word	0x94a03595
 800f754:	3fcfffff 	.word	0x3fcfffff
 800f758:	3ff00000 	.word	0x3ff00000
 800f75c:	7ff00000 	.word	0x7ff00000
 800f760:	7fe00000 	.word	0x7fe00000
 800f764:	7c9fffff 	.word	0x7c9fffff
 800f768:	3fe00000 	.word	0x3fe00000
 800f76c:	bff00000 	.word	0xbff00000
 800f770:	7fefffff 	.word	0x7fefffff

0800f774 <_strtod_r>:
 800f774:	4b01      	ldr	r3, [pc, #4]	; (800f77c <_strtod_r+0x8>)
 800f776:	f7ff b9f7 	b.w	800eb68 <_strtod_l>
 800f77a:	bf00      	nop
 800f77c:	2000017c 	.word	0x2000017c

0800f780 <_strtol_l.constprop.0>:
 800f780:	2b01      	cmp	r3, #1
 800f782:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f786:	d001      	beq.n	800f78c <_strtol_l.constprop.0+0xc>
 800f788:	2b24      	cmp	r3, #36	; 0x24
 800f78a:	d906      	bls.n	800f79a <_strtol_l.constprop.0+0x1a>
 800f78c:	f7fe faee 	bl	800dd6c <__errno>
 800f790:	2316      	movs	r3, #22
 800f792:	6003      	str	r3, [r0, #0]
 800f794:	2000      	movs	r0, #0
 800f796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f79a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f880 <_strtol_l.constprop.0+0x100>
 800f79e:	460d      	mov	r5, r1
 800f7a0:	462e      	mov	r6, r5
 800f7a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f7a6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800f7aa:	f017 0708 	ands.w	r7, r7, #8
 800f7ae:	d1f7      	bne.n	800f7a0 <_strtol_l.constprop.0+0x20>
 800f7b0:	2c2d      	cmp	r4, #45	; 0x2d
 800f7b2:	d132      	bne.n	800f81a <_strtol_l.constprop.0+0x9a>
 800f7b4:	782c      	ldrb	r4, [r5, #0]
 800f7b6:	2701      	movs	r7, #1
 800f7b8:	1cb5      	adds	r5, r6, #2
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d05b      	beq.n	800f876 <_strtol_l.constprop.0+0xf6>
 800f7be:	2b10      	cmp	r3, #16
 800f7c0:	d109      	bne.n	800f7d6 <_strtol_l.constprop.0+0x56>
 800f7c2:	2c30      	cmp	r4, #48	; 0x30
 800f7c4:	d107      	bne.n	800f7d6 <_strtol_l.constprop.0+0x56>
 800f7c6:	782c      	ldrb	r4, [r5, #0]
 800f7c8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f7cc:	2c58      	cmp	r4, #88	; 0x58
 800f7ce:	d14d      	bne.n	800f86c <_strtol_l.constprop.0+0xec>
 800f7d0:	786c      	ldrb	r4, [r5, #1]
 800f7d2:	2310      	movs	r3, #16
 800f7d4:	3502      	adds	r5, #2
 800f7d6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f7da:	f108 38ff 	add.w	r8, r8, #4294967295
 800f7de:	f04f 0c00 	mov.w	ip, #0
 800f7e2:	fbb8 f9f3 	udiv	r9, r8, r3
 800f7e6:	4666      	mov	r6, ip
 800f7e8:	fb03 8a19 	mls	sl, r3, r9, r8
 800f7ec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800f7f0:	f1be 0f09 	cmp.w	lr, #9
 800f7f4:	d816      	bhi.n	800f824 <_strtol_l.constprop.0+0xa4>
 800f7f6:	4674      	mov	r4, lr
 800f7f8:	42a3      	cmp	r3, r4
 800f7fa:	dd24      	ble.n	800f846 <_strtol_l.constprop.0+0xc6>
 800f7fc:	f1bc 0f00 	cmp.w	ip, #0
 800f800:	db1e      	blt.n	800f840 <_strtol_l.constprop.0+0xc0>
 800f802:	45b1      	cmp	r9, r6
 800f804:	d31c      	bcc.n	800f840 <_strtol_l.constprop.0+0xc0>
 800f806:	d101      	bne.n	800f80c <_strtol_l.constprop.0+0x8c>
 800f808:	45a2      	cmp	sl, r4
 800f80a:	db19      	blt.n	800f840 <_strtol_l.constprop.0+0xc0>
 800f80c:	fb06 4603 	mla	r6, r6, r3, r4
 800f810:	f04f 0c01 	mov.w	ip, #1
 800f814:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f818:	e7e8      	b.n	800f7ec <_strtol_l.constprop.0+0x6c>
 800f81a:	2c2b      	cmp	r4, #43	; 0x2b
 800f81c:	bf04      	itt	eq
 800f81e:	782c      	ldrbeq	r4, [r5, #0]
 800f820:	1cb5      	addeq	r5, r6, #2
 800f822:	e7ca      	b.n	800f7ba <_strtol_l.constprop.0+0x3a>
 800f824:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800f828:	f1be 0f19 	cmp.w	lr, #25
 800f82c:	d801      	bhi.n	800f832 <_strtol_l.constprop.0+0xb2>
 800f82e:	3c37      	subs	r4, #55	; 0x37
 800f830:	e7e2      	b.n	800f7f8 <_strtol_l.constprop.0+0x78>
 800f832:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800f836:	f1be 0f19 	cmp.w	lr, #25
 800f83a:	d804      	bhi.n	800f846 <_strtol_l.constprop.0+0xc6>
 800f83c:	3c57      	subs	r4, #87	; 0x57
 800f83e:	e7db      	b.n	800f7f8 <_strtol_l.constprop.0+0x78>
 800f840:	f04f 3cff 	mov.w	ip, #4294967295
 800f844:	e7e6      	b.n	800f814 <_strtol_l.constprop.0+0x94>
 800f846:	f1bc 0f00 	cmp.w	ip, #0
 800f84a:	da05      	bge.n	800f858 <_strtol_l.constprop.0+0xd8>
 800f84c:	2322      	movs	r3, #34	; 0x22
 800f84e:	6003      	str	r3, [r0, #0]
 800f850:	4646      	mov	r6, r8
 800f852:	b942      	cbnz	r2, 800f866 <_strtol_l.constprop.0+0xe6>
 800f854:	4630      	mov	r0, r6
 800f856:	e79e      	b.n	800f796 <_strtol_l.constprop.0+0x16>
 800f858:	b107      	cbz	r7, 800f85c <_strtol_l.constprop.0+0xdc>
 800f85a:	4276      	negs	r6, r6
 800f85c:	2a00      	cmp	r2, #0
 800f85e:	d0f9      	beq.n	800f854 <_strtol_l.constprop.0+0xd4>
 800f860:	f1bc 0f00 	cmp.w	ip, #0
 800f864:	d000      	beq.n	800f868 <_strtol_l.constprop.0+0xe8>
 800f866:	1e69      	subs	r1, r5, #1
 800f868:	6011      	str	r1, [r2, #0]
 800f86a:	e7f3      	b.n	800f854 <_strtol_l.constprop.0+0xd4>
 800f86c:	2430      	movs	r4, #48	; 0x30
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d1b1      	bne.n	800f7d6 <_strtol_l.constprop.0+0x56>
 800f872:	2308      	movs	r3, #8
 800f874:	e7af      	b.n	800f7d6 <_strtol_l.constprop.0+0x56>
 800f876:	2c30      	cmp	r4, #48	; 0x30
 800f878:	d0a5      	beq.n	800f7c6 <_strtol_l.constprop.0+0x46>
 800f87a:	230a      	movs	r3, #10
 800f87c:	e7ab      	b.n	800f7d6 <_strtol_l.constprop.0+0x56>
 800f87e:	bf00      	nop
 800f880:	08012921 	.word	0x08012921

0800f884 <_strtol_r>:
 800f884:	f7ff bf7c 	b.w	800f780 <_strtol_l.constprop.0>

0800f888 <strtol>:
 800f888:	4613      	mov	r3, r2
 800f88a:	460a      	mov	r2, r1
 800f88c:	4601      	mov	r1, r0
 800f88e:	4802      	ldr	r0, [pc, #8]	; (800f898 <strtol+0x10>)
 800f890:	6800      	ldr	r0, [r0, #0]
 800f892:	f7ff bf75 	b.w	800f780 <_strtol_l.constprop.0>
 800f896:	bf00      	nop
 800f898:	20000114 	.word	0x20000114

0800f89c <quorem>:
 800f89c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8a0:	6903      	ldr	r3, [r0, #16]
 800f8a2:	690c      	ldr	r4, [r1, #16]
 800f8a4:	42a3      	cmp	r3, r4
 800f8a6:	4607      	mov	r7, r0
 800f8a8:	f2c0 8081 	blt.w	800f9ae <quorem+0x112>
 800f8ac:	3c01      	subs	r4, #1
 800f8ae:	f101 0814 	add.w	r8, r1, #20
 800f8b2:	f100 0514 	add.w	r5, r0, #20
 800f8b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f8ba:	9301      	str	r3, [sp, #4]
 800f8bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f8c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f8c4:	3301      	adds	r3, #1
 800f8c6:	429a      	cmp	r2, r3
 800f8c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f8cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f8d0:	fbb2 f6f3 	udiv	r6, r2, r3
 800f8d4:	d331      	bcc.n	800f93a <quorem+0x9e>
 800f8d6:	f04f 0e00 	mov.w	lr, #0
 800f8da:	4640      	mov	r0, r8
 800f8dc:	46ac      	mov	ip, r5
 800f8de:	46f2      	mov	sl, lr
 800f8e0:	f850 2b04 	ldr.w	r2, [r0], #4
 800f8e4:	b293      	uxth	r3, r2
 800f8e6:	fb06 e303 	mla	r3, r6, r3, lr
 800f8ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f8ee:	b29b      	uxth	r3, r3
 800f8f0:	ebaa 0303 	sub.w	r3, sl, r3
 800f8f4:	f8dc a000 	ldr.w	sl, [ip]
 800f8f8:	0c12      	lsrs	r2, r2, #16
 800f8fa:	fa13 f38a 	uxtah	r3, r3, sl
 800f8fe:	fb06 e202 	mla	r2, r6, r2, lr
 800f902:	9300      	str	r3, [sp, #0]
 800f904:	9b00      	ldr	r3, [sp, #0]
 800f906:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f90a:	b292      	uxth	r2, r2
 800f90c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f910:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f914:	f8bd 3000 	ldrh.w	r3, [sp]
 800f918:	4581      	cmp	r9, r0
 800f91a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f91e:	f84c 3b04 	str.w	r3, [ip], #4
 800f922:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f926:	d2db      	bcs.n	800f8e0 <quorem+0x44>
 800f928:	f855 300b 	ldr.w	r3, [r5, fp]
 800f92c:	b92b      	cbnz	r3, 800f93a <quorem+0x9e>
 800f92e:	9b01      	ldr	r3, [sp, #4]
 800f930:	3b04      	subs	r3, #4
 800f932:	429d      	cmp	r5, r3
 800f934:	461a      	mov	r2, r3
 800f936:	d32e      	bcc.n	800f996 <quorem+0xfa>
 800f938:	613c      	str	r4, [r7, #16]
 800f93a:	4638      	mov	r0, r7
 800f93c:	f001 fc84 	bl	8011248 <__mcmp>
 800f940:	2800      	cmp	r0, #0
 800f942:	db24      	blt.n	800f98e <quorem+0xf2>
 800f944:	3601      	adds	r6, #1
 800f946:	4628      	mov	r0, r5
 800f948:	f04f 0c00 	mov.w	ip, #0
 800f94c:	f858 2b04 	ldr.w	r2, [r8], #4
 800f950:	f8d0 e000 	ldr.w	lr, [r0]
 800f954:	b293      	uxth	r3, r2
 800f956:	ebac 0303 	sub.w	r3, ip, r3
 800f95a:	0c12      	lsrs	r2, r2, #16
 800f95c:	fa13 f38e 	uxtah	r3, r3, lr
 800f960:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f964:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f968:	b29b      	uxth	r3, r3
 800f96a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f96e:	45c1      	cmp	r9, r8
 800f970:	f840 3b04 	str.w	r3, [r0], #4
 800f974:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f978:	d2e8      	bcs.n	800f94c <quorem+0xb0>
 800f97a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f97e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f982:	b922      	cbnz	r2, 800f98e <quorem+0xf2>
 800f984:	3b04      	subs	r3, #4
 800f986:	429d      	cmp	r5, r3
 800f988:	461a      	mov	r2, r3
 800f98a:	d30a      	bcc.n	800f9a2 <quorem+0x106>
 800f98c:	613c      	str	r4, [r7, #16]
 800f98e:	4630      	mov	r0, r6
 800f990:	b003      	add	sp, #12
 800f992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f996:	6812      	ldr	r2, [r2, #0]
 800f998:	3b04      	subs	r3, #4
 800f99a:	2a00      	cmp	r2, #0
 800f99c:	d1cc      	bne.n	800f938 <quorem+0x9c>
 800f99e:	3c01      	subs	r4, #1
 800f9a0:	e7c7      	b.n	800f932 <quorem+0x96>
 800f9a2:	6812      	ldr	r2, [r2, #0]
 800f9a4:	3b04      	subs	r3, #4
 800f9a6:	2a00      	cmp	r2, #0
 800f9a8:	d1f0      	bne.n	800f98c <quorem+0xf0>
 800f9aa:	3c01      	subs	r4, #1
 800f9ac:	e7eb      	b.n	800f986 <quorem+0xea>
 800f9ae:	2000      	movs	r0, #0
 800f9b0:	e7ee      	b.n	800f990 <quorem+0xf4>
 800f9b2:	0000      	movs	r0, r0
 800f9b4:	0000      	movs	r0, r0
	...

0800f9b8 <_dtoa_r>:
 800f9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9bc:	ed2d 8b04 	vpush	{d8-d9}
 800f9c0:	ec57 6b10 	vmov	r6, r7, d0
 800f9c4:	b093      	sub	sp, #76	; 0x4c
 800f9c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f9c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f9cc:	9106      	str	r1, [sp, #24]
 800f9ce:	ee10 aa10 	vmov	sl, s0
 800f9d2:	4604      	mov	r4, r0
 800f9d4:	9209      	str	r2, [sp, #36]	; 0x24
 800f9d6:	930c      	str	r3, [sp, #48]	; 0x30
 800f9d8:	46bb      	mov	fp, r7
 800f9da:	b975      	cbnz	r5, 800f9fa <_dtoa_r+0x42>
 800f9dc:	2010      	movs	r0, #16
 800f9de:	f001 f94d 	bl	8010c7c <malloc>
 800f9e2:	4602      	mov	r2, r0
 800f9e4:	6260      	str	r0, [r4, #36]	; 0x24
 800f9e6:	b920      	cbnz	r0, 800f9f2 <_dtoa_r+0x3a>
 800f9e8:	4ba7      	ldr	r3, [pc, #668]	; (800fc88 <_dtoa_r+0x2d0>)
 800f9ea:	21ea      	movs	r1, #234	; 0xea
 800f9ec:	48a7      	ldr	r0, [pc, #668]	; (800fc8c <_dtoa_r+0x2d4>)
 800f9ee:	f002 f8ad 	bl	8011b4c <__assert_func>
 800f9f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f9f6:	6005      	str	r5, [r0, #0]
 800f9f8:	60c5      	str	r5, [r0, #12]
 800f9fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f9fc:	6819      	ldr	r1, [r3, #0]
 800f9fe:	b151      	cbz	r1, 800fa16 <_dtoa_r+0x5e>
 800fa00:	685a      	ldr	r2, [r3, #4]
 800fa02:	604a      	str	r2, [r1, #4]
 800fa04:	2301      	movs	r3, #1
 800fa06:	4093      	lsls	r3, r2
 800fa08:	608b      	str	r3, [r1, #8]
 800fa0a:	4620      	mov	r0, r4
 800fa0c:	f001 f990 	bl	8010d30 <_Bfree>
 800fa10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa12:	2200      	movs	r2, #0
 800fa14:	601a      	str	r2, [r3, #0]
 800fa16:	1e3b      	subs	r3, r7, #0
 800fa18:	bfaa      	itet	ge
 800fa1a:	2300      	movge	r3, #0
 800fa1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800fa20:	f8c8 3000 	strge.w	r3, [r8]
 800fa24:	4b9a      	ldr	r3, [pc, #616]	; (800fc90 <_dtoa_r+0x2d8>)
 800fa26:	bfbc      	itt	lt
 800fa28:	2201      	movlt	r2, #1
 800fa2a:	f8c8 2000 	strlt.w	r2, [r8]
 800fa2e:	ea33 030b 	bics.w	r3, r3, fp
 800fa32:	d11b      	bne.n	800fa6c <_dtoa_r+0xb4>
 800fa34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fa36:	f242 730f 	movw	r3, #9999	; 0x270f
 800fa3a:	6013      	str	r3, [r2, #0]
 800fa3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fa40:	4333      	orrs	r3, r6
 800fa42:	f000 8592 	beq.w	801056a <_dtoa_r+0xbb2>
 800fa46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fa48:	b963      	cbnz	r3, 800fa64 <_dtoa_r+0xac>
 800fa4a:	4b92      	ldr	r3, [pc, #584]	; (800fc94 <_dtoa_r+0x2dc>)
 800fa4c:	e022      	b.n	800fa94 <_dtoa_r+0xdc>
 800fa4e:	4b92      	ldr	r3, [pc, #584]	; (800fc98 <_dtoa_r+0x2e0>)
 800fa50:	9301      	str	r3, [sp, #4]
 800fa52:	3308      	adds	r3, #8
 800fa54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fa56:	6013      	str	r3, [r2, #0]
 800fa58:	9801      	ldr	r0, [sp, #4]
 800fa5a:	b013      	add	sp, #76	; 0x4c
 800fa5c:	ecbd 8b04 	vpop	{d8-d9}
 800fa60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa64:	4b8b      	ldr	r3, [pc, #556]	; (800fc94 <_dtoa_r+0x2dc>)
 800fa66:	9301      	str	r3, [sp, #4]
 800fa68:	3303      	adds	r3, #3
 800fa6a:	e7f3      	b.n	800fa54 <_dtoa_r+0x9c>
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	2300      	movs	r3, #0
 800fa70:	4650      	mov	r0, sl
 800fa72:	4659      	mov	r1, fp
 800fa74:	f7f1 f800 	bl	8000a78 <__aeabi_dcmpeq>
 800fa78:	ec4b ab19 	vmov	d9, sl, fp
 800fa7c:	4680      	mov	r8, r0
 800fa7e:	b158      	cbz	r0, 800fa98 <_dtoa_r+0xe0>
 800fa80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fa82:	2301      	movs	r3, #1
 800fa84:	6013      	str	r3, [r2, #0]
 800fa86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	f000 856b 	beq.w	8010564 <_dtoa_r+0xbac>
 800fa8e:	4883      	ldr	r0, [pc, #524]	; (800fc9c <_dtoa_r+0x2e4>)
 800fa90:	6018      	str	r0, [r3, #0]
 800fa92:	1e43      	subs	r3, r0, #1
 800fa94:	9301      	str	r3, [sp, #4]
 800fa96:	e7df      	b.n	800fa58 <_dtoa_r+0xa0>
 800fa98:	ec4b ab10 	vmov	d0, sl, fp
 800fa9c:	aa10      	add	r2, sp, #64	; 0x40
 800fa9e:	a911      	add	r1, sp, #68	; 0x44
 800faa0:	4620      	mov	r0, r4
 800faa2:	f001 fcf3 	bl	801148c <__d2b>
 800faa6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800faaa:	ee08 0a10 	vmov	s16, r0
 800faae:	2d00      	cmp	r5, #0
 800fab0:	f000 8084 	beq.w	800fbbc <_dtoa_r+0x204>
 800fab4:	ee19 3a90 	vmov	r3, s19
 800fab8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fabc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fac0:	4656      	mov	r6, sl
 800fac2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fac6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800faca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800face:	4b74      	ldr	r3, [pc, #464]	; (800fca0 <_dtoa_r+0x2e8>)
 800fad0:	2200      	movs	r2, #0
 800fad2:	4630      	mov	r0, r6
 800fad4:	4639      	mov	r1, r7
 800fad6:	f7f0 fbaf 	bl	8000238 <__aeabi_dsub>
 800fada:	a365      	add	r3, pc, #404	; (adr r3, 800fc70 <_dtoa_r+0x2b8>)
 800fadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fae0:	f7f0 fd62 	bl	80005a8 <__aeabi_dmul>
 800fae4:	a364      	add	r3, pc, #400	; (adr r3, 800fc78 <_dtoa_r+0x2c0>)
 800fae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faea:	f7f0 fba7 	bl	800023c <__adddf3>
 800faee:	4606      	mov	r6, r0
 800faf0:	4628      	mov	r0, r5
 800faf2:	460f      	mov	r7, r1
 800faf4:	f7f0 fcee 	bl	80004d4 <__aeabi_i2d>
 800faf8:	a361      	add	r3, pc, #388	; (adr r3, 800fc80 <_dtoa_r+0x2c8>)
 800fafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fafe:	f7f0 fd53 	bl	80005a8 <__aeabi_dmul>
 800fb02:	4602      	mov	r2, r0
 800fb04:	460b      	mov	r3, r1
 800fb06:	4630      	mov	r0, r6
 800fb08:	4639      	mov	r1, r7
 800fb0a:	f7f0 fb97 	bl	800023c <__adddf3>
 800fb0e:	4606      	mov	r6, r0
 800fb10:	460f      	mov	r7, r1
 800fb12:	f7f0 fff9 	bl	8000b08 <__aeabi_d2iz>
 800fb16:	2200      	movs	r2, #0
 800fb18:	9000      	str	r0, [sp, #0]
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	4630      	mov	r0, r6
 800fb1e:	4639      	mov	r1, r7
 800fb20:	f7f0 ffb4 	bl	8000a8c <__aeabi_dcmplt>
 800fb24:	b150      	cbz	r0, 800fb3c <_dtoa_r+0x184>
 800fb26:	9800      	ldr	r0, [sp, #0]
 800fb28:	f7f0 fcd4 	bl	80004d4 <__aeabi_i2d>
 800fb2c:	4632      	mov	r2, r6
 800fb2e:	463b      	mov	r3, r7
 800fb30:	f7f0 ffa2 	bl	8000a78 <__aeabi_dcmpeq>
 800fb34:	b910      	cbnz	r0, 800fb3c <_dtoa_r+0x184>
 800fb36:	9b00      	ldr	r3, [sp, #0]
 800fb38:	3b01      	subs	r3, #1
 800fb3a:	9300      	str	r3, [sp, #0]
 800fb3c:	9b00      	ldr	r3, [sp, #0]
 800fb3e:	2b16      	cmp	r3, #22
 800fb40:	d85a      	bhi.n	800fbf8 <_dtoa_r+0x240>
 800fb42:	9a00      	ldr	r2, [sp, #0]
 800fb44:	4b57      	ldr	r3, [pc, #348]	; (800fca4 <_dtoa_r+0x2ec>)
 800fb46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb4e:	ec51 0b19 	vmov	r0, r1, d9
 800fb52:	f7f0 ff9b 	bl	8000a8c <__aeabi_dcmplt>
 800fb56:	2800      	cmp	r0, #0
 800fb58:	d050      	beq.n	800fbfc <_dtoa_r+0x244>
 800fb5a:	9b00      	ldr	r3, [sp, #0]
 800fb5c:	3b01      	subs	r3, #1
 800fb5e:	9300      	str	r3, [sp, #0]
 800fb60:	2300      	movs	r3, #0
 800fb62:	930b      	str	r3, [sp, #44]	; 0x2c
 800fb64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fb66:	1b5d      	subs	r5, r3, r5
 800fb68:	1e6b      	subs	r3, r5, #1
 800fb6a:	9305      	str	r3, [sp, #20]
 800fb6c:	bf45      	ittet	mi
 800fb6e:	f1c5 0301 	rsbmi	r3, r5, #1
 800fb72:	9304      	strmi	r3, [sp, #16]
 800fb74:	2300      	movpl	r3, #0
 800fb76:	2300      	movmi	r3, #0
 800fb78:	bf4c      	ite	mi
 800fb7a:	9305      	strmi	r3, [sp, #20]
 800fb7c:	9304      	strpl	r3, [sp, #16]
 800fb7e:	9b00      	ldr	r3, [sp, #0]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	db3d      	blt.n	800fc00 <_dtoa_r+0x248>
 800fb84:	9b05      	ldr	r3, [sp, #20]
 800fb86:	9a00      	ldr	r2, [sp, #0]
 800fb88:	920a      	str	r2, [sp, #40]	; 0x28
 800fb8a:	4413      	add	r3, r2
 800fb8c:	9305      	str	r3, [sp, #20]
 800fb8e:	2300      	movs	r3, #0
 800fb90:	9307      	str	r3, [sp, #28]
 800fb92:	9b06      	ldr	r3, [sp, #24]
 800fb94:	2b09      	cmp	r3, #9
 800fb96:	f200 8089 	bhi.w	800fcac <_dtoa_r+0x2f4>
 800fb9a:	2b05      	cmp	r3, #5
 800fb9c:	bfc4      	itt	gt
 800fb9e:	3b04      	subgt	r3, #4
 800fba0:	9306      	strgt	r3, [sp, #24]
 800fba2:	9b06      	ldr	r3, [sp, #24]
 800fba4:	f1a3 0302 	sub.w	r3, r3, #2
 800fba8:	bfcc      	ite	gt
 800fbaa:	2500      	movgt	r5, #0
 800fbac:	2501      	movle	r5, #1
 800fbae:	2b03      	cmp	r3, #3
 800fbb0:	f200 8087 	bhi.w	800fcc2 <_dtoa_r+0x30a>
 800fbb4:	e8df f003 	tbb	[pc, r3]
 800fbb8:	59383a2d 	.word	0x59383a2d
 800fbbc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fbc0:	441d      	add	r5, r3
 800fbc2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fbc6:	2b20      	cmp	r3, #32
 800fbc8:	bfc1      	itttt	gt
 800fbca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fbce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fbd2:	fa0b f303 	lslgt.w	r3, fp, r3
 800fbd6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800fbda:	bfda      	itte	le
 800fbdc:	f1c3 0320 	rsble	r3, r3, #32
 800fbe0:	fa06 f003 	lslle.w	r0, r6, r3
 800fbe4:	4318      	orrgt	r0, r3
 800fbe6:	f7f0 fc65 	bl	80004b4 <__aeabi_ui2d>
 800fbea:	2301      	movs	r3, #1
 800fbec:	4606      	mov	r6, r0
 800fbee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fbf2:	3d01      	subs	r5, #1
 800fbf4:	930e      	str	r3, [sp, #56]	; 0x38
 800fbf6:	e76a      	b.n	800face <_dtoa_r+0x116>
 800fbf8:	2301      	movs	r3, #1
 800fbfa:	e7b2      	b.n	800fb62 <_dtoa_r+0x1aa>
 800fbfc:	900b      	str	r0, [sp, #44]	; 0x2c
 800fbfe:	e7b1      	b.n	800fb64 <_dtoa_r+0x1ac>
 800fc00:	9b04      	ldr	r3, [sp, #16]
 800fc02:	9a00      	ldr	r2, [sp, #0]
 800fc04:	1a9b      	subs	r3, r3, r2
 800fc06:	9304      	str	r3, [sp, #16]
 800fc08:	4253      	negs	r3, r2
 800fc0a:	9307      	str	r3, [sp, #28]
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	930a      	str	r3, [sp, #40]	; 0x28
 800fc10:	e7bf      	b.n	800fb92 <_dtoa_r+0x1da>
 800fc12:	2300      	movs	r3, #0
 800fc14:	9308      	str	r3, [sp, #32]
 800fc16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	dc55      	bgt.n	800fcc8 <_dtoa_r+0x310>
 800fc1c:	2301      	movs	r3, #1
 800fc1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fc22:	461a      	mov	r2, r3
 800fc24:	9209      	str	r2, [sp, #36]	; 0x24
 800fc26:	e00c      	b.n	800fc42 <_dtoa_r+0x28a>
 800fc28:	2301      	movs	r3, #1
 800fc2a:	e7f3      	b.n	800fc14 <_dtoa_r+0x25c>
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc30:	9308      	str	r3, [sp, #32]
 800fc32:	9b00      	ldr	r3, [sp, #0]
 800fc34:	4413      	add	r3, r2
 800fc36:	9302      	str	r3, [sp, #8]
 800fc38:	3301      	adds	r3, #1
 800fc3a:	2b01      	cmp	r3, #1
 800fc3c:	9303      	str	r3, [sp, #12]
 800fc3e:	bfb8      	it	lt
 800fc40:	2301      	movlt	r3, #1
 800fc42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fc44:	2200      	movs	r2, #0
 800fc46:	6042      	str	r2, [r0, #4]
 800fc48:	2204      	movs	r2, #4
 800fc4a:	f102 0614 	add.w	r6, r2, #20
 800fc4e:	429e      	cmp	r6, r3
 800fc50:	6841      	ldr	r1, [r0, #4]
 800fc52:	d93d      	bls.n	800fcd0 <_dtoa_r+0x318>
 800fc54:	4620      	mov	r0, r4
 800fc56:	f001 f82b 	bl	8010cb0 <_Balloc>
 800fc5a:	9001      	str	r0, [sp, #4]
 800fc5c:	2800      	cmp	r0, #0
 800fc5e:	d13b      	bne.n	800fcd8 <_dtoa_r+0x320>
 800fc60:	4b11      	ldr	r3, [pc, #68]	; (800fca8 <_dtoa_r+0x2f0>)
 800fc62:	4602      	mov	r2, r0
 800fc64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fc68:	e6c0      	b.n	800f9ec <_dtoa_r+0x34>
 800fc6a:	2301      	movs	r3, #1
 800fc6c:	e7df      	b.n	800fc2e <_dtoa_r+0x276>
 800fc6e:	bf00      	nop
 800fc70:	636f4361 	.word	0x636f4361
 800fc74:	3fd287a7 	.word	0x3fd287a7
 800fc78:	8b60c8b3 	.word	0x8b60c8b3
 800fc7c:	3fc68a28 	.word	0x3fc68a28
 800fc80:	509f79fb 	.word	0x509f79fb
 800fc84:	3fd34413 	.word	0x3fd34413
 800fc88:	08012a2e 	.word	0x08012a2e
 800fc8c:	08012a45 	.word	0x08012a45
 800fc90:	7ff00000 	.word	0x7ff00000
 800fc94:	08012a2a 	.word	0x08012a2a
 800fc98:	08012a21 	.word	0x08012a21
 800fc9c:	080128a1 	.word	0x080128a1
 800fca0:	3ff80000 	.word	0x3ff80000
 800fca4:	08012bb0 	.word	0x08012bb0
 800fca8:	08012aa0 	.word	0x08012aa0
 800fcac:	2501      	movs	r5, #1
 800fcae:	2300      	movs	r3, #0
 800fcb0:	9306      	str	r3, [sp, #24]
 800fcb2:	9508      	str	r5, [sp, #32]
 800fcb4:	f04f 33ff 	mov.w	r3, #4294967295
 800fcb8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	2312      	movs	r3, #18
 800fcc0:	e7b0      	b.n	800fc24 <_dtoa_r+0x26c>
 800fcc2:	2301      	movs	r3, #1
 800fcc4:	9308      	str	r3, [sp, #32]
 800fcc6:	e7f5      	b.n	800fcb4 <_dtoa_r+0x2fc>
 800fcc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fcce:	e7b8      	b.n	800fc42 <_dtoa_r+0x28a>
 800fcd0:	3101      	adds	r1, #1
 800fcd2:	6041      	str	r1, [r0, #4]
 800fcd4:	0052      	lsls	r2, r2, #1
 800fcd6:	e7b8      	b.n	800fc4a <_dtoa_r+0x292>
 800fcd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fcda:	9a01      	ldr	r2, [sp, #4]
 800fcdc:	601a      	str	r2, [r3, #0]
 800fcde:	9b03      	ldr	r3, [sp, #12]
 800fce0:	2b0e      	cmp	r3, #14
 800fce2:	f200 809d 	bhi.w	800fe20 <_dtoa_r+0x468>
 800fce6:	2d00      	cmp	r5, #0
 800fce8:	f000 809a 	beq.w	800fe20 <_dtoa_r+0x468>
 800fcec:	9b00      	ldr	r3, [sp, #0]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	dd32      	ble.n	800fd58 <_dtoa_r+0x3a0>
 800fcf2:	4ab7      	ldr	r2, [pc, #732]	; (800ffd0 <_dtoa_r+0x618>)
 800fcf4:	f003 030f 	and.w	r3, r3, #15
 800fcf8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fcfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fd00:	9b00      	ldr	r3, [sp, #0]
 800fd02:	05d8      	lsls	r0, r3, #23
 800fd04:	ea4f 1723 	mov.w	r7, r3, asr #4
 800fd08:	d516      	bpl.n	800fd38 <_dtoa_r+0x380>
 800fd0a:	4bb2      	ldr	r3, [pc, #712]	; (800ffd4 <_dtoa_r+0x61c>)
 800fd0c:	ec51 0b19 	vmov	r0, r1, d9
 800fd10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fd14:	f7f0 fd72 	bl	80007fc <__aeabi_ddiv>
 800fd18:	f007 070f 	and.w	r7, r7, #15
 800fd1c:	4682      	mov	sl, r0
 800fd1e:	468b      	mov	fp, r1
 800fd20:	2503      	movs	r5, #3
 800fd22:	4eac      	ldr	r6, [pc, #688]	; (800ffd4 <_dtoa_r+0x61c>)
 800fd24:	b957      	cbnz	r7, 800fd3c <_dtoa_r+0x384>
 800fd26:	4642      	mov	r2, r8
 800fd28:	464b      	mov	r3, r9
 800fd2a:	4650      	mov	r0, sl
 800fd2c:	4659      	mov	r1, fp
 800fd2e:	f7f0 fd65 	bl	80007fc <__aeabi_ddiv>
 800fd32:	4682      	mov	sl, r0
 800fd34:	468b      	mov	fp, r1
 800fd36:	e028      	b.n	800fd8a <_dtoa_r+0x3d2>
 800fd38:	2502      	movs	r5, #2
 800fd3a:	e7f2      	b.n	800fd22 <_dtoa_r+0x36a>
 800fd3c:	07f9      	lsls	r1, r7, #31
 800fd3e:	d508      	bpl.n	800fd52 <_dtoa_r+0x39a>
 800fd40:	4640      	mov	r0, r8
 800fd42:	4649      	mov	r1, r9
 800fd44:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fd48:	f7f0 fc2e 	bl	80005a8 <__aeabi_dmul>
 800fd4c:	3501      	adds	r5, #1
 800fd4e:	4680      	mov	r8, r0
 800fd50:	4689      	mov	r9, r1
 800fd52:	107f      	asrs	r7, r7, #1
 800fd54:	3608      	adds	r6, #8
 800fd56:	e7e5      	b.n	800fd24 <_dtoa_r+0x36c>
 800fd58:	f000 809b 	beq.w	800fe92 <_dtoa_r+0x4da>
 800fd5c:	9b00      	ldr	r3, [sp, #0]
 800fd5e:	4f9d      	ldr	r7, [pc, #628]	; (800ffd4 <_dtoa_r+0x61c>)
 800fd60:	425e      	negs	r6, r3
 800fd62:	4b9b      	ldr	r3, [pc, #620]	; (800ffd0 <_dtoa_r+0x618>)
 800fd64:	f006 020f 	and.w	r2, r6, #15
 800fd68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd70:	ec51 0b19 	vmov	r0, r1, d9
 800fd74:	f7f0 fc18 	bl	80005a8 <__aeabi_dmul>
 800fd78:	1136      	asrs	r6, r6, #4
 800fd7a:	4682      	mov	sl, r0
 800fd7c:	468b      	mov	fp, r1
 800fd7e:	2300      	movs	r3, #0
 800fd80:	2502      	movs	r5, #2
 800fd82:	2e00      	cmp	r6, #0
 800fd84:	d17a      	bne.n	800fe7c <_dtoa_r+0x4c4>
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d1d3      	bne.n	800fd32 <_dtoa_r+0x37a>
 800fd8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	f000 8082 	beq.w	800fe96 <_dtoa_r+0x4de>
 800fd92:	4b91      	ldr	r3, [pc, #580]	; (800ffd8 <_dtoa_r+0x620>)
 800fd94:	2200      	movs	r2, #0
 800fd96:	4650      	mov	r0, sl
 800fd98:	4659      	mov	r1, fp
 800fd9a:	f7f0 fe77 	bl	8000a8c <__aeabi_dcmplt>
 800fd9e:	2800      	cmp	r0, #0
 800fda0:	d079      	beq.n	800fe96 <_dtoa_r+0x4de>
 800fda2:	9b03      	ldr	r3, [sp, #12]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d076      	beq.n	800fe96 <_dtoa_r+0x4de>
 800fda8:	9b02      	ldr	r3, [sp, #8]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	dd36      	ble.n	800fe1c <_dtoa_r+0x464>
 800fdae:	9b00      	ldr	r3, [sp, #0]
 800fdb0:	4650      	mov	r0, sl
 800fdb2:	4659      	mov	r1, fp
 800fdb4:	1e5f      	subs	r7, r3, #1
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	4b88      	ldr	r3, [pc, #544]	; (800ffdc <_dtoa_r+0x624>)
 800fdba:	f7f0 fbf5 	bl	80005a8 <__aeabi_dmul>
 800fdbe:	9e02      	ldr	r6, [sp, #8]
 800fdc0:	4682      	mov	sl, r0
 800fdc2:	468b      	mov	fp, r1
 800fdc4:	3501      	adds	r5, #1
 800fdc6:	4628      	mov	r0, r5
 800fdc8:	f7f0 fb84 	bl	80004d4 <__aeabi_i2d>
 800fdcc:	4652      	mov	r2, sl
 800fdce:	465b      	mov	r3, fp
 800fdd0:	f7f0 fbea 	bl	80005a8 <__aeabi_dmul>
 800fdd4:	4b82      	ldr	r3, [pc, #520]	; (800ffe0 <_dtoa_r+0x628>)
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	f7f0 fa30 	bl	800023c <__adddf3>
 800fddc:	46d0      	mov	r8, sl
 800fdde:	46d9      	mov	r9, fp
 800fde0:	4682      	mov	sl, r0
 800fde2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800fde6:	2e00      	cmp	r6, #0
 800fde8:	d158      	bne.n	800fe9c <_dtoa_r+0x4e4>
 800fdea:	4b7e      	ldr	r3, [pc, #504]	; (800ffe4 <_dtoa_r+0x62c>)
 800fdec:	2200      	movs	r2, #0
 800fdee:	4640      	mov	r0, r8
 800fdf0:	4649      	mov	r1, r9
 800fdf2:	f7f0 fa21 	bl	8000238 <__aeabi_dsub>
 800fdf6:	4652      	mov	r2, sl
 800fdf8:	465b      	mov	r3, fp
 800fdfa:	4680      	mov	r8, r0
 800fdfc:	4689      	mov	r9, r1
 800fdfe:	f7f0 fe63 	bl	8000ac8 <__aeabi_dcmpgt>
 800fe02:	2800      	cmp	r0, #0
 800fe04:	f040 8295 	bne.w	8010332 <_dtoa_r+0x97a>
 800fe08:	4652      	mov	r2, sl
 800fe0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fe0e:	4640      	mov	r0, r8
 800fe10:	4649      	mov	r1, r9
 800fe12:	f7f0 fe3b 	bl	8000a8c <__aeabi_dcmplt>
 800fe16:	2800      	cmp	r0, #0
 800fe18:	f040 8289 	bne.w	801032e <_dtoa_r+0x976>
 800fe1c:	ec5b ab19 	vmov	sl, fp, d9
 800fe20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	f2c0 8148 	blt.w	80100b8 <_dtoa_r+0x700>
 800fe28:	9a00      	ldr	r2, [sp, #0]
 800fe2a:	2a0e      	cmp	r2, #14
 800fe2c:	f300 8144 	bgt.w	80100b8 <_dtoa_r+0x700>
 800fe30:	4b67      	ldr	r3, [pc, #412]	; (800ffd0 <_dtoa_r+0x618>)
 800fe32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe36:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fe3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	f280 80d5 	bge.w	800ffec <_dtoa_r+0x634>
 800fe42:	9b03      	ldr	r3, [sp, #12]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	f300 80d1 	bgt.w	800ffec <_dtoa_r+0x634>
 800fe4a:	f040 826f 	bne.w	801032c <_dtoa_r+0x974>
 800fe4e:	4b65      	ldr	r3, [pc, #404]	; (800ffe4 <_dtoa_r+0x62c>)
 800fe50:	2200      	movs	r2, #0
 800fe52:	4640      	mov	r0, r8
 800fe54:	4649      	mov	r1, r9
 800fe56:	f7f0 fba7 	bl	80005a8 <__aeabi_dmul>
 800fe5a:	4652      	mov	r2, sl
 800fe5c:	465b      	mov	r3, fp
 800fe5e:	f7f0 fe29 	bl	8000ab4 <__aeabi_dcmpge>
 800fe62:	9e03      	ldr	r6, [sp, #12]
 800fe64:	4637      	mov	r7, r6
 800fe66:	2800      	cmp	r0, #0
 800fe68:	f040 8245 	bne.w	80102f6 <_dtoa_r+0x93e>
 800fe6c:	9d01      	ldr	r5, [sp, #4]
 800fe6e:	2331      	movs	r3, #49	; 0x31
 800fe70:	f805 3b01 	strb.w	r3, [r5], #1
 800fe74:	9b00      	ldr	r3, [sp, #0]
 800fe76:	3301      	adds	r3, #1
 800fe78:	9300      	str	r3, [sp, #0]
 800fe7a:	e240      	b.n	80102fe <_dtoa_r+0x946>
 800fe7c:	07f2      	lsls	r2, r6, #31
 800fe7e:	d505      	bpl.n	800fe8c <_dtoa_r+0x4d4>
 800fe80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe84:	f7f0 fb90 	bl	80005a8 <__aeabi_dmul>
 800fe88:	3501      	adds	r5, #1
 800fe8a:	2301      	movs	r3, #1
 800fe8c:	1076      	asrs	r6, r6, #1
 800fe8e:	3708      	adds	r7, #8
 800fe90:	e777      	b.n	800fd82 <_dtoa_r+0x3ca>
 800fe92:	2502      	movs	r5, #2
 800fe94:	e779      	b.n	800fd8a <_dtoa_r+0x3d2>
 800fe96:	9f00      	ldr	r7, [sp, #0]
 800fe98:	9e03      	ldr	r6, [sp, #12]
 800fe9a:	e794      	b.n	800fdc6 <_dtoa_r+0x40e>
 800fe9c:	9901      	ldr	r1, [sp, #4]
 800fe9e:	4b4c      	ldr	r3, [pc, #304]	; (800ffd0 <_dtoa_r+0x618>)
 800fea0:	4431      	add	r1, r6
 800fea2:	910d      	str	r1, [sp, #52]	; 0x34
 800fea4:	9908      	ldr	r1, [sp, #32]
 800fea6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800feaa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800feae:	2900      	cmp	r1, #0
 800feb0:	d043      	beq.n	800ff3a <_dtoa_r+0x582>
 800feb2:	494d      	ldr	r1, [pc, #308]	; (800ffe8 <_dtoa_r+0x630>)
 800feb4:	2000      	movs	r0, #0
 800feb6:	f7f0 fca1 	bl	80007fc <__aeabi_ddiv>
 800feba:	4652      	mov	r2, sl
 800febc:	465b      	mov	r3, fp
 800febe:	f7f0 f9bb 	bl	8000238 <__aeabi_dsub>
 800fec2:	9d01      	ldr	r5, [sp, #4]
 800fec4:	4682      	mov	sl, r0
 800fec6:	468b      	mov	fp, r1
 800fec8:	4649      	mov	r1, r9
 800feca:	4640      	mov	r0, r8
 800fecc:	f7f0 fe1c 	bl	8000b08 <__aeabi_d2iz>
 800fed0:	4606      	mov	r6, r0
 800fed2:	f7f0 faff 	bl	80004d4 <__aeabi_i2d>
 800fed6:	4602      	mov	r2, r0
 800fed8:	460b      	mov	r3, r1
 800feda:	4640      	mov	r0, r8
 800fedc:	4649      	mov	r1, r9
 800fede:	f7f0 f9ab 	bl	8000238 <__aeabi_dsub>
 800fee2:	3630      	adds	r6, #48	; 0x30
 800fee4:	f805 6b01 	strb.w	r6, [r5], #1
 800fee8:	4652      	mov	r2, sl
 800feea:	465b      	mov	r3, fp
 800feec:	4680      	mov	r8, r0
 800feee:	4689      	mov	r9, r1
 800fef0:	f7f0 fdcc 	bl	8000a8c <__aeabi_dcmplt>
 800fef4:	2800      	cmp	r0, #0
 800fef6:	d163      	bne.n	800ffc0 <_dtoa_r+0x608>
 800fef8:	4642      	mov	r2, r8
 800fefa:	464b      	mov	r3, r9
 800fefc:	4936      	ldr	r1, [pc, #216]	; (800ffd8 <_dtoa_r+0x620>)
 800fefe:	2000      	movs	r0, #0
 800ff00:	f7f0 f99a 	bl	8000238 <__aeabi_dsub>
 800ff04:	4652      	mov	r2, sl
 800ff06:	465b      	mov	r3, fp
 800ff08:	f7f0 fdc0 	bl	8000a8c <__aeabi_dcmplt>
 800ff0c:	2800      	cmp	r0, #0
 800ff0e:	f040 80b5 	bne.w	801007c <_dtoa_r+0x6c4>
 800ff12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff14:	429d      	cmp	r5, r3
 800ff16:	d081      	beq.n	800fe1c <_dtoa_r+0x464>
 800ff18:	4b30      	ldr	r3, [pc, #192]	; (800ffdc <_dtoa_r+0x624>)
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	4650      	mov	r0, sl
 800ff1e:	4659      	mov	r1, fp
 800ff20:	f7f0 fb42 	bl	80005a8 <__aeabi_dmul>
 800ff24:	4b2d      	ldr	r3, [pc, #180]	; (800ffdc <_dtoa_r+0x624>)
 800ff26:	4682      	mov	sl, r0
 800ff28:	468b      	mov	fp, r1
 800ff2a:	4640      	mov	r0, r8
 800ff2c:	4649      	mov	r1, r9
 800ff2e:	2200      	movs	r2, #0
 800ff30:	f7f0 fb3a 	bl	80005a8 <__aeabi_dmul>
 800ff34:	4680      	mov	r8, r0
 800ff36:	4689      	mov	r9, r1
 800ff38:	e7c6      	b.n	800fec8 <_dtoa_r+0x510>
 800ff3a:	4650      	mov	r0, sl
 800ff3c:	4659      	mov	r1, fp
 800ff3e:	f7f0 fb33 	bl	80005a8 <__aeabi_dmul>
 800ff42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff44:	9d01      	ldr	r5, [sp, #4]
 800ff46:	930f      	str	r3, [sp, #60]	; 0x3c
 800ff48:	4682      	mov	sl, r0
 800ff4a:	468b      	mov	fp, r1
 800ff4c:	4649      	mov	r1, r9
 800ff4e:	4640      	mov	r0, r8
 800ff50:	f7f0 fdda 	bl	8000b08 <__aeabi_d2iz>
 800ff54:	4606      	mov	r6, r0
 800ff56:	f7f0 fabd 	bl	80004d4 <__aeabi_i2d>
 800ff5a:	3630      	adds	r6, #48	; 0x30
 800ff5c:	4602      	mov	r2, r0
 800ff5e:	460b      	mov	r3, r1
 800ff60:	4640      	mov	r0, r8
 800ff62:	4649      	mov	r1, r9
 800ff64:	f7f0 f968 	bl	8000238 <__aeabi_dsub>
 800ff68:	f805 6b01 	strb.w	r6, [r5], #1
 800ff6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff6e:	429d      	cmp	r5, r3
 800ff70:	4680      	mov	r8, r0
 800ff72:	4689      	mov	r9, r1
 800ff74:	f04f 0200 	mov.w	r2, #0
 800ff78:	d124      	bne.n	800ffc4 <_dtoa_r+0x60c>
 800ff7a:	4b1b      	ldr	r3, [pc, #108]	; (800ffe8 <_dtoa_r+0x630>)
 800ff7c:	4650      	mov	r0, sl
 800ff7e:	4659      	mov	r1, fp
 800ff80:	f7f0 f95c 	bl	800023c <__adddf3>
 800ff84:	4602      	mov	r2, r0
 800ff86:	460b      	mov	r3, r1
 800ff88:	4640      	mov	r0, r8
 800ff8a:	4649      	mov	r1, r9
 800ff8c:	f7f0 fd9c 	bl	8000ac8 <__aeabi_dcmpgt>
 800ff90:	2800      	cmp	r0, #0
 800ff92:	d173      	bne.n	801007c <_dtoa_r+0x6c4>
 800ff94:	4652      	mov	r2, sl
 800ff96:	465b      	mov	r3, fp
 800ff98:	4913      	ldr	r1, [pc, #76]	; (800ffe8 <_dtoa_r+0x630>)
 800ff9a:	2000      	movs	r0, #0
 800ff9c:	f7f0 f94c 	bl	8000238 <__aeabi_dsub>
 800ffa0:	4602      	mov	r2, r0
 800ffa2:	460b      	mov	r3, r1
 800ffa4:	4640      	mov	r0, r8
 800ffa6:	4649      	mov	r1, r9
 800ffa8:	f7f0 fd70 	bl	8000a8c <__aeabi_dcmplt>
 800ffac:	2800      	cmp	r0, #0
 800ffae:	f43f af35 	beq.w	800fe1c <_dtoa_r+0x464>
 800ffb2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ffb4:	1e6b      	subs	r3, r5, #1
 800ffb6:	930f      	str	r3, [sp, #60]	; 0x3c
 800ffb8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ffbc:	2b30      	cmp	r3, #48	; 0x30
 800ffbe:	d0f8      	beq.n	800ffb2 <_dtoa_r+0x5fa>
 800ffc0:	9700      	str	r7, [sp, #0]
 800ffc2:	e049      	b.n	8010058 <_dtoa_r+0x6a0>
 800ffc4:	4b05      	ldr	r3, [pc, #20]	; (800ffdc <_dtoa_r+0x624>)
 800ffc6:	f7f0 faef 	bl	80005a8 <__aeabi_dmul>
 800ffca:	4680      	mov	r8, r0
 800ffcc:	4689      	mov	r9, r1
 800ffce:	e7bd      	b.n	800ff4c <_dtoa_r+0x594>
 800ffd0:	08012bb0 	.word	0x08012bb0
 800ffd4:	08012b88 	.word	0x08012b88
 800ffd8:	3ff00000 	.word	0x3ff00000
 800ffdc:	40240000 	.word	0x40240000
 800ffe0:	401c0000 	.word	0x401c0000
 800ffe4:	40140000 	.word	0x40140000
 800ffe8:	3fe00000 	.word	0x3fe00000
 800ffec:	9d01      	ldr	r5, [sp, #4]
 800ffee:	4656      	mov	r6, sl
 800fff0:	465f      	mov	r7, fp
 800fff2:	4642      	mov	r2, r8
 800fff4:	464b      	mov	r3, r9
 800fff6:	4630      	mov	r0, r6
 800fff8:	4639      	mov	r1, r7
 800fffa:	f7f0 fbff 	bl	80007fc <__aeabi_ddiv>
 800fffe:	f7f0 fd83 	bl	8000b08 <__aeabi_d2iz>
 8010002:	4682      	mov	sl, r0
 8010004:	f7f0 fa66 	bl	80004d4 <__aeabi_i2d>
 8010008:	4642      	mov	r2, r8
 801000a:	464b      	mov	r3, r9
 801000c:	f7f0 facc 	bl	80005a8 <__aeabi_dmul>
 8010010:	4602      	mov	r2, r0
 8010012:	460b      	mov	r3, r1
 8010014:	4630      	mov	r0, r6
 8010016:	4639      	mov	r1, r7
 8010018:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801001c:	f7f0 f90c 	bl	8000238 <__aeabi_dsub>
 8010020:	f805 6b01 	strb.w	r6, [r5], #1
 8010024:	9e01      	ldr	r6, [sp, #4]
 8010026:	9f03      	ldr	r7, [sp, #12]
 8010028:	1bae      	subs	r6, r5, r6
 801002a:	42b7      	cmp	r7, r6
 801002c:	4602      	mov	r2, r0
 801002e:	460b      	mov	r3, r1
 8010030:	d135      	bne.n	801009e <_dtoa_r+0x6e6>
 8010032:	f7f0 f903 	bl	800023c <__adddf3>
 8010036:	4642      	mov	r2, r8
 8010038:	464b      	mov	r3, r9
 801003a:	4606      	mov	r6, r0
 801003c:	460f      	mov	r7, r1
 801003e:	f7f0 fd43 	bl	8000ac8 <__aeabi_dcmpgt>
 8010042:	b9d0      	cbnz	r0, 801007a <_dtoa_r+0x6c2>
 8010044:	4642      	mov	r2, r8
 8010046:	464b      	mov	r3, r9
 8010048:	4630      	mov	r0, r6
 801004a:	4639      	mov	r1, r7
 801004c:	f7f0 fd14 	bl	8000a78 <__aeabi_dcmpeq>
 8010050:	b110      	cbz	r0, 8010058 <_dtoa_r+0x6a0>
 8010052:	f01a 0f01 	tst.w	sl, #1
 8010056:	d110      	bne.n	801007a <_dtoa_r+0x6c2>
 8010058:	4620      	mov	r0, r4
 801005a:	ee18 1a10 	vmov	r1, s16
 801005e:	f000 fe67 	bl	8010d30 <_Bfree>
 8010062:	2300      	movs	r3, #0
 8010064:	9800      	ldr	r0, [sp, #0]
 8010066:	702b      	strb	r3, [r5, #0]
 8010068:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801006a:	3001      	adds	r0, #1
 801006c:	6018      	str	r0, [r3, #0]
 801006e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010070:	2b00      	cmp	r3, #0
 8010072:	f43f acf1 	beq.w	800fa58 <_dtoa_r+0xa0>
 8010076:	601d      	str	r5, [r3, #0]
 8010078:	e4ee      	b.n	800fa58 <_dtoa_r+0xa0>
 801007a:	9f00      	ldr	r7, [sp, #0]
 801007c:	462b      	mov	r3, r5
 801007e:	461d      	mov	r5, r3
 8010080:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010084:	2a39      	cmp	r2, #57	; 0x39
 8010086:	d106      	bne.n	8010096 <_dtoa_r+0x6de>
 8010088:	9a01      	ldr	r2, [sp, #4]
 801008a:	429a      	cmp	r2, r3
 801008c:	d1f7      	bne.n	801007e <_dtoa_r+0x6c6>
 801008e:	9901      	ldr	r1, [sp, #4]
 8010090:	2230      	movs	r2, #48	; 0x30
 8010092:	3701      	adds	r7, #1
 8010094:	700a      	strb	r2, [r1, #0]
 8010096:	781a      	ldrb	r2, [r3, #0]
 8010098:	3201      	adds	r2, #1
 801009a:	701a      	strb	r2, [r3, #0]
 801009c:	e790      	b.n	800ffc0 <_dtoa_r+0x608>
 801009e:	4ba6      	ldr	r3, [pc, #664]	; (8010338 <_dtoa_r+0x980>)
 80100a0:	2200      	movs	r2, #0
 80100a2:	f7f0 fa81 	bl	80005a8 <__aeabi_dmul>
 80100a6:	2200      	movs	r2, #0
 80100a8:	2300      	movs	r3, #0
 80100aa:	4606      	mov	r6, r0
 80100ac:	460f      	mov	r7, r1
 80100ae:	f7f0 fce3 	bl	8000a78 <__aeabi_dcmpeq>
 80100b2:	2800      	cmp	r0, #0
 80100b4:	d09d      	beq.n	800fff2 <_dtoa_r+0x63a>
 80100b6:	e7cf      	b.n	8010058 <_dtoa_r+0x6a0>
 80100b8:	9a08      	ldr	r2, [sp, #32]
 80100ba:	2a00      	cmp	r2, #0
 80100bc:	f000 80d7 	beq.w	801026e <_dtoa_r+0x8b6>
 80100c0:	9a06      	ldr	r2, [sp, #24]
 80100c2:	2a01      	cmp	r2, #1
 80100c4:	f300 80ba 	bgt.w	801023c <_dtoa_r+0x884>
 80100c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80100ca:	2a00      	cmp	r2, #0
 80100cc:	f000 80b2 	beq.w	8010234 <_dtoa_r+0x87c>
 80100d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80100d4:	9e07      	ldr	r6, [sp, #28]
 80100d6:	9d04      	ldr	r5, [sp, #16]
 80100d8:	9a04      	ldr	r2, [sp, #16]
 80100da:	441a      	add	r2, r3
 80100dc:	9204      	str	r2, [sp, #16]
 80100de:	9a05      	ldr	r2, [sp, #20]
 80100e0:	2101      	movs	r1, #1
 80100e2:	441a      	add	r2, r3
 80100e4:	4620      	mov	r0, r4
 80100e6:	9205      	str	r2, [sp, #20]
 80100e8:	f000 ff24 	bl	8010f34 <__i2b>
 80100ec:	4607      	mov	r7, r0
 80100ee:	2d00      	cmp	r5, #0
 80100f0:	dd0c      	ble.n	801010c <_dtoa_r+0x754>
 80100f2:	9b05      	ldr	r3, [sp, #20]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	dd09      	ble.n	801010c <_dtoa_r+0x754>
 80100f8:	42ab      	cmp	r3, r5
 80100fa:	9a04      	ldr	r2, [sp, #16]
 80100fc:	bfa8      	it	ge
 80100fe:	462b      	movge	r3, r5
 8010100:	1ad2      	subs	r2, r2, r3
 8010102:	9204      	str	r2, [sp, #16]
 8010104:	9a05      	ldr	r2, [sp, #20]
 8010106:	1aed      	subs	r5, r5, r3
 8010108:	1ad3      	subs	r3, r2, r3
 801010a:	9305      	str	r3, [sp, #20]
 801010c:	9b07      	ldr	r3, [sp, #28]
 801010e:	b31b      	cbz	r3, 8010158 <_dtoa_r+0x7a0>
 8010110:	9b08      	ldr	r3, [sp, #32]
 8010112:	2b00      	cmp	r3, #0
 8010114:	f000 80af 	beq.w	8010276 <_dtoa_r+0x8be>
 8010118:	2e00      	cmp	r6, #0
 801011a:	dd13      	ble.n	8010144 <_dtoa_r+0x78c>
 801011c:	4639      	mov	r1, r7
 801011e:	4632      	mov	r2, r6
 8010120:	4620      	mov	r0, r4
 8010122:	f000 ffc7 	bl	80110b4 <__pow5mult>
 8010126:	ee18 2a10 	vmov	r2, s16
 801012a:	4601      	mov	r1, r0
 801012c:	4607      	mov	r7, r0
 801012e:	4620      	mov	r0, r4
 8010130:	f000 ff16 	bl	8010f60 <__multiply>
 8010134:	ee18 1a10 	vmov	r1, s16
 8010138:	4680      	mov	r8, r0
 801013a:	4620      	mov	r0, r4
 801013c:	f000 fdf8 	bl	8010d30 <_Bfree>
 8010140:	ee08 8a10 	vmov	s16, r8
 8010144:	9b07      	ldr	r3, [sp, #28]
 8010146:	1b9a      	subs	r2, r3, r6
 8010148:	d006      	beq.n	8010158 <_dtoa_r+0x7a0>
 801014a:	ee18 1a10 	vmov	r1, s16
 801014e:	4620      	mov	r0, r4
 8010150:	f000 ffb0 	bl	80110b4 <__pow5mult>
 8010154:	ee08 0a10 	vmov	s16, r0
 8010158:	2101      	movs	r1, #1
 801015a:	4620      	mov	r0, r4
 801015c:	f000 feea 	bl	8010f34 <__i2b>
 8010160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010162:	2b00      	cmp	r3, #0
 8010164:	4606      	mov	r6, r0
 8010166:	f340 8088 	ble.w	801027a <_dtoa_r+0x8c2>
 801016a:	461a      	mov	r2, r3
 801016c:	4601      	mov	r1, r0
 801016e:	4620      	mov	r0, r4
 8010170:	f000 ffa0 	bl	80110b4 <__pow5mult>
 8010174:	9b06      	ldr	r3, [sp, #24]
 8010176:	2b01      	cmp	r3, #1
 8010178:	4606      	mov	r6, r0
 801017a:	f340 8081 	ble.w	8010280 <_dtoa_r+0x8c8>
 801017e:	f04f 0800 	mov.w	r8, #0
 8010182:	6933      	ldr	r3, [r6, #16]
 8010184:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010188:	6918      	ldr	r0, [r3, #16]
 801018a:	f000 fe83 	bl	8010e94 <__hi0bits>
 801018e:	f1c0 0020 	rsb	r0, r0, #32
 8010192:	9b05      	ldr	r3, [sp, #20]
 8010194:	4418      	add	r0, r3
 8010196:	f010 001f 	ands.w	r0, r0, #31
 801019a:	f000 8092 	beq.w	80102c2 <_dtoa_r+0x90a>
 801019e:	f1c0 0320 	rsb	r3, r0, #32
 80101a2:	2b04      	cmp	r3, #4
 80101a4:	f340 808a 	ble.w	80102bc <_dtoa_r+0x904>
 80101a8:	f1c0 001c 	rsb	r0, r0, #28
 80101ac:	9b04      	ldr	r3, [sp, #16]
 80101ae:	4403      	add	r3, r0
 80101b0:	9304      	str	r3, [sp, #16]
 80101b2:	9b05      	ldr	r3, [sp, #20]
 80101b4:	4403      	add	r3, r0
 80101b6:	4405      	add	r5, r0
 80101b8:	9305      	str	r3, [sp, #20]
 80101ba:	9b04      	ldr	r3, [sp, #16]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	dd07      	ble.n	80101d0 <_dtoa_r+0x818>
 80101c0:	ee18 1a10 	vmov	r1, s16
 80101c4:	461a      	mov	r2, r3
 80101c6:	4620      	mov	r0, r4
 80101c8:	f000 ffce 	bl	8011168 <__lshift>
 80101cc:	ee08 0a10 	vmov	s16, r0
 80101d0:	9b05      	ldr	r3, [sp, #20]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	dd05      	ble.n	80101e2 <_dtoa_r+0x82a>
 80101d6:	4631      	mov	r1, r6
 80101d8:	461a      	mov	r2, r3
 80101da:	4620      	mov	r0, r4
 80101dc:	f000 ffc4 	bl	8011168 <__lshift>
 80101e0:	4606      	mov	r6, r0
 80101e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d06e      	beq.n	80102c6 <_dtoa_r+0x90e>
 80101e8:	ee18 0a10 	vmov	r0, s16
 80101ec:	4631      	mov	r1, r6
 80101ee:	f001 f82b 	bl	8011248 <__mcmp>
 80101f2:	2800      	cmp	r0, #0
 80101f4:	da67      	bge.n	80102c6 <_dtoa_r+0x90e>
 80101f6:	9b00      	ldr	r3, [sp, #0]
 80101f8:	3b01      	subs	r3, #1
 80101fa:	ee18 1a10 	vmov	r1, s16
 80101fe:	9300      	str	r3, [sp, #0]
 8010200:	220a      	movs	r2, #10
 8010202:	2300      	movs	r3, #0
 8010204:	4620      	mov	r0, r4
 8010206:	f000 fdb5 	bl	8010d74 <__multadd>
 801020a:	9b08      	ldr	r3, [sp, #32]
 801020c:	ee08 0a10 	vmov	s16, r0
 8010210:	2b00      	cmp	r3, #0
 8010212:	f000 81b1 	beq.w	8010578 <_dtoa_r+0xbc0>
 8010216:	2300      	movs	r3, #0
 8010218:	4639      	mov	r1, r7
 801021a:	220a      	movs	r2, #10
 801021c:	4620      	mov	r0, r4
 801021e:	f000 fda9 	bl	8010d74 <__multadd>
 8010222:	9b02      	ldr	r3, [sp, #8]
 8010224:	2b00      	cmp	r3, #0
 8010226:	4607      	mov	r7, r0
 8010228:	f300 808e 	bgt.w	8010348 <_dtoa_r+0x990>
 801022c:	9b06      	ldr	r3, [sp, #24]
 801022e:	2b02      	cmp	r3, #2
 8010230:	dc51      	bgt.n	80102d6 <_dtoa_r+0x91e>
 8010232:	e089      	b.n	8010348 <_dtoa_r+0x990>
 8010234:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010236:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801023a:	e74b      	b.n	80100d4 <_dtoa_r+0x71c>
 801023c:	9b03      	ldr	r3, [sp, #12]
 801023e:	1e5e      	subs	r6, r3, #1
 8010240:	9b07      	ldr	r3, [sp, #28]
 8010242:	42b3      	cmp	r3, r6
 8010244:	bfbf      	itttt	lt
 8010246:	9b07      	ldrlt	r3, [sp, #28]
 8010248:	9607      	strlt	r6, [sp, #28]
 801024a:	1af2      	sublt	r2, r6, r3
 801024c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801024e:	bfb6      	itet	lt
 8010250:	189b      	addlt	r3, r3, r2
 8010252:	1b9e      	subge	r6, r3, r6
 8010254:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010256:	9b03      	ldr	r3, [sp, #12]
 8010258:	bfb8      	it	lt
 801025a:	2600      	movlt	r6, #0
 801025c:	2b00      	cmp	r3, #0
 801025e:	bfb7      	itett	lt
 8010260:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010264:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010268:	1a9d      	sublt	r5, r3, r2
 801026a:	2300      	movlt	r3, #0
 801026c:	e734      	b.n	80100d8 <_dtoa_r+0x720>
 801026e:	9e07      	ldr	r6, [sp, #28]
 8010270:	9d04      	ldr	r5, [sp, #16]
 8010272:	9f08      	ldr	r7, [sp, #32]
 8010274:	e73b      	b.n	80100ee <_dtoa_r+0x736>
 8010276:	9a07      	ldr	r2, [sp, #28]
 8010278:	e767      	b.n	801014a <_dtoa_r+0x792>
 801027a:	9b06      	ldr	r3, [sp, #24]
 801027c:	2b01      	cmp	r3, #1
 801027e:	dc18      	bgt.n	80102b2 <_dtoa_r+0x8fa>
 8010280:	f1ba 0f00 	cmp.w	sl, #0
 8010284:	d115      	bne.n	80102b2 <_dtoa_r+0x8fa>
 8010286:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801028a:	b993      	cbnz	r3, 80102b2 <_dtoa_r+0x8fa>
 801028c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010290:	0d1b      	lsrs	r3, r3, #20
 8010292:	051b      	lsls	r3, r3, #20
 8010294:	b183      	cbz	r3, 80102b8 <_dtoa_r+0x900>
 8010296:	9b04      	ldr	r3, [sp, #16]
 8010298:	3301      	adds	r3, #1
 801029a:	9304      	str	r3, [sp, #16]
 801029c:	9b05      	ldr	r3, [sp, #20]
 801029e:	3301      	adds	r3, #1
 80102a0:	9305      	str	r3, [sp, #20]
 80102a2:	f04f 0801 	mov.w	r8, #1
 80102a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	f47f af6a 	bne.w	8010182 <_dtoa_r+0x7ca>
 80102ae:	2001      	movs	r0, #1
 80102b0:	e76f      	b.n	8010192 <_dtoa_r+0x7da>
 80102b2:	f04f 0800 	mov.w	r8, #0
 80102b6:	e7f6      	b.n	80102a6 <_dtoa_r+0x8ee>
 80102b8:	4698      	mov	r8, r3
 80102ba:	e7f4      	b.n	80102a6 <_dtoa_r+0x8ee>
 80102bc:	f43f af7d 	beq.w	80101ba <_dtoa_r+0x802>
 80102c0:	4618      	mov	r0, r3
 80102c2:	301c      	adds	r0, #28
 80102c4:	e772      	b.n	80101ac <_dtoa_r+0x7f4>
 80102c6:	9b03      	ldr	r3, [sp, #12]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	dc37      	bgt.n	801033c <_dtoa_r+0x984>
 80102cc:	9b06      	ldr	r3, [sp, #24]
 80102ce:	2b02      	cmp	r3, #2
 80102d0:	dd34      	ble.n	801033c <_dtoa_r+0x984>
 80102d2:	9b03      	ldr	r3, [sp, #12]
 80102d4:	9302      	str	r3, [sp, #8]
 80102d6:	9b02      	ldr	r3, [sp, #8]
 80102d8:	b96b      	cbnz	r3, 80102f6 <_dtoa_r+0x93e>
 80102da:	4631      	mov	r1, r6
 80102dc:	2205      	movs	r2, #5
 80102de:	4620      	mov	r0, r4
 80102e0:	f000 fd48 	bl	8010d74 <__multadd>
 80102e4:	4601      	mov	r1, r0
 80102e6:	4606      	mov	r6, r0
 80102e8:	ee18 0a10 	vmov	r0, s16
 80102ec:	f000 ffac 	bl	8011248 <__mcmp>
 80102f0:	2800      	cmp	r0, #0
 80102f2:	f73f adbb 	bgt.w	800fe6c <_dtoa_r+0x4b4>
 80102f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102f8:	9d01      	ldr	r5, [sp, #4]
 80102fa:	43db      	mvns	r3, r3
 80102fc:	9300      	str	r3, [sp, #0]
 80102fe:	f04f 0800 	mov.w	r8, #0
 8010302:	4631      	mov	r1, r6
 8010304:	4620      	mov	r0, r4
 8010306:	f000 fd13 	bl	8010d30 <_Bfree>
 801030a:	2f00      	cmp	r7, #0
 801030c:	f43f aea4 	beq.w	8010058 <_dtoa_r+0x6a0>
 8010310:	f1b8 0f00 	cmp.w	r8, #0
 8010314:	d005      	beq.n	8010322 <_dtoa_r+0x96a>
 8010316:	45b8      	cmp	r8, r7
 8010318:	d003      	beq.n	8010322 <_dtoa_r+0x96a>
 801031a:	4641      	mov	r1, r8
 801031c:	4620      	mov	r0, r4
 801031e:	f000 fd07 	bl	8010d30 <_Bfree>
 8010322:	4639      	mov	r1, r7
 8010324:	4620      	mov	r0, r4
 8010326:	f000 fd03 	bl	8010d30 <_Bfree>
 801032a:	e695      	b.n	8010058 <_dtoa_r+0x6a0>
 801032c:	2600      	movs	r6, #0
 801032e:	4637      	mov	r7, r6
 8010330:	e7e1      	b.n	80102f6 <_dtoa_r+0x93e>
 8010332:	9700      	str	r7, [sp, #0]
 8010334:	4637      	mov	r7, r6
 8010336:	e599      	b.n	800fe6c <_dtoa_r+0x4b4>
 8010338:	40240000 	.word	0x40240000
 801033c:	9b08      	ldr	r3, [sp, #32]
 801033e:	2b00      	cmp	r3, #0
 8010340:	f000 80ca 	beq.w	80104d8 <_dtoa_r+0xb20>
 8010344:	9b03      	ldr	r3, [sp, #12]
 8010346:	9302      	str	r3, [sp, #8]
 8010348:	2d00      	cmp	r5, #0
 801034a:	dd05      	ble.n	8010358 <_dtoa_r+0x9a0>
 801034c:	4639      	mov	r1, r7
 801034e:	462a      	mov	r2, r5
 8010350:	4620      	mov	r0, r4
 8010352:	f000 ff09 	bl	8011168 <__lshift>
 8010356:	4607      	mov	r7, r0
 8010358:	f1b8 0f00 	cmp.w	r8, #0
 801035c:	d05b      	beq.n	8010416 <_dtoa_r+0xa5e>
 801035e:	6879      	ldr	r1, [r7, #4]
 8010360:	4620      	mov	r0, r4
 8010362:	f000 fca5 	bl	8010cb0 <_Balloc>
 8010366:	4605      	mov	r5, r0
 8010368:	b928      	cbnz	r0, 8010376 <_dtoa_r+0x9be>
 801036a:	4b87      	ldr	r3, [pc, #540]	; (8010588 <_dtoa_r+0xbd0>)
 801036c:	4602      	mov	r2, r0
 801036e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010372:	f7ff bb3b 	b.w	800f9ec <_dtoa_r+0x34>
 8010376:	693a      	ldr	r2, [r7, #16]
 8010378:	3202      	adds	r2, #2
 801037a:	0092      	lsls	r2, r2, #2
 801037c:	f107 010c 	add.w	r1, r7, #12
 8010380:	300c      	adds	r0, #12
 8010382:	f7fd fd1d 	bl	800ddc0 <memcpy>
 8010386:	2201      	movs	r2, #1
 8010388:	4629      	mov	r1, r5
 801038a:	4620      	mov	r0, r4
 801038c:	f000 feec 	bl	8011168 <__lshift>
 8010390:	9b01      	ldr	r3, [sp, #4]
 8010392:	f103 0901 	add.w	r9, r3, #1
 8010396:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801039a:	4413      	add	r3, r2
 801039c:	9305      	str	r3, [sp, #20]
 801039e:	f00a 0301 	and.w	r3, sl, #1
 80103a2:	46b8      	mov	r8, r7
 80103a4:	9304      	str	r3, [sp, #16]
 80103a6:	4607      	mov	r7, r0
 80103a8:	4631      	mov	r1, r6
 80103aa:	ee18 0a10 	vmov	r0, s16
 80103ae:	f7ff fa75 	bl	800f89c <quorem>
 80103b2:	4641      	mov	r1, r8
 80103b4:	9002      	str	r0, [sp, #8]
 80103b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80103ba:	ee18 0a10 	vmov	r0, s16
 80103be:	f000 ff43 	bl	8011248 <__mcmp>
 80103c2:	463a      	mov	r2, r7
 80103c4:	9003      	str	r0, [sp, #12]
 80103c6:	4631      	mov	r1, r6
 80103c8:	4620      	mov	r0, r4
 80103ca:	f000 ff59 	bl	8011280 <__mdiff>
 80103ce:	68c2      	ldr	r2, [r0, #12]
 80103d0:	f109 3bff 	add.w	fp, r9, #4294967295
 80103d4:	4605      	mov	r5, r0
 80103d6:	bb02      	cbnz	r2, 801041a <_dtoa_r+0xa62>
 80103d8:	4601      	mov	r1, r0
 80103da:	ee18 0a10 	vmov	r0, s16
 80103de:	f000 ff33 	bl	8011248 <__mcmp>
 80103e2:	4602      	mov	r2, r0
 80103e4:	4629      	mov	r1, r5
 80103e6:	4620      	mov	r0, r4
 80103e8:	9207      	str	r2, [sp, #28]
 80103ea:	f000 fca1 	bl	8010d30 <_Bfree>
 80103ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80103f2:	ea43 0102 	orr.w	r1, r3, r2
 80103f6:	9b04      	ldr	r3, [sp, #16]
 80103f8:	430b      	orrs	r3, r1
 80103fa:	464d      	mov	r5, r9
 80103fc:	d10f      	bne.n	801041e <_dtoa_r+0xa66>
 80103fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010402:	d02a      	beq.n	801045a <_dtoa_r+0xaa2>
 8010404:	9b03      	ldr	r3, [sp, #12]
 8010406:	2b00      	cmp	r3, #0
 8010408:	dd02      	ble.n	8010410 <_dtoa_r+0xa58>
 801040a:	9b02      	ldr	r3, [sp, #8]
 801040c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010410:	f88b a000 	strb.w	sl, [fp]
 8010414:	e775      	b.n	8010302 <_dtoa_r+0x94a>
 8010416:	4638      	mov	r0, r7
 8010418:	e7ba      	b.n	8010390 <_dtoa_r+0x9d8>
 801041a:	2201      	movs	r2, #1
 801041c:	e7e2      	b.n	80103e4 <_dtoa_r+0xa2c>
 801041e:	9b03      	ldr	r3, [sp, #12]
 8010420:	2b00      	cmp	r3, #0
 8010422:	db04      	blt.n	801042e <_dtoa_r+0xa76>
 8010424:	9906      	ldr	r1, [sp, #24]
 8010426:	430b      	orrs	r3, r1
 8010428:	9904      	ldr	r1, [sp, #16]
 801042a:	430b      	orrs	r3, r1
 801042c:	d122      	bne.n	8010474 <_dtoa_r+0xabc>
 801042e:	2a00      	cmp	r2, #0
 8010430:	ddee      	ble.n	8010410 <_dtoa_r+0xa58>
 8010432:	ee18 1a10 	vmov	r1, s16
 8010436:	2201      	movs	r2, #1
 8010438:	4620      	mov	r0, r4
 801043a:	f000 fe95 	bl	8011168 <__lshift>
 801043e:	4631      	mov	r1, r6
 8010440:	ee08 0a10 	vmov	s16, r0
 8010444:	f000 ff00 	bl	8011248 <__mcmp>
 8010448:	2800      	cmp	r0, #0
 801044a:	dc03      	bgt.n	8010454 <_dtoa_r+0xa9c>
 801044c:	d1e0      	bne.n	8010410 <_dtoa_r+0xa58>
 801044e:	f01a 0f01 	tst.w	sl, #1
 8010452:	d0dd      	beq.n	8010410 <_dtoa_r+0xa58>
 8010454:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010458:	d1d7      	bne.n	801040a <_dtoa_r+0xa52>
 801045a:	2339      	movs	r3, #57	; 0x39
 801045c:	f88b 3000 	strb.w	r3, [fp]
 8010460:	462b      	mov	r3, r5
 8010462:	461d      	mov	r5, r3
 8010464:	3b01      	subs	r3, #1
 8010466:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801046a:	2a39      	cmp	r2, #57	; 0x39
 801046c:	d071      	beq.n	8010552 <_dtoa_r+0xb9a>
 801046e:	3201      	adds	r2, #1
 8010470:	701a      	strb	r2, [r3, #0]
 8010472:	e746      	b.n	8010302 <_dtoa_r+0x94a>
 8010474:	2a00      	cmp	r2, #0
 8010476:	dd07      	ble.n	8010488 <_dtoa_r+0xad0>
 8010478:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801047c:	d0ed      	beq.n	801045a <_dtoa_r+0xaa2>
 801047e:	f10a 0301 	add.w	r3, sl, #1
 8010482:	f88b 3000 	strb.w	r3, [fp]
 8010486:	e73c      	b.n	8010302 <_dtoa_r+0x94a>
 8010488:	9b05      	ldr	r3, [sp, #20]
 801048a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801048e:	4599      	cmp	r9, r3
 8010490:	d047      	beq.n	8010522 <_dtoa_r+0xb6a>
 8010492:	ee18 1a10 	vmov	r1, s16
 8010496:	2300      	movs	r3, #0
 8010498:	220a      	movs	r2, #10
 801049a:	4620      	mov	r0, r4
 801049c:	f000 fc6a 	bl	8010d74 <__multadd>
 80104a0:	45b8      	cmp	r8, r7
 80104a2:	ee08 0a10 	vmov	s16, r0
 80104a6:	f04f 0300 	mov.w	r3, #0
 80104aa:	f04f 020a 	mov.w	r2, #10
 80104ae:	4641      	mov	r1, r8
 80104b0:	4620      	mov	r0, r4
 80104b2:	d106      	bne.n	80104c2 <_dtoa_r+0xb0a>
 80104b4:	f000 fc5e 	bl	8010d74 <__multadd>
 80104b8:	4680      	mov	r8, r0
 80104ba:	4607      	mov	r7, r0
 80104bc:	f109 0901 	add.w	r9, r9, #1
 80104c0:	e772      	b.n	80103a8 <_dtoa_r+0x9f0>
 80104c2:	f000 fc57 	bl	8010d74 <__multadd>
 80104c6:	4639      	mov	r1, r7
 80104c8:	4680      	mov	r8, r0
 80104ca:	2300      	movs	r3, #0
 80104cc:	220a      	movs	r2, #10
 80104ce:	4620      	mov	r0, r4
 80104d0:	f000 fc50 	bl	8010d74 <__multadd>
 80104d4:	4607      	mov	r7, r0
 80104d6:	e7f1      	b.n	80104bc <_dtoa_r+0xb04>
 80104d8:	9b03      	ldr	r3, [sp, #12]
 80104da:	9302      	str	r3, [sp, #8]
 80104dc:	9d01      	ldr	r5, [sp, #4]
 80104de:	ee18 0a10 	vmov	r0, s16
 80104e2:	4631      	mov	r1, r6
 80104e4:	f7ff f9da 	bl	800f89c <quorem>
 80104e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80104ec:	9b01      	ldr	r3, [sp, #4]
 80104ee:	f805 ab01 	strb.w	sl, [r5], #1
 80104f2:	1aea      	subs	r2, r5, r3
 80104f4:	9b02      	ldr	r3, [sp, #8]
 80104f6:	4293      	cmp	r3, r2
 80104f8:	dd09      	ble.n	801050e <_dtoa_r+0xb56>
 80104fa:	ee18 1a10 	vmov	r1, s16
 80104fe:	2300      	movs	r3, #0
 8010500:	220a      	movs	r2, #10
 8010502:	4620      	mov	r0, r4
 8010504:	f000 fc36 	bl	8010d74 <__multadd>
 8010508:	ee08 0a10 	vmov	s16, r0
 801050c:	e7e7      	b.n	80104de <_dtoa_r+0xb26>
 801050e:	9b02      	ldr	r3, [sp, #8]
 8010510:	2b00      	cmp	r3, #0
 8010512:	bfc8      	it	gt
 8010514:	461d      	movgt	r5, r3
 8010516:	9b01      	ldr	r3, [sp, #4]
 8010518:	bfd8      	it	le
 801051a:	2501      	movle	r5, #1
 801051c:	441d      	add	r5, r3
 801051e:	f04f 0800 	mov.w	r8, #0
 8010522:	ee18 1a10 	vmov	r1, s16
 8010526:	2201      	movs	r2, #1
 8010528:	4620      	mov	r0, r4
 801052a:	f000 fe1d 	bl	8011168 <__lshift>
 801052e:	4631      	mov	r1, r6
 8010530:	ee08 0a10 	vmov	s16, r0
 8010534:	f000 fe88 	bl	8011248 <__mcmp>
 8010538:	2800      	cmp	r0, #0
 801053a:	dc91      	bgt.n	8010460 <_dtoa_r+0xaa8>
 801053c:	d102      	bne.n	8010544 <_dtoa_r+0xb8c>
 801053e:	f01a 0f01 	tst.w	sl, #1
 8010542:	d18d      	bne.n	8010460 <_dtoa_r+0xaa8>
 8010544:	462b      	mov	r3, r5
 8010546:	461d      	mov	r5, r3
 8010548:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801054c:	2a30      	cmp	r2, #48	; 0x30
 801054e:	d0fa      	beq.n	8010546 <_dtoa_r+0xb8e>
 8010550:	e6d7      	b.n	8010302 <_dtoa_r+0x94a>
 8010552:	9a01      	ldr	r2, [sp, #4]
 8010554:	429a      	cmp	r2, r3
 8010556:	d184      	bne.n	8010462 <_dtoa_r+0xaaa>
 8010558:	9b00      	ldr	r3, [sp, #0]
 801055a:	3301      	adds	r3, #1
 801055c:	9300      	str	r3, [sp, #0]
 801055e:	2331      	movs	r3, #49	; 0x31
 8010560:	7013      	strb	r3, [r2, #0]
 8010562:	e6ce      	b.n	8010302 <_dtoa_r+0x94a>
 8010564:	4b09      	ldr	r3, [pc, #36]	; (801058c <_dtoa_r+0xbd4>)
 8010566:	f7ff ba95 	b.w	800fa94 <_dtoa_r+0xdc>
 801056a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801056c:	2b00      	cmp	r3, #0
 801056e:	f47f aa6e 	bne.w	800fa4e <_dtoa_r+0x96>
 8010572:	4b07      	ldr	r3, [pc, #28]	; (8010590 <_dtoa_r+0xbd8>)
 8010574:	f7ff ba8e 	b.w	800fa94 <_dtoa_r+0xdc>
 8010578:	9b02      	ldr	r3, [sp, #8]
 801057a:	2b00      	cmp	r3, #0
 801057c:	dcae      	bgt.n	80104dc <_dtoa_r+0xb24>
 801057e:	9b06      	ldr	r3, [sp, #24]
 8010580:	2b02      	cmp	r3, #2
 8010582:	f73f aea8 	bgt.w	80102d6 <_dtoa_r+0x91e>
 8010586:	e7a9      	b.n	80104dc <_dtoa_r+0xb24>
 8010588:	08012aa0 	.word	0x08012aa0
 801058c:	080128a0 	.word	0x080128a0
 8010590:	08012a21 	.word	0x08012a21

08010594 <rshift>:
 8010594:	6903      	ldr	r3, [r0, #16]
 8010596:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801059a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801059e:	ea4f 1261 	mov.w	r2, r1, asr #5
 80105a2:	f100 0414 	add.w	r4, r0, #20
 80105a6:	dd45      	ble.n	8010634 <rshift+0xa0>
 80105a8:	f011 011f 	ands.w	r1, r1, #31
 80105ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80105b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80105b4:	d10c      	bne.n	80105d0 <rshift+0x3c>
 80105b6:	f100 0710 	add.w	r7, r0, #16
 80105ba:	4629      	mov	r1, r5
 80105bc:	42b1      	cmp	r1, r6
 80105be:	d334      	bcc.n	801062a <rshift+0x96>
 80105c0:	1a9b      	subs	r3, r3, r2
 80105c2:	009b      	lsls	r3, r3, #2
 80105c4:	1eea      	subs	r2, r5, #3
 80105c6:	4296      	cmp	r6, r2
 80105c8:	bf38      	it	cc
 80105ca:	2300      	movcc	r3, #0
 80105cc:	4423      	add	r3, r4
 80105ce:	e015      	b.n	80105fc <rshift+0x68>
 80105d0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80105d4:	f1c1 0820 	rsb	r8, r1, #32
 80105d8:	40cf      	lsrs	r7, r1
 80105da:	f105 0e04 	add.w	lr, r5, #4
 80105de:	46a1      	mov	r9, r4
 80105e0:	4576      	cmp	r6, lr
 80105e2:	46f4      	mov	ip, lr
 80105e4:	d815      	bhi.n	8010612 <rshift+0x7e>
 80105e6:	1a9a      	subs	r2, r3, r2
 80105e8:	0092      	lsls	r2, r2, #2
 80105ea:	3a04      	subs	r2, #4
 80105ec:	3501      	adds	r5, #1
 80105ee:	42ae      	cmp	r6, r5
 80105f0:	bf38      	it	cc
 80105f2:	2200      	movcc	r2, #0
 80105f4:	18a3      	adds	r3, r4, r2
 80105f6:	50a7      	str	r7, [r4, r2]
 80105f8:	b107      	cbz	r7, 80105fc <rshift+0x68>
 80105fa:	3304      	adds	r3, #4
 80105fc:	1b1a      	subs	r2, r3, r4
 80105fe:	42a3      	cmp	r3, r4
 8010600:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010604:	bf08      	it	eq
 8010606:	2300      	moveq	r3, #0
 8010608:	6102      	str	r2, [r0, #16]
 801060a:	bf08      	it	eq
 801060c:	6143      	streq	r3, [r0, #20]
 801060e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010612:	f8dc c000 	ldr.w	ip, [ip]
 8010616:	fa0c fc08 	lsl.w	ip, ip, r8
 801061a:	ea4c 0707 	orr.w	r7, ip, r7
 801061e:	f849 7b04 	str.w	r7, [r9], #4
 8010622:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010626:	40cf      	lsrs	r7, r1
 8010628:	e7da      	b.n	80105e0 <rshift+0x4c>
 801062a:	f851 cb04 	ldr.w	ip, [r1], #4
 801062e:	f847 cf04 	str.w	ip, [r7, #4]!
 8010632:	e7c3      	b.n	80105bc <rshift+0x28>
 8010634:	4623      	mov	r3, r4
 8010636:	e7e1      	b.n	80105fc <rshift+0x68>

08010638 <__hexdig_fun>:
 8010638:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801063c:	2b09      	cmp	r3, #9
 801063e:	d802      	bhi.n	8010646 <__hexdig_fun+0xe>
 8010640:	3820      	subs	r0, #32
 8010642:	b2c0      	uxtb	r0, r0
 8010644:	4770      	bx	lr
 8010646:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801064a:	2b05      	cmp	r3, #5
 801064c:	d801      	bhi.n	8010652 <__hexdig_fun+0x1a>
 801064e:	3847      	subs	r0, #71	; 0x47
 8010650:	e7f7      	b.n	8010642 <__hexdig_fun+0xa>
 8010652:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010656:	2b05      	cmp	r3, #5
 8010658:	d801      	bhi.n	801065e <__hexdig_fun+0x26>
 801065a:	3827      	subs	r0, #39	; 0x27
 801065c:	e7f1      	b.n	8010642 <__hexdig_fun+0xa>
 801065e:	2000      	movs	r0, #0
 8010660:	4770      	bx	lr
	...

08010664 <__gethex>:
 8010664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010668:	ed2d 8b02 	vpush	{d8}
 801066c:	b089      	sub	sp, #36	; 0x24
 801066e:	ee08 0a10 	vmov	s16, r0
 8010672:	9304      	str	r3, [sp, #16]
 8010674:	4bb4      	ldr	r3, [pc, #720]	; (8010948 <__gethex+0x2e4>)
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	9301      	str	r3, [sp, #4]
 801067a:	4618      	mov	r0, r3
 801067c:	468b      	mov	fp, r1
 801067e:	4690      	mov	r8, r2
 8010680:	f7ef fd7e 	bl	8000180 <strlen>
 8010684:	9b01      	ldr	r3, [sp, #4]
 8010686:	f8db 2000 	ldr.w	r2, [fp]
 801068a:	4403      	add	r3, r0
 801068c:	4682      	mov	sl, r0
 801068e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010692:	9305      	str	r3, [sp, #20]
 8010694:	1c93      	adds	r3, r2, #2
 8010696:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801069a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801069e:	32fe      	adds	r2, #254	; 0xfe
 80106a0:	18d1      	adds	r1, r2, r3
 80106a2:	461f      	mov	r7, r3
 80106a4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80106a8:	9100      	str	r1, [sp, #0]
 80106aa:	2830      	cmp	r0, #48	; 0x30
 80106ac:	d0f8      	beq.n	80106a0 <__gethex+0x3c>
 80106ae:	f7ff ffc3 	bl	8010638 <__hexdig_fun>
 80106b2:	4604      	mov	r4, r0
 80106b4:	2800      	cmp	r0, #0
 80106b6:	d13a      	bne.n	801072e <__gethex+0xca>
 80106b8:	9901      	ldr	r1, [sp, #4]
 80106ba:	4652      	mov	r2, sl
 80106bc:	4638      	mov	r0, r7
 80106be:	f001 fa23 	bl	8011b08 <strncmp>
 80106c2:	4605      	mov	r5, r0
 80106c4:	2800      	cmp	r0, #0
 80106c6:	d168      	bne.n	801079a <__gethex+0x136>
 80106c8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80106cc:	eb07 060a 	add.w	r6, r7, sl
 80106d0:	f7ff ffb2 	bl	8010638 <__hexdig_fun>
 80106d4:	2800      	cmp	r0, #0
 80106d6:	d062      	beq.n	801079e <__gethex+0x13a>
 80106d8:	4633      	mov	r3, r6
 80106da:	7818      	ldrb	r0, [r3, #0]
 80106dc:	2830      	cmp	r0, #48	; 0x30
 80106de:	461f      	mov	r7, r3
 80106e0:	f103 0301 	add.w	r3, r3, #1
 80106e4:	d0f9      	beq.n	80106da <__gethex+0x76>
 80106e6:	f7ff ffa7 	bl	8010638 <__hexdig_fun>
 80106ea:	2301      	movs	r3, #1
 80106ec:	fab0 f480 	clz	r4, r0
 80106f0:	0964      	lsrs	r4, r4, #5
 80106f2:	4635      	mov	r5, r6
 80106f4:	9300      	str	r3, [sp, #0]
 80106f6:	463a      	mov	r2, r7
 80106f8:	4616      	mov	r6, r2
 80106fa:	3201      	adds	r2, #1
 80106fc:	7830      	ldrb	r0, [r6, #0]
 80106fe:	f7ff ff9b 	bl	8010638 <__hexdig_fun>
 8010702:	2800      	cmp	r0, #0
 8010704:	d1f8      	bne.n	80106f8 <__gethex+0x94>
 8010706:	9901      	ldr	r1, [sp, #4]
 8010708:	4652      	mov	r2, sl
 801070a:	4630      	mov	r0, r6
 801070c:	f001 f9fc 	bl	8011b08 <strncmp>
 8010710:	b980      	cbnz	r0, 8010734 <__gethex+0xd0>
 8010712:	b94d      	cbnz	r5, 8010728 <__gethex+0xc4>
 8010714:	eb06 050a 	add.w	r5, r6, sl
 8010718:	462a      	mov	r2, r5
 801071a:	4616      	mov	r6, r2
 801071c:	3201      	adds	r2, #1
 801071e:	7830      	ldrb	r0, [r6, #0]
 8010720:	f7ff ff8a 	bl	8010638 <__hexdig_fun>
 8010724:	2800      	cmp	r0, #0
 8010726:	d1f8      	bne.n	801071a <__gethex+0xb6>
 8010728:	1bad      	subs	r5, r5, r6
 801072a:	00ad      	lsls	r5, r5, #2
 801072c:	e004      	b.n	8010738 <__gethex+0xd4>
 801072e:	2400      	movs	r4, #0
 8010730:	4625      	mov	r5, r4
 8010732:	e7e0      	b.n	80106f6 <__gethex+0x92>
 8010734:	2d00      	cmp	r5, #0
 8010736:	d1f7      	bne.n	8010728 <__gethex+0xc4>
 8010738:	7833      	ldrb	r3, [r6, #0]
 801073a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801073e:	2b50      	cmp	r3, #80	; 0x50
 8010740:	d13b      	bne.n	80107ba <__gethex+0x156>
 8010742:	7873      	ldrb	r3, [r6, #1]
 8010744:	2b2b      	cmp	r3, #43	; 0x2b
 8010746:	d02c      	beq.n	80107a2 <__gethex+0x13e>
 8010748:	2b2d      	cmp	r3, #45	; 0x2d
 801074a:	d02e      	beq.n	80107aa <__gethex+0x146>
 801074c:	1c71      	adds	r1, r6, #1
 801074e:	f04f 0900 	mov.w	r9, #0
 8010752:	7808      	ldrb	r0, [r1, #0]
 8010754:	f7ff ff70 	bl	8010638 <__hexdig_fun>
 8010758:	1e43      	subs	r3, r0, #1
 801075a:	b2db      	uxtb	r3, r3
 801075c:	2b18      	cmp	r3, #24
 801075e:	d82c      	bhi.n	80107ba <__gethex+0x156>
 8010760:	f1a0 0210 	sub.w	r2, r0, #16
 8010764:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010768:	f7ff ff66 	bl	8010638 <__hexdig_fun>
 801076c:	1e43      	subs	r3, r0, #1
 801076e:	b2db      	uxtb	r3, r3
 8010770:	2b18      	cmp	r3, #24
 8010772:	d91d      	bls.n	80107b0 <__gethex+0x14c>
 8010774:	f1b9 0f00 	cmp.w	r9, #0
 8010778:	d000      	beq.n	801077c <__gethex+0x118>
 801077a:	4252      	negs	r2, r2
 801077c:	4415      	add	r5, r2
 801077e:	f8cb 1000 	str.w	r1, [fp]
 8010782:	b1e4      	cbz	r4, 80107be <__gethex+0x15a>
 8010784:	9b00      	ldr	r3, [sp, #0]
 8010786:	2b00      	cmp	r3, #0
 8010788:	bf14      	ite	ne
 801078a:	2700      	movne	r7, #0
 801078c:	2706      	moveq	r7, #6
 801078e:	4638      	mov	r0, r7
 8010790:	b009      	add	sp, #36	; 0x24
 8010792:	ecbd 8b02 	vpop	{d8}
 8010796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801079a:	463e      	mov	r6, r7
 801079c:	4625      	mov	r5, r4
 801079e:	2401      	movs	r4, #1
 80107a0:	e7ca      	b.n	8010738 <__gethex+0xd4>
 80107a2:	f04f 0900 	mov.w	r9, #0
 80107a6:	1cb1      	adds	r1, r6, #2
 80107a8:	e7d3      	b.n	8010752 <__gethex+0xee>
 80107aa:	f04f 0901 	mov.w	r9, #1
 80107ae:	e7fa      	b.n	80107a6 <__gethex+0x142>
 80107b0:	230a      	movs	r3, #10
 80107b2:	fb03 0202 	mla	r2, r3, r2, r0
 80107b6:	3a10      	subs	r2, #16
 80107b8:	e7d4      	b.n	8010764 <__gethex+0x100>
 80107ba:	4631      	mov	r1, r6
 80107bc:	e7df      	b.n	801077e <__gethex+0x11a>
 80107be:	1bf3      	subs	r3, r6, r7
 80107c0:	3b01      	subs	r3, #1
 80107c2:	4621      	mov	r1, r4
 80107c4:	2b07      	cmp	r3, #7
 80107c6:	dc0b      	bgt.n	80107e0 <__gethex+0x17c>
 80107c8:	ee18 0a10 	vmov	r0, s16
 80107cc:	f000 fa70 	bl	8010cb0 <_Balloc>
 80107d0:	4604      	mov	r4, r0
 80107d2:	b940      	cbnz	r0, 80107e6 <__gethex+0x182>
 80107d4:	4b5d      	ldr	r3, [pc, #372]	; (801094c <__gethex+0x2e8>)
 80107d6:	4602      	mov	r2, r0
 80107d8:	21de      	movs	r1, #222	; 0xde
 80107da:	485d      	ldr	r0, [pc, #372]	; (8010950 <__gethex+0x2ec>)
 80107dc:	f001 f9b6 	bl	8011b4c <__assert_func>
 80107e0:	3101      	adds	r1, #1
 80107e2:	105b      	asrs	r3, r3, #1
 80107e4:	e7ee      	b.n	80107c4 <__gethex+0x160>
 80107e6:	f100 0914 	add.w	r9, r0, #20
 80107ea:	f04f 0b00 	mov.w	fp, #0
 80107ee:	f1ca 0301 	rsb	r3, sl, #1
 80107f2:	f8cd 9008 	str.w	r9, [sp, #8]
 80107f6:	f8cd b000 	str.w	fp, [sp]
 80107fa:	9306      	str	r3, [sp, #24]
 80107fc:	42b7      	cmp	r7, r6
 80107fe:	d340      	bcc.n	8010882 <__gethex+0x21e>
 8010800:	9802      	ldr	r0, [sp, #8]
 8010802:	9b00      	ldr	r3, [sp, #0]
 8010804:	f840 3b04 	str.w	r3, [r0], #4
 8010808:	eba0 0009 	sub.w	r0, r0, r9
 801080c:	1080      	asrs	r0, r0, #2
 801080e:	0146      	lsls	r6, r0, #5
 8010810:	6120      	str	r0, [r4, #16]
 8010812:	4618      	mov	r0, r3
 8010814:	f000 fb3e 	bl	8010e94 <__hi0bits>
 8010818:	1a30      	subs	r0, r6, r0
 801081a:	f8d8 6000 	ldr.w	r6, [r8]
 801081e:	42b0      	cmp	r0, r6
 8010820:	dd63      	ble.n	80108ea <__gethex+0x286>
 8010822:	1b87      	subs	r7, r0, r6
 8010824:	4639      	mov	r1, r7
 8010826:	4620      	mov	r0, r4
 8010828:	f000 fee2 	bl	80115f0 <__any_on>
 801082c:	4682      	mov	sl, r0
 801082e:	b1a8      	cbz	r0, 801085c <__gethex+0x1f8>
 8010830:	1e7b      	subs	r3, r7, #1
 8010832:	1159      	asrs	r1, r3, #5
 8010834:	f003 021f 	and.w	r2, r3, #31
 8010838:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801083c:	f04f 0a01 	mov.w	sl, #1
 8010840:	fa0a f202 	lsl.w	r2, sl, r2
 8010844:	420a      	tst	r2, r1
 8010846:	d009      	beq.n	801085c <__gethex+0x1f8>
 8010848:	4553      	cmp	r3, sl
 801084a:	dd05      	ble.n	8010858 <__gethex+0x1f4>
 801084c:	1eb9      	subs	r1, r7, #2
 801084e:	4620      	mov	r0, r4
 8010850:	f000 fece 	bl	80115f0 <__any_on>
 8010854:	2800      	cmp	r0, #0
 8010856:	d145      	bne.n	80108e4 <__gethex+0x280>
 8010858:	f04f 0a02 	mov.w	sl, #2
 801085c:	4639      	mov	r1, r7
 801085e:	4620      	mov	r0, r4
 8010860:	f7ff fe98 	bl	8010594 <rshift>
 8010864:	443d      	add	r5, r7
 8010866:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801086a:	42ab      	cmp	r3, r5
 801086c:	da4c      	bge.n	8010908 <__gethex+0x2a4>
 801086e:	ee18 0a10 	vmov	r0, s16
 8010872:	4621      	mov	r1, r4
 8010874:	f000 fa5c 	bl	8010d30 <_Bfree>
 8010878:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801087a:	2300      	movs	r3, #0
 801087c:	6013      	str	r3, [r2, #0]
 801087e:	27a3      	movs	r7, #163	; 0xa3
 8010880:	e785      	b.n	801078e <__gethex+0x12a>
 8010882:	1e73      	subs	r3, r6, #1
 8010884:	9a05      	ldr	r2, [sp, #20]
 8010886:	9303      	str	r3, [sp, #12]
 8010888:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801088c:	4293      	cmp	r3, r2
 801088e:	d019      	beq.n	80108c4 <__gethex+0x260>
 8010890:	f1bb 0f20 	cmp.w	fp, #32
 8010894:	d107      	bne.n	80108a6 <__gethex+0x242>
 8010896:	9b02      	ldr	r3, [sp, #8]
 8010898:	9a00      	ldr	r2, [sp, #0]
 801089a:	f843 2b04 	str.w	r2, [r3], #4
 801089e:	9302      	str	r3, [sp, #8]
 80108a0:	2300      	movs	r3, #0
 80108a2:	9300      	str	r3, [sp, #0]
 80108a4:	469b      	mov	fp, r3
 80108a6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80108aa:	f7ff fec5 	bl	8010638 <__hexdig_fun>
 80108ae:	9b00      	ldr	r3, [sp, #0]
 80108b0:	f000 000f 	and.w	r0, r0, #15
 80108b4:	fa00 f00b 	lsl.w	r0, r0, fp
 80108b8:	4303      	orrs	r3, r0
 80108ba:	9300      	str	r3, [sp, #0]
 80108bc:	f10b 0b04 	add.w	fp, fp, #4
 80108c0:	9b03      	ldr	r3, [sp, #12]
 80108c2:	e00d      	b.n	80108e0 <__gethex+0x27c>
 80108c4:	9b03      	ldr	r3, [sp, #12]
 80108c6:	9a06      	ldr	r2, [sp, #24]
 80108c8:	4413      	add	r3, r2
 80108ca:	42bb      	cmp	r3, r7
 80108cc:	d3e0      	bcc.n	8010890 <__gethex+0x22c>
 80108ce:	4618      	mov	r0, r3
 80108d0:	9901      	ldr	r1, [sp, #4]
 80108d2:	9307      	str	r3, [sp, #28]
 80108d4:	4652      	mov	r2, sl
 80108d6:	f001 f917 	bl	8011b08 <strncmp>
 80108da:	9b07      	ldr	r3, [sp, #28]
 80108dc:	2800      	cmp	r0, #0
 80108de:	d1d7      	bne.n	8010890 <__gethex+0x22c>
 80108e0:	461e      	mov	r6, r3
 80108e2:	e78b      	b.n	80107fc <__gethex+0x198>
 80108e4:	f04f 0a03 	mov.w	sl, #3
 80108e8:	e7b8      	b.n	801085c <__gethex+0x1f8>
 80108ea:	da0a      	bge.n	8010902 <__gethex+0x29e>
 80108ec:	1a37      	subs	r7, r6, r0
 80108ee:	4621      	mov	r1, r4
 80108f0:	ee18 0a10 	vmov	r0, s16
 80108f4:	463a      	mov	r2, r7
 80108f6:	f000 fc37 	bl	8011168 <__lshift>
 80108fa:	1bed      	subs	r5, r5, r7
 80108fc:	4604      	mov	r4, r0
 80108fe:	f100 0914 	add.w	r9, r0, #20
 8010902:	f04f 0a00 	mov.w	sl, #0
 8010906:	e7ae      	b.n	8010866 <__gethex+0x202>
 8010908:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801090c:	42a8      	cmp	r0, r5
 801090e:	dd72      	ble.n	80109f6 <__gethex+0x392>
 8010910:	1b45      	subs	r5, r0, r5
 8010912:	42ae      	cmp	r6, r5
 8010914:	dc36      	bgt.n	8010984 <__gethex+0x320>
 8010916:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801091a:	2b02      	cmp	r3, #2
 801091c:	d02a      	beq.n	8010974 <__gethex+0x310>
 801091e:	2b03      	cmp	r3, #3
 8010920:	d02c      	beq.n	801097c <__gethex+0x318>
 8010922:	2b01      	cmp	r3, #1
 8010924:	d11c      	bne.n	8010960 <__gethex+0x2fc>
 8010926:	42ae      	cmp	r6, r5
 8010928:	d11a      	bne.n	8010960 <__gethex+0x2fc>
 801092a:	2e01      	cmp	r6, #1
 801092c:	d112      	bne.n	8010954 <__gethex+0x2f0>
 801092e:	9a04      	ldr	r2, [sp, #16]
 8010930:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010934:	6013      	str	r3, [r2, #0]
 8010936:	2301      	movs	r3, #1
 8010938:	6123      	str	r3, [r4, #16]
 801093a:	f8c9 3000 	str.w	r3, [r9]
 801093e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010940:	2762      	movs	r7, #98	; 0x62
 8010942:	601c      	str	r4, [r3, #0]
 8010944:	e723      	b.n	801078e <__gethex+0x12a>
 8010946:	bf00      	nop
 8010948:	08012b18 	.word	0x08012b18
 801094c:	08012aa0 	.word	0x08012aa0
 8010950:	08012ab1 	.word	0x08012ab1
 8010954:	1e71      	subs	r1, r6, #1
 8010956:	4620      	mov	r0, r4
 8010958:	f000 fe4a 	bl	80115f0 <__any_on>
 801095c:	2800      	cmp	r0, #0
 801095e:	d1e6      	bne.n	801092e <__gethex+0x2ca>
 8010960:	ee18 0a10 	vmov	r0, s16
 8010964:	4621      	mov	r1, r4
 8010966:	f000 f9e3 	bl	8010d30 <_Bfree>
 801096a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801096c:	2300      	movs	r3, #0
 801096e:	6013      	str	r3, [r2, #0]
 8010970:	2750      	movs	r7, #80	; 0x50
 8010972:	e70c      	b.n	801078e <__gethex+0x12a>
 8010974:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010976:	2b00      	cmp	r3, #0
 8010978:	d1f2      	bne.n	8010960 <__gethex+0x2fc>
 801097a:	e7d8      	b.n	801092e <__gethex+0x2ca>
 801097c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801097e:	2b00      	cmp	r3, #0
 8010980:	d1d5      	bne.n	801092e <__gethex+0x2ca>
 8010982:	e7ed      	b.n	8010960 <__gethex+0x2fc>
 8010984:	1e6f      	subs	r7, r5, #1
 8010986:	f1ba 0f00 	cmp.w	sl, #0
 801098a:	d131      	bne.n	80109f0 <__gethex+0x38c>
 801098c:	b127      	cbz	r7, 8010998 <__gethex+0x334>
 801098e:	4639      	mov	r1, r7
 8010990:	4620      	mov	r0, r4
 8010992:	f000 fe2d 	bl	80115f0 <__any_on>
 8010996:	4682      	mov	sl, r0
 8010998:	117b      	asrs	r3, r7, #5
 801099a:	2101      	movs	r1, #1
 801099c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80109a0:	f007 071f 	and.w	r7, r7, #31
 80109a4:	fa01 f707 	lsl.w	r7, r1, r7
 80109a8:	421f      	tst	r7, r3
 80109aa:	4629      	mov	r1, r5
 80109ac:	4620      	mov	r0, r4
 80109ae:	bf18      	it	ne
 80109b0:	f04a 0a02 	orrne.w	sl, sl, #2
 80109b4:	1b76      	subs	r6, r6, r5
 80109b6:	f7ff fded 	bl	8010594 <rshift>
 80109ba:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80109be:	2702      	movs	r7, #2
 80109c0:	f1ba 0f00 	cmp.w	sl, #0
 80109c4:	d048      	beq.n	8010a58 <__gethex+0x3f4>
 80109c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80109ca:	2b02      	cmp	r3, #2
 80109cc:	d015      	beq.n	80109fa <__gethex+0x396>
 80109ce:	2b03      	cmp	r3, #3
 80109d0:	d017      	beq.n	8010a02 <__gethex+0x39e>
 80109d2:	2b01      	cmp	r3, #1
 80109d4:	d109      	bne.n	80109ea <__gethex+0x386>
 80109d6:	f01a 0f02 	tst.w	sl, #2
 80109da:	d006      	beq.n	80109ea <__gethex+0x386>
 80109dc:	f8d9 0000 	ldr.w	r0, [r9]
 80109e0:	ea4a 0a00 	orr.w	sl, sl, r0
 80109e4:	f01a 0f01 	tst.w	sl, #1
 80109e8:	d10e      	bne.n	8010a08 <__gethex+0x3a4>
 80109ea:	f047 0710 	orr.w	r7, r7, #16
 80109ee:	e033      	b.n	8010a58 <__gethex+0x3f4>
 80109f0:	f04f 0a01 	mov.w	sl, #1
 80109f4:	e7d0      	b.n	8010998 <__gethex+0x334>
 80109f6:	2701      	movs	r7, #1
 80109f8:	e7e2      	b.n	80109c0 <__gethex+0x35c>
 80109fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80109fc:	f1c3 0301 	rsb	r3, r3, #1
 8010a00:	9315      	str	r3, [sp, #84]	; 0x54
 8010a02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d0f0      	beq.n	80109ea <__gethex+0x386>
 8010a08:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010a0c:	f104 0314 	add.w	r3, r4, #20
 8010a10:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010a14:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010a18:	f04f 0c00 	mov.w	ip, #0
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a22:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010a26:	d01c      	beq.n	8010a62 <__gethex+0x3fe>
 8010a28:	3201      	adds	r2, #1
 8010a2a:	6002      	str	r2, [r0, #0]
 8010a2c:	2f02      	cmp	r7, #2
 8010a2e:	f104 0314 	add.w	r3, r4, #20
 8010a32:	d13f      	bne.n	8010ab4 <__gethex+0x450>
 8010a34:	f8d8 2000 	ldr.w	r2, [r8]
 8010a38:	3a01      	subs	r2, #1
 8010a3a:	42b2      	cmp	r2, r6
 8010a3c:	d10a      	bne.n	8010a54 <__gethex+0x3f0>
 8010a3e:	1171      	asrs	r1, r6, #5
 8010a40:	2201      	movs	r2, #1
 8010a42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010a46:	f006 061f 	and.w	r6, r6, #31
 8010a4a:	fa02 f606 	lsl.w	r6, r2, r6
 8010a4e:	421e      	tst	r6, r3
 8010a50:	bf18      	it	ne
 8010a52:	4617      	movne	r7, r2
 8010a54:	f047 0720 	orr.w	r7, r7, #32
 8010a58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010a5a:	601c      	str	r4, [r3, #0]
 8010a5c:	9b04      	ldr	r3, [sp, #16]
 8010a5e:	601d      	str	r5, [r3, #0]
 8010a60:	e695      	b.n	801078e <__gethex+0x12a>
 8010a62:	4299      	cmp	r1, r3
 8010a64:	f843 cc04 	str.w	ip, [r3, #-4]
 8010a68:	d8d8      	bhi.n	8010a1c <__gethex+0x3b8>
 8010a6a:	68a3      	ldr	r3, [r4, #8]
 8010a6c:	459b      	cmp	fp, r3
 8010a6e:	db19      	blt.n	8010aa4 <__gethex+0x440>
 8010a70:	6861      	ldr	r1, [r4, #4]
 8010a72:	ee18 0a10 	vmov	r0, s16
 8010a76:	3101      	adds	r1, #1
 8010a78:	f000 f91a 	bl	8010cb0 <_Balloc>
 8010a7c:	4681      	mov	r9, r0
 8010a7e:	b918      	cbnz	r0, 8010a88 <__gethex+0x424>
 8010a80:	4b1a      	ldr	r3, [pc, #104]	; (8010aec <__gethex+0x488>)
 8010a82:	4602      	mov	r2, r0
 8010a84:	2184      	movs	r1, #132	; 0x84
 8010a86:	e6a8      	b.n	80107da <__gethex+0x176>
 8010a88:	6922      	ldr	r2, [r4, #16]
 8010a8a:	3202      	adds	r2, #2
 8010a8c:	f104 010c 	add.w	r1, r4, #12
 8010a90:	0092      	lsls	r2, r2, #2
 8010a92:	300c      	adds	r0, #12
 8010a94:	f7fd f994 	bl	800ddc0 <memcpy>
 8010a98:	4621      	mov	r1, r4
 8010a9a:	ee18 0a10 	vmov	r0, s16
 8010a9e:	f000 f947 	bl	8010d30 <_Bfree>
 8010aa2:	464c      	mov	r4, r9
 8010aa4:	6923      	ldr	r3, [r4, #16]
 8010aa6:	1c5a      	adds	r2, r3, #1
 8010aa8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010aac:	6122      	str	r2, [r4, #16]
 8010aae:	2201      	movs	r2, #1
 8010ab0:	615a      	str	r2, [r3, #20]
 8010ab2:	e7bb      	b.n	8010a2c <__gethex+0x3c8>
 8010ab4:	6922      	ldr	r2, [r4, #16]
 8010ab6:	455a      	cmp	r2, fp
 8010ab8:	dd0b      	ble.n	8010ad2 <__gethex+0x46e>
 8010aba:	2101      	movs	r1, #1
 8010abc:	4620      	mov	r0, r4
 8010abe:	f7ff fd69 	bl	8010594 <rshift>
 8010ac2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010ac6:	3501      	adds	r5, #1
 8010ac8:	42ab      	cmp	r3, r5
 8010aca:	f6ff aed0 	blt.w	801086e <__gethex+0x20a>
 8010ace:	2701      	movs	r7, #1
 8010ad0:	e7c0      	b.n	8010a54 <__gethex+0x3f0>
 8010ad2:	f016 061f 	ands.w	r6, r6, #31
 8010ad6:	d0fa      	beq.n	8010ace <__gethex+0x46a>
 8010ad8:	4453      	add	r3, sl
 8010ada:	f1c6 0620 	rsb	r6, r6, #32
 8010ade:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010ae2:	f000 f9d7 	bl	8010e94 <__hi0bits>
 8010ae6:	42b0      	cmp	r0, r6
 8010ae8:	dbe7      	blt.n	8010aba <__gethex+0x456>
 8010aea:	e7f0      	b.n	8010ace <__gethex+0x46a>
 8010aec:	08012aa0 	.word	0x08012aa0

08010af0 <L_shift>:
 8010af0:	f1c2 0208 	rsb	r2, r2, #8
 8010af4:	0092      	lsls	r2, r2, #2
 8010af6:	b570      	push	{r4, r5, r6, lr}
 8010af8:	f1c2 0620 	rsb	r6, r2, #32
 8010afc:	6843      	ldr	r3, [r0, #4]
 8010afe:	6804      	ldr	r4, [r0, #0]
 8010b00:	fa03 f506 	lsl.w	r5, r3, r6
 8010b04:	432c      	orrs	r4, r5
 8010b06:	40d3      	lsrs	r3, r2
 8010b08:	6004      	str	r4, [r0, #0]
 8010b0a:	f840 3f04 	str.w	r3, [r0, #4]!
 8010b0e:	4288      	cmp	r0, r1
 8010b10:	d3f4      	bcc.n	8010afc <L_shift+0xc>
 8010b12:	bd70      	pop	{r4, r5, r6, pc}

08010b14 <__match>:
 8010b14:	b530      	push	{r4, r5, lr}
 8010b16:	6803      	ldr	r3, [r0, #0]
 8010b18:	3301      	adds	r3, #1
 8010b1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b1e:	b914      	cbnz	r4, 8010b26 <__match+0x12>
 8010b20:	6003      	str	r3, [r0, #0]
 8010b22:	2001      	movs	r0, #1
 8010b24:	bd30      	pop	{r4, r5, pc}
 8010b26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b2a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010b2e:	2d19      	cmp	r5, #25
 8010b30:	bf98      	it	ls
 8010b32:	3220      	addls	r2, #32
 8010b34:	42a2      	cmp	r2, r4
 8010b36:	d0f0      	beq.n	8010b1a <__match+0x6>
 8010b38:	2000      	movs	r0, #0
 8010b3a:	e7f3      	b.n	8010b24 <__match+0x10>

08010b3c <__hexnan>:
 8010b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b40:	680b      	ldr	r3, [r1, #0]
 8010b42:	115e      	asrs	r6, r3, #5
 8010b44:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010b48:	f013 031f 	ands.w	r3, r3, #31
 8010b4c:	b087      	sub	sp, #28
 8010b4e:	bf18      	it	ne
 8010b50:	3604      	addne	r6, #4
 8010b52:	2500      	movs	r5, #0
 8010b54:	1f37      	subs	r7, r6, #4
 8010b56:	4690      	mov	r8, r2
 8010b58:	6802      	ldr	r2, [r0, #0]
 8010b5a:	9301      	str	r3, [sp, #4]
 8010b5c:	4682      	mov	sl, r0
 8010b5e:	f846 5c04 	str.w	r5, [r6, #-4]
 8010b62:	46b9      	mov	r9, r7
 8010b64:	463c      	mov	r4, r7
 8010b66:	9502      	str	r5, [sp, #8]
 8010b68:	46ab      	mov	fp, r5
 8010b6a:	7851      	ldrb	r1, [r2, #1]
 8010b6c:	1c53      	adds	r3, r2, #1
 8010b6e:	9303      	str	r3, [sp, #12]
 8010b70:	b341      	cbz	r1, 8010bc4 <__hexnan+0x88>
 8010b72:	4608      	mov	r0, r1
 8010b74:	9205      	str	r2, [sp, #20]
 8010b76:	9104      	str	r1, [sp, #16]
 8010b78:	f7ff fd5e 	bl	8010638 <__hexdig_fun>
 8010b7c:	2800      	cmp	r0, #0
 8010b7e:	d14f      	bne.n	8010c20 <__hexnan+0xe4>
 8010b80:	9904      	ldr	r1, [sp, #16]
 8010b82:	9a05      	ldr	r2, [sp, #20]
 8010b84:	2920      	cmp	r1, #32
 8010b86:	d818      	bhi.n	8010bba <__hexnan+0x7e>
 8010b88:	9b02      	ldr	r3, [sp, #8]
 8010b8a:	459b      	cmp	fp, r3
 8010b8c:	dd13      	ble.n	8010bb6 <__hexnan+0x7a>
 8010b8e:	454c      	cmp	r4, r9
 8010b90:	d206      	bcs.n	8010ba0 <__hexnan+0x64>
 8010b92:	2d07      	cmp	r5, #7
 8010b94:	dc04      	bgt.n	8010ba0 <__hexnan+0x64>
 8010b96:	462a      	mov	r2, r5
 8010b98:	4649      	mov	r1, r9
 8010b9a:	4620      	mov	r0, r4
 8010b9c:	f7ff ffa8 	bl	8010af0 <L_shift>
 8010ba0:	4544      	cmp	r4, r8
 8010ba2:	d950      	bls.n	8010c46 <__hexnan+0x10a>
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	f1a4 0904 	sub.w	r9, r4, #4
 8010baa:	f844 3c04 	str.w	r3, [r4, #-4]
 8010bae:	f8cd b008 	str.w	fp, [sp, #8]
 8010bb2:	464c      	mov	r4, r9
 8010bb4:	461d      	mov	r5, r3
 8010bb6:	9a03      	ldr	r2, [sp, #12]
 8010bb8:	e7d7      	b.n	8010b6a <__hexnan+0x2e>
 8010bba:	2929      	cmp	r1, #41	; 0x29
 8010bbc:	d156      	bne.n	8010c6c <__hexnan+0x130>
 8010bbe:	3202      	adds	r2, #2
 8010bc0:	f8ca 2000 	str.w	r2, [sl]
 8010bc4:	f1bb 0f00 	cmp.w	fp, #0
 8010bc8:	d050      	beq.n	8010c6c <__hexnan+0x130>
 8010bca:	454c      	cmp	r4, r9
 8010bcc:	d206      	bcs.n	8010bdc <__hexnan+0xa0>
 8010bce:	2d07      	cmp	r5, #7
 8010bd0:	dc04      	bgt.n	8010bdc <__hexnan+0xa0>
 8010bd2:	462a      	mov	r2, r5
 8010bd4:	4649      	mov	r1, r9
 8010bd6:	4620      	mov	r0, r4
 8010bd8:	f7ff ff8a 	bl	8010af0 <L_shift>
 8010bdc:	4544      	cmp	r4, r8
 8010bde:	d934      	bls.n	8010c4a <__hexnan+0x10e>
 8010be0:	f1a8 0204 	sub.w	r2, r8, #4
 8010be4:	4623      	mov	r3, r4
 8010be6:	f853 1b04 	ldr.w	r1, [r3], #4
 8010bea:	f842 1f04 	str.w	r1, [r2, #4]!
 8010bee:	429f      	cmp	r7, r3
 8010bf0:	d2f9      	bcs.n	8010be6 <__hexnan+0xaa>
 8010bf2:	1b3b      	subs	r3, r7, r4
 8010bf4:	f023 0303 	bic.w	r3, r3, #3
 8010bf8:	3304      	adds	r3, #4
 8010bfa:	3401      	adds	r4, #1
 8010bfc:	3e03      	subs	r6, #3
 8010bfe:	42b4      	cmp	r4, r6
 8010c00:	bf88      	it	hi
 8010c02:	2304      	movhi	r3, #4
 8010c04:	4443      	add	r3, r8
 8010c06:	2200      	movs	r2, #0
 8010c08:	f843 2b04 	str.w	r2, [r3], #4
 8010c0c:	429f      	cmp	r7, r3
 8010c0e:	d2fb      	bcs.n	8010c08 <__hexnan+0xcc>
 8010c10:	683b      	ldr	r3, [r7, #0]
 8010c12:	b91b      	cbnz	r3, 8010c1c <__hexnan+0xe0>
 8010c14:	4547      	cmp	r7, r8
 8010c16:	d127      	bne.n	8010c68 <__hexnan+0x12c>
 8010c18:	2301      	movs	r3, #1
 8010c1a:	603b      	str	r3, [r7, #0]
 8010c1c:	2005      	movs	r0, #5
 8010c1e:	e026      	b.n	8010c6e <__hexnan+0x132>
 8010c20:	3501      	adds	r5, #1
 8010c22:	2d08      	cmp	r5, #8
 8010c24:	f10b 0b01 	add.w	fp, fp, #1
 8010c28:	dd06      	ble.n	8010c38 <__hexnan+0xfc>
 8010c2a:	4544      	cmp	r4, r8
 8010c2c:	d9c3      	bls.n	8010bb6 <__hexnan+0x7a>
 8010c2e:	2300      	movs	r3, #0
 8010c30:	f844 3c04 	str.w	r3, [r4, #-4]
 8010c34:	2501      	movs	r5, #1
 8010c36:	3c04      	subs	r4, #4
 8010c38:	6822      	ldr	r2, [r4, #0]
 8010c3a:	f000 000f 	and.w	r0, r0, #15
 8010c3e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010c42:	6022      	str	r2, [r4, #0]
 8010c44:	e7b7      	b.n	8010bb6 <__hexnan+0x7a>
 8010c46:	2508      	movs	r5, #8
 8010c48:	e7b5      	b.n	8010bb6 <__hexnan+0x7a>
 8010c4a:	9b01      	ldr	r3, [sp, #4]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d0df      	beq.n	8010c10 <__hexnan+0xd4>
 8010c50:	f04f 32ff 	mov.w	r2, #4294967295
 8010c54:	f1c3 0320 	rsb	r3, r3, #32
 8010c58:	fa22 f303 	lsr.w	r3, r2, r3
 8010c5c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010c60:	401a      	ands	r2, r3
 8010c62:	f846 2c04 	str.w	r2, [r6, #-4]
 8010c66:	e7d3      	b.n	8010c10 <__hexnan+0xd4>
 8010c68:	3f04      	subs	r7, #4
 8010c6a:	e7d1      	b.n	8010c10 <__hexnan+0xd4>
 8010c6c:	2004      	movs	r0, #4
 8010c6e:	b007      	add	sp, #28
 8010c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010c74 <_localeconv_r>:
 8010c74:	4800      	ldr	r0, [pc, #0]	; (8010c78 <_localeconv_r+0x4>)
 8010c76:	4770      	bx	lr
 8010c78:	2000026c 	.word	0x2000026c

08010c7c <malloc>:
 8010c7c:	4b02      	ldr	r3, [pc, #8]	; (8010c88 <malloc+0xc>)
 8010c7e:	4601      	mov	r1, r0
 8010c80:	6818      	ldr	r0, [r3, #0]
 8010c82:	f000 bd59 	b.w	8011738 <_malloc_r>
 8010c86:	bf00      	nop
 8010c88:	20000114 	.word	0x20000114

08010c8c <__ascii_mbtowc>:
 8010c8c:	b082      	sub	sp, #8
 8010c8e:	b901      	cbnz	r1, 8010c92 <__ascii_mbtowc+0x6>
 8010c90:	a901      	add	r1, sp, #4
 8010c92:	b142      	cbz	r2, 8010ca6 <__ascii_mbtowc+0x1a>
 8010c94:	b14b      	cbz	r3, 8010caa <__ascii_mbtowc+0x1e>
 8010c96:	7813      	ldrb	r3, [r2, #0]
 8010c98:	600b      	str	r3, [r1, #0]
 8010c9a:	7812      	ldrb	r2, [r2, #0]
 8010c9c:	1e10      	subs	r0, r2, #0
 8010c9e:	bf18      	it	ne
 8010ca0:	2001      	movne	r0, #1
 8010ca2:	b002      	add	sp, #8
 8010ca4:	4770      	bx	lr
 8010ca6:	4610      	mov	r0, r2
 8010ca8:	e7fb      	b.n	8010ca2 <__ascii_mbtowc+0x16>
 8010caa:	f06f 0001 	mvn.w	r0, #1
 8010cae:	e7f8      	b.n	8010ca2 <__ascii_mbtowc+0x16>

08010cb0 <_Balloc>:
 8010cb0:	b570      	push	{r4, r5, r6, lr}
 8010cb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010cb4:	4604      	mov	r4, r0
 8010cb6:	460d      	mov	r5, r1
 8010cb8:	b976      	cbnz	r6, 8010cd8 <_Balloc+0x28>
 8010cba:	2010      	movs	r0, #16
 8010cbc:	f7ff ffde 	bl	8010c7c <malloc>
 8010cc0:	4602      	mov	r2, r0
 8010cc2:	6260      	str	r0, [r4, #36]	; 0x24
 8010cc4:	b920      	cbnz	r0, 8010cd0 <_Balloc+0x20>
 8010cc6:	4b18      	ldr	r3, [pc, #96]	; (8010d28 <_Balloc+0x78>)
 8010cc8:	4818      	ldr	r0, [pc, #96]	; (8010d2c <_Balloc+0x7c>)
 8010cca:	2166      	movs	r1, #102	; 0x66
 8010ccc:	f000 ff3e 	bl	8011b4c <__assert_func>
 8010cd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010cd4:	6006      	str	r6, [r0, #0]
 8010cd6:	60c6      	str	r6, [r0, #12]
 8010cd8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010cda:	68f3      	ldr	r3, [r6, #12]
 8010cdc:	b183      	cbz	r3, 8010d00 <_Balloc+0x50>
 8010cde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ce0:	68db      	ldr	r3, [r3, #12]
 8010ce2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010ce6:	b9b8      	cbnz	r0, 8010d18 <_Balloc+0x68>
 8010ce8:	2101      	movs	r1, #1
 8010cea:	fa01 f605 	lsl.w	r6, r1, r5
 8010cee:	1d72      	adds	r2, r6, #5
 8010cf0:	0092      	lsls	r2, r2, #2
 8010cf2:	4620      	mov	r0, r4
 8010cf4:	f000 fc9d 	bl	8011632 <_calloc_r>
 8010cf8:	b160      	cbz	r0, 8010d14 <_Balloc+0x64>
 8010cfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010cfe:	e00e      	b.n	8010d1e <_Balloc+0x6e>
 8010d00:	2221      	movs	r2, #33	; 0x21
 8010d02:	2104      	movs	r1, #4
 8010d04:	4620      	mov	r0, r4
 8010d06:	f000 fc94 	bl	8011632 <_calloc_r>
 8010d0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010d0c:	60f0      	str	r0, [r6, #12]
 8010d0e:	68db      	ldr	r3, [r3, #12]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d1e4      	bne.n	8010cde <_Balloc+0x2e>
 8010d14:	2000      	movs	r0, #0
 8010d16:	bd70      	pop	{r4, r5, r6, pc}
 8010d18:	6802      	ldr	r2, [r0, #0]
 8010d1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010d1e:	2300      	movs	r3, #0
 8010d20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010d24:	e7f7      	b.n	8010d16 <_Balloc+0x66>
 8010d26:	bf00      	nop
 8010d28:	08012a2e 	.word	0x08012a2e
 8010d2c:	08012b2c 	.word	0x08012b2c

08010d30 <_Bfree>:
 8010d30:	b570      	push	{r4, r5, r6, lr}
 8010d32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010d34:	4605      	mov	r5, r0
 8010d36:	460c      	mov	r4, r1
 8010d38:	b976      	cbnz	r6, 8010d58 <_Bfree+0x28>
 8010d3a:	2010      	movs	r0, #16
 8010d3c:	f7ff ff9e 	bl	8010c7c <malloc>
 8010d40:	4602      	mov	r2, r0
 8010d42:	6268      	str	r0, [r5, #36]	; 0x24
 8010d44:	b920      	cbnz	r0, 8010d50 <_Bfree+0x20>
 8010d46:	4b09      	ldr	r3, [pc, #36]	; (8010d6c <_Bfree+0x3c>)
 8010d48:	4809      	ldr	r0, [pc, #36]	; (8010d70 <_Bfree+0x40>)
 8010d4a:	218a      	movs	r1, #138	; 0x8a
 8010d4c:	f000 fefe 	bl	8011b4c <__assert_func>
 8010d50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010d54:	6006      	str	r6, [r0, #0]
 8010d56:	60c6      	str	r6, [r0, #12]
 8010d58:	b13c      	cbz	r4, 8010d6a <_Bfree+0x3a>
 8010d5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010d5c:	6862      	ldr	r2, [r4, #4]
 8010d5e:	68db      	ldr	r3, [r3, #12]
 8010d60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010d64:	6021      	str	r1, [r4, #0]
 8010d66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010d6a:	bd70      	pop	{r4, r5, r6, pc}
 8010d6c:	08012a2e 	.word	0x08012a2e
 8010d70:	08012b2c 	.word	0x08012b2c

08010d74 <__multadd>:
 8010d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d78:	690d      	ldr	r5, [r1, #16]
 8010d7a:	4607      	mov	r7, r0
 8010d7c:	460c      	mov	r4, r1
 8010d7e:	461e      	mov	r6, r3
 8010d80:	f101 0c14 	add.w	ip, r1, #20
 8010d84:	2000      	movs	r0, #0
 8010d86:	f8dc 3000 	ldr.w	r3, [ip]
 8010d8a:	b299      	uxth	r1, r3
 8010d8c:	fb02 6101 	mla	r1, r2, r1, r6
 8010d90:	0c1e      	lsrs	r6, r3, #16
 8010d92:	0c0b      	lsrs	r3, r1, #16
 8010d94:	fb02 3306 	mla	r3, r2, r6, r3
 8010d98:	b289      	uxth	r1, r1
 8010d9a:	3001      	adds	r0, #1
 8010d9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010da0:	4285      	cmp	r5, r0
 8010da2:	f84c 1b04 	str.w	r1, [ip], #4
 8010da6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010daa:	dcec      	bgt.n	8010d86 <__multadd+0x12>
 8010dac:	b30e      	cbz	r6, 8010df2 <__multadd+0x7e>
 8010dae:	68a3      	ldr	r3, [r4, #8]
 8010db0:	42ab      	cmp	r3, r5
 8010db2:	dc19      	bgt.n	8010de8 <__multadd+0x74>
 8010db4:	6861      	ldr	r1, [r4, #4]
 8010db6:	4638      	mov	r0, r7
 8010db8:	3101      	adds	r1, #1
 8010dba:	f7ff ff79 	bl	8010cb0 <_Balloc>
 8010dbe:	4680      	mov	r8, r0
 8010dc0:	b928      	cbnz	r0, 8010dce <__multadd+0x5a>
 8010dc2:	4602      	mov	r2, r0
 8010dc4:	4b0c      	ldr	r3, [pc, #48]	; (8010df8 <__multadd+0x84>)
 8010dc6:	480d      	ldr	r0, [pc, #52]	; (8010dfc <__multadd+0x88>)
 8010dc8:	21b5      	movs	r1, #181	; 0xb5
 8010dca:	f000 febf 	bl	8011b4c <__assert_func>
 8010dce:	6922      	ldr	r2, [r4, #16]
 8010dd0:	3202      	adds	r2, #2
 8010dd2:	f104 010c 	add.w	r1, r4, #12
 8010dd6:	0092      	lsls	r2, r2, #2
 8010dd8:	300c      	adds	r0, #12
 8010dda:	f7fc fff1 	bl	800ddc0 <memcpy>
 8010dde:	4621      	mov	r1, r4
 8010de0:	4638      	mov	r0, r7
 8010de2:	f7ff ffa5 	bl	8010d30 <_Bfree>
 8010de6:	4644      	mov	r4, r8
 8010de8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010dec:	3501      	adds	r5, #1
 8010dee:	615e      	str	r6, [r3, #20]
 8010df0:	6125      	str	r5, [r4, #16]
 8010df2:	4620      	mov	r0, r4
 8010df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010df8:	08012aa0 	.word	0x08012aa0
 8010dfc:	08012b2c 	.word	0x08012b2c

08010e00 <__s2b>:
 8010e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e04:	460c      	mov	r4, r1
 8010e06:	4615      	mov	r5, r2
 8010e08:	461f      	mov	r7, r3
 8010e0a:	2209      	movs	r2, #9
 8010e0c:	3308      	adds	r3, #8
 8010e0e:	4606      	mov	r6, r0
 8010e10:	fb93 f3f2 	sdiv	r3, r3, r2
 8010e14:	2100      	movs	r1, #0
 8010e16:	2201      	movs	r2, #1
 8010e18:	429a      	cmp	r2, r3
 8010e1a:	db09      	blt.n	8010e30 <__s2b+0x30>
 8010e1c:	4630      	mov	r0, r6
 8010e1e:	f7ff ff47 	bl	8010cb0 <_Balloc>
 8010e22:	b940      	cbnz	r0, 8010e36 <__s2b+0x36>
 8010e24:	4602      	mov	r2, r0
 8010e26:	4b19      	ldr	r3, [pc, #100]	; (8010e8c <__s2b+0x8c>)
 8010e28:	4819      	ldr	r0, [pc, #100]	; (8010e90 <__s2b+0x90>)
 8010e2a:	21ce      	movs	r1, #206	; 0xce
 8010e2c:	f000 fe8e 	bl	8011b4c <__assert_func>
 8010e30:	0052      	lsls	r2, r2, #1
 8010e32:	3101      	adds	r1, #1
 8010e34:	e7f0      	b.n	8010e18 <__s2b+0x18>
 8010e36:	9b08      	ldr	r3, [sp, #32]
 8010e38:	6143      	str	r3, [r0, #20]
 8010e3a:	2d09      	cmp	r5, #9
 8010e3c:	f04f 0301 	mov.w	r3, #1
 8010e40:	6103      	str	r3, [r0, #16]
 8010e42:	dd16      	ble.n	8010e72 <__s2b+0x72>
 8010e44:	f104 0909 	add.w	r9, r4, #9
 8010e48:	46c8      	mov	r8, r9
 8010e4a:	442c      	add	r4, r5
 8010e4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010e50:	4601      	mov	r1, r0
 8010e52:	3b30      	subs	r3, #48	; 0x30
 8010e54:	220a      	movs	r2, #10
 8010e56:	4630      	mov	r0, r6
 8010e58:	f7ff ff8c 	bl	8010d74 <__multadd>
 8010e5c:	45a0      	cmp	r8, r4
 8010e5e:	d1f5      	bne.n	8010e4c <__s2b+0x4c>
 8010e60:	f1a5 0408 	sub.w	r4, r5, #8
 8010e64:	444c      	add	r4, r9
 8010e66:	1b2d      	subs	r5, r5, r4
 8010e68:	1963      	adds	r3, r4, r5
 8010e6a:	42bb      	cmp	r3, r7
 8010e6c:	db04      	blt.n	8010e78 <__s2b+0x78>
 8010e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e72:	340a      	adds	r4, #10
 8010e74:	2509      	movs	r5, #9
 8010e76:	e7f6      	b.n	8010e66 <__s2b+0x66>
 8010e78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010e7c:	4601      	mov	r1, r0
 8010e7e:	3b30      	subs	r3, #48	; 0x30
 8010e80:	220a      	movs	r2, #10
 8010e82:	4630      	mov	r0, r6
 8010e84:	f7ff ff76 	bl	8010d74 <__multadd>
 8010e88:	e7ee      	b.n	8010e68 <__s2b+0x68>
 8010e8a:	bf00      	nop
 8010e8c:	08012aa0 	.word	0x08012aa0
 8010e90:	08012b2c 	.word	0x08012b2c

08010e94 <__hi0bits>:
 8010e94:	0c03      	lsrs	r3, r0, #16
 8010e96:	041b      	lsls	r3, r3, #16
 8010e98:	b9d3      	cbnz	r3, 8010ed0 <__hi0bits+0x3c>
 8010e9a:	0400      	lsls	r0, r0, #16
 8010e9c:	2310      	movs	r3, #16
 8010e9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010ea2:	bf04      	itt	eq
 8010ea4:	0200      	lsleq	r0, r0, #8
 8010ea6:	3308      	addeq	r3, #8
 8010ea8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010eac:	bf04      	itt	eq
 8010eae:	0100      	lsleq	r0, r0, #4
 8010eb0:	3304      	addeq	r3, #4
 8010eb2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010eb6:	bf04      	itt	eq
 8010eb8:	0080      	lsleq	r0, r0, #2
 8010eba:	3302      	addeq	r3, #2
 8010ebc:	2800      	cmp	r0, #0
 8010ebe:	db05      	blt.n	8010ecc <__hi0bits+0x38>
 8010ec0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010ec4:	f103 0301 	add.w	r3, r3, #1
 8010ec8:	bf08      	it	eq
 8010eca:	2320      	moveq	r3, #32
 8010ecc:	4618      	mov	r0, r3
 8010ece:	4770      	bx	lr
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	e7e4      	b.n	8010e9e <__hi0bits+0xa>

08010ed4 <__lo0bits>:
 8010ed4:	6803      	ldr	r3, [r0, #0]
 8010ed6:	f013 0207 	ands.w	r2, r3, #7
 8010eda:	4601      	mov	r1, r0
 8010edc:	d00b      	beq.n	8010ef6 <__lo0bits+0x22>
 8010ede:	07da      	lsls	r2, r3, #31
 8010ee0:	d423      	bmi.n	8010f2a <__lo0bits+0x56>
 8010ee2:	0798      	lsls	r0, r3, #30
 8010ee4:	bf49      	itett	mi
 8010ee6:	085b      	lsrmi	r3, r3, #1
 8010ee8:	089b      	lsrpl	r3, r3, #2
 8010eea:	2001      	movmi	r0, #1
 8010eec:	600b      	strmi	r3, [r1, #0]
 8010eee:	bf5c      	itt	pl
 8010ef0:	600b      	strpl	r3, [r1, #0]
 8010ef2:	2002      	movpl	r0, #2
 8010ef4:	4770      	bx	lr
 8010ef6:	b298      	uxth	r0, r3
 8010ef8:	b9a8      	cbnz	r0, 8010f26 <__lo0bits+0x52>
 8010efa:	0c1b      	lsrs	r3, r3, #16
 8010efc:	2010      	movs	r0, #16
 8010efe:	b2da      	uxtb	r2, r3
 8010f00:	b90a      	cbnz	r2, 8010f06 <__lo0bits+0x32>
 8010f02:	3008      	adds	r0, #8
 8010f04:	0a1b      	lsrs	r3, r3, #8
 8010f06:	071a      	lsls	r2, r3, #28
 8010f08:	bf04      	itt	eq
 8010f0a:	091b      	lsreq	r3, r3, #4
 8010f0c:	3004      	addeq	r0, #4
 8010f0e:	079a      	lsls	r2, r3, #30
 8010f10:	bf04      	itt	eq
 8010f12:	089b      	lsreq	r3, r3, #2
 8010f14:	3002      	addeq	r0, #2
 8010f16:	07da      	lsls	r2, r3, #31
 8010f18:	d403      	bmi.n	8010f22 <__lo0bits+0x4e>
 8010f1a:	085b      	lsrs	r3, r3, #1
 8010f1c:	f100 0001 	add.w	r0, r0, #1
 8010f20:	d005      	beq.n	8010f2e <__lo0bits+0x5a>
 8010f22:	600b      	str	r3, [r1, #0]
 8010f24:	4770      	bx	lr
 8010f26:	4610      	mov	r0, r2
 8010f28:	e7e9      	b.n	8010efe <__lo0bits+0x2a>
 8010f2a:	2000      	movs	r0, #0
 8010f2c:	4770      	bx	lr
 8010f2e:	2020      	movs	r0, #32
 8010f30:	4770      	bx	lr
	...

08010f34 <__i2b>:
 8010f34:	b510      	push	{r4, lr}
 8010f36:	460c      	mov	r4, r1
 8010f38:	2101      	movs	r1, #1
 8010f3a:	f7ff feb9 	bl	8010cb0 <_Balloc>
 8010f3e:	4602      	mov	r2, r0
 8010f40:	b928      	cbnz	r0, 8010f4e <__i2b+0x1a>
 8010f42:	4b05      	ldr	r3, [pc, #20]	; (8010f58 <__i2b+0x24>)
 8010f44:	4805      	ldr	r0, [pc, #20]	; (8010f5c <__i2b+0x28>)
 8010f46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010f4a:	f000 fdff 	bl	8011b4c <__assert_func>
 8010f4e:	2301      	movs	r3, #1
 8010f50:	6144      	str	r4, [r0, #20]
 8010f52:	6103      	str	r3, [r0, #16]
 8010f54:	bd10      	pop	{r4, pc}
 8010f56:	bf00      	nop
 8010f58:	08012aa0 	.word	0x08012aa0
 8010f5c:	08012b2c 	.word	0x08012b2c

08010f60 <__multiply>:
 8010f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f64:	4691      	mov	r9, r2
 8010f66:	690a      	ldr	r2, [r1, #16]
 8010f68:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010f6c:	429a      	cmp	r2, r3
 8010f6e:	bfb8      	it	lt
 8010f70:	460b      	movlt	r3, r1
 8010f72:	460c      	mov	r4, r1
 8010f74:	bfbc      	itt	lt
 8010f76:	464c      	movlt	r4, r9
 8010f78:	4699      	movlt	r9, r3
 8010f7a:	6927      	ldr	r7, [r4, #16]
 8010f7c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010f80:	68a3      	ldr	r3, [r4, #8]
 8010f82:	6861      	ldr	r1, [r4, #4]
 8010f84:	eb07 060a 	add.w	r6, r7, sl
 8010f88:	42b3      	cmp	r3, r6
 8010f8a:	b085      	sub	sp, #20
 8010f8c:	bfb8      	it	lt
 8010f8e:	3101      	addlt	r1, #1
 8010f90:	f7ff fe8e 	bl	8010cb0 <_Balloc>
 8010f94:	b930      	cbnz	r0, 8010fa4 <__multiply+0x44>
 8010f96:	4602      	mov	r2, r0
 8010f98:	4b44      	ldr	r3, [pc, #272]	; (80110ac <__multiply+0x14c>)
 8010f9a:	4845      	ldr	r0, [pc, #276]	; (80110b0 <__multiply+0x150>)
 8010f9c:	f240 115d 	movw	r1, #349	; 0x15d
 8010fa0:	f000 fdd4 	bl	8011b4c <__assert_func>
 8010fa4:	f100 0514 	add.w	r5, r0, #20
 8010fa8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010fac:	462b      	mov	r3, r5
 8010fae:	2200      	movs	r2, #0
 8010fb0:	4543      	cmp	r3, r8
 8010fb2:	d321      	bcc.n	8010ff8 <__multiply+0x98>
 8010fb4:	f104 0314 	add.w	r3, r4, #20
 8010fb8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010fbc:	f109 0314 	add.w	r3, r9, #20
 8010fc0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010fc4:	9202      	str	r2, [sp, #8]
 8010fc6:	1b3a      	subs	r2, r7, r4
 8010fc8:	3a15      	subs	r2, #21
 8010fca:	f022 0203 	bic.w	r2, r2, #3
 8010fce:	3204      	adds	r2, #4
 8010fd0:	f104 0115 	add.w	r1, r4, #21
 8010fd4:	428f      	cmp	r7, r1
 8010fd6:	bf38      	it	cc
 8010fd8:	2204      	movcc	r2, #4
 8010fda:	9201      	str	r2, [sp, #4]
 8010fdc:	9a02      	ldr	r2, [sp, #8]
 8010fde:	9303      	str	r3, [sp, #12]
 8010fe0:	429a      	cmp	r2, r3
 8010fe2:	d80c      	bhi.n	8010ffe <__multiply+0x9e>
 8010fe4:	2e00      	cmp	r6, #0
 8010fe6:	dd03      	ble.n	8010ff0 <__multiply+0x90>
 8010fe8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d05a      	beq.n	80110a6 <__multiply+0x146>
 8010ff0:	6106      	str	r6, [r0, #16]
 8010ff2:	b005      	add	sp, #20
 8010ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ff8:	f843 2b04 	str.w	r2, [r3], #4
 8010ffc:	e7d8      	b.n	8010fb0 <__multiply+0x50>
 8010ffe:	f8b3 a000 	ldrh.w	sl, [r3]
 8011002:	f1ba 0f00 	cmp.w	sl, #0
 8011006:	d024      	beq.n	8011052 <__multiply+0xf2>
 8011008:	f104 0e14 	add.w	lr, r4, #20
 801100c:	46a9      	mov	r9, r5
 801100e:	f04f 0c00 	mov.w	ip, #0
 8011012:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011016:	f8d9 1000 	ldr.w	r1, [r9]
 801101a:	fa1f fb82 	uxth.w	fp, r2
 801101e:	b289      	uxth	r1, r1
 8011020:	fb0a 110b 	mla	r1, sl, fp, r1
 8011024:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011028:	f8d9 2000 	ldr.w	r2, [r9]
 801102c:	4461      	add	r1, ip
 801102e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011032:	fb0a c20b 	mla	r2, sl, fp, ip
 8011036:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801103a:	b289      	uxth	r1, r1
 801103c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011040:	4577      	cmp	r7, lr
 8011042:	f849 1b04 	str.w	r1, [r9], #4
 8011046:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801104a:	d8e2      	bhi.n	8011012 <__multiply+0xb2>
 801104c:	9a01      	ldr	r2, [sp, #4]
 801104e:	f845 c002 	str.w	ip, [r5, r2]
 8011052:	9a03      	ldr	r2, [sp, #12]
 8011054:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011058:	3304      	adds	r3, #4
 801105a:	f1b9 0f00 	cmp.w	r9, #0
 801105e:	d020      	beq.n	80110a2 <__multiply+0x142>
 8011060:	6829      	ldr	r1, [r5, #0]
 8011062:	f104 0c14 	add.w	ip, r4, #20
 8011066:	46ae      	mov	lr, r5
 8011068:	f04f 0a00 	mov.w	sl, #0
 801106c:	f8bc b000 	ldrh.w	fp, [ip]
 8011070:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011074:	fb09 220b 	mla	r2, r9, fp, r2
 8011078:	4492      	add	sl, r2
 801107a:	b289      	uxth	r1, r1
 801107c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011080:	f84e 1b04 	str.w	r1, [lr], #4
 8011084:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011088:	f8be 1000 	ldrh.w	r1, [lr]
 801108c:	0c12      	lsrs	r2, r2, #16
 801108e:	fb09 1102 	mla	r1, r9, r2, r1
 8011092:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011096:	4567      	cmp	r7, ip
 8011098:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801109c:	d8e6      	bhi.n	801106c <__multiply+0x10c>
 801109e:	9a01      	ldr	r2, [sp, #4]
 80110a0:	50a9      	str	r1, [r5, r2]
 80110a2:	3504      	adds	r5, #4
 80110a4:	e79a      	b.n	8010fdc <__multiply+0x7c>
 80110a6:	3e01      	subs	r6, #1
 80110a8:	e79c      	b.n	8010fe4 <__multiply+0x84>
 80110aa:	bf00      	nop
 80110ac:	08012aa0 	.word	0x08012aa0
 80110b0:	08012b2c 	.word	0x08012b2c

080110b4 <__pow5mult>:
 80110b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110b8:	4615      	mov	r5, r2
 80110ba:	f012 0203 	ands.w	r2, r2, #3
 80110be:	4606      	mov	r6, r0
 80110c0:	460f      	mov	r7, r1
 80110c2:	d007      	beq.n	80110d4 <__pow5mult+0x20>
 80110c4:	4c25      	ldr	r4, [pc, #148]	; (801115c <__pow5mult+0xa8>)
 80110c6:	3a01      	subs	r2, #1
 80110c8:	2300      	movs	r3, #0
 80110ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80110ce:	f7ff fe51 	bl	8010d74 <__multadd>
 80110d2:	4607      	mov	r7, r0
 80110d4:	10ad      	asrs	r5, r5, #2
 80110d6:	d03d      	beq.n	8011154 <__pow5mult+0xa0>
 80110d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80110da:	b97c      	cbnz	r4, 80110fc <__pow5mult+0x48>
 80110dc:	2010      	movs	r0, #16
 80110de:	f7ff fdcd 	bl	8010c7c <malloc>
 80110e2:	4602      	mov	r2, r0
 80110e4:	6270      	str	r0, [r6, #36]	; 0x24
 80110e6:	b928      	cbnz	r0, 80110f4 <__pow5mult+0x40>
 80110e8:	4b1d      	ldr	r3, [pc, #116]	; (8011160 <__pow5mult+0xac>)
 80110ea:	481e      	ldr	r0, [pc, #120]	; (8011164 <__pow5mult+0xb0>)
 80110ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80110f0:	f000 fd2c 	bl	8011b4c <__assert_func>
 80110f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80110f8:	6004      	str	r4, [r0, #0]
 80110fa:	60c4      	str	r4, [r0, #12]
 80110fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011100:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011104:	b94c      	cbnz	r4, 801111a <__pow5mult+0x66>
 8011106:	f240 2171 	movw	r1, #625	; 0x271
 801110a:	4630      	mov	r0, r6
 801110c:	f7ff ff12 	bl	8010f34 <__i2b>
 8011110:	2300      	movs	r3, #0
 8011112:	f8c8 0008 	str.w	r0, [r8, #8]
 8011116:	4604      	mov	r4, r0
 8011118:	6003      	str	r3, [r0, #0]
 801111a:	f04f 0900 	mov.w	r9, #0
 801111e:	07eb      	lsls	r3, r5, #31
 8011120:	d50a      	bpl.n	8011138 <__pow5mult+0x84>
 8011122:	4639      	mov	r1, r7
 8011124:	4622      	mov	r2, r4
 8011126:	4630      	mov	r0, r6
 8011128:	f7ff ff1a 	bl	8010f60 <__multiply>
 801112c:	4639      	mov	r1, r7
 801112e:	4680      	mov	r8, r0
 8011130:	4630      	mov	r0, r6
 8011132:	f7ff fdfd 	bl	8010d30 <_Bfree>
 8011136:	4647      	mov	r7, r8
 8011138:	106d      	asrs	r5, r5, #1
 801113a:	d00b      	beq.n	8011154 <__pow5mult+0xa0>
 801113c:	6820      	ldr	r0, [r4, #0]
 801113e:	b938      	cbnz	r0, 8011150 <__pow5mult+0x9c>
 8011140:	4622      	mov	r2, r4
 8011142:	4621      	mov	r1, r4
 8011144:	4630      	mov	r0, r6
 8011146:	f7ff ff0b 	bl	8010f60 <__multiply>
 801114a:	6020      	str	r0, [r4, #0]
 801114c:	f8c0 9000 	str.w	r9, [r0]
 8011150:	4604      	mov	r4, r0
 8011152:	e7e4      	b.n	801111e <__pow5mult+0x6a>
 8011154:	4638      	mov	r0, r7
 8011156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801115a:	bf00      	nop
 801115c:	08012c78 	.word	0x08012c78
 8011160:	08012a2e 	.word	0x08012a2e
 8011164:	08012b2c 	.word	0x08012b2c

08011168 <__lshift>:
 8011168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801116c:	460c      	mov	r4, r1
 801116e:	6849      	ldr	r1, [r1, #4]
 8011170:	6923      	ldr	r3, [r4, #16]
 8011172:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011176:	68a3      	ldr	r3, [r4, #8]
 8011178:	4607      	mov	r7, r0
 801117a:	4691      	mov	r9, r2
 801117c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011180:	f108 0601 	add.w	r6, r8, #1
 8011184:	42b3      	cmp	r3, r6
 8011186:	db0b      	blt.n	80111a0 <__lshift+0x38>
 8011188:	4638      	mov	r0, r7
 801118a:	f7ff fd91 	bl	8010cb0 <_Balloc>
 801118e:	4605      	mov	r5, r0
 8011190:	b948      	cbnz	r0, 80111a6 <__lshift+0x3e>
 8011192:	4602      	mov	r2, r0
 8011194:	4b2a      	ldr	r3, [pc, #168]	; (8011240 <__lshift+0xd8>)
 8011196:	482b      	ldr	r0, [pc, #172]	; (8011244 <__lshift+0xdc>)
 8011198:	f240 11d9 	movw	r1, #473	; 0x1d9
 801119c:	f000 fcd6 	bl	8011b4c <__assert_func>
 80111a0:	3101      	adds	r1, #1
 80111a2:	005b      	lsls	r3, r3, #1
 80111a4:	e7ee      	b.n	8011184 <__lshift+0x1c>
 80111a6:	2300      	movs	r3, #0
 80111a8:	f100 0114 	add.w	r1, r0, #20
 80111ac:	f100 0210 	add.w	r2, r0, #16
 80111b0:	4618      	mov	r0, r3
 80111b2:	4553      	cmp	r3, sl
 80111b4:	db37      	blt.n	8011226 <__lshift+0xbe>
 80111b6:	6920      	ldr	r0, [r4, #16]
 80111b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80111bc:	f104 0314 	add.w	r3, r4, #20
 80111c0:	f019 091f 	ands.w	r9, r9, #31
 80111c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80111c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80111cc:	d02f      	beq.n	801122e <__lshift+0xc6>
 80111ce:	f1c9 0e20 	rsb	lr, r9, #32
 80111d2:	468a      	mov	sl, r1
 80111d4:	f04f 0c00 	mov.w	ip, #0
 80111d8:	681a      	ldr	r2, [r3, #0]
 80111da:	fa02 f209 	lsl.w	r2, r2, r9
 80111de:	ea42 020c 	orr.w	r2, r2, ip
 80111e2:	f84a 2b04 	str.w	r2, [sl], #4
 80111e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80111ea:	4298      	cmp	r0, r3
 80111ec:	fa22 fc0e 	lsr.w	ip, r2, lr
 80111f0:	d8f2      	bhi.n	80111d8 <__lshift+0x70>
 80111f2:	1b03      	subs	r3, r0, r4
 80111f4:	3b15      	subs	r3, #21
 80111f6:	f023 0303 	bic.w	r3, r3, #3
 80111fa:	3304      	adds	r3, #4
 80111fc:	f104 0215 	add.w	r2, r4, #21
 8011200:	4290      	cmp	r0, r2
 8011202:	bf38      	it	cc
 8011204:	2304      	movcc	r3, #4
 8011206:	f841 c003 	str.w	ip, [r1, r3]
 801120a:	f1bc 0f00 	cmp.w	ip, #0
 801120e:	d001      	beq.n	8011214 <__lshift+0xac>
 8011210:	f108 0602 	add.w	r6, r8, #2
 8011214:	3e01      	subs	r6, #1
 8011216:	4638      	mov	r0, r7
 8011218:	612e      	str	r6, [r5, #16]
 801121a:	4621      	mov	r1, r4
 801121c:	f7ff fd88 	bl	8010d30 <_Bfree>
 8011220:	4628      	mov	r0, r5
 8011222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011226:	f842 0f04 	str.w	r0, [r2, #4]!
 801122a:	3301      	adds	r3, #1
 801122c:	e7c1      	b.n	80111b2 <__lshift+0x4a>
 801122e:	3904      	subs	r1, #4
 8011230:	f853 2b04 	ldr.w	r2, [r3], #4
 8011234:	f841 2f04 	str.w	r2, [r1, #4]!
 8011238:	4298      	cmp	r0, r3
 801123a:	d8f9      	bhi.n	8011230 <__lshift+0xc8>
 801123c:	e7ea      	b.n	8011214 <__lshift+0xac>
 801123e:	bf00      	nop
 8011240:	08012aa0 	.word	0x08012aa0
 8011244:	08012b2c 	.word	0x08012b2c

08011248 <__mcmp>:
 8011248:	b530      	push	{r4, r5, lr}
 801124a:	6902      	ldr	r2, [r0, #16]
 801124c:	690c      	ldr	r4, [r1, #16]
 801124e:	1b12      	subs	r2, r2, r4
 8011250:	d10e      	bne.n	8011270 <__mcmp+0x28>
 8011252:	f100 0314 	add.w	r3, r0, #20
 8011256:	3114      	adds	r1, #20
 8011258:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801125c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011260:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011264:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011268:	42a5      	cmp	r5, r4
 801126a:	d003      	beq.n	8011274 <__mcmp+0x2c>
 801126c:	d305      	bcc.n	801127a <__mcmp+0x32>
 801126e:	2201      	movs	r2, #1
 8011270:	4610      	mov	r0, r2
 8011272:	bd30      	pop	{r4, r5, pc}
 8011274:	4283      	cmp	r3, r0
 8011276:	d3f3      	bcc.n	8011260 <__mcmp+0x18>
 8011278:	e7fa      	b.n	8011270 <__mcmp+0x28>
 801127a:	f04f 32ff 	mov.w	r2, #4294967295
 801127e:	e7f7      	b.n	8011270 <__mcmp+0x28>

08011280 <__mdiff>:
 8011280:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011284:	460c      	mov	r4, r1
 8011286:	4606      	mov	r6, r0
 8011288:	4611      	mov	r1, r2
 801128a:	4620      	mov	r0, r4
 801128c:	4690      	mov	r8, r2
 801128e:	f7ff ffdb 	bl	8011248 <__mcmp>
 8011292:	1e05      	subs	r5, r0, #0
 8011294:	d110      	bne.n	80112b8 <__mdiff+0x38>
 8011296:	4629      	mov	r1, r5
 8011298:	4630      	mov	r0, r6
 801129a:	f7ff fd09 	bl	8010cb0 <_Balloc>
 801129e:	b930      	cbnz	r0, 80112ae <__mdiff+0x2e>
 80112a0:	4b3a      	ldr	r3, [pc, #232]	; (801138c <__mdiff+0x10c>)
 80112a2:	4602      	mov	r2, r0
 80112a4:	f240 2132 	movw	r1, #562	; 0x232
 80112a8:	4839      	ldr	r0, [pc, #228]	; (8011390 <__mdiff+0x110>)
 80112aa:	f000 fc4f 	bl	8011b4c <__assert_func>
 80112ae:	2301      	movs	r3, #1
 80112b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80112b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112b8:	bfa4      	itt	ge
 80112ba:	4643      	movge	r3, r8
 80112bc:	46a0      	movge	r8, r4
 80112be:	4630      	mov	r0, r6
 80112c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80112c4:	bfa6      	itte	ge
 80112c6:	461c      	movge	r4, r3
 80112c8:	2500      	movge	r5, #0
 80112ca:	2501      	movlt	r5, #1
 80112cc:	f7ff fcf0 	bl	8010cb0 <_Balloc>
 80112d0:	b920      	cbnz	r0, 80112dc <__mdiff+0x5c>
 80112d2:	4b2e      	ldr	r3, [pc, #184]	; (801138c <__mdiff+0x10c>)
 80112d4:	4602      	mov	r2, r0
 80112d6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80112da:	e7e5      	b.n	80112a8 <__mdiff+0x28>
 80112dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80112e0:	6926      	ldr	r6, [r4, #16]
 80112e2:	60c5      	str	r5, [r0, #12]
 80112e4:	f104 0914 	add.w	r9, r4, #20
 80112e8:	f108 0514 	add.w	r5, r8, #20
 80112ec:	f100 0e14 	add.w	lr, r0, #20
 80112f0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80112f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80112f8:	f108 0210 	add.w	r2, r8, #16
 80112fc:	46f2      	mov	sl, lr
 80112fe:	2100      	movs	r1, #0
 8011300:	f859 3b04 	ldr.w	r3, [r9], #4
 8011304:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011308:	fa1f f883 	uxth.w	r8, r3
 801130c:	fa11 f18b 	uxtah	r1, r1, fp
 8011310:	0c1b      	lsrs	r3, r3, #16
 8011312:	eba1 0808 	sub.w	r8, r1, r8
 8011316:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801131a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801131e:	fa1f f888 	uxth.w	r8, r8
 8011322:	1419      	asrs	r1, r3, #16
 8011324:	454e      	cmp	r6, r9
 8011326:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801132a:	f84a 3b04 	str.w	r3, [sl], #4
 801132e:	d8e7      	bhi.n	8011300 <__mdiff+0x80>
 8011330:	1b33      	subs	r3, r6, r4
 8011332:	3b15      	subs	r3, #21
 8011334:	f023 0303 	bic.w	r3, r3, #3
 8011338:	3304      	adds	r3, #4
 801133a:	3415      	adds	r4, #21
 801133c:	42a6      	cmp	r6, r4
 801133e:	bf38      	it	cc
 8011340:	2304      	movcc	r3, #4
 8011342:	441d      	add	r5, r3
 8011344:	4473      	add	r3, lr
 8011346:	469e      	mov	lr, r3
 8011348:	462e      	mov	r6, r5
 801134a:	4566      	cmp	r6, ip
 801134c:	d30e      	bcc.n	801136c <__mdiff+0xec>
 801134e:	f10c 0203 	add.w	r2, ip, #3
 8011352:	1b52      	subs	r2, r2, r5
 8011354:	f022 0203 	bic.w	r2, r2, #3
 8011358:	3d03      	subs	r5, #3
 801135a:	45ac      	cmp	ip, r5
 801135c:	bf38      	it	cc
 801135e:	2200      	movcc	r2, #0
 8011360:	441a      	add	r2, r3
 8011362:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011366:	b17b      	cbz	r3, 8011388 <__mdiff+0x108>
 8011368:	6107      	str	r7, [r0, #16]
 801136a:	e7a3      	b.n	80112b4 <__mdiff+0x34>
 801136c:	f856 8b04 	ldr.w	r8, [r6], #4
 8011370:	fa11 f288 	uxtah	r2, r1, r8
 8011374:	1414      	asrs	r4, r2, #16
 8011376:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801137a:	b292      	uxth	r2, r2
 801137c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011380:	f84e 2b04 	str.w	r2, [lr], #4
 8011384:	1421      	asrs	r1, r4, #16
 8011386:	e7e0      	b.n	801134a <__mdiff+0xca>
 8011388:	3f01      	subs	r7, #1
 801138a:	e7ea      	b.n	8011362 <__mdiff+0xe2>
 801138c:	08012aa0 	.word	0x08012aa0
 8011390:	08012b2c 	.word	0x08012b2c

08011394 <__ulp>:
 8011394:	b082      	sub	sp, #8
 8011396:	ed8d 0b00 	vstr	d0, [sp]
 801139a:	9b01      	ldr	r3, [sp, #4]
 801139c:	4912      	ldr	r1, [pc, #72]	; (80113e8 <__ulp+0x54>)
 801139e:	4019      	ands	r1, r3
 80113a0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80113a4:	2900      	cmp	r1, #0
 80113a6:	dd05      	ble.n	80113b4 <__ulp+0x20>
 80113a8:	2200      	movs	r2, #0
 80113aa:	460b      	mov	r3, r1
 80113ac:	ec43 2b10 	vmov	d0, r2, r3
 80113b0:	b002      	add	sp, #8
 80113b2:	4770      	bx	lr
 80113b4:	4249      	negs	r1, r1
 80113b6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80113ba:	ea4f 5021 	mov.w	r0, r1, asr #20
 80113be:	f04f 0200 	mov.w	r2, #0
 80113c2:	f04f 0300 	mov.w	r3, #0
 80113c6:	da04      	bge.n	80113d2 <__ulp+0x3e>
 80113c8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80113cc:	fa41 f300 	asr.w	r3, r1, r0
 80113d0:	e7ec      	b.n	80113ac <__ulp+0x18>
 80113d2:	f1a0 0114 	sub.w	r1, r0, #20
 80113d6:	291e      	cmp	r1, #30
 80113d8:	bfda      	itte	le
 80113da:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80113de:	fa20 f101 	lsrle.w	r1, r0, r1
 80113e2:	2101      	movgt	r1, #1
 80113e4:	460a      	mov	r2, r1
 80113e6:	e7e1      	b.n	80113ac <__ulp+0x18>
 80113e8:	7ff00000 	.word	0x7ff00000

080113ec <__b2d>:
 80113ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113ee:	6905      	ldr	r5, [r0, #16]
 80113f0:	f100 0714 	add.w	r7, r0, #20
 80113f4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80113f8:	1f2e      	subs	r6, r5, #4
 80113fa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80113fe:	4620      	mov	r0, r4
 8011400:	f7ff fd48 	bl	8010e94 <__hi0bits>
 8011404:	f1c0 0320 	rsb	r3, r0, #32
 8011408:	280a      	cmp	r0, #10
 801140a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011488 <__b2d+0x9c>
 801140e:	600b      	str	r3, [r1, #0]
 8011410:	dc14      	bgt.n	801143c <__b2d+0x50>
 8011412:	f1c0 0e0b 	rsb	lr, r0, #11
 8011416:	fa24 f10e 	lsr.w	r1, r4, lr
 801141a:	42b7      	cmp	r7, r6
 801141c:	ea41 030c 	orr.w	r3, r1, ip
 8011420:	bf34      	ite	cc
 8011422:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011426:	2100      	movcs	r1, #0
 8011428:	3015      	adds	r0, #21
 801142a:	fa04 f000 	lsl.w	r0, r4, r0
 801142e:	fa21 f10e 	lsr.w	r1, r1, lr
 8011432:	ea40 0201 	orr.w	r2, r0, r1
 8011436:	ec43 2b10 	vmov	d0, r2, r3
 801143a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801143c:	42b7      	cmp	r7, r6
 801143e:	bf3a      	itte	cc
 8011440:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011444:	f1a5 0608 	subcc.w	r6, r5, #8
 8011448:	2100      	movcs	r1, #0
 801144a:	380b      	subs	r0, #11
 801144c:	d017      	beq.n	801147e <__b2d+0x92>
 801144e:	f1c0 0c20 	rsb	ip, r0, #32
 8011452:	fa04 f500 	lsl.w	r5, r4, r0
 8011456:	42be      	cmp	r6, r7
 8011458:	fa21 f40c 	lsr.w	r4, r1, ip
 801145c:	ea45 0504 	orr.w	r5, r5, r4
 8011460:	bf8c      	ite	hi
 8011462:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011466:	2400      	movls	r4, #0
 8011468:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801146c:	fa01 f000 	lsl.w	r0, r1, r0
 8011470:	fa24 f40c 	lsr.w	r4, r4, ip
 8011474:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011478:	ea40 0204 	orr.w	r2, r0, r4
 801147c:	e7db      	b.n	8011436 <__b2d+0x4a>
 801147e:	ea44 030c 	orr.w	r3, r4, ip
 8011482:	460a      	mov	r2, r1
 8011484:	e7d7      	b.n	8011436 <__b2d+0x4a>
 8011486:	bf00      	nop
 8011488:	3ff00000 	.word	0x3ff00000

0801148c <__d2b>:
 801148c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011490:	4689      	mov	r9, r1
 8011492:	2101      	movs	r1, #1
 8011494:	ec57 6b10 	vmov	r6, r7, d0
 8011498:	4690      	mov	r8, r2
 801149a:	f7ff fc09 	bl	8010cb0 <_Balloc>
 801149e:	4604      	mov	r4, r0
 80114a0:	b930      	cbnz	r0, 80114b0 <__d2b+0x24>
 80114a2:	4602      	mov	r2, r0
 80114a4:	4b25      	ldr	r3, [pc, #148]	; (801153c <__d2b+0xb0>)
 80114a6:	4826      	ldr	r0, [pc, #152]	; (8011540 <__d2b+0xb4>)
 80114a8:	f240 310a 	movw	r1, #778	; 0x30a
 80114ac:	f000 fb4e 	bl	8011b4c <__assert_func>
 80114b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80114b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80114b8:	bb35      	cbnz	r5, 8011508 <__d2b+0x7c>
 80114ba:	2e00      	cmp	r6, #0
 80114bc:	9301      	str	r3, [sp, #4]
 80114be:	d028      	beq.n	8011512 <__d2b+0x86>
 80114c0:	4668      	mov	r0, sp
 80114c2:	9600      	str	r6, [sp, #0]
 80114c4:	f7ff fd06 	bl	8010ed4 <__lo0bits>
 80114c8:	9900      	ldr	r1, [sp, #0]
 80114ca:	b300      	cbz	r0, 801150e <__d2b+0x82>
 80114cc:	9a01      	ldr	r2, [sp, #4]
 80114ce:	f1c0 0320 	rsb	r3, r0, #32
 80114d2:	fa02 f303 	lsl.w	r3, r2, r3
 80114d6:	430b      	orrs	r3, r1
 80114d8:	40c2      	lsrs	r2, r0
 80114da:	6163      	str	r3, [r4, #20]
 80114dc:	9201      	str	r2, [sp, #4]
 80114de:	9b01      	ldr	r3, [sp, #4]
 80114e0:	61a3      	str	r3, [r4, #24]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	bf14      	ite	ne
 80114e6:	2202      	movne	r2, #2
 80114e8:	2201      	moveq	r2, #1
 80114ea:	6122      	str	r2, [r4, #16]
 80114ec:	b1d5      	cbz	r5, 8011524 <__d2b+0x98>
 80114ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80114f2:	4405      	add	r5, r0
 80114f4:	f8c9 5000 	str.w	r5, [r9]
 80114f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80114fc:	f8c8 0000 	str.w	r0, [r8]
 8011500:	4620      	mov	r0, r4
 8011502:	b003      	add	sp, #12
 8011504:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011508:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801150c:	e7d5      	b.n	80114ba <__d2b+0x2e>
 801150e:	6161      	str	r1, [r4, #20]
 8011510:	e7e5      	b.n	80114de <__d2b+0x52>
 8011512:	a801      	add	r0, sp, #4
 8011514:	f7ff fcde 	bl	8010ed4 <__lo0bits>
 8011518:	9b01      	ldr	r3, [sp, #4]
 801151a:	6163      	str	r3, [r4, #20]
 801151c:	2201      	movs	r2, #1
 801151e:	6122      	str	r2, [r4, #16]
 8011520:	3020      	adds	r0, #32
 8011522:	e7e3      	b.n	80114ec <__d2b+0x60>
 8011524:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011528:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801152c:	f8c9 0000 	str.w	r0, [r9]
 8011530:	6918      	ldr	r0, [r3, #16]
 8011532:	f7ff fcaf 	bl	8010e94 <__hi0bits>
 8011536:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801153a:	e7df      	b.n	80114fc <__d2b+0x70>
 801153c:	08012aa0 	.word	0x08012aa0
 8011540:	08012b2c 	.word	0x08012b2c

08011544 <__ratio>:
 8011544:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011548:	4688      	mov	r8, r1
 801154a:	4669      	mov	r1, sp
 801154c:	4681      	mov	r9, r0
 801154e:	f7ff ff4d 	bl	80113ec <__b2d>
 8011552:	a901      	add	r1, sp, #4
 8011554:	4640      	mov	r0, r8
 8011556:	ec55 4b10 	vmov	r4, r5, d0
 801155a:	f7ff ff47 	bl	80113ec <__b2d>
 801155e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011562:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011566:	eba3 0c02 	sub.w	ip, r3, r2
 801156a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801156e:	1a9b      	subs	r3, r3, r2
 8011570:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011574:	ec51 0b10 	vmov	r0, r1, d0
 8011578:	2b00      	cmp	r3, #0
 801157a:	bfd6      	itet	le
 801157c:	460a      	movle	r2, r1
 801157e:	462a      	movgt	r2, r5
 8011580:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011584:	468b      	mov	fp, r1
 8011586:	462f      	mov	r7, r5
 8011588:	bfd4      	ite	le
 801158a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801158e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011592:	4620      	mov	r0, r4
 8011594:	ee10 2a10 	vmov	r2, s0
 8011598:	465b      	mov	r3, fp
 801159a:	4639      	mov	r1, r7
 801159c:	f7ef f92e 	bl	80007fc <__aeabi_ddiv>
 80115a0:	ec41 0b10 	vmov	d0, r0, r1
 80115a4:	b003      	add	sp, #12
 80115a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080115aa <__copybits>:
 80115aa:	3901      	subs	r1, #1
 80115ac:	b570      	push	{r4, r5, r6, lr}
 80115ae:	1149      	asrs	r1, r1, #5
 80115b0:	6914      	ldr	r4, [r2, #16]
 80115b2:	3101      	adds	r1, #1
 80115b4:	f102 0314 	add.w	r3, r2, #20
 80115b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80115bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80115c0:	1f05      	subs	r5, r0, #4
 80115c2:	42a3      	cmp	r3, r4
 80115c4:	d30c      	bcc.n	80115e0 <__copybits+0x36>
 80115c6:	1aa3      	subs	r3, r4, r2
 80115c8:	3b11      	subs	r3, #17
 80115ca:	f023 0303 	bic.w	r3, r3, #3
 80115ce:	3211      	adds	r2, #17
 80115d0:	42a2      	cmp	r2, r4
 80115d2:	bf88      	it	hi
 80115d4:	2300      	movhi	r3, #0
 80115d6:	4418      	add	r0, r3
 80115d8:	2300      	movs	r3, #0
 80115da:	4288      	cmp	r0, r1
 80115dc:	d305      	bcc.n	80115ea <__copybits+0x40>
 80115de:	bd70      	pop	{r4, r5, r6, pc}
 80115e0:	f853 6b04 	ldr.w	r6, [r3], #4
 80115e4:	f845 6f04 	str.w	r6, [r5, #4]!
 80115e8:	e7eb      	b.n	80115c2 <__copybits+0x18>
 80115ea:	f840 3b04 	str.w	r3, [r0], #4
 80115ee:	e7f4      	b.n	80115da <__copybits+0x30>

080115f0 <__any_on>:
 80115f0:	f100 0214 	add.w	r2, r0, #20
 80115f4:	6900      	ldr	r0, [r0, #16]
 80115f6:	114b      	asrs	r3, r1, #5
 80115f8:	4298      	cmp	r0, r3
 80115fa:	b510      	push	{r4, lr}
 80115fc:	db11      	blt.n	8011622 <__any_on+0x32>
 80115fe:	dd0a      	ble.n	8011616 <__any_on+0x26>
 8011600:	f011 011f 	ands.w	r1, r1, #31
 8011604:	d007      	beq.n	8011616 <__any_on+0x26>
 8011606:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801160a:	fa24 f001 	lsr.w	r0, r4, r1
 801160e:	fa00 f101 	lsl.w	r1, r0, r1
 8011612:	428c      	cmp	r4, r1
 8011614:	d10b      	bne.n	801162e <__any_on+0x3e>
 8011616:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801161a:	4293      	cmp	r3, r2
 801161c:	d803      	bhi.n	8011626 <__any_on+0x36>
 801161e:	2000      	movs	r0, #0
 8011620:	bd10      	pop	{r4, pc}
 8011622:	4603      	mov	r3, r0
 8011624:	e7f7      	b.n	8011616 <__any_on+0x26>
 8011626:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801162a:	2900      	cmp	r1, #0
 801162c:	d0f5      	beq.n	801161a <__any_on+0x2a>
 801162e:	2001      	movs	r0, #1
 8011630:	e7f6      	b.n	8011620 <__any_on+0x30>

08011632 <_calloc_r>:
 8011632:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011634:	fba1 2402 	umull	r2, r4, r1, r2
 8011638:	b94c      	cbnz	r4, 801164e <_calloc_r+0x1c>
 801163a:	4611      	mov	r1, r2
 801163c:	9201      	str	r2, [sp, #4]
 801163e:	f000 f87b 	bl	8011738 <_malloc_r>
 8011642:	9a01      	ldr	r2, [sp, #4]
 8011644:	4605      	mov	r5, r0
 8011646:	b930      	cbnz	r0, 8011656 <_calloc_r+0x24>
 8011648:	4628      	mov	r0, r5
 801164a:	b003      	add	sp, #12
 801164c:	bd30      	pop	{r4, r5, pc}
 801164e:	220c      	movs	r2, #12
 8011650:	6002      	str	r2, [r0, #0]
 8011652:	2500      	movs	r5, #0
 8011654:	e7f8      	b.n	8011648 <_calloc_r+0x16>
 8011656:	4621      	mov	r1, r4
 8011658:	f7fc fbc0 	bl	800dddc <memset>
 801165c:	e7f4      	b.n	8011648 <_calloc_r+0x16>
	...

08011660 <_free_r>:
 8011660:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011662:	2900      	cmp	r1, #0
 8011664:	d044      	beq.n	80116f0 <_free_r+0x90>
 8011666:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801166a:	9001      	str	r0, [sp, #4]
 801166c:	2b00      	cmp	r3, #0
 801166e:	f1a1 0404 	sub.w	r4, r1, #4
 8011672:	bfb8      	it	lt
 8011674:	18e4      	addlt	r4, r4, r3
 8011676:	f000 fab3 	bl	8011be0 <__malloc_lock>
 801167a:	4a1e      	ldr	r2, [pc, #120]	; (80116f4 <_free_r+0x94>)
 801167c:	9801      	ldr	r0, [sp, #4]
 801167e:	6813      	ldr	r3, [r2, #0]
 8011680:	b933      	cbnz	r3, 8011690 <_free_r+0x30>
 8011682:	6063      	str	r3, [r4, #4]
 8011684:	6014      	str	r4, [r2, #0]
 8011686:	b003      	add	sp, #12
 8011688:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801168c:	f000 baae 	b.w	8011bec <__malloc_unlock>
 8011690:	42a3      	cmp	r3, r4
 8011692:	d908      	bls.n	80116a6 <_free_r+0x46>
 8011694:	6825      	ldr	r5, [r4, #0]
 8011696:	1961      	adds	r1, r4, r5
 8011698:	428b      	cmp	r3, r1
 801169a:	bf01      	itttt	eq
 801169c:	6819      	ldreq	r1, [r3, #0]
 801169e:	685b      	ldreq	r3, [r3, #4]
 80116a0:	1949      	addeq	r1, r1, r5
 80116a2:	6021      	streq	r1, [r4, #0]
 80116a4:	e7ed      	b.n	8011682 <_free_r+0x22>
 80116a6:	461a      	mov	r2, r3
 80116a8:	685b      	ldr	r3, [r3, #4]
 80116aa:	b10b      	cbz	r3, 80116b0 <_free_r+0x50>
 80116ac:	42a3      	cmp	r3, r4
 80116ae:	d9fa      	bls.n	80116a6 <_free_r+0x46>
 80116b0:	6811      	ldr	r1, [r2, #0]
 80116b2:	1855      	adds	r5, r2, r1
 80116b4:	42a5      	cmp	r5, r4
 80116b6:	d10b      	bne.n	80116d0 <_free_r+0x70>
 80116b8:	6824      	ldr	r4, [r4, #0]
 80116ba:	4421      	add	r1, r4
 80116bc:	1854      	adds	r4, r2, r1
 80116be:	42a3      	cmp	r3, r4
 80116c0:	6011      	str	r1, [r2, #0]
 80116c2:	d1e0      	bne.n	8011686 <_free_r+0x26>
 80116c4:	681c      	ldr	r4, [r3, #0]
 80116c6:	685b      	ldr	r3, [r3, #4]
 80116c8:	6053      	str	r3, [r2, #4]
 80116ca:	4421      	add	r1, r4
 80116cc:	6011      	str	r1, [r2, #0]
 80116ce:	e7da      	b.n	8011686 <_free_r+0x26>
 80116d0:	d902      	bls.n	80116d8 <_free_r+0x78>
 80116d2:	230c      	movs	r3, #12
 80116d4:	6003      	str	r3, [r0, #0]
 80116d6:	e7d6      	b.n	8011686 <_free_r+0x26>
 80116d8:	6825      	ldr	r5, [r4, #0]
 80116da:	1961      	adds	r1, r4, r5
 80116dc:	428b      	cmp	r3, r1
 80116de:	bf04      	itt	eq
 80116e0:	6819      	ldreq	r1, [r3, #0]
 80116e2:	685b      	ldreq	r3, [r3, #4]
 80116e4:	6063      	str	r3, [r4, #4]
 80116e6:	bf04      	itt	eq
 80116e8:	1949      	addeq	r1, r1, r5
 80116ea:	6021      	streq	r1, [r4, #0]
 80116ec:	6054      	str	r4, [r2, #4]
 80116ee:	e7ca      	b.n	8011686 <_free_r+0x26>
 80116f0:	b003      	add	sp, #12
 80116f2:	bd30      	pop	{r4, r5, pc}
 80116f4:	20005730 	.word	0x20005730

080116f8 <sbrk_aligned>:
 80116f8:	b570      	push	{r4, r5, r6, lr}
 80116fa:	4e0e      	ldr	r6, [pc, #56]	; (8011734 <sbrk_aligned+0x3c>)
 80116fc:	460c      	mov	r4, r1
 80116fe:	6831      	ldr	r1, [r6, #0]
 8011700:	4605      	mov	r5, r0
 8011702:	b911      	cbnz	r1, 801170a <sbrk_aligned+0x12>
 8011704:	f000 f9f0 	bl	8011ae8 <_sbrk_r>
 8011708:	6030      	str	r0, [r6, #0]
 801170a:	4621      	mov	r1, r4
 801170c:	4628      	mov	r0, r5
 801170e:	f000 f9eb 	bl	8011ae8 <_sbrk_r>
 8011712:	1c43      	adds	r3, r0, #1
 8011714:	d00a      	beq.n	801172c <sbrk_aligned+0x34>
 8011716:	1cc4      	adds	r4, r0, #3
 8011718:	f024 0403 	bic.w	r4, r4, #3
 801171c:	42a0      	cmp	r0, r4
 801171e:	d007      	beq.n	8011730 <sbrk_aligned+0x38>
 8011720:	1a21      	subs	r1, r4, r0
 8011722:	4628      	mov	r0, r5
 8011724:	f000 f9e0 	bl	8011ae8 <_sbrk_r>
 8011728:	3001      	adds	r0, #1
 801172a:	d101      	bne.n	8011730 <sbrk_aligned+0x38>
 801172c:	f04f 34ff 	mov.w	r4, #4294967295
 8011730:	4620      	mov	r0, r4
 8011732:	bd70      	pop	{r4, r5, r6, pc}
 8011734:	20005734 	.word	0x20005734

08011738 <_malloc_r>:
 8011738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801173c:	1ccd      	adds	r5, r1, #3
 801173e:	f025 0503 	bic.w	r5, r5, #3
 8011742:	3508      	adds	r5, #8
 8011744:	2d0c      	cmp	r5, #12
 8011746:	bf38      	it	cc
 8011748:	250c      	movcc	r5, #12
 801174a:	2d00      	cmp	r5, #0
 801174c:	4607      	mov	r7, r0
 801174e:	db01      	blt.n	8011754 <_malloc_r+0x1c>
 8011750:	42a9      	cmp	r1, r5
 8011752:	d905      	bls.n	8011760 <_malloc_r+0x28>
 8011754:	230c      	movs	r3, #12
 8011756:	603b      	str	r3, [r7, #0]
 8011758:	2600      	movs	r6, #0
 801175a:	4630      	mov	r0, r6
 801175c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011760:	4e2e      	ldr	r6, [pc, #184]	; (801181c <_malloc_r+0xe4>)
 8011762:	f000 fa3d 	bl	8011be0 <__malloc_lock>
 8011766:	6833      	ldr	r3, [r6, #0]
 8011768:	461c      	mov	r4, r3
 801176a:	bb34      	cbnz	r4, 80117ba <_malloc_r+0x82>
 801176c:	4629      	mov	r1, r5
 801176e:	4638      	mov	r0, r7
 8011770:	f7ff ffc2 	bl	80116f8 <sbrk_aligned>
 8011774:	1c43      	adds	r3, r0, #1
 8011776:	4604      	mov	r4, r0
 8011778:	d14d      	bne.n	8011816 <_malloc_r+0xde>
 801177a:	6834      	ldr	r4, [r6, #0]
 801177c:	4626      	mov	r6, r4
 801177e:	2e00      	cmp	r6, #0
 8011780:	d140      	bne.n	8011804 <_malloc_r+0xcc>
 8011782:	6823      	ldr	r3, [r4, #0]
 8011784:	4631      	mov	r1, r6
 8011786:	4638      	mov	r0, r7
 8011788:	eb04 0803 	add.w	r8, r4, r3
 801178c:	f000 f9ac 	bl	8011ae8 <_sbrk_r>
 8011790:	4580      	cmp	r8, r0
 8011792:	d13a      	bne.n	801180a <_malloc_r+0xd2>
 8011794:	6821      	ldr	r1, [r4, #0]
 8011796:	3503      	adds	r5, #3
 8011798:	1a6d      	subs	r5, r5, r1
 801179a:	f025 0503 	bic.w	r5, r5, #3
 801179e:	3508      	adds	r5, #8
 80117a0:	2d0c      	cmp	r5, #12
 80117a2:	bf38      	it	cc
 80117a4:	250c      	movcc	r5, #12
 80117a6:	4629      	mov	r1, r5
 80117a8:	4638      	mov	r0, r7
 80117aa:	f7ff ffa5 	bl	80116f8 <sbrk_aligned>
 80117ae:	3001      	adds	r0, #1
 80117b0:	d02b      	beq.n	801180a <_malloc_r+0xd2>
 80117b2:	6823      	ldr	r3, [r4, #0]
 80117b4:	442b      	add	r3, r5
 80117b6:	6023      	str	r3, [r4, #0]
 80117b8:	e00e      	b.n	80117d8 <_malloc_r+0xa0>
 80117ba:	6822      	ldr	r2, [r4, #0]
 80117bc:	1b52      	subs	r2, r2, r5
 80117be:	d41e      	bmi.n	80117fe <_malloc_r+0xc6>
 80117c0:	2a0b      	cmp	r2, #11
 80117c2:	d916      	bls.n	80117f2 <_malloc_r+0xba>
 80117c4:	1961      	adds	r1, r4, r5
 80117c6:	42a3      	cmp	r3, r4
 80117c8:	6025      	str	r5, [r4, #0]
 80117ca:	bf18      	it	ne
 80117cc:	6059      	strne	r1, [r3, #4]
 80117ce:	6863      	ldr	r3, [r4, #4]
 80117d0:	bf08      	it	eq
 80117d2:	6031      	streq	r1, [r6, #0]
 80117d4:	5162      	str	r2, [r4, r5]
 80117d6:	604b      	str	r3, [r1, #4]
 80117d8:	4638      	mov	r0, r7
 80117da:	f104 060b 	add.w	r6, r4, #11
 80117de:	f000 fa05 	bl	8011bec <__malloc_unlock>
 80117e2:	f026 0607 	bic.w	r6, r6, #7
 80117e6:	1d23      	adds	r3, r4, #4
 80117e8:	1af2      	subs	r2, r6, r3
 80117ea:	d0b6      	beq.n	801175a <_malloc_r+0x22>
 80117ec:	1b9b      	subs	r3, r3, r6
 80117ee:	50a3      	str	r3, [r4, r2]
 80117f0:	e7b3      	b.n	801175a <_malloc_r+0x22>
 80117f2:	6862      	ldr	r2, [r4, #4]
 80117f4:	42a3      	cmp	r3, r4
 80117f6:	bf0c      	ite	eq
 80117f8:	6032      	streq	r2, [r6, #0]
 80117fa:	605a      	strne	r2, [r3, #4]
 80117fc:	e7ec      	b.n	80117d8 <_malloc_r+0xa0>
 80117fe:	4623      	mov	r3, r4
 8011800:	6864      	ldr	r4, [r4, #4]
 8011802:	e7b2      	b.n	801176a <_malloc_r+0x32>
 8011804:	4634      	mov	r4, r6
 8011806:	6876      	ldr	r6, [r6, #4]
 8011808:	e7b9      	b.n	801177e <_malloc_r+0x46>
 801180a:	230c      	movs	r3, #12
 801180c:	603b      	str	r3, [r7, #0]
 801180e:	4638      	mov	r0, r7
 8011810:	f000 f9ec 	bl	8011bec <__malloc_unlock>
 8011814:	e7a1      	b.n	801175a <_malloc_r+0x22>
 8011816:	6025      	str	r5, [r4, #0]
 8011818:	e7de      	b.n	80117d8 <_malloc_r+0xa0>
 801181a:	bf00      	nop
 801181c:	20005730 	.word	0x20005730

08011820 <__ssputs_r>:
 8011820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011824:	688e      	ldr	r6, [r1, #8]
 8011826:	429e      	cmp	r6, r3
 8011828:	4682      	mov	sl, r0
 801182a:	460c      	mov	r4, r1
 801182c:	4690      	mov	r8, r2
 801182e:	461f      	mov	r7, r3
 8011830:	d838      	bhi.n	80118a4 <__ssputs_r+0x84>
 8011832:	898a      	ldrh	r2, [r1, #12]
 8011834:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011838:	d032      	beq.n	80118a0 <__ssputs_r+0x80>
 801183a:	6825      	ldr	r5, [r4, #0]
 801183c:	6909      	ldr	r1, [r1, #16]
 801183e:	eba5 0901 	sub.w	r9, r5, r1
 8011842:	6965      	ldr	r5, [r4, #20]
 8011844:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011848:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801184c:	3301      	adds	r3, #1
 801184e:	444b      	add	r3, r9
 8011850:	106d      	asrs	r5, r5, #1
 8011852:	429d      	cmp	r5, r3
 8011854:	bf38      	it	cc
 8011856:	461d      	movcc	r5, r3
 8011858:	0553      	lsls	r3, r2, #21
 801185a:	d531      	bpl.n	80118c0 <__ssputs_r+0xa0>
 801185c:	4629      	mov	r1, r5
 801185e:	f7ff ff6b 	bl	8011738 <_malloc_r>
 8011862:	4606      	mov	r6, r0
 8011864:	b950      	cbnz	r0, 801187c <__ssputs_r+0x5c>
 8011866:	230c      	movs	r3, #12
 8011868:	f8ca 3000 	str.w	r3, [sl]
 801186c:	89a3      	ldrh	r3, [r4, #12]
 801186e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011872:	81a3      	strh	r3, [r4, #12]
 8011874:	f04f 30ff 	mov.w	r0, #4294967295
 8011878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801187c:	6921      	ldr	r1, [r4, #16]
 801187e:	464a      	mov	r2, r9
 8011880:	f7fc fa9e 	bl	800ddc0 <memcpy>
 8011884:	89a3      	ldrh	r3, [r4, #12]
 8011886:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801188a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801188e:	81a3      	strh	r3, [r4, #12]
 8011890:	6126      	str	r6, [r4, #16]
 8011892:	6165      	str	r5, [r4, #20]
 8011894:	444e      	add	r6, r9
 8011896:	eba5 0509 	sub.w	r5, r5, r9
 801189a:	6026      	str	r6, [r4, #0]
 801189c:	60a5      	str	r5, [r4, #8]
 801189e:	463e      	mov	r6, r7
 80118a0:	42be      	cmp	r6, r7
 80118a2:	d900      	bls.n	80118a6 <__ssputs_r+0x86>
 80118a4:	463e      	mov	r6, r7
 80118a6:	6820      	ldr	r0, [r4, #0]
 80118a8:	4632      	mov	r2, r6
 80118aa:	4641      	mov	r1, r8
 80118ac:	f000 f97e 	bl	8011bac <memmove>
 80118b0:	68a3      	ldr	r3, [r4, #8]
 80118b2:	1b9b      	subs	r3, r3, r6
 80118b4:	60a3      	str	r3, [r4, #8]
 80118b6:	6823      	ldr	r3, [r4, #0]
 80118b8:	4433      	add	r3, r6
 80118ba:	6023      	str	r3, [r4, #0]
 80118bc:	2000      	movs	r0, #0
 80118be:	e7db      	b.n	8011878 <__ssputs_r+0x58>
 80118c0:	462a      	mov	r2, r5
 80118c2:	f000 f999 	bl	8011bf8 <_realloc_r>
 80118c6:	4606      	mov	r6, r0
 80118c8:	2800      	cmp	r0, #0
 80118ca:	d1e1      	bne.n	8011890 <__ssputs_r+0x70>
 80118cc:	6921      	ldr	r1, [r4, #16]
 80118ce:	4650      	mov	r0, sl
 80118d0:	f7ff fec6 	bl	8011660 <_free_r>
 80118d4:	e7c7      	b.n	8011866 <__ssputs_r+0x46>
	...

080118d8 <_svfiprintf_r>:
 80118d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118dc:	4698      	mov	r8, r3
 80118de:	898b      	ldrh	r3, [r1, #12]
 80118e0:	061b      	lsls	r3, r3, #24
 80118e2:	b09d      	sub	sp, #116	; 0x74
 80118e4:	4607      	mov	r7, r0
 80118e6:	460d      	mov	r5, r1
 80118e8:	4614      	mov	r4, r2
 80118ea:	d50e      	bpl.n	801190a <_svfiprintf_r+0x32>
 80118ec:	690b      	ldr	r3, [r1, #16]
 80118ee:	b963      	cbnz	r3, 801190a <_svfiprintf_r+0x32>
 80118f0:	2140      	movs	r1, #64	; 0x40
 80118f2:	f7ff ff21 	bl	8011738 <_malloc_r>
 80118f6:	6028      	str	r0, [r5, #0]
 80118f8:	6128      	str	r0, [r5, #16]
 80118fa:	b920      	cbnz	r0, 8011906 <_svfiprintf_r+0x2e>
 80118fc:	230c      	movs	r3, #12
 80118fe:	603b      	str	r3, [r7, #0]
 8011900:	f04f 30ff 	mov.w	r0, #4294967295
 8011904:	e0d1      	b.n	8011aaa <_svfiprintf_r+0x1d2>
 8011906:	2340      	movs	r3, #64	; 0x40
 8011908:	616b      	str	r3, [r5, #20]
 801190a:	2300      	movs	r3, #0
 801190c:	9309      	str	r3, [sp, #36]	; 0x24
 801190e:	2320      	movs	r3, #32
 8011910:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011914:	f8cd 800c 	str.w	r8, [sp, #12]
 8011918:	2330      	movs	r3, #48	; 0x30
 801191a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011ac4 <_svfiprintf_r+0x1ec>
 801191e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011922:	f04f 0901 	mov.w	r9, #1
 8011926:	4623      	mov	r3, r4
 8011928:	469a      	mov	sl, r3
 801192a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801192e:	b10a      	cbz	r2, 8011934 <_svfiprintf_r+0x5c>
 8011930:	2a25      	cmp	r2, #37	; 0x25
 8011932:	d1f9      	bne.n	8011928 <_svfiprintf_r+0x50>
 8011934:	ebba 0b04 	subs.w	fp, sl, r4
 8011938:	d00b      	beq.n	8011952 <_svfiprintf_r+0x7a>
 801193a:	465b      	mov	r3, fp
 801193c:	4622      	mov	r2, r4
 801193e:	4629      	mov	r1, r5
 8011940:	4638      	mov	r0, r7
 8011942:	f7ff ff6d 	bl	8011820 <__ssputs_r>
 8011946:	3001      	adds	r0, #1
 8011948:	f000 80aa 	beq.w	8011aa0 <_svfiprintf_r+0x1c8>
 801194c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801194e:	445a      	add	r2, fp
 8011950:	9209      	str	r2, [sp, #36]	; 0x24
 8011952:	f89a 3000 	ldrb.w	r3, [sl]
 8011956:	2b00      	cmp	r3, #0
 8011958:	f000 80a2 	beq.w	8011aa0 <_svfiprintf_r+0x1c8>
 801195c:	2300      	movs	r3, #0
 801195e:	f04f 32ff 	mov.w	r2, #4294967295
 8011962:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011966:	f10a 0a01 	add.w	sl, sl, #1
 801196a:	9304      	str	r3, [sp, #16]
 801196c:	9307      	str	r3, [sp, #28]
 801196e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011972:	931a      	str	r3, [sp, #104]	; 0x68
 8011974:	4654      	mov	r4, sl
 8011976:	2205      	movs	r2, #5
 8011978:	f814 1b01 	ldrb.w	r1, [r4], #1
 801197c:	4851      	ldr	r0, [pc, #324]	; (8011ac4 <_svfiprintf_r+0x1ec>)
 801197e:	f7ee fc07 	bl	8000190 <memchr>
 8011982:	9a04      	ldr	r2, [sp, #16]
 8011984:	b9d8      	cbnz	r0, 80119be <_svfiprintf_r+0xe6>
 8011986:	06d0      	lsls	r0, r2, #27
 8011988:	bf44      	itt	mi
 801198a:	2320      	movmi	r3, #32
 801198c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011990:	0711      	lsls	r1, r2, #28
 8011992:	bf44      	itt	mi
 8011994:	232b      	movmi	r3, #43	; 0x2b
 8011996:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801199a:	f89a 3000 	ldrb.w	r3, [sl]
 801199e:	2b2a      	cmp	r3, #42	; 0x2a
 80119a0:	d015      	beq.n	80119ce <_svfiprintf_r+0xf6>
 80119a2:	9a07      	ldr	r2, [sp, #28]
 80119a4:	4654      	mov	r4, sl
 80119a6:	2000      	movs	r0, #0
 80119a8:	f04f 0c0a 	mov.w	ip, #10
 80119ac:	4621      	mov	r1, r4
 80119ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80119b2:	3b30      	subs	r3, #48	; 0x30
 80119b4:	2b09      	cmp	r3, #9
 80119b6:	d94e      	bls.n	8011a56 <_svfiprintf_r+0x17e>
 80119b8:	b1b0      	cbz	r0, 80119e8 <_svfiprintf_r+0x110>
 80119ba:	9207      	str	r2, [sp, #28]
 80119bc:	e014      	b.n	80119e8 <_svfiprintf_r+0x110>
 80119be:	eba0 0308 	sub.w	r3, r0, r8
 80119c2:	fa09 f303 	lsl.w	r3, r9, r3
 80119c6:	4313      	orrs	r3, r2
 80119c8:	9304      	str	r3, [sp, #16]
 80119ca:	46a2      	mov	sl, r4
 80119cc:	e7d2      	b.n	8011974 <_svfiprintf_r+0x9c>
 80119ce:	9b03      	ldr	r3, [sp, #12]
 80119d0:	1d19      	adds	r1, r3, #4
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	9103      	str	r1, [sp, #12]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	bfbb      	ittet	lt
 80119da:	425b      	neglt	r3, r3
 80119dc:	f042 0202 	orrlt.w	r2, r2, #2
 80119e0:	9307      	strge	r3, [sp, #28]
 80119e2:	9307      	strlt	r3, [sp, #28]
 80119e4:	bfb8      	it	lt
 80119e6:	9204      	strlt	r2, [sp, #16]
 80119e8:	7823      	ldrb	r3, [r4, #0]
 80119ea:	2b2e      	cmp	r3, #46	; 0x2e
 80119ec:	d10c      	bne.n	8011a08 <_svfiprintf_r+0x130>
 80119ee:	7863      	ldrb	r3, [r4, #1]
 80119f0:	2b2a      	cmp	r3, #42	; 0x2a
 80119f2:	d135      	bne.n	8011a60 <_svfiprintf_r+0x188>
 80119f4:	9b03      	ldr	r3, [sp, #12]
 80119f6:	1d1a      	adds	r2, r3, #4
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	9203      	str	r2, [sp, #12]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	bfb8      	it	lt
 8011a00:	f04f 33ff 	movlt.w	r3, #4294967295
 8011a04:	3402      	adds	r4, #2
 8011a06:	9305      	str	r3, [sp, #20]
 8011a08:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011ad4 <_svfiprintf_r+0x1fc>
 8011a0c:	7821      	ldrb	r1, [r4, #0]
 8011a0e:	2203      	movs	r2, #3
 8011a10:	4650      	mov	r0, sl
 8011a12:	f7ee fbbd 	bl	8000190 <memchr>
 8011a16:	b140      	cbz	r0, 8011a2a <_svfiprintf_r+0x152>
 8011a18:	2340      	movs	r3, #64	; 0x40
 8011a1a:	eba0 000a 	sub.w	r0, r0, sl
 8011a1e:	fa03 f000 	lsl.w	r0, r3, r0
 8011a22:	9b04      	ldr	r3, [sp, #16]
 8011a24:	4303      	orrs	r3, r0
 8011a26:	3401      	adds	r4, #1
 8011a28:	9304      	str	r3, [sp, #16]
 8011a2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a2e:	4826      	ldr	r0, [pc, #152]	; (8011ac8 <_svfiprintf_r+0x1f0>)
 8011a30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011a34:	2206      	movs	r2, #6
 8011a36:	f7ee fbab 	bl	8000190 <memchr>
 8011a3a:	2800      	cmp	r0, #0
 8011a3c:	d038      	beq.n	8011ab0 <_svfiprintf_r+0x1d8>
 8011a3e:	4b23      	ldr	r3, [pc, #140]	; (8011acc <_svfiprintf_r+0x1f4>)
 8011a40:	bb1b      	cbnz	r3, 8011a8a <_svfiprintf_r+0x1b2>
 8011a42:	9b03      	ldr	r3, [sp, #12]
 8011a44:	3307      	adds	r3, #7
 8011a46:	f023 0307 	bic.w	r3, r3, #7
 8011a4a:	3308      	adds	r3, #8
 8011a4c:	9303      	str	r3, [sp, #12]
 8011a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a50:	4433      	add	r3, r6
 8011a52:	9309      	str	r3, [sp, #36]	; 0x24
 8011a54:	e767      	b.n	8011926 <_svfiprintf_r+0x4e>
 8011a56:	fb0c 3202 	mla	r2, ip, r2, r3
 8011a5a:	460c      	mov	r4, r1
 8011a5c:	2001      	movs	r0, #1
 8011a5e:	e7a5      	b.n	80119ac <_svfiprintf_r+0xd4>
 8011a60:	2300      	movs	r3, #0
 8011a62:	3401      	adds	r4, #1
 8011a64:	9305      	str	r3, [sp, #20]
 8011a66:	4619      	mov	r1, r3
 8011a68:	f04f 0c0a 	mov.w	ip, #10
 8011a6c:	4620      	mov	r0, r4
 8011a6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a72:	3a30      	subs	r2, #48	; 0x30
 8011a74:	2a09      	cmp	r2, #9
 8011a76:	d903      	bls.n	8011a80 <_svfiprintf_r+0x1a8>
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d0c5      	beq.n	8011a08 <_svfiprintf_r+0x130>
 8011a7c:	9105      	str	r1, [sp, #20]
 8011a7e:	e7c3      	b.n	8011a08 <_svfiprintf_r+0x130>
 8011a80:	fb0c 2101 	mla	r1, ip, r1, r2
 8011a84:	4604      	mov	r4, r0
 8011a86:	2301      	movs	r3, #1
 8011a88:	e7f0      	b.n	8011a6c <_svfiprintf_r+0x194>
 8011a8a:	ab03      	add	r3, sp, #12
 8011a8c:	9300      	str	r3, [sp, #0]
 8011a8e:	462a      	mov	r2, r5
 8011a90:	4b0f      	ldr	r3, [pc, #60]	; (8011ad0 <_svfiprintf_r+0x1f8>)
 8011a92:	a904      	add	r1, sp, #16
 8011a94:	4638      	mov	r0, r7
 8011a96:	f7fc fa49 	bl	800df2c <_printf_float>
 8011a9a:	1c42      	adds	r2, r0, #1
 8011a9c:	4606      	mov	r6, r0
 8011a9e:	d1d6      	bne.n	8011a4e <_svfiprintf_r+0x176>
 8011aa0:	89ab      	ldrh	r3, [r5, #12]
 8011aa2:	065b      	lsls	r3, r3, #25
 8011aa4:	f53f af2c 	bmi.w	8011900 <_svfiprintf_r+0x28>
 8011aa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011aaa:	b01d      	add	sp, #116	; 0x74
 8011aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ab0:	ab03      	add	r3, sp, #12
 8011ab2:	9300      	str	r3, [sp, #0]
 8011ab4:	462a      	mov	r2, r5
 8011ab6:	4b06      	ldr	r3, [pc, #24]	; (8011ad0 <_svfiprintf_r+0x1f8>)
 8011ab8:	a904      	add	r1, sp, #16
 8011aba:	4638      	mov	r0, r7
 8011abc:	f7fc fcda 	bl	800e474 <_printf_i>
 8011ac0:	e7eb      	b.n	8011a9a <_svfiprintf_r+0x1c2>
 8011ac2:	bf00      	nop
 8011ac4:	08012c84 	.word	0x08012c84
 8011ac8:	08012c8e 	.word	0x08012c8e
 8011acc:	0800df2d 	.word	0x0800df2d
 8011ad0:	08011821 	.word	0x08011821
 8011ad4:	08012c8a 	.word	0x08012c8a

08011ad8 <nan>:
 8011ad8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011ae0 <nan+0x8>
 8011adc:	4770      	bx	lr
 8011ade:	bf00      	nop
 8011ae0:	00000000 	.word	0x00000000
 8011ae4:	7ff80000 	.word	0x7ff80000

08011ae8 <_sbrk_r>:
 8011ae8:	b538      	push	{r3, r4, r5, lr}
 8011aea:	4d06      	ldr	r5, [pc, #24]	; (8011b04 <_sbrk_r+0x1c>)
 8011aec:	2300      	movs	r3, #0
 8011aee:	4604      	mov	r4, r0
 8011af0:	4608      	mov	r0, r1
 8011af2:	602b      	str	r3, [r5, #0]
 8011af4:	f7f2 fe58 	bl	80047a8 <_sbrk>
 8011af8:	1c43      	adds	r3, r0, #1
 8011afa:	d102      	bne.n	8011b02 <_sbrk_r+0x1a>
 8011afc:	682b      	ldr	r3, [r5, #0]
 8011afe:	b103      	cbz	r3, 8011b02 <_sbrk_r+0x1a>
 8011b00:	6023      	str	r3, [r4, #0]
 8011b02:	bd38      	pop	{r3, r4, r5, pc}
 8011b04:	20005738 	.word	0x20005738

08011b08 <strncmp>:
 8011b08:	b510      	push	{r4, lr}
 8011b0a:	b17a      	cbz	r2, 8011b2c <strncmp+0x24>
 8011b0c:	4603      	mov	r3, r0
 8011b0e:	3901      	subs	r1, #1
 8011b10:	1884      	adds	r4, r0, r2
 8011b12:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011b16:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011b1a:	4290      	cmp	r0, r2
 8011b1c:	d101      	bne.n	8011b22 <strncmp+0x1a>
 8011b1e:	42a3      	cmp	r3, r4
 8011b20:	d101      	bne.n	8011b26 <strncmp+0x1e>
 8011b22:	1a80      	subs	r0, r0, r2
 8011b24:	bd10      	pop	{r4, pc}
 8011b26:	2800      	cmp	r0, #0
 8011b28:	d1f3      	bne.n	8011b12 <strncmp+0xa>
 8011b2a:	e7fa      	b.n	8011b22 <strncmp+0x1a>
 8011b2c:	4610      	mov	r0, r2
 8011b2e:	e7f9      	b.n	8011b24 <strncmp+0x1c>

08011b30 <__ascii_wctomb>:
 8011b30:	b149      	cbz	r1, 8011b46 <__ascii_wctomb+0x16>
 8011b32:	2aff      	cmp	r2, #255	; 0xff
 8011b34:	bf85      	ittet	hi
 8011b36:	238a      	movhi	r3, #138	; 0x8a
 8011b38:	6003      	strhi	r3, [r0, #0]
 8011b3a:	700a      	strbls	r2, [r1, #0]
 8011b3c:	f04f 30ff 	movhi.w	r0, #4294967295
 8011b40:	bf98      	it	ls
 8011b42:	2001      	movls	r0, #1
 8011b44:	4770      	bx	lr
 8011b46:	4608      	mov	r0, r1
 8011b48:	4770      	bx	lr
	...

08011b4c <__assert_func>:
 8011b4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011b4e:	4614      	mov	r4, r2
 8011b50:	461a      	mov	r2, r3
 8011b52:	4b09      	ldr	r3, [pc, #36]	; (8011b78 <__assert_func+0x2c>)
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	4605      	mov	r5, r0
 8011b58:	68d8      	ldr	r0, [r3, #12]
 8011b5a:	b14c      	cbz	r4, 8011b70 <__assert_func+0x24>
 8011b5c:	4b07      	ldr	r3, [pc, #28]	; (8011b7c <__assert_func+0x30>)
 8011b5e:	9100      	str	r1, [sp, #0]
 8011b60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011b64:	4906      	ldr	r1, [pc, #24]	; (8011b80 <__assert_func+0x34>)
 8011b66:	462b      	mov	r3, r5
 8011b68:	f000 f80e 	bl	8011b88 <fiprintf>
 8011b6c:	f000 fa8c 	bl	8012088 <abort>
 8011b70:	4b04      	ldr	r3, [pc, #16]	; (8011b84 <__assert_func+0x38>)
 8011b72:	461c      	mov	r4, r3
 8011b74:	e7f3      	b.n	8011b5e <__assert_func+0x12>
 8011b76:	bf00      	nop
 8011b78:	20000114 	.word	0x20000114
 8011b7c:	08012c95 	.word	0x08012c95
 8011b80:	08012ca2 	.word	0x08012ca2
 8011b84:	08012cd0 	.word	0x08012cd0

08011b88 <fiprintf>:
 8011b88:	b40e      	push	{r1, r2, r3}
 8011b8a:	b503      	push	{r0, r1, lr}
 8011b8c:	4601      	mov	r1, r0
 8011b8e:	ab03      	add	r3, sp, #12
 8011b90:	4805      	ldr	r0, [pc, #20]	; (8011ba8 <fiprintf+0x20>)
 8011b92:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b96:	6800      	ldr	r0, [r0, #0]
 8011b98:	9301      	str	r3, [sp, #4]
 8011b9a:	f000 f885 	bl	8011ca8 <_vfiprintf_r>
 8011b9e:	b002      	add	sp, #8
 8011ba0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ba4:	b003      	add	sp, #12
 8011ba6:	4770      	bx	lr
 8011ba8:	20000114 	.word	0x20000114

08011bac <memmove>:
 8011bac:	4288      	cmp	r0, r1
 8011bae:	b510      	push	{r4, lr}
 8011bb0:	eb01 0402 	add.w	r4, r1, r2
 8011bb4:	d902      	bls.n	8011bbc <memmove+0x10>
 8011bb6:	4284      	cmp	r4, r0
 8011bb8:	4623      	mov	r3, r4
 8011bba:	d807      	bhi.n	8011bcc <memmove+0x20>
 8011bbc:	1e43      	subs	r3, r0, #1
 8011bbe:	42a1      	cmp	r1, r4
 8011bc0:	d008      	beq.n	8011bd4 <memmove+0x28>
 8011bc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011bc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011bca:	e7f8      	b.n	8011bbe <memmove+0x12>
 8011bcc:	4402      	add	r2, r0
 8011bce:	4601      	mov	r1, r0
 8011bd0:	428a      	cmp	r2, r1
 8011bd2:	d100      	bne.n	8011bd6 <memmove+0x2a>
 8011bd4:	bd10      	pop	{r4, pc}
 8011bd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011bda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011bde:	e7f7      	b.n	8011bd0 <memmove+0x24>

08011be0 <__malloc_lock>:
 8011be0:	4801      	ldr	r0, [pc, #4]	; (8011be8 <__malloc_lock+0x8>)
 8011be2:	f000 bc11 	b.w	8012408 <__retarget_lock_acquire_recursive>
 8011be6:	bf00      	nop
 8011be8:	2000573c 	.word	0x2000573c

08011bec <__malloc_unlock>:
 8011bec:	4801      	ldr	r0, [pc, #4]	; (8011bf4 <__malloc_unlock+0x8>)
 8011bee:	f000 bc0c 	b.w	801240a <__retarget_lock_release_recursive>
 8011bf2:	bf00      	nop
 8011bf4:	2000573c 	.word	0x2000573c

08011bf8 <_realloc_r>:
 8011bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bfc:	4680      	mov	r8, r0
 8011bfe:	4614      	mov	r4, r2
 8011c00:	460e      	mov	r6, r1
 8011c02:	b921      	cbnz	r1, 8011c0e <_realloc_r+0x16>
 8011c04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c08:	4611      	mov	r1, r2
 8011c0a:	f7ff bd95 	b.w	8011738 <_malloc_r>
 8011c0e:	b92a      	cbnz	r2, 8011c1c <_realloc_r+0x24>
 8011c10:	f7ff fd26 	bl	8011660 <_free_r>
 8011c14:	4625      	mov	r5, r4
 8011c16:	4628      	mov	r0, r5
 8011c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c1c:	f000 fc5c 	bl	80124d8 <_malloc_usable_size_r>
 8011c20:	4284      	cmp	r4, r0
 8011c22:	4607      	mov	r7, r0
 8011c24:	d802      	bhi.n	8011c2c <_realloc_r+0x34>
 8011c26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011c2a:	d812      	bhi.n	8011c52 <_realloc_r+0x5a>
 8011c2c:	4621      	mov	r1, r4
 8011c2e:	4640      	mov	r0, r8
 8011c30:	f7ff fd82 	bl	8011738 <_malloc_r>
 8011c34:	4605      	mov	r5, r0
 8011c36:	2800      	cmp	r0, #0
 8011c38:	d0ed      	beq.n	8011c16 <_realloc_r+0x1e>
 8011c3a:	42bc      	cmp	r4, r7
 8011c3c:	4622      	mov	r2, r4
 8011c3e:	4631      	mov	r1, r6
 8011c40:	bf28      	it	cs
 8011c42:	463a      	movcs	r2, r7
 8011c44:	f7fc f8bc 	bl	800ddc0 <memcpy>
 8011c48:	4631      	mov	r1, r6
 8011c4a:	4640      	mov	r0, r8
 8011c4c:	f7ff fd08 	bl	8011660 <_free_r>
 8011c50:	e7e1      	b.n	8011c16 <_realloc_r+0x1e>
 8011c52:	4635      	mov	r5, r6
 8011c54:	e7df      	b.n	8011c16 <_realloc_r+0x1e>

08011c56 <__sfputc_r>:
 8011c56:	6893      	ldr	r3, [r2, #8]
 8011c58:	3b01      	subs	r3, #1
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	b410      	push	{r4}
 8011c5e:	6093      	str	r3, [r2, #8]
 8011c60:	da08      	bge.n	8011c74 <__sfputc_r+0x1e>
 8011c62:	6994      	ldr	r4, [r2, #24]
 8011c64:	42a3      	cmp	r3, r4
 8011c66:	db01      	blt.n	8011c6c <__sfputc_r+0x16>
 8011c68:	290a      	cmp	r1, #10
 8011c6a:	d103      	bne.n	8011c74 <__sfputc_r+0x1e>
 8011c6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c70:	f000 b94a 	b.w	8011f08 <__swbuf_r>
 8011c74:	6813      	ldr	r3, [r2, #0]
 8011c76:	1c58      	adds	r0, r3, #1
 8011c78:	6010      	str	r0, [r2, #0]
 8011c7a:	7019      	strb	r1, [r3, #0]
 8011c7c:	4608      	mov	r0, r1
 8011c7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c82:	4770      	bx	lr

08011c84 <__sfputs_r>:
 8011c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c86:	4606      	mov	r6, r0
 8011c88:	460f      	mov	r7, r1
 8011c8a:	4614      	mov	r4, r2
 8011c8c:	18d5      	adds	r5, r2, r3
 8011c8e:	42ac      	cmp	r4, r5
 8011c90:	d101      	bne.n	8011c96 <__sfputs_r+0x12>
 8011c92:	2000      	movs	r0, #0
 8011c94:	e007      	b.n	8011ca6 <__sfputs_r+0x22>
 8011c96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c9a:	463a      	mov	r2, r7
 8011c9c:	4630      	mov	r0, r6
 8011c9e:	f7ff ffda 	bl	8011c56 <__sfputc_r>
 8011ca2:	1c43      	adds	r3, r0, #1
 8011ca4:	d1f3      	bne.n	8011c8e <__sfputs_r+0xa>
 8011ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011ca8 <_vfiprintf_r>:
 8011ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cac:	460d      	mov	r5, r1
 8011cae:	b09d      	sub	sp, #116	; 0x74
 8011cb0:	4614      	mov	r4, r2
 8011cb2:	4698      	mov	r8, r3
 8011cb4:	4606      	mov	r6, r0
 8011cb6:	b118      	cbz	r0, 8011cc0 <_vfiprintf_r+0x18>
 8011cb8:	6983      	ldr	r3, [r0, #24]
 8011cba:	b90b      	cbnz	r3, 8011cc0 <_vfiprintf_r+0x18>
 8011cbc:	f000 fb06 	bl	80122cc <__sinit>
 8011cc0:	4b89      	ldr	r3, [pc, #548]	; (8011ee8 <_vfiprintf_r+0x240>)
 8011cc2:	429d      	cmp	r5, r3
 8011cc4:	d11b      	bne.n	8011cfe <_vfiprintf_r+0x56>
 8011cc6:	6875      	ldr	r5, [r6, #4]
 8011cc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011cca:	07d9      	lsls	r1, r3, #31
 8011ccc:	d405      	bmi.n	8011cda <_vfiprintf_r+0x32>
 8011cce:	89ab      	ldrh	r3, [r5, #12]
 8011cd0:	059a      	lsls	r2, r3, #22
 8011cd2:	d402      	bmi.n	8011cda <_vfiprintf_r+0x32>
 8011cd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011cd6:	f000 fb97 	bl	8012408 <__retarget_lock_acquire_recursive>
 8011cda:	89ab      	ldrh	r3, [r5, #12]
 8011cdc:	071b      	lsls	r3, r3, #28
 8011cde:	d501      	bpl.n	8011ce4 <_vfiprintf_r+0x3c>
 8011ce0:	692b      	ldr	r3, [r5, #16]
 8011ce2:	b9eb      	cbnz	r3, 8011d20 <_vfiprintf_r+0x78>
 8011ce4:	4629      	mov	r1, r5
 8011ce6:	4630      	mov	r0, r6
 8011ce8:	f000 f960 	bl	8011fac <__swsetup_r>
 8011cec:	b1c0      	cbz	r0, 8011d20 <_vfiprintf_r+0x78>
 8011cee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011cf0:	07dc      	lsls	r4, r3, #31
 8011cf2:	d50e      	bpl.n	8011d12 <_vfiprintf_r+0x6a>
 8011cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8011cf8:	b01d      	add	sp, #116	; 0x74
 8011cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cfe:	4b7b      	ldr	r3, [pc, #492]	; (8011eec <_vfiprintf_r+0x244>)
 8011d00:	429d      	cmp	r5, r3
 8011d02:	d101      	bne.n	8011d08 <_vfiprintf_r+0x60>
 8011d04:	68b5      	ldr	r5, [r6, #8]
 8011d06:	e7df      	b.n	8011cc8 <_vfiprintf_r+0x20>
 8011d08:	4b79      	ldr	r3, [pc, #484]	; (8011ef0 <_vfiprintf_r+0x248>)
 8011d0a:	429d      	cmp	r5, r3
 8011d0c:	bf08      	it	eq
 8011d0e:	68f5      	ldreq	r5, [r6, #12]
 8011d10:	e7da      	b.n	8011cc8 <_vfiprintf_r+0x20>
 8011d12:	89ab      	ldrh	r3, [r5, #12]
 8011d14:	0598      	lsls	r0, r3, #22
 8011d16:	d4ed      	bmi.n	8011cf4 <_vfiprintf_r+0x4c>
 8011d18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011d1a:	f000 fb76 	bl	801240a <__retarget_lock_release_recursive>
 8011d1e:	e7e9      	b.n	8011cf4 <_vfiprintf_r+0x4c>
 8011d20:	2300      	movs	r3, #0
 8011d22:	9309      	str	r3, [sp, #36]	; 0x24
 8011d24:	2320      	movs	r3, #32
 8011d26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011d2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d2e:	2330      	movs	r3, #48	; 0x30
 8011d30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011ef4 <_vfiprintf_r+0x24c>
 8011d34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011d38:	f04f 0901 	mov.w	r9, #1
 8011d3c:	4623      	mov	r3, r4
 8011d3e:	469a      	mov	sl, r3
 8011d40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d44:	b10a      	cbz	r2, 8011d4a <_vfiprintf_r+0xa2>
 8011d46:	2a25      	cmp	r2, #37	; 0x25
 8011d48:	d1f9      	bne.n	8011d3e <_vfiprintf_r+0x96>
 8011d4a:	ebba 0b04 	subs.w	fp, sl, r4
 8011d4e:	d00b      	beq.n	8011d68 <_vfiprintf_r+0xc0>
 8011d50:	465b      	mov	r3, fp
 8011d52:	4622      	mov	r2, r4
 8011d54:	4629      	mov	r1, r5
 8011d56:	4630      	mov	r0, r6
 8011d58:	f7ff ff94 	bl	8011c84 <__sfputs_r>
 8011d5c:	3001      	adds	r0, #1
 8011d5e:	f000 80aa 	beq.w	8011eb6 <_vfiprintf_r+0x20e>
 8011d62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011d64:	445a      	add	r2, fp
 8011d66:	9209      	str	r2, [sp, #36]	; 0x24
 8011d68:	f89a 3000 	ldrb.w	r3, [sl]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	f000 80a2 	beq.w	8011eb6 <_vfiprintf_r+0x20e>
 8011d72:	2300      	movs	r3, #0
 8011d74:	f04f 32ff 	mov.w	r2, #4294967295
 8011d78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d7c:	f10a 0a01 	add.w	sl, sl, #1
 8011d80:	9304      	str	r3, [sp, #16]
 8011d82:	9307      	str	r3, [sp, #28]
 8011d84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011d88:	931a      	str	r3, [sp, #104]	; 0x68
 8011d8a:	4654      	mov	r4, sl
 8011d8c:	2205      	movs	r2, #5
 8011d8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d92:	4858      	ldr	r0, [pc, #352]	; (8011ef4 <_vfiprintf_r+0x24c>)
 8011d94:	f7ee f9fc 	bl	8000190 <memchr>
 8011d98:	9a04      	ldr	r2, [sp, #16]
 8011d9a:	b9d8      	cbnz	r0, 8011dd4 <_vfiprintf_r+0x12c>
 8011d9c:	06d1      	lsls	r1, r2, #27
 8011d9e:	bf44      	itt	mi
 8011da0:	2320      	movmi	r3, #32
 8011da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011da6:	0713      	lsls	r3, r2, #28
 8011da8:	bf44      	itt	mi
 8011daa:	232b      	movmi	r3, #43	; 0x2b
 8011dac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011db0:	f89a 3000 	ldrb.w	r3, [sl]
 8011db4:	2b2a      	cmp	r3, #42	; 0x2a
 8011db6:	d015      	beq.n	8011de4 <_vfiprintf_r+0x13c>
 8011db8:	9a07      	ldr	r2, [sp, #28]
 8011dba:	4654      	mov	r4, sl
 8011dbc:	2000      	movs	r0, #0
 8011dbe:	f04f 0c0a 	mov.w	ip, #10
 8011dc2:	4621      	mov	r1, r4
 8011dc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011dc8:	3b30      	subs	r3, #48	; 0x30
 8011dca:	2b09      	cmp	r3, #9
 8011dcc:	d94e      	bls.n	8011e6c <_vfiprintf_r+0x1c4>
 8011dce:	b1b0      	cbz	r0, 8011dfe <_vfiprintf_r+0x156>
 8011dd0:	9207      	str	r2, [sp, #28]
 8011dd2:	e014      	b.n	8011dfe <_vfiprintf_r+0x156>
 8011dd4:	eba0 0308 	sub.w	r3, r0, r8
 8011dd8:	fa09 f303 	lsl.w	r3, r9, r3
 8011ddc:	4313      	orrs	r3, r2
 8011dde:	9304      	str	r3, [sp, #16]
 8011de0:	46a2      	mov	sl, r4
 8011de2:	e7d2      	b.n	8011d8a <_vfiprintf_r+0xe2>
 8011de4:	9b03      	ldr	r3, [sp, #12]
 8011de6:	1d19      	adds	r1, r3, #4
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	9103      	str	r1, [sp, #12]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	bfbb      	ittet	lt
 8011df0:	425b      	neglt	r3, r3
 8011df2:	f042 0202 	orrlt.w	r2, r2, #2
 8011df6:	9307      	strge	r3, [sp, #28]
 8011df8:	9307      	strlt	r3, [sp, #28]
 8011dfa:	bfb8      	it	lt
 8011dfc:	9204      	strlt	r2, [sp, #16]
 8011dfe:	7823      	ldrb	r3, [r4, #0]
 8011e00:	2b2e      	cmp	r3, #46	; 0x2e
 8011e02:	d10c      	bne.n	8011e1e <_vfiprintf_r+0x176>
 8011e04:	7863      	ldrb	r3, [r4, #1]
 8011e06:	2b2a      	cmp	r3, #42	; 0x2a
 8011e08:	d135      	bne.n	8011e76 <_vfiprintf_r+0x1ce>
 8011e0a:	9b03      	ldr	r3, [sp, #12]
 8011e0c:	1d1a      	adds	r2, r3, #4
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	9203      	str	r2, [sp, #12]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	bfb8      	it	lt
 8011e16:	f04f 33ff 	movlt.w	r3, #4294967295
 8011e1a:	3402      	adds	r4, #2
 8011e1c:	9305      	str	r3, [sp, #20]
 8011e1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011f04 <_vfiprintf_r+0x25c>
 8011e22:	7821      	ldrb	r1, [r4, #0]
 8011e24:	2203      	movs	r2, #3
 8011e26:	4650      	mov	r0, sl
 8011e28:	f7ee f9b2 	bl	8000190 <memchr>
 8011e2c:	b140      	cbz	r0, 8011e40 <_vfiprintf_r+0x198>
 8011e2e:	2340      	movs	r3, #64	; 0x40
 8011e30:	eba0 000a 	sub.w	r0, r0, sl
 8011e34:	fa03 f000 	lsl.w	r0, r3, r0
 8011e38:	9b04      	ldr	r3, [sp, #16]
 8011e3a:	4303      	orrs	r3, r0
 8011e3c:	3401      	adds	r4, #1
 8011e3e:	9304      	str	r3, [sp, #16]
 8011e40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e44:	482c      	ldr	r0, [pc, #176]	; (8011ef8 <_vfiprintf_r+0x250>)
 8011e46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011e4a:	2206      	movs	r2, #6
 8011e4c:	f7ee f9a0 	bl	8000190 <memchr>
 8011e50:	2800      	cmp	r0, #0
 8011e52:	d03f      	beq.n	8011ed4 <_vfiprintf_r+0x22c>
 8011e54:	4b29      	ldr	r3, [pc, #164]	; (8011efc <_vfiprintf_r+0x254>)
 8011e56:	bb1b      	cbnz	r3, 8011ea0 <_vfiprintf_r+0x1f8>
 8011e58:	9b03      	ldr	r3, [sp, #12]
 8011e5a:	3307      	adds	r3, #7
 8011e5c:	f023 0307 	bic.w	r3, r3, #7
 8011e60:	3308      	adds	r3, #8
 8011e62:	9303      	str	r3, [sp, #12]
 8011e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e66:	443b      	add	r3, r7
 8011e68:	9309      	str	r3, [sp, #36]	; 0x24
 8011e6a:	e767      	b.n	8011d3c <_vfiprintf_r+0x94>
 8011e6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011e70:	460c      	mov	r4, r1
 8011e72:	2001      	movs	r0, #1
 8011e74:	e7a5      	b.n	8011dc2 <_vfiprintf_r+0x11a>
 8011e76:	2300      	movs	r3, #0
 8011e78:	3401      	adds	r4, #1
 8011e7a:	9305      	str	r3, [sp, #20]
 8011e7c:	4619      	mov	r1, r3
 8011e7e:	f04f 0c0a 	mov.w	ip, #10
 8011e82:	4620      	mov	r0, r4
 8011e84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e88:	3a30      	subs	r2, #48	; 0x30
 8011e8a:	2a09      	cmp	r2, #9
 8011e8c:	d903      	bls.n	8011e96 <_vfiprintf_r+0x1ee>
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d0c5      	beq.n	8011e1e <_vfiprintf_r+0x176>
 8011e92:	9105      	str	r1, [sp, #20]
 8011e94:	e7c3      	b.n	8011e1e <_vfiprintf_r+0x176>
 8011e96:	fb0c 2101 	mla	r1, ip, r1, r2
 8011e9a:	4604      	mov	r4, r0
 8011e9c:	2301      	movs	r3, #1
 8011e9e:	e7f0      	b.n	8011e82 <_vfiprintf_r+0x1da>
 8011ea0:	ab03      	add	r3, sp, #12
 8011ea2:	9300      	str	r3, [sp, #0]
 8011ea4:	462a      	mov	r2, r5
 8011ea6:	4b16      	ldr	r3, [pc, #88]	; (8011f00 <_vfiprintf_r+0x258>)
 8011ea8:	a904      	add	r1, sp, #16
 8011eaa:	4630      	mov	r0, r6
 8011eac:	f7fc f83e 	bl	800df2c <_printf_float>
 8011eb0:	4607      	mov	r7, r0
 8011eb2:	1c78      	adds	r0, r7, #1
 8011eb4:	d1d6      	bne.n	8011e64 <_vfiprintf_r+0x1bc>
 8011eb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011eb8:	07d9      	lsls	r1, r3, #31
 8011eba:	d405      	bmi.n	8011ec8 <_vfiprintf_r+0x220>
 8011ebc:	89ab      	ldrh	r3, [r5, #12]
 8011ebe:	059a      	lsls	r2, r3, #22
 8011ec0:	d402      	bmi.n	8011ec8 <_vfiprintf_r+0x220>
 8011ec2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011ec4:	f000 faa1 	bl	801240a <__retarget_lock_release_recursive>
 8011ec8:	89ab      	ldrh	r3, [r5, #12]
 8011eca:	065b      	lsls	r3, r3, #25
 8011ecc:	f53f af12 	bmi.w	8011cf4 <_vfiprintf_r+0x4c>
 8011ed0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011ed2:	e711      	b.n	8011cf8 <_vfiprintf_r+0x50>
 8011ed4:	ab03      	add	r3, sp, #12
 8011ed6:	9300      	str	r3, [sp, #0]
 8011ed8:	462a      	mov	r2, r5
 8011eda:	4b09      	ldr	r3, [pc, #36]	; (8011f00 <_vfiprintf_r+0x258>)
 8011edc:	a904      	add	r1, sp, #16
 8011ede:	4630      	mov	r0, r6
 8011ee0:	f7fc fac8 	bl	800e474 <_printf_i>
 8011ee4:	e7e4      	b.n	8011eb0 <_vfiprintf_r+0x208>
 8011ee6:	bf00      	nop
 8011ee8:	08012cf4 	.word	0x08012cf4
 8011eec:	08012d14 	.word	0x08012d14
 8011ef0:	08012cd4 	.word	0x08012cd4
 8011ef4:	08012c84 	.word	0x08012c84
 8011ef8:	08012c8e 	.word	0x08012c8e
 8011efc:	0800df2d 	.word	0x0800df2d
 8011f00:	08011c85 	.word	0x08011c85
 8011f04:	08012c8a 	.word	0x08012c8a

08011f08 <__swbuf_r>:
 8011f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f0a:	460e      	mov	r6, r1
 8011f0c:	4614      	mov	r4, r2
 8011f0e:	4605      	mov	r5, r0
 8011f10:	b118      	cbz	r0, 8011f1a <__swbuf_r+0x12>
 8011f12:	6983      	ldr	r3, [r0, #24]
 8011f14:	b90b      	cbnz	r3, 8011f1a <__swbuf_r+0x12>
 8011f16:	f000 f9d9 	bl	80122cc <__sinit>
 8011f1a:	4b21      	ldr	r3, [pc, #132]	; (8011fa0 <__swbuf_r+0x98>)
 8011f1c:	429c      	cmp	r4, r3
 8011f1e:	d12b      	bne.n	8011f78 <__swbuf_r+0x70>
 8011f20:	686c      	ldr	r4, [r5, #4]
 8011f22:	69a3      	ldr	r3, [r4, #24]
 8011f24:	60a3      	str	r3, [r4, #8]
 8011f26:	89a3      	ldrh	r3, [r4, #12]
 8011f28:	071a      	lsls	r2, r3, #28
 8011f2a:	d52f      	bpl.n	8011f8c <__swbuf_r+0x84>
 8011f2c:	6923      	ldr	r3, [r4, #16]
 8011f2e:	b36b      	cbz	r3, 8011f8c <__swbuf_r+0x84>
 8011f30:	6923      	ldr	r3, [r4, #16]
 8011f32:	6820      	ldr	r0, [r4, #0]
 8011f34:	1ac0      	subs	r0, r0, r3
 8011f36:	6963      	ldr	r3, [r4, #20]
 8011f38:	b2f6      	uxtb	r6, r6
 8011f3a:	4283      	cmp	r3, r0
 8011f3c:	4637      	mov	r7, r6
 8011f3e:	dc04      	bgt.n	8011f4a <__swbuf_r+0x42>
 8011f40:	4621      	mov	r1, r4
 8011f42:	4628      	mov	r0, r5
 8011f44:	f000 f92e 	bl	80121a4 <_fflush_r>
 8011f48:	bb30      	cbnz	r0, 8011f98 <__swbuf_r+0x90>
 8011f4a:	68a3      	ldr	r3, [r4, #8]
 8011f4c:	3b01      	subs	r3, #1
 8011f4e:	60a3      	str	r3, [r4, #8]
 8011f50:	6823      	ldr	r3, [r4, #0]
 8011f52:	1c5a      	adds	r2, r3, #1
 8011f54:	6022      	str	r2, [r4, #0]
 8011f56:	701e      	strb	r6, [r3, #0]
 8011f58:	6963      	ldr	r3, [r4, #20]
 8011f5a:	3001      	adds	r0, #1
 8011f5c:	4283      	cmp	r3, r0
 8011f5e:	d004      	beq.n	8011f6a <__swbuf_r+0x62>
 8011f60:	89a3      	ldrh	r3, [r4, #12]
 8011f62:	07db      	lsls	r3, r3, #31
 8011f64:	d506      	bpl.n	8011f74 <__swbuf_r+0x6c>
 8011f66:	2e0a      	cmp	r6, #10
 8011f68:	d104      	bne.n	8011f74 <__swbuf_r+0x6c>
 8011f6a:	4621      	mov	r1, r4
 8011f6c:	4628      	mov	r0, r5
 8011f6e:	f000 f919 	bl	80121a4 <_fflush_r>
 8011f72:	b988      	cbnz	r0, 8011f98 <__swbuf_r+0x90>
 8011f74:	4638      	mov	r0, r7
 8011f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f78:	4b0a      	ldr	r3, [pc, #40]	; (8011fa4 <__swbuf_r+0x9c>)
 8011f7a:	429c      	cmp	r4, r3
 8011f7c:	d101      	bne.n	8011f82 <__swbuf_r+0x7a>
 8011f7e:	68ac      	ldr	r4, [r5, #8]
 8011f80:	e7cf      	b.n	8011f22 <__swbuf_r+0x1a>
 8011f82:	4b09      	ldr	r3, [pc, #36]	; (8011fa8 <__swbuf_r+0xa0>)
 8011f84:	429c      	cmp	r4, r3
 8011f86:	bf08      	it	eq
 8011f88:	68ec      	ldreq	r4, [r5, #12]
 8011f8a:	e7ca      	b.n	8011f22 <__swbuf_r+0x1a>
 8011f8c:	4621      	mov	r1, r4
 8011f8e:	4628      	mov	r0, r5
 8011f90:	f000 f80c 	bl	8011fac <__swsetup_r>
 8011f94:	2800      	cmp	r0, #0
 8011f96:	d0cb      	beq.n	8011f30 <__swbuf_r+0x28>
 8011f98:	f04f 37ff 	mov.w	r7, #4294967295
 8011f9c:	e7ea      	b.n	8011f74 <__swbuf_r+0x6c>
 8011f9e:	bf00      	nop
 8011fa0:	08012cf4 	.word	0x08012cf4
 8011fa4:	08012d14 	.word	0x08012d14
 8011fa8:	08012cd4 	.word	0x08012cd4

08011fac <__swsetup_r>:
 8011fac:	4b32      	ldr	r3, [pc, #200]	; (8012078 <__swsetup_r+0xcc>)
 8011fae:	b570      	push	{r4, r5, r6, lr}
 8011fb0:	681d      	ldr	r5, [r3, #0]
 8011fb2:	4606      	mov	r6, r0
 8011fb4:	460c      	mov	r4, r1
 8011fb6:	b125      	cbz	r5, 8011fc2 <__swsetup_r+0x16>
 8011fb8:	69ab      	ldr	r3, [r5, #24]
 8011fba:	b913      	cbnz	r3, 8011fc2 <__swsetup_r+0x16>
 8011fbc:	4628      	mov	r0, r5
 8011fbe:	f000 f985 	bl	80122cc <__sinit>
 8011fc2:	4b2e      	ldr	r3, [pc, #184]	; (801207c <__swsetup_r+0xd0>)
 8011fc4:	429c      	cmp	r4, r3
 8011fc6:	d10f      	bne.n	8011fe8 <__swsetup_r+0x3c>
 8011fc8:	686c      	ldr	r4, [r5, #4]
 8011fca:	89a3      	ldrh	r3, [r4, #12]
 8011fcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011fd0:	0719      	lsls	r1, r3, #28
 8011fd2:	d42c      	bmi.n	801202e <__swsetup_r+0x82>
 8011fd4:	06dd      	lsls	r5, r3, #27
 8011fd6:	d411      	bmi.n	8011ffc <__swsetup_r+0x50>
 8011fd8:	2309      	movs	r3, #9
 8011fda:	6033      	str	r3, [r6, #0]
 8011fdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011fe0:	81a3      	strh	r3, [r4, #12]
 8011fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8011fe6:	e03e      	b.n	8012066 <__swsetup_r+0xba>
 8011fe8:	4b25      	ldr	r3, [pc, #148]	; (8012080 <__swsetup_r+0xd4>)
 8011fea:	429c      	cmp	r4, r3
 8011fec:	d101      	bne.n	8011ff2 <__swsetup_r+0x46>
 8011fee:	68ac      	ldr	r4, [r5, #8]
 8011ff0:	e7eb      	b.n	8011fca <__swsetup_r+0x1e>
 8011ff2:	4b24      	ldr	r3, [pc, #144]	; (8012084 <__swsetup_r+0xd8>)
 8011ff4:	429c      	cmp	r4, r3
 8011ff6:	bf08      	it	eq
 8011ff8:	68ec      	ldreq	r4, [r5, #12]
 8011ffa:	e7e6      	b.n	8011fca <__swsetup_r+0x1e>
 8011ffc:	0758      	lsls	r0, r3, #29
 8011ffe:	d512      	bpl.n	8012026 <__swsetup_r+0x7a>
 8012000:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012002:	b141      	cbz	r1, 8012016 <__swsetup_r+0x6a>
 8012004:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012008:	4299      	cmp	r1, r3
 801200a:	d002      	beq.n	8012012 <__swsetup_r+0x66>
 801200c:	4630      	mov	r0, r6
 801200e:	f7ff fb27 	bl	8011660 <_free_r>
 8012012:	2300      	movs	r3, #0
 8012014:	6363      	str	r3, [r4, #52]	; 0x34
 8012016:	89a3      	ldrh	r3, [r4, #12]
 8012018:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801201c:	81a3      	strh	r3, [r4, #12]
 801201e:	2300      	movs	r3, #0
 8012020:	6063      	str	r3, [r4, #4]
 8012022:	6923      	ldr	r3, [r4, #16]
 8012024:	6023      	str	r3, [r4, #0]
 8012026:	89a3      	ldrh	r3, [r4, #12]
 8012028:	f043 0308 	orr.w	r3, r3, #8
 801202c:	81a3      	strh	r3, [r4, #12]
 801202e:	6923      	ldr	r3, [r4, #16]
 8012030:	b94b      	cbnz	r3, 8012046 <__swsetup_r+0x9a>
 8012032:	89a3      	ldrh	r3, [r4, #12]
 8012034:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801203c:	d003      	beq.n	8012046 <__swsetup_r+0x9a>
 801203e:	4621      	mov	r1, r4
 8012040:	4630      	mov	r0, r6
 8012042:	f000 fa09 	bl	8012458 <__smakebuf_r>
 8012046:	89a0      	ldrh	r0, [r4, #12]
 8012048:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801204c:	f010 0301 	ands.w	r3, r0, #1
 8012050:	d00a      	beq.n	8012068 <__swsetup_r+0xbc>
 8012052:	2300      	movs	r3, #0
 8012054:	60a3      	str	r3, [r4, #8]
 8012056:	6963      	ldr	r3, [r4, #20]
 8012058:	425b      	negs	r3, r3
 801205a:	61a3      	str	r3, [r4, #24]
 801205c:	6923      	ldr	r3, [r4, #16]
 801205e:	b943      	cbnz	r3, 8012072 <__swsetup_r+0xc6>
 8012060:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012064:	d1ba      	bne.n	8011fdc <__swsetup_r+0x30>
 8012066:	bd70      	pop	{r4, r5, r6, pc}
 8012068:	0781      	lsls	r1, r0, #30
 801206a:	bf58      	it	pl
 801206c:	6963      	ldrpl	r3, [r4, #20]
 801206e:	60a3      	str	r3, [r4, #8]
 8012070:	e7f4      	b.n	801205c <__swsetup_r+0xb0>
 8012072:	2000      	movs	r0, #0
 8012074:	e7f7      	b.n	8012066 <__swsetup_r+0xba>
 8012076:	bf00      	nop
 8012078:	20000114 	.word	0x20000114
 801207c:	08012cf4 	.word	0x08012cf4
 8012080:	08012d14 	.word	0x08012d14
 8012084:	08012cd4 	.word	0x08012cd4

08012088 <abort>:
 8012088:	b508      	push	{r3, lr}
 801208a:	2006      	movs	r0, #6
 801208c:	f000 fa54 	bl	8012538 <raise>
 8012090:	2001      	movs	r0, #1
 8012092:	f7f2 fb11 	bl	80046b8 <_exit>
	...

08012098 <__sflush_r>:
 8012098:	898a      	ldrh	r2, [r1, #12]
 801209a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801209e:	4605      	mov	r5, r0
 80120a0:	0710      	lsls	r0, r2, #28
 80120a2:	460c      	mov	r4, r1
 80120a4:	d458      	bmi.n	8012158 <__sflush_r+0xc0>
 80120a6:	684b      	ldr	r3, [r1, #4]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	dc05      	bgt.n	80120b8 <__sflush_r+0x20>
 80120ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	dc02      	bgt.n	80120b8 <__sflush_r+0x20>
 80120b2:	2000      	movs	r0, #0
 80120b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80120ba:	2e00      	cmp	r6, #0
 80120bc:	d0f9      	beq.n	80120b2 <__sflush_r+0x1a>
 80120be:	2300      	movs	r3, #0
 80120c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80120c4:	682f      	ldr	r7, [r5, #0]
 80120c6:	602b      	str	r3, [r5, #0]
 80120c8:	d032      	beq.n	8012130 <__sflush_r+0x98>
 80120ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80120cc:	89a3      	ldrh	r3, [r4, #12]
 80120ce:	075a      	lsls	r2, r3, #29
 80120d0:	d505      	bpl.n	80120de <__sflush_r+0x46>
 80120d2:	6863      	ldr	r3, [r4, #4]
 80120d4:	1ac0      	subs	r0, r0, r3
 80120d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80120d8:	b10b      	cbz	r3, 80120de <__sflush_r+0x46>
 80120da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80120dc:	1ac0      	subs	r0, r0, r3
 80120de:	2300      	movs	r3, #0
 80120e0:	4602      	mov	r2, r0
 80120e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80120e4:	6a21      	ldr	r1, [r4, #32]
 80120e6:	4628      	mov	r0, r5
 80120e8:	47b0      	blx	r6
 80120ea:	1c43      	adds	r3, r0, #1
 80120ec:	89a3      	ldrh	r3, [r4, #12]
 80120ee:	d106      	bne.n	80120fe <__sflush_r+0x66>
 80120f0:	6829      	ldr	r1, [r5, #0]
 80120f2:	291d      	cmp	r1, #29
 80120f4:	d82c      	bhi.n	8012150 <__sflush_r+0xb8>
 80120f6:	4a2a      	ldr	r2, [pc, #168]	; (80121a0 <__sflush_r+0x108>)
 80120f8:	40ca      	lsrs	r2, r1
 80120fa:	07d6      	lsls	r6, r2, #31
 80120fc:	d528      	bpl.n	8012150 <__sflush_r+0xb8>
 80120fe:	2200      	movs	r2, #0
 8012100:	6062      	str	r2, [r4, #4]
 8012102:	04d9      	lsls	r1, r3, #19
 8012104:	6922      	ldr	r2, [r4, #16]
 8012106:	6022      	str	r2, [r4, #0]
 8012108:	d504      	bpl.n	8012114 <__sflush_r+0x7c>
 801210a:	1c42      	adds	r2, r0, #1
 801210c:	d101      	bne.n	8012112 <__sflush_r+0x7a>
 801210e:	682b      	ldr	r3, [r5, #0]
 8012110:	b903      	cbnz	r3, 8012114 <__sflush_r+0x7c>
 8012112:	6560      	str	r0, [r4, #84]	; 0x54
 8012114:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012116:	602f      	str	r7, [r5, #0]
 8012118:	2900      	cmp	r1, #0
 801211a:	d0ca      	beq.n	80120b2 <__sflush_r+0x1a>
 801211c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012120:	4299      	cmp	r1, r3
 8012122:	d002      	beq.n	801212a <__sflush_r+0x92>
 8012124:	4628      	mov	r0, r5
 8012126:	f7ff fa9b 	bl	8011660 <_free_r>
 801212a:	2000      	movs	r0, #0
 801212c:	6360      	str	r0, [r4, #52]	; 0x34
 801212e:	e7c1      	b.n	80120b4 <__sflush_r+0x1c>
 8012130:	6a21      	ldr	r1, [r4, #32]
 8012132:	2301      	movs	r3, #1
 8012134:	4628      	mov	r0, r5
 8012136:	47b0      	blx	r6
 8012138:	1c41      	adds	r1, r0, #1
 801213a:	d1c7      	bne.n	80120cc <__sflush_r+0x34>
 801213c:	682b      	ldr	r3, [r5, #0]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d0c4      	beq.n	80120cc <__sflush_r+0x34>
 8012142:	2b1d      	cmp	r3, #29
 8012144:	d001      	beq.n	801214a <__sflush_r+0xb2>
 8012146:	2b16      	cmp	r3, #22
 8012148:	d101      	bne.n	801214e <__sflush_r+0xb6>
 801214a:	602f      	str	r7, [r5, #0]
 801214c:	e7b1      	b.n	80120b2 <__sflush_r+0x1a>
 801214e:	89a3      	ldrh	r3, [r4, #12]
 8012150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012154:	81a3      	strh	r3, [r4, #12]
 8012156:	e7ad      	b.n	80120b4 <__sflush_r+0x1c>
 8012158:	690f      	ldr	r7, [r1, #16]
 801215a:	2f00      	cmp	r7, #0
 801215c:	d0a9      	beq.n	80120b2 <__sflush_r+0x1a>
 801215e:	0793      	lsls	r3, r2, #30
 8012160:	680e      	ldr	r6, [r1, #0]
 8012162:	bf08      	it	eq
 8012164:	694b      	ldreq	r3, [r1, #20]
 8012166:	600f      	str	r7, [r1, #0]
 8012168:	bf18      	it	ne
 801216a:	2300      	movne	r3, #0
 801216c:	eba6 0807 	sub.w	r8, r6, r7
 8012170:	608b      	str	r3, [r1, #8]
 8012172:	f1b8 0f00 	cmp.w	r8, #0
 8012176:	dd9c      	ble.n	80120b2 <__sflush_r+0x1a>
 8012178:	6a21      	ldr	r1, [r4, #32]
 801217a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801217c:	4643      	mov	r3, r8
 801217e:	463a      	mov	r2, r7
 8012180:	4628      	mov	r0, r5
 8012182:	47b0      	blx	r6
 8012184:	2800      	cmp	r0, #0
 8012186:	dc06      	bgt.n	8012196 <__sflush_r+0xfe>
 8012188:	89a3      	ldrh	r3, [r4, #12]
 801218a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801218e:	81a3      	strh	r3, [r4, #12]
 8012190:	f04f 30ff 	mov.w	r0, #4294967295
 8012194:	e78e      	b.n	80120b4 <__sflush_r+0x1c>
 8012196:	4407      	add	r7, r0
 8012198:	eba8 0800 	sub.w	r8, r8, r0
 801219c:	e7e9      	b.n	8012172 <__sflush_r+0xda>
 801219e:	bf00      	nop
 80121a0:	20400001 	.word	0x20400001

080121a4 <_fflush_r>:
 80121a4:	b538      	push	{r3, r4, r5, lr}
 80121a6:	690b      	ldr	r3, [r1, #16]
 80121a8:	4605      	mov	r5, r0
 80121aa:	460c      	mov	r4, r1
 80121ac:	b913      	cbnz	r3, 80121b4 <_fflush_r+0x10>
 80121ae:	2500      	movs	r5, #0
 80121b0:	4628      	mov	r0, r5
 80121b2:	bd38      	pop	{r3, r4, r5, pc}
 80121b4:	b118      	cbz	r0, 80121be <_fflush_r+0x1a>
 80121b6:	6983      	ldr	r3, [r0, #24]
 80121b8:	b90b      	cbnz	r3, 80121be <_fflush_r+0x1a>
 80121ba:	f000 f887 	bl	80122cc <__sinit>
 80121be:	4b14      	ldr	r3, [pc, #80]	; (8012210 <_fflush_r+0x6c>)
 80121c0:	429c      	cmp	r4, r3
 80121c2:	d11b      	bne.n	80121fc <_fflush_r+0x58>
 80121c4:	686c      	ldr	r4, [r5, #4]
 80121c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d0ef      	beq.n	80121ae <_fflush_r+0xa>
 80121ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80121d0:	07d0      	lsls	r0, r2, #31
 80121d2:	d404      	bmi.n	80121de <_fflush_r+0x3a>
 80121d4:	0599      	lsls	r1, r3, #22
 80121d6:	d402      	bmi.n	80121de <_fflush_r+0x3a>
 80121d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80121da:	f000 f915 	bl	8012408 <__retarget_lock_acquire_recursive>
 80121de:	4628      	mov	r0, r5
 80121e0:	4621      	mov	r1, r4
 80121e2:	f7ff ff59 	bl	8012098 <__sflush_r>
 80121e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80121e8:	07da      	lsls	r2, r3, #31
 80121ea:	4605      	mov	r5, r0
 80121ec:	d4e0      	bmi.n	80121b0 <_fflush_r+0xc>
 80121ee:	89a3      	ldrh	r3, [r4, #12]
 80121f0:	059b      	lsls	r3, r3, #22
 80121f2:	d4dd      	bmi.n	80121b0 <_fflush_r+0xc>
 80121f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80121f6:	f000 f908 	bl	801240a <__retarget_lock_release_recursive>
 80121fa:	e7d9      	b.n	80121b0 <_fflush_r+0xc>
 80121fc:	4b05      	ldr	r3, [pc, #20]	; (8012214 <_fflush_r+0x70>)
 80121fe:	429c      	cmp	r4, r3
 8012200:	d101      	bne.n	8012206 <_fflush_r+0x62>
 8012202:	68ac      	ldr	r4, [r5, #8]
 8012204:	e7df      	b.n	80121c6 <_fflush_r+0x22>
 8012206:	4b04      	ldr	r3, [pc, #16]	; (8012218 <_fflush_r+0x74>)
 8012208:	429c      	cmp	r4, r3
 801220a:	bf08      	it	eq
 801220c:	68ec      	ldreq	r4, [r5, #12]
 801220e:	e7da      	b.n	80121c6 <_fflush_r+0x22>
 8012210:	08012cf4 	.word	0x08012cf4
 8012214:	08012d14 	.word	0x08012d14
 8012218:	08012cd4 	.word	0x08012cd4

0801221c <std>:
 801221c:	2300      	movs	r3, #0
 801221e:	b510      	push	{r4, lr}
 8012220:	4604      	mov	r4, r0
 8012222:	e9c0 3300 	strd	r3, r3, [r0]
 8012226:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801222a:	6083      	str	r3, [r0, #8]
 801222c:	8181      	strh	r1, [r0, #12]
 801222e:	6643      	str	r3, [r0, #100]	; 0x64
 8012230:	81c2      	strh	r2, [r0, #14]
 8012232:	6183      	str	r3, [r0, #24]
 8012234:	4619      	mov	r1, r3
 8012236:	2208      	movs	r2, #8
 8012238:	305c      	adds	r0, #92	; 0x5c
 801223a:	f7fb fdcf 	bl	800dddc <memset>
 801223e:	4b05      	ldr	r3, [pc, #20]	; (8012254 <std+0x38>)
 8012240:	6263      	str	r3, [r4, #36]	; 0x24
 8012242:	4b05      	ldr	r3, [pc, #20]	; (8012258 <std+0x3c>)
 8012244:	62a3      	str	r3, [r4, #40]	; 0x28
 8012246:	4b05      	ldr	r3, [pc, #20]	; (801225c <std+0x40>)
 8012248:	62e3      	str	r3, [r4, #44]	; 0x2c
 801224a:	4b05      	ldr	r3, [pc, #20]	; (8012260 <std+0x44>)
 801224c:	6224      	str	r4, [r4, #32]
 801224e:	6323      	str	r3, [r4, #48]	; 0x30
 8012250:	bd10      	pop	{r4, pc}
 8012252:	bf00      	nop
 8012254:	08012571 	.word	0x08012571
 8012258:	08012593 	.word	0x08012593
 801225c:	080125cb 	.word	0x080125cb
 8012260:	080125ef 	.word	0x080125ef

08012264 <_cleanup_r>:
 8012264:	4901      	ldr	r1, [pc, #4]	; (801226c <_cleanup_r+0x8>)
 8012266:	f000 b8af 	b.w	80123c8 <_fwalk_reent>
 801226a:	bf00      	nop
 801226c:	080121a5 	.word	0x080121a5

08012270 <__sfmoreglue>:
 8012270:	b570      	push	{r4, r5, r6, lr}
 8012272:	2268      	movs	r2, #104	; 0x68
 8012274:	1e4d      	subs	r5, r1, #1
 8012276:	4355      	muls	r5, r2
 8012278:	460e      	mov	r6, r1
 801227a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801227e:	f7ff fa5b 	bl	8011738 <_malloc_r>
 8012282:	4604      	mov	r4, r0
 8012284:	b140      	cbz	r0, 8012298 <__sfmoreglue+0x28>
 8012286:	2100      	movs	r1, #0
 8012288:	e9c0 1600 	strd	r1, r6, [r0]
 801228c:	300c      	adds	r0, #12
 801228e:	60a0      	str	r0, [r4, #8]
 8012290:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012294:	f7fb fda2 	bl	800dddc <memset>
 8012298:	4620      	mov	r0, r4
 801229a:	bd70      	pop	{r4, r5, r6, pc}

0801229c <__sfp_lock_acquire>:
 801229c:	4801      	ldr	r0, [pc, #4]	; (80122a4 <__sfp_lock_acquire+0x8>)
 801229e:	f000 b8b3 	b.w	8012408 <__retarget_lock_acquire_recursive>
 80122a2:	bf00      	nop
 80122a4:	2000573d 	.word	0x2000573d

080122a8 <__sfp_lock_release>:
 80122a8:	4801      	ldr	r0, [pc, #4]	; (80122b0 <__sfp_lock_release+0x8>)
 80122aa:	f000 b8ae 	b.w	801240a <__retarget_lock_release_recursive>
 80122ae:	bf00      	nop
 80122b0:	2000573d 	.word	0x2000573d

080122b4 <__sinit_lock_acquire>:
 80122b4:	4801      	ldr	r0, [pc, #4]	; (80122bc <__sinit_lock_acquire+0x8>)
 80122b6:	f000 b8a7 	b.w	8012408 <__retarget_lock_acquire_recursive>
 80122ba:	bf00      	nop
 80122bc:	2000573e 	.word	0x2000573e

080122c0 <__sinit_lock_release>:
 80122c0:	4801      	ldr	r0, [pc, #4]	; (80122c8 <__sinit_lock_release+0x8>)
 80122c2:	f000 b8a2 	b.w	801240a <__retarget_lock_release_recursive>
 80122c6:	bf00      	nop
 80122c8:	2000573e 	.word	0x2000573e

080122cc <__sinit>:
 80122cc:	b510      	push	{r4, lr}
 80122ce:	4604      	mov	r4, r0
 80122d0:	f7ff fff0 	bl	80122b4 <__sinit_lock_acquire>
 80122d4:	69a3      	ldr	r3, [r4, #24]
 80122d6:	b11b      	cbz	r3, 80122e0 <__sinit+0x14>
 80122d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80122dc:	f7ff bff0 	b.w	80122c0 <__sinit_lock_release>
 80122e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80122e4:	6523      	str	r3, [r4, #80]	; 0x50
 80122e6:	4b13      	ldr	r3, [pc, #76]	; (8012334 <__sinit+0x68>)
 80122e8:	4a13      	ldr	r2, [pc, #76]	; (8012338 <__sinit+0x6c>)
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80122ee:	42a3      	cmp	r3, r4
 80122f0:	bf04      	itt	eq
 80122f2:	2301      	moveq	r3, #1
 80122f4:	61a3      	streq	r3, [r4, #24]
 80122f6:	4620      	mov	r0, r4
 80122f8:	f000 f820 	bl	801233c <__sfp>
 80122fc:	6060      	str	r0, [r4, #4]
 80122fe:	4620      	mov	r0, r4
 8012300:	f000 f81c 	bl	801233c <__sfp>
 8012304:	60a0      	str	r0, [r4, #8]
 8012306:	4620      	mov	r0, r4
 8012308:	f000 f818 	bl	801233c <__sfp>
 801230c:	2200      	movs	r2, #0
 801230e:	60e0      	str	r0, [r4, #12]
 8012310:	2104      	movs	r1, #4
 8012312:	6860      	ldr	r0, [r4, #4]
 8012314:	f7ff ff82 	bl	801221c <std>
 8012318:	68a0      	ldr	r0, [r4, #8]
 801231a:	2201      	movs	r2, #1
 801231c:	2109      	movs	r1, #9
 801231e:	f7ff ff7d 	bl	801221c <std>
 8012322:	68e0      	ldr	r0, [r4, #12]
 8012324:	2202      	movs	r2, #2
 8012326:	2112      	movs	r1, #18
 8012328:	f7ff ff78 	bl	801221c <std>
 801232c:	2301      	movs	r3, #1
 801232e:	61a3      	str	r3, [r4, #24]
 8012330:	e7d2      	b.n	80122d8 <__sinit+0xc>
 8012332:	bf00      	nop
 8012334:	0801288c 	.word	0x0801288c
 8012338:	08012265 	.word	0x08012265

0801233c <__sfp>:
 801233c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801233e:	4607      	mov	r7, r0
 8012340:	f7ff ffac 	bl	801229c <__sfp_lock_acquire>
 8012344:	4b1e      	ldr	r3, [pc, #120]	; (80123c0 <__sfp+0x84>)
 8012346:	681e      	ldr	r6, [r3, #0]
 8012348:	69b3      	ldr	r3, [r6, #24]
 801234a:	b913      	cbnz	r3, 8012352 <__sfp+0x16>
 801234c:	4630      	mov	r0, r6
 801234e:	f7ff ffbd 	bl	80122cc <__sinit>
 8012352:	3648      	adds	r6, #72	; 0x48
 8012354:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012358:	3b01      	subs	r3, #1
 801235a:	d503      	bpl.n	8012364 <__sfp+0x28>
 801235c:	6833      	ldr	r3, [r6, #0]
 801235e:	b30b      	cbz	r3, 80123a4 <__sfp+0x68>
 8012360:	6836      	ldr	r6, [r6, #0]
 8012362:	e7f7      	b.n	8012354 <__sfp+0x18>
 8012364:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012368:	b9d5      	cbnz	r5, 80123a0 <__sfp+0x64>
 801236a:	4b16      	ldr	r3, [pc, #88]	; (80123c4 <__sfp+0x88>)
 801236c:	60e3      	str	r3, [r4, #12]
 801236e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012372:	6665      	str	r5, [r4, #100]	; 0x64
 8012374:	f000 f847 	bl	8012406 <__retarget_lock_init_recursive>
 8012378:	f7ff ff96 	bl	80122a8 <__sfp_lock_release>
 801237c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012380:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012384:	6025      	str	r5, [r4, #0]
 8012386:	61a5      	str	r5, [r4, #24]
 8012388:	2208      	movs	r2, #8
 801238a:	4629      	mov	r1, r5
 801238c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012390:	f7fb fd24 	bl	800dddc <memset>
 8012394:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012398:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801239c:	4620      	mov	r0, r4
 801239e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123a0:	3468      	adds	r4, #104	; 0x68
 80123a2:	e7d9      	b.n	8012358 <__sfp+0x1c>
 80123a4:	2104      	movs	r1, #4
 80123a6:	4638      	mov	r0, r7
 80123a8:	f7ff ff62 	bl	8012270 <__sfmoreglue>
 80123ac:	4604      	mov	r4, r0
 80123ae:	6030      	str	r0, [r6, #0]
 80123b0:	2800      	cmp	r0, #0
 80123b2:	d1d5      	bne.n	8012360 <__sfp+0x24>
 80123b4:	f7ff ff78 	bl	80122a8 <__sfp_lock_release>
 80123b8:	230c      	movs	r3, #12
 80123ba:	603b      	str	r3, [r7, #0]
 80123bc:	e7ee      	b.n	801239c <__sfp+0x60>
 80123be:	bf00      	nop
 80123c0:	0801288c 	.word	0x0801288c
 80123c4:	ffff0001 	.word	0xffff0001

080123c8 <_fwalk_reent>:
 80123c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123cc:	4606      	mov	r6, r0
 80123ce:	4688      	mov	r8, r1
 80123d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80123d4:	2700      	movs	r7, #0
 80123d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80123da:	f1b9 0901 	subs.w	r9, r9, #1
 80123de:	d505      	bpl.n	80123ec <_fwalk_reent+0x24>
 80123e0:	6824      	ldr	r4, [r4, #0]
 80123e2:	2c00      	cmp	r4, #0
 80123e4:	d1f7      	bne.n	80123d6 <_fwalk_reent+0xe>
 80123e6:	4638      	mov	r0, r7
 80123e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123ec:	89ab      	ldrh	r3, [r5, #12]
 80123ee:	2b01      	cmp	r3, #1
 80123f0:	d907      	bls.n	8012402 <_fwalk_reent+0x3a>
 80123f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80123f6:	3301      	adds	r3, #1
 80123f8:	d003      	beq.n	8012402 <_fwalk_reent+0x3a>
 80123fa:	4629      	mov	r1, r5
 80123fc:	4630      	mov	r0, r6
 80123fe:	47c0      	blx	r8
 8012400:	4307      	orrs	r7, r0
 8012402:	3568      	adds	r5, #104	; 0x68
 8012404:	e7e9      	b.n	80123da <_fwalk_reent+0x12>

08012406 <__retarget_lock_init_recursive>:
 8012406:	4770      	bx	lr

08012408 <__retarget_lock_acquire_recursive>:
 8012408:	4770      	bx	lr

0801240a <__retarget_lock_release_recursive>:
 801240a:	4770      	bx	lr

0801240c <__swhatbuf_r>:
 801240c:	b570      	push	{r4, r5, r6, lr}
 801240e:	460e      	mov	r6, r1
 8012410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012414:	2900      	cmp	r1, #0
 8012416:	b096      	sub	sp, #88	; 0x58
 8012418:	4614      	mov	r4, r2
 801241a:	461d      	mov	r5, r3
 801241c:	da08      	bge.n	8012430 <__swhatbuf_r+0x24>
 801241e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012422:	2200      	movs	r2, #0
 8012424:	602a      	str	r2, [r5, #0]
 8012426:	061a      	lsls	r2, r3, #24
 8012428:	d410      	bmi.n	801244c <__swhatbuf_r+0x40>
 801242a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801242e:	e00e      	b.n	801244e <__swhatbuf_r+0x42>
 8012430:	466a      	mov	r2, sp
 8012432:	f000 f903 	bl	801263c <_fstat_r>
 8012436:	2800      	cmp	r0, #0
 8012438:	dbf1      	blt.n	801241e <__swhatbuf_r+0x12>
 801243a:	9a01      	ldr	r2, [sp, #4]
 801243c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012440:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012444:	425a      	negs	r2, r3
 8012446:	415a      	adcs	r2, r3
 8012448:	602a      	str	r2, [r5, #0]
 801244a:	e7ee      	b.n	801242a <__swhatbuf_r+0x1e>
 801244c:	2340      	movs	r3, #64	; 0x40
 801244e:	2000      	movs	r0, #0
 8012450:	6023      	str	r3, [r4, #0]
 8012452:	b016      	add	sp, #88	; 0x58
 8012454:	bd70      	pop	{r4, r5, r6, pc}
	...

08012458 <__smakebuf_r>:
 8012458:	898b      	ldrh	r3, [r1, #12]
 801245a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801245c:	079d      	lsls	r5, r3, #30
 801245e:	4606      	mov	r6, r0
 8012460:	460c      	mov	r4, r1
 8012462:	d507      	bpl.n	8012474 <__smakebuf_r+0x1c>
 8012464:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012468:	6023      	str	r3, [r4, #0]
 801246a:	6123      	str	r3, [r4, #16]
 801246c:	2301      	movs	r3, #1
 801246e:	6163      	str	r3, [r4, #20]
 8012470:	b002      	add	sp, #8
 8012472:	bd70      	pop	{r4, r5, r6, pc}
 8012474:	ab01      	add	r3, sp, #4
 8012476:	466a      	mov	r2, sp
 8012478:	f7ff ffc8 	bl	801240c <__swhatbuf_r>
 801247c:	9900      	ldr	r1, [sp, #0]
 801247e:	4605      	mov	r5, r0
 8012480:	4630      	mov	r0, r6
 8012482:	f7ff f959 	bl	8011738 <_malloc_r>
 8012486:	b948      	cbnz	r0, 801249c <__smakebuf_r+0x44>
 8012488:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801248c:	059a      	lsls	r2, r3, #22
 801248e:	d4ef      	bmi.n	8012470 <__smakebuf_r+0x18>
 8012490:	f023 0303 	bic.w	r3, r3, #3
 8012494:	f043 0302 	orr.w	r3, r3, #2
 8012498:	81a3      	strh	r3, [r4, #12]
 801249a:	e7e3      	b.n	8012464 <__smakebuf_r+0xc>
 801249c:	4b0d      	ldr	r3, [pc, #52]	; (80124d4 <__smakebuf_r+0x7c>)
 801249e:	62b3      	str	r3, [r6, #40]	; 0x28
 80124a0:	89a3      	ldrh	r3, [r4, #12]
 80124a2:	6020      	str	r0, [r4, #0]
 80124a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80124a8:	81a3      	strh	r3, [r4, #12]
 80124aa:	9b00      	ldr	r3, [sp, #0]
 80124ac:	6163      	str	r3, [r4, #20]
 80124ae:	9b01      	ldr	r3, [sp, #4]
 80124b0:	6120      	str	r0, [r4, #16]
 80124b2:	b15b      	cbz	r3, 80124cc <__smakebuf_r+0x74>
 80124b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80124b8:	4630      	mov	r0, r6
 80124ba:	f000 f8d1 	bl	8012660 <_isatty_r>
 80124be:	b128      	cbz	r0, 80124cc <__smakebuf_r+0x74>
 80124c0:	89a3      	ldrh	r3, [r4, #12]
 80124c2:	f023 0303 	bic.w	r3, r3, #3
 80124c6:	f043 0301 	orr.w	r3, r3, #1
 80124ca:	81a3      	strh	r3, [r4, #12]
 80124cc:	89a0      	ldrh	r0, [r4, #12]
 80124ce:	4305      	orrs	r5, r0
 80124d0:	81a5      	strh	r5, [r4, #12]
 80124d2:	e7cd      	b.n	8012470 <__smakebuf_r+0x18>
 80124d4:	08012265 	.word	0x08012265

080124d8 <_malloc_usable_size_r>:
 80124d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80124dc:	1f18      	subs	r0, r3, #4
 80124de:	2b00      	cmp	r3, #0
 80124e0:	bfbc      	itt	lt
 80124e2:	580b      	ldrlt	r3, [r1, r0]
 80124e4:	18c0      	addlt	r0, r0, r3
 80124e6:	4770      	bx	lr

080124e8 <_raise_r>:
 80124e8:	291f      	cmp	r1, #31
 80124ea:	b538      	push	{r3, r4, r5, lr}
 80124ec:	4604      	mov	r4, r0
 80124ee:	460d      	mov	r5, r1
 80124f0:	d904      	bls.n	80124fc <_raise_r+0x14>
 80124f2:	2316      	movs	r3, #22
 80124f4:	6003      	str	r3, [r0, #0]
 80124f6:	f04f 30ff 	mov.w	r0, #4294967295
 80124fa:	bd38      	pop	{r3, r4, r5, pc}
 80124fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80124fe:	b112      	cbz	r2, 8012506 <_raise_r+0x1e>
 8012500:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012504:	b94b      	cbnz	r3, 801251a <_raise_r+0x32>
 8012506:	4620      	mov	r0, r4
 8012508:	f000 f830 	bl	801256c <_getpid_r>
 801250c:	462a      	mov	r2, r5
 801250e:	4601      	mov	r1, r0
 8012510:	4620      	mov	r0, r4
 8012512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012516:	f000 b817 	b.w	8012548 <_kill_r>
 801251a:	2b01      	cmp	r3, #1
 801251c:	d00a      	beq.n	8012534 <_raise_r+0x4c>
 801251e:	1c59      	adds	r1, r3, #1
 8012520:	d103      	bne.n	801252a <_raise_r+0x42>
 8012522:	2316      	movs	r3, #22
 8012524:	6003      	str	r3, [r0, #0]
 8012526:	2001      	movs	r0, #1
 8012528:	e7e7      	b.n	80124fa <_raise_r+0x12>
 801252a:	2400      	movs	r4, #0
 801252c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012530:	4628      	mov	r0, r5
 8012532:	4798      	blx	r3
 8012534:	2000      	movs	r0, #0
 8012536:	e7e0      	b.n	80124fa <_raise_r+0x12>

08012538 <raise>:
 8012538:	4b02      	ldr	r3, [pc, #8]	; (8012544 <raise+0xc>)
 801253a:	4601      	mov	r1, r0
 801253c:	6818      	ldr	r0, [r3, #0]
 801253e:	f7ff bfd3 	b.w	80124e8 <_raise_r>
 8012542:	bf00      	nop
 8012544:	20000114 	.word	0x20000114

08012548 <_kill_r>:
 8012548:	b538      	push	{r3, r4, r5, lr}
 801254a:	4d07      	ldr	r5, [pc, #28]	; (8012568 <_kill_r+0x20>)
 801254c:	2300      	movs	r3, #0
 801254e:	4604      	mov	r4, r0
 8012550:	4608      	mov	r0, r1
 8012552:	4611      	mov	r1, r2
 8012554:	602b      	str	r3, [r5, #0]
 8012556:	f7f2 f89f 	bl	8004698 <_kill>
 801255a:	1c43      	adds	r3, r0, #1
 801255c:	d102      	bne.n	8012564 <_kill_r+0x1c>
 801255e:	682b      	ldr	r3, [r5, #0]
 8012560:	b103      	cbz	r3, 8012564 <_kill_r+0x1c>
 8012562:	6023      	str	r3, [r4, #0]
 8012564:	bd38      	pop	{r3, r4, r5, pc}
 8012566:	bf00      	nop
 8012568:	20005738 	.word	0x20005738

0801256c <_getpid_r>:
 801256c:	f7f2 b88c 	b.w	8004688 <_getpid>

08012570 <__sread>:
 8012570:	b510      	push	{r4, lr}
 8012572:	460c      	mov	r4, r1
 8012574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012578:	f000 f894 	bl	80126a4 <_read_r>
 801257c:	2800      	cmp	r0, #0
 801257e:	bfab      	itete	ge
 8012580:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012582:	89a3      	ldrhlt	r3, [r4, #12]
 8012584:	181b      	addge	r3, r3, r0
 8012586:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801258a:	bfac      	ite	ge
 801258c:	6563      	strge	r3, [r4, #84]	; 0x54
 801258e:	81a3      	strhlt	r3, [r4, #12]
 8012590:	bd10      	pop	{r4, pc}

08012592 <__swrite>:
 8012592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012596:	461f      	mov	r7, r3
 8012598:	898b      	ldrh	r3, [r1, #12]
 801259a:	05db      	lsls	r3, r3, #23
 801259c:	4605      	mov	r5, r0
 801259e:	460c      	mov	r4, r1
 80125a0:	4616      	mov	r6, r2
 80125a2:	d505      	bpl.n	80125b0 <__swrite+0x1e>
 80125a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125a8:	2302      	movs	r3, #2
 80125aa:	2200      	movs	r2, #0
 80125ac:	f000 f868 	bl	8012680 <_lseek_r>
 80125b0:	89a3      	ldrh	r3, [r4, #12]
 80125b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80125b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80125ba:	81a3      	strh	r3, [r4, #12]
 80125bc:	4632      	mov	r2, r6
 80125be:	463b      	mov	r3, r7
 80125c0:	4628      	mov	r0, r5
 80125c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80125c6:	f000 b817 	b.w	80125f8 <_write_r>

080125ca <__sseek>:
 80125ca:	b510      	push	{r4, lr}
 80125cc:	460c      	mov	r4, r1
 80125ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125d2:	f000 f855 	bl	8012680 <_lseek_r>
 80125d6:	1c43      	adds	r3, r0, #1
 80125d8:	89a3      	ldrh	r3, [r4, #12]
 80125da:	bf15      	itete	ne
 80125dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80125de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80125e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80125e6:	81a3      	strheq	r3, [r4, #12]
 80125e8:	bf18      	it	ne
 80125ea:	81a3      	strhne	r3, [r4, #12]
 80125ec:	bd10      	pop	{r4, pc}

080125ee <__sclose>:
 80125ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125f2:	f000 b813 	b.w	801261c <_close_r>
	...

080125f8 <_write_r>:
 80125f8:	b538      	push	{r3, r4, r5, lr}
 80125fa:	4d07      	ldr	r5, [pc, #28]	; (8012618 <_write_r+0x20>)
 80125fc:	4604      	mov	r4, r0
 80125fe:	4608      	mov	r0, r1
 8012600:	4611      	mov	r1, r2
 8012602:	2200      	movs	r2, #0
 8012604:	602a      	str	r2, [r5, #0]
 8012606:	461a      	mov	r2, r3
 8012608:	f7f2 f87d 	bl	8004706 <_write>
 801260c:	1c43      	adds	r3, r0, #1
 801260e:	d102      	bne.n	8012616 <_write_r+0x1e>
 8012610:	682b      	ldr	r3, [r5, #0]
 8012612:	b103      	cbz	r3, 8012616 <_write_r+0x1e>
 8012614:	6023      	str	r3, [r4, #0]
 8012616:	bd38      	pop	{r3, r4, r5, pc}
 8012618:	20005738 	.word	0x20005738

0801261c <_close_r>:
 801261c:	b538      	push	{r3, r4, r5, lr}
 801261e:	4d06      	ldr	r5, [pc, #24]	; (8012638 <_close_r+0x1c>)
 8012620:	2300      	movs	r3, #0
 8012622:	4604      	mov	r4, r0
 8012624:	4608      	mov	r0, r1
 8012626:	602b      	str	r3, [r5, #0]
 8012628:	f7f2 f889 	bl	800473e <_close>
 801262c:	1c43      	adds	r3, r0, #1
 801262e:	d102      	bne.n	8012636 <_close_r+0x1a>
 8012630:	682b      	ldr	r3, [r5, #0]
 8012632:	b103      	cbz	r3, 8012636 <_close_r+0x1a>
 8012634:	6023      	str	r3, [r4, #0]
 8012636:	bd38      	pop	{r3, r4, r5, pc}
 8012638:	20005738 	.word	0x20005738

0801263c <_fstat_r>:
 801263c:	b538      	push	{r3, r4, r5, lr}
 801263e:	4d07      	ldr	r5, [pc, #28]	; (801265c <_fstat_r+0x20>)
 8012640:	2300      	movs	r3, #0
 8012642:	4604      	mov	r4, r0
 8012644:	4608      	mov	r0, r1
 8012646:	4611      	mov	r1, r2
 8012648:	602b      	str	r3, [r5, #0]
 801264a:	f7f2 f884 	bl	8004756 <_fstat>
 801264e:	1c43      	adds	r3, r0, #1
 8012650:	d102      	bne.n	8012658 <_fstat_r+0x1c>
 8012652:	682b      	ldr	r3, [r5, #0]
 8012654:	b103      	cbz	r3, 8012658 <_fstat_r+0x1c>
 8012656:	6023      	str	r3, [r4, #0]
 8012658:	bd38      	pop	{r3, r4, r5, pc}
 801265a:	bf00      	nop
 801265c:	20005738 	.word	0x20005738

08012660 <_isatty_r>:
 8012660:	b538      	push	{r3, r4, r5, lr}
 8012662:	4d06      	ldr	r5, [pc, #24]	; (801267c <_isatty_r+0x1c>)
 8012664:	2300      	movs	r3, #0
 8012666:	4604      	mov	r4, r0
 8012668:	4608      	mov	r0, r1
 801266a:	602b      	str	r3, [r5, #0]
 801266c:	f7f2 f883 	bl	8004776 <_isatty>
 8012670:	1c43      	adds	r3, r0, #1
 8012672:	d102      	bne.n	801267a <_isatty_r+0x1a>
 8012674:	682b      	ldr	r3, [r5, #0]
 8012676:	b103      	cbz	r3, 801267a <_isatty_r+0x1a>
 8012678:	6023      	str	r3, [r4, #0]
 801267a:	bd38      	pop	{r3, r4, r5, pc}
 801267c:	20005738 	.word	0x20005738

08012680 <_lseek_r>:
 8012680:	b538      	push	{r3, r4, r5, lr}
 8012682:	4d07      	ldr	r5, [pc, #28]	; (80126a0 <_lseek_r+0x20>)
 8012684:	4604      	mov	r4, r0
 8012686:	4608      	mov	r0, r1
 8012688:	4611      	mov	r1, r2
 801268a:	2200      	movs	r2, #0
 801268c:	602a      	str	r2, [r5, #0]
 801268e:	461a      	mov	r2, r3
 8012690:	f7f2 f87c 	bl	800478c <_lseek>
 8012694:	1c43      	adds	r3, r0, #1
 8012696:	d102      	bne.n	801269e <_lseek_r+0x1e>
 8012698:	682b      	ldr	r3, [r5, #0]
 801269a:	b103      	cbz	r3, 801269e <_lseek_r+0x1e>
 801269c:	6023      	str	r3, [r4, #0]
 801269e:	bd38      	pop	{r3, r4, r5, pc}
 80126a0:	20005738 	.word	0x20005738

080126a4 <_read_r>:
 80126a4:	b538      	push	{r3, r4, r5, lr}
 80126a6:	4d07      	ldr	r5, [pc, #28]	; (80126c4 <_read_r+0x20>)
 80126a8:	4604      	mov	r4, r0
 80126aa:	4608      	mov	r0, r1
 80126ac:	4611      	mov	r1, r2
 80126ae:	2200      	movs	r2, #0
 80126b0:	602a      	str	r2, [r5, #0]
 80126b2:	461a      	mov	r2, r3
 80126b4:	f7f2 f80a 	bl	80046cc <_read>
 80126b8:	1c43      	adds	r3, r0, #1
 80126ba:	d102      	bne.n	80126c2 <_read_r+0x1e>
 80126bc:	682b      	ldr	r3, [r5, #0]
 80126be:	b103      	cbz	r3, 80126c2 <_read_r+0x1e>
 80126c0:	6023      	str	r3, [r4, #0]
 80126c2:	bd38      	pop	{r3, r4, r5, pc}
 80126c4:	20005738 	.word	0x20005738

080126c8 <_init>:
 80126c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126ca:	bf00      	nop
 80126cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80126ce:	bc08      	pop	{r3}
 80126d0:	469e      	mov	lr, r3
 80126d2:	4770      	bx	lr

080126d4 <_fini>:
 80126d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126d6:	bf00      	nop
 80126d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80126da:	bc08      	pop	{r3}
 80126dc:	469e      	mov	lr, r3
 80126de:	4770      	bx	lr
