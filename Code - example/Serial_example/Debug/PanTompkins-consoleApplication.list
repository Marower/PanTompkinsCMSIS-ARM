
PanTompkins-consoleApplication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c614  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000063c  0800c758  0800c758  0001c758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800cd94  0800cd94  0001cd94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800cd98  0800cd98  0001cd98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000002dc  20000004  0800cd9c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000054b4  200002e0  0800d078  000202e0  2**3
                  ALLOC
  7 ._user_heap_stack 00000604  20005794  0800d078  00025794  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000202e0  2**0
                  CONTENTS, READONLY
  9 .debug_info   00043cca  00000000  00000000  00020310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000650d  00000000  00000000  00063fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0005b107  00000000  00000000  0006a4e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b30  00000000  00000000  000c55f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00007830  00000000  00000000  000c7120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00027913  00000000  00000000  000ce950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00044cb5  00000000  00000000  000f6263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e8474  00000000  00000000  0013af18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0022338c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007188  00000000  00000000  002233dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002e0 	.word	0x200002e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c73c 	.word	0x0800c73c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002e4 	.word	0x200002e4
 800017c:	0800c73c 	.word	0x0800c73c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_d2lz>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460d      	mov	r5, r1
 8000c42:	f7ff ff23 	bl	8000a8c <__aeabi_dcmplt>
 8000c46:	b928      	cbnz	r0, 8000c54 <__aeabi_d2lz+0x1c>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c50:	f000 b80a 	b.w	8000c68 <__aeabi_d2ulz>
 8000c54:	4620      	mov	r0, r4
 8000c56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5a:	f000 f805 	bl	8000c68 <__aeabi_d2ulz>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2ulz>:
 8000c68:	b5d0      	push	{r4, r6, r7, lr}
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__aeabi_d2ulz+0x34>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	f7ff fc99 	bl	80005a8 <__aeabi_dmul>
 8000c76:	f7ff ff6f 	bl	8000b58 <__aeabi_d2uiz>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	f7ff fc1a 	bl	80004b4 <__aeabi_ui2d>
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <__aeabi_d2ulz+0x38>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f7ff fc90 	bl	80005a8 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	4639      	mov	r1, r7
 8000c90:	f7ff fad2 	bl	8000238 <__aeabi_dsub>
 8000c94:	f7ff ff60 	bl	8000b58 <__aeabi_d2uiz>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c9c:	3df00000 	.word	0x3df00000
 8000ca0:	41f00000 	.word	0x41f00000

08000ca4 <PT_init>:
	and filter Buffers.

 *******************************************************************************/

void PT_init( void )
{
 8000ca4:	b570      	push	{r4, r5, r6, lr}
	/**************************************************
	Initialize Pan_Tompkins structure.
	**************************************************/

	memset(&PT_data, 0, sizeof(PT_data));
 8000ca6:	4d35      	ldr	r5, [pc, #212]	; (8000d7c <PT_init+0xd8>)
	}

	/**************************************************
	Initialize all static variables 
	**************************************************/
	Prev_val = Prev_Prev_val = 0;									// Place holders for peak detector in Integrated Sig
 8000ca8:	4e35      	ldr	r6, [pc, #212]	; (8000d80 <PT_init+0xdc>)
		PT_dptr->LP_buf[idex]		= 0;							//  LP filter buffer
 8000caa:	2400      	movs	r4, #0
	memset(&PT_data, 0, sizeof(PT_data));
 8000cac:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8000cb0:	4621      	mov	r1, r4
 8000cb2:	4628      	mov	r0, r5
 8000cb4:	f007 f8e6 	bl	8007e84 <memset>
	PT_dptr->Recent_RR_M = PT_dptr->RR_M =  PT1000MS;
 8000cb8:	4b32      	ldr	r3, [pc, #200]	; (8000d84 <PT_init+0xe0>)
 8000cba:	626b      	str	r3, [r5, #36]	; 0x24
 8000cbc:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8000cc0:	4b31      	ldr	r3, [pc, #196]	; (8000d88 <PT_init+0xe4>)
 8000cc2:	8128      	strh	r0, [r5, #8]
		PT_dptr->HP_buf[idex]		= 0;							//  HP filter buffer
 8000cc4:	2240      	movs	r2, #64	; 0x40
 8000cc6:	4621      	mov	r1, r4
 8000cc8:	f105 0046 	add.w	r0, r5, #70	; 0x46
	PT_dptr->Recent_RR_M = PT_dptr->RR_M =  PT1000MS;
 8000ccc:	62ab      	str	r3, [r5, #40]	; 0x28
		PT_dptr->LP_buf[idex]		= 0;							//  LP filter buffer
 8000cce:	f8c5 402e 	str.w	r4, [r5, #46]	; 0x2e
 8000cd2:	f8c5 4032 	str.w	r4, [r5, #50]	; 0x32
 8000cd6:	f8c5 4036 	str.w	r4, [r5, #54]	; 0x36
 8000cda:	f8c5 403a 	str.w	r4, [r5, #58]	; 0x3a
 8000cde:	f8c5 403e 	str.w	r4, [r5, #62]	; 0x3e
 8000ce2:	f8c5 4042 	str.w	r4, [r5, #66]	; 0x42
		PT_dptr->HP_buf[idex]		= 0;							//  HP filter buffer
 8000ce6:	f007 f8cd 	bl	8007e84 <memset>
		PT_dptr->MVA_buf[idex]		= 0;							//  MVA filter buffer
 8000cea:	226c      	movs	r2, #108	; 0x6c
 8000cec:	4621      	mov	r1, r4
 8000cee:	f105 008e 	add.w	r0, r5, #142	; 0x8e
 8000cf2:	f007 f8c7 	bl	8007e84 <memset>
	Prev_val = Prev_Prev_val = 0;									// Place holders for peak detector in Integrated Sig
 8000cf6:	4a25      	ldr	r2, [pc, #148]	; (8000d8c <PT_init+0xe8>)
	Prev_valBP = Prev_Prev_valBP = Best_PeakBP = 0;					// Place holders for peak detector in BP signal
 8000cf8:	4925      	ldr	r1, [pc, #148]	; (8000d90 <PT_init+0xec>)
	Prev_val = Prev_Prev_val = 0;									// Place holders for peak detector in Integrated Sig
 8000cfa:	8014      	strh	r4, [r2, #0]
	Prev_valBP = Prev_Prev_valBP = Best_PeakBP = 0;					// Place holders for peak detector in BP signal
 8000cfc:	4a25      	ldr	r2, [pc, #148]	; (8000d94 <PT_init+0xf0>)
			PT_dptr->RR_AVRG2_buf[idex] = PT1000MS;					//  Normal	and extreme RR buffers
 8000cfe:	4b26      	ldr	r3, [pc, #152]	; (8000d98 <PT_init+0xf4>)
	Prev_valBP = Prev_Prev_valBP = Best_PeakBP = 0;					// Place holders for peak detector in BP signal
 8000d00:	800c      	strh	r4, [r1, #0]
 8000d02:	8014      	strh	r4, [r2, #0]
	Prev_valDR = Prev_Prev_valDR = Best_PeakDR = Old_PeakDR = 0;	// Place holders for peak detector in Derivative signal (Used for T-wave discrimination)
 8000d04:	4925      	ldr	r1, [pc, #148]	; (8000d9c <PT_init+0xf8>)
 8000d06:	4a26      	ldr	r2, [pc, #152]	; (8000da0 <PT_init+0xfc>)
			PT_dptr->RR_AVRG2_buf[idex] = PT1000MS;					//  Normal	and extreme RR buffers
 8000d08:	f8c5 310a 	str.w	r3, [r5, #266]	; 0x10a
		PT_dptr->RR_AVRG1_buf[idex] = 
 8000d0c:	f8c5 30fa 	str.w	r3, [r5, #250]	; 0xfa
			PT_dptr->RR_AVRG2_buf[idex] = PT1000MS;					//  Normal	and extreme RR buffers
 8000d10:	f8c5 310e 	str.w	r3, [r5, #270]	; 0x10e
		PT_dptr->RR_AVRG1_buf[idex] = 
 8000d14:	f8c5 30fe 	str.w	r3, [r5, #254]	; 0xfe
			PT_dptr->RR_AVRG2_buf[idex] = PT1000MS;					//  Normal	and extreme RR buffers
 8000d18:	f8c5 3112 	str.w	r3, [r5, #274]	; 0x112
		PT_dptr->RR_AVRG1_buf[idex] = 
 8000d1c:	f8c5 3102 	str.w	r3, [r5, #258]	; 0x102
			PT_dptr->RR_AVRG2_buf[idex] = PT1000MS;					//  Normal	and extreme RR buffers
 8000d20:	f8c5 3116 	str.w	r3, [r5, #278]	; 0x116
		PT_dptr->RR_AVRG1_buf[idex] = 
 8000d24:	f8c5 3106 	str.w	r3, [r5, #262]	; 0x106
	Prev_valDR = Prev_Prev_valDR = Best_PeakDR = Old_PeakDR = 0;	// Place holders for peak detector in Derivative signal (Used for T-wave discrimination)
 8000d28:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <PT_init+0x100>)
 8000d2a:	800c      	strh	r4, [r1, #0]
 8000d2c:	8014      	strh	r4, [r2, #0]
	Prev_valBP = Prev_Prev_valBP = Best_PeakBP = 0;					// Place holders for peak detector in BP signal
 8000d2e:	481e      	ldr	r0, [pc, #120]	; (8000da8 <PT_init+0x104>)
	Count_SinceRR = 0;												// Nr of samples since last qrs peak
 8000d30:	491e      	ldr	r1, [pc, #120]	; (8000dac <PT_init+0x108>)
	RR1_p = RR2_p = 0;												// Pointers to RR average 1 and 2 resepectively
	MV_sum = 0;														// sum for moving average filter
 8000d32:	4a1f      	ldr	r2, [pc, #124]	; (8000db0 <PT_init+0x10c>)
	Prev_valDR = Prev_Prev_valDR = Best_PeakDR = Old_PeakDR = 0;	// Place holders for peak detector in Derivative signal (Used for T-wave discrimination)
 8000d34:	801c      	strh	r4, [r3, #0]
	RR1_p = RR2_p = 0;												// Pointers to RR average 1 and 2 resepectively
 8000d36:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <PT_init+0x110>)
	Prev_valBP = Prev_Prev_valBP = Best_PeakBP = 0;					// Place holders for peak detector in BP signal
 8000d38:	8004      	strh	r4, [r0, #0]
	Count_SinceRR = 0;												// Nr of samples since last qrs peak
 8000d3a:	800c      	strh	r4, [r1, #0]
	MV_sum = 0;														// sum for moving average filter
 8000d3c:	8014      	strh	r4, [r2, #0]
	Prev_valDR = Prev_Prev_valDR = Best_PeakDR = Old_PeakDR = 0;	// Place holders for peak detector in Derivative signal (Used for T-wave discrimination)
 8000d3e:	481e      	ldr	r0, [pc, #120]	; (8000db8 <PT_init+0x114>)
	RR1_sum = RR2_sum = PT1000MS << 3;								// Sum of RR1 and RR2 buffers
 8000d40:	491e      	ldr	r1, [pc, #120]	; (8000dbc <PT_init+0x118>)
 8000d42:	4a1f      	ldr	r2, [pc, #124]	; (8000dc0 <PT_init+0x11c>)
	RR1_p = RR2_p = 0;												// Pointers to RR average 1 and 2 resepectively
 8000d44:	801c      	strh	r4, [r3, #0]
	RR1_sum = RR2_sum = PT1000MS << 3;								// Sum of RR1 and RR2 buffers
 8000d46:	f44f 6334 	mov.w	r3, #2880	; 0xb40
	Prev_valDR = Prev_Prev_valDR = Best_PeakDR = Old_PeakDR = 0;	// Place holders for peak detector in Derivative signal (Used for T-wave discrimination)
 8000d4a:	8004      	strh	r4, [r0, #0]
	RR1_sum = RR2_sum = PT1000MS << 3;								// Sum of RR1 and RR2 buffers
 8000d4c:	800b      	strh	r3, [r1, #0]
 8000d4e:	8013      	strh	r3, [r2, #0]
	RR1_p = RR2_p = 0;												// Pointers to RR average 1 and 2 resepectively
 8000d50:	481c      	ldr	r0, [pc, #112]	; (8000dc4 <PT_init+0x120>)
	BlankTimeCnt = 0;												// Counter for blank-time.
	SBcntI = 0;														// For searchback index in Integ Signal
 8000d52:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <PT_init+0x124>)
	RR1_p = RR2_p = 0;												// Pointers to RR average 1 and 2 resepectively
 8000d54:	8004      	strh	r4, [r0, #0]
	SBcntI = 0;														// For searchback index in Integ Signal
 8000d56:	801c      	strh	r4, [r3, #0]
	BlankTimeCnt = 0;												// Counter for blank-time.
 8000d58:	481c      	ldr	r0, [pc, #112]	; (8000dcc <PT_init+0x128>)
	SB_peakI = 0;													// For searchback in Integ sig
 8000d5a:	491d      	ldr	r1, [pc, #116]	; (8000dd0 <PT_init+0x12c>)
	SB_peakBP = SB_peakDR = 0;										// For searchback peak holders in BP and slope signal
 8000d5c:	4a1d      	ldr	r2, [pc, #116]	; (8000dd4 <PT_init+0x130>)
	st_mx_pk = 0;													// Used in learning phase 1 to estimate thresholds
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <PT_init+0x134>)
	BlankTimeCnt = 0;												// Counter for blank-time.
 8000d60:	8004      	strh	r4, [r0, #0]
	SB_peakI = 0;													// For searchback in Integ sig
 8000d62:	800c      	strh	r4, [r1, #0]
	SB_peakBP = SB_peakDR = 0;										// For searchback peak holders in BP and slope signal
 8000d64:	8014      	strh	r4, [r2, #0]
	st_mx_pk = 0;													// Used in learning phase 1 to estimate thresholds
 8000d66:	801c      	strh	r4, [r3, #0]
	SB_peakBP = SB_peakDR = 0;										// For searchback peak holders in BP and slope signal
 8000d68:	481c      	ldr	r0, [pc, #112]	; (8000ddc <PT_init+0x138>)
	y_h = 0;														// recusrively used in HP filter
 8000d6a:	491d      	ldr	r1, [pc, #116]	; (8000de0 <PT_init+0x13c>)

#if (FILTER_FORM == 2)
	LP_y_new = LP_y_old = 0;										// Parameters for DirectForm || LP filter
 8000d6c:	4a1d      	ldr	r2, [pc, #116]	; (8000de4 <PT_init+0x140>)
 8000d6e:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <PT_init+0x144>)
	Prev_val = Prev_Prev_val = 0;									// Place holders for peak detector in Integrated Sig
 8000d70:	8034      	strh	r4, [r6, #0]
	SB_peakBP = SB_peakDR = 0;										// For searchback peak holders in BP and slope signal
 8000d72:	8004      	strh	r4, [r0, #0]
	y_h = 0;														// recusrively used in HP filter
 8000d74:	800c      	strh	r4, [r1, #0]
	LP_y_new = LP_y_old = 0;										// Parameters for DirectForm || LP filter
 8000d76:	8014      	strh	r4, [r2, #0]
 8000d78:	801c      	strh	r4, [r3, #0]
#endif
}
 8000d7a:	bd70      	pop	{r4, r5, r6, pc}
 8000d7c:	20000310 	.word	0x20000310
 8000d80:	20000430 	.word	0x20000430
 8000d84:	014c0168 	.word	0x014c0168
 8000d88:	025801a2 	.word	0x025801a2
 8000d8c:	2000042a 	.word	0x2000042a
 8000d90:	200002fc 	.word	0x200002fc
 8000d94:	20000432 	.word	0x20000432
 8000d98:	01680168 	.word	0x01680168
 8000d9c:	2000030a 	.word	0x2000030a
 8000da0:	20000434 	.word	0x20000434
 8000da4:	200002fe 	.word	0x200002fe
 8000da8:	2000042c 	.word	0x2000042c
 8000dac:	20000302 	.word	0x20000302
 8000db0:	20000308 	.word	0x20000308
 8000db4:	2000043a 	.word	0x2000043a
 8000db8:	2000042e 	.word	0x2000042e
 8000dbc:	2000043c 	.word	0x2000043c
 8000dc0:	20000438 	.word	0x20000438
 8000dc4:	20000436 	.word	0x20000436
 8000dc8:	20000444 	.word	0x20000444
 8000dcc:	20000300 	.word	0x20000300
 8000dd0:	20000442 	.word	0x20000442
 8000dd4:	20000440 	.word	0x20000440
 8000dd8:	2000044a 	.word	0x2000044a
 8000ddc:	2000043e 	.word	0x2000043e
 8000de0:	2000044c 	.word	0x2000044c
 8000de4:	20000306 	.word	0x20000306
 8000de8:	20000304 	.word	0x20000304

08000dec <LearningPhase1>:
 **********************************************************************************/

void LearningPhase1(uint16_t *pkI, int16_t *pkBP)
{
	//---- Recursively compute the average and max of peaks ------ //
	if (*pkI > st_mx_pk) st_mx_pk = *pkI;
 8000dec:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <LearningPhase1+0xac>)
 8000dee:	f8b0 c000 	ldrh.w	ip, [r0]
 8000df2:	881a      	ldrh	r2, [r3, #0]
 8000df4:	4594      	cmp	ip, r2
{
 8000df6:	b410      	push	{r4}
	if (*pkI > st_mx_pk) st_mx_pk = *pkI;
 8000df8:	bf88      	it	hi
 8000dfa:	f8a3 c000 	strhhi.w	ip, [r3]

	// ---- If the very first time calling this function --- //
	if (PT_dptr->PT_state == START_UP) {
 8000dfe:	4b27      	ldr	r3, [pc, #156]	; (8000e9c <LearningPhase1+0xb0>)
 8000e00:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
	if (*pkI > st_mx_pk) st_mx_pk = *pkI;
 8000e04:	bf88      	it	hi
 8000e06:	4662      	movhi	r2, ip
	if (PT_dptr->PT_state == START_UP) {
 8000e08:	b954      	cbnz	r4, 8000e20 <LearningPhase1+0x34>
		PT_dptr->PT_state = LEARN_PH_1;
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	80da      	strh	r2, [r3, #6]
		st_mean_pk = *pkI;
 8000e0e:	4c24      	ldr	r4, [pc, #144]	; (8000ea0 <LearningPhase1+0xb4>)
		st_mean_pkBP = *pkBP; 
 8000e10:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <LearningPhase1+0xb8>)
		st_mean_pk = *pkI;
 8000e12:	8800      	ldrh	r0, [r0, #0]
		st_mean_pkBP = *pkBP; 
 8000e14:	880a      	ldrh	r2, [r1, #0]
		st_mean_pk = *pkI;
 8000e16:	8020      	strh	r0, [r4, #0]
		st_mean_pkBP = *pkBP; 
 8000e18:	801a      	strh	r2, [r3, #0]
		PT_dptr->NPKF = (st_mean_pkBP >> 3);
		PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
		PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;

	}
}
 8000e1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e1e:	4770      	bx	lr
	else if(Count_SinceRR < PT2000MS){
 8000e20:	4821      	ldr	r0, [pc, #132]	; (8000ea8 <LearningPhase1+0xbc>)
 8000e22:	f9b0 0000 	ldrsh.w	r0, [r0]
 8000e26:	f5b0 7f34 	cmp.w	r0, #720	; 0x2d0
 8000e2a:	da11      	bge.n	8000e50 <LearningPhase1+0x64>
		st_mean_pk = (st_mean_pk + *pkI) >> 1;
 8000e2c:	4c1c      	ldr	r4, [pc, #112]	; (8000ea0 <LearningPhase1+0xb4>)
		st_mean_pkBP = (st_mean_pkBP + *pkBP) >> 1;
 8000e2e:	481d      	ldr	r0, [pc, #116]	; (8000ea4 <LearningPhase1+0xb8>)
		st_mean_pk = (st_mean_pk + *pkI) >> 1;
 8000e30:	8822      	ldrh	r2, [r4, #0]
		st_mean_pkBP = (st_mean_pkBP + *pkBP) >> 1;
 8000e32:	f9b0 3000 	ldrsh.w	r3, [r0]
 8000e36:	f9b1 1000 	ldrsh.w	r1, [r1]
		st_mean_pk = (st_mean_pk + *pkI) >> 1;
 8000e3a:	4494      	add	ip, r2
		st_mean_pkBP = (st_mean_pkBP + *pkBP) >> 1;
 8000e3c:	440b      	add	r3, r1
		st_mean_pk = (st_mean_pk + *pkI) >> 1;
 8000e3e:	ea4f 0c6c 	mov.w	ip, ip, asr #1
		st_mean_pkBP = (st_mean_pkBP + *pkBP) >> 1;
 8000e42:	105b      	asrs	r3, r3, #1
		st_mean_pk = (st_mean_pk + *pkI) >> 1;
 8000e44:	f8a4 c000 	strh.w	ip, [r4]
		st_mean_pkBP = (st_mean_pkBP + *pkBP) >> 1;
 8000e48:	8003      	strh	r3, [r0, #0]
}
 8000e4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e4e:	4770      	bx	lr
		PT_dptr->NPKI = (st_mean_pk >> 3);
 8000e50:	4913      	ldr	r1, [pc, #76]	; (8000ea0 <LearningPhase1+0xb4>)
 8000e52:	8808      	ldrh	r0, [r1, #0]
		PT_dptr->SPKI = (st_mx_pk >> 1);
 8000e54:	0852      	lsrs	r2, r2, #1
		PT_dptr->NPKI = (st_mean_pk >> 3);
 8000e56:	08c0      	lsrs	r0, r0, #3
		PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 8000e58:	1a11      	subs	r1, r2, r0
 8000e5a:	eb00 01a1 	add.w	r1, r0, r1, asr #2
		PT_dptr->SPKI = (st_mx_pk >> 1);
 8000e5e:	82da      	strh	r2, [r3, #22]
		PT_dptr->NPKI = (st_mean_pk >> 3);
 8000e60:	8318      	strh	r0, [r3, #24]
		PT_dptr->NPKF = (st_mean_pkBP >> 3);
 8000e62:	4a10      	ldr	r2, [pc, #64]	; (8000ea4 <LearningPhase1+0xb8>)
		PT_dptr->SPKF = (Best_PeakBP >> 1);
 8000e64:	4811      	ldr	r0, [pc, #68]	; (8000eac <LearningPhase1+0xc0>)
		PT_dptr->NPKF = (st_mean_pkBP >> 3);
 8000e66:	f9b2 2000 	ldrsh.w	r2, [r2]
		PT_dptr->PT_state = LEARN_PH_2;
 8000e6a:	2402      	movs	r4, #2
 8000e6c:	80dc      	strh	r4, [r3, #6]
		PT_dptr->SPKF = (Best_PeakBP >> 1);
 8000e6e:	f9b0 4000 	ldrsh.w	r4, [r0]
		PT_dptr->NPKF = (st_mean_pkBP >> 3);
 8000e72:	10d2      	asrs	r2, r2, #3
		PT_dptr->SPKF = (Best_PeakBP >> 1);
 8000e74:	1064      	asrs	r4, r4, #1
		PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 8000e76:	1aa0      	subs	r0, r4, r2
		PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 8000e78:	b289      	uxth	r1, r1
		PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 8000e7a:	eb02 00a0 	add.w	r0, r2, r0, asr #2
		PT_dptr->ThI2 = PT_dptr->ThI1 >> 1;
 8000e7e:	ea4f 0c51 	mov.w	ip, r1, lsr #1
		PT_dptr->NPKF = (st_mean_pkBP >> 3);
 8000e82:	841a      	strh	r2, [r3, #32]
		PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;
 8000e84:	1042      	asrs	r2, r0, #1
		PT_dptr->SPKF = (Best_PeakBP >> 1);
 8000e86:	83dc      	strh	r4, [r3, #30]
		PT_dptr->ThI2 = PT_dptr->ThI1 >> 1;
 8000e88:	f8a3 c01a 	strh.w	ip, [r3, #26]
}
 8000e8c:	f85d 4b04 	ldr.w	r4, [sp], #4
		PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 8000e90:	8299      	strh	r1, [r3, #20]
		PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 8000e92:	8398      	strh	r0, [r3, #28]
		PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;
 8000e94:	845a      	strh	r2, [r3, #34]	; 0x22
}
 8000e96:	4770      	bx	lr
 8000e98:	2000044a 	.word	0x2000044a
 8000e9c:	20000310 	.word	0x20000310
 8000ea0:	20000446 	.word	0x20000446
 8000ea4:	20000448 	.word	0x20000448
 8000ea8:	20000302 	.word	0x20000302
 8000eac:	200002fc 	.word	0x200002fc

08000eb0 <LPFilter>:
void LPFilter(int16_t *val)
{
	// -- To avoid using modulo employ half-pointer -- //
	int16_t half_pointer, w;

	half_pointer = PT_dptr->LP_pointer - (LP_BUFFER_SIZE >> 1);
 8000eb0:	4919      	ldr	r1, [pc, #100]	; (8000f18 <LPFilter+0x68>)
 8000eb2:	f9b1 c000 	ldrsh.w	ip, [r1]
 8000eb6:	fa1f f28c 	uxth.w	r2, ip
 8000eba:	1f93      	subs	r3, r2, #6
 8000ebc:	b21b      	sxth	r3, r3

	if (half_pointer < 0) 
 8000ebe:	2b00      	cmp	r3, #0
		half_pointer += LP_BUFFER_SIZE;
 8000ec0:	bfbc      	itt	lt
 8000ec2:	1d93      	addlt	r3, r2, #6
 8000ec4:	b21b      	sxthlt	r3, r3
{
 8000ec6:	b570      	push	{r4, r5, r6, lr}
#if (FILTER_FORM == 1)
		w = *val + (PT_dptr->LP_buf[1] << 1) - PT_dptr->LP_buf[0];
		*val = w - (PT_dptr->LP_buf[half_pointer] << 1) + PT_dptr->LP_buf[PT_dptr->LP_pointer];
		PT_dptr->LP_buf[PT_dptr->LP_pointer] = w;
#else
		w = (LP_y_old << 1) - LP_y_new + *val - (PT_dptr->LP_buf[half_pointer] << 1) + PT_dptr->LP_buf[PT_dptr->LP_pointer];
 8000ec8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8000ecc:	f9b0 e000 	ldrsh.w	lr, [r0]
 8000ed0:	4d12      	ldr	r5, [pc, #72]	; (8000f1c <LPFilter+0x6c>)
 8000ed2:	4813      	ldr	r0, [pc, #76]	; (8000f20 <LPFilter+0x70>)
 8000ed4:	8dde      	ldrh	r6, [r3, #46]	; 0x2e
 8000ed6:	f9b0 4000 	ldrsh.w	r4, [r0]
 8000eda:	882b      	ldrh	r3, [r5, #0]
		LP_y_new = LP_y_old;
 8000edc:	802c      	strh	r4, [r5, #0]
		w = (LP_y_old << 1) - LP_y_new + *val - (PT_dptr->LP_buf[half_pointer] << 1) + PT_dptr->LP_buf[PT_dptr->LP_pointer];
 8000ede:	f10c 0c14 	add.w	ip, ip, #20
 8000ee2:	eb01 0c4c 	add.w	ip, r1, ip, lsl #1
 8000ee6:	ebc3 0344 	rsb	r3, r3, r4, lsl #1
 8000eea:	f8bc 4006 	ldrh.w	r4, [ip, #6]
		LP_y_old = w;
		PT_dptr->LP_buf[PT_dptr->LP_pointer] = *val;
 8000eee:	f8ac e006 	strh.w	lr, [ip, #6]
		w = (LP_y_old << 1) - LP_y_new + *val - (PT_dptr->LP_buf[half_pointer] << 1) + PT_dptr->LP_buf[PT_dptr->LP_pointer];
 8000ef2:	4423      	add	r3, r4
		if (w >= 0)
			PT_dptr->LPF_val = w >> 5;
		else
			PT_dptr->LPF_val = (w >> 5) | 0xF800;

		if (++PT_dptr->LP_pointer == LP_BUFFER_SIZE) 
 8000ef4:	3201      	adds	r2, #1
		w = (LP_y_old << 1) - LP_y_new + *val - (PT_dptr->LP_buf[half_pointer] << 1) + PT_dptr->LP_buf[PT_dptr->LP_pointer];
 8000ef6:	4473      	add	r3, lr
		if (++PT_dptr->LP_pointer == LP_BUFFER_SIZE) 
 8000ef8:	b212      	sxth	r2, r2
		w = (LP_y_old << 1) - LP_y_new + *val - (PT_dptr->LP_buf[half_pointer] << 1) + PT_dptr->LP_buf[PT_dptr->LP_pointer];
 8000efa:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
 8000efe:	b21b      	sxth	r3, r3
		if (++PT_dptr->LP_pointer == LP_BUFFER_SIZE) 
 8000f00:	2a0c      	cmp	r2, #12
			PT_dptr->LPF_val = (w >> 5) | 0xF800;
 8000f02:	ea4f 1463 	mov.w	r4, r3, asr #5
		LP_y_old = w;
 8000f06:	8003      	strh	r3, [r0, #0]
			PT_dptr->LP_pointer = 0;
 8000f08:	bf08      	it	eq
 8000f0a:	2300      	moveq	r3, #0
 8000f0c:	814c      	strh	r4, [r1, #10]
		if (++PT_dptr->LP_pointer == LP_BUFFER_SIZE) 
 8000f0e:	bf14      	ite	ne
 8000f10:	800a      	strhne	r2, [r1, #0]
			PT_dptr->LP_pointer = 0;
 8000f12:	800b      	strheq	r3, [r1, #0]
}
 8000f14:	bd70      	pop	{r4, r5, r6, pc}
 8000f16:	bf00      	nop
 8000f18:	20000310 	.word	0x20000310
 8000f1c:	20000304 	.word	0x20000304
 8000f20:	20000306 	.word	0x20000306

08000f24 <HPFilter>:
**********************************************************************************/
void HPFilter(void)
{
	// -- To avoid using modulo employ half-pointer -- //
	int16_t half_pointer, h_prev_pointer;
	half_pointer = PT_dptr->HP_pointer - (HP_BUFFER_SIZE >> 1);
 8000f24:	4923      	ldr	r1, [pc, #140]	; (8000fb4 <HPFilter+0x90>)
 8000f26:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8000f2a:	b282      	uxth	r2, r0
 8000f2c:	f1a2 0310 	sub.w	r3, r2, #16
 8000f30:	fa1f fc83 	uxth.w	ip, r3
 8000f34:	b21b      	sxth	r3, r3

	if (half_pointer < 0)
 8000f36:	2b00      	cmp	r3, #0
{
 8000f38:	b570      	push	{r4, r5, r6, lr}
	if (half_pointer < 0)
 8000f3a:	db34      	blt.n	8000fa6 <HPFilter+0x82>
		half_pointer += HP_BUFFER_SIZE;
	
	if (!half_pointer)
 8000f3c:	b383      	cbz	r3, 8000fa0 <HPFilter+0x7c>
		h_prev_pointer = HP_BUFFER_SIZE - 1;
	else
		h_prev_pointer = half_pointer - 1;
 8000f3e:	f10c 3cff 	add.w	ip, ip, #4294967295
#if (FILTER_FORM == 1)
	y_h = PT_dptr->LPF_val + PT_dptr->HP_buf[0];
	PT_dptr->LPF_val = ((PT_dptr->HP_buf[PT_dptr->HP_pointer] - y_h) >> 5) + PT_dptr->HP_buf[half_pointer] - PT_dptr->HP_buf[h_prev_pointer];
	PT_dptr->HP_buf[PT_dptr->HP_pointer] = y_h;
#else
	y_h += (PT_dptr->HP_buf[PT_dptr->HP_pointer] >> 5) - (PT_dptr->LPF_val >> 5) + PT_dptr->HP_buf[half_pointer] - PT_dptr->HP_buf[h_prev_pointer];
 8000f42:	fa0f fc8c 	sxth.w	ip, ip
 8000f46:	4c1c      	ldr	r4, [pc, #112]	; (8000fb8 <HPFilter+0x94>)
 8000f48:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8000f4c:	eb01 0c4c 	add.w	ip, r1, ip, lsl #1
 8000f50:	3020      	adds	r0, #32
 8000f52:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8000f56:	f8b3 5046 	ldrh.w	r5, [r3, #70]	; 0x46
 8000f5a:	f8bc e046 	ldrh.w	lr, [ip, #70]	; 0x46
 8000f5e:	8823      	ldrh	r3, [r4, #0]
 8000f60:	f9b1 c00a 	ldrsh.w	ip, [r1, #10]
 8000f64:	f9b0 6006 	ldrsh.w	r6, [r0, #6]
	PT_dptr->HP_buf[PT_dptr->HP_pointer] = PT_dptr->LPF_val;
 8000f68:	f8a0 c006 	strh.w	ip, [r0, #6]
	y_h += (PT_dptr->HP_buf[PT_dptr->HP_pointer] >> 5) - (PT_dptr->LPF_val >> 5) + PT_dptr->HP_buf[half_pointer] - PT_dptr->HP_buf[h_prev_pointer];
 8000f6c:	eba3 136c 	sub.w	r3, r3, ip, asr #5
 8000f70:	eb03 1366 	add.w	r3, r3, r6, asr #5
 8000f74:	442b      	add	r3, r5
 8000f76:	eba3 030e 	sub.w	r3, r3, lr
 8000f7a:	b21b      	sxth	r3, r3
	
#endif
	// ------- Again slightly gaining down --------- //
	if (y_h >= 0)
 8000f7c:	2b00      	cmp	r3, #0
		PT_dptr->HPF_val = (y_h >> 1);
	else
		PT_dptr->HPF_val = (y_h >> 1) | 0xF800;
 8000f7e:	bfb8      	it	lt
 8000f80:	480e      	ldrlt	r0, [pc, #56]	; (8000fbc <HPFilter+0x98>)
	y_h += (PT_dptr->HP_buf[PT_dptr->HP_pointer] >> 5) - (PT_dptr->LPF_val >> 5) + PT_dptr->HP_buf[half_pointer] - PT_dptr->HP_buf[h_prev_pointer];
 8000f82:	8023      	strh	r3, [r4, #0]

	if (++PT_dptr->HP_pointer == HP_BUFFER_SIZE) PT_dptr->HP_pointer = 0;
 8000f84:	f102 0201 	add.w	r2, r2, #1
 8000f88:	b212      	sxth	r2, r2
		PT_dptr->HPF_val = (y_h >> 1);
 8000f8a:	bfac      	ite	ge
 8000f8c:	105b      	asrge	r3, r3, #1
		PT_dptr->HPF_val = (y_h >> 1) | 0xF800;
 8000f8e:	ea40 0363 	orrlt.w	r3, r0, r3, asr #1
	if (++PT_dptr->HP_pointer == HP_BUFFER_SIZE) PT_dptr->HP_pointer = 0;
 8000f92:	2a20      	cmp	r2, #32
 8000f94:	818b      	strh	r3, [r1, #12]
 8000f96:	bf0a      	itet	eq
 8000f98:	2300      	moveq	r3, #0
 8000f9a:	804a      	strhne	r2, [r1, #2]
 8000f9c:	804b      	strheq	r3, [r1, #2]
}
 8000f9e:	bd70      	pop	{r4, r5, r6, pc}
 8000fa0:	f04f 0c1f 	mov.w	ip, #31
 8000fa4:	e7cf      	b.n	8000f46 <HPFilter+0x22>
		half_pointer += HP_BUFFER_SIZE;
 8000fa6:	f102 0310 	add.w	r3, r2, #16
 8000faa:	fa1f fc83 	uxth.w	ip, r3
 8000fae:	b21b      	sxth	r3, r3
 8000fb0:	e7c4      	b.n	8000f3c <HPFilter+0x18>
 8000fb2:	bf00      	nop
 8000fb4:	20000310 	.word	0x20000310
 8000fb8:	2000044c 	.word	0x2000044c
 8000fbc:	fffff800 	.word	0xfffff800

08000fc0 <UpdateRR>:
RR_High_Lim		= 1.16*RR_M = ((116/100) * RR_M) = RR_M + (4/25)*RR_M
RR_Missed_Lim	= 1.66*RR_M = ((166/100) * RR_M) = RR_M + (33/50)*RR_M

**********************************************************************************/
void UpdateRR(int16_t qrs)
{   
 8000fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
	// ---------- Update most 8 Recent RR mean Interval------------- //
	RR1_sum += qrs;
	RR1_sum -= PT_dptr->RR_AVRG1_buf[RR1_p];
 8000fc2:	4c3d      	ldr	r4, [pc, #244]	; (80010b8 <UpdateRR+0xf8>)
 8000fc4:	4a3d      	ldr	r2, [pc, #244]	; (80010bc <UpdateRR+0xfc>)
 8000fc6:	f9b4 1000 	ldrsh.w	r1, [r4]
	RR1_sum += qrs;
 8000fca:	4d3d      	ldr	r5, [pc, #244]	; (80010c0 <UpdateRR+0x100>)
	RR1_sum -= PT_dptr->RR_AVRG1_buf[RR1_p];
 8000fcc:	f101 0e7c 	add.w	lr, r1, #124	; 0x7c
 8000fd0:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
	RR1_sum += qrs;
 8000fd4:	882b      	ldrh	r3, [r5, #0]
	RR1_sum -= PT_dptr->RR_AVRG1_buf[RR1_p];
 8000fd6:	f8be 6002 	ldrh.w	r6, [lr, #2]

	PT_dptr->RR_AVRG1_buf[RR1_p] = qrs;
 8000fda:	f8ae 0002 	strh.w	r0, [lr, #2]
	RR1_sum += qrs;
 8000fde:	fa1f fc80 	uxth.w	ip, r0
 8000fe2:	4463      	add	r3, ip
	RR1_sum -= PT_dptr->RR_AVRG1_buf[RR1_p];
 8000fe4:	1b9b      	subs	r3, r3, r6
 8000fe6:	b21b      	sxth	r3, r3
	PT_dptr->Recent_RR_M = RR1_sum/RR_BUFFER_SIZE; 
	if (++RR1_p == RR_BUFFER_SIZE) 
 8000fe8:	3101      	adds	r1, #1
 8000fea:	b209      	sxth	r1, r1
	RR1_sum -= PT_dptr->RR_AVRG1_buf[RR1_p];
 8000fec:	802b      	strh	r3, [r5, #0]
	PT_dptr->Recent_RR_M = RR1_sum/RR_BUFFER_SIZE; 
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	bfb8      	it	lt
 8000ff2:	3307      	addlt	r3, #7
	if (++RR1_p == RR_BUFFER_SIZE) 
 8000ff4:	2908      	cmp	r1, #8
		RR1_p = 0;
 8000ff6:	bf08      	it	eq
 8000ff8:	2100      	moveq	r1, #0
 8000ffa:	8021      	strh	r1, [r4, #0]



	// ------ Update Selected Beat RR mean if qrs in range --------- //
	if (qrs >= PT_dptr->RR_Low_L && qrs <= PT_dptr->RR_High_L) {
 8000ffc:	f9b2 1026 	ldrsh.w	r1, [r2, #38]	; 0x26
	PT_dptr->Recent_RR_M = RR1_sum/RR_BUFFER_SIZE; 
 8001000:	10db      	asrs	r3, r3, #3
	if (qrs >= PT_dptr->RR_Low_L && qrs <= PT_dptr->RR_High_L) {
 8001002:	4281      	cmp	r1, r0
	PT_dptr->Recent_RR_M = RR1_sum/RR_BUFFER_SIZE; 
 8001004:	8113      	strh	r3, [r2, #8]
	if (qrs >= PT_dptr->RR_Low_L && qrs <= PT_dptr->RR_High_L) {
 8001006:	dc42      	bgt.n	800108e <UpdateRR+0xce>
 8001008:	f9b2 1028 	ldrsh.w	r1, [r2, #40]	; 0x28
 800100c:	4281      	cmp	r1, r0
 800100e:	db3e      	blt.n	800108e <UpdateRR+0xce>
		// ------ Update selective RR mean ----- //
		RR2_sum += qrs;
		RR2_sum -= PT_dptr->RR_AVRG2_buf[RR2_p];
 8001010:	4e2c      	ldr	r6, [pc, #176]	; (80010c4 <UpdateRR+0x104>)
		RR2_sum += qrs;
 8001012:	4f2d      	ldr	r7, [pc, #180]	; (80010c8 <UpdateRR+0x108>)
		RR2_sum -= PT_dptr->RR_AVRG2_buf[RR2_p];
 8001014:	f9b6 4000 	ldrsh.w	r4, [r6]
		RR2_sum += qrs;
 8001018:	8839      	ldrh	r1, [r7, #0]
		RR2_sum -= PT_dptr->RR_AVRG2_buf[RR2_p];
 800101a:	f104 0584 	add.w	r5, r4, #132	; 0x84
 800101e:	eb02 0545 	add.w	r5, r2, r5, lsl #1
		RR2_sum += qrs;
 8001022:	4461      	add	r1, ip
		RR2_sum -= PT_dptr->RR_AVRG2_buf[RR2_p];
 8001024:	f8b5 c002 	ldrh.w	ip, [r5, #2]

		PT_dptr->RR_AVRG2_buf[RR2_p] = qrs;
 8001028:	8068      	strh	r0, [r5, #2]
		RR2_sum -= PT_dptr->RR_AVRG2_buf[RR2_p];
 800102a:	eba1 010c 	sub.w	r1, r1, ip
 800102e:	b209      	sxth	r1, r1
		PT_dptr->RR_M = RR2_sum / RR_BUFFER_SIZE;
		if (++RR2_p == RR_BUFFER_SIZE) 
 8001030:	3401      	adds	r4, #1
 8001032:	b224      	sxth	r4, r4
		RR2_sum -= PT_dptr->RR_AVRG2_buf[RR2_p];
 8001034:	8039      	strh	r1, [r7, #0]
		PT_dptr->RR_M = RR2_sum / RR_BUFFER_SIZE;
 8001036:	2900      	cmp	r1, #0
			RR2_p = 0;

		// --------- Update Limits ------------ //
		PT_dptr->RR_Low_L = PT_dptr->Recent_RR_M - (PT_dptr->Recent_RR_M << 1) / 25;
 8001038:	4d24      	ldr	r5, [pc, #144]	; (80010cc <UpdateRR+0x10c>)
		PT_dptr->RR_M = RR2_sum / RR_BUFFER_SIZE;
 800103a:	bfb8      	it	lt
 800103c:	3107      	addlt	r1, #7
		if (++RR2_p == RR_BUFFER_SIZE) 
 800103e:	2c08      	cmp	r4, #8
 8001040:	bf18      	it	ne
 8001042:	8034      	strhne	r4, [r6, #0]
		PT_dptr->RR_Low_L = PT_dptr->Recent_RR_M - (PT_dptr->Recent_RR_M << 1) / 25;
 8001044:	ea4f 0443 	mov.w	r4, r3, lsl #1
 8001048:	fb85 c704 	smull	ip, r7, r5, r4
			RR2_p = 0;
 800104c:	bf08      	it	eq
 800104e:	2000      	moveq	r0, #0
		PT_dptr->RR_Low_L = PT_dptr->Recent_RR_M - (PT_dptr->Recent_RR_M << 1) / 25;
 8001050:	ea4f 74e4 	mov.w	r4, r4, asr #31
			RR2_p = 0;
 8001054:	bf08      	it	eq
 8001056:	8030      	strheq	r0, [r6, #0]
		PT_dptr->RR_Low_L = PT_dptr->Recent_RR_M - (PT_dptr->Recent_RR_M << 1) / 25;
 8001058:	eba4 04e7 	sub.w	r4, r4, r7, asr #3
 800105c:	b29e      	uxth	r6, r3
		PT_dptr->RR_M = RR2_sum / RR_BUFFER_SIZE;
 800105e:	10c9      	asrs	r1, r1, #3
		PT_dptr->RR_High_L = PT_dptr->Recent_RR_M + (PT_dptr->Recent_RR_M << 2) / 25;
 8001060:	009b      	lsls	r3, r3, #2
		PT_dptr->RR_Low_L = PT_dptr->Recent_RR_M - (PT_dptr->Recent_RR_M << 1) / 25;
 8001062:	4434      	add	r4, r6
		PT_dptr->RR_Missed_L = PT_dptr->RR_M + (PT_dptr->RR_M * 33) / 50;
 8001064:	eb01 1041 	add.w	r0, r1, r1, lsl #5
		PT_dptr->RR_Low_L = PT_dptr->Recent_RR_M - (PT_dptr->Recent_RR_M << 1) / 25;
 8001068:	84d4      	strh	r4, [r2, #38]	; 0x26
		PT_dptr->RR_High_L = PT_dptr->Recent_RR_M + (PT_dptr->Recent_RR_M << 2) / 25;
 800106a:	fb85 7403 	smull	r7, r4, r5, r3
 800106e:	17db      	asrs	r3, r3, #31
 8001070:	ebc3 03e4 	rsb	r3, r3, r4, asr #3
		PT_dptr->RR_Missed_L = PT_dptr->RR_M + (PT_dptr->RR_M * 33) / 50;
 8001074:	fb85 4500 	smull	r4, r5, r5, r0
 8001078:	17c0      	asrs	r0, r0, #31
 800107a:	ebc0 1025 	rsb	r0, r0, r5, asr #4
		PT_dptr->RR_M = RR2_sum / RR_BUFFER_SIZE;
 800107e:	8491      	strh	r1, [r2, #36]	; 0x24
		PT_dptr->RR_High_L = PT_dptr->Recent_RR_M + (PT_dptr->Recent_RR_M << 2) / 25;
 8001080:	4433      	add	r3, r6
		PT_dptr->RR_Missed_L = PT_dptr->RR_M + (PT_dptr->RR_M * 33) / 50;
 8001082:	4401      	add	r1, r0
		PT_dptr->HR_State = REGULAR_HR;
 8001084:	2000      	movs	r0, #0
		PT_dptr->RR_High_L = PT_dptr->Recent_RR_M + (PT_dptr->Recent_RR_M << 2) / 25;
 8001086:	8513      	strh	r3, [r2, #40]	; 0x28
		PT_dptr->RR_Missed_L = PT_dptr->RR_M + (PT_dptr->RR_M * 33) / 50;
 8001088:	8551      	strh	r1, [r2, #42]	; 0x2a
		PT_dptr->HR_State = REGULAR_HR;
 800108a:	8590      	strh	r0, [r2, #44]	; 0x2c
		PT_dptr->ThI1 >>= 1;
		PT_dptr->ThF1 >>= 1;
		PT_dptr->HR_State = IRREGULAR_HR;
	}
	
}
 800108c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PT_dptr->RR_Missed_L = PT_dptr->Recent_RR_M + (PT_dptr->Recent_RR_M * 33) / 50;
 800108e:	480f      	ldr	r0, [pc, #60]	; (80010cc <UpdateRR+0x10c>)
 8001090:	eb03 1143 	add.w	r1, r3, r3, lsl #5
 8001094:	fb80 4001 	smull	r4, r0, r0, r1
 8001098:	17c9      	asrs	r1, r1, #31
 800109a:	ebc1 1120 	rsb	r1, r1, r0, asr #4
		PT_dptr->ThI1 >>= 1;
 800109e:	8a94      	ldrh	r4, [r2, #20]
		PT_dptr->ThF1 >>= 1;
 80010a0:	f9b2 001c 	ldrsh.w	r0, [r2, #28]
		PT_dptr->RR_Missed_L = PT_dptr->Recent_RR_M + (PT_dptr->Recent_RR_M * 33) / 50;
 80010a4:	440b      	add	r3, r1
		PT_dptr->ThI1 >>= 1;
 80010a6:	0864      	lsrs	r4, r4, #1
		PT_dptr->ThF1 >>= 1;
 80010a8:	1041      	asrs	r1, r0, #1
		PT_dptr->RR_Missed_L = PT_dptr->Recent_RR_M + (PT_dptr->Recent_RR_M * 33) / 50;
 80010aa:	8553      	strh	r3, [r2, #42]	; 0x2a
		PT_dptr->HR_State = IRREGULAR_HR;
 80010ac:	2301      	movs	r3, #1
		PT_dptr->ThI1 >>= 1;
 80010ae:	8294      	strh	r4, [r2, #20]
		PT_dptr->ThF1 >>= 1;
 80010b0:	8391      	strh	r1, [r2, #28]
		PT_dptr->HR_State = IRREGULAR_HR;
 80010b2:	8593      	strh	r3, [r2, #44]	; 0x2c
}
 80010b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000436 	.word	0x20000436
 80010bc:	20000310 	.word	0x20000310
 80010c0:	20000438 	.word	0x20000438
 80010c4:	2000043a 	.word	0x2000043a
 80010c8:	2000043c 	.word	0x2000043c
 80010cc:	51eb851f 	.word	0x51eb851f

080010d0 <PT_StateMachine>:
{
 80010d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	PeakDtcBP(PT_dptr->HPF_val);							// Store BP signal highest peak
 80010d4:	4ca1      	ldr	r4, [pc, #644]	; (800135c <PT_StateMachine+0x28c>)
	if (DR_sample <= Prev_valBP && Prev_valBP > Prev_Prev_valBP) {
 80010d6:	4da2      	ldr	r5, [pc, #648]	; (8001360 <PT_StateMachine+0x290>)
 80010d8:	4ea2      	ldr	r6, [pc, #648]	; (8001364 <PT_StateMachine+0x294>)
{
 80010da:	b085      	sub	sp, #20
 80010dc:	4603      	mov	r3, r0
	LPFilter(&datum);										// LowPass filtering
 80010de:	f10d 0006 	add.w	r0, sp, #6
{
 80010e2:	f8ad 3006 	strh.w	r3, [sp, #6]
	LPFilter(&datum);										// LowPass filtering
 80010e6:	f7ff fee3 	bl	8000eb0 <LPFilter>
	HPFilter();												// HighPass filtering
 80010ea:	f7ff ff1b 	bl	8000f24 <HPFilter>
	PeakDtcBP(PT_dptr->HPF_val);							// Store BP signal highest peak
 80010ee:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
	if (DR_sample <= Prev_valBP && Prev_valBP > Prev_Prev_valBP) {
 80010f2:	f9b5 2000 	ldrsh.w	r2, [r5]
	if (DR_sample < 0) DR_sample = -DR_sample;
 80010f6:	2900      	cmp	r1, #0
 80010f8:	b28b      	uxth	r3, r1
 80010fa:	bfb6      	itet	lt
 80010fc:	4258      	neglt	r0, r3
 80010fe:	4608      	movge	r0, r1
 8001100:	b200      	sxthlt	r0, r0
	if (DR_sample <= Prev_valBP && Prev_valBP > Prev_Prev_valBP) {
 8001102:	4282      	cmp	r2, r0
 8001104:	db04      	blt.n	8001110 <PT_StateMachine+0x40>
 8001106:	f9b6 7000 	ldrsh.w	r7, [r6]
 800110a:	4297      	cmp	r7, r2
 800110c:	f2c0 80ba 	blt.w	8001284 <PT_StateMachine+0x1b4>
	Prev_valBP = DR_sample;
 8001110:	8028      	strh	r0, [r5, #0]
	Prev_Prev_valBP = Prev_valBP;
 8001112:	8032      	strh	r2, [r6, #0]
	w = PT_dptr->DR_buf[0] - PT_dptr->DR_buf[2];
 8001114:	f9b4 0086 	ldrsh.w	r0, [r4, #134]	; 0x86
 8001118:	f9b4 208a 	ldrsh.w	r2, [r4, #138]	; 0x8a
	PT_dptr->DR_buf[0] = PT_dptr->HPF_val;
 800111c:	f8a4 1086 	strh.w	r1, [r4, #134]	; 0x86
	w += ((PT_dptr->HPF_val - PT_dptr->DR_buf[3]) << 1);
 8001120:	f8b4 108c 	ldrh.w	r1, [r4, #140]	; 0x8c
	PT_dptr->DR_buf[3] = PT_dptr->DR_buf[2];
 8001124:	f8a4 208c 	strh.w	r2, [r4, #140]	; 0x8c
	w += ((PT_dptr->HPF_val - PT_dptr->DR_buf[3]) << 1);
 8001128:	1a59      	subs	r1, r3, r1
	w = PT_dptr->DR_buf[0] - PT_dptr->DR_buf[2];
 800112a:	1a83      	subs	r3, r0, r2
	w += ((PT_dptr->HPF_val - PT_dptr->DR_buf[3]) << 1);
 800112c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
	w >>= 3;
 8001130:	f343 03cc 	sbfx	r3, r3, #3, #13
	PT_dptr->DR_buf[2] = PT_dptr->DR_buf[1];
 8001134:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88
	PT_dptr->DR_buf[1] = PT_dptr->DR_buf[0];
 8001138:	f8a4 0088 	strh.w	r0, [r4, #136]	; 0x88
	if (DR_sample <= Prev_valDR && Prev_valDR > Prev_Prev_valDR) {
 800113c:	488a      	ldr	r0, [pc, #552]	; (8001368 <PT_StateMachine+0x298>)
	PT_dptr->DR_buf[2] = PT_dptr->DR_buf[1];
 800113e:	f8a4 208a 	strh.w	r2, [r4, #138]	; 0x8a
	if (DR_sample < 0) DR_sample = -DR_sample;
 8001142:	2b00      	cmp	r3, #0
 8001144:	b29a      	uxth	r2, r3
	PT_dptr->DRF_val = w;
 8001146:	81e3      	strh	r3, [r4, #14]
	if (DR_sample <= Prev_valDR && Prev_valDR > Prev_Prev_valDR) {
 8001148:	f9b0 1000 	ldrsh.w	r1, [r0]
 800114c:	4d87      	ldr	r5, [pc, #540]	; (800136c <PT_StateMachine+0x29c>)
	if (DR_sample < 0) DR_sample = -DR_sample;
 800114e:	bfbc      	itt	lt
 8001150:	4253      	neglt	r3, r2
 8001152:	b21b      	sxthlt	r3, r3
	if (DR_sample <= Prev_valDR && Prev_valDR > Prev_Prev_valDR) {
 8001154:	4299      	cmp	r1, r3
 8001156:	db04      	blt.n	8001162 <PT_StateMachine+0x92>
 8001158:	f9b5 6000 	ldrsh.w	r6, [r5]
 800115c:	428e      	cmp	r6, r1
 800115e:	f2c0 808a 	blt.w	8001276 <PT_StateMachine+0x1a6>
	Prev_Prev_valDR = Prev_valDR;
 8001162:	8029      	strh	r1, [r5, #0]
	if (PT_dptr->DRF_val > SQR_LIM_VAL || PT_dptr->DRF_val < (-SQR_LIM_VAL))
 8001164:	f502 7180 	add.w	r1, r2, #256	; 0x100
 8001168:	b289      	uxth	r1, r1
 800116a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
	Prev_valDR = DR_sample;
 800116e:	8003      	strh	r3, [r0, #0]
	if (PT_dptr->DRF_val > SQR_LIM_VAL || PT_dptr->DRF_val < (-SQR_LIM_VAL))
 8001170:	d80b      	bhi.n	800118a <PT_StateMachine+0xba>
		PT_dptr->SQF_val = temp*temp;
 8001172:	fb12 f202 	smulbb	r2, r2, r2
 8001176:	b293      	uxth	r3, r2
	if (PT_dptr->SQF_val > SQR_LIM_OUT)
 8001178:	f247 5230 	movw	r2, #30000	; 0x7530
 800117c:	4293      	cmp	r3, r2
 800117e:	8223      	strh	r3, [r4, #16]
 8001180:	d803      	bhi.n	800118a <PT_StateMachine+0xba>
	if (MV_sum < (UINT16_MAX - PT_dptr->SQF_val))
 8001182:	f5c3 417f 	rsb	r1, r3, #65280	; 0xff00
 8001186:	31ff      	adds	r1, #255	; 0xff
 8001188:	e004      	b.n	8001194 <PT_StateMachine+0xc4>
		PT_dptr->SQF_val = SQR_LIM_OUT;
 800118a:	f247 5330 	movw	r3, #30000	; 0x7530
 800118e:	8223      	strh	r3, [r4, #16]
 8001190:	f648 21cf 	movw	r1, #35535	; 0x8acf
	if (MV_sum < (UINT16_MAX - PT_dptr->SQF_val))
 8001194:	4876      	ldr	r0, [pc, #472]	; (8001370 <PT_StateMachine+0x2a0>)
 8001196:	8802      	ldrh	r2, [r0, #0]
 8001198:	428a      	cmp	r2, r1
	if (MV_sum > PT_dptr->MVA_buf[PT_dptr->MVA_pointer])
 800119a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800119e:	f101 0544 	add.w	r5, r1, #68	; 0x44
 80011a2:	eb04 0545 	add.w	r5, r4, r5, lsl #1
		MV_sum += PT_dptr->SQF_val;
 80011a6:	bfb8      	it	lt
 80011a8:	18d2      	addlt	r2, r2, r3
	if (MV_sum > PT_dptr->MVA_buf[PT_dptr->MVA_pointer])
 80011aa:	88ee      	ldrh	r6, [r5, #6]
	PT_dptr->MVA_buf[PT_dptr->MVA_pointer] = PT_dptr->SQF_val;
 80011ac:	80eb      	strh	r3, [r5, #6]
		MV_sum += PT_dptr->SQF_val;
 80011ae:	bfb4      	ite	lt
 80011b0:	b292      	uxthlt	r2, r2
		MV_sum = UINT16_MAX;
 80011b2:	f64f 72ff 	movwge	r2, #65535	; 0xffff
	if (MV_sum > PT_dptr->MVA_buf[PT_dptr->MVA_pointer])
 80011b6:	4296      	cmp	r6, r2
 80011b8:	d229      	bcs.n	800120e <PT_StateMachine+0x13e>
		MV_sum -= PT_dptr->MVA_buf[PT_dptr->MVA_pointer];
 80011ba:	1b92      	subs	r2, r2, r6
 80011bc:	b292      	uxth	r2, r2
	PT_dptr->MVA_val = MV_sum/(uint16_t) MVA_BUFFER_SIZE;
 80011be:	4d6d      	ldr	r5, [pc, #436]	; (8001374 <PT_StateMachine+0x2a4>)
 80011c0:	8002      	strh	r2, [r0, #0]
 80011c2:	0853      	lsrs	r3, r2, #1
	if (++PT_dptr->MVA_pointer == MVA_BUFFER_SIZE) 
 80011c4:	3101      	adds	r1, #1
 80011c6:	b209      	sxth	r1, r1
	PT_dptr->MVA_val = MV_sum/(uint16_t) MVA_BUFFER_SIZE;
 80011c8:	fba5 5303 	umull	r5, r3, r5, r3
 80011cc:	08db      	lsrs	r3, r3, #3
	if (++PT_dptr->MVA_pointer == MVA_BUFFER_SIZE) 
 80011ce:	2936      	cmp	r1, #54	; 0x36
	PT_dptr->MVA_val = MV_sum/(uint16_t) MVA_BUFFER_SIZE;
 80011d0:	8263      	strh	r3, [r4, #18]
	if (++PT_dptr->MVA_pointer == MVA_BUFFER_SIZE) 
 80011d2:	80a1      	strh	r1, [r4, #4]
 80011d4:	f000 80b9 	beq.w	800134a <PT_StateMachine+0x27a>
	if (PT_dptr->MVA_val <= Prev_val && Prev_val > Prev_Prev_val) {
 80011d8:	4967      	ldr	r1, [pc, #412]	; (8001378 <PT_StateMachine+0x2a8>)
 80011da:	880a      	ldrh	r2, [r1, #0]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d221      	bcs.n	8001224 <PT_StateMachine+0x154>
 80011e0:	4866      	ldr	r0, [pc, #408]	; (800137c <PT_StateMachine+0x2ac>)
	Prev_Prev_val = Prev_val;
 80011e2:	8002      	strh	r2, [r0, #0]
	PEAKI = PeakDtcI();
 80011e4:	2200      	movs	r2, #0
	Prev_val = PT_dptr->MVA_val;
 80011e6:	800b      	strh	r3, [r1, #0]
	PEAKI = PeakDtcI();
 80011e8:	f8ad 200e 	strh.w	r2, [sp, #14]
	if (!PEAKI && BlankTimeCnt)								// No beat, decrement BlankTime
 80011ec:	4a64      	ldr	r2, [pc, #400]	; (8001380 <PT_StateMachine+0x2b0>)
 80011ee:	f9b2 3000 	ldrsh.w	r3, [r2]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 80d0 	beq.w	8001398 <PT_StateMachine+0x2c8>
		if (--BlankTimeCnt == 0)							// If blanktime over place the oldest peak
 80011f8:	3b01      	subs	r3, #1
 80011fa:	b21b      	sxth	r3, r3
 80011fc:	8013      	strh	r3, [r2, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f040 8132 	bne.w	8001468 <PT_StateMachine+0x398>
			PEAKI = PEAKI_temp;
 8001204:	4b5f      	ldr	r3, [pc, #380]	; (8001384 <PT_StateMachine+0x2b4>)
 8001206:	8819      	ldrh	r1, [r3, #0]
 8001208:	f8ad 100e 	strh.w	r1, [sp, #14]
 800120c:	e04e      	b.n	80012ac <PT_StateMachine+0x1dc>
	if (++PT_dptr->MVA_pointer == MVA_BUFFER_SIZE) 
 800120e:	3101      	adds	r1, #1
 8001210:	b209      	sxth	r1, r1
 8001212:	2300      	movs	r3, #0
 8001214:	2936      	cmp	r1, #54	; 0x36
 8001216:	80a1      	strh	r1, [r4, #4]
 8001218:	8003      	strh	r3, [r0, #0]
	PT_dptr->MVA_val = MV_sum/(uint16_t) MVA_BUFFER_SIZE;
 800121a:	8263      	strh	r3, [r4, #18]
	if (++PT_dptr->MVA_pointer == MVA_BUFFER_SIZE) 
 800121c:	f000 8095 	beq.w	800134a <PT_StateMachine+0x27a>
	if (PT_dptr->MVA_val <= Prev_val && Prev_val > Prev_Prev_val) {
 8001220:	4955      	ldr	r1, [pc, #340]	; (8001378 <PT_StateMachine+0x2a8>)
 8001222:	880a      	ldrh	r2, [r1, #0]
 8001224:	4855      	ldr	r0, [pc, #340]	; (800137c <PT_StateMachine+0x2ac>)
 8001226:	8805      	ldrh	r5, [r0, #0]
 8001228:	4295      	cmp	r5, r2
 800122a:	d2da      	bcs.n	80011e2 <PT_StateMachine+0x112>
	Prev_Prev_val = Prev_val;
 800122c:	8002      	strh	r2, [r0, #0]
	Prev_val = PT_dptr->MVA_val;
 800122e:	800b      	strh	r3, [r1, #0]
	PEAKI = PeakDtcI();
 8001230:	f8ad 200e 	strh.w	r2, [sp, #14]
	if (!PEAKI && BlankTimeCnt)								// No beat, decrement BlankTime
 8001234:	2a00      	cmp	r2, #0
 8001236:	d0d9      	beq.n	80011ec <PT_StateMachine+0x11c>
	else if (PEAKI && !BlankTimeCnt)						// If no peak for peak for last 200msec, save the current peak
 8001238:	4851      	ldr	r0, [pc, #324]	; (8001380 <PT_StateMachine+0x2b0>)
 800123a:	f9b0 3000 	ldrsh.w	r3, [r0]
 800123e:	bb43      	cbnz	r3, 8001292 <PT_StateMachine+0x1c2>
	++Count_SinceRR;
 8001240:	4f51      	ldr	r7, [pc, #324]	; (8001388 <PT_StateMachine+0x2b8>)
		PEAKI = 0;
 8001242:	f8ad 300e 	strh.w	r3, [sp, #14]
	++Count_SinceRR;
 8001246:	883e      	ldrh	r6, [r7, #0]
	if (Count_SinceRR > PT_dptr->RR_Missed_L && SB_peakI > PT_dptr->ThI2 && PT_dptr->PT_state == DETECTING)
 8001248:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
		BlankTimeCnt = PT200MS;
 800124c:	2148      	movs	r1, #72	; 0x48
	++Count_SinceRR;
 800124e:	3601      	adds	r6, #1
 8001250:	b235      	sxth	r5, r6
		BlankTimeCnt = PT200MS;
 8001252:	8001      	strh	r1, [r0, #0]
		PEAKI_temp   = PEAKI;
 8001254:	494b      	ldr	r1, [pc, #300]	; (8001384 <PT_StateMachine+0x2b4>)
	++Count_SinceRR;
 8001256:	803d      	strh	r5, [r7, #0]
	if (Count_SinceRR > PT_dptr->RR_Missed_L && SB_peakI > PT_dptr->ThI2 && PT_dptr->PT_state == DETECTING)
 8001258:	42ab      	cmp	r3, r5
		PEAKI_temp   = PEAKI;
 800125a:	800a      	strh	r2, [r1, #0]
	++Count_SinceRR;
 800125c:	b2b6      	uxth	r6, r6
	if (Count_SinceRR > PT_dptr->RR_Missed_L && SB_peakI > PT_dptr->ThI2 && PT_dptr->PT_state == DETECTING)
 800125e:	f2c0 80a6 	blt.w	80013ae <PT_StateMachine+0x2de>
 8001262:	f04f 0800 	mov.w	r8, #0
	if (Count_SinceRR > PT4000MS) {
 8001266:	2d90      	cmp	r5, #144	; 0x90
 8001268:	dd01      	ble.n	800126e <PT_StateMachine+0x19e>
		PT_init();
 800126a:	f7ff fd1b 	bl	8000ca4 <PT_init>
}
 800126e:	4640      	mov	r0, r8
 8001270:	b005      	add	sp, #20
 8001272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (Prev_valDR > Best_PeakDR) Best_PeakDR = Prev_valDR;
 8001276:	4e45      	ldr	r6, [pc, #276]	; (800138c <PT_StateMachine+0x2bc>)
 8001278:	f9b6 7000 	ldrsh.w	r7, [r6]
 800127c:	428f      	cmp	r7, r1
 800127e:	bfb8      	it	lt
 8001280:	8031      	strhlt	r1, [r6, #0]
 8001282:	e76e      	b.n	8001162 <PT_StateMachine+0x92>
		if (Prev_valBP > Best_PeakBP) Best_PeakBP = Prev_valBP;
 8001284:	4f42      	ldr	r7, [pc, #264]	; (8001390 <PT_StateMachine+0x2c0>)
 8001286:	f9b7 c000 	ldrsh.w	ip, [r7]
 800128a:	4594      	cmp	ip, r2
 800128c:	bfb8      	it	lt
 800128e:	803a      	strhlt	r2, [r7, #0]
 8001290:	e73e      	b.n	8001110 <PT_StateMachine+0x40>
		if (PEAKI > PEAKI_temp)
 8001292:	4d3c      	ldr	r5, [pc, #240]	; (8001384 <PT_StateMachine+0x2b4>)
 8001294:	8829      	ldrh	r1, [r5, #0]
 8001296:	4291      	cmp	r1, r2
 8001298:	f0c0 80de 	bcc.w	8001458 <PT_StateMachine+0x388>
		else if (--BlankTimeCnt == 0)
 800129c:	3b01      	subs	r3, #1
 800129e:	b21b      	sxth	r3, r3
 80012a0:	8003      	strh	r3, [r0, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f040 815f 	bne.w	8001566 <PT_StateMachine+0x496>
			PEAKI = PEAKI_temp;
 80012a8:	f8ad 100e 	strh.w	r1, [sp, #14]
	++Count_SinceRR;
 80012ac:	4f36      	ldr	r7, [pc, #216]	; (8001388 <PT_StateMachine+0x2b8>)
	if (PT_dptr->PT_state == START_UP || PT_dptr->PT_state == LEARN_PH_1)		
 80012ae:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
	++Count_SinceRR;
 80012b2:	883d      	ldrh	r5, [r7, #0]
	if (PT_dptr->PT_state == START_UP || PT_dptr->PT_state == LEARN_PH_1)		
 80012b4:	b293      	uxth	r3, r2
	++Count_SinceRR;
 80012b6:	3501      	adds	r5, #1
 80012b8:	b2ae      	uxth	r6, r5
	if (PT_dptr->PT_state == START_UP || PT_dptr->PT_state == LEARN_PH_1)		
 80012ba:	2b01      	cmp	r3, #1
	++Count_SinceRR;
 80012bc:	b22d      	sxth	r5, r5
 80012be:	803d      	strh	r5, [r7, #0]
	if (PT_dptr->PT_state == START_UP || PT_dptr->PT_state == LEARN_PH_1)		
 80012c0:	f240 8148 	bls.w	8001554 <PT_StateMachine+0x484>
		if (PEAKI > PT_dptr->ThI1 && Best_PeakBP > PT_dptr->ThF1)
 80012c4:	8aa3      	ldrh	r3, [r4, #20]
 80012c6:	428b      	cmp	r3, r1
 80012c8:	f080 8107 	bcs.w	80014da <PT_StateMachine+0x40a>
 80012cc:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8001390 <PT_StateMachine+0x2c0>
 80012d0:	f9b4 001c 	ldrsh.w	r0, [r4, #28]
 80012d4:	f9b8 3000 	ldrsh.w	r3, [r8]
 80012d8:	4298      	cmp	r0, r3
 80012da:	f280 80fe 	bge.w	80014da <PT_StateMachine+0x40a>
			if (PT_dptr->PT_state == LEARN_PH_2)
 80012de:	2a02      	cmp	r2, #2
 80012e0:	f000 814b 	beq.w	800157a <PT_StateMachine+0x4aa>
				if (Count_SinceRR < PT360MS && (Best_PeakDR < (Old_PeakDR >> 2)))
 80012e4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800138c <PT_StateMachine+0x2bc>
 80012e8:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8001394 <PT_StateMachine+0x2c4>
 80012ec:	f9b9 b000 	ldrsh.w	fp, [r9]
 80012f0:	2d81      	cmp	r5, #129	; 0x81
 80012f2:	f300 80bc 	bgt.w	800146e <PT_StateMachine+0x39e>
 80012f6:	f9ba 2000 	ldrsh.w	r2, [sl]
 80012fa:	ebbb 0fa2 	cmp.w	fp, r2, asr #2
 80012fe:	f280 80b6 	bge.w	800146e <PT_StateMachine+0x39e>
**********************************************************************************/
void UpdateThF(int16_t *PEAKF, int8_t NOISE_F)
{
	// ------ Update Noise & Signal Estimate ------ //
	if (NOISE_F) {
		PT_dptr->NPKF -= PT_dptr->NPKF >> 3;
 8001302:	f9b4 2020 	ldrsh.w	r2, [r4, #32]
		PT_dptr->NPKF += *PEAKF >> 3;
 8001306:	eb02 03e3 	add.w	r3, r2, r3, asr #3
 800130a:	eba3 03e2 	sub.w	r3, r3, r2, asr #3
		PT_dptr->NPKI -= PT_dptr->NPKI >> 3;
 800130e:	8b22      	ldrh	r2, [r4, #24]
		PT_dptr->NPKI += *PEAKI >> 3;
 8001310:	eba2 02d2 	sub.w	r2, r2, r2, lsr #3
 8001314:	eb02 01d1 	add.w	r1, r2, r1, lsr #3
		PT_dptr->SPKF -= PT_dptr->SPKF >> 3;
		PT_dptr->SPKF += *PEAKF >> 3;
	}

	// --------- Update Thresholds ---------------- //
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 8001318:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
		PT_dptr->NPKF += *PEAKF >> 3;
 800131c:	b218      	sxth	r0, r3
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 800131e:	1a12      	subs	r2, r2, r0
 8001320:	1092      	asrs	r2, r2, #2
 8001322:	fa12 f383 	uxtah	r3, r2, r3
 8001326:	b21b      	sxth	r3, r3
 8001328:	83a3      	strh	r3, [r4, #28]
	PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;
 800132a:	105b      	asrs	r3, r3, #1
 800132c:	8463      	strh	r3, [r4, #34]	; 0x22
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 800132e:	8ae3      	ldrh	r3, [r4, #22]
		PT_dptr->NPKF += *PEAKF >> 3;
 8001330:	8420      	strh	r0, [r4, #32]
		PT_dptr->NPKI += *PEAKI >> 3;
 8001332:	b289      	uxth	r1, r1
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 8001334:	1a5b      	subs	r3, r3, r1
		PT_dptr->NPKI += *PEAKI >> 3;
 8001336:	8321      	strh	r1, [r4, #24]
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 8001338:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 800133c:	b289      	uxth	r1, r1
 800133e:	82a1      	strh	r1, [r4, #20]
	PT_dptr->ThI2 = PT_dptr->ThI1 >> 1;
 8001340:	0849      	lsrs	r1, r1, #1
 8001342:	8361      	strh	r1, [r4, #26]
	int16_t BeatDelay = 0;
 8001344:	f04f 0800 	mov.w	r8, #0
}
 8001348:	e146      	b.n	80015d8 <PT_StateMachine+0x508>
	if (PT_dptr->MVA_val <= Prev_val && Prev_val > Prev_Prev_val) {
 800134a:	490b      	ldr	r1, [pc, #44]	; (8001378 <PT_StateMachine+0x2a8>)
		PT_dptr->MVA_pointer = 0;
 800134c:	2200      	movs	r2, #0
 800134e:	80a2      	strh	r2, [r4, #4]
	if (PT_dptr->MVA_val <= Prev_val && Prev_val > Prev_Prev_val) {
 8001350:	880a      	ldrh	r2, [r1, #0]
 8001352:	429a      	cmp	r2, r3
 8001354:	f4ff af44 	bcc.w	80011e0 <PT_StateMachine+0x110>
 8001358:	e764      	b.n	8001224 <PT_StateMachine+0x154>
 800135a:	bf00      	nop
 800135c:	20000310 	.word	0x20000310
 8001360:	20000432 	.word	0x20000432
 8001364:	2000042c 	.word	0x2000042c
 8001368:	20000434 	.word	0x20000434
 800136c:	2000042e 	.word	0x2000042e
 8001370:	20000308 	.word	0x20000308
 8001374:	4bda12f7 	.word	0x4bda12f7
 8001378:	20000430 	.word	0x20000430
 800137c:	2000042a 	.word	0x2000042a
 8001380:	20000300 	.word	0x20000300
 8001384:	2000030c 	.word	0x2000030c
 8001388:	20000302 	.word	0x20000302
 800138c:	200002fe 	.word	0x200002fe
 8001390:	200002fc 	.word	0x200002fc
 8001394:	2000030a 	.word	0x2000030a
	++Count_SinceRR;
 8001398:	4f95      	ldr	r7, [pc, #596]	; (80015f0 <PT_StateMachine+0x520>)
 800139a:	883e      	ldrh	r6, [r7, #0]
 800139c:	3601      	adds	r6, #1
 800139e:	b235      	sxth	r5, r6
 80013a0:	803d      	strh	r5, [r7, #0]
 80013a2:	b2b6      	uxth	r6, r6
	if (Count_SinceRR > PT_dptr->RR_Missed_L && SB_peakI > PT_dptr->ThI2 && PT_dptr->PT_state == DETECTING)
 80013a4:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
 80013a8:	42ab      	cmp	r3, r5
 80013aa:	f6bf af5a 	bge.w	8001262 <PT_StateMachine+0x192>
 80013ae:	4a91      	ldr	r2, [pc, #580]	; (80015f4 <PT_StateMachine+0x524>)
 80013b0:	8b61      	ldrh	r1, [r4, #26]
 80013b2:	8813      	ldrh	r3, [r2, #0]
 80013b4:	4299      	cmp	r1, r3
 80013b6:	f04f 0800 	mov.w	r8, #0
 80013ba:	f4bf af54 	bcs.w	8001266 <PT_StateMachine+0x196>
 80013be:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80013c2:	2903      	cmp	r1, #3
 80013c4:	f47f af4f 	bne.w	8001266 <PT_StateMachine+0x196>
		if (SB_peakBP > PT_dptr->ThF2)
 80013c8:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8001608 <PT_StateMachine+0x538>
 80013cc:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80013d0:	f9b9 1000 	ldrsh.w	r1, [r9]
 80013d4:	4288      	cmp	r0, r1
 80013d6:	f6bf af46 	bge.w	8001266 <PT_StateMachine+0x196>
		PT_dptr->SPKI -= PT_dptr->SPKI >> 3;
 80013da:	8ae0      	ldrh	r0, [r4, #22]
			UpdateRR(SBcntI);
 80013dc:	4d86      	ldr	r5, [pc, #536]	; (80015f8 <PT_StateMachine+0x528>)
 80013de:	9200      	str	r2, [sp, #0]
		PT_dptr->SPKI += *PEAKI >> 3;
 80013e0:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 80013e4:	eba3 03d0 	sub.w	r3, r3, r0, lsr #3
		PT_dptr->SPKF -= PT_dptr->SPKF >> 3;
 80013e8:	f9b4 001e 	ldrsh.w	r0, [r4, #30]
		PT_dptr->SPKF += *PEAKF >> 3;
 80013ec:	eb00 01e1 	add.w	r1, r0, r1, asr #3
 80013f0:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 80013f4:	8b20      	ldrh	r0, [r4, #24]
		PT_dptr->SPKI += *PEAKI >> 3;
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	82e3      	strh	r3, [r4, #22]
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 80013fa:	1a1b      	subs	r3, r3, r0
 80013fc:	eb00 03a3 	add.w	r3, r0, r3, asr #2
 8001400:	b29b      	uxth	r3, r3
 8001402:	82a3      	strh	r3, [r4, #20]
	PT_dptr->ThI2 = PT_dptr->ThI1 >> 1;
 8001404:	085b      	lsrs	r3, r3, #1
 8001406:	8363      	strh	r3, [r4, #26]
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 8001408:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
		PT_dptr->SPKF += *PEAKF >> 3;
 800140c:	b209      	sxth	r1, r1
 800140e:	83e1      	strh	r1, [r4, #30]
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 8001410:	1ac9      	subs	r1, r1, r3
 8001412:	eb03 01a1 	add.w	r1, r3, r1, asr #2
 8001416:	b209      	sxth	r1, r1
 8001418:	83a1      	strh	r1, [r4, #28]
	PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;
 800141a:	1049      	asrs	r1, r1, #1
 800141c:	8461      	strh	r1, [r4, #34]	; 0x22
			UpdateRR(SBcntI);
 800141e:	f9b5 4000 	ldrsh.w	r4, [r5]
 8001422:	4620      	mov	r0, r4
 8001424:	f7ff fdcc 	bl	8000fc0 <UpdateRR>
			Old_PeakDR = SB_peakDR;		// Store the derivative for T-wave test
 8001428:	4974      	ldr	r1, [pc, #464]	; (80015fc <PT_StateMachine+0x52c>)
			SB_peakI = 0;
 800142a:	9a00      	ldr	r2, [sp, #0]
			Old_PeakDR = SB_peakDR;		// Store the derivative for T-wave test
 800142c:	4874      	ldr	r0, [pc, #464]	; (8001600 <PT_StateMachine+0x530>)
			Best_PeakDR = Best_PeakBP = 0;
 800142e:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 800160c <PT_StateMachine+0x53c>
 8001432:	2300      	movs	r3, #0
			BeatDelay = Count_SinceRR = Count_SinceRR - SBcntI;
 8001434:	1b34      	subs	r4, r6, r4
			Best_PeakDR = Best_PeakBP = 0;
 8001436:	4e73      	ldr	r6, [pc, #460]	; (8001604 <PT_StateMachine+0x534>)
			SBcntI = 0;
 8001438:	802b      	strh	r3, [r5, #0]
			SB_peakI = 0;
 800143a:	8013      	strh	r3, [r2, #0]
			BeatDelay = Count_SinceRR = Count_SinceRR - SBcntI;
 800143c:	b225      	sxth	r5, r4
			Old_PeakDR = SB_peakDR;		// Store the derivative for T-wave test
 800143e:	880a      	ldrh	r2, [r1, #0]
			Best_PeakDR = Best_PeakBP = 0;
 8001440:	f8ac 3000 	strh.w	r3, [ip]
			BeatDelay += (GENERAL_DELAY + PT200MS);
 8001444:	347a      	adds	r4, #122	; 0x7a
			Best_PeakDR = Best_PeakBP = 0;
 8001446:	8033      	strh	r3, [r6, #0]
			SB_peakBP = 0;
 8001448:	f8a9 3000 	strh.w	r3, [r9]
			Old_PeakDR = SB_peakDR;		// Store the derivative for T-wave test
 800144c:	8002      	strh	r2, [r0, #0]
			SB_peakDR = 0;
 800144e:	800b      	strh	r3, [r1, #0]
			BeatDelay = Count_SinceRR = Count_SinceRR - SBcntI;
 8001450:	803d      	strh	r5, [r7, #0]
			BeatDelay += (GENERAL_DELAY + PT200MS);
 8001452:	fa0f f884 	sxth.w	r8, r4
			SB_peakI = 0;
 8001456:	e706      	b.n	8001266 <PT_StateMachine+0x196>
			BlankTimeCnt = PT200MS;
 8001458:	2348      	movs	r3, #72	; 0x48
 800145a:	8003      	strh	r3, [r0, #0]
			PEAKI = 0;
 800145c:	2300      	movs	r3, #0
	++Count_SinceRR;
 800145e:	4f64      	ldr	r7, [pc, #400]	; (80015f0 <PT_StateMachine+0x520>)
			PEAKI_temp = PEAKI;
 8001460:	802a      	strh	r2, [r5, #0]
			PEAKI = 0;
 8001462:	f8ad 300e 	strh.w	r3, [sp, #14]
	++Count_SinceRR;
 8001466:	e798      	b.n	800139a <PT_StateMachine+0x2ca>
		if (PEAKI > 0)
 8001468:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800146c:	e71e      	b.n	80012ac <PT_StateMachine+0x1dc>
		PT_dptr->SPKF -= PT_dptr->SPKF >> 3;
 800146e:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
		PT_dptr->SPKF += *PEAKF >> 3;
 8001472:	eb02 03e3 	add.w	r3, r2, r3, asr #3
 8001476:	eba3 03e2 	sub.w	r3, r3, r2, asr #3
		PT_dptr->SPKI -= PT_dptr->SPKI >> 3;
 800147a:	8ae2      	ldrh	r2, [r4, #22]
		PT_dptr->SPKI += *PEAKI >> 3;
 800147c:	eba2 02d2 	sub.w	r2, r2, r2, lsr #3
 8001480:	eb02 01d1 	add.w	r1, r2, r1, lsr #3
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 8001484:	8b22      	ldrh	r2, [r4, #24]
		PT_dptr->SPKI += *PEAKI >> 3;
 8001486:	b289      	uxth	r1, r1
 8001488:	82e1      	strh	r1, [r4, #22]
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 800148a:	1a89      	subs	r1, r1, r2
 800148c:	eb02 01a1 	add.w	r1, r2, r1, asr #2
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 8001490:	f9b4 2020 	ldrsh.w	r2, [r4, #32]
		PT_dptr->SPKF += *PEAKF >> 3;
 8001494:	b21b      	sxth	r3, r3
 8001496:	83e3      	strh	r3, [r4, #30]
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 8001498:	1a9b      	subs	r3, r3, r2
 800149a:	eb02 03a3 	add.w	r3, r2, r3, asr #2
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 800149e:	b289      	uxth	r1, r1
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 80014a0:	b21b      	sxth	r3, r3
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 80014a2:	82a1      	strh	r1, [r4, #20]
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 80014a4:	83a3      	strh	r3, [r4, #28]
	PT_dptr->ThI2 = PT_dptr->ThI1 >> 1;
 80014a6:	0849      	lsrs	r1, r1, #1
	PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;
 80014a8:	105b      	asrs	r3, r3, #1
					UpdateRR(Count_SinceRR);
 80014aa:	4628      	mov	r0, r5
	PT_dptr->ThI2 = PT_dptr->ThI1 >> 1;
 80014ac:	8361      	strh	r1, [r4, #26]
	PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;
 80014ae:	8463      	strh	r3, [r4, #34]	; 0x22
					UpdateRR(Count_SinceRR);
 80014b0:	f7ff fd86 	bl	8000fc0 <UpdateRR>
					SBcntI = 0;
 80014b4:	4c50      	ldr	r4, [pc, #320]	; (80015f8 <PT_StateMachine+0x528>)
					SB_peakBP = 0;
 80014b6:	4854      	ldr	r0, [pc, #336]	; (8001608 <PT_StateMachine+0x538>)
					SB_peakDR = 0;
 80014b8:	4950      	ldr	r1, [pc, #320]	; (80015fc <PT_StateMachine+0x52c>)
					SB_peakI = 0;
 80014ba:	4a4e      	ldr	r2, [pc, #312]	; (80015f4 <PT_StateMachine+0x524>)
					Old_PeakDR = Best_PeakDR;									// Store the derivative for T-wave test
 80014bc:	f8aa b000 	strh.w	fp, [sl]
					Count_SinceRR = 0;
 80014c0:	2300      	movs	r3, #0
					Best_PeakDR = Best_PeakBP = 0;
 80014c2:	f8a8 3000 	strh.w	r3, [r8]
					Count_SinceRR = 0;
 80014c6:	803b      	strh	r3, [r7, #0]
					Best_PeakDR = Best_PeakBP = 0;
 80014c8:	f8a9 3000 	strh.w	r3, [r9]
					SBcntI = 0;
 80014cc:	8023      	strh	r3, [r4, #0]
					SB_peakBP = 0;
 80014ce:	8003      	strh	r3, [r0, #0]
					SB_peakDR = 0;
 80014d0:	800b      	strh	r3, [r1, #0]
					SB_peakI = 0;
 80014d2:	8013      	strh	r3, [r2, #0]
					BeatDelay = GENERAL_DELAY + PT200MS;
 80014d4:	f04f 087a 	mov.w	r8, #122	; 0x7a
 80014d8:	e6c9      	b.n	800126e <PT_StateMachine+0x19e>
		else if (PEAKI > 0)
 80014da:	2900      	cmp	r1, #0
 80014dc:	f43f af62 	beq.w	80013a4 <PT_StateMachine+0x2d4>
		PT_dptr->NPKF += *PEAKF >> 3;
 80014e0:	4b4a      	ldr	r3, [pc, #296]	; (800160c <PT_StateMachine+0x53c>)
		PT_dptr->NPKF -= PT_dptr->NPKF >> 3;
 80014e2:	f9b4 c020 	ldrsh.w	ip, [r4, #32]
		PT_dptr->NPKF += *PEAKF >> 3;
 80014e6:	f9b3 0000 	ldrsh.w	r0, [r3]
		PT_dptr->NPKI -= PT_dptr->NPKI >> 3;
 80014ea:	8b23      	ldrh	r3, [r4, #24]
		PT_dptr->NPKF += *PEAKF >> 3;
 80014ec:	eb0c 02e0 	add.w	r2, ip, r0, asr #3
 80014f0:	eba2 02ec 	sub.w	r2, r2, ip, asr #3
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 80014f4:	f9b4 c01e 	ldrsh.w	ip, [r4, #30]
		PT_dptr->NPKF += *PEAKF >> 3;
 80014f8:	fa0f fe82 	sxth.w	lr, r2
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 80014fc:	ebac 0c0e 	sub.w	ip, ip, lr
 8001500:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8001504:	fa1c f282 	uxtah	r2, ip, r2
 8001508:	b212      	sxth	r2, r2
		PT_dptr->NPKI += *PEAKI >> 3;
 800150a:	eba3 03d3 	sub.w	r3, r3, r3, lsr #3
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 800150e:	83a2      	strh	r2, [r4, #28]
	PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;
 8001510:	1052      	asrs	r2, r2, #1
		PT_dptr->NPKI += *PEAKI >> 3;
 8001512:	eb03 03d1 	add.w	r3, r3, r1, lsr #3
	PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;
 8001516:	8462      	strh	r2, [r4, #34]	; 0x22
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 8001518:	8ae2      	ldrh	r2, [r4, #22]
		PT_dptr->NPKF += *PEAKF >> 3;
 800151a:	f8a4 e020 	strh.w	lr, [r4, #32]
		PT_dptr->NPKI += *PEAKI >> 3;
 800151e:	b29b      	uxth	r3, r3
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 8001520:	1ad2      	subs	r2, r2, r3
		PT_dptr->NPKI += *PEAKI >> 3;
 8001522:	8323      	strh	r3, [r4, #24]
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 8001524:	eb03 03a2 	add.w	r3, r3, r2, asr #2
 8001528:	b29b      	uxth	r3, r3
 800152a:	82a3      	strh	r3, [r4, #20]
	PT_dptr->ThI2 = PT_dptr->ThI1 >> 1;
 800152c:	085b      	lsrs	r3, r3, #1
 800152e:	8363      	strh	r3, [r4, #26]
			if (PEAKI > SB_peakI && Count_SinceRR >= PT360MS)
 8001530:	4b30      	ldr	r3, [pc, #192]	; (80015f4 <PT_StateMachine+0x524>)
 8001532:	881a      	ldrh	r2, [r3, #0]
 8001534:	428a      	cmp	r2, r1
 8001536:	f4bf af35 	bcs.w	80013a4 <PT_StateMachine+0x2d4>
 800153a:	2d81      	cmp	r5, #129	; 0x81
 800153c:	f77f af32 	ble.w	80013a4 <PT_StateMachine+0x2d4>
				SB_peakI = PEAKI;											// Store Integ Sig peak 
 8001540:	8019      	strh	r1, [r3, #0]
				SB_peakDR = Best_PeakDR;									// Derivative of SB point
 8001542:	4b30      	ldr	r3, [pc, #192]	; (8001604 <PT_StateMachine+0x534>)
 8001544:	881a      	ldrh	r2, [r3, #0]
				SB_peakBP = Best_PeakBP;									// Store BP Sig peak
 8001546:	4b30      	ldr	r3, [pc, #192]	; (8001608 <PT_StateMachine+0x538>)
 8001548:	8018      	strh	r0, [r3, #0]
				SB_peakDR = Best_PeakDR;									// Derivative of SB point
 800154a:	4b2c      	ldr	r3, [pc, #176]	; (80015fc <PT_StateMachine+0x52c>)
 800154c:	801a      	strh	r2, [r3, #0]
				SBcntI = Count_SinceRR;										// Store Indice
 800154e:	4b2a      	ldr	r3, [pc, #168]	; (80015f8 <PT_StateMachine+0x528>)
 8001550:	801d      	strh	r5, [r3, #0]
 8001552:	e727      	b.n	80013a4 <PT_StateMachine+0x2d4>
		if (PEAKI > 0)
 8001554:	2900      	cmp	r1, #0
 8001556:	f43f af25 	beq.w	80013a4 <PT_StateMachine+0x2d4>
			LearningPhase1(&PEAKI, &Best_PeakBP);
 800155a:	492c      	ldr	r1, [pc, #176]	; (800160c <PT_StateMachine+0x53c>)
 800155c:	f10d 000e 	add.w	r0, sp, #14
 8001560:	f7ff fc44 	bl	8000dec <LearningPhase1>
 8001564:	e71e      	b.n	80013a4 <PT_StateMachine+0x2d4>
	++Count_SinceRR;
 8001566:	4f22      	ldr	r7, [pc, #136]	; (80015f0 <PT_StateMachine+0x520>)
 8001568:	883d      	ldrh	r5, [r7, #0]
 800156a:	3501      	adds	r5, #1
			PEAKI = 0;
 800156c:	2300      	movs	r3, #0
	++Count_SinceRR;
 800156e:	b2ae      	uxth	r6, r5
 8001570:	b22d      	sxth	r5, r5
			PEAKI = 0;
 8001572:	f8ad 300e 	strh.w	r3, [sp, #14]
	++Count_SinceRR;
 8001576:	803d      	strh	r5, [r7, #0]
	if (PT_dptr->PT_state == START_UP || PT_dptr->PT_state == LEARN_PH_1)		
 8001578:	e714      	b.n	80013a4 <PT_StateMachine+0x2d4>
		PT_dptr->SPKF -= PT_dptr->SPKF >> 3;
 800157a:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
				Old_PeakDR = Best_PeakDR;
 800157e:	4820      	ldr	r0, [pc, #128]	; (8001600 <PT_StateMachine+0x530>)
		PT_dptr->SPKF += *PEAKF >> 3;
 8001580:	eb02 03e3 	add.w	r3, r2, r3, asr #3
 8001584:	eba3 03e2 	sub.w	r3, r3, r2, asr #3
		PT_dptr->SPKI -= PT_dptr->SPKI >> 3;
 8001588:	8ae2      	ldrh	r2, [r4, #22]
		PT_dptr->SPKI += *PEAKI >> 3;
 800158a:	eba2 02d2 	sub.w	r2, r2, r2, lsr #3
 800158e:	eb02 01d1 	add.w	r1, r2, r1, lsr #3
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 8001592:	8b22      	ldrh	r2, [r4, #24]
		PT_dptr->SPKI += *PEAKI >> 3;
 8001594:	b289      	uxth	r1, r1
 8001596:	82e1      	strh	r1, [r4, #22]
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 8001598:	1a89      	subs	r1, r1, r2
 800159a:	eb02 01a1 	add.w	r1, r2, r1, asr #2
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 800159e:	f9b4 2020 	ldrsh.w	r2, [r4, #32]
		PT_dptr->SPKF += *PEAKF >> 3;
 80015a2:	b21b      	sxth	r3, r3
 80015a4:	83e3      	strh	r3, [r4, #30]
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 80015a6:	1a9b      	subs	r3, r3, r2
 80015a8:	eb02 03a3 	add.w	r3, r2, r3, asr #2
				PT_dptr->PT_state = DETECTING;
 80015ac:	2203      	movs	r2, #3
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 80015ae:	b21b      	sxth	r3, r3
				PT_dptr->PT_state = DETECTING;
 80015b0:	80e2      	strh	r2, [r4, #6]
				Old_PeakDR = Best_PeakDR;
 80015b2:	4a14      	ldr	r2, [pc, #80]	; (8001604 <PT_StateMachine+0x534>)
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 80015b4:	83a3      	strh	r3, [r4, #28]
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 80015b6:	b289      	uxth	r1, r1
	PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;
 80015b8:	105b      	asrs	r3, r3, #1
				Old_PeakDR = Best_PeakDR;
 80015ba:	8815      	ldrh	r5, [r2, #0]
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 80015bc:	82a1      	strh	r1, [r4, #20]
	PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;
 80015be:	8463      	strh	r3, [r4, #34]	; 0x22
	PT_dptr->ThI2 = PT_dptr->ThI1 >> 1;
 80015c0:	0849      	lsrs	r1, r1, #1
				Count_SinceRR = 0;
 80015c2:	2300      	movs	r3, #0
				Best_PeakBP = 0;
 80015c4:	f8a8 3000 	strh.w	r3, [r8]
				Old_PeakDR = Best_PeakDR;
 80015c8:	8005      	strh	r5, [r0, #0]
	PT_dptr->ThI2 = PT_dptr->ThI1 >> 1;
 80015ca:	8361      	strh	r1, [r4, #26]
				Count_SinceRR = 0;
 80015cc:	803b      	strh	r3, [r7, #0]
				Best_PeakDR = 0;
 80015ce:	461e      	mov	r6, r3
 80015d0:	8013      	strh	r3, [r2, #0]
				PT_dptr->PT_state = DETECTING;
 80015d2:	461d      	mov	r5, r3
				BeatDelay = GENERAL_DELAY + PT200MS;
 80015d4:	f04f 087a 	mov.w	r8, #122	; 0x7a
	if (Count_SinceRR > PT_dptr->RR_Missed_L && SB_peakI > PT_dptr->ThI2 && PT_dptr->PT_state == DETECTING)
 80015d8:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
 80015dc:	42ab      	cmp	r3, r5
 80015de:	f6bf ae46 	bge.w	800126e <PT_StateMachine+0x19e>
 80015e2:	4a04      	ldr	r2, [pc, #16]	; (80015f4 <PT_StateMachine+0x524>)
 80015e4:	8813      	ldrh	r3, [r2, #0]
 80015e6:	428b      	cmp	r3, r1
 80015e8:	f63f aee9 	bhi.w	80013be <PT_StateMachine+0x2ee>
 80015ec:	e63f      	b.n	800126e <PT_StateMachine+0x19e>
 80015ee:	bf00      	nop
 80015f0:	20000302 	.word	0x20000302
 80015f4:	20000442 	.word	0x20000442
 80015f8:	20000444 	.word	0x20000444
 80015fc:	20000440 	.word	0x20000440
 8001600:	2000030a 	.word	0x2000030a
 8001604:	200002fe 	.word	0x200002fe
 8001608:	2000043e 	.word	0x2000043e
 800160c:	200002fc 	.word	0x200002fc

08001610 <PT_get_LPFilter_output>:



// ------Returns LP filter value ------ //
int16_t PT_get_LPFilter_output(void) {
	return (PT_dptr->LPF_val);
 8001610:	4b01      	ldr	r3, [pc, #4]	; (8001618 <PT_get_LPFilter_output+0x8>)
}
 8001612:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8001616:	4770      	bx	lr
 8001618:	20000310 	.word	0x20000310

0800161c <PT_get_HPFilter_output>:

// ------Returns HP filter value ------ //
int16_t PT_get_HPFilter_output(void) {
	return (PT_dptr->HPF_val);
 800161c:	4b01      	ldr	r3, [pc, #4]	; (8001624 <PT_get_HPFilter_output+0x8>)
}
 800161e:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8001622:	4770      	bx	lr
 8001624:	20000310 	.word	0x20000310

08001628 <PT_get_DRFilter_output>:

// ------Returns Dr filter value ------ //
int16_t PT_get_DRFilter_output(void) {
	return (PT_dptr->DRF_val);
 8001628:	4b01      	ldr	r3, [pc, #4]	; (8001630 <PT_get_DRFilter_output+0x8>)
}
 800162a:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800162e:	4770      	bx	lr
 8001630:	20000310 	.word	0x20000310

08001634 <PT_get_MVFilter_output>:

// ------Returns MVA filter value ------ //
uint16_t PT_get_MVFilter_output(void) {
	return (PT_dptr->MVA_val);
 8001634:	4b01      	ldr	r3, [pc, #4]	; (800163c <PT_get_MVFilter_output+0x8>)
}
 8001636:	8a58      	ldrh	r0, [r3, #18]
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	20000310 	.word	0x20000310

08001640 <PT_get_SQRFilter_output>:

// ------Returns SQR filter value ------ //
uint16_t PT_get_SQRFilter_output(void) {
	return (PT_dptr->SQF_val);
 8001640:	4b01      	ldr	r3, [pc, #4]	; (8001648 <PT_get_SQRFilter_output+0x8>)
}
 8001642:	8a18      	ldrh	r0, [r3, #16]
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000310 	.word	0x20000310

0800164c <PT_get_ThI1_output>:
}


// ------Returns the main threshold integrated signal Th value ------ //
uint16_t PT_get_ThI1_output(void) {
	return (PT_dptr->ThI1);
 800164c:	4b01      	ldr	r3, [pc, #4]	; (8001654 <PT_get_ThI1_output+0x8>)
}
 800164e:	8a98      	ldrh	r0, [r3, #20]
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	20000310 	.word	0x20000310

08001658 <PT_get_ThF1_output>:

// ------Returns the main threshold BP signal Th value ------ //
int16_t PT_get_ThF1_output(void) {
	return (PT_dptr->ThF1);
 8001658:	4b01      	ldr	r3, [pc, #4]	; (8001660 <PT_get_ThF1_output+0x8>)
}
 800165a:	f9b3 001c 	ldrsh.w	r0, [r3, #28]
 800165e:	4770      	bx	lr
 8001660:	20000310 	.word	0x20000310

08001664 <arm_PT_init>:
		movingAverageBufferIndex = 0;
	}
}

void arm_PT_init()
{
 8001664:	b510      	push	{r4, lr}
 8001666:	b082      	sub	sp, #8
	//Initiate filter function
	arm_fir_init_f32(&Derivative, NUM_DERIVATIVE_TAPS, (float32_t *)&firDerivativeCoefficients[0], &firStateF32[0], BLOCK_SIZE);
 8001668:	2401      	movs	r4, #1
 800166a:	9400      	str	r4, [sp, #0]
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <arm_PT_init+0x50>)
 800166e:	4a12      	ldr	r2, [pc, #72]	; (80016b8 <arm_PT_init+0x54>)
 8001670:	4812      	ldr	r0, [pc, #72]	; (80016bc <arm_PT_init+0x58>)
 8001672:	2105      	movs	r1, #5
 8001674:	f006 f854 	bl	8007720 <arm_fir_init_f32>
	arm_biquad_cascade_df1_init_f32 (&highPassFilter,1, (float32_t *)&iirHighPassFilterCoefficients[0], &highPassFilterStateF32[0]);
 8001678:	4621      	mov	r1, r4
 800167a:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <arm_PT_init+0x5c>)
 800167c:	4a11      	ldr	r2, [pc, #68]	; (80016c4 <arm_PT_init+0x60>)
 800167e:	4812      	ldr	r0, [pc, #72]	; (80016c8 <arm_PT_init+0x64>)
 8001680:	f006 f80a 	bl	8007698 <arm_biquad_cascade_df1_init_f32>
	arm_biquad_cascade_df1_init_f32 (&lowPassFilter,1, (float32_t *)&iirLowPassFilterCoefficients[0], &lowPassFilterStateF32[0]);
 8001684:	4621      	mov	r1, r4
 8001686:	4a11      	ldr	r2, [pc, #68]	; (80016cc <arm_PT_init+0x68>)
 8001688:	4811      	ldr	r0, [pc, #68]	; (80016d0 <arm_PT_init+0x6c>)
 800168a:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <arm_PT_init+0x70>)
	//Reset buffors
	for (int i = 0; i<NUM_DERIVATIVE_TAPS_ARRAY_SIZE; i++)
	{
		derivativeBuffer[i]=0;
	}
	movingAverageBufferIndex=0;
 800168c:	4c12      	ldr	r4, [pc, #72]	; (80016d8 <arm_PT_init+0x74>)
	arm_biquad_cascade_df1_init_f32 (&lowPassFilter,1, (float32_t *)&iirLowPassFilterCoefficients[0], &lowPassFilterStateF32[0]);
 800168e:	f006 f803 	bl	8007698 <arm_biquad_cascade_df1_init_f32>
		derivativeBuffer[i]=0;
 8001692:	4b12      	ldr	r3, [pc, #72]	; (80016dc <arm_PT_init+0x78>)
 8001694:	2000      	movs	r0, #0
 8001696:	6018      	str	r0, [r3, #0]
 8001698:	6058      	str	r0, [r3, #4]
 800169a:	6098      	str	r0, [r3, #8]
 800169c:	60d8      	str	r0, [r3, #12]
 800169e:	6118      	str	r0, [r3, #16]
	for (int i = 0; i<MovingAverageSampleCount; i++)
	{
		movingAverageBuffer[i] = 0;
 80016a0:	480f      	ldr	r0, [pc, #60]	; (80016e0 <arm_PT_init+0x7c>)
	movingAverageBufferIndex=0;
 80016a2:	2100      	movs	r1, #0
		movingAverageBuffer[i] = 0;
 80016a4:	22d8      	movs	r2, #216	; 0xd8
	movingAverageBufferIndex=0;
 80016a6:	6021      	str	r1, [r4, #0]
	}
}
 80016a8:	b002      	add	sp, #8
 80016aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		movingAverageBuffer[i] = 0;
 80016ae:	f006 bbe9 	b.w	8007e84 <memset>
 80016b2:	bf00      	nop
 80016b4:	20000488 	.word	0x20000488
 80016b8:	0800c768 	.word	0x0800c768
 80016bc:	20000450 	.word	0x20000450
 80016c0:	200004ac 	.word	0x200004ac
 80016c4:	0800c77c 	.word	0x0800c77c
 80016c8:	2000049c 	.word	0x2000049c
 80016cc:	0800c790 	.word	0x0800c790
 80016d0:	200004c0 	.word	0x200004c0
 80016d4:	200004d0 	.word	0x200004d0
 80016d8:	200005bc 	.word	0x200005bc
 80016dc:	20000474 	.word	0x20000474
 80016e0:	200004e4 	.word	0x200004e4

080016e4 <arm_PT_ST>:
float previousMean = 0, TresholdI = 0, SignalLevelI = 0, NoiseLevelI = 0;
float previousSignalPeak = 0, TresholdF = 0, SignalLevelF = 0, NoiseLevelF = 0;
uint16_t peakTimeDelay = 0, latencyDelay = 0;
uint8_t rissingEdge = 0;
int16_t arm_PT_ST(int16_t sample)
{
 80016e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016e8:	ed2d 8b02 	vpush	{d8}
	float32_t newSample = (float)sample;
 80016ec:	ee07 0a90 	vmov	s15, r0
	//low pass filter operation
	arm_biquad_cascade_df1_f32 (&lowPassFilter, &newSample,&lowPassFilterResult,1);
 80016f0:	4c9c      	ldr	r4, [pc, #624]	; (8001964 <arm_PT_ST+0x280>)
 80016f2:	489d      	ldr	r0, [pc, #628]	; (8001968 <arm_PT_ST+0x284>)
	//Derivative with FIR filter
	//putOnMovingAverageBuffer(lowPassFilterResult);

	//Store potential peak value (QRS can be also minimum or maximum)
	float potentialPeak = lowPassFilterResult*lowPassFilterResult;
	if (potentialPeak>previousSignalPeak)
 80016f4:	4d9d      	ldr	r5, [pc, #628]	; (800196c <arm_PT_ST+0x288>)
 80016f6:	f8df 82d8 	ldr.w	r8, [pc, #728]	; 80019d0 <arm_PT_ST+0x2ec>
	float32_t newSample = (float)sample;
 80016fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 80016fe:	b085      	sub	sp, #20
	arm_biquad_cascade_df1_f32 (&lowPassFilter, &newSample,&lowPassFilterResult,1);
 8001700:	2301      	movs	r3, #1
 8001702:	4622      	mov	r2, r4
 8001704:	a903      	add	r1, sp, #12
	float32_t newSample = (float)sample;
 8001706:	edcd 7a03 	vstr	s15, [sp, #12]
	arm_biquad_cascade_df1_f32 (&lowPassFilter, &newSample,&lowPassFilterResult,1);
 800170a:	f005 ff75 	bl	80075f8 <arm_biquad_cascade_df1_f32>
	arm_biquad_cascade_df1_f32 (&highPassFilter, &lowPassFilterResult,&highPassFilterResult,1);
 800170e:	4a98      	ldr	r2, [pc, #608]	; (8001970 <arm_PT_ST+0x28c>)
 8001710:	4898      	ldr	r0, [pc, #608]	; (8001974 <arm_PT_ST+0x290>)
 8001712:	2301      	movs	r3, #1
 8001714:	4621      	mov	r1, r4
 8001716:	f005 ff6f 	bl	80075f8 <arm_biquad_cascade_df1_f32>
	float potentialPeak = lowPassFilterResult*lowPassFilterResult;
 800171a:	edd4 7a00 	vldr	s15, [r4]
	if (potentialPeak>previousSignalPeak)
 800171e:	ed95 7a00 	vldr	s14, [r5]
	float potentialPeak = lowPassFilterResult*lowPassFilterResult;
 8001722:	ee67 7aa7 	vmul.f32	s15, s15, s15
	if (potentialPeak>previousSignalPeak)
 8001726:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800172a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172e:	d44b      	bmi.n	80017c8 <arm_PT_ST+0xe4>
	{//Store maximum of squared signal
		previousSignalPeak = potentialPeak;
		peakTimeDelay = 0;
	}
	peakTimeDelay++;
 8001730:	f8b8 3000 	ldrh.w	r3, [r8]
 8001734:	3301      	adds	r3, #1
 8001736:	b29b      	uxth	r3, r3
	if (latencyDelay < latencyTreshold)
 8001738:	4c8f      	ldr	r4, [pc, #572]	; (8001978 <arm_PT_ST+0x294>)
	peakTimeDelay++;
 800173a:	f8a8 3000 	strh.w	r3, [r8]
	if (latencyDelay < latencyTreshold)
 800173e:	8823      	ldrh	r3, [r4, #0]
 8001740:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 8001744:	d252      	bcs.n	80017ec <arm_PT_ST+0x108>
	{
		latencyDelay++;
 8001746:	3301      	adds	r3, #1
 8001748:	4e8c      	ldr	r6, [pc, #560]	; (800197c <arm_PT_ST+0x298>)
 800174a:	8023      	strh	r3, [r4, #0]
	else
	{//If peak wasn't find in given time restart
		latencyDelay = 0;
		arm_PT_init();
	}
	arm_fir_f32 (&Derivative,&lowPassFilterResult,&derivativeOutput[0],BLOCK_SIZE);
 800174c:	4f8c      	ldr	r7, [pc, #560]	; (8001980 <arm_PT_ST+0x29c>)
 800174e:	4985      	ldr	r1, [pc, #532]	; (8001964 <arm_PT_ST+0x280>)
 8001750:	488c      	ldr	r0, [pc, #560]	; (8001984 <arm_PT_ST+0x2a0>)
	//Compute moving average
	putOnMovingAverageBuffer(squaredValue);
	arm_mean_f32 (&movingAverageBuffer[0], MovingAverageSampleCount, &meanValue);

	//Detection of maximum in moving average signal
	if (meanValue!=previousMean)
 8001752:	f8df a280 	ldr.w	sl, [pc, #640]	; 80019d4 <arm_PT_ST+0x2f0>
	arm_fir_f32 (&Derivative,&lowPassFilterResult,&derivativeOutput[0],BLOCK_SIZE);
 8001756:	2301      	movs	r3, #1
 8001758:	463a      	mov	r2, r7
 800175a:	f005 ffa9 	bl	80076b0 <arm_fir_f32>
	squaredValue = derivativeOutput[0] * derivativeOutput[0];
 800175e:	edd7 7a00 	vldr	s15, [r7]
 8001762:	4b89      	ldr	r3, [pc, #548]	; (8001988 <arm_PT_ST+0x2a4>)
	movingAverageBuffer[movingAverageBufferIndex] = sample;
 8001764:	4a89      	ldr	r2, [pc, #548]	; (800198c <arm_PT_ST+0x2a8>)
	arm_mean_f32 (&movingAverageBuffer[0], MovingAverageSampleCount, &meanValue);
 8001766:	4889      	ldr	r0, [pc, #548]	; (800198c <arm_PT_ST+0x2a8>)
	squaredValue = derivativeOutput[0] * derivativeOutput[0];
 8001768:	ee67 7aa7 	vmul.f32	s15, s15, s15
	arm_mean_f32 (&movingAverageBuffer[0], MovingAverageSampleCount, &meanValue);
 800176c:	2136      	movs	r1, #54	; 0x36
	squaredValue = derivativeOutput[0] * derivativeOutput[0];
 800176e:	edc3 7a00 	vstr	s15, [r3]
	movingAverageBuffer[movingAverageBufferIndex] = sample;
 8001772:	6833      	ldr	r3, [r6, #0]
	if (movingAverageBufferIndex==MovingAverageSampleCount)
 8001774:	2b35      	cmp	r3, #53	; 0x35
	movingAverageBuffer[movingAverageBufferIndex] = sample;
 8001776:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800177a:	edc2 7a00 	vstr	s15, [r2]
	movingAverageBufferIndex++;
 800177e:	f103 0201 	add.w	r2, r3, #1
		movingAverageBufferIndex = 0;
 8001782:	bf0a      	itet	eq
 8001784:	2300      	moveq	r3, #0
	movingAverageBufferIndex++;
 8001786:	6032      	strne	r2, [r6, #0]
		movingAverageBufferIndex = 0;
 8001788:	6033      	streq	r3, [r6, #0]
	arm_mean_f32 (&movingAverageBuffer[0], MovingAverageSampleCount, &meanValue);
 800178a:	4e81      	ldr	r6, [pc, #516]	; (8001990 <arm_PT_ST+0x2ac>)
 800178c:	4632      	mov	r2, r6
 800178e:	f005 ffd7 	bl	8007740 <arm_mean_f32>
	if (meanValue!=previousMean)
 8001792:	ed96 8a00 	vldr	s16, [r6]
 8001796:	edda 7a00 	vldr	s15, [sl]
 800179a:	eeb4 8a67 	vcmp.f32	s16, s15
 800179e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a2:	d00b      	beq.n	80017bc <arm_PT_ST+0xd8>
	{
		if (meanValue>previousMean)
 80017a4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80017a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ac:	dd10      	ble.n	80017d0 <arm_PT_ST+0xec>
		{//This is not maximum
			previousMean = meanValue;
			if (previousMean != 0)
 80017ae:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80017b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			previousMean = meanValue;
 80017b6:	ed8a 8a00 	vstr	s16, [sl]
			if (previousMean != 0)
 80017ba:	d13c      	bne.n	8001836 <arm_PT_ST+0x152>
				previousSignalPeak = 0;
				previousMean = 0;
			}
		}
	}
	return 0;
 80017bc:	2000      	movs	r0, #0
}
 80017be:	b005      	add	sp, #20
 80017c0:	ecbd 8b02 	vpop	{d8}
 80017c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		previousSignalPeak = potentialPeak;
 80017c8:	edc5 7a00 	vstr	s15, [r5]
 80017cc:	2301      	movs	r3, #1
 80017ce:	e7b3      	b.n	8001738 <arm_PT_ST+0x54>
			if(rissingEdge ==1)
 80017d0:	4b70      	ldr	r3, [pc, #448]	; (8001994 <arm_PT_ST+0x2b0>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d032      	beq.n	800183e <arm_PT_ST+0x15a>
				previousSignalPeak = 0;
 80017d8:	2300      	movs	r3, #0
	return 0;
 80017da:	2000      	movs	r0, #0
				previousSignalPeak = 0;
 80017dc:	602b      	str	r3, [r5, #0]
				previousMean = 0;
 80017de:	f8ca 3000 	str.w	r3, [sl]
}
 80017e2:	b005      	add	sp, #20
 80017e4:	ecbd 8b02 	vpop	{d8}
 80017e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	arm_fir_init_f32(&Derivative, NUM_DERIVATIVE_TAPS, (float32_t *)&firDerivativeCoefficients[0], &firStateF32[0], BLOCK_SIZE);
 80017ec:	2601      	movs	r6, #1
		latencyDelay = 0;
 80017ee:	2700      	movs	r7, #0
	arm_fir_init_f32(&Derivative, NUM_DERIVATIVE_TAPS, (float32_t *)&firDerivativeCoefficients[0], &firStateF32[0], BLOCK_SIZE);
 80017f0:	9600      	str	r6, [sp, #0]
 80017f2:	4b69      	ldr	r3, [pc, #420]	; (8001998 <arm_PT_ST+0x2b4>)
 80017f4:	4a69      	ldr	r2, [pc, #420]	; (800199c <arm_PT_ST+0x2b8>)
 80017f6:	4863      	ldr	r0, [pc, #396]	; (8001984 <arm_PT_ST+0x2a0>)
		latencyDelay = 0;
 80017f8:	8027      	strh	r7, [r4, #0]
	arm_fir_init_f32(&Derivative, NUM_DERIVATIVE_TAPS, (float32_t *)&firDerivativeCoefficients[0], &firStateF32[0], BLOCK_SIZE);
 80017fa:	2105      	movs	r1, #5
 80017fc:	f005 ff90 	bl	8007720 <arm_fir_init_f32>
	arm_biquad_cascade_df1_init_f32 (&highPassFilter,1, (float32_t *)&iirHighPassFilterCoefficients[0], &highPassFilterStateF32[0]);
 8001800:	4631      	mov	r1, r6
 8001802:	4b67      	ldr	r3, [pc, #412]	; (80019a0 <arm_PT_ST+0x2bc>)
 8001804:	4a67      	ldr	r2, [pc, #412]	; (80019a4 <arm_PT_ST+0x2c0>)
 8001806:	485b      	ldr	r0, [pc, #364]	; (8001974 <arm_PT_ST+0x290>)
 8001808:	f005 ff46 	bl	8007698 <arm_biquad_cascade_df1_init_f32>
	arm_biquad_cascade_df1_init_f32 (&lowPassFilter,1, (float32_t *)&iirLowPassFilterCoefficients[0], &lowPassFilterStateF32[0]);
 800180c:	4631      	mov	r1, r6
 800180e:	4a66      	ldr	r2, [pc, #408]	; (80019a8 <arm_PT_ST+0x2c4>)
 8001810:	4855      	ldr	r0, [pc, #340]	; (8001968 <arm_PT_ST+0x284>)
 8001812:	4b66      	ldr	r3, [pc, #408]	; (80019ac <arm_PT_ST+0x2c8>)
	movingAverageBufferIndex=0;
 8001814:	4e59      	ldr	r6, [pc, #356]	; (800197c <arm_PT_ST+0x298>)
	arm_biquad_cascade_df1_init_f32 (&lowPassFilter,1, (float32_t *)&iirLowPassFilterCoefficients[0], &lowPassFilterStateF32[0]);
 8001816:	f005 ff3f 	bl	8007698 <arm_biquad_cascade_df1_init_f32>
		derivativeBuffer[i]=0;
 800181a:	4b65      	ldr	r3, [pc, #404]	; (80019b0 <arm_PT_ST+0x2cc>)
		movingAverageBuffer[i] = 0;
 800181c:	485b      	ldr	r0, [pc, #364]	; (800198c <arm_PT_ST+0x2a8>)
	movingAverageBufferIndex=0;
 800181e:	6037      	str	r7, [r6, #0]
		derivativeBuffer[i]=0;
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
		movingAverageBuffer[i] = 0;
 800182c:	4639      	mov	r1, r7
 800182e:	22d8      	movs	r2, #216	; 0xd8
 8001830:	f006 fb28 	bl	8007e84 <memset>
 8001834:	e78a      	b.n	800174c <arm_PT_ST+0x68>
				rissingEdge = 1;
 8001836:	4b57      	ldr	r3, [pc, #348]	; (8001994 <arm_PT_ST+0x2b0>)
 8001838:	2201      	movs	r2, #1
 800183a:	701a      	strb	r2, [r3, #0]
 800183c:	e7be      	b.n	80017bc <arm_PT_ST+0xd8>
				if ((previousMean > TresholdI) && (latencyDelay > latencyDelayTreshold))
 800183e:	f8df b198 	ldr.w	fp, [pc, #408]	; 80019d8 <arm_PT_ST+0x2f4>
 8001842:	ed9b 7a00 	vldr	s14, [fp]
 8001846:	eef4 7ac7 	vcmpe.f32	s15, s14
 800184a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184e:	dd1b      	ble.n	8001888 <arm_PT_ST+0x1a4>
 8001850:	8823      	ldrh	r3, [r4, #0]
 8001852:	2b48      	cmp	r3, #72	; 0x48
 8001854:	d918      	bls.n	8001888 <arm_PT_ST+0x1a4>
					if (previousSignalPeak>TresholdF)
 8001856:	4b57      	ldr	r3, [pc, #348]	; (80019b4 <arm_PT_ST+0x2d0>)
 8001858:	682f      	ldr	r7, [r5, #0]
 800185a:	edd3 7a00 	vldr	s15, [r3]
 800185e:	ee07 7a10 	vmov	s14, r7
 8001862:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186a:	f300 80b7 	bgt.w	80019dc <arm_PT_ST+0x2f8>
						NoiseLevelF = 0.125*previousSignalPeak + 0.875*NoiseLevelI;
 800186e:	4c52      	ldr	r4, [pc, #328]	; (80019b8 <arm_PT_ST+0x2d4>)
 8001870:	6820      	ldr	r0, [r4, #0]
 8001872:	f7fe fe41 	bl	80004f8 <__aeabi_f2d>
 8001876:	2200      	movs	r2, #0
 8001878:	4b50      	ldr	r3, [pc, #320]	; (80019bc <arm_PT_ST+0x2d8>)
 800187a:	f7fe fe95 	bl	80005a8 <__aeabi_dmul>
 800187e:	4602      	mov	r2, r0
 8001880:	4616      	mov	r6, r2
 8001882:	4638      	mov	r0, r7
 8001884:	460f      	mov	r7, r1
 8001886:	e00a      	b.n	800189e <arm_PT_ST+0x1ba>
					NoiseLevelF = 0.125*previousSignalPeak + 0.875*NoiseLevelI;
 8001888:	4c4b      	ldr	r4, [pc, #300]	; (80019b8 <arm_PT_ST+0x2d4>)
 800188a:	6820      	ldr	r0, [r4, #0]
 800188c:	f7fe fe34 	bl	80004f8 <__aeabi_f2d>
 8001890:	4b4a      	ldr	r3, [pc, #296]	; (80019bc <arm_PT_ST+0x2d8>)
 8001892:	2200      	movs	r2, #0
 8001894:	f7fe fe88 	bl	80005a8 <__aeabi_dmul>
 8001898:	4606      	mov	r6, r0
 800189a:	6828      	ldr	r0, [r5, #0]
 800189c:	460f      	mov	r7, r1
 800189e:	f7fe fe2b 	bl	80004f8 <__aeabi_f2d>
 80018a2:	2200      	movs	r2, #0
 80018a4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80018a8:	f7fe fe7e 	bl	80005a8 <__aeabi_dmul>
 80018ac:	4632      	mov	r2, r6
 80018ae:	463b      	mov	r3, r7
 80018b0:	f7fe fcc4 	bl	800023c <__adddf3>
 80018b4:	f7ff f970 	bl	8000b98 <__aeabi_d2f>
					TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 80018b8:	4b41      	ldr	r3, [pc, #260]	; (80019c0 <arm_PT_ST+0x2dc>)
					NoiseLevelF = 0.125*previousSignalPeak + 0.875*NoiseLevelI;
 80018ba:	ee08 0a90 	vmov	s17, r0
					TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 80018be:	edd3 7a00 	vldr	s15, [r3]
					NoiseLevelF = 0.125*previousSignalPeak + 0.875*NoiseLevelI;
 80018c2:	4b40      	ldr	r3, [pc, #256]	; (80019c4 <arm_PT_ST+0x2e0>)
					TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 80018c4:	ee77 7ae8 	vsub.f32	s15, s15, s17
					NoiseLevelF = 0.125*previousSignalPeak + 0.875*NoiseLevelI;
 80018c8:	6018      	str	r0, [r3, #0]
					TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 80018ca:	ee17 0a90 	vmov	r0, s15
 80018ce:	f7fe fe13 	bl	80004f8 <__aeabi_f2d>
 80018d2:	4b3d      	ldr	r3, [pc, #244]	; (80019c8 <arm_PT_ST+0x2e4>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	f7fe fe67 	bl	80005a8 <__aeabi_dmul>
 80018da:	4680      	mov	r8, r0
 80018dc:	ee18 0a90 	vmov	r0, s17
 80018e0:	4689      	mov	r9, r1
 80018e2:	f7fe fe09 	bl	80004f8 <__aeabi_f2d>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4640      	mov	r0, r8
 80018ec:	4649      	mov	r1, r9
 80018ee:	f7fe fca5 	bl	800023c <__adddf3>
 80018f2:	f7ff f951 	bl	8000b98 <__aeabi_d2f>
 80018f6:	4b2f      	ldr	r3, [pc, #188]	; (80019b4 <arm_PT_ST+0x2d0>)
 80018f8:	6018      	str	r0, [r3, #0]
					NoiseLevelI = 0.125*meanValue + 0.875*NoiseLevelI;
 80018fa:	ee18 0a10 	vmov	r0, s16
 80018fe:	f7fe fdfb 	bl	80004f8 <__aeabi_f2d>
 8001902:	2200      	movs	r2, #0
 8001904:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001908:	f7fe fe4e 	bl	80005a8 <__aeabi_dmul>
 800190c:	4632      	mov	r2, r6
 800190e:	463b      	mov	r3, r7
 8001910:	f7fe fc94 	bl	800023c <__adddf3>
 8001914:	f7ff f940 	bl	8000b98 <__aeabi_d2f>
					TresholdI = NoiseLevelI + 0.25 * (SignalLevelI - NoiseLevelI);
 8001918:	4b2c      	ldr	r3, [pc, #176]	; (80019cc <arm_PT_ST+0x2e8>)
					NoiseLevelI = 0.125*meanValue + 0.875*NoiseLevelI;
 800191a:	6020      	str	r0, [r4, #0]
 800191c:	ee08 0a10 	vmov	s16, r0
					TresholdI = NoiseLevelI + 0.25 * (SignalLevelI - NoiseLevelI);
 8001920:	edd3 7a00 	vldr	s15, [r3]
 8001924:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8001928:	ee17 0a90 	vmov	r0, s15
 800192c:	f7fe fde4 	bl	80004f8 <__aeabi_f2d>
 8001930:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <arm_PT_ST+0x2e4>)
 8001932:	2200      	movs	r2, #0
 8001934:	f7fe fe38 	bl	80005a8 <__aeabi_dmul>
 8001938:	4606      	mov	r6, r0
 800193a:	ee18 0a10 	vmov	r0, s16
 800193e:	460f      	mov	r7, r1
 8001940:	f7fe fdda 	bl	80004f8 <__aeabi_f2d>
 8001944:	460b      	mov	r3, r1
 8001946:	4602      	mov	r2, r0
 8001948:	4639      	mov	r1, r7
 800194a:	4630      	mov	r0, r6
 800194c:	f7fe fc76 	bl	800023c <__adddf3>
 8001950:	f7ff f922 	bl	8000b98 <__aeabi_d2f>
					previousSignalPeak = 0;
 8001954:	2300      	movs	r3, #0
					TresholdI = NoiseLevelI + 0.25 * (SignalLevelI - NoiseLevelI);
 8001956:	f8cb 0000 	str.w	r0, [fp]
					previousSignalPeak = 0;
 800195a:	602b      	str	r3, [r5, #0]
					previousMean = 0;
 800195c:	f8ca 3000 	str.w	r3, [sl]
 8001960:	e72c      	b.n	80017bc <arm_PT_ST+0xd8>
 8001962:	bf00      	nop
 8001964:	200004cc 	.word	0x200004cc
 8001968:	200004c0 	.word	0x200004c0
 800196c:	200005c8 	.word	0x200005c8
 8001970:	200004a8 	.word	0x200004a8
 8001974:	2000049c 	.word	0x2000049c
 8001978:	200004bc 	.word	0x200004bc
 800197c:	200005bc 	.word	0x200005bc
 8001980:	20000488 	.word	0x20000488
 8001984:	20000450 	.word	0x20000450
 8001988:	200005d0 	.word	0x200005d0
 800198c:	200004e4 	.word	0x200004e4
 8001990:	200004e0 	.word	0x200004e0
 8001994:	200005cc 	.word	0x200005cc
 8001998:	20000488 	.word	0x20000488
 800199c:	0800c768 	.word	0x0800c768
 80019a0:	200004ac 	.word	0x200004ac
 80019a4:	0800c77c 	.word	0x0800c77c
 80019a8:	0800c790 	.word	0x0800c790
 80019ac:	200004d0 	.word	0x200004d0
 80019b0:	20000474 	.word	0x20000474
 80019b4:	2000046c 	.word	0x2000046c
 80019b8:	20000460 	.word	0x20000460
 80019bc:	3fec0000 	.word	0x3fec0000
 80019c0:	20000464 	.word	0x20000464
 80019c4:	2000045c 	.word	0x2000045c
 80019c8:	3fd00000 	.word	0x3fd00000
 80019cc:	20000468 	.word	0x20000468
 80019d0:	200005c0 	.word	0x200005c0
 80019d4:	200005c4 	.word	0x200005c4
 80019d8:	20000470 	.word	0x20000470
						SignalLevelF = 0.125*previousSignalPeak + 0.875*SignalLevelF;
 80019dc:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8001afc <arm_PT_ST+0x418>
 80019e0:	f8d9 0000 	ldr.w	r0, [r9]
 80019e4:	f7fe fd88 	bl	80004f8 <__aeabi_f2d>
 80019e8:	4b3e      	ldr	r3, [pc, #248]	; (8001ae4 <arm_PT_ST+0x400>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	f7fe fddc 	bl	80005a8 <__aeabi_dmul>
 80019f0:	4602      	mov	r2, r0
 80019f2:	4638      	mov	r0, r7
 80019f4:	4616      	mov	r6, r2
 80019f6:	460f      	mov	r7, r1
 80019f8:	f7fe fd7e 	bl	80004f8 <__aeabi_f2d>
 80019fc:	2200      	movs	r2, #0
 80019fe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001a02:	f7fe fdd1 	bl	80005a8 <__aeabi_dmul>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4630      	mov	r0, r6
 8001a0c:	4639      	mov	r1, r7
 8001a0e:	f7fe fc15 	bl	800023c <__adddf3>
 8001a12:	f7ff f8c1 	bl	8000b98 <__aeabi_d2f>
						TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 8001a16:	4b34      	ldr	r3, [pc, #208]	; (8001ae8 <arm_PT_ST+0x404>)
						SignalLevelF = 0.125*previousSignalPeak + 0.875*SignalLevelF;
 8001a18:	f8c9 0000 	str.w	r0, [r9]
						TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 8001a1c:	edd3 8a00 	vldr	s17, [r3]
						SignalLevelF = 0.125*previousSignalPeak + 0.875*SignalLevelF;
 8001a20:	ee07 0a90 	vmov	s15, r0
						TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 8001a24:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8001a28:	ee17 0a90 	vmov	r0, s15
 8001a2c:	f7fe fd64 	bl	80004f8 <__aeabi_f2d>
 8001a30:	4b2e      	ldr	r3, [pc, #184]	; (8001aec <arm_PT_ST+0x408>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	f7fe fdb8 	bl	80005a8 <__aeabi_dmul>
 8001a38:	4606      	mov	r6, r0
 8001a3a:	ee18 0a90 	vmov	r0, s17
 8001a3e:	460f      	mov	r7, r1
 8001a40:	f7fe fd5a 	bl	80004f8 <__aeabi_f2d>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4630      	mov	r0, r6
 8001a4a:	4639      	mov	r1, r7
 8001a4c:	f7fe fbf6 	bl	800023c <__adddf3>
 8001a50:	f7ff f8a2 	bl	8000b98 <__aeabi_d2f>
 8001a54:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <arm_PT_ST+0x40c>)
 8001a56:	6018      	str	r0, [r3, #0]
						SignalLevelI = 0.125*meanValue + 0.875*SignalLevelI;
 8001a58:	4b26      	ldr	r3, [pc, #152]	; (8001af4 <arm_PT_ST+0x410>)
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	f7fe fd4c 	bl	80004f8 <__aeabi_f2d>
 8001a60:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <arm_PT_ST+0x400>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	f7fe fda0 	bl	80005a8 <__aeabi_dmul>
 8001a68:	4606      	mov	r6, r0
 8001a6a:	ee18 0a10 	vmov	r0, s16
 8001a6e:	460f      	mov	r7, r1
 8001a70:	f7fe fd42 	bl	80004f8 <__aeabi_f2d>
 8001a74:	2200      	movs	r2, #0
 8001a76:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001a7a:	f7fe fd95 	bl	80005a8 <__aeabi_dmul>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4630      	mov	r0, r6
 8001a84:	4639      	mov	r1, r7
 8001a86:	f7fe fbd9 	bl	800023c <__adddf3>
 8001a8a:	f7ff f885 	bl	8000b98 <__aeabi_d2f>
 8001a8e:	4b19      	ldr	r3, [pc, #100]	; (8001af4 <arm_PT_ST+0x410>)
 8001a90:	6018      	str	r0, [r3, #0]
						TresholdI = NoiseLevelI + 0.25 * (SignalLevelI - NoiseLevelI);
 8001a92:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <arm_PT_ST+0x414>)
						SignalLevelI = 0.125*meanValue + 0.875*SignalLevelI;
 8001a94:	ee07 0a90 	vmov	s15, r0
						TresholdI = NoiseLevelI + 0.25 * (SignalLevelI - NoiseLevelI);
 8001a98:	ed93 8a00 	vldr	s16, [r3]
 8001a9c:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8001aa0:	ee17 0a90 	vmov	r0, s15
 8001aa4:	f7fe fd28 	bl	80004f8 <__aeabi_f2d>
 8001aa8:	4b10      	ldr	r3, [pc, #64]	; (8001aec <arm_PT_ST+0x408>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f7fe fd7c 	bl	80005a8 <__aeabi_dmul>
 8001ab0:	4606      	mov	r6, r0
 8001ab2:	ee18 0a10 	vmov	r0, s16
 8001ab6:	460f      	mov	r7, r1
 8001ab8:	f7fe fd1e 	bl	80004f8 <__aeabi_f2d>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4630      	mov	r0, r6
 8001ac2:	4639      	mov	r1, r7
 8001ac4:	f7fe fbba 	bl	800023c <__adddf3>
 8001ac8:	f7ff f866 	bl	8000b98 <__aeabi_d2f>
						previousSignalPeak = 0;
 8001acc:	2300      	movs	r3, #0
						latencyDelay = 0;
 8001ace:	2200      	movs	r2, #0
						TresholdI = NoiseLevelI + 0.25 * (SignalLevelI - NoiseLevelI);
 8001ad0:	f8cb 0000 	str.w	r0, [fp]
						previousSignalPeak = 0;
 8001ad4:	602b      	str	r3, [r5, #0]
						return peakTimeDelay;
 8001ad6:	f9b8 0000 	ldrsh.w	r0, [r8]
						previousMean = 0;
 8001ada:	f8ca 3000 	str.w	r3, [sl]
						latencyDelay = 0;
 8001ade:	8022      	strh	r2, [r4, #0]
						return peakTimeDelay;
 8001ae0:	e66d      	b.n	80017be <arm_PT_ST+0xda>
 8001ae2:	bf00      	nop
 8001ae4:	3fec0000 	.word	0x3fec0000
 8001ae8:	2000045c 	.word	0x2000045c
 8001aec:	3fd00000 	.word	0x3fd00000
 8001af0:	2000046c 	.word	0x2000046c
 8001af4:	20000468 	.word	0x20000468
 8001af8:	20000460 	.word	0x20000460
 8001afc:	20000464 	.word	0x20000464

08001b00 <arm_get_LPFilter_output>:

float32_t arm_get_LPFilter_output()
{

	return lowPassFilterResult;
 8001b00:	4b01      	ldr	r3, [pc, #4]	; (8001b08 <arm_get_LPFilter_output+0x8>)
}
 8001b02:	ed93 0a00 	vldr	s0, [r3]
 8001b06:	4770      	bx	lr
 8001b08:	200004cc 	.word	0x200004cc

08001b0c <arm_get_HPFilter_output>:

float32_t arm_get_HPFilter_output()
{

	return highPassFilterResult;
 8001b0c:	4b01      	ldr	r3, [pc, #4]	; (8001b14 <arm_get_HPFilter_output+0x8>)
}
 8001b0e:	ed93 0a00 	vldr	s0, [r3]
 8001b12:	4770      	bx	lr
 8001b14:	200004a8 	.word	0x200004a8

08001b18 <arm_get_DRFilter_output>:

float32_t arm_get_DRFilter_output()
{

	return derivativeOutput[0];
 8001b18:	4b01      	ldr	r3, [pc, #4]	; (8001b20 <arm_get_DRFilter_output+0x8>)
}
 8001b1a:	ed93 0a00 	vldr	s0, [r3]
 8001b1e:	4770      	bx	lr
 8001b20:	20000488 	.word	0x20000488

08001b24 <arm_get_SQRFilter_output>:

float32_t arm_get_SQRFilter_output()
{

	return squaredValue;
 8001b24:	4b01      	ldr	r3, [pc, #4]	; (8001b2c <arm_get_SQRFilter_output+0x8>)
}
 8001b26:	ed93 0a00 	vldr	s0, [r3]
 8001b2a:	4770      	bx	lr
 8001b2c:	200005d0 	.word	0x200005d0

08001b30 <arm_get_MVFilter_output>:

float32_t arm_get_MVFilter_output()
{
	return meanValue;
 8001b30:	4b01      	ldr	r3, [pc, #4]	; (8001b38 <arm_get_MVFilter_output+0x8>)
}
 8001b32:	ed93 0a00 	vldr	s0, [r3]
 8001b36:	4770      	bx	lr
 8001b38:	200004e0 	.word	0x200004e0

08001b3c <arm_get_ThI1_output>:

float32_t arm_get_ThI1_output()
{

	return TresholdI;
 8001b3c:	4b01      	ldr	r3, [pc, #4]	; (8001b44 <arm_get_ThI1_output+0x8>)
}
 8001b3e:	ed93 0a00 	vldr	s0, [r3]
 8001b42:	4770      	bx	lr
 8001b44:	20000470 	.word	0x20000470

08001b48 <arm_get_ThF1_output>:

float32_t arm_get_ThF1_output()
{

	return TresholdF;
 8001b48:	4b01      	ldr	r3, [pc, #4]	; (8001b50 <arm_get_ThF1_output+0x8>)
}
 8001b4a:	ed93 0a00 	vldr	s0, [r3]
 8001b4e:	4770      	bx	lr
 8001b50:	2000046c 	.word	0x2000046c

08001b54 <Rafael_init>:
	// qrs tells whether there was a detection or not.
	// regular tells whether the heart pace is regular or not.
	// prevRegular tells whether the heart beat was regular before the newest RR-interval was calculated.
	bool qrs, regular = true, prevRegular;
void Rafael_init()
{
 8001b54:	b538      	push	{r3, r4, r5, lr}


	// Initializing the RR averages
	for (i = 0; i < 8; i++)
    {
        rr1[i] = 0;
 8001b56:	2220      	movs	r2, #32
 8001b58:	2100      	movs	r1, #0
 8001b5a:	481a      	ldr	r0, [pc, #104]	; (8001bc4 <Rafael_init+0x70>)
        rr2[i] = 0;
    }
	 rrlow = 0;
 8001b5c:	4d1a      	ldr	r5, [pc, #104]	; (8001bc8 <Rafael_init+0x74>)
 8001b5e:	4c1b      	ldr	r4, [pc, #108]	; (8001bcc <Rafael_init+0x78>)
        rr1[i] = 0;
 8001b60:	f006 f990 	bl	8007e84 <memset>
        rr2[i] = 0;
 8001b64:	2220      	movs	r2, #32
 8001b66:	2100      	movs	r1, #0
 8001b68:	4819      	ldr	r0, [pc, #100]	; (8001bd0 <Rafael_init+0x7c>)
 8001b6a:	f006 f98b 	bl	8007e84 <memset>
	 rrhigh = 0;
 8001b6e:	4919      	ldr	r1, [pc, #100]	; (8001bd4 <Rafael_init+0x80>)
	 rrmiss = 0;
	 regular = true;
 8001b70:	4a19      	ldr	r2, [pc, #100]	; (8001bd8 <Rafael_init+0x84>)
	 rrmiss = 0;
 8001b72:	481a      	ldr	r0, [pc, #104]	; (8001bdc <Rafael_init+0x88>)
	 rrlow = 0;
 8001b74:	2300      	movs	r3, #0
	 regular = true;
 8001b76:	f04f 0c01 	mov.w	ip, #1
	 rrhigh = 0;
 8001b7a:	600b      	str	r3, [r1, #0]
	 regular = true;
 8001b7c:	f882 c000 	strb.w	ip, [r2]
	 sample = 0;
 8001b80:	4917      	ldr	r1, [pc, #92]	; (8001be0 <Rafael_init+0x8c>)
	 lastQRS = 0;
	 lastSlope = 0;
 8001b82:	4a18      	ldr	r2, [pc, #96]	; (8001be4 <Rafael_init+0x90>)
	 rrlow = 0;
 8001b84:	602b      	str	r3, [r5, #0]
 8001b86:	2508      	movs	r5, #8
 8001b88:	6025      	str	r5, [r4, #0]
	 rrmiss = 0;
 8001b8a:	6003      	str	r3, [r0, #0]
	 sample = 0;
 8001b8c:	600b      	str	r3, [r1, #0]
	 lastSlope = 0;
 8001b8e:	6013      	str	r3, [r2, #0]
	 lastQRS = 0;
 8001b90:	4c15      	ldr	r4, [pc, #84]	; (8001be8 <Rafael_init+0x94>)
	 currentSlope = 0;
 8001b92:	4816      	ldr	r0, [pc, #88]	; (8001bec <Rafael_init+0x98>)
	 peak_i = 0;
 8001b94:	4916      	ldr	r1, [pc, #88]	; (8001bf0 <Rafael_init+0x9c>)
	 peak_f = 0;
	 threshold_i1 = 0;
 8001b96:	4a17      	ldr	r2, [pc, #92]	; (8001bf4 <Rafael_init+0xa0>)
	 lastQRS = 0;
 8001b98:	6023      	str	r3, [r4, #0]
	 currentSlope = 0;
 8001b9a:	6003      	str	r3, [r0, #0]
	 peak_i = 0;
 8001b9c:	800b      	strh	r3, [r1, #0]
	 threshold_i1 = 0;
 8001b9e:	8013      	strh	r3, [r2, #0]
	 peak_f = 0;
 8001ba0:	4c15      	ldr	r4, [pc, #84]	; (8001bf8 <Rafael_init+0xa4>)
	 threshold_i2 = 0;
 8001ba2:	4816      	ldr	r0, [pc, #88]	; (8001bfc <Rafael_init+0xa8>)
	 threshold_f1 = 0;
 8001ba4:	4916      	ldr	r1, [pc, #88]	; (8001c00 <Rafael_init+0xac>)
	 threshold_f2 = 0;
	 spk_i = 0;
 8001ba6:	4a17      	ldr	r2, [pc, #92]	; (8001c04 <Rafael_init+0xb0>)
	 peak_f = 0;
 8001ba8:	8023      	strh	r3, [r4, #0]
	 threshold_i2 = 0;
 8001baa:	8003      	strh	r3, [r0, #0]
	 threshold_f1 = 0;
 8001bac:	800b      	strh	r3, [r1, #0]
	 spk_i = 0;
 8001bae:	8013      	strh	r3, [r2, #0]
	 threshold_f2 = 0;
 8001bb0:	4c15      	ldr	r4, [pc, #84]	; (8001c08 <Rafael_init+0xb4>)
	 spk_f = 0;
 8001bb2:	4816      	ldr	r0, [pc, #88]	; (8001c0c <Rafael_init+0xb8>)
	 npk_i = 0;
 8001bb4:	4916      	ldr	r1, [pc, #88]	; (8001c10 <Rafael_init+0xbc>)
	 npk_f = 0;
 8001bb6:	4a17      	ldr	r2, [pc, #92]	; (8001c14 <Rafael_init+0xc0>)
	 threshold_f2 = 0;
 8001bb8:	8023      	strh	r3, [r4, #0]
	 spk_f = 0;
 8001bba:	8003      	strh	r3, [r0, #0]
	 npk_i = 0;
 8001bbc:	800b      	strh	r3, [r1, #0]
	 npk_f = 0;
 8001bbe:	8013      	strh	r3, [r2, #0]
}
 8001bc0:	bd38      	pop	{r3, r4, r5, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20002b78 	.word	0x20002b78
 8001bc8:	20002bc4 	.word	0x20002bc4
 8001bcc:	20002b5c 	.word	0x20002b5c
 8001bd0:	20002b98 	.word	0x20002b98
 8001bd4:	20002bc0 	.word	0x20002bc0
 8001bd8:	20000004 	.word	0x20000004
 8001bdc:	20002bc8 	.word	0x20002bc8
 8001be0:	20002bcc 	.word	0x20002bcc
 8001be4:	20002b68 	.word	0x20002b68
 8001be8:	20002b64 	.word	0x20002b64
 8001bec:	20002b58 	.word	0x20002b58
 8001bf0:	20002b72 	.word	0x20002b72
 8001bf4:	20002bd8 	.word	0x20002bd8
 8001bf8:	20002b70 	.word	0x20002b70
 8001bfc:	20002bda 	.word	0x20002bda
 8001c00:	20002bd4 	.word	0x20002bd4
 8001c04:	20002bd2 	.word	0x20002bd2
 8001c08:	20002bd6 	.word	0x20002bd6
 8001c0c:	20002bd0 	.word	0x20002bd0
 8001c10:	20002b6e 	.word	0x20002b6e
 8001c14:	20002b6c 	.word	0x20002b6c

08001c18 <Rafael_PanTompkins>:
    and updates the thresholds and averages until there are no more samples. More details both above and in
    shorter comments below.
*/
//UPDATe: I changed the way that it operates, now works like hooman650's implementation
int16_t Rafael_PanTompkins(dataType input)
{
 8001c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		int16_t result = 0;
        // Test if the buffers are full.
        // If they are, shift them, discarding the oldest sample and adding the new one at the end.
        // Else, just put the newest sample in the next free position.
        // Update 'current' so that the program knows where's the newest sample.
		if (sample >= BUFFSIZE)
 8001c1c:	4d9e      	ldr	r5, [pc, #632]	; (8001e98 <Rafael_PanTompkins+0x280>)
{
 8001c1e:	ed2d 8b04 	vpush	{d8-d9}
		if (sample >= BUFFSIZE)
 8001c22:	682c      	ldr	r4, [r5, #0]
 8001c24:	f5b4 7f16 	cmp.w	r4, #600	; 0x258
{
 8001c28:	b095      	sub	sp, #84	; 0x54
 8001c2a:	4606      	mov	r6, r0
		if (sample >= BUFFSIZE)
 8001c2c:	f0c0 8116 	bcc.w	8001e5c <Rafael_PanTompkins+0x244>
		{
			for (i = 0; i < BUFFSIZE - 1; i++)
			{
				RF_signal[i] =RF_signal[i+1];
 8001c30:	4f9a      	ldr	r7, [pc, #616]	; (8001e9c <Rafael_PanTompkins+0x284>)
		RF_signal[current] = input;

		// If no sample was read, stop processing!
		//if (signal[current] == NOSAMPLE)
		//	break;
		sample++; // Update sample counter
 8001c32:	3401      	adds	r4, #1
				RF_signal[i] =RF_signal[i+1];
 8001c34:	f240 42ae 	movw	r2, #1198	; 0x4ae
 8001c38:	1cb9      	adds	r1, r7, #2
 8001c3a:	4638      	mov	r0, r7
		sample++; // Update sample counter
 8001c3c:	9402      	str	r4, [sp, #8]
				RF_signal[i] =RF_signal[i+1];
 8001c3e:	f006 f907 	bl	8007e50 <memmove>
				RF_dcblock[i] = RF_dcblock[i+1];
 8001c42:	4997      	ldr	r1, [pc, #604]	; (8001ea0 <Rafael_PanTompkins+0x288>)
 8001c44:	4b97      	ldr	r3, [pc, #604]	; (8001ea4 <Rafael_PanTompkins+0x28c>)
 8001c46:	9301      	str	r3, [sp, #4]
 8001c48:	f240 42ae 	movw	r2, #1198	; 0x4ae
 8001c4c:	1e88      	subs	r0, r1, #2
 8001c4e:	f006 f8ff 	bl	8007e50 <memmove>
				RF_lowpass[i] = RF_lowpass[i+1];
 8001c52:	4995      	ldr	r1, [pc, #596]	; (8001ea8 <Rafael_PanTompkins+0x290>)
 8001c54:	f240 42ae 	movw	r2, #1198	; 0x4ae
 8001c58:	1e88      	subs	r0, r1, #2
 8001c5a:	f006 f8f9 	bl	8007e50 <memmove>
				RF_highpass[i] = RF_highpass[i+1];
 8001c5e:	4993      	ldr	r1, [pc, #588]	; (8001eac <Rafael_PanTompkins+0x294>)
 8001c60:	f240 42ae 	movw	r2, #1198	; 0x4ae
 8001c64:	1e88      	subs	r0, r1, #2
 8001c66:	f006 f8f3 	bl	8007e50 <memmove>
				RF_derivative[i] = RF_derivative[i+1];
 8001c6a:	4991      	ldr	r1, [pc, #580]	; (8001eb0 <Rafael_PanTompkins+0x298>)
 8001c6c:	f240 42ae 	movw	r2, #1198	; 0x4ae
 8001c70:	1e88      	subs	r0, r1, #2
 8001c72:	f006 f8ed 	bl	8007e50 <memmove>
				RF_squared[i] = RF_squared[i+1];
 8001c76:	498f      	ldr	r1, [pc, #572]	; (8001eb4 <Rafael_PanTompkins+0x29c>)
 8001c78:	f240 42ae 	movw	r2, #1198	; 0x4ae
 8001c7c:	1e88      	subs	r0, r1, #2
 8001c7e:	f006 f8e7 	bl	8007e50 <memmove>
				RF_integral[i] = RF_integral[i+1];
 8001c82:	498d      	ldr	r1, [pc, #564]	; (8001eb8 <Rafael_PanTompkins+0x2a0>)
 8001c84:	f240 42ae 	movw	r2, #1198	; 0x4ae
 8001c88:	1e88      	subs	r0, r1, #2
 8001c8a:	f006 f8e1 	bl	8007e50 <memmove>
				RF_outputSignal[i] = RF_outputSignal[i+1];
 8001c8e:	498b      	ldr	r1, [pc, #556]	; (8001ebc <Rafael_PanTompkins+0x2a4>)
 8001c90:	f240 42ae 	movw	r2, #1198	; 0x4ae
 8001c94:	1e88      	subs	r0, r1, #2
 8001c96:	f006 f8db 	bl	8007e50 <memmove>
			current = BUFFSIZE - 1;
 8001c9a:	4b89      	ldr	r3, [pc, #548]	; (8001ec0 <Rafael_PanTompkins+0x2a8>)
		sample++; // Update sample counter
 8001c9c:	602c      	str	r4, [r5, #0]
 8001c9e:	f240 2457 	movw	r4, #599	; 0x257
			current = BUFFSIZE - 1;
 8001ca2:	601c      	str	r4, [r3, #0]
 8001ca4:	4b7f      	ldr	r3, [pc, #508]	; (8001ea4 <Rafael_PanTompkins+0x28c>)
		RF_signal[current] = input;
 8001ca6:	f8a7 64ae 	strh.w	r6, [r7, #1198]	; 0x4ae
		sample++; // Update sample counter
 8001caa:	f240 2556 	movw	r5, #598	; 0x256
 8001cae:	601c      	str	r4, [r3, #0]

		// DC Block filter
		// This was not proposed on the original paper.
		// It is not necessary and can be removed if your sensor or database has no DC noise.
		if (current >= 1)
			RF_dcblock[current] = RF_signal[current] - RF_signal[current-1] + 0.995*RF_dcblock[current-1];
 8001cb0:	f937 0015 	ldrsh.w	r0, [r7, r5, lsl #1]
 8001cb4:	f8df 8238 	ldr.w	r8, [pc, #568]	; 8001ef0 <Rafael_PanTompkins+0x2d8>
 8001cb8:	1a30      	subs	r0, r6, r0
 8001cba:	f7fe fc0b 	bl	80004d4 <__aeabi_i2d>
 8001cbe:	4606      	mov	r6, r0
 8001cc0:	f938 0015 	ldrsh.w	r0, [r8, r5, lsl #1]
 8001cc4:	460f      	mov	r7, r1
 8001cc6:	f7fe fc05 	bl	80004d4 <__aeabi_i2d>
 8001cca:	a371      	add	r3, pc, #452	; (adr r3, 8001e90 <Rafael_PanTompkins+0x278>)
 8001ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd0:	f7fe fc6a 	bl	80005a8 <__aeabi_dmul>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4630      	mov	r0, r6
 8001cda:	4639      	mov	r1, r7
 8001cdc:	f7fe faae 	bl	800023c <__adddf3>
 8001ce0:	f7fe ff12 	bl	8000b08 <__aeabi_d2iz>

		// Low Pass filter
		// Implemented as proposed by the original paper.
		// y(nT) = 2y(nT - T) - y(nT - 2T) + x(nT) - 2x(nT - 6T) + x(nT - 12T)
		// Can be removed if your signal was previously filtered, or replaced by a different filter.
		RF_lowpass[current] = RF_dcblock[current];
 8001ce4:	4a77      	ldr	r2, [pc, #476]	; (8001ec4 <Rafael_PanTompkins+0x2ac>)
			RF_dcblock[current] = RF_signal[current] - RF_signal[current-1] + 0.995*RF_dcblock[current-1];
 8001ce6:	b200      	sxth	r0, r0
		RF_lowpass[current] = RF_dcblock[current];
 8001ce8:	f822 0014 	strh.w	r0, [r2, r4, lsl #1]
		if (current >= 1)
			RF_lowpass[current] += 2*RF_lowpass[current-1];
 8001cec:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
			RF_dcblock[current] = RF_signal[current] - RF_signal[current-1] + 0.995*RF_dcblock[current-1];
 8001cf0:	f828 0014 	strh.w	r0, [r8, r4, lsl #1]
			RF_lowpass[current] += 2*RF_lowpass[current-1];
 8001cf4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8001cf8:	b280      	uxth	r0, r0
		if (current >= 2)
 8001cfa:	2c01      	cmp	r4, #1
			RF_lowpass[current] += 2*RF_lowpass[current-1];
 8001cfc:	f822 0014 	strh.w	r0, [r2, r4, lsl #1]
		if (current >= 2)
 8001d00:	bf08      	it	eq
 8001d02:	4601      	moveq	r1, r0
 8001d04:	f000 83d3 	beq.w	80024ae <Rafael_PanTompkins+0x896>
			RF_lowpass[current] -= RF_lowpass[current-2];
 8001d08:	1ea3      	subs	r3, r4, #2
		if (current >= 6)
 8001d0a:	2c05      	cmp	r4, #5
			RF_lowpass[current] -= RF_lowpass[current-2];
 8001d0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d10:	eba0 0103 	sub.w	r1, r0, r3
 8001d14:	b289      	uxth	r1, r1
 8001d16:	f822 1014 	strh.w	r1, [r2, r4, lsl #1]
		if (current >= 6)
 8001d1a:	f340 83c8 	ble.w	80024ae <Rafael_PanTompkins+0x896>
			RF_lowpass[current] -= 2*RF_dcblock[current-6];
 8001d1e:	1fa6      	subs	r6, r4, #6
		if (current >= 12)
 8001d20:	2c0b      	cmp	r4, #11
			RF_lowpass[current] -= 2*RF_dcblock[current-6];
 8001d22:	f838 6016 	ldrh.w	r6, [r8, r6, lsl #1]
 8001d26:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8001d2a:	b2b6      	uxth	r6, r6
 8001d2c:	eba1 0106 	sub.w	r1, r1, r6
 8001d30:	b289      	uxth	r1, r1
 8001d32:	f822 1014 	strh.w	r1, [r2, r4, lsl #1]
		if (current >= 12)
 8001d36:	f340 83ba 	ble.w	80024ae <Rafael_PanTompkins+0x896>
			RF_lowpass[current] += RF_dcblock[current-12];
 8001d3a:	f1a4 070c 	sub.w	r7, r4, #12
 8001d3e:	f838 7017 	ldrh.w	r7, [r8, r7, lsl #1]

		// High Pass filter
		// Implemented as proposed by the original paper.
		// y(nT) = 32x(nT - 16T) - [y(nT - T) + x(nT) - x(nT - 32T)]
		// Can be removed if your signal was previously filtered, or replaced by a different filter.
		RF_highpass[current] = -RF_lowpass[current];
 8001d42:	1bf6      	subs	r6, r6, r7
 8001d44:	4433      	add	r3, r6
 8001d46:	1a1b      	subs	r3, r3, r0
 8001d48:	4e5f      	ldr	r6, [pc, #380]	; (8001ec8 <Rafael_PanTompkins+0x2b0>)
			RF_lowpass[current] += RF_dcblock[current-12];
 8001d4a:	4439      	add	r1, r7
		RF_highpass[current] = -RF_lowpass[current];
 8001d4c:	b29b      	uxth	r3, r3
			RF_lowpass[current] += RF_dcblock[current-12];
 8001d4e:	f822 1014 	strh.w	r1, [r2, r4, lsl #1]
		RF_highpass[current] = -RF_lowpass[current];
 8001d52:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
		if (current >= 1)
			RF_highpass[current] -= RF_highpass[current-1];
 8001d56:	f836 1015 	ldrh.w	r1, [r6, r5, lsl #1]
 8001d5a:	1a5b      	subs	r3, r3, r1
 8001d5c:	fa0f f883 	sxth.w	r8, r3
		if (current >= 16)
 8001d60:	2c0f      	cmp	r4, #15
			RF_highpass[current] -= RF_highpass[current-1];
 8001d62:	f826 8014 	strh.w	r8, [r6, r4, lsl #1]
 8001d66:	b29b      	uxth	r3, r3
		if (current >= 16)
 8001d68:	dd16      	ble.n	8001d98 <Rafael_PanTompkins+0x180>
			RF_highpass[current] += 32*RF_lowpass[current-16];
 8001d6a:	f1a4 0110 	sub.w	r1, r4, #16
		if (current >= 32)
 8001d6e:	2c1f      	cmp	r4, #31
			RF_highpass[current] += 32*RF_lowpass[current-16];
 8001d70:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001d74:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8001d78:	fa0f f883 	sxth.w	r8, r3
 8001d7c:	f826 8014 	strh.w	r8, [r6, r4, lsl #1]
 8001d80:	b29b      	uxth	r3, r3
		if (current >= 32)
 8001d82:	dd09      	ble.n	8001d98 <Rafael_PanTompkins+0x180>
			RF_highpass[current] += RF_lowpass[current-32];
 8001d84:	f1a4 0120 	sub.w	r1, r4, #32
 8001d88:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	fa0f f883 	sxth.w	r8, r3
 8001d92:	f826 8014 	strh.w	r8, [r6, r4, lsl #1]
 8001d96:	b29b      	uxth	r3, r3
		// f'(a) = [f(a+h) - f(a-h)]/2h
		// The original formula used by Pan-Tompkins was:
		// y(nT) = (1/8T)[-x(nT - 2T) - 2x(nT - T) + 2x(nT + T) + x(nT + 2T)]
		RF_derivative[current] = RF_highpass[current];
		if (current > 0)
			RF_derivative[current] -= RF_highpass[current-1];
 8001d98:	f836 2015 	ldrh.w	r2, [r6, r5, lsl #1]
 8001d9c:	1a9b      	subs	r3, r3, r2
 8001d9e:	4a4b      	ldr	r2, [pc, #300]	; (8001ecc <Rafael_PanTompkins+0x2b4>)
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]

		// This just squares the derivative, to get rid of negative values and emphasize high frequencies.
		// y(nT) = [x(nT)]^2.
		RF_squared[current] = RF_derivative[current]*RF_derivative[current];
 8001da6:	fb13 f303 	smulbb	r3, r3, r3
 8001daa:	b21b      	sxth	r3, r3
 8001dac:	4948      	ldr	r1, [pc, #288]	; (8001ed0 <Rafael_PanTompkins+0x2b8>)
 8001dae:	0067      	lsls	r7, r4, #1
 8001db0:	f821 3014 	strh.w	r3, [r1, r4, lsl #1]
		// Implemented as proposed by the original paper.
		// y(nT) = (1/N)[x(nT - (N - 1)T) + x(nT - (N - 2)T) + ... x(nT)]
		// WINDOWSIZE, in samples, must be defined so that the window is ~150ms.

		RF_integral[current] = 0;
		for (i = 0; i < WINDOWSIZE; i++)
 8001db4:	9b01      	ldr	r3, [sp, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	1cbd      	adds	r5, r7, #2
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	440d      	add	r5, r1
 8001dbe:	4b45      	ldr	r3, [pc, #276]	; (8001ed4 <Rafael_PanTompkins+0x2bc>)
 8001dc0:	4611      	mov	r1, r2
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	e00a      	b.n	8001ddc <Rafael_PanTompkins+0x1c4>
		{
			if (current >= (dataType)i)
				RF_integral[current] += RF_squared[current - i];
 8001dc6:	f835 1d02 	ldrh.w	r1, [r5, #-2]!
		for (i = 0; i < WINDOWSIZE; i++)
 8001dca:	3001      	adds	r0, #1
				RF_integral[current] += RF_squared[current - i];
 8001dcc:	440a      	add	r2, r1
 8001dce:	b212      	sxth	r2, r2
		for (i = 0; i < WINDOWSIZE; i++)
 8001dd0:	2814      	cmp	r0, #20
				RF_integral[current] += RF_squared[current - i];
 8001dd2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		for (i = 0; i < WINDOWSIZE; i++)
 8001dd6:	f04f 0101 	mov.w	r1, #1
 8001dda:	d002      	beq.n	8001de2 <Rafael_PanTompkins+0x1ca>
			if (current >= (dataType)i)
 8001ddc:	4284      	cmp	r4, r0
 8001dde:	daf2      	bge.n	8001dc6 <Rafael_PanTompkins+0x1ae>
 8001de0:	b109      	cbz	r1, 8001de6 <Rafael_PanTompkins+0x1ce>
 8001de2:	9901      	ldr	r1, [sp, #4]
 8001de4:	6008      	str	r0, [r1, #0]
		RF_integral[current] /= (dataType)i;

		qrs = false;

		// If the current signal is above one of the thresholds (integral or filtered signal), it's a peak candidate.
        if (RF_integral[current] >= threshold_i1 || RF_highpass[current] >= threshold_f1)
 8001de6:	493c      	ldr	r1, [pc, #240]	; (8001ed8 <Rafael_PanTompkins+0x2c0>)
		RF_integral[current] /= (dataType)i;
 8001de8:	fb92 f2f0 	sdiv	r2, r2, r0
        if (RF_integral[current] >= threshold_i1 || RF_highpass[current] >= threshold_f1)
 8001dec:	f9b1 1000 	ldrsh.w	r1, [r1]
		qrs = false;
 8001df0:	483a      	ldr	r0, [pc, #232]	; (8001edc <Rafael_PanTompkins+0x2c4>)
        if (RF_integral[current] >= threshold_i1 || RF_highpass[current] >= threshold_f1)
 8001df2:	910b      	str	r1, [sp, #44]	; 0x2c
		RF_integral[current] /= (dataType)i;
 8001df4:	b212      	sxth	r2, r2
		qrs = false;
 8001df6:	2500      	movs	r5, #0
        if (RF_integral[current] >= threshold_i1 || RF_highpass[current] >= threshold_f1)
 8001df8:	428a      	cmp	r2, r1
		RF_integral[current] /= (dataType)i;
 8001dfa:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001dfe:	9205      	str	r2, [sp, #20]
		qrs = false;
 8001e00:	7005      	strb	r5, [r0, #0]
        if (RF_integral[current] >= threshold_i1 || RF_highpass[current] >= threshold_f1)
 8001e02:	da79      	bge.n	8001ef8 <Rafael_PanTompkins+0x2e0>
 8001e04:	4a36      	ldr	r2, [pc, #216]	; (8001ee0 <Rafael_PanTompkins+0x2c8>)
 8001e06:	9207      	str	r2, [sp, #28]
 8001e08:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001e0c:	920c      	str	r2, [sp, #48]	; 0x30
 8001e0e:	4542      	cmp	r2, r8
 8001e10:	f300 81da 	bgt.w	80021c8 <Rafael_PanTompkins+0x5b0>
		// If no R-peak was detected, it's important to check how long it's been since the last detection.
		else
		{
		    // If no R-peak was detected for too long, use the lighter thresholds and do a back search.
			// However, the back search must respect the 200ms limit and the 360ms one (check the slope).
			if ((sample - lastQRS > (long unsigned int)rrmiss) && (sample > lastQRS + FS/5))
 8001e14:	4a33      	ldr	r2, [pc, #204]	; (8001ee4 <Rafael_PanTompkins+0x2cc>)
            peak_i = RF_integral[current];
 8001e16:	4934      	ldr	r1, [pc, #208]	; (8001ee8 <Rafael_PanTompkins+0x2d0>)
			if ((sample - lastQRS > (long unsigned int)rrmiss) && (sample > lastQRS + FS/5))
 8001e18:	4834      	ldr	r0, [pc, #208]	; (8001eec <Rafael_PanTompkins+0x2d4>)
            peak_i = RF_integral[current];
 8001e1a:	9d05      	ldr	r5, [sp, #20]
			if ((sample - lastQRS > (long unsigned int)rrmiss) && (sample > lastQRS + FS/5))
 8001e1c:	9208      	str	r2, [sp, #32]
            peak_i = RF_integral[current];
 8001e1e:	800d      	strh	r5, [r1, #0]
			if ((sample - lastQRS > (long unsigned int)rrmiss) && (sample > lastQRS + FS/5))
 8001e20:	6812      	ldr	r2, [r2, #0]
 8001e22:	9d02      	ldr	r5, [sp, #8]
 8001e24:	900d      	str	r0, [sp, #52]	; 0x34
 8001e26:	6800      	ldr	r0, [r0, #0]
            peak_f = RF_highpass[current];
 8001e28:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 8001ef4 <Rafael_PanTompkins+0x2dc>
			if ((sample - lastQRS > (long unsigned int)rrmiss) && (sample > lastQRS + FS/5))
 8001e2c:	9206      	str	r2, [sp, #24]
 8001e2e:	1aaa      	subs	r2, r5, r2
 8001e30:	4290      	cmp	r0, r2
            peak_f = RF_highpass[current];
 8001e32:	f8ab 8000 	strh.w	r8, [fp]
			if ((sample - lastQRS > (long unsigned int)rrmiss) && (sample > lastQRS + FS/5))
 8001e36:	f080 829c 	bcs.w	8002372 <Rafael_PanTompkins+0x75a>
 8001e3a:	9a06      	ldr	r2, [sp, #24]
 8001e3c:	f102 0e48 	add.w	lr, r2, #72	; 0x48
 8001e40:	9a02      	ldr	r2, [sp, #8]
 8001e42:	4572      	cmp	r2, lr
 8001e44:	f200 813f 	bhi.w	80020c6 <Rafael_PanTompkins+0x4ae>

			// Definitely no signal peak was detected.
			if (!qrs)
			{
				// If some kind of peak had been detected, then it's certainly a noise peak. Thresholds must be updated accordinly.
				if ((RF_integral[current] >= threshold_i1) || (RF_highpass[current] >= threshold_f1))
 8001e48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001e4a:	4543      	cmp	r3, r8
 8001e4c:	f340 828e 	ble.w	800236c <Rafael_PanTompkins+0x754>
					threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
					threshold_i2 = 0.5*threshold_i1;
					peak_f = RF_highpass[current];
					npk_f = 0.125*peak_f + 0.875*npk_f;
					threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
					threshold_f2 = 0.5*threshold_f1;
 8001e50:	2000      	movs	r0, #0
		// for the current sample, we might miss a peak that could've been found later by backsearching using
		// lighter thresholds. The final waveform output does match the original signal, though.

		//My UPDATE: If peak was detected returns sample delay, else returns 0
		return result;
}
 8001e52:	b015      	add	sp, #84	; 0x54
 8001e54:	ecbd 8b04 	vpop	{d8-d9}
 8001e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			current = sample;
 8001e5c:	4b18      	ldr	r3, [pc, #96]	; (8001ec0 <Rafael_PanTompkins+0x2a8>)
		RF_signal[current] = input;
 8001e5e:	4f0f      	ldr	r7, [pc, #60]	; (8001e9c <Rafael_PanTompkins+0x284>)
			current = sample;
 8001e60:	601c      	str	r4, [r3, #0]
		sample++; // Update sample counter
 8001e62:	1c63      	adds	r3, r4, #1
		RF_signal[current] = input;
 8001e64:	f827 0014 	strh.w	r0, [r7, r4, lsl #1]
		sample++; // Update sample counter
 8001e68:	9302      	str	r3, [sp, #8]
 8001e6a:	602b      	str	r3, [r5, #0]
		if (current >= 1)
 8001e6c:	2c00      	cmp	r4, #0
 8001e6e:	f040 830d 	bne.w	800248c <Rafael_PanTompkins+0x874>
		RF_lowpass[current] = RF_dcblock[current];
 8001e72:	4b14      	ldr	r3, [pc, #80]	; (8001ec4 <Rafael_PanTompkins+0x2ac>)
			RF_dcblock[current] = 0;
 8001e74:	4a1e      	ldr	r2, [pc, #120]	; (8001ef0 <Rafael_PanTompkins+0x2d8>)
		RF_lowpass[current] = RF_dcblock[current];
 8001e76:	801c      	strh	r4, [r3, #0]
		RF_highpass[current] = -RF_lowpass[current];
 8001e78:	4e13      	ldr	r6, [pc, #76]	; (8001ec8 <Rafael_PanTompkins+0x2b0>)
		RF_derivative[current] = RF_highpass[current];
 8001e7a:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <Rafael_PanTompkins+0x2b4>)
			RF_dcblock[current] = 0;
 8001e7c:	8014      	strh	r4, [r2, #0]
		RF_highpass[current] = -RF_lowpass[current];
 8001e7e:	4a09      	ldr	r2, [pc, #36]	; (8001ea4 <Rafael_PanTompkins+0x28c>)
		RF_derivative[current] = RF_highpass[current];
 8001e80:	801c      	strh	r4, [r3, #0]
		RF_highpass[current] = -RF_lowpass[current];
 8001e82:	8034      	strh	r4, [r6, #0]
		RF_derivative[current] = RF_highpass[current];
 8001e84:	4623      	mov	r3, r4
 8001e86:	46a0      	mov	r8, r4
 8001e88:	9201      	str	r2, [sp, #4]
 8001e8a:	e78f      	b.n	8001dac <Rafael_PanTompkins+0x194>
 8001e8c:	f3af 8000 	nop.w
 8001e90:	3d70a3d7 	.word	0x3d70a3d7
 8001e94:	3fefd70a 	.word	0x3fefd70a
 8001e98:	20002bcc 	.word	0x20002bcc
 8001e9c:	200021f4 	.word	0x200021f4
 8001ea0:	200005d6 	.word	0x200005d6
 8001ea4:	20002b5c 	.word	0x20002b5c
 8001ea8:	20001896 	.word	0x20001896
 8001eac:	20000f36 	.word	0x20000f36
 8001eb0:	20000a86 	.word	0x20000a86
 8001eb4:	200026a6 	.word	0x200026a6
 8001eb8:	200013e6 	.word	0x200013e6
 8001ebc:	20001d46 	.word	0x20001d46
 8001ec0:	20002b54 	.word	0x20002b54
 8001ec4:	20001894 	.word	0x20001894
 8001ec8:	20000f34 	.word	0x20000f34
 8001ecc:	20000a84 	.word	0x20000a84
 8001ed0:	200026a4 	.word	0x200026a4
 8001ed4:	200013e4 	.word	0x200013e4
 8001ed8:	20002bd8 	.word	0x20002bd8
 8001edc:	20002b75 	.word	0x20002b75
 8001ee0:	20002bd4 	.word	0x20002bd4
 8001ee4:	20002b64 	.word	0x20002b64
 8001ee8:	20002b72 	.word	0x20002b72
 8001eec:	20002bc8 	.word	0x20002bc8
 8001ef0:	200005d4 	.word	0x200005d4
 8001ef4:	20002b70 	.word	0x20002b70
 8001ef8:	4610      	mov	r0, r2
		if ((RF_integral[current] >= threshold_i1) && (RF_highpass[current] >= threshold_f1))
 8001efa:	4abd      	ldr	r2, [pc, #756]	; (80021f0 <Rafael_PanTompkins+0x5d8>)
 8001efc:	9207      	str	r2, [sp, #28]
 8001efe:	f9b2 2000 	ldrsh.w	r2, [r2]
            peak_i = RF_integral[current];
 8001f02:	49bc      	ldr	r1, [pc, #752]	; (80021f4 <Rafael_PanTompkins+0x5dc>)
            peak_f = RF_highpass[current];
 8001f04:	f8df b330 	ldr.w	fp, [pc, #816]	; 8002238 <Rafael_PanTompkins+0x620>
		if ((RF_integral[current] >= threshold_i1) && (RF_highpass[current] >= threshold_f1))
 8001f08:	920c      	str	r2, [sp, #48]	; 0x30
 8001f0a:	4542      	cmp	r2, r8
			if (sample > lastQRS + FS/5)
 8001f0c:	4aba      	ldr	r2, [pc, #744]	; (80021f8 <Rafael_PanTompkins+0x5e0>)
            peak_i = RF_integral[current];
 8001f0e:	8008      	strh	r0, [r1, #0]
            peak_f = RF_highpass[current];
 8001f10:	f8ab 8000 	strh.w	r8, [fp]
			if (sample > lastQRS + FS/5)
 8001f14:	9208      	str	r2, [sp, #32]
		if ((RF_integral[current] >= threshold_i1) && (RF_highpass[current] >= threshold_f1))
 8001f16:	f300 80c5 	bgt.w	80020a4 <Rafael_PanTompkins+0x48c>
			if (sample > lastQRS + FS/5)
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	9802      	ldr	r0, [sp, #8]
 8001f1e:	9206      	str	r2, [sp, #24]
 8001f20:	f102 0e48 	add.w	lr, r2, #72	; 0x48
 8001f24:	4586      	cmp	lr, r0
 8001f26:	f080 818b 	bcs.w	8002240 <Rafael_PanTompkins+0x628>
				if (sample <= lastQRS + (long unsigned int)(0.36*FS))
 8001f2a:	3281      	adds	r2, #129	; 0x81
 8001f2c:	4282      	cmp	r2, r0
 8001f2e:	f0c0 82e3 	bcc.w	80024f8 <Rafael_PanTompkins+0x8e0>
				    currentSlope = 0;
 8001f32:	4ab2      	ldr	r2, [pc, #712]	; (80021fc <Rafael_PanTompkins+0x5e4>)
 8001f34:	9211      	str	r2, [sp, #68]	; 0x44
 8001f36:	6015      	str	r5, [r2, #0]
				    for (j = current - 10; j <= current; j++)
 8001f38:	f1a4 000a 	sub.w	r0, r4, #10
 8001f3c:	4ab0      	ldr	r2, [pc, #704]	; (8002200 <Rafael_PanTompkins+0x5e8>)
 8001f3e:	9210      	str	r2, [sp, #64]	; 0x40
 8001f40:	42a0      	cmp	r0, r4
 8001f42:	6010      	str	r0, [r2, #0]
 8001f44:	f200 8420 	bhi.w	8002788 <Rafael_PanTompkins+0xb70>
 8001f48:	f1a7 0214 	sub.w	r2, r7, #20
 8001f4c:	4fad      	ldr	r7, [pc, #692]	; (8002204 <Rafael_PanTompkins+0x5ec>)
 8001f4e:	443a      	add	r2, r7
 8001f50:	462f      	mov	r7, r5
                        if (RF_squared[j] > currentSlope)
 8001f52:	f932 cb02 	ldrsh.w	ip, [r2], #2
				    for (j = current - 10; j <= current; j++)
 8001f56:	3001      	adds	r0, #1
                        if (RF_squared[j] > currentSlope)
 8001f58:	4567      	cmp	r7, ip
 8001f5a:	bf3c      	itt	cc
 8001f5c:	4667      	movcc	r7, ip
 8001f5e:	2501      	movcc	r5, #1
				    for (j = current - 10; j <= current; j++)
 8001f60:	4284      	cmp	r4, r0
 8001f62:	d2f6      	bcs.n	8001f52 <Rafael_PanTompkins+0x33a>
 8001f64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001f66:	6010      	str	r0, [r2, #0]
 8001f68:	2d00      	cmp	r5, #0
 8001f6a:	f000 840d 	beq.w	8002788 <Rafael_PanTompkins+0xb70>
 8001f6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
				    if (currentSlope <= (dataType)(lastSlope/2))
 8001f70:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 8002234 <Rafael_PanTompkins+0x61c>
 8001f74:	6017      	str	r7, [r2, #0]
 8001f76:	f8d9 2000 	ldr.w	r2, [r9]
 8001f7a:	f342 024f 	sbfx	r2, r2, #1, #16
 8001f7e:	42ba      	cmp	r2, r7
 8001f80:	f080 8402 	bcs.w	8002788 <Rafael_PanTompkins+0xb70>
                        spk_i = 0.125*peak_i + 0.875*spk_i;
 8001f84:	4ea0      	ldr	r6, [pc, #640]	; (8002208 <Rafael_PanTompkins+0x5f0>)
                        spk_f = 0.125*peak_f + 0.875*spk_f;
 8001f86:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 800223c <Rafael_PanTompkins+0x624>
                        spk_i = 0.125*peak_i + 0.875*spk_i;
 8001f8a:	f9b6 0000 	ldrsh.w	r0, [r6]
 8001f8e:	f7fe faa1 	bl	80004d4 <__aeabi_i2d>
 8001f92:	4b9e      	ldr	r3, [pc, #632]	; (800220c <Rafael_PanTompkins+0x5f4>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	f7fe fb07 	bl	80005a8 <__aeabi_dmul>
 8001f9a:	4604      	mov	r4, r0
 8001f9c:	9805      	ldr	r0, [sp, #20]
 8001f9e:	460d      	mov	r5, r1
 8001fa0:	f7fe fa98 	bl	80004d4 <__aeabi_i2d>
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001faa:	f7fe fafd 	bl	80005a8 <__aeabi_dmul>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	4629      	mov	r1, r5
 8001fb6:	f7fe f941 	bl	800023c <__adddf3>
 8001fba:	f7fe fda5 	bl	8000b08 <__aeabi_d2iz>
                        threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8001fbe:	4b94      	ldr	r3, [pc, #592]	; (8002210 <Rafael_PanTompkins+0x5f8>)
 8001fc0:	f9b3 5000 	ldrsh.w	r5, [r3]
                        spk_i = 0.125*peak_i + 0.875*spk_i;
 8001fc4:	b200      	sxth	r0, r0
 8001fc6:	8030      	strh	r0, [r6, #0]
                        threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8001fc8:	1b40      	subs	r0, r0, r5
 8001fca:	f7fe fa83 	bl	80004d4 <__aeabi_i2d>
 8001fce:	4b91      	ldr	r3, [pc, #580]	; (8002214 <Rafael_PanTompkins+0x5fc>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f7fe fae9 	bl	80005a8 <__aeabi_dmul>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	4628      	mov	r0, r5
 8001fda:	4614      	mov	r4, r2
 8001fdc:	460d      	mov	r5, r1
 8001fde:	f7fe fa79 	bl	80004d4 <__aeabi_i2d>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	4629      	mov	r1, r5
 8001fea:	f7fe f927 	bl	800023c <__adddf3>
 8001fee:	f7fe fd8b 	bl	8000b08 <__aeabi_d2iz>
 8001ff2:	4b89      	ldr	r3, [pc, #548]	; (8002218 <Rafael_PanTompkins+0x600>)
 8001ff4:	fa0f fb80 	sxth.w	fp, r0
 8001ff8:	f8a3 b000 	strh.w	fp, [r3]
                        threshold_i2 = 0.5*threshold_i1;
 8001ffc:	4658      	mov	r0, fp
 8001ffe:	f7fe fa69 	bl	80004d4 <__aeabi_i2d>
 8002002:	2200      	movs	r2, #0
 8002004:	4b85      	ldr	r3, [pc, #532]	; (800221c <Rafael_PanTompkins+0x604>)
 8002006:	f7fe facf 	bl	80005a8 <__aeabi_dmul>
 800200a:	f7fe fd7d 	bl	8000b08 <__aeabi_d2iz>
 800200e:	4b84      	ldr	r3, [pc, #528]	; (8002220 <Rafael_PanTompkins+0x608>)
 8002010:	8018      	strh	r0, [r3, #0]
                        spk_f = 0.125*peak_f + 0.875*spk_f;
 8002012:	f9ba 0000 	ldrsh.w	r0, [sl]
 8002016:	f7fe fa5d 	bl	80004d4 <__aeabi_i2d>
 800201a:	4b7c      	ldr	r3, [pc, #496]	; (800220c <Rafael_PanTompkins+0x5f4>)
 800201c:	2200      	movs	r2, #0
 800201e:	f7fe fac3 	bl	80005a8 <__aeabi_dmul>
 8002022:	4604      	mov	r4, r0
 8002024:	4640      	mov	r0, r8
 8002026:	460d      	mov	r5, r1
 8002028:	f7fe fa54 	bl	80004d4 <__aeabi_i2d>
 800202c:	2200      	movs	r2, #0
 800202e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002032:	f7fe fab9 	bl	80005a8 <__aeabi_dmul>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4620      	mov	r0, r4
 800203c:	4629      	mov	r1, r5
 800203e:	f7fe f8fd 	bl	800023c <__adddf3>
 8002042:	f7fe fd61 	bl	8000b08 <__aeabi_d2iz>
                        threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 8002046:	4b77      	ldr	r3, [pc, #476]	; (8002224 <Rafael_PanTompkins+0x60c>)
 8002048:	f9b3 5000 	ldrsh.w	r5, [r3]
                        spk_f = 0.125*peak_f + 0.875*spk_f;
 800204c:	b200      	sxth	r0, r0
 800204e:	f8aa 0000 	strh.w	r0, [sl]
                        threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 8002052:	1b40      	subs	r0, r0, r5
 8002054:	f7fe fa3e 	bl	80004d4 <__aeabi_i2d>
 8002058:	4b6e      	ldr	r3, [pc, #440]	; (8002214 <Rafael_PanTompkins+0x5fc>)
 800205a:	2200      	movs	r2, #0
 800205c:	f7fe faa4 	bl	80005a8 <__aeabi_dmul>
 8002060:	4602      	mov	r2, r0
 8002062:	4628      	mov	r0, r5
 8002064:	4614      	mov	r4, r2
 8002066:	460d      	mov	r5, r1
 8002068:	f7fe fa34 	bl	80004d4 <__aeabi_i2d>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4620      	mov	r0, r4
 8002072:	4629      	mov	r1, r5
 8002074:	f7fe f8e2 	bl	800023c <__adddf3>
 8002078:	f7fe fd46 	bl	8000b08 <__aeabi_d2iz>
 800207c:	9b07      	ldr	r3, [sp, #28]
 800207e:	b205      	sxth	r5, r0
 8002080:	801d      	strh	r5, [r3, #0]
                        threshold_f2 = 0.5*threshold_f1;
 8002082:	4628      	mov	r0, r5
 8002084:	f7fe fa26 	bl	80004d4 <__aeabi_i2d>
 8002088:	4b64      	ldr	r3, [pc, #400]	; (800221c <Rafael_PanTompkins+0x604>)
 800208a:	2200      	movs	r2, #0
 800208c:	f7fe fa8c 	bl	80005a8 <__aeabi_dmul>
 8002090:	f7fe fd3a 	bl	8000b08 <__aeabi_d2iz>
 8002094:	4b64      	ldr	r3, [pc, #400]	; (8002228 <Rafael_PanTompkins+0x610>)
                        qrs = true;
 8002096:	4a65      	ldr	r2, [pc, #404]	; (800222c <Rafael_PanTompkins+0x614>)
                        threshold_f2 = 0.5*threshold_f1;
 8002098:	8018      	strh	r0, [r3, #0]
                        qrs = true;
 800209a:	2301      	movs	r3, #1
                        lastSlope = currentSlope;
 800209c:	f8c9 7000 	str.w	r7, [r9]
                        qrs = true;
 80020a0:	7013      	strb	r3, [r2, #0]
 80020a2:	e2db      	b.n	800265c <Rafael_PanTompkins+0xa44>
			if ((sample - lastQRS > (long unsigned int)rrmiss) && (sample > lastQRS + FS/5))
 80020a4:	4862      	ldr	r0, [pc, #392]	; (8002230 <Rafael_PanTompkins+0x618>)
 80020a6:	6812      	ldr	r2, [r2, #0]
 80020a8:	9d02      	ldr	r5, [sp, #8]
 80020aa:	900d      	str	r0, [sp, #52]	; 0x34
 80020ac:	6800      	ldr	r0, [r0, #0]
 80020ae:	9206      	str	r2, [sp, #24]
 80020b0:	1aaa      	subs	r2, r5, r2
 80020b2:	4290      	cmp	r0, r2
 80020b4:	f080 815d 	bcs.w	8002372 <Rafael_PanTompkins+0x75a>
 80020b8:	9a06      	ldr	r2, [sp, #24]
 80020ba:	f102 0e48 	add.w	lr, r2, #72	; 0x48
 80020be:	9a02      	ldr	r2, [sp, #8]
 80020c0:	4572      	cmp	r2, lr
 80020c2:	f240 8156 	bls.w	8002372 <Rafael_PanTompkins+0x75a>
				for (i = current - (sample - lastQRS) + FS/5; i < (long unsigned int)current; i++)
 80020c6:	9a02      	ldr	r2, [sp, #8]
 80020c8:	9901      	ldr	r1, [sp, #4]
 80020ca:	1aa5      	subs	r5, r4, r2
 80020cc:	4475      	add	r5, lr
 80020ce:	42ac      	cmp	r4, r5
 80020d0:	600d      	str	r5, [r1, #0]
 80020d2:	f240 8146 	bls.w	8002362 <Rafael_PanTompkins+0x74a>
 80020d6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
                        if ((currentSlope < (dataType)(lastSlope/2)) && (i + sample) < lastQRS + 0.36*lastQRS)
 80020da:	4956      	ldr	r1, [pc, #344]	; (8002234 <Rafael_PanTompkins+0x61c>)
					if ( (RF_integral[i] > threshold_i2) && (RF_highpass[i] > threshold_f2))
 80020dc:	4f50      	ldr	r7, [pc, #320]	; (8002220 <Rafael_PanTompkins+0x608>)
 80020de:	4847      	ldr	r0, [pc, #284]	; (80021fc <Rafael_PanTompkins+0x5e4>)
 80020e0:	f9b7 7000 	ldrsh.w	r7, [r7]
 80020e4:	970a      	str	r7, [sp, #40]	; 0x28
 80020e6:	f1a3 0b02 	sub.w	fp, r3, #2
 80020ea:	4b45      	ldr	r3, [pc, #276]	; (8002200 <Rafael_PanTompkins+0x5e8>)
 80020ec:	9310      	str	r3, [sp, #64]	; 0x40
                        if ((currentSlope < (dataType)(lastSlope/2)) && (i + sample) < lastQRS + 0.36*lastQRS)
 80020ee:	680b      	ldr	r3, [r1, #0]
					if ( (RF_integral[i] > threshold_i2) && (RF_highpass[i] > threshold_f2))
 80020f0:	4f4d      	ldr	r7, [pc, #308]	; (8002228 <Rafael_PanTompkins+0x610>)
 80020f2:	9011      	str	r0, [sp, #68]	; 0x44
                        if ((currentSlope < (dataType)(lastSlope/2)) && (i + sample) < lastQRS + 0.36*lastQRS)
 80020f4:	f343 014f 	sbfx	r1, r3, #1, #16
 80020f8:	4b41      	ldr	r3, [pc, #260]	; (8002200 <Rafael_PanTompkins+0x5e8>)
 80020fa:	910e      	str	r1, [sp, #56]	; 0x38
 80020fc:	f8d3 a000 	ldr.w	sl, [r3]
					if ( (RF_integral[i] > threshold_i2) && (RF_highpass[i] > threshold_f2))
 8002100:	f9b7 7000 	ldrsh.w	r7, [r7]
 8002104:	9709      	str	r7, [sp, #36]	; 0x24
 8002106:	f1a4 030a 	sub.w	r3, r4, #10
                        if ((currentSlope < (dataType)(lastSlope/2)) && (i + sample) < lastQRS + 0.36*lastQRS)
 800210a:	2100      	movs	r1, #0
 800210c:	e9cd 1303 	strd	r1, r3, [sp, #12]
 8002110:	f102 030a 	add.w	r3, r2, #10
 8002114:	e9cd 8412 	strd	r8, r4, [sp, #72]	; 0x48
 8002118:	6807      	ldr	r7, [r0, #0]
 800211a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800211e:	930f      	str	r3, [sp, #60]	; 0x3c
 8002120:	3d0a      	subs	r5, #10
 8002122:	960a      	str	r6, [sp, #40]	; 0x28
 8002124:	e008      	b.n	8002138 <Rafael_PanTompkins+0x520>
				for (i = current - (sample - lastQRS) + FS/5; i < (long unsigned int)current; i++)
 8002126:	2201      	movs	r2, #1
 8002128:	9203      	str	r2, [sp, #12]
 800212a:	9a04      	ldr	r2, [sp, #16]
 800212c:	f105 030b 	add.w	r3, r5, #11
 8002130:	3501      	adds	r5, #1
 8002132:	42aa      	cmp	r2, r5
 8002134:	f000 81ae 	beq.w	8002494 <Rafael_PanTompkins+0x87c>
					if ( (RF_integral[i] > threshold_i2) && (RF_highpass[i] > threshold_f2))
 8002138:	f93b 6f02 	ldrsh.w	r6, [fp, #2]!
 800213c:	f115 040a 	adds.w	r4, r5, #10
 8002140:	bf2c      	ite	cs
 8002142:	2201      	movcs	r2, #1
 8002144:	2200      	movcc	r2, #0
 8002146:	4546      	cmp	r6, r8
 8002148:	dded      	ble.n	8002126 <Rafael_PanTompkins+0x50e>
 800214a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800214c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800214e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8002152:	f9b3 9014 	ldrsh.w	r9, [r3, #20]
 8002156:	4581      	cmp	r9, r0
 8002158:	ea4f 0345 	mov.w	r3, r5, lsl #1
 800215c:	dde3      	ble.n	8002126 <Rafael_PanTompkins+0x50e>
                        for (j = i - 10; j <= i; j++)
 800215e:	2a00      	cmp	r2, #0
 8002160:	f040 8327 	bne.w	80027b2 <Rafael_PanTompkins+0xb9a>
 8002164:	4927      	ldr	r1, [pc, #156]	; (8002204 <Rafael_PanTompkins+0x5ec>)
					    currentSlope = 0;
 8002166:	4617      	mov	r7, r2
 8002168:	440b      	add	r3, r1
                        for (j = i - 10; j <= i; j++)
 800216a:	46aa      	mov	sl, r5
                            if (RF_squared[j] > currentSlope)
 800216c:	f933 2b02 	ldrsh.w	r2, [r3], #2
                        for (j = i - 10; j <= i; j++)
 8002170:	f10a 0a01 	add.w	sl, sl, #1
 8002174:	4297      	cmp	r7, r2
 8002176:	bf38      	it	cc
 8002178:	4617      	movcc	r7, r2
 800217a:	4554      	cmp	r4, sl
 800217c:	d2f6      	bcs.n	800216c <Rafael_PanTompkins+0x554>
                        if ((currentSlope < (dataType)(lastSlope/2)) && (i + sample) < lastQRS + 0.36*lastQRS)
 800217e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002180:	42bb      	cmp	r3, r7
 8002182:	f240 8355 	bls.w	8002830 <Rafael_PanTompkins+0xc18>
 8002186:	9806      	ldr	r0, [sp, #24]
 8002188:	f7fe f994 	bl	80004b4 <__aeabi_ui2d>
 800218c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800218e:	ec41 0b18 	vmov	d8, r0, r1
 8002192:	1958      	adds	r0, r3, r5
 8002194:	f7fe f98e 	bl	80004b4 <__aeabi_ui2d>
 8002198:	a313      	add	r3, pc, #76	; (adr r3, 80021e8 <Rafael_PanTompkins+0x5d0>)
 800219a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219e:	ec41 0b19 	vmov	d9, r0, r1
 80021a2:	ec51 0b18 	vmov	r0, r1, d8
 80021a6:	f7fe f9ff 	bl	80005a8 <__aeabi_dmul>
 80021aa:	ec53 2b18 	vmov	r2, r3, d8
 80021ae:	f7fe f845 	bl	800023c <__adddf3>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	ec51 0b19 	vmov	r0, r1, d9
 80021ba:	f7fe fc67 	bl	8000a8c <__aeabi_dcmplt>
 80021be:	2800      	cmp	r0, #0
 80021c0:	f000 8336 	beq.w	8002830 <Rafael_PanTompkins+0xc18>
 80021c4:	2101      	movs	r1, #1
 80021c6:	e7ae      	b.n	8002126 <Rafael_PanTompkins+0x50e>
			if ((sample - lastQRS > (long unsigned int)rrmiss) && (sample > lastQRS + FS/5))
 80021c8:	4a0b      	ldr	r2, [pc, #44]	; (80021f8 <Rafael_PanTompkins+0x5e0>)
 80021ca:	4919      	ldr	r1, [pc, #100]	; (8002230 <Rafael_PanTompkins+0x618>)
 80021cc:	6810      	ldr	r0, [r2, #0]
 80021ce:	9208      	str	r2, [sp, #32]
 80021d0:	910d      	str	r1, [sp, #52]	; 0x34
 80021d2:	680a      	ldr	r2, [r1, #0]
 80021d4:	9902      	ldr	r1, [sp, #8]
 80021d6:	9006      	str	r0, [sp, #24]
 80021d8:	1a09      	subs	r1, r1, r0
 80021da:	4291      	cmp	r1, r2
 80021dc:	f63f ae2d 	bhi.w	8001e3a <Rafael_PanTompkins+0x222>
 80021e0:	e636      	b.n	8001e50 <Rafael_PanTompkins+0x238>
 80021e2:	bf00      	nop
 80021e4:	f3af 8000 	nop.w
 80021e8:	70a3d70a 	.word	0x70a3d70a
 80021ec:	3fd70a3d 	.word	0x3fd70a3d
 80021f0:	20002bd4 	.word	0x20002bd4
 80021f4:	20002b72 	.word	0x20002b72
 80021f8:	20002b64 	.word	0x20002b64
 80021fc:	20002b58 	.word	0x20002b58
 8002200:	20002b60 	.word	0x20002b60
 8002204:	200026a4 	.word	0x200026a4
 8002208:	20002bd2 	.word	0x20002bd2
 800220c:	3fec0000 	.word	0x3fec0000
 8002210:	20002b6e 	.word	0x20002b6e
 8002214:	3fd00000 	.word	0x3fd00000
 8002218:	20002bd8 	.word	0x20002bd8
 800221c:	3fe00000 	.word	0x3fe00000
 8002220:	20002bda 	.word	0x20002bda
 8002224:	20002b6c 	.word	0x20002b6c
 8002228:	20002bd6 	.word	0x20002bd6
 800222c:	20002b75 	.word	0x20002b75
 8002230:	20002bc8 	.word	0x20002bc8
 8002234:	20002b68 	.word	0x20002b68
 8002238:	20002b70 	.word	0x20002b70
 800223c:	20002bd0 	.word	0x20002bd0
				npk_i = 0.125*peak_i + 0.875*npk_i;
 8002240:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80024f0 <Rafael_PanTompkins+0x8d8>
				npk_f = 0.125*peak_f + 0.875*npk_f;
 8002244:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80024e0 <Rafael_PanTompkins+0x8c8>
				npk_i = 0.125*peak_i + 0.875*npk_i;
 8002248:	f9bb 0000 	ldrsh.w	r0, [fp]
                threshold_f2 = 0.5*threshold_f1;
 800224c:	f8df a294 	ldr.w	sl, [pc, #660]	; 80024e4 <Rafael_PanTompkins+0x8cc>
				npk_i = 0.125*peak_i + 0.875*npk_i;
 8002250:	f7fe f940 	bl	80004d4 <__aeabi_i2d>
 8002254:	4b99      	ldr	r3, [pc, #612]	; (80024bc <Rafael_PanTompkins+0x8a4>)
 8002256:	2200      	movs	r2, #0
 8002258:	f7fe f9a6 	bl	80005a8 <__aeabi_dmul>
 800225c:	4606      	mov	r6, r0
 800225e:	9805      	ldr	r0, [sp, #20]
 8002260:	460f      	mov	r7, r1
 8002262:	f7fe f937 	bl	80004d4 <__aeabi_i2d>
 8002266:	2200      	movs	r2, #0
 8002268:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800226c:	f7fe f99c 	bl	80005a8 <__aeabi_dmul>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4630      	mov	r0, r6
 8002276:	4639      	mov	r1, r7
 8002278:	f7fd ffe0 	bl	800023c <__adddf3>
 800227c:	f7fe fc44 	bl	8000b08 <__aeabi_d2iz>
				threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8002280:	4b8f      	ldr	r3, [pc, #572]	; (80024c0 <Rafael_PanTompkins+0x8a8>)
				npk_i = 0.125*peak_i + 0.875*npk_i;
 8002282:	b207      	sxth	r7, r0
				threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8002284:	f9b3 0000 	ldrsh.w	r0, [r3]
				npk_i = 0.125*peak_i + 0.875*npk_i;
 8002288:	f8ab 7000 	strh.w	r7, [fp]
				threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 800228c:	1bc0      	subs	r0, r0, r7
 800228e:	f7fe f921 	bl	80004d4 <__aeabi_i2d>
 8002292:	4b8c      	ldr	r3, [pc, #560]	; (80024c4 <Rafael_PanTompkins+0x8ac>)
 8002294:	2200      	movs	r2, #0
 8002296:	f7fe f987 	bl	80005a8 <__aeabi_dmul>
 800229a:	4602      	mov	r2, r0
 800229c:	4638      	mov	r0, r7
 800229e:	4616      	mov	r6, r2
 80022a0:	460f      	mov	r7, r1
 80022a2:	f7fe f917 	bl	80004d4 <__aeabi_i2d>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4630      	mov	r0, r6
 80022ac:	4639      	mov	r1, r7
 80022ae:	f7fd ffc5 	bl	800023c <__adddf3>
 80022b2:	f7fe fc29 	bl	8000b08 <__aeabi_d2iz>
 80022b6:	4a84      	ldr	r2, [pc, #528]	; (80024c8 <Rafael_PanTompkins+0x8b0>)
 80022b8:	b203      	sxth	r3, r0
 80022ba:	8013      	strh	r3, [r2, #0]
				threshold_i2 = 0.5*threshold_i1;
 80022bc:	4618      	mov	r0, r3
				threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 80022be:	930b      	str	r3, [sp, #44]	; 0x2c
				threshold_i2 = 0.5*threshold_i1;
 80022c0:	f7fe f908 	bl	80004d4 <__aeabi_i2d>
 80022c4:	2200      	movs	r2, #0
 80022c6:	4b81      	ldr	r3, [pc, #516]	; (80024cc <Rafael_PanTompkins+0x8b4>)
 80022c8:	f7fe f96e 	bl	80005a8 <__aeabi_dmul>
 80022cc:	f7fe fc1c 	bl	8000b08 <__aeabi_d2iz>
 80022d0:	4b7f      	ldr	r3, [pc, #508]	; (80024d0 <Rafael_PanTompkins+0x8b8>)
 80022d2:	8018      	strh	r0, [r3, #0]
				npk_f = 0.125*peak_f + 0.875*npk_f;
 80022d4:	f9b9 0000 	ldrsh.w	r0, [r9]
 80022d8:	f7fe f8fc 	bl	80004d4 <__aeabi_i2d>
 80022dc:	4b77      	ldr	r3, [pc, #476]	; (80024bc <Rafael_PanTompkins+0x8a4>)
 80022de:	2200      	movs	r2, #0
 80022e0:	f7fe f962 	bl	80005a8 <__aeabi_dmul>
 80022e4:	4606      	mov	r6, r0
 80022e6:	4640      	mov	r0, r8
 80022e8:	460f      	mov	r7, r1
 80022ea:	f7fe f8f3 	bl	80004d4 <__aeabi_i2d>
 80022ee:	2200      	movs	r2, #0
 80022f0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80022f4:	f7fe f958 	bl	80005a8 <__aeabi_dmul>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	4630      	mov	r0, r6
 80022fe:	4639      	mov	r1, r7
 8002300:	f7fd ff9c 	bl	800023c <__adddf3>
 8002304:	f7fe fc00 	bl	8000b08 <__aeabi_d2iz>
				threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 8002308:	4b72      	ldr	r3, [pc, #456]	; (80024d4 <Rafael_PanTompkins+0x8bc>)
				npk_f = 0.125*peak_f + 0.875*npk_f;
 800230a:	b207      	sxth	r7, r0
				threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 800230c:	f9b3 0000 	ldrsh.w	r0, [r3]
				npk_f = 0.125*peak_f + 0.875*npk_f;
 8002310:	f8a9 7000 	strh.w	r7, [r9]
				threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 8002314:	1bc0      	subs	r0, r0, r7
 8002316:	f7fe f8dd 	bl	80004d4 <__aeabi_i2d>
 800231a:	4b6a      	ldr	r3, [pc, #424]	; (80024c4 <Rafael_PanTompkins+0x8ac>)
 800231c:	2200      	movs	r2, #0
 800231e:	f7fe f943 	bl	80005a8 <__aeabi_dmul>
 8002322:	4602      	mov	r2, r0
 8002324:	4638      	mov	r0, r7
 8002326:	4616      	mov	r6, r2
 8002328:	460f      	mov	r7, r1
 800232a:	f7fe f8d3 	bl	80004d4 <__aeabi_i2d>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4630      	mov	r0, r6
 8002334:	4639      	mov	r1, r7
 8002336:	f7fd ff81 	bl	800023c <__adddf3>
 800233a:	f7fe fbe5 	bl	8000b08 <__aeabi_d2iz>
 800233e:	9a07      	ldr	r2, [sp, #28]
 8002340:	b203      	sxth	r3, r0
                threshold_f2 = 0.5*threshold_f1;
 8002342:	4618      	mov	r0, r3
				threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 8002344:	930c      	str	r3, [sp, #48]	; 0x30
 8002346:	8013      	strh	r3, [r2, #0]
                threshold_f2 = 0.5*threshold_f1;
 8002348:	f7fe f8c4 	bl	80004d4 <__aeabi_i2d>
 800234c:	4b5f      	ldr	r3, [pc, #380]	; (80024cc <Rafael_PanTompkins+0x8b4>)
 800234e:	2200      	movs	r2, #0
 8002350:	f7fe f92a 	bl	80005a8 <__aeabi_dmul>
 8002354:	f7fe fbd8 	bl	8000b08 <__aeabi_d2iz>
                RF_outputSignal[current] = qrs;
 8002358:	4b5f      	ldr	r3, [pc, #380]	; (80024d8 <Rafael_PanTompkins+0x8c0>)
                threshold_f2 = 0.5*threshold_f1;
 800235a:	f8aa 0000 	strh.w	r0, [sl]
                RF_outputSignal[current] = qrs;
 800235e:	f823 5014 	strh.w	r5, [r3, r4, lsl #1]
				if ((RF_integral[current] >= threshold_i1) || (RF_highpass[current] >= threshold_f1))
 8002362:	9b05      	ldr	r3, [sp, #20]
 8002364:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002366:	4293      	cmp	r3, r2
 8002368:	f6ff ad6e 	blt.w	8001e48 <Rafael_PanTompkins+0x230>
 800236c:	495b      	ldr	r1, [pc, #364]	; (80024dc <Rafael_PanTompkins+0x8c4>)
 800236e:	f8df b184 	ldr.w	fp, [pc, #388]	; 80024f4 <Rafael_PanTompkins+0x8dc>
					npk_i = 0.125*peak_i + 0.875*npk_i;
 8002372:	f8df a17c 	ldr.w	sl, [pc, #380]	; 80024f0 <Rafael_PanTompkins+0x8d8>
					peak_i = RF_integral[current];
 8002376:	9b05      	ldr	r3, [sp, #20]
					npk_i = 0.125*peak_i + 0.875*npk_i;
 8002378:	f9ba 0000 	ldrsh.w	r0, [sl]
					peak_i = RF_integral[current];
 800237c:	800b      	strh	r3, [r1, #0]
					npk_i = 0.125*peak_i + 0.875*npk_i;
 800237e:	f7fe f8a9 	bl	80004d4 <__aeabi_i2d>
 8002382:	4b4e      	ldr	r3, [pc, #312]	; (80024bc <Rafael_PanTompkins+0x8a4>)
					npk_f = 0.125*peak_f + 0.875*npk_f;
 8002384:	4f56      	ldr	r7, [pc, #344]	; (80024e0 <Rafael_PanTompkins+0x8c8>)
					threshold_i2 = 0.5*threshold_i1;
 8002386:	f8df 9148 	ldr.w	r9, [pc, #328]	; 80024d0 <Rafael_PanTompkins+0x8b8>
					threshold_f2 = 0.5*threshold_f1;
 800238a:	4e56      	ldr	r6, [pc, #344]	; (80024e4 <Rafael_PanTompkins+0x8cc>)
					npk_i = 0.125*peak_i + 0.875*npk_i;
 800238c:	2200      	movs	r2, #0
 800238e:	f7fe f90b 	bl	80005a8 <__aeabi_dmul>
 8002392:	4604      	mov	r4, r0
 8002394:	9805      	ldr	r0, [sp, #20]
 8002396:	460d      	mov	r5, r1
 8002398:	f7fe f89c 	bl	80004d4 <__aeabi_i2d>
 800239c:	2200      	movs	r2, #0
 800239e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80023a2:	f7fe f901 	bl	80005a8 <__aeabi_dmul>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4620      	mov	r0, r4
 80023ac:	4629      	mov	r1, r5
 80023ae:	f7fd ff45 	bl	800023c <__adddf3>
 80023b2:	f7fe fba9 	bl	8000b08 <__aeabi_d2iz>
					threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 80023b6:	4b42      	ldr	r3, [pc, #264]	; (80024c0 <Rafael_PanTompkins+0x8a8>)
					npk_i = 0.125*peak_i + 0.875*npk_i;
 80023b8:	b205      	sxth	r5, r0
					threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 80023ba:	f9b3 0000 	ldrsh.w	r0, [r3]
					npk_i = 0.125*peak_i + 0.875*npk_i;
 80023be:	f8aa 5000 	strh.w	r5, [sl]
					threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 80023c2:	1b40      	subs	r0, r0, r5
 80023c4:	f7fe f886 	bl	80004d4 <__aeabi_i2d>
 80023c8:	4b3e      	ldr	r3, [pc, #248]	; (80024c4 <Rafael_PanTompkins+0x8ac>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	f7fe f8ec 	bl	80005a8 <__aeabi_dmul>
 80023d0:	4602      	mov	r2, r0
 80023d2:	4628      	mov	r0, r5
 80023d4:	4614      	mov	r4, r2
 80023d6:	460d      	mov	r5, r1
 80023d8:	f7fe f87c 	bl	80004d4 <__aeabi_i2d>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4620      	mov	r0, r4
 80023e2:	4629      	mov	r1, r5
 80023e4:	f7fd ff2a 	bl	800023c <__adddf3>
 80023e8:	f7fe fb8e 	bl	8000b08 <__aeabi_d2iz>
 80023ec:	4b36      	ldr	r3, [pc, #216]	; (80024c8 <Rafael_PanTompkins+0x8b0>)
 80023ee:	b200      	sxth	r0, r0
 80023f0:	8018      	strh	r0, [r3, #0]
					threshold_i2 = 0.5*threshold_i1;
 80023f2:	f7fe f86f 	bl	80004d4 <__aeabi_i2d>
 80023f6:	4b35      	ldr	r3, [pc, #212]	; (80024cc <Rafael_PanTompkins+0x8b4>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	f7fe f8d5 	bl	80005a8 <__aeabi_dmul>
 80023fe:	f7fe fb83 	bl	8000b08 <__aeabi_d2iz>
					peak_f = RF_highpass[current];
 8002402:	f8ab 8000 	strh.w	r8, [fp]
					threshold_i2 = 0.5*threshold_i1;
 8002406:	f8a9 0000 	strh.w	r0, [r9]
					npk_f = 0.125*peak_f + 0.875*npk_f;
 800240a:	f9b7 0000 	ldrsh.w	r0, [r7]
 800240e:	f7fe f861 	bl	80004d4 <__aeabi_i2d>
 8002412:	4b2a      	ldr	r3, [pc, #168]	; (80024bc <Rafael_PanTompkins+0x8a4>)
 8002414:	2200      	movs	r2, #0
 8002416:	f7fe f8c7 	bl	80005a8 <__aeabi_dmul>
 800241a:	4604      	mov	r4, r0
 800241c:	4640      	mov	r0, r8
 800241e:	460d      	mov	r5, r1
 8002420:	f7fe f858 	bl	80004d4 <__aeabi_i2d>
 8002424:	2200      	movs	r2, #0
 8002426:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800242a:	f7fe f8bd 	bl	80005a8 <__aeabi_dmul>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4620      	mov	r0, r4
 8002434:	4629      	mov	r1, r5
 8002436:	f7fd ff01 	bl	800023c <__adddf3>
 800243a:	f7fe fb65 	bl	8000b08 <__aeabi_d2iz>
					threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 800243e:	4b25      	ldr	r3, [pc, #148]	; (80024d4 <Rafael_PanTompkins+0x8bc>)
					npk_f = 0.125*peak_f + 0.875*npk_f;
 8002440:	b204      	sxth	r4, r0
					threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 8002442:	f9b3 0000 	ldrsh.w	r0, [r3]
					npk_f = 0.125*peak_f + 0.875*npk_f;
 8002446:	803c      	strh	r4, [r7, #0]
					threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 8002448:	1b00      	subs	r0, r0, r4
 800244a:	f7fe f843 	bl	80004d4 <__aeabi_i2d>
 800244e:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <Rafael_PanTompkins+0x8ac>)
 8002450:	2200      	movs	r2, #0
 8002452:	f7fe f8a9 	bl	80005a8 <__aeabi_dmul>
 8002456:	4602      	mov	r2, r0
 8002458:	4620      	mov	r0, r4
 800245a:	460d      	mov	r5, r1
 800245c:	4614      	mov	r4, r2
 800245e:	f7fe f839 	bl	80004d4 <__aeabi_i2d>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4620      	mov	r0, r4
 8002468:	4629      	mov	r1, r5
 800246a:	f7fd fee7 	bl	800023c <__adddf3>
 800246e:	f7fe fb4b 	bl	8000b08 <__aeabi_d2iz>
 8002472:	9b07      	ldr	r3, [sp, #28]
 8002474:	b200      	sxth	r0, r0
 8002476:	8018      	strh	r0, [r3, #0]
					threshold_f2 = 0.5*threshold_f1;
 8002478:	f7fe f82c 	bl	80004d4 <__aeabi_i2d>
 800247c:	4b13      	ldr	r3, [pc, #76]	; (80024cc <Rafael_PanTompkins+0x8b4>)
 800247e:	2200      	movs	r2, #0
 8002480:	f7fe f892 	bl	80005a8 <__aeabi_dmul>
 8002484:	f7fe fb40 	bl	8000b08 <__aeabi_d2iz>
 8002488:	8030      	strh	r0, [r6, #0]
 800248a:	e4e1      	b.n	8001e50 <Rafael_PanTompkins+0x238>
 800248c:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <Rafael_PanTompkins+0x8d0>)
 800248e:	9301      	str	r3, [sp, #4]
			RF_dcblock[current] = RF_signal[current] - RF_signal[current-1] + 0.995*RF_dcblock[current-1];
 8002490:	1e65      	subs	r5, r4, #1
 8002492:	e40d      	b.n	8001cb0 <Rafael_PanTompkins+0x98>
 8002494:	9a01      	ldr	r2, [sp, #4]
 8002496:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	2900      	cmp	r1, #0
 800249e:	f43f af60 	beq.w	8002362 <Rafael_PanTompkins+0x74a>
 80024a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80024a4:	f8c3 a000 	str.w	sl, [r3]
 80024a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80024aa:	601f      	str	r7, [r3, #0]
				if (qrs)
 80024ac:	e759      	b.n	8002362 <Rafael_PanTompkins+0x74a>
		RF_highpass[current] = -RF_lowpass[current];
 80024ae:	4e0f      	ldr	r6, [pc, #60]	; (80024ec <Rafael_PanTompkins+0x8d4>)
 80024b0:	424b      	negs	r3, r1
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
		if (current >= 1)
 80024b8:	e44d      	b.n	8001d56 <Rafael_PanTompkins+0x13e>
 80024ba:	bf00      	nop
 80024bc:	3fec0000 	.word	0x3fec0000
 80024c0:	20002bd2 	.word	0x20002bd2
 80024c4:	3fd00000 	.word	0x3fd00000
 80024c8:	20002bd8 	.word	0x20002bd8
 80024cc:	3fe00000 	.word	0x3fe00000
 80024d0:	20002bda 	.word	0x20002bda
 80024d4:	20002bd0 	.word	0x20002bd0
 80024d8:	20001d44 	.word	0x20001d44
 80024dc:	20002b72 	.word	0x20002b72
 80024e0:	20002b6c 	.word	0x20002b6c
 80024e4:	20002bd6 	.word	0x20002bd6
 80024e8:	20002b5c 	.word	0x20002b5c
 80024ec:	20000f34 	.word	0x20000f34
 80024f0:	20002b6e 	.word	0x20002b6e
 80024f4:	20002b70 	.word	0x20002b70
				    currentSlope = 0;
 80024f8:	4bb5      	ldr	r3, [pc, #724]	; (80027d0 <Rafael_PanTompkins+0xbb8>)
 80024fa:	9311      	str	r3, [sp, #68]	; 0x44
 80024fc:	601d      	str	r5, [r3, #0]
                    for (j = current - 10; j <= current; j++)
 80024fe:	4bb5      	ldr	r3, [pc, #724]	; (80027d4 <Rafael_PanTompkins+0xbbc>)
 8002500:	9310      	str	r3, [sp, #64]	; 0x40
 8002502:	461a      	mov	r2, r3
 8002504:	f1a4 030a 	sub.w	r3, r4, #10
 8002508:	42a3      	cmp	r3, r4
 800250a:	6013      	str	r3, [r2, #0]
 800250c:	f200 813a 	bhi.w	8002784 <Rafael_PanTompkins+0xb6c>
 8002510:	4ab1      	ldr	r2, [pc, #708]	; (80027d8 <Rafael_PanTompkins+0xbc0>)
 8002512:	f1a7 0114 	sub.w	r1, r7, #20
 8002516:	4411      	add	r1, r2
 8002518:	462e      	mov	r6, r5
                        if (RF_squared[j] > currentSlope)
 800251a:	f931 2b02 	ldrsh.w	r2, [r1], #2
                    for (j = current - 10; j <= current; j++)
 800251e:	3301      	adds	r3, #1
                        if (RF_squared[j] > currentSlope)
 8002520:	4296      	cmp	r6, r2
 8002522:	bf3c      	itt	cc
 8002524:	4616      	movcc	r6, r2
 8002526:	2501      	movcc	r5, #1
                    for (j = current - 10; j <= current; j++)
 8002528:	429c      	cmp	r4, r3
 800252a:	d2f6      	bcs.n	800251a <Rafael_PanTompkins+0x902>
 800252c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800252e:	6013      	str	r3, [r2, #0]
 8002530:	2d00      	cmp	r5, #0
 8002532:	f000 8127 	beq.w	8002784 <Rafael_PanTompkins+0xb6c>
 8002536:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002538:	601e      	str	r6, [r3, #0]
                    spk_i = 0.125*peak_i + 0.875*spk_i;
 800253a:	4fa8      	ldr	r7, [pc, #672]	; (80027dc <Rafael_PanTompkins+0xbc4>)
                    spk_f = 0.125*peak_f + 0.875*spk_f;
 800253c:	f8df 92e4 	ldr.w	r9, [pc, #740]	; 8002824 <Rafael_PanTompkins+0xc0c>
                    spk_i = 0.125*peak_i + 0.875*spk_i;
 8002540:	f9b7 0000 	ldrsh.w	r0, [r7]
                    threshold_f2 = 0.5*threshold_f1;
 8002544:	f8df a2e0 	ldr.w	sl, [pc, #736]	; 8002828 <Rafael_PanTompkins+0xc10>
                    spk_i = 0.125*peak_i + 0.875*spk_i;
 8002548:	f7fd ffc4 	bl	80004d4 <__aeabi_i2d>
 800254c:	4ba4      	ldr	r3, [pc, #656]	; (80027e0 <Rafael_PanTompkins+0xbc8>)
 800254e:	2200      	movs	r2, #0
 8002550:	f7fe f82a 	bl	80005a8 <__aeabi_dmul>
 8002554:	4604      	mov	r4, r0
 8002556:	9805      	ldr	r0, [sp, #20]
 8002558:	460d      	mov	r5, r1
 800255a:	f7fd ffbb 	bl	80004d4 <__aeabi_i2d>
 800255e:	2200      	movs	r2, #0
 8002560:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002564:	f7fe f820 	bl	80005a8 <__aeabi_dmul>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	4620      	mov	r0, r4
 800256e:	4629      	mov	r1, r5
 8002570:	f7fd fe64 	bl	800023c <__adddf3>
 8002574:	f7fe fac8 	bl	8000b08 <__aeabi_d2iz>
                    threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8002578:	4b9a      	ldr	r3, [pc, #616]	; (80027e4 <Rafael_PanTompkins+0xbcc>)
 800257a:	f9b3 5000 	ldrsh.w	r5, [r3]
                    spk_i = 0.125*peak_i + 0.875*spk_i;
 800257e:	b200      	sxth	r0, r0
 8002580:	8038      	strh	r0, [r7, #0]
                    threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8002582:	1b40      	subs	r0, r0, r5
 8002584:	f7fd ffa6 	bl	80004d4 <__aeabi_i2d>
 8002588:	4b97      	ldr	r3, [pc, #604]	; (80027e8 <Rafael_PanTompkins+0xbd0>)
 800258a:	2200      	movs	r2, #0
 800258c:	f7fe f80c 	bl	80005a8 <__aeabi_dmul>
 8002590:	4602      	mov	r2, r0
 8002592:	4628      	mov	r0, r5
 8002594:	4614      	mov	r4, r2
 8002596:	460d      	mov	r5, r1
 8002598:	f7fd ff9c 	bl	80004d4 <__aeabi_i2d>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4620      	mov	r0, r4
 80025a2:	4629      	mov	r1, r5
 80025a4:	f7fd fe4a 	bl	800023c <__adddf3>
 80025a8:	f7fe faae 	bl	8000b08 <__aeabi_d2iz>
 80025ac:	4b8f      	ldr	r3, [pc, #572]	; (80027ec <Rafael_PanTompkins+0xbd4>)
 80025ae:	fa0f fb80 	sxth.w	fp, r0
 80025b2:	f8a3 b000 	strh.w	fp, [r3]
                    threshold_i2 = 0.5*threshold_i1;
 80025b6:	4658      	mov	r0, fp
 80025b8:	f7fd ff8c 	bl	80004d4 <__aeabi_i2d>
 80025bc:	2200      	movs	r2, #0
 80025be:	4b8c      	ldr	r3, [pc, #560]	; (80027f0 <Rafael_PanTompkins+0xbd8>)
 80025c0:	f7fd fff2 	bl	80005a8 <__aeabi_dmul>
 80025c4:	f7fe faa0 	bl	8000b08 <__aeabi_d2iz>
 80025c8:	4b8a      	ldr	r3, [pc, #552]	; (80027f4 <Rafael_PanTompkins+0xbdc>)
 80025ca:	8018      	strh	r0, [r3, #0]
                    spk_f = 0.125*peak_f + 0.875*spk_f;
 80025cc:	f9b9 0000 	ldrsh.w	r0, [r9]
 80025d0:	f7fd ff80 	bl	80004d4 <__aeabi_i2d>
 80025d4:	4b82      	ldr	r3, [pc, #520]	; (80027e0 <Rafael_PanTompkins+0xbc8>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	f7fd ffe6 	bl	80005a8 <__aeabi_dmul>
 80025dc:	4604      	mov	r4, r0
 80025de:	4640      	mov	r0, r8
 80025e0:	460d      	mov	r5, r1
 80025e2:	f7fd ff77 	bl	80004d4 <__aeabi_i2d>
 80025e6:	2200      	movs	r2, #0
 80025e8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80025ec:	f7fd ffdc 	bl	80005a8 <__aeabi_dmul>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4620      	mov	r0, r4
 80025f6:	4629      	mov	r1, r5
 80025f8:	f7fd fe20 	bl	800023c <__adddf3>
 80025fc:	f7fe fa84 	bl	8000b08 <__aeabi_d2iz>
                    threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 8002600:	4b7d      	ldr	r3, [pc, #500]	; (80027f8 <Rafael_PanTompkins+0xbe0>)
 8002602:	f9b3 5000 	ldrsh.w	r5, [r3]
                    spk_f = 0.125*peak_f + 0.875*spk_f;
 8002606:	b200      	sxth	r0, r0
 8002608:	f8a9 0000 	strh.w	r0, [r9]
                    threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 800260c:	1b40      	subs	r0, r0, r5
 800260e:	f7fd ff61 	bl	80004d4 <__aeabi_i2d>
 8002612:	4b75      	ldr	r3, [pc, #468]	; (80027e8 <Rafael_PanTompkins+0xbd0>)
 8002614:	2200      	movs	r2, #0
 8002616:	f7fd ffc7 	bl	80005a8 <__aeabi_dmul>
 800261a:	4602      	mov	r2, r0
 800261c:	4628      	mov	r0, r5
 800261e:	4614      	mov	r4, r2
 8002620:	460d      	mov	r5, r1
 8002622:	f7fd ff57 	bl	80004d4 <__aeabi_i2d>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4620      	mov	r0, r4
 800262c:	4629      	mov	r1, r5
 800262e:	f7fd fe05 	bl	800023c <__adddf3>
 8002632:	f7fe fa69 	bl	8000b08 <__aeabi_d2iz>
 8002636:	9b07      	ldr	r3, [sp, #28]
 8002638:	b205      	sxth	r5, r0
 800263a:	801d      	strh	r5, [r3, #0]
                    threshold_f2 = 0.5*threshold_f1;
 800263c:	4628      	mov	r0, r5
 800263e:	f7fd ff49 	bl	80004d4 <__aeabi_i2d>
 8002642:	4b6b      	ldr	r3, [pc, #428]	; (80027f0 <Rafael_PanTompkins+0xbd8>)
 8002644:	2200      	movs	r2, #0
 8002646:	f7fd ffaf 	bl	80005a8 <__aeabi_dmul>
 800264a:	f7fe fa5d 	bl	8000b08 <__aeabi_d2iz>
                    lastSlope = currentSlope;
 800264e:	4b6b      	ldr	r3, [pc, #428]	; (80027fc <Rafael_PanTompkins+0xbe4>)
                    qrs = true;
 8002650:	4a6b      	ldr	r2, [pc, #428]	; (8002800 <Rafael_PanTompkins+0xbe8>)
                    lastSlope = currentSlope;
 8002652:	601e      	str	r6, [r3, #0]
                    qrs = true;
 8002654:	2301      	movs	r3, #1
                    threshold_f2 = 0.5*threshold_f1;
 8002656:	f8aa 0000 	strh.w	r0, [sl]
                    qrs = true;
 800265a:	7013      	strb	r3, [r2, #0]
			lastQRS = sample;
 800265c:	9a08      	ldr	r2, [sp, #32]
 800265e:	9b02      	ldr	r3, [sp, #8]
 8002660:	6013      	str	r3, [r2, #0]
			rr1[7] = sample - lastQRS;
 8002662:	9a06      	ldr	r2, [sp, #24]
 8002664:	9901      	ldr	r1, [sp, #4]
			if ( (rr1[7] >= rrlow) && (rr1[7] <= rrhigh) )
 8002666:	4f67      	ldr	r7, [pc, #412]	; (8002804 <Rafael_PanTompkins+0xbec>)
			rr1[7] = sample - lastQRS;
 8002668:	1a9e      	subs	r6, r3, r2
				rr1[i] = rr1[i+1];
 800266a:	4b67      	ldr	r3, [pc, #412]	; (8002808 <Rafael_PanTompkins+0xbf0>)
 800266c:	2207      	movs	r2, #7
 800266e:	6858      	ldr	r0, [r3, #4]
 8002670:	600a      	str	r2, [r1, #0]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	6018      	str	r0, [r3, #0]
 8002676:	605a      	str	r2, [r3, #4]
				rravg1 += rr1[i];
 8002678:	4410      	add	r0, r2
				rr1[i] = rr1[i+1];
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	609a      	str	r2, [r3, #8]
				rravg1 += rr1[i];
 800267e:	4410      	add	r0, r2
				rr1[i] = rr1[i+1];
 8002680:	691a      	ldr	r2, [r3, #16]
 8002682:	60da      	str	r2, [r3, #12]
				rravg1 += rr1[i];
 8002684:	4410      	add	r0, r2
				rr1[i] = rr1[i+1];
 8002686:	695a      	ldr	r2, [r3, #20]
 8002688:	611a      	str	r2, [r3, #16]
				rravg1 += rr1[i];
 800268a:	4410      	add	r0, r2
				rr1[i] = rr1[i+1];
 800268c:	699a      	ldr	r2, [r3, #24]
 800268e:	615a      	str	r2, [r3, #20]
				rravg1 += rr1[i];
 8002690:	4410      	add	r0, r2
				rr1[i] = rr1[i+1];
 8002692:	69da      	ldr	r2, [r3, #28]
 8002694:	619a      	str	r2, [r3, #24]
				rravg1 += rr1[i];
 8002696:	4410      	add	r0, r2
			rr1[7] = sample - lastQRS;
 8002698:	61de      	str	r6, [r3, #28]
			rravg1 *= 0.125;
 800269a:	4430      	add	r0, r6
 800269c:	f7fd ff1a 	bl	80004d4 <__aeabi_i2d>
 80026a0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80026a4:	2200      	movs	r2, #0
 80026a6:	f7fd ff7f 	bl	80005a8 <__aeabi_dmul>
 80026aa:	f7fe fa2d 	bl	8000b08 <__aeabi_d2iz>
 80026ae:	4b57      	ldr	r3, [pc, #348]	; (800280c <Rafael_PanTompkins+0xbf4>)
 80026b0:	6018      	str	r0, [r3, #0]
			if ( (rr1[7] >= rrlow) && (rr1[7] <= rrhigh) )
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	429e      	cmp	r6, r3
			rravg1 *= 0.125;
 80026b6:	4604      	mov	r4, r0
			if ( (rr1[7] >= rrlow) && (rr1[7] <= rrhigh) )
 80026b8:	db70      	blt.n	800279c <Rafael_PanTompkins+0xb84>
 80026ba:	f8df a170 	ldr.w	sl, [pc, #368]	; 800282c <Rafael_PanTompkins+0xc14>
 80026be:	f8da 3000 	ldr.w	r3, [sl]
 80026c2:	429e      	cmp	r6, r3
 80026c4:	dc6a      	bgt.n	800279c <Rafael_PanTompkins+0xb84>
					rr2[i] = rr2[i+1];
 80026c6:	4b52      	ldr	r3, [pc, #328]	; (8002810 <Rafael_PanTompkins+0xbf8>)
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	6858      	ldr	r0, [r3, #4]
 80026cc:	6018      	str	r0, [r3, #0]
 80026ce:	605a      	str	r2, [r3, #4]
					rravg2 += rr2[i];
 80026d0:	4410      	add	r0, r2
					rr2[i] = rr2[i+1];
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	609a      	str	r2, [r3, #8]
					rravg2 += rr2[i];
 80026d6:	4410      	add	r0, r2
					rr2[i] = rr2[i+1];
 80026d8:	691a      	ldr	r2, [r3, #16]
 80026da:	60da      	str	r2, [r3, #12]
					rravg2 += rr2[i];
 80026dc:	4410      	add	r0, r2
					rr2[i] = rr2[i+1];
 80026de:	695a      	ldr	r2, [r3, #20]
 80026e0:	611a      	str	r2, [r3, #16]
					rravg2 += rr2[i];
 80026e2:	4410      	add	r0, r2
					rr2[i] = rr2[i+1];
 80026e4:	699a      	ldr	r2, [r3, #24]
 80026e6:	615a      	str	r2, [r3, #20]
					rravg2 += rr2[i];
 80026e8:	4410      	add	r0, r2
					rr2[i] = rr2[i+1];
 80026ea:	69da      	ldr	r2, [r3, #28]
 80026ec:	619a      	str	r2, [r3, #24]
					rravg2 += rr2[i];
 80026ee:	4410      	add	r0, r2
				rr2[7] = rr1[7];
 80026f0:	61de      	str	r6, [r3, #28]
				rravg2 *= 0.125;
 80026f2:	4430      	add	r0, r6
 80026f4:	f7fd feee 	bl	80004d4 <__aeabi_i2d>
 80026f8:	2200      	movs	r2, #0
 80026fa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80026fe:	f7fd ff53 	bl	80005a8 <__aeabi_dmul>
 8002702:	f7fe fa01 	bl	8000b08 <__aeabi_d2iz>
 8002706:	4b43      	ldr	r3, [pc, #268]	; (8002814 <Rafael_PanTompkins+0xbfc>)
 8002708:	6018      	str	r0, [r3, #0]
 800270a:	4606      	mov	r6, r0
				rrlow = 0.92*rravg2;
 800270c:	f7fd fee2 	bl	80004d4 <__aeabi_i2d>
 8002710:	a329      	add	r3, pc, #164	; (adr r3, 80027b8 <Rafael_PanTompkins+0xba0>)
 8002712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002716:	4680      	mov	r8, r0
 8002718:	4689      	mov	r9, r1
 800271a:	f7fd ff45 	bl	80005a8 <__aeabi_dmul>
 800271e:	f7fe f9f3 	bl	8000b08 <__aeabi_d2iz>
				rrhigh = 1.16*rravg2;
 8002722:	a327      	add	r3, pc, #156	; (adr r3, 80027c0 <Rafael_PanTompkins+0xba8>)
 8002724:	e9d3 2300 	ldrd	r2, r3, [r3]
				rrlow = 0.92*rravg2;
 8002728:	6038      	str	r0, [r7, #0]
				rrhigh = 1.16*rravg2;
 800272a:	4649      	mov	r1, r9
 800272c:	4640      	mov	r0, r8
 800272e:	f7fd ff3b 	bl	80005a8 <__aeabi_dmul>
 8002732:	f7fe f9e9 	bl	8000b08 <__aeabi_d2iz>
				rrmiss = 1.66*rravg2;
 8002736:	a324      	add	r3, pc, #144	; (adr r3, 80027c8 <Rafael_PanTompkins+0xbb0>)
 8002738:	e9d3 2300 	ldrd	r2, r3, [r3]
				rrhigh = 1.16*rravg2;
 800273c:	f8ca 0000 	str.w	r0, [sl]
				rrmiss = 1.66*rravg2;
 8002740:	4649      	mov	r1, r9
 8002742:	4640      	mov	r0, r8
 8002744:	f7fd ff30 	bl	80005a8 <__aeabi_dmul>
 8002748:	f7fe f9de 	bl	8000b08 <__aeabi_d2iz>
 800274c:	4b32      	ldr	r3, [pc, #200]	; (8002818 <Rafael_PanTompkins+0xc00>)
 800274e:	6018      	str	r0, [r3, #0]
			prevRegular = regular;
 8002750:	4b32      	ldr	r3, [pc, #200]	; (800281c <Rafael_PanTompkins+0xc04>)
 8002752:	4933      	ldr	r1, [pc, #204]	; (8002820 <Rafael_PanTompkins+0xc08>)
 8002754:	781a      	ldrb	r2, [r3, #0]
 8002756:	700a      	strb	r2, [r1, #0]
			if (rravg1 == rravg2)
 8002758:	42b4      	cmp	r4, r6
 800275a:	d022      	beq.n	80027a2 <Rafael_PanTompkins+0xb8a>
				regular = false;
 800275c:	2000      	movs	r0, #0
 800275e:	7018      	strb	r0, [r3, #0]
				if (prevRegular)
 8002760:	2a00      	cmp	r2, #0
 8002762:	f43f ab75 	beq.w	8001e50 <Rafael_PanTompkins+0x238>
					threshold_i1 /= 2;
 8002766:	4a21      	ldr	r2, [pc, #132]	; (80027ec <Rafael_PanTompkins+0xbd4>)
 8002768:	eb0b 73db 	add.w	r3, fp, fp, lsr #31
 800276c:	105b      	asrs	r3, r3, #1
 800276e:	8013      	strh	r3, [r2, #0]
					threshold_f1 /= 2;
 8002770:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002774:	9b07      	ldr	r3, [sp, #28]
 8002776:	106d      	asrs	r5, r5, #1
 8002778:	801d      	strh	r5, [r3, #0]
}
 800277a:	b015      	add	sp, #84	; 0x54
 800277c:	ecbd 8b04 	vpop	{d8-d9}
 8002780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        if (RF_squared[j] > currentSlope)
 8002784:	2600      	movs	r6, #0
 8002786:	e6d8      	b.n	800253a <Rafael_PanTompkins+0x922>
			if ((sample - lastQRS > (long unsigned int)rrmiss) && (sample > lastQRS + FS/5))
 8002788:	4a23      	ldr	r2, [pc, #140]	; (8002818 <Rafael_PanTompkins+0xc00>)
 800278a:	9802      	ldr	r0, [sp, #8]
 800278c:	9d06      	ldr	r5, [sp, #24]
 800278e:	920d      	str	r2, [sp, #52]	; 0x34
 8002790:	6812      	ldr	r2, [r2, #0]
 8002792:	1b40      	subs	r0, r0, r5
 8002794:	4282      	cmp	r2, r0
 8002796:	f4ff ac96 	bcc.w	80020c6 <Rafael_PanTompkins+0x4ae>
 800279a:	e5ea      	b.n	8002372 <Rafael_PanTompkins+0x75a>
			if (rravg1 == rravg2)
 800279c:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <Rafael_PanTompkins+0xbfc>)
 800279e:	681e      	ldr	r6, [r3, #0]
 80027a0:	e7d6      	b.n	8002750 <Rafael_PanTompkins+0xb38>
				regular = true;
 80027a2:	2201      	movs	r2, #1
		int16_t result = 0;
 80027a4:	2000      	movs	r0, #0
				regular = true;
 80027a6:	701a      	strb	r2, [r3, #0]
}
 80027a8:	b015      	add	sp, #84	; 0x54
 80027aa:	ecbd 8b04 	vpop	{d8-d9}
 80027ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        for (j = i - 10; j <= i; j++)
 80027b2:	46aa      	mov	sl, r5
					    currentSlope = 0;
 80027b4:	2700      	movs	r7, #0
 80027b6:	e4e2      	b.n	800217e <Rafael_PanTompkins+0x566>
 80027b8:	d70a3d71 	.word	0xd70a3d71
 80027bc:	3fed70a3 	.word	0x3fed70a3
 80027c0:	28f5c28f 	.word	0x28f5c28f
 80027c4:	3ff28f5c 	.word	0x3ff28f5c
 80027c8:	28f5c28f 	.word	0x28f5c28f
 80027cc:	3ffa8f5c 	.word	0x3ffa8f5c
 80027d0:	20002b58 	.word	0x20002b58
 80027d4:	20002b60 	.word	0x20002b60
 80027d8:	200026a4 	.word	0x200026a4
 80027dc:	20002bd2 	.word	0x20002bd2
 80027e0:	3fec0000 	.word	0x3fec0000
 80027e4:	20002b6e 	.word	0x20002b6e
 80027e8:	3fd00000 	.word	0x3fd00000
 80027ec:	20002bd8 	.word	0x20002bd8
 80027f0:	3fe00000 	.word	0x3fe00000
 80027f4:	20002bda 	.word	0x20002bda
 80027f8:	20002b6c 	.word	0x20002b6c
 80027fc:	20002b68 	.word	0x20002b68
 8002800:	20002b75 	.word	0x20002b75
 8002804:	20002bc4 	.word	0x20002bc4
 8002808:	20002b78 	.word	0x20002b78
 800280c:	20002bb8 	.word	0x20002bb8
 8002810:	20002b98 	.word	0x20002b98
 8002814:	20002bbc 	.word	0x20002bbc
 8002818:	20002bc8 	.word	0x20002bc8
 800281c:	20000004 	.word	0x20000004
 8002820:	20002b74 	.word	0x20002b74
 8002824:	20002bd0 	.word	0x20002bd0
 8002828:	20002bd6 	.word	0x20002bd6
 800282c:	20002bc0 	.word	0x20002bc0
 8002830:	9b03      	ldr	r3, [sp, #12]
 8002832:	e9cd 6904 	strd	r6, r9, [sp, #16]
 8002836:	46a1      	mov	r9, r4
 8002838:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800283a:	b113      	cbz	r3, 8002842 <Rafael_PanTompkins+0xc2a>
 800283c:	9b01      	ldr	r3, [sp, #4]
 800283e:	f8c3 9000 	str.w	r9, [r3]
                            peak_i = RF_integral[i];
 8002842:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002844:	9a04      	ldr	r2, [sp, #16]
 8002846:	601f      	str	r7, [r3, #0]
 8002848:	4ba5      	ldr	r3, [pc, #660]	; (8002ae0 <Rafael_PanTompkins+0xec8>)
                            spk_i = 0.25*peak_i+ 0.75*spk_i;
 800284a:	4da6      	ldr	r5, [pc, #664]	; (8002ae4 <Rafael_PanTompkins+0xecc>)
                            peak_i = RF_integral[i];
 800284c:	801a      	strh	r2, [r3, #0]
                            peak_f = RF_highpass[i];
 800284e:	4ba6      	ldr	r3, [pc, #664]	; (8002ae8 <Rafael_PanTompkins+0xed0>)
 8002850:	9905      	ldr	r1, [sp, #20]
                            spk_i = 0.25*peak_i+ 0.75*spk_i;
 8002852:	f9b5 0000 	ldrsh.w	r0, [r5]
                            peak_f = RF_highpass[i];
 8002856:	8019      	strh	r1, [r3, #0]
                            spk_i = 0.25*peak_i+ 0.75*spk_i;
 8002858:	f7fd fe3c 	bl	80004d4 <__aeabi_i2d>
 800285c:	4ba3      	ldr	r3, [pc, #652]	; (8002aec <Rafael_PanTompkins+0xed4>)
                            spk_f = 0.25*peak_f + 0.75*spk_f;
 800285e:	4ea4      	ldr	r6, [pc, #656]	; (8002af0 <Rafael_PanTompkins+0xed8>)
                            spk_i = 0.25*peak_i+ 0.75*spk_i;
 8002860:	2200      	movs	r2, #0
 8002862:	f7fd fea1 	bl	80005a8 <__aeabi_dmul>
 8002866:	4602      	mov	r2, r0
 8002868:	9804      	ldr	r0, [sp, #16]
 800286a:	4692      	mov	sl, r2
 800286c:	468b      	mov	fp, r1
 800286e:	f7fd fe31 	bl	80004d4 <__aeabi_i2d>
 8002872:	4ba0      	ldr	r3, [pc, #640]	; (8002af4 <Rafael_PanTompkins+0xedc>)
 8002874:	2200      	movs	r2, #0
 8002876:	f7fd fe97 	bl	80005a8 <__aeabi_dmul>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4650      	mov	r0, sl
 8002880:	4659      	mov	r1, fp
 8002882:	f7fd fcdb 	bl	800023c <__adddf3>
 8002886:	f7fe f93f 	bl	8000b08 <__aeabi_d2iz>
 800288a:	fa0f f880 	sxth.w	r8, r0
 800288e:	f8a5 8000 	strh.w	r8, [r5]
                            spk_f = 0.25*peak_f + 0.75*spk_f;
 8002892:	f9b6 0000 	ldrsh.w	r0, [r6]
 8002896:	f7fd fe1d 	bl	80004d4 <__aeabi_i2d>
 800289a:	4b94      	ldr	r3, [pc, #592]	; (8002aec <Rafael_PanTompkins+0xed4>)
 800289c:	2200      	movs	r2, #0
 800289e:	f7fd fe83 	bl	80005a8 <__aeabi_dmul>
 80028a2:	4602      	mov	r2, r0
 80028a4:	9805      	ldr	r0, [sp, #20]
 80028a6:	4692      	mov	sl, r2
 80028a8:	468b      	mov	fp, r1
 80028aa:	f7fd fe13 	bl	80004d4 <__aeabi_i2d>
 80028ae:	4b91      	ldr	r3, [pc, #580]	; (8002af4 <Rafael_PanTompkins+0xedc>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	f7fd fe79 	bl	80005a8 <__aeabi_dmul>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4650      	mov	r0, sl
 80028bc:	4659      	mov	r1, fp
 80028be:	f7fd fcbd 	bl	800023c <__adddf3>
 80028c2:	f7fe f921 	bl	8000b08 <__aeabi_d2iz>
                            threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 80028c6:	4b8c      	ldr	r3, [pc, #560]	; (8002af8 <Rafael_PanTompkins+0xee0>)
 80028c8:	f9b3 5000 	ldrsh.w	r5, [r3]
                            spk_f = 0.25*peak_f + 0.75*spk_f;
 80028cc:	fa0f fa80 	sxth.w	sl, r0
 80028d0:	f8a6 a000 	strh.w	sl, [r6]
                            threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 80028d4:	eba8 0005 	sub.w	r0, r8, r5
 80028d8:	f7fd fdfc 	bl	80004d4 <__aeabi_i2d>
 80028dc:	4b85      	ldr	r3, [pc, #532]	; (8002af4 <Rafael_PanTompkins+0xedc>)
 80028de:	2200      	movs	r2, #0
 80028e0:	f7fd fe62 	bl	80005a8 <__aeabi_dmul>
 80028e4:	4602      	mov	r2, r0
 80028e6:	4628      	mov	r0, r5
 80028e8:	460e      	mov	r6, r1
 80028ea:	4615      	mov	r5, r2
 80028ec:	f7fd fdf2 	bl	80004d4 <__aeabi_i2d>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4628      	mov	r0, r5
 80028f6:	4631      	mov	r1, r6
 80028f8:	f7fd fca0 	bl	800023c <__adddf3>
 80028fc:	f7fe f904 	bl	8000b08 <__aeabi_d2iz>
 8002900:	4a7e      	ldr	r2, [pc, #504]	; (8002afc <Rafael_PanTompkins+0xee4>)
 8002902:	b203      	sxth	r3, r0
 8002904:	8013      	strh	r3, [r2, #0]
                            threshold_i2 = 0.5*threshold_i1;
 8002906:	4618      	mov	r0, r3
                            threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8002908:	9303      	str	r3, [sp, #12]
                            threshold_i2 = 0.5*threshold_i1;
 800290a:	f7fd fde3 	bl	80004d4 <__aeabi_i2d>
 800290e:	2200      	movs	r2, #0
 8002910:	4b7b      	ldr	r3, [pc, #492]	; (8002b00 <Rafael_PanTompkins+0xee8>)
 8002912:	f7fd fe49 	bl	80005a8 <__aeabi_dmul>
 8002916:	f7fe f8f7 	bl	8000b08 <__aeabi_d2iz>
 800291a:	4b7a      	ldr	r3, [pc, #488]	; (8002b04 <Rafael_PanTompkins+0xeec>)
 800291c:	8018      	strh	r0, [r3, #0]
                            lastSlope = currentSlope;
 800291e:	4b7a      	ldr	r3, [pc, #488]	; (8002b08 <Rafael_PanTompkins+0xef0>)
 8002920:	601f      	str	r7, [r3, #0]
                            threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 8002922:	4b7a      	ldr	r3, [pc, #488]	; (8002b0c <Rafael_PanTompkins+0xef4>)
 8002924:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002928:	ebaa 0005 	sub.w	r0, sl, r5
 800292c:	f7fd fdd2 	bl	80004d4 <__aeabi_i2d>
 8002930:	4b70      	ldr	r3, [pc, #448]	; (8002af4 <Rafael_PanTompkins+0xedc>)
 8002932:	2200      	movs	r2, #0
 8002934:	f7fd fe38 	bl	80005a8 <__aeabi_dmul>
 8002938:	4602      	mov	r2, r0
 800293a:	4628      	mov	r0, r5
 800293c:	4616      	mov	r6, r2
 800293e:	460f      	mov	r7, r1
 8002940:	f7fd fdc8 	bl	80004d4 <__aeabi_i2d>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4630      	mov	r0, r6
 800294a:	4639      	mov	r1, r7
 800294c:	f7fd fc76 	bl	800023c <__adddf3>
 8002950:	f7fe f8da 	bl	8000b08 <__aeabi_d2iz>
 8002954:	9b07      	ldr	r3, [sp, #28]
 8002956:	b205      	sxth	r5, r0
 8002958:	801d      	strh	r5, [r3, #0]
                            threshold_f2 = 0.5*threshold_f1;
 800295a:	4628      	mov	r0, r5
 800295c:	f7fd fdba 	bl	80004d4 <__aeabi_i2d>
 8002960:	4b67      	ldr	r3, [pc, #412]	; (8002b00 <Rafael_PanTompkins+0xee8>)
 8002962:	2200      	movs	r2, #0
 8002964:	f7fd fe20 	bl	80005a8 <__aeabi_dmul>
 8002968:	f7fe f8ce 	bl	8000b08 <__aeabi_d2iz>
 800296c:	4b68      	ldr	r3, [pc, #416]	; (8002b10 <Rafael_PanTompkins+0xef8>)
                            qrs = true;
 800296e:	4969      	ldr	r1, [pc, #420]	; (8002b14 <Rafael_PanTompkins+0xefc>)
                            threshold_f2 = 0.5*threshold_f1;
 8002970:	8018      	strh	r0, [r3, #0]
                                rr1[j] = rr1[j+1];
 8002972:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002974:	2207      	movs	r2, #7
 8002976:	601a      	str	r2, [r3, #0]
                            rr1[7] = sample - (current - i) - lastQRS;
 8002978:	9b02      	ldr	r3, [sp, #8]
 800297a:	1b1e      	subs	r6, r3, r4
                            lastQRS = sample - (current - i);
 800297c:	9b08      	ldr	r3, [sp, #32]
                            rr1[7] = sample - (current - i) - lastQRS;
 800297e:	444e      	add	r6, r9
                            lastQRS = sample - (current - i);
 8002980:	601e      	str	r6, [r3, #0]
                            rr1[7] = sample - (current - i) - lastQRS;
 8002982:	9b06      	ldr	r3, [sp, #24]
 8002984:	1af6      	subs	r6, r6, r3
                                rr1[j] = rr1[j+1];
 8002986:	4b64      	ldr	r3, [pc, #400]	; (8002b18 <Rafael_PanTompkins+0xf00>)
                            qrs = true;
 8002988:	2201      	movs	r2, #1
                                rr1[j] = rr1[j+1];
 800298a:	6858      	ldr	r0, [r3, #4]
                            qrs = true;
 800298c:	700a      	strb	r2, [r1, #0]
                                rr1[j] = rr1[j+1];
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	6018      	str	r0, [r3, #0]
 8002992:	605a      	str	r2, [r3, #4]
                                rravg1 += rr1[j];
 8002994:	4410      	add	r0, r2
                                rr1[j] = rr1[j+1];
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	609a      	str	r2, [r3, #8]
                                rravg1 += rr1[j];
 800299a:	4410      	add	r0, r2
                                rr1[j] = rr1[j+1];
 800299c:	691a      	ldr	r2, [r3, #16]
 800299e:	60da      	str	r2, [r3, #12]
                                rravg1 += rr1[j];
 80029a0:	4410      	add	r0, r2
                                rr1[j] = rr1[j+1];
 80029a2:	695a      	ldr	r2, [r3, #20]
 80029a4:	611a      	str	r2, [r3, #16]
                                rravg1 += rr1[j];
 80029a6:	4410      	add	r0, r2
                                rr1[j] = rr1[j+1];
 80029a8:	699a      	ldr	r2, [r3, #24]
 80029aa:	615a      	str	r2, [r3, #20]
                                rravg1 += rr1[j];
 80029ac:	4410      	add	r0, r2
                                rr1[j] = rr1[j+1];
 80029ae:	69da      	ldr	r2, [r3, #28]
 80029b0:	619a      	str	r2, [r3, #24]
                                rravg1 += rr1[j];
 80029b2:	4410      	add	r0, r2
                            rr1[7] = sample - (current - i) - lastQRS;
 80029b4:	61de      	str	r6, [r3, #28]
                            rravg1 *= 0.125;
 80029b6:	4430      	add	r0, r6
 80029b8:	f7fd fd8c 	bl	80004d4 <__aeabi_i2d>
 80029bc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80029c0:	2200      	movs	r2, #0
 80029c2:	f7fd fdf1 	bl	80005a8 <__aeabi_dmul>
 80029c6:	f7fe f89f 	bl	8000b08 <__aeabi_d2iz>
 80029ca:	4b54      	ldr	r3, [pc, #336]	; (8002b1c <Rafael_PanTompkins+0xf04>)
 80029cc:	6018      	str	r0, [r3, #0]
                            if ( (rr1[7] >= rrlow) && (rr1[7] <= rrhigh) )
 80029ce:	4b54      	ldr	r3, [pc, #336]	; (8002b20 <Rafael_PanTompkins+0xf08>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	429e      	cmp	r6, r3
                            rravg1 *= 0.125;
 80029d4:	4607      	mov	r7, r0
                            if ( (rr1[7] >= rrlow) && (rr1[7] <= rrhigh) )
 80029d6:	db70      	blt.n	8002aba <Rafael_PanTompkins+0xea2>
 80029d8:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8002b38 <Rafael_PanTompkins+0xf20>
 80029dc:	f8d8 3000 	ldr.w	r3, [r8]
 80029e0:	429e      	cmp	r6, r3
 80029e2:	dc6a      	bgt.n	8002aba <Rafael_PanTompkins+0xea2>
                                    rr2[i] = rr2[i+1];
 80029e4:	9b01      	ldr	r3, [sp, #4]
 80029e6:	2207      	movs	r2, #7
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	4b4e      	ldr	r3, [pc, #312]	; (8002b24 <Rafael_PanTompkins+0xf0c>)
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	6898      	ldr	r0, [r3, #8]
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	6058      	str	r0, [r3, #4]
                                    rravg2 += rr2[i];
 80029f4:	4410      	add	r0, r2
                                    rr2[i] = rr2[i+1];
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	609a      	str	r2, [r3, #8]
                                    rravg2 += rr2[i];
 80029fa:	4410      	add	r0, r2
                                    rr2[i] = rr2[i+1];
 80029fc:	691a      	ldr	r2, [r3, #16]
 80029fe:	60da      	str	r2, [r3, #12]
                                    rravg2 += rr2[i];
 8002a00:	4410      	add	r0, r2
                                    rr2[i] = rr2[i+1];
 8002a02:	695a      	ldr	r2, [r3, #20]
 8002a04:	611a      	str	r2, [r3, #16]
                                    rravg2 += rr2[i];
 8002a06:	4410      	add	r0, r2
                                    rr2[i] = rr2[i+1];
 8002a08:	699a      	ldr	r2, [r3, #24]
 8002a0a:	615a      	str	r2, [r3, #20]
                                    rravg2 += rr2[i];
 8002a0c:	4410      	add	r0, r2
                                    rr2[i] = rr2[i+1];
 8002a0e:	69da      	ldr	r2, [r3, #28]
 8002a10:	619a      	str	r2, [r3, #24]
                                    rravg2 += rr2[i];
 8002a12:	4410      	add	r0, r2
                                rr2[7] = rr1[7];
 8002a14:	61de      	str	r6, [r3, #28]
                                rravg2 *= 0.125;
 8002a16:	4430      	add	r0, r6
 8002a18:	f7fd fd5c 	bl	80004d4 <__aeabi_i2d>
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002a22:	f7fd fdc1 	bl	80005a8 <__aeabi_dmul>
 8002a26:	f7fe f86f 	bl	8000b08 <__aeabi_d2iz>
 8002a2a:	4b3f      	ldr	r3, [pc, #252]	; (8002b28 <Rafael_PanTompkins+0xf10>)
 8002a2c:	6018      	str	r0, [r3, #0]
 8002a2e:	4606      	mov	r6, r0
                                rrlow = 0.92*rravg2;
 8002a30:	f7fd fd50 	bl	80004d4 <__aeabi_i2d>
 8002a34:	a324      	add	r3, pc, #144	; (adr r3, 8002ac8 <Rafael_PanTompkins+0xeb0>)
 8002a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3a:	4682      	mov	sl, r0
 8002a3c:	468b      	mov	fp, r1
 8002a3e:	f7fd fdb3 	bl	80005a8 <__aeabi_dmul>
 8002a42:	f7fe f861 	bl	8000b08 <__aeabi_d2iz>
 8002a46:	4b36      	ldr	r3, [pc, #216]	; (8002b20 <Rafael_PanTompkins+0xf08>)
                                rrhigh = 1.16*rravg2;
 8002a48:	4659      	mov	r1, fp
                                rrlow = 0.92*rravg2;
 8002a4a:	6018      	str	r0, [r3, #0]
                                rrhigh = 1.16*rravg2;
 8002a4c:	a320      	add	r3, pc, #128	; (adr r3, 8002ad0 <Rafael_PanTompkins+0xeb8>)
 8002a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a52:	4650      	mov	r0, sl
 8002a54:	f7fd fda8 	bl	80005a8 <__aeabi_dmul>
 8002a58:	f7fe f856 	bl	8000b08 <__aeabi_d2iz>
                                rrmiss = 1.66*rravg2;
 8002a5c:	a31e      	add	r3, pc, #120	; (adr r3, 8002ad8 <Rafael_PanTompkins+0xec0>)
 8002a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
                                rrhigh = 1.16*rravg2;
 8002a62:	f8c8 0000 	str.w	r0, [r8]
                                rrmiss = 1.66*rravg2;
 8002a66:	4659      	mov	r1, fp
 8002a68:	4650      	mov	r0, sl
 8002a6a:	f7fd fd9d 	bl	80005a8 <__aeabi_dmul>
 8002a6e:	f7fe f84b 	bl	8000b08 <__aeabi_d2iz>
 8002a72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002a74:	6018      	str	r0, [r3, #0]
                            prevRegular = regular;
 8002a76:	4b2d      	ldr	r3, [pc, #180]	; (8002b2c <Rafael_PanTompkins+0xf14>)
 8002a78:	492d      	ldr	r1, [pc, #180]	; (8002b30 <Rafael_PanTompkins+0xf18>)
 8002a7a:	781a      	ldrb	r2, [r3, #0]
 8002a7c:	700a      	strb	r2, [r1, #0]
                            if (rravg1 == rravg2)
 8002a7e:	42b7      	cmp	r7, r6
 8002a80:	d01e      	beq.n	8002ac0 <Rafael_PanTompkins+0xea8>
                                regular = false;
 8002a82:	2100      	movs	r1, #0
 8002a84:	7019      	strb	r1, [r3, #0]
                                if (prevRegular)
 8002a86:	b15a      	cbz	r2, 8002aa0 <Rafael_PanTompkins+0xe88>
                                    threshold_i1 /= 2;
 8002a88:	9b03      	ldr	r3, [sp, #12]
 8002a8a:	4a1c      	ldr	r2, [pc, #112]	; (8002afc <Rafael_PanTompkins+0xee4>)
 8002a8c:	eb03 79d3 	add.w	r9, r3, r3, lsr #31
 8002a90:	ea4f 0369 	mov.w	r3, r9, asr #1
 8002a94:	8013      	strh	r3, [r2, #0]
                                    threshold_f1 /= 2;
 8002a96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002a9a:	9a07      	ldr	r2, [sp, #28]
 8002a9c:	106b      	asrs	r3, r5, #1
 8002a9e:	8013      	strh	r3, [r2, #0]
					RF_outputSignal[i] = true;
 8002aa0:	9b01      	ldr	r3, [sp, #4]
 8002aa2:	681a      	ldr	r2, [r3, #0]
					RF_outputSignal[current] = false;
 8002aa4:	4b23      	ldr	r3, [pc, #140]	; (8002b34 <Rafael_PanTompkins+0xf1c>)
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
					RF_outputSignal[i] = true;
 8002aac:	2101      	movs	r1, #1
                    result = (current - i);
 8002aae:	1aa0      	subs	r0, r4, r2
					RF_outputSignal[i] = true;
 8002ab0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
                    result = (current - i);
 8002ab4:	b200      	sxth	r0, r0
		return result;
 8002ab6:	f7ff b9cc 	b.w	8001e52 <Rafael_PanTompkins+0x23a>
                            if (rravg1 == rravg2)
 8002aba:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <Rafael_PanTompkins+0xf10>)
 8002abc:	681e      	ldr	r6, [r3, #0]
 8002abe:	e7da      	b.n	8002a76 <Rafael_PanTompkins+0xe5e>
                                regular = true;
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	701a      	strb	r2, [r3, #0]
 8002ac4:	e7ec      	b.n	8002aa0 <Rafael_PanTompkins+0xe88>
 8002ac6:	bf00      	nop
 8002ac8:	d70a3d71 	.word	0xd70a3d71
 8002acc:	3fed70a3 	.word	0x3fed70a3
 8002ad0:	28f5c28f 	.word	0x28f5c28f
 8002ad4:	3ff28f5c 	.word	0x3ff28f5c
 8002ad8:	28f5c28f 	.word	0x28f5c28f
 8002adc:	3ffa8f5c 	.word	0x3ffa8f5c
 8002ae0:	20002b72 	.word	0x20002b72
 8002ae4:	20002bd2 	.word	0x20002bd2
 8002ae8:	20002b70 	.word	0x20002b70
 8002aec:	3fe80000 	.word	0x3fe80000
 8002af0:	20002bd0 	.word	0x20002bd0
 8002af4:	3fd00000 	.word	0x3fd00000
 8002af8:	20002b6e 	.word	0x20002b6e
 8002afc:	20002bd8 	.word	0x20002bd8
 8002b00:	3fe00000 	.word	0x3fe00000
 8002b04:	20002bda 	.word	0x20002bda
 8002b08:	20002b68 	.word	0x20002b68
 8002b0c:	20002b6c 	.word	0x20002b6c
 8002b10:	20002bd6 	.word	0x20002bd6
 8002b14:	20002b75 	.word	0x20002b75
 8002b18:	20002b78 	.word	0x20002b78
 8002b1c:	20002bb8 	.word	0x20002bb8
 8002b20:	20002bc4 	.word	0x20002bc4
 8002b24:	20002b98 	.word	0x20002b98
 8002b28:	20002bbc 	.word	0x20002bbc
 8002b2c:	20000004 	.word	0x20000004
 8002b30:	20002b74 	.word	0x20002b74
 8002b34:	20001d44 	.word	0x20001d44
 8002b38:	20002bc0 	.word	0x20002bc0

08002b3c <Rafael_get_LPFilter_output>:


int16_t Rafael_get_LPFilter_output()
{
	return RF_lowpass[BUFFSIZE];
 8002b3c:	4b01      	ldr	r3, [pc, #4]	; (8002b44 <Rafael_get_LPFilter_output+0x8>)
}
 8002b3e:	f9b3 04b0 	ldrsh.w	r0, [r3, #1200]	; 0x4b0
 8002b42:	4770      	bx	lr
 8002b44:	20001894 	.word	0x20001894

08002b48 <Rafael_get_HPFilter_output>:
int16_t Rafael_get_HPFilter_output()
{
	return RF_highpass[BUFFSIZE];
 8002b48:	4b01      	ldr	r3, [pc, #4]	; (8002b50 <Rafael_get_HPFilter_output+0x8>)
}
 8002b4a:	f9b3 04b0 	ldrsh.w	r0, [r3, #1200]	; 0x4b0
 8002b4e:	4770      	bx	lr
 8002b50:	20000f34 	.word	0x20000f34

08002b54 <Rafael_get_DRFilter_output>:
int16_t Rafael_get_DRFilter_output()
{
	return RF_derivative[BUFFSIZE];
 8002b54:	4b01      	ldr	r3, [pc, #4]	; (8002b5c <Rafael_get_DRFilter_output+0x8>)
}
 8002b56:	f9b3 04b0 	ldrsh.w	r0, [r3, #1200]	; 0x4b0
 8002b5a:	4770      	bx	lr
 8002b5c:	20000a84 	.word	0x20000a84

08002b60 <Rafael_get_SQRFilter_output>:
int16_t Rafael_get_SQRFilter_output()
{
	return RF_squared[current];
 8002b60:	4a02      	ldr	r2, [pc, #8]	; (8002b6c <Rafael_get_SQRFilter_output+0xc>)
 8002b62:	4b03      	ldr	r3, [pc, #12]	; (8002b70 <Rafael_get_SQRFilter_output+0x10>)
 8002b64:	6812      	ldr	r2, [r2, #0]
}
 8002b66:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 8002b6a:	4770      	bx	lr
 8002b6c:	20002b54 	.word	0x20002b54
 8002b70:	200026a4 	.word	0x200026a4

08002b74 <Rafael_get_MVFilter_output>:
int16_t Rafael_get_MVFilter_output()
{
	return RF_integral[current];
 8002b74:	4a02      	ldr	r2, [pc, #8]	; (8002b80 <Rafael_get_MVFilter_output+0xc>)
 8002b76:	4b03      	ldr	r3, [pc, #12]	; (8002b84 <Rafael_get_MVFilter_output+0x10>)
 8002b78:	6812      	ldr	r2, [r2, #0]
}
 8002b7a:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 8002b7e:	4770      	bx	lr
 8002b80:	20002b54 	.word	0x20002b54
 8002b84:	200013e4 	.word	0x200013e4

08002b88 <Rafael_get_ThI1_output>:
int16_t Rafael_get_ThI1_output()
{
	return threshold_i1;
 8002b88:	4b01      	ldr	r3, [pc, #4]	; (8002b90 <Rafael_get_ThI1_output+0x8>)
}
 8002b8a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002b8e:	4770      	bx	lr
 8002b90:	20002bd8 	.word	0x20002bd8

08002b94 <Rafael_get_ThF1_output>:
int16_t Rafael_get_ThF1_output()
{
	return threshold_f1;
 8002b94:	4b01      	ldr	r3, [pc, #4]	; (8002b9c <Rafael_get_ThF1_output+0x8>)
}
 8002b96:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002b9a:	4770      	bx	lr
 8002b9c:	20002bd4 	.word	0x20002bd4

08002ba0 <parseLine>:
}



void parseLine (uint8_t* Buf, uint32_t Len)
{//Function parse one line from serial port
 8002ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	//In line can be command or data
	if (Len>6)
 8002ba4:	2906      	cmp	r1, #6
{//Function parse one line from serial port
 8002ba6:	b091      	sub	sp, #68	; 0x44
	if (Len>6)
 8002ba8:	d903      	bls.n	8002bb2 <parseLine+0x12>
	{//command mast be longer than 6 bytes
		if (Buf[0]==0x2B && Buf[1]==0x2B && Buf[2]==0x2B)
 8002baa:	7803      	ldrb	r3, [r0, #0]
 8002bac:	2b2b      	cmp	r3, #43	; 0x2b
 8002bae:	f000 8088 	beq.w	8002cc2 <parseLine+0x122>
			return;
		}
	}

	int16_t dataSample;
	switch (applicationState.dataType)
 8002bb2:	4cb2      	ldr	r4, [pc, #712]	; (8002e7c <parseLine+0x2dc>)
 8002bb4:	7823      	ldrb	r3, [r4, #0]
 8002bb6:	2b31      	cmp	r3, #49	; 0x31
 8002bb8:	d033      	beq.n	8002c22 <parseLine+0x82>
 8002bba:	2b32      	cmp	r3, #50	; 0x32
 8002bbc:	d10d      	bne.n	8002bda <parseLine+0x3a>
	float32_t s3_f32;
	float32_t s4_f32;
	float32_t s5_f32;
	float32_t ThI1_f32;
	float32_t ThF1_f32;
	switch (applicationState.selectedImplementation)
 8002bbe:	7863      	ldrb	r3, [r4, #1]
 8002bc0:	8800      	ldrh	r0, [r0, #0]
 8002bc2:	2b32      	cmp	r3, #50	; 0x32
 8002bc4:	bac0      	revsh	r0, r0
 8002bc6:	d032      	beq.n	8002c2e <parseLine+0x8e>
 8002bc8:	2b33      	cmp	r3, #51	; 0x33
 8002bca:	f000 80a4 	beq.w	8002d16 <parseLine+0x176>
 8002bce:	2b31      	cmp	r3, #49	; 0x31
 8002bd0:	f000 810c 	beq.w	8002dec <parseLine+0x24c>
		break;
	default:
		return;
		break;
	}
}
 8002bd4:	b011      	add	sp, #68	; 0x44
 8002bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		sprintf(str,"error...\r\n");
 8002bda:	4ba9      	ldr	r3, [pc, #676]	; (8002e80 <parseLine+0x2e0>)
 8002bdc:	4ca9      	ldr	r4, [pc, #676]	; (8002e84 <parseLine+0x2e4>)
 8002bde:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002be2:	c403      	stmia	r4!, {r0, r1}
 8002be4:	f824 2b02 	strh.w	r2, [r4], #2
 8002be8:	0c13      	lsrs	r3, r2, #16
 8002bea:	f804 390a 	strb.w	r3, [r4], #-10
	while (str[end]!='\0')
 8002bee:	4aa6      	ldr	r2, [pc, #664]	; (8002e88 <parseLine+0x2e8>)
 8002bf0:	230a      	movs	r3, #10
 8002bf2:	e001      	b.n	8002bf8 <parseLine+0x58>
		if (end == 250)
 8002bf4:	2bfa      	cmp	r3, #250	; 0xfa
 8002bf6:	d00d      	beq.n	8002c14 <parseLine+0x74>
	while (str[end]!='\0')
 8002bf8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8002bfc:	b299      	uxth	r1, r3
		if (end == 250)
 8002bfe:	3301      	adds	r3, #1
	while (str[end]!='\0')
 8002c00:	2800      	cmp	r0, #0
 8002c02:	d1f7      	bne.n	8002bf4 <parseLine+0x54>
		while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8002c04:	4620      	mov	r0, r4
 8002c06:	f004 fe39 	bl	800787c <CDC_Transmit_FS>
 8002c0a:	2800      	cmp	r0, #0
 8002c0c:	d1ef      	bne.n	8002bee <parseLine+0x4e>
}
 8002c0e:	b011      	add	sp, #68	; 0x44
 8002c10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c14:	4619      	mov	r1, r3
		while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8002c16:	4620      	mov	r0, r4
 8002c18:	f004 fe30 	bl	800787c <CDC_Transmit_FS>
 8002c1c:	2800      	cmp	r0, #0
 8002c1e:	d1e6      	bne.n	8002bee <parseLine+0x4e>
 8002c20:	e7f5      	b.n	8002c0e <parseLine+0x6e>
		dataSample = atoi (Buf);
 8002c22:	f005 f8d9 	bl	8007dd8 <atoi>
	switch (applicationState.selectedImplementation)
 8002c26:	7863      	ldrb	r3, [r4, #1]
 8002c28:	2b32      	cmp	r3, #50	; 0x32
		dataSample = atoi (Buf);
 8002c2a:	b200      	sxth	r0, r0
	switch (applicationState.selectedImplementation)
 8002c2c:	d1cc      	bne.n	8002bc8 <parseLine+0x28>
		delay = Rafael_PanTompkins(dataSample);
 8002c2e:	f7fe fff3 	bl	8001c18 <Rafael_PanTompkins>
 8002c32:	900f      	str	r0, [sp, #60]	; 0x3c
		s1 = Rafael_get_LPFilter_output();
 8002c34:	f7ff ff82 	bl	8002b3c <Rafael_get_LPFilter_output>
 8002c38:	900e      	str	r0, [sp, #56]	; 0x38
		s2 = Rafael_get_HPFilter_output();
 8002c3a:	f7ff ff85 	bl	8002b48 <Rafael_get_HPFilter_output>
 8002c3e:	4606      	mov	r6, r0
		s3 = Rafael_get_DRFilter_output();
 8002c40:	f7ff ff88 	bl	8002b54 <Rafael_get_DRFilter_output>
 8002c44:	4607      	mov	r7, r0
		s4 = Rafael_get_SQRFilter_output();
 8002c46:	f7ff ff8b 	bl	8002b60 <Rafael_get_SQRFilter_output>
 8002c4a:	4604      	mov	r4, r0
		s5 = Rafael_get_MVFilter_output();
 8002c4c:	f7ff ff92 	bl	8002b74 <Rafael_get_MVFilter_output>
 8002c50:	4605      	mov	r5, r0
		ThI1 = Rafael_get_ThI1_output();
 8002c52:	f7ff ff99 	bl	8002b88 <Rafael_get_ThI1_output>
 8002c56:	4680      	mov	r8, r0
		ThF1 = Rafael_get_ThF1_output();
 8002c58:	f7ff ff9c 	bl	8002b94 <Rafael_get_ThF1_output>
		sprintf(str,"%d,%d,%d,%d,%d,%d,%d,%d\r\n", delay, s1, s2, s3, s4, s5, ThI1, ThF1);
 8002c5c:	b2ad      	uxth	r5, r5
 8002c5e:	b2a4      	uxth	r4, r4
 8002c60:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8002c64:	e9cd 8004 	strd	r8, r0, [sp, #16]
 8002c68:	4988      	ldr	r1, [pc, #544]	; (8002e8c <parseLine+0x2ec>)
 8002c6a:	4886      	ldr	r0, [pc, #536]	; (8002e84 <parseLine+0x2e4>)
 8002c6c:	9701      	str	r7, [sp, #4]
 8002c6e:	9503      	str	r5, [sp, #12]
 8002c70:	9402      	str	r4, [sp, #8]
 8002c72:	9600      	str	r6, [sp, #0]
 8002c74:	f005 ff8e 	bl	8008b94 <siprintf>
	while (str[end]!='\0')
 8002c78:	4b83      	ldr	r3, [pc, #524]	; (8002e88 <parseLine+0x2e8>)
 8002c7a:	220a      	movs	r2, #10
 8002c7c:	e003      	b.n	8002c86 <parseLine+0xe6>
		if (end == 250)
 8002c7e:	3201      	adds	r2, #1
 8002c80:	2afa      	cmp	r2, #250	; 0xfa
 8002c82:	f000 810d 	beq.w	8002ea0 <parseLine+0x300>
	while (str[end]!='\0')
 8002c86:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002c8a:	b294      	uxth	r4, r2
 8002c8c:	2900      	cmp	r1, #0
 8002c8e:	d1f6      	bne.n	8002c7e <parseLine+0xde>
	memcpy(&USBBuffer[USBBuffer_index], Buf, Len);
 8002c90:	4d7f      	ldr	r5, [pc, #508]	; (8002e90 <parseLine+0x2f0>)
 8002c92:	4e80      	ldr	r6, [pc, #512]	; (8002e94 <parseLine+0x2f4>)
 8002c94:	882f      	ldrh	r7, [r5, #0]
 8002c96:	497b      	ldr	r1, [pc, #492]	; (8002e84 <parseLine+0x2e4>)
 8002c98:	19f0      	adds	r0, r6, r7
 8002c9a:	f005 f8cb 	bl	8007e34 <memcpy>
	USBBuffer_index += Len;
 8002c9e:	19e1      	adds	r1, r4, r7
 8002ca0:	b289      	uxth	r1, r1
	if (USBBuffer_index>2000)
 8002ca2:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
	USBBuffer_index += Len;
 8002ca6:	8029      	strh	r1, [r5, #0]
	if (USBBuffer_index>2000)
 8002ca8:	d994      	bls.n	8002bd4 <parseLine+0x34>
 8002caa:	e000      	b.n	8002cae <parseLine+0x10e>
		while (CDC_Transmit_FS(USBBuffer, USBBuffer_index)!= USBD_OK){};
 8002cac:	8829      	ldrh	r1, [r5, #0]
 8002cae:	4630      	mov	r0, r6
 8002cb0:	f004 fde4 	bl	800787c <CDC_Transmit_FS>
 8002cb4:	2800      	cmp	r0, #0
 8002cb6:	d1f9      	bne.n	8002cac <parseLine+0x10c>
		USBBuffer_index = 0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	802b      	strh	r3, [r5, #0]
}
 8002cbc:	b011      	add	sp, #68	; 0x44
 8002cbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (Buf[0]==0x2B && Buf[1]==0x2B && Buf[2]==0x2B)
 8002cc2:	7843      	ldrb	r3, [r0, #1]
 8002cc4:	2b2b      	cmp	r3, #43	; 0x2b
 8002cc6:	f47f af74 	bne.w	8002bb2 <parseLine+0x12>
 8002cca:	7883      	ldrb	r3, [r0, #2]
 8002ccc:	2b2b      	cmp	r3, #43	; 0x2b
 8002cce:	f47f af70 	bne.w	8002bb2 <parseLine+0x12>
			switch (Buf[3])
 8002cd2:	78c3      	ldrb	r3, [r0, #3]
 8002cd4:	2b41      	cmp	r3, #65	; 0x41
 8002cd6:	f000 810f 	beq.w	8002ef8 <parseLine+0x358>
 8002cda:	2b42      	cmp	r3, #66	; 0x42
 8002cdc:	f000 80e6 	beq.w	8002eac <parseLine+0x30c>
				sprintf(str,"error...\r\n");
 8002ce0:	4a67      	ldr	r2, [pc, #412]	; (8002e80 <parseLine+0x2e0>)
 8002ce2:	4c68      	ldr	r4, [pc, #416]	; (8002e84 <parseLine+0x2e4>)
 8002ce4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ce6:	c403      	stmia	r4!, {r0, r1}
 8002ce8:	f824 2b02 	strh.w	r2, [r4], #2
 8002cec:	0c11      	lsrs	r1, r2, #16
 8002cee:	f804 190a 	strb.w	r1, [r4], #-10
	while (str[end]!='\0')
 8002cf2:	4a65      	ldr	r2, [pc, #404]	; (8002e88 <parseLine+0x2e8>)
 8002cf4:	230a      	movs	r3, #10
 8002cf6:	e002      	b.n	8002cfe <parseLine+0x15e>
		if (end == 250)
 8002cf8:	2bfa      	cmp	r3, #250	; 0xfa
 8002cfa:	f000 80d5 	beq.w	8002ea8 <parseLine+0x308>
	while (str[end]!='\0')
 8002cfe:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8002d02:	b299      	uxth	r1, r3
		if (end == 250)
 8002d04:	3301      	adds	r3, #1
	while (str[end]!='\0')
 8002d06:	2800      	cmp	r0, #0
 8002d08:	d1f6      	bne.n	8002cf8 <parseLine+0x158>
				while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	f004 fdb6 	bl	800787c <CDC_Transmit_FS>
 8002d10:	2800      	cmp	r0, #0
 8002d12:	d1ee      	bne.n	8002cf2 <parseLine+0x152>
 8002d14:	e75e      	b.n	8002bd4 <parseLine+0x34>
		delay = arm_PT_ST(dataSample);
 8002d16:	f7fe fce5 	bl	80016e4 <arm_PT_ST>
 8002d1a:	900e      	str	r0, [sp, #56]	; 0x38
		s1_f32 = arm_get_LPFilter_output();
 8002d1c:	f7fe fef0 	bl	8001b00 <arm_get_LPFilter_output>
 8002d20:	ee10 4a10 	vmov	r4, s0
		s2_f32 = arm_get_HPFilter_output();
 8002d24:	f7fe fef2 	bl	8001b0c <arm_get_HPFilter_output>
 8002d28:	ee10 5a10 	vmov	r5, s0
		s3_f32 = arm_get_DRFilter_output();
 8002d2c:	f7fe fef4 	bl	8001b18 <arm_get_DRFilter_output>
 8002d30:	ee10 6a10 	vmov	r6, s0
		s4_f32 = arm_get_SQRFilter_output();
 8002d34:	f7fe fef6 	bl	8001b24 <arm_get_SQRFilter_output>
 8002d38:	ee10 7a10 	vmov	r7, s0
		s5_f32 = arm_get_MVFilter_output();
 8002d3c:	f7fe fef8 	bl	8001b30 <arm_get_MVFilter_output>
 8002d40:	ee10 8a10 	vmov	r8, s0
		ThI1_f32 = arm_get_ThI1_output();
 8002d44:	f7fe fefa 	bl	8001b3c <arm_get_ThI1_output>
 8002d48:	ee10 9a10 	vmov	r9, s0
		ThF1_f32 = arm_get_ThF1_output();
 8002d4c:	f7fe fefc 	bl	8001b48 <arm_get_ThF1_output>
 8002d50:	ee10 0a10 	vmov	r0, s0
		sprintf(str,"%d,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\r\n", delay, s1_f32, s2_f32, s3_f32, s4_f32, s5_f32, ThI1_f32, ThF1_f32);
 8002d54:	f7fd fbd0 	bl	80004f8 <__aeabi_f2d>
 8002d58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8002d5c:	4648      	mov	r0, r9
 8002d5e:	f7fd fbcb 	bl	80004f8 <__aeabi_f2d>
 8002d62:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002d66:	4640      	mov	r0, r8
 8002d68:	f7fd fbc6 	bl	80004f8 <__aeabi_f2d>
 8002d6c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002d70:	4638      	mov	r0, r7
 8002d72:	f7fd fbc1 	bl	80004f8 <__aeabi_f2d>
 8002d76:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002d7a:	4630      	mov	r0, r6
 8002d7c:	f7fd fbbc 	bl	80004f8 <__aeabi_f2d>
 8002d80:	4606      	mov	r6, r0
 8002d82:	460f      	mov	r7, r1
 8002d84:	4628      	mov	r0, r5
 8002d86:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002d8a:	f7fd fbb5 	bl	80004f8 <__aeabi_f2d>
 8002d8e:	4606      	mov	r6, r0
 8002d90:	460f      	mov	r7, r1
 8002d92:	4620      	mov	r0, r4
 8002d94:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8002d98:	f7fd fbae 	bl	80004f8 <__aeabi_f2d>
 8002d9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d9e:	e9cd 0100 	strd	r0, r1, [sp]
 8002da2:	493d      	ldr	r1, [pc, #244]	; (8002e98 <parseLine+0x2f8>)
 8002da4:	4837      	ldr	r0, [pc, #220]	; (8002e84 <parseLine+0x2e4>)
 8002da6:	f005 fef5 	bl	8008b94 <siprintf>
	while (str[end]!='\0')
 8002daa:	4b37      	ldr	r3, [pc, #220]	; (8002e88 <parseLine+0x2e8>)
 8002dac:	220a      	movs	r2, #10
 8002dae:	e002      	b.n	8002db6 <parseLine+0x216>
		if (end == 250)
 8002db0:	3201      	adds	r2, #1
 8002db2:	2afa      	cmp	r2, #250	; 0xfa
 8002db4:	d05f      	beq.n	8002e76 <parseLine+0x2d6>
	while (str[end]!='\0')
 8002db6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002dba:	b294      	uxth	r4, r2
 8002dbc:	2900      	cmp	r1, #0
 8002dbe:	d1f7      	bne.n	8002db0 <parseLine+0x210>
	memcpy(&USBBuffer[USBBuffer_index], Buf, Len);
 8002dc0:	4d33      	ldr	r5, [pc, #204]	; (8002e90 <parseLine+0x2f0>)
 8002dc2:	4e34      	ldr	r6, [pc, #208]	; (8002e94 <parseLine+0x2f4>)
 8002dc4:	882f      	ldrh	r7, [r5, #0]
 8002dc6:	492f      	ldr	r1, [pc, #188]	; (8002e84 <parseLine+0x2e4>)
 8002dc8:	19f0      	adds	r0, r6, r7
 8002dca:	f005 f833 	bl	8007e34 <memcpy>
	USBBuffer_index += Len;
 8002dce:	19e1      	adds	r1, r4, r7
 8002dd0:	b289      	uxth	r1, r1
	if (USBBuffer_index>2000)
 8002dd2:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
	USBBuffer_index += Len;
 8002dd6:	8029      	strh	r1, [r5, #0]
	if (USBBuffer_index>2000)
 8002dd8:	f67f aefc 	bls.w	8002bd4 <parseLine+0x34>
 8002ddc:	e000      	b.n	8002de0 <parseLine+0x240>
		while (CDC_Transmit_FS(USBBuffer, USBBuffer_index)!= USBD_OK){};
 8002dde:	8829      	ldrh	r1, [r5, #0]
 8002de0:	4630      	mov	r0, r6
 8002de2:	f004 fd4b 	bl	800787c <CDC_Transmit_FS>
 8002de6:	2800      	cmp	r0, #0
 8002de8:	d1f9      	bne.n	8002dde <parseLine+0x23e>
 8002dea:	e765      	b.n	8002cb8 <parseLine+0x118>
		delay = PT_StateMachine (dataSample);
 8002dec:	f7fe f970 	bl	80010d0 <PT_StateMachine>
 8002df0:	900f      	str	r0, [sp, #60]	; 0x3c
		s1 = PT_get_LPFilter_output();
 8002df2:	f7fe fc0d 	bl	8001610 <PT_get_LPFilter_output>
 8002df6:	900e      	str	r0, [sp, #56]	; 0x38
		s2 = PT_get_HPFilter_output();
 8002df8:	f7fe fc10 	bl	800161c <PT_get_HPFilter_output>
 8002dfc:	4605      	mov	r5, r0
		s3 = PT_get_DRFilter_output();
 8002dfe:	f7fe fc13 	bl	8001628 <PT_get_DRFilter_output>
 8002e02:	4606      	mov	r6, r0
		s4 = PT_get_SQRFilter_output();
 8002e04:	f7fe fc1c 	bl	8001640 <PT_get_SQRFilter_output>
 8002e08:	4607      	mov	r7, r0
		s5 = PT_get_MVFilter_output();
 8002e0a:	f7fe fc13 	bl	8001634 <PT_get_MVFilter_output>
 8002e0e:	4680      	mov	r8, r0
		ThI1 = PT_get_ThI1_output();
 8002e10:	f7fe fc1c 	bl	800164c <PT_get_ThI1_output>
 8002e14:	4604      	mov	r4, r0
		ThF1 = PT_get_ThF1_output();
 8002e16:	f7fe fc1f 	bl	8001658 <PT_get_ThF1_output>
		sprintf(str,"%d,%d,%d,%d,%u,%u,%u,%d\r\n", delay, s1, s2, s3, s4, s5, ThI1, ThF1);
 8002e1a:	b224      	sxth	r4, r4
 8002e1c:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8002e20:	9005      	str	r0, [sp, #20]
 8002e22:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8002e26:	e9cd 5600 	strd	r5, r6, [sp]
 8002e2a:	491c      	ldr	r1, [pc, #112]	; (8002e9c <parseLine+0x2fc>)
 8002e2c:	4815      	ldr	r0, [pc, #84]	; (8002e84 <parseLine+0x2e4>)
 8002e2e:	9404      	str	r4, [sp, #16]
 8002e30:	f005 feb0 	bl	8008b94 <siprintf>
	while (str[end]!='\0')
 8002e34:	4b14      	ldr	r3, [pc, #80]	; (8002e88 <parseLine+0x2e8>)
 8002e36:	220a      	movs	r2, #10
 8002e38:	e002      	b.n	8002e40 <parseLine+0x2a0>
		if (end == 250)
 8002e3a:	3201      	adds	r2, #1
 8002e3c:	2afa      	cmp	r2, #250	; 0xfa
 8002e3e:	d031      	beq.n	8002ea4 <parseLine+0x304>
	while (str[end]!='\0')
 8002e40:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002e44:	b294      	uxth	r4, r2
 8002e46:	2900      	cmp	r1, #0
 8002e48:	d1f7      	bne.n	8002e3a <parseLine+0x29a>
	memcpy(&USBBuffer[USBBuffer_index], Buf, Len);
 8002e4a:	4d11      	ldr	r5, [pc, #68]	; (8002e90 <parseLine+0x2f0>)
 8002e4c:	4e11      	ldr	r6, [pc, #68]	; (8002e94 <parseLine+0x2f4>)
 8002e4e:	882f      	ldrh	r7, [r5, #0]
 8002e50:	490c      	ldr	r1, [pc, #48]	; (8002e84 <parseLine+0x2e4>)
 8002e52:	19f0      	adds	r0, r6, r7
 8002e54:	f004 ffee 	bl	8007e34 <memcpy>
	USBBuffer_index += Len;
 8002e58:	19e1      	adds	r1, r4, r7
 8002e5a:	b289      	uxth	r1, r1
	if (USBBuffer_index>2000)
 8002e5c:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
	USBBuffer_index += Len;
 8002e60:	8029      	strh	r1, [r5, #0]
	if (USBBuffer_index>2000)
 8002e62:	f67f aeb7 	bls.w	8002bd4 <parseLine+0x34>
 8002e66:	e000      	b.n	8002e6a <parseLine+0x2ca>
		while (CDC_Transmit_FS(USBBuffer, USBBuffer_index)!= USBD_OK){};
 8002e68:	8829      	ldrh	r1, [r5, #0]
 8002e6a:	4630      	mov	r0, r6
 8002e6c:	f004 fd06 	bl	800787c <CDC_Transmit_FS>
 8002e70:	2800      	cmp	r0, #0
 8002e72:	d1f9      	bne.n	8002e68 <parseLine+0x2c8>
 8002e74:	e720      	b.n	8002cb8 <parseLine+0x118>
 8002e76:	4614      	mov	r4, r2
 8002e78:	e7a2      	b.n	8002dc0 <parseLine+0x220>
 8002e7a:	bf00      	nop
 8002e7c:	20003be0 	.word	0x20003be0
 8002e80:	0800c7b4 	.word	0x0800c7b4
 8002e84:	20003c84 	.word	0x20003c84
 8002e88:	20003c8d 	.word	0x20003c8d
 8002e8c:	0800c7dc 	.word	0x0800c7dc
 8002e90:	200033dc 	.word	0x200033dc
 8002e94:	20002bdc 	.word	0x20002bdc
 8002e98:	0800c7f8 	.word	0x0800c7f8
 8002e9c:	0800c7c0 	.word	0x0800c7c0
 8002ea0:	4614      	mov	r4, r2
 8002ea2:	e6f5      	b.n	8002c90 <parseLine+0xf0>
 8002ea4:	4614      	mov	r4, r2
 8002ea6:	e7d0      	b.n	8002e4a <parseLine+0x2aa>
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	e72e      	b.n	8002d0a <parseLine+0x16a>
				applicationState.selectedImplementation = Buf[4];
 8002eac:	7903      	ldrb	r3, [r0, #4]
 8002eae:	4c42      	ldr	r4, [pc, #264]	; (8002fb8 <parseLine+0x418>)
				if (applicationState.selectedImplementation == hoomam650)
 8002eb0:	2b31      	cmp	r3, #49	; 0x31
				applicationState.selectedImplementation = Buf[4];
 8002eb2:	7063      	strb	r3, [r4, #1]
				if (applicationState.selectedImplementation == hoomam650)
 8002eb4:	d05e      	beq.n	8002f74 <parseLine+0x3d4>
				if (applicationState.selectedImplementation == rafalmmoreira)
 8002eb6:	2b32      	cmp	r3, #50	; 0x32
 8002eb8:	d03f      	beq.n	8002f3a <parseLine+0x39a>
				if (applicationState.selectedImplementation == marower)
 8002eba:	2b33      	cmp	r3, #51	; 0x33
 8002ebc:	f47f ae8a 	bne.w	8002bd4 <parseLine+0x34>
					arm_PT_init();
 8002ec0:	f7fe fbd0 	bl	8001664 <arm_PT_init>
					sprintf(str,"OK, done.   \r\n");
 8002ec4:	4b3d      	ldr	r3, [pc, #244]	; (8002fbc <parseLine+0x41c>)
 8002ec6:	4c3e      	ldr	r4, [pc, #248]	; (8002fc0 <parseLine+0x420>)
 8002ec8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002eca:	c407      	stmia	r4!, {r0, r1, r2}
 8002ecc:	f824 3b02 	strh.w	r3, [r4], #2
 8002ed0:	0c1a      	lsrs	r2, r3, #16
 8002ed2:	f804 290e 	strb.w	r2, [r4], #-14
	while (str[end]!='\0')
 8002ed6:	4a3b      	ldr	r2, [pc, #236]	; (8002fc4 <parseLine+0x424>)
 8002ed8:	230a      	movs	r3, #10
 8002eda:	e001      	b.n	8002ee0 <parseLine+0x340>
		if (end == 250)
 8002edc:	2bfa      	cmp	r3, #250	; 0xfa
 8002ede:	d02a      	beq.n	8002f36 <parseLine+0x396>
	while (str[end]!='\0')
 8002ee0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8002ee4:	b299      	uxth	r1, r3
		if (end == 250)
 8002ee6:	3301      	adds	r3, #1
	while (str[end]!='\0')
 8002ee8:	2800      	cmp	r0, #0
 8002eea:	d1f7      	bne.n	8002edc <parseLine+0x33c>
					while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8002eec:	4620      	mov	r0, r4
 8002eee:	f004 fcc5 	bl	800787c <CDC_Transmit_FS>
 8002ef2:	2800      	cmp	r0, #0
 8002ef4:	d1ef      	bne.n	8002ed6 <parseLine+0x336>
 8002ef6:	e66d      	b.n	8002bd4 <parseLine+0x34>
				applicationState.dataType = Buf[4];
 8002ef8:	4a2f      	ldr	r2, [pc, #188]	; (8002fb8 <parseLine+0x418>)
				sprintf(str,"OK, done.   \r\n");
 8002efa:	4b30      	ldr	r3, [pc, #192]	; (8002fbc <parseLine+0x41c>)
				applicationState.dataType = Buf[4];
 8002efc:	7901      	ldrb	r1, [r0, #4]
 8002efe:	7011      	strb	r1, [r2, #0]
				sprintf(str,"OK, done.   \r\n");
 8002f00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f02:	4c2f      	ldr	r4, [pc, #188]	; (8002fc0 <parseLine+0x420>)
 8002f04:	c407      	stmia	r4!, {r0, r1, r2}
 8002f06:	f824 3b02 	strh.w	r3, [r4], #2
 8002f0a:	0c1a      	lsrs	r2, r3, #16
 8002f0c:	f804 290e 	strb.w	r2, [r4], #-14
	while (str[end]!='\0')
 8002f10:	4a2c      	ldr	r2, [pc, #176]	; (8002fc4 <parseLine+0x424>)
 8002f12:	230a      	movs	r3, #10
 8002f14:	e001      	b.n	8002f1a <parseLine+0x37a>
		if (end == 250)
 8002f16:	2bfa      	cmp	r3, #250	; 0xfa
 8002f18:	d00b      	beq.n	8002f32 <parseLine+0x392>
	while (str[end]!='\0')
 8002f1a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8002f1e:	b299      	uxth	r1, r3
		if (end == 250)
 8002f20:	3301      	adds	r3, #1
	while (str[end]!='\0')
 8002f22:	2800      	cmp	r0, #0
 8002f24:	d1f7      	bne.n	8002f16 <parseLine+0x376>
				while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8002f26:	4620      	mov	r0, r4
 8002f28:	f004 fca8 	bl	800787c <CDC_Transmit_FS>
 8002f2c:	2800      	cmp	r0, #0
 8002f2e:	d1ef      	bne.n	8002f10 <parseLine+0x370>
 8002f30:	e650      	b.n	8002bd4 <parseLine+0x34>
 8002f32:	4619      	mov	r1, r3
 8002f34:	e7f7      	b.n	8002f26 <parseLine+0x386>
 8002f36:	4619      	mov	r1, r3
 8002f38:	e7d8      	b.n	8002eec <parseLine+0x34c>
					Rafael_init();
 8002f3a:	f7fe fe0b 	bl	8001b54 <Rafael_init>
					sprintf(str,"OK, done.   \r\n");
 8002f3e:	4b1f      	ldr	r3, [pc, #124]	; (8002fbc <parseLine+0x41c>)
 8002f40:	4d1f      	ldr	r5, [pc, #124]	; (8002fc0 <parseLine+0x420>)
 8002f42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f44:	c507      	stmia	r5!, {r0, r1, r2}
 8002f46:	f825 3b02 	strh.w	r3, [r5], #2
 8002f4a:	0c1a      	lsrs	r2, r3, #16
 8002f4c:	f805 290e 	strb.w	r2, [r5], #-14
	while (str[end]!='\0')
 8002f50:	4a1c      	ldr	r2, [pc, #112]	; (8002fc4 <parseLine+0x424>)
 8002f52:	230a      	movs	r3, #10
 8002f54:	e001      	b.n	8002f5a <parseLine+0x3ba>
		if (end == 250)
 8002f56:	2bfa      	cmp	r3, #250	; 0xfa
 8002f58:	d029      	beq.n	8002fae <parseLine+0x40e>
	while (str[end]!='\0')
 8002f5a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8002f5e:	b299      	uxth	r1, r3
		if (end == 250)
 8002f60:	3301      	adds	r3, #1
	while (str[end]!='\0')
 8002f62:	2800      	cmp	r0, #0
 8002f64:	d1f7      	bne.n	8002f56 <parseLine+0x3b6>
					while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8002f66:	4628      	mov	r0, r5
 8002f68:	f004 fc88 	bl	800787c <CDC_Transmit_FS>
 8002f6c:	2800      	cmp	r0, #0
 8002f6e:	d1ef      	bne.n	8002f50 <parseLine+0x3b0>
				if (applicationState.selectedImplementation == marower)
 8002f70:	7863      	ldrb	r3, [r4, #1]
 8002f72:	e7a2      	b.n	8002eba <parseLine+0x31a>
					PT_init();
 8002f74:	f7fd fe96 	bl	8000ca4 <PT_init>
					sprintf(str,"OK, done.   \r\n");
 8002f78:	4b10      	ldr	r3, [pc, #64]	; (8002fbc <parseLine+0x41c>)
 8002f7a:	4d11      	ldr	r5, [pc, #68]	; (8002fc0 <parseLine+0x420>)
 8002f7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f7e:	c507      	stmia	r5!, {r0, r1, r2}
 8002f80:	f825 3b02 	strh.w	r3, [r5], #2
 8002f84:	0c1a      	lsrs	r2, r3, #16
 8002f86:	f805 290e 	strb.w	r2, [r5], #-14
	while (str[end]!='\0')
 8002f8a:	4a0e      	ldr	r2, [pc, #56]	; (8002fc4 <parseLine+0x424>)
 8002f8c:	230a      	movs	r3, #10
 8002f8e:	e001      	b.n	8002f94 <parseLine+0x3f4>
		if (end == 250)
 8002f90:	2bfa      	cmp	r3, #250	; 0xfa
 8002f92:	d00e      	beq.n	8002fb2 <parseLine+0x412>
	while (str[end]!='\0')
 8002f94:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8002f98:	b299      	uxth	r1, r3
		if (end == 250)
 8002f9a:	3301      	adds	r3, #1
	while (str[end]!='\0')
 8002f9c:	2800      	cmp	r0, #0
 8002f9e:	d1f7      	bne.n	8002f90 <parseLine+0x3f0>
					while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8002fa0:	4628      	mov	r0, r5
 8002fa2:	f004 fc6b 	bl	800787c <CDC_Transmit_FS>
 8002fa6:	2800      	cmp	r0, #0
 8002fa8:	d1ef      	bne.n	8002f8a <parseLine+0x3ea>
				if (applicationState.selectedImplementation == rafalmmoreira)
 8002faa:	7863      	ldrb	r3, [r4, #1]
 8002fac:	e783      	b.n	8002eb6 <parseLine+0x316>
 8002fae:	4619      	mov	r1, r3
 8002fb0:	e7d9      	b.n	8002f66 <parseLine+0x3c6>
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	e7f4      	b.n	8002fa0 <parseLine+0x400>
 8002fb6:	bf00      	nop
 8002fb8:	20003be0 	.word	0x20003be0
 8002fbc:	0800c7a4 	.word	0x0800c7a4
 8002fc0:	20003c84 	.word	0x20003c84
 8002fc4:	20003c8d 	.word	0x20003c8d

08002fc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fc8:	b510      	push	{r4, lr}
 8002fca:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fcc:	2228      	movs	r2, #40	; 0x28
 8002fce:	2100      	movs	r1, #0
 8002fd0:	a80b      	add	r0, sp, #44	; 0x2c
 8002fd2:	f004 ff57 	bl	8007e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002fdc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002fe0:	e9cd 3306 	strd	r3, r3, [sp, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fe4:	492a      	ldr	r1, [pc, #168]	; (8003090 <SystemClock_Config+0xc8>)
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fe6:	9308      	str	r3, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fe8:	680a      	ldr	r2, [r1, #0]
 8002fea:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8002fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff2:	600a      	str	r2, [r1, #0]
 8002ff4:	680a      	ldr	r2, [r1, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8002ff6:	2026      	movs	r0, #38	; 0x26
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8002ff8:	f44f 7180 	mov.w	r1, #256	; 0x100
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8002ffc:	900a      	str	r0, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8002ffe:	2000      	movs	r0, #0
 8003000:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003004:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003008:	2040      	movs	r0, #64	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800300a:	2160      	movs	r1, #96	; 0x60
 800300c:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003010:	9201      	str	r2, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003012:	2102      	movs	r1, #2
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003014:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003016:	900e      	str	r0, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
  RCC_OscInitStruct.PLL.PLLN = 32;
 8003018:	2020      	movs	r0, #32
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800301a:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 800301e:	e9cd 3017 	strd	r3, r0, [sp, #92]	; 0x5c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003022:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003024:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003028:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800302c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003030:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003032:	e9cd 321a 	strd	r3, r2, [sp, #104]	; 0x68
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003036:	9c01      	ldr	r4, [sp, #4]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003038:	9119      	str	r1, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800303a:	f001 fcf5 	bl	8004a28 <HAL_RCC_OscConfig>
 800303e:	b108      	cbz	r0, 8003044 <SystemClock_Config+0x7c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003040:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003042:	e7fe      	b.n	8003042 <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8003044:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8003078 <SystemClock_Config+0xb0>
 8003048:	ed8d 7b02 	vstr	d7, [sp, #8]
 800304c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8003080 <SystemClock_Config+0xb8>
 8003050:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003054:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8003088 <SystemClock_Config+0xc0>
 8003058:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800305a:	2103      	movs	r1, #3
 800305c:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800305e:	ed8d 7b06 	vstr	d7, [sp, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003062:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003064:	f002 f83a 	bl	80050dc <HAL_RCC_ClockConfig>
 8003068:	b108      	cbz	r0, 800306e <SystemClock_Config+0xa6>
 800306a:	b672      	cpsid	i
  while (1)
 800306c:	e7fe      	b.n	800306c <SystemClock_Config+0xa4>
  HAL_RCCEx_EnableMSIPLLMode();
 800306e:	f002 fbab 	bl	80057c8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8003072:	b01c      	add	sp, #112	; 0x70
 8003074:	bd10      	pop	{r4, pc}
 8003076:	bf00      	nop
 8003078:	0000006f 	.word	0x0000006f
 800307c:	00000003 	.word	0x00000003
	...
 800308c:	00000080 	.word	0x00000080
 8003090:	58000400 	.word	0x58000400

08003094 <PeriphCommonClock_Config>:
{
 8003094:	b500      	push	{lr}
 8003096:	b095      	sub	sp, #84	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003098:	2248      	movs	r2, #72	; 0x48
 800309a:	2100      	movs	r1, #0
 800309c:	a801      	add	r0, sp, #4
 800309e:	f004 fef1 	bl	8007e84 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80030a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80030a6:	2310      	movs	r3, #16
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030a8:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80030aa:	9200      	str	r2, [sp, #0]
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80030ac:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030ae:	f002 f99b 	bl	80053e8 <HAL_RCCEx_PeriphCLKConfig>
 80030b2:	b108      	cbz	r0, 80030b8 <PeriphCommonClock_Config+0x24>
 80030b4:	b672      	cpsid	i
  while (1)
 80030b6:	e7fe      	b.n	80030b6 <PeriphCommonClock_Config+0x22>
}
 80030b8:	b015      	add	sp, #84	; 0x54
 80030ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80030be:	bf00      	nop

080030c0 <main>:
{
 80030c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030c4:	b085      	sub	sp, #20
  HAL_Init();
 80030c6:	f000 fa35 	bl	8003534 <HAL_Init>
  applicationState.dataType = int16asBytes;
 80030ca:	4b49      	ldr	r3, [pc, #292]	; (80031f0 <main+0x130>)
  hi2c1.Instance = I2C1;
 80030cc:	4c49      	ldr	r4, [pc, #292]	; (80031f4 <main+0x134>)
  applicationState.dataType = int16asBytes;
 80030ce:	f243 1232 	movw	r2, #12594	; 0x3132
 80030d2:	801a      	strh	r2, [r3, #0]
  PT_init();
 80030d4:	f7fd fde6 	bl	8000ca4 <PT_init>
  SystemClock_Config();
 80030d8:	f7ff ff76 	bl	8002fc8 <SystemClock_Config>
  PeriphCommonClock_Config();
 80030dc:	f7ff ffda 	bl	8003094 <PeriphCommonClock_Config>
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80030e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030e6:	f042 0202 	orr.w	r2, r2, #2
 80030ea:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80030ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030ee:	f002 0202 	and.w	r2, r2, #2
 80030f2:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80030f4:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80030f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030f8:	f042 0201 	orr.w	r2, r2, #1
 80030fc:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80030fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8003106:	9b03      	ldr	r3, [sp, #12]
  MX_USB_Device_Init();
 8003108:	f004 fb36 	bl	8007778 <MX_USB_Device_Init>
  hi2c1.Instance = I2C1;
 800310c:	483a      	ldr	r0, [pc, #232]	; (80031f8 <main+0x138>)
  hi2c1.Init.Timing = 0x10707DBC;
 800310e:	493b      	ldr	r1, [pc, #236]	; (80031fc <main+0x13c>)
  hi2c1.Init.OwnAddress1 = 0;
 8003110:	2300      	movs	r3, #0
  hi2c1.Init.Timing = 0x10707DBC;
 8003112:	e9c4 0100 	strd	r0, r1, [r4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003116:	2201      	movs	r2, #1
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003118:	4620      	mov	r0, r4
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800311a:	e9c4 3202 	strd	r3, r2, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 800311e:	e9c4 3304 	strd	r3, r3, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003122:	e9c4 3306 	strd	r3, r3, [r4, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003126:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003128:	f000 fb8a 	bl	8003840 <HAL_I2C_Init>
 800312c:	b108      	cbz	r0, 8003132 <main+0x72>
 800312e:	b672      	cpsid	i
  while (1)
 8003130:	e7fe      	b.n	8003130 <main+0x70>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003132:	4601      	mov	r1, r0
 8003134:	4620      	mov	r0, r4
 8003136:	f000 fbd7 	bl	80038e8 <HAL_I2CEx_ConfigAnalogFilter>
 800313a:	4601      	mov	r1, r0
 800313c:	b108      	cbz	r0, 8003142 <main+0x82>
 800313e:	b672      	cpsid	i
  while (1)
 8003140:	e7fe      	b.n	8003140 <main+0x80>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003142:	4620      	mov	r0, r4
 8003144:	f000 fbfa 	bl	800393c <HAL_I2CEx_ConfigDigitalFilter>
 8003148:	4603      	mov	r3, r0
 800314a:	b108      	cbz	r0, 8003150 <main+0x90>
 800314c:	b672      	cpsid	i
  while (1)
 800314e:	e7fe      	b.n	800314e <main+0x8e>
  htim16.Instance = TIM16;
 8003150:	4c2b      	ldr	r4, [pc, #172]	; (8003200 <main+0x140>)
 8003152:	482c      	ldr	r0, [pc, #176]	; (8003204 <main+0x144>)
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003154:	61a3      	str	r3, [r4, #24]
  htim16.Init.Prescaler = 639;
 8003156:	f240 217f 	movw	r1, #639	; 0x27f
 800315a:	e9c4 0100 	strd	r0, r1, [r4]
  htim16.Init.Period = 100;
 800315e:	2264      	movs	r2, #100	; 0x64
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003160:	4620      	mov	r0, r4
  htim16.Init.Period = 100;
 8003162:	e9c4 3202 	strd	r3, r2, [r4, #8]
  htim16.Init.RepetitionCounter = 0;
 8003166:	e9c4 3304 	strd	r3, r3, [r4, #16]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800316a:	f002 fb35 	bl	80057d8 <HAL_TIM_Base_Init>
 800316e:	4606      	mov	r6, r0
 8003170:	2800      	cmp	r0, #0
 8003172:	d13b      	bne.n	80031ec <main+0x12c>
  HAL_TIM_Base_Start_IT(&htim16);
 8003174:	4620      	mov	r0, r4
 8003176:	f002 fba7 	bl	80058c8 <HAL_TIM_Base_Start_IT>
 800317a:	4d23      	ldr	r5, [pc, #140]	; (8003208 <main+0x148>)
 800317c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8003210 <main+0x150>
 8003180:	4f22      	ldr	r7, [pc, #136]	; (800320c <main+0x14c>)
 8003182:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8003214 <main+0x154>
	  if ((byteInBuffer>0) && (bufferFlag == 1))
 8003186:	682c      	ldr	r4, [r5, #0]
 8003188:	f898 3000 	ldrb.w	r3, [r8]
 800318c:	b904      	cbnz	r4, 8003190 <main+0xd0>
 800318e:	e7fe      	b.n	800318e <main+0xce>
 8003190:	2b01      	cmp	r3, #1
 8003192:	d1fb      	bne.n	800318c <main+0xcc>
	 		  uint32_t index = 0;
 8003194:	f04f 0a00 	mov.w	sl, #0
		  	  memcpy(&USBReciveBuffer[0],bufferPointer, byteInBuffer);
 8003198:	6839      	ldr	r1, [r7, #0]
 800319a:	4622      	mov	r2, r4
 800319c:	4648      	mov	r0, r9
	 		  uint32_t i = 0;
 800319e:	46d3      	mov	fp, sl
		  	  memcpy(&USBReciveBuffer[0],bufferPointer, byteInBuffer);
 80031a0:	f004 fe48 	bl	8007e34 <memcpy>
	 			  i++;
 80031a4:	f10b 0301 	add.w	r3, fp, #1
	 		  uint32_t count = 0;
 80031a8:	4652      	mov	r2, sl
	 			  if (USBReciveBuffer[i]=='\n')
 80031aa:	f819 1003 	ldrb.w	r1, [r9, r3]
		  	  byteInBuffer = 0;
 80031ae:	602e      	str	r6, [r5, #0]
	 			  if (USBReciveBuffer[i]=='\n')
 80031b0:	290a      	cmp	r1, #10
	 			  count++;
 80031b2:	f102 0001 	add.w	r0, r2, #1
	 			  if (USBReciveBuffer[i]=='\n')
 80031b6:	d00b      	beq.n	80031d0 <main+0x110>
	 		  }while (i<dataCount);
 80031b8:	429c      	cmp	r4, r3
 80031ba:	d9e4      	bls.n	8003186 <main+0xc6>
	 		  uint32_t count = 0;
 80031bc:	469b      	mov	fp, r3
	 			  i++;
 80031be:	f10b 0301 	add.w	r3, fp, #1
	 		  uint32_t count = 0;
 80031c2:	4602      	mov	r2, r0
	 			  if (USBReciveBuffer[i]=='\n')
 80031c4:	f819 1003 	ldrb.w	r1, [r9, r3]
 80031c8:	290a      	cmp	r1, #10
	 			  count++;
 80031ca:	f102 0001 	add.w	r0, r2, #1
	 			  if (USBReciveBuffer[i]=='\n')
 80031ce:	d1f3      	bne.n	80031b8 <main+0xf8>
	 				 count++;
 80031d0:	1c91      	adds	r1, r2, #2
	 				 parseLine (&USBReciveBuffer[index], count);
 80031d2:	eb09 000a 	add.w	r0, r9, sl
 80031d6:	9101      	str	r1, [sp, #4]
 80031d8:	f7ff fce2 	bl	8002ba0 <parseLine>
	 				 index += count;
 80031dc:	9901      	ldr	r1, [sp, #4]
	 				 i++;
 80031de:	f10b 0302 	add.w	r3, fp, #2
	 		  }while (i<dataCount);
 80031e2:	429c      	cmp	r4, r3
	 				 index += count;
 80031e4:	448a      	add	sl, r1
	 		  }while (i<dataCount);
 80031e6:	d9ce      	bls.n	8003186 <main+0xc6>
	 				 count = 0;
 80031e8:	2000      	movs	r0, #0
 80031ea:	e7e7      	b.n	80031bc <main+0xfc>
 80031ec:	b672      	cpsid	i
  while (1)
 80031ee:	e7fe      	b.n	80031ee <main+0x12e>
 80031f0:	20003be0 	.word	0x20003be0
 80031f4:	20003be4 	.word	0x20003be4
 80031f8:	40005400 	.word	0x40005400
 80031fc:	10707dbc 	.word	0x10707dbc
 8003200:	20003c38 	.word	0x20003c38
 8003204:	40014400 	.word	0x40014400
 8003208:	20005068 	.word	0x20005068
 800320c:	200000b4 	.word	0x200000b4
 8003210:	200000b0 	.word	0x200000b0
 8003214:	200033e0 	.word	0x200033e0

08003218 <HAL_TIM_PeriodElapsedCallback>:
{
 8003218:	b538      	push	{r3, r4, r5, lr}
  if (htim == &htim16)
 800321a:	4b09      	ldr	r3, [pc, #36]	; (8003240 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800321c:	4283      	cmp	r3, r0
 800321e:	d000      	beq.n	8003222 <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8003220:	bd38      	pop	{r3, r4, r5, pc}
	  if (USBBuffer_index> 0)
 8003222:	4c08      	ldr	r4, [pc, #32]	; (8003244 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003224:	8821      	ldrh	r1, [r4, #0]
 8003226:	2900      	cmp	r1, #0
 8003228:	d0fa      	beq.n	8003220 <HAL_TIM_PeriodElapsedCallback+0x8>
		  while (CDC_Transmit_FS(USBBuffer, USBBuffer_index)!= USBD_OK){};
 800322a:	4d07      	ldr	r5, [pc, #28]	; (8003248 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800322c:	e000      	b.n	8003230 <HAL_TIM_PeriodElapsedCallback+0x18>
 800322e:	8821      	ldrh	r1, [r4, #0]
 8003230:	4628      	mov	r0, r5
 8003232:	f004 fb23 	bl	800787c <CDC_Transmit_FS>
 8003236:	2800      	cmp	r0, #0
 8003238:	d1f9      	bne.n	800322e <HAL_TIM_PeriodElapsedCallback+0x16>
		  USBBuffer_index = 0;
 800323a:	8020      	strh	r0, [r4, #0]
}
 800323c:	bd38      	pop	{r3, r4, r5, pc}
 800323e:	bf00      	nop
 8003240:	20003c38 	.word	0x20003c38
 8003244:	200033dc 	.word	0x200033dc
 8003248:	20002bdc 	.word	0x20002bdc

0800324c <Error_Handler>:
 800324c:	b672      	cpsid	i
  while (1)
 800324e:	e7fe      	b.n	800324e <Error_Handler+0x2>

08003250 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop

08003254 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003254:	b510      	push	{r4, lr}
 8003256:	4604      	mov	r4, r0
 8003258:	b09c      	sub	sp, #112	; 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800325a:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800325c:	2250      	movs	r2, #80	; 0x50
 800325e:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003260:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8003264:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8003268:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800326a:	f004 fe0b 	bl	8007e84 <memset>
  if(hi2c->Instance==I2C1)
 800326e:	4b1b      	ldr	r3, [pc, #108]	; (80032dc <HAL_I2C_MspInit+0x88>)
 8003270:	6822      	ldr	r2, [r4, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d001      	beq.n	800327a <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003276:	b01c      	add	sp, #112	; 0x70
 8003278:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800327a:	2204      	movs	r2, #4
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800327c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003280:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003282:	9208      	str	r2, [sp, #32]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003284:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003286:	f002 f8af 	bl	80053e8 <HAL_RCCEx_PeriphCLKConfig>
 800328a:	bb20      	cbnz	r0, 80032d6 <HAL_I2C_MspInit+0x82>
  SET_BIT(RCC->AHB2ENR, Periphs);
 800328c:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003290:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003294:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003296:	4812      	ldr	r0, [pc, #72]	; (80032e0 <HAL_I2C_MspInit+0x8c>)
 8003298:	f043 0302 	orr.w	r3, r3, #2
 800329c:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800329e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80032a6:	2312      	movs	r3, #18
 80032a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80032ac:	2200      	movs	r2, #0
 80032ae:	2300      	movs	r3, #0
 80032b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032b4:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80032b6:	2304      	movs	r3, #4
 80032b8:	9306      	str	r3, [sp, #24]
  (void)tmpreg;
 80032ba:	9a01      	ldr	r2, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032bc:	f000 f9e2 	bl	8003684 <HAL_GPIO_Init>
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80032c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80032c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032c6:	65a3      	str	r3, [r4, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80032c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80032ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032ce:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80032d0:	9b00      	ldr	r3, [sp, #0]
}
 80032d2:	b01c      	add	sp, #112	; 0x70
 80032d4:	bd10      	pop	{r4, pc}
      Error_Handler();
 80032d6:	f7ff ffb9 	bl	800324c <Error_Handler>
 80032da:	e7d7      	b.n	800328c <HAL_I2C_MspInit+0x38>
 80032dc:	40005400 	.word	0x40005400
 80032e0:	48000400 	.word	0x48000400

080032e4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM16)
 80032e4:	4b0e      	ldr	r3, [pc, #56]	; (8003320 <HAL_TIM_Base_MspInit+0x3c>)
 80032e6:	6802      	ldr	r2, [r0, #0]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d000      	beq.n	80032ee <HAL_TIM_Base_MspInit+0xa>
 80032ec:	4770      	bx	lr
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80032ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 80032f2:	b500      	push	{lr}
 80032f4:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80032f6:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80032fa:	6619      	str	r1, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80032fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032fe:	b083      	sub	sp, #12

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003300:	2200      	movs	r2, #0
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	9301      	str	r3, [sp, #4]
 8003308:	2019      	movs	r0, #25
 800330a:	4611      	mov	r1, r2
  (void)tmpreg;
 800330c:	9b01      	ldr	r3, [sp, #4]
 800330e:	f000 f953 	bl	80035b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003312:	2019      	movs	r0, #25
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003314:	b003      	add	sp, #12
 8003316:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800331a:	f000 b98b 	b.w	8003634 <HAL_NVIC_EnableIRQ>
 800331e:	bf00      	nop
 8003320:	40014400 	.word	0x40014400

08003324 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003324:	e7fe      	b.n	8003324 <NMI_Handler>
 8003326:	bf00      	nop

08003328 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003328:	e7fe      	b.n	8003328 <HardFault_Handler>
 800332a:	bf00      	nop

0800332c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800332c:	e7fe      	b.n	800332c <MemManage_Handler>
 800332e:	bf00      	nop

08003330 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003330:	e7fe      	b.n	8003330 <BusFault_Handler>
 8003332:	bf00      	nop

08003334 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003334:	e7fe      	b.n	8003334 <UsageFault_Handler>
 8003336:	bf00      	nop

08003338 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop

0800333c <DebugMon_Handler>:
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop

08003340 <PendSV_Handler>:
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop

08003344 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003344:	f000 b90e 	b.w	8003564 <HAL_IncTick>

08003348 <USB_LP_IRQHandler>:
void USB_LP_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003348:	4801      	ldr	r0, [pc, #4]	; (8003350 <USB_LP_IRQHandler+0x8>)
 800334a:	f000 bba1 	b.w	8003a90 <HAL_PCD_IRQHandler>
 800334e:	bf00      	nop
 8003350:	20005270 	.word	0x20005270

08003354 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003354:	4801      	ldr	r0, [pc, #4]	; (800335c <TIM1_UP_TIM16_IRQHandler+0x8>)
 8003356:	f002 bae7 	b.w	8005928 <HAL_TIM_IRQHandler>
 800335a:	bf00      	nop
 800335c:	20003c38 	.word	0x20003c38

08003360 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8003360:	2001      	movs	r0, #1
 8003362:	4770      	bx	lr

08003364 <_kill>:

int _kill(int pid, int sig)
{
 8003364:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003366:	f004 fd3b 	bl	8007de0 <__errno>
 800336a:	2316      	movs	r3, #22
 800336c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800336e:	f04f 30ff 	mov.w	r0, #4294967295
 8003372:	bd08      	pop	{r3, pc}

08003374 <_exit>:

void _exit (int status)
{
 8003374:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003376:	f004 fd33 	bl	8007de0 <__errno>
 800337a:	2316      	movs	r3, #22
 800337c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800337e:	e7fe      	b.n	800337e <_exit+0xa>

08003380 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003380:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003382:	1e16      	subs	r6, r2, #0
 8003384:	dd07      	ble.n	8003396 <_read+0x16>
 8003386:	460c      	mov	r4, r1
 8003388:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800338a:	f3af 8000 	nop.w
 800338e:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003392:	42a5      	cmp	r5, r4
 8003394:	d1f9      	bne.n	800338a <_read+0xa>
	}

return len;
}
 8003396:	4630      	mov	r0, r6
 8003398:	bd70      	pop	{r4, r5, r6, pc}
 800339a:	bf00      	nop

0800339c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800339c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800339e:	1e16      	subs	r6, r2, #0
 80033a0:	dd07      	ble.n	80033b2 <_write+0x16>
 80033a2:	460c      	mov	r4, r1
 80033a4:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80033a6:	f814 0b01 	ldrb.w	r0, [r4], #1
 80033aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033ae:	42ac      	cmp	r4, r5
 80033b0:	d1f9      	bne.n	80033a6 <_write+0xa>
	}
	return len;
}
 80033b2:	4630      	mov	r0, r6
 80033b4:	bd70      	pop	{r4, r5, r6, pc}
 80033b6:	bf00      	nop

080033b8 <_close>:

int _close(int file)
{
	return -1;
}
 80033b8:	f04f 30ff 	mov.w	r0, #4294967295
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop

080033c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80033c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033c4:	604b      	str	r3, [r1, #4]
	return 0;
}
 80033c6:	2000      	movs	r0, #0
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop

080033cc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80033cc:	2001      	movs	r0, #1
 80033ce:	4770      	bx	lr

080033d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80033d0:	2000      	movs	r0, #0
 80033d2:	4770      	bx	lr

080033d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033d4:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033d6:	4c0c      	ldr	r4, [pc, #48]	; (8003408 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033d8:	4b0c      	ldr	r3, [pc, #48]	; (800340c <_sbrk+0x38>)
 80033da:	490d      	ldr	r1, [pc, #52]	; (8003410 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 80033dc:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033de:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 80033e0:	b12a      	cbz	r2, 80033ee <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033e2:	4410      	add	r0, r2
 80033e4:	4288      	cmp	r0, r1
 80033e6:	d807      	bhi.n	80033f8 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80033e8:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 80033ea:	4610      	mov	r0, r2
 80033ec:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80033ee:	4a09      	ldr	r2, [pc, #36]	; (8003414 <_sbrk+0x40>)
 80033f0:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80033f2:	4410      	add	r0, r2
 80033f4:	4288      	cmp	r0, r1
 80033f6:	d9f7      	bls.n	80033e8 <_sbrk+0x14>
    errno = ENOMEM;
 80033f8:	f004 fcf2 	bl	8007de0 <__errno>
 80033fc:	230c      	movs	r3, #12
    return (void *)-1;
 80033fe:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8003402:	6003      	str	r3, [r0, #0]
}
 8003404:	4610      	mov	r0, r2
 8003406:	bd10      	pop	{r4, pc}
 8003408:	20003d80 	.word	0x20003d80
 800340c:	20030000 	.word	0x20030000
 8003410:	00000400 	.word	0x00000400
 8003414:	20005798 	.word	0x20005798

08003418 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003418:	4914      	ldr	r1, [pc, #80]	; (800346c <SystemInit+0x54>)
 800341a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800341e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003422:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003426:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_MSION;
 800342a:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800342c:	4a10      	ldr	r2, [pc, #64]	; (8003470 <SystemInit+0x58>)
  RCC->CFGR = 0x00070000U;
 800342e:	f44f 20e0 	mov.w	r0, #458752	; 0x70000
  RCC->CR |= RCC_CR_MSION;
 8003432:	f041 0101 	orr.w	r1, r1, #1
 8003436:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00070000U;
 8003438:	6098      	str	r0, [r3, #8]
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800343a:	6818      	ldr	r0, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800343c:	490d      	ldr	r1, [pc, #52]	; (8003474 <SystemInit+0x5c>)
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800343e:	4002      	ands	r2, r0
 8003440:	601a      	str	r2, [r3, #0]
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003442:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003446:	f022 0205 	bic.w	r2, r2, #5
 800344a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800344e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003452:	f022 0201 	bic.w	r2, r2, #1
 8003456:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  RCC->PLLCFGR = 0x22041000U;
 800345a:	60d9      	str	r1, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800345c:	6119      	str	r1, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800345e:	681a      	ldr	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003460:	2100      	movs	r1, #0
  RCC->CR &= 0xFFFBFFFFU;
 8003462:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003466:	601a      	str	r2, [r3, #0]
  RCC->CIER = 0x00000000;
 8003468:	6199      	str	r1, [r3, #24]
}
 800346a:	4770      	bx	lr
 800346c:	e000ed00 	.word	0xe000ed00
 8003470:	faf6fefb 	.word	0xfaf6fefb
 8003474:	22041000 	.word	0x22041000

08003478 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003478:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800347a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800347c:	3304      	adds	r3, #4

0800347e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800347e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003480:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003482:	d3f9      	bcc.n	8003478 <CopyDataInit>
  bx lr
 8003484:	4770      	bx	lr

08003486 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003486:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003488:	3004      	adds	r0, #4

0800348a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800348a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800348c:	d3fb      	bcc.n	8003486 <FillZerobss>
  bx lr
 800348e:	4770      	bx	lr

08003490 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003490:	480c      	ldr	r0, [pc, #48]	; (80034c4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8003492:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003494:	f7ff ffc0 	bl	8003418 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003498:	480b      	ldr	r0, [pc, #44]	; (80034c8 <LoopForever+0x8>)
 800349a:	490c      	ldr	r1, [pc, #48]	; (80034cc <LoopForever+0xc>)
 800349c:	4a0c      	ldr	r2, [pc, #48]	; (80034d0 <LoopForever+0x10>)
 800349e:	2300      	movs	r3, #0
 80034a0:	f7ff ffed 	bl	800347e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80034a4:	480b      	ldr	r0, [pc, #44]	; (80034d4 <LoopForever+0x14>)
 80034a6:	490c      	ldr	r1, [pc, #48]	; (80034d8 <LoopForever+0x18>)
 80034a8:	2300      	movs	r3, #0
 80034aa:	f7ff ffee 	bl	800348a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80034ae:	480b      	ldr	r0, [pc, #44]	; (80034dc <LoopForever+0x1c>)
 80034b0:	490b      	ldr	r1, [pc, #44]	; (80034e0 <LoopForever+0x20>)
 80034b2:	2300      	movs	r3, #0
 80034b4:	f7ff ffe9 	bl	800348a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80034b8:	f004 fc98 	bl	8007dec <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80034bc:	f7ff fe00 	bl	80030c0 <main>

080034c0 <LoopForever>:

LoopForever:
  b LoopForever
 80034c0:	e7fe      	b.n	80034c0 <LoopForever>
 80034c2:	0000      	.short	0x0000
  ldr   r0, =_estack
 80034c4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80034c8:	20000004 	.word	0x20000004
 80034cc:	200002e0 	.word	0x200002e0
 80034d0:	0800cd9c 	.word	0x0800cd9c
  INIT_BSS _sbss, _ebss
 80034d4:	200002e0 	.word	0x200002e0
 80034d8:	20005794 	.word	0x20005794
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80034dc:	20030000 	.word	0x20030000
 80034e0:	20030000 	.word	0x20030000

080034e4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80034e4:	e7fe      	b.n	80034e4 <ADC1_IRQHandler>
	...

080034e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034e8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0U)
 80034ea:	4c10      	ldr	r4, [pc, #64]	; (800352c <HAL_InitTick+0x44>)
 80034ec:	7823      	ldrb	r3, [r4, #0]
 80034ee:	b90b      	cbnz	r3, 80034f4 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80034f0:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80034f2:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80034f4:	4605      	mov	r5, r0
 80034f6:	f001 ff3f 	bl	8005378 <HAL_RCC_GetHCLKFreq>
 80034fa:	7822      	ldrb	r2, [r4, #0]
 80034fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003500:	fbb3 f3f2 	udiv	r3, r3, r2
 8003504:	fbb0 f0f3 	udiv	r0, r0, r3
 8003508:	f000 f8a2 	bl	8003650 <HAL_SYSTICK_Config>
 800350c:	4604      	mov	r4, r0
 800350e:	2800      	cmp	r0, #0
 8003510:	d1ee      	bne.n	80034f0 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003512:	2d0f      	cmp	r5, #15
 8003514:	d8ec      	bhi.n	80034f0 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003516:	4602      	mov	r2, r0
 8003518:	4629      	mov	r1, r5
 800351a:	f04f 30ff 	mov.w	r0, #4294967295
 800351e:	f000 f84b 	bl	80035b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003522:	4b03      	ldr	r3, [pc, #12]	; (8003530 <HAL_InitTick+0x48>)
 8003524:	4620      	mov	r0, r4
 8003526:	601d      	str	r5, [r3, #0]
}
 8003528:	bd38      	pop	{r3, r4, r5, pc}
 800352a:	bf00      	nop
 800352c:	2000000c 	.word	0x2000000c
 8003530:	20000010 	.word	0x20000010

08003534 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003534:	4a0a      	ldr	r2, [pc, #40]	; (8003560 <HAL_Init+0x2c>)
 8003536:	6813      	ldr	r3, [r2, #0]
 8003538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 800353c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800353e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003540:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003542:	f000 f827 	bl	8003594 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003546:	200f      	movs	r0, #15
 8003548:	f7ff ffce 	bl	80034e8 <HAL_InitTick>
 800354c:	b110      	cbz	r0, 8003554 <HAL_Init+0x20>
    status = HAL_ERROR;
 800354e:	2401      	movs	r4, #1
}
 8003550:	4620      	mov	r0, r4
 8003552:	bd10      	pop	{r4, pc}
 8003554:	4604      	mov	r4, r0
    HAL_MspInit();
 8003556:	f7ff fe7b 	bl	8003250 <HAL_MspInit>
}
 800355a:	4620      	mov	r0, r4
 800355c:	bd10      	pop	{r4, pc}
 800355e:	bf00      	nop
 8003560:	58004000 	.word	0x58004000

08003564 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003564:	4a03      	ldr	r2, [pc, #12]	; (8003574 <HAL_IncTick+0x10>)
 8003566:	4b04      	ldr	r3, [pc, #16]	; (8003578 <HAL_IncTick+0x14>)
 8003568:	6811      	ldr	r1, [r2, #0]
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	440b      	add	r3, r1
 800356e:	6013      	str	r3, [r2, #0]
}
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	20003d84 	.word	0x20003d84
 8003578:	2000000c 	.word	0x2000000c

0800357c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800357c:	4b01      	ldr	r3, [pc, #4]	; (8003584 <HAL_GetTick+0x8>)
 800357e:	6818      	ldr	r0, [r3, #0]
}
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	20003d84 	.word	0x20003d84

08003588 <HAL_GetTickPrio>:
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
 8003588:	4b01      	ldr	r3, [pc, #4]	; (8003590 <HAL_GetTickPrio+0x8>)
}
 800358a:	6818      	ldr	r0, [r3, #0]
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	20000010 	.word	0x20000010

08003594 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003594:	4907      	ldr	r1, [pc, #28]	; (80035b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003596:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003598:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800359a:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800359e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035a2:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035a4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035a6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80035ae:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	e000ed00 	.word	0xe000ed00

080035b8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035b8:	4b1c      	ldr	r3, [pc, #112]	; (800362c <HAL_NVIC_SetPriority+0x74>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035c0:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035c2:	f1c3 0e07 	rsb	lr, r3, #7
 80035c6:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ca:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035ce:	bf28      	it	cs
 80035d0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035d4:	f1bc 0f06 	cmp.w	ip, #6
 80035d8:	d91b      	bls.n	8003612 <HAL_NVIC_SetPriority+0x5a>
 80035da:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035dc:	f04f 3cff 	mov.w	ip, #4294967295
 80035e0:	fa0c fc03 	lsl.w	ip, ip, r3
 80035e4:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e8:	f04f 3cff 	mov.w	ip, #4294967295
 80035ec:	fa0c fc0e 	lsl.w	ip, ip, lr
 80035f0:	ea21 010c 	bic.w	r1, r1, ip
 80035f4:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80035f6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f8:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80035fc:	db0c      	blt.n	8003618 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035fe:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003602:	0109      	lsls	r1, r1, #4
 8003604:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003608:	b2c9      	uxtb	r1, r1
 800360a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800360e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003612:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003614:	4613      	mov	r3, r2
 8003616:	e7e7      	b.n	80035e8 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003618:	4b05      	ldr	r3, [pc, #20]	; (8003630 <HAL_NVIC_SetPriority+0x78>)
 800361a:	f000 000f 	and.w	r0, r0, #15
 800361e:	0109      	lsls	r1, r1, #4
 8003620:	4403      	add	r3, r0
 8003622:	b2c9      	uxtb	r1, r1
 8003624:	7619      	strb	r1, [r3, #24]
 8003626:	f85d fb04 	ldr.w	pc, [sp], #4
 800362a:	bf00      	nop
 800362c:	e000ed00 	.word	0xe000ed00
 8003630:	e000ecfc 	.word	0xe000ecfc

08003634 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003634:	2800      	cmp	r0, #0
 8003636:	db08      	blt.n	800364a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003638:	4a04      	ldr	r2, [pc, #16]	; (800364c <HAL_NVIC_EnableIRQ+0x18>)
 800363a:	0941      	lsrs	r1, r0, #5
 800363c:	2301      	movs	r3, #1
 800363e:	f000 001f 	and.w	r0, r0, #31
 8003642:	fa03 f000 	lsl.w	r0, r3, r0
 8003646:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800364a:	4770      	bx	lr
 800364c:	e000e100 	.word	0xe000e100

08003650 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003650:	3801      	subs	r0, #1
 8003652:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003656:	d210      	bcs.n	800367a <HAL_SYSTICK_Config+0x2a>
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003658:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800365a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800365e:	4c08      	ldr	r4, [pc, #32]	; (8003680 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003660:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003662:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8003666:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800366a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800366c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800366e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003670:	619a      	str	r2, [r3, #24]
  return SysTick_Config(TicksNumb);
}
 8003672:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003676:	6119      	str	r1, [r3, #16]
 8003678:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800367a:	2001      	movs	r0, #1
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	e000ed00 	.word	0xe000ed00

08003684 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003688:	680c      	ldr	r4, [r1, #0]
{
 800368a:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800368c:	2c00      	cmp	r4, #0
 800368e:	d06e      	beq.n	800376e <HAL_GPIO_Init+0xea>
 8003690:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003694:	4e65      	ldr	r6, [pc, #404]	; (800382c <HAL_GPIO_Init+0x1a8>)
  uint32_t position = 0x00u;
 8003696:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003698:	f04f 0b01 	mov.w	fp, #1
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800369c:	468e      	mov	lr, r1
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800369e:	fa0b f703 	lsl.w	r7, fp, r3
    if (iocurrent != 0x00u)
 80036a2:	ea17 0a04 	ands.w	sl, r7, r4
 80036a6:	d05c      	beq.n	8003762 <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036a8:	f8de 1004 	ldr.w	r1, [lr, #4]
 80036ac:	f001 0203 	and.w	r2, r1, #3
 80036b0:	1e55      	subs	r5, r2, #1
 80036b2:	2d01      	cmp	r5, #1
 80036b4:	d95e      	bls.n	8003774 <HAL_GPIO_Init+0xf0>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036b6:	2a03      	cmp	r2, #3
 80036b8:	f040 80a2 	bne.w	8003800 <HAL_GPIO_Init+0x17c>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036bc:	fa02 f20c 	lsl.w	r2, r2, ip
 80036c0:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 80036c2:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80036c4:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036c6:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036c8:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      GPIOx->MODER = temp;
 80036cc:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036ce:	d048      	beq.n	8003762 <HAL_GPIO_Init+0xde>
        temp = SYSCFG->EXTICR[position >> 2u];
 80036d0:	f023 0203 	bic.w	r2, r3, #3
 80036d4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80036d8:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036dc:	f003 0503 	and.w	r5, r3, #3
 80036e0:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp = SYSCFG->EXTICR[position >> 2u];
 80036e4:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036e6:	250f      	movs	r5, #15
 80036e8:	fa05 f809 	lsl.w	r8, r5, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036ec:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036f0:	ea27 0708 	bic.w	r7, r7, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036f4:	d012      	beq.n	800371c <HAL_GPIO_Init+0x98>
 80036f6:	4d4e      	ldr	r5, [pc, #312]	; (8003830 <HAL_GPIO_Init+0x1ac>)
 80036f8:	42a8      	cmp	r0, r5
 80036fa:	f000 808c 	beq.w	8003816 <HAL_GPIO_Init+0x192>
 80036fe:	4d4d      	ldr	r5, [pc, #308]	; (8003834 <HAL_GPIO_Init+0x1b0>)
 8003700:	42a8      	cmp	r0, r5
 8003702:	f000 808c 	beq.w	800381e <HAL_GPIO_Init+0x19a>
 8003706:	4d4c      	ldr	r5, [pc, #304]	; (8003838 <HAL_GPIO_Init+0x1b4>)
 8003708:	42a8      	cmp	r0, r5
 800370a:	d07e      	beq.n	800380a <HAL_GPIO_Init+0x186>
 800370c:	4d4b      	ldr	r5, [pc, #300]	; (800383c <HAL_GPIO_Init+0x1b8>)
 800370e:	42a8      	cmp	r0, r5
 8003710:	bf0c      	ite	eq
 8003712:	2504      	moveq	r5, #4
 8003714:	2507      	movne	r5, #7
 8003716:	fa05 f509 	lsl.w	r5, r5, r9
 800371a:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 800371c:	6097      	str	r7, [r2, #8]
        temp = EXTI->RTSR1;
 800371e:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003720:	02cd      	lsls	r5, r1, #11
        temp &= ~(iocurrent);
 8003722:	ea6f 070a 	mvn.w	r7, sl
 8003726:	bf54      	ite	pl
 8003728:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 800372a:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->RTSR1 = temp;
 800372e:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
 8003730:	6875      	ldr	r5, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003732:	028a      	lsls	r2, r1, #10
        temp &= ~(iocurrent);
 8003734:	bf54      	ite	pl
 8003736:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8003738:	ea4a 0505 	orrmi.w	r5, sl, r5
        }
        EXTI->FTSR1 = temp;
 800373c:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800373e:	f8d6 5080 	ldr.w	r5, [r6, #128]	; 0x80
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003742:	03ca      	lsls	r2, r1, #15
        temp &= ~(iocurrent);
 8003744:	bf54      	ite	pl
 8003746:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8003748:	ea4a 0505 	orrmi.w	r5, sl, r5
        }
        EXTI->IMR1 = temp;
 800374c:	f8c6 5080 	str.w	r5, [r6, #128]	; 0x80

        temp = EXTI->EMR1;
 8003750:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003754:	0389      	lsls	r1, r1, #14
        temp &= ~(iocurrent);
 8003756:	bf54      	ite	pl
 8003758:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 800375a:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->EMR1 = temp;
 800375e:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
      }
    }

    position++;
 8003762:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003764:	fa34 f203 	lsrs.w	r2, r4, r3
 8003768:	f10c 0c02 	add.w	ip, ip, #2
 800376c:	d197      	bne.n	800369e <HAL_GPIO_Init+0x1a>
  }
}
 800376e:	b003      	add	sp, #12
 8003770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8003774:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003778:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800377c:	f04f 0803 	mov.w	r8, #3
 8003780:	fa08 f80c 	lsl.w	r8, r8, ip
 8003784:	ea29 0908 	bic.w	r9, r9, r8
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003788:	fa05 f50c 	lsl.w	r5, r5, ip
 800378c:	ea45 0509 	orr.w	r5, r5, r9
        GPIOx->OSPEEDR = temp;
 8003790:	6085      	str	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003792:	ea6f 0508 	mvn.w	r5, r8
        temp = GPIOx->OTYPER;
 8003796:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800379a:	ea28 0807 	bic.w	r8, r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800379e:	f3c1 1700 	ubfx	r7, r1, #4, #1
 80037a2:	409f      	lsls	r7, r3
 80037a4:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 80037a8:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80037aa:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037ac:	ea07 0805 	and.w	r8, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037b0:	f8de 7008 	ldr.w	r7, [lr, #8]
 80037b4:	fa07 f70c 	lsl.w	r7, r7, ip
 80037b8:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037bc:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 80037be:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037c0:	fa02 f20c 	lsl.w	r2, r2, ip
 80037c4:	f47f af7d 	bne.w	80036c2 <HAL_GPIO_Init+0x3e>
        temp = GPIOx->AFR[position >> 3u];
 80037c8:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80037cc:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037d0:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80037d4:	f8d9 7020 	ldr.w	r7, [r9, #32]
 80037d8:	9700      	str	r7, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037da:	f8de 7010 	ldr.w	r7, [lr, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037de:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037e2:	fa07 f708 	lsl.w	r7, r7, r8
 80037e6:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037e8:	270f      	movs	r7, #15
 80037ea:	fa07 f808 	lsl.w	r8, r7, r8
 80037ee:	9f00      	ldr	r7, [sp, #0]
 80037f0:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037f4:	9f01      	ldr	r7, [sp, #4]
 80037f6:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3u] = temp;
 80037fa:	f8c9 7020 	str.w	r7, [r9, #32]
 80037fe:	e760      	b.n	80036c2 <HAL_GPIO_Init+0x3e>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003800:	2503      	movs	r5, #3
 8003802:	fa05 f50c 	lsl.w	r5, r5, ip
 8003806:	43ed      	mvns	r5, r5
 8003808:	e7cf      	b.n	80037aa <HAL_GPIO_Init+0x126>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800380a:	f04f 0803 	mov.w	r8, #3
 800380e:	fa08 f509 	lsl.w	r5, r8, r9
 8003812:	432f      	orrs	r7, r5
 8003814:	e782      	b.n	800371c <HAL_GPIO_Init+0x98>
 8003816:	fa0b f509 	lsl.w	r5, fp, r9
 800381a:	432f      	orrs	r7, r5
 800381c:	e77e      	b.n	800371c <HAL_GPIO_Init+0x98>
 800381e:	f04f 0802 	mov.w	r8, #2
 8003822:	fa08 f509 	lsl.w	r5, r8, r9
 8003826:	432f      	orrs	r7, r5
 8003828:	e778      	b.n	800371c <HAL_GPIO_Init+0x98>
 800382a:	bf00      	nop
 800382c:	58000800 	.word	0x58000800
 8003830:	48000400 	.word	0x48000400
 8003834:	48000800 	.word	0x48000800
 8003838:	48000c00 	.word	0x48000c00
 800383c:	48001000 	.word	0x48001000

08003840 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003840:	2800      	cmp	r0, #0
 8003842:	d04f      	beq.n	80038e4 <HAL_I2C_Init+0xa4>
{
 8003844:	b510      	push	{r4, lr}
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003846:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800384a:	4604      	mov	r4, r0
 800384c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003850:	2b00      	cmp	r3, #0
 8003852:	d042      	beq.n	80038da <HAL_I2C_Init+0x9a>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003854:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003856:	2224      	movs	r2, #36	; 0x24
 8003858:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800385c:	6819      	ldr	r1, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800385e:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 8003860:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003864:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 8003868:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800386a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800386c:	689a      	ldr	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800386e:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003870:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003874:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003876:	609a      	str	r2, [r3, #8]
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003878:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800387a:	d02a      	beq.n	80038d2 <HAL_I2C_Init+0x92>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800387c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003880:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003882:	609a      	str	r2, [r3, #8]
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003884:	bf04      	itt	eq
 8003886:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800388a:	605a      	streq	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800388c:	6859      	ldr	r1, [r3, #4]
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800388e:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003890:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8003894:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003898:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800389a:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800389c:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800389e:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80038a0:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80038a2:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038a6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038aa:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80038ac:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038ae:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038b0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038b2:	4301      	orrs	r1, r0
 80038b4:	6019      	str	r1, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038b6:	6819      	ldr	r1, [r3, #0]
 80038b8:	f041 0101 	orr.w	r1, r1, #1
 80038bc:	6019      	str	r1, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038be:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80038c0:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038c2:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80038c4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80038c8:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ca:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42

  return HAL_OK;
 80038ce:	4610      	mov	r0, r2
}
 80038d0:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80038d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038d6:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80038d8:	e7d8      	b.n	800388c <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 80038da:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80038de:	f7ff fcb9 	bl	8003254 <HAL_I2C_MspInit>
 80038e2:	e7b7      	b.n	8003854 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 80038e4:	2001      	movs	r0, #1
}
 80038e6:	4770      	bx	lr

080038e8 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038e8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80038ec:	2a20      	cmp	r2, #32
 80038ee:	d123      	bne.n	8003938 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80038f0:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038f4:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80038f8:	2a01      	cmp	r2, #1
 80038fa:	4603      	mov	r3, r0
 80038fc:	d01c      	beq.n	8003938 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038fe:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003900:	2024      	movs	r0, #36	; 0x24
{
 8003902:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003904:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8003908:	6810      	ldr	r0, [r2, #0]
 800390a:	f020 0001 	bic.w	r0, r0, #1
 800390e:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003910:	6810      	ldr	r0, [r2, #0]
 8003912:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8003916:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003918:	6810      	ldr	r0, [r2, #0]
 800391a:	4301      	orrs	r1, r0
 800391c:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800391e:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003920:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 8003924:	f041 0101 	orr.w	r1, r1, #1
 8003928:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800392a:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800392e:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40

    return HAL_OK;
 8003932:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003934:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 8003938:	2002      	movs	r0, #2
}
 800393a:	4770      	bx	lr

0800393c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800393c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003940:	2a20      	cmp	r2, #32
 8003942:	d122      	bne.n	800398a <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 8003944:	b500      	push	{lr}
 8003946:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800394a:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800394e:	2a01      	cmp	r2, #1
 8003950:	4603      	mov	r3, r0
 8003952:	d01c      	beq.n	800398e <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003954:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003956:	2024      	movs	r0, #36	; 0x24
 8003958:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800395c:	6810      	ldr	r0, [r2, #0]
 800395e:	f020 0001 	bic.w	r0, r0, #1
 8003962:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003964:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003966:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800396a:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800396e:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003970:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003972:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 8003976:	f041 0101 	orr.w	r1, r1, #1
 800397a:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800397c:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003980:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40

    return HAL_OK;
 8003984:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003986:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 800398a:	2002      	movs	r0, #2
}
 800398c:	4770      	bx	lr
    return HAL_BUSY;
 800398e:	2002      	movs	r0, #2
}
 8003990:	f85d fb04 	ldr.w	pc, [sp], #4

08003994 <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003994:	2800      	cmp	r0, #0
 8003996:	d05d      	beq.n	8003a54 <HAL_PCD_Init+0xc0>
{
 8003998:	b5f0      	push	{r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800399a:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
{
 800399e:	b087      	sub	sp, #28
 80039a0:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d04f      	beq.n	8003a4a <HAL_PCD_Init+0xb6>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039aa:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039ac:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_BUSY;
 80039ae:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 80039b2:	f002 f881 	bl	8005ab8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039b6:	6865      	ldr	r5, [r4, #4]
 80039b8:	b355      	cbz	r5, 8003a10 <HAL_PCD_Init+0x7c>
 80039ba:	2300      	movs	r3, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80039bc:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039c0:	4618      	mov	r0, r3
    hpcd->IN_ep[i].is_in = 1U;
 80039c2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80039c6:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039ca:	f103 0c01 	add.w	ip, r3, #1
    hpcd->IN_ep[i].num = i;
 80039ce:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039d2:	fa5f f38c 	uxtb.w	r3, ip
 80039d6:	42ab      	cmp	r3, r5
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039d8:	e9c1 000e 	strd	r0, r0, [r1, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 80039dc:	f881 e029 	strb.w	lr, [r1, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039e0:	f881 002b 	strb.w	r0, [r1, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 80039e4:	6408      	str	r0, [r1, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039e6:	d3ec      	bcc.n	80039c2 <HAL_PCD_Init+0x2e>
 80039e8:	2200      	movs	r2, #0
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039ea:	4611      	mov	r1, r2
 80039ec:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 80039f0:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039f4:	1c50      	adds	r0, r2, #1
    hpcd->OUT_ep[i].num = i;
 80039f6:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039fa:	b2c2      	uxtb	r2, r0
 80039fc:	42aa      	cmp	r2, r5
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
    hpcd->OUT_ep[i].maxpacket = 0U;
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80039fe:	e9c3 115e 	strd	r1, r1, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 8003a02:	f883 1169 	strb.w	r1, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a06:	f883 116b 	strb.w	r1, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a0a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a0e:	d3ed      	bcc.n	80039ec <HAL_PCD_Init+0x58>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003a10:	4625      	mov	r5, r4
 8003a12:	46ec      	mov	ip, sp
 8003a14:	f855 7b10 	ldr.w	r7, [r5], #16
 8003a18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003a1e:	682b      	ldr	r3, [r5, #0]
 8003a20:	f8cc 3000 	str.w	r3, [ip]
 8003a24:	f104 0e04 	add.w	lr, r4, #4
 8003a28:	e89e 000e 	ldmia.w	lr, {r1, r2, r3}
 8003a2c:	4638      	mov	r0, r7
 8003a2e:	f002 f84d 	bl	8005acc <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a32:	69e3      	ldr	r3, [r4, #28]
  hpcd->State = HAL_PCD_STATE_READY;
 8003a34:	2201      	movs	r2, #1
  hpcd->USB_Address = 0U;
 8003a36:	2600      	movs	r6, #0
  if (hpcd->Init.lpm_enable == 1U)
 8003a38:	4293      	cmp	r3, r2
  hpcd->USB_Address = 0U;
 8003a3a:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003a3e:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
  if (hpcd->Init.lpm_enable == 1U)
 8003a42:	d009      	beq.n	8003a58 <HAL_PCD_Init+0xc4>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 8003a44:	4630      	mov	r0, r6
}
 8003a46:	b007      	add	sp, #28
 8003a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8003a4a:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8003a4e:	f003 ffff 	bl	8007a50 <HAL_PCD_MspInit>
 8003a52:	e7aa      	b.n	80039aa <HAL_PCD_Init+0x16>
    return HAL_ERROR;
 8003a54:	2001      	movs	r0, #1
}
 8003a56:	4770      	bx	lr
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a58:	4620      	mov	r0, r4
 8003a5a:	f000 ff01 	bl	8004860 <HAL_PCDEx_ActivateLPM>
  return HAL_OK;
 8003a5e:	4630      	mov	r0, r6
}
 8003a60:	b007      	add	sp, #28
 8003a62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a64 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8003a64:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d00e      	beq.n	8003a8a <HAL_PCD_Start+0x26>
{
 8003a6c:	b510      	push	{r4, lr}
 8003a6e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003a70:	2301      	movs	r3, #1
  __HAL_PCD_ENABLE(hpcd);
 8003a72:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8003a74:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003a78:	f002 f814 	bl	8005aa4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003a7c:	6820      	ldr	r0, [r4, #0]
 8003a7e:	f002 fe47 	bl	8006710 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003a82:	2000      	movs	r0, #0
 8003a84:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8003a88:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003a8a:	2002      	movs	r0, #2
}
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop

08003a90 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a94:	4604      	mov	r4, r0
 8003a96:	b083      	sub	sp, #12
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003a98:	6800      	ldr	r0, [r0, #0]
 8003a9a:	f002 fe45 	bl	8006728 <USB_ReadInterrupts>

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003a9e:	f410 4500 	ands.w	r5, r0, #32768	; 0x8000
 8003aa2:	d12c      	bne.n	8003afe <HAL_PCD_IRQHandler+0x6e>
    (void)PCD_EP_ISR_Handler(hpcd);

    return;
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003aa4:	0543      	lsls	r3, r0, #21
 8003aa6:	f100 817f 	bmi.w	8003da8 <HAL_PCD_IRQHandler+0x318>
    (void)HAL_PCD_SetAddress(hpcd, 0U);

    return;
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003aaa:	0447      	lsls	r7, r0, #17
 8003aac:	d41b      	bmi.n	8003ae6 <HAL_PCD_IRQHandler+0x56>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);

    return;
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003aae:	f410 5100 	ands.w	r1, r0, #8192	; 0x2000
 8003ab2:	f040 81f9 	bne.w	8003ea8 <HAL_PCD_IRQHandler+0x418>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);

    return;
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003ab6:	04c6      	lsls	r6, r0, #19
 8003ab8:	f100 8088 	bmi.w	8003bcc <HAL_PCD_IRQHandler+0x13c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);

    return;
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003abc:	0505      	lsls	r5, r0, #20
 8003abe:	f100 834d 	bmi.w	800415c <HAL_PCD_IRQHandler+0x6cc>

    return;
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003ac2:	0601      	lsls	r1, r0, #24
 8003ac4:	f100 831e 	bmi.w	8004104 <HAL_PCD_IRQHandler+0x674>
    }

    return;
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003ac8:	0582      	lsls	r2, r0, #22
 8003aca:	f100 841a 	bmi.w	8004302 <HAL_PCD_IRQHandler+0x872>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003ace:	05c3      	lsls	r3, r0, #23
 8003ad0:	d512      	bpl.n	8003af8 <HAL_PCD_IRQHandler+0x68>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003ad2:	6822      	ldr	r2, [r4, #0]
 8003ad4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003ad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003adc:	041b      	lsls	r3, r3, #16
 8003ade:	0c1b      	lsrs	r3, r3, #16
 8003ae0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44

    return;
 8003ae4:	e008      	b.n	8003af8 <HAL_PCD_IRQHandler+0x68>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003ae6:	6822      	ldr	r2, [r4, #0]
 8003ae8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003aec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003af0:	041b      	lsls	r3, r3, #16
 8003af2:	0c1b      	lsrs	r3, r3, #16
 8003af4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 8003af8:	b003      	add	sp, #12
 8003afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003afe:	6822      	ldr	r2, [r4, #0]
 8003b00:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003b04:	041f      	lsls	r7, r3, #16
 8003b06:	d5f7      	bpl.n	8003af8 <HAL_PCD_IRQHandler+0x68>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003b08:	f8df baa8 	ldr.w	fp, [pc, #2728]	; 80045b4 <HAL_PCD_IRQHandler+0xb24>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	e010      	b.n	8003b32 <HAL_PCD_IRQHandler+0xa2>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003b10:	f011 0110 	ands.w	r1, r1, #16
 8003b14:	f000 80c1 	beq.w	8003c9a <HAL_PCD_IRQHandler+0x20a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003b18:	8801      	ldrh	r1, [r0, #0]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003b1a:	f411 6500 	ands.w	r5, r1, #2048	; 0x800
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003b1e:	b28b      	uxth	r3, r1
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003b20:	f040 80ec 	bne.w	8003cfc <HAL_PCD_IRQHandler+0x26c>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003b24:	041e      	lsls	r6, r3, #16
 8003b26:	f100 815e 	bmi.w	8003de6 <HAL_PCD_IRQHandler+0x356>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b2a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8003b2e:	041a      	lsls	r2, r3, #16
 8003b30:	d5e2      	bpl.n	8003af8 <HAL_PCD_IRQHandler+0x68>
    wIstr = hpcd->Instance->ISTR;
 8003b32:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 8003b36:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 8003b38:	f015 050f 	ands.w	r5, r5, #15
 8003b3c:	d0e8      	beq.n	8003b10 <HAL_PCD_IRQHandler+0x80>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003b3e:	b22e      	sxth	r6, r5
 8003b40:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8003b44:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003b46:	041b      	lsls	r3, r3, #16
 8003b48:	d463      	bmi.n	8003c12 <HAL_PCD_IRQHandler+0x182>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003b4a:	063b      	lsls	r3, r7, #24
 8003b4c:	d5ed      	bpl.n	8003b2a <HAL_PCD_IRQHandler+0x9a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003b4e:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	ea03 030b 	and.w	r3, r3, fp
 8003b58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b5c:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8003b60:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8003b64:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 8003b68:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	f000 81a7 	beq.w	8003ec0 <HAL_PCD_IRQHandler+0x430>
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003b72:	f417 7c80 	ands.w	ip, r7, #256	; 0x100
 8003b76:	f040 81ce 	bne.w	8003f16 <HAL_PCD_IRQHandler+0x486>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003b7a:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8003b7e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003b82:	f240 4302 	movw	r3, #1026	; 0x402
 8003b86:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003b8a:	fa10 f282 	uxtah	r2, r0, r2
 8003b8e:	5ad2      	ldrh	r2, [r2, r3]
            if (ep->xfer_len > TxPctSize)
 8003b90:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8003b94:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8003b98:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003b9c:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 8003b9e:	4296      	cmp	r6, r2
 8003ba0:	f240 80a5 	bls.w	8003cee <HAL_PCD_IRQHandler+0x25e>
              ep->xfer_len -= TxPctSize;
 8003ba4:	1ab6      	subs	r6, r6, r2
 8003ba6:	641e      	str	r6, [r3, #64]	; 0x40
            if (ep->xfer_len == 0U)
 8003ba8:	2e00      	cmp	r6, #0
 8003baa:	f000 80a2 	beq.w	8003cf2 <HAL_PCD_IRQHandler+0x262>
        ep = &hpcd->IN_ep[epindex];
 8003bae:	3501      	adds	r5, #1
 8003bb0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003bb4:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
              ep->xfer_buff += TxPctSize;
 8003bb8:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8003bba:	4415      	add	r5, r2
 8003bbc:	63dd      	str	r5, [r3, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 8003bbe:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8003bc0:	442a      	add	r2, r5
 8003bc2:	645a      	str	r2, [r3, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003bc4:	f002 fa3a 	bl	800603c <USB_EPStartXfer>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003bc8:	6820      	ldr	r0, [r4, #0]
 8003bca:	e7ae      	b.n	8003b2a <HAL_PCD_IRQHandler+0x9a>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003bcc:	6822      	ldr	r2, [r4, #0]
 8003bce:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003bd2:	f023 0304 	bic.w	r3, r3, #4
 8003bd6:	041b      	lsls	r3, r3, #16
 8003bd8:	0c1b      	lsrs	r3, r3, #16
 8003bda:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003bde:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003be2:	f023 0308 	bic.w	r3, r3, #8
 8003be6:	041b      	lsls	r3, r3, #16
 8003be8:	0c1b      	lsrs	r3, r3, #16
 8003bea:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 8003bee:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	f000 8393 	beq.w	800431e <HAL_PCD_IRQHandler+0x88e>
    HAL_PCD_ResumeCallback(hpcd);
 8003bf8:	4620      	mov	r0, r4
 8003bfa:	f003 ffcf 	bl	8007b9c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003bfe:	6822      	ldr	r2, [r4, #0]
 8003c00:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003c04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c08:	041b      	lsls	r3, r3, #16
 8003c0a:	0c1b      	lsrs	r3, r3, #16
 8003c0c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8003c10:	e772      	b.n	8003af8 <HAL_PCD_IRQHandler+0x68>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003c12:	f830 2026 	ldrh.w	r2, [r0, r6, lsl #2]
 8003c16:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        if (ep->doublebuffer == 0U)
 8003c20:	eb05 0185 	add.w	r1, r5, r5, lsl #2
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003c24:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8003c28:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8003c2c:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8003c30:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f040 8083 	bne.w	8003d40 <HAL_PCD_IRQHandler+0x2b0>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c3a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003c3e:	f200 4206 	addw	r2, r0, #1030	; 0x406
 8003c42:	fa12 f383 	uxtah	r3, r2, r3
 8003c46:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8003c4a:	f833 9032 	ldrh.w	r9, [r3, r2, lsl #3]
 8003c4e:	f3c9 0909 	ubfx	r9, r9, #0, #10
          if (count != 0U)
 8003c52:	f1b9 0f00 	cmp.w	r9, #0
 8003c56:	f040 81f5 	bne.w	8004044 <HAL_PCD_IRQHandler+0x5b4>
        ep->xfer_count += count;
 8003c5a:	eb08 0305 	add.w	r3, r8, r5
 8003c5e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8003c62:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8003c66:	444a      	add	r2, r9
 8003c68:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8003c6c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8003c70:	444a      	add	r2, r9
 8003c72:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003c76:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8003c7a:	b122      	cbz	r2, 8003c86 <HAL_PCD_IRQHandler+0x1f6>
 8003c7c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8003c80:	454b      	cmp	r3, r9
 8003c82:	f240 81c1 	bls.w	8004008 <HAL_PCD_IRQHandler+0x578>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003c86:	44a8      	add	r8, r5
 8003c88:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	f898 1168 	ldrb.w	r1, [r8, #360]	; 0x168
 8003c92:	f003 ff49 	bl	8007b28 <HAL_PCD_DataOutStageCallback>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003c96:	6820      	ldr	r0, [r4, #0]
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003c98:	e757      	b.n	8003b4a <HAL_PCD_IRQHandler+0xba>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c9a:	8803      	ldrh	r3, [r0, #0]
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	ea03 030b 	and.w	r3, r3, fp
 8003ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ca6:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003ca8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003cac:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8003cb0:	fa10 f083 	uxtah	r0, r0, r3
 8003cb4:	f240 4302 	movw	r3, #1026	; 0x402
 8003cb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
        ep->xfer_buff += ep->xfer_count;
 8003cbc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003cbe:	5ac3      	ldrh	r3, [r0, r3]
 8003cc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cc4:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8003cc6:	4413      	add	r3, r2
 8003cc8:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003cca:	4620      	mov	r0, r4
 8003ccc:	f003 ff36 	bl	8007b3c <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003cd0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8003cd4:	b183      	cbz	r3, 8003cf8 <HAL_PCD_IRQHandler+0x268>
 8003cd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003cd8:	b973      	cbnz	r3, 8003cf8 <HAL_PCD_IRQHandler+0x268>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003cda:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8003cde:	6820      	ldr	r0, [r4, #0]
 8003ce0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ce4:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003ce8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8003cec:	e71d      	b.n	8003b2a <HAL_PCD_IRQHandler+0x9a>
 8003cee:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	f003 ff22 	bl	8007b3c <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003cf8:	6820      	ldr	r0, [r4, #0]
 8003cfa:	e716      	b.n	8003b2a <HAL_PCD_IRQHandler+0x9a>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003cfc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003d00:	f894 1168 	ldrb.w	r1, [r4, #360]	; 0x168
 8003d04:	f240 4306 	movw	r3, #1030	; 0x406
 8003d08:	fa10 f282 	uxtah	r2, r0, r2
 8003d0c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003d10:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8003d14:	5ad3      	ldrh	r3, [r2, r3]
 8003d16:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8003d1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003d1e:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003d22:	f002 fd15 	bl	8006750 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d26:	6822      	ldr	r2, [r4, #0]
 8003d28:	8811      	ldrh	r1, [r2, #0]
 8003d2a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003d2e:	400b      	ands	r3, r1
 8003d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
          HAL_PCD_SetupStageCallback(hpcd);
 8003d34:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d36:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8003d38:	f003 fef0 	bl	8007b1c <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003d3c:	6820      	ldr	r0, [r4, #0]
 8003d3e:	e6f4      	b.n	8003b2a <HAL_PCD_IRQHandler+0x9a>
          if (ep->type == EP_TYPE_BULK)
 8003d40:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	f000 8224 	beq.w	8004192 <HAL_PCD_IRQHandler+0x702>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003d4a:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8003d4e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5a:	041b      	lsls	r3, r3, #16
 8003d5c:	0c1b      	lsrs	r3, r3, #16
 8003d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d66:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003d6a:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 8003d6e:	b21a      	sxth	r2, r3
 8003d70:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
 8003d74:	f412 4f80 	tst.w	r2, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d78:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003d7c:	f000 814e 	beq.w	800401c <HAL_PCD_IRQHandler+0x58c>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d80:	f200 4c02 	addw	ip, r0, #1026	; 0x402
 8003d84:	fa1c f282 	uxtah	r2, ip, r2
 8003d88:	f832 9033 	ldrh.w	r9, [r2, r3, lsl #3]
 8003d8c:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 8003d90:	f1b9 0f00 	cmp.w	r9, #0
 8003d94:	f43f af61 	beq.w	8003c5a <HAL_PCD_IRQHandler+0x1ca>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003d98:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8003d9c:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8003da0:	464b      	mov	r3, r9
 8003da2:	f002 fcd5 	bl	8006750 <USB_ReadPMA>
 8003da6:	e758      	b.n	8003c5a <HAL_PCD_IRQHandler+0x1ca>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003da8:	6822      	ldr	r2, [r4, #0]
 8003daa:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003dae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003db2:	041b      	lsls	r3, r3, #16
 8003db4:	0c1b      	lsrs	r3, r3, #16
 8003db6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8003dba:	4620      	mov	r0, r4
 8003dbc:	f003 fecc 	bl	8007b58 <HAL_PCD_ResetCallback>
  __HAL_LOCK(hpcd);
 8003dc0:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	f43f ae97 	beq.w	8003af8 <HAL_PCD_IRQHandler+0x68>
 8003dca:	2301      	movs	r3, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003dcc:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8003dce:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003dd2:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003dd6:	4629      	mov	r1, r5
 8003dd8:	f002 fc94 	bl	8006704 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ddc:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
}
 8003de0:	b003      	add	sp, #12
 8003de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003de6:	8802      	ldrh	r2, [r0, #0]
 8003de8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003dec:	4013      	ands	r3, r2
 8003dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003df2:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003df4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003df8:	f894 1168 	ldrb.w	r1, [r4, #360]	; 0x168
 8003dfc:	f240 4306 	movw	r3, #1030	; 0x406
 8003e00:	fa10 f282 	uxtah	r2, r0, r2
 8003e04:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003e08:	5ad3      	ldrh	r3, [r2, r3]
 8003e0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e0e:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003e12:	b193      	cbz	r3, 8003e3a <HAL_PCD_IRQHandler+0x3aa>
 8003e14:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8003e18:	b179      	cbz	r1, 8003e3a <HAL_PCD_IRQHandler+0x3aa>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003e1a:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8003e1e:	f002 fc97 	bl	8006750 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8003e22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003e26:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
 8003e2a:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8003e30:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003e34:	f003 fe78 	bl	8007b28 <HAL_PCD_DataOutStageCallback>
 8003e38:	6820      	ldr	r0, [r4, #0]
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003e3a:	8803      	ldrh	r3, [r0, #0]
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003e3c:	051d      	lsls	r5, r3, #20
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003e3e:	b29a      	uxth	r2, r3
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003e40:	f53f ae73 	bmi.w	8003b2a <HAL_PCD_IRQHandler+0x9a>
 8003e44:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8003e48:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8003e4c:	f43f ae6d 	beq.w	8003b2a <HAL_PCD_IRQHandler+0x9a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003e50:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003e54:	f8d4 1178 	ldr.w	r1, [r4, #376]	; 0x178
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8003e5e:	293e      	cmp	r1, #62	; 0x3e
 8003e60:	5aea      	ldrh	r2, [r5, r3]
 8003e62:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003e66:	52ea      	strh	r2, [r5, r3]
 8003e68:	f240 81cf 	bls.w	800420a <HAL_PCD_IRQHandler+0x77a>
 8003e6c:	5aea      	ldrh	r2, [r5, r3]
 8003e6e:	094e      	lsrs	r6, r1, #5
 8003e70:	06c9      	lsls	r1, r1, #27
 8003e72:	bf08      	it	eq
 8003e74:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8003e78:	b292      	uxth	r2, r2
 8003e7a:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8003e7e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003e82:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003e86:	b292      	uxth	r2, r2
 8003e88:	52ea      	strh	r2, [r5, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003e8a:	8803      	ldrh	r3, [r0, #0]
 8003e8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e94:	041b      	lsls	r3, r3, #16
 8003e96:	0c1b      	lsrs	r3, r3, #16
 8003e98:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ea4:	8003      	strh	r3, [r0, #0]
 8003ea6:	e640      	b.n	8003b2a <HAL_PCD_IRQHandler+0x9a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003ea8:	6822      	ldr	r2, [r4, #0]
 8003eaa:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003eae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003eb2:	041b      	lsls	r3, r3, #16
 8003eb4:	0c1b      	lsrs	r3, r3, #16
 8003eb6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8003eba:	b003      	add	sp, #12
 8003ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          ep->xfer_len = 0U;
 8003ec0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8003ec4:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8003ec8:	2300      	movs	r3, #0
          if (ep->doublebuffer != 0U)
 8003eca:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
          ep->xfer_len = 0U;
 8003ece:	642b      	str	r3, [r5, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 8003ed0:	b1d2      	cbz	r2, 8003f08 <HAL_PCD_IRQHandler+0x478>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ed2:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 8003ed6:	f040 8107 	bne.w	80040e8 <HAL_PCD_IRQHandler+0x658>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003eda:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f040 8223 	bne.w	800432a <HAL_PCD_IRQHandler+0x89a>
 8003ee4:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8003ee8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003eec:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8003ef0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ef4:	b292      	uxth	r2, r2
 8003ef6:	5a99      	ldrh	r1, [r3, r2]
 8003ef8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003efc:	5299      	strh	r1, [r3, r2]
 8003efe:	5a99      	ldrh	r1, [r3, r2]
 8003f00:	b289      	uxth	r1, r1
 8003f02:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003f06:	5299      	strh	r1, [r3, r2]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f08:	4620      	mov	r0, r4
 8003f0a:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8003f0e:	f003 fe15 	bl	8007b3c <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003f12:	6820      	ldr	r0, [r4, #0]
 8003f14:	e609      	b.n	8003b2a <HAL_PCD_IRQHandler+0x9a>
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003f16:	f017 0340 	ands.w	r3, r7, #64	; 0x40
 8003f1a:	9301      	str	r3, [sp, #4]
 8003f1c:	f000 809a 	beq.w	8004054 <HAL_PCD_IRQHandler+0x5c4>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f20:	f896 a028 	ldrb.w	sl, [r6, #40]	; 0x28
 8003f24:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003f28:	ea4f 0cca 	mov.w	ip, sl, lsl #3
 8003f2c:	fa1c f383 	uxtah	r3, ip, r3
 8003f30:	f200 4902 	addw	r9, r0, #1026	; 0x402
    if (ep->xfer_len > TxPctSize)
 8003f34:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8003f38:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f3c:	f833 3009 	ldrh.w	r3, [r3, r9]
    if (ep->xfer_len > TxPctSize)
 8003f40:	6c11      	ldr	r1, [r2, #64]	; 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f42:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len > TxPctSize)
 8003f46:	4299      	cmp	r1, r3
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f48:	fa0f fe8a 	sxth.w	lr, sl
    if (ep->xfer_len > TxPctSize)
 8003f4c:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8003f50:	f240 8168 	bls.w	8004224 <HAL_PCD_IRQHandler+0x794>
      ep->xfer_len -= TxPctSize;
 8003f54:	1ac9      	subs	r1, r1, r3
 8003f56:	6411      	str	r1, [r2, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8003f58:	2900      	cmp	r1, #0
 8003f5a:	f000 8165 	beq.w	8004228 <HAL_PCD_IRQHandler+0x798>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f5e:	0479      	lsls	r1, r7, #17
 8003f60:	d50d      	bpl.n	8003f7e <HAL_PCD_IRQHandler+0x4ee>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f62:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
 8003f66:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003f6a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003f6e:	0412      	lsls	r2, r2, #16
 8003f70:	0c12      	lsrs	r2, r2, #16
 8003f72:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003f76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f7a:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8003f7e:	eb08 0705 	add.w	r7, r8, r5
 8003f82:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8003f86:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8003f8a:	2a01      	cmp	r2, #1
 8003f8c:	f040 809a 	bne.w	80040c4 <HAL_PCD_IRQHandler+0x634>
        ep->xfer_buff += TxPctSize;
 8003f90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8003f92:	f8d7 c048 	ldr.w	ip, [r7, #72]	; 0x48
        ep->xfer_buff += TxPctSize;
 8003f96:	18d1      	adds	r1, r2, r3
        ep->xfer_count += TxPctSize;
 8003f98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
        ep->xfer_buff += TxPctSize;
 8003f9a:	63f9      	str	r1, [r7, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 8003f9c:	441a      	add	r2, r3
 8003f9e:	647a      	str	r2, [r7, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8003fa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fa2:	4594      	cmp	ip, r2
 8003fa4:	f0c0 82b0 	bcc.w	8004508 <HAL_PCD_IRQHandler+0xa78>
          ep->xfer_len_db -= len;
 8003fa8:	ebac 0302 	sub.w	r3, ip, r2
 8003fac:	64bb      	str	r3, [r7, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003fae:	b293      	uxth	r3, r2
 8003fb0:	f896 7029 	ldrb.w	r7, [r6, #41]	; 0x29
 8003fb4:	2f00      	cmp	r7, #0
 8003fb6:	f040 829d 	bne.w	80044f4 <HAL_PCD_IRQHandler+0xa64>
 8003fba:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8003fbe:	fa19 f987 	uxtah	r9, r9, r7
 8003fc2:	2a3e      	cmp	r2, #62	; 0x3e
 8003fc4:	f839 703e 	ldrh.w	r7, [r9, lr, lsl #3]
 8003fc8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8003fcc:	f829 703e 	strh.w	r7, [r9, lr, lsl #3]
 8003fd0:	f240 82c1 	bls.w	8004556 <HAL_PCD_IRQHandler+0xac6>
 8003fd4:	0957      	lsrs	r7, r2, #5
 8003fd6:	06d2      	lsls	r2, r2, #27
 8003fd8:	f839 203e 	ldrh.w	r2, [r9, lr, lsl #3]
 8003fdc:	bf08      	it	eq
 8003fde:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8003fe2:	b292      	uxth	r2, r2
 8003fe4:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8003fe8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003fec:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003ff0:	b292      	uxth	r2, r2
 8003ff2:	f829 203e 	strh.w	r2, [r9, lr, lsl #3]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003ff6:	eb08 0205 	add.w	r2, r8, r5
 8003ffa:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8003ffe:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8004000:	f002 fb96 	bl	8006730 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004004:	6820      	ldr	r0, [r4, #0]
 8004006:	e05d      	b.n	80040c4 <HAL_PCD_IRQHandler+0x634>
        ep = &hpcd->OUT_ep[epindex];
 8004008:	2128      	movs	r1, #40	; 0x28
 800400a:	fb01 4105 	mla	r1, r1, r5, r4
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800400e:	6820      	ldr	r0, [r4, #0]
 8004010:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8004014:	f002 f812 	bl	800603c <USB_EPStartXfer>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004018:	6820      	ldr	r0, [r4, #0]
 800401a:	e596      	b.n	8003b4a <HAL_PCD_IRQHandler+0xba>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800401c:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 8004020:	fa1c f282 	uxtah	r2, ip, r2
 8004024:	f832 9033 	ldrh.w	r9, [r2, r3, lsl #3]
 8004028:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 800402c:	f1b9 0f00 	cmp.w	r9, #0
 8004030:	f43f ae13 	beq.w	8003c5a <HAL_PCD_IRQHandler+0x1ca>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004034:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8004038:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800403c:	464b      	mov	r3, r9
 800403e:	f002 fb87 	bl	8006750 <USB_ReadPMA>
 8004042:	e60a      	b.n	8003c5a <HAL_PCD_IRQHandler+0x1ca>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004044:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8004048:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800404c:	464b      	mov	r3, r9
 800404e:	f002 fb7f 	bl	8006750 <USB_ReadPMA>
 8004052:	e602      	b.n	8003c5a <HAL_PCD_IRQHandler+0x1ca>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004054:	f896 e028 	ldrb.w	lr, [r6, #40]	; 0x28
 8004058:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800405c:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 8004060:	fa1c f383 	uxtah	r3, ip, r3
 8004064:	f200 4a06 	addw	sl, r0, #1030	; 0x406
    if (ep->xfer_len >= TxPctSize)
 8004068:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800406c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004070:	f833 300a 	ldrh.w	r3, [r3, sl]
    if (ep->xfer_len >= TxPctSize)
 8004074:	6c11      	ldr	r1, [r2, #64]	; 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004076:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= TxPctSize)
 800407a:	4299      	cmp	r1, r3
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800407c:	fa0f f98e 	sxth.w	r9, lr
    if (ep->xfer_len >= TxPctSize)
 8004080:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8004084:	f0c0 810e 	bcc.w	80042a4 <HAL_PCD_IRQHandler+0x814>
      ep->xfer_len -= TxPctSize;
 8004088:	1ac9      	subs	r1, r1, r3
 800408a:	6411      	str	r1, [r2, #64]	; 0x40
    if (ep->xfer_len == 0U)
 800408c:	2900      	cmp	r1, #0
 800408e:	f000 810b 	beq.w	80042a8 <HAL_PCD_IRQHandler+0x818>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004092:	0479      	lsls	r1, r7, #17
 8004094:	d40d      	bmi.n	80040b2 <HAL_PCD_IRQHandler+0x622>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004096:	f830 2029 	ldrh.w	r2, [r0, r9, lsl #2]
 800409a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800409e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80040a2:	0412      	lsls	r2, r2, #16
 80040a4:	0c12      	lsrs	r2, r2, #16
 80040a6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80040aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040ae:	f820 2029 	strh.w	r2, [r0, r9, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80040b2:	eb08 0705 	add.w	r7, r8, r5
 80040b6:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 80040ba:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80040be:	2a01      	cmp	r2, #1
 80040c0:	f000 81df 	beq.w	8004482 <HAL_PCD_IRQHandler+0x9f2>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80040c4:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 80040c8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040d6:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80040da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040e2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

  return HAL_OK;
 80040e6:	e520      	b.n	8003b2a <HAL_PCD_IRQHandler+0x9a>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040e8:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
 80040ec:	2a00      	cmp	r2, #0
 80040ee:	f040 812a 	bne.w	8004346 <HAL_PCD_IRQHandler+0x8b6>
 80040f2:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 80040f6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80040fa:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80040fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004102:	e6f7      	b.n	8003ef4 <HAL_PCD_IRQHandler+0x464>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004104:	6822      	ldr	r2, [r4, #0]
 8004106:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800410a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800410e:	041b      	lsls	r3, r3, #16
 8004110:	0c1b      	lsrs	r3, r3, #16
 8004112:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004116:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d17e      	bne.n	800421c <HAL_PCD_IRQHandler+0x78c>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800411e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8004122:	b29b      	uxth	r3, r3
 8004124:	f043 0304 	orr.w	r3, r3, #4
 8004128:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800412c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8004130:	b29b      	uxth	r3, r3
      hpcd->LPM_State = LPM_L1;
 8004132:	2101      	movs	r1, #1
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004134:	f043 0308 	orr.w	r3, r3, #8
 8004138:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 800413c:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004140:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8004144:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8004148:	f003 033c 	and.w	r3, r3, #60	; 0x3c
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800414c:	4620      	mov	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800414e:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
}
 8004152:	b003      	add	sp, #12
 8004154:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004158:	f003 be10 	b.w	8007d7c <HAL_PCDEx_LPM_Callback>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800415c:	6822      	ldr	r2, [r4, #0]
 800415e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8004162:	b29b      	uxth	r3, r3
 8004164:	f043 0308 	orr.w	r3, r3, #8
 8004168:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800416c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004170:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004174:	041b      	lsls	r3, r3, #16
 8004176:	0c1b      	lsrs	r3, r3, #16
 8004178:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800417c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8004180:	b29b      	uxth	r3, r3
 8004182:	f043 0304 	orr.w	r3, r3, #4
    HAL_PCD_SuspendCallback(hpcd);
 8004186:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004188:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 800418c:	f003 fcf6 	bl	8007b7c <HAL_PCD_SuspendCallback>
    return;
 8004190:	e4b2      	b.n	8003af8 <HAL_PCD_IRQHandler+0x68>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004192:	f417 4280 	ands.w	r2, r7, #16384	; 0x4000
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004196:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800419a:	f000 80e2 	beq.w	8004362 <HAL_PCD_IRQHandler+0x8d2>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800419e:	f200 4202 	addw	r2, r0, #1026	; 0x402
 80041a2:	fa12 f383 	uxtah	r3, r2, r3
 80041a6:	f891 c168 	ldrb.w	ip, [r1, #360]	; 0x168
    if (ep->xfer_len >= count)
 80041aa:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80041ae:	f833 303c 	ldrh.w	r3, [r3, ip, lsl #3]
 80041b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 80041b6:	429a      	cmp	r2, r3
 80041b8:	4699      	mov	r9, r3
 80041ba:	f0c0 814c 	bcc.w	8004456 <HAL_PCD_IRQHandler+0x9c6>
      ep->xfer_len -= count;
 80041be:	1ad2      	subs	r2, r2, r3
 80041c0:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80041c4:	2a00      	cmp	r2, #0
 80041c6:	f000 8149 	beq.w	800445c <HAL_PCD_IRQHandler+0x9cc>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80041ca:	0679      	lsls	r1, r7, #25
 80041cc:	d50f      	bpl.n	80041ee <HAL_PCD_IRQHandler+0x75e>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80041ce:	fa0f fc8c 	sxth.w	ip, ip
 80041d2:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 80041d6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80041da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80041de:	0412      	lsls	r2, r2, #16
 80041e0:	0c12      	lsrs	r2, r2, #16
 80041e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041e6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80041ea:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
    if (count != 0U)
 80041ee:	b90b      	cbnz	r3, 80041f4 <HAL_PCD_IRQHandler+0x764>
 80041f0:	4699      	mov	r9, r3
 80041f2:	e532      	b.n	8003c5a <HAL_PCD_IRQHandler+0x1ca>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80041f4:	eb08 0105 	add.w	r1, r8, r5
 80041f8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80041fc:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8004200:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8004204:	f002 faa4 	bl	8006750 <USB_ReadPMA>
 8004208:	e527      	b.n	8003c5a <HAL_PCD_IRQHandler+0x1ca>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800420a:	2900      	cmp	r1, #0
 800420c:	f040 80de 	bne.w	80043cc <HAL_PCD_IRQHandler+0x93c>
 8004210:	5aea      	ldrh	r2, [r5, r3]
 8004212:	b292      	uxth	r2, r2
 8004214:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004218:	52ea      	strh	r2, [r5, r3]
 800421a:	e636      	b.n	8003e8a <HAL_PCD_IRQHandler+0x3fa>
      HAL_PCD_SuspendCallback(hpcd);
 800421c:	4620      	mov	r0, r4
 800421e:	f003 fcad 	bl	8007b7c <HAL_PCD_SuspendCallback>
 8004222:	e469      	b.n	8003af8 <HAL_PCD_IRQHandler+0x68>
 8004224:	2300      	movs	r3, #0
 8004226:	6413      	str	r3, [r2, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004228:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 800422c:	2b00      	cmp	r3, #0
 800422e:	f040 80d9 	bne.w	80043e4 <HAL_PCD_IRQHandler+0x954>
 8004232:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004236:	fa19 f983 	uxtah	r9, r9, r3
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800423a:	f20c 4206 	addw	r2, ip, #1030	; 0x406
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800423e:	f839 303e 	ldrh.w	r3, [r9, lr, lsl #3]
 8004242:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004246:	f829 303e 	strh.w	r3, [r9, lr, lsl #3]
 800424a:	f839 303e 	ldrh.w	r3, [r9, lr, lsl #3]
 800424e:	b29b      	uxth	r3, r3
 8004250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004254:	f829 303e 	strh.w	r3, [r9, lr, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004258:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800425c:	4402      	add	r2, r0
 800425e:	b29b      	uxth	r3, r3
 8004260:	5ad1      	ldrh	r1, [r2, r3]
 8004262:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004266:	52d1      	strh	r1, [r2, r3]
 8004268:	5ad1      	ldrh	r1, [r2, r3]
 800426a:	b289      	uxth	r1, r1
 800426c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004270:	52d1      	strh	r1, [r2, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004272:	4620      	mov	r0, r4
 8004274:	4651      	mov	r1, sl
 8004276:	f003 fc61 	bl	8007b3c <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800427a:	047d      	lsls	r5, r7, #17
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800427c:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800427e:	f57f af21 	bpl.w	80040c4 <HAL_PCD_IRQHandler+0x634>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004282:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 8004286:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800428a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800428e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004292:	041b      	lsls	r3, r3, #16
 8004294:	0c1b      	lsrs	r3, r3, #16
 8004296:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800429a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800429e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80042a2:	e70f      	b.n	80040c4 <HAL_PCD_IRQHandler+0x634>
 80042a4:	9b01      	ldr	r3, [sp, #4]
 80042a6:	6413      	str	r3, [r2, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042a8:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f040 80ab 	bne.w	8004408 <HAL_PCD_IRQHandler+0x978>
 80042b2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80042b6:	f20c 4102 	addw	r1, ip, #1026	; 0x402
 80042ba:	b292      	uxth	r2, r2
 80042bc:	4401      	add	r1, r0
 80042be:	5a8b      	ldrh	r3, [r1, r2]
 80042c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042c4:	528b      	strh	r3, [r1, r2]
 80042c6:	5a8b      	ldrh	r3, [r1, r2]
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ce:	528b      	strh	r3, [r1, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042d0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80042d4:	fa1a f383 	uxtah	r3, sl, r3
 80042d8:	f833 2039 	ldrh.w	r2, [r3, r9, lsl #3]
 80042dc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80042e0:	f823 2039 	strh.w	r2, [r3, r9, lsl #3]
 80042e4:	f833 2039 	ldrh.w	r2, [r3, r9, lsl #3]
 80042e8:	b292      	uxth	r2, r2
 80042ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042ee:	f823 2039 	strh.w	r2, [r3, r9, lsl #3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042f2:	4620      	mov	r0, r4
 80042f4:	4671      	mov	r1, lr
 80042f6:	f003 fc21 	bl	8007b3c <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80042fa:	047d      	lsls	r5, r7, #17
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80042fc:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80042fe:	d5c0      	bpl.n	8004282 <HAL_PCD_IRQHandler+0x7f2>
 8004300:	e6e0      	b.n	80040c4 <HAL_PCD_IRQHandler+0x634>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004302:	6822      	ldr	r2, [r4, #0]
 8004304:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004308:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800430c:	041b      	lsls	r3, r3, #16
 800430e:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_SOFCallback(hpcd);
 8004310:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004312:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8004316:	f003 fc1b 	bl	8007b50 <HAL_PCD_SOFCallback>
    return;
 800431a:	f7ff bbed 	b.w	8003af8 <HAL_PCD_IRQHandler+0x68>
      hpcd->LPM_State = LPM_L0;
 800431e:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004322:	4620      	mov	r0, r4
 8004324:	f003 fd2a 	bl	8007d7c <HAL_PCDEx_LPM_Callback>
 8004328:	e466      	b.n	8003bf8 <HAL_PCD_IRQHandler+0x168>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800432a:	2b01      	cmp	r3, #1
 800432c:	f47f adec 	bne.w	8003f08 <HAL_PCD_IRQHandler+0x478>
 8004330:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8004334:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004338:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800433c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004340:	b292      	uxth	r2, r2
 8004342:	529f      	strh	r7, [r3, r2]
 8004344:	e5e0      	b.n	8003f08 <HAL_PCD_IRQHandler+0x478>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004346:	2a01      	cmp	r2, #1
 8004348:	f47f adde 	bne.w	8003f08 <HAL_PCD_IRQHandler+0x478>
 800434c:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 8004350:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8004354:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8004358:	f202 4202 	addw	r2, r2, #1026	; 0x402
 800435c:	b289      	uxth	r1, r1
 800435e:	5253      	strh	r3, [r2, r1]
 8004360:	e5d2      	b.n	8003f08 <HAL_PCD_IRQHandler+0x478>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004362:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 8004366:	fa1c f383 	uxtah	r3, ip, r3
 800436a:	f891 c168 	ldrb.w	ip, [r1, #360]	; 0x168
    if (ep->xfer_len >= count)
 800436e:	f8d1 e180 	ldr.w	lr, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004372:	f833 303c 	ldrh.w	r3, [r3, ip, lsl #3]
 8004376:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 800437a:	459e      	cmp	lr, r3
 800437c:	4699      	mov	r9, r3
 800437e:	d355      	bcc.n	800442c <HAL_PCD_IRQHandler+0x99c>
      ep->xfer_len -= count;
 8004380:	ebae 0203 	sub.w	r2, lr, r3
 8004384:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8004388:	2a00      	cmp	r2, #0
 800438a:	d051      	beq.n	8004430 <HAL_PCD_IRQHandler+0x9a0>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800438c:	067a      	lsls	r2, r7, #25
 800438e:	d40f      	bmi.n	80043b0 <HAL_PCD_IRQHandler+0x920>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004390:	fa0f fc8c 	sxth.w	ip, ip
 8004394:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 8004398:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800439c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80043a0:	0412      	lsls	r2, r2, #16
 80043a2:	0c12      	lsrs	r2, r2, #16
 80043a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043a8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80043ac:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
    if (count != 0U)
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f43f af1d 	beq.w	80041f0 <HAL_PCD_IRQHandler+0x760>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80043b6:	eb08 0105 	add.w	r1, r8, r5
 80043ba:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80043be:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 80043c2:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80043c6:	f002 f9c3 	bl	8006750 <USB_ReadPMA>
 80043ca:	e446      	b.n	8003c5a <HAL_PCD_IRQHandler+0x1ca>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80043cc:	07ca      	lsls	r2, r1, #31
 80043ce:	5aea      	ldrh	r2, [r5, r3]
 80043d0:	ea4f 0651 	mov.w	r6, r1, lsr #1
 80043d4:	bf48      	it	mi
 80043d6:	3601      	addmi	r6, #1
 80043d8:	b292      	uxth	r2, r2
 80043da:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 80043de:	b292      	uxth	r2, r2
 80043e0:	52ea      	strh	r2, [r5, r3]
 80043e2:	e552      	b.n	8003e8a <HAL_PCD_IRQHandler+0x3fa>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	f47f af44 	bne.w	8004272 <HAL_PCD_IRQHandler+0x7e2>
 80043ea:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80043ee:	fa19 f983 	uxtah	r9, r9, r3
 80043f2:	2100      	movs	r1, #0
 80043f4:	f829 103e 	strh.w	r1, [r9, lr, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043f8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80043fc:	f20c 4206 	addw	r2, ip, #1030	; 0x406
 8004400:	4402      	add	r2, r0
 8004402:	b29b      	uxth	r3, r3
 8004404:	52d1      	strh	r1, [r2, r3]
 8004406:	e734      	b.n	8004272 <HAL_PCD_IRQHandler+0x7e2>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004408:	2b01      	cmp	r3, #1
 800440a:	f47f af72 	bne.w	80042f2 <HAL_PCD_IRQHandler+0x862>
 800440e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004412:	f20c 4202 	addw	r2, ip, #1026	; 0x402
 8004416:	b29b      	uxth	r3, r3
 8004418:	4402      	add	r2, r0
 800441a:	2100      	movs	r1, #0
 800441c:	52d1      	strh	r1, [r2, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800441e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004422:	fa1a f383 	uxtah	r3, sl, r3
 8004426:	f823 1039 	strh.w	r1, [r3, r9, lsl #3]
 800442a:	e762      	b.n	80042f2 <HAL_PCD_IRQHandler+0x862>
 800442c:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004430:	fa0f f18c 	sxth.w	r1, ip
 8004434:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8004438:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800443c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004440:	0412      	lsls	r2, r2, #16
 8004442:	0c12      	lsrs	r2, r2, #16
 8004444:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8004448:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800444c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004450:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 8004454:	e79a      	b.n	800438c <HAL_PCD_IRQHandler+0x8fc>
 8004456:	2200      	movs	r2, #0
 8004458:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800445c:	fa0f f18c 	sxth.w	r1, ip
 8004460:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8004464:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004468:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800446c:	0412      	lsls	r2, r2, #16
 800446e:	0c12      	lsrs	r2, r2, #16
 8004470:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8004474:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004478:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800447c:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 8004480:	e6a3      	b.n	80041ca <HAL_PCD_IRQHandler+0x73a>
        ep->xfer_buff += TxPctSize;
 8004482:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8004484:	f8d7 c048 	ldr.w	ip, [r7, #72]	; 0x48
        ep->xfer_buff += TxPctSize;
 8004488:	18d1      	adds	r1, r2, r3
        ep->xfer_count += TxPctSize;
 800448a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
        ep->xfer_buff += TxPctSize;
 800448c:	63f9      	str	r1, [r7, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 800448e:	441a      	add	r2, r3
 8004490:	647a      	str	r2, [r7, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8004492:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004494:	4594      	cmp	ip, r2
 8004496:	d347      	bcc.n	8004528 <HAL_PCD_IRQHandler+0xa98>
          ep->xfer_len_db -= len;
 8004498:	ebac 0302 	sub.w	r3, ip, r2
 800449c:	64bb      	str	r3, [r7, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800449e:	b293      	uxth	r3, r2
 80044a0:	f896 7029 	ldrb.w	r7, [r6, #41]	; 0x29
 80044a4:	bbbf      	cbnz	r7, 8004516 <HAL_PCD_IRQHandler+0xa86>
 80044a6:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 80044aa:	fa1a f787 	uxtah	r7, sl, r7
 80044ae:	2a3e      	cmp	r2, #62	; 0x3e
 80044b0:	f837 c039 	ldrh.w	ip, [r7, r9, lsl #3]
 80044b4:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80044b8:	f827 c039 	strh.w	ip, [r7, r9, lsl #3]
 80044bc:	d954      	bls.n	8004568 <HAL_PCD_IRQHandler+0xad8>
 80044be:	ea4f 1c52 	mov.w	ip, r2, lsr #5
 80044c2:	06d2      	lsls	r2, r2, #27
 80044c4:	f837 2039 	ldrh.w	r2, [r7, r9, lsl #3]
 80044c8:	bf08      	it	eq
 80044ca:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 80044ce:	b292      	uxth	r2, r2
 80044d0:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 80044d4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80044d8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80044dc:	b292      	uxth	r2, r2
 80044de:	f827 2039 	strh.w	r2, [r7, r9, lsl #3]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80044e2:	eb08 0205 	add.w	r2, r8, r5
 80044e6:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80044ea:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80044ec:	f002 f920 	bl	8006730 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80044f0:	6820      	ldr	r0, [r4, #0]
 80044f2:	e5e7      	b.n	80040c4 <HAL_PCD_IRQHandler+0x634>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80044f4:	2f01      	cmp	r7, #1
 80044f6:	f47f ad7e 	bne.w	8003ff6 <HAL_PCD_IRQHandler+0x566>
 80044fa:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80044fe:	fa19 f982 	uxtah	r9, r9, r2
 8004502:	f829 303e 	strh.w	r3, [r9, lr, lsl #3]
 8004506:	e576      	b.n	8003ff6 <HAL_PCD_IRQHandler+0x566>
        else if (ep->xfer_len_db == 0U)
 8004508:	f1bc 0f00 	cmp.w	ip, #0
 800450c:	d113      	bne.n	8004536 <HAL_PCD_IRQHandler+0xaa6>
          ep->xfer_fill_db = 0U;
 800450e:	f887 c04c 	strb.w	ip, [r7, #76]	; 0x4c
 8004512:	461a      	mov	r2, r3
 8004514:	e54c      	b.n	8003fb0 <HAL_PCD_IRQHandler+0x520>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004516:	2f01      	cmp	r7, #1
 8004518:	d1e3      	bne.n	80044e2 <HAL_PCD_IRQHandler+0xa52>
 800451a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800451e:	fa1a f282 	uxtah	r2, sl, r2
 8004522:	f822 3039 	strh.w	r3, [r2, r9, lsl #3]
 8004526:	e7dc      	b.n	80044e2 <HAL_PCD_IRQHandler+0xa52>
        else if (ep->xfer_len_db == 0U)
 8004528:	f1bc 0f00 	cmp.w	ip, #0
 800452c:	d10b      	bne.n	8004546 <HAL_PCD_IRQHandler+0xab6>
          ep->xfer_fill_db = 0U;
 800452e:	f887 c04c 	strb.w	ip, [r7, #76]	; 0x4c
 8004532:	461a      	mov	r2, r3
 8004534:	e7b4      	b.n	80044a0 <HAL_PCD_IRQHandler+0xa10>
          ep->xfer_fill_db = 0U;
 8004536:	2300      	movs	r3, #0
 8004538:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 800453c:	64bb      	str	r3, [r7, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800453e:	4662      	mov	r2, ip
 8004540:	fa1f f38c 	uxth.w	r3, ip
 8004544:	e534      	b.n	8003fb0 <HAL_PCD_IRQHandler+0x520>
          ep->xfer_len_db = 0U;
 8004546:	2300      	movs	r3, #0
 8004548:	64bb      	str	r3, [r7, #72]	; 0x48
          ep->xfer_fill_db = 0;
 800454a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800454e:	4662      	mov	r2, ip
 8004550:	fa1f f38c 	uxth.w	r3, ip
 8004554:	e7a4      	b.n	80044a0 <HAL_PCD_IRQHandler+0xa10>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004556:	b982      	cbnz	r2, 800457a <HAL_PCD_IRQHandler+0xaea>
 8004558:	f839 203e 	ldrh.w	r2, [r9, lr, lsl #3]
 800455c:	b292      	uxth	r2, r2
 800455e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004562:	f829 203e 	strh.w	r2, [r9, lr, lsl #3]
 8004566:	e546      	b.n	8003ff6 <HAL_PCD_IRQHandler+0x566>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004568:	b9a2      	cbnz	r2, 8004594 <HAL_PCD_IRQHandler+0xb04>
 800456a:	f837 2039 	ldrh.w	r2, [r7, r9, lsl #3]
 800456e:	b292      	uxth	r2, r2
 8004570:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004574:	f827 2039 	strh.w	r2, [r7, r9, lsl #3]
 8004578:	e7b3      	b.n	80044e2 <HAL_PCD_IRQHandler+0xa52>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800457a:	0857      	lsrs	r7, r2, #1
 800457c:	07d2      	lsls	r2, r2, #31
 800457e:	f839 203e 	ldrh.w	r2, [r9, lr, lsl #3]
 8004582:	bf48      	it	mi
 8004584:	3701      	addmi	r7, #1
 8004586:	b292      	uxth	r2, r2
 8004588:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800458c:	b292      	uxth	r2, r2
 800458e:	f829 203e 	strh.w	r2, [r9, lr, lsl #3]
 8004592:	e530      	b.n	8003ff6 <HAL_PCD_IRQHandler+0x566>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004594:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 8004598:	07d2      	lsls	r2, r2, #31
 800459a:	f837 2039 	ldrh.w	r2, [r7, r9, lsl #3]
 800459e:	bf48      	it	mi
 80045a0:	f10c 0c01 	addmi.w	ip, ip, #1
 80045a4:	b292      	uxth	r2, r2
 80045a6:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 80045aa:	b292      	uxth	r2, r2
 80045ac:	f827 2039 	strh.w	r2, [r7, r9, lsl #3]
 80045b0:	e797      	b.n	80044e2 <HAL_PCD_IRQHandler+0xa52>
 80045b2:	bf00      	nop
 80045b4:	ffff8f0f 	.word	0xffff8f0f

080045b8 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80045b8:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 80045bc:	2a01      	cmp	r2, #1
 80045be:	d00d      	beq.n	80045dc <HAL_PCD_SetAddress+0x24>
{
 80045c0:	b510      	push	{r4, lr}
 80045c2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80045c4:	2201      	movs	r2, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80045c6:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 80045c8:	f884 22a8 	strb.w	r2, [r4, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80045cc:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80045d0:	f002 f898 	bl	8006704 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80045d4:	2000      	movs	r0, #0
 80045d6:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80045da:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80045dc:	2002      	movs	r0, #2
}
 80045de:	4770      	bx	lr

080045e0 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 80045e0:	f001 0c07 	and.w	ip, r1, #7
 80045e4:	0609      	lsls	r1, r1, #24
{
 80045e6:	b510      	push	{r4, lr}
 80045e8:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80045ea:	d422      	bmi.n	8004632 <HAL_PCD_EP_Open+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045ec:	2128      	movs	r1, #40	; 0x28
 80045ee:	fb01 010c 	mla	r1, r1, ip, r0
    ep->is_in = 0U;
 80045f2:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
 80045f6:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80045fa:	f04f 0e00 	mov.w	lr, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045fe:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8004602:	f880 e169 	strb.w	lr, [r0, #361]	; 0x169
  if (ep_type == EP_TYPE_BULK)
 8004606:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8004608:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 800460a:	bf04      	itt	eq
 800460c:	2300      	moveq	r3, #0
 800460e:	710b      	strbeq	r3, [r1, #4]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004610:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 8004614:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8004616:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800461a:	2b01      	cmp	r3, #1
 800461c:	d015      	beq.n	800464a <HAL_PCD_EP_Open+0x6a>
 800461e:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004620:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8004622:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004626:	f001 fa63 	bl	8005af0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800462a:	2000      	movs	r0, #0
 800462c:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8004630:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004632:	f10c 0101 	add.w	r1, ip, #1
    ep->is_in = 1U;
 8004636:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800463a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800463e:	f04f 0e01 	mov.w	lr, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004642:	4601      	mov	r1, r0
    ep->is_in = 1U;
 8004644:	f880 e001 	strb.w	lr, [r0, #1]
 8004648:	e7dd      	b.n	8004606 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 800464a:	2002      	movs	r0, #2
}
 800464c:	bd10      	pop	{r4, pc}
 800464e:	bf00      	nop

08004650 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8004650:	060a      	lsls	r2, r1, #24
{
 8004652:	b510      	push	{r4, lr}
 8004654:	f001 0307 	and.w	r3, r1, #7
 8004658:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800465a:	d41a      	bmi.n	8004692 <HAL_PCD_EP_Close+0x42>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800465c:	2128      	movs	r1, #40	; 0x28
 800465e:	fb01 0103 	mla	r1, r1, r3, r0
    ep->is_in = 0U;
 8004662:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004666:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800466a:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 800466e:	2000      	movs	r0, #0
 8004670:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8004674:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8004676:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800467a:	2b01      	cmp	r3, #1
 800467c:	d016      	beq.n	80046ac <HAL_PCD_EP_Close+0x5c>
 800467e:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004680:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8004682:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004686:	f001 fbf9 	bl	8005e7c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800468a:	2000      	movs	r0, #0
 800468c:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8004690:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004692:	1c5a      	adds	r2, r3, #1
    ep->is_in = 1U;
 8004694:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004698:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800469c:	4611      	mov	r1, r2
    ep->is_in = 1U;
 800469e:	2001      	movs	r0, #1
 80046a0:	7050      	strb	r0, [r2, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046a2:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80046a4:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d1e8      	bne.n	800467e <HAL_PCD_EP_Close+0x2e>
 80046ac:	2002      	movs	r0, #2
}
 80046ae:	bd10      	pop	{r4, pc}

080046b0 <HAL_PCD_EP_Receive>:
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046b0:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 80046b4:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
{
 80046b8:	b510      	push	{r4, lr}
  ep->xfer_buff = pBuf;
 80046ba:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
  ep->xfer_count = 0U;
 80046be:	2400      	movs	r4, #0
  ep->xfer_buff = pBuf;
 80046c0:	f8cc 217c 	str.w	r2, [ip, #380]	; 0x17c
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046c4:	2228      	movs	r2, #40	; 0x28
 80046c6:	fb02 0201 	mla	r2, r2, r1, r0
  ep->num = ep_addr & EP_ADDR_MSK;
 80046ca:	f88c 1168 	strb.w	r1, [ip, #360]	; 0x168
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80046ce:	6800      	ldr	r0, [r0, #0]
  ep->is_in = 0U;
 80046d0:	f88c 4169 	strb.w	r4, [ip, #361]	; 0x169
  ep->xfer_count = 0U;
 80046d4:	e9cc 3460 	strd	r3, r4, [ip, #384]	; 0x180
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80046d8:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 80046dc:	f001 fcae 	bl	800603c <USB_EPStartXfer>
}
 80046e0:	4620      	mov	r0, r4
 80046e2:	bd10      	pop	{r4, pc}

080046e4 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80046e4:	f001 0107 	and.w	r1, r1, #7
 80046e8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80046ec:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 80046f0:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop

080046f8 <HAL_PCD_EP_Transmit>:
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046f8:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 80046fc:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
{
 8004700:	b510      	push	{r4, lr}
  ep->xfer_buff = pBuf;
 8004702:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
{
 8004706:	4686      	mov	lr, r0
  ep->xfer_fill_db = 1U;
 8004708:	2001      	movs	r0, #1
  ep->xfer_len = len;
 800470a:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
  ep->xfer_len_db = len;
 800470e:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004712:	180b      	adds	r3, r1, r0
  ep->xfer_count = 0U;
 8004714:	2400      	movs	r4, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004716:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  ep->xfer_fill_db = 1U;
 800471a:	f88c 004c 	strb.w	r0, [ip, #76]	; 0x4c
  ep->is_in = 1U;
 800471e:	f88c 0029 	strb.w	r0, [ip, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 8004722:	f88c 1028 	strb.w	r1, [ip, #40]	; 0x28
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004726:	f8de 0000 	ldr.w	r0, [lr]
  ep->xfer_buff = pBuf;
 800472a:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
  ep->xfer_count = 0U;
 800472e:	f8cc 4044 	str.w	r4, [ip, #68]	; 0x44
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004732:	eb0e 01c3 	add.w	r1, lr, r3, lsl #3
 8004736:	f001 fc81 	bl	800603c <USB_EPStartXfer>
}
 800473a:	4620      	mov	r0, r4
 800473c:	bd10      	pop	{r4, pc}
 800473e:	bf00      	nop

08004740 <HAL_PCD_EP_SetStall>:
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004740:	6842      	ldr	r2, [r0, #4]
 8004742:	f001 0307 	and.w	r3, r1, #7
 8004746:	4293      	cmp	r3, r2
 8004748:	d830      	bhi.n	80047ac <HAL_PCD_EP_SetStall+0x6c>
  if ((0x80U & ep_addr) == 0x80U)
 800474a:	060a      	lsls	r2, r1, #24
{
 800474c:	b510      	push	{r4, lr}
 800474e:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8004750:	d41b      	bmi.n	800478a <HAL_PCD_EP_SetStall+0x4a>
    ep->is_in = 0U;
 8004752:	eb01 0281 	add.w	r2, r1, r1, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 8004756:	2028      	movs	r0, #40	; 0x28
 8004758:	fb00 4101 	mla	r1, r0, r1, r4
    ep->is_in = 0U;
 800475c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 8004760:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8004764:	2000      	movs	r0, #0
 8004766:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 1U;
 800476a:	2201      	movs	r2, #1
 800476c:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800476e:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8004770:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8004774:	4293      	cmp	r3, r2
 8004776:	d017      	beq.n	80047a8 <HAL_PCD_EP_SetStall+0x68>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004778:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800477a:	f884 22a8 	strb.w	r2, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800477e:	f001 ff49 	bl	8006614 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 8004782:	2000      	movs	r0, #0
 8004784:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8004788:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800478a:	1c5a      	adds	r2, r3, #1
    ep->is_in = 1U;
 800478c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004790:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004794:	4611      	mov	r1, r2
    ep->is_in = 1U;
 8004796:	2001      	movs	r0, #1
 8004798:	7050      	strb	r0, [r2, #1]
  ep->is_stall = 1U;
 800479a:	2201      	movs	r2, #1
 800479c:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800479e:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80047a0:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d1e7      	bne.n	8004778 <HAL_PCD_EP_SetStall+0x38>
 80047a8:	2002      	movs	r0, #2
}
 80047aa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80047ac:	2001      	movs	r0, #1
}
 80047ae:	4770      	bx	lr

080047b0 <HAL_PCD_EP_ClrStall>:
{
 80047b0:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80047b2:	6843      	ldr	r3, [r0, #4]
 80047b4:	f001 020f 	and.w	r2, r1, #15
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d832      	bhi.n	8004822 <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 80047bc:	060a      	lsls	r2, r1, #24
 80047be:	4604      	mov	r4, r0
 80047c0:	f001 0307 	and.w	r3, r1, #7
 80047c4:	d41c      	bmi.n	8004800 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047c6:	2128      	movs	r1, #40	; 0x28
 80047c8:	fb01 0103 	mla	r1, r1, r3, r0
    ep->is_in = 0U;
 80047cc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80047d0:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047d4:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 80047d8:	2000      	movs	r0, #0
  ep->is_stall = 0U;
 80047da:	2500      	movs	r5, #0
    ep->is_in = 0U;
 80047dc:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 80047e0:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047e2:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80047e4:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d018      	beq.n	800481e <HAL_PCD_EP_ClrStall+0x6e>
 80047ec:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80047ee:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80047f0:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80047f4:	f001 ff36 	bl	8006664 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80047f8:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 80047fc:	4628      	mov	r0, r5
}
 80047fe:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004800:	1c5a      	adds	r2, r3, #1
    ep->is_in = 1U;
 8004802:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004806:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800480a:	4611      	mov	r1, r2
    ep->is_in = 1U;
 800480c:	2001      	movs	r0, #1
  ep->is_stall = 0U;
 800480e:	2500      	movs	r5, #0
    ep->is_in = 1U;
 8004810:	7050      	strb	r0, [r2, #1]
  ep->is_stall = 0U;
 8004812:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004814:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8004816:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800481a:	2b01      	cmp	r3, #1
 800481c:	d1e6      	bne.n	80047ec <HAL_PCD_EP_ClrStall+0x3c>
 800481e:	2002      	movs	r0, #2
}
 8004820:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004822:	2001      	movs	r0, #1
}
 8004824:	bd38      	pop	{r3, r4, r5, pc}
 8004826:	bf00      	nop

08004828 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004828:	f011 0f80 	tst.w	r1, #128	; 0x80
 800482c:	d00b      	beq.n	8004846 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800482e:	f001 0107 	and.w	r1, r1, #7
 8004832:	3101      	adds	r1, #1
 8004834:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004838:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800483c:	b95a      	cbnz	r2, 8004856 <HAL_PCDEx_PMAConfig+0x2e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800483e:	80cb      	strh	r3, [r1, #6]
 8004840:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8004842:	2000      	movs	r0, #0
 8004844:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8004846:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800484a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800484e:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
 8004852:	2a00      	cmp	r2, #0
 8004854:	d0f3      	beq.n	800483e <HAL_PCDEx_PMAConfig+0x16>
    ep->doublebuffer = 1U;
 8004856:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004858:	608b      	str	r3, [r1, #8]
 800485a:	730a      	strb	r2, [r1, #12]
}
 800485c:	2000      	movs	r0, #0
 800485e:	4770      	bx	lr

08004860 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8004860:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 8004862:	2100      	movs	r1, #0
{
 8004864:	b410      	push	{r4}
  hpcd->LPM_State = LPM_L0;
 8004866:	f880 12e0 	strb.w	r1, [r0, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800486a:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
  hpcd->lpm_active = 1U;
 800486e:	2401      	movs	r4, #1
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004870:	b29b      	uxth	r3, r3
 8004872:	4323      	orrs	r3, r4
  hpcd->lpm_active = 1U;
 8004874:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004878:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800487c:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8004880:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004884:	b29b      	uxth	r3, r3
 8004886:	f043 0302 	orr.w	r3, r3, #2
}
 800488a:	4608      	mov	r0, r1
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800488c:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
}
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop

08004894 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004894:	4a02      	ldr	r2, [pc, #8]	; (80048a0 <HAL_PWR_EnableBkUpAccess+0xc>)
 8004896:	6813      	ldr	r3, [r2, #0]
 8004898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800489c:	6013      	str	r3, [r2, #0]
}
 800489e:	4770      	bx	lr
 80048a0:	58000400 	.word	0x58000400

080048a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 80048a4:	4b02      	ldr	r3, [pc, #8]	; (80048b0 <HAL_PWREx_GetVoltageRange+0xc>)
 80048a6:	6818      	ldr	r0, [r3, #0]
}
 80048a8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	58000400 	.word	0x58000400

080048b4 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80048b4:	4a02      	ldr	r2, [pc, #8]	; (80048c0 <HAL_PWREx_EnableVddUSB+0xc>)
 80048b6:	6853      	ldr	r3, [r2, #4]
 80048b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048bc:	6053      	str	r3, [r2, #4]
}
 80048be:	4770      	bx	lr
 80048c0:	58000400 	.word	0x58000400

080048c4 <RCC_SetFlashLatencyFromMSIRange>:

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80048c4:	28b0      	cmp	r0, #176	; 0xb0
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80048c6:	4b31      	ldr	r3, [pc, #196]	; (800498c <RCC_SetFlashLatencyFromMSIRange+0xc8>)
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80048c8:	4a31      	ldr	r2, [pc, #196]	; (8004990 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80048ca:	bf98      	it	ls
 80048cc:	0900      	lsrls	r0, r0, #4
{
 80048ce:	b570      	push	{r4, r5, r6, lr}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80048d0:	bf8c      	ite	hi
 80048d2:	6adc      	ldrhi	r4, [r3, #44]	; 0x2c
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80048d4:	f853 4020 	ldrls.w	r4, [r3, r0, lsl #2]
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80048d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 80048dc:	b084      	sub	sp, #16
 80048de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80048e2:	f003 030f 	and.w	r3, r3, #15
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80048e6:	ae04      	add	r6, sp, #16
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80048e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ec:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80048f0:	f7ff ffd8 	bl	80048a4 <HAL_PWREx_GetVoltageRange>
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80048f4:	4b27      	ldr	r3, [pc, #156]	; (8004994 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80048f6:	4605      	mov	r5, r0
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80048f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048fa:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80048fe:	e906 000f 	stmdb	r6, {r0, r1, r2, r3}
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004902:	d029      	beq.n	8004958 <RCC_SetFlashLatencyFromMSIRange+0x94>
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004904:	4b24      	ldr	r3, [pc, #144]	; (8004998 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8004906:	429c      	cmp	r4, r3
 8004908:	d33a      	bcc.n	8004980 <RCC_SetFlashLatencyFromMSIRange+0xbc>
 800490a:	f503 03b7 	add.w	r3, r3, #5996544	; 0x5b8000
 800490e:	f603 537f 	addw	r3, r3, #3455	; 0xd7f
 8004912:	429c      	cmp	r4, r3
 8004914:	d936      	bls.n	8004984 <RCC_SetFlashLatencyFromMSIRange+0xc0>
 8004916:	f503 1374 	add.w	r3, r3, #3997696	; 0x3d0000
 800491a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491e:	429c      	cmp	r4, r3
 8004920:	d932      	bls.n	8004988 <RCC_SetFlashLatencyFromMSIRange+0xc4>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004922:	2600      	movs	r6, #0
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004924:	4c1d      	ldr	r4, [pc, #116]	; (800499c <RCC_SetFlashLatencyFromMSIRange+0xd8>)
 8004926:	6823      	ldr	r3, [r4, #0]
 8004928:	f023 0307 	bic.w	r3, r3, #7
 800492c:	4333      	orrs	r3, r6
 800492e:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004930:	f7fe fe24 	bl	800357c <HAL_GetTick>
 8004934:	4605      	mov	r5, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004936:	e004      	b.n	8004942 <RCC_SetFlashLatencyFromMSIRange+0x7e>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004938:	f7fe fe20 	bl	800357c <HAL_GetTick>
 800493c:	1b40      	subs	r0, r0, r5
 800493e:	2802      	cmp	r0, #2
 8004940:	d807      	bhi.n	8004952 <RCC_SetFlashLatencyFromMSIRange+0x8e>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	429e      	cmp	r6, r3
 800494a:	d1f5      	bne.n	8004938 <RCC_SetFlashLatencyFromMSIRange+0x74>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 800494c:	2000      	movs	r0, #0
}
 800494e:	b004      	add	sp, #16
 8004950:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 8004952:	2003      	movs	r0, #3
}
 8004954:	b004      	add	sp, #16
 8004956:	bd70      	pop	{r4, r5, r6, pc}
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004958:	4b11      	ldr	r3, [pc, #68]	; (80049a0 <RCC_SetFlashLatencyFromMSIRange+0xdc>)
 800495a:	429c      	cmp	r4, r3
 800495c:	d910      	bls.n	8004980 <RCC_SetFlashLatencyFromMSIRange+0xbc>
 800495e:	4b11      	ldr	r3, [pc, #68]	; (80049a4 <RCC_SetFlashLatencyFromMSIRange+0xe0>)
 8004960:	429c      	cmp	r4, r3
 8004962:	d90f      	bls.n	8004984 <RCC_SetFlashLatencyFromMSIRange+0xc0>
 8004964:	4b10      	ldr	r3, [pc, #64]	; (80049a8 <RCC_SetFlashLatencyFromMSIRange+0xe4>)
 8004966:	429c      	cmp	r4, r3
 8004968:	d90e      	bls.n	8004988 <RCC_SetFlashLatencyFromMSIRange+0xc4>
 800496a:	4b10      	ldr	r3, [pc, #64]	; (80049ac <RCC_SetFlashLatencyFromMSIRange+0xe8>)
 800496c:	429c      	cmp	r4, r3
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800496e:	bf38      	it	cc
 8004970:	2303      	movcc	r3, #3
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004972:	d2d6      	bcs.n	8004922 <RCC_SetFlashLatencyFromMSIRange+0x5e>
        latency = FLASH_LATENCY_RANGE[index];
 8004974:	aa04      	add	r2, sp, #16
 8004976:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800497a:	f853 6c10 	ldr.w	r6, [r3, #-16]
        break;
 800497e:	e7d1      	b.n	8004924 <RCC_SetFlashLatencyFromMSIRange+0x60>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004980:	2300      	movs	r3, #0
 8004982:	e7f7      	b.n	8004974 <RCC_SetFlashLatencyFromMSIRange+0xb0>
 8004984:	2301      	movs	r3, #1
 8004986:	e7f5      	b.n	8004974 <RCC_SetFlashLatencyFromMSIRange+0xb0>
 8004988:	2302      	movs	r3, #2
 800498a:	e7f3      	b.n	8004974 <RCC_SetFlashLatencyFromMSIRange+0xb0>
 800498c:	0800c860 	.word	0x0800c860
 8004990:	0800c820 	.word	0x0800c820
 8004994:	0800c758 	.word	0x0800c758
 8004998:	006acfc0 	.word	0x006acfc0
 800499c:	58004000 	.word	0x58004000
 80049a0:	0121eabf 	.word	0x0121eabf
 80049a4:	0234933f 	.word	0x0234933f
 80049a8:	03473bbf 	.word	0x03473bbf
 80049ac:	03dfd240 	.word	0x03dfd240

080049b0 <HAL_RCC_GetSysClockFreq.part.0>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80049b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
uint32_t HAL_RCC_GetSysClockFreq(void)
 80049b4:	b410      	push	{r4}
 80049b6:	68d3      	ldr	r3, [r2, #12]
 80049b8:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d01d      	beq.n	80049fc <HAL_RCC_GetSysClockFreq.part.0+0x4c>
 80049c0:	2b03      	cmp	r3, #3
 80049c2:	d11d      	bne.n	8004a00 <HAL_RCC_GetSysClockFreq.part.0+0x50>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80049c4:	6812      	ldr	r2, [r2, #0]
          pllinputfreq = HSE_VALUE / 2U;
 80049c6:	4b14      	ldr	r3, [pc, #80]	; (8004a18 <HAL_RCC_GetSysClockFreq.part.0+0x68>)
 80049c8:	4c14      	ldr	r4, [pc, #80]	; (8004a1c <HAL_RCC_GetSysClockFreq.part.0+0x6c>)
 80049ca:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 80049ce:	bf08      	it	eq
 80049d0:	461c      	moveq	r4, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80049d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049d6:	68cb      	ldr	r3, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80049d8:	68ca      	ldr	r2, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80049da:	68c8      	ldr	r0, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80049dc:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80049e0:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80049e4:	0f40      	lsrs	r0, r0, #29
 80049e6:	fb04 f303 	mul.w	r3, r4, r3
 80049ea:	3201      	adds	r2, #1
 80049ec:	3001      	adds	r0, #1
 80049ee:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80049f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049f6:	fbb3 f0f0 	udiv	r0, r3, r0
 80049fa:	4770      	bx	lr
    switch (pllsource)
 80049fc:	4c08      	ldr	r4, [pc, #32]	; (8004a20 <HAL_RCC_GetSysClockFreq.part.0+0x70>)
 80049fe:	e7e8      	b.n	80049d2 <HAL_RCC_GetSysClockFreq.part.0+0x22>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004a00:	6813      	ldr	r3, [r2, #0]
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004a02:	4a08      	ldr	r2, [pc, #32]	; (8004a24 <HAL_RCC_GetSysClockFreq.part.0+0x74>)
 8004a04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a08:	2bb0      	cmp	r3, #176	; 0xb0
 8004a0a:	bf28      	it	cs
 8004a0c:	23b0      	movcs	r3, #176	; 0xb0
 8004a0e:	091b      	lsrs	r3, r3, #4
 8004a10:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
        break;
 8004a14:	e7dd      	b.n	80049d2 <HAL_RCC_GetSysClockFreq.part.0+0x22>
 8004a16:	bf00      	nop
 8004a18:	007a1200 	.word	0x007a1200
 8004a1c:	003d0900 	.word	0x003d0900
 8004a20:	00f42400 	.word	0x00f42400
 8004a24:	0800c860 	.word	0x0800c860

08004a28 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8004a28:	2800      	cmp	r0, #0
 8004a2a:	f000 82bb 	beq.w	8004fa4 <HAL_RCC_OscConfig+0x57c>
{
 8004a2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a30:	6803      	ldr	r3, [r0, #0]
 8004a32:	069a      	lsls	r2, r3, #26
 8004a34:	4604      	mov	r4, r0
 8004a36:	d529      	bpl.n	8004a8c <HAL_RCC_OscConfig+0x64>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004a38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a3c:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004a3e:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004a40:	f013 030c 	ands.w	r3, r3, #12
 8004a44:	f000 80f9 	beq.w	8004c3a <HAL_RCC_OscConfig+0x212>
 8004a48:	2b0c      	cmp	r3, #12
 8004a4a:	f000 80f1 	beq.w	8004c30 <HAL_RCC_OscConfig+0x208>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a4e:	69e3      	ldr	r3, [r4, #28]
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004a50:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 8276 	beq.w	8004f46 <HAL_RCC_OscConfig+0x51e>
 8004a5a:	682b      	ldr	r3, [r5, #0]
 8004a5c:	f043 0301 	orr.w	r3, r3, #1
 8004a60:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004a62:	f7fe fd8b 	bl	800357c <HAL_GetTick>
 8004a66:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004a68:	682b      	ldr	r3, [r5, #0]
 8004a6a:	079b      	lsls	r3, r3, #30
 8004a6c:	f140 827c 	bpl.w	8004f68 <HAL_RCC_OscConfig+0x540>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004a70:	682b      	ldr	r3, [r5, #0]
 8004a72:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004a74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	602b      	str	r3, [r5, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004a7c:	686b      	ldr	r3, [r5, #4]
 8004a7e:	6a22      	ldr	r2, [r4, #32]
 8004a80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004a88:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	07dd      	lsls	r5, r3, #31
 8004a8e:	d527      	bpl.n	8004ae0 <HAL_RCC_OscConfig+0xb8>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004a90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a94:	688a      	ldr	r2, [r1, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004a96:	68c9      	ldr	r1, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004a98:	f002 020c 	and.w	r2, r2, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004a9c:	2a08      	cmp	r2, #8
 8004a9e:	f000 81f1 	beq.w	8004e84 <HAL_RCC_OscConfig+0x45c>
 8004aa2:	2a0c      	cmp	r2, #12
 8004aa4:	f000 81e9 	beq.w	8004e7a <HAL_RCC_OscConfig+0x452>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aa8:	6863      	ldr	r3, [r4, #4]
 8004aaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aae:	f000 8235 	beq.w	8004f1c <HAL_RCC_OscConfig+0x4f4>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004ab2:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8004ab6:	682a      	ldr	r2, [r5, #0]
 8004ab8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004abc:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f040 8232 	bne.w	8004f28 <HAL_RCC_OscConfig+0x500>
        tickstart = HAL_GetTick();
 8004ac4:	f7fe fd5a 	bl	800357c <HAL_GetTick>
 8004ac8:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004aca:	682b      	ldr	r3, [r5, #0]
 8004acc:	0399      	lsls	r1, r3, #14
 8004ace:	d506      	bpl.n	8004ade <HAL_RCC_OscConfig+0xb6>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ad0:	f7fe fd54 	bl	800357c <HAL_GetTick>
 8004ad4:	1b80      	subs	r0, r0, r6
 8004ad6:	2864      	cmp	r0, #100	; 0x64
 8004ad8:	d9f7      	bls.n	8004aca <HAL_RCC_OscConfig+0xa2>
            return HAL_TIMEOUT;
 8004ada:	2003      	movs	r0, #3
}
 8004adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	079a      	lsls	r2, r3, #30
 8004ae2:	d52c      	bpl.n	8004b3e <HAL_RCC_OscConfig+0x116>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004ae4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ae8:	688a      	ldr	r2, [r1, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004aea:	68c9      	ldr	r1, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004aec:	f002 020c 	and.w	r2, r2, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004af0:	2a04      	cmp	r2, #4
 8004af2:	f000 8120 	beq.w	8004d36 <HAL_RCC_OscConfig+0x30e>
 8004af6:	2a0c      	cmp	r2, #12
 8004af8:	f000 8118 	beq.w	8004d2c <HAL_RCC_OscConfig+0x304>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004afc:	68e3      	ldr	r3, [r4, #12]
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004afe:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8004b02:	b183      	cbz	r3, 8004b26 <HAL_RCC_OscConfig+0xfe>
 8004b04:	682b      	ldr	r3, [r5, #0]
 8004b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b0a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004b0c:	f7fe fd36 	bl	800357c <HAL_GetTick>
 8004b10:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004b12:	682b      	ldr	r3, [r5, #0]
 8004b14:	055b      	lsls	r3, r3, #21
 8004b16:	f100 8235 	bmi.w	8004f84 <HAL_RCC_OscConfig+0x55c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b1a:	f7fe fd2f 	bl	800357c <HAL_GetTick>
 8004b1e:	1b80      	subs	r0, r0, r6
 8004b20:	2802      	cmp	r0, #2
 8004b22:	d9f6      	bls.n	8004b12 <HAL_RCC_OscConfig+0xea>
 8004b24:	e7d9      	b.n	8004ada <HAL_RCC_OscConfig+0xb2>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004b26:	682b      	ldr	r3, [r5, #0]
 8004b28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b2c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004b2e:	f7fe fd25 	bl	800357c <HAL_GetTick>
 8004b32:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004b34:	682b      	ldr	r3, [r5, #0]
 8004b36:	055f      	lsls	r7, r3, #21
 8004b38:	f100 822d 	bmi.w	8004f96 <HAL_RCC_OscConfig+0x56e>
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004b3c:	6823      	ldr	r3, [r4, #0]
 8004b3e:	f013 0f18 	tst.w	r3, #24
 8004b42:	d023      	beq.n	8004b8c <HAL_RCC_OscConfig+0x164>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b44:	6962      	ldr	r2, [r4, #20]
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004b46:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8004b4a:	2a00      	cmp	r2, #0
 8004b4c:	f000 8100 	beq.w	8004d50 <HAL_RCC_OscConfig+0x328>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004b50:	f013 0f10 	tst.w	r3, #16
 8004b54:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004b58:	f000 8238 	beq.w	8004fcc <HAL_RCC_OscConfig+0x5a4>
 8004b5c:	0798      	lsls	r0, r3, #30
 8004b5e:	f100 81a5 	bmi.w	8004eac <HAL_RCC_OscConfig+0x484>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004b62:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004b66:	f043 0301 	orr.w	r3, r3, #1
 8004b6a:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
          tickstart = HAL_GetTick();
 8004b6e:	f7fe fd05 	bl	800357c <HAL_GetTick>
 8004b72:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004b74:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004b78:	0799      	lsls	r1, r3, #30
 8004b7a:	f100 8197 	bmi.w	8004eac <HAL_RCC_OscConfig+0x484>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004b7e:	f7fe fcfd 	bl	800357c <HAL_GetTick>
 8004b82:	1b80      	subs	r0, r0, r6
 8004b84:	2802      	cmp	r0, #2
 8004b86:	d9f5      	bls.n	8004b74 <HAL_RCC_OscConfig+0x14c>
 8004b88:	e7a7      	b.n	8004ada <HAL_RCC_OscConfig+0xb2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b8a:	6823      	ldr	r3, [r4, #0]
 8004b8c:	075a      	lsls	r2, r3, #29
 8004b8e:	d422      	bmi.n	8004bd6 <HAL_RCC_OscConfig+0x1ae>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b90:	065a      	lsls	r2, r3, #25
 8004b92:	d51b      	bpl.n	8004bcc <HAL_RCC_OscConfig+0x1a4>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004b96:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 80b2 	beq.w	8004d04 <HAL_RCC_OscConfig+0x2dc>
 8004ba0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004ba4:	f043 0301 	orr.w	r3, r3, #1
 8004ba8:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004bac:	f7fe fce6 	bl	800357c <HAL_GetTick>
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004bb0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004bb4:	079b      	lsls	r3, r3, #30
 8004bb6:	4606      	mov	r6, r0
 8004bb8:	d408      	bmi.n	8004bcc <HAL_RCC_OscConfig+0x1a4>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bba:	f7fe fcdf 	bl	800357c <HAL_GetTick>
 8004bbe:	1b80      	subs	r0, r0, r6
 8004bc0:	2802      	cmp	r0, #2
 8004bc2:	d88a      	bhi.n	8004ada <HAL_RCC_OscConfig+0xb2>
 8004bc4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004bc8:	079b      	lsls	r3, r3, #30
 8004bca:	d5f6      	bpl.n	8004bba <HAL_RCC_OscConfig+0x192>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004bcc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d176      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x298>
  return HAL_OK;
 8004bd2:	2000      	movs	r0, #0
}
 8004bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bd6:	4daf      	ldr	r5, [pc, #700]	; (8004e94 <HAL_RCC_OscConfig+0x46c>)
 8004bd8:	682b      	ldr	r3, [r5, #0]
 8004bda:	05db      	lsls	r3, r3, #23
 8004bdc:	f140 80dc 	bpl.w	8004d98 <HAL_RCC_OscConfig+0x370>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004be0:	68a3      	ldr	r3, [r4, #8]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	f000 8130 	beq.w	8004e48 <HAL_RCC_OscConfig+0x420>
 8004be8:	2b05      	cmp	r3, #5
 8004bea:	f000 821e 	beq.w	800502a <HAL_RCC_OscConfig+0x602>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004bee:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8004bf2:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8004bf6:	f022 0201 	bic.w	r2, r2, #1
 8004bfa:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004bfe:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8004c02:	f022 0204 	bic.w	r2, r2, #4
 8004c06:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f040 8124 	bne.w	8004e58 <HAL_RCC_OscConfig+0x430>
      tickstart = HAL_GetTick();
 8004c10:	f7fe fcb4 	bl	800357c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c14:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004c18:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004c1a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8004c1e:	0799      	lsls	r1, r3, #30
 8004c20:	f140 8135 	bpl.w	8004e8e <HAL_RCC_OscConfig+0x466>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c24:	f7fe fcaa 	bl	800357c <HAL_GetTick>
 8004c28:	1b80      	subs	r0, r0, r6
 8004c2a:	42b8      	cmp	r0, r7
 8004c2c:	d9f5      	bls.n	8004c1a <HAL_RCC_OscConfig+0x1f2>
 8004c2e:	e754      	b.n	8004ada <HAL_RCC_OscConfig+0xb2>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004c30:	f002 0203 	and.w	r2, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004c34:	2a01      	cmp	r2, #1
 8004c36:	f47f af0a 	bne.w	8004a4e <HAL_RCC_OscConfig+0x26>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004c3a:	69e3      	ldr	r3, [r4, #28]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d03d      	beq.n	8004cbc <HAL_RCC_OscConfig+0x294>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004c40:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004c44:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004c46:	682b      	ldr	r3, [r5, #0]
 8004c48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c4c:	2bb0      	cmp	r3, #176	; 0xb0
 8004c4e:	bf28      	it	cs
 8004c50:	23b0      	movcs	r3, #176	; 0xb0
 8004c52:	4298      	cmp	r0, r3
 8004c54:	f240 81a8 	bls.w	8004fa8 <HAL_RCC_OscConfig+0x580>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c58:	f7ff fe34 	bl	80048c4 <RCC_SetFlashLatencyFromMSIRange>
 8004c5c:	bb70      	cbnz	r0, 8004cbc <HAL_RCC_OscConfig+0x294>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004c5e:	682b      	ldr	r3, [r5, #0]
 8004c60:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004c62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c66:	4313      	orrs	r3, r2
 8004c68:	602b      	str	r3, [r5, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004c6a:	686b      	ldr	r3, [r5, #4]
 8004c6c:	6a22      	ldr	r2, [r4, #32]
 8004c6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004c76:	606b      	str	r3, [r5, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004c78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c7c:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004c7e:	f013 030c 	ands.w	r3, r3, #12
 8004c82:	f000 81c7 	beq.w	8005014 <HAL_RCC_OscConfig+0x5ec>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c86:	2b04      	cmp	r3, #4
 8004c88:	f000 821d 	beq.w	80050c6 <HAL_RCC_OscConfig+0x69e>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	f000 8212 	beq.w	80050b6 <HAL_RCC_OscConfig+0x68e>
 8004c92:	f7ff fe8d 	bl	80049b0 <HAL_RCC_GetSysClockFreq.part.0>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004c9a:	497f      	ldr	r1, [pc, #508]	; (8004e98 <HAL_RCC_OscConfig+0x470>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004c9e:	4a7f      	ldr	r2, [pc, #508]	; (8004e9c <HAL_RCC_OscConfig+0x474>)
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004ca0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004ca4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004ca8:	497d      	ldr	r1, [pc, #500]	; (8004ea0 <HAL_RCC_OscConfig+0x478>)
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004caa:	fbb0 f3f3 	udiv	r3, r0, r3
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004cae:	6808      	ldr	r0, [r1, #0]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004cb0:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004cb2:	f7fe fc19 	bl	80034e8 <HAL_InitTick>
 8004cb6:	2800      	cmp	r0, #0
 8004cb8:	f43f aee7 	beq.w	8004a8a <HAL_RCC_OscConfig+0x62>
          return HAL_ERROR;
 8004cbc:	2001      	movs	r0, #1
}
 8004cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004cc0:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	68aa      	ldr	r2, [r5, #8]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004cc8:	68e9      	ldr	r1, [r5, #12]
 8004cca:	f002 020c 	and.w	r2, r2, #12
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004cce:	d073      	beq.n	8004db8 <HAL_RCC_OscConfig+0x390>
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cd0:	2a0c      	cmp	r2, #12
 8004cd2:	d0f3      	beq.n	8004cbc <HAL_RCC_OscConfig+0x294>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004cd4:	682b      	ldr	r3, [r5, #0]
 8004cd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cda:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004cdc:	f7fe fc4e 	bl	800357c <HAL_GetTick>
 8004ce0:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ce2:	e005      	b.n	8004cf0 <HAL_RCC_OscConfig+0x2c8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ce4:	f7fe fc4a 	bl	800357c <HAL_GetTick>
 8004ce8:	1b00      	subs	r0, r0, r4
 8004cea:	2802      	cmp	r0, #2
 8004cec:	f63f aef5 	bhi.w	8004ada <HAL_RCC_OscConfig+0xb2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cf0:	682b      	ldr	r3, [r5, #0]
 8004cf2:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8004cf6:	d1f5      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x2bc>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004cf8:	68e9      	ldr	r1, [r5, #12]
 8004cfa:	4a6a      	ldr	r2, [pc, #424]	; (8004ea4 <HAL_RCC_OscConfig+0x47c>)
 8004cfc:	400a      	ands	r2, r1
  return HAL_OK;
 8004cfe:	4618      	mov	r0, r3
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004d00:	60ea      	str	r2, [r5, #12]
}
 8004d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004d04:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004d08:	f023 0301 	bic.w	r3, r3, #1
 8004d0c:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004d10:	f7fe fc34 	bl	800357c <HAL_GetTick>
 8004d14:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004d16:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004d1a:	079f      	lsls	r7, r3, #30
 8004d1c:	f57f af56 	bpl.w	8004bcc <HAL_RCC_OscConfig+0x1a4>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d20:	f7fe fc2c 	bl	800357c <HAL_GetTick>
 8004d24:	1b80      	subs	r0, r0, r6
 8004d26:	2802      	cmp	r0, #2
 8004d28:	d9f5      	bls.n	8004d16 <HAL_RCC_OscConfig+0x2ee>
 8004d2a:	e6d6      	b.n	8004ada <HAL_RCC_OscConfig+0xb2>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004d2c:	f001 0103 	and.w	r1, r1, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004d30:	2902      	cmp	r1, #2
 8004d32:	f47f aee3 	bne.w	8004afc <HAL_RCC_OscConfig+0xd4>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004d36:	68e2      	ldr	r2, [r4, #12]
 8004d38:	2a00      	cmp	r2, #0
 8004d3a:	d0bf      	beq.n	8004cbc <HAL_RCC_OscConfig+0x294>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004d3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d40:	6920      	ldr	r0, [r4, #16]
 8004d42:	684a      	ldr	r2, [r1, #4]
 8004d44:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 8004d48:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8004d4c:	604a      	str	r2, [r1, #4]
}
 8004d4e:	e6f6      	b.n	8004b3e <HAL_RCC_OscConfig+0x116>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004d50:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004d54:	f023 0304 	bic.w	r3, r3, #4
 8004d58:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004d5c:	f7fe fc0e 	bl	800357c <HAL_GetTick>
 8004d60:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004d62:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004d66:	0718      	lsls	r0, r3, #28
 8004d68:	f100 8105 	bmi.w	8004f76 <HAL_RCC_OscConfig+0x54e>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004d6c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004d70:	f023 0301 	bic.w	r3, r3, #1
 8004d74:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004d78:	f7fe fc00 	bl	800357c <HAL_GetTick>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004d7c:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8004d80:	4605      	mov	r5, r0
 8004d82:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8004d86:	0799      	lsls	r1, r3, #30
 8004d88:	f57f aeff 	bpl.w	8004b8a <HAL_RCC_OscConfig+0x162>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004d8c:	f7fe fbf6 	bl	800357c <HAL_GetTick>
 8004d90:	1b40      	subs	r0, r0, r5
 8004d92:	2802      	cmp	r0, #2
 8004d94:	d9f5      	bls.n	8004d82 <HAL_RCC_OscConfig+0x35a>
 8004d96:	e6a0      	b.n	8004ada <HAL_RCC_OscConfig+0xb2>
      HAL_PWR_EnableBkUpAccess();
 8004d98:	f7ff fd7c 	bl	8004894 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8004d9c:	f7fe fbee 	bl	800357c <HAL_GetTick>
 8004da0:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004da2:	e005      	b.n	8004db0 <HAL_RCC_OscConfig+0x388>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004da4:	f7fe fbea 	bl	800357c <HAL_GetTick>
 8004da8:	1b80      	subs	r0, r0, r6
 8004daa:	2802      	cmp	r0, #2
 8004dac:	f63f ae95 	bhi.w	8004ada <HAL_RCC_OscConfig+0xb2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004db0:	682b      	ldr	r3, [r5, #0]
 8004db2:	05df      	lsls	r7, r3, #23
 8004db4:	d5f6      	bpl.n	8004da4 <HAL_RCC_OscConfig+0x37c>
 8004db6:	e713      	b.n	8004be0 <HAL_RCC_OscConfig+0x1b8>
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004db8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004dba:	f001 0303 	and.w	r3, r1, #3
 8004dbe:	4283      	cmp	r3, r0
 8004dc0:	f000 8142 	beq.w	8005048 <HAL_RCC_OscConfig+0x620>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dc4:	2a0c      	cmp	r2, #12
 8004dc6:	f43f af79 	beq.w	8004cbc <HAL_RCC_OscConfig+0x294>
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004dca:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8004dce:	682b      	ldr	r3, [r5, #0]
 8004dd0:	015e      	lsls	r6, r3, #5
 8004dd2:	f53f af73 	bmi.w	8004cbc <HAL_RCC_OscConfig+0x294>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004dd6:	682b      	ldr	r3, [r5, #0]
 8004dd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ddc:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8004dde:	f7fe fbcd 	bl	800357c <HAL_GetTick>
 8004de2:	4606      	mov	r6, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004de4:	e005      	b.n	8004df2 <HAL_RCC_OscConfig+0x3ca>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de6:	f7fe fbc9 	bl	800357c <HAL_GetTick>
 8004dea:	1b80      	subs	r0, r0, r6
 8004dec:	2802      	cmp	r0, #2
 8004dee:	f63f ae74 	bhi.w	8004ada <HAL_RCC_OscConfig+0xb2>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004df2:	682b      	ldr	r3, [r5, #0]
 8004df4:	0198      	lsls	r0, r3, #6
 8004df6:	d4f6      	bmi.n	8004de6 <HAL_RCC_OscConfig+0x3be>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004df8:	e9d4 320c 	ldrd	r3, r2, [r4, #48]	; 0x30
 8004dfc:	68e9      	ldr	r1, [r5, #12]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	4a29      	ldr	r2, [pc, #164]	; (8004ea8 <HAL_RCC_OscConfig+0x480>)
 8004e02:	400a      	ands	r2, r1
 8004e04:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004e06:	4313      	orrs	r3, r2
 8004e08:	430b      	orrs	r3, r1
 8004e0a:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	; 0x40
 8004e0e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004e10:	4303      	orrs	r3, r0
 8004e12:	430b      	orrs	r3, r1
 8004e14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004e18:	60eb      	str	r3, [r5, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004e1a:	682b      	ldr	r3, [r5, #0]
 8004e1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e20:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e22:	68eb      	ldr	r3, [r5, #12]
 8004e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e28:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 8004e2a:	f7fe fba7 	bl	800357c <HAL_GetTick>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e2e:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
            tickstart = HAL_GetTick();
 8004e32:	4604      	mov	r4, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e34:	6833      	ldr	r3, [r6, #0]
 8004e36:	0199      	lsls	r1, r3, #6
 8004e38:	f53f aecb 	bmi.w	8004bd2 <HAL_RCC_OscConfig+0x1aa>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e3c:	f7fe fb9e 	bl	800357c <HAL_GetTick>
 8004e40:	1b00      	subs	r0, r0, r4
 8004e42:	2802      	cmp	r0, #2
 8004e44:	d9f6      	bls.n	8004e34 <HAL_RCC_OscConfig+0x40c>
 8004e46:	e648      	b.n	8004ada <HAL_RCC_OscConfig+0xb2>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004e48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e4c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004e50:	f043 0301 	orr.w	r3, r3, #1
 8004e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8004e58:	f7fe fb90 	bl	800357c <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004e5c:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8004e60:	4605      	mov	r5, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e62:	f241 3788 	movw	r7, #5000	; 0x1388
 8004e66:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8004e6a:	0798      	lsls	r0, r3, #30
 8004e6c:	d40f      	bmi.n	8004e8e <HAL_RCC_OscConfig+0x466>
 8004e6e:	f7fe fb85 	bl	800357c <HAL_GetTick>
 8004e72:	1b40      	subs	r0, r0, r5
 8004e74:	42b8      	cmp	r0, r7
 8004e76:	d9f6      	bls.n	8004e66 <HAL_RCC_OscConfig+0x43e>
 8004e78:	e62f      	b.n	8004ada <HAL_RCC_OscConfig+0xb2>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004e7a:	f001 0103 	and.w	r1, r1, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004e7e:	2903      	cmp	r1, #3
 8004e80:	f47f ae12 	bne.w	8004aa8 <HAL_RCC_OscConfig+0x80>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004e84:	6862      	ldr	r2, [r4, #4]
 8004e86:	2a00      	cmp	r2, #0
 8004e88:	f47f ae2a 	bne.w	8004ae0 <HAL_RCC_OscConfig+0xb8>
 8004e8c:	e716      	b.n	8004cbc <HAL_RCC_OscConfig+0x294>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	e67e      	b.n	8004b90 <HAL_RCC_OscConfig+0x168>
 8004e92:	bf00      	nop
 8004e94:	58000400 	.word	0x58000400
 8004e98:	0800c820 	.word	0x0800c820
 8004e9c:	20000008 	.word	0x20000008
 8004ea0:	20000010 	.word	0x20000010
 8004ea4:	eefefffc 	.word	0xeefefffc
 8004ea8:	11c1808c 	.word	0x11c1808c
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004eac:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8004eb0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004eb4:	f043 0304 	orr.w	r3, r3, #4
 8004eb8:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8004ebc:	f7fe fb5e 	bl	800357c <HAL_GetTick>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004ec0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004ec4:	071a      	lsls	r2, r3, #28
 8004ec6:	4606      	mov	r6, r0
 8004ec8:	d409      	bmi.n	8004ede <HAL_RCC_OscConfig+0x4b6>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004eca:	f7fe fb57 	bl	800357c <HAL_GetTick>
 8004ece:	1b80      	subs	r0, r0, r6
 8004ed0:	2803      	cmp	r0, #3
 8004ed2:	f63f ae02 	bhi.w	8004ada <HAL_RCC_OscConfig+0xb2>
 8004ed6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004eda:	071a      	lsls	r2, r3, #28
 8004edc:	d5f5      	bpl.n	8004eca <HAL_RCC_OscConfig+0x4a2>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004ede:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004ee2:	69a2      	ldr	r2, [r4, #24]
 8004ee4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ee8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004eec:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004ef0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004ef4:	f023 0301 	bic.w	r3, r3, #1
 8004ef8:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8004efc:	f7fe fb3e 	bl	800357c <HAL_GetTick>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004f00:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8004f04:	4605      	mov	r5, r0
 8004f06:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8004f0a:	079b      	lsls	r3, r3, #30
 8004f0c:	f57f ae3d 	bpl.w	8004b8a <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004f10:	f7fe fb34 	bl	800357c <HAL_GetTick>
 8004f14:	1b40      	subs	r0, r0, r5
 8004f16:	2802      	cmp	r0, #2
 8004f18:	d9f5      	bls.n	8004f06 <HAL_RCC_OscConfig+0x4de>
 8004f1a:	e5de      	b.n	8004ada <HAL_RCC_OscConfig+0xb2>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004f1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f20:	6813      	ldr	r3, [r2, #0]
 8004f22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f26:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004f28:	f7fe fb28 	bl	800357c <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004f2c:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8004f30:	4605      	mov	r5, r0
 8004f32:	6833      	ldr	r3, [r6, #0]
 8004f34:	0398      	lsls	r0, r3, #14
 8004f36:	f53f add2 	bmi.w	8004ade <HAL_RCC_OscConfig+0xb6>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f3a:	f7fe fb1f 	bl	800357c <HAL_GetTick>
 8004f3e:	1b40      	subs	r0, r0, r5
 8004f40:	2864      	cmp	r0, #100	; 0x64
 8004f42:	d9f6      	bls.n	8004f32 <HAL_RCC_OscConfig+0x50a>
 8004f44:	e5c9      	b.n	8004ada <HAL_RCC_OscConfig+0xb2>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004f46:	682b      	ldr	r3, [r5, #0]
 8004f48:	f023 0301 	bic.w	r3, r3, #1
 8004f4c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004f4e:	f7fe fb15 	bl	800357c <HAL_GetTick>
 8004f52:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004f54:	682b      	ldr	r3, [r5, #0]
 8004f56:	079f      	lsls	r7, r3, #30
 8004f58:	f57f ad97 	bpl.w	8004a8a <HAL_RCC_OscConfig+0x62>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f5c:	f7fe fb0e 	bl	800357c <HAL_GetTick>
 8004f60:	1b80      	subs	r0, r0, r6
 8004f62:	2802      	cmp	r0, #2
 8004f64:	d9f6      	bls.n	8004f54 <HAL_RCC_OscConfig+0x52c>
 8004f66:	e5b8      	b.n	8004ada <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f68:	f7fe fb08 	bl	800357c <HAL_GetTick>
 8004f6c:	1b80      	subs	r0, r0, r6
 8004f6e:	2802      	cmp	r0, #2
 8004f70:	f67f ad7a 	bls.w	8004a68 <HAL_RCC_OscConfig+0x40>
 8004f74:	e5b1      	b.n	8004ada <HAL_RCC_OscConfig+0xb2>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004f76:	f7fe fb01 	bl	800357c <HAL_GetTick>
 8004f7a:	1b80      	subs	r0, r0, r6
 8004f7c:	2803      	cmp	r0, #3
 8004f7e:	f67f aef0 	bls.w	8004d62 <HAL_RCC_OscConfig+0x33a>
 8004f82:	e5aa      	b.n	8004ada <HAL_RCC_OscConfig+0xb2>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004f84:	686b      	ldr	r3, [r5, #4]
 8004f86:	6922      	ldr	r2, [r4, #16]
 8004f88:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004f8c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004f90:	606b      	str	r3, [r5, #4]
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004f92:	6823      	ldr	r3, [r4, #0]
}
 8004f94:	e5d3      	b.n	8004b3e <HAL_RCC_OscConfig+0x116>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f96:	f7fe faf1 	bl	800357c <HAL_GetTick>
 8004f9a:	1b80      	subs	r0, r0, r6
 8004f9c:	2802      	cmp	r0, #2
 8004f9e:	f67f adc9 	bls.w	8004b34 <HAL_RCC_OscConfig+0x10c>
 8004fa2:	e59a      	b.n	8004ada <HAL_RCC_OscConfig+0xb2>
    return HAL_ERROR;
 8004fa4:	2001      	movs	r0, #1
}
 8004fa6:	4770      	bx	lr
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004fa8:	682b      	ldr	r3, [r5, #0]
 8004faa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fae:	4303      	orrs	r3, r0
 8004fb0:	602b      	str	r3, [r5, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004fb2:	686b      	ldr	r3, [r5, #4]
 8004fb4:	6a22      	ldr	r2, [r4, #32]
 8004fb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004fbe:	606b      	str	r3, [r5, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fc0:	f7ff fc80 	bl	80048c4 <RCC_SetFlashLatencyFromMSIRange>
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	f43f ae57 	beq.w	8004c78 <HAL_RCC_OscConfig+0x250>
 8004fca:	e677      	b.n	8004cbc <HAL_RCC_OscConfig+0x294>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004fcc:	f043 0301 	orr.w	r3, r3, #1
 8004fd0:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8004fd4:	f7fe fad2 	bl	800357c <HAL_GetTick>
 8004fd8:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004fda:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004fde:	079f      	lsls	r7, r3, #30
 8004fe0:	d405      	bmi.n	8004fee <HAL_RCC_OscConfig+0x5c6>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004fe2:	f7fe facb 	bl	800357c <HAL_GetTick>
 8004fe6:	1b80      	subs	r0, r0, r6
 8004fe8:	2802      	cmp	r0, #2
 8004fea:	d9f6      	bls.n	8004fda <HAL_RCC_OscConfig+0x5b2>
 8004fec:	e575      	b.n	8004ada <HAL_RCC_OscConfig+0xb2>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004fee:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004ff2:	f023 0304 	bic.w	r3, r3, #4
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004ff6:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004ffa:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004ffe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005002:	071d      	lsls	r5, r3, #28
 8005004:	f57f adc1 	bpl.w	8004b8a <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005008:	f7fe fab8 	bl	800357c <HAL_GetTick>
 800500c:	1b80      	subs	r0, r0, r6
 800500e:	2803      	cmp	r0, #3
 8005010:	d9f5      	bls.n	8004ffe <HAL_RCC_OscConfig+0x5d6>
 8005012:	e562      	b.n	8004ada <HAL_RCC_OscConfig+0xb2>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005014:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005016:	4a2d      	ldr	r2, [pc, #180]	; (80050cc <HAL_RCC_OscConfig+0x6a4>)
 8005018:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800501c:	2bb0      	cmp	r3, #176	; 0xb0
 800501e:	bf28      	it	cs
 8005020:	23b0      	movcs	r3, #176	; 0xb0
 8005022:	091b      	lsrs	r3, r3, #4
 8005024:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005028:	e635      	b.n	8004c96 <HAL_RCC_OscConfig+0x26e>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800502a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800502e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005032:	f042 0204 	orr.w	r2, r2, #4
 8005036:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800503a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800503e:	f042 0201 	orr.w	r2, r2, #1
 8005042:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005046:	e707      	b.n	8004e58 <HAL_RCC_OscConfig+0x430>
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005048:	6b60      	ldr	r0, [r4, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800504a:	f001 0370 	and.w	r3, r1, #112	; 0x70
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800504e:	4283      	cmp	r3, r0
 8005050:	f47f aeb8 	bne.w	8004dc4 <HAL_RCC_OscConfig+0x39c>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005054:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005056:	f3c1 2306 	ubfx	r3, r1, #8, #7
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800505a:	4283      	cmp	r3, r0
 800505c:	f47f aeb2 	bne.w	8004dc4 <HAL_RCC_OscConfig+0x39c>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005060:	6be0      	ldr	r0, [r4, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005062:	f401 1378 	and.w	r3, r1, #4063232	; 0x3e0000
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005066:	4283      	cmp	r3, r0
 8005068:	f47f aeac 	bne.w	8004dc4 <HAL_RCC_OscConfig+0x39c>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800506c:	6c20      	ldr	r0, [r4, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800506e:	f001 6360 	and.w	r3, r1, #234881024	; 0xe000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005072:	4283      	cmp	r3, r0
 8005074:	f47f aea6 	bne.w	8004dc4 <HAL_RCC_OscConfig+0x39c>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005078:	6c63      	ldr	r3, [r4, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800507a:	f001 4160 	and.w	r1, r1, #3758096384	; 0xe0000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800507e:	4299      	cmp	r1, r3
 8005080:	f47f aea0 	bne.w	8004dc4 <HAL_RCC_OscConfig+0x39c>
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005084:	682b      	ldr	r3, [r5, #0]
 8005086:	019a      	lsls	r2, r3, #6
 8005088:	f53f ada3 	bmi.w	8004bd2 <HAL_RCC_OscConfig+0x1aa>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800508c:	682b      	ldr	r3, [r5, #0]
 800508e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005092:	602b      	str	r3, [r5, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005094:	68eb      	ldr	r3, [r5, #12]
 8005096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800509a:	60eb      	str	r3, [r5, #12]
          tickstart = HAL_GetTick();
 800509c:	f7fe fa6e 	bl	800357c <HAL_GetTick>
 80050a0:	4604      	mov	r4, r0
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050a2:	682b      	ldr	r3, [r5, #0]
 80050a4:	019b      	lsls	r3, r3, #6
 80050a6:	f53f ad94 	bmi.w	8004bd2 <HAL_RCC_OscConfig+0x1aa>
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050aa:	f7fe fa67 	bl	800357c <HAL_GetTick>
 80050ae:	1b00      	subs	r0, r0, r4
 80050b0:	2802      	cmp	r0, #2
 80050b2:	d9f6      	bls.n	80050a2 <HAL_RCC_OscConfig+0x67a>
 80050b4:	e511      	b.n	8004ada <HAL_RCC_OscConfig+0xb2>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80050b6:	6812      	ldr	r2, [r2, #0]
      sysclockfreq = HSE_VALUE;
 80050b8:	4b05      	ldr	r3, [pc, #20]	; (80050d0 <HAL_RCC_OscConfig+0x6a8>)
 80050ba:	4806      	ldr	r0, [pc, #24]	; (80050d4 <HAL_RCC_OscConfig+0x6ac>)
 80050bc:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 80050c0:	bf18      	it	ne
 80050c2:	4618      	movne	r0, r3
 80050c4:	e5e7      	b.n	8004c96 <HAL_RCC_OscConfig+0x26e>
    sysclockfreq = HSI_VALUE;
 80050c6:	4804      	ldr	r0, [pc, #16]	; (80050d8 <HAL_RCC_OscConfig+0x6b0>)
 80050c8:	e5e5      	b.n	8004c96 <HAL_RCC_OscConfig+0x26e>
 80050ca:	bf00      	nop
 80050cc:	0800c860 	.word	0x0800c860
 80050d0:	003d0900 	.word	0x003d0900
 80050d4:	007a1200 	.word	0x007a1200
 80050d8:	00f42400 	.word	0x00f42400

080050dc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80050dc:	2800      	cmp	r0, #0
 80050de:	f000 8130 	beq.w	8005342 <HAL_RCC_ClockConfig+0x266>
{
 80050e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050e6:	4e9d      	ldr	r6, [pc, #628]	; (800535c <HAL_RCC_ClockConfig+0x280>)
 80050e8:	6833      	ldr	r3, [r6, #0]
 80050ea:	f003 0307 	and.w	r3, r3, #7
 80050ee:	428b      	cmp	r3, r1
 80050f0:	460c      	mov	r4, r1
 80050f2:	4605      	mov	r5, r0
 80050f4:	f0c0 80d9 	bcc.w	80052aa <HAL_RCC_ClockConfig+0x1ce>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	079a      	lsls	r2, r3, #30
 80050fc:	d472      	bmi.n	80051e4 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80050fe:	0698      	lsls	r0, r3, #26
 8005100:	f100 8082 	bmi.w	8005208 <HAL_RCC_ClockConfig+0x12c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005104:	065a      	lsls	r2, r3, #25
 8005106:	f100 8094 	bmi.w	8005232 <HAL_RCC_ClockConfig+0x156>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800510a:	0758      	lsls	r0, r3, #29
 800510c:	f100 80a7 	bmi.w	800525e <HAL_RCC_ClockConfig+0x182>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005110:	071a      	lsls	r2, r3, #28
 8005112:	f100 80b6 	bmi.w	8005282 <HAL_RCC_ClockConfig+0x1a6>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005116:	07df      	lsls	r7, r3, #31
 8005118:	d529      	bpl.n	800516e <HAL_RCC_ClockConfig+0x92>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800511a:	686b      	ldr	r3, [r5, #4]
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800511c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005120:	2b02      	cmp	r3, #2
 8005122:	6812      	ldr	r2, [r2, #0]
 8005124:	f000 8106 	beq.w	8005334 <HAL_RCC_ClockConfig+0x258>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005128:	2b03      	cmp	r3, #3
 800512a:	f000 80fd 	beq.w	8005328 <HAL_RCC_ClockConfig+0x24c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800512e:	2b00      	cmp	r3, #0
 8005130:	f040 8104 	bne.w	800533c <HAL_RCC_ClockConfig+0x260>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005134:	0791      	lsls	r1, r2, #30
 8005136:	f140 80fa 	bpl.w	800532e <HAL_RCC_ClockConfig+0x252>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800513a:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800513e:	f241 3888 	movw	r8, #5000	; 0x1388
 8005142:	68b2      	ldr	r2, [r6, #8]
 8005144:	f022 0203 	bic.w	r2, r2, #3
 8005148:	4313      	orrs	r3, r2
 800514a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800514c:	f7fe fa16 	bl	800357c <HAL_GetTick>
 8005150:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005152:	e005      	b.n	8005160 <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005154:	f7fe fa12 	bl	800357c <HAL_GetTick>
 8005158:	1bc0      	subs	r0, r0, r7
 800515a:	4540      	cmp	r0, r8
 800515c:	f200 80b8 	bhi.w	80052d0 <HAL_RCC_ClockConfig+0x1f4>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005160:	68b3      	ldr	r3, [r6, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005162:	686a      	ldr	r2, [r5, #4]
 8005164:	f003 030c 	and.w	r3, r3, #12
 8005168:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800516c:	d1f2      	bne.n	8005154 <HAL_RCC_ClockConfig+0x78>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800516e:	4d7b      	ldr	r5, [pc, #492]	; (800535c <HAL_RCC_ClockConfig+0x280>)
 8005170:	682b      	ldr	r3, [r5, #0]
 8005172:	f003 0307 	and.w	r3, r3, #7
 8005176:	42a3      	cmp	r3, r4
 8005178:	d913      	bls.n	80051a2 <HAL_RCC_ClockConfig+0xc6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800517a:	682b      	ldr	r3, [r5, #0]
 800517c:	f023 0307 	bic.w	r3, r3, #7
 8005180:	4323      	orrs	r3, r4
 8005182:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8005184:	f7fe f9fa 	bl	800357c <HAL_GetTick>
 8005188:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800518a:	e005      	b.n	8005198 <HAL_RCC_ClockConfig+0xbc>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800518c:	f7fe f9f6 	bl	800357c <HAL_GetTick>
 8005190:	1b80      	subs	r0, r0, r6
 8005192:	2802      	cmp	r0, #2
 8005194:	f200 809c 	bhi.w	80052d0 <HAL_RCC_ClockConfig+0x1f4>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005198:	682b      	ldr	r3, [r5, #0]
 800519a:	f003 0307 	and.w	r3, r3, #7
 800519e:	42a3      	cmp	r3, r4
 80051a0:	d1f4      	bne.n	800518c <HAL_RCC_ClockConfig+0xb0>
 80051a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051a6:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80051a8:	f013 030c 	ands.w	r3, r3, #12
 80051ac:	f000 80b1 	beq.w	8005312 <HAL_RCC_ClockConfig+0x236>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051b0:	2b04      	cmp	r3, #4
 80051b2:	f000 80d0 	beq.w	8005356 <HAL_RCC_ClockConfig+0x27a>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051b6:	2b08      	cmp	r3, #8
 80051b8:	f000 80c5 	beq.w	8005346 <HAL_RCC_ClockConfig+0x26a>
 80051bc:	f7ff fbf8 	bl	80049b0 <HAL_RCC_GetSysClockFreq.part.0>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80051c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80051c4:	4a66      	ldr	r2, [pc, #408]	; (8005360 <HAL_RCC_ClockConfig+0x284>)
 80051c6:	689b      	ldr	r3, [r3, #8]
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80051c8:	4966      	ldr	r1, [pc, #408]	; (8005364 <HAL_RCC_ClockConfig+0x288>)
 80051ca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80051ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80051d2:	fbb0 f0f3 	udiv	r0, r0, r3
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80051d6:	6010      	str	r0, [r2, #0]
  return HAL_InitTick(HAL_GetTickPrio());
 80051d8:	f7fe f9d6 	bl	8003588 <HAL_GetTickPrio>
}
 80051dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(HAL_GetTickPrio());
 80051e0:	f7fe b982 	b.w	80034e8 <HAL_InitTick>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80051e4:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80051e8:	68aa      	ldr	r2, [r5, #8]
 80051ea:	68b3      	ldr	r3, [r6, #8]
 80051ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051f0:	4313      	orrs	r3, r2
 80051f2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80051f4:	f7fe f9c2 	bl	800357c <HAL_GetTick>
 80051f8:	4607      	mov	r7, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80051fa:	68b3      	ldr	r3, [r6, #8]
 80051fc:	03db      	lsls	r3, r3, #15
 80051fe:	d56a      	bpl.n	80052d6 <HAL_RCC_ClockConfig+0x1fa>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005200:	682b      	ldr	r3, [r5, #0]
 8005202:	0698      	lsls	r0, r3, #26
 8005204:	f57f af7e 	bpl.w	8005104 <HAL_RCC_ClockConfig+0x28>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005208:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800520c:	696a      	ldr	r2, [r5, #20]
 800520e:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8005212:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 800521c:	f7fe f9ae 	bl	800357c <HAL_GetTick>
 8005220:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005222:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8005226:	0399      	lsls	r1, r3, #14
 8005228:	d55b      	bpl.n	80052e2 <HAL_RCC_ClockConfig+0x206>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800522a:	682b      	ldr	r3, [r5, #0]
 800522c:	065a      	lsls	r2, r3, #25
 800522e:	f57f af6c 	bpl.w	800510a <HAL_RCC_ClockConfig+0x2e>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005232:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8005236:	69aa      	ldr	r2, [r5, #24]
 8005238:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 800523c:	f023 030f 	bic.w	r3, r3, #15
 8005240:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8005244:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 8005248:	f7fe f998 	bl	800357c <HAL_GetTick>
 800524c:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800524e:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8005252:	03db      	lsls	r3, r3, #15
 8005254:	d54b      	bpl.n	80052ee <HAL_RCC_ClockConfig+0x212>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005256:	682b      	ldr	r3, [r5, #0]
 8005258:	0758      	lsls	r0, r3, #29
 800525a:	f57f af59 	bpl.w	8005110 <HAL_RCC_ClockConfig+0x34>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800525e:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8005262:	68ea      	ldr	r2, [r5, #12]
 8005264:	68b3      	ldr	r3, [r6, #8]
 8005266:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800526a:	4313      	orrs	r3, r2
 800526c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800526e:	f7fe f985 	bl	800357c <HAL_GetTick>
 8005272:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005274:	68b3      	ldr	r3, [r6, #8]
 8005276:	0399      	lsls	r1, r3, #14
 8005278:	d53f      	bpl.n	80052fa <HAL_RCC_ClockConfig+0x21e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800527a:	682b      	ldr	r3, [r5, #0]
 800527c:	071a      	lsls	r2, r3, #28
 800527e:	f57f af4a 	bpl.w	8005116 <HAL_RCC_ClockConfig+0x3a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005282:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005286:	692a      	ldr	r2, [r5, #16]
 8005288:	68b3      	ldr	r3, [r6, #8]
 800528a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800528e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005292:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8005294:	f7fe f972 	bl	800357c <HAL_GetTick>
 8005298:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800529a:	68b3      	ldr	r3, [r6, #8]
 800529c:	035b      	lsls	r3, r3, #13
 800529e:	d532      	bpl.n	8005306 <HAL_RCC_ClockConfig+0x22a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052a0:	682b      	ldr	r3, [r5, #0]
 80052a2:	07df      	lsls	r7, r3, #31
 80052a4:	f53f af39 	bmi.w	800511a <HAL_RCC_ClockConfig+0x3e>
 80052a8:	e761      	b.n	800516e <HAL_RCC_ClockConfig+0x92>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052aa:	6833      	ldr	r3, [r6, #0]
 80052ac:	f023 0307 	bic.w	r3, r3, #7
 80052b0:	430b      	orrs	r3, r1
 80052b2:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80052b4:	f7fe f962 	bl	800357c <HAL_GetTick>
 80052b8:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ba:	6833      	ldr	r3, [r6, #0]
 80052bc:	f003 0307 	and.w	r3, r3, #7
 80052c0:	42a3      	cmp	r3, r4
 80052c2:	f43f af19 	beq.w	80050f8 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80052c6:	f7fe f959 	bl	800357c <HAL_GetTick>
 80052ca:	1bc3      	subs	r3, r0, r7
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d9f4      	bls.n	80052ba <HAL_RCC_ClockConfig+0x1de>
        return HAL_TIMEOUT;
 80052d0:	2003      	movs	r0, #3
}
 80052d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80052d6:	f7fe f951 	bl	800357c <HAL_GetTick>
 80052da:	1bc0      	subs	r0, r0, r7
 80052dc:	2802      	cmp	r0, #2
 80052de:	d98c      	bls.n	80051fa <HAL_RCC_ClockConfig+0x11e>
 80052e0:	e7f6      	b.n	80052d0 <HAL_RCC_ClockConfig+0x1f4>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80052e2:	f7fe f94b 	bl	800357c <HAL_GetTick>
 80052e6:	1bc0      	subs	r0, r0, r7
 80052e8:	2802      	cmp	r0, #2
 80052ea:	d99a      	bls.n	8005222 <HAL_RCC_ClockConfig+0x146>
 80052ec:	e7f0      	b.n	80052d0 <HAL_RCC_ClockConfig+0x1f4>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80052ee:	f7fe f945 	bl	800357c <HAL_GetTick>
 80052f2:	1bc0      	subs	r0, r0, r7
 80052f4:	2802      	cmp	r0, #2
 80052f6:	d9aa      	bls.n	800524e <HAL_RCC_ClockConfig+0x172>
 80052f8:	e7ea      	b.n	80052d0 <HAL_RCC_ClockConfig+0x1f4>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80052fa:	f7fe f93f 	bl	800357c <HAL_GetTick>
 80052fe:	1bc0      	subs	r0, r0, r7
 8005300:	2802      	cmp	r0, #2
 8005302:	d9b7      	bls.n	8005274 <HAL_RCC_ClockConfig+0x198>
 8005304:	e7e4      	b.n	80052d0 <HAL_RCC_ClockConfig+0x1f4>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005306:	f7fe f939 	bl	800357c <HAL_GetTick>
 800530a:	1bc0      	subs	r0, r0, r7
 800530c:	2802      	cmp	r0, #2
 800530e:	d9c4      	bls.n	800529a <HAL_RCC_ClockConfig+0x1be>
 8005310:	e7de      	b.n	80052d0 <HAL_RCC_ClockConfig+0x1f4>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005312:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005314:	4a14      	ldr	r2, [pc, #80]	; (8005368 <HAL_RCC_ClockConfig+0x28c>)
 8005316:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800531a:	2bb0      	cmp	r3, #176	; 0xb0
 800531c:	bf28      	it	cs
 800531e:	23b0      	movcs	r3, #176	; 0xb0
 8005320:	091b      	lsrs	r3, r3, #4
 8005322:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005326:	e74b      	b.n	80051c0 <HAL_RCC_ClockConfig+0xe4>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005328:	0190      	lsls	r0, r2, #6
 800532a:	f53f af06 	bmi.w	800513a <HAL_RCC_ClockConfig+0x5e>
    return HAL_ERROR;
 800532e:	2001      	movs	r0, #1
}
 8005330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005334:	0396      	lsls	r6, r2, #14
 8005336:	f53f af00 	bmi.w	800513a <HAL_RCC_ClockConfig+0x5e>
 800533a:	e7f8      	b.n	800532e <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800533c:	0552      	lsls	r2, r2, #21
 800533e:	d5f6      	bpl.n	800532e <HAL_RCC_ClockConfig+0x252>
 8005340:	e6fb      	b.n	800513a <HAL_RCC_ClockConfig+0x5e>
    return HAL_ERROR;
 8005342:	2001      	movs	r0, #1
}
 8005344:	4770      	bx	lr
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005346:	6812      	ldr	r2, [r2, #0]
      sysclockfreq = HSE_VALUE;
 8005348:	4b08      	ldr	r3, [pc, #32]	; (800536c <HAL_RCC_ClockConfig+0x290>)
 800534a:	4809      	ldr	r0, [pc, #36]	; (8005370 <HAL_RCC_ClockConfig+0x294>)
 800534c:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8005350:	bf08      	it	eq
 8005352:	4618      	moveq	r0, r3
 8005354:	e734      	b.n	80051c0 <HAL_RCC_ClockConfig+0xe4>
    sysclockfreq = HSI_VALUE;
 8005356:	4807      	ldr	r0, [pc, #28]	; (8005374 <HAL_RCC_ClockConfig+0x298>)
 8005358:	e732      	b.n	80051c0 <HAL_RCC_ClockConfig+0xe4>
 800535a:	bf00      	nop
 800535c:	58004000 	.word	0x58004000
 8005360:	20000008 	.word	0x20000008
 8005364:	0800c820 	.word	0x0800c820
 8005368:	0800c860 	.word	0x0800c860
 800536c:	007a1200 	.word	0x007a1200
 8005370:	003d0900 	.word	0x003d0900
 8005374:	00f42400 	.word	0x00f42400

08005378 <HAL_RCC_GetHCLKFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005378:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
{
 800537c:	b508      	push	{r3, lr}
 800537e:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005380:	f013 030c 	ands.w	r3, r3, #12
 8005384:	d114      	bne.n	80053b0 <HAL_RCC_GetHCLKFreq+0x38>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005386:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005388:	4a12      	ldr	r2, [pc, #72]	; (80053d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800538a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800538e:	2bb0      	cmp	r3, #176	; 0xb0
 8005390:	bf28      	it	cs
 8005392:	23b0      	movcs	r3, #176	; 0xb0
 8005394:	091b      	lsrs	r3, r3, #4
 8005396:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800539a:	4a0f      	ldr	r2, [pc, #60]	; (80053d8 <HAL_RCC_GetHCLKFreq+0x60>)
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800539c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80053a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80053aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80053ae:	bd08      	pop	{r3, pc}
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053b0:	2b04      	cmp	r3, #4
 80053b2:	d004      	beq.n	80053be <HAL_RCC_GetHCLKFreq+0x46>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80053b4:	2b08      	cmp	r3, #8
 80053b6:	d004      	beq.n	80053c2 <HAL_RCC_GetHCLKFreq+0x4a>
 80053b8:	f7ff fafa 	bl	80049b0 <HAL_RCC_GetSysClockFreq.part.0>
 80053bc:	e7ed      	b.n	800539a <HAL_RCC_GetHCLKFreq+0x22>
    sysclockfreq = HSI_VALUE;
 80053be:	4807      	ldr	r0, [pc, #28]	; (80053dc <HAL_RCC_GetHCLKFreq+0x64>)
 80053c0:	e7eb      	b.n	800539a <HAL_RCC_GetHCLKFreq+0x22>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80053c2:	6812      	ldr	r2, [r2, #0]
      sysclockfreq = HSE_VALUE;
 80053c4:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <HAL_RCC_GetHCLKFreq+0x68>)
 80053c6:	4807      	ldr	r0, [pc, #28]	; (80053e4 <HAL_RCC_GetHCLKFreq+0x6c>)
 80053c8:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 80053cc:	bf08      	it	eq
 80053ce:	4618      	moveq	r0, r3
 80053d0:	e7e3      	b.n	800539a <HAL_RCC_GetHCLKFreq+0x22>
 80053d2:	bf00      	nop
 80053d4:	0800c860 	.word	0x0800c860
 80053d8:	0800c820 	.word	0x0800c820
 80053dc:	00f42400 	.word	0x00f42400
 80053e0:	007a1200 	.word	0x007a1200
 80053e4:	003d0900 	.word	0x003d0900

080053e8 <HAL_RCCEx_PeriphCLKConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80053e8:	6803      	ldr	r3, [r0, #0]
{
 80053ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80053ee:	f013 0540 	ands.w	r5, r3, #64	; 0x40
{
 80053f2:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80053f4:	d040      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80053f6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80053f8:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80053fc:	f000 8134 	beq.w	8005668 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8005400:	f200 8119 	bhi.w	8005636 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8005404:	2a00      	cmp	r2, #0
 8005406:	f040 811c 	bne.w	8005642 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800540a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800540e:	682b      	ldr	r3, [r5, #0]
 8005410:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005414:	602b      	str	r3, [r5, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005416:	f7fe f8b1 	bl	800357c <HAL_GetTick>
 800541a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800541c:	682b      	ldr	r3, [r5, #0]
 800541e:	011f      	lsls	r7, r3, #4
 8005420:	f100 8131 	bmi.w	8005686 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005424:	692b      	ldr	r3, [r5, #16]
 8005426:	6862      	ldr	r2, [r4, #4]
 8005428:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800542c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005430:	612b      	str	r3, [r5, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005432:	692b      	ldr	r3, [r5, #16]
 8005434:	68a2      	ldr	r2, [r4, #8]
 8005436:	f423 1378 	bic.w	r3, r3, #4063232	; 0x3e0000
 800543a:	4313      	orrs	r3, r2
 800543c:	612b      	str	r3, [r5, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800543e:	682b      	ldr	r3, [r5, #0]
 8005440:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005444:	602b      	str	r3, [r5, #0]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005446:	f7fe f899 	bl	800357c <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800544a:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800544e:	4605      	mov	r5, r0
 8005450:	6833      	ldr	r3, [r6, #0]
 8005452:	0118      	lsls	r0, r3, #4
 8005454:	f140 81b0 	bpl.w	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005458:	6962      	ldr	r2, [r4, #20]
 800545a:	6933      	ldr	r3, [r6, #16]
 800545c:	4313      	orrs	r3, r2
 800545e:	6133      	str	r3, [r6, #16]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005460:	6b22      	ldr	r2, [r4, #48]	; 0x30
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005462:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005464:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
}
 8005468:	2500      	movs	r5, #0
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800546a:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 800546e:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 8005472:	430a      	orrs	r2, r1
 8005474:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 8005478:	0519      	lsls	r1, r3, #20
 800547a:	d509      	bpl.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800547c:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005480:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005482:	f8d7 6090 	ldr.w	r6, [r7, #144]	; 0x90
 8005486:	f406 7640 	and.w	r6, r6, #768	; 0x300
 800548a:	42b2      	cmp	r2, r6
 800548c:	f040 80b4 	bne.w	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x210>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005490:	07d8      	lsls	r0, r3, #31
 8005492:	d509      	bpl.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005494:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005498:	69a0      	ldr	r0, [r4, #24]
 800549a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800549e:	f022 0203 	bic.w	r2, r2, #3
 80054a2:	4302      	orrs	r2, r0
 80054a4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054a8:	0799      	lsls	r1, r3, #30
 80054aa:	d509      	bpl.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80054ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054b0:	69e0      	ldr	r0, [r4, #28]
 80054b2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80054b6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80054ba:	4302      	orrs	r2, r0
 80054bc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80054c0:	06da      	lsls	r2, r3, #27
 80054c2:	d50c      	bpl.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xf6>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054c4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80054c6:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80054ca:	0c31      	lsrs	r1, r6, #16
 80054cc:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80054d0:	0409      	lsls	r1, r1, #16
 80054d2:	ea22 0201 	bic.w	r2, r2, r1
 80054d6:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80054da:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054de:	069f      	lsls	r7, r3, #26
 80054e0:	d50c      	bpl.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x114>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054e4:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80054e8:	0c31      	lsrs	r1, r6, #16
 80054ea:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80054ee:	0409      	lsls	r1, r1, #16
 80054f0:	ea22 0201 	bic.w	r2, r2, r1
 80054f4:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80054f8:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054fc:	075e      	lsls	r6, r3, #29
 80054fe:	d50f      	bpl.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x138>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005500:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005502:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8005506:	0911      	lsrs	r1, r2, #4
 8005508:	f401 207f 	and.w	r0, r1, #1044480	; 0xff000
 800550c:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
 8005510:	0112      	lsls	r2, r2, #4
 8005512:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 8005516:	ea21 0100 	bic.w	r1, r1, r0
 800551a:	430a      	orrs	r2, r1
 800551c:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005520:	0718      	lsls	r0, r3, #28
 8005522:	d50f      	bpl.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005524:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005526:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800552a:	0911      	lsrs	r1, r2, #4
 800552c:	f401 207f 	and.w	r0, r1, #1044480	; 0xff000
 8005530:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
 8005534:	0112      	lsls	r2, r2, #4
 8005536:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 800553a:	ea21 0100 	bic.w	r1, r1, r0
 800553e:	430a      	orrs	r2, r1
 8005540:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005544:	05d9      	lsls	r1, r3, #23
 8005546:	d510      	bpl.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x182>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005548:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800554c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800554e:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 8005552:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005556:	430a      	orrs	r2, r1
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005558:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 800555c:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
 8005560:	d07d      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x276>
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005562:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8005566:	f000 80d2 	beq.w	800570e <HAL_RCCEx_PeriphCLKConfig+0x326>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800556a:	059f      	lsls	r7, r3, #22
 800556c:	d513      	bpl.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800556e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005570:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005574:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8005578:	d003      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x19a>
 800557a:	f031 4280 	bics.w	r2, r1, #1073741824	; 0x40000000
 800557e:	f040 808b 	bne.w	8005698 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005582:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005586:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800558a:	430a      	orrs	r2, r1
 800558c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005590:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
 8005594:	d057      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005596:	055e      	lsls	r6, r3, #21
 8005598:	d50f      	bpl.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800559a:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800559e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80055a0:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 80055a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80055a8:	430a      	orrs	r2, r1
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80055aa:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80055ae:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
 80055b2:	d04f      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055b4:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80055b8:	d07e      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80055ba:	04da      	lsls	r2, r3, #19
 80055bc:	d509      	bpl.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80055be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055c2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80055c4:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 80055c8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80055cc:	4302      	orrs	r2, r0
 80055ce:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80055d2:	049b      	lsls	r3, r3, #18
 80055d4:	d50d      	bpl.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80055d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055da:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80055dc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80055de:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80055e2:	430b      	orrs	r3, r1
 80055e4:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80055e6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80055e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80055ea:	f023 0303 	bic.w	r3, r3, #3
 80055ee:	430b      	orrs	r3, r1
 80055f0:	6253      	str	r3, [r2, #36]	; 0x24
}
 80055f2:	4628      	mov	r0, r5
 80055f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      HAL_PWR_EnableBkUpAccess();
 80055f8:	f7ff f94c 	bl	8004894 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80055fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005600:	2e00      	cmp	r6, #0
 8005602:	d038      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005604:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8005608:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800560c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005610:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8005614:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005618:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800561c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800561e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005622:	4313      	orrs	r3, r2
        LL_RCC_WriteReg(BDCR, bdcr);
 8005624:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005628:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800562c:	07da      	lsls	r2, r3, #31
 800562e:	f100 80b1 	bmi.w	8005794 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005632:	6823      	ldr	r3, [r4, #0]
 8005634:	e72c      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    switch (PeriphClkInit->Sai1ClockSelection)
 8005636:	f422 0180 	bic.w	r1, r2, #4194304	; 0x400000
 800563a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800563e:	f43f af11 	beq.w	8005464 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005642:	2501      	movs	r5, #1
 8005644:	e718      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x90>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005646:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800564a:	68ca      	ldr	r2, [r1, #12]
 800564c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005650:	60ca      	str	r2, [r1, #12]
 8005652:	e7a0      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005654:	68f2      	ldr	r2, [r6, #12]
 8005656:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800565a:	60f2      	str	r2, [r6, #12]
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800565c:	e7ad      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800565e:	68f2      	ldr	r2, [r6, #12]
 8005660:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005664:	60f2      	str	r2, [r6, #12]
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005666:	e780      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x182>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005668:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800566c:	68c1      	ldr	r1, [r0, #12]
 800566e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8005672:	60c1      	str	r1, [r0, #12]
    if (ret == HAL_OK)
 8005674:	e6f6      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005676:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800567c:	4313      	orrs	r3, r2
 800567e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005682:	6823      	ldr	r3, [r4, #0]
}
 8005684:	e704      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005686:	f7fd ff79 	bl	800357c <HAL_GetTick>
 800568a:	1b80      	subs	r0, r0, r6
 800568c:	2802      	cmp	r0, #2
 800568e:	f67f aec5 	bls.w	800541c <HAL_RCCEx_PeriphCLKConfig+0x34>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005692:	6823      	ldr	r3, [r4, #0]
 8005694:	2503      	movs	r5, #3
 8005696:	e6ef      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x90>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005698:	f8d0 6088 	ldr.w	r6, [r0, #136]	; 0x88
 800569c:	f026 4640 	bic.w	r6, r6, #3221225472	; 0xc0000000
 80056a0:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80056a4:	f8d0 6088 	ldr.w	r6, [r0, #136]	; 0x88
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056a8:	f021 5280 	bic.w	r2, r1, #268435456	; 0x10000000
 80056ac:	f026 6640 	bic.w	r6, r6, #201326592	; 0xc000000
 80056b0:	4332      	orrs	r2, r6
 80056b2:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
}
 80056b6:	e76b      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80056b8:	6833      	ldr	r3, [r6, #0]
 80056ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056be:	6033      	str	r3, [r6, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80056c0:	f7fd ff5c 	bl	800357c <HAL_GetTick>
 80056c4:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80056c6:	6833      	ldr	r3, [r6, #0]
 80056c8:	0118      	lsls	r0, r3, #4
 80056ca:	d451      	bmi.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x388>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80056cc:	6933      	ldr	r3, [r6, #16]
 80056ce:	6862      	ldr	r2, [r4, #4]
 80056d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80056d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80056d8:	6133      	str	r3, [r6, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80056da:	6933      	ldr	r3, [r6, #16]
 80056dc:	6922      	ldr	r2, [r4, #16]
 80056de:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80056e2:	4313      	orrs	r3, r2
 80056e4:	6133      	str	r3, [r6, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80056e6:	6833      	ldr	r3, [r6, #0]
 80056e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056ec:	6033      	str	r3, [r6, #0]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056ee:	f7fd ff45 	bl	800357c <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80056f2:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80056f6:	4606      	mov	r6, r0
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	0119      	lsls	r1, r3, #4
 80056fc:	d444      	bmi.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x3a0>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056fe:	f7fd ff3d 	bl	800357c <HAL_GetTick>
 8005702:	1b80      	subs	r0, r0, r6
 8005704:	2802      	cmp	r0, #2
 8005706:	d9f7      	bls.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005708:	6823      	ldr	r3, [r4, #0]
 800570a:	2503      	movs	r5, #3
 800570c:	e755      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800570e:	6833      	ldr	r3, [r6, #0]
 8005710:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005714:	6033      	str	r3, [r6, #0]
  tickstart = HAL_GetTick();
 8005716:	f7fd ff31 	bl	800357c <HAL_GetTick>
 800571a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800571c:	6833      	ldr	r3, [r6, #0]
 800571e:	011a      	lsls	r2, r3, #4
 8005720:	d420      	bmi.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x37c>
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005722:	6933      	ldr	r3, [r6, #16]
 8005724:	6862      	ldr	r2, [r4, #4]
 8005726:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800572a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800572e:	6133      	str	r3, [r6, #16]
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005730:	6933      	ldr	r3, [r6, #16]
 8005732:	68e2      	ldr	r2, [r4, #12]
 8005734:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8005738:	4313      	orrs	r3, r2
 800573a:	6133      	str	r3, [r6, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800573c:	6833      	ldr	r3, [r6, #0]
 800573e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005742:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005744:	f7fd ff1a 	bl	800357c <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005748:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 800574c:	4606      	mov	r6, r0
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	011b      	lsls	r3, r3, #4
 8005752:	d413      	bmi.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x394>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005754:	f7fd ff12 	bl	800357c <HAL_GetTick>
 8005758:	1b80      	subs	r0, r0, r6
 800575a:	2802      	cmp	r0, #2
 800575c:	d9f7      	bls.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x366>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800575e:	6823      	ldr	r3, [r4, #0]
 8005760:	2503      	movs	r5, #3
 8005762:	e702      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x182>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005764:	f7fd ff0a 	bl	800357c <HAL_GetTick>
 8005768:	1bc0      	subs	r0, r0, r7
 800576a:	2802      	cmp	r0, #2
 800576c:	d9d6      	bls.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x334>
 800576e:	e7f6      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x376>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005770:	f7fd ff04 	bl	800357c <HAL_GetTick>
 8005774:	1bc0      	subs	r0, r0, r7
 8005776:	2802      	cmp	r0, #2
 8005778:	d9a5      	bls.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800577a:	e7c5      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x320>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	6962      	ldr	r2, [r4, #20]
 8005780:	4313      	orrs	r3, r2
 8005782:	613b      	str	r3, [r7, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005784:	6823      	ldr	r3, [r4, #0]
 8005786:	e6f0      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x182>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	6962      	ldr	r2, [r4, #20]
 800578c:	4313      	orrs	r3, r2
 800578e:	613b      	str	r3, [r7, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005790:	6823      	ldr	r3, [r4, #0]
 8005792:	e712      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x1d2>
          tickstart = HAL_GetTick();
 8005794:	f7fd fef2 	bl	800357c <HAL_GetTick>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005798:	f241 3888 	movw	r8, #5000	; 0x1388
          tickstart = HAL_GetTick();
 800579c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800579e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057a2:	079b      	lsls	r3, r3, #30
 80057a4:	f53f af45 	bmi.w	8005632 <HAL_RCCEx_PeriphCLKConfig+0x24a>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057a8:	f7fd fee8 	bl	800357c <HAL_GetTick>
 80057ac:	1b80      	subs	r0, r0, r6
 80057ae:	4540      	cmp	r0, r8
 80057b0:	d9f5      	bls.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057b2:	6823      	ldr	r3, [r4, #0]
              ret = HAL_TIMEOUT;
 80057b4:	2503      	movs	r5, #3
 80057b6:	e66b      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057b8:	f7fd fee0 	bl	800357c <HAL_GetTick>
 80057bc:	1b40      	subs	r0, r0, r5
 80057be:	2802      	cmp	r0, #2
 80057c0:	f67f ae46 	bls.w	8005450 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80057c4:	e765      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80057c6:	bf00      	nop

080057c8 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80057c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057cc:	6813      	ldr	r3, [r2, #0]
 80057ce:	f043 0304 	orr.w	r3, r3, #4
 80057d2:	6013      	str	r3, [r2, #0]
}
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop

080057d8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057d8:	2800      	cmp	r0, #0
 80057da:	d070      	beq.n	80058be <HAL_TIM_Base_Init+0xe6>
{
 80057dc:	b510      	push	{r4, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80057e2:	4604      	mov	r4, r0
 80057e4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d047      	beq.n	800587c <HAL_TIM_Base_Init+0xa4>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057ec:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057ee:	4935      	ldr	r1, [pc, #212]	; (80058c4 <HAL_TIM_Base_Init+0xec>)
  htim->State = HAL_TIM_STATE_BUSY;
 80057f0:	2302      	movs	r3, #2
 80057f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057f6:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80057f8:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057fa:	d044      	beq.n	8005886 <HAL_TIM_Base_Init+0xae>
 80057fc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005800:	d04b      	beq.n	800589a <HAL_TIM_Base_Init+0xc2>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005802:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 8005806:	428a      	cmp	r2, r1
 8005808:	d00d      	beq.n	8005826 <HAL_TIM_Base_Init+0x4e>
 800580a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800580e:	428a      	cmp	r2, r1
 8005810:	d009      	beq.n	8005826 <HAL_TIM_Base_Init+0x4e>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005812:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005814:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005816:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800581a:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800581c:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800581e:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005820:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005822:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005824:	e00e      	b.n	8005844 <HAL_TIM_Base_Init+0x6c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005826:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005828:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800582a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800582e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005830:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005834:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005836:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005838:	68e3      	ldr	r3, [r4, #12]
 800583a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800583c:	6863      	ldr	r3, [r4, #4]
 800583e:	6293      	str	r3, [r2, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005840:	6963      	ldr	r3, [r4, #20]
 8005842:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005844:	2301      	movs	r3, #1
 8005846:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005848:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800584c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005850:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005854:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005858:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800585c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005864:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005868:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800586c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005870:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005874:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005878:	2000      	movs	r0, #0
}
 800587a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800587c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005880:	f7fd fd30 	bl	80032e4 <HAL_TIM_Base_MspInit>
 8005884:	e7b2      	b.n	80057ec <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8005886:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005888:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800588a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800588e:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005894:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005896:	69a1      	ldr	r1, [r4, #24]
 8005898:	e7ca      	b.n	8005830 <HAL_TIM_Base_Init+0x58>
    tmpcr1 |= Structure->CounterMode;
 800589a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800589c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800589e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80058a2:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80058a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058a8:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058aa:	69a1      	ldr	r1, [r4, #24]
 80058ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058b0:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80058b2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058b4:	68e3      	ldr	r3, [r4, #12]
 80058b6:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80058b8:	6863      	ldr	r3, [r4, #4]
 80058ba:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058bc:	e7c2      	b.n	8005844 <HAL_TIM_Base_Init+0x6c>
    return HAL_ERROR;
 80058be:	2001      	movs	r0, #1
}
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	40012c00 	.word	0x40012c00

080058c8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80058c8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d113      	bne.n	80058f8 <HAL_TIM_Base_Start_IT+0x30>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058d0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058d2:	490f      	ldr	r1, [pc, #60]	; (8005910 <HAL_TIM_Base_Start_IT+0x48>)
  htim->State = HAL_TIM_STATE_BUSY;
 80058d4:	2202      	movs	r2, #2
 80058d6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058da:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058dc:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058de:	f042 0201 	orr.w	r2, r2, #1
 80058e2:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058e4:	d00a      	beq.n	80058fc <HAL_TIM_Base_Start_IT+0x34>
 80058e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ea:	d007      	beq.n	80058fc <HAL_TIM_Base_Start_IT+0x34>
    __HAL_TIM_ENABLE(htim);
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 80058f2:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 80058f4:	601a      	str	r2, [r3, #0]
 80058f6:	4770      	bx	lr
    return HAL_ERROR;
 80058f8:	2001      	movs	r0, #1
 80058fa:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058fc:	6899      	ldr	r1, [r3, #8]
 80058fe:	4a05      	ldr	r2, [pc, #20]	; (8005914 <HAL_TIM_Base_Start_IT+0x4c>)
 8005900:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005902:	2a06      	cmp	r2, #6
 8005904:	d002      	beq.n	800590c <HAL_TIM_Base_Start_IT+0x44>
 8005906:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800590a:	d1ef      	bne.n	80058ec <HAL_TIM_Base_Start_IT+0x24>
  return HAL_OK;
 800590c:	2000      	movs	r0, #0
}
 800590e:	4770      	bx	lr
 8005910:	40012c00 	.word	0x40012c00
 8005914:	00010007 	.word	0x00010007

08005918 <HAL_TIM_OC_DelayElapsedCallback>:
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop

0800591c <HAL_TIM_IC_CaptureCallback>:
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop

08005920 <HAL_TIM_PWM_PulseFinishedCallback>:
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop

08005924 <HAL_TIM_TriggerCallback>:
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop

08005928 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005928:	6803      	ldr	r3, [r0, #0]
 800592a:	691a      	ldr	r2, [r3, #16]
 800592c:	0791      	lsls	r1, r2, #30
{
 800592e:	b510      	push	{r4, lr}
 8005930:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005932:	d502      	bpl.n	800593a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005934:	68da      	ldr	r2, [r3, #12]
 8005936:	0792      	lsls	r2, r2, #30
 8005938:	d468      	bmi.n	8005a0c <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800593a:	691a      	ldr	r2, [r3, #16]
 800593c:	0752      	lsls	r2, r2, #29
 800593e:	d502      	bpl.n	8005946 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005940:	68da      	ldr	r2, [r3, #12]
 8005942:	0750      	lsls	r0, r2, #29
 8005944:	d44f      	bmi.n	80059e6 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005946:	691a      	ldr	r2, [r3, #16]
 8005948:	0711      	lsls	r1, r2, #28
 800594a:	d502      	bpl.n	8005952 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	0712      	lsls	r2, r2, #28
 8005950:	d437      	bmi.n	80059c2 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005952:	691a      	ldr	r2, [r3, #16]
 8005954:	06d0      	lsls	r0, r2, #27
 8005956:	d502      	bpl.n	800595e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005958:	68da      	ldr	r2, [r3, #12]
 800595a:	06d1      	lsls	r1, r2, #27
 800595c:	d41e      	bmi.n	800599c <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800595e:	691a      	ldr	r2, [r3, #16]
 8005960:	07d2      	lsls	r2, r2, #31
 8005962:	d502      	bpl.n	800596a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005964:	68da      	ldr	r2, [r3, #12]
 8005966:	07d0      	lsls	r0, r2, #31
 8005968:	d469      	bmi.n	8005a3e <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800596a:	691a      	ldr	r2, [r3, #16]
 800596c:	0611      	lsls	r1, r2, #24
 800596e:	d502      	bpl.n	8005976 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005970:	68da      	ldr	r2, [r3, #12]
 8005972:	0612      	lsls	r2, r2, #24
 8005974:	d46b      	bmi.n	8005a4e <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005976:	691a      	ldr	r2, [r3, #16]
 8005978:	05d0      	lsls	r0, r2, #23
 800597a:	d502      	bpl.n	8005982 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800597c:	68da      	ldr	r2, [r3, #12]
 800597e:	0611      	lsls	r1, r2, #24
 8005980:	d46d      	bmi.n	8005a5e <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005982:	691a      	ldr	r2, [r3, #16]
 8005984:	0652      	lsls	r2, r2, #25
 8005986:	d502      	bpl.n	800598e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005988:	68da      	ldr	r2, [r3, #12]
 800598a:	0650      	lsls	r0, r2, #25
 800598c:	d46f      	bmi.n	8005a6e <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800598e:	691a      	ldr	r2, [r3, #16]
 8005990:	0691      	lsls	r1, r2, #26
 8005992:	d502      	bpl.n	800599a <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005994:	68da      	ldr	r2, [r3, #12]
 8005996:	0692      	lsls	r2, r2, #26
 8005998:	d449      	bmi.n	8005a2e <HAL_TIM_IRQHandler+0x106>
}
 800599a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800599c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059a0:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059a2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059a4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059a6:	69db      	ldr	r3, [r3, #28]
 80059a8:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80059ac:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059ae:	d16f      	bne.n	8005a90 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059b0:	f7ff ffb2 	bl	8005918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059b4:	4620      	mov	r0, r4
 80059b6:	f7ff ffb3 	bl	8005920 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ba:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059bc:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059be:	7722      	strb	r2, [r4, #28]
 80059c0:	e7cd      	b.n	800595e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059c2:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059c6:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059c8:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059ca:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80059d0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059d2:	d15a      	bne.n	8005a8a <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d4:	f7ff ffa0 	bl	8005918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d8:	4620      	mov	r0, r4
 80059da:	f7ff ffa1 	bl	8005920 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059de:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059e0:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e2:	7722      	strb	r2, [r4, #28]
 80059e4:	e7b5      	b.n	8005952 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059e6:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059ea:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059ec:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059ee:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80059f6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059f8:	d144      	bne.n	8005a84 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059fa:	f7ff ff8d 	bl	8005918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059fe:	4620      	mov	r0, r4
 8005a00:	f7ff ff8e 	bl	8005920 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a04:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a06:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a08:	7722      	strb	r2, [r4, #28]
 8005a0a:	e79c      	b.n	8005946 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a0c:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a10:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a12:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a14:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	0799      	lsls	r1, r3, #30
 8005a1a:	d130      	bne.n	8005a7e <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a1c:	f7ff ff7c 	bl	8005918 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a20:	4620      	mov	r0, r4
 8005a22:	f7ff ff7d 	bl	8005920 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a26:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a28:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a2a:	7722      	strb	r2, [r4, #28]
 8005a2c:	e785      	b.n	800593a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a2e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8005a32:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a34:	611a      	str	r2, [r3, #16]
}
 8005a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8005a3a:	f000 b82d 	b.w	8005a98 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a3e:	f06f 0201 	mvn.w	r2, #1
 8005a42:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a44:	4620      	mov	r0, r4
 8005a46:	f7fd fbe7 	bl	8003218 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	e78d      	b.n	800596a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a4e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a52:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005a54:	4620      	mov	r0, r4
 8005a56:	f000 f821 	bl	8005a9c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	e78b      	b.n	8005976 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a62:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005a64:	4620      	mov	r0, r4
 8005a66:	f000 f81b 	bl	8005aa0 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a6a:	6823      	ldr	r3, [r4, #0]
 8005a6c:	e789      	b.n	8005982 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a72:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005a74:	4620      	mov	r0, r4
 8005a76:	f7ff ff55 	bl	8005924 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	e787      	b.n	800598e <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8005a7e:	f7ff ff4d 	bl	800591c <HAL_TIM_IC_CaptureCallback>
 8005a82:	e7d0      	b.n	8005a26 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8005a84:	f7ff ff4a 	bl	800591c <HAL_TIM_IC_CaptureCallback>
 8005a88:	e7bc      	b.n	8005a04 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8005a8a:	f7ff ff47 	bl	800591c <HAL_TIM_IC_CaptureCallback>
 8005a8e:	e7a6      	b.n	80059de <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8005a90:	f7ff ff44 	bl	800591c <HAL_TIM_IC_CaptureCallback>
 8005a94:	e791      	b.n	80059ba <HAL_TIM_IRQHandler+0x92>
 8005a96:	bf00      	nop

08005a98 <HAL_TIMEx_CommutCallback>:
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop

08005a9c <HAL_TIMEx_BreakCallback>:
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop

08005aa0 <HAL_TIMEx_Break2Callback>:
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop

08005aa4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005aa4:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005aa6:	f64b 7280 	movw	r2, #49024	; 0xbf80
  USBx->ISTR = 0U;
 8005aaa:	2000      	movs	r0, #0
 8005aac:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8005ab0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop

08005ab8 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005ab8:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40
{
 8005abc:	4603      	mov	r3, r0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005abe:	f244 027f 	movw	r2, #16511	; 0x407f
 8005ac2:	400a      	ands	r2, r1

  return HAL_OK;
}
 8005ac4:	2000      	movs	r0, #0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005ac6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 8005aca:	4770      	bx	lr

08005acc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005acc:	b084      	sub	sp, #16
 8005ace:	4684      	mov	ip, r0
 8005ad0:	a801      	add	r0, sp, #4
 8005ad2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005ad6:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	f8ac 3040 	strh.w	r3, [ip, #64]	; 0x40

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 8005ade:	b004      	add	sp, #16
  USBx->CNTR = 0U;
 8005ae0:	f8ac 0040 	strh.w	r0, [ip, #64]	; 0x40
  USBx->ISTR = 0U;
 8005ae4:	f8ac 0044 	strh.w	r0, [ip, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8005ae8:	f8ac 0050 	strh.w	r0, [ip, #80]	; 0x50
}
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop

08005af0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005af0:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005af2:	780c      	ldrb	r4, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8005af4:	f891 c003 	ldrb.w	ip, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005af8:	b222      	sxth	r2, r4
 8005afa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005afe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b06:	041b      	lsls	r3, r3, #16
 8005b08:	0c1b      	lsrs	r3, r3, #16
  switch (ep->type)
 8005b0a:	f1bc 0f03 	cmp.w	ip, #3
 8005b0e:	f200 819b 	bhi.w	8005e48 <USB_ActivateEndpoint+0x358>
 8005b12:	e8df f00c 	tbb	[pc, ip]
 8005b16:	bfbc      	.short	0xbfbc
 8005b18:	0272      	.short	0x0272
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005b1a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005b1e:	f248 0580 	movw	r5, #32896	; 0x8080
 8005b22:	432b      	orrs	r3, r5
 8005b24:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005b28:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005b2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b34:	041b      	lsls	r3, r3, #16
 8005b36:	0c1b      	lsrs	r3, r3, #16
 8005b38:	4323      	orrs	r3, r4
 8005b3a:	432b      	orrs	r3, r5
 8005b3c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 8005b40:	7b0d      	ldrb	r5, [r1, #12]
 8005b42:	2d00      	cmp	r5, #0
 8005b44:	d06d      	beq.n	8005c22 <USB_ActivateEndpoint+0x132>
 8005b46:	2500      	movs	r5, #0
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005b48:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005b4c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b54:	041b      	lsls	r3, r3, #16
 8005b56:	0c1b      	lsrs	r3, r3, #16
 8005b58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b60:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005b64:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
 8005b68:	890b      	ldrh	r3, [r1, #8]
 8005b6a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8005b6e:	fa14 fe8e 	uxtah	lr, r4, lr
 8005b72:	085b      	lsrs	r3, r3, #1
 8005b74:	005b      	lsls	r3, r3, #1
 8005b76:	f8ae 3400 	strh.w	r3, [lr, #1024]	; 0x400
 8005b7a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005b7e:	fa14 f483 	uxtah	r4, r4, r3
 8005b82:	894b      	ldrh	r3, [r1, #10]
 8005b84:	085b      	lsrs	r3, r3, #1
 8005b86:	005b      	lsls	r3, r3, #1
 8005b88:	f8a4 3404 	strh.w	r3, [r4, #1028]	; 0x404

    if (ep->is_in == 0U)
 8005b8c:	784b      	ldrb	r3, [r1, #1]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f040 80d8 	bne.w	8005d44 <USB_ActivateEndpoint+0x254>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b94:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005b98:	045e      	lsls	r6, r3, #17
 8005b9a:	d50d      	bpl.n	8005bb8 <USB_ActivateEndpoint+0xc8>
 8005b9c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005ba0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba8:	041b      	lsls	r3, r3, #16
 8005baa:	0c1b      	lsrs	r3, r3, #16
 8005bac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bb8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005bbc:	065c      	lsls	r4, r3, #25
 8005bbe:	f100 8108 	bmi.w	8005dd2 <USB_ActivateEndpoint+0x2e2>

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005bc2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005bc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bce:	041b      	lsls	r3, r3, #16
 8005bd0:	0c1b      	lsrs	r3, r3, #16
 8005bd2:	f248 0180 	movw	r1, #32896	; 0x8080
 8005bd6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8005bda:	430b      	orrs	r3, r1
 8005bdc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005be0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005be4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005be8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bec:	041b      	lsls	r3, r3, #16
 8005bee:	0c1b      	lsrs	r3, r3, #16
 8005bf0:	430b      	orrs	r3, r1
 8005bf2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005bfa:	f248 0e80 	movw	lr, #32896	; 0x8080
 8005bfe:	ea43 030e 	orr.w	r3, r3, lr
 8005c02:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005c06:	f830 5022 	ldrh.w	r5, [r0, r2, lsl #2]
 8005c0a:	4e9b      	ldr	r6, [pc, #620]	; (8005e78 <USB_ActivateEndpoint+0x388>)
 8005c0c:	b2ad      	uxth	r5, r5
 8005c0e:	4035      	ands	r5, r6
 8005c10:	4325      	orrs	r5, r4
 8005c12:	ea4e 0505 	orr.w	r5, lr, r5
 8005c16:	f820 5022 	strh.w	r5, [r0, r2, lsl #2]
  if (ep->doublebuffer == 0U)
 8005c1a:	7b0d      	ldrb	r5, [r1, #12]
 8005c1c:	2d00      	cmp	r5, #0
 8005c1e:	f040 80f9 	bne.w	8005e14 <USB_ActivateEndpoint+0x324>
    if (ep->is_in != 0U)
 8005c22:	784b      	ldrb	r3, [r1, #1]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d042      	beq.n	8005cae <USB_ActivateEndpoint+0x1be>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005c28:	88cb      	ldrh	r3, [r1, #6]
 8005c2a:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8005c2e:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8005c32:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005c36:	085b      	lsrs	r3, r3, #1
 8005c38:	b289      	uxth	r1, r1
 8005c3a:	005b      	lsls	r3, r3, #1
 8005c3c:	5263      	strh	r3, [r4, r1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c3e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005c42:	065b      	lsls	r3, r3, #25
 8005c44:	d50d      	bpl.n	8005c62 <USB_ActivateEndpoint+0x172>
 8005c46:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c52:	041b      	lsls	r3, r3, #16
 8005c54:	0c1b      	lsrs	r3, r3, #16
 8005c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c5e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c62:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c6e:	041b      	lsls	r3, r3, #16
      if (ep->type != EP_TYPE_ISOC)
 8005c70:	f1bc 0f01 	cmp.w	ip, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c74:	ea4f 4313 	mov.w	r3, r3, lsr #16
      if (ep->type != EP_TYPE_ISOC)
 8005c78:	d011      	beq.n	8005c9e <USB_ActivateEndpoint+0x1ae>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c7a:	f083 0320 	eor.w	r3, r3, #32
 8005c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c86:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_CONTROL;
 8005c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      break;
 8005c92:	e744      	b.n	8005b1e <USB_ActivateEndpoint+0x2e>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005c94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
      break;
 8005c98:	e741      	b.n	8005b1e <USB_ActivateEndpoint+0x2e>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005c9a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ca6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8005caa:	4628      	mov	r0, r5
 8005cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005cae:	88cb      	ldrh	r3, [r1, #6]
 8005cb0:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005cb4:	690f      	ldr	r7, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005cb6:	0859      	lsrs	r1, r3, #1
 8005cb8:	eb00 03c4 	add.w	r3, r0, r4, lsl #3
 8005cbc:	fa13 f686 	uxtah	r6, r3, r6
 8005cc0:	0049      	lsls	r1, r1, #1
 8005cc2:	f8a6 1404 	strh.w	r1, [r6, #1028]	; 0x404
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005cc6:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8005cca:	fa13 f381 	uxtah	r3, r3, r1
 8005cce:	2f3e      	cmp	r7, #62	; 0x3e
 8005cd0:	f8b3 1406 	ldrh.w	r1, [r3, #1030]	; 0x406
 8005cd4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005cd8:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 8005cdc:	f200 8088 	bhi.w	8005df0 <USB_ActivateEndpoint+0x300>
 8005ce0:	2f00      	cmp	r7, #0
 8005ce2:	f040 80a3 	bne.w	8005e2c <USB_ActivateEndpoint+0x33c>
 8005ce6:	f8b3 1406 	ldrh.w	r1, [r3, #1030]	; 0x406
 8005cea:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8005cee:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005cf2:	b289      	uxth	r1, r1
 8005cf4:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cf8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005cfc:	045f      	lsls	r7, r3, #17
 8005cfe:	d50d      	bpl.n	8005d1c <USB_ActivateEndpoint+0x22c>
 8005d00:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0c:	041b      	lsls	r3, r3, #16
 8005d0e:	0c1b      	lsrs	r3, r3, #16
 8005d10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d18:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d1c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005d20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d28:	041b      	lsls	r3, r3, #16
 8005d2a:	0c1b      	lsrs	r3, r3, #16
      if (ep->num == 0U)
 8005d2c:	2c00      	cmp	r4, #0
 8005d2e:	d1b4      	bne.n	8005c9a <USB_ActivateEndpoint+0x1aa>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d30:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8005d34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d3c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8005d40:	4628      	mov	r0, r5
 8005d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d44:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005d48:	0459      	lsls	r1, r3, #17
 8005d4a:	d50d      	bpl.n	8005d68 <USB_ActivateEndpoint+0x278>
 8005d4c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005d50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d58:	041b      	lsls	r3, r3, #16
 8005d5a:	0c1b      	lsrs	r3, r3, #16
 8005d5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d64:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d68:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005d6c:	065b      	lsls	r3, r3, #25
 8005d6e:	d50d      	bpl.n	8005d8c <USB_ActivateEndpoint+0x29c>
 8005d70:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005d74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d7c:	041b      	lsls	r3, r3, #16
 8005d7e:	0c1b      	lsrs	r3, r3, #16
 8005d80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d88:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d8c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005d90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d98:	041b      	lsls	r3, r3, #16
 8005d9a:	0c1b      	lsrs	r3, r3, #16
      if (ep->type != EP_TYPE_ISOC)
 8005d9c:	f1bc 0f01 	cmp.w	ip, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005da0:	bf18      	it	ne
 8005da2:	f083 0320 	eorne.w	r3, r3, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dae:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005db2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005db6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dbe:	041b      	lsls	r3, r3, #16
 8005dc0:	0c1b      	lsrs	r3, r3, #16
 8005dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dca:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8005dce:	4628      	mov	r0, r5
 8005dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005dd2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dde:	041b      	lsls	r3, r3, #16
 8005de0:	0c1b      	lsrs	r3, r3, #16
 8005de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005de6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dea:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005dee:	e6e8      	b.n	8005bc2 <USB_ActivateEndpoint+0xd2>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005df0:	f8b3 1406 	ldrh.w	r1, [r3, #1030]	; 0x406
 8005df4:	097e      	lsrs	r6, r7, #5
 8005df6:	06ff      	lsls	r7, r7, #27
 8005df8:	bf08      	it	eq
 8005dfa:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8005dfe:	b289      	uxth	r1, r1
 8005e00:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8005e04:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8005e08:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005e0c:	b289      	uxth	r1, r1
 8005e0e:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 8005e12:	e771      	b.n	8005cf8 <USB_ActivateEndpoint+0x208>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005e14:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	4033      	ands	r3, r6
 8005e1c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e24:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005e28:	2500      	movs	r5, #0
 8005e2a:	e69b      	b.n	8005b64 <USB_ActivateEndpoint+0x74>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005e2c:	07f9      	lsls	r1, r7, #31
 8005e2e:	f8b3 1406 	ldrh.w	r1, [r3, #1030]	; 0x406
 8005e32:	ea4f 0657 	mov.w	r6, r7, lsr #1
 8005e36:	bf48      	it	mi
 8005e38:	3601      	addmi	r6, #1
 8005e3a:	b289      	uxth	r1, r1
 8005e3c:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8005e40:	b289      	uxth	r1, r1
 8005e42:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 8005e46:	e757      	b.n	8005cf8 <USB_ActivateEndpoint+0x208>
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005e48:	f248 0580 	movw	r5, #32896	; 0x8080
 8005e4c:	432b      	orrs	r3, r5
 8005e4e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005e52:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e5e:	041b      	lsls	r3, r3, #16
 8005e60:	0c1b      	lsrs	r3, r3, #16
 8005e62:	4323      	orrs	r3, r4
 8005e64:	432b      	orrs	r3, r5
 8005e66:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  if (ep->doublebuffer == 0U)
 8005e6a:	7b0b      	ldrb	r3, [r1, #12]
 8005e6c:	2501      	movs	r5, #1
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f47f ae6a 	bne.w	8005b48 <USB_ActivateEndpoint+0x58>
 8005e74:	e6d5      	b.n	8005c22 <USB_ActivateEndpoint+0x132>
 8005e76:	bf00      	nop
 8005e78:	ffff8f8f 	.word	0xffff8f8f

08005e7c <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8005e7c:	7b0b      	ldrb	r3, [r1, #12]
 8005e7e:	b9cb      	cbnz	r3, 8005eb4 <USB_DeactivateEndpoint+0x38>
  {
    if (ep->is_in != 0U)
 8005e80:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e82:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 80b1 	beq.w	8005fec <USB_DeactivateEndpoint+0x170>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e8a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005e8e:	0659      	lsls	r1, r3, #25
 8005e90:	f100 80c5 	bmi.w	800601e <USB_DeactivateEndpoint+0x1a2>

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e94:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005e98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ea0:	041b      	lsls	r3, r3, #16
 8005ea2:	0c1b      	lsrs	r3, r3, #16
 8005ea4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eac:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8005eb0:	2000      	movs	r0, #0
 8005eb2:	4770      	bx	lr
    if (ep->is_in == 0U)
 8005eb4:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005eb6:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in == 0U)
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d14b      	bne.n	8005f54 <USB_DeactivateEndpoint+0xd8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ebc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005ec0:	0459      	lsls	r1, r3, #17
 8005ec2:	d50d      	bpl.n	8005ee0 <USB_DeactivateEndpoint+0x64>
 8005ec4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005ec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed0:	041b      	lsls	r3, r3, #16
 8005ed2:	0c1b      	lsrs	r3, r3, #16
 8005ed4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005edc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ee0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005ee4:	065b      	lsls	r3, r3, #25
 8005ee6:	d50d      	bpl.n	8005f04 <USB_DeactivateEndpoint+0x88>
 8005ee8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005eec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef4:	041b      	lsls	r3, r3, #16
 8005ef6:	0c1b      	lsrs	r3, r3, #16
 8005ef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005efc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f00:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8005f04:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f10:	041b      	lsls	r3, r3, #16
 8005f12:	0c1b      	lsrs	r3, r3, #16
 8005f14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f1c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f20:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f2c:	041b      	lsls	r3, r3, #16
 8005f2e:	f248 0180 	movw	r1, #32896	; 0x8080
 8005f32:	0c1b      	lsrs	r3, r3, #16
 8005f34:	430b      	orrs	r3, r1
 8005f36:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f3a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f46:	041b      	lsls	r3, r3, #16
 8005f48:	0c1b      	lsrs	r3, r3, #16
 8005f4a:	430b      	orrs	r3, r1
 8005f4c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8005f50:	2000      	movs	r0, #0
 8005f52:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f54:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f58:	0459      	lsls	r1, r3, #17
 8005f5a:	d50d      	bpl.n	8005f78 <USB_DeactivateEndpoint+0xfc>
 8005f5c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f68:	041b      	lsls	r3, r3, #16
 8005f6a:	0c1b      	lsrs	r3, r3, #16
 8005f6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f74:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f78:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f7c:	065b      	lsls	r3, r3, #25
 8005f7e:	d50d      	bpl.n	8005f9c <USB_DeactivateEndpoint+0x120>
 8005f80:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f8c:	041b      	lsls	r3, r3, #16
 8005f8e:	0c1b      	lsrs	r3, r3, #16
 8005f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f98:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8005f9c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005fa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa8:	041b      	lsls	r3, r3, #16
 8005faa:	0c1b      	lsrs	r3, r3, #16
 8005fac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fb4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fb8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005fbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fc4:	041b      	lsls	r3, r3, #16
 8005fc6:	f248 0180 	movw	r1, #32896	; 0x8080
 8005fca:	0c1b      	lsrs	r3, r3, #16
 8005fcc:	430b      	orrs	r3, r1
 8005fce:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005fd2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005fd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fde:	041b      	lsls	r3, r3, #16
 8005fe0:	0c1b      	lsrs	r3, r3, #16
 8005fe2:	430b      	orrs	r3, r1
 8005fe4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8005fe8:	2000      	movs	r0, #0
 8005fea:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005ff0:	045b      	lsls	r3, r3, #17
 8005ff2:	d50d      	bpl.n	8006010 <USB_DeactivateEndpoint+0x194>
 8005ff4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005ff8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006000:	041b      	lsls	r3, r3, #16
 8006002:	0c1b      	lsrs	r3, r3, #16
 8006004:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800600c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006010:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006014:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800601c:	e740      	b.n	8005ea0 <USB_DeactivateEndpoint+0x24>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800601e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800602a:	041b      	lsls	r3, r3, #16
 800602c:	0c1b      	lsrs	r3, r3, #16
 800602e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006032:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006036:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800603a:	e72b      	b.n	8005e94 <USB_DeactivateEndpoint+0x18>

0800603c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800603c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006040:	784b      	ldrb	r3, [r1, #1]
 8006042:	2b01      	cmp	r3, #1
{
 8006044:	4602      	mov	r2, r0
  if (ep->is_in == 1U)
 8006046:	f000 808b 	beq.w	8006160 <USB_EPStartXfer+0x124>

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800604a:	7b08      	ldrb	r0, [r1, #12]
 800604c:	2800      	cmp	r0, #0
 800604e:	d050      	beq.n	80060f2 <USB_EPStartXfer+0xb6>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006050:	78c8      	ldrb	r0, [r1, #3]
 8006052:	2802      	cmp	r0, #2
 8006054:	f000 811e 	beq.w	8006294 <USB_EPStartXfer+0x258>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006058:	2801      	cmp	r0, #1
 800605a:	f040 80f2 	bne.w	8006242 <USB_EPStartXfer+0x206>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800605e:	6988      	ldr	r0, [r1, #24]
 8006060:	690c      	ldr	r4, [r1, #16]
 8006062:	42a0      	cmp	r0, r4
        {
          len = ep->maxpacket;
          ep->xfer_len -= len;
 8006064:	bf8a      	itet	hi
 8006066:	1b05      	subhi	r5, r0, r4
        }
        else
        {
          len = ep->xfer_len;
          ep->xfer_len = 0U;
 8006068:	2500      	movls	r5, #0
 800606a:	4620      	movhi	r0, r4
 800606c:	618d      	str	r5, [r1, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800606e:	2b00      	cmp	r3, #0
 8006070:	f040 810e 	bne.w	8006290 <USB_EPStartXfer+0x254>
 8006074:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
 8006078:	780b      	ldrb	r3, [r1, #0]
 800607a:	f202 4402 	addw	r4, r2, #1026	; 0x402
 800607e:	fa14 f485 	uxtah	r4, r4, r5
 8006082:	283e      	cmp	r0, #62	; 0x3e
 8006084:	f834 5033 	ldrh.w	r5, [r4, r3, lsl #3]
 8006088:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800608c:	f824 5033 	strh.w	r5, [r4, r3, lsl #3]
 8006090:	f240 8233 	bls.w	80064fa <USB_EPStartXfer+0x4be>
 8006094:	f834 5033 	ldrh.w	r5, [r4, r3, lsl #3]
 8006098:	0946      	lsrs	r6, r0, #5
 800609a:	f010 001f 	ands.w	r0, r0, #31
 800609e:	4637      	mov	r7, r6
 80060a0:	b2ad      	uxth	r5, r5
 80060a2:	bf08      	it	eq
 80060a4:	f106 37ff 	addeq.w	r7, r6, #4294967295
 80060a8:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 80060ac:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 80060b0:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 80060b4:	b2ad      	uxth	r5, r5
 80060b6:	f824 5033 	strh.w	r5, [r4, r3, lsl #3]
 80060ba:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
 80060be:	f202 4406 	addw	r4, r2, #1030	; 0x406
 80060c2:	fa14 f485 	uxtah	r4, r4, r5
 80060c6:	f834 5033 	ldrh.w	r5, [r4, r3, lsl #3]
 80060ca:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80060ce:	f824 5033 	strh.w	r5, [r4, r3, lsl #3]
 80060d2:	b900      	cbnz	r0, 80060d6 <USB_EPStartXfer+0x9a>
 80060d4:	3e01      	subs	r6, #1
 80060d6:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 80060da:	b280      	uxth	r0, r0
 80060dc:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 80060e0:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 80060e4:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 80060e8:	b280      	uxth	r0, r0
 80060ea:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
 80060ee:	780b      	ldrb	r3, [r1, #0]
 80060f0:	e022      	b.n	8006138 <USB_EPStartXfer+0xfc>
      if (ep->xfer_len > ep->maxpacket)
 80060f2:	698b      	ldr	r3, [r1, #24]
 80060f4:	690c      	ldr	r4, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80060f6:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
      if (ep->xfer_len > ep->maxpacket)
 80060fa:	42a3      	cmp	r3, r4
        ep->xfer_len -= len;
 80060fc:	bf88      	it	hi
 80060fe:	1b18      	subhi	r0, r3, r4
 8006100:	6188      	str	r0, [r1, #24]
 8006102:	bf88      	it	hi
 8006104:	4623      	movhi	r3, r4
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006106:	f202 4006 	addw	r0, r2, #1030	; 0x406
 800610a:	780c      	ldrb	r4, [r1, #0]
 800610c:	fa10 f08c 	uxtah	r0, r0, ip
 8006110:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8006114:	2b3e      	cmp	r3, #62	; 0x3e
 8006116:	8820      	ldrh	r0, [r4, #0]
 8006118:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800611c:	8020      	strh	r0, [r4, #0]
 800611e:	f200 8086 	bhi.w	800622e <USB_EPStartXfer+0x1f2>
 8006122:	2b00      	cmp	r3, #0
 8006124:	f040 8116 	bne.w	8006354 <USB_EPStartXfer+0x318>
 8006128:	8823      	ldrh	r3, [r4, #0]
 800612a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800612e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006132:	b29b      	uxth	r3, r3
 8006134:	8023      	strh	r3, [r4, #0]
 8006136:	780b      	ldrb	r3, [r1, #0]
        return HAL_ERROR;
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006138:	b219      	sxth	r1, r3
  }

  return HAL_OK;
 800613a:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800613c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8006140:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006148:	041b      	lsls	r3, r3, #16
 800614a:	0c1b      	lsrs	r3, r3, #16
 800614c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006158:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
}
 800615c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ep->xfer_len > ep->maxpacket)
 8006160:	690c      	ldr	r4, [r1, #16]
 8006162:	6988      	ldr	r0, [r1, #24]
    if (ep->doublebuffer == 0U)
 8006164:	7b0b      	ldrb	r3, [r1, #12]
 8006166:	42a0      	cmp	r0, r4
 8006168:	bf28      	it	cs
 800616a:	4620      	movcs	r0, r4
 800616c:	bb93      	cbnz	r3, 80061d4 <USB_EPStartXfer+0x198>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800616e:	b284      	uxth	r4, r0
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006170:	4620      	mov	r0, r4
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006172:	f8b1 e006 	ldrh.w	lr, [r1, #6]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006176:	694b      	ldr	r3, [r1, #20]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006178:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800617a:	f502 6580 	add.w	r5, r2, #1024	; 0x400

  for (count = n; count != 0U; count--)
 800617e:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006180:	44ae      	add	lr, r5
  for (count = n; count != 0U; count--)
 8006182:	d009      	beq.n	8006198 <USB_EPStartXfer+0x15c>
 8006184:	eb03 0c40 	add.w	ip, r3, r0, lsl #1
 8006188:	ebae 0e03 	sub.w	lr, lr, r3
  {
    WrVal = pBuf[0];
    WrVal |= (uint16_t)pBuf[1] << 8;
 800618c:	8818      	ldrh	r0, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800618e:	f823 000e 	strh.w	r0, [r3, lr]
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
 8006192:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 8006194:	4563      	cmp	r3, ip
 8006196:	d1f9      	bne.n	800618c <USB_EPStartXfer+0x150>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006198:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800619c:	7808      	ldrb	r0, [r1, #0]
 800619e:	f202 4502 	addw	r5, r2, #1026	; 0x402
 80061a2:	fa15 f383 	uxtah	r3, r5, r3
 80061a6:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80061aa:	801c      	strh	r4, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80061ac:	7809      	ldrb	r1, [r1, #0]
 80061ae:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80061b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061ba:	041b      	lsls	r3, r3, #16
 80061bc:	0c1b      	lsrs	r3, r3, #16
 80061be:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80061c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ca:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  return HAL_OK;
 80061ce:	2000      	movs	r0, #0
}
 80061d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ep->type == EP_TYPE_BULK)
 80061d4:	78cb      	ldrb	r3, [r1, #3]
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	f000 80c8 	beq.w	800636c <USB_EPStartXfer+0x330>
        ep->xfer_len_db -= len;
 80061dc:	6a0b      	ldr	r3, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80061de:	780c      	ldrb	r4, [r1, #0]
        ep->xfer_len_db -= len;
 80061e0:	1a1b      	subs	r3, r3, r0
 80061e2:	620b      	str	r3, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80061e4:	b223      	sxth	r3, r4
 80061e6:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80061ea:	f013 0f40 	tst.w	r3, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80061ee:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80061f2:	f000 8118 	beq.w	8006426 <USB_EPStartXfer+0x3ea>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80061f6:	f202 4506 	addw	r5, r2, #1030	; 0x406
 80061fa:	fa15 f383 	uxtah	r3, r5, r3
 80061fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006202:	b284      	uxth	r4, r0
 8006204:	801c      	strh	r4, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006206:	b280      	uxth	r0, r0
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006208:	894c      	ldrh	r4, [r1, #10]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800620a:	694b      	ldr	r3, [r1, #20]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800620c:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800620e:	f502 6c80 	add.w	ip, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 8006212:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006214:	44a4      	add	ip, r4
  for (count = n; count != 0U; count--)
 8006216:	d0c9      	beq.n	80061ac <USB_EPStartXfer+0x170>
 8006218:	eb03 0440 	add.w	r4, r3, r0, lsl #1
 800621c:	ebac 0c03 	sub.w	ip, ip, r3
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006220:	8818      	ldrh	r0, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8006222:	f823 000c 	strh.w	r0, [r3, ip]
    pBuf++;
 8006226:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 8006228:	42a3      	cmp	r3, r4
 800622a:	d1f9      	bne.n	8006220 <USB_EPStartXfer+0x1e4>
 800622c:	e7be      	b.n	80061ac <USB_EPStartXfer+0x170>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800622e:	0958      	lsrs	r0, r3, #5
 8006230:	06dd      	lsls	r5, r3, #27
 8006232:	8823      	ldrh	r3, [r4, #0]
 8006234:	bf08      	it	eq
 8006236:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800623a:	b29b      	uxth	r3, r3
 800623c:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8006240:	e773      	b.n	800612a <USB_EPStartXfer+0xee>
        return HAL_ERROR;
 8006242:	2001      	movs	r0, #1
}
 8006244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006248:	f834 5033 	ldrh.w	r5, [r4, r3, lsl #3]
 800624c:	0846      	lsrs	r6, r0, #1
 800624e:	f010 0001 	ands.w	r0, r0, #1
 8006252:	4637      	mov	r7, r6
 8006254:	b2ad      	uxth	r5, r5
 8006256:	bf18      	it	ne
 8006258:	1c77      	addne	r7, r6, #1
 800625a:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 800625e:	b2ad      	uxth	r5, r5
 8006260:	f824 5033 	strh.w	r5, [r4, r3, lsl #3]
 8006264:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
 8006268:	f202 4406 	addw	r4, r2, #1030	; 0x406
 800626c:	fa14 f485 	uxtah	r4, r4, r5
 8006270:	f834 5033 	ldrh.w	r5, [r4, r3, lsl #3]
 8006274:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8006278:	f824 5033 	strh.w	r5, [r4, r3, lsl #3]
 800627c:	b100      	cbz	r0, 8006280 <USB_EPStartXfer+0x244>
 800627e:	3601      	adds	r6, #1
 8006280:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 8006284:	b280      	uxth	r0, r0
 8006286:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 800628a:	b280      	uxth	r0, r0
 800628c:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
 8006290:	780b      	ldrb	r3, [r1, #0]
 8006292:	e751      	b.n	8006138 <USB_EPStartXfer+0xfc>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006294:	2b00      	cmp	r3, #0
 8006296:	d13d      	bne.n	8006314 <USB_EPStartXfer+0x2d8>
 8006298:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800629c:	780b      	ldrb	r3, [r1, #0]
 800629e:	690d      	ldr	r5, [r1, #16]
 80062a0:	f202 4002 	addw	r0, r2, #1026	; 0x402
 80062a4:	fa10 f084 	uxtah	r0, r0, r4
 80062a8:	2d3e      	cmp	r5, #62	; 0x3e
 80062aa:	f830 4033 	ldrh.w	r4, [r0, r3, lsl #3]
 80062ae:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80062b2:	f820 4033 	strh.w	r4, [r0, r3, lsl #3]
 80062b6:	f240 80ff 	bls.w	80064b8 <USB_EPStartXfer+0x47c>
 80062ba:	f830 4033 	ldrh.w	r4, [r0, r3, lsl #3]
 80062be:	096e      	lsrs	r6, r5, #5
 80062c0:	f015 051f 	ands.w	r5, r5, #31
 80062c4:	4637      	mov	r7, r6
 80062c6:	b2a4      	uxth	r4, r4
 80062c8:	bf08      	it	eq
 80062ca:	f106 37ff 	addeq.w	r7, r6, #4294967295
 80062ce:	ea44 2487 	orr.w	r4, r4, r7, lsl #10
 80062d2:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 80062d6:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80062da:	b2a4      	uxth	r4, r4
 80062dc:	f820 4033 	strh.w	r4, [r0, r3, lsl #3]
 80062e0:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 80062e4:	f202 4406 	addw	r4, r2, #1030	; 0x406
 80062e8:	fa14 f480 	uxtah	r4, r4, r0
 80062ec:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 80062f0:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80062f4:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
 80062f8:	b905      	cbnz	r5, 80062fc <USB_EPStartXfer+0x2c0>
 80062fa:	3e01      	subs	r6, #1
 80062fc:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 8006300:	b280      	uxth	r0, r0
 8006302:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8006306:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 800630a:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800630e:	b280      	uxth	r0, r0
 8006310:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
        if (ep->xfer_count != 0U)
 8006314:	69cb      	ldr	r3, [r1, #28]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d0ba      	beq.n	8006290 <USB_EPStartXfer+0x254>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800631a:	780b      	ldrb	r3, [r1, #0]
 800631c:	b218      	sxth	r0, r3
 800631e:	f244 0440 	movw	r4, #16448	; 0x4040
 8006322:	f832 5020 	ldrh.w	r5, [r2, r0, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006326:	ea04 0605 	and.w	r6, r4, r5
 800632a:	43ac      	bics	r4, r5
 800632c:	d002      	beq.n	8006334 <USB_EPStartXfer+0x2f8>
 800632e:	2e00      	cmp	r6, #0
 8006330:	f47f af02 	bne.w	8006138 <USB_EPStartXfer+0xfc>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006334:	f832 3020 	ldrh.w	r3, [r2, r0, lsl #2]
 8006338:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800633c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006340:	041b      	lsls	r3, r3, #16
 8006342:	0c1b      	lsrs	r3, r3, #16
 8006344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006348:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800634c:	f822 3020 	strh.w	r3, [r2, r0, lsl #2]
 8006350:	780b      	ldrb	r3, [r1, #0]
 8006352:	e6f1      	b.n	8006138 <USB_EPStartXfer+0xfc>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006354:	0858      	lsrs	r0, r3, #1
 8006356:	07db      	lsls	r3, r3, #31
 8006358:	8823      	ldrh	r3, [r4, #0]
 800635a:	bf48      	it	mi
 800635c:	3001      	addmi	r0, #1
 800635e:	b29b      	uxth	r3, r3
 8006360:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8006364:	b29b      	uxth	r3, r3
 8006366:	8023      	strh	r3, [r4, #0]
 8006368:	780b      	ldrb	r3, [r1, #0]
 800636a:	e6e5      	b.n	8006138 <USB_EPStartXfer+0xfc>
        if (ep->xfer_len_db > ep->maxpacket)
 800636c:	6a0b      	ldr	r3, [r1, #32]
 800636e:	429c      	cmp	r4, r3
 8006370:	d276      	bcs.n	8006460 <USB_EPStartXfer+0x424>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006372:	780d      	ldrb	r5, [r1, #0]
 8006374:	f832 c025 	ldrh.w	ip, [r2, r5, lsl #2]
 8006378:	f42c 4ce0 	bic.w	ip, ip, #28672	; 0x7000
 800637c:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 8006380:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8006384:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006388:	f44c 4c01 	orr.w	ip, ip, #33024	; 0x8100
 800638c:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 8006390:	f822 c025 	strh.w	ip, [r2, r5, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006394:	f832 6025 	ldrh.w	r6, [r2, r5, lsl #2]
          ep->xfer_len_db -= len;
 8006398:	1a1b      	subs	r3, r3, r0
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800639a:	f016 0f40 	tst.w	r6, #64	; 0x40
          ep->xfer_len_db -= len;
 800639e:	620b      	str	r3, [r1, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80063a0:	f8b2 6050 	ldrh.w	r6, [r2, #80]	; 0x50
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80063a4:	f000 80c4 	beq.w	8006530 <USB_EPStartXfer+0x4f4>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80063a8:	f202 4706 	addw	r7, r2, #1030	; 0x406
 80063ac:	fa17 f686 	uxtah	r6, r7, r6
 80063b0:	fa1f fa80 	uxth.w	sl, r0
 80063b4:	f826 a035 	strh.w	sl, [r6, r5, lsl #3]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80063b8:	4657      	mov	r7, sl
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80063ba:	894e      	ldrh	r6, [r1, #10]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063bc:	f8d1 c014 	ldr.w	ip, [r1, #20]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80063c0:	3701      	adds	r7, #1
 80063c2:	f502 6980 	add.w	r9, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 80063c6:	087f      	lsrs	r7, r7, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80063c8:	444e      	add	r6, r9
  for (count = n; count != 0U; count--)
 80063ca:	d00c      	beq.n	80063e6 <USB_EPStartXfer+0x3aa>
 80063cc:	eba6 080c 	sub.w	r8, r6, ip
 80063d0:	eb0c 0b47 	add.w	fp, ip, r7, lsl #1
  uint8_t *pBuf = pbUsrBuf;
 80063d4:	46e6      	mov	lr, ip
    WrVal |= (uint16_t)pBuf[1] << 8;
 80063d6:	f8be 6000 	ldrh.w	r6, [lr]
    *pdwVal = (WrVal & 0xFFFFU);
 80063da:	f82e 6008 	strh.w	r6, [lr, r8]
    pBuf++;
 80063de:	f10e 0e02 	add.w	lr, lr, #2
  for (count = n; count != 0U; count--)
 80063e2:	45f3      	cmp	fp, lr
 80063e4:	d1f7      	bne.n	80063d6 <USB_EPStartXfer+0x39a>
            ep->xfer_buff += len;
 80063e6:	eb0c 0600 	add.w	r6, ip, r0
            if (ep->xfer_len_db > ep->maxpacket)
 80063ea:	429c      	cmp	r4, r3
            ep->xfer_buff += len;
 80063ec:	614e      	str	r6, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80063ee:	f080 8109 	bcs.w	8006604 <USB_EPStartXfer+0x5c8>
              ep->xfer_len_db -= len;
 80063f2:	1a1b      	subs	r3, r3, r0
 80063f4:	620b      	str	r3, [r1, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80063f6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80063fa:	f202 4002 	addw	r0, r2, #1026	; 0x402
 80063fe:	fa10 f383 	uxtah	r3, r0, r3
 8006402:	f823 a035 	strh.w	sl, [r3, r5, lsl #3]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006406:	890b      	ldrh	r3, [r1, #8]
 8006408:	eb03 0509 	add.w	r5, r3, r9
  for (count = n; count != 0U; count--)
 800640c:	2f00      	cmp	r7, #0
 800640e:	f43f aecd 	beq.w	80061ac <USB_EPStartXfer+0x170>
 8006412:	eb06 0447 	add.w	r4, r6, r7, lsl #1
  uint8_t *pBuf = pbUsrBuf;
 8006416:	4633      	mov	r3, r6
 8006418:	1bad      	subs	r5, r5, r6
    WrVal |= (uint16_t)pBuf[1] << 8;
 800641a:	8818      	ldrh	r0, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800641c:	5358      	strh	r0, [r3, r5]
    pBuf++;
 800641e:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 8006420:	429c      	cmp	r4, r3
 8006422:	d1fa      	bne.n	800641a <USB_EPStartXfer+0x3de>
 8006424:	e6c2      	b.n	80061ac <USB_EPStartXfer+0x170>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006426:	f202 4502 	addw	r5, r2, #1026	; 0x402
 800642a:	fa15 f383 	uxtah	r3, r5, r3
 800642e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006432:	b284      	uxth	r4, r0
 8006434:	801c      	strh	r4, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006436:	4620      	mov	r0, r4
 8006438:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800643a:	890c      	ldrh	r4, [r1, #8]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800643c:	694b      	ldr	r3, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800643e:	f502 6c80 	add.w	ip, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 8006442:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006444:	44a4      	add	ip, r4
  for (count = n; count != 0U; count--)
 8006446:	f43f aeb1 	beq.w	80061ac <USB_EPStartXfer+0x170>
 800644a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800644e:	ebac 0c03 	sub.w	ip, ip, r3
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006452:	881c      	ldrh	r4, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8006454:	f823 400c 	strh.w	r4, [r3, ip]
    pBuf++;
 8006458:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 800645a:	4283      	cmp	r3, r0
 800645c:	d1f9      	bne.n	8006452 <USB_EPStartXfer+0x416>
 800645e:	e6a5      	b.n	80061ac <USB_EPStartXfer+0x170>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006460:	780e      	ldrb	r6, [r1, #0]
 8006462:	b234      	sxth	r4, r6
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006464:	f202 4502 	addw	r5, r2, #1026	; 0x402
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006468:	f832 0024 	ldrh.w	r0, [r2, r4, lsl #2]
 800646c:	f420 40e2 	bic.w	r0, r0, #28928	; 0x7100
 8006470:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 8006474:	0400      	lsls	r0, r0, #16
 8006476:	0c00      	lsrs	r0, r0, #16
 8006478:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 800647c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8006480:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006484:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 8006488:	b29f      	uxth	r7, r3
 800648a:	fa15 f384 	uxtah	r3, r5, r4
 800648e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006492:	1c78      	adds	r0, r7, #1
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006494:	801f      	strh	r7, [r3, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006496:	890d      	ldrh	r5, [r1, #8]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006498:	694b      	ldr	r3, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800649a:	f502 6480 	add.w	r4, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 800649e:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80064a0:	4425      	add	r5, r4
  for (count = n; count != 0U; count--)
 80064a2:	f43f ae83 	beq.w	80061ac <USB_EPStartXfer+0x170>
 80064a6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80064aa:	1aed      	subs	r5, r5, r3
    WrVal |= (uint16_t)pBuf[1] << 8;
 80064ac:	881c      	ldrh	r4, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80064ae:	535c      	strh	r4, [r3, r5]
    pBuf++;
 80064b0:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 80064b2:	4298      	cmp	r0, r3
 80064b4:	d1fa      	bne.n	80064ac <USB_EPStartXfer+0x470>
 80064b6:	e679      	b.n	80061ac <USB_EPStartXfer+0x170>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80064b8:	2d00      	cmp	r5, #0
 80064ba:	d177      	bne.n	80065ac <USB_EPStartXfer+0x570>
 80064bc:	f830 4033 	ldrh.w	r4, [r0, r3, lsl #3]
 80064c0:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 80064c4:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80064c8:	b2a4      	uxth	r4, r4
 80064ca:	f820 4033 	strh.w	r4, [r0, r3, lsl #3]
 80064ce:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 80064d2:	f202 4406 	addw	r4, r2, #1030	; 0x406
 80064d6:	fa14 f480 	uxtah	r4, r4, r0
 80064da:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 80064de:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80064e2:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
 80064e6:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 80064ea:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 80064ee:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 80064f2:	b280      	uxth	r0, r0
 80064f4:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
 80064f8:	e70c      	b.n	8006314 <USB_EPStartXfer+0x2d8>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80064fa:	2800      	cmp	r0, #0
 80064fc:	f47f aea4 	bne.w	8006248 <USB_EPStartXfer+0x20c>
 8006500:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 8006504:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8006508:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800650c:	b280      	uxth	r0, r0
 800650e:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
 8006512:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8006516:	f202 4406 	addw	r4, r2, #1030	; 0x406
 800651a:	fa14 f480 	uxtah	r4, r4, r0
 800651e:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 8006522:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8006526:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
 800652a:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 800652e:	e5d7      	b.n	80060e0 <USB_EPStartXfer+0xa4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006530:	f202 4702 	addw	r7, r2, #1026	; 0x402
 8006534:	fa17 f686 	uxtah	r6, r7, r6
 8006538:	fa1f f980 	uxth.w	r9, r0
 800653c:	f826 9035 	strh.w	r9, [r6, r5, lsl #3]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006540:	464f      	mov	r7, r9
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006542:	890e      	ldrh	r6, [r1, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006544:	f8d1 c014 	ldr.w	ip, [r1, #20]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006548:	3701      	adds	r7, #1
 800654a:	f502 6880 	add.w	r8, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 800654e:	087f      	lsrs	r7, r7, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006550:	4446      	add	r6, r8
  for (count = n; count != 0U; count--)
 8006552:	d00c      	beq.n	800656e <USB_EPStartXfer+0x532>
 8006554:	eba6 0a0c 	sub.w	sl, r6, ip
 8006558:	eb0c 0b47 	add.w	fp, ip, r7, lsl #1
  uint8_t *pBuf = pbUsrBuf;
 800655c:	46e6      	mov	lr, ip
    WrVal |= (uint16_t)pBuf[1] << 8;
 800655e:	f8be 6000 	ldrh.w	r6, [lr]
    *pdwVal = (WrVal & 0xFFFFU);
 8006562:	f82e 600a 	strh.w	r6, [lr, sl]
    pBuf++;
 8006566:	f10e 0e02 	add.w	lr, lr, #2
  for (count = n; count != 0U; count--)
 800656a:	45f3      	cmp	fp, lr
 800656c:	d1f7      	bne.n	800655e <USB_EPStartXfer+0x522>
            ep->xfer_buff += len;
 800656e:	eb0c 0600 	add.w	r6, ip, r0
            if (ep->xfer_len_db > ep->maxpacket)
 8006572:	429c      	cmp	r4, r3
            ep->xfer_buff += len;
 8006574:	614e      	str	r6, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8006576:	d23e      	bcs.n	80065f6 <USB_EPStartXfer+0x5ba>
              ep->xfer_len_db -= len;
 8006578:	1a1b      	subs	r3, r3, r0
 800657a:	620b      	str	r3, [r1, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800657c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8006580:	f202 4006 	addw	r0, r2, #1030	; 0x406
 8006584:	fa10 f383 	uxtah	r3, r0, r3
 8006588:	f823 9035 	strh.w	r9, [r3, r5, lsl #3]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800658c:	894b      	ldrh	r3, [r1, #10]
 800658e:	eb03 0508 	add.w	r5, r3, r8
  for (count = n; count != 0U; count--)
 8006592:	2f00      	cmp	r7, #0
 8006594:	f43f ae0a 	beq.w	80061ac <USB_EPStartXfer+0x170>
 8006598:	eb06 0447 	add.w	r4, r6, r7, lsl #1
  uint8_t *pBuf = pbUsrBuf;
 800659c:	4633      	mov	r3, r6
 800659e:	1bad      	subs	r5, r5, r6
    WrVal |= (uint16_t)pBuf[1] << 8;
 80065a0:	8818      	ldrh	r0, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80065a2:	5358      	strh	r0, [r3, r5]
    pBuf++;
 80065a4:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 80065a6:	429c      	cmp	r4, r3
 80065a8:	d1fa      	bne.n	80065a0 <USB_EPStartXfer+0x564>
 80065aa:	e5ff      	b.n	80061ac <USB_EPStartXfer+0x170>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80065ac:	f830 4033 	ldrh.w	r4, [r0, r3, lsl #3]
 80065b0:	086e      	lsrs	r6, r5, #1
 80065b2:	f015 0501 	ands.w	r5, r5, #1
 80065b6:	4637      	mov	r7, r6
 80065b8:	b2a4      	uxth	r4, r4
 80065ba:	bf18      	it	ne
 80065bc:	1c77      	addne	r7, r6, #1
 80065be:	ea44 2487 	orr.w	r4, r4, r7, lsl #10
 80065c2:	b2a4      	uxth	r4, r4
 80065c4:	f820 4033 	strh.w	r4, [r0, r3, lsl #3]
 80065c8:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 80065cc:	f202 4406 	addw	r4, r2, #1030	; 0x406
 80065d0:	fa14 f480 	uxtah	r4, r4, r0
 80065d4:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 80065d8:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80065dc:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
 80065e0:	b105      	cbz	r5, 80065e4 <USB_EPStartXfer+0x5a8>
 80065e2:	3601      	adds	r6, #1
 80065e4:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 80065e8:	b280      	uxth	r0, r0
 80065ea:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 80065ee:	b280      	uxth	r0, r0
 80065f0:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
 80065f4:	e68e      	b.n	8006314 <USB_EPStartXfer+0x2d8>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80065f6:	b29c      	uxth	r4, r3
 80065f8:	3401      	adds	r4, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80065fa:	fa1f f983 	uxth.w	r9, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80065fe:	0867      	lsrs	r7, r4, #1
              ep->xfer_len_db = 0U;
 8006600:	2300      	movs	r3, #0
 8006602:	e7ba      	b.n	800657a <USB_EPStartXfer+0x53e>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006604:	b29c      	uxth	r4, r3
 8006606:	3401      	adds	r4, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006608:	fa1f fa83 	uxth.w	sl, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800660c:	0867      	lsrs	r7, r4, #1
              ep->xfer_len_db = 0U;
 800660e:	2300      	movs	r3, #0
 8006610:	e6f0      	b.n	80063f4 <USB_EPStartXfer+0x3b8>
 8006612:	bf00      	nop

08006614 <USB_EPSetStall>:
  if (ep->is_in != 0U)
 8006614:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006616:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8006618:	b18b      	cbz	r3, 800663e <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800661a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800661e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006626:	041b      	lsls	r3, r3, #16
 8006628:	0c1b      	lsrs	r3, r3, #16
 800662a:	f083 0310 	eor.w	r3, r3, #16
 800662e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006636:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800663a:	2000      	movs	r0, #0
 800663c:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800663e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006642:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800664a:	041b      	lsls	r3, r3, #16
 800664c:	0c1b      	lsrs	r3, r3, #16
 800664e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800665a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800665e:	2000      	movs	r0, #0
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop

08006664 <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 8006664:	7b0b      	ldrb	r3, [r1, #12]
 8006666:	bb3b      	cbnz	r3, 80066b8 <USB_EPClearStall+0x54>
    if (ep->is_in != 0U)
 8006668:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800666a:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 800666c:	b333      	cbz	r3, 80066bc <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800666e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006672:	065b      	lsls	r3, r3, #25
 8006674:	d50d      	bpl.n	8006692 <USB_EPClearStall+0x2e>
 8006676:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800667a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800667e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006682:	041b      	lsls	r3, r3, #16
 8006684:	0c1b      	lsrs	r3, r3, #16
 8006686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800668a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800668e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8006692:	78cb      	ldrb	r3, [r1, #3]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d00f      	beq.n	80066b8 <USB_EPClearStall+0x54>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006698:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800669c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066a4:	041b      	lsls	r3, r3, #16
 80066a6:	0c1b      	lsrs	r3, r3, #16
 80066a8:	f083 0320 	eor.w	r3, r3, #32
 80066ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066b4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80066b8:	2000      	movs	r0, #0
 80066ba:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066bc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80066c0:	045b      	lsls	r3, r3, #17
 80066c2:	d50d      	bpl.n	80066e0 <USB_EPClearStall+0x7c>
 80066c4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80066c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066d0:	041b      	lsls	r3, r3, #16
 80066d2:	0c1b      	lsrs	r3, r3, #16
 80066d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066dc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066e0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80066e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ec:	041b      	lsls	r3, r3, #16
 80066ee:	0c1b      	lsrs	r3, r3, #16
 80066f0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80066f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066fc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8006700:	2000      	movs	r0, #0
 8006702:	4770      	bx	lr

08006704 <USB_SetDevAddress>:
  if (address == 0U)
 8006704:	b911      	cbnz	r1, 800670c <USB_SetDevAddress+0x8>
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006706:	2380      	movs	r3, #128	; 0x80
 8006708:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 800670c:	2000      	movs	r0, #0
 800670e:	4770      	bx	lr

08006710 <USB_DevConnect>:
{
 8006710:	4602      	mov	r2, r0
}
 8006712:	2000      	movs	r0, #0
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006714:	f8b2 3058 	ldrh.w	r3, [r2, #88]	; 0x58
 8006718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800671c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006720:	b29b      	uxth	r3, r3
 8006722:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58
}
 8006726:	4770      	bx	lr

08006728 <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 8006728:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
}
 800672c:	b280      	uxth	r0, r0
 800672e:	4770      	bx	lr

08006730 <USB_WritePMA>:
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006730:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006734:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006736:	4410      	add	r0, r2
  for (count = n; count != 0U; count--)
 8006738:	085a      	lsrs	r2, r3, #1
 800673a:	d008      	beq.n	800674e <USB_WritePMA+0x1e>
  uint8_t *pBuf = pbUsrBuf;
 800673c:	460b      	mov	r3, r1
 800673e:	1ac0      	subs	r0, r0, r3
 8006740:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006744:	881a      	ldrh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8006746:	521a      	strh	r2, [r3, r0]
    pBuf++;
 8006748:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 800674a:	4299      	cmp	r1, r3
 800674c:	d1fa      	bne.n	8006744 <USB_WritePMA+0x14>
  }
}
 800674e:	4770      	bx	lr

08006750 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006750:	b570      	push	{r4, r5, r6, lr}
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006752:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (count = n; count != 0U; count--)
 8006756:	085e      	lsrs	r6, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006758:	4410      	add	r0, r2
  for (count = n; count != 0U; count--)
 800675a:	d01c      	beq.n	8006796 <USB_ReadPMA+0x46>
 800675c:	f06f 0501 	mvn.w	r5, #1
 8006760:	1a6d      	subs	r5, r5, r1
 8006762:	1c8a      	adds	r2, r1, #2
 8006764:	4405      	add	r5, r0
 8006766:	46b6      	mov	lr, r6
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006768:	f835 c002 	ldrh.w	ip, [r5, r2]
  for (count = n; count != 0U; count--)
 800676c:	3202      	adds	r2, #2
    RdVal = *(__IO uint16_t *)pdwVal;
 800676e:	fa1f fc8c 	uxth.w	ip, ip
    pdwVal++;
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006772:	ea4f 241c 	mov.w	r4, ip, lsr #8
  for (count = n; count != 0U; count--)
 8006776:	f1be 0e01 	subs.w	lr, lr, #1
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800677a:	f802 cc04 	strb.w	ip, [r2, #-4]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800677e:	f802 4c03 	strb.w	r4, [r2, #-3]
  for (count = n; count != 0U; count--)
 8006782:	d1f1      	bne.n	8006768 <USB_ReadPMA+0x18>
    pdwVal++;
 8006784:	eb00 0246 	add.w	r2, r0, r6, lsl #1
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006788:	07db      	lsls	r3, r3, #31
    pBuf++;
 800678a:	eb01 0146 	add.w	r1, r1, r6, lsl #1
  {
    RdVal = *pdwVal;
 800678e:	bf44      	itt	mi
 8006790:	8813      	ldrhmi	r3, [r2, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006792:	700b      	strbmi	r3, [r1, #0]
  }
}
 8006794:	bd70      	pop	{r4, r5, r6, pc}
 8006796:	4602      	mov	r2, r0
  if ((wNBytes % 2U) != 0U)
 8006798:	07db      	lsls	r3, r3, #31
    RdVal = *pdwVal;
 800679a:	bf44      	itt	mi
 800679c:	8813      	ldrhmi	r3, [r2, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800679e:	700b      	strbmi	r3, [r1, #0]
}
 80067a0:	bd70      	pop	{r4, r5, r6, pc}
 80067a2:	bf00      	nop

080067a4 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067a4:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 80067a8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
{
 80067ac:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067ae:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0

  if (hcdc == NULL)
 80067b2:	b184      	cbz	r4, 80067d6 <USBD_CDC_EP0_RxReady+0x32>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80067b4:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
 80067b8:	b15b      	cbz	r3, 80067d2 <USBD_CDC_EP0_RxReady+0x2e>
 80067ba:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80067be:	28ff      	cmp	r0, #255	; 0xff
 80067c0:	d007      	beq.n	80067d2 <USBD_CDC_EP0_RxReady+0x2e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80067c8:	4621      	mov	r1, r4
 80067ca:	4798      	blx	r3
                                                                     (uint8_t *)hcdc->data,
                                                                     (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80067cc:	23ff      	movs	r3, #255	; 0xff
 80067ce:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80067d2:	2000      	movs	r0, #0
}
 80067d4:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 80067d6:	2003      	movs	r0, #3
}
 80067d8:	bd10      	pop	{r4, pc}
 80067da:	bf00      	nop

080067dc <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80067dc:	230a      	movs	r3, #10
 80067de:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 80067e0:	4800      	ldr	r0, [pc, #0]	; (80067e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80067e2:	4770      	bx	lr
 80067e4:	20000090 	.word	0x20000090

080067e8 <USBD_CDC_GetFSCfgDesc>:
{
 80067e8:	b570      	push	{r4, r5, r6, lr}
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80067ea:	2182      	movs	r1, #130	; 0x82
{
 80067ec:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80067ee:	480f      	ldr	r0, [pc, #60]	; (800682c <USBD_CDC_GetFSCfgDesc+0x44>)
 80067f0:	f000 fbac 	bl	8006f4c <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80067f4:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80067f6:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80067f8:	480c      	ldr	r0, [pc, #48]	; (800682c <USBD_CDC_GetFSCfgDesc+0x44>)
 80067fa:	f000 fba7 	bl	8006f4c <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80067fe:	2181      	movs	r1, #129	; 0x81
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006800:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006802:	480a      	ldr	r0, [pc, #40]	; (800682c <USBD_CDC_GetFSCfgDesc+0x44>)
 8006804:	f000 fba2 	bl	8006f4c <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8006808:	b10d      	cbz	r5, 800680e <USBD_CDC_GetFSCfgDesc+0x26>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800680a:	2210      	movs	r2, #16
 800680c:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 800680e:	b11c      	cbz	r4, 8006818 <USBD_CDC_GetFSCfgDesc+0x30>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006810:	2200      	movs	r2, #0
 8006812:	2140      	movs	r1, #64	; 0x40
 8006814:	7121      	strb	r1, [r4, #4]
 8006816:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8006818:	b118      	cbz	r0, 8006822 <USBD_CDC_GetFSCfgDesc+0x3a>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800681a:	2200      	movs	r2, #0
 800681c:	2140      	movs	r1, #64	; 0x40
 800681e:	7101      	strb	r1, [r0, #4]
 8006820:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006822:	2343      	movs	r3, #67	; 0x43
}
 8006824:	4801      	ldr	r0, [pc, #4]	; (800682c <USBD_CDC_GetFSCfgDesc+0x44>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006826:	8033      	strh	r3, [r6, #0]
}
 8006828:	bd70      	pop	{r4, r5, r6, pc}
 800682a:	bf00      	nop
 800682c:	2000004c 	.word	0x2000004c

08006830 <USBD_CDC_GetHSCfgDesc>:
{
 8006830:	b570      	push	{r4, r5, r6, lr}
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006832:	2182      	movs	r1, #130	; 0x82
{
 8006834:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006836:	480f      	ldr	r0, [pc, #60]	; (8006874 <USBD_CDC_GetHSCfgDesc+0x44>)
 8006838:	f000 fb88 	bl	8006f4c <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800683c:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800683e:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006840:	480c      	ldr	r0, [pc, #48]	; (8006874 <USBD_CDC_GetHSCfgDesc+0x44>)
 8006842:	f000 fb83 	bl	8006f4c <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006846:	2181      	movs	r1, #129	; 0x81
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006848:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800684a:	480a      	ldr	r0, [pc, #40]	; (8006874 <USBD_CDC_GetHSCfgDesc+0x44>)
 800684c:	f000 fb7e 	bl	8006f4c <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8006850:	b10d      	cbz	r5, 8006856 <USBD_CDC_GetHSCfgDesc+0x26>
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006852:	2210      	movs	r2, #16
 8006854:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8006856:	b11c      	cbz	r4, 8006860 <USBD_CDC_GetHSCfgDesc+0x30>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006858:	2100      	movs	r1, #0
 800685a:	2202      	movs	r2, #2
 800685c:	7121      	strb	r1, [r4, #4]
 800685e:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8006860:	b118      	cbz	r0, 800686a <USBD_CDC_GetHSCfgDesc+0x3a>
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006862:	2100      	movs	r1, #0
 8006864:	2202      	movs	r2, #2
 8006866:	7101      	strb	r1, [r0, #4]
 8006868:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800686a:	2343      	movs	r3, #67	; 0x43
}
 800686c:	4801      	ldr	r0, [pc, #4]	; (8006874 <USBD_CDC_GetHSCfgDesc+0x44>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800686e:	8033      	strh	r3, [r6, #0]
}
 8006870:	bd70      	pop	{r4, r5, r6, pc}
 8006872:	bf00      	nop
 8006874:	2000004c 	.word	0x2000004c

08006878 <USBD_CDC_DataOut>:
{
 8006878:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800687a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 800687e:	33b0      	adds	r3, #176	; 0xb0
 8006880:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006884:	b195      	cbz	r5, 80068ac <USBD_CDC_DataOut+0x34>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006886:	4604      	mov	r4, r0
 8006888:	f001 fa74 	bl	8007d74 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800688c:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006890:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006894:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8006898:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800689c:	f8d4 32c4 	ldr.w	r3, [r4, #708]	; 0x2c4
 80068a0:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80068a8:	2000      	movs	r0, #0
}
 80068aa:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 80068ac:	2003      	movs	r0, #3
}
 80068ae:	bd38      	pop	{r3, r4, r5, pc}

080068b0 <USBD_CDC_DataIn>:
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80068b0:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
{
 80068b4:	b570      	push	{r4, r5, r6, lr}
 80068b6:	eb00 0e83 	add.w	lr, r0, r3, lsl #2
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80068ba:	f8de 52c0 	ldr.w	r5, [lr, #704]	; 0x2c0
 80068be:	b35d      	cbz	r5, 8006918 <USBD_CDC_DataIn+0x68>
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80068c0:	f001 030f 	and.w	r3, r1, #15
 80068c4:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80068c8:	eb00 068c 	add.w	r6, r0, ip, lsl #2
 80068cc:	460a      	mov	r2, r1
 80068ce:	69b3      	ldr	r3, [r6, #24]
 80068d0:	b96b      	cbnz	r3, 80068ee <USBD_CDC_DataIn+0x3e>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80068d2:	f8de 32c4 	ldr.w	r3, [lr, #708]	; 0x2c4
 80068d6:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 80068d8:	2400      	movs	r4, #0
 80068da:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80068de:	b1cb      	cbz	r3, 8006914 <USBD_CDC_DataIn+0x64>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80068e0:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 80068e4:	f505 7104 	add.w	r1, r5, #528	; 0x210
 80068e8:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80068ea:	4620      	mov	r0, r4
}
 80068ec:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80068ee:	f8d0 42c8 	ldr.w	r4, [r0, #712]	; 0x2c8
 80068f2:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 80068f6:	f8dc 4038 	ldr.w	r4, [ip, #56]	; 0x38
 80068fa:	fbb3 fcf4 	udiv	ip, r3, r4
 80068fe:	fb04 341c 	mls	r4, r4, ip, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006902:	2c00      	cmp	r4, #0
 8006904:	d1e5      	bne.n	80068d2 <USBD_CDC_DataIn+0x22>
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006906:	61b4      	str	r4, [r6, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006908:	4623      	mov	r3, r4
 800690a:	4622      	mov	r2, r4
 800690c:	f001 fa16 	bl	8007d3c <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8006910:	4620      	mov	r0, r4
}
 8006912:	bd70      	pop	{r4, r5, r6, pc}
  return (uint8_t)USBD_OK;
 8006914:	4618      	mov	r0, r3
}
 8006916:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_FAIL;
 8006918:	2003      	movs	r0, #3
}
 800691a:	bd70      	pop	{r4, r5, r6, pc}

0800691c <USBD_CDC_Setup>:
{
 800691c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800691e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8006922:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006926:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006928:	f8d3 72c0 	ldr.w	r7, [r3, #704]	; 0x2c0
{
 800692c:	4604      	mov	r4, r0
  uint8_t ifalt = 0U;
 800692e:	2000      	movs	r0, #0
 8006930:	f88d 0005 	strb.w	r0, [sp, #5]
  uint16_t status_info = 0U;
 8006934:	f8ad 0006 	strh.w	r0, [sp, #6]
  if (hcdc == NULL)
 8006938:	2f00      	cmp	r7, #0
 800693a:	d068      	beq.n	8006a0e <USBD_CDC_Setup+0xf2>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800693c:	f891 c000 	ldrb.w	ip, [r1]
 8006940:	f01c 0660 	ands.w	r6, ip, #96	; 0x60
 8006944:	460d      	mov	r5, r1
 8006946:	d01f      	beq.n	8006988 <USBD_CDC_Setup+0x6c>
 8006948:	2e20      	cmp	r6, #32
 800694a:	d007      	beq.n	800695c <USBD_CDC_Setup+0x40>
          USBD_CtlError(pdev, req);
 800694c:	4629      	mov	r1, r5
 800694e:	4620      	mov	r0, r4
 8006950:	f000 fdd8 	bl	8007504 <USBD_CtlError>
          ret = USBD_FAIL;
 8006954:	2603      	movs	r6, #3
}
 8006956:	4630      	mov	r0, r6
 8006958:	b003      	add	sp, #12
 800695a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (req->wLength != 0U)
 800695c:	88ce      	ldrh	r6, [r1, #6]
 800695e:	b38e      	cbz	r6, 80069c4 <USBD_CDC_Setup+0xa8>
        if ((req->bmRequest & 0x80U) != 0U)
 8006960:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8006964:	d157      	bne.n	8006a16 <USBD_CDC_Setup+0xfa>
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006966:	2e3f      	cmp	r6, #63	; 0x3f
          hcdc->CmdOpCode = req->bRequest;
 8006968:	784b      	ldrb	r3, [r1, #1]
 800696a:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800696e:	bf95      	itete	ls
 8006970:	4632      	movls	r2, r6
 8006972:	2340      	movhi	r3, #64	; 0x40
 8006974:	b2d3      	uxtbls	r3, r2
 8006976:	461a      	movhi	r2, r3
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006978:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800697c:	4639      	mov	r1, r7
 800697e:	4620      	mov	r0, r4
 8006980:	f000 fe0c 	bl	800759c <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8006984:	2600      	movs	r6, #0
 8006986:	e7e6      	b.n	8006956 <USBD_CDC_Setup+0x3a>
      switch (req->bRequest)
 8006988:	784f      	ldrb	r7, [r1, #1]
 800698a:	2f0b      	cmp	r7, #11
 800698c:	d8de      	bhi.n	800694c <USBD_CDC_Setup+0x30>
 800698e:	a301      	add	r3, pc, #4	; (adr r3, 8006994 <USBD_CDC_Setup+0x78>)
 8006990:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 8006994:	080069f7 	.word	0x080069f7
 8006998:	08006957 	.word	0x08006957
 800699c:	0800694d 	.word	0x0800694d
 80069a0:	0800694d 	.word	0x0800694d
 80069a4:	0800694d 	.word	0x0800694d
 80069a8:	0800694d 	.word	0x0800694d
 80069ac:	0800694d 	.word	0x0800694d
 80069b0:	0800694d 	.word	0x0800694d
 80069b4:	0800694d 	.word	0x0800694d
 80069b8:	0800694d 	.word	0x0800694d
 80069bc:	080069e1 	.word	0x080069e1
 80069c0:	080069d7 	.word	0x080069d7
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80069c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80069c8:	7848      	ldrb	r0, [r1, #1]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	4632      	mov	r2, r6
 80069ce:	4798      	blx	r3
}
 80069d0:	4630      	mov	r0, r6
 80069d2:	b003      	add	sp, #12
 80069d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80069d6:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80069da:	2b03      	cmp	r3, #3
 80069dc:	d0bb      	beq.n	8006956 <USBD_CDC_Setup+0x3a>
 80069de:	e7b5      	b.n	800694c <USBD_CDC_Setup+0x30>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069e0:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80069e4:	2b03      	cmp	r3, #3
 80069e6:	d1b1      	bne.n	800694c <USBD_CDC_Setup+0x30>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80069e8:	2201      	movs	r2, #1
 80069ea:	f10d 0105 	add.w	r1, sp, #5
 80069ee:	4620      	mov	r0, r4
 80069f0:	f000 fdbe 	bl	8007570 <USBD_CtlSendData>
 80069f4:	e7af      	b.n	8006956 <USBD_CDC_Setup+0x3a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069f6:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80069fa:	2b03      	cmp	r3, #3
 80069fc:	d1a6      	bne.n	800694c <USBD_CDC_Setup+0x30>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80069fe:	2202      	movs	r2, #2
 8006a00:	f10d 0106 	add.w	r1, sp, #6
 8006a04:	4620      	mov	r0, r4
 8006a06:	f000 fdb3 	bl	8007570 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8006a0a:	463e      	mov	r6, r7
 8006a0c:	e7a3      	b.n	8006956 <USBD_CDC_Setup+0x3a>
    return (uint8_t)USBD_FAIL;
 8006a0e:	2603      	movs	r6, #3
}
 8006a10:	4630      	mov	r0, r6
 8006a12:	b003      	add	sp, #12
 8006a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006a16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a1a:	4632      	mov	r2, r6
 8006a1c:	4639      	mov	r1, r7
 8006a1e:	689b      	ldr	r3, [r3, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a20:	4606      	mov	r6, r0
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006a22:	7868      	ldrb	r0, [r5, #1]
 8006a24:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006a26:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006a28:	2a07      	cmp	r2, #7
 8006a2a:	4639      	mov	r1, r7
 8006a2c:	bf28      	it	cs
 8006a2e:	2207      	movcs	r2, #7
 8006a30:	4620      	mov	r0, r4
 8006a32:	f000 fd9d 	bl	8007570 <USBD_CtlSendData>
 8006a36:	e78e      	b.n	8006956 <USBD_CDC_Setup+0x3a>

08006a38 <USBD_CDC_DeInit>:
{
 8006a38:	b538      	push	{r3, r4, r5, lr}
 8006a3a:	4604      	mov	r4, r0
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006a3c:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006a3e:	2181      	movs	r1, #129	; 0x81
 8006a40:	f001 f930 	bl	8007ca4 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006a44:	2101      	movs	r1, #1
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006a46:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006a48:	4620      	mov	r0, r4
 8006a4a:	f001 f92b 	bl	8007ca4 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006a4e:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006a52:	2182      	movs	r1, #130	; 0x82
 8006a54:	4620      	mov	r0, r4
 8006a56:	f001 f925 	bl	8007ca4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006a5a:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006a5e:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006a60:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006a64:	f8d3 22c0 	ldr.w	r2, [r3, #704]	; 0x2c0
 8006a68:	b18a      	cbz	r2, 8006a8e <USBD_CDC_DeInit+0x56>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006a6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006a72:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8006a76:	33b0      	adds	r3, #176	; 0xb0
 8006a78:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8006a7c:	f001 f9aa 	bl	8007dd4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006a80:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8006a84:	33b0      	adds	r3, #176	; 0xb0
 8006a86:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 8006a8a:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8006a8e:	2000      	movs	r0, #0
 8006a90:	bd38      	pop	{r3, r4, r5, pc}
 8006a92:	bf00      	nop

08006a94 <USBD_CDC_Init>:
{
 8006a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a98:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006a9a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006a9e:	f001 f995 	bl	8007dcc <USBD_static_malloc>
  if (hcdc == NULL)
 8006aa2:	4605      	mov	r5, r0
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	d05c      	beq.n	8006b62 <USBD_CDC_Init+0xce>
  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006aa8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006aac:	2100      	movs	r1, #0
 8006aae:	f001 f9e9 	bl	8007e84 <memset>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006ab2:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8006ab6:	33b0      	adds	r3, #176	; 0xb0
 8006ab8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006abc:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006abe:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ac2:	b3cb      	cbz	r3, 8006b38 <USBD_CDC_Init+0xa4>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006ac4:	2340      	movs	r3, #64	; 0x40
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006aca:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006acc:	4620      	mov	r0, r4
 8006ace:	f001 f8d9 	bl	8007c84 <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006ad2:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006ad4:	2340      	movs	r3, #64	; 0x40
 8006ad6:	4631      	mov	r1, r6
 8006ad8:	2202      	movs	r2, #2
 8006ada:	4620      	mov	r0, r4
 8006adc:	f001 f8d2 	bl	8007c84 <USBD_LL_OpenEP>
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006ae0:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006ae2:	2203      	movs	r2, #3
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006ae4:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006ae8:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006aec:	2182      	movs	r1, #130	; 0x82
 8006aee:	2308      	movs	r3, #8
 8006af0:	4620      	mov	r0, r4
 8006af2:	f001 f8c7 	bl	8007c84 <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006af6:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8006afa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  hcdc->RxBuffer = NULL;
 8006afe:	2600      	movs	r6, #0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006b00:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006b04:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006b08:	681b      	ldr	r3, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006b0a:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  hcdc->RxBuffer = NULL;
 8006b0e:	f8c5 6204 	str.w	r6, [r5, #516]	; 0x204
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006b12:	4798      	blx	r3
  if (hcdc->RxBuffer == NULL)
 8006b14:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
  hcdc->TxState = 0U;
 8006b18:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 8006b1c:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
  if (hcdc->RxBuffer == NULL)
 8006b20:	b342      	cbz	r2, 8006b74 <USBD_CDC_Init+0xe0>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b22:	7c27      	ldrb	r7, [r4, #16]
 8006b24:	b9a7      	cbnz	r7, 8006b50 <USBD_CDC_Init+0xbc>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b2a:	4641      	mov	r1, r8
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	f001 f913 	bl	8007d58 <USBD_LL_PrepareReceive>
}
 8006b32:	4638      	mov	r0, r7
 8006b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006b38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b3c:	2202      	movs	r2, #2
 8006b3e:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006b40:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006b42:	4620      	mov	r0, r4
 8006b44:	f001 f89e 	bl	8007c84 <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006b48:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006b4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b4e:	e7c2      	b.n	8006ad6 <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b50:	2340      	movs	r3, #64	; 0x40
 8006b52:	4641      	mov	r1, r8
 8006b54:	4620      	mov	r0, r4
  return (uint8_t)USBD_OK;
 8006b56:	4637      	mov	r7, r6
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b58:	f001 f8fe 	bl	8007d58 <USBD_LL_PrepareReceive>
}
 8006b5c:	4638      	mov	r0, r7
 8006b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b62:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8006b66:	33b0      	adds	r3, #176	; 0xb0
    return (uint8_t)USBD_EMEM;
 8006b68:	2702      	movs	r7, #2
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b6a:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
}
 8006b6e:	4638      	mov	r0, r7
 8006b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 8006b74:	2702      	movs	r7, #2
 8006b76:	e7dc      	b.n	8006b32 <USBD_CDC_Init+0x9e>

08006b78 <USBD_CDC_GetOtherSpeedCfgDesc>:
 8006b78:	b570      	push	{r4, r5, r6, lr}
 8006b7a:	2182      	movs	r1, #130	; 0x82
 8006b7c:	4606      	mov	r6, r0
 8006b7e:	480f      	ldr	r0, [pc, #60]	; (8006bbc <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8006b80:	f000 f9e4 	bl	8006f4c <USBD_GetEpDesc>
 8006b84:	2101      	movs	r1, #1
 8006b86:	4605      	mov	r5, r0
 8006b88:	480c      	ldr	r0, [pc, #48]	; (8006bbc <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8006b8a:	f000 f9df 	bl	8006f4c <USBD_GetEpDesc>
 8006b8e:	2181      	movs	r1, #129	; 0x81
 8006b90:	4604      	mov	r4, r0
 8006b92:	480a      	ldr	r0, [pc, #40]	; (8006bbc <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8006b94:	f000 f9da 	bl	8006f4c <USBD_GetEpDesc>
 8006b98:	b10d      	cbz	r5, 8006b9e <USBD_CDC_GetOtherSpeedCfgDesc+0x26>
 8006b9a:	2210      	movs	r2, #16
 8006b9c:	71aa      	strb	r2, [r5, #6]
 8006b9e:	b11c      	cbz	r4, 8006ba8 <USBD_CDC_GetOtherSpeedCfgDesc+0x30>
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	2140      	movs	r1, #64	; 0x40
 8006ba4:	7121      	strb	r1, [r4, #4]
 8006ba6:	7162      	strb	r2, [r4, #5]
 8006ba8:	b118      	cbz	r0, 8006bb2 <USBD_CDC_GetOtherSpeedCfgDesc+0x3a>
 8006baa:	2200      	movs	r2, #0
 8006bac:	2140      	movs	r1, #64	; 0x40
 8006bae:	7101      	strb	r1, [r0, #4]
 8006bb0:	7142      	strb	r2, [r0, #5]
 8006bb2:	2343      	movs	r3, #67	; 0x43
 8006bb4:	4801      	ldr	r0, [pc, #4]	; (8006bbc <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8006bb6:	8033      	strh	r3, [r6, #0]
 8006bb8:	bd70      	pop	{r4, r5, r6, pc}
 8006bba:	bf00      	nop
 8006bbc:	2000004c 	.word	0x2000004c

08006bc0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006bc0:	4603      	mov	r3, r0
  if (fops == NULL)
 8006bc2:	b139      	cbz	r1, 8006bd4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 8006bc4:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 8006bc8:	eb03 0382 	add.w	r3, r3, r2, lsl #2

  return (uint8_t)USBD_OK;
 8006bcc:	2000      	movs	r0, #0
  pdev->pUserData[pdev->classId] = fops;
 8006bce:	f8c3 12c4 	str.w	r1, [r3, #708]	; 0x2c4
  return (uint8_t)USBD_OK;
 8006bd2:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8006bd4:	2003      	movs	r0, #3
}
 8006bd6:	4770      	bx	lr

08006bd8 <USBD_CDC_SetTxBuffer>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bd8:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8006bdc:	33b0      	adds	r3, #176	; 0xb0
 8006bde:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006be2:	b12b      	cbz	r3, 8006bf0 <USBD_CDC_SetTxBuffer+0x18>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8006be4:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006be8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006bec:	2000      	movs	r0, #0
 8006bee:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8006bf0:	2003      	movs	r0, #3
}
 8006bf2:	4770      	bx	lr

08006bf4 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bf4:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8006bf8:	33b0      	adds	r3, #176	; 0xb0
 8006bfa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 8006bfe:	b11b      	cbz	r3, 8006c08 <USBD_CDC_SetRxBuffer+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8006c00:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006c04:	2000      	movs	r0, #0
 8006c06:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8006c08:	2003      	movs	r0, #3
}
 8006c0a:	4770      	bx	lr

08006c0c <USBD_CDC_TransmitPacket>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c0c:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8006c10:	33b0      	adds	r3, #176	; 0xb0
 8006c12:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006c16:	b192      	cbz	r2, 8006c3e <USBD_CDC_TransmitPacket+0x32>
{
 8006c18:	b510      	push	{r4, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 8006c1a:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8006c1e:	b10c      	cbz	r4, 8006c24 <USBD_CDC_TransmitPacket+0x18>
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006c20:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 8006c22:	bd10      	pop	{r4, pc}
    hcdc->TxState = 1U;
 8006c24:	2301      	movs	r3, #1
 8006c26:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006c2a:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006c2e:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006c32:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006c34:	2181      	movs	r1, #129	; 0x81
 8006c36:	f001 f881 	bl	8007d3c <USBD_LL_Transmit>
    ret = USBD_OK;
 8006c3a:	4620      	mov	r0, r4
}
 8006c3c:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8006c3e:	2003      	movs	r0, #3
}
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop

08006c44 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c44:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 8006c48:	32b0      	adds	r2, #176	; 0xb0
{
 8006c4a:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c4c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c50:	b18a      	cbz	r2, 8006c76 <USBD_CDC_ReceivePacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c52:	7c04      	ldrb	r4, [r0, #16]
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c54:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c58:	b134      	cbz	r4, 8006c68 <USBD_CDC_ReceivePacket+0x24>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c5a:	2340      	movs	r3, #64	; 0x40
 8006c5c:	2101      	movs	r1, #1
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c5e:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c60:	f001 f87a 	bl	8007d58 <USBD_LL_PrepareReceive>
}
 8006c64:	4620      	mov	r0, r4
 8006c66:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c6c:	2101      	movs	r1, #1
 8006c6e:	f001 f873 	bl	8007d58 <USBD_LL_PrepareReceive>
}
 8006c72:	4620      	mov	r0, r4
 8006c74:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8006c76:	2403      	movs	r4, #3
}
 8006c78:	4620      	mov	r0, r4
 8006c7a:	bd10      	pop	{r4, pc}

08006c7c <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c7c:	b178      	cbz	r0, 8006c9e <USBD_Init+0x22>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006c84:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006c88:	f8c0 32d0 	str.w	r3, [r0, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006c8c:	b109      	cbz	r1, 8006c92 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8006c8e:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c92:	2301      	movs	r3, #1
 8006c94:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 8006c98:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006c9a:	f000 bf99 	b.w	8007bd0 <USBD_LL_Init>

  return ret;
}
 8006c9e:	2003      	movs	r0, #3
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop

08006ca4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006ca4:	b510      	push	{r4, lr}
 8006ca6:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8006cae:	b189      	cbz	r1, 8006cd4 <USBD_RegisterClass+0x30>
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006cb0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  pdev->pClass[0] = pclass;
 8006cb2:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	b123      	cbz	r3, 8006cc4 <USBD_RegisterClass+0x20>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006cba:	f10d 0006 	add.w	r0, sp, #6
 8006cbe:	4798      	blx	r3
 8006cc0:	f8c4 02d0 	str.w	r0, [r4, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006cc4:	f8d4 32d8 	ldr.w	r3, [r4, #728]	; 0x2d8

  return USBD_OK;
 8006cc8:	2000      	movs	r0, #0
  pdev->NumClasses ++;
 8006cca:	3301      	adds	r3, #1
 8006ccc:	f8c4 32d8 	str.w	r3, [r4, #728]	; 0x2d8
}
 8006cd0:	b002      	add	sp, #8
 8006cd2:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8006cd4:	2003      	movs	r0, #3
}
 8006cd6:	b002      	add	sp, #8
 8006cd8:	bd10      	pop	{r4, pc}
 8006cda:	bf00      	nop

08006cdc <USBD_Start>:
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006cdc:	f000 bfc4 	b.w	8007c68 <USBD_LL_Start>

08006ce0 <USBD_SetClassConfig>:
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006ce0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006ce4:	b10b      	cbz	r3, 8006cea <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4718      	bx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop

08006cf0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cf0:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006cf2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	4798      	blx	r3
  {
    ret = USBD_FAIL;
 8006cfa:	2800      	cmp	r0, #0
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8006cfc:	bf18      	it	ne
 8006cfe:	2003      	movne	r0, #3
 8006d00:	bd08      	pop	{r3, pc}
 8006d02:	bf00      	nop

08006d04 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d04:	b538      	push	{r3, r4, r5, lr}
 8006d06:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d08:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	f000 fbed 	bl	80074ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8006d12:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 8006d16:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	; 0x2b0
 8006d1a:	f8c4 2298 	str.w	r2, [r4, #664]	; 0x298
  pdev->ep0_state = USBD_EP0_SETUP;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 8006d24:	f001 031f 	and.w	r3, r1, #31
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d009      	beq.n	8006d40 <USBD_LL_SetupStage+0x3c>
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d013      	beq.n	8006d58 <USBD_LL_SetupStage+0x54>
 8006d30:	b163      	cbz	r3, 8006d4c <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d32:	4620      	mov	r0, r4
 8006d34:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 8006d38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d3c:	f000 bfc0 	b.w	8007cc0 <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006d40:	4629      	mov	r1, r5
 8006d42:	4620      	mov	r0, r4
}
 8006d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006d48:	f000 baea 	b.w	8007320 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006d4c:	4629      	mov	r1, r5
 8006d4e:	4620      	mov	r0, r4
}
 8006d50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006d54:	f000 b910 	b.w	8006f78 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006d58:	4629      	mov	r1, r5
 8006d5a:	4620      	mov	r0, r4
}
 8006d5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006d60:	f000 bb18 	b.w	8007394 <USBD_StdEPReq>

08006d64 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006d64:	b510      	push	{r4, lr}
 8006d66:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
  uint8_t idx;

  if (epnum == 0U)
 8006d68:	b931      	cbnz	r1, 8006d78 <USBD_LL_DataOutStage+0x14>
 8006d6a:	4694      	mov	ip, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006d6c:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8006d70:	2a03      	cmp	r2, #3
 8006d72:	d010      	beq.n	8006d96 <USBD_LL_DataOutStage+0x32>
      }
    }
  }

  return USBD_OK;
}
 8006d74:	2000      	movs	r0, #0
 8006d76:	bd10      	pop	{r4, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d78:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006d7c:	2b03      	cmp	r3, #3
 8006d7e:	d1f9      	bne.n	8006d74 <USBD_LL_DataOutStage+0x10>
        if (pdev->pClass[idx]->DataOut != NULL)
 8006d80:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d0f4      	beq.n	8006d74 <USBD_LL_DataOutStage+0x10>
          pdev->classId = idx;
 8006d8a:	2200      	movs	r2, #0
}
 8006d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          pdev->classId = idx;
 8006d90:	f8c0 22d4 	str.w	r2, [r0, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006d94:	4718      	bx	r3
 8006d96:	460b      	mov	r3, r1
      if (pep->rem_length > pep->maxpacket)
 8006d98:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	; 0x15c
 8006d9c:	4291      	cmp	r1, r2
 8006d9e:	d808      	bhi.n	8006db2 <USBD_LL_DataOutStage+0x4e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8006da4:	2a03      	cmp	r2, #3
 8006da6:	d00e      	beq.n	8006dc6 <USBD_LL_DataOutStage+0x62>
        (void)USBD_CtlSendStatus(pdev);
 8006da8:	4620      	mov	r0, r4
 8006daa:	f000 fc0d 	bl	80075c8 <USBD_CtlSendStatus>
}
 8006dae:	2000      	movs	r0, #0
 8006db0:	bd10      	pop	{r4, pc}
        pep->rem_length -= pep->maxpacket;
 8006db2:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006db4:	428a      	cmp	r2, r1
 8006db6:	bf28      	it	cs
 8006db8:	460a      	movcs	r2, r1
        pep->rem_length -= pep->maxpacket;
 8006dba:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006dbe:	4661      	mov	r1, ip
 8006dc0:	f000 fbfa 	bl	80075b8 <USBD_CtlContinueRx>
 8006dc4:	e7d6      	b.n	8006d74 <USBD_LL_DataOutStage+0x10>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006dc6:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8006dca:	6912      	ldr	r2, [r2, #16]
 8006dcc:	2a00      	cmp	r2, #0
 8006dce:	d0eb      	beq.n	8006da8 <USBD_LL_DataOutStage+0x44>
              pdev->classId = idx;
 8006dd0:	f8c0 32d4 	str.w	r3, [r0, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006dd4:	4790      	blx	r2
 8006dd6:	e7e7      	b.n	8006da8 <USBD_LL_DataOutStage+0x44>

08006dd8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006dd8:	b570      	push	{r4, r5, r6, lr}
 8006dda:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006ddc:	b961      	cbnz	r1, 8006df8 <USBD_LL_DataInStage+0x20>
 8006dde:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006de0:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8006de4:	2a02      	cmp	r2, #2
 8006de6:	d016      	beq.n	8006e16 <USBD_LL_DataInStage+0x3e>
          (void)USBD_CtlReceiveStatus(pdev);
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006de8:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8006dec:	b113      	cbz	r3, 8006df4 <USBD_LL_DataInStage+0x1c>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8006dee:	2300      	movs	r3, #0
 8006df0:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
      }
    }
  }

  return USBD_OK;
}
 8006df4:	2000      	movs	r0, #0
 8006df6:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006df8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006dfc:	2b03      	cmp	r3, #3
 8006dfe:	d1f9      	bne.n	8006df4 <USBD_LL_DataInStage+0x1c>
        if (pdev->pClass[idx]->DataIn != NULL)
 8006e00:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d0f4      	beq.n	8006df4 <USBD_LL_DataInStage+0x1c>
          pdev->classId = idx;
 8006e0a:	2200      	movs	r2, #0
}
 8006e0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 8006e10:	f8c0 22d4 	str.w	r2, [r0, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006e14:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 8006e16:	e9d0 2607 	ldrd	r2, r6, [r0, #28]
 8006e1a:	42b2      	cmp	r2, r6
 8006e1c:	460d      	mov	r5, r1
 8006e1e:	d810      	bhi.n	8006e42 <USBD_LL_DataInStage+0x6a>
        if ((pep->maxpacket == pep->rem_length) &&
 8006e20:	d01b      	beq.n	8006e5a <USBD_LL_DataInStage+0x82>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e22:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8006e26:	2b03      	cmp	r3, #3
 8006e28:	d024      	beq.n	8006e74 <USBD_LL_DataInStage+0x9c>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e2a:	2180      	movs	r1, #128	; 0x80
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f000 ff47 	bl	8007cc0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006e32:	4620      	mov	r0, r4
 8006e34:	f000 fbd4 	bl	80075e0 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode != 0U)
 8006e38:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d0d9      	beq.n	8006df4 <USBD_LL_DataInStage+0x1c>
 8006e40:	e7d5      	b.n	8006dee <USBD_LL_DataInStage+0x16>
        pep->rem_length -= pep->maxpacket;
 8006e42:	1b92      	subs	r2, r2, r6
 8006e44:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006e46:	4619      	mov	r1, r3
 8006e48:	f000 fba0 	bl	800758c <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e4c:	462b      	mov	r3, r5
 8006e4e:	462a      	mov	r2, r5
 8006e50:	4629      	mov	r1, r5
 8006e52:	4620      	mov	r0, r4
 8006e54:	f000 ff80 	bl	8007d58 <USBD_LL_PrepareReceive>
 8006e58:	e7c6      	b.n	8006de8 <USBD_LL_DataInStage+0x10>
            (pep->total_length >= pep->maxpacket) &&
 8006e5a:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d8e0      	bhi.n	8006e22 <USBD_LL_DataInStage+0x4a>
            (pep->total_length >= pep->maxpacket) &&
 8006e60:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d2dc      	bcs.n	8006e22 <USBD_LL_DataInStage+0x4a>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006e68:	460a      	mov	r2, r1
 8006e6a:	f000 fb8f 	bl	800758c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006e6e:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8006e72:	e7eb      	b.n	8006e4c <USBD_LL_DataInStage+0x74>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006e74:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d0d5      	beq.n	8006e2a <USBD_LL_DataInStage+0x52>
              pdev->classId = 0U;
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f8c4 22d4 	str.w	r2, [r4, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006e84:	4620      	mov	r0, r4
 8006e86:	4798      	blx	r3
 8006e88:	e7cf      	b.n	8006e2a <USBD_LL_DataInStage+0x52>
 8006e8a:	bf00      	nop

08006e8c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006e8e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 8006e92:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e94:	2201      	movs	r2, #1
 8006e96:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
{
 8006e9a:	4604      	mov	r4, r0
  pdev->dev_config = 0U;
 8006e9c:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 8006e9e:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_remote_wakeup = 0U;
 8006ea2:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006ea6:	f880 12a0 	strb.w	r1, [r0, #672]	; 0x2a0
  if (pdev->pClass[0] != NULL)
 8006eaa:	b11b      	cbz	r3, 8006eb4 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	b10b      	cbz	r3, 8006eb4 <USBD_LL_Reset+0x28>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006eb0:	4798      	blx	r3
 8006eb2:	b9b0      	cbnz	r0, 8006ee2 <USBD_LL_Reset+0x56>
  USBD_StatusTypeDef ret = USBD_OK;
 8006eb4:	2700      	movs	r7, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	2340      	movs	r3, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006eba:	461d      	mov	r5, r3
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ebc:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006ebe:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	f000 fedf 	bl	8007c84 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006ec6:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006eca:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ece:	462b      	mov	r3, r5
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	2180      	movs	r1, #128	; 0x80
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f000 fed5 	bl	8007c84 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006eda:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006edc:	6225      	str	r5, [r4, #32]

  return ret;
}
 8006ede:	4638      	mov	r0, r7
 8006ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = USBD_FAIL;
 8006ee2:	2703      	movs	r7, #3
 8006ee4:	e7e7      	b.n	8006eb6 <USBD_LL_Reset+0x2a>
 8006ee6:	bf00      	nop

08006ee8 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8006ee8:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8006eea:	2000      	movs	r0, #0
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop

08006ef0 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006ef0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006ef4:	2b04      	cmp	r3, #4
 8006ef6:	d004      	beq.n	8006f02 <USBD_LL_Suspend+0x12>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006ef8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006f02:	2304      	movs	r3, #4
 8006f04:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8006f08:	2000      	movs	r0, #0
 8006f0a:	4770      	bx	lr

08006f0c <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006f0c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006f10:	2b04      	cmp	r3, #4
 8006f12:	d104      	bne.n	8006f1e <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006f14:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8006f1e:	2000      	movs	r0, #0
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop

08006f24 <USBD_LL_SOF>:
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f24:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8006f28:	2a03      	cmp	r2, #3
 8006f2a:	d001      	beq.n	8006f30 <USBD_LL_SOF+0xc>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	4770      	bx	lr
{
 8006f30:	b508      	push	{r3, lr}
    if (pdev->pClass[0] != NULL)
 8006f32:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006f36:	b113      	cbz	r3, 8006f3e <USBD_LL_SOF+0x1a>
      if (pdev->pClass[0]->SOF != NULL)
 8006f38:	69db      	ldr	r3, [r3, #28]
 8006f3a:	b103      	cbz	r3, 8006f3e <USBD_LL_SOF+0x1a>
        (void)pdev->pClass[0]->SOF(pdev);
 8006f3c:	4798      	blx	r3
}
 8006f3e:	2000      	movs	r0, #0
 8006f40:	bd08      	pop	{r3, pc}
 8006f42:	bf00      	nop

08006f44 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8006f44:	2000      	movs	r0, #0
 8006f46:	4770      	bx	lr

08006f48 <USBD_CoreFindEP>:
 8006f48:	2000      	movs	r0, #0
 8006f4a:	4770      	bx	lr

08006f4c <USBD_GetEpDesc>:
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
  USBD_EpDescTypeDef *pEpDesc = NULL;
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006f4c:	7802      	ldrb	r2, [r0, #0]
 8006f4e:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 8006f52:	4594      	cmp	ip, r2
 8006f54:	b293      	uxth	r3, r2
 8006f56:	d803      	bhi.n	8006f60 <USBD_GetEpDesc+0x14>
 8006f58:	e00c      	b.n	8006f74 <USBD_GetEpDesc+0x28>
  {
    ptr = desc->bLength;

    while (ptr < desc->wTotalLength)
 8006f5a:	459c      	cmp	ip, r3
 8006f5c:	d90a      	bls.n	8006f74 <USBD_GetEpDesc+0x28>
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 8006f5e:	7802      	ldrb	r2, [r0, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006f60:	4410      	add	r0, r2
  *ptr += pnext->bLength;
 8006f62:	4413      	add	r3, r2
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006f64:	7842      	ldrb	r2, [r0, #1]
 8006f66:	2a05      	cmp	r2, #5
  *ptr += pnext->bLength;
 8006f68:	b29b      	uxth	r3, r3
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006f6a:	d1f6      	bne.n	8006f5a <USBD_GetEpDesc+0xe>
        if (pEpDesc->bEndpointAddress == EpAddr)
 8006f6c:	7882      	ldrb	r2, [r0, #2]
 8006f6e:	428a      	cmp	r2, r1
 8006f70:	d1f3      	bne.n	8006f5a <USBD_GetEpDesc+0xe>
}
 8006f72:	4770      	bx	lr
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006f74:	2000      	movs	r0, #0
}
 8006f76:	4770      	bx	lr

08006f78 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f7c:	780c      	ldrb	r4, [r1, #0]
 8006f7e:	f004 0460 	and.w	r4, r4, #96	; 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f82:	2c20      	cmp	r4, #32
{
 8006f84:	b082      	sub	sp, #8
 8006f86:	460e      	mov	r6, r1
 8006f88:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f8a:	d00f      	beq.n	8006fac <USBD_StdDevReq+0x34>
 8006f8c:	2c40      	cmp	r4, #64	; 0x40
 8006f8e:	d00d      	beq.n	8006fac <USBD_StdDevReq+0x34>
 8006f90:	b1c4      	cbz	r4, 8006fc4 <USBD_StdDevReq+0x4c>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f92:	2180      	movs	r1, #128	; 0x80
 8006f94:	4628      	mov	r0, r5
 8006f96:	f000 fe93 	bl	8007cc0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	4628      	mov	r0, r5
 8006f9e:	f000 fe8f 	bl	8007cc0 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 8006fa2:	2400      	movs	r4, #0
}
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	b002      	add	sp, #8
 8006fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006fac:	f8d5 32d4 	ldr.w	r3, [r5, #724]	; 0x2d4
 8006fb0:	33ae      	adds	r3, #174	; 0xae
 8006fb2:	4631      	mov	r1, r6
 8006fb4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	4628      	mov	r0, r5
}
 8006fbc:	b002      	add	sp, #8
 8006fbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006fc2:	4718      	bx	r3
      switch (req->bRequest)
 8006fc4:	784f      	ldrb	r7, [r1, #1]
 8006fc6:	2f09      	cmp	r7, #9
 8006fc8:	d8e3      	bhi.n	8006f92 <USBD_StdDevReq+0x1a>
 8006fca:	a301      	add	r3, pc, #4	; (adr r3, 8006fd0 <USBD_StdDevReq+0x58>)
 8006fcc:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 8006fd0:	08007035 	.word	0x08007035
 8006fd4:	08007063 	.word	0x08007063
 8006fd8:	08006f93 	.word	0x08006f93
 8006fdc:	08007081 	.word	0x08007081
 8006fe0:	08006f93 	.word	0x08006f93
 8006fe4:	080070a5 	.word	0x080070a5
 8006fe8:	080070dd 	.word	0x080070dd
 8006fec:	08006f93 	.word	0x08006f93
 8006ff0:	08007131 	.word	0x08007131
 8006ff4:	08006ff9 	.word	0x08006ff9
  cfgidx = (uint8_t)(req->wValue);
 8006ff8:	788e      	ldrb	r6, [r1, #2]
 8006ffa:	4fb3      	ldr	r7, [pc, #716]	; (80072c8 <USBD_StdDevReq+0x350>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006ffc:	2e01      	cmp	r6, #1
  cfgidx = (uint8_t)(req->wValue);
 8006ffe:	703e      	strb	r6, [r7, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007000:	f200 8164 	bhi.w	80072cc <USBD_StdDevReq+0x354>
  switch (pdev->dev_state)
 8007004:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007008:	2b02      	cmp	r3, #2
 800700a:	fa5f f883 	uxtb.w	r8, r3
 800700e:	f000 811c 	beq.w	800724a <USBD_StdDevReq+0x2d2>
 8007012:	f1b8 0f03 	cmp.w	r8, #3
 8007016:	f000 812d 	beq.w	8007274 <USBD_StdDevReq+0x2fc>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800701a:	2180      	movs	r1, #128	; 0x80
 800701c:	f000 fe50 	bl	8007cc0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007020:	2100      	movs	r1, #0
 8007022:	4628      	mov	r0, r5
 8007024:	f000 fe4c 	bl	8007cc0 <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007028:	7839      	ldrb	r1, [r7, #0]
 800702a:	4628      	mov	r0, r5
 800702c:	f7ff fe60 	bl	8006cf0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007030:	2403      	movs	r4, #3
      break;
 8007032:	e7b7      	b.n	8006fa4 <USBD_StdDevReq+0x2c>
  switch (pdev->dev_state)
 8007034:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007038:	3b01      	subs	r3, #1
 800703a:	2b02      	cmp	r3, #2
 800703c:	d826      	bhi.n	800708c <USBD_StdDevReq+0x114>
      if (req->wLength != 0x2U)
 800703e:	88cb      	ldrh	r3, [r1, #6]
 8007040:	2b02      	cmp	r3, #2
 8007042:	d123      	bne.n	800708c <USBD_StdDevReq+0x114>
      if (pdev->dev_remote_wakeup != 0U)
 8007044:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007048:	2201      	movs	r2, #1
 800704a:	60c2      	str	r2, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800704c:	b10b      	cbz	r3, 8007052 <USBD_StdDevReq+0xda>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800704e:	2303      	movs	r3, #3
 8007050:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007052:	2202      	movs	r2, #2
 8007054:	f105 010c 	add.w	r1, r5, #12
 8007058:	4628      	mov	r0, r5
 800705a:	f000 fa89 	bl	8007570 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800705e:	463c      	mov	r4, r7
      break;
 8007060:	e7a0      	b.n	8006fa4 <USBD_StdDevReq+0x2c>
  switch (pdev->dev_state)
 8007062:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007066:	3b01      	subs	r3, #1
 8007068:	2b02      	cmp	r3, #2
 800706a:	d80f      	bhi.n	800708c <USBD_StdDevReq+0x114>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800706c:	884b      	ldrh	r3, [r1, #2]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d198      	bne.n	8006fa4 <USBD_StdDevReq+0x2c>
        pdev->dev_remote_wakeup = 0U;
 8007072:	2300      	movs	r3, #0
 8007074:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007078:	4628      	mov	r0, r5
 800707a:	f000 faa5 	bl	80075c8 <USBD_CtlSendStatus>
 800707e:	e791      	b.n	8006fa4 <USBD_StdDevReq+0x2c>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007080:	884b      	ldrh	r3, [r1, #2]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d0f6      	beq.n	8007074 <USBD_StdDevReq+0xfc>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007086:	2b02      	cmp	r3, #2
 8007088:	f000 8116 	beq.w	80072b8 <USBD_StdDevReq+0x340>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800708c:	2180      	movs	r1, #128	; 0x80
 800708e:	4628      	mov	r0, r5
 8007090:	f000 fe16 	bl	8007cc0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007094:	2100      	movs	r1, #0
 8007096:	4628      	mov	r0, r5
 8007098:	f000 fe12 	bl	8007cc0 <USBD_LL_StallEP>
}
 800709c:	4620      	mov	r0, r4
 800709e:	b002      	add	sp, #8
 80070a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80070a4:	888b      	ldrh	r3, [r1, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1f0      	bne.n	800708c <USBD_StdDevReq+0x114>
 80070aa:	88cb      	ldrh	r3, [r1, #6]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d1ed      	bne.n	800708c <USBD_StdDevReq+0x114>
 80070b0:	884e      	ldrh	r6, [r1, #2]
 80070b2:	2e7f      	cmp	r6, #127	; 0x7f
 80070b4:	d8ea      	bhi.n	800708c <USBD_StdDevReq+0x114>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070b6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80070ba:	2b03      	cmp	r3, #3
 80070bc:	d0e6      	beq.n	800708c <USBD_StdDevReq+0x114>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80070be:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 80070c0:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80070c4:	f000 fe2c 	bl	8007d20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80070c8:	4628      	mov	r0, r5
 80070ca:	f000 fa7d 	bl	80075c8 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80070ce:	2e00      	cmp	r6, #0
 80070d0:	f000 8121 	beq.w	8007316 <USBD_StdDevReq+0x39e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070d4:	2302      	movs	r3, #2
 80070d6:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 80070da:	e763      	b.n	8006fa4 <USBD_StdDevReq+0x2c>
  switch (req->wValue >> 8)
 80070dc:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 80070de:	2300      	movs	r3, #0
 80070e0:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80070e4:	0a13      	lsrs	r3, r2, #8
 80070e6:	3b01      	subs	r3, #1
 80070e8:	2b0e      	cmp	r3, #14
 80070ea:	d8cf      	bhi.n	800708c <USBD_StdDevReq+0x114>
 80070ec:	a101      	add	r1, pc, #4	; (adr r1, 80070f4 <USBD_StdDevReq+0x17c>)
 80070ee:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070f2:	bf00      	nop
 80070f4:	080071e5 	.word	0x080071e5
 80070f8:	080071cb 	.word	0x080071cb
 80070fc:	080071b9 	.word	0x080071b9
 8007100:	0800708d 	.word	0x0800708d
 8007104:	0800708d 	.word	0x0800708d
 8007108:	080071a3 	.word	0x080071a3
 800710c:	08007189 	.word	0x08007189
 8007110:	0800708d 	.word	0x0800708d
 8007114:	0800708d 	.word	0x0800708d
 8007118:	0800708d 	.word	0x0800708d
 800711c:	0800708d 	.word	0x0800708d
 8007120:	0800708d 	.word	0x0800708d
 8007124:	0800708d 	.word	0x0800708d
 8007128:	0800708d 	.word	0x0800708d
 800712c:	08007155 	.word	0x08007155
  if (req->wLength != 1U)
 8007130:	88ca      	ldrh	r2, [r1, #6]
 8007132:	2a01      	cmp	r2, #1
 8007134:	d1aa      	bne.n	800708c <USBD_StdDevReq+0x114>
    switch (pdev->dev_state)
 8007136:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 800713a:	2902      	cmp	r1, #2
 800713c:	b2cb      	uxtb	r3, r1
 800713e:	d87d      	bhi.n	800723c <USBD_StdDevReq+0x2c4>
 8007140:	2b00      	cmp	r3, #0
 8007142:	f43f af26 	beq.w	8006f92 <USBD_StdDevReq+0x1a>
        pdev->dev_default_config = 0U;
 8007146:	4601      	mov	r1, r0
 8007148:	2300      	movs	r3, #0
 800714a:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800714e:	f000 fa0f 	bl	8007570 <USBD_CtlSendData>
        break;
 8007152:	e727      	b.n	8006fa4 <USBD_StdDevReq+0x2c>
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007154:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007158:	69db      	ldr	r3, [r3, #28]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d096      	beq.n	800708c <USBD_StdDevReq+0x114>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800715e:	7c28      	ldrb	r0, [r5, #16]
 8007160:	f10d 0106 	add.w	r1, sp, #6
 8007164:	4798      	blx	r3
  if (req->wLength != 0U)
 8007166:	88f2      	ldrh	r2, [r6, #6]
 8007168:	2a00      	cmp	r2, #0
 800716a:	d085      	beq.n	8007078 <USBD_StdDevReq+0x100>
    if (len != 0U)
 800716c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d08b      	beq.n	800708c <USBD_StdDevReq+0x114>
      len = MIN(len, req->wLength);
 8007174:	429a      	cmp	r2, r3
 8007176:	bf28      	it	cs
 8007178:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800717a:	4601      	mov	r1, r0
 800717c:	4628      	mov	r0, r5
      len = MIN(len, req->wLength);
 800717e:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007182:	f000 f9f5 	bl	8007570 <USBD_CtlSendData>
 8007186:	e70d      	b.n	8006fa4 <USBD_StdDevReq+0x2c>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007188:	7c03      	ldrb	r3, [r0, #16]
 800718a:	2b00      	cmp	r3, #0
 800718c:	f47f af7e 	bne.w	800708c <USBD_StdDevReq+0x114>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007190:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007194:	f10d 0006 	add.w	r0, sp, #6
 8007198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800719c:	2307      	movs	r3, #7
 800719e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80071a0:	e7e1      	b.n	8007166 <USBD_StdDevReq+0x1ee>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071a2:	7c03      	ldrb	r3, [r0, #16]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f47f af71 	bne.w	800708c <USBD_StdDevReq+0x114>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80071aa:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80071ae:	f10d 0006 	add.w	r0, sp, #6
 80071b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b4:	4798      	blx	r3
  if (err != 0U)
 80071b6:	e7d6      	b.n	8007166 <USBD_StdDevReq+0x1ee>
      switch ((uint8_t)(req->wValue))
 80071b8:	b2d2      	uxtb	r2, r2
 80071ba:	2a05      	cmp	r2, #5
 80071bc:	f63f af66 	bhi.w	800708c <USBD_StdDevReq+0x114>
 80071c0:	e8df f002 	tbb	[pc, r2]
 80071c4:	242a3036 	.word	0x242a3036
 80071c8:	181e      	.short	0x181e
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071ca:	7c03      	ldrb	r3, [r0, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f040 8092 	bne.w	80072f6 <USBD_StdDevReq+0x37e>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80071d2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80071d6:	f10d 0006 	add.w	r0, sp, #6
 80071da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071dc:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80071de:	2302      	movs	r3, #2
 80071e0:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80071e2:	e7c0      	b.n	8007166 <USBD_StdDevReq+0x1ee>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80071e4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80071e8:	7c00      	ldrb	r0, [r0, #16]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f10d 0106 	add.w	r1, sp, #6
 80071f0:	4798      	blx	r3
  if (err != 0U)
 80071f2:	e7b8      	b.n	8007166 <USBD_StdDevReq+0x1ee>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80071f4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80071f8:	699b      	ldr	r3, [r3, #24]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1af      	bne.n	800715e <USBD_StdDevReq+0x1e6>
 80071fe:	e745      	b.n	800708c <USBD_StdDevReq+0x114>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007200:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1a9      	bne.n	800715e <USBD_StdDevReq+0x1e6>
 800720a:	e73f      	b.n	800708c <USBD_StdDevReq+0x114>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800720c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1a3      	bne.n	800715e <USBD_StdDevReq+0x1e6>
 8007216:	e739      	b.n	800708c <USBD_StdDevReq+0x114>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007218:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d19d      	bne.n	800715e <USBD_StdDevReq+0x1e6>
 8007222:	e733      	b.n	800708c <USBD_StdDevReq+0x114>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007224:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d197      	bne.n	800715e <USBD_StdDevReq+0x1e6>
 800722e:	e72d      	b.n	800708c <USBD_StdDevReq+0x114>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007230:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d191      	bne.n	800715e <USBD_StdDevReq+0x1e6>
 800723a:	e727      	b.n	800708c <USBD_StdDevReq+0x114>
    switch (pdev->dev_state)
 800723c:	2b03      	cmp	r3, #3
 800723e:	f47f aea8 	bne.w	8006f92 <USBD_StdDevReq+0x1a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007242:	1d01      	adds	r1, r0, #4
 8007244:	f000 f994 	bl	8007570 <USBD_CtlSendData>
        break;
 8007248:	e6ac      	b.n	8006fa4 <USBD_StdDevReq+0x2c>
      if (cfgidx != 0U)
 800724a:	2e00      	cmp	r6, #0
 800724c:	f43f af14 	beq.w	8007078 <USBD_StdDevReq+0x100>
        pdev->dev_config = cfgidx;
 8007250:	2101      	movs	r1, #1
 8007252:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007254:	f7ff fd44 	bl	8006ce0 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8007258:	4604      	mov	r4, r0
 800725a:	2800      	cmp	r0, #0
 800725c:	d054      	beq.n	8007308 <USBD_StdDevReq+0x390>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800725e:	2180      	movs	r1, #128	; 0x80
 8007260:	4628      	mov	r0, r5
 8007262:	f000 fd2d 	bl	8007cc0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007266:	2100      	movs	r1, #0
 8007268:	4628      	mov	r0, r5
 800726a:	f000 fd29 	bl	8007cc0 <USBD_LL_StallEP>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800726e:	f885 829c 	strb.w	r8, [r5, #668]	; 0x29c
 8007272:	e697      	b.n	8006fa4 <USBD_StdDevReq+0x2c>
      if (cfgidx == 0U)
 8007274:	b39e      	cbz	r6, 80072de <USBD_StdDevReq+0x366>
      else if (cfgidx != pdev->dev_config)
 8007276:	6841      	ldr	r1, [r0, #4]
 8007278:	2901      	cmp	r1, #1
 800727a:	f43f aefd 	beq.w	8007078 <USBD_StdDevReq+0x100>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800727e:	b2c9      	uxtb	r1, r1
 8007280:	f7ff fd36 	bl	8006cf0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007284:	7839      	ldrb	r1, [r7, #0]
 8007286:	6069      	str	r1, [r5, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007288:	4628      	mov	r0, r5
 800728a:	f7ff fd29 	bl	8006ce0 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800728e:	4606      	mov	r6, r0
 8007290:	2800      	cmp	r0, #0
 8007292:	f43f aef1 	beq.w	8007078 <USBD_StdDevReq+0x100>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007296:	2180      	movs	r1, #128	; 0x80
 8007298:	4628      	mov	r0, r5
 800729a:	f000 fd11 	bl	8007cc0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800729e:	2100      	movs	r1, #0
 80072a0:	4628      	mov	r0, r5
 80072a2:	f000 fd0d 	bl	8007cc0 <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80072a6:	7929      	ldrb	r1, [r5, #4]
 80072a8:	4628      	mov	r0, r5
 80072aa:	f7ff fd21 	bl	8006cf0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80072ae:	2302      	movs	r3, #2
 80072b0:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 80072b4:	4634      	mov	r4, r6
 80072b6:	e675      	b.n	8006fa4 <USBD_StdDevReq+0x2c>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80072b8:	888b      	ldrh	r3, [r1, #4]
 80072ba:	0a1b      	lsrs	r3, r3, #8
 80072bc:	f880 32a0 	strb.w	r3, [r0, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80072c0:	f000 f982 	bl	80075c8 <USBD_CtlSendStatus>
 80072c4:	e66e      	b.n	8006fa4 <USBD_StdDevReq+0x2c>
 80072c6:	bf00      	nop
 80072c8:	20003d88 	.word	0x20003d88
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80072cc:	2180      	movs	r1, #128	; 0x80
 80072ce:	f000 fcf7 	bl	8007cc0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80072d2:	2100      	movs	r1, #0
 80072d4:	4628      	mov	r0, r5
 80072d6:	f000 fcf3 	bl	8007cc0 <USBD_LL_StallEP>
    return USBD_FAIL;
 80072da:	2403      	movs	r4, #3
 80072dc:	e662      	b.n	8006fa4 <USBD_StdDevReq+0x2c>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072de:	2302      	movs	r3, #2
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80072e0:	4631      	mov	r1, r6
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072e2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80072e6:	6046      	str	r6, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80072e8:	f7ff fd02 	bl	8006cf0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80072ec:	4628      	mov	r0, r5
 80072ee:	f000 f96b 	bl	80075c8 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80072f2:	4634      	mov	r4, r6
 80072f4:	e656      	b.n	8006fa4 <USBD_StdDevReq+0x2c>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80072f6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80072fa:	f10d 0006 	add.w	r0, sp, #6
 80072fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007300:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007302:	2302      	movs	r3, #2
 8007304:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8007306:	e72e      	b.n	8007166 <USBD_StdDevReq+0x1ee>
          (void)USBD_CtlSendStatus(pdev);
 8007308:	4628      	mov	r0, r5
 800730a:	f000 f95d 	bl	80075c8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800730e:	2303      	movs	r3, #3
 8007310:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8007314:	e646      	b.n	8006fa4 <USBD_StdDevReq+0x2c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007316:	2301      	movs	r3, #1
 8007318:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800731c:	e642      	b.n	8006fa4 <USBD_StdDevReq+0x2c>
 800731e:	bf00      	nop

08007320 <USBD_StdItfReq>:
{
 8007320:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007322:	780b      	ldrb	r3, [r1, #0]
 8007324:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8007328:	2a40      	cmp	r2, #64	; 0x40
{
 800732a:	460d      	mov	r5, r1
 800732c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800732e:	d00b      	beq.n	8007348 <USBD_StdItfReq+0x28>
 8007330:	065b      	lsls	r3, r3, #25
 8007332:	d509      	bpl.n	8007348 <USBD_StdItfReq+0x28>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007334:	2180      	movs	r1, #128	; 0x80
 8007336:	f000 fcc3 	bl	8007cc0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800733a:	2100      	movs	r1, #0
 800733c:	4620      	mov	r0, r4
 800733e:	f000 fcbf 	bl	8007cc0 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 8007342:	2500      	movs	r5, #0
}
 8007344:	4628      	mov	r0, r5
 8007346:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8007348:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800734c:	3b01      	subs	r3, #1
 800734e:	2b02      	cmp	r3, #2
 8007350:	d802      	bhi.n	8007358 <USBD_StdItfReq+0x38>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007352:	7929      	ldrb	r1, [r5, #4]
 8007354:	2901      	cmp	r1, #1
 8007356:	d902      	bls.n	800735e <USBD_StdItfReq+0x3e>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007358:	2180      	movs	r1, #128	; 0x80
 800735a:	4620      	mov	r0, r4
 800735c:	e7eb      	b.n	8007336 <USBD_StdItfReq+0x16>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800735e:	4620      	mov	r0, r4
 8007360:	f7ff fdf0 	bl	8006f44 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007364:	b990      	cbnz	r0, 800738c <USBD_StdItfReq+0x6c>
              if (pdev->pClass[idx]->Setup != NULL)
 8007366:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	b173      	cbz	r3, 800738c <USBD_StdItfReq+0x6c>
                pdev->classId = idx;
 800736e:	f8c4 02d4 	str.w	r0, [r4, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007372:	4629      	mov	r1, r5
 8007374:	4620      	mov	r0, r4
 8007376:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007378:	88eb      	ldrh	r3, [r5, #6]
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800737a:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1e1      	bne.n	8007344 <USBD_StdItfReq+0x24>
 8007380:	2800      	cmp	r0, #0
 8007382:	d1df      	bne.n	8007344 <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 8007384:	4620      	mov	r0, r4
 8007386:	f000 f91f 	bl	80075c8 <USBD_CtlSendStatus>
 800738a:	e7db      	b.n	8007344 <USBD_StdItfReq+0x24>
              ret = USBD_FAIL;
 800738c:	2503      	movs	r5, #3
}
 800738e:	4628      	mov	r0, r5
 8007390:	bd38      	pop	{r3, r4, r5, pc}
 8007392:	bf00      	nop

08007394 <USBD_StdEPReq>:
{
 8007394:	b530      	push	{r4, r5, lr}
 8007396:	460c      	mov	r4, r1
  ep_addr = LOBYTE(req->wIndex);
 8007398:	888a      	ldrh	r2, [r1, #4]
 800739a:	7823      	ldrb	r3, [r4, #0]
 800739c:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073a0:	2b20      	cmp	r3, #32
{
 80073a2:	b083      	sub	sp, #12
 80073a4:	4605      	mov	r5, r0
  ep_addr = LOBYTE(req->wIndex);
 80073a6:	b2d1      	uxtb	r1, r2
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073a8:	d01e      	beq.n	80073e8 <USBD_StdEPReq+0x54>
 80073aa:	2b40      	cmp	r3, #64	; 0x40
 80073ac:	d01c      	beq.n	80073e8 <USBD_StdEPReq+0x54>
 80073ae:	b36b      	cbz	r3, 800740c <USBD_StdEPReq+0x78>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80073b0:	2180      	movs	r1, #128	; 0x80
 80073b2:	4628      	mov	r0, r5
 80073b4:	f000 fc84 	bl	8007cc0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80073b8:	2100      	movs	r1, #0
 80073ba:	4628      	mov	r0, r5
 80073bc:	f000 fc80 	bl	8007cc0 <USBD_LL_StallEP>
}
 80073c0:	2000      	movs	r0, #0
 80073c2:	b003      	add	sp, #12
 80073c4:	bd30      	pop	{r4, r5, pc}
          switch (pdev->dev_state)
 80073c6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	b2da      	uxtb	r2, r3
 80073ce:	d05d      	beq.n	800748c <USBD_StdEPReq+0xf8>
 80073d0:	2a03      	cmp	r2, #3
 80073d2:	d1ed      	bne.n	80073b0 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073d4:	8863      	ldrh	r3, [r4, #2]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1f2      	bne.n	80073c0 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 80073da:	064b      	lsls	r3, r1, #25
 80073dc:	d17a      	bne.n	80074d4 <USBD_StdEPReq+0x140>
                (void)USBD_CtlSendStatus(pdev);
 80073de:	4628      	mov	r0, r5
 80073e0:	9101      	str	r1, [sp, #4]
 80073e2:	f000 f8f1 	bl	80075c8 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80073e6:	9901      	ldr	r1, [sp, #4]
 80073e8:	4628      	mov	r0, r5
 80073ea:	f7ff fdad 	bl	8006f48 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073ee:	2800      	cmp	r0, #0
 80073f0:	d1e6      	bne.n	80073c0 <USBD_StdEPReq+0x2c>
                  if (pdev->pClass[idx]->Setup != NULL)
 80073f2:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
                  pdev->classId = idx;
 80073f6:	f8c5 02d4 	str.w	r0, [r5, #724]	; 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d0df      	beq.n	80073c0 <USBD_StdEPReq+0x2c>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007400:	4621      	mov	r1, r4
 8007402:	4628      	mov	r0, r5
}
 8007404:	b003      	add	sp, #12
 8007406:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800740a:	4718      	bx	r3
      switch (req->bRequest)
 800740c:	7863      	ldrb	r3, [r4, #1]
 800740e:	2b01      	cmp	r3, #1
 8007410:	d0d9      	beq.n	80073c6 <USBD_StdEPReq+0x32>
 8007412:	2b03      	cmp	r3, #3
 8007414:	d029      	beq.n	800746a <USBD_StdEPReq+0xd6>
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1ca      	bne.n	80073b0 <USBD_StdEPReq+0x1c>
          switch (pdev->dev_state)
 800741a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800741e:	2b02      	cmp	r3, #2
 8007420:	b2d8      	uxtb	r0, r3
 8007422:	d03c      	beq.n	800749e <USBD_StdEPReq+0x10a>
 8007424:	2803      	cmp	r0, #3
 8007426:	d1c3      	bne.n	80073b0 <USBD_StdEPReq+0x1c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007428:	f001 030f 	and.w	r3, r1, #15
 800742c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8007430:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007432:	eb05 0383 	add.w	r3, r5, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8007436:	d441      	bmi.n	80074bc <USBD_StdEPReq+0x128>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007438:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800743c:	2b00      	cmp	r3, #0
 800743e:	d0b7      	beq.n	80073b0 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007440:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8007444:	2414      	movs	r4, #20
 8007446:	fb04 5403 	mla	r4, r4, r3, r5
 800744a:	f504 74aa 	add.w	r4, r4, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800744e:	b12b      	cbz	r3, 800745c <USBD_StdEPReq+0xc8>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007450:	4628      	mov	r0, r5
 8007452:	f000 fc51 	bl	8007cf8 <USBD_LL_IsStallEP>
 8007456:	2800      	cmp	r0, #0
 8007458:	d041      	beq.n	80074de <USBD_StdEPReq+0x14a>
                pep->status = 0x0001U;
 800745a:	2301      	movs	r3, #1
 800745c:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800745e:	2202      	movs	r2, #2
 8007460:	4621      	mov	r1, r4
 8007462:	4628      	mov	r0, r5
 8007464:	f000 f884 	bl	8007570 <USBD_CtlSendData>
              break;
 8007468:	e7aa      	b.n	80073c0 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 800746a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800746e:	2b02      	cmp	r3, #2
 8007470:	b2da      	uxtb	r2, r3
 8007472:	d00b      	beq.n	800748c <USBD_StdEPReq+0xf8>
 8007474:	2a03      	cmp	r2, #3
 8007476:	d19b      	bne.n	80073b0 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007478:	8863      	ldrh	r3, [r4, #2]
 800747a:	b91b      	cbnz	r3, 8007484 <USBD_StdEPReq+0xf0>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800747c:	0648      	lsls	r0, r1, #25
 800747e:	d001      	beq.n	8007484 <USBD_StdEPReq+0xf0>
 8007480:	88e3      	ldrh	r3, [r4, #6]
 8007482:	b373      	cbz	r3, 80074e2 <USBD_StdEPReq+0x14e>
              (void)USBD_CtlSendStatus(pdev);
 8007484:	4628      	mov	r0, r5
 8007486:	f000 f89f 	bl	80075c8 <USBD_CtlSendStatus>
              break;
 800748a:	e799      	b.n	80073c0 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800748c:	064a      	lsls	r2, r1, #25
 800748e:	d08f      	beq.n	80073b0 <USBD_StdEPReq+0x1c>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007490:	f000 fc16 	bl	8007cc0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007494:	2180      	movs	r1, #128	; 0x80
 8007496:	4628      	mov	r0, r5
 8007498:	f000 fc12 	bl	8007cc0 <USBD_LL_StallEP>
 800749c:	e790      	b.n	80073c0 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800749e:	0648      	lsls	r0, r1, #25
 80074a0:	d186      	bne.n	80073b0 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074a2:	0611      	lsls	r1, r2, #24
 80074a4:	bf4c      	ite	mi
 80074a6:	f105 0114 	addmi.w	r1, r5, #20
 80074aa:	f505 71aa 	addpl.w	r1, r5, #340	; 0x154
              pep->status = 0x0000U;
 80074ae:	2300      	movs	r3, #0
 80074b0:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80074b2:	2202      	movs	r2, #2
 80074b4:	4628      	mov	r0, r5
 80074b6:	f000 f85b 	bl	8007570 <USBD_CtlSendData>
              break;
 80074ba:	e781      	b.n	80073c0 <USBD_StdEPReq+0x2c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80074bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f43f af76 	beq.w	80073b0 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074c4:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 80074c8:	1c5c      	adds	r4, r3, #1
 80074ca:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80074ce:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 80074d2:	e7bc      	b.n	800744e <USBD_StdEPReq+0xba>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80074d4:	9101      	str	r1, [sp, #4]
 80074d6:	f000 fc01 	bl	8007cdc <USBD_LL_ClearStallEP>
 80074da:	9901      	ldr	r1, [sp, #4]
 80074dc:	e77f      	b.n	80073de <USBD_StdEPReq+0x4a>
                pep->status = 0x0000U;
 80074de:	6020      	str	r0, [r4, #0]
 80074e0:	e7bd      	b.n	800745e <USBD_StdEPReq+0xca>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80074e2:	4628      	mov	r0, r5
 80074e4:	f000 fbec 	bl	8007cc0 <USBD_LL_StallEP>
 80074e8:	e7cc      	b.n	8007484 <USBD_StdEPReq+0xf0>
 80074ea:	bf00      	nop

080074ec <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 80074ec:	780b      	ldrb	r3, [r1, #0]
 80074ee:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 80074f0:	784b      	ldrb	r3, [r1, #1]
 80074f2:	7043      	strb	r3, [r0, #1]
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 80074f4:	884b      	ldrh	r3, [r1, #2]
  req->wValue = SWAPBYTE(pbuff);
 80074f6:	8043      	strh	r3, [r0, #2]
 80074f8:	888b      	ldrh	r3, [r1, #4]
  req->wIndex = SWAPBYTE(pbuff);
 80074fa:	8083      	strh	r3, [r0, #4]
 80074fc:	88cb      	ldrh	r3, [r1, #6]
  req->wLength = SWAPBYTE(pbuff);
 80074fe:	80c3      	strh	r3, [r0, #6]
}
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop

08007504 <USBD_CtlError>:
{
 8007504:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007506:	2180      	movs	r1, #128	; 0x80
{
 8007508:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800750a:	f000 fbd9 	bl	8007cc0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800750e:	4620      	mov	r0, r4
 8007510:	2100      	movs	r1, #0
}
 8007512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8007516:	f000 bbd3 	b.w	8007cc0 <USBD_LL_StallEP>
 800751a:	bf00      	nop

0800751c <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800751c:	b318      	cbz	r0, 8007566 <USBD_GetString+0x4a>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800751e:	7803      	ldrb	r3, [r0, #0]
{
 8007520:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 8007522:	b30b      	cbz	r3, 8007568 <USBD_GetString+0x4c>
 8007524:	4604      	mov	r4, r0
 8007526:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 800752a:	eb04 030c 	add.w	r3, r4, ip
  while (*pbuff != (uint8_t)'\0')
 800752e:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8007532:	b2db      	uxtb	r3, r3
 8007534:	2d00      	cmp	r5, #0
 8007536:	d1f8      	bne.n	800752a <USBD_GetString+0xe>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007538:	3301      	adds	r3, #1
 800753a:	005b      	lsls	r3, r3, #1
 800753c:	b2dc      	uxtb	r4, r3
 800753e:	8013      	strh	r3, [r2, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007540:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 8007542:	700c      	strb	r4, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007544:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 8007546:	7804      	ldrb	r4, [r0, #0]
 8007548:	b15c      	cbz	r4, 8007562 <USBD_GetString+0x46>
  idx++;
 800754a:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 800754c:	2500      	movs	r5, #0
    idx++;
 800754e:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 8007550:	b2d2      	uxtb	r2, r2
    unicode[idx] = *pdesc;
 8007552:	54cc      	strb	r4, [r1, r3]
    unicode[idx] = 0U;
 8007554:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 8007556:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    idx++;
 800755a:	3302      	adds	r3, #2
 800755c:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800755e:	2c00      	cmp	r4, #0
 8007560:	d1f5      	bne.n	800754e <USBD_GetString+0x32>
}
 8007562:	bc30      	pop	{r4, r5}
 8007564:	4770      	bx	lr
 8007566:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 8007568:	2402      	movs	r4, #2
 800756a:	4623      	mov	r3, r4
 800756c:	e7e7      	b.n	800753e <USBD_GetString+0x22>
 800756e:	bf00      	nop

08007570 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007570:	b508      	push	{r3, lr}
 8007572:	4613      	mov	r3, r2
 8007574:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007576:	2102      	movs	r1, #2
  pdev->ep_in[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007578:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800757c:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007580:	2100      	movs	r1, #0
 8007582:	f000 fbdb 	bl	8007d3c <USBD_LL_Transmit>

  return USBD_OK;
}
 8007586:	2000      	movs	r0, #0
 8007588:	bd08      	pop	{r3, pc}
 800758a:	bf00      	nop

0800758c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800758c:	b508      	push	{r3, lr}
 800758e:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007590:	460a      	mov	r2, r1
 8007592:	2100      	movs	r1, #0
 8007594:	f000 fbd2 	bl	8007d3c <USBD_LL_Transmit>

  return USBD_OK;
}
 8007598:	2000      	movs	r0, #0
 800759a:	bd08      	pop	{r3, pc}

0800759c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800759c:	b508      	push	{r3, lr}
 800759e:	4613      	mov	r3, r2
 80075a0:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80075a2:	2103      	movs	r1, #3
  pdev->ep_out[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80075a4:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80075a8:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075ac:	2100      	movs	r1, #0
 80075ae:	f000 fbd3 	bl	8007d58 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80075b2:	2000      	movs	r0, #0
 80075b4:	bd08      	pop	{r3, pc}
 80075b6:	bf00      	nop

080075b8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80075b8:	b508      	push	{r3, lr}
 80075ba:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075bc:	460a      	mov	r2, r1
 80075be:	2100      	movs	r1, #0
 80075c0:	f000 fbca 	bl	8007d58 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80075c4:	2000      	movs	r0, #0
 80075c6:	bd08      	pop	{r3, pc}

080075c8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80075c8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80075ca:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80075cc:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80075ce:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80075d2:	461a      	mov	r2, r3
 80075d4:	4619      	mov	r1, r3
 80075d6:	f000 fbb1 	bl	8007d3c <USBD_LL_Transmit>

  return USBD_OK;
}
 80075da:	2000      	movs	r0, #0
 80075dc:	bd08      	pop	{r3, pc}
 80075de:	bf00      	nop

080075e0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80075e0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80075e2:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075e4:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80075e6:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075ea:	461a      	mov	r2, r3
 80075ec:	4619      	mov	r1, r3
 80075ee:	f000 fbb3 	bl	8007d58 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80075f2:	2000      	movs	r0, #0
 80075f4:	bd08      	pop	{r3, pc}
 80075f6:	bf00      	nop

080075f8 <arm_biquad_cascade_df1_f32>:
void arm_biquad_cascade_df1_f32(
  const arm_biquad_casd_df1_inst_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 80075f8:	b530      	push	{r4, r5, lr}
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
        float32_t acc;                                 /* Accumulator */
        float32_t b0, b1, b2, a1, a2;                  /* Filter coefficients */
        float32_t Xn1, Xn2, Yn1, Yn2;                  /* Filter pState variables */
        float32_t Xn;                                  /* Temporary input */
        uint32_t sample, stage = S->numStages;         /* Loop counters */
 80075fa:	6805      	ldr	r5, [r0, #0]
 80075fc:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8007600:	3414      	adds	r4, #20
 8007602:	f100 0e10 	add.w	lr, r0, #16

  do
  {
    /* Reading the coefficients */
    b0 = *pCoeffs++;
 8007606:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
    b1 = *pCoeffs++;
 800760a:	ed14 4a04 	vldr	s8, [r4, #-16]
    b2 = *pCoeffs++;
 800760e:	ed54 3a03 	vldr	s7, [r4, #-12]
    a1 = *pCoeffs++;
 8007612:	ed14 3a02 	vldr	s6, [r4, #-8]
    a2 = *pCoeffs++;
 8007616:	ed54 2a01 	vldr	s5, [r4, #-4]

    /* Reading the pState values */
    Xn1 = pState[0];
 800761a:	ed5e 6a04 	vldr	s13, [lr, #-16]
    Xn2 = pState[1];
 800761e:	ed5e 5a03 	vldr	s11, [lr, #-12]
    Yn1 = pState[2];
 8007622:	ed1e 7a02 	vldr	s14, [lr, #-8]
    Yn2 = pState[3];
 8007626:	ed1e 5a01 	vldr	s10, [lr, #-4]
    /* Initialize blkCnt with number of samples */
    sample = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (sample > 0U)
 800762a:	b353      	cbz	r3, 8007682 <arm_biquad_cascade_df1_f32+0x8a>
 800762c:	4618      	mov	r0, r3
 800762e:	4694      	mov	ip, r2
 8007630:	e003      	b.n	800763a <arm_biquad_cascade_df1_f32+0x42>
    {
      /* Read the input */
      Xn = *pIn++;

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      acc = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 8007632:	eeb0 7a67 	vmov.f32	s14, s15
      Xn = *pIn++;
 8007636:	eef0 6a46 	vmov.f32	s13, s12
 800763a:	ecb1 6a01 	vldmia	r1!, {s12}
      acc = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 800763e:	ee64 7a26 	vmul.f32	s15, s8, s13
    while (sample > 0U)
 8007642:	3801      	subs	r0, #1
      acc = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 8007644:	eee4 7a86 	vfma.f32	s15, s9, s12
 8007648:	eee3 7aa5 	vfma.f32	s15, s7, s11
 800764c:	eef0 5a66 	vmov.f32	s11, s13
 8007650:	eee3 7a07 	vfma.f32	s15, s6, s14
 8007654:	eee2 7a85 	vfma.f32	s15, s5, s10

      /* Store output in destination buffer. */
      *pOut++ = acc;
 8007658:	eeb0 5a47 	vmov.f32	s10, s14
 800765c:	ecec 7a01 	vstmia	ip!, {s15}
    while (sample > 0U)
 8007660:	d1e7      	bne.n	8007632 <arm_biquad_cascade_df1_f32+0x3a>
    pOut = pDst;

    /* decrement loop counter */
    stage--;

  } while (stage > 0U);
 8007662:	3d01      	subs	r5, #1
    *pState++ = Xn1;
 8007664:	ed0e 6a04 	vstr	s12, [lr, #-16]
    *pState++ = Xn2;
 8007668:	ed4e 6a03 	vstr	s13, [lr, #-12]
    *pState++ = Yn1;
 800766c:	ed4e 7a02 	vstr	s15, [lr, #-8]
    *pState++ = Yn2;
 8007670:	ed0e 7a01 	vstr	s14, [lr, #-4]
  } while (stage > 0U);
 8007674:	f104 0414 	add.w	r4, r4, #20
 8007678:	f10e 0e10 	add.w	lr, lr, #16
 800767c:	d00a      	beq.n	8007694 <arm_biquad_cascade_df1_f32+0x9c>
    pIn = pDst;
 800767e:	4611      	mov	r1, r2
 8007680:	e7c1      	b.n	8007606 <arm_biquad_cascade_df1_f32+0xe>
    Yn1 = pState[2];
 8007682:	eef0 7a47 	vmov.f32	s15, s14
    Xn1 = pState[0];
 8007686:	eeb0 6a66 	vmov.f32	s12, s13
    Yn2 = pState[3];
 800768a:	eeb0 7a45 	vmov.f32	s14, s10
    Xn2 = pState[1];
 800768e:	eef0 6a65 	vmov.f32	s13, s11
 8007692:	e7e6      	b.n	8007662 <arm_biquad_cascade_df1_f32+0x6a>

}
 8007694:	bd30      	pop	{r4, r5, pc}
 8007696:	bf00      	nop

08007698 <arm_biquad_cascade_df1_init_f32>:
void arm_biquad_cascade_df1_init_f32(
        arm_biquad_casd_df1_inst_f32 * S,
        uint8_t numStages,
  const float32_t * pCoeffs,
        float32_t * pState)
{
 8007698:	b510      	push	{r4, lr}
  /* Assign filter stages */
  S->numStages = numStages;
 800769a:	6001      	str	r1, [r0, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 800769c:	6082      	str	r2, [r0, #8]
{
 800769e:	4604      	mov	r4, r0

  /* Clear state buffer and size is always 4 * numStages */
  memset(pState, 0, (4U * (uint32_t) numStages) * sizeof(float32_t));
 80076a0:	010a      	lsls	r2, r1, #4
 80076a2:	4618      	mov	r0, r3
 80076a4:	2100      	movs	r1, #0
 80076a6:	f000 fbed 	bl	8007e84 <memset>

  /* Assign state pointer */
  S->pState = pState;
 80076aa:	6060      	str	r0, [r4, #4]
}
 80076ac:	bd10      	pop	{r4, pc}
 80076ae:	bf00      	nop

080076b0 <arm_fir_f32>:
void arm_fir_f32(
  const arm_fir_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 80076b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
        float32_t *pStateCurnt;                        /* Points to the current sample of the state */
        float32_t *px;                                 /* Temporary pointer for state buffer */
  const float32_t *pb;                                 /* Temporary pointer for coefficient buffer */
        float32_t acc0;                                /* Accumulator */
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 80076b4:	8804      	ldrh	r4, [r0, #0]
        float32_t *pState = S->pState;                 /* State pointer */
 80076b6:	f8d0 8004 	ldr.w	r8, [r0, #4]
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 80076ba:	f8d0 9008 	ldr.w	r9, [r0, #8]
        float32_t c0;                                           /* Temporary variable to hold coefficient value */
#endif

  /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
  /* pStateCurnt points to the location where the new input data should be written */
  pStateCurnt = &(S->pState[(numTaps - 1U)]);
 80076be:	f104 4080 	add.w	r0, r4, #1073741824	; 0x40000000
 80076c2:	3801      	subs	r0, #1
 80076c4:	eb08 0780 	add.w	r7, r8, r0, lsl #2
  /* Initialize blkCnt with number of taps */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 80076c8:	b32b      	cbz	r3, 8007716 <arm_fir_f32+0x66>
 80076ca:	461d      	mov	r5, r3
        float32_t *pState = S->pState;                 /* State pointer */
 80076cc:	4646      	mov	r6, r8
  {
    /* Copy one sample at a time into state buffer */
    *pStateCurnt++ = *pSrc++;
 80076ce:	f851 0b04 	ldr.w	r0, [r1], #4
 80076d2:	f847 0b04 	str.w	r0, [r7], #4

    /* Set the accumulator to zero */
    acc0 = 0.0f;
 80076d6:	eddf 7a11 	vldr	s15, [pc, #68]	; 800771c <arm_fir_f32+0x6c>
    pb = pCoeffs;

    i = numTaps;

    /* Perform the multiply-accumulates */
    while (i > 0U)
 80076da:	b154      	cbz	r4, 80076f2 <arm_fir_f32+0x42>
 80076dc:	4620      	mov	r0, r4
    pb = pCoeffs;
 80076de:	46ce      	mov	lr, r9
    while (i > 0U)
 80076e0:	46b4      	mov	ip, r6
    {
      /* acc =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-numTaps-3] +...+ b[0] * x[0] */
      acc0 += *px++ * *pb++;
 80076e2:	ecfc 6a01 	vldmia	ip!, {s13}
 80076e6:	ecbe 7a01 	vldmia	lr!, {s14}
    while (i > 0U)
 80076ea:	3801      	subs	r0, #1
      acc0 += *px++ * *pb++;
 80076ec:	eee6 7a87 	vfma.f32	s15, s13, s14
    while (i > 0U)
 80076f0:	d1f7      	bne.n	80076e2 <arm_fir_f32+0x32>
  while (blkCnt > 0U)
 80076f2:	3d01      	subs	r5, #1

      i--;
    }

    /* Store result in destination buffer. */
    *pDst++ = acc0;
 80076f4:	ece2 7a01 	vstmia	r2!, {s15}

    /* Advance state pointer by 1 for the next sample */
    pState = pState + 1U;
 80076f8:	f106 0604 	add.w	r6, r6, #4
  while (blkCnt > 0U)
 80076fc:	d1e7      	bne.n	80076ce <arm_fir_f32+0x1e>
    pState = pState + 1U;
 80076fe:	eb08 0283 	add.w	r2, r8, r3, lsl #2
  tapCnt = (numTaps - 1U);

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy remaining data */
  while (tapCnt > 0U)
 8007702:	1e63      	subs	r3, r4, #1
 8007704:	d005      	beq.n	8007712 <arm_fir_f32+0x62>
  {
    *pStateCurnt++ = *pState++;
 8007706:	f852 1b04 	ldr.w	r1, [r2], #4
 800770a:	f848 1b04 	str.w	r1, [r8], #4
  while (tapCnt > 0U)
 800770e:	3b01      	subs	r3, #1
 8007710:	d1f9      	bne.n	8007706 <arm_fir_f32+0x56>

    /* Decrement loop counter */
    tapCnt--;
  }

}
 8007712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        float32_t *pState = S->pState;                 /* State pointer */
 8007716:	4642      	mov	r2, r8
 8007718:	e7f3      	b.n	8007702 <arm_fir_f32+0x52>
 800771a:	bf00      	nop
 800771c:	00000000 	.word	0x00000000

08007720 <arm_fir_init_f32>:
        arm_fir_instance_f32 * S,
        uint16_t numTaps,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
 8007720:	b510      	push	{r4, lr}
 8007722:	4604      	mov	r4, r0

  /* Clear state buffer. The size is always (blockSize + numTaps - 1) */
#if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  memset(pState, 0, (numTaps + (blockSize - 1U) + blockSize) * sizeof(float32_t));
#else
  memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 8007724:	9802      	ldr	r0, [sp, #8]
  S->numTaps = numTaps;
 8007726:	8021      	strh	r1, [r4, #0]
  memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 8007728:	f100 3cff 	add.w	ip, r0, #4294967295
 800772c:	448c      	add	ip, r1
  S->pCoeffs = pCoeffs;
 800772e:	60a2      	str	r2, [r4, #8]
  memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 8007730:	2100      	movs	r1, #0
 8007732:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8007736:	4618      	mov	r0, r3
 8007738:	f000 fba4 	bl	8007e84 <memset>
#endif
  /* Assign state pointer */
  S->pState = pState;
 800773c:	6060      	str	r0, [r4, #4]
}
 800773e:	bd10      	pop	{r4, pc}

08007740 <arm_mean_f32>:
#else
void arm_mean_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 8007740:	b082      	sub	sp, #8
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8007742:	9101      	str	r1, [sp, #4]
 8007744:	b191      	cbz	r1, 800776c <arm_mean_f32+0x2c>
        float32_t sum = 0.0f;                          /* Temporary result storage */
 8007746:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8007774 <arm_mean_f32+0x34>
 800774a:	460b      	mov	r3, r1
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 800774c:	ecb0 7a01 	vldmia	r0!, {s14}
  while (blkCnt > 0U)
 8007750:	3b01      	subs	r3, #1
    sum += *pSrc++;
 8007752:	ee77 7a87 	vadd.f32	s15, s15, s14
  while (blkCnt > 0U)
 8007756:	d1f9      	bne.n	800774c <arm_mean_f32+0xc>
    blkCnt--;
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store result to destination */
  *pResult = (sum / blockSize);
 8007758:	ed9d 7a01 	vldr	s14, [sp, #4]
 800775c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007760:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007764:	edc2 6a00 	vstr	s13, [r2]
}
 8007768:	b002      	add	sp, #8
 800776a:	4770      	bx	lr
        float32_t sum = 0.0f;                          /* Temporary result storage */
 800776c:	eddf 7a01 	vldr	s15, [pc, #4]	; 8007774 <arm_mean_f32+0x34>
 8007770:	e7f2      	b.n	8007758 <arm_mean_f32+0x18>
 8007772:	bf00      	nop
 8007774:	00000000 	.word	0x00000000

08007778 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8007778:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800777a:	4918      	ldr	r1, [pc, #96]	; (80077dc <MX_USB_Device_Init+0x64>)
 800777c:	4818      	ldr	r0, [pc, #96]	; (80077e0 <MX_USB_Device_Init+0x68>)
 800777e:	2200      	movs	r2, #0
 8007780:	f7ff fa7c 	bl	8006c7c <USBD_Init>
 8007784:	b970      	cbnz	r0, 80077a4 <MX_USB_Device_Init+0x2c>
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8007786:	4917      	ldr	r1, [pc, #92]	; (80077e4 <MX_USB_Device_Init+0x6c>)
 8007788:	4815      	ldr	r0, [pc, #84]	; (80077e0 <MX_USB_Device_Init+0x68>)
 800778a:	f7ff fa8b 	bl	8006ca4 <USBD_RegisterClass>
 800778e:	b988      	cbnz	r0, 80077b4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8007790:	4915      	ldr	r1, [pc, #84]	; (80077e8 <MX_USB_Device_Init+0x70>)
 8007792:	4813      	ldr	r0, [pc, #76]	; (80077e0 <MX_USB_Device_Init+0x68>)
 8007794:	f7ff fa14 	bl	8006bc0 <USBD_CDC_RegisterInterface>
 8007798:	b9a0      	cbnz	r0, 80077c4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800779a:	4811      	ldr	r0, [pc, #68]	; (80077e0 <MX_USB_Device_Init+0x68>)
 800779c:	f7ff fa9e 	bl	8006cdc <USBD_Start>
 80077a0:	b9b8      	cbnz	r0, 80077d2 <MX_USB_Device_Init+0x5a>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80077a2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80077a4:	f7fb fd52 	bl	800324c <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80077a8:	490e      	ldr	r1, [pc, #56]	; (80077e4 <MX_USB_Device_Init+0x6c>)
 80077aa:	480d      	ldr	r0, [pc, #52]	; (80077e0 <MX_USB_Device_Init+0x68>)
 80077ac:	f7ff fa7a 	bl	8006ca4 <USBD_RegisterClass>
 80077b0:	2800      	cmp	r0, #0
 80077b2:	d0ed      	beq.n	8007790 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80077b4:	f7fb fd4a 	bl	800324c <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80077b8:	490b      	ldr	r1, [pc, #44]	; (80077e8 <MX_USB_Device_Init+0x70>)
 80077ba:	4809      	ldr	r0, [pc, #36]	; (80077e0 <MX_USB_Device_Init+0x68>)
 80077bc:	f7ff fa00 	bl	8006bc0 <USBD_CDC_RegisterInterface>
 80077c0:	2800      	cmp	r0, #0
 80077c2:	d0ea      	beq.n	800779a <MX_USB_Device_Init+0x22>
    Error_Handler();
 80077c4:	f7fb fd42 	bl	800324c <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80077c8:	4805      	ldr	r0, [pc, #20]	; (80077e0 <MX_USB_Device_Init+0x68>)
 80077ca:	f7ff fa87 	bl	8006cdc <USBD_Start>
 80077ce:	2800      	cmp	r0, #0
 80077d0:	d0e7      	beq.n	80077a2 <MX_USB_Device_Init+0x2a>
}
 80077d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80077d6:	f7fb bd39 	b.w	800324c <Error_Handler>
 80077da:	bf00      	nop
 80077dc:	200000b8 	.word	0x200000b8
 80077e0:	20003d8c 	.word	0x20003d8c
 80077e4:	20000014 	.word	0x20000014
 80077e8:	2000009c 	.word	0x2000009c

080077ec <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80077ec:	2000      	movs	r0, #0
 80077ee:	4770      	bx	lr

080077f0 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80077f0:	2000      	movs	r0, #0
 80077f2:	4770      	bx	lr

080077f4 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 80077f4:	2000      	movs	r0, #0
 80077f6:	4770      	bx	lr

080077f8 <CDC_Receive_FS>:
{
 80077f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (byteInBuffer>2047)
 80077fa:	4e12      	ldr	r6, [pc, #72]	; (8007844 <CDC_Receive_FS+0x4c>)
	bufferFlag = 0;
 80077fc:	4f12      	ldr	r7, [pc, #72]	; (8007848 <CDC_Receive_FS+0x50>)
  if (byteInBuffer>2047)
 80077fe:	6833      	ldr	r3, [r6, #0]
	bufferFlag = 0;
 8007800:	2500      	movs	r5, #0
  if (byteInBuffer>2047)
 8007802:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
	bufferFlag = 0;
 8007806:	703d      	strb	r5, [r7, #0]
{
 8007808:	4602      	mov	r2, r0
 800780a:	460c      	mov	r4, r1
  if (byteInBuffer>2047)
 800780c:	d215      	bcs.n	800783a <CDC_Receive_FS+0x42>
  memcpy(&UserTxBufferFS[byteInBuffer],&Buf[0], *Len);
 800780e:	480f      	ldr	r0, [pc, #60]	; (800784c <CDC_Receive_FS+0x54>)
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[byteInBuffer]);
 8007810:	18d5      	adds	r5, r2, r3
  memcpy(&UserTxBufferFS[byteInBuffer],&Buf[0], *Len);
 8007812:	4418      	add	r0, r3
 8007814:	4611      	mov	r1, r2
 8007816:	6822      	ldr	r2, [r4, #0]
 8007818:	f000 fb0c 	bl	8007e34 <memcpy>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[byteInBuffer]);
 800781c:	4629      	mov	r1, r5
 800781e:	480c      	ldr	r0, [pc, #48]	; (8007850 <CDC_Receive_FS+0x58>)
 8007820:	f7ff f9e8 	bl	8006bf4 <USBD_CDC_SetRxBuffer>
  byteInBuffer += *Len;
 8007824:	6823      	ldr	r3, [r4, #0]
 8007826:	6832      	ldr	r2, [r6, #0]
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007828:	4809      	ldr	r0, [pc, #36]	; (8007850 <CDC_Receive_FS+0x58>)
  byteInBuffer += *Len;
 800782a:	4413      	add	r3, r2
 800782c:	6033      	str	r3, [r6, #0]
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800782e:	f7ff fa09 	bl	8006c44 <USBD_CDC_ReceivePacket>
	bufferFlag = 1;
 8007832:	2301      	movs	r3, #1
 8007834:	703b      	strb	r3, [r7, #0]
}
 8007836:	2000      	movs	r0, #0
 8007838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  byteInBuffer = 0;
 800783a:	6035      	str	r5, [r6, #0]
 800783c:	4605      	mov	r5, r0
 800783e:	4803      	ldr	r0, [pc, #12]	; (800784c <CDC_Receive_FS+0x54>)
 8007840:	e7e8      	b.n	8007814 <CDC_Receive_FS+0x1c>
 8007842:	bf00      	nop
 8007844:	20005068 	.word	0x20005068
 8007848:	200000b0 	.word	0x200000b0
 800784c:	20004868 	.word	0x20004868
 8007850:	20003d8c 	.word	0x20003d8c

08007854 <CDC_Init_FS>:
{
 8007854:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007856:	4c06      	ldr	r4, [pc, #24]	; (8007870 <CDC_Init_FS+0x1c>)
 8007858:	4906      	ldr	r1, [pc, #24]	; (8007874 <CDC_Init_FS+0x20>)
 800785a:	2200      	movs	r2, #0
 800785c:	4620      	mov	r0, r4
 800785e:	f7ff f9bb 	bl	8006bd8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007862:	4905      	ldr	r1, [pc, #20]	; (8007878 <CDC_Init_FS+0x24>)
 8007864:	4620      	mov	r0, r4
 8007866:	f7ff f9c5 	bl	8006bf4 <USBD_CDC_SetRxBuffer>
}
 800786a:	2000      	movs	r0, #0
 800786c:	bd10      	pop	{r4, pc}
 800786e:	bf00      	nop
 8007870:	20003d8c 	.word	0x20003d8c
 8007874:	20004868 	.word	0x20004868
 8007878:	20004068 	.word	0x20004068

0800787c <CDC_Transmit_FS>:
{
 800787c:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800787e:	4c09      	ldr	r4, [pc, #36]	; (80078a4 <CDC_Transmit_FS+0x28>)
 8007880:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 8007884:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007888:	b10b      	cbz	r3, 800788e <CDC_Transmit_FS+0x12>
}
 800788a:	2001      	movs	r0, #1
 800788c:	bd10      	pop	{r4, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800788e:	460a      	mov	r2, r1
 8007890:	4601      	mov	r1, r0
 8007892:	4620      	mov	r0, r4
 8007894:	f7ff f9a0 	bl	8006bd8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007898:	4620      	mov	r0, r4
}
 800789a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800789e:	f7ff b9b5 	b.w	8006c0c <USBD_CDC_TransmitPacket>
 80078a2:	bf00      	nop
 80078a4:	20003d8c 	.word	0x20003d8c

080078a8 <USBD_CDC_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80078a8:	2312      	movs	r3, #18
  return USBD_CDC_DeviceDesc;
}
 80078aa:	4801      	ldr	r0, [pc, #4]	; (80078b0 <USBD_CDC_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_CDC_DeviceDesc);
 80078ac:	800b      	strh	r3, [r1, #0]
}
 80078ae:	4770      	bx	lr
 80078b0:	200000d8 	.word	0x200000d8

080078b4 <USBD_CDC_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80078b4:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80078b6:	4801      	ldr	r0, [pc, #4]	; (80078bc <USBD_CDC_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80078b8:	800b      	strh	r3, [r1, #0]
}
 80078ba:	4770      	bx	lr
 80078bc:	200000ec 	.word	0x200000ec

080078c0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078c0:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80078c2:	4c04      	ldr	r4, [pc, #16]	; (80078d4 <USBD_CDC_ManufacturerStrDescriptor+0x14>)
 80078c4:	4804      	ldr	r0, [pc, #16]	; (80078d8 <USBD_CDC_ManufacturerStrDescriptor+0x18>)
{
 80078c6:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80078c8:	4621      	mov	r1, r4
 80078ca:	f7ff fe27 	bl	800751c <USBD_GetString>
  return USBD_StrDesc;
}
 80078ce:	4620      	mov	r0, r4
 80078d0:	bd10      	pop	{r4, pc}
 80078d2:	bf00      	nop
 80078d4:	2000506c 	.word	0x2000506c
 80078d8:	0800c8a0 	.word	0x0800c8a0

080078dc <USBD_CDC_ProductStrDescriptor>:
{
 80078dc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80078de:	4c04      	ldr	r4, [pc, #16]	; (80078f0 <USBD_CDC_ProductStrDescriptor+0x14>)
 80078e0:	4804      	ldr	r0, [pc, #16]	; (80078f4 <USBD_CDC_ProductStrDescriptor+0x18>)
{
 80078e2:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80078e4:	4621      	mov	r1, r4
 80078e6:	f7ff fe19 	bl	800751c <USBD_GetString>
}
 80078ea:	4620      	mov	r0, r4
 80078ec:	bd10      	pop	{r4, pc}
 80078ee:	bf00      	nop
 80078f0:	2000506c 	.word	0x2000506c
 80078f4:	0800c8b4 	.word	0x0800c8b4

080078f8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078f8:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80078fa:	4c04      	ldr	r4, [pc, #16]	; (800790c <USBD_CDC_ConfigStrDescriptor+0x14>)
 80078fc:	4804      	ldr	r0, [pc, #16]	; (8007910 <USBD_CDC_ConfigStrDescriptor+0x18>)
{
 80078fe:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8007900:	4621      	mov	r1, r4
 8007902:	f7ff fe0b 	bl	800751c <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8007906:	4620      	mov	r0, r4
 8007908:	bd10      	pop	{r4, pc}
 800790a:	bf00      	nop
 800790c:	2000506c 	.word	0x2000506c
 8007910:	0800c8cc 	.word	0x0800c8cc

08007914 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007914:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8007916:	4c04      	ldr	r4, [pc, #16]	; (8007928 <USBD_CDC_InterfaceStrDescriptor+0x14>)
 8007918:	4804      	ldr	r0, [pc, #16]	; (800792c <USBD_CDC_InterfaceStrDescriptor+0x18>)
{
 800791a:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800791c:	4621      	mov	r1, r4
 800791e:	f7ff fdfd 	bl	800751c <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8007922:	4620      	mov	r0, r4
 8007924:	bd10      	pop	{r4, pc}
 8007926:	bf00      	nop
 8007928:	2000506c 	.word	0x2000506c
 800792c:	0800c8d8 	.word	0x0800c8d8

08007930 <USBD_CDC_SerialStrDescriptor>:
{
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007930:	4a45      	ldr	r2, [pc, #276]	; (8007a48 <USBD_CDC_SerialStrDescriptor+0x118>)
 8007932:	f8d2 0590 	ldr.w	r0, [r2, #1424]	; 0x590
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 8007936:	f8d2 3598 	ldr.w	r3, [r2, #1432]	; 0x598
  *length = USB_SIZ_STRING_SERIAL;
 800793a:	f04f 0c1a 	mov.w	ip, #26

  if (deviceserial0 != 0)
 800793e:	18c3      	adds	r3, r0, r3
  *length = USB_SIZ_STRING_SERIAL;
 8007940:	f8a1 c000 	strh.w	ip, [r1]
  if (deviceserial0 != 0)
 8007944:	d101      	bne.n	800794a <USBD_CDC_SerialStrDescriptor+0x1a>
}
 8007946:	4841      	ldr	r0, [pc, #260]	; (8007a4c <USBD_CDC_SerialStrDescriptor+0x11c>)
 8007948:	4770      	bx	lr
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800794a:	f8d2 1594 	ldr.w	r1, [r2, #1428]	; 0x594

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800794e:	4a3f      	ldr	r2, [pc, #252]	; (8007a4c <USBD_CDC_SerialStrDescriptor+0x11c>)
    if (((value >> 28)) < 0xA)
 8007950:	0f18      	lsrs	r0, r3, #28
 8007952:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007956:	bf2c      	ite	cs
 8007958:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800795a:	3030      	addcc	r0, #48	; 0x30
 800795c:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 800795e:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8007962:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007964:	bf8c      	ite	hi
 8007966:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8007968:	3030      	addls	r0, #48	; 0x30
 800796a:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 800796c:	f3c3 5003 	ubfx	r0, r3, #20, #4
 8007970:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007972:	bf8c      	ite	hi
 8007974:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8007976:	3030      	addls	r0, #48	; 0x30
 8007978:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 800797a:	f3c3 4003 	ubfx	r0, r3, #16, #4
 800797e:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007980:	bf8c      	ite	hi
 8007982:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8007984:	3030      	addls	r0, #48	; 0x30
 8007986:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 8007988:	f3c3 3003 	ubfx	r0, r3, #12, #4
 800798c:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800798e:	bf8c      	ite	hi
 8007990:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8007992:	3030      	addls	r0, #48	; 0x30
 8007994:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 8007996:	f3c3 2003 	ubfx	r0, r3, #8, #4
 800799a:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800799c:	bf8c      	ite	hi
 800799e:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80079a0:	3030      	addls	r0, #48	; 0x30
 80079a2:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 80079a4:	f3c3 1003 	ubfx	r0, r3, #4, #4
 80079a8:	2809      	cmp	r0, #9
 80079aa:	f003 030f 	and.w	r3, r3, #15
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80079ae:	bf8c      	ite	hi
 80079b0:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80079b2:	3030      	addls	r0, #48	; 0x30
    if (((value >> 28)) < 0xA)
 80079b4:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 80079b6:	bf94      	ite	ls
 80079b8:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80079ba:	3337      	addhi	r3, #55	; 0x37
 80079bc:	7413      	strb	r3, [r2, #16]
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80079be:	2300      	movs	r3, #0
    if (((value >> 28)) < 0xA)
 80079c0:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
    pbuf[2 * idx + 1] = 0;
 80079c4:	7453      	strb	r3, [r2, #17]
    if (((value >> 28)) < 0xA)
 80079c6:	ea4f 7311 	mov.w	r3, r1, lsr #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80079ca:	bf2c      	ite	cs
 80079cc:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80079ce:	3330      	addcc	r3, #48	; 0x30
 80079d0:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 80079d2:	f3c1 6303 	ubfx	r3, r1, #24, #4
 80079d6:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80079d8:	bf8c      	ite	hi
 80079da:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80079dc:	3330      	addls	r3, #48	; 0x30
 80079de:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 80079e0:	f3c1 5303 	ubfx	r3, r1, #20, #4
 80079e4:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 80079e6:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80079ea:	bf8c      	ite	hi
 80079ec:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80079ee:	3330      	addls	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 80079f0:	f882 c003 	strb.w	ip, [r2, #3]
 80079f4:	f04f 0c00 	mov.w	ip, #0
 80079f8:	f882 c005 	strb.w	ip, [r2, #5]
      pbuf[2 * idx] = (value >> 28) + '0';
 80079fc:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 80079fe:	f04f 0c00 	mov.w	ip, #0
 8007a02:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a04:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 8007a06:	f3c1 4303 	ubfx	r3, r1, #16, #4
 8007a0a:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 8007a0c:	f882 c007 	strb.w	ip, [r2, #7]
 8007a10:	73d0      	strb	r0, [r2, #15]
 8007a12:	f04f 0c00 	mov.w	ip, #0
 8007a16:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a1a:	bf94      	ite	ls
 8007a1c:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a1e:	3337      	addhi	r3, #55	; 0x37
    pbuf[2 * idx + 1] = 0;
 8007a20:	f882 c009 	strb.w	ip, [r2, #9]
 8007a24:	74d0      	strb	r0, [r2, #19]
 8007a26:	f04f 0c00 	mov.w	ip, #0
 8007a2a:	2000      	movs	r0, #0
 8007a2c:	f882 c00b 	strb.w	ip, [r2, #11]
 8007a30:	7550      	strb	r0, [r2, #21]
 8007a32:	f04f 0c00 	mov.w	ip, #0
 8007a36:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a38:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	75d0      	strb	r0, [r2, #23]
 8007a3e:	f882 c00d 	strb.w	ip, [r2, #13]
}
 8007a42:	4802      	ldr	r0, [pc, #8]	; (8007a4c <USBD_CDC_SerialStrDescriptor+0x11c>)
    pbuf[2 * idx + 1] = 0;
 8007a44:	7653      	strb	r3, [r2, #25]
}
 8007a46:	4770      	bx	lr
 8007a48:	1fff7000 	.word	0x1fff7000
 8007a4c:	200000f0 	.word	0x200000f0

08007a50 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a50:	b510      	push	{r4, lr}
 8007a52:	4604      	mov	r4, r0
 8007a54:	b09c      	sub	sp, #112	; 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a56:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007a58:	2250      	movs	r2, #80	; 0x50
 8007a5a:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a5c:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8007a60:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8007a64:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007a66:	f000 fa0d 	bl	8007e84 <memset>
  if(pcdHandle->Instance==USB)
 8007a6a:	4b2b      	ldr	r3, [pc, #172]	; (8007b18 <HAL_PCD_MspInit+0xc8>)
 8007a6c:	6822      	ldr	r2, [r4, #0]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d001      	beq.n	8007a76 <HAL_PCD_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007a72:	b01c      	add	sp, #112	; 0x70
 8007a74:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007a76:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8007b00 <HAL_PCD_MspInit+0xb0>
 8007a7a:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007a7e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8007b08 <HAL_PCD_MspInit+0xb8>
 8007a82:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007a86:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8007b10 <HAL_PCD_MspInit+0xc0>
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8007a8a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007a8e:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007a90:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8007a94:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007a96:	f7fd fca7 	bl	80053e8 <HAL_RCCEx_PeriphCLKConfig>
 8007a9a:	bb68      	cbnz	r0, 8007af8 <HAL_PCD_MspInit+0xa8>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007a9c:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007aa0:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8007aa4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007aa6:	f043 0301 	orr.w	r3, r3, #1
 8007aaa:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007aac:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007aae:	f003 0301 	and.w	r3, r3, #1
 8007ab2:	9301      	str	r3, [sp, #4]
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007aba:	2200      	movs	r2, #0
 8007abc:	2300      	movs	r3, #0
 8007abe:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ac2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8007ac4:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  (void)tmpreg;
 8007aca:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8007acc:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ace:	f7fb fdd9 	bl	8003684 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8007ad2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ad4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ad8:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8007ada:	6da3      	ldr	r3, [r4, #88]	; 0x58
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8007adc:	2200      	movs	r2, #0
 8007ade:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ae2:	9300      	str	r3, [sp, #0]
 8007ae4:	4611      	mov	r1, r2
 8007ae6:	2014      	movs	r0, #20
  (void)tmpreg;
 8007ae8:	9b00      	ldr	r3, [sp, #0]
 8007aea:	f7fb fd65 	bl	80035b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8007aee:	2014      	movs	r0, #20
 8007af0:	f7fb fda0 	bl	8003634 <HAL_NVIC_EnableIRQ>
}
 8007af4:	b01c      	add	sp, #112	; 0x70
 8007af6:	bd10      	pop	{r4, pc}
      Error_Handler();
 8007af8:	f7fb fba8 	bl	800324c <Error_Handler>
 8007afc:	e7ce      	b.n	8007a9c <HAL_PCD_MspInit+0x4c>
 8007afe:	bf00      	nop
 8007b00:	00000100 	.word	0x00000100
 8007b04:	00000018 	.word	0x00000018
 8007b08:	00020000 	.word	0x00020000
 8007b0c:	02000000 	.word	0x02000000
 8007b10:	20000000 	.word	0x20000000
 8007b14:	01000000 	.word	0x01000000
 8007b18:	40006800 	.word	0x40006800

08007b1c <HAL_PCD_SetupStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b1c:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8007b20:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8007b24:	f7ff b8ee 	b.w	8006d04 <USBD_LL_SetupStage>

08007b28 <HAL_PCD_DataOutStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007b28:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8007b2c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8007b30:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8007b34:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8007b38:	f7ff b914 	b.w	8006d64 <USBD_LL_DataOutStage>

08007b3c <HAL_PCD_DataInStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007b3c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8007b40:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8007b44:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8007b48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b4a:	f7ff b945 	b.w	8006dd8 <USBD_LL_DataInStage>
 8007b4e:	bf00      	nop

08007b50 <HAL_PCD_SOFCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007b50:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8007b54:	f7ff b9e6 	b.w	8006f24 <USBD_LL_SOF>

08007b58 <HAL_PCD_ResetCallback>:
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007b58:	6883      	ldr	r3, [r0, #8]
 8007b5a:	2b02      	cmp	r3, #2
{
 8007b5c:	b510      	push	{r4, lr}
 8007b5e:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007b60:	d001      	beq.n	8007b66 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8007b62:	f7fb fb73 	bl	800324c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007b66:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
 8007b6a:	2101      	movs	r1, #1
 8007b6c:	f7ff f9bc 	bl	8006ee8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007b70:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8007b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007b78:	f7ff b988 	b.w	8006e8c <USBD_LL_Reset>

08007b7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b7c:	b510      	push	{r4, lr}
 8007b7e:	4604      	mov	r4, r0
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007b80:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8007b84:	f7ff f9b4 	bl	8006ef0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007b88:	69a3      	ldr	r3, [r4, #24]
 8007b8a:	b123      	cbz	r3, 8007b96 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007b8c:	4a02      	ldr	r2, [pc, #8]	; (8007b98 <HAL_PCD_SuspendCallback+0x1c>)
 8007b8e:	6913      	ldr	r3, [r2, #16]
 8007b90:	f043 0306 	orr.w	r3, r3, #6
 8007b94:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8007b96:	bd10      	pop	{r4, pc}
 8007b98:	e000ed00 	.word	0xe000ed00

08007b9c <HAL_PCD_ResumeCallback>:
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007b9c:	6983      	ldr	r3, [r0, #24]
{
 8007b9e:	b510      	push	{r4, lr}
 8007ba0:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 8007ba2:	b92b      	cbnz	r3, 8007bb0 <HAL_PCD_ResumeCallback+0x14>
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    SystemClockConfig_Resume();
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ba4:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8007ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007bac:	f7ff b9ae 	b.w	8006f0c <USBD_LL_Resume>
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007bb0:	4a06      	ldr	r2, [pc, #24]	; (8007bcc <HAL_PCD_ResumeCallback+0x30>)
 8007bb2:	6913      	ldr	r3, [r2, #16]
 8007bb4:	f023 0306 	bic.w	r3, r3, #6
 8007bb8:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 8007bba:	f7fb fa05 	bl	8002fc8 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007bbe:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
}
 8007bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007bc6:	f7ff b9a1 	b.w	8006f0c <USBD_LL_Resume>
 8007bca:	bf00      	nop
 8007bcc:	e000ed00 	.word	0xe000ed00

08007bd0 <USBD_LL_Init>:
{
 8007bd0:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_FS.pData = pdev;
 8007bd2:	4d23      	ldr	r5, [pc, #140]	; (8007c60 <USBD_LL_Init+0x90>)
 8007bd4:	f8c5 02f0 	str.w	r0, [r5, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 8007bd8:	f8c0 52c8 	str.w	r5, [r0, #712]	; 0x2c8
{
 8007bdc:	4604      	mov	r4, r0
  HAL_PWREx_EnableVddUSB();
 8007bde:	f7fc fe69 	bl	80048b4 <HAL_PWREx_EnableVddUSB>
  hpcd_USB_FS.Instance = USB;
 8007be2:	4920      	ldr	r1, [pc, #128]	; (8007c64 <USBD_LL_Init+0x94>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007be4:	2308      	movs	r3, #8
 8007be6:	e9c5 1300 	strd	r1, r3, [r5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007bea:	2002      	movs	r0, #2
 8007bec:	2100      	movs	r1, #0
 8007bee:	e9c5 0104 	strd	r0, r1, [r5, #16]
 8007bf2:	2000      	movs	r0, #0
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	e9c5 0106 	strd	r0, r1, [r5, #24]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007bfa:	2202      	movs	r2, #2
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007bfc:	2300      	movs	r3, #0
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007bfe:	4628      	mov	r0, r5
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007c00:	60aa      	str	r2, [r5, #8]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007c02:	622b      	str	r3, [r5, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007c04:	f7fb fec6 	bl	8003994 <HAL_PCD_Init>
 8007c08:	bb30      	cbnz	r0, 8007c58 <USBD_LL_Init+0x88>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	4611      	mov	r1, r2
 8007c0e:	f8d4 02c8 	ldr.w	r0, [r4, #712]	; 0x2c8
 8007c12:	2318      	movs	r3, #24
 8007c14:	f7fc fe08 	bl	8004828 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007c18:	f8d4 02c8 	ldr.w	r0, [r4, #712]	; 0x2c8
 8007c1c:	2358      	movs	r3, #88	; 0x58
 8007c1e:	2200      	movs	r2, #0
 8007c20:	2180      	movs	r1, #128	; 0x80
 8007c22:	f7fc fe01 	bl	8004828 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007c26:	f8d4 02c8 	ldr.w	r0, [r4, #712]	; 0x2c8
 8007c2a:	23c0      	movs	r3, #192	; 0xc0
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	2181      	movs	r1, #129	; 0x81
 8007c30:	f7fc fdfa 	bl	8004828 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007c34:	f8d4 02c8 	ldr.w	r0, [r4, #712]	; 0x2c8
 8007c38:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	2101      	movs	r1, #1
 8007c40:	f7fc fdf2 	bl	8004828 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007c44:	f8d4 02c8 	ldr.w	r0, [r4, #712]	; 0x2c8
 8007c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	2182      	movs	r1, #130	; 0x82
 8007c50:	f7fc fdea 	bl	8004828 <HAL_PCDEx_PMAConfig>
}
 8007c54:	2000      	movs	r0, #0
 8007c56:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 8007c58:	f7fb faf8 	bl	800324c <Error_Handler>
 8007c5c:	e7d5      	b.n	8007c0a <USBD_LL_Init+0x3a>
 8007c5e:	bf00      	nop
 8007c60:	20005270 	.word	0x20005270
 8007c64:	40006800 	.word	0x40006800

08007c68 <USBD_LL_Start>:
{
 8007c68:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8007c6a:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8007c6e:	f7fb fef9 	bl	8003a64 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8007c72:	2803      	cmp	r0, #3
 8007c74:	bf96      	itet	ls
 8007c76:	4b02      	ldrls	r3, [pc, #8]	; (8007c80 <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 8007c78:	2003      	movhi	r0, #3
 8007c7a:	5c18      	ldrbls	r0, [r3, r0]
}
 8007c7c:	bd08      	pop	{r3, pc}
 8007c7e:	bf00      	nop
 8007c80:	0800c8e8 	.word	0x0800c8e8

08007c84 <USBD_LL_OpenEP>:
{
 8007c84:	4694      	mov	ip, r2
 8007c86:	b508      	push	{r3, lr}
 8007c88:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007c8a:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8007c8e:	4663      	mov	r3, ip
 8007c90:	f7fc fca6 	bl	80045e0 <HAL_PCD_EP_Open>
  switch (hal_status)
 8007c94:	2803      	cmp	r0, #3
 8007c96:	bf96      	itet	ls
 8007c98:	4b01      	ldrls	r3, [pc, #4]	; (8007ca0 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007c9a:	2003      	movhi	r0, #3
 8007c9c:	5c18      	ldrbls	r0, [r3, r0]
}
 8007c9e:	bd08      	pop	{r3, pc}
 8007ca0:	0800c8e8 	.word	0x0800c8e8

08007ca4 <USBD_LL_CloseEP>:
{
 8007ca4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007ca6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8007caa:	f7fc fcd1 	bl	8004650 <HAL_PCD_EP_Close>
  switch (hal_status)
 8007cae:	2803      	cmp	r0, #3
 8007cb0:	bf96      	itet	ls
 8007cb2:	4b02      	ldrls	r3, [pc, #8]	; (8007cbc <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007cb4:	2003      	movhi	r0, #3
 8007cb6:	5c18      	ldrbls	r0, [r3, r0]
}
 8007cb8:	bd08      	pop	{r3, pc}
 8007cba:	bf00      	nop
 8007cbc:	0800c8e8 	.word	0x0800c8e8

08007cc0 <USBD_LL_StallEP>:
{
 8007cc0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007cc2:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8007cc6:	f7fc fd3b 	bl	8004740 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8007cca:	2803      	cmp	r0, #3
 8007ccc:	bf96      	itet	ls
 8007cce:	4b02      	ldrls	r3, [pc, #8]	; (8007cd8 <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007cd0:	2003      	movhi	r0, #3
 8007cd2:	5c18      	ldrbls	r0, [r3, r0]
}
 8007cd4:	bd08      	pop	{r3, pc}
 8007cd6:	bf00      	nop
 8007cd8:	0800c8e8 	.word	0x0800c8e8

08007cdc <USBD_LL_ClearStallEP>:
{
 8007cdc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007cde:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8007ce2:	f7fc fd65 	bl	80047b0 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 8007ce6:	2803      	cmp	r0, #3
 8007ce8:	bf96      	itet	ls
 8007cea:	4b02      	ldrls	r3, [pc, #8]	; (8007cf4 <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007cec:	2003      	movhi	r0, #3
 8007cee:	5c18      	ldrbls	r0, [r3, r0]
}
 8007cf0:	bd08      	pop	{r3, pc}
 8007cf2:	bf00      	nop
 8007cf4:	0800c8e8 	.word	0x0800c8e8

08007cf8 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8007cf8:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007cfa:	f8d0 32c8 	ldr.w	r3, [r0, #712]	; 0x2c8
  if((ep_addr & 0x80) == 0x80)
 8007cfe:	d406      	bmi.n	8007d0e <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d00:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007d04:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8007d08:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 8007d0c:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007d0e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8007d12:	3101      	adds	r1, #1
 8007d14:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007d18:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8007d1c:	7888      	ldrb	r0, [r1, #2]
 8007d1e:	4770      	bx	lr

08007d20 <USBD_LL_SetUSBAddress>:
{
 8007d20:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007d22:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8007d26:	f7fc fc47 	bl	80045b8 <HAL_PCD_SetAddress>
  switch (hal_status)
 8007d2a:	2803      	cmp	r0, #3
 8007d2c:	bf96      	itet	ls
 8007d2e:	4b02      	ldrls	r3, [pc, #8]	; (8007d38 <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007d30:	2003      	movhi	r0, #3
 8007d32:	5c18      	ldrbls	r0, [r3, r0]
}
 8007d34:	bd08      	pop	{r3, pc}
 8007d36:	bf00      	nop
 8007d38:	0800c8e8 	.word	0x0800c8e8

08007d3c <USBD_LL_Transmit>:
{
 8007d3c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007d3e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8007d42:	f7fc fcd9 	bl	80046f8 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8007d46:	2803      	cmp	r0, #3
 8007d48:	bf96      	itet	ls
 8007d4a:	4b02      	ldrls	r3, [pc, #8]	; (8007d54 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007d4c:	2003      	movhi	r0, #3
 8007d4e:	5c18      	ldrbls	r0, [r3, r0]
}
 8007d50:	bd08      	pop	{r3, pc}
 8007d52:	bf00      	nop
 8007d54:	0800c8e8 	.word	0x0800c8e8

08007d58 <USBD_LL_PrepareReceive>:
{
 8007d58:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007d5a:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8007d5e:	f7fc fca7 	bl	80046b0 <HAL_PCD_EP_Receive>
  switch (hal_status)
 8007d62:	2803      	cmp	r0, #3
 8007d64:	bf96      	itet	ls
 8007d66:	4b02      	ldrls	r3, [pc, #8]	; (8007d70 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007d68:	2003      	movhi	r0, #3
 8007d6a:	5c18      	ldrbls	r0, [r3, r0]
}
 8007d6c:	bd08      	pop	{r3, pc}
 8007d6e:	bf00      	nop
 8007d70:	0800c8e8 	.word	0x0800c8e8

08007d74 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007d74:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8007d78:	f7fc bcb4 	b.w	80046e4 <HAL_PCD_EP_GetRxCount>

08007d7c <HAL_PCDEx_LPM_Callback>:
{
 8007d7c:	b510      	push	{r4, lr}
 8007d7e:	4604      	mov	r4, r0
  switch (msg)
 8007d80:	b169      	cbz	r1, 8007d9e <HAL_PCDEx_LPM_Callback+0x22>
 8007d82:	2901      	cmp	r1, #1
 8007d84:	d10a      	bne.n	8007d9c <HAL_PCDEx_LPM_Callback+0x20>
    USBD_LL_Suspend(hpcd->pData);
 8007d86:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8007d8a:	f7ff f8b1 	bl	8006ef0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007d8e:	69a3      	ldr	r3, [r4, #24]
 8007d90:	b123      	cbz	r3, 8007d9c <HAL_PCDEx_LPM_Callback+0x20>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d92:	4a0d      	ldr	r2, [pc, #52]	; (8007dc8 <HAL_PCDEx_LPM_Callback+0x4c>)
 8007d94:	6913      	ldr	r3, [r2, #16]
 8007d96:	f043 0306 	orr.w	r3, r3, #6
 8007d9a:	6113      	str	r3, [r2, #16]
}
 8007d9c:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8007d9e:	6983      	ldr	r3, [r0, #24]
 8007da0:	b92b      	cbnz	r3, 8007dae <HAL_PCDEx_LPM_Callback+0x32>
    USBD_LL_Resume(hpcd->pData);
 8007da2:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
}
 8007da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 8007daa:	f7ff b8af 	b.w	8006f0c <USBD_LL_Resume>
  SystemClock_Config();
 8007dae:	f7fb f90b 	bl	8002fc8 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007db2:	4a05      	ldr	r2, [pc, #20]	; (8007dc8 <HAL_PCDEx_LPM_Callback+0x4c>)
    USBD_LL_Resume(hpcd->pData);
 8007db4:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007db8:	6913      	ldr	r3, [r2, #16]
 8007dba:	f023 0306 	bic.w	r3, r3, #6
}
 8007dbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007dc2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8007dc4:	f7ff b8a2 	b.w	8006f0c <USBD_LL_Resume>
 8007dc8:	e000ed00 	.word	0xe000ed00

08007dcc <USBD_static_malloc>:
}
 8007dcc:	4800      	ldr	r0, [pc, #0]	; (8007dd0 <USBD_static_malloc+0x4>)
 8007dce:	4770      	bx	lr
 8007dd0:	20005564 	.word	0x20005564

08007dd4 <USBD_static_free>:
}
 8007dd4:	4770      	bx	lr
 8007dd6:	bf00      	nop

08007dd8 <atoi>:
 8007dd8:	220a      	movs	r2, #10
 8007dda:	2100      	movs	r1, #0
 8007ddc:	f001 bda8 	b.w	8009930 <strtol>

08007de0 <__errno>:
 8007de0:	4b01      	ldr	r3, [pc, #4]	; (8007de8 <__errno+0x8>)
 8007de2:	6818      	ldr	r0, [r3, #0]
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	2000010c 	.word	0x2000010c

08007dec <__libc_init_array>:
 8007dec:	b570      	push	{r4, r5, r6, lr}
 8007dee:	4d0d      	ldr	r5, [pc, #52]	; (8007e24 <__libc_init_array+0x38>)
 8007df0:	4c0d      	ldr	r4, [pc, #52]	; (8007e28 <__libc_init_array+0x3c>)
 8007df2:	1b64      	subs	r4, r4, r5
 8007df4:	10a4      	asrs	r4, r4, #2
 8007df6:	2600      	movs	r6, #0
 8007df8:	42a6      	cmp	r6, r4
 8007dfa:	d109      	bne.n	8007e10 <__libc_init_array+0x24>
 8007dfc:	4d0b      	ldr	r5, [pc, #44]	; (8007e2c <__libc_init_array+0x40>)
 8007dfe:	4c0c      	ldr	r4, [pc, #48]	; (8007e30 <__libc_init_array+0x44>)
 8007e00:	f004 fc9c 	bl	800c73c <_init>
 8007e04:	1b64      	subs	r4, r4, r5
 8007e06:	10a4      	asrs	r4, r4, #2
 8007e08:	2600      	movs	r6, #0
 8007e0a:	42a6      	cmp	r6, r4
 8007e0c:	d105      	bne.n	8007e1a <__libc_init_array+0x2e>
 8007e0e:	bd70      	pop	{r4, r5, r6, pc}
 8007e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e14:	4798      	blx	r3
 8007e16:	3601      	adds	r6, #1
 8007e18:	e7ee      	b.n	8007df8 <__libc_init_array+0xc>
 8007e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e1e:	4798      	blx	r3
 8007e20:	3601      	adds	r6, #1
 8007e22:	e7f2      	b.n	8007e0a <__libc_init_array+0x1e>
 8007e24:	0800cd94 	.word	0x0800cd94
 8007e28:	0800cd94 	.word	0x0800cd94
 8007e2c:	0800cd94 	.word	0x0800cd94
 8007e30:	0800cd98 	.word	0x0800cd98

08007e34 <memcpy>:
 8007e34:	440a      	add	r2, r1
 8007e36:	4291      	cmp	r1, r2
 8007e38:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e3c:	d100      	bne.n	8007e40 <memcpy+0xc>
 8007e3e:	4770      	bx	lr
 8007e40:	b510      	push	{r4, lr}
 8007e42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e4a:	4291      	cmp	r1, r2
 8007e4c:	d1f9      	bne.n	8007e42 <memcpy+0xe>
 8007e4e:	bd10      	pop	{r4, pc}

08007e50 <memmove>:
 8007e50:	4288      	cmp	r0, r1
 8007e52:	b510      	push	{r4, lr}
 8007e54:	eb01 0402 	add.w	r4, r1, r2
 8007e58:	d902      	bls.n	8007e60 <memmove+0x10>
 8007e5a:	4284      	cmp	r4, r0
 8007e5c:	4623      	mov	r3, r4
 8007e5e:	d807      	bhi.n	8007e70 <memmove+0x20>
 8007e60:	1e43      	subs	r3, r0, #1
 8007e62:	42a1      	cmp	r1, r4
 8007e64:	d008      	beq.n	8007e78 <memmove+0x28>
 8007e66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e6e:	e7f8      	b.n	8007e62 <memmove+0x12>
 8007e70:	4402      	add	r2, r0
 8007e72:	4601      	mov	r1, r0
 8007e74:	428a      	cmp	r2, r1
 8007e76:	d100      	bne.n	8007e7a <memmove+0x2a>
 8007e78:	bd10      	pop	{r4, pc}
 8007e7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e82:	e7f7      	b.n	8007e74 <memmove+0x24>

08007e84 <memset>:
 8007e84:	4402      	add	r2, r0
 8007e86:	4603      	mov	r3, r0
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d100      	bne.n	8007e8e <memset+0xa>
 8007e8c:	4770      	bx	lr
 8007e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8007e92:	e7f9      	b.n	8007e88 <memset+0x4>

08007e94 <__cvt>:
 8007e94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e98:	ec55 4b10 	vmov	r4, r5, d0
 8007e9c:	2d00      	cmp	r5, #0
 8007e9e:	460e      	mov	r6, r1
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	462b      	mov	r3, r5
 8007ea4:	bfbb      	ittet	lt
 8007ea6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007eaa:	461d      	movlt	r5, r3
 8007eac:	2300      	movge	r3, #0
 8007eae:	232d      	movlt	r3, #45	; 0x2d
 8007eb0:	700b      	strb	r3, [r1, #0]
 8007eb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007eb4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007eb8:	4691      	mov	r9, r2
 8007eba:	f023 0820 	bic.w	r8, r3, #32
 8007ebe:	bfbc      	itt	lt
 8007ec0:	4622      	movlt	r2, r4
 8007ec2:	4614      	movlt	r4, r2
 8007ec4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ec8:	d005      	beq.n	8007ed6 <__cvt+0x42>
 8007eca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007ece:	d100      	bne.n	8007ed2 <__cvt+0x3e>
 8007ed0:	3601      	adds	r6, #1
 8007ed2:	2102      	movs	r1, #2
 8007ed4:	e000      	b.n	8007ed8 <__cvt+0x44>
 8007ed6:	2103      	movs	r1, #3
 8007ed8:	ab03      	add	r3, sp, #12
 8007eda:	9301      	str	r3, [sp, #4]
 8007edc:	ab02      	add	r3, sp, #8
 8007ede:	9300      	str	r3, [sp, #0]
 8007ee0:	ec45 4b10 	vmov	d0, r4, r5
 8007ee4:	4653      	mov	r3, sl
 8007ee6:	4632      	mov	r2, r6
 8007ee8:	f001 fdba 	bl	8009a60 <_dtoa_r>
 8007eec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007ef0:	4607      	mov	r7, r0
 8007ef2:	d102      	bne.n	8007efa <__cvt+0x66>
 8007ef4:	f019 0f01 	tst.w	r9, #1
 8007ef8:	d022      	beq.n	8007f40 <__cvt+0xac>
 8007efa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007efe:	eb07 0906 	add.w	r9, r7, r6
 8007f02:	d110      	bne.n	8007f26 <__cvt+0x92>
 8007f04:	783b      	ldrb	r3, [r7, #0]
 8007f06:	2b30      	cmp	r3, #48	; 0x30
 8007f08:	d10a      	bne.n	8007f20 <__cvt+0x8c>
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	4620      	mov	r0, r4
 8007f10:	4629      	mov	r1, r5
 8007f12:	f7f8 fdb1 	bl	8000a78 <__aeabi_dcmpeq>
 8007f16:	b918      	cbnz	r0, 8007f20 <__cvt+0x8c>
 8007f18:	f1c6 0601 	rsb	r6, r6, #1
 8007f1c:	f8ca 6000 	str.w	r6, [sl]
 8007f20:	f8da 3000 	ldr.w	r3, [sl]
 8007f24:	4499      	add	r9, r3
 8007f26:	2200      	movs	r2, #0
 8007f28:	2300      	movs	r3, #0
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	4629      	mov	r1, r5
 8007f2e:	f7f8 fda3 	bl	8000a78 <__aeabi_dcmpeq>
 8007f32:	b108      	cbz	r0, 8007f38 <__cvt+0xa4>
 8007f34:	f8cd 900c 	str.w	r9, [sp, #12]
 8007f38:	2230      	movs	r2, #48	; 0x30
 8007f3a:	9b03      	ldr	r3, [sp, #12]
 8007f3c:	454b      	cmp	r3, r9
 8007f3e:	d307      	bcc.n	8007f50 <__cvt+0xbc>
 8007f40:	9b03      	ldr	r3, [sp, #12]
 8007f42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f44:	1bdb      	subs	r3, r3, r7
 8007f46:	4638      	mov	r0, r7
 8007f48:	6013      	str	r3, [r2, #0]
 8007f4a:	b004      	add	sp, #16
 8007f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f50:	1c59      	adds	r1, r3, #1
 8007f52:	9103      	str	r1, [sp, #12]
 8007f54:	701a      	strb	r2, [r3, #0]
 8007f56:	e7f0      	b.n	8007f3a <__cvt+0xa6>

08007f58 <__exponent>:
 8007f58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2900      	cmp	r1, #0
 8007f5e:	bfb8      	it	lt
 8007f60:	4249      	neglt	r1, r1
 8007f62:	f803 2b02 	strb.w	r2, [r3], #2
 8007f66:	bfb4      	ite	lt
 8007f68:	222d      	movlt	r2, #45	; 0x2d
 8007f6a:	222b      	movge	r2, #43	; 0x2b
 8007f6c:	2909      	cmp	r1, #9
 8007f6e:	7042      	strb	r2, [r0, #1]
 8007f70:	dd2a      	ble.n	8007fc8 <__exponent+0x70>
 8007f72:	f10d 0407 	add.w	r4, sp, #7
 8007f76:	46a4      	mov	ip, r4
 8007f78:	270a      	movs	r7, #10
 8007f7a:	46a6      	mov	lr, r4
 8007f7c:	460a      	mov	r2, r1
 8007f7e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007f82:	fb07 1516 	mls	r5, r7, r6, r1
 8007f86:	3530      	adds	r5, #48	; 0x30
 8007f88:	2a63      	cmp	r2, #99	; 0x63
 8007f8a:	f104 34ff 	add.w	r4, r4, #4294967295
 8007f8e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007f92:	4631      	mov	r1, r6
 8007f94:	dcf1      	bgt.n	8007f7a <__exponent+0x22>
 8007f96:	3130      	adds	r1, #48	; 0x30
 8007f98:	f1ae 0502 	sub.w	r5, lr, #2
 8007f9c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007fa0:	1c44      	adds	r4, r0, #1
 8007fa2:	4629      	mov	r1, r5
 8007fa4:	4561      	cmp	r1, ip
 8007fa6:	d30a      	bcc.n	8007fbe <__exponent+0x66>
 8007fa8:	f10d 0209 	add.w	r2, sp, #9
 8007fac:	eba2 020e 	sub.w	r2, r2, lr
 8007fb0:	4565      	cmp	r5, ip
 8007fb2:	bf88      	it	hi
 8007fb4:	2200      	movhi	r2, #0
 8007fb6:	4413      	add	r3, r2
 8007fb8:	1a18      	subs	r0, r3, r0
 8007fba:	b003      	add	sp, #12
 8007fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fc2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007fc6:	e7ed      	b.n	8007fa4 <__exponent+0x4c>
 8007fc8:	2330      	movs	r3, #48	; 0x30
 8007fca:	3130      	adds	r1, #48	; 0x30
 8007fcc:	7083      	strb	r3, [r0, #2]
 8007fce:	70c1      	strb	r1, [r0, #3]
 8007fd0:	1d03      	adds	r3, r0, #4
 8007fd2:	e7f1      	b.n	8007fb8 <__exponent+0x60>

08007fd4 <_printf_float>:
 8007fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd8:	ed2d 8b02 	vpush	{d8}
 8007fdc:	b08d      	sub	sp, #52	; 0x34
 8007fde:	460c      	mov	r4, r1
 8007fe0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007fe4:	4616      	mov	r6, r2
 8007fe6:	461f      	mov	r7, r3
 8007fe8:	4605      	mov	r5, r0
 8007fea:	f002 fe97 	bl	800ad1c <_localeconv_r>
 8007fee:	f8d0 a000 	ldr.w	sl, [r0]
 8007ff2:	4650      	mov	r0, sl
 8007ff4:	f7f8 f8c4 	bl	8000180 <strlen>
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	930a      	str	r3, [sp, #40]	; 0x28
 8007ffc:	6823      	ldr	r3, [r4, #0]
 8007ffe:	9305      	str	r3, [sp, #20]
 8008000:	f8d8 3000 	ldr.w	r3, [r8]
 8008004:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008008:	3307      	adds	r3, #7
 800800a:	f023 0307 	bic.w	r3, r3, #7
 800800e:	f103 0208 	add.w	r2, r3, #8
 8008012:	f8c8 2000 	str.w	r2, [r8]
 8008016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800801e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008022:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008026:	9307      	str	r3, [sp, #28]
 8008028:	f8cd 8018 	str.w	r8, [sp, #24]
 800802c:	ee08 0a10 	vmov	s16, r0
 8008030:	4b9f      	ldr	r3, [pc, #636]	; (80082b0 <_printf_float+0x2dc>)
 8008032:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008036:	f04f 32ff 	mov.w	r2, #4294967295
 800803a:	f7f8 fd4f 	bl	8000adc <__aeabi_dcmpun>
 800803e:	bb88      	cbnz	r0, 80080a4 <_printf_float+0xd0>
 8008040:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008044:	4b9a      	ldr	r3, [pc, #616]	; (80082b0 <_printf_float+0x2dc>)
 8008046:	f04f 32ff 	mov.w	r2, #4294967295
 800804a:	f7f8 fd29 	bl	8000aa0 <__aeabi_dcmple>
 800804e:	bb48      	cbnz	r0, 80080a4 <_printf_float+0xd0>
 8008050:	2200      	movs	r2, #0
 8008052:	2300      	movs	r3, #0
 8008054:	4640      	mov	r0, r8
 8008056:	4649      	mov	r1, r9
 8008058:	f7f8 fd18 	bl	8000a8c <__aeabi_dcmplt>
 800805c:	b110      	cbz	r0, 8008064 <_printf_float+0x90>
 800805e:	232d      	movs	r3, #45	; 0x2d
 8008060:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008064:	4b93      	ldr	r3, [pc, #588]	; (80082b4 <_printf_float+0x2e0>)
 8008066:	4894      	ldr	r0, [pc, #592]	; (80082b8 <_printf_float+0x2e4>)
 8008068:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800806c:	bf94      	ite	ls
 800806e:	4698      	movls	r8, r3
 8008070:	4680      	movhi	r8, r0
 8008072:	2303      	movs	r3, #3
 8008074:	6123      	str	r3, [r4, #16]
 8008076:	9b05      	ldr	r3, [sp, #20]
 8008078:	f023 0204 	bic.w	r2, r3, #4
 800807c:	6022      	str	r2, [r4, #0]
 800807e:	f04f 0900 	mov.w	r9, #0
 8008082:	9700      	str	r7, [sp, #0]
 8008084:	4633      	mov	r3, r6
 8008086:	aa0b      	add	r2, sp, #44	; 0x2c
 8008088:	4621      	mov	r1, r4
 800808a:	4628      	mov	r0, r5
 800808c:	f000 f9d8 	bl	8008440 <_printf_common>
 8008090:	3001      	adds	r0, #1
 8008092:	f040 8090 	bne.w	80081b6 <_printf_float+0x1e2>
 8008096:	f04f 30ff 	mov.w	r0, #4294967295
 800809a:	b00d      	add	sp, #52	; 0x34
 800809c:	ecbd 8b02 	vpop	{d8}
 80080a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a4:	4642      	mov	r2, r8
 80080a6:	464b      	mov	r3, r9
 80080a8:	4640      	mov	r0, r8
 80080aa:	4649      	mov	r1, r9
 80080ac:	f7f8 fd16 	bl	8000adc <__aeabi_dcmpun>
 80080b0:	b140      	cbz	r0, 80080c4 <_printf_float+0xf0>
 80080b2:	464b      	mov	r3, r9
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	bfbc      	itt	lt
 80080b8:	232d      	movlt	r3, #45	; 0x2d
 80080ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80080be:	487f      	ldr	r0, [pc, #508]	; (80082bc <_printf_float+0x2e8>)
 80080c0:	4b7f      	ldr	r3, [pc, #508]	; (80082c0 <_printf_float+0x2ec>)
 80080c2:	e7d1      	b.n	8008068 <_printf_float+0x94>
 80080c4:	6863      	ldr	r3, [r4, #4]
 80080c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80080ca:	9206      	str	r2, [sp, #24]
 80080cc:	1c5a      	adds	r2, r3, #1
 80080ce:	d13f      	bne.n	8008150 <_printf_float+0x17c>
 80080d0:	2306      	movs	r3, #6
 80080d2:	6063      	str	r3, [r4, #4]
 80080d4:	9b05      	ldr	r3, [sp, #20]
 80080d6:	6861      	ldr	r1, [r4, #4]
 80080d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80080dc:	2300      	movs	r3, #0
 80080de:	9303      	str	r3, [sp, #12]
 80080e0:	ab0a      	add	r3, sp, #40	; 0x28
 80080e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80080e6:	ab09      	add	r3, sp, #36	; 0x24
 80080e8:	ec49 8b10 	vmov	d0, r8, r9
 80080ec:	9300      	str	r3, [sp, #0]
 80080ee:	6022      	str	r2, [r4, #0]
 80080f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80080f4:	4628      	mov	r0, r5
 80080f6:	f7ff fecd 	bl	8007e94 <__cvt>
 80080fa:	9b06      	ldr	r3, [sp, #24]
 80080fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080fe:	2b47      	cmp	r3, #71	; 0x47
 8008100:	4680      	mov	r8, r0
 8008102:	d108      	bne.n	8008116 <_printf_float+0x142>
 8008104:	1cc8      	adds	r0, r1, #3
 8008106:	db02      	blt.n	800810e <_printf_float+0x13a>
 8008108:	6863      	ldr	r3, [r4, #4]
 800810a:	4299      	cmp	r1, r3
 800810c:	dd41      	ble.n	8008192 <_printf_float+0x1be>
 800810e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008112:	fa5f fb8b 	uxtb.w	fp, fp
 8008116:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800811a:	d820      	bhi.n	800815e <_printf_float+0x18a>
 800811c:	3901      	subs	r1, #1
 800811e:	465a      	mov	r2, fp
 8008120:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008124:	9109      	str	r1, [sp, #36]	; 0x24
 8008126:	f7ff ff17 	bl	8007f58 <__exponent>
 800812a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800812c:	1813      	adds	r3, r2, r0
 800812e:	2a01      	cmp	r2, #1
 8008130:	4681      	mov	r9, r0
 8008132:	6123      	str	r3, [r4, #16]
 8008134:	dc02      	bgt.n	800813c <_printf_float+0x168>
 8008136:	6822      	ldr	r2, [r4, #0]
 8008138:	07d2      	lsls	r2, r2, #31
 800813a:	d501      	bpl.n	8008140 <_printf_float+0x16c>
 800813c:	3301      	adds	r3, #1
 800813e:	6123      	str	r3, [r4, #16]
 8008140:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008144:	2b00      	cmp	r3, #0
 8008146:	d09c      	beq.n	8008082 <_printf_float+0xae>
 8008148:	232d      	movs	r3, #45	; 0x2d
 800814a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800814e:	e798      	b.n	8008082 <_printf_float+0xae>
 8008150:	9a06      	ldr	r2, [sp, #24]
 8008152:	2a47      	cmp	r2, #71	; 0x47
 8008154:	d1be      	bne.n	80080d4 <_printf_float+0x100>
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1bc      	bne.n	80080d4 <_printf_float+0x100>
 800815a:	2301      	movs	r3, #1
 800815c:	e7b9      	b.n	80080d2 <_printf_float+0xfe>
 800815e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008162:	d118      	bne.n	8008196 <_printf_float+0x1c2>
 8008164:	2900      	cmp	r1, #0
 8008166:	6863      	ldr	r3, [r4, #4]
 8008168:	dd0b      	ble.n	8008182 <_printf_float+0x1ae>
 800816a:	6121      	str	r1, [r4, #16]
 800816c:	b913      	cbnz	r3, 8008174 <_printf_float+0x1a0>
 800816e:	6822      	ldr	r2, [r4, #0]
 8008170:	07d0      	lsls	r0, r2, #31
 8008172:	d502      	bpl.n	800817a <_printf_float+0x1a6>
 8008174:	3301      	adds	r3, #1
 8008176:	440b      	add	r3, r1
 8008178:	6123      	str	r3, [r4, #16]
 800817a:	65a1      	str	r1, [r4, #88]	; 0x58
 800817c:	f04f 0900 	mov.w	r9, #0
 8008180:	e7de      	b.n	8008140 <_printf_float+0x16c>
 8008182:	b913      	cbnz	r3, 800818a <_printf_float+0x1b6>
 8008184:	6822      	ldr	r2, [r4, #0]
 8008186:	07d2      	lsls	r2, r2, #31
 8008188:	d501      	bpl.n	800818e <_printf_float+0x1ba>
 800818a:	3302      	adds	r3, #2
 800818c:	e7f4      	b.n	8008178 <_printf_float+0x1a4>
 800818e:	2301      	movs	r3, #1
 8008190:	e7f2      	b.n	8008178 <_printf_float+0x1a4>
 8008192:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008198:	4299      	cmp	r1, r3
 800819a:	db05      	blt.n	80081a8 <_printf_float+0x1d4>
 800819c:	6823      	ldr	r3, [r4, #0]
 800819e:	6121      	str	r1, [r4, #16]
 80081a0:	07d8      	lsls	r0, r3, #31
 80081a2:	d5ea      	bpl.n	800817a <_printf_float+0x1a6>
 80081a4:	1c4b      	adds	r3, r1, #1
 80081a6:	e7e7      	b.n	8008178 <_printf_float+0x1a4>
 80081a8:	2900      	cmp	r1, #0
 80081aa:	bfd4      	ite	le
 80081ac:	f1c1 0202 	rsble	r2, r1, #2
 80081b0:	2201      	movgt	r2, #1
 80081b2:	4413      	add	r3, r2
 80081b4:	e7e0      	b.n	8008178 <_printf_float+0x1a4>
 80081b6:	6823      	ldr	r3, [r4, #0]
 80081b8:	055a      	lsls	r2, r3, #21
 80081ba:	d407      	bmi.n	80081cc <_printf_float+0x1f8>
 80081bc:	6923      	ldr	r3, [r4, #16]
 80081be:	4642      	mov	r2, r8
 80081c0:	4631      	mov	r1, r6
 80081c2:	4628      	mov	r0, r5
 80081c4:	47b8      	blx	r7
 80081c6:	3001      	adds	r0, #1
 80081c8:	d12c      	bne.n	8008224 <_printf_float+0x250>
 80081ca:	e764      	b.n	8008096 <_printf_float+0xc2>
 80081cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80081d0:	f240 80e0 	bls.w	8008394 <_printf_float+0x3c0>
 80081d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80081d8:	2200      	movs	r2, #0
 80081da:	2300      	movs	r3, #0
 80081dc:	f7f8 fc4c 	bl	8000a78 <__aeabi_dcmpeq>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	d034      	beq.n	800824e <_printf_float+0x27a>
 80081e4:	4a37      	ldr	r2, [pc, #220]	; (80082c4 <_printf_float+0x2f0>)
 80081e6:	2301      	movs	r3, #1
 80081e8:	4631      	mov	r1, r6
 80081ea:	4628      	mov	r0, r5
 80081ec:	47b8      	blx	r7
 80081ee:	3001      	adds	r0, #1
 80081f0:	f43f af51 	beq.w	8008096 <_printf_float+0xc2>
 80081f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081f8:	429a      	cmp	r2, r3
 80081fa:	db02      	blt.n	8008202 <_printf_float+0x22e>
 80081fc:	6823      	ldr	r3, [r4, #0]
 80081fe:	07d8      	lsls	r0, r3, #31
 8008200:	d510      	bpl.n	8008224 <_printf_float+0x250>
 8008202:	ee18 3a10 	vmov	r3, s16
 8008206:	4652      	mov	r2, sl
 8008208:	4631      	mov	r1, r6
 800820a:	4628      	mov	r0, r5
 800820c:	47b8      	blx	r7
 800820e:	3001      	adds	r0, #1
 8008210:	f43f af41 	beq.w	8008096 <_printf_float+0xc2>
 8008214:	f04f 0800 	mov.w	r8, #0
 8008218:	f104 091a 	add.w	r9, r4, #26
 800821c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800821e:	3b01      	subs	r3, #1
 8008220:	4543      	cmp	r3, r8
 8008222:	dc09      	bgt.n	8008238 <_printf_float+0x264>
 8008224:	6823      	ldr	r3, [r4, #0]
 8008226:	079b      	lsls	r3, r3, #30
 8008228:	f100 8105 	bmi.w	8008436 <_printf_float+0x462>
 800822c:	68e0      	ldr	r0, [r4, #12]
 800822e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008230:	4298      	cmp	r0, r3
 8008232:	bfb8      	it	lt
 8008234:	4618      	movlt	r0, r3
 8008236:	e730      	b.n	800809a <_printf_float+0xc6>
 8008238:	2301      	movs	r3, #1
 800823a:	464a      	mov	r2, r9
 800823c:	4631      	mov	r1, r6
 800823e:	4628      	mov	r0, r5
 8008240:	47b8      	blx	r7
 8008242:	3001      	adds	r0, #1
 8008244:	f43f af27 	beq.w	8008096 <_printf_float+0xc2>
 8008248:	f108 0801 	add.w	r8, r8, #1
 800824c:	e7e6      	b.n	800821c <_printf_float+0x248>
 800824e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008250:	2b00      	cmp	r3, #0
 8008252:	dc39      	bgt.n	80082c8 <_printf_float+0x2f4>
 8008254:	4a1b      	ldr	r2, [pc, #108]	; (80082c4 <_printf_float+0x2f0>)
 8008256:	2301      	movs	r3, #1
 8008258:	4631      	mov	r1, r6
 800825a:	4628      	mov	r0, r5
 800825c:	47b8      	blx	r7
 800825e:	3001      	adds	r0, #1
 8008260:	f43f af19 	beq.w	8008096 <_printf_float+0xc2>
 8008264:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008268:	4313      	orrs	r3, r2
 800826a:	d102      	bne.n	8008272 <_printf_float+0x29e>
 800826c:	6823      	ldr	r3, [r4, #0]
 800826e:	07d9      	lsls	r1, r3, #31
 8008270:	d5d8      	bpl.n	8008224 <_printf_float+0x250>
 8008272:	ee18 3a10 	vmov	r3, s16
 8008276:	4652      	mov	r2, sl
 8008278:	4631      	mov	r1, r6
 800827a:	4628      	mov	r0, r5
 800827c:	47b8      	blx	r7
 800827e:	3001      	adds	r0, #1
 8008280:	f43f af09 	beq.w	8008096 <_printf_float+0xc2>
 8008284:	f04f 0900 	mov.w	r9, #0
 8008288:	f104 0a1a 	add.w	sl, r4, #26
 800828c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800828e:	425b      	negs	r3, r3
 8008290:	454b      	cmp	r3, r9
 8008292:	dc01      	bgt.n	8008298 <_printf_float+0x2c4>
 8008294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008296:	e792      	b.n	80081be <_printf_float+0x1ea>
 8008298:	2301      	movs	r3, #1
 800829a:	4652      	mov	r2, sl
 800829c:	4631      	mov	r1, r6
 800829e:	4628      	mov	r0, r5
 80082a0:	47b8      	blx	r7
 80082a2:	3001      	adds	r0, #1
 80082a4:	f43f aef7 	beq.w	8008096 <_printf_float+0xc2>
 80082a8:	f109 0901 	add.w	r9, r9, #1
 80082ac:	e7ee      	b.n	800828c <_printf_float+0x2b8>
 80082ae:	bf00      	nop
 80082b0:	7fefffff 	.word	0x7fefffff
 80082b4:	0800c8f0 	.word	0x0800c8f0
 80082b8:	0800c8f4 	.word	0x0800c8f4
 80082bc:	0800c8fc 	.word	0x0800c8fc
 80082c0:	0800c8f8 	.word	0x0800c8f8
 80082c4:	0800c900 	.word	0x0800c900
 80082c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80082cc:	429a      	cmp	r2, r3
 80082ce:	bfa8      	it	ge
 80082d0:	461a      	movge	r2, r3
 80082d2:	2a00      	cmp	r2, #0
 80082d4:	4691      	mov	r9, r2
 80082d6:	dc37      	bgt.n	8008348 <_printf_float+0x374>
 80082d8:	f04f 0b00 	mov.w	fp, #0
 80082dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082e0:	f104 021a 	add.w	r2, r4, #26
 80082e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80082e6:	9305      	str	r3, [sp, #20]
 80082e8:	eba3 0309 	sub.w	r3, r3, r9
 80082ec:	455b      	cmp	r3, fp
 80082ee:	dc33      	bgt.n	8008358 <_printf_float+0x384>
 80082f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082f4:	429a      	cmp	r2, r3
 80082f6:	db3b      	blt.n	8008370 <_printf_float+0x39c>
 80082f8:	6823      	ldr	r3, [r4, #0]
 80082fa:	07da      	lsls	r2, r3, #31
 80082fc:	d438      	bmi.n	8008370 <_printf_float+0x39c>
 80082fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008300:	9a05      	ldr	r2, [sp, #20]
 8008302:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008304:	1a9a      	subs	r2, r3, r2
 8008306:	eba3 0901 	sub.w	r9, r3, r1
 800830a:	4591      	cmp	r9, r2
 800830c:	bfa8      	it	ge
 800830e:	4691      	movge	r9, r2
 8008310:	f1b9 0f00 	cmp.w	r9, #0
 8008314:	dc35      	bgt.n	8008382 <_printf_float+0x3ae>
 8008316:	f04f 0800 	mov.w	r8, #0
 800831a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800831e:	f104 0a1a 	add.w	sl, r4, #26
 8008322:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008326:	1a9b      	subs	r3, r3, r2
 8008328:	eba3 0309 	sub.w	r3, r3, r9
 800832c:	4543      	cmp	r3, r8
 800832e:	f77f af79 	ble.w	8008224 <_printf_float+0x250>
 8008332:	2301      	movs	r3, #1
 8008334:	4652      	mov	r2, sl
 8008336:	4631      	mov	r1, r6
 8008338:	4628      	mov	r0, r5
 800833a:	47b8      	blx	r7
 800833c:	3001      	adds	r0, #1
 800833e:	f43f aeaa 	beq.w	8008096 <_printf_float+0xc2>
 8008342:	f108 0801 	add.w	r8, r8, #1
 8008346:	e7ec      	b.n	8008322 <_printf_float+0x34e>
 8008348:	4613      	mov	r3, r2
 800834a:	4631      	mov	r1, r6
 800834c:	4642      	mov	r2, r8
 800834e:	4628      	mov	r0, r5
 8008350:	47b8      	blx	r7
 8008352:	3001      	adds	r0, #1
 8008354:	d1c0      	bne.n	80082d8 <_printf_float+0x304>
 8008356:	e69e      	b.n	8008096 <_printf_float+0xc2>
 8008358:	2301      	movs	r3, #1
 800835a:	4631      	mov	r1, r6
 800835c:	4628      	mov	r0, r5
 800835e:	9205      	str	r2, [sp, #20]
 8008360:	47b8      	blx	r7
 8008362:	3001      	adds	r0, #1
 8008364:	f43f ae97 	beq.w	8008096 <_printf_float+0xc2>
 8008368:	9a05      	ldr	r2, [sp, #20]
 800836a:	f10b 0b01 	add.w	fp, fp, #1
 800836e:	e7b9      	b.n	80082e4 <_printf_float+0x310>
 8008370:	ee18 3a10 	vmov	r3, s16
 8008374:	4652      	mov	r2, sl
 8008376:	4631      	mov	r1, r6
 8008378:	4628      	mov	r0, r5
 800837a:	47b8      	blx	r7
 800837c:	3001      	adds	r0, #1
 800837e:	d1be      	bne.n	80082fe <_printf_float+0x32a>
 8008380:	e689      	b.n	8008096 <_printf_float+0xc2>
 8008382:	9a05      	ldr	r2, [sp, #20]
 8008384:	464b      	mov	r3, r9
 8008386:	4442      	add	r2, r8
 8008388:	4631      	mov	r1, r6
 800838a:	4628      	mov	r0, r5
 800838c:	47b8      	blx	r7
 800838e:	3001      	adds	r0, #1
 8008390:	d1c1      	bne.n	8008316 <_printf_float+0x342>
 8008392:	e680      	b.n	8008096 <_printf_float+0xc2>
 8008394:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008396:	2a01      	cmp	r2, #1
 8008398:	dc01      	bgt.n	800839e <_printf_float+0x3ca>
 800839a:	07db      	lsls	r3, r3, #31
 800839c:	d538      	bpl.n	8008410 <_printf_float+0x43c>
 800839e:	2301      	movs	r3, #1
 80083a0:	4642      	mov	r2, r8
 80083a2:	4631      	mov	r1, r6
 80083a4:	4628      	mov	r0, r5
 80083a6:	47b8      	blx	r7
 80083a8:	3001      	adds	r0, #1
 80083aa:	f43f ae74 	beq.w	8008096 <_printf_float+0xc2>
 80083ae:	ee18 3a10 	vmov	r3, s16
 80083b2:	4652      	mov	r2, sl
 80083b4:	4631      	mov	r1, r6
 80083b6:	4628      	mov	r0, r5
 80083b8:	47b8      	blx	r7
 80083ba:	3001      	adds	r0, #1
 80083bc:	f43f ae6b 	beq.w	8008096 <_printf_float+0xc2>
 80083c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083c4:	2200      	movs	r2, #0
 80083c6:	2300      	movs	r3, #0
 80083c8:	f7f8 fb56 	bl	8000a78 <__aeabi_dcmpeq>
 80083cc:	b9d8      	cbnz	r0, 8008406 <_printf_float+0x432>
 80083ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083d0:	f108 0201 	add.w	r2, r8, #1
 80083d4:	3b01      	subs	r3, #1
 80083d6:	4631      	mov	r1, r6
 80083d8:	4628      	mov	r0, r5
 80083da:	47b8      	blx	r7
 80083dc:	3001      	adds	r0, #1
 80083de:	d10e      	bne.n	80083fe <_printf_float+0x42a>
 80083e0:	e659      	b.n	8008096 <_printf_float+0xc2>
 80083e2:	2301      	movs	r3, #1
 80083e4:	4652      	mov	r2, sl
 80083e6:	4631      	mov	r1, r6
 80083e8:	4628      	mov	r0, r5
 80083ea:	47b8      	blx	r7
 80083ec:	3001      	adds	r0, #1
 80083ee:	f43f ae52 	beq.w	8008096 <_printf_float+0xc2>
 80083f2:	f108 0801 	add.w	r8, r8, #1
 80083f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083f8:	3b01      	subs	r3, #1
 80083fa:	4543      	cmp	r3, r8
 80083fc:	dcf1      	bgt.n	80083e2 <_printf_float+0x40e>
 80083fe:	464b      	mov	r3, r9
 8008400:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008404:	e6dc      	b.n	80081c0 <_printf_float+0x1ec>
 8008406:	f04f 0800 	mov.w	r8, #0
 800840a:	f104 0a1a 	add.w	sl, r4, #26
 800840e:	e7f2      	b.n	80083f6 <_printf_float+0x422>
 8008410:	2301      	movs	r3, #1
 8008412:	4642      	mov	r2, r8
 8008414:	e7df      	b.n	80083d6 <_printf_float+0x402>
 8008416:	2301      	movs	r3, #1
 8008418:	464a      	mov	r2, r9
 800841a:	4631      	mov	r1, r6
 800841c:	4628      	mov	r0, r5
 800841e:	47b8      	blx	r7
 8008420:	3001      	adds	r0, #1
 8008422:	f43f ae38 	beq.w	8008096 <_printf_float+0xc2>
 8008426:	f108 0801 	add.w	r8, r8, #1
 800842a:	68e3      	ldr	r3, [r4, #12]
 800842c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800842e:	1a5b      	subs	r3, r3, r1
 8008430:	4543      	cmp	r3, r8
 8008432:	dcf0      	bgt.n	8008416 <_printf_float+0x442>
 8008434:	e6fa      	b.n	800822c <_printf_float+0x258>
 8008436:	f04f 0800 	mov.w	r8, #0
 800843a:	f104 0919 	add.w	r9, r4, #25
 800843e:	e7f4      	b.n	800842a <_printf_float+0x456>

08008440 <_printf_common>:
 8008440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008444:	4616      	mov	r6, r2
 8008446:	4699      	mov	r9, r3
 8008448:	688a      	ldr	r2, [r1, #8]
 800844a:	690b      	ldr	r3, [r1, #16]
 800844c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008450:	4293      	cmp	r3, r2
 8008452:	bfb8      	it	lt
 8008454:	4613      	movlt	r3, r2
 8008456:	6033      	str	r3, [r6, #0]
 8008458:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800845c:	4607      	mov	r7, r0
 800845e:	460c      	mov	r4, r1
 8008460:	b10a      	cbz	r2, 8008466 <_printf_common+0x26>
 8008462:	3301      	adds	r3, #1
 8008464:	6033      	str	r3, [r6, #0]
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	0699      	lsls	r1, r3, #26
 800846a:	bf42      	ittt	mi
 800846c:	6833      	ldrmi	r3, [r6, #0]
 800846e:	3302      	addmi	r3, #2
 8008470:	6033      	strmi	r3, [r6, #0]
 8008472:	6825      	ldr	r5, [r4, #0]
 8008474:	f015 0506 	ands.w	r5, r5, #6
 8008478:	d106      	bne.n	8008488 <_printf_common+0x48>
 800847a:	f104 0a19 	add.w	sl, r4, #25
 800847e:	68e3      	ldr	r3, [r4, #12]
 8008480:	6832      	ldr	r2, [r6, #0]
 8008482:	1a9b      	subs	r3, r3, r2
 8008484:	42ab      	cmp	r3, r5
 8008486:	dc26      	bgt.n	80084d6 <_printf_common+0x96>
 8008488:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800848c:	1e13      	subs	r3, r2, #0
 800848e:	6822      	ldr	r2, [r4, #0]
 8008490:	bf18      	it	ne
 8008492:	2301      	movne	r3, #1
 8008494:	0692      	lsls	r2, r2, #26
 8008496:	d42b      	bmi.n	80084f0 <_printf_common+0xb0>
 8008498:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800849c:	4649      	mov	r1, r9
 800849e:	4638      	mov	r0, r7
 80084a0:	47c0      	blx	r8
 80084a2:	3001      	adds	r0, #1
 80084a4:	d01e      	beq.n	80084e4 <_printf_common+0xa4>
 80084a6:	6823      	ldr	r3, [r4, #0]
 80084a8:	68e5      	ldr	r5, [r4, #12]
 80084aa:	6832      	ldr	r2, [r6, #0]
 80084ac:	f003 0306 	and.w	r3, r3, #6
 80084b0:	2b04      	cmp	r3, #4
 80084b2:	bf08      	it	eq
 80084b4:	1aad      	subeq	r5, r5, r2
 80084b6:	68a3      	ldr	r3, [r4, #8]
 80084b8:	6922      	ldr	r2, [r4, #16]
 80084ba:	bf0c      	ite	eq
 80084bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084c0:	2500      	movne	r5, #0
 80084c2:	4293      	cmp	r3, r2
 80084c4:	bfc4      	itt	gt
 80084c6:	1a9b      	subgt	r3, r3, r2
 80084c8:	18ed      	addgt	r5, r5, r3
 80084ca:	2600      	movs	r6, #0
 80084cc:	341a      	adds	r4, #26
 80084ce:	42b5      	cmp	r5, r6
 80084d0:	d11a      	bne.n	8008508 <_printf_common+0xc8>
 80084d2:	2000      	movs	r0, #0
 80084d4:	e008      	b.n	80084e8 <_printf_common+0xa8>
 80084d6:	2301      	movs	r3, #1
 80084d8:	4652      	mov	r2, sl
 80084da:	4649      	mov	r1, r9
 80084dc:	4638      	mov	r0, r7
 80084de:	47c0      	blx	r8
 80084e0:	3001      	adds	r0, #1
 80084e2:	d103      	bne.n	80084ec <_printf_common+0xac>
 80084e4:	f04f 30ff 	mov.w	r0, #4294967295
 80084e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ec:	3501      	adds	r5, #1
 80084ee:	e7c6      	b.n	800847e <_printf_common+0x3e>
 80084f0:	18e1      	adds	r1, r4, r3
 80084f2:	1c5a      	adds	r2, r3, #1
 80084f4:	2030      	movs	r0, #48	; 0x30
 80084f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084fa:	4422      	add	r2, r4
 80084fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008500:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008504:	3302      	adds	r3, #2
 8008506:	e7c7      	b.n	8008498 <_printf_common+0x58>
 8008508:	2301      	movs	r3, #1
 800850a:	4622      	mov	r2, r4
 800850c:	4649      	mov	r1, r9
 800850e:	4638      	mov	r0, r7
 8008510:	47c0      	blx	r8
 8008512:	3001      	adds	r0, #1
 8008514:	d0e6      	beq.n	80084e4 <_printf_common+0xa4>
 8008516:	3601      	adds	r6, #1
 8008518:	e7d9      	b.n	80084ce <_printf_common+0x8e>
	...

0800851c <_printf_i>:
 800851c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008520:	7e0f      	ldrb	r7, [r1, #24]
 8008522:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008524:	2f78      	cmp	r7, #120	; 0x78
 8008526:	4691      	mov	r9, r2
 8008528:	4680      	mov	r8, r0
 800852a:	460c      	mov	r4, r1
 800852c:	469a      	mov	sl, r3
 800852e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008532:	d807      	bhi.n	8008544 <_printf_i+0x28>
 8008534:	2f62      	cmp	r7, #98	; 0x62
 8008536:	d80a      	bhi.n	800854e <_printf_i+0x32>
 8008538:	2f00      	cmp	r7, #0
 800853a:	f000 80d8 	beq.w	80086ee <_printf_i+0x1d2>
 800853e:	2f58      	cmp	r7, #88	; 0x58
 8008540:	f000 80a3 	beq.w	800868a <_printf_i+0x16e>
 8008544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008548:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800854c:	e03a      	b.n	80085c4 <_printf_i+0xa8>
 800854e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008552:	2b15      	cmp	r3, #21
 8008554:	d8f6      	bhi.n	8008544 <_printf_i+0x28>
 8008556:	a101      	add	r1, pc, #4	; (adr r1, 800855c <_printf_i+0x40>)
 8008558:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800855c:	080085b5 	.word	0x080085b5
 8008560:	080085c9 	.word	0x080085c9
 8008564:	08008545 	.word	0x08008545
 8008568:	08008545 	.word	0x08008545
 800856c:	08008545 	.word	0x08008545
 8008570:	08008545 	.word	0x08008545
 8008574:	080085c9 	.word	0x080085c9
 8008578:	08008545 	.word	0x08008545
 800857c:	08008545 	.word	0x08008545
 8008580:	08008545 	.word	0x08008545
 8008584:	08008545 	.word	0x08008545
 8008588:	080086d5 	.word	0x080086d5
 800858c:	080085f9 	.word	0x080085f9
 8008590:	080086b7 	.word	0x080086b7
 8008594:	08008545 	.word	0x08008545
 8008598:	08008545 	.word	0x08008545
 800859c:	080086f7 	.word	0x080086f7
 80085a0:	08008545 	.word	0x08008545
 80085a4:	080085f9 	.word	0x080085f9
 80085a8:	08008545 	.word	0x08008545
 80085ac:	08008545 	.word	0x08008545
 80085b0:	080086bf 	.word	0x080086bf
 80085b4:	682b      	ldr	r3, [r5, #0]
 80085b6:	1d1a      	adds	r2, r3, #4
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	602a      	str	r2, [r5, #0]
 80085bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085c4:	2301      	movs	r3, #1
 80085c6:	e0a3      	b.n	8008710 <_printf_i+0x1f4>
 80085c8:	6820      	ldr	r0, [r4, #0]
 80085ca:	6829      	ldr	r1, [r5, #0]
 80085cc:	0606      	lsls	r6, r0, #24
 80085ce:	f101 0304 	add.w	r3, r1, #4
 80085d2:	d50a      	bpl.n	80085ea <_printf_i+0xce>
 80085d4:	680e      	ldr	r6, [r1, #0]
 80085d6:	602b      	str	r3, [r5, #0]
 80085d8:	2e00      	cmp	r6, #0
 80085da:	da03      	bge.n	80085e4 <_printf_i+0xc8>
 80085dc:	232d      	movs	r3, #45	; 0x2d
 80085de:	4276      	negs	r6, r6
 80085e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085e4:	485e      	ldr	r0, [pc, #376]	; (8008760 <_printf_i+0x244>)
 80085e6:	230a      	movs	r3, #10
 80085e8:	e019      	b.n	800861e <_printf_i+0x102>
 80085ea:	680e      	ldr	r6, [r1, #0]
 80085ec:	602b      	str	r3, [r5, #0]
 80085ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80085f2:	bf18      	it	ne
 80085f4:	b236      	sxthne	r6, r6
 80085f6:	e7ef      	b.n	80085d8 <_printf_i+0xbc>
 80085f8:	682b      	ldr	r3, [r5, #0]
 80085fa:	6820      	ldr	r0, [r4, #0]
 80085fc:	1d19      	adds	r1, r3, #4
 80085fe:	6029      	str	r1, [r5, #0]
 8008600:	0601      	lsls	r1, r0, #24
 8008602:	d501      	bpl.n	8008608 <_printf_i+0xec>
 8008604:	681e      	ldr	r6, [r3, #0]
 8008606:	e002      	b.n	800860e <_printf_i+0xf2>
 8008608:	0646      	lsls	r6, r0, #25
 800860a:	d5fb      	bpl.n	8008604 <_printf_i+0xe8>
 800860c:	881e      	ldrh	r6, [r3, #0]
 800860e:	4854      	ldr	r0, [pc, #336]	; (8008760 <_printf_i+0x244>)
 8008610:	2f6f      	cmp	r7, #111	; 0x6f
 8008612:	bf0c      	ite	eq
 8008614:	2308      	moveq	r3, #8
 8008616:	230a      	movne	r3, #10
 8008618:	2100      	movs	r1, #0
 800861a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800861e:	6865      	ldr	r5, [r4, #4]
 8008620:	60a5      	str	r5, [r4, #8]
 8008622:	2d00      	cmp	r5, #0
 8008624:	bfa2      	ittt	ge
 8008626:	6821      	ldrge	r1, [r4, #0]
 8008628:	f021 0104 	bicge.w	r1, r1, #4
 800862c:	6021      	strge	r1, [r4, #0]
 800862e:	b90e      	cbnz	r6, 8008634 <_printf_i+0x118>
 8008630:	2d00      	cmp	r5, #0
 8008632:	d04d      	beq.n	80086d0 <_printf_i+0x1b4>
 8008634:	4615      	mov	r5, r2
 8008636:	fbb6 f1f3 	udiv	r1, r6, r3
 800863a:	fb03 6711 	mls	r7, r3, r1, r6
 800863e:	5dc7      	ldrb	r7, [r0, r7]
 8008640:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008644:	4637      	mov	r7, r6
 8008646:	42bb      	cmp	r3, r7
 8008648:	460e      	mov	r6, r1
 800864a:	d9f4      	bls.n	8008636 <_printf_i+0x11a>
 800864c:	2b08      	cmp	r3, #8
 800864e:	d10b      	bne.n	8008668 <_printf_i+0x14c>
 8008650:	6823      	ldr	r3, [r4, #0]
 8008652:	07de      	lsls	r6, r3, #31
 8008654:	d508      	bpl.n	8008668 <_printf_i+0x14c>
 8008656:	6923      	ldr	r3, [r4, #16]
 8008658:	6861      	ldr	r1, [r4, #4]
 800865a:	4299      	cmp	r1, r3
 800865c:	bfde      	ittt	le
 800865e:	2330      	movle	r3, #48	; 0x30
 8008660:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008664:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008668:	1b52      	subs	r2, r2, r5
 800866a:	6122      	str	r2, [r4, #16]
 800866c:	f8cd a000 	str.w	sl, [sp]
 8008670:	464b      	mov	r3, r9
 8008672:	aa03      	add	r2, sp, #12
 8008674:	4621      	mov	r1, r4
 8008676:	4640      	mov	r0, r8
 8008678:	f7ff fee2 	bl	8008440 <_printf_common>
 800867c:	3001      	adds	r0, #1
 800867e:	d14c      	bne.n	800871a <_printf_i+0x1fe>
 8008680:	f04f 30ff 	mov.w	r0, #4294967295
 8008684:	b004      	add	sp, #16
 8008686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800868a:	4835      	ldr	r0, [pc, #212]	; (8008760 <_printf_i+0x244>)
 800868c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008690:	6829      	ldr	r1, [r5, #0]
 8008692:	6823      	ldr	r3, [r4, #0]
 8008694:	f851 6b04 	ldr.w	r6, [r1], #4
 8008698:	6029      	str	r1, [r5, #0]
 800869a:	061d      	lsls	r5, r3, #24
 800869c:	d514      	bpl.n	80086c8 <_printf_i+0x1ac>
 800869e:	07df      	lsls	r7, r3, #31
 80086a0:	bf44      	itt	mi
 80086a2:	f043 0320 	orrmi.w	r3, r3, #32
 80086a6:	6023      	strmi	r3, [r4, #0]
 80086a8:	b91e      	cbnz	r6, 80086b2 <_printf_i+0x196>
 80086aa:	6823      	ldr	r3, [r4, #0]
 80086ac:	f023 0320 	bic.w	r3, r3, #32
 80086b0:	6023      	str	r3, [r4, #0]
 80086b2:	2310      	movs	r3, #16
 80086b4:	e7b0      	b.n	8008618 <_printf_i+0xfc>
 80086b6:	6823      	ldr	r3, [r4, #0]
 80086b8:	f043 0320 	orr.w	r3, r3, #32
 80086bc:	6023      	str	r3, [r4, #0]
 80086be:	2378      	movs	r3, #120	; 0x78
 80086c0:	4828      	ldr	r0, [pc, #160]	; (8008764 <_printf_i+0x248>)
 80086c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80086c6:	e7e3      	b.n	8008690 <_printf_i+0x174>
 80086c8:	0659      	lsls	r1, r3, #25
 80086ca:	bf48      	it	mi
 80086cc:	b2b6      	uxthmi	r6, r6
 80086ce:	e7e6      	b.n	800869e <_printf_i+0x182>
 80086d0:	4615      	mov	r5, r2
 80086d2:	e7bb      	b.n	800864c <_printf_i+0x130>
 80086d4:	682b      	ldr	r3, [r5, #0]
 80086d6:	6826      	ldr	r6, [r4, #0]
 80086d8:	6961      	ldr	r1, [r4, #20]
 80086da:	1d18      	adds	r0, r3, #4
 80086dc:	6028      	str	r0, [r5, #0]
 80086de:	0635      	lsls	r5, r6, #24
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	d501      	bpl.n	80086e8 <_printf_i+0x1cc>
 80086e4:	6019      	str	r1, [r3, #0]
 80086e6:	e002      	b.n	80086ee <_printf_i+0x1d2>
 80086e8:	0670      	lsls	r0, r6, #25
 80086ea:	d5fb      	bpl.n	80086e4 <_printf_i+0x1c8>
 80086ec:	8019      	strh	r1, [r3, #0]
 80086ee:	2300      	movs	r3, #0
 80086f0:	6123      	str	r3, [r4, #16]
 80086f2:	4615      	mov	r5, r2
 80086f4:	e7ba      	b.n	800866c <_printf_i+0x150>
 80086f6:	682b      	ldr	r3, [r5, #0]
 80086f8:	1d1a      	adds	r2, r3, #4
 80086fa:	602a      	str	r2, [r5, #0]
 80086fc:	681d      	ldr	r5, [r3, #0]
 80086fe:	6862      	ldr	r2, [r4, #4]
 8008700:	2100      	movs	r1, #0
 8008702:	4628      	mov	r0, r5
 8008704:	f7f7 fd44 	bl	8000190 <memchr>
 8008708:	b108      	cbz	r0, 800870e <_printf_i+0x1f2>
 800870a:	1b40      	subs	r0, r0, r5
 800870c:	6060      	str	r0, [r4, #4]
 800870e:	6863      	ldr	r3, [r4, #4]
 8008710:	6123      	str	r3, [r4, #16]
 8008712:	2300      	movs	r3, #0
 8008714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008718:	e7a8      	b.n	800866c <_printf_i+0x150>
 800871a:	6923      	ldr	r3, [r4, #16]
 800871c:	462a      	mov	r2, r5
 800871e:	4649      	mov	r1, r9
 8008720:	4640      	mov	r0, r8
 8008722:	47d0      	blx	sl
 8008724:	3001      	adds	r0, #1
 8008726:	d0ab      	beq.n	8008680 <_printf_i+0x164>
 8008728:	6823      	ldr	r3, [r4, #0]
 800872a:	079b      	lsls	r3, r3, #30
 800872c:	d413      	bmi.n	8008756 <_printf_i+0x23a>
 800872e:	68e0      	ldr	r0, [r4, #12]
 8008730:	9b03      	ldr	r3, [sp, #12]
 8008732:	4298      	cmp	r0, r3
 8008734:	bfb8      	it	lt
 8008736:	4618      	movlt	r0, r3
 8008738:	e7a4      	b.n	8008684 <_printf_i+0x168>
 800873a:	2301      	movs	r3, #1
 800873c:	4632      	mov	r2, r6
 800873e:	4649      	mov	r1, r9
 8008740:	4640      	mov	r0, r8
 8008742:	47d0      	blx	sl
 8008744:	3001      	adds	r0, #1
 8008746:	d09b      	beq.n	8008680 <_printf_i+0x164>
 8008748:	3501      	adds	r5, #1
 800874a:	68e3      	ldr	r3, [r4, #12]
 800874c:	9903      	ldr	r1, [sp, #12]
 800874e:	1a5b      	subs	r3, r3, r1
 8008750:	42ab      	cmp	r3, r5
 8008752:	dcf2      	bgt.n	800873a <_printf_i+0x21e>
 8008754:	e7eb      	b.n	800872e <_printf_i+0x212>
 8008756:	2500      	movs	r5, #0
 8008758:	f104 0619 	add.w	r6, r4, #25
 800875c:	e7f5      	b.n	800874a <_printf_i+0x22e>
 800875e:	bf00      	nop
 8008760:	0800c902 	.word	0x0800c902
 8008764:	0800c913 	.word	0x0800c913

08008768 <_scanf_float>:
 8008768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876c:	b087      	sub	sp, #28
 800876e:	4617      	mov	r7, r2
 8008770:	9303      	str	r3, [sp, #12]
 8008772:	688b      	ldr	r3, [r1, #8]
 8008774:	1e5a      	subs	r2, r3, #1
 8008776:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800877a:	bf83      	ittte	hi
 800877c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008780:	195b      	addhi	r3, r3, r5
 8008782:	9302      	strhi	r3, [sp, #8]
 8008784:	2300      	movls	r3, #0
 8008786:	bf86      	itte	hi
 8008788:	f240 135d 	movwhi	r3, #349	; 0x15d
 800878c:	608b      	strhi	r3, [r1, #8]
 800878e:	9302      	strls	r3, [sp, #8]
 8008790:	680b      	ldr	r3, [r1, #0]
 8008792:	468b      	mov	fp, r1
 8008794:	2500      	movs	r5, #0
 8008796:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800879a:	f84b 3b1c 	str.w	r3, [fp], #28
 800879e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80087a2:	4680      	mov	r8, r0
 80087a4:	460c      	mov	r4, r1
 80087a6:	465e      	mov	r6, fp
 80087a8:	46aa      	mov	sl, r5
 80087aa:	46a9      	mov	r9, r5
 80087ac:	9501      	str	r5, [sp, #4]
 80087ae:	68a2      	ldr	r2, [r4, #8]
 80087b0:	b152      	cbz	r2, 80087c8 <_scanf_float+0x60>
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	2b4e      	cmp	r3, #78	; 0x4e
 80087b8:	d864      	bhi.n	8008884 <_scanf_float+0x11c>
 80087ba:	2b40      	cmp	r3, #64	; 0x40
 80087bc:	d83c      	bhi.n	8008838 <_scanf_float+0xd0>
 80087be:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80087c2:	b2c8      	uxtb	r0, r1
 80087c4:	280e      	cmp	r0, #14
 80087c6:	d93a      	bls.n	800883e <_scanf_float+0xd6>
 80087c8:	f1b9 0f00 	cmp.w	r9, #0
 80087cc:	d003      	beq.n	80087d6 <_scanf_float+0x6e>
 80087ce:	6823      	ldr	r3, [r4, #0]
 80087d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087d4:	6023      	str	r3, [r4, #0]
 80087d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087da:	f1ba 0f01 	cmp.w	sl, #1
 80087de:	f200 8113 	bhi.w	8008a08 <_scanf_float+0x2a0>
 80087e2:	455e      	cmp	r6, fp
 80087e4:	f200 8105 	bhi.w	80089f2 <_scanf_float+0x28a>
 80087e8:	2501      	movs	r5, #1
 80087ea:	4628      	mov	r0, r5
 80087ec:	b007      	add	sp, #28
 80087ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80087f6:	2a0d      	cmp	r2, #13
 80087f8:	d8e6      	bhi.n	80087c8 <_scanf_float+0x60>
 80087fa:	a101      	add	r1, pc, #4	; (adr r1, 8008800 <_scanf_float+0x98>)
 80087fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008800:	0800893f 	.word	0x0800893f
 8008804:	080087c9 	.word	0x080087c9
 8008808:	080087c9 	.word	0x080087c9
 800880c:	080087c9 	.word	0x080087c9
 8008810:	0800899f 	.word	0x0800899f
 8008814:	08008977 	.word	0x08008977
 8008818:	080087c9 	.word	0x080087c9
 800881c:	080087c9 	.word	0x080087c9
 8008820:	0800894d 	.word	0x0800894d
 8008824:	080087c9 	.word	0x080087c9
 8008828:	080087c9 	.word	0x080087c9
 800882c:	080087c9 	.word	0x080087c9
 8008830:	080087c9 	.word	0x080087c9
 8008834:	08008905 	.word	0x08008905
 8008838:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800883c:	e7db      	b.n	80087f6 <_scanf_float+0x8e>
 800883e:	290e      	cmp	r1, #14
 8008840:	d8c2      	bhi.n	80087c8 <_scanf_float+0x60>
 8008842:	a001      	add	r0, pc, #4	; (adr r0, 8008848 <_scanf_float+0xe0>)
 8008844:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008848:	080088f7 	.word	0x080088f7
 800884c:	080087c9 	.word	0x080087c9
 8008850:	080088f7 	.word	0x080088f7
 8008854:	0800898b 	.word	0x0800898b
 8008858:	080087c9 	.word	0x080087c9
 800885c:	080088a5 	.word	0x080088a5
 8008860:	080088e1 	.word	0x080088e1
 8008864:	080088e1 	.word	0x080088e1
 8008868:	080088e1 	.word	0x080088e1
 800886c:	080088e1 	.word	0x080088e1
 8008870:	080088e1 	.word	0x080088e1
 8008874:	080088e1 	.word	0x080088e1
 8008878:	080088e1 	.word	0x080088e1
 800887c:	080088e1 	.word	0x080088e1
 8008880:	080088e1 	.word	0x080088e1
 8008884:	2b6e      	cmp	r3, #110	; 0x6e
 8008886:	d809      	bhi.n	800889c <_scanf_float+0x134>
 8008888:	2b60      	cmp	r3, #96	; 0x60
 800888a:	d8b2      	bhi.n	80087f2 <_scanf_float+0x8a>
 800888c:	2b54      	cmp	r3, #84	; 0x54
 800888e:	d077      	beq.n	8008980 <_scanf_float+0x218>
 8008890:	2b59      	cmp	r3, #89	; 0x59
 8008892:	d199      	bne.n	80087c8 <_scanf_float+0x60>
 8008894:	2d07      	cmp	r5, #7
 8008896:	d197      	bne.n	80087c8 <_scanf_float+0x60>
 8008898:	2508      	movs	r5, #8
 800889a:	e029      	b.n	80088f0 <_scanf_float+0x188>
 800889c:	2b74      	cmp	r3, #116	; 0x74
 800889e:	d06f      	beq.n	8008980 <_scanf_float+0x218>
 80088a0:	2b79      	cmp	r3, #121	; 0x79
 80088a2:	e7f6      	b.n	8008892 <_scanf_float+0x12a>
 80088a4:	6821      	ldr	r1, [r4, #0]
 80088a6:	05c8      	lsls	r0, r1, #23
 80088a8:	d51a      	bpl.n	80088e0 <_scanf_float+0x178>
 80088aa:	9b02      	ldr	r3, [sp, #8]
 80088ac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80088b0:	6021      	str	r1, [r4, #0]
 80088b2:	f109 0901 	add.w	r9, r9, #1
 80088b6:	b11b      	cbz	r3, 80088c0 <_scanf_float+0x158>
 80088b8:	3b01      	subs	r3, #1
 80088ba:	3201      	adds	r2, #1
 80088bc:	9302      	str	r3, [sp, #8]
 80088be:	60a2      	str	r2, [r4, #8]
 80088c0:	68a3      	ldr	r3, [r4, #8]
 80088c2:	3b01      	subs	r3, #1
 80088c4:	60a3      	str	r3, [r4, #8]
 80088c6:	6923      	ldr	r3, [r4, #16]
 80088c8:	3301      	adds	r3, #1
 80088ca:	6123      	str	r3, [r4, #16]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	3b01      	subs	r3, #1
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	607b      	str	r3, [r7, #4]
 80088d4:	f340 8084 	ble.w	80089e0 <_scanf_float+0x278>
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	3301      	adds	r3, #1
 80088dc:	603b      	str	r3, [r7, #0]
 80088de:	e766      	b.n	80087ae <_scanf_float+0x46>
 80088e0:	eb1a 0f05 	cmn.w	sl, r5
 80088e4:	f47f af70 	bne.w	80087c8 <_scanf_float+0x60>
 80088e8:	6822      	ldr	r2, [r4, #0]
 80088ea:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80088ee:	6022      	str	r2, [r4, #0]
 80088f0:	f806 3b01 	strb.w	r3, [r6], #1
 80088f4:	e7e4      	b.n	80088c0 <_scanf_float+0x158>
 80088f6:	6822      	ldr	r2, [r4, #0]
 80088f8:	0610      	lsls	r0, r2, #24
 80088fa:	f57f af65 	bpl.w	80087c8 <_scanf_float+0x60>
 80088fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008902:	e7f4      	b.n	80088ee <_scanf_float+0x186>
 8008904:	f1ba 0f00 	cmp.w	sl, #0
 8008908:	d10e      	bne.n	8008928 <_scanf_float+0x1c0>
 800890a:	f1b9 0f00 	cmp.w	r9, #0
 800890e:	d10e      	bne.n	800892e <_scanf_float+0x1c6>
 8008910:	6822      	ldr	r2, [r4, #0]
 8008912:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008916:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800891a:	d108      	bne.n	800892e <_scanf_float+0x1c6>
 800891c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008920:	6022      	str	r2, [r4, #0]
 8008922:	f04f 0a01 	mov.w	sl, #1
 8008926:	e7e3      	b.n	80088f0 <_scanf_float+0x188>
 8008928:	f1ba 0f02 	cmp.w	sl, #2
 800892c:	d055      	beq.n	80089da <_scanf_float+0x272>
 800892e:	2d01      	cmp	r5, #1
 8008930:	d002      	beq.n	8008938 <_scanf_float+0x1d0>
 8008932:	2d04      	cmp	r5, #4
 8008934:	f47f af48 	bne.w	80087c8 <_scanf_float+0x60>
 8008938:	3501      	adds	r5, #1
 800893a:	b2ed      	uxtb	r5, r5
 800893c:	e7d8      	b.n	80088f0 <_scanf_float+0x188>
 800893e:	f1ba 0f01 	cmp.w	sl, #1
 8008942:	f47f af41 	bne.w	80087c8 <_scanf_float+0x60>
 8008946:	f04f 0a02 	mov.w	sl, #2
 800894a:	e7d1      	b.n	80088f0 <_scanf_float+0x188>
 800894c:	b97d      	cbnz	r5, 800896e <_scanf_float+0x206>
 800894e:	f1b9 0f00 	cmp.w	r9, #0
 8008952:	f47f af3c 	bne.w	80087ce <_scanf_float+0x66>
 8008956:	6822      	ldr	r2, [r4, #0]
 8008958:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800895c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008960:	f47f af39 	bne.w	80087d6 <_scanf_float+0x6e>
 8008964:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008968:	6022      	str	r2, [r4, #0]
 800896a:	2501      	movs	r5, #1
 800896c:	e7c0      	b.n	80088f0 <_scanf_float+0x188>
 800896e:	2d03      	cmp	r5, #3
 8008970:	d0e2      	beq.n	8008938 <_scanf_float+0x1d0>
 8008972:	2d05      	cmp	r5, #5
 8008974:	e7de      	b.n	8008934 <_scanf_float+0x1cc>
 8008976:	2d02      	cmp	r5, #2
 8008978:	f47f af26 	bne.w	80087c8 <_scanf_float+0x60>
 800897c:	2503      	movs	r5, #3
 800897e:	e7b7      	b.n	80088f0 <_scanf_float+0x188>
 8008980:	2d06      	cmp	r5, #6
 8008982:	f47f af21 	bne.w	80087c8 <_scanf_float+0x60>
 8008986:	2507      	movs	r5, #7
 8008988:	e7b2      	b.n	80088f0 <_scanf_float+0x188>
 800898a:	6822      	ldr	r2, [r4, #0]
 800898c:	0591      	lsls	r1, r2, #22
 800898e:	f57f af1b 	bpl.w	80087c8 <_scanf_float+0x60>
 8008992:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008996:	6022      	str	r2, [r4, #0]
 8008998:	f8cd 9004 	str.w	r9, [sp, #4]
 800899c:	e7a8      	b.n	80088f0 <_scanf_float+0x188>
 800899e:	6822      	ldr	r2, [r4, #0]
 80089a0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80089a4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80089a8:	d006      	beq.n	80089b8 <_scanf_float+0x250>
 80089aa:	0550      	lsls	r0, r2, #21
 80089ac:	f57f af0c 	bpl.w	80087c8 <_scanf_float+0x60>
 80089b0:	f1b9 0f00 	cmp.w	r9, #0
 80089b4:	f43f af0f 	beq.w	80087d6 <_scanf_float+0x6e>
 80089b8:	0591      	lsls	r1, r2, #22
 80089ba:	bf58      	it	pl
 80089bc:	9901      	ldrpl	r1, [sp, #4]
 80089be:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80089c2:	bf58      	it	pl
 80089c4:	eba9 0101 	subpl.w	r1, r9, r1
 80089c8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80089cc:	bf58      	it	pl
 80089ce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80089d2:	6022      	str	r2, [r4, #0]
 80089d4:	f04f 0900 	mov.w	r9, #0
 80089d8:	e78a      	b.n	80088f0 <_scanf_float+0x188>
 80089da:	f04f 0a03 	mov.w	sl, #3
 80089de:	e787      	b.n	80088f0 <_scanf_float+0x188>
 80089e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80089e4:	4639      	mov	r1, r7
 80089e6:	4640      	mov	r0, r8
 80089e8:	4798      	blx	r3
 80089ea:	2800      	cmp	r0, #0
 80089ec:	f43f aedf 	beq.w	80087ae <_scanf_float+0x46>
 80089f0:	e6ea      	b.n	80087c8 <_scanf_float+0x60>
 80089f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80089f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80089fa:	463a      	mov	r2, r7
 80089fc:	4640      	mov	r0, r8
 80089fe:	4798      	blx	r3
 8008a00:	6923      	ldr	r3, [r4, #16]
 8008a02:	3b01      	subs	r3, #1
 8008a04:	6123      	str	r3, [r4, #16]
 8008a06:	e6ec      	b.n	80087e2 <_scanf_float+0x7a>
 8008a08:	1e6b      	subs	r3, r5, #1
 8008a0a:	2b06      	cmp	r3, #6
 8008a0c:	d825      	bhi.n	8008a5a <_scanf_float+0x2f2>
 8008a0e:	2d02      	cmp	r5, #2
 8008a10:	d836      	bhi.n	8008a80 <_scanf_float+0x318>
 8008a12:	455e      	cmp	r6, fp
 8008a14:	f67f aee8 	bls.w	80087e8 <_scanf_float+0x80>
 8008a18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a1c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a20:	463a      	mov	r2, r7
 8008a22:	4640      	mov	r0, r8
 8008a24:	4798      	blx	r3
 8008a26:	6923      	ldr	r3, [r4, #16]
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	6123      	str	r3, [r4, #16]
 8008a2c:	e7f1      	b.n	8008a12 <_scanf_float+0x2aa>
 8008a2e:	9802      	ldr	r0, [sp, #8]
 8008a30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a34:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008a38:	9002      	str	r0, [sp, #8]
 8008a3a:	463a      	mov	r2, r7
 8008a3c:	4640      	mov	r0, r8
 8008a3e:	4798      	blx	r3
 8008a40:	6923      	ldr	r3, [r4, #16]
 8008a42:	3b01      	subs	r3, #1
 8008a44:	6123      	str	r3, [r4, #16]
 8008a46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a4a:	fa5f fa8a 	uxtb.w	sl, sl
 8008a4e:	f1ba 0f02 	cmp.w	sl, #2
 8008a52:	d1ec      	bne.n	8008a2e <_scanf_float+0x2c6>
 8008a54:	3d03      	subs	r5, #3
 8008a56:	b2ed      	uxtb	r5, r5
 8008a58:	1b76      	subs	r6, r6, r5
 8008a5a:	6823      	ldr	r3, [r4, #0]
 8008a5c:	05da      	lsls	r2, r3, #23
 8008a5e:	d52f      	bpl.n	8008ac0 <_scanf_float+0x358>
 8008a60:	055b      	lsls	r3, r3, #21
 8008a62:	d510      	bpl.n	8008a86 <_scanf_float+0x31e>
 8008a64:	455e      	cmp	r6, fp
 8008a66:	f67f aebf 	bls.w	80087e8 <_scanf_float+0x80>
 8008a6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a72:	463a      	mov	r2, r7
 8008a74:	4640      	mov	r0, r8
 8008a76:	4798      	blx	r3
 8008a78:	6923      	ldr	r3, [r4, #16]
 8008a7a:	3b01      	subs	r3, #1
 8008a7c:	6123      	str	r3, [r4, #16]
 8008a7e:	e7f1      	b.n	8008a64 <_scanf_float+0x2fc>
 8008a80:	46aa      	mov	sl, r5
 8008a82:	9602      	str	r6, [sp, #8]
 8008a84:	e7df      	b.n	8008a46 <_scanf_float+0x2de>
 8008a86:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008a8a:	6923      	ldr	r3, [r4, #16]
 8008a8c:	2965      	cmp	r1, #101	; 0x65
 8008a8e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008a92:	f106 35ff 	add.w	r5, r6, #4294967295
 8008a96:	6123      	str	r3, [r4, #16]
 8008a98:	d00c      	beq.n	8008ab4 <_scanf_float+0x34c>
 8008a9a:	2945      	cmp	r1, #69	; 0x45
 8008a9c:	d00a      	beq.n	8008ab4 <_scanf_float+0x34c>
 8008a9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008aa2:	463a      	mov	r2, r7
 8008aa4:	4640      	mov	r0, r8
 8008aa6:	4798      	blx	r3
 8008aa8:	6923      	ldr	r3, [r4, #16]
 8008aaa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	1eb5      	subs	r5, r6, #2
 8008ab2:	6123      	str	r3, [r4, #16]
 8008ab4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ab8:	463a      	mov	r2, r7
 8008aba:	4640      	mov	r0, r8
 8008abc:	4798      	blx	r3
 8008abe:	462e      	mov	r6, r5
 8008ac0:	6825      	ldr	r5, [r4, #0]
 8008ac2:	f015 0510 	ands.w	r5, r5, #16
 8008ac6:	d159      	bne.n	8008b7c <_scanf_float+0x414>
 8008ac8:	7035      	strb	r5, [r6, #0]
 8008aca:	6823      	ldr	r3, [r4, #0]
 8008acc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ad4:	d11b      	bne.n	8008b0e <_scanf_float+0x3a6>
 8008ad6:	9b01      	ldr	r3, [sp, #4]
 8008ad8:	454b      	cmp	r3, r9
 8008ada:	eba3 0209 	sub.w	r2, r3, r9
 8008ade:	d123      	bne.n	8008b28 <_scanf_float+0x3c0>
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	4659      	mov	r1, fp
 8008ae4:	4640      	mov	r0, r8
 8008ae6:	f000 fe99 	bl	800981c <_strtod_r>
 8008aea:	6822      	ldr	r2, [r4, #0]
 8008aec:	9b03      	ldr	r3, [sp, #12]
 8008aee:	f012 0f02 	tst.w	r2, #2
 8008af2:	ec57 6b10 	vmov	r6, r7, d0
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	d021      	beq.n	8008b3e <_scanf_float+0x3d6>
 8008afa:	9903      	ldr	r1, [sp, #12]
 8008afc:	1d1a      	adds	r2, r3, #4
 8008afe:	600a      	str	r2, [r1, #0]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	e9c3 6700 	strd	r6, r7, [r3]
 8008b06:	68e3      	ldr	r3, [r4, #12]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	60e3      	str	r3, [r4, #12]
 8008b0c:	e66d      	b.n	80087ea <_scanf_float+0x82>
 8008b0e:	9b04      	ldr	r3, [sp, #16]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d0e5      	beq.n	8008ae0 <_scanf_float+0x378>
 8008b14:	9905      	ldr	r1, [sp, #20]
 8008b16:	230a      	movs	r3, #10
 8008b18:	462a      	mov	r2, r5
 8008b1a:	3101      	adds	r1, #1
 8008b1c:	4640      	mov	r0, r8
 8008b1e:	f000 ff05 	bl	800992c <_strtol_r>
 8008b22:	9b04      	ldr	r3, [sp, #16]
 8008b24:	9e05      	ldr	r6, [sp, #20]
 8008b26:	1ac2      	subs	r2, r0, r3
 8008b28:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008b2c:	429e      	cmp	r6, r3
 8008b2e:	bf28      	it	cs
 8008b30:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008b34:	4912      	ldr	r1, [pc, #72]	; (8008b80 <_scanf_float+0x418>)
 8008b36:	4630      	mov	r0, r6
 8008b38:	f000 f82c 	bl	8008b94 <siprintf>
 8008b3c:	e7d0      	b.n	8008ae0 <_scanf_float+0x378>
 8008b3e:	9903      	ldr	r1, [sp, #12]
 8008b40:	f012 0f04 	tst.w	r2, #4
 8008b44:	f103 0204 	add.w	r2, r3, #4
 8008b48:	600a      	str	r2, [r1, #0]
 8008b4a:	d1d9      	bne.n	8008b00 <_scanf_float+0x398>
 8008b4c:	f8d3 8000 	ldr.w	r8, [r3]
 8008b50:	ee10 2a10 	vmov	r2, s0
 8008b54:	ee10 0a10 	vmov	r0, s0
 8008b58:	463b      	mov	r3, r7
 8008b5a:	4639      	mov	r1, r7
 8008b5c:	f7f7 ffbe 	bl	8000adc <__aeabi_dcmpun>
 8008b60:	b128      	cbz	r0, 8008b6e <_scanf_float+0x406>
 8008b62:	4808      	ldr	r0, [pc, #32]	; (8008b84 <_scanf_float+0x41c>)
 8008b64:	f000 f810 	bl	8008b88 <nanf>
 8008b68:	ed88 0a00 	vstr	s0, [r8]
 8008b6c:	e7cb      	b.n	8008b06 <_scanf_float+0x39e>
 8008b6e:	4630      	mov	r0, r6
 8008b70:	4639      	mov	r1, r7
 8008b72:	f7f8 f811 	bl	8000b98 <__aeabi_d2f>
 8008b76:	f8c8 0000 	str.w	r0, [r8]
 8008b7a:	e7c4      	b.n	8008b06 <_scanf_float+0x39e>
 8008b7c:	2500      	movs	r5, #0
 8008b7e:	e634      	b.n	80087ea <_scanf_float+0x82>
 8008b80:	0800c924 	.word	0x0800c924
 8008b84:	0800cd30 	.word	0x0800cd30

08008b88 <nanf>:
 8008b88:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008b90 <nanf+0x8>
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	7fc00000 	.word	0x7fc00000

08008b94 <siprintf>:
 8008b94:	b40e      	push	{r1, r2, r3}
 8008b96:	b500      	push	{lr}
 8008b98:	b09c      	sub	sp, #112	; 0x70
 8008b9a:	ab1d      	add	r3, sp, #116	; 0x74
 8008b9c:	9002      	str	r0, [sp, #8]
 8008b9e:	9006      	str	r0, [sp, #24]
 8008ba0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ba4:	4809      	ldr	r0, [pc, #36]	; (8008bcc <siprintf+0x38>)
 8008ba6:	9107      	str	r1, [sp, #28]
 8008ba8:	9104      	str	r1, [sp, #16]
 8008baa:	4909      	ldr	r1, [pc, #36]	; (8008bd0 <siprintf+0x3c>)
 8008bac:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bb0:	9105      	str	r1, [sp, #20]
 8008bb2:	6800      	ldr	r0, [r0, #0]
 8008bb4:	9301      	str	r3, [sp, #4]
 8008bb6:	a902      	add	r1, sp, #8
 8008bb8:	f002 fee2 	bl	800b980 <_svfiprintf_r>
 8008bbc:	9b02      	ldr	r3, [sp, #8]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	701a      	strb	r2, [r3, #0]
 8008bc2:	b01c      	add	sp, #112	; 0x70
 8008bc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bc8:	b003      	add	sp, #12
 8008bca:	4770      	bx	lr
 8008bcc:	2000010c 	.word	0x2000010c
 8008bd0:	ffff0208 	.word	0xffff0208

08008bd4 <sulp>:
 8008bd4:	b570      	push	{r4, r5, r6, lr}
 8008bd6:	4604      	mov	r4, r0
 8008bd8:	460d      	mov	r5, r1
 8008bda:	ec45 4b10 	vmov	d0, r4, r5
 8008bde:	4616      	mov	r6, r2
 8008be0:	f002 fc2c 	bl	800b43c <__ulp>
 8008be4:	ec51 0b10 	vmov	r0, r1, d0
 8008be8:	b17e      	cbz	r6, 8008c0a <sulp+0x36>
 8008bea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008bee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	dd09      	ble.n	8008c0a <sulp+0x36>
 8008bf6:	051b      	lsls	r3, r3, #20
 8008bf8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008bfc:	2400      	movs	r4, #0
 8008bfe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008c02:	4622      	mov	r2, r4
 8008c04:	462b      	mov	r3, r5
 8008c06:	f7f7 fccf 	bl	80005a8 <__aeabi_dmul>
 8008c0a:	bd70      	pop	{r4, r5, r6, pc}
 8008c0c:	0000      	movs	r0, r0
	...

08008c10 <_strtod_l>:
 8008c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c14:	ed2d 8b02 	vpush	{d8}
 8008c18:	b09d      	sub	sp, #116	; 0x74
 8008c1a:	461f      	mov	r7, r3
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	9318      	str	r3, [sp, #96]	; 0x60
 8008c20:	4ba2      	ldr	r3, [pc, #648]	; (8008eac <_strtod_l+0x29c>)
 8008c22:	9213      	str	r2, [sp, #76]	; 0x4c
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	9305      	str	r3, [sp, #20]
 8008c28:	4604      	mov	r4, r0
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	4688      	mov	r8, r1
 8008c2e:	f7f7 faa7 	bl	8000180 <strlen>
 8008c32:	f04f 0a00 	mov.w	sl, #0
 8008c36:	4605      	mov	r5, r0
 8008c38:	f04f 0b00 	mov.w	fp, #0
 8008c3c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008c40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c42:	781a      	ldrb	r2, [r3, #0]
 8008c44:	2a2b      	cmp	r2, #43	; 0x2b
 8008c46:	d04e      	beq.n	8008ce6 <_strtod_l+0xd6>
 8008c48:	d83b      	bhi.n	8008cc2 <_strtod_l+0xb2>
 8008c4a:	2a0d      	cmp	r2, #13
 8008c4c:	d834      	bhi.n	8008cb8 <_strtod_l+0xa8>
 8008c4e:	2a08      	cmp	r2, #8
 8008c50:	d834      	bhi.n	8008cbc <_strtod_l+0xac>
 8008c52:	2a00      	cmp	r2, #0
 8008c54:	d03e      	beq.n	8008cd4 <_strtod_l+0xc4>
 8008c56:	2300      	movs	r3, #0
 8008c58:	930a      	str	r3, [sp, #40]	; 0x28
 8008c5a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008c5c:	7833      	ldrb	r3, [r6, #0]
 8008c5e:	2b30      	cmp	r3, #48	; 0x30
 8008c60:	f040 80b0 	bne.w	8008dc4 <_strtod_l+0x1b4>
 8008c64:	7873      	ldrb	r3, [r6, #1]
 8008c66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008c6a:	2b58      	cmp	r3, #88	; 0x58
 8008c6c:	d168      	bne.n	8008d40 <_strtod_l+0x130>
 8008c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c70:	9301      	str	r3, [sp, #4]
 8008c72:	ab18      	add	r3, sp, #96	; 0x60
 8008c74:	9702      	str	r7, [sp, #8]
 8008c76:	9300      	str	r3, [sp, #0]
 8008c78:	4a8d      	ldr	r2, [pc, #564]	; (8008eb0 <_strtod_l+0x2a0>)
 8008c7a:	ab19      	add	r3, sp, #100	; 0x64
 8008c7c:	a917      	add	r1, sp, #92	; 0x5c
 8008c7e:	4620      	mov	r0, r4
 8008c80:	f001 fd44 	bl	800a70c <__gethex>
 8008c84:	f010 0707 	ands.w	r7, r0, #7
 8008c88:	4605      	mov	r5, r0
 8008c8a:	d005      	beq.n	8008c98 <_strtod_l+0x88>
 8008c8c:	2f06      	cmp	r7, #6
 8008c8e:	d12c      	bne.n	8008cea <_strtod_l+0xda>
 8008c90:	3601      	adds	r6, #1
 8008c92:	2300      	movs	r3, #0
 8008c94:	9617      	str	r6, [sp, #92]	; 0x5c
 8008c96:	930a      	str	r3, [sp, #40]	; 0x28
 8008c98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	f040 8590 	bne.w	80097c0 <_strtod_l+0xbb0>
 8008ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ca2:	b1eb      	cbz	r3, 8008ce0 <_strtod_l+0xd0>
 8008ca4:	4652      	mov	r2, sl
 8008ca6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008caa:	ec43 2b10 	vmov	d0, r2, r3
 8008cae:	b01d      	add	sp, #116	; 0x74
 8008cb0:	ecbd 8b02 	vpop	{d8}
 8008cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb8:	2a20      	cmp	r2, #32
 8008cba:	d1cc      	bne.n	8008c56 <_strtod_l+0x46>
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	9317      	str	r3, [sp, #92]	; 0x5c
 8008cc0:	e7be      	b.n	8008c40 <_strtod_l+0x30>
 8008cc2:	2a2d      	cmp	r2, #45	; 0x2d
 8008cc4:	d1c7      	bne.n	8008c56 <_strtod_l+0x46>
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	920a      	str	r2, [sp, #40]	; 0x28
 8008cca:	1c5a      	adds	r2, r3, #1
 8008ccc:	9217      	str	r2, [sp, #92]	; 0x5c
 8008cce:	785b      	ldrb	r3, [r3, #1]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d1c2      	bne.n	8008c5a <_strtod_l+0x4a>
 8008cd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008cd6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f040 856e 	bne.w	80097bc <_strtod_l+0xbac>
 8008ce0:	4652      	mov	r2, sl
 8008ce2:	465b      	mov	r3, fp
 8008ce4:	e7e1      	b.n	8008caa <_strtod_l+0x9a>
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	e7ee      	b.n	8008cc8 <_strtod_l+0xb8>
 8008cea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008cec:	b13a      	cbz	r2, 8008cfe <_strtod_l+0xee>
 8008cee:	2135      	movs	r1, #53	; 0x35
 8008cf0:	a81a      	add	r0, sp, #104	; 0x68
 8008cf2:	f002 fcae 	bl	800b652 <__copybits>
 8008cf6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	f002 f86d 	bl	800add8 <_Bfree>
 8008cfe:	3f01      	subs	r7, #1
 8008d00:	2f04      	cmp	r7, #4
 8008d02:	d806      	bhi.n	8008d12 <_strtod_l+0x102>
 8008d04:	e8df f007 	tbb	[pc, r7]
 8008d08:	1714030a 	.word	0x1714030a
 8008d0c:	0a          	.byte	0x0a
 8008d0d:	00          	.byte	0x00
 8008d0e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008d12:	0728      	lsls	r0, r5, #28
 8008d14:	d5c0      	bpl.n	8008c98 <_strtod_l+0x88>
 8008d16:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008d1a:	e7bd      	b.n	8008c98 <_strtod_l+0x88>
 8008d1c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008d20:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008d22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008d26:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008d2a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008d2e:	e7f0      	b.n	8008d12 <_strtod_l+0x102>
 8008d30:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008eb4 <_strtod_l+0x2a4>
 8008d34:	e7ed      	b.n	8008d12 <_strtod_l+0x102>
 8008d36:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008d3a:	f04f 3aff 	mov.w	sl, #4294967295
 8008d3e:	e7e8      	b.n	8008d12 <_strtod_l+0x102>
 8008d40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d42:	1c5a      	adds	r2, r3, #1
 8008d44:	9217      	str	r2, [sp, #92]	; 0x5c
 8008d46:	785b      	ldrb	r3, [r3, #1]
 8008d48:	2b30      	cmp	r3, #48	; 0x30
 8008d4a:	d0f9      	beq.n	8008d40 <_strtod_l+0x130>
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d0a3      	beq.n	8008c98 <_strtod_l+0x88>
 8008d50:	2301      	movs	r3, #1
 8008d52:	f04f 0900 	mov.w	r9, #0
 8008d56:	9304      	str	r3, [sp, #16]
 8008d58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d5a:	9308      	str	r3, [sp, #32]
 8008d5c:	f8cd 901c 	str.w	r9, [sp, #28]
 8008d60:	464f      	mov	r7, r9
 8008d62:	220a      	movs	r2, #10
 8008d64:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008d66:	7806      	ldrb	r6, [r0, #0]
 8008d68:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008d6c:	b2d9      	uxtb	r1, r3
 8008d6e:	2909      	cmp	r1, #9
 8008d70:	d92a      	bls.n	8008dc8 <_strtod_l+0x1b8>
 8008d72:	9905      	ldr	r1, [sp, #20]
 8008d74:	462a      	mov	r2, r5
 8008d76:	f002 ff1b 	bl	800bbb0 <strncmp>
 8008d7a:	b398      	cbz	r0, 8008de4 <_strtod_l+0x1d4>
 8008d7c:	2000      	movs	r0, #0
 8008d7e:	4632      	mov	r2, r6
 8008d80:	463d      	mov	r5, r7
 8008d82:	9005      	str	r0, [sp, #20]
 8008d84:	4603      	mov	r3, r0
 8008d86:	2a65      	cmp	r2, #101	; 0x65
 8008d88:	d001      	beq.n	8008d8e <_strtod_l+0x17e>
 8008d8a:	2a45      	cmp	r2, #69	; 0x45
 8008d8c:	d118      	bne.n	8008dc0 <_strtod_l+0x1b0>
 8008d8e:	b91d      	cbnz	r5, 8008d98 <_strtod_l+0x188>
 8008d90:	9a04      	ldr	r2, [sp, #16]
 8008d92:	4302      	orrs	r2, r0
 8008d94:	d09e      	beq.n	8008cd4 <_strtod_l+0xc4>
 8008d96:	2500      	movs	r5, #0
 8008d98:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008d9c:	f108 0201 	add.w	r2, r8, #1
 8008da0:	9217      	str	r2, [sp, #92]	; 0x5c
 8008da2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008da6:	2a2b      	cmp	r2, #43	; 0x2b
 8008da8:	d075      	beq.n	8008e96 <_strtod_l+0x286>
 8008daa:	2a2d      	cmp	r2, #45	; 0x2d
 8008dac:	d07b      	beq.n	8008ea6 <_strtod_l+0x296>
 8008dae:	f04f 0c00 	mov.w	ip, #0
 8008db2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008db6:	2909      	cmp	r1, #9
 8008db8:	f240 8082 	bls.w	8008ec0 <_strtod_l+0x2b0>
 8008dbc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008dc0:	2600      	movs	r6, #0
 8008dc2:	e09d      	b.n	8008f00 <_strtod_l+0x2f0>
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	e7c4      	b.n	8008d52 <_strtod_l+0x142>
 8008dc8:	2f08      	cmp	r7, #8
 8008dca:	bfd8      	it	le
 8008dcc:	9907      	ldrle	r1, [sp, #28]
 8008dce:	f100 0001 	add.w	r0, r0, #1
 8008dd2:	bfda      	itte	le
 8008dd4:	fb02 3301 	mlale	r3, r2, r1, r3
 8008dd8:	9307      	strle	r3, [sp, #28]
 8008dda:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008dde:	3701      	adds	r7, #1
 8008de0:	9017      	str	r0, [sp, #92]	; 0x5c
 8008de2:	e7bf      	b.n	8008d64 <_strtod_l+0x154>
 8008de4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008de6:	195a      	adds	r2, r3, r5
 8008de8:	9217      	str	r2, [sp, #92]	; 0x5c
 8008dea:	5d5a      	ldrb	r2, [r3, r5]
 8008dec:	2f00      	cmp	r7, #0
 8008dee:	d037      	beq.n	8008e60 <_strtod_l+0x250>
 8008df0:	9005      	str	r0, [sp, #20]
 8008df2:	463d      	mov	r5, r7
 8008df4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008df8:	2b09      	cmp	r3, #9
 8008dfa:	d912      	bls.n	8008e22 <_strtod_l+0x212>
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e7c2      	b.n	8008d86 <_strtod_l+0x176>
 8008e00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e02:	1c5a      	adds	r2, r3, #1
 8008e04:	9217      	str	r2, [sp, #92]	; 0x5c
 8008e06:	785a      	ldrb	r2, [r3, #1]
 8008e08:	3001      	adds	r0, #1
 8008e0a:	2a30      	cmp	r2, #48	; 0x30
 8008e0c:	d0f8      	beq.n	8008e00 <_strtod_l+0x1f0>
 8008e0e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008e12:	2b08      	cmp	r3, #8
 8008e14:	f200 84d9 	bhi.w	80097ca <_strtod_l+0xbba>
 8008e18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e1a:	9005      	str	r0, [sp, #20]
 8008e1c:	2000      	movs	r0, #0
 8008e1e:	9308      	str	r3, [sp, #32]
 8008e20:	4605      	mov	r5, r0
 8008e22:	3a30      	subs	r2, #48	; 0x30
 8008e24:	f100 0301 	add.w	r3, r0, #1
 8008e28:	d014      	beq.n	8008e54 <_strtod_l+0x244>
 8008e2a:	9905      	ldr	r1, [sp, #20]
 8008e2c:	4419      	add	r1, r3
 8008e2e:	9105      	str	r1, [sp, #20]
 8008e30:	462b      	mov	r3, r5
 8008e32:	eb00 0e05 	add.w	lr, r0, r5
 8008e36:	210a      	movs	r1, #10
 8008e38:	4573      	cmp	r3, lr
 8008e3a:	d113      	bne.n	8008e64 <_strtod_l+0x254>
 8008e3c:	182b      	adds	r3, r5, r0
 8008e3e:	2b08      	cmp	r3, #8
 8008e40:	f105 0501 	add.w	r5, r5, #1
 8008e44:	4405      	add	r5, r0
 8008e46:	dc1c      	bgt.n	8008e82 <_strtod_l+0x272>
 8008e48:	9907      	ldr	r1, [sp, #28]
 8008e4a:	230a      	movs	r3, #10
 8008e4c:	fb03 2301 	mla	r3, r3, r1, r2
 8008e50:	9307      	str	r3, [sp, #28]
 8008e52:	2300      	movs	r3, #0
 8008e54:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008e56:	1c51      	adds	r1, r2, #1
 8008e58:	9117      	str	r1, [sp, #92]	; 0x5c
 8008e5a:	7852      	ldrb	r2, [r2, #1]
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	e7c9      	b.n	8008df4 <_strtod_l+0x1e4>
 8008e60:	4638      	mov	r0, r7
 8008e62:	e7d2      	b.n	8008e0a <_strtod_l+0x1fa>
 8008e64:	2b08      	cmp	r3, #8
 8008e66:	dc04      	bgt.n	8008e72 <_strtod_l+0x262>
 8008e68:	9e07      	ldr	r6, [sp, #28]
 8008e6a:	434e      	muls	r6, r1
 8008e6c:	9607      	str	r6, [sp, #28]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	e7e2      	b.n	8008e38 <_strtod_l+0x228>
 8008e72:	f103 0c01 	add.w	ip, r3, #1
 8008e76:	f1bc 0f10 	cmp.w	ip, #16
 8008e7a:	bfd8      	it	le
 8008e7c:	fb01 f909 	mulle.w	r9, r1, r9
 8008e80:	e7f5      	b.n	8008e6e <_strtod_l+0x25e>
 8008e82:	2d10      	cmp	r5, #16
 8008e84:	bfdc      	itt	le
 8008e86:	230a      	movle	r3, #10
 8008e88:	fb03 2909 	mlale	r9, r3, r9, r2
 8008e8c:	e7e1      	b.n	8008e52 <_strtod_l+0x242>
 8008e8e:	2300      	movs	r3, #0
 8008e90:	9305      	str	r3, [sp, #20]
 8008e92:	2301      	movs	r3, #1
 8008e94:	e77c      	b.n	8008d90 <_strtod_l+0x180>
 8008e96:	f04f 0c00 	mov.w	ip, #0
 8008e9a:	f108 0202 	add.w	r2, r8, #2
 8008e9e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008ea0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008ea4:	e785      	b.n	8008db2 <_strtod_l+0x1a2>
 8008ea6:	f04f 0c01 	mov.w	ip, #1
 8008eaa:	e7f6      	b.n	8008e9a <_strtod_l+0x28a>
 8008eac:	0800cb78 	.word	0x0800cb78
 8008eb0:	0800c92c 	.word	0x0800c92c
 8008eb4:	7ff00000 	.word	0x7ff00000
 8008eb8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008eba:	1c51      	adds	r1, r2, #1
 8008ebc:	9117      	str	r1, [sp, #92]	; 0x5c
 8008ebe:	7852      	ldrb	r2, [r2, #1]
 8008ec0:	2a30      	cmp	r2, #48	; 0x30
 8008ec2:	d0f9      	beq.n	8008eb8 <_strtod_l+0x2a8>
 8008ec4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008ec8:	2908      	cmp	r1, #8
 8008eca:	f63f af79 	bhi.w	8008dc0 <_strtod_l+0x1b0>
 8008ece:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008ed2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008ed4:	9206      	str	r2, [sp, #24]
 8008ed6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008ed8:	1c51      	adds	r1, r2, #1
 8008eda:	9117      	str	r1, [sp, #92]	; 0x5c
 8008edc:	7852      	ldrb	r2, [r2, #1]
 8008ede:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008ee2:	2e09      	cmp	r6, #9
 8008ee4:	d937      	bls.n	8008f56 <_strtod_l+0x346>
 8008ee6:	9e06      	ldr	r6, [sp, #24]
 8008ee8:	1b89      	subs	r1, r1, r6
 8008eea:	2908      	cmp	r1, #8
 8008eec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008ef0:	dc02      	bgt.n	8008ef8 <_strtod_l+0x2e8>
 8008ef2:	4576      	cmp	r6, lr
 8008ef4:	bfa8      	it	ge
 8008ef6:	4676      	movge	r6, lr
 8008ef8:	f1bc 0f00 	cmp.w	ip, #0
 8008efc:	d000      	beq.n	8008f00 <_strtod_l+0x2f0>
 8008efe:	4276      	negs	r6, r6
 8008f00:	2d00      	cmp	r5, #0
 8008f02:	d14d      	bne.n	8008fa0 <_strtod_l+0x390>
 8008f04:	9904      	ldr	r1, [sp, #16]
 8008f06:	4301      	orrs	r1, r0
 8008f08:	f47f aec6 	bne.w	8008c98 <_strtod_l+0x88>
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f47f aee1 	bne.w	8008cd4 <_strtod_l+0xc4>
 8008f12:	2a69      	cmp	r2, #105	; 0x69
 8008f14:	d027      	beq.n	8008f66 <_strtod_l+0x356>
 8008f16:	dc24      	bgt.n	8008f62 <_strtod_l+0x352>
 8008f18:	2a49      	cmp	r2, #73	; 0x49
 8008f1a:	d024      	beq.n	8008f66 <_strtod_l+0x356>
 8008f1c:	2a4e      	cmp	r2, #78	; 0x4e
 8008f1e:	f47f aed9 	bne.w	8008cd4 <_strtod_l+0xc4>
 8008f22:	499f      	ldr	r1, [pc, #636]	; (80091a0 <_strtod_l+0x590>)
 8008f24:	a817      	add	r0, sp, #92	; 0x5c
 8008f26:	f001 fe49 	bl	800abbc <__match>
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	f43f aed2 	beq.w	8008cd4 <_strtod_l+0xc4>
 8008f30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	2b28      	cmp	r3, #40	; 0x28
 8008f36:	d12d      	bne.n	8008f94 <_strtod_l+0x384>
 8008f38:	499a      	ldr	r1, [pc, #616]	; (80091a4 <_strtod_l+0x594>)
 8008f3a:	aa1a      	add	r2, sp, #104	; 0x68
 8008f3c:	a817      	add	r0, sp, #92	; 0x5c
 8008f3e:	f001 fe51 	bl	800abe4 <__hexnan>
 8008f42:	2805      	cmp	r0, #5
 8008f44:	d126      	bne.n	8008f94 <_strtod_l+0x384>
 8008f46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f48:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008f4c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008f50:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008f54:	e6a0      	b.n	8008c98 <_strtod_l+0x88>
 8008f56:	210a      	movs	r1, #10
 8008f58:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008f5c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008f60:	e7b9      	b.n	8008ed6 <_strtod_l+0x2c6>
 8008f62:	2a6e      	cmp	r2, #110	; 0x6e
 8008f64:	e7db      	b.n	8008f1e <_strtod_l+0x30e>
 8008f66:	4990      	ldr	r1, [pc, #576]	; (80091a8 <_strtod_l+0x598>)
 8008f68:	a817      	add	r0, sp, #92	; 0x5c
 8008f6a:	f001 fe27 	bl	800abbc <__match>
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	f43f aeb0 	beq.w	8008cd4 <_strtod_l+0xc4>
 8008f74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f76:	498d      	ldr	r1, [pc, #564]	; (80091ac <_strtod_l+0x59c>)
 8008f78:	3b01      	subs	r3, #1
 8008f7a:	a817      	add	r0, sp, #92	; 0x5c
 8008f7c:	9317      	str	r3, [sp, #92]	; 0x5c
 8008f7e:	f001 fe1d 	bl	800abbc <__match>
 8008f82:	b910      	cbnz	r0, 8008f8a <_strtod_l+0x37a>
 8008f84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f86:	3301      	adds	r3, #1
 8008f88:	9317      	str	r3, [sp, #92]	; 0x5c
 8008f8a:	f8df b230 	ldr.w	fp, [pc, #560]	; 80091bc <_strtod_l+0x5ac>
 8008f8e:	f04f 0a00 	mov.w	sl, #0
 8008f92:	e681      	b.n	8008c98 <_strtod_l+0x88>
 8008f94:	4886      	ldr	r0, [pc, #536]	; (80091b0 <_strtod_l+0x5a0>)
 8008f96:	f002 fdf3 	bl	800bb80 <nan>
 8008f9a:	ec5b ab10 	vmov	sl, fp, d0
 8008f9e:	e67b      	b.n	8008c98 <_strtod_l+0x88>
 8008fa0:	9b05      	ldr	r3, [sp, #20]
 8008fa2:	9807      	ldr	r0, [sp, #28]
 8008fa4:	1af3      	subs	r3, r6, r3
 8008fa6:	2f00      	cmp	r7, #0
 8008fa8:	bf08      	it	eq
 8008faa:	462f      	moveq	r7, r5
 8008fac:	2d10      	cmp	r5, #16
 8008fae:	9306      	str	r3, [sp, #24]
 8008fb0:	46a8      	mov	r8, r5
 8008fb2:	bfa8      	it	ge
 8008fb4:	f04f 0810 	movge.w	r8, #16
 8008fb8:	f7f7 fa7c 	bl	80004b4 <__aeabi_ui2d>
 8008fbc:	2d09      	cmp	r5, #9
 8008fbe:	4682      	mov	sl, r0
 8008fc0:	468b      	mov	fp, r1
 8008fc2:	dd13      	ble.n	8008fec <_strtod_l+0x3dc>
 8008fc4:	4b7b      	ldr	r3, [pc, #492]	; (80091b4 <_strtod_l+0x5a4>)
 8008fc6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008fca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008fce:	f7f7 faeb 	bl	80005a8 <__aeabi_dmul>
 8008fd2:	4682      	mov	sl, r0
 8008fd4:	4648      	mov	r0, r9
 8008fd6:	468b      	mov	fp, r1
 8008fd8:	f7f7 fa6c 	bl	80004b4 <__aeabi_ui2d>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	460b      	mov	r3, r1
 8008fe0:	4650      	mov	r0, sl
 8008fe2:	4659      	mov	r1, fp
 8008fe4:	f7f7 f92a 	bl	800023c <__adddf3>
 8008fe8:	4682      	mov	sl, r0
 8008fea:	468b      	mov	fp, r1
 8008fec:	2d0f      	cmp	r5, #15
 8008fee:	dc38      	bgt.n	8009062 <_strtod_l+0x452>
 8008ff0:	9b06      	ldr	r3, [sp, #24]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	f43f ae50 	beq.w	8008c98 <_strtod_l+0x88>
 8008ff8:	dd24      	ble.n	8009044 <_strtod_l+0x434>
 8008ffa:	2b16      	cmp	r3, #22
 8008ffc:	dc0b      	bgt.n	8009016 <_strtod_l+0x406>
 8008ffe:	496d      	ldr	r1, [pc, #436]	; (80091b4 <_strtod_l+0x5a4>)
 8009000:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009004:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009008:	4652      	mov	r2, sl
 800900a:	465b      	mov	r3, fp
 800900c:	f7f7 facc 	bl	80005a8 <__aeabi_dmul>
 8009010:	4682      	mov	sl, r0
 8009012:	468b      	mov	fp, r1
 8009014:	e640      	b.n	8008c98 <_strtod_l+0x88>
 8009016:	9a06      	ldr	r2, [sp, #24]
 8009018:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800901c:	4293      	cmp	r3, r2
 800901e:	db20      	blt.n	8009062 <_strtod_l+0x452>
 8009020:	4c64      	ldr	r4, [pc, #400]	; (80091b4 <_strtod_l+0x5a4>)
 8009022:	f1c5 050f 	rsb	r5, r5, #15
 8009026:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800902a:	4652      	mov	r2, sl
 800902c:	465b      	mov	r3, fp
 800902e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009032:	f7f7 fab9 	bl	80005a8 <__aeabi_dmul>
 8009036:	9b06      	ldr	r3, [sp, #24]
 8009038:	1b5d      	subs	r5, r3, r5
 800903a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800903e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009042:	e7e3      	b.n	800900c <_strtod_l+0x3fc>
 8009044:	9b06      	ldr	r3, [sp, #24]
 8009046:	3316      	adds	r3, #22
 8009048:	db0b      	blt.n	8009062 <_strtod_l+0x452>
 800904a:	9b05      	ldr	r3, [sp, #20]
 800904c:	1b9e      	subs	r6, r3, r6
 800904e:	4b59      	ldr	r3, [pc, #356]	; (80091b4 <_strtod_l+0x5a4>)
 8009050:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009054:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009058:	4650      	mov	r0, sl
 800905a:	4659      	mov	r1, fp
 800905c:	f7f7 fbce 	bl	80007fc <__aeabi_ddiv>
 8009060:	e7d6      	b.n	8009010 <_strtod_l+0x400>
 8009062:	9b06      	ldr	r3, [sp, #24]
 8009064:	eba5 0808 	sub.w	r8, r5, r8
 8009068:	4498      	add	r8, r3
 800906a:	f1b8 0f00 	cmp.w	r8, #0
 800906e:	dd74      	ble.n	800915a <_strtod_l+0x54a>
 8009070:	f018 030f 	ands.w	r3, r8, #15
 8009074:	d00a      	beq.n	800908c <_strtod_l+0x47c>
 8009076:	494f      	ldr	r1, [pc, #316]	; (80091b4 <_strtod_l+0x5a4>)
 8009078:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800907c:	4652      	mov	r2, sl
 800907e:	465b      	mov	r3, fp
 8009080:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009084:	f7f7 fa90 	bl	80005a8 <__aeabi_dmul>
 8009088:	4682      	mov	sl, r0
 800908a:	468b      	mov	fp, r1
 800908c:	f038 080f 	bics.w	r8, r8, #15
 8009090:	d04f      	beq.n	8009132 <_strtod_l+0x522>
 8009092:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009096:	dd22      	ble.n	80090de <_strtod_l+0x4ce>
 8009098:	2500      	movs	r5, #0
 800909a:	462e      	mov	r6, r5
 800909c:	9507      	str	r5, [sp, #28]
 800909e:	9505      	str	r5, [sp, #20]
 80090a0:	2322      	movs	r3, #34	; 0x22
 80090a2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80091bc <_strtod_l+0x5ac>
 80090a6:	6023      	str	r3, [r4, #0]
 80090a8:	f04f 0a00 	mov.w	sl, #0
 80090ac:	9b07      	ldr	r3, [sp, #28]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	f43f adf2 	beq.w	8008c98 <_strtod_l+0x88>
 80090b4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80090b6:	4620      	mov	r0, r4
 80090b8:	f001 fe8e 	bl	800add8 <_Bfree>
 80090bc:	9905      	ldr	r1, [sp, #20]
 80090be:	4620      	mov	r0, r4
 80090c0:	f001 fe8a 	bl	800add8 <_Bfree>
 80090c4:	4631      	mov	r1, r6
 80090c6:	4620      	mov	r0, r4
 80090c8:	f001 fe86 	bl	800add8 <_Bfree>
 80090cc:	9907      	ldr	r1, [sp, #28]
 80090ce:	4620      	mov	r0, r4
 80090d0:	f001 fe82 	bl	800add8 <_Bfree>
 80090d4:	4629      	mov	r1, r5
 80090d6:	4620      	mov	r0, r4
 80090d8:	f001 fe7e 	bl	800add8 <_Bfree>
 80090dc:	e5dc      	b.n	8008c98 <_strtod_l+0x88>
 80090de:	4b36      	ldr	r3, [pc, #216]	; (80091b8 <_strtod_l+0x5a8>)
 80090e0:	9304      	str	r3, [sp, #16]
 80090e2:	2300      	movs	r3, #0
 80090e4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80090e8:	4650      	mov	r0, sl
 80090ea:	4659      	mov	r1, fp
 80090ec:	4699      	mov	r9, r3
 80090ee:	f1b8 0f01 	cmp.w	r8, #1
 80090f2:	dc21      	bgt.n	8009138 <_strtod_l+0x528>
 80090f4:	b10b      	cbz	r3, 80090fa <_strtod_l+0x4ea>
 80090f6:	4682      	mov	sl, r0
 80090f8:	468b      	mov	fp, r1
 80090fa:	4b2f      	ldr	r3, [pc, #188]	; (80091b8 <_strtod_l+0x5a8>)
 80090fc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009100:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009104:	4652      	mov	r2, sl
 8009106:	465b      	mov	r3, fp
 8009108:	e9d9 0100 	ldrd	r0, r1, [r9]
 800910c:	f7f7 fa4c 	bl	80005a8 <__aeabi_dmul>
 8009110:	4b2a      	ldr	r3, [pc, #168]	; (80091bc <_strtod_l+0x5ac>)
 8009112:	460a      	mov	r2, r1
 8009114:	400b      	ands	r3, r1
 8009116:	492a      	ldr	r1, [pc, #168]	; (80091c0 <_strtod_l+0x5b0>)
 8009118:	428b      	cmp	r3, r1
 800911a:	4682      	mov	sl, r0
 800911c:	d8bc      	bhi.n	8009098 <_strtod_l+0x488>
 800911e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009122:	428b      	cmp	r3, r1
 8009124:	bf86      	itte	hi
 8009126:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80091c4 <_strtod_l+0x5b4>
 800912a:	f04f 3aff 	movhi.w	sl, #4294967295
 800912e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009132:	2300      	movs	r3, #0
 8009134:	9304      	str	r3, [sp, #16]
 8009136:	e084      	b.n	8009242 <_strtod_l+0x632>
 8009138:	f018 0f01 	tst.w	r8, #1
 800913c:	d005      	beq.n	800914a <_strtod_l+0x53a>
 800913e:	9b04      	ldr	r3, [sp, #16]
 8009140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009144:	f7f7 fa30 	bl	80005a8 <__aeabi_dmul>
 8009148:	2301      	movs	r3, #1
 800914a:	9a04      	ldr	r2, [sp, #16]
 800914c:	3208      	adds	r2, #8
 800914e:	f109 0901 	add.w	r9, r9, #1
 8009152:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009156:	9204      	str	r2, [sp, #16]
 8009158:	e7c9      	b.n	80090ee <_strtod_l+0x4de>
 800915a:	d0ea      	beq.n	8009132 <_strtod_l+0x522>
 800915c:	f1c8 0800 	rsb	r8, r8, #0
 8009160:	f018 020f 	ands.w	r2, r8, #15
 8009164:	d00a      	beq.n	800917c <_strtod_l+0x56c>
 8009166:	4b13      	ldr	r3, [pc, #76]	; (80091b4 <_strtod_l+0x5a4>)
 8009168:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800916c:	4650      	mov	r0, sl
 800916e:	4659      	mov	r1, fp
 8009170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009174:	f7f7 fb42 	bl	80007fc <__aeabi_ddiv>
 8009178:	4682      	mov	sl, r0
 800917a:	468b      	mov	fp, r1
 800917c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009180:	d0d7      	beq.n	8009132 <_strtod_l+0x522>
 8009182:	f1b8 0f1f 	cmp.w	r8, #31
 8009186:	dd1f      	ble.n	80091c8 <_strtod_l+0x5b8>
 8009188:	2500      	movs	r5, #0
 800918a:	462e      	mov	r6, r5
 800918c:	9507      	str	r5, [sp, #28]
 800918e:	9505      	str	r5, [sp, #20]
 8009190:	2322      	movs	r3, #34	; 0x22
 8009192:	f04f 0a00 	mov.w	sl, #0
 8009196:	f04f 0b00 	mov.w	fp, #0
 800919a:	6023      	str	r3, [r4, #0]
 800919c:	e786      	b.n	80090ac <_strtod_l+0x49c>
 800919e:	bf00      	nop
 80091a0:	0800c8fd 	.word	0x0800c8fd
 80091a4:	0800c940 	.word	0x0800c940
 80091a8:	0800c8f5 	.word	0x0800c8f5
 80091ac:	0800ca84 	.word	0x0800ca84
 80091b0:	0800cd30 	.word	0x0800cd30
 80091b4:	0800cc10 	.word	0x0800cc10
 80091b8:	0800cbe8 	.word	0x0800cbe8
 80091bc:	7ff00000 	.word	0x7ff00000
 80091c0:	7ca00000 	.word	0x7ca00000
 80091c4:	7fefffff 	.word	0x7fefffff
 80091c8:	f018 0310 	ands.w	r3, r8, #16
 80091cc:	bf18      	it	ne
 80091ce:	236a      	movne	r3, #106	; 0x6a
 80091d0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009580 <_strtod_l+0x970>
 80091d4:	9304      	str	r3, [sp, #16]
 80091d6:	4650      	mov	r0, sl
 80091d8:	4659      	mov	r1, fp
 80091da:	2300      	movs	r3, #0
 80091dc:	f018 0f01 	tst.w	r8, #1
 80091e0:	d004      	beq.n	80091ec <_strtod_l+0x5dc>
 80091e2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80091e6:	f7f7 f9df 	bl	80005a8 <__aeabi_dmul>
 80091ea:	2301      	movs	r3, #1
 80091ec:	ea5f 0868 	movs.w	r8, r8, asr #1
 80091f0:	f109 0908 	add.w	r9, r9, #8
 80091f4:	d1f2      	bne.n	80091dc <_strtod_l+0x5cc>
 80091f6:	b10b      	cbz	r3, 80091fc <_strtod_l+0x5ec>
 80091f8:	4682      	mov	sl, r0
 80091fa:	468b      	mov	fp, r1
 80091fc:	9b04      	ldr	r3, [sp, #16]
 80091fe:	b1c3      	cbz	r3, 8009232 <_strtod_l+0x622>
 8009200:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009204:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009208:	2b00      	cmp	r3, #0
 800920a:	4659      	mov	r1, fp
 800920c:	dd11      	ble.n	8009232 <_strtod_l+0x622>
 800920e:	2b1f      	cmp	r3, #31
 8009210:	f340 8124 	ble.w	800945c <_strtod_l+0x84c>
 8009214:	2b34      	cmp	r3, #52	; 0x34
 8009216:	bfde      	ittt	le
 8009218:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800921c:	f04f 33ff 	movle.w	r3, #4294967295
 8009220:	fa03 f202 	lslle.w	r2, r3, r2
 8009224:	f04f 0a00 	mov.w	sl, #0
 8009228:	bfcc      	ite	gt
 800922a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800922e:	ea02 0b01 	andle.w	fp, r2, r1
 8009232:	2200      	movs	r2, #0
 8009234:	2300      	movs	r3, #0
 8009236:	4650      	mov	r0, sl
 8009238:	4659      	mov	r1, fp
 800923a:	f7f7 fc1d 	bl	8000a78 <__aeabi_dcmpeq>
 800923e:	2800      	cmp	r0, #0
 8009240:	d1a2      	bne.n	8009188 <_strtod_l+0x578>
 8009242:	9b07      	ldr	r3, [sp, #28]
 8009244:	9300      	str	r3, [sp, #0]
 8009246:	9908      	ldr	r1, [sp, #32]
 8009248:	462b      	mov	r3, r5
 800924a:	463a      	mov	r2, r7
 800924c:	4620      	mov	r0, r4
 800924e:	f001 fe2b 	bl	800aea8 <__s2b>
 8009252:	9007      	str	r0, [sp, #28]
 8009254:	2800      	cmp	r0, #0
 8009256:	f43f af1f 	beq.w	8009098 <_strtod_l+0x488>
 800925a:	9b05      	ldr	r3, [sp, #20]
 800925c:	1b9e      	subs	r6, r3, r6
 800925e:	9b06      	ldr	r3, [sp, #24]
 8009260:	2b00      	cmp	r3, #0
 8009262:	bfb4      	ite	lt
 8009264:	4633      	movlt	r3, r6
 8009266:	2300      	movge	r3, #0
 8009268:	930c      	str	r3, [sp, #48]	; 0x30
 800926a:	9b06      	ldr	r3, [sp, #24]
 800926c:	2500      	movs	r5, #0
 800926e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009272:	9312      	str	r3, [sp, #72]	; 0x48
 8009274:	462e      	mov	r6, r5
 8009276:	9b07      	ldr	r3, [sp, #28]
 8009278:	4620      	mov	r0, r4
 800927a:	6859      	ldr	r1, [r3, #4]
 800927c:	f001 fd6c 	bl	800ad58 <_Balloc>
 8009280:	9005      	str	r0, [sp, #20]
 8009282:	2800      	cmp	r0, #0
 8009284:	f43f af0c 	beq.w	80090a0 <_strtod_l+0x490>
 8009288:	9b07      	ldr	r3, [sp, #28]
 800928a:	691a      	ldr	r2, [r3, #16]
 800928c:	3202      	adds	r2, #2
 800928e:	f103 010c 	add.w	r1, r3, #12
 8009292:	0092      	lsls	r2, r2, #2
 8009294:	300c      	adds	r0, #12
 8009296:	f7fe fdcd 	bl	8007e34 <memcpy>
 800929a:	ec4b ab10 	vmov	d0, sl, fp
 800929e:	aa1a      	add	r2, sp, #104	; 0x68
 80092a0:	a919      	add	r1, sp, #100	; 0x64
 80092a2:	4620      	mov	r0, r4
 80092a4:	f002 f946 	bl	800b534 <__d2b>
 80092a8:	ec4b ab18 	vmov	d8, sl, fp
 80092ac:	9018      	str	r0, [sp, #96]	; 0x60
 80092ae:	2800      	cmp	r0, #0
 80092b0:	f43f aef6 	beq.w	80090a0 <_strtod_l+0x490>
 80092b4:	2101      	movs	r1, #1
 80092b6:	4620      	mov	r0, r4
 80092b8:	f001 fe90 	bl	800afdc <__i2b>
 80092bc:	4606      	mov	r6, r0
 80092be:	2800      	cmp	r0, #0
 80092c0:	f43f aeee 	beq.w	80090a0 <_strtod_l+0x490>
 80092c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80092c6:	9904      	ldr	r1, [sp, #16]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	bfab      	itete	ge
 80092cc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80092ce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80092d0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80092d2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80092d6:	bfac      	ite	ge
 80092d8:	eb03 0902 	addge.w	r9, r3, r2
 80092dc:	1ad7      	sublt	r7, r2, r3
 80092de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80092e0:	eba3 0801 	sub.w	r8, r3, r1
 80092e4:	4490      	add	r8, r2
 80092e6:	4ba1      	ldr	r3, [pc, #644]	; (800956c <_strtod_l+0x95c>)
 80092e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80092ec:	4598      	cmp	r8, r3
 80092ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80092f2:	f280 80c7 	bge.w	8009484 <_strtod_l+0x874>
 80092f6:	eba3 0308 	sub.w	r3, r3, r8
 80092fa:	2b1f      	cmp	r3, #31
 80092fc:	eba2 0203 	sub.w	r2, r2, r3
 8009300:	f04f 0101 	mov.w	r1, #1
 8009304:	f300 80b1 	bgt.w	800946a <_strtod_l+0x85a>
 8009308:	fa01 f303 	lsl.w	r3, r1, r3
 800930c:	930d      	str	r3, [sp, #52]	; 0x34
 800930e:	2300      	movs	r3, #0
 8009310:	9308      	str	r3, [sp, #32]
 8009312:	eb09 0802 	add.w	r8, r9, r2
 8009316:	9b04      	ldr	r3, [sp, #16]
 8009318:	45c1      	cmp	r9, r8
 800931a:	4417      	add	r7, r2
 800931c:	441f      	add	r7, r3
 800931e:	464b      	mov	r3, r9
 8009320:	bfa8      	it	ge
 8009322:	4643      	movge	r3, r8
 8009324:	42bb      	cmp	r3, r7
 8009326:	bfa8      	it	ge
 8009328:	463b      	movge	r3, r7
 800932a:	2b00      	cmp	r3, #0
 800932c:	bfc2      	ittt	gt
 800932e:	eba8 0803 	subgt.w	r8, r8, r3
 8009332:	1aff      	subgt	r7, r7, r3
 8009334:	eba9 0903 	subgt.w	r9, r9, r3
 8009338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800933a:	2b00      	cmp	r3, #0
 800933c:	dd17      	ble.n	800936e <_strtod_l+0x75e>
 800933e:	4631      	mov	r1, r6
 8009340:	461a      	mov	r2, r3
 8009342:	4620      	mov	r0, r4
 8009344:	f001 ff0a 	bl	800b15c <__pow5mult>
 8009348:	4606      	mov	r6, r0
 800934a:	2800      	cmp	r0, #0
 800934c:	f43f aea8 	beq.w	80090a0 <_strtod_l+0x490>
 8009350:	4601      	mov	r1, r0
 8009352:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009354:	4620      	mov	r0, r4
 8009356:	f001 fe57 	bl	800b008 <__multiply>
 800935a:	900b      	str	r0, [sp, #44]	; 0x2c
 800935c:	2800      	cmp	r0, #0
 800935e:	f43f ae9f 	beq.w	80090a0 <_strtod_l+0x490>
 8009362:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009364:	4620      	mov	r0, r4
 8009366:	f001 fd37 	bl	800add8 <_Bfree>
 800936a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800936c:	9318      	str	r3, [sp, #96]	; 0x60
 800936e:	f1b8 0f00 	cmp.w	r8, #0
 8009372:	f300 808c 	bgt.w	800948e <_strtod_l+0x87e>
 8009376:	9b06      	ldr	r3, [sp, #24]
 8009378:	2b00      	cmp	r3, #0
 800937a:	dd08      	ble.n	800938e <_strtod_l+0x77e>
 800937c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800937e:	9905      	ldr	r1, [sp, #20]
 8009380:	4620      	mov	r0, r4
 8009382:	f001 feeb 	bl	800b15c <__pow5mult>
 8009386:	9005      	str	r0, [sp, #20]
 8009388:	2800      	cmp	r0, #0
 800938a:	f43f ae89 	beq.w	80090a0 <_strtod_l+0x490>
 800938e:	2f00      	cmp	r7, #0
 8009390:	dd08      	ble.n	80093a4 <_strtod_l+0x794>
 8009392:	9905      	ldr	r1, [sp, #20]
 8009394:	463a      	mov	r2, r7
 8009396:	4620      	mov	r0, r4
 8009398:	f001 ff3a 	bl	800b210 <__lshift>
 800939c:	9005      	str	r0, [sp, #20]
 800939e:	2800      	cmp	r0, #0
 80093a0:	f43f ae7e 	beq.w	80090a0 <_strtod_l+0x490>
 80093a4:	f1b9 0f00 	cmp.w	r9, #0
 80093a8:	dd08      	ble.n	80093bc <_strtod_l+0x7ac>
 80093aa:	4631      	mov	r1, r6
 80093ac:	464a      	mov	r2, r9
 80093ae:	4620      	mov	r0, r4
 80093b0:	f001 ff2e 	bl	800b210 <__lshift>
 80093b4:	4606      	mov	r6, r0
 80093b6:	2800      	cmp	r0, #0
 80093b8:	f43f ae72 	beq.w	80090a0 <_strtod_l+0x490>
 80093bc:	9a05      	ldr	r2, [sp, #20]
 80093be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80093c0:	4620      	mov	r0, r4
 80093c2:	f001 ffb1 	bl	800b328 <__mdiff>
 80093c6:	4605      	mov	r5, r0
 80093c8:	2800      	cmp	r0, #0
 80093ca:	f43f ae69 	beq.w	80090a0 <_strtod_l+0x490>
 80093ce:	68c3      	ldr	r3, [r0, #12]
 80093d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80093d2:	2300      	movs	r3, #0
 80093d4:	60c3      	str	r3, [r0, #12]
 80093d6:	4631      	mov	r1, r6
 80093d8:	f001 ff8a 	bl	800b2f0 <__mcmp>
 80093dc:	2800      	cmp	r0, #0
 80093de:	da60      	bge.n	80094a2 <_strtod_l+0x892>
 80093e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093e2:	ea53 030a 	orrs.w	r3, r3, sl
 80093e6:	f040 8082 	bne.w	80094ee <_strtod_l+0x8de>
 80093ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d17d      	bne.n	80094ee <_strtod_l+0x8de>
 80093f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80093f6:	0d1b      	lsrs	r3, r3, #20
 80093f8:	051b      	lsls	r3, r3, #20
 80093fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80093fe:	d976      	bls.n	80094ee <_strtod_l+0x8de>
 8009400:	696b      	ldr	r3, [r5, #20]
 8009402:	b913      	cbnz	r3, 800940a <_strtod_l+0x7fa>
 8009404:	692b      	ldr	r3, [r5, #16]
 8009406:	2b01      	cmp	r3, #1
 8009408:	dd71      	ble.n	80094ee <_strtod_l+0x8de>
 800940a:	4629      	mov	r1, r5
 800940c:	2201      	movs	r2, #1
 800940e:	4620      	mov	r0, r4
 8009410:	f001 fefe 	bl	800b210 <__lshift>
 8009414:	4631      	mov	r1, r6
 8009416:	4605      	mov	r5, r0
 8009418:	f001 ff6a 	bl	800b2f0 <__mcmp>
 800941c:	2800      	cmp	r0, #0
 800941e:	dd66      	ble.n	80094ee <_strtod_l+0x8de>
 8009420:	9904      	ldr	r1, [sp, #16]
 8009422:	4a53      	ldr	r2, [pc, #332]	; (8009570 <_strtod_l+0x960>)
 8009424:	465b      	mov	r3, fp
 8009426:	2900      	cmp	r1, #0
 8009428:	f000 8081 	beq.w	800952e <_strtod_l+0x91e>
 800942c:	ea02 010b 	and.w	r1, r2, fp
 8009430:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009434:	dc7b      	bgt.n	800952e <_strtod_l+0x91e>
 8009436:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800943a:	f77f aea9 	ble.w	8009190 <_strtod_l+0x580>
 800943e:	4b4d      	ldr	r3, [pc, #308]	; (8009574 <_strtod_l+0x964>)
 8009440:	4650      	mov	r0, sl
 8009442:	4659      	mov	r1, fp
 8009444:	2200      	movs	r2, #0
 8009446:	f7f7 f8af 	bl	80005a8 <__aeabi_dmul>
 800944a:	460b      	mov	r3, r1
 800944c:	4303      	orrs	r3, r0
 800944e:	bf08      	it	eq
 8009450:	2322      	moveq	r3, #34	; 0x22
 8009452:	4682      	mov	sl, r0
 8009454:	468b      	mov	fp, r1
 8009456:	bf08      	it	eq
 8009458:	6023      	streq	r3, [r4, #0]
 800945a:	e62b      	b.n	80090b4 <_strtod_l+0x4a4>
 800945c:	f04f 32ff 	mov.w	r2, #4294967295
 8009460:	fa02 f303 	lsl.w	r3, r2, r3
 8009464:	ea03 0a0a 	and.w	sl, r3, sl
 8009468:	e6e3      	b.n	8009232 <_strtod_l+0x622>
 800946a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800946e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009472:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009476:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800947a:	fa01 f308 	lsl.w	r3, r1, r8
 800947e:	9308      	str	r3, [sp, #32]
 8009480:	910d      	str	r1, [sp, #52]	; 0x34
 8009482:	e746      	b.n	8009312 <_strtod_l+0x702>
 8009484:	2300      	movs	r3, #0
 8009486:	9308      	str	r3, [sp, #32]
 8009488:	2301      	movs	r3, #1
 800948a:	930d      	str	r3, [sp, #52]	; 0x34
 800948c:	e741      	b.n	8009312 <_strtod_l+0x702>
 800948e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009490:	4642      	mov	r2, r8
 8009492:	4620      	mov	r0, r4
 8009494:	f001 febc 	bl	800b210 <__lshift>
 8009498:	9018      	str	r0, [sp, #96]	; 0x60
 800949a:	2800      	cmp	r0, #0
 800949c:	f47f af6b 	bne.w	8009376 <_strtod_l+0x766>
 80094a0:	e5fe      	b.n	80090a0 <_strtod_l+0x490>
 80094a2:	465f      	mov	r7, fp
 80094a4:	d16e      	bne.n	8009584 <_strtod_l+0x974>
 80094a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80094a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094ac:	b342      	cbz	r2, 8009500 <_strtod_l+0x8f0>
 80094ae:	4a32      	ldr	r2, [pc, #200]	; (8009578 <_strtod_l+0x968>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d128      	bne.n	8009506 <_strtod_l+0x8f6>
 80094b4:	9b04      	ldr	r3, [sp, #16]
 80094b6:	4651      	mov	r1, sl
 80094b8:	b1eb      	cbz	r3, 80094f6 <_strtod_l+0x8e6>
 80094ba:	4b2d      	ldr	r3, [pc, #180]	; (8009570 <_strtod_l+0x960>)
 80094bc:	403b      	ands	r3, r7
 80094be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80094c2:	f04f 32ff 	mov.w	r2, #4294967295
 80094c6:	d819      	bhi.n	80094fc <_strtod_l+0x8ec>
 80094c8:	0d1b      	lsrs	r3, r3, #20
 80094ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80094ce:	fa02 f303 	lsl.w	r3, r2, r3
 80094d2:	4299      	cmp	r1, r3
 80094d4:	d117      	bne.n	8009506 <_strtod_l+0x8f6>
 80094d6:	4b29      	ldr	r3, [pc, #164]	; (800957c <_strtod_l+0x96c>)
 80094d8:	429f      	cmp	r7, r3
 80094da:	d102      	bne.n	80094e2 <_strtod_l+0x8d2>
 80094dc:	3101      	adds	r1, #1
 80094de:	f43f addf 	beq.w	80090a0 <_strtod_l+0x490>
 80094e2:	4b23      	ldr	r3, [pc, #140]	; (8009570 <_strtod_l+0x960>)
 80094e4:	403b      	ands	r3, r7
 80094e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80094ea:	f04f 0a00 	mov.w	sl, #0
 80094ee:	9b04      	ldr	r3, [sp, #16]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d1a4      	bne.n	800943e <_strtod_l+0x82e>
 80094f4:	e5de      	b.n	80090b4 <_strtod_l+0x4a4>
 80094f6:	f04f 33ff 	mov.w	r3, #4294967295
 80094fa:	e7ea      	b.n	80094d2 <_strtod_l+0x8c2>
 80094fc:	4613      	mov	r3, r2
 80094fe:	e7e8      	b.n	80094d2 <_strtod_l+0x8c2>
 8009500:	ea53 030a 	orrs.w	r3, r3, sl
 8009504:	d08c      	beq.n	8009420 <_strtod_l+0x810>
 8009506:	9b08      	ldr	r3, [sp, #32]
 8009508:	b1db      	cbz	r3, 8009542 <_strtod_l+0x932>
 800950a:	423b      	tst	r3, r7
 800950c:	d0ef      	beq.n	80094ee <_strtod_l+0x8de>
 800950e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009510:	9a04      	ldr	r2, [sp, #16]
 8009512:	4650      	mov	r0, sl
 8009514:	4659      	mov	r1, fp
 8009516:	b1c3      	cbz	r3, 800954a <_strtod_l+0x93a>
 8009518:	f7ff fb5c 	bl	8008bd4 <sulp>
 800951c:	4602      	mov	r2, r0
 800951e:	460b      	mov	r3, r1
 8009520:	ec51 0b18 	vmov	r0, r1, d8
 8009524:	f7f6 fe8a 	bl	800023c <__adddf3>
 8009528:	4682      	mov	sl, r0
 800952a:	468b      	mov	fp, r1
 800952c:	e7df      	b.n	80094ee <_strtod_l+0x8de>
 800952e:	4013      	ands	r3, r2
 8009530:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009534:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009538:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800953c:	f04f 3aff 	mov.w	sl, #4294967295
 8009540:	e7d5      	b.n	80094ee <_strtod_l+0x8de>
 8009542:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009544:	ea13 0f0a 	tst.w	r3, sl
 8009548:	e7e0      	b.n	800950c <_strtod_l+0x8fc>
 800954a:	f7ff fb43 	bl	8008bd4 <sulp>
 800954e:	4602      	mov	r2, r0
 8009550:	460b      	mov	r3, r1
 8009552:	ec51 0b18 	vmov	r0, r1, d8
 8009556:	f7f6 fe6f 	bl	8000238 <__aeabi_dsub>
 800955a:	2200      	movs	r2, #0
 800955c:	2300      	movs	r3, #0
 800955e:	4682      	mov	sl, r0
 8009560:	468b      	mov	fp, r1
 8009562:	f7f7 fa89 	bl	8000a78 <__aeabi_dcmpeq>
 8009566:	2800      	cmp	r0, #0
 8009568:	d0c1      	beq.n	80094ee <_strtod_l+0x8de>
 800956a:	e611      	b.n	8009190 <_strtod_l+0x580>
 800956c:	fffffc02 	.word	0xfffffc02
 8009570:	7ff00000 	.word	0x7ff00000
 8009574:	39500000 	.word	0x39500000
 8009578:	000fffff 	.word	0x000fffff
 800957c:	7fefffff 	.word	0x7fefffff
 8009580:	0800c958 	.word	0x0800c958
 8009584:	4631      	mov	r1, r6
 8009586:	4628      	mov	r0, r5
 8009588:	f002 f830 	bl	800b5ec <__ratio>
 800958c:	ec59 8b10 	vmov	r8, r9, d0
 8009590:	ee10 0a10 	vmov	r0, s0
 8009594:	2200      	movs	r2, #0
 8009596:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800959a:	4649      	mov	r1, r9
 800959c:	f7f7 fa80 	bl	8000aa0 <__aeabi_dcmple>
 80095a0:	2800      	cmp	r0, #0
 80095a2:	d07a      	beq.n	800969a <_strtod_l+0xa8a>
 80095a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d04a      	beq.n	8009640 <_strtod_l+0xa30>
 80095aa:	4b95      	ldr	r3, [pc, #596]	; (8009800 <_strtod_l+0xbf0>)
 80095ac:	2200      	movs	r2, #0
 80095ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80095b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009800 <_strtod_l+0xbf0>
 80095b6:	f04f 0800 	mov.w	r8, #0
 80095ba:	4b92      	ldr	r3, [pc, #584]	; (8009804 <_strtod_l+0xbf4>)
 80095bc:	403b      	ands	r3, r7
 80095be:	930d      	str	r3, [sp, #52]	; 0x34
 80095c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095c2:	4b91      	ldr	r3, [pc, #580]	; (8009808 <_strtod_l+0xbf8>)
 80095c4:	429a      	cmp	r2, r3
 80095c6:	f040 80b0 	bne.w	800972a <_strtod_l+0xb1a>
 80095ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80095ce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80095d2:	ec4b ab10 	vmov	d0, sl, fp
 80095d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80095da:	f001 ff2f 	bl	800b43c <__ulp>
 80095de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80095e2:	ec53 2b10 	vmov	r2, r3, d0
 80095e6:	f7f6 ffdf 	bl	80005a8 <__aeabi_dmul>
 80095ea:	4652      	mov	r2, sl
 80095ec:	465b      	mov	r3, fp
 80095ee:	f7f6 fe25 	bl	800023c <__adddf3>
 80095f2:	460b      	mov	r3, r1
 80095f4:	4983      	ldr	r1, [pc, #524]	; (8009804 <_strtod_l+0xbf4>)
 80095f6:	4a85      	ldr	r2, [pc, #532]	; (800980c <_strtod_l+0xbfc>)
 80095f8:	4019      	ands	r1, r3
 80095fa:	4291      	cmp	r1, r2
 80095fc:	4682      	mov	sl, r0
 80095fe:	d960      	bls.n	80096c2 <_strtod_l+0xab2>
 8009600:	ee18 3a90 	vmov	r3, s17
 8009604:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009608:	4293      	cmp	r3, r2
 800960a:	d104      	bne.n	8009616 <_strtod_l+0xa06>
 800960c:	ee18 3a10 	vmov	r3, s16
 8009610:	3301      	adds	r3, #1
 8009612:	f43f ad45 	beq.w	80090a0 <_strtod_l+0x490>
 8009616:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009818 <_strtod_l+0xc08>
 800961a:	f04f 3aff 	mov.w	sl, #4294967295
 800961e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009620:	4620      	mov	r0, r4
 8009622:	f001 fbd9 	bl	800add8 <_Bfree>
 8009626:	9905      	ldr	r1, [sp, #20]
 8009628:	4620      	mov	r0, r4
 800962a:	f001 fbd5 	bl	800add8 <_Bfree>
 800962e:	4631      	mov	r1, r6
 8009630:	4620      	mov	r0, r4
 8009632:	f001 fbd1 	bl	800add8 <_Bfree>
 8009636:	4629      	mov	r1, r5
 8009638:	4620      	mov	r0, r4
 800963a:	f001 fbcd 	bl	800add8 <_Bfree>
 800963e:	e61a      	b.n	8009276 <_strtod_l+0x666>
 8009640:	f1ba 0f00 	cmp.w	sl, #0
 8009644:	d11b      	bne.n	800967e <_strtod_l+0xa6e>
 8009646:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800964a:	b9f3      	cbnz	r3, 800968a <_strtod_l+0xa7a>
 800964c:	4b6c      	ldr	r3, [pc, #432]	; (8009800 <_strtod_l+0xbf0>)
 800964e:	2200      	movs	r2, #0
 8009650:	4640      	mov	r0, r8
 8009652:	4649      	mov	r1, r9
 8009654:	f7f7 fa1a 	bl	8000a8c <__aeabi_dcmplt>
 8009658:	b9d0      	cbnz	r0, 8009690 <_strtod_l+0xa80>
 800965a:	4640      	mov	r0, r8
 800965c:	4649      	mov	r1, r9
 800965e:	4b6c      	ldr	r3, [pc, #432]	; (8009810 <_strtod_l+0xc00>)
 8009660:	2200      	movs	r2, #0
 8009662:	f7f6 ffa1 	bl	80005a8 <__aeabi_dmul>
 8009666:	4680      	mov	r8, r0
 8009668:	4689      	mov	r9, r1
 800966a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800966e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009672:	9315      	str	r3, [sp, #84]	; 0x54
 8009674:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009678:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800967c:	e79d      	b.n	80095ba <_strtod_l+0x9aa>
 800967e:	f1ba 0f01 	cmp.w	sl, #1
 8009682:	d102      	bne.n	800968a <_strtod_l+0xa7a>
 8009684:	2f00      	cmp	r7, #0
 8009686:	f43f ad83 	beq.w	8009190 <_strtod_l+0x580>
 800968a:	4b62      	ldr	r3, [pc, #392]	; (8009814 <_strtod_l+0xc04>)
 800968c:	2200      	movs	r2, #0
 800968e:	e78e      	b.n	80095ae <_strtod_l+0x99e>
 8009690:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009810 <_strtod_l+0xc00>
 8009694:	f04f 0800 	mov.w	r8, #0
 8009698:	e7e7      	b.n	800966a <_strtod_l+0xa5a>
 800969a:	4b5d      	ldr	r3, [pc, #372]	; (8009810 <_strtod_l+0xc00>)
 800969c:	4640      	mov	r0, r8
 800969e:	4649      	mov	r1, r9
 80096a0:	2200      	movs	r2, #0
 80096a2:	f7f6 ff81 	bl	80005a8 <__aeabi_dmul>
 80096a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096a8:	4680      	mov	r8, r0
 80096aa:	4689      	mov	r9, r1
 80096ac:	b933      	cbnz	r3, 80096bc <_strtod_l+0xaac>
 80096ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80096b2:	900e      	str	r0, [sp, #56]	; 0x38
 80096b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80096b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80096ba:	e7dd      	b.n	8009678 <_strtod_l+0xa68>
 80096bc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80096c0:	e7f9      	b.n	80096b6 <_strtod_l+0xaa6>
 80096c2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80096c6:	9b04      	ldr	r3, [sp, #16]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d1a8      	bne.n	800961e <_strtod_l+0xa0e>
 80096cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80096d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096d2:	0d1b      	lsrs	r3, r3, #20
 80096d4:	051b      	lsls	r3, r3, #20
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d1a1      	bne.n	800961e <_strtod_l+0xa0e>
 80096da:	4640      	mov	r0, r8
 80096dc:	4649      	mov	r1, r9
 80096de:	f7f7 faab 	bl	8000c38 <__aeabi_d2lz>
 80096e2:	f7f6 ff33 	bl	800054c <__aeabi_l2d>
 80096e6:	4602      	mov	r2, r0
 80096e8:	460b      	mov	r3, r1
 80096ea:	4640      	mov	r0, r8
 80096ec:	4649      	mov	r1, r9
 80096ee:	f7f6 fda3 	bl	8000238 <__aeabi_dsub>
 80096f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096f8:	ea43 030a 	orr.w	r3, r3, sl
 80096fc:	4313      	orrs	r3, r2
 80096fe:	4680      	mov	r8, r0
 8009700:	4689      	mov	r9, r1
 8009702:	d055      	beq.n	80097b0 <_strtod_l+0xba0>
 8009704:	a336      	add	r3, pc, #216	; (adr r3, 80097e0 <_strtod_l+0xbd0>)
 8009706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970a:	f7f7 f9bf 	bl	8000a8c <__aeabi_dcmplt>
 800970e:	2800      	cmp	r0, #0
 8009710:	f47f acd0 	bne.w	80090b4 <_strtod_l+0x4a4>
 8009714:	a334      	add	r3, pc, #208	; (adr r3, 80097e8 <_strtod_l+0xbd8>)
 8009716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971a:	4640      	mov	r0, r8
 800971c:	4649      	mov	r1, r9
 800971e:	f7f7 f9d3 	bl	8000ac8 <__aeabi_dcmpgt>
 8009722:	2800      	cmp	r0, #0
 8009724:	f43f af7b 	beq.w	800961e <_strtod_l+0xa0e>
 8009728:	e4c4      	b.n	80090b4 <_strtod_l+0x4a4>
 800972a:	9b04      	ldr	r3, [sp, #16]
 800972c:	b333      	cbz	r3, 800977c <_strtod_l+0xb6c>
 800972e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009730:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009734:	d822      	bhi.n	800977c <_strtod_l+0xb6c>
 8009736:	a32e      	add	r3, pc, #184	; (adr r3, 80097f0 <_strtod_l+0xbe0>)
 8009738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973c:	4640      	mov	r0, r8
 800973e:	4649      	mov	r1, r9
 8009740:	f7f7 f9ae 	bl	8000aa0 <__aeabi_dcmple>
 8009744:	b1a0      	cbz	r0, 8009770 <_strtod_l+0xb60>
 8009746:	4649      	mov	r1, r9
 8009748:	4640      	mov	r0, r8
 800974a:	f7f7 fa05 	bl	8000b58 <__aeabi_d2uiz>
 800974e:	2801      	cmp	r0, #1
 8009750:	bf38      	it	cc
 8009752:	2001      	movcc	r0, #1
 8009754:	f7f6 feae 	bl	80004b4 <__aeabi_ui2d>
 8009758:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800975a:	4680      	mov	r8, r0
 800975c:	4689      	mov	r9, r1
 800975e:	bb23      	cbnz	r3, 80097aa <_strtod_l+0xb9a>
 8009760:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009764:	9010      	str	r0, [sp, #64]	; 0x40
 8009766:	9311      	str	r3, [sp, #68]	; 0x44
 8009768:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800976c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009772:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009774:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009778:	1a9b      	subs	r3, r3, r2
 800977a:	9309      	str	r3, [sp, #36]	; 0x24
 800977c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009780:	eeb0 0a48 	vmov.f32	s0, s16
 8009784:	eef0 0a68 	vmov.f32	s1, s17
 8009788:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800978c:	f001 fe56 	bl	800b43c <__ulp>
 8009790:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009794:	ec53 2b10 	vmov	r2, r3, d0
 8009798:	f7f6 ff06 	bl	80005a8 <__aeabi_dmul>
 800979c:	ec53 2b18 	vmov	r2, r3, d8
 80097a0:	f7f6 fd4c 	bl	800023c <__adddf3>
 80097a4:	4682      	mov	sl, r0
 80097a6:	468b      	mov	fp, r1
 80097a8:	e78d      	b.n	80096c6 <_strtod_l+0xab6>
 80097aa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80097ae:	e7db      	b.n	8009768 <_strtod_l+0xb58>
 80097b0:	a311      	add	r3, pc, #68	; (adr r3, 80097f8 <_strtod_l+0xbe8>)
 80097b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b6:	f7f7 f969 	bl	8000a8c <__aeabi_dcmplt>
 80097ba:	e7b2      	b.n	8009722 <_strtod_l+0xb12>
 80097bc:	2300      	movs	r3, #0
 80097be:	930a      	str	r3, [sp, #40]	; 0x28
 80097c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80097c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097c4:	6013      	str	r3, [r2, #0]
 80097c6:	f7ff ba6b 	b.w	8008ca0 <_strtod_l+0x90>
 80097ca:	2a65      	cmp	r2, #101	; 0x65
 80097cc:	f43f ab5f 	beq.w	8008e8e <_strtod_l+0x27e>
 80097d0:	2a45      	cmp	r2, #69	; 0x45
 80097d2:	f43f ab5c 	beq.w	8008e8e <_strtod_l+0x27e>
 80097d6:	2301      	movs	r3, #1
 80097d8:	f7ff bb94 	b.w	8008f04 <_strtod_l+0x2f4>
 80097dc:	f3af 8000 	nop.w
 80097e0:	94a03595 	.word	0x94a03595
 80097e4:	3fdfffff 	.word	0x3fdfffff
 80097e8:	35afe535 	.word	0x35afe535
 80097ec:	3fe00000 	.word	0x3fe00000
 80097f0:	ffc00000 	.word	0xffc00000
 80097f4:	41dfffff 	.word	0x41dfffff
 80097f8:	94a03595 	.word	0x94a03595
 80097fc:	3fcfffff 	.word	0x3fcfffff
 8009800:	3ff00000 	.word	0x3ff00000
 8009804:	7ff00000 	.word	0x7ff00000
 8009808:	7fe00000 	.word	0x7fe00000
 800980c:	7c9fffff 	.word	0x7c9fffff
 8009810:	3fe00000 	.word	0x3fe00000
 8009814:	bff00000 	.word	0xbff00000
 8009818:	7fefffff 	.word	0x7fefffff

0800981c <_strtod_r>:
 800981c:	4b01      	ldr	r3, [pc, #4]	; (8009824 <_strtod_r+0x8>)
 800981e:	f7ff b9f7 	b.w	8008c10 <_strtod_l>
 8009822:	bf00      	nop
 8009824:	20000174 	.word	0x20000174

08009828 <_strtol_l.constprop.0>:
 8009828:	2b01      	cmp	r3, #1
 800982a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800982e:	d001      	beq.n	8009834 <_strtol_l.constprop.0+0xc>
 8009830:	2b24      	cmp	r3, #36	; 0x24
 8009832:	d906      	bls.n	8009842 <_strtol_l.constprop.0+0x1a>
 8009834:	f7fe fad4 	bl	8007de0 <__errno>
 8009838:	2316      	movs	r3, #22
 800983a:	6003      	str	r3, [r0, #0]
 800983c:	2000      	movs	r0, #0
 800983e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009842:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009928 <_strtol_l.constprop.0+0x100>
 8009846:	460d      	mov	r5, r1
 8009848:	462e      	mov	r6, r5
 800984a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800984e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009852:	f017 0708 	ands.w	r7, r7, #8
 8009856:	d1f7      	bne.n	8009848 <_strtol_l.constprop.0+0x20>
 8009858:	2c2d      	cmp	r4, #45	; 0x2d
 800985a:	d132      	bne.n	80098c2 <_strtol_l.constprop.0+0x9a>
 800985c:	782c      	ldrb	r4, [r5, #0]
 800985e:	2701      	movs	r7, #1
 8009860:	1cb5      	adds	r5, r6, #2
 8009862:	2b00      	cmp	r3, #0
 8009864:	d05b      	beq.n	800991e <_strtol_l.constprop.0+0xf6>
 8009866:	2b10      	cmp	r3, #16
 8009868:	d109      	bne.n	800987e <_strtol_l.constprop.0+0x56>
 800986a:	2c30      	cmp	r4, #48	; 0x30
 800986c:	d107      	bne.n	800987e <_strtol_l.constprop.0+0x56>
 800986e:	782c      	ldrb	r4, [r5, #0]
 8009870:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009874:	2c58      	cmp	r4, #88	; 0x58
 8009876:	d14d      	bne.n	8009914 <_strtol_l.constprop.0+0xec>
 8009878:	786c      	ldrb	r4, [r5, #1]
 800987a:	2310      	movs	r3, #16
 800987c:	3502      	adds	r5, #2
 800987e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009882:	f108 38ff 	add.w	r8, r8, #4294967295
 8009886:	f04f 0c00 	mov.w	ip, #0
 800988a:	fbb8 f9f3 	udiv	r9, r8, r3
 800988e:	4666      	mov	r6, ip
 8009890:	fb03 8a19 	mls	sl, r3, r9, r8
 8009894:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009898:	f1be 0f09 	cmp.w	lr, #9
 800989c:	d816      	bhi.n	80098cc <_strtol_l.constprop.0+0xa4>
 800989e:	4674      	mov	r4, lr
 80098a0:	42a3      	cmp	r3, r4
 80098a2:	dd24      	ble.n	80098ee <_strtol_l.constprop.0+0xc6>
 80098a4:	f1bc 0f00 	cmp.w	ip, #0
 80098a8:	db1e      	blt.n	80098e8 <_strtol_l.constprop.0+0xc0>
 80098aa:	45b1      	cmp	r9, r6
 80098ac:	d31c      	bcc.n	80098e8 <_strtol_l.constprop.0+0xc0>
 80098ae:	d101      	bne.n	80098b4 <_strtol_l.constprop.0+0x8c>
 80098b0:	45a2      	cmp	sl, r4
 80098b2:	db19      	blt.n	80098e8 <_strtol_l.constprop.0+0xc0>
 80098b4:	fb06 4603 	mla	r6, r6, r3, r4
 80098b8:	f04f 0c01 	mov.w	ip, #1
 80098bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098c0:	e7e8      	b.n	8009894 <_strtol_l.constprop.0+0x6c>
 80098c2:	2c2b      	cmp	r4, #43	; 0x2b
 80098c4:	bf04      	itt	eq
 80098c6:	782c      	ldrbeq	r4, [r5, #0]
 80098c8:	1cb5      	addeq	r5, r6, #2
 80098ca:	e7ca      	b.n	8009862 <_strtol_l.constprop.0+0x3a>
 80098cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80098d0:	f1be 0f19 	cmp.w	lr, #25
 80098d4:	d801      	bhi.n	80098da <_strtol_l.constprop.0+0xb2>
 80098d6:	3c37      	subs	r4, #55	; 0x37
 80098d8:	e7e2      	b.n	80098a0 <_strtol_l.constprop.0+0x78>
 80098da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80098de:	f1be 0f19 	cmp.w	lr, #25
 80098e2:	d804      	bhi.n	80098ee <_strtol_l.constprop.0+0xc6>
 80098e4:	3c57      	subs	r4, #87	; 0x57
 80098e6:	e7db      	b.n	80098a0 <_strtol_l.constprop.0+0x78>
 80098e8:	f04f 3cff 	mov.w	ip, #4294967295
 80098ec:	e7e6      	b.n	80098bc <_strtol_l.constprop.0+0x94>
 80098ee:	f1bc 0f00 	cmp.w	ip, #0
 80098f2:	da05      	bge.n	8009900 <_strtol_l.constprop.0+0xd8>
 80098f4:	2322      	movs	r3, #34	; 0x22
 80098f6:	6003      	str	r3, [r0, #0]
 80098f8:	4646      	mov	r6, r8
 80098fa:	b942      	cbnz	r2, 800990e <_strtol_l.constprop.0+0xe6>
 80098fc:	4630      	mov	r0, r6
 80098fe:	e79e      	b.n	800983e <_strtol_l.constprop.0+0x16>
 8009900:	b107      	cbz	r7, 8009904 <_strtol_l.constprop.0+0xdc>
 8009902:	4276      	negs	r6, r6
 8009904:	2a00      	cmp	r2, #0
 8009906:	d0f9      	beq.n	80098fc <_strtol_l.constprop.0+0xd4>
 8009908:	f1bc 0f00 	cmp.w	ip, #0
 800990c:	d000      	beq.n	8009910 <_strtol_l.constprop.0+0xe8>
 800990e:	1e69      	subs	r1, r5, #1
 8009910:	6011      	str	r1, [r2, #0]
 8009912:	e7f3      	b.n	80098fc <_strtol_l.constprop.0+0xd4>
 8009914:	2430      	movs	r4, #48	; 0x30
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1b1      	bne.n	800987e <_strtol_l.constprop.0+0x56>
 800991a:	2308      	movs	r3, #8
 800991c:	e7af      	b.n	800987e <_strtol_l.constprop.0+0x56>
 800991e:	2c30      	cmp	r4, #48	; 0x30
 8009920:	d0a5      	beq.n	800986e <_strtol_l.constprop.0+0x46>
 8009922:	230a      	movs	r3, #10
 8009924:	e7ab      	b.n	800987e <_strtol_l.constprop.0+0x56>
 8009926:	bf00      	nop
 8009928:	0800c981 	.word	0x0800c981

0800992c <_strtol_r>:
 800992c:	f7ff bf7c 	b.w	8009828 <_strtol_l.constprop.0>

08009930 <strtol>:
 8009930:	4613      	mov	r3, r2
 8009932:	460a      	mov	r2, r1
 8009934:	4601      	mov	r1, r0
 8009936:	4802      	ldr	r0, [pc, #8]	; (8009940 <strtol+0x10>)
 8009938:	6800      	ldr	r0, [r0, #0]
 800993a:	f7ff bf75 	b.w	8009828 <_strtol_l.constprop.0>
 800993e:	bf00      	nop
 8009940:	2000010c 	.word	0x2000010c

08009944 <quorem>:
 8009944:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009948:	6903      	ldr	r3, [r0, #16]
 800994a:	690c      	ldr	r4, [r1, #16]
 800994c:	42a3      	cmp	r3, r4
 800994e:	4607      	mov	r7, r0
 8009950:	f2c0 8081 	blt.w	8009a56 <quorem+0x112>
 8009954:	3c01      	subs	r4, #1
 8009956:	f101 0814 	add.w	r8, r1, #20
 800995a:	f100 0514 	add.w	r5, r0, #20
 800995e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009962:	9301      	str	r3, [sp, #4]
 8009964:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009968:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800996c:	3301      	adds	r3, #1
 800996e:	429a      	cmp	r2, r3
 8009970:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009974:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009978:	fbb2 f6f3 	udiv	r6, r2, r3
 800997c:	d331      	bcc.n	80099e2 <quorem+0x9e>
 800997e:	f04f 0e00 	mov.w	lr, #0
 8009982:	4640      	mov	r0, r8
 8009984:	46ac      	mov	ip, r5
 8009986:	46f2      	mov	sl, lr
 8009988:	f850 2b04 	ldr.w	r2, [r0], #4
 800998c:	b293      	uxth	r3, r2
 800998e:	fb06 e303 	mla	r3, r6, r3, lr
 8009992:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009996:	b29b      	uxth	r3, r3
 8009998:	ebaa 0303 	sub.w	r3, sl, r3
 800999c:	f8dc a000 	ldr.w	sl, [ip]
 80099a0:	0c12      	lsrs	r2, r2, #16
 80099a2:	fa13 f38a 	uxtah	r3, r3, sl
 80099a6:	fb06 e202 	mla	r2, r6, r2, lr
 80099aa:	9300      	str	r3, [sp, #0]
 80099ac:	9b00      	ldr	r3, [sp, #0]
 80099ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80099b2:	b292      	uxth	r2, r2
 80099b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80099b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80099bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80099c0:	4581      	cmp	r9, r0
 80099c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099c6:	f84c 3b04 	str.w	r3, [ip], #4
 80099ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80099ce:	d2db      	bcs.n	8009988 <quorem+0x44>
 80099d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80099d4:	b92b      	cbnz	r3, 80099e2 <quorem+0x9e>
 80099d6:	9b01      	ldr	r3, [sp, #4]
 80099d8:	3b04      	subs	r3, #4
 80099da:	429d      	cmp	r5, r3
 80099dc:	461a      	mov	r2, r3
 80099de:	d32e      	bcc.n	8009a3e <quorem+0xfa>
 80099e0:	613c      	str	r4, [r7, #16]
 80099e2:	4638      	mov	r0, r7
 80099e4:	f001 fc84 	bl	800b2f0 <__mcmp>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	db24      	blt.n	8009a36 <quorem+0xf2>
 80099ec:	3601      	adds	r6, #1
 80099ee:	4628      	mov	r0, r5
 80099f0:	f04f 0c00 	mov.w	ip, #0
 80099f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80099f8:	f8d0 e000 	ldr.w	lr, [r0]
 80099fc:	b293      	uxth	r3, r2
 80099fe:	ebac 0303 	sub.w	r3, ip, r3
 8009a02:	0c12      	lsrs	r2, r2, #16
 8009a04:	fa13 f38e 	uxtah	r3, r3, lr
 8009a08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009a0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a16:	45c1      	cmp	r9, r8
 8009a18:	f840 3b04 	str.w	r3, [r0], #4
 8009a1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009a20:	d2e8      	bcs.n	80099f4 <quorem+0xb0>
 8009a22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a2a:	b922      	cbnz	r2, 8009a36 <quorem+0xf2>
 8009a2c:	3b04      	subs	r3, #4
 8009a2e:	429d      	cmp	r5, r3
 8009a30:	461a      	mov	r2, r3
 8009a32:	d30a      	bcc.n	8009a4a <quorem+0x106>
 8009a34:	613c      	str	r4, [r7, #16]
 8009a36:	4630      	mov	r0, r6
 8009a38:	b003      	add	sp, #12
 8009a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a3e:	6812      	ldr	r2, [r2, #0]
 8009a40:	3b04      	subs	r3, #4
 8009a42:	2a00      	cmp	r2, #0
 8009a44:	d1cc      	bne.n	80099e0 <quorem+0x9c>
 8009a46:	3c01      	subs	r4, #1
 8009a48:	e7c7      	b.n	80099da <quorem+0x96>
 8009a4a:	6812      	ldr	r2, [r2, #0]
 8009a4c:	3b04      	subs	r3, #4
 8009a4e:	2a00      	cmp	r2, #0
 8009a50:	d1f0      	bne.n	8009a34 <quorem+0xf0>
 8009a52:	3c01      	subs	r4, #1
 8009a54:	e7eb      	b.n	8009a2e <quorem+0xea>
 8009a56:	2000      	movs	r0, #0
 8009a58:	e7ee      	b.n	8009a38 <quorem+0xf4>
 8009a5a:	0000      	movs	r0, r0
 8009a5c:	0000      	movs	r0, r0
	...

08009a60 <_dtoa_r>:
 8009a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a64:	ed2d 8b04 	vpush	{d8-d9}
 8009a68:	ec57 6b10 	vmov	r6, r7, d0
 8009a6c:	b093      	sub	sp, #76	; 0x4c
 8009a6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009a70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009a74:	9106      	str	r1, [sp, #24]
 8009a76:	ee10 aa10 	vmov	sl, s0
 8009a7a:	4604      	mov	r4, r0
 8009a7c:	9209      	str	r2, [sp, #36]	; 0x24
 8009a7e:	930c      	str	r3, [sp, #48]	; 0x30
 8009a80:	46bb      	mov	fp, r7
 8009a82:	b975      	cbnz	r5, 8009aa2 <_dtoa_r+0x42>
 8009a84:	2010      	movs	r0, #16
 8009a86:	f001 f94d 	bl	800ad24 <malloc>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	6260      	str	r0, [r4, #36]	; 0x24
 8009a8e:	b920      	cbnz	r0, 8009a9a <_dtoa_r+0x3a>
 8009a90:	4ba7      	ldr	r3, [pc, #668]	; (8009d30 <_dtoa_r+0x2d0>)
 8009a92:	21ea      	movs	r1, #234	; 0xea
 8009a94:	48a7      	ldr	r0, [pc, #668]	; (8009d34 <_dtoa_r+0x2d4>)
 8009a96:	f002 f8ad 	bl	800bbf4 <__assert_func>
 8009a9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009a9e:	6005      	str	r5, [r0, #0]
 8009aa0:	60c5      	str	r5, [r0, #12]
 8009aa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009aa4:	6819      	ldr	r1, [r3, #0]
 8009aa6:	b151      	cbz	r1, 8009abe <_dtoa_r+0x5e>
 8009aa8:	685a      	ldr	r2, [r3, #4]
 8009aaa:	604a      	str	r2, [r1, #4]
 8009aac:	2301      	movs	r3, #1
 8009aae:	4093      	lsls	r3, r2
 8009ab0:	608b      	str	r3, [r1, #8]
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	f001 f990 	bl	800add8 <_Bfree>
 8009ab8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009aba:	2200      	movs	r2, #0
 8009abc:	601a      	str	r2, [r3, #0]
 8009abe:	1e3b      	subs	r3, r7, #0
 8009ac0:	bfaa      	itet	ge
 8009ac2:	2300      	movge	r3, #0
 8009ac4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009ac8:	f8c8 3000 	strge.w	r3, [r8]
 8009acc:	4b9a      	ldr	r3, [pc, #616]	; (8009d38 <_dtoa_r+0x2d8>)
 8009ace:	bfbc      	itt	lt
 8009ad0:	2201      	movlt	r2, #1
 8009ad2:	f8c8 2000 	strlt.w	r2, [r8]
 8009ad6:	ea33 030b 	bics.w	r3, r3, fp
 8009ada:	d11b      	bne.n	8009b14 <_dtoa_r+0xb4>
 8009adc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ade:	f242 730f 	movw	r3, #9999	; 0x270f
 8009ae2:	6013      	str	r3, [r2, #0]
 8009ae4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ae8:	4333      	orrs	r3, r6
 8009aea:	f000 8592 	beq.w	800a612 <_dtoa_r+0xbb2>
 8009aee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009af0:	b963      	cbnz	r3, 8009b0c <_dtoa_r+0xac>
 8009af2:	4b92      	ldr	r3, [pc, #584]	; (8009d3c <_dtoa_r+0x2dc>)
 8009af4:	e022      	b.n	8009b3c <_dtoa_r+0xdc>
 8009af6:	4b92      	ldr	r3, [pc, #584]	; (8009d40 <_dtoa_r+0x2e0>)
 8009af8:	9301      	str	r3, [sp, #4]
 8009afa:	3308      	adds	r3, #8
 8009afc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009afe:	6013      	str	r3, [r2, #0]
 8009b00:	9801      	ldr	r0, [sp, #4]
 8009b02:	b013      	add	sp, #76	; 0x4c
 8009b04:	ecbd 8b04 	vpop	{d8-d9}
 8009b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b0c:	4b8b      	ldr	r3, [pc, #556]	; (8009d3c <_dtoa_r+0x2dc>)
 8009b0e:	9301      	str	r3, [sp, #4]
 8009b10:	3303      	adds	r3, #3
 8009b12:	e7f3      	b.n	8009afc <_dtoa_r+0x9c>
 8009b14:	2200      	movs	r2, #0
 8009b16:	2300      	movs	r3, #0
 8009b18:	4650      	mov	r0, sl
 8009b1a:	4659      	mov	r1, fp
 8009b1c:	f7f6 ffac 	bl	8000a78 <__aeabi_dcmpeq>
 8009b20:	ec4b ab19 	vmov	d9, sl, fp
 8009b24:	4680      	mov	r8, r0
 8009b26:	b158      	cbz	r0, 8009b40 <_dtoa_r+0xe0>
 8009b28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	6013      	str	r3, [r2, #0]
 8009b2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	f000 856b 	beq.w	800a60c <_dtoa_r+0xbac>
 8009b36:	4883      	ldr	r0, [pc, #524]	; (8009d44 <_dtoa_r+0x2e4>)
 8009b38:	6018      	str	r0, [r3, #0]
 8009b3a:	1e43      	subs	r3, r0, #1
 8009b3c:	9301      	str	r3, [sp, #4]
 8009b3e:	e7df      	b.n	8009b00 <_dtoa_r+0xa0>
 8009b40:	ec4b ab10 	vmov	d0, sl, fp
 8009b44:	aa10      	add	r2, sp, #64	; 0x40
 8009b46:	a911      	add	r1, sp, #68	; 0x44
 8009b48:	4620      	mov	r0, r4
 8009b4a:	f001 fcf3 	bl	800b534 <__d2b>
 8009b4e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009b52:	ee08 0a10 	vmov	s16, r0
 8009b56:	2d00      	cmp	r5, #0
 8009b58:	f000 8084 	beq.w	8009c64 <_dtoa_r+0x204>
 8009b5c:	ee19 3a90 	vmov	r3, s19
 8009b60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b64:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009b68:	4656      	mov	r6, sl
 8009b6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009b6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009b72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009b76:	4b74      	ldr	r3, [pc, #464]	; (8009d48 <_dtoa_r+0x2e8>)
 8009b78:	2200      	movs	r2, #0
 8009b7a:	4630      	mov	r0, r6
 8009b7c:	4639      	mov	r1, r7
 8009b7e:	f7f6 fb5b 	bl	8000238 <__aeabi_dsub>
 8009b82:	a365      	add	r3, pc, #404	; (adr r3, 8009d18 <_dtoa_r+0x2b8>)
 8009b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b88:	f7f6 fd0e 	bl	80005a8 <__aeabi_dmul>
 8009b8c:	a364      	add	r3, pc, #400	; (adr r3, 8009d20 <_dtoa_r+0x2c0>)
 8009b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b92:	f7f6 fb53 	bl	800023c <__adddf3>
 8009b96:	4606      	mov	r6, r0
 8009b98:	4628      	mov	r0, r5
 8009b9a:	460f      	mov	r7, r1
 8009b9c:	f7f6 fc9a 	bl	80004d4 <__aeabi_i2d>
 8009ba0:	a361      	add	r3, pc, #388	; (adr r3, 8009d28 <_dtoa_r+0x2c8>)
 8009ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba6:	f7f6 fcff 	bl	80005a8 <__aeabi_dmul>
 8009baa:	4602      	mov	r2, r0
 8009bac:	460b      	mov	r3, r1
 8009bae:	4630      	mov	r0, r6
 8009bb0:	4639      	mov	r1, r7
 8009bb2:	f7f6 fb43 	bl	800023c <__adddf3>
 8009bb6:	4606      	mov	r6, r0
 8009bb8:	460f      	mov	r7, r1
 8009bba:	f7f6 ffa5 	bl	8000b08 <__aeabi_d2iz>
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	9000      	str	r0, [sp, #0]
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	4639      	mov	r1, r7
 8009bc8:	f7f6 ff60 	bl	8000a8c <__aeabi_dcmplt>
 8009bcc:	b150      	cbz	r0, 8009be4 <_dtoa_r+0x184>
 8009bce:	9800      	ldr	r0, [sp, #0]
 8009bd0:	f7f6 fc80 	bl	80004d4 <__aeabi_i2d>
 8009bd4:	4632      	mov	r2, r6
 8009bd6:	463b      	mov	r3, r7
 8009bd8:	f7f6 ff4e 	bl	8000a78 <__aeabi_dcmpeq>
 8009bdc:	b910      	cbnz	r0, 8009be4 <_dtoa_r+0x184>
 8009bde:	9b00      	ldr	r3, [sp, #0]
 8009be0:	3b01      	subs	r3, #1
 8009be2:	9300      	str	r3, [sp, #0]
 8009be4:	9b00      	ldr	r3, [sp, #0]
 8009be6:	2b16      	cmp	r3, #22
 8009be8:	d85a      	bhi.n	8009ca0 <_dtoa_r+0x240>
 8009bea:	9a00      	ldr	r2, [sp, #0]
 8009bec:	4b57      	ldr	r3, [pc, #348]	; (8009d4c <_dtoa_r+0x2ec>)
 8009bee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf6:	ec51 0b19 	vmov	r0, r1, d9
 8009bfa:	f7f6 ff47 	bl	8000a8c <__aeabi_dcmplt>
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	d050      	beq.n	8009ca4 <_dtoa_r+0x244>
 8009c02:	9b00      	ldr	r3, [sp, #0]
 8009c04:	3b01      	subs	r3, #1
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	2300      	movs	r3, #0
 8009c0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c0e:	1b5d      	subs	r5, r3, r5
 8009c10:	1e6b      	subs	r3, r5, #1
 8009c12:	9305      	str	r3, [sp, #20]
 8009c14:	bf45      	ittet	mi
 8009c16:	f1c5 0301 	rsbmi	r3, r5, #1
 8009c1a:	9304      	strmi	r3, [sp, #16]
 8009c1c:	2300      	movpl	r3, #0
 8009c1e:	2300      	movmi	r3, #0
 8009c20:	bf4c      	ite	mi
 8009c22:	9305      	strmi	r3, [sp, #20]
 8009c24:	9304      	strpl	r3, [sp, #16]
 8009c26:	9b00      	ldr	r3, [sp, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	db3d      	blt.n	8009ca8 <_dtoa_r+0x248>
 8009c2c:	9b05      	ldr	r3, [sp, #20]
 8009c2e:	9a00      	ldr	r2, [sp, #0]
 8009c30:	920a      	str	r2, [sp, #40]	; 0x28
 8009c32:	4413      	add	r3, r2
 8009c34:	9305      	str	r3, [sp, #20]
 8009c36:	2300      	movs	r3, #0
 8009c38:	9307      	str	r3, [sp, #28]
 8009c3a:	9b06      	ldr	r3, [sp, #24]
 8009c3c:	2b09      	cmp	r3, #9
 8009c3e:	f200 8089 	bhi.w	8009d54 <_dtoa_r+0x2f4>
 8009c42:	2b05      	cmp	r3, #5
 8009c44:	bfc4      	itt	gt
 8009c46:	3b04      	subgt	r3, #4
 8009c48:	9306      	strgt	r3, [sp, #24]
 8009c4a:	9b06      	ldr	r3, [sp, #24]
 8009c4c:	f1a3 0302 	sub.w	r3, r3, #2
 8009c50:	bfcc      	ite	gt
 8009c52:	2500      	movgt	r5, #0
 8009c54:	2501      	movle	r5, #1
 8009c56:	2b03      	cmp	r3, #3
 8009c58:	f200 8087 	bhi.w	8009d6a <_dtoa_r+0x30a>
 8009c5c:	e8df f003 	tbb	[pc, r3]
 8009c60:	59383a2d 	.word	0x59383a2d
 8009c64:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009c68:	441d      	add	r5, r3
 8009c6a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009c6e:	2b20      	cmp	r3, #32
 8009c70:	bfc1      	itttt	gt
 8009c72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009c76:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009c7a:	fa0b f303 	lslgt.w	r3, fp, r3
 8009c7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009c82:	bfda      	itte	le
 8009c84:	f1c3 0320 	rsble	r3, r3, #32
 8009c88:	fa06 f003 	lslle.w	r0, r6, r3
 8009c8c:	4318      	orrgt	r0, r3
 8009c8e:	f7f6 fc11 	bl	80004b4 <__aeabi_ui2d>
 8009c92:	2301      	movs	r3, #1
 8009c94:	4606      	mov	r6, r0
 8009c96:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009c9a:	3d01      	subs	r5, #1
 8009c9c:	930e      	str	r3, [sp, #56]	; 0x38
 8009c9e:	e76a      	b.n	8009b76 <_dtoa_r+0x116>
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	e7b2      	b.n	8009c0a <_dtoa_r+0x1aa>
 8009ca4:	900b      	str	r0, [sp, #44]	; 0x2c
 8009ca6:	e7b1      	b.n	8009c0c <_dtoa_r+0x1ac>
 8009ca8:	9b04      	ldr	r3, [sp, #16]
 8009caa:	9a00      	ldr	r2, [sp, #0]
 8009cac:	1a9b      	subs	r3, r3, r2
 8009cae:	9304      	str	r3, [sp, #16]
 8009cb0:	4253      	negs	r3, r2
 8009cb2:	9307      	str	r3, [sp, #28]
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	930a      	str	r3, [sp, #40]	; 0x28
 8009cb8:	e7bf      	b.n	8009c3a <_dtoa_r+0x1da>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	9308      	str	r3, [sp, #32]
 8009cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	dc55      	bgt.n	8009d70 <_dtoa_r+0x310>
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009cca:	461a      	mov	r2, r3
 8009ccc:	9209      	str	r2, [sp, #36]	; 0x24
 8009cce:	e00c      	b.n	8009cea <_dtoa_r+0x28a>
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	e7f3      	b.n	8009cbc <_dtoa_r+0x25c>
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cd8:	9308      	str	r3, [sp, #32]
 8009cda:	9b00      	ldr	r3, [sp, #0]
 8009cdc:	4413      	add	r3, r2
 8009cde:	9302      	str	r3, [sp, #8]
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	9303      	str	r3, [sp, #12]
 8009ce6:	bfb8      	it	lt
 8009ce8:	2301      	movlt	r3, #1
 8009cea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009cec:	2200      	movs	r2, #0
 8009cee:	6042      	str	r2, [r0, #4]
 8009cf0:	2204      	movs	r2, #4
 8009cf2:	f102 0614 	add.w	r6, r2, #20
 8009cf6:	429e      	cmp	r6, r3
 8009cf8:	6841      	ldr	r1, [r0, #4]
 8009cfa:	d93d      	bls.n	8009d78 <_dtoa_r+0x318>
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	f001 f82b 	bl	800ad58 <_Balloc>
 8009d02:	9001      	str	r0, [sp, #4]
 8009d04:	2800      	cmp	r0, #0
 8009d06:	d13b      	bne.n	8009d80 <_dtoa_r+0x320>
 8009d08:	4b11      	ldr	r3, [pc, #68]	; (8009d50 <_dtoa_r+0x2f0>)
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009d10:	e6c0      	b.n	8009a94 <_dtoa_r+0x34>
 8009d12:	2301      	movs	r3, #1
 8009d14:	e7df      	b.n	8009cd6 <_dtoa_r+0x276>
 8009d16:	bf00      	nop
 8009d18:	636f4361 	.word	0x636f4361
 8009d1c:	3fd287a7 	.word	0x3fd287a7
 8009d20:	8b60c8b3 	.word	0x8b60c8b3
 8009d24:	3fc68a28 	.word	0x3fc68a28
 8009d28:	509f79fb 	.word	0x509f79fb
 8009d2c:	3fd34413 	.word	0x3fd34413
 8009d30:	0800ca8e 	.word	0x0800ca8e
 8009d34:	0800caa5 	.word	0x0800caa5
 8009d38:	7ff00000 	.word	0x7ff00000
 8009d3c:	0800ca8a 	.word	0x0800ca8a
 8009d40:	0800ca81 	.word	0x0800ca81
 8009d44:	0800c901 	.word	0x0800c901
 8009d48:	3ff80000 	.word	0x3ff80000
 8009d4c:	0800cc10 	.word	0x0800cc10
 8009d50:	0800cb00 	.word	0x0800cb00
 8009d54:	2501      	movs	r5, #1
 8009d56:	2300      	movs	r3, #0
 8009d58:	9306      	str	r3, [sp, #24]
 8009d5a:	9508      	str	r5, [sp, #32]
 8009d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009d64:	2200      	movs	r2, #0
 8009d66:	2312      	movs	r3, #18
 8009d68:	e7b0      	b.n	8009ccc <_dtoa_r+0x26c>
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	9308      	str	r3, [sp, #32]
 8009d6e:	e7f5      	b.n	8009d5c <_dtoa_r+0x2fc>
 8009d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009d76:	e7b8      	b.n	8009cea <_dtoa_r+0x28a>
 8009d78:	3101      	adds	r1, #1
 8009d7a:	6041      	str	r1, [r0, #4]
 8009d7c:	0052      	lsls	r2, r2, #1
 8009d7e:	e7b8      	b.n	8009cf2 <_dtoa_r+0x292>
 8009d80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d82:	9a01      	ldr	r2, [sp, #4]
 8009d84:	601a      	str	r2, [r3, #0]
 8009d86:	9b03      	ldr	r3, [sp, #12]
 8009d88:	2b0e      	cmp	r3, #14
 8009d8a:	f200 809d 	bhi.w	8009ec8 <_dtoa_r+0x468>
 8009d8e:	2d00      	cmp	r5, #0
 8009d90:	f000 809a 	beq.w	8009ec8 <_dtoa_r+0x468>
 8009d94:	9b00      	ldr	r3, [sp, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	dd32      	ble.n	8009e00 <_dtoa_r+0x3a0>
 8009d9a:	4ab7      	ldr	r2, [pc, #732]	; (800a078 <_dtoa_r+0x618>)
 8009d9c:	f003 030f 	and.w	r3, r3, #15
 8009da0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009da4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009da8:	9b00      	ldr	r3, [sp, #0]
 8009daa:	05d8      	lsls	r0, r3, #23
 8009dac:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009db0:	d516      	bpl.n	8009de0 <_dtoa_r+0x380>
 8009db2:	4bb2      	ldr	r3, [pc, #712]	; (800a07c <_dtoa_r+0x61c>)
 8009db4:	ec51 0b19 	vmov	r0, r1, d9
 8009db8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009dbc:	f7f6 fd1e 	bl	80007fc <__aeabi_ddiv>
 8009dc0:	f007 070f 	and.w	r7, r7, #15
 8009dc4:	4682      	mov	sl, r0
 8009dc6:	468b      	mov	fp, r1
 8009dc8:	2503      	movs	r5, #3
 8009dca:	4eac      	ldr	r6, [pc, #688]	; (800a07c <_dtoa_r+0x61c>)
 8009dcc:	b957      	cbnz	r7, 8009de4 <_dtoa_r+0x384>
 8009dce:	4642      	mov	r2, r8
 8009dd0:	464b      	mov	r3, r9
 8009dd2:	4650      	mov	r0, sl
 8009dd4:	4659      	mov	r1, fp
 8009dd6:	f7f6 fd11 	bl	80007fc <__aeabi_ddiv>
 8009dda:	4682      	mov	sl, r0
 8009ddc:	468b      	mov	fp, r1
 8009dde:	e028      	b.n	8009e32 <_dtoa_r+0x3d2>
 8009de0:	2502      	movs	r5, #2
 8009de2:	e7f2      	b.n	8009dca <_dtoa_r+0x36a>
 8009de4:	07f9      	lsls	r1, r7, #31
 8009de6:	d508      	bpl.n	8009dfa <_dtoa_r+0x39a>
 8009de8:	4640      	mov	r0, r8
 8009dea:	4649      	mov	r1, r9
 8009dec:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009df0:	f7f6 fbda 	bl	80005a8 <__aeabi_dmul>
 8009df4:	3501      	adds	r5, #1
 8009df6:	4680      	mov	r8, r0
 8009df8:	4689      	mov	r9, r1
 8009dfa:	107f      	asrs	r7, r7, #1
 8009dfc:	3608      	adds	r6, #8
 8009dfe:	e7e5      	b.n	8009dcc <_dtoa_r+0x36c>
 8009e00:	f000 809b 	beq.w	8009f3a <_dtoa_r+0x4da>
 8009e04:	9b00      	ldr	r3, [sp, #0]
 8009e06:	4f9d      	ldr	r7, [pc, #628]	; (800a07c <_dtoa_r+0x61c>)
 8009e08:	425e      	negs	r6, r3
 8009e0a:	4b9b      	ldr	r3, [pc, #620]	; (800a078 <_dtoa_r+0x618>)
 8009e0c:	f006 020f 	and.w	r2, r6, #15
 8009e10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e18:	ec51 0b19 	vmov	r0, r1, d9
 8009e1c:	f7f6 fbc4 	bl	80005a8 <__aeabi_dmul>
 8009e20:	1136      	asrs	r6, r6, #4
 8009e22:	4682      	mov	sl, r0
 8009e24:	468b      	mov	fp, r1
 8009e26:	2300      	movs	r3, #0
 8009e28:	2502      	movs	r5, #2
 8009e2a:	2e00      	cmp	r6, #0
 8009e2c:	d17a      	bne.n	8009f24 <_dtoa_r+0x4c4>
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d1d3      	bne.n	8009dda <_dtoa_r+0x37a>
 8009e32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	f000 8082 	beq.w	8009f3e <_dtoa_r+0x4de>
 8009e3a:	4b91      	ldr	r3, [pc, #580]	; (800a080 <_dtoa_r+0x620>)
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	4650      	mov	r0, sl
 8009e40:	4659      	mov	r1, fp
 8009e42:	f7f6 fe23 	bl	8000a8c <__aeabi_dcmplt>
 8009e46:	2800      	cmp	r0, #0
 8009e48:	d079      	beq.n	8009f3e <_dtoa_r+0x4de>
 8009e4a:	9b03      	ldr	r3, [sp, #12]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d076      	beq.n	8009f3e <_dtoa_r+0x4de>
 8009e50:	9b02      	ldr	r3, [sp, #8]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	dd36      	ble.n	8009ec4 <_dtoa_r+0x464>
 8009e56:	9b00      	ldr	r3, [sp, #0]
 8009e58:	4650      	mov	r0, sl
 8009e5a:	4659      	mov	r1, fp
 8009e5c:	1e5f      	subs	r7, r3, #1
 8009e5e:	2200      	movs	r2, #0
 8009e60:	4b88      	ldr	r3, [pc, #544]	; (800a084 <_dtoa_r+0x624>)
 8009e62:	f7f6 fba1 	bl	80005a8 <__aeabi_dmul>
 8009e66:	9e02      	ldr	r6, [sp, #8]
 8009e68:	4682      	mov	sl, r0
 8009e6a:	468b      	mov	fp, r1
 8009e6c:	3501      	adds	r5, #1
 8009e6e:	4628      	mov	r0, r5
 8009e70:	f7f6 fb30 	bl	80004d4 <__aeabi_i2d>
 8009e74:	4652      	mov	r2, sl
 8009e76:	465b      	mov	r3, fp
 8009e78:	f7f6 fb96 	bl	80005a8 <__aeabi_dmul>
 8009e7c:	4b82      	ldr	r3, [pc, #520]	; (800a088 <_dtoa_r+0x628>)
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f7f6 f9dc 	bl	800023c <__adddf3>
 8009e84:	46d0      	mov	r8, sl
 8009e86:	46d9      	mov	r9, fp
 8009e88:	4682      	mov	sl, r0
 8009e8a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009e8e:	2e00      	cmp	r6, #0
 8009e90:	d158      	bne.n	8009f44 <_dtoa_r+0x4e4>
 8009e92:	4b7e      	ldr	r3, [pc, #504]	; (800a08c <_dtoa_r+0x62c>)
 8009e94:	2200      	movs	r2, #0
 8009e96:	4640      	mov	r0, r8
 8009e98:	4649      	mov	r1, r9
 8009e9a:	f7f6 f9cd 	bl	8000238 <__aeabi_dsub>
 8009e9e:	4652      	mov	r2, sl
 8009ea0:	465b      	mov	r3, fp
 8009ea2:	4680      	mov	r8, r0
 8009ea4:	4689      	mov	r9, r1
 8009ea6:	f7f6 fe0f 	bl	8000ac8 <__aeabi_dcmpgt>
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	f040 8295 	bne.w	800a3da <_dtoa_r+0x97a>
 8009eb0:	4652      	mov	r2, sl
 8009eb2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009eb6:	4640      	mov	r0, r8
 8009eb8:	4649      	mov	r1, r9
 8009eba:	f7f6 fde7 	bl	8000a8c <__aeabi_dcmplt>
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	f040 8289 	bne.w	800a3d6 <_dtoa_r+0x976>
 8009ec4:	ec5b ab19 	vmov	sl, fp, d9
 8009ec8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	f2c0 8148 	blt.w	800a160 <_dtoa_r+0x700>
 8009ed0:	9a00      	ldr	r2, [sp, #0]
 8009ed2:	2a0e      	cmp	r2, #14
 8009ed4:	f300 8144 	bgt.w	800a160 <_dtoa_r+0x700>
 8009ed8:	4b67      	ldr	r3, [pc, #412]	; (800a078 <_dtoa_r+0x618>)
 8009eda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ede:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	f280 80d5 	bge.w	800a094 <_dtoa_r+0x634>
 8009eea:	9b03      	ldr	r3, [sp, #12]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f300 80d1 	bgt.w	800a094 <_dtoa_r+0x634>
 8009ef2:	f040 826f 	bne.w	800a3d4 <_dtoa_r+0x974>
 8009ef6:	4b65      	ldr	r3, [pc, #404]	; (800a08c <_dtoa_r+0x62c>)
 8009ef8:	2200      	movs	r2, #0
 8009efa:	4640      	mov	r0, r8
 8009efc:	4649      	mov	r1, r9
 8009efe:	f7f6 fb53 	bl	80005a8 <__aeabi_dmul>
 8009f02:	4652      	mov	r2, sl
 8009f04:	465b      	mov	r3, fp
 8009f06:	f7f6 fdd5 	bl	8000ab4 <__aeabi_dcmpge>
 8009f0a:	9e03      	ldr	r6, [sp, #12]
 8009f0c:	4637      	mov	r7, r6
 8009f0e:	2800      	cmp	r0, #0
 8009f10:	f040 8245 	bne.w	800a39e <_dtoa_r+0x93e>
 8009f14:	9d01      	ldr	r5, [sp, #4]
 8009f16:	2331      	movs	r3, #49	; 0x31
 8009f18:	f805 3b01 	strb.w	r3, [r5], #1
 8009f1c:	9b00      	ldr	r3, [sp, #0]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	9300      	str	r3, [sp, #0]
 8009f22:	e240      	b.n	800a3a6 <_dtoa_r+0x946>
 8009f24:	07f2      	lsls	r2, r6, #31
 8009f26:	d505      	bpl.n	8009f34 <_dtoa_r+0x4d4>
 8009f28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f2c:	f7f6 fb3c 	bl	80005a8 <__aeabi_dmul>
 8009f30:	3501      	adds	r5, #1
 8009f32:	2301      	movs	r3, #1
 8009f34:	1076      	asrs	r6, r6, #1
 8009f36:	3708      	adds	r7, #8
 8009f38:	e777      	b.n	8009e2a <_dtoa_r+0x3ca>
 8009f3a:	2502      	movs	r5, #2
 8009f3c:	e779      	b.n	8009e32 <_dtoa_r+0x3d2>
 8009f3e:	9f00      	ldr	r7, [sp, #0]
 8009f40:	9e03      	ldr	r6, [sp, #12]
 8009f42:	e794      	b.n	8009e6e <_dtoa_r+0x40e>
 8009f44:	9901      	ldr	r1, [sp, #4]
 8009f46:	4b4c      	ldr	r3, [pc, #304]	; (800a078 <_dtoa_r+0x618>)
 8009f48:	4431      	add	r1, r6
 8009f4a:	910d      	str	r1, [sp, #52]	; 0x34
 8009f4c:	9908      	ldr	r1, [sp, #32]
 8009f4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009f52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f56:	2900      	cmp	r1, #0
 8009f58:	d043      	beq.n	8009fe2 <_dtoa_r+0x582>
 8009f5a:	494d      	ldr	r1, [pc, #308]	; (800a090 <_dtoa_r+0x630>)
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	f7f6 fc4d 	bl	80007fc <__aeabi_ddiv>
 8009f62:	4652      	mov	r2, sl
 8009f64:	465b      	mov	r3, fp
 8009f66:	f7f6 f967 	bl	8000238 <__aeabi_dsub>
 8009f6a:	9d01      	ldr	r5, [sp, #4]
 8009f6c:	4682      	mov	sl, r0
 8009f6e:	468b      	mov	fp, r1
 8009f70:	4649      	mov	r1, r9
 8009f72:	4640      	mov	r0, r8
 8009f74:	f7f6 fdc8 	bl	8000b08 <__aeabi_d2iz>
 8009f78:	4606      	mov	r6, r0
 8009f7a:	f7f6 faab 	bl	80004d4 <__aeabi_i2d>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	460b      	mov	r3, r1
 8009f82:	4640      	mov	r0, r8
 8009f84:	4649      	mov	r1, r9
 8009f86:	f7f6 f957 	bl	8000238 <__aeabi_dsub>
 8009f8a:	3630      	adds	r6, #48	; 0x30
 8009f8c:	f805 6b01 	strb.w	r6, [r5], #1
 8009f90:	4652      	mov	r2, sl
 8009f92:	465b      	mov	r3, fp
 8009f94:	4680      	mov	r8, r0
 8009f96:	4689      	mov	r9, r1
 8009f98:	f7f6 fd78 	bl	8000a8c <__aeabi_dcmplt>
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	d163      	bne.n	800a068 <_dtoa_r+0x608>
 8009fa0:	4642      	mov	r2, r8
 8009fa2:	464b      	mov	r3, r9
 8009fa4:	4936      	ldr	r1, [pc, #216]	; (800a080 <_dtoa_r+0x620>)
 8009fa6:	2000      	movs	r0, #0
 8009fa8:	f7f6 f946 	bl	8000238 <__aeabi_dsub>
 8009fac:	4652      	mov	r2, sl
 8009fae:	465b      	mov	r3, fp
 8009fb0:	f7f6 fd6c 	bl	8000a8c <__aeabi_dcmplt>
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	f040 80b5 	bne.w	800a124 <_dtoa_r+0x6c4>
 8009fba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fbc:	429d      	cmp	r5, r3
 8009fbe:	d081      	beq.n	8009ec4 <_dtoa_r+0x464>
 8009fc0:	4b30      	ldr	r3, [pc, #192]	; (800a084 <_dtoa_r+0x624>)
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	4650      	mov	r0, sl
 8009fc6:	4659      	mov	r1, fp
 8009fc8:	f7f6 faee 	bl	80005a8 <__aeabi_dmul>
 8009fcc:	4b2d      	ldr	r3, [pc, #180]	; (800a084 <_dtoa_r+0x624>)
 8009fce:	4682      	mov	sl, r0
 8009fd0:	468b      	mov	fp, r1
 8009fd2:	4640      	mov	r0, r8
 8009fd4:	4649      	mov	r1, r9
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f7f6 fae6 	bl	80005a8 <__aeabi_dmul>
 8009fdc:	4680      	mov	r8, r0
 8009fde:	4689      	mov	r9, r1
 8009fe0:	e7c6      	b.n	8009f70 <_dtoa_r+0x510>
 8009fe2:	4650      	mov	r0, sl
 8009fe4:	4659      	mov	r1, fp
 8009fe6:	f7f6 fadf 	bl	80005a8 <__aeabi_dmul>
 8009fea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fec:	9d01      	ldr	r5, [sp, #4]
 8009fee:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ff0:	4682      	mov	sl, r0
 8009ff2:	468b      	mov	fp, r1
 8009ff4:	4649      	mov	r1, r9
 8009ff6:	4640      	mov	r0, r8
 8009ff8:	f7f6 fd86 	bl	8000b08 <__aeabi_d2iz>
 8009ffc:	4606      	mov	r6, r0
 8009ffe:	f7f6 fa69 	bl	80004d4 <__aeabi_i2d>
 800a002:	3630      	adds	r6, #48	; 0x30
 800a004:	4602      	mov	r2, r0
 800a006:	460b      	mov	r3, r1
 800a008:	4640      	mov	r0, r8
 800a00a:	4649      	mov	r1, r9
 800a00c:	f7f6 f914 	bl	8000238 <__aeabi_dsub>
 800a010:	f805 6b01 	strb.w	r6, [r5], #1
 800a014:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a016:	429d      	cmp	r5, r3
 800a018:	4680      	mov	r8, r0
 800a01a:	4689      	mov	r9, r1
 800a01c:	f04f 0200 	mov.w	r2, #0
 800a020:	d124      	bne.n	800a06c <_dtoa_r+0x60c>
 800a022:	4b1b      	ldr	r3, [pc, #108]	; (800a090 <_dtoa_r+0x630>)
 800a024:	4650      	mov	r0, sl
 800a026:	4659      	mov	r1, fp
 800a028:	f7f6 f908 	bl	800023c <__adddf3>
 800a02c:	4602      	mov	r2, r0
 800a02e:	460b      	mov	r3, r1
 800a030:	4640      	mov	r0, r8
 800a032:	4649      	mov	r1, r9
 800a034:	f7f6 fd48 	bl	8000ac8 <__aeabi_dcmpgt>
 800a038:	2800      	cmp	r0, #0
 800a03a:	d173      	bne.n	800a124 <_dtoa_r+0x6c4>
 800a03c:	4652      	mov	r2, sl
 800a03e:	465b      	mov	r3, fp
 800a040:	4913      	ldr	r1, [pc, #76]	; (800a090 <_dtoa_r+0x630>)
 800a042:	2000      	movs	r0, #0
 800a044:	f7f6 f8f8 	bl	8000238 <__aeabi_dsub>
 800a048:	4602      	mov	r2, r0
 800a04a:	460b      	mov	r3, r1
 800a04c:	4640      	mov	r0, r8
 800a04e:	4649      	mov	r1, r9
 800a050:	f7f6 fd1c 	bl	8000a8c <__aeabi_dcmplt>
 800a054:	2800      	cmp	r0, #0
 800a056:	f43f af35 	beq.w	8009ec4 <_dtoa_r+0x464>
 800a05a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a05c:	1e6b      	subs	r3, r5, #1
 800a05e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a060:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a064:	2b30      	cmp	r3, #48	; 0x30
 800a066:	d0f8      	beq.n	800a05a <_dtoa_r+0x5fa>
 800a068:	9700      	str	r7, [sp, #0]
 800a06a:	e049      	b.n	800a100 <_dtoa_r+0x6a0>
 800a06c:	4b05      	ldr	r3, [pc, #20]	; (800a084 <_dtoa_r+0x624>)
 800a06e:	f7f6 fa9b 	bl	80005a8 <__aeabi_dmul>
 800a072:	4680      	mov	r8, r0
 800a074:	4689      	mov	r9, r1
 800a076:	e7bd      	b.n	8009ff4 <_dtoa_r+0x594>
 800a078:	0800cc10 	.word	0x0800cc10
 800a07c:	0800cbe8 	.word	0x0800cbe8
 800a080:	3ff00000 	.word	0x3ff00000
 800a084:	40240000 	.word	0x40240000
 800a088:	401c0000 	.word	0x401c0000
 800a08c:	40140000 	.word	0x40140000
 800a090:	3fe00000 	.word	0x3fe00000
 800a094:	9d01      	ldr	r5, [sp, #4]
 800a096:	4656      	mov	r6, sl
 800a098:	465f      	mov	r7, fp
 800a09a:	4642      	mov	r2, r8
 800a09c:	464b      	mov	r3, r9
 800a09e:	4630      	mov	r0, r6
 800a0a0:	4639      	mov	r1, r7
 800a0a2:	f7f6 fbab 	bl	80007fc <__aeabi_ddiv>
 800a0a6:	f7f6 fd2f 	bl	8000b08 <__aeabi_d2iz>
 800a0aa:	4682      	mov	sl, r0
 800a0ac:	f7f6 fa12 	bl	80004d4 <__aeabi_i2d>
 800a0b0:	4642      	mov	r2, r8
 800a0b2:	464b      	mov	r3, r9
 800a0b4:	f7f6 fa78 	bl	80005a8 <__aeabi_dmul>
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	4630      	mov	r0, r6
 800a0be:	4639      	mov	r1, r7
 800a0c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a0c4:	f7f6 f8b8 	bl	8000238 <__aeabi_dsub>
 800a0c8:	f805 6b01 	strb.w	r6, [r5], #1
 800a0cc:	9e01      	ldr	r6, [sp, #4]
 800a0ce:	9f03      	ldr	r7, [sp, #12]
 800a0d0:	1bae      	subs	r6, r5, r6
 800a0d2:	42b7      	cmp	r7, r6
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	d135      	bne.n	800a146 <_dtoa_r+0x6e6>
 800a0da:	f7f6 f8af 	bl	800023c <__adddf3>
 800a0de:	4642      	mov	r2, r8
 800a0e0:	464b      	mov	r3, r9
 800a0e2:	4606      	mov	r6, r0
 800a0e4:	460f      	mov	r7, r1
 800a0e6:	f7f6 fcef 	bl	8000ac8 <__aeabi_dcmpgt>
 800a0ea:	b9d0      	cbnz	r0, 800a122 <_dtoa_r+0x6c2>
 800a0ec:	4642      	mov	r2, r8
 800a0ee:	464b      	mov	r3, r9
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	4639      	mov	r1, r7
 800a0f4:	f7f6 fcc0 	bl	8000a78 <__aeabi_dcmpeq>
 800a0f8:	b110      	cbz	r0, 800a100 <_dtoa_r+0x6a0>
 800a0fa:	f01a 0f01 	tst.w	sl, #1
 800a0fe:	d110      	bne.n	800a122 <_dtoa_r+0x6c2>
 800a100:	4620      	mov	r0, r4
 800a102:	ee18 1a10 	vmov	r1, s16
 800a106:	f000 fe67 	bl	800add8 <_Bfree>
 800a10a:	2300      	movs	r3, #0
 800a10c:	9800      	ldr	r0, [sp, #0]
 800a10e:	702b      	strb	r3, [r5, #0]
 800a110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a112:	3001      	adds	r0, #1
 800a114:	6018      	str	r0, [r3, #0]
 800a116:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a118:	2b00      	cmp	r3, #0
 800a11a:	f43f acf1 	beq.w	8009b00 <_dtoa_r+0xa0>
 800a11e:	601d      	str	r5, [r3, #0]
 800a120:	e4ee      	b.n	8009b00 <_dtoa_r+0xa0>
 800a122:	9f00      	ldr	r7, [sp, #0]
 800a124:	462b      	mov	r3, r5
 800a126:	461d      	mov	r5, r3
 800a128:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a12c:	2a39      	cmp	r2, #57	; 0x39
 800a12e:	d106      	bne.n	800a13e <_dtoa_r+0x6de>
 800a130:	9a01      	ldr	r2, [sp, #4]
 800a132:	429a      	cmp	r2, r3
 800a134:	d1f7      	bne.n	800a126 <_dtoa_r+0x6c6>
 800a136:	9901      	ldr	r1, [sp, #4]
 800a138:	2230      	movs	r2, #48	; 0x30
 800a13a:	3701      	adds	r7, #1
 800a13c:	700a      	strb	r2, [r1, #0]
 800a13e:	781a      	ldrb	r2, [r3, #0]
 800a140:	3201      	adds	r2, #1
 800a142:	701a      	strb	r2, [r3, #0]
 800a144:	e790      	b.n	800a068 <_dtoa_r+0x608>
 800a146:	4ba6      	ldr	r3, [pc, #664]	; (800a3e0 <_dtoa_r+0x980>)
 800a148:	2200      	movs	r2, #0
 800a14a:	f7f6 fa2d 	bl	80005a8 <__aeabi_dmul>
 800a14e:	2200      	movs	r2, #0
 800a150:	2300      	movs	r3, #0
 800a152:	4606      	mov	r6, r0
 800a154:	460f      	mov	r7, r1
 800a156:	f7f6 fc8f 	bl	8000a78 <__aeabi_dcmpeq>
 800a15a:	2800      	cmp	r0, #0
 800a15c:	d09d      	beq.n	800a09a <_dtoa_r+0x63a>
 800a15e:	e7cf      	b.n	800a100 <_dtoa_r+0x6a0>
 800a160:	9a08      	ldr	r2, [sp, #32]
 800a162:	2a00      	cmp	r2, #0
 800a164:	f000 80d7 	beq.w	800a316 <_dtoa_r+0x8b6>
 800a168:	9a06      	ldr	r2, [sp, #24]
 800a16a:	2a01      	cmp	r2, #1
 800a16c:	f300 80ba 	bgt.w	800a2e4 <_dtoa_r+0x884>
 800a170:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a172:	2a00      	cmp	r2, #0
 800a174:	f000 80b2 	beq.w	800a2dc <_dtoa_r+0x87c>
 800a178:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a17c:	9e07      	ldr	r6, [sp, #28]
 800a17e:	9d04      	ldr	r5, [sp, #16]
 800a180:	9a04      	ldr	r2, [sp, #16]
 800a182:	441a      	add	r2, r3
 800a184:	9204      	str	r2, [sp, #16]
 800a186:	9a05      	ldr	r2, [sp, #20]
 800a188:	2101      	movs	r1, #1
 800a18a:	441a      	add	r2, r3
 800a18c:	4620      	mov	r0, r4
 800a18e:	9205      	str	r2, [sp, #20]
 800a190:	f000 ff24 	bl	800afdc <__i2b>
 800a194:	4607      	mov	r7, r0
 800a196:	2d00      	cmp	r5, #0
 800a198:	dd0c      	ble.n	800a1b4 <_dtoa_r+0x754>
 800a19a:	9b05      	ldr	r3, [sp, #20]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	dd09      	ble.n	800a1b4 <_dtoa_r+0x754>
 800a1a0:	42ab      	cmp	r3, r5
 800a1a2:	9a04      	ldr	r2, [sp, #16]
 800a1a4:	bfa8      	it	ge
 800a1a6:	462b      	movge	r3, r5
 800a1a8:	1ad2      	subs	r2, r2, r3
 800a1aa:	9204      	str	r2, [sp, #16]
 800a1ac:	9a05      	ldr	r2, [sp, #20]
 800a1ae:	1aed      	subs	r5, r5, r3
 800a1b0:	1ad3      	subs	r3, r2, r3
 800a1b2:	9305      	str	r3, [sp, #20]
 800a1b4:	9b07      	ldr	r3, [sp, #28]
 800a1b6:	b31b      	cbz	r3, 800a200 <_dtoa_r+0x7a0>
 800a1b8:	9b08      	ldr	r3, [sp, #32]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f000 80af 	beq.w	800a31e <_dtoa_r+0x8be>
 800a1c0:	2e00      	cmp	r6, #0
 800a1c2:	dd13      	ble.n	800a1ec <_dtoa_r+0x78c>
 800a1c4:	4639      	mov	r1, r7
 800a1c6:	4632      	mov	r2, r6
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	f000 ffc7 	bl	800b15c <__pow5mult>
 800a1ce:	ee18 2a10 	vmov	r2, s16
 800a1d2:	4601      	mov	r1, r0
 800a1d4:	4607      	mov	r7, r0
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	f000 ff16 	bl	800b008 <__multiply>
 800a1dc:	ee18 1a10 	vmov	r1, s16
 800a1e0:	4680      	mov	r8, r0
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	f000 fdf8 	bl	800add8 <_Bfree>
 800a1e8:	ee08 8a10 	vmov	s16, r8
 800a1ec:	9b07      	ldr	r3, [sp, #28]
 800a1ee:	1b9a      	subs	r2, r3, r6
 800a1f0:	d006      	beq.n	800a200 <_dtoa_r+0x7a0>
 800a1f2:	ee18 1a10 	vmov	r1, s16
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	f000 ffb0 	bl	800b15c <__pow5mult>
 800a1fc:	ee08 0a10 	vmov	s16, r0
 800a200:	2101      	movs	r1, #1
 800a202:	4620      	mov	r0, r4
 800a204:	f000 feea 	bl	800afdc <__i2b>
 800a208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	4606      	mov	r6, r0
 800a20e:	f340 8088 	ble.w	800a322 <_dtoa_r+0x8c2>
 800a212:	461a      	mov	r2, r3
 800a214:	4601      	mov	r1, r0
 800a216:	4620      	mov	r0, r4
 800a218:	f000 ffa0 	bl	800b15c <__pow5mult>
 800a21c:	9b06      	ldr	r3, [sp, #24]
 800a21e:	2b01      	cmp	r3, #1
 800a220:	4606      	mov	r6, r0
 800a222:	f340 8081 	ble.w	800a328 <_dtoa_r+0x8c8>
 800a226:	f04f 0800 	mov.w	r8, #0
 800a22a:	6933      	ldr	r3, [r6, #16]
 800a22c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a230:	6918      	ldr	r0, [r3, #16]
 800a232:	f000 fe83 	bl	800af3c <__hi0bits>
 800a236:	f1c0 0020 	rsb	r0, r0, #32
 800a23a:	9b05      	ldr	r3, [sp, #20]
 800a23c:	4418      	add	r0, r3
 800a23e:	f010 001f 	ands.w	r0, r0, #31
 800a242:	f000 8092 	beq.w	800a36a <_dtoa_r+0x90a>
 800a246:	f1c0 0320 	rsb	r3, r0, #32
 800a24a:	2b04      	cmp	r3, #4
 800a24c:	f340 808a 	ble.w	800a364 <_dtoa_r+0x904>
 800a250:	f1c0 001c 	rsb	r0, r0, #28
 800a254:	9b04      	ldr	r3, [sp, #16]
 800a256:	4403      	add	r3, r0
 800a258:	9304      	str	r3, [sp, #16]
 800a25a:	9b05      	ldr	r3, [sp, #20]
 800a25c:	4403      	add	r3, r0
 800a25e:	4405      	add	r5, r0
 800a260:	9305      	str	r3, [sp, #20]
 800a262:	9b04      	ldr	r3, [sp, #16]
 800a264:	2b00      	cmp	r3, #0
 800a266:	dd07      	ble.n	800a278 <_dtoa_r+0x818>
 800a268:	ee18 1a10 	vmov	r1, s16
 800a26c:	461a      	mov	r2, r3
 800a26e:	4620      	mov	r0, r4
 800a270:	f000 ffce 	bl	800b210 <__lshift>
 800a274:	ee08 0a10 	vmov	s16, r0
 800a278:	9b05      	ldr	r3, [sp, #20]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	dd05      	ble.n	800a28a <_dtoa_r+0x82a>
 800a27e:	4631      	mov	r1, r6
 800a280:	461a      	mov	r2, r3
 800a282:	4620      	mov	r0, r4
 800a284:	f000 ffc4 	bl	800b210 <__lshift>
 800a288:	4606      	mov	r6, r0
 800a28a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d06e      	beq.n	800a36e <_dtoa_r+0x90e>
 800a290:	ee18 0a10 	vmov	r0, s16
 800a294:	4631      	mov	r1, r6
 800a296:	f001 f82b 	bl	800b2f0 <__mcmp>
 800a29a:	2800      	cmp	r0, #0
 800a29c:	da67      	bge.n	800a36e <_dtoa_r+0x90e>
 800a29e:	9b00      	ldr	r3, [sp, #0]
 800a2a0:	3b01      	subs	r3, #1
 800a2a2:	ee18 1a10 	vmov	r1, s16
 800a2a6:	9300      	str	r3, [sp, #0]
 800a2a8:	220a      	movs	r2, #10
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	4620      	mov	r0, r4
 800a2ae:	f000 fdb5 	bl	800ae1c <__multadd>
 800a2b2:	9b08      	ldr	r3, [sp, #32]
 800a2b4:	ee08 0a10 	vmov	s16, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	f000 81b1 	beq.w	800a620 <_dtoa_r+0xbc0>
 800a2be:	2300      	movs	r3, #0
 800a2c0:	4639      	mov	r1, r7
 800a2c2:	220a      	movs	r2, #10
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	f000 fda9 	bl	800ae1c <__multadd>
 800a2ca:	9b02      	ldr	r3, [sp, #8]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	4607      	mov	r7, r0
 800a2d0:	f300 808e 	bgt.w	800a3f0 <_dtoa_r+0x990>
 800a2d4:	9b06      	ldr	r3, [sp, #24]
 800a2d6:	2b02      	cmp	r3, #2
 800a2d8:	dc51      	bgt.n	800a37e <_dtoa_r+0x91e>
 800a2da:	e089      	b.n	800a3f0 <_dtoa_r+0x990>
 800a2dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a2de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a2e2:	e74b      	b.n	800a17c <_dtoa_r+0x71c>
 800a2e4:	9b03      	ldr	r3, [sp, #12]
 800a2e6:	1e5e      	subs	r6, r3, #1
 800a2e8:	9b07      	ldr	r3, [sp, #28]
 800a2ea:	42b3      	cmp	r3, r6
 800a2ec:	bfbf      	itttt	lt
 800a2ee:	9b07      	ldrlt	r3, [sp, #28]
 800a2f0:	9607      	strlt	r6, [sp, #28]
 800a2f2:	1af2      	sublt	r2, r6, r3
 800a2f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a2f6:	bfb6      	itet	lt
 800a2f8:	189b      	addlt	r3, r3, r2
 800a2fa:	1b9e      	subge	r6, r3, r6
 800a2fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a2fe:	9b03      	ldr	r3, [sp, #12]
 800a300:	bfb8      	it	lt
 800a302:	2600      	movlt	r6, #0
 800a304:	2b00      	cmp	r3, #0
 800a306:	bfb7      	itett	lt
 800a308:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a30c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a310:	1a9d      	sublt	r5, r3, r2
 800a312:	2300      	movlt	r3, #0
 800a314:	e734      	b.n	800a180 <_dtoa_r+0x720>
 800a316:	9e07      	ldr	r6, [sp, #28]
 800a318:	9d04      	ldr	r5, [sp, #16]
 800a31a:	9f08      	ldr	r7, [sp, #32]
 800a31c:	e73b      	b.n	800a196 <_dtoa_r+0x736>
 800a31e:	9a07      	ldr	r2, [sp, #28]
 800a320:	e767      	b.n	800a1f2 <_dtoa_r+0x792>
 800a322:	9b06      	ldr	r3, [sp, #24]
 800a324:	2b01      	cmp	r3, #1
 800a326:	dc18      	bgt.n	800a35a <_dtoa_r+0x8fa>
 800a328:	f1ba 0f00 	cmp.w	sl, #0
 800a32c:	d115      	bne.n	800a35a <_dtoa_r+0x8fa>
 800a32e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a332:	b993      	cbnz	r3, 800a35a <_dtoa_r+0x8fa>
 800a334:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a338:	0d1b      	lsrs	r3, r3, #20
 800a33a:	051b      	lsls	r3, r3, #20
 800a33c:	b183      	cbz	r3, 800a360 <_dtoa_r+0x900>
 800a33e:	9b04      	ldr	r3, [sp, #16]
 800a340:	3301      	adds	r3, #1
 800a342:	9304      	str	r3, [sp, #16]
 800a344:	9b05      	ldr	r3, [sp, #20]
 800a346:	3301      	adds	r3, #1
 800a348:	9305      	str	r3, [sp, #20]
 800a34a:	f04f 0801 	mov.w	r8, #1
 800a34e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a350:	2b00      	cmp	r3, #0
 800a352:	f47f af6a 	bne.w	800a22a <_dtoa_r+0x7ca>
 800a356:	2001      	movs	r0, #1
 800a358:	e76f      	b.n	800a23a <_dtoa_r+0x7da>
 800a35a:	f04f 0800 	mov.w	r8, #0
 800a35e:	e7f6      	b.n	800a34e <_dtoa_r+0x8ee>
 800a360:	4698      	mov	r8, r3
 800a362:	e7f4      	b.n	800a34e <_dtoa_r+0x8ee>
 800a364:	f43f af7d 	beq.w	800a262 <_dtoa_r+0x802>
 800a368:	4618      	mov	r0, r3
 800a36a:	301c      	adds	r0, #28
 800a36c:	e772      	b.n	800a254 <_dtoa_r+0x7f4>
 800a36e:	9b03      	ldr	r3, [sp, #12]
 800a370:	2b00      	cmp	r3, #0
 800a372:	dc37      	bgt.n	800a3e4 <_dtoa_r+0x984>
 800a374:	9b06      	ldr	r3, [sp, #24]
 800a376:	2b02      	cmp	r3, #2
 800a378:	dd34      	ble.n	800a3e4 <_dtoa_r+0x984>
 800a37a:	9b03      	ldr	r3, [sp, #12]
 800a37c:	9302      	str	r3, [sp, #8]
 800a37e:	9b02      	ldr	r3, [sp, #8]
 800a380:	b96b      	cbnz	r3, 800a39e <_dtoa_r+0x93e>
 800a382:	4631      	mov	r1, r6
 800a384:	2205      	movs	r2, #5
 800a386:	4620      	mov	r0, r4
 800a388:	f000 fd48 	bl	800ae1c <__multadd>
 800a38c:	4601      	mov	r1, r0
 800a38e:	4606      	mov	r6, r0
 800a390:	ee18 0a10 	vmov	r0, s16
 800a394:	f000 ffac 	bl	800b2f0 <__mcmp>
 800a398:	2800      	cmp	r0, #0
 800a39a:	f73f adbb 	bgt.w	8009f14 <_dtoa_r+0x4b4>
 800a39e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3a0:	9d01      	ldr	r5, [sp, #4]
 800a3a2:	43db      	mvns	r3, r3
 800a3a4:	9300      	str	r3, [sp, #0]
 800a3a6:	f04f 0800 	mov.w	r8, #0
 800a3aa:	4631      	mov	r1, r6
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	f000 fd13 	bl	800add8 <_Bfree>
 800a3b2:	2f00      	cmp	r7, #0
 800a3b4:	f43f aea4 	beq.w	800a100 <_dtoa_r+0x6a0>
 800a3b8:	f1b8 0f00 	cmp.w	r8, #0
 800a3bc:	d005      	beq.n	800a3ca <_dtoa_r+0x96a>
 800a3be:	45b8      	cmp	r8, r7
 800a3c0:	d003      	beq.n	800a3ca <_dtoa_r+0x96a>
 800a3c2:	4641      	mov	r1, r8
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	f000 fd07 	bl	800add8 <_Bfree>
 800a3ca:	4639      	mov	r1, r7
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	f000 fd03 	bl	800add8 <_Bfree>
 800a3d2:	e695      	b.n	800a100 <_dtoa_r+0x6a0>
 800a3d4:	2600      	movs	r6, #0
 800a3d6:	4637      	mov	r7, r6
 800a3d8:	e7e1      	b.n	800a39e <_dtoa_r+0x93e>
 800a3da:	9700      	str	r7, [sp, #0]
 800a3dc:	4637      	mov	r7, r6
 800a3de:	e599      	b.n	8009f14 <_dtoa_r+0x4b4>
 800a3e0:	40240000 	.word	0x40240000
 800a3e4:	9b08      	ldr	r3, [sp, #32]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	f000 80ca 	beq.w	800a580 <_dtoa_r+0xb20>
 800a3ec:	9b03      	ldr	r3, [sp, #12]
 800a3ee:	9302      	str	r3, [sp, #8]
 800a3f0:	2d00      	cmp	r5, #0
 800a3f2:	dd05      	ble.n	800a400 <_dtoa_r+0x9a0>
 800a3f4:	4639      	mov	r1, r7
 800a3f6:	462a      	mov	r2, r5
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	f000 ff09 	bl	800b210 <__lshift>
 800a3fe:	4607      	mov	r7, r0
 800a400:	f1b8 0f00 	cmp.w	r8, #0
 800a404:	d05b      	beq.n	800a4be <_dtoa_r+0xa5e>
 800a406:	6879      	ldr	r1, [r7, #4]
 800a408:	4620      	mov	r0, r4
 800a40a:	f000 fca5 	bl	800ad58 <_Balloc>
 800a40e:	4605      	mov	r5, r0
 800a410:	b928      	cbnz	r0, 800a41e <_dtoa_r+0x9be>
 800a412:	4b87      	ldr	r3, [pc, #540]	; (800a630 <_dtoa_r+0xbd0>)
 800a414:	4602      	mov	r2, r0
 800a416:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a41a:	f7ff bb3b 	b.w	8009a94 <_dtoa_r+0x34>
 800a41e:	693a      	ldr	r2, [r7, #16]
 800a420:	3202      	adds	r2, #2
 800a422:	0092      	lsls	r2, r2, #2
 800a424:	f107 010c 	add.w	r1, r7, #12
 800a428:	300c      	adds	r0, #12
 800a42a:	f7fd fd03 	bl	8007e34 <memcpy>
 800a42e:	2201      	movs	r2, #1
 800a430:	4629      	mov	r1, r5
 800a432:	4620      	mov	r0, r4
 800a434:	f000 feec 	bl	800b210 <__lshift>
 800a438:	9b01      	ldr	r3, [sp, #4]
 800a43a:	f103 0901 	add.w	r9, r3, #1
 800a43e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a442:	4413      	add	r3, r2
 800a444:	9305      	str	r3, [sp, #20]
 800a446:	f00a 0301 	and.w	r3, sl, #1
 800a44a:	46b8      	mov	r8, r7
 800a44c:	9304      	str	r3, [sp, #16]
 800a44e:	4607      	mov	r7, r0
 800a450:	4631      	mov	r1, r6
 800a452:	ee18 0a10 	vmov	r0, s16
 800a456:	f7ff fa75 	bl	8009944 <quorem>
 800a45a:	4641      	mov	r1, r8
 800a45c:	9002      	str	r0, [sp, #8]
 800a45e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a462:	ee18 0a10 	vmov	r0, s16
 800a466:	f000 ff43 	bl	800b2f0 <__mcmp>
 800a46a:	463a      	mov	r2, r7
 800a46c:	9003      	str	r0, [sp, #12]
 800a46e:	4631      	mov	r1, r6
 800a470:	4620      	mov	r0, r4
 800a472:	f000 ff59 	bl	800b328 <__mdiff>
 800a476:	68c2      	ldr	r2, [r0, #12]
 800a478:	f109 3bff 	add.w	fp, r9, #4294967295
 800a47c:	4605      	mov	r5, r0
 800a47e:	bb02      	cbnz	r2, 800a4c2 <_dtoa_r+0xa62>
 800a480:	4601      	mov	r1, r0
 800a482:	ee18 0a10 	vmov	r0, s16
 800a486:	f000 ff33 	bl	800b2f0 <__mcmp>
 800a48a:	4602      	mov	r2, r0
 800a48c:	4629      	mov	r1, r5
 800a48e:	4620      	mov	r0, r4
 800a490:	9207      	str	r2, [sp, #28]
 800a492:	f000 fca1 	bl	800add8 <_Bfree>
 800a496:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a49a:	ea43 0102 	orr.w	r1, r3, r2
 800a49e:	9b04      	ldr	r3, [sp, #16]
 800a4a0:	430b      	orrs	r3, r1
 800a4a2:	464d      	mov	r5, r9
 800a4a4:	d10f      	bne.n	800a4c6 <_dtoa_r+0xa66>
 800a4a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a4aa:	d02a      	beq.n	800a502 <_dtoa_r+0xaa2>
 800a4ac:	9b03      	ldr	r3, [sp, #12]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	dd02      	ble.n	800a4b8 <_dtoa_r+0xa58>
 800a4b2:	9b02      	ldr	r3, [sp, #8]
 800a4b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a4b8:	f88b a000 	strb.w	sl, [fp]
 800a4bc:	e775      	b.n	800a3aa <_dtoa_r+0x94a>
 800a4be:	4638      	mov	r0, r7
 800a4c0:	e7ba      	b.n	800a438 <_dtoa_r+0x9d8>
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	e7e2      	b.n	800a48c <_dtoa_r+0xa2c>
 800a4c6:	9b03      	ldr	r3, [sp, #12]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	db04      	blt.n	800a4d6 <_dtoa_r+0xa76>
 800a4cc:	9906      	ldr	r1, [sp, #24]
 800a4ce:	430b      	orrs	r3, r1
 800a4d0:	9904      	ldr	r1, [sp, #16]
 800a4d2:	430b      	orrs	r3, r1
 800a4d4:	d122      	bne.n	800a51c <_dtoa_r+0xabc>
 800a4d6:	2a00      	cmp	r2, #0
 800a4d8:	ddee      	ble.n	800a4b8 <_dtoa_r+0xa58>
 800a4da:	ee18 1a10 	vmov	r1, s16
 800a4de:	2201      	movs	r2, #1
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	f000 fe95 	bl	800b210 <__lshift>
 800a4e6:	4631      	mov	r1, r6
 800a4e8:	ee08 0a10 	vmov	s16, r0
 800a4ec:	f000 ff00 	bl	800b2f0 <__mcmp>
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	dc03      	bgt.n	800a4fc <_dtoa_r+0xa9c>
 800a4f4:	d1e0      	bne.n	800a4b8 <_dtoa_r+0xa58>
 800a4f6:	f01a 0f01 	tst.w	sl, #1
 800a4fa:	d0dd      	beq.n	800a4b8 <_dtoa_r+0xa58>
 800a4fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a500:	d1d7      	bne.n	800a4b2 <_dtoa_r+0xa52>
 800a502:	2339      	movs	r3, #57	; 0x39
 800a504:	f88b 3000 	strb.w	r3, [fp]
 800a508:	462b      	mov	r3, r5
 800a50a:	461d      	mov	r5, r3
 800a50c:	3b01      	subs	r3, #1
 800a50e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a512:	2a39      	cmp	r2, #57	; 0x39
 800a514:	d071      	beq.n	800a5fa <_dtoa_r+0xb9a>
 800a516:	3201      	adds	r2, #1
 800a518:	701a      	strb	r2, [r3, #0]
 800a51a:	e746      	b.n	800a3aa <_dtoa_r+0x94a>
 800a51c:	2a00      	cmp	r2, #0
 800a51e:	dd07      	ble.n	800a530 <_dtoa_r+0xad0>
 800a520:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a524:	d0ed      	beq.n	800a502 <_dtoa_r+0xaa2>
 800a526:	f10a 0301 	add.w	r3, sl, #1
 800a52a:	f88b 3000 	strb.w	r3, [fp]
 800a52e:	e73c      	b.n	800a3aa <_dtoa_r+0x94a>
 800a530:	9b05      	ldr	r3, [sp, #20]
 800a532:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a536:	4599      	cmp	r9, r3
 800a538:	d047      	beq.n	800a5ca <_dtoa_r+0xb6a>
 800a53a:	ee18 1a10 	vmov	r1, s16
 800a53e:	2300      	movs	r3, #0
 800a540:	220a      	movs	r2, #10
 800a542:	4620      	mov	r0, r4
 800a544:	f000 fc6a 	bl	800ae1c <__multadd>
 800a548:	45b8      	cmp	r8, r7
 800a54a:	ee08 0a10 	vmov	s16, r0
 800a54e:	f04f 0300 	mov.w	r3, #0
 800a552:	f04f 020a 	mov.w	r2, #10
 800a556:	4641      	mov	r1, r8
 800a558:	4620      	mov	r0, r4
 800a55a:	d106      	bne.n	800a56a <_dtoa_r+0xb0a>
 800a55c:	f000 fc5e 	bl	800ae1c <__multadd>
 800a560:	4680      	mov	r8, r0
 800a562:	4607      	mov	r7, r0
 800a564:	f109 0901 	add.w	r9, r9, #1
 800a568:	e772      	b.n	800a450 <_dtoa_r+0x9f0>
 800a56a:	f000 fc57 	bl	800ae1c <__multadd>
 800a56e:	4639      	mov	r1, r7
 800a570:	4680      	mov	r8, r0
 800a572:	2300      	movs	r3, #0
 800a574:	220a      	movs	r2, #10
 800a576:	4620      	mov	r0, r4
 800a578:	f000 fc50 	bl	800ae1c <__multadd>
 800a57c:	4607      	mov	r7, r0
 800a57e:	e7f1      	b.n	800a564 <_dtoa_r+0xb04>
 800a580:	9b03      	ldr	r3, [sp, #12]
 800a582:	9302      	str	r3, [sp, #8]
 800a584:	9d01      	ldr	r5, [sp, #4]
 800a586:	ee18 0a10 	vmov	r0, s16
 800a58a:	4631      	mov	r1, r6
 800a58c:	f7ff f9da 	bl	8009944 <quorem>
 800a590:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a594:	9b01      	ldr	r3, [sp, #4]
 800a596:	f805 ab01 	strb.w	sl, [r5], #1
 800a59a:	1aea      	subs	r2, r5, r3
 800a59c:	9b02      	ldr	r3, [sp, #8]
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	dd09      	ble.n	800a5b6 <_dtoa_r+0xb56>
 800a5a2:	ee18 1a10 	vmov	r1, s16
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	220a      	movs	r2, #10
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	f000 fc36 	bl	800ae1c <__multadd>
 800a5b0:	ee08 0a10 	vmov	s16, r0
 800a5b4:	e7e7      	b.n	800a586 <_dtoa_r+0xb26>
 800a5b6:	9b02      	ldr	r3, [sp, #8]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	bfc8      	it	gt
 800a5bc:	461d      	movgt	r5, r3
 800a5be:	9b01      	ldr	r3, [sp, #4]
 800a5c0:	bfd8      	it	le
 800a5c2:	2501      	movle	r5, #1
 800a5c4:	441d      	add	r5, r3
 800a5c6:	f04f 0800 	mov.w	r8, #0
 800a5ca:	ee18 1a10 	vmov	r1, s16
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	f000 fe1d 	bl	800b210 <__lshift>
 800a5d6:	4631      	mov	r1, r6
 800a5d8:	ee08 0a10 	vmov	s16, r0
 800a5dc:	f000 fe88 	bl	800b2f0 <__mcmp>
 800a5e0:	2800      	cmp	r0, #0
 800a5e2:	dc91      	bgt.n	800a508 <_dtoa_r+0xaa8>
 800a5e4:	d102      	bne.n	800a5ec <_dtoa_r+0xb8c>
 800a5e6:	f01a 0f01 	tst.w	sl, #1
 800a5ea:	d18d      	bne.n	800a508 <_dtoa_r+0xaa8>
 800a5ec:	462b      	mov	r3, r5
 800a5ee:	461d      	mov	r5, r3
 800a5f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5f4:	2a30      	cmp	r2, #48	; 0x30
 800a5f6:	d0fa      	beq.n	800a5ee <_dtoa_r+0xb8e>
 800a5f8:	e6d7      	b.n	800a3aa <_dtoa_r+0x94a>
 800a5fa:	9a01      	ldr	r2, [sp, #4]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d184      	bne.n	800a50a <_dtoa_r+0xaaa>
 800a600:	9b00      	ldr	r3, [sp, #0]
 800a602:	3301      	adds	r3, #1
 800a604:	9300      	str	r3, [sp, #0]
 800a606:	2331      	movs	r3, #49	; 0x31
 800a608:	7013      	strb	r3, [r2, #0]
 800a60a:	e6ce      	b.n	800a3aa <_dtoa_r+0x94a>
 800a60c:	4b09      	ldr	r3, [pc, #36]	; (800a634 <_dtoa_r+0xbd4>)
 800a60e:	f7ff ba95 	b.w	8009b3c <_dtoa_r+0xdc>
 800a612:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a614:	2b00      	cmp	r3, #0
 800a616:	f47f aa6e 	bne.w	8009af6 <_dtoa_r+0x96>
 800a61a:	4b07      	ldr	r3, [pc, #28]	; (800a638 <_dtoa_r+0xbd8>)
 800a61c:	f7ff ba8e 	b.w	8009b3c <_dtoa_r+0xdc>
 800a620:	9b02      	ldr	r3, [sp, #8]
 800a622:	2b00      	cmp	r3, #0
 800a624:	dcae      	bgt.n	800a584 <_dtoa_r+0xb24>
 800a626:	9b06      	ldr	r3, [sp, #24]
 800a628:	2b02      	cmp	r3, #2
 800a62a:	f73f aea8 	bgt.w	800a37e <_dtoa_r+0x91e>
 800a62e:	e7a9      	b.n	800a584 <_dtoa_r+0xb24>
 800a630:	0800cb00 	.word	0x0800cb00
 800a634:	0800c900 	.word	0x0800c900
 800a638:	0800ca81 	.word	0x0800ca81

0800a63c <rshift>:
 800a63c:	6903      	ldr	r3, [r0, #16]
 800a63e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a642:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a646:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a64a:	f100 0414 	add.w	r4, r0, #20
 800a64e:	dd45      	ble.n	800a6dc <rshift+0xa0>
 800a650:	f011 011f 	ands.w	r1, r1, #31
 800a654:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a658:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a65c:	d10c      	bne.n	800a678 <rshift+0x3c>
 800a65e:	f100 0710 	add.w	r7, r0, #16
 800a662:	4629      	mov	r1, r5
 800a664:	42b1      	cmp	r1, r6
 800a666:	d334      	bcc.n	800a6d2 <rshift+0x96>
 800a668:	1a9b      	subs	r3, r3, r2
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	1eea      	subs	r2, r5, #3
 800a66e:	4296      	cmp	r6, r2
 800a670:	bf38      	it	cc
 800a672:	2300      	movcc	r3, #0
 800a674:	4423      	add	r3, r4
 800a676:	e015      	b.n	800a6a4 <rshift+0x68>
 800a678:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a67c:	f1c1 0820 	rsb	r8, r1, #32
 800a680:	40cf      	lsrs	r7, r1
 800a682:	f105 0e04 	add.w	lr, r5, #4
 800a686:	46a1      	mov	r9, r4
 800a688:	4576      	cmp	r6, lr
 800a68a:	46f4      	mov	ip, lr
 800a68c:	d815      	bhi.n	800a6ba <rshift+0x7e>
 800a68e:	1a9a      	subs	r2, r3, r2
 800a690:	0092      	lsls	r2, r2, #2
 800a692:	3a04      	subs	r2, #4
 800a694:	3501      	adds	r5, #1
 800a696:	42ae      	cmp	r6, r5
 800a698:	bf38      	it	cc
 800a69a:	2200      	movcc	r2, #0
 800a69c:	18a3      	adds	r3, r4, r2
 800a69e:	50a7      	str	r7, [r4, r2]
 800a6a0:	b107      	cbz	r7, 800a6a4 <rshift+0x68>
 800a6a2:	3304      	adds	r3, #4
 800a6a4:	1b1a      	subs	r2, r3, r4
 800a6a6:	42a3      	cmp	r3, r4
 800a6a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a6ac:	bf08      	it	eq
 800a6ae:	2300      	moveq	r3, #0
 800a6b0:	6102      	str	r2, [r0, #16]
 800a6b2:	bf08      	it	eq
 800a6b4:	6143      	streq	r3, [r0, #20]
 800a6b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6ba:	f8dc c000 	ldr.w	ip, [ip]
 800a6be:	fa0c fc08 	lsl.w	ip, ip, r8
 800a6c2:	ea4c 0707 	orr.w	r7, ip, r7
 800a6c6:	f849 7b04 	str.w	r7, [r9], #4
 800a6ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a6ce:	40cf      	lsrs	r7, r1
 800a6d0:	e7da      	b.n	800a688 <rshift+0x4c>
 800a6d2:	f851 cb04 	ldr.w	ip, [r1], #4
 800a6d6:	f847 cf04 	str.w	ip, [r7, #4]!
 800a6da:	e7c3      	b.n	800a664 <rshift+0x28>
 800a6dc:	4623      	mov	r3, r4
 800a6de:	e7e1      	b.n	800a6a4 <rshift+0x68>

0800a6e0 <__hexdig_fun>:
 800a6e0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a6e4:	2b09      	cmp	r3, #9
 800a6e6:	d802      	bhi.n	800a6ee <__hexdig_fun+0xe>
 800a6e8:	3820      	subs	r0, #32
 800a6ea:	b2c0      	uxtb	r0, r0
 800a6ec:	4770      	bx	lr
 800a6ee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a6f2:	2b05      	cmp	r3, #5
 800a6f4:	d801      	bhi.n	800a6fa <__hexdig_fun+0x1a>
 800a6f6:	3847      	subs	r0, #71	; 0x47
 800a6f8:	e7f7      	b.n	800a6ea <__hexdig_fun+0xa>
 800a6fa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a6fe:	2b05      	cmp	r3, #5
 800a700:	d801      	bhi.n	800a706 <__hexdig_fun+0x26>
 800a702:	3827      	subs	r0, #39	; 0x27
 800a704:	e7f1      	b.n	800a6ea <__hexdig_fun+0xa>
 800a706:	2000      	movs	r0, #0
 800a708:	4770      	bx	lr
	...

0800a70c <__gethex>:
 800a70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a710:	ed2d 8b02 	vpush	{d8}
 800a714:	b089      	sub	sp, #36	; 0x24
 800a716:	ee08 0a10 	vmov	s16, r0
 800a71a:	9304      	str	r3, [sp, #16]
 800a71c:	4bb4      	ldr	r3, [pc, #720]	; (800a9f0 <__gethex+0x2e4>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	9301      	str	r3, [sp, #4]
 800a722:	4618      	mov	r0, r3
 800a724:	468b      	mov	fp, r1
 800a726:	4690      	mov	r8, r2
 800a728:	f7f5 fd2a 	bl	8000180 <strlen>
 800a72c:	9b01      	ldr	r3, [sp, #4]
 800a72e:	f8db 2000 	ldr.w	r2, [fp]
 800a732:	4403      	add	r3, r0
 800a734:	4682      	mov	sl, r0
 800a736:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a73a:	9305      	str	r3, [sp, #20]
 800a73c:	1c93      	adds	r3, r2, #2
 800a73e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a742:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a746:	32fe      	adds	r2, #254	; 0xfe
 800a748:	18d1      	adds	r1, r2, r3
 800a74a:	461f      	mov	r7, r3
 800a74c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a750:	9100      	str	r1, [sp, #0]
 800a752:	2830      	cmp	r0, #48	; 0x30
 800a754:	d0f8      	beq.n	800a748 <__gethex+0x3c>
 800a756:	f7ff ffc3 	bl	800a6e0 <__hexdig_fun>
 800a75a:	4604      	mov	r4, r0
 800a75c:	2800      	cmp	r0, #0
 800a75e:	d13a      	bne.n	800a7d6 <__gethex+0xca>
 800a760:	9901      	ldr	r1, [sp, #4]
 800a762:	4652      	mov	r2, sl
 800a764:	4638      	mov	r0, r7
 800a766:	f001 fa23 	bl	800bbb0 <strncmp>
 800a76a:	4605      	mov	r5, r0
 800a76c:	2800      	cmp	r0, #0
 800a76e:	d168      	bne.n	800a842 <__gethex+0x136>
 800a770:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a774:	eb07 060a 	add.w	r6, r7, sl
 800a778:	f7ff ffb2 	bl	800a6e0 <__hexdig_fun>
 800a77c:	2800      	cmp	r0, #0
 800a77e:	d062      	beq.n	800a846 <__gethex+0x13a>
 800a780:	4633      	mov	r3, r6
 800a782:	7818      	ldrb	r0, [r3, #0]
 800a784:	2830      	cmp	r0, #48	; 0x30
 800a786:	461f      	mov	r7, r3
 800a788:	f103 0301 	add.w	r3, r3, #1
 800a78c:	d0f9      	beq.n	800a782 <__gethex+0x76>
 800a78e:	f7ff ffa7 	bl	800a6e0 <__hexdig_fun>
 800a792:	2301      	movs	r3, #1
 800a794:	fab0 f480 	clz	r4, r0
 800a798:	0964      	lsrs	r4, r4, #5
 800a79a:	4635      	mov	r5, r6
 800a79c:	9300      	str	r3, [sp, #0]
 800a79e:	463a      	mov	r2, r7
 800a7a0:	4616      	mov	r6, r2
 800a7a2:	3201      	adds	r2, #1
 800a7a4:	7830      	ldrb	r0, [r6, #0]
 800a7a6:	f7ff ff9b 	bl	800a6e0 <__hexdig_fun>
 800a7aa:	2800      	cmp	r0, #0
 800a7ac:	d1f8      	bne.n	800a7a0 <__gethex+0x94>
 800a7ae:	9901      	ldr	r1, [sp, #4]
 800a7b0:	4652      	mov	r2, sl
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	f001 f9fc 	bl	800bbb0 <strncmp>
 800a7b8:	b980      	cbnz	r0, 800a7dc <__gethex+0xd0>
 800a7ba:	b94d      	cbnz	r5, 800a7d0 <__gethex+0xc4>
 800a7bc:	eb06 050a 	add.w	r5, r6, sl
 800a7c0:	462a      	mov	r2, r5
 800a7c2:	4616      	mov	r6, r2
 800a7c4:	3201      	adds	r2, #1
 800a7c6:	7830      	ldrb	r0, [r6, #0]
 800a7c8:	f7ff ff8a 	bl	800a6e0 <__hexdig_fun>
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	d1f8      	bne.n	800a7c2 <__gethex+0xb6>
 800a7d0:	1bad      	subs	r5, r5, r6
 800a7d2:	00ad      	lsls	r5, r5, #2
 800a7d4:	e004      	b.n	800a7e0 <__gethex+0xd4>
 800a7d6:	2400      	movs	r4, #0
 800a7d8:	4625      	mov	r5, r4
 800a7da:	e7e0      	b.n	800a79e <__gethex+0x92>
 800a7dc:	2d00      	cmp	r5, #0
 800a7de:	d1f7      	bne.n	800a7d0 <__gethex+0xc4>
 800a7e0:	7833      	ldrb	r3, [r6, #0]
 800a7e2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a7e6:	2b50      	cmp	r3, #80	; 0x50
 800a7e8:	d13b      	bne.n	800a862 <__gethex+0x156>
 800a7ea:	7873      	ldrb	r3, [r6, #1]
 800a7ec:	2b2b      	cmp	r3, #43	; 0x2b
 800a7ee:	d02c      	beq.n	800a84a <__gethex+0x13e>
 800a7f0:	2b2d      	cmp	r3, #45	; 0x2d
 800a7f2:	d02e      	beq.n	800a852 <__gethex+0x146>
 800a7f4:	1c71      	adds	r1, r6, #1
 800a7f6:	f04f 0900 	mov.w	r9, #0
 800a7fa:	7808      	ldrb	r0, [r1, #0]
 800a7fc:	f7ff ff70 	bl	800a6e0 <__hexdig_fun>
 800a800:	1e43      	subs	r3, r0, #1
 800a802:	b2db      	uxtb	r3, r3
 800a804:	2b18      	cmp	r3, #24
 800a806:	d82c      	bhi.n	800a862 <__gethex+0x156>
 800a808:	f1a0 0210 	sub.w	r2, r0, #16
 800a80c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a810:	f7ff ff66 	bl	800a6e0 <__hexdig_fun>
 800a814:	1e43      	subs	r3, r0, #1
 800a816:	b2db      	uxtb	r3, r3
 800a818:	2b18      	cmp	r3, #24
 800a81a:	d91d      	bls.n	800a858 <__gethex+0x14c>
 800a81c:	f1b9 0f00 	cmp.w	r9, #0
 800a820:	d000      	beq.n	800a824 <__gethex+0x118>
 800a822:	4252      	negs	r2, r2
 800a824:	4415      	add	r5, r2
 800a826:	f8cb 1000 	str.w	r1, [fp]
 800a82a:	b1e4      	cbz	r4, 800a866 <__gethex+0x15a>
 800a82c:	9b00      	ldr	r3, [sp, #0]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	bf14      	ite	ne
 800a832:	2700      	movne	r7, #0
 800a834:	2706      	moveq	r7, #6
 800a836:	4638      	mov	r0, r7
 800a838:	b009      	add	sp, #36	; 0x24
 800a83a:	ecbd 8b02 	vpop	{d8}
 800a83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a842:	463e      	mov	r6, r7
 800a844:	4625      	mov	r5, r4
 800a846:	2401      	movs	r4, #1
 800a848:	e7ca      	b.n	800a7e0 <__gethex+0xd4>
 800a84a:	f04f 0900 	mov.w	r9, #0
 800a84e:	1cb1      	adds	r1, r6, #2
 800a850:	e7d3      	b.n	800a7fa <__gethex+0xee>
 800a852:	f04f 0901 	mov.w	r9, #1
 800a856:	e7fa      	b.n	800a84e <__gethex+0x142>
 800a858:	230a      	movs	r3, #10
 800a85a:	fb03 0202 	mla	r2, r3, r2, r0
 800a85e:	3a10      	subs	r2, #16
 800a860:	e7d4      	b.n	800a80c <__gethex+0x100>
 800a862:	4631      	mov	r1, r6
 800a864:	e7df      	b.n	800a826 <__gethex+0x11a>
 800a866:	1bf3      	subs	r3, r6, r7
 800a868:	3b01      	subs	r3, #1
 800a86a:	4621      	mov	r1, r4
 800a86c:	2b07      	cmp	r3, #7
 800a86e:	dc0b      	bgt.n	800a888 <__gethex+0x17c>
 800a870:	ee18 0a10 	vmov	r0, s16
 800a874:	f000 fa70 	bl	800ad58 <_Balloc>
 800a878:	4604      	mov	r4, r0
 800a87a:	b940      	cbnz	r0, 800a88e <__gethex+0x182>
 800a87c:	4b5d      	ldr	r3, [pc, #372]	; (800a9f4 <__gethex+0x2e8>)
 800a87e:	4602      	mov	r2, r0
 800a880:	21de      	movs	r1, #222	; 0xde
 800a882:	485d      	ldr	r0, [pc, #372]	; (800a9f8 <__gethex+0x2ec>)
 800a884:	f001 f9b6 	bl	800bbf4 <__assert_func>
 800a888:	3101      	adds	r1, #1
 800a88a:	105b      	asrs	r3, r3, #1
 800a88c:	e7ee      	b.n	800a86c <__gethex+0x160>
 800a88e:	f100 0914 	add.w	r9, r0, #20
 800a892:	f04f 0b00 	mov.w	fp, #0
 800a896:	f1ca 0301 	rsb	r3, sl, #1
 800a89a:	f8cd 9008 	str.w	r9, [sp, #8]
 800a89e:	f8cd b000 	str.w	fp, [sp]
 800a8a2:	9306      	str	r3, [sp, #24]
 800a8a4:	42b7      	cmp	r7, r6
 800a8a6:	d340      	bcc.n	800a92a <__gethex+0x21e>
 800a8a8:	9802      	ldr	r0, [sp, #8]
 800a8aa:	9b00      	ldr	r3, [sp, #0]
 800a8ac:	f840 3b04 	str.w	r3, [r0], #4
 800a8b0:	eba0 0009 	sub.w	r0, r0, r9
 800a8b4:	1080      	asrs	r0, r0, #2
 800a8b6:	0146      	lsls	r6, r0, #5
 800a8b8:	6120      	str	r0, [r4, #16]
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f000 fb3e 	bl	800af3c <__hi0bits>
 800a8c0:	1a30      	subs	r0, r6, r0
 800a8c2:	f8d8 6000 	ldr.w	r6, [r8]
 800a8c6:	42b0      	cmp	r0, r6
 800a8c8:	dd63      	ble.n	800a992 <__gethex+0x286>
 800a8ca:	1b87      	subs	r7, r0, r6
 800a8cc:	4639      	mov	r1, r7
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	f000 fee2 	bl	800b698 <__any_on>
 800a8d4:	4682      	mov	sl, r0
 800a8d6:	b1a8      	cbz	r0, 800a904 <__gethex+0x1f8>
 800a8d8:	1e7b      	subs	r3, r7, #1
 800a8da:	1159      	asrs	r1, r3, #5
 800a8dc:	f003 021f 	and.w	r2, r3, #31
 800a8e0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a8e4:	f04f 0a01 	mov.w	sl, #1
 800a8e8:	fa0a f202 	lsl.w	r2, sl, r2
 800a8ec:	420a      	tst	r2, r1
 800a8ee:	d009      	beq.n	800a904 <__gethex+0x1f8>
 800a8f0:	4553      	cmp	r3, sl
 800a8f2:	dd05      	ble.n	800a900 <__gethex+0x1f4>
 800a8f4:	1eb9      	subs	r1, r7, #2
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	f000 fece 	bl	800b698 <__any_on>
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	d145      	bne.n	800a98c <__gethex+0x280>
 800a900:	f04f 0a02 	mov.w	sl, #2
 800a904:	4639      	mov	r1, r7
 800a906:	4620      	mov	r0, r4
 800a908:	f7ff fe98 	bl	800a63c <rshift>
 800a90c:	443d      	add	r5, r7
 800a90e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a912:	42ab      	cmp	r3, r5
 800a914:	da4c      	bge.n	800a9b0 <__gethex+0x2a4>
 800a916:	ee18 0a10 	vmov	r0, s16
 800a91a:	4621      	mov	r1, r4
 800a91c:	f000 fa5c 	bl	800add8 <_Bfree>
 800a920:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a922:	2300      	movs	r3, #0
 800a924:	6013      	str	r3, [r2, #0]
 800a926:	27a3      	movs	r7, #163	; 0xa3
 800a928:	e785      	b.n	800a836 <__gethex+0x12a>
 800a92a:	1e73      	subs	r3, r6, #1
 800a92c:	9a05      	ldr	r2, [sp, #20]
 800a92e:	9303      	str	r3, [sp, #12]
 800a930:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a934:	4293      	cmp	r3, r2
 800a936:	d019      	beq.n	800a96c <__gethex+0x260>
 800a938:	f1bb 0f20 	cmp.w	fp, #32
 800a93c:	d107      	bne.n	800a94e <__gethex+0x242>
 800a93e:	9b02      	ldr	r3, [sp, #8]
 800a940:	9a00      	ldr	r2, [sp, #0]
 800a942:	f843 2b04 	str.w	r2, [r3], #4
 800a946:	9302      	str	r3, [sp, #8]
 800a948:	2300      	movs	r3, #0
 800a94a:	9300      	str	r3, [sp, #0]
 800a94c:	469b      	mov	fp, r3
 800a94e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a952:	f7ff fec5 	bl	800a6e0 <__hexdig_fun>
 800a956:	9b00      	ldr	r3, [sp, #0]
 800a958:	f000 000f 	and.w	r0, r0, #15
 800a95c:	fa00 f00b 	lsl.w	r0, r0, fp
 800a960:	4303      	orrs	r3, r0
 800a962:	9300      	str	r3, [sp, #0]
 800a964:	f10b 0b04 	add.w	fp, fp, #4
 800a968:	9b03      	ldr	r3, [sp, #12]
 800a96a:	e00d      	b.n	800a988 <__gethex+0x27c>
 800a96c:	9b03      	ldr	r3, [sp, #12]
 800a96e:	9a06      	ldr	r2, [sp, #24]
 800a970:	4413      	add	r3, r2
 800a972:	42bb      	cmp	r3, r7
 800a974:	d3e0      	bcc.n	800a938 <__gethex+0x22c>
 800a976:	4618      	mov	r0, r3
 800a978:	9901      	ldr	r1, [sp, #4]
 800a97a:	9307      	str	r3, [sp, #28]
 800a97c:	4652      	mov	r2, sl
 800a97e:	f001 f917 	bl	800bbb0 <strncmp>
 800a982:	9b07      	ldr	r3, [sp, #28]
 800a984:	2800      	cmp	r0, #0
 800a986:	d1d7      	bne.n	800a938 <__gethex+0x22c>
 800a988:	461e      	mov	r6, r3
 800a98a:	e78b      	b.n	800a8a4 <__gethex+0x198>
 800a98c:	f04f 0a03 	mov.w	sl, #3
 800a990:	e7b8      	b.n	800a904 <__gethex+0x1f8>
 800a992:	da0a      	bge.n	800a9aa <__gethex+0x29e>
 800a994:	1a37      	subs	r7, r6, r0
 800a996:	4621      	mov	r1, r4
 800a998:	ee18 0a10 	vmov	r0, s16
 800a99c:	463a      	mov	r2, r7
 800a99e:	f000 fc37 	bl	800b210 <__lshift>
 800a9a2:	1bed      	subs	r5, r5, r7
 800a9a4:	4604      	mov	r4, r0
 800a9a6:	f100 0914 	add.w	r9, r0, #20
 800a9aa:	f04f 0a00 	mov.w	sl, #0
 800a9ae:	e7ae      	b.n	800a90e <__gethex+0x202>
 800a9b0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a9b4:	42a8      	cmp	r0, r5
 800a9b6:	dd72      	ble.n	800aa9e <__gethex+0x392>
 800a9b8:	1b45      	subs	r5, r0, r5
 800a9ba:	42ae      	cmp	r6, r5
 800a9bc:	dc36      	bgt.n	800aa2c <__gethex+0x320>
 800a9be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a9c2:	2b02      	cmp	r3, #2
 800a9c4:	d02a      	beq.n	800aa1c <__gethex+0x310>
 800a9c6:	2b03      	cmp	r3, #3
 800a9c8:	d02c      	beq.n	800aa24 <__gethex+0x318>
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d11c      	bne.n	800aa08 <__gethex+0x2fc>
 800a9ce:	42ae      	cmp	r6, r5
 800a9d0:	d11a      	bne.n	800aa08 <__gethex+0x2fc>
 800a9d2:	2e01      	cmp	r6, #1
 800a9d4:	d112      	bne.n	800a9fc <__gethex+0x2f0>
 800a9d6:	9a04      	ldr	r2, [sp, #16]
 800a9d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a9dc:	6013      	str	r3, [r2, #0]
 800a9de:	2301      	movs	r3, #1
 800a9e0:	6123      	str	r3, [r4, #16]
 800a9e2:	f8c9 3000 	str.w	r3, [r9]
 800a9e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a9e8:	2762      	movs	r7, #98	; 0x62
 800a9ea:	601c      	str	r4, [r3, #0]
 800a9ec:	e723      	b.n	800a836 <__gethex+0x12a>
 800a9ee:	bf00      	nop
 800a9f0:	0800cb78 	.word	0x0800cb78
 800a9f4:	0800cb00 	.word	0x0800cb00
 800a9f8:	0800cb11 	.word	0x0800cb11
 800a9fc:	1e71      	subs	r1, r6, #1
 800a9fe:	4620      	mov	r0, r4
 800aa00:	f000 fe4a 	bl	800b698 <__any_on>
 800aa04:	2800      	cmp	r0, #0
 800aa06:	d1e6      	bne.n	800a9d6 <__gethex+0x2ca>
 800aa08:	ee18 0a10 	vmov	r0, s16
 800aa0c:	4621      	mov	r1, r4
 800aa0e:	f000 f9e3 	bl	800add8 <_Bfree>
 800aa12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa14:	2300      	movs	r3, #0
 800aa16:	6013      	str	r3, [r2, #0]
 800aa18:	2750      	movs	r7, #80	; 0x50
 800aa1a:	e70c      	b.n	800a836 <__gethex+0x12a>
 800aa1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d1f2      	bne.n	800aa08 <__gethex+0x2fc>
 800aa22:	e7d8      	b.n	800a9d6 <__gethex+0x2ca>
 800aa24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d1d5      	bne.n	800a9d6 <__gethex+0x2ca>
 800aa2a:	e7ed      	b.n	800aa08 <__gethex+0x2fc>
 800aa2c:	1e6f      	subs	r7, r5, #1
 800aa2e:	f1ba 0f00 	cmp.w	sl, #0
 800aa32:	d131      	bne.n	800aa98 <__gethex+0x38c>
 800aa34:	b127      	cbz	r7, 800aa40 <__gethex+0x334>
 800aa36:	4639      	mov	r1, r7
 800aa38:	4620      	mov	r0, r4
 800aa3a:	f000 fe2d 	bl	800b698 <__any_on>
 800aa3e:	4682      	mov	sl, r0
 800aa40:	117b      	asrs	r3, r7, #5
 800aa42:	2101      	movs	r1, #1
 800aa44:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800aa48:	f007 071f 	and.w	r7, r7, #31
 800aa4c:	fa01 f707 	lsl.w	r7, r1, r7
 800aa50:	421f      	tst	r7, r3
 800aa52:	4629      	mov	r1, r5
 800aa54:	4620      	mov	r0, r4
 800aa56:	bf18      	it	ne
 800aa58:	f04a 0a02 	orrne.w	sl, sl, #2
 800aa5c:	1b76      	subs	r6, r6, r5
 800aa5e:	f7ff fded 	bl	800a63c <rshift>
 800aa62:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aa66:	2702      	movs	r7, #2
 800aa68:	f1ba 0f00 	cmp.w	sl, #0
 800aa6c:	d048      	beq.n	800ab00 <__gethex+0x3f4>
 800aa6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aa72:	2b02      	cmp	r3, #2
 800aa74:	d015      	beq.n	800aaa2 <__gethex+0x396>
 800aa76:	2b03      	cmp	r3, #3
 800aa78:	d017      	beq.n	800aaaa <__gethex+0x39e>
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d109      	bne.n	800aa92 <__gethex+0x386>
 800aa7e:	f01a 0f02 	tst.w	sl, #2
 800aa82:	d006      	beq.n	800aa92 <__gethex+0x386>
 800aa84:	f8d9 0000 	ldr.w	r0, [r9]
 800aa88:	ea4a 0a00 	orr.w	sl, sl, r0
 800aa8c:	f01a 0f01 	tst.w	sl, #1
 800aa90:	d10e      	bne.n	800aab0 <__gethex+0x3a4>
 800aa92:	f047 0710 	orr.w	r7, r7, #16
 800aa96:	e033      	b.n	800ab00 <__gethex+0x3f4>
 800aa98:	f04f 0a01 	mov.w	sl, #1
 800aa9c:	e7d0      	b.n	800aa40 <__gethex+0x334>
 800aa9e:	2701      	movs	r7, #1
 800aaa0:	e7e2      	b.n	800aa68 <__gethex+0x35c>
 800aaa2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aaa4:	f1c3 0301 	rsb	r3, r3, #1
 800aaa8:	9315      	str	r3, [sp, #84]	; 0x54
 800aaaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d0f0      	beq.n	800aa92 <__gethex+0x386>
 800aab0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aab4:	f104 0314 	add.w	r3, r4, #20
 800aab8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800aabc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800aac0:	f04f 0c00 	mov.w	ip, #0
 800aac4:	4618      	mov	r0, r3
 800aac6:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaca:	f1b2 3fff 	cmp.w	r2, #4294967295
 800aace:	d01c      	beq.n	800ab0a <__gethex+0x3fe>
 800aad0:	3201      	adds	r2, #1
 800aad2:	6002      	str	r2, [r0, #0]
 800aad4:	2f02      	cmp	r7, #2
 800aad6:	f104 0314 	add.w	r3, r4, #20
 800aada:	d13f      	bne.n	800ab5c <__gethex+0x450>
 800aadc:	f8d8 2000 	ldr.w	r2, [r8]
 800aae0:	3a01      	subs	r2, #1
 800aae2:	42b2      	cmp	r2, r6
 800aae4:	d10a      	bne.n	800aafc <__gethex+0x3f0>
 800aae6:	1171      	asrs	r1, r6, #5
 800aae8:	2201      	movs	r2, #1
 800aaea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aaee:	f006 061f 	and.w	r6, r6, #31
 800aaf2:	fa02 f606 	lsl.w	r6, r2, r6
 800aaf6:	421e      	tst	r6, r3
 800aaf8:	bf18      	it	ne
 800aafa:	4617      	movne	r7, r2
 800aafc:	f047 0720 	orr.w	r7, r7, #32
 800ab00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab02:	601c      	str	r4, [r3, #0]
 800ab04:	9b04      	ldr	r3, [sp, #16]
 800ab06:	601d      	str	r5, [r3, #0]
 800ab08:	e695      	b.n	800a836 <__gethex+0x12a>
 800ab0a:	4299      	cmp	r1, r3
 800ab0c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ab10:	d8d8      	bhi.n	800aac4 <__gethex+0x3b8>
 800ab12:	68a3      	ldr	r3, [r4, #8]
 800ab14:	459b      	cmp	fp, r3
 800ab16:	db19      	blt.n	800ab4c <__gethex+0x440>
 800ab18:	6861      	ldr	r1, [r4, #4]
 800ab1a:	ee18 0a10 	vmov	r0, s16
 800ab1e:	3101      	adds	r1, #1
 800ab20:	f000 f91a 	bl	800ad58 <_Balloc>
 800ab24:	4681      	mov	r9, r0
 800ab26:	b918      	cbnz	r0, 800ab30 <__gethex+0x424>
 800ab28:	4b1a      	ldr	r3, [pc, #104]	; (800ab94 <__gethex+0x488>)
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	2184      	movs	r1, #132	; 0x84
 800ab2e:	e6a8      	b.n	800a882 <__gethex+0x176>
 800ab30:	6922      	ldr	r2, [r4, #16]
 800ab32:	3202      	adds	r2, #2
 800ab34:	f104 010c 	add.w	r1, r4, #12
 800ab38:	0092      	lsls	r2, r2, #2
 800ab3a:	300c      	adds	r0, #12
 800ab3c:	f7fd f97a 	bl	8007e34 <memcpy>
 800ab40:	4621      	mov	r1, r4
 800ab42:	ee18 0a10 	vmov	r0, s16
 800ab46:	f000 f947 	bl	800add8 <_Bfree>
 800ab4a:	464c      	mov	r4, r9
 800ab4c:	6923      	ldr	r3, [r4, #16]
 800ab4e:	1c5a      	adds	r2, r3, #1
 800ab50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ab54:	6122      	str	r2, [r4, #16]
 800ab56:	2201      	movs	r2, #1
 800ab58:	615a      	str	r2, [r3, #20]
 800ab5a:	e7bb      	b.n	800aad4 <__gethex+0x3c8>
 800ab5c:	6922      	ldr	r2, [r4, #16]
 800ab5e:	455a      	cmp	r2, fp
 800ab60:	dd0b      	ble.n	800ab7a <__gethex+0x46e>
 800ab62:	2101      	movs	r1, #1
 800ab64:	4620      	mov	r0, r4
 800ab66:	f7ff fd69 	bl	800a63c <rshift>
 800ab6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab6e:	3501      	adds	r5, #1
 800ab70:	42ab      	cmp	r3, r5
 800ab72:	f6ff aed0 	blt.w	800a916 <__gethex+0x20a>
 800ab76:	2701      	movs	r7, #1
 800ab78:	e7c0      	b.n	800aafc <__gethex+0x3f0>
 800ab7a:	f016 061f 	ands.w	r6, r6, #31
 800ab7e:	d0fa      	beq.n	800ab76 <__gethex+0x46a>
 800ab80:	4453      	add	r3, sl
 800ab82:	f1c6 0620 	rsb	r6, r6, #32
 800ab86:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ab8a:	f000 f9d7 	bl	800af3c <__hi0bits>
 800ab8e:	42b0      	cmp	r0, r6
 800ab90:	dbe7      	blt.n	800ab62 <__gethex+0x456>
 800ab92:	e7f0      	b.n	800ab76 <__gethex+0x46a>
 800ab94:	0800cb00 	.word	0x0800cb00

0800ab98 <L_shift>:
 800ab98:	f1c2 0208 	rsb	r2, r2, #8
 800ab9c:	0092      	lsls	r2, r2, #2
 800ab9e:	b570      	push	{r4, r5, r6, lr}
 800aba0:	f1c2 0620 	rsb	r6, r2, #32
 800aba4:	6843      	ldr	r3, [r0, #4]
 800aba6:	6804      	ldr	r4, [r0, #0]
 800aba8:	fa03 f506 	lsl.w	r5, r3, r6
 800abac:	432c      	orrs	r4, r5
 800abae:	40d3      	lsrs	r3, r2
 800abb0:	6004      	str	r4, [r0, #0]
 800abb2:	f840 3f04 	str.w	r3, [r0, #4]!
 800abb6:	4288      	cmp	r0, r1
 800abb8:	d3f4      	bcc.n	800aba4 <L_shift+0xc>
 800abba:	bd70      	pop	{r4, r5, r6, pc}

0800abbc <__match>:
 800abbc:	b530      	push	{r4, r5, lr}
 800abbe:	6803      	ldr	r3, [r0, #0]
 800abc0:	3301      	adds	r3, #1
 800abc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abc6:	b914      	cbnz	r4, 800abce <__match+0x12>
 800abc8:	6003      	str	r3, [r0, #0]
 800abca:	2001      	movs	r0, #1
 800abcc:	bd30      	pop	{r4, r5, pc}
 800abce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abd2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800abd6:	2d19      	cmp	r5, #25
 800abd8:	bf98      	it	ls
 800abda:	3220      	addls	r2, #32
 800abdc:	42a2      	cmp	r2, r4
 800abde:	d0f0      	beq.n	800abc2 <__match+0x6>
 800abe0:	2000      	movs	r0, #0
 800abe2:	e7f3      	b.n	800abcc <__match+0x10>

0800abe4 <__hexnan>:
 800abe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abe8:	680b      	ldr	r3, [r1, #0]
 800abea:	115e      	asrs	r6, r3, #5
 800abec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800abf0:	f013 031f 	ands.w	r3, r3, #31
 800abf4:	b087      	sub	sp, #28
 800abf6:	bf18      	it	ne
 800abf8:	3604      	addne	r6, #4
 800abfa:	2500      	movs	r5, #0
 800abfc:	1f37      	subs	r7, r6, #4
 800abfe:	4690      	mov	r8, r2
 800ac00:	6802      	ldr	r2, [r0, #0]
 800ac02:	9301      	str	r3, [sp, #4]
 800ac04:	4682      	mov	sl, r0
 800ac06:	f846 5c04 	str.w	r5, [r6, #-4]
 800ac0a:	46b9      	mov	r9, r7
 800ac0c:	463c      	mov	r4, r7
 800ac0e:	9502      	str	r5, [sp, #8]
 800ac10:	46ab      	mov	fp, r5
 800ac12:	7851      	ldrb	r1, [r2, #1]
 800ac14:	1c53      	adds	r3, r2, #1
 800ac16:	9303      	str	r3, [sp, #12]
 800ac18:	b341      	cbz	r1, 800ac6c <__hexnan+0x88>
 800ac1a:	4608      	mov	r0, r1
 800ac1c:	9205      	str	r2, [sp, #20]
 800ac1e:	9104      	str	r1, [sp, #16]
 800ac20:	f7ff fd5e 	bl	800a6e0 <__hexdig_fun>
 800ac24:	2800      	cmp	r0, #0
 800ac26:	d14f      	bne.n	800acc8 <__hexnan+0xe4>
 800ac28:	9904      	ldr	r1, [sp, #16]
 800ac2a:	9a05      	ldr	r2, [sp, #20]
 800ac2c:	2920      	cmp	r1, #32
 800ac2e:	d818      	bhi.n	800ac62 <__hexnan+0x7e>
 800ac30:	9b02      	ldr	r3, [sp, #8]
 800ac32:	459b      	cmp	fp, r3
 800ac34:	dd13      	ble.n	800ac5e <__hexnan+0x7a>
 800ac36:	454c      	cmp	r4, r9
 800ac38:	d206      	bcs.n	800ac48 <__hexnan+0x64>
 800ac3a:	2d07      	cmp	r5, #7
 800ac3c:	dc04      	bgt.n	800ac48 <__hexnan+0x64>
 800ac3e:	462a      	mov	r2, r5
 800ac40:	4649      	mov	r1, r9
 800ac42:	4620      	mov	r0, r4
 800ac44:	f7ff ffa8 	bl	800ab98 <L_shift>
 800ac48:	4544      	cmp	r4, r8
 800ac4a:	d950      	bls.n	800acee <__hexnan+0x10a>
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	f1a4 0904 	sub.w	r9, r4, #4
 800ac52:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac56:	f8cd b008 	str.w	fp, [sp, #8]
 800ac5a:	464c      	mov	r4, r9
 800ac5c:	461d      	mov	r5, r3
 800ac5e:	9a03      	ldr	r2, [sp, #12]
 800ac60:	e7d7      	b.n	800ac12 <__hexnan+0x2e>
 800ac62:	2929      	cmp	r1, #41	; 0x29
 800ac64:	d156      	bne.n	800ad14 <__hexnan+0x130>
 800ac66:	3202      	adds	r2, #2
 800ac68:	f8ca 2000 	str.w	r2, [sl]
 800ac6c:	f1bb 0f00 	cmp.w	fp, #0
 800ac70:	d050      	beq.n	800ad14 <__hexnan+0x130>
 800ac72:	454c      	cmp	r4, r9
 800ac74:	d206      	bcs.n	800ac84 <__hexnan+0xa0>
 800ac76:	2d07      	cmp	r5, #7
 800ac78:	dc04      	bgt.n	800ac84 <__hexnan+0xa0>
 800ac7a:	462a      	mov	r2, r5
 800ac7c:	4649      	mov	r1, r9
 800ac7e:	4620      	mov	r0, r4
 800ac80:	f7ff ff8a 	bl	800ab98 <L_shift>
 800ac84:	4544      	cmp	r4, r8
 800ac86:	d934      	bls.n	800acf2 <__hexnan+0x10e>
 800ac88:	f1a8 0204 	sub.w	r2, r8, #4
 800ac8c:	4623      	mov	r3, r4
 800ac8e:	f853 1b04 	ldr.w	r1, [r3], #4
 800ac92:	f842 1f04 	str.w	r1, [r2, #4]!
 800ac96:	429f      	cmp	r7, r3
 800ac98:	d2f9      	bcs.n	800ac8e <__hexnan+0xaa>
 800ac9a:	1b3b      	subs	r3, r7, r4
 800ac9c:	f023 0303 	bic.w	r3, r3, #3
 800aca0:	3304      	adds	r3, #4
 800aca2:	3401      	adds	r4, #1
 800aca4:	3e03      	subs	r6, #3
 800aca6:	42b4      	cmp	r4, r6
 800aca8:	bf88      	it	hi
 800acaa:	2304      	movhi	r3, #4
 800acac:	4443      	add	r3, r8
 800acae:	2200      	movs	r2, #0
 800acb0:	f843 2b04 	str.w	r2, [r3], #4
 800acb4:	429f      	cmp	r7, r3
 800acb6:	d2fb      	bcs.n	800acb0 <__hexnan+0xcc>
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	b91b      	cbnz	r3, 800acc4 <__hexnan+0xe0>
 800acbc:	4547      	cmp	r7, r8
 800acbe:	d127      	bne.n	800ad10 <__hexnan+0x12c>
 800acc0:	2301      	movs	r3, #1
 800acc2:	603b      	str	r3, [r7, #0]
 800acc4:	2005      	movs	r0, #5
 800acc6:	e026      	b.n	800ad16 <__hexnan+0x132>
 800acc8:	3501      	adds	r5, #1
 800acca:	2d08      	cmp	r5, #8
 800accc:	f10b 0b01 	add.w	fp, fp, #1
 800acd0:	dd06      	ble.n	800ace0 <__hexnan+0xfc>
 800acd2:	4544      	cmp	r4, r8
 800acd4:	d9c3      	bls.n	800ac5e <__hexnan+0x7a>
 800acd6:	2300      	movs	r3, #0
 800acd8:	f844 3c04 	str.w	r3, [r4, #-4]
 800acdc:	2501      	movs	r5, #1
 800acde:	3c04      	subs	r4, #4
 800ace0:	6822      	ldr	r2, [r4, #0]
 800ace2:	f000 000f 	and.w	r0, r0, #15
 800ace6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800acea:	6022      	str	r2, [r4, #0]
 800acec:	e7b7      	b.n	800ac5e <__hexnan+0x7a>
 800acee:	2508      	movs	r5, #8
 800acf0:	e7b5      	b.n	800ac5e <__hexnan+0x7a>
 800acf2:	9b01      	ldr	r3, [sp, #4]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d0df      	beq.n	800acb8 <__hexnan+0xd4>
 800acf8:	f04f 32ff 	mov.w	r2, #4294967295
 800acfc:	f1c3 0320 	rsb	r3, r3, #32
 800ad00:	fa22 f303 	lsr.w	r3, r2, r3
 800ad04:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ad08:	401a      	ands	r2, r3
 800ad0a:	f846 2c04 	str.w	r2, [r6, #-4]
 800ad0e:	e7d3      	b.n	800acb8 <__hexnan+0xd4>
 800ad10:	3f04      	subs	r7, #4
 800ad12:	e7d1      	b.n	800acb8 <__hexnan+0xd4>
 800ad14:	2004      	movs	r0, #4
 800ad16:	b007      	add	sp, #28
 800ad18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ad1c <_localeconv_r>:
 800ad1c:	4800      	ldr	r0, [pc, #0]	; (800ad20 <_localeconv_r+0x4>)
 800ad1e:	4770      	bx	lr
 800ad20:	20000264 	.word	0x20000264

0800ad24 <malloc>:
 800ad24:	4b02      	ldr	r3, [pc, #8]	; (800ad30 <malloc+0xc>)
 800ad26:	4601      	mov	r1, r0
 800ad28:	6818      	ldr	r0, [r3, #0]
 800ad2a:	f000 bd59 	b.w	800b7e0 <_malloc_r>
 800ad2e:	bf00      	nop
 800ad30:	2000010c 	.word	0x2000010c

0800ad34 <__ascii_mbtowc>:
 800ad34:	b082      	sub	sp, #8
 800ad36:	b901      	cbnz	r1, 800ad3a <__ascii_mbtowc+0x6>
 800ad38:	a901      	add	r1, sp, #4
 800ad3a:	b142      	cbz	r2, 800ad4e <__ascii_mbtowc+0x1a>
 800ad3c:	b14b      	cbz	r3, 800ad52 <__ascii_mbtowc+0x1e>
 800ad3e:	7813      	ldrb	r3, [r2, #0]
 800ad40:	600b      	str	r3, [r1, #0]
 800ad42:	7812      	ldrb	r2, [r2, #0]
 800ad44:	1e10      	subs	r0, r2, #0
 800ad46:	bf18      	it	ne
 800ad48:	2001      	movne	r0, #1
 800ad4a:	b002      	add	sp, #8
 800ad4c:	4770      	bx	lr
 800ad4e:	4610      	mov	r0, r2
 800ad50:	e7fb      	b.n	800ad4a <__ascii_mbtowc+0x16>
 800ad52:	f06f 0001 	mvn.w	r0, #1
 800ad56:	e7f8      	b.n	800ad4a <__ascii_mbtowc+0x16>

0800ad58 <_Balloc>:
 800ad58:	b570      	push	{r4, r5, r6, lr}
 800ad5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ad5c:	4604      	mov	r4, r0
 800ad5e:	460d      	mov	r5, r1
 800ad60:	b976      	cbnz	r6, 800ad80 <_Balloc+0x28>
 800ad62:	2010      	movs	r0, #16
 800ad64:	f7ff ffde 	bl	800ad24 <malloc>
 800ad68:	4602      	mov	r2, r0
 800ad6a:	6260      	str	r0, [r4, #36]	; 0x24
 800ad6c:	b920      	cbnz	r0, 800ad78 <_Balloc+0x20>
 800ad6e:	4b18      	ldr	r3, [pc, #96]	; (800add0 <_Balloc+0x78>)
 800ad70:	4818      	ldr	r0, [pc, #96]	; (800add4 <_Balloc+0x7c>)
 800ad72:	2166      	movs	r1, #102	; 0x66
 800ad74:	f000 ff3e 	bl	800bbf4 <__assert_func>
 800ad78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad7c:	6006      	str	r6, [r0, #0]
 800ad7e:	60c6      	str	r6, [r0, #12]
 800ad80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ad82:	68f3      	ldr	r3, [r6, #12]
 800ad84:	b183      	cbz	r3, 800ada8 <_Balloc+0x50>
 800ad86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad88:	68db      	ldr	r3, [r3, #12]
 800ad8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ad8e:	b9b8      	cbnz	r0, 800adc0 <_Balloc+0x68>
 800ad90:	2101      	movs	r1, #1
 800ad92:	fa01 f605 	lsl.w	r6, r1, r5
 800ad96:	1d72      	adds	r2, r6, #5
 800ad98:	0092      	lsls	r2, r2, #2
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	f000 fc9d 	bl	800b6da <_calloc_r>
 800ada0:	b160      	cbz	r0, 800adbc <_Balloc+0x64>
 800ada2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ada6:	e00e      	b.n	800adc6 <_Balloc+0x6e>
 800ada8:	2221      	movs	r2, #33	; 0x21
 800adaa:	2104      	movs	r1, #4
 800adac:	4620      	mov	r0, r4
 800adae:	f000 fc94 	bl	800b6da <_calloc_r>
 800adb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800adb4:	60f0      	str	r0, [r6, #12]
 800adb6:	68db      	ldr	r3, [r3, #12]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d1e4      	bne.n	800ad86 <_Balloc+0x2e>
 800adbc:	2000      	movs	r0, #0
 800adbe:	bd70      	pop	{r4, r5, r6, pc}
 800adc0:	6802      	ldr	r2, [r0, #0]
 800adc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800adc6:	2300      	movs	r3, #0
 800adc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800adcc:	e7f7      	b.n	800adbe <_Balloc+0x66>
 800adce:	bf00      	nop
 800add0:	0800ca8e 	.word	0x0800ca8e
 800add4:	0800cb8c 	.word	0x0800cb8c

0800add8 <_Bfree>:
 800add8:	b570      	push	{r4, r5, r6, lr}
 800adda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800addc:	4605      	mov	r5, r0
 800adde:	460c      	mov	r4, r1
 800ade0:	b976      	cbnz	r6, 800ae00 <_Bfree+0x28>
 800ade2:	2010      	movs	r0, #16
 800ade4:	f7ff ff9e 	bl	800ad24 <malloc>
 800ade8:	4602      	mov	r2, r0
 800adea:	6268      	str	r0, [r5, #36]	; 0x24
 800adec:	b920      	cbnz	r0, 800adf8 <_Bfree+0x20>
 800adee:	4b09      	ldr	r3, [pc, #36]	; (800ae14 <_Bfree+0x3c>)
 800adf0:	4809      	ldr	r0, [pc, #36]	; (800ae18 <_Bfree+0x40>)
 800adf2:	218a      	movs	r1, #138	; 0x8a
 800adf4:	f000 fefe 	bl	800bbf4 <__assert_func>
 800adf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800adfc:	6006      	str	r6, [r0, #0]
 800adfe:	60c6      	str	r6, [r0, #12]
 800ae00:	b13c      	cbz	r4, 800ae12 <_Bfree+0x3a>
 800ae02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ae04:	6862      	ldr	r2, [r4, #4]
 800ae06:	68db      	ldr	r3, [r3, #12]
 800ae08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae0c:	6021      	str	r1, [r4, #0]
 800ae0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae12:	bd70      	pop	{r4, r5, r6, pc}
 800ae14:	0800ca8e 	.word	0x0800ca8e
 800ae18:	0800cb8c 	.word	0x0800cb8c

0800ae1c <__multadd>:
 800ae1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae20:	690d      	ldr	r5, [r1, #16]
 800ae22:	4607      	mov	r7, r0
 800ae24:	460c      	mov	r4, r1
 800ae26:	461e      	mov	r6, r3
 800ae28:	f101 0c14 	add.w	ip, r1, #20
 800ae2c:	2000      	movs	r0, #0
 800ae2e:	f8dc 3000 	ldr.w	r3, [ip]
 800ae32:	b299      	uxth	r1, r3
 800ae34:	fb02 6101 	mla	r1, r2, r1, r6
 800ae38:	0c1e      	lsrs	r6, r3, #16
 800ae3a:	0c0b      	lsrs	r3, r1, #16
 800ae3c:	fb02 3306 	mla	r3, r2, r6, r3
 800ae40:	b289      	uxth	r1, r1
 800ae42:	3001      	adds	r0, #1
 800ae44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ae48:	4285      	cmp	r5, r0
 800ae4a:	f84c 1b04 	str.w	r1, [ip], #4
 800ae4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ae52:	dcec      	bgt.n	800ae2e <__multadd+0x12>
 800ae54:	b30e      	cbz	r6, 800ae9a <__multadd+0x7e>
 800ae56:	68a3      	ldr	r3, [r4, #8]
 800ae58:	42ab      	cmp	r3, r5
 800ae5a:	dc19      	bgt.n	800ae90 <__multadd+0x74>
 800ae5c:	6861      	ldr	r1, [r4, #4]
 800ae5e:	4638      	mov	r0, r7
 800ae60:	3101      	adds	r1, #1
 800ae62:	f7ff ff79 	bl	800ad58 <_Balloc>
 800ae66:	4680      	mov	r8, r0
 800ae68:	b928      	cbnz	r0, 800ae76 <__multadd+0x5a>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	4b0c      	ldr	r3, [pc, #48]	; (800aea0 <__multadd+0x84>)
 800ae6e:	480d      	ldr	r0, [pc, #52]	; (800aea4 <__multadd+0x88>)
 800ae70:	21b5      	movs	r1, #181	; 0xb5
 800ae72:	f000 febf 	bl	800bbf4 <__assert_func>
 800ae76:	6922      	ldr	r2, [r4, #16]
 800ae78:	3202      	adds	r2, #2
 800ae7a:	f104 010c 	add.w	r1, r4, #12
 800ae7e:	0092      	lsls	r2, r2, #2
 800ae80:	300c      	adds	r0, #12
 800ae82:	f7fc ffd7 	bl	8007e34 <memcpy>
 800ae86:	4621      	mov	r1, r4
 800ae88:	4638      	mov	r0, r7
 800ae8a:	f7ff ffa5 	bl	800add8 <_Bfree>
 800ae8e:	4644      	mov	r4, r8
 800ae90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ae94:	3501      	adds	r5, #1
 800ae96:	615e      	str	r6, [r3, #20]
 800ae98:	6125      	str	r5, [r4, #16]
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aea0:	0800cb00 	.word	0x0800cb00
 800aea4:	0800cb8c 	.word	0x0800cb8c

0800aea8 <__s2b>:
 800aea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aeac:	460c      	mov	r4, r1
 800aeae:	4615      	mov	r5, r2
 800aeb0:	461f      	mov	r7, r3
 800aeb2:	2209      	movs	r2, #9
 800aeb4:	3308      	adds	r3, #8
 800aeb6:	4606      	mov	r6, r0
 800aeb8:	fb93 f3f2 	sdiv	r3, r3, r2
 800aebc:	2100      	movs	r1, #0
 800aebe:	2201      	movs	r2, #1
 800aec0:	429a      	cmp	r2, r3
 800aec2:	db09      	blt.n	800aed8 <__s2b+0x30>
 800aec4:	4630      	mov	r0, r6
 800aec6:	f7ff ff47 	bl	800ad58 <_Balloc>
 800aeca:	b940      	cbnz	r0, 800aede <__s2b+0x36>
 800aecc:	4602      	mov	r2, r0
 800aece:	4b19      	ldr	r3, [pc, #100]	; (800af34 <__s2b+0x8c>)
 800aed0:	4819      	ldr	r0, [pc, #100]	; (800af38 <__s2b+0x90>)
 800aed2:	21ce      	movs	r1, #206	; 0xce
 800aed4:	f000 fe8e 	bl	800bbf4 <__assert_func>
 800aed8:	0052      	lsls	r2, r2, #1
 800aeda:	3101      	adds	r1, #1
 800aedc:	e7f0      	b.n	800aec0 <__s2b+0x18>
 800aede:	9b08      	ldr	r3, [sp, #32]
 800aee0:	6143      	str	r3, [r0, #20]
 800aee2:	2d09      	cmp	r5, #9
 800aee4:	f04f 0301 	mov.w	r3, #1
 800aee8:	6103      	str	r3, [r0, #16]
 800aeea:	dd16      	ble.n	800af1a <__s2b+0x72>
 800aeec:	f104 0909 	add.w	r9, r4, #9
 800aef0:	46c8      	mov	r8, r9
 800aef2:	442c      	add	r4, r5
 800aef4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aef8:	4601      	mov	r1, r0
 800aefa:	3b30      	subs	r3, #48	; 0x30
 800aefc:	220a      	movs	r2, #10
 800aefe:	4630      	mov	r0, r6
 800af00:	f7ff ff8c 	bl	800ae1c <__multadd>
 800af04:	45a0      	cmp	r8, r4
 800af06:	d1f5      	bne.n	800aef4 <__s2b+0x4c>
 800af08:	f1a5 0408 	sub.w	r4, r5, #8
 800af0c:	444c      	add	r4, r9
 800af0e:	1b2d      	subs	r5, r5, r4
 800af10:	1963      	adds	r3, r4, r5
 800af12:	42bb      	cmp	r3, r7
 800af14:	db04      	blt.n	800af20 <__s2b+0x78>
 800af16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af1a:	340a      	adds	r4, #10
 800af1c:	2509      	movs	r5, #9
 800af1e:	e7f6      	b.n	800af0e <__s2b+0x66>
 800af20:	f814 3b01 	ldrb.w	r3, [r4], #1
 800af24:	4601      	mov	r1, r0
 800af26:	3b30      	subs	r3, #48	; 0x30
 800af28:	220a      	movs	r2, #10
 800af2a:	4630      	mov	r0, r6
 800af2c:	f7ff ff76 	bl	800ae1c <__multadd>
 800af30:	e7ee      	b.n	800af10 <__s2b+0x68>
 800af32:	bf00      	nop
 800af34:	0800cb00 	.word	0x0800cb00
 800af38:	0800cb8c 	.word	0x0800cb8c

0800af3c <__hi0bits>:
 800af3c:	0c03      	lsrs	r3, r0, #16
 800af3e:	041b      	lsls	r3, r3, #16
 800af40:	b9d3      	cbnz	r3, 800af78 <__hi0bits+0x3c>
 800af42:	0400      	lsls	r0, r0, #16
 800af44:	2310      	movs	r3, #16
 800af46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800af4a:	bf04      	itt	eq
 800af4c:	0200      	lsleq	r0, r0, #8
 800af4e:	3308      	addeq	r3, #8
 800af50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800af54:	bf04      	itt	eq
 800af56:	0100      	lsleq	r0, r0, #4
 800af58:	3304      	addeq	r3, #4
 800af5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800af5e:	bf04      	itt	eq
 800af60:	0080      	lsleq	r0, r0, #2
 800af62:	3302      	addeq	r3, #2
 800af64:	2800      	cmp	r0, #0
 800af66:	db05      	blt.n	800af74 <__hi0bits+0x38>
 800af68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800af6c:	f103 0301 	add.w	r3, r3, #1
 800af70:	bf08      	it	eq
 800af72:	2320      	moveq	r3, #32
 800af74:	4618      	mov	r0, r3
 800af76:	4770      	bx	lr
 800af78:	2300      	movs	r3, #0
 800af7a:	e7e4      	b.n	800af46 <__hi0bits+0xa>

0800af7c <__lo0bits>:
 800af7c:	6803      	ldr	r3, [r0, #0]
 800af7e:	f013 0207 	ands.w	r2, r3, #7
 800af82:	4601      	mov	r1, r0
 800af84:	d00b      	beq.n	800af9e <__lo0bits+0x22>
 800af86:	07da      	lsls	r2, r3, #31
 800af88:	d423      	bmi.n	800afd2 <__lo0bits+0x56>
 800af8a:	0798      	lsls	r0, r3, #30
 800af8c:	bf49      	itett	mi
 800af8e:	085b      	lsrmi	r3, r3, #1
 800af90:	089b      	lsrpl	r3, r3, #2
 800af92:	2001      	movmi	r0, #1
 800af94:	600b      	strmi	r3, [r1, #0]
 800af96:	bf5c      	itt	pl
 800af98:	600b      	strpl	r3, [r1, #0]
 800af9a:	2002      	movpl	r0, #2
 800af9c:	4770      	bx	lr
 800af9e:	b298      	uxth	r0, r3
 800afa0:	b9a8      	cbnz	r0, 800afce <__lo0bits+0x52>
 800afa2:	0c1b      	lsrs	r3, r3, #16
 800afa4:	2010      	movs	r0, #16
 800afa6:	b2da      	uxtb	r2, r3
 800afa8:	b90a      	cbnz	r2, 800afae <__lo0bits+0x32>
 800afaa:	3008      	adds	r0, #8
 800afac:	0a1b      	lsrs	r3, r3, #8
 800afae:	071a      	lsls	r2, r3, #28
 800afb0:	bf04      	itt	eq
 800afb2:	091b      	lsreq	r3, r3, #4
 800afb4:	3004      	addeq	r0, #4
 800afb6:	079a      	lsls	r2, r3, #30
 800afb8:	bf04      	itt	eq
 800afba:	089b      	lsreq	r3, r3, #2
 800afbc:	3002      	addeq	r0, #2
 800afbe:	07da      	lsls	r2, r3, #31
 800afc0:	d403      	bmi.n	800afca <__lo0bits+0x4e>
 800afc2:	085b      	lsrs	r3, r3, #1
 800afc4:	f100 0001 	add.w	r0, r0, #1
 800afc8:	d005      	beq.n	800afd6 <__lo0bits+0x5a>
 800afca:	600b      	str	r3, [r1, #0]
 800afcc:	4770      	bx	lr
 800afce:	4610      	mov	r0, r2
 800afd0:	e7e9      	b.n	800afa6 <__lo0bits+0x2a>
 800afd2:	2000      	movs	r0, #0
 800afd4:	4770      	bx	lr
 800afd6:	2020      	movs	r0, #32
 800afd8:	4770      	bx	lr
	...

0800afdc <__i2b>:
 800afdc:	b510      	push	{r4, lr}
 800afde:	460c      	mov	r4, r1
 800afe0:	2101      	movs	r1, #1
 800afe2:	f7ff feb9 	bl	800ad58 <_Balloc>
 800afe6:	4602      	mov	r2, r0
 800afe8:	b928      	cbnz	r0, 800aff6 <__i2b+0x1a>
 800afea:	4b05      	ldr	r3, [pc, #20]	; (800b000 <__i2b+0x24>)
 800afec:	4805      	ldr	r0, [pc, #20]	; (800b004 <__i2b+0x28>)
 800afee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aff2:	f000 fdff 	bl	800bbf4 <__assert_func>
 800aff6:	2301      	movs	r3, #1
 800aff8:	6144      	str	r4, [r0, #20]
 800affa:	6103      	str	r3, [r0, #16]
 800affc:	bd10      	pop	{r4, pc}
 800affe:	bf00      	nop
 800b000:	0800cb00 	.word	0x0800cb00
 800b004:	0800cb8c 	.word	0x0800cb8c

0800b008 <__multiply>:
 800b008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b00c:	4691      	mov	r9, r2
 800b00e:	690a      	ldr	r2, [r1, #16]
 800b010:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b014:	429a      	cmp	r2, r3
 800b016:	bfb8      	it	lt
 800b018:	460b      	movlt	r3, r1
 800b01a:	460c      	mov	r4, r1
 800b01c:	bfbc      	itt	lt
 800b01e:	464c      	movlt	r4, r9
 800b020:	4699      	movlt	r9, r3
 800b022:	6927      	ldr	r7, [r4, #16]
 800b024:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b028:	68a3      	ldr	r3, [r4, #8]
 800b02a:	6861      	ldr	r1, [r4, #4]
 800b02c:	eb07 060a 	add.w	r6, r7, sl
 800b030:	42b3      	cmp	r3, r6
 800b032:	b085      	sub	sp, #20
 800b034:	bfb8      	it	lt
 800b036:	3101      	addlt	r1, #1
 800b038:	f7ff fe8e 	bl	800ad58 <_Balloc>
 800b03c:	b930      	cbnz	r0, 800b04c <__multiply+0x44>
 800b03e:	4602      	mov	r2, r0
 800b040:	4b44      	ldr	r3, [pc, #272]	; (800b154 <__multiply+0x14c>)
 800b042:	4845      	ldr	r0, [pc, #276]	; (800b158 <__multiply+0x150>)
 800b044:	f240 115d 	movw	r1, #349	; 0x15d
 800b048:	f000 fdd4 	bl	800bbf4 <__assert_func>
 800b04c:	f100 0514 	add.w	r5, r0, #20
 800b050:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b054:	462b      	mov	r3, r5
 800b056:	2200      	movs	r2, #0
 800b058:	4543      	cmp	r3, r8
 800b05a:	d321      	bcc.n	800b0a0 <__multiply+0x98>
 800b05c:	f104 0314 	add.w	r3, r4, #20
 800b060:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b064:	f109 0314 	add.w	r3, r9, #20
 800b068:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b06c:	9202      	str	r2, [sp, #8]
 800b06e:	1b3a      	subs	r2, r7, r4
 800b070:	3a15      	subs	r2, #21
 800b072:	f022 0203 	bic.w	r2, r2, #3
 800b076:	3204      	adds	r2, #4
 800b078:	f104 0115 	add.w	r1, r4, #21
 800b07c:	428f      	cmp	r7, r1
 800b07e:	bf38      	it	cc
 800b080:	2204      	movcc	r2, #4
 800b082:	9201      	str	r2, [sp, #4]
 800b084:	9a02      	ldr	r2, [sp, #8]
 800b086:	9303      	str	r3, [sp, #12]
 800b088:	429a      	cmp	r2, r3
 800b08a:	d80c      	bhi.n	800b0a6 <__multiply+0x9e>
 800b08c:	2e00      	cmp	r6, #0
 800b08e:	dd03      	ble.n	800b098 <__multiply+0x90>
 800b090:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b094:	2b00      	cmp	r3, #0
 800b096:	d05a      	beq.n	800b14e <__multiply+0x146>
 800b098:	6106      	str	r6, [r0, #16]
 800b09a:	b005      	add	sp, #20
 800b09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0a0:	f843 2b04 	str.w	r2, [r3], #4
 800b0a4:	e7d8      	b.n	800b058 <__multiply+0x50>
 800b0a6:	f8b3 a000 	ldrh.w	sl, [r3]
 800b0aa:	f1ba 0f00 	cmp.w	sl, #0
 800b0ae:	d024      	beq.n	800b0fa <__multiply+0xf2>
 800b0b0:	f104 0e14 	add.w	lr, r4, #20
 800b0b4:	46a9      	mov	r9, r5
 800b0b6:	f04f 0c00 	mov.w	ip, #0
 800b0ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b0be:	f8d9 1000 	ldr.w	r1, [r9]
 800b0c2:	fa1f fb82 	uxth.w	fp, r2
 800b0c6:	b289      	uxth	r1, r1
 800b0c8:	fb0a 110b 	mla	r1, sl, fp, r1
 800b0cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b0d0:	f8d9 2000 	ldr.w	r2, [r9]
 800b0d4:	4461      	add	r1, ip
 800b0d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b0da:	fb0a c20b 	mla	r2, sl, fp, ip
 800b0de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b0e2:	b289      	uxth	r1, r1
 800b0e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b0e8:	4577      	cmp	r7, lr
 800b0ea:	f849 1b04 	str.w	r1, [r9], #4
 800b0ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b0f2:	d8e2      	bhi.n	800b0ba <__multiply+0xb2>
 800b0f4:	9a01      	ldr	r2, [sp, #4]
 800b0f6:	f845 c002 	str.w	ip, [r5, r2]
 800b0fa:	9a03      	ldr	r2, [sp, #12]
 800b0fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b100:	3304      	adds	r3, #4
 800b102:	f1b9 0f00 	cmp.w	r9, #0
 800b106:	d020      	beq.n	800b14a <__multiply+0x142>
 800b108:	6829      	ldr	r1, [r5, #0]
 800b10a:	f104 0c14 	add.w	ip, r4, #20
 800b10e:	46ae      	mov	lr, r5
 800b110:	f04f 0a00 	mov.w	sl, #0
 800b114:	f8bc b000 	ldrh.w	fp, [ip]
 800b118:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b11c:	fb09 220b 	mla	r2, r9, fp, r2
 800b120:	4492      	add	sl, r2
 800b122:	b289      	uxth	r1, r1
 800b124:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b128:	f84e 1b04 	str.w	r1, [lr], #4
 800b12c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b130:	f8be 1000 	ldrh.w	r1, [lr]
 800b134:	0c12      	lsrs	r2, r2, #16
 800b136:	fb09 1102 	mla	r1, r9, r2, r1
 800b13a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b13e:	4567      	cmp	r7, ip
 800b140:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b144:	d8e6      	bhi.n	800b114 <__multiply+0x10c>
 800b146:	9a01      	ldr	r2, [sp, #4]
 800b148:	50a9      	str	r1, [r5, r2]
 800b14a:	3504      	adds	r5, #4
 800b14c:	e79a      	b.n	800b084 <__multiply+0x7c>
 800b14e:	3e01      	subs	r6, #1
 800b150:	e79c      	b.n	800b08c <__multiply+0x84>
 800b152:	bf00      	nop
 800b154:	0800cb00 	.word	0x0800cb00
 800b158:	0800cb8c 	.word	0x0800cb8c

0800b15c <__pow5mult>:
 800b15c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b160:	4615      	mov	r5, r2
 800b162:	f012 0203 	ands.w	r2, r2, #3
 800b166:	4606      	mov	r6, r0
 800b168:	460f      	mov	r7, r1
 800b16a:	d007      	beq.n	800b17c <__pow5mult+0x20>
 800b16c:	4c25      	ldr	r4, [pc, #148]	; (800b204 <__pow5mult+0xa8>)
 800b16e:	3a01      	subs	r2, #1
 800b170:	2300      	movs	r3, #0
 800b172:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b176:	f7ff fe51 	bl	800ae1c <__multadd>
 800b17a:	4607      	mov	r7, r0
 800b17c:	10ad      	asrs	r5, r5, #2
 800b17e:	d03d      	beq.n	800b1fc <__pow5mult+0xa0>
 800b180:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b182:	b97c      	cbnz	r4, 800b1a4 <__pow5mult+0x48>
 800b184:	2010      	movs	r0, #16
 800b186:	f7ff fdcd 	bl	800ad24 <malloc>
 800b18a:	4602      	mov	r2, r0
 800b18c:	6270      	str	r0, [r6, #36]	; 0x24
 800b18e:	b928      	cbnz	r0, 800b19c <__pow5mult+0x40>
 800b190:	4b1d      	ldr	r3, [pc, #116]	; (800b208 <__pow5mult+0xac>)
 800b192:	481e      	ldr	r0, [pc, #120]	; (800b20c <__pow5mult+0xb0>)
 800b194:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b198:	f000 fd2c 	bl	800bbf4 <__assert_func>
 800b19c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b1a0:	6004      	str	r4, [r0, #0]
 800b1a2:	60c4      	str	r4, [r0, #12]
 800b1a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b1a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b1ac:	b94c      	cbnz	r4, 800b1c2 <__pow5mult+0x66>
 800b1ae:	f240 2171 	movw	r1, #625	; 0x271
 800b1b2:	4630      	mov	r0, r6
 800b1b4:	f7ff ff12 	bl	800afdc <__i2b>
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	f8c8 0008 	str.w	r0, [r8, #8]
 800b1be:	4604      	mov	r4, r0
 800b1c0:	6003      	str	r3, [r0, #0]
 800b1c2:	f04f 0900 	mov.w	r9, #0
 800b1c6:	07eb      	lsls	r3, r5, #31
 800b1c8:	d50a      	bpl.n	800b1e0 <__pow5mult+0x84>
 800b1ca:	4639      	mov	r1, r7
 800b1cc:	4622      	mov	r2, r4
 800b1ce:	4630      	mov	r0, r6
 800b1d0:	f7ff ff1a 	bl	800b008 <__multiply>
 800b1d4:	4639      	mov	r1, r7
 800b1d6:	4680      	mov	r8, r0
 800b1d8:	4630      	mov	r0, r6
 800b1da:	f7ff fdfd 	bl	800add8 <_Bfree>
 800b1de:	4647      	mov	r7, r8
 800b1e0:	106d      	asrs	r5, r5, #1
 800b1e2:	d00b      	beq.n	800b1fc <__pow5mult+0xa0>
 800b1e4:	6820      	ldr	r0, [r4, #0]
 800b1e6:	b938      	cbnz	r0, 800b1f8 <__pow5mult+0x9c>
 800b1e8:	4622      	mov	r2, r4
 800b1ea:	4621      	mov	r1, r4
 800b1ec:	4630      	mov	r0, r6
 800b1ee:	f7ff ff0b 	bl	800b008 <__multiply>
 800b1f2:	6020      	str	r0, [r4, #0]
 800b1f4:	f8c0 9000 	str.w	r9, [r0]
 800b1f8:	4604      	mov	r4, r0
 800b1fa:	e7e4      	b.n	800b1c6 <__pow5mult+0x6a>
 800b1fc:	4638      	mov	r0, r7
 800b1fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b202:	bf00      	nop
 800b204:	0800ccd8 	.word	0x0800ccd8
 800b208:	0800ca8e 	.word	0x0800ca8e
 800b20c:	0800cb8c 	.word	0x0800cb8c

0800b210 <__lshift>:
 800b210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b214:	460c      	mov	r4, r1
 800b216:	6849      	ldr	r1, [r1, #4]
 800b218:	6923      	ldr	r3, [r4, #16]
 800b21a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b21e:	68a3      	ldr	r3, [r4, #8]
 800b220:	4607      	mov	r7, r0
 800b222:	4691      	mov	r9, r2
 800b224:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b228:	f108 0601 	add.w	r6, r8, #1
 800b22c:	42b3      	cmp	r3, r6
 800b22e:	db0b      	blt.n	800b248 <__lshift+0x38>
 800b230:	4638      	mov	r0, r7
 800b232:	f7ff fd91 	bl	800ad58 <_Balloc>
 800b236:	4605      	mov	r5, r0
 800b238:	b948      	cbnz	r0, 800b24e <__lshift+0x3e>
 800b23a:	4602      	mov	r2, r0
 800b23c:	4b2a      	ldr	r3, [pc, #168]	; (800b2e8 <__lshift+0xd8>)
 800b23e:	482b      	ldr	r0, [pc, #172]	; (800b2ec <__lshift+0xdc>)
 800b240:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b244:	f000 fcd6 	bl	800bbf4 <__assert_func>
 800b248:	3101      	adds	r1, #1
 800b24a:	005b      	lsls	r3, r3, #1
 800b24c:	e7ee      	b.n	800b22c <__lshift+0x1c>
 800b24e:	2300      	movs	r3, #0
 800b250:	f100 0114 	add.w	r1, r0, #20
 800b254:	f100 0210 	add.w	r2, r0, #16
 800b258:	4618      	mov	r0, r3
 800b25a:	4553      	cmp	r3, sl
 800b25c:	db37      	blt.n	800b2ce <__lshift+0xbe>
 800b25e:	6920      	ldr	r0, [r4, #16]
 800b260:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b264:	f104 0314 	add.w	r3, r4, #20
 800b268:	f019 091f 	ands.w	r9, r9, #31
 800b26c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b270:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b274:	d02f      	beq.n	800b2d6 <__lshift+0xc6>
 800b276:	f1c9 0e20 	rsb	lr, r9, #32
 800b27a:	468a      	mov	sl, r1
 800b27c:	f04f 0c00 	mov.w	ip, #0
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	fa02 f209 	lsl.w	r2, r2, r9
 800b286:	ea42 020c 	orr.w	r2, r2, ip
 800b28a:	f84a 2b04 	str.w	r2, [sl], #4
 800b28e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b292:	4298      	cmp	r0, r3
 800b294:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b298:	d8f2      	bhi.n	800b280 <__lshift+0x70>
 800b29a:	1b03      	subs	r3, r0, r4
 800b29c:	3b15      	subs	r3, #21
 800b29e:	f023 0303 	bic.w	r3, r3, #3
 800b2a2:	3304      	adds	r3, #4
 800b2a4:	f104 0215 	add.w	r2, r4, #21
 800b2a8:	4290      	cmp	r0, r2
 800b2aa:	bf38      	it	cc
 800b2ac:	2304      	movcc	r3, #4
 800b2ae:	f841 c003 	str.w	ip, [r1, r3]
 800b2b2:	f1bc 0f00 	cmp.w	ip, #0
 800b2b6:	d001      	beq.n	800b2bc <__lshift+0xac>
 800b2b8:	f108 0602 	add.w	r6, r8, #2
 800b2bc:	3e01      	subs	r6, #1
 800b2be:	4638      	mov	r0, r7
 800b2c0:	612e      	str	r6, [r5, #16]
 800b2c2:	4621      	mov	r1, r4
 800b2c4:	f7ff fd88 	bl	800add8 <_Bfree>
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	e7c1      	b.n	800b25a <__lshift+0x4a>
 800b2d6:	3904      	subs	r1, #4
 800b2d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800b2e0:	4298      	cmp	r0, r3
 800b2e2:	d8f9      	bhi.n	800b2d8 <__lshift+0xc8>
 800b2e4:	e7ea      	b.n	800b2bc <__lshift+0xac>
 800b2e6:	bf00      	nop
 800b2e8:	0800cb00 	.word	0x0800cb00
 800b2ec:	0800cb8c 	.word	0x0800cb8c

0800b2f0 <__mcmp>:
 800b2f0:	b530      	push	{r4, r5, lr}
 800b2f2:	6902      	ldr	r2, [r0, #16]
 800b2f4:	690c      	ldr	r4, [r1, #16]
 800b2f6:	1b12      	subs	r2, r2, r4
 800b2f8:	d10e      	bne.n	800b318 <__mcmp+0x28>
 800b2fa:	f100 0314 	add.w	r3, r0, #20
 800b2fe:	3114      	adds	r1, #20
 800b300:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b304:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b308:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b30c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b310:	42a5      	cmp	r5, r4
 800b312:	d003      	beq.n	800b31c <__mcmp+0x2c>
 800b314:	d305      	bcc.n	800b322 <__mcmp+0x32>
 800b316:	2201      	movs	r2, #1
 800b318:	4610      	mov	r0, r2
 800b31a:	bd30      	pop	{r4, r5, pc}
 800b31c:	4283      	cmp	r3, r0
 800b31e:	d3f3      	bcc.n	800b308 <__mcmp+0x18>
 800b320:	e7fa      	b.n	800b318 <__mcmp+0x28>
 800b322:	f04f 32ff 	mov.w	r2, #4294967295
 800b326:	e7f7      	b.n	800b318 <__mcmp+0x28>

0800b328 <__mdiff>:
 800b328:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b32c:	460c      	mov	r4, r1
 800b32e:	4606      	mov	r6, r0
 800b330:	4611      	mov	r1, r2
 800b332:	4620      	mov	r0, r4
 800b334:	4690      	mov	r8, r2
 800b336:	f7ff ffdb 	bl	800b2f0 <__mcmp>
 800b33a:	1e05      	subs	r5, r0, #0
 800b33c:	d110      	bne.n	800b360 <__mdiff+0x38>
 800b33e:	4629      	mov	r1, r5
 800b340:	4630      	mov	r0, r6
 800b342:	f7ff fd09 	bl	800ad58 <_Balloc>
 800b346:	b930      	cbnz	r0, 800b356 <__mdiff+0x2e>
 800b348:	4b3a      	ldr	r3, [pc, #232]	; (800b434 <__mdiff+0x10c>)
 800b34a:	4602      	mov	r2, r0
 800b34c:	f240 2132 	movw	r1, #562	; 0x232
 800b350:	4839      	ldr	r0, [pc, #228]	; (800b438 <__mdiff+0x110>)
 800b352:	f000 fc4f 	bl	800bbf4 <__assert_func>
 800b356:	2301      	movs	r3, #1
 800b358:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b35c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b360:	bfa4      	itt	ge
 800b362:	4643      	movge	r3, r8
 800b364:	46a0      	movge	r8, r4
 800b366:	4630      	mov	r0, r6
 800b368:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b36c:	bfa6      	itte	ge
 800b36e:	461c      	movge	r4, r3
 800b370:	2500      	movge	r5, #0
 800b372:	2501      	movlt	r5, #1
 800b374:	f7ff fcf0 	bl	800ad58 <_Balloc>
 800b378:	b920      	cbnz	r0, 800b384 <__mdiff+0x5c>
 800b37a:	4b2e      	ldr	r3, [pc, #184]	; (800b434 <__mdiff+0x10c>)
 800b37c:	4602      	mov	r2, r0
 800b37e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b382:	e7e5      	b.n	800b350 <__mdiff+0x28>
 800b384:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b388:	6926      	ldr	r6, [r4, #16]
 800b38a:	60c5      	str	r5, [r0, #12]
 800b38c:	f104 0914 	add.w	r9, r4, #20
 800b390:	f108 0514 	add.w	r5, r8, #20
 800b394:	f100 0e14 	add.w	lr, r0, #20
 800b398:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b39c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b3a0:	f108 0210 	add.w	r2, r8, #16
 800b3a4:	46f2      	mov	sl, lr
 800b3a6:	2100      	movs	r1, #0
 800b3a8:	f859 3b04 	ldr.w	r3, [r9], #4
 800b3ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b3b0:	fa1f f883 	uxth.w	r8, r3
 800b3b4:	fa11 f18b 	uxtah	r1, r1, fp
 800b3b8:	0c1b      	lsrs	r3, r3, #16
 800b3ba:	eba1 0808 	sub.w	r8, r1, r8
 800b3be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b3c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b3c6:	fa1f f888 	uxth.w	r8, r8
 800b3ca:	1419      	asrs	r1, r3, #16
 800b3cc:	454e      	cmp	r6, r9
 800b3ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b3d2:	f84a 3b04 	str.w	r3, [sl], #4
 800b3d6:	d8e7      	bhi.n	800b3a8 <__mdiff+0x80>
 800b3d8:	1b33      	subs	r3, r6, r4
 800b3da:	3b15      	subs	r3, #21
 800b3dc:	f023 0303 	bic.w	r3, r3, #3
 800b3e0:	3304      	adds	r3, #4
 800b3e2:	3415      	adds	r4, #21
 800b3e4:	42a6      	cmp	r6, r4
 800b3e6:	bf38      	it	cc
 800b3e8:	2304      	movcc	r3, #4
 800b3ea:	441d      	add	r5, r3
 800b3ec:	4473      	add	r3, lr
 800b3ee:	469e      	mov	lr, r3
 800b3f0:	462e      	mov	r6, r5
 800b3f2:	4566      	cmp	r6, ip
 800b3f4:	d30e      	bcc.n	800b414 <__mdiff+0xec>
 800b3f6:	f10c 0203 	add.w	r2, ip, #3
 800b3fa:	1b52      	subs	r2, r2, r5
 800b3fc:	f022 0203 	bic.w	r2, r2, #3
 800b400:	3d03      	subs	r5, #3
 800b402:	45ac      	cmp	ip, r5
 800b404:	bf38      	it	cc
 800b406:	2200      	movcc	r2, #0
 800b408:	441a      	add	r2, r3
 800b40a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b40e:	b17b      	cbz	r3, 800b430 <__mdiff+0x108>
 800b410:	6107      	str	r7, [r0, #16]
 800b412:	e7a3      	b.n	800b35c <__mdiff+0x34>
 800b414:	f856 8b04 	ldr.w	r8, [r6], #4
 800b418:	fa11 f288 	uxtah	r2, r1, r8
 800b41c:	1414      	asrs	r4, r2, #16
 800b41e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b422:	b292      	uxth	r2, r2
 800b424:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b428:	f84e 2b04 	str.w	r2, [lr], #4
 800b42c:	1421      	asrs	r1, r4, #16
 800b42e:	e7e0      	b.n	800b3f2 <__mdiff+0xca>
 800b430:	3f01      	subs	r7, #1
 800b432:	e7ea      	b.n	800b40a <__mdiff+0xe2>
 800b434:	0800cb00 	.word	0x0800cb00
 800b438:	0800cb8c 	.word	0x0800cb8c

0800b43c <__ulp>:
 800b43c:	b082      	sub	sp, #8
 800b43e:	ed8d 0b00 	vstr	d0, [sp]
 800b442:	9b01      	ldr	r3, [sp, #4]
 800b444:	4912      	ldr	r1, [pc, #72]	; (800b490 <__ulp+0x54>)
 800b446:	4019      	ands	r1, r3
 800b448:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b44c:	2900      	cmp	r1, #0
 800b44e:	dd05      	ble.n	800b45c <__ulp+0x20>
 800b450:	2200      	movs	r2, #0
 800b452:	460b      	mov	r3, r1
 800b454:	ec43 2b10 	vmov	d0, r2, r3
 800b458:	b002      	add	sp, #8
 800b45a:	4770      	bx	lr
 800b45c:	4249      	negs	r1, r1
 800b45e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b462:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b466:	f04f 0200 	mov.w	r2, #0
 800b46a:	f04f 0300 	mov.w	r3, #0
 800b46e:	da04      	bge.n	800b47a <__ulp+0x3e>
 800b470:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b474:	fa41 f300 	asr.w	r3, r1, r0
 800b478:	e7ec      	b.n	800b454 <__ulp+0x18>
 800b47a:	f1a0 0114 	sub.w	r1, r0, #20
 800b47e:	291e      	cmp	r1, #30
 800b480:	bfda      	itte	le
 800b482:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b486:	fa20 f101 	lsrle.w	r1, r0, r1
 800b48a:	2101      	movgt	r1, #1
 800b48c:	460a      	mov	r2, r1
 800b48e:	e7e1      	b.n	800b454 <__ulp+0x18>
 800b490:	7ff00000 	.word	0x7ff00000

0800b494 <__b2d>:
 800b494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b496:	6905      	ldr	r5, [r0, #16]
 800b498:	f100 0714 	add.w	r7, r0, #20
 800b49c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b4a0:	1f2e      	subs	r6, r5, #4
 800b4a2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	f7ff fd48 	bl	800af3c <__hi0bits>
 800b4ac:	f1c0 0320 	rsb	r3, r0, #32
 800b4b0:	280a      	cmp	r0, #10
 800b4b2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b530 <__b2d+0x9c>
 800b4b6:	600b      	str	r3, [r1, #0]
 800b4b8:	dc14      	bgt.n	800b4e4 <__b2d+0x50>
 800b4ba:	f1c0 0e0b 	rsb	lr, r0, #11
 800b4be:	fa24 f10e 	lsr.w	r1, r4, lr
 800b4c2:	42b7      	cmp	r7, r6
 800b4c4:	ea41 030c 	orr.w	r3, r1, ip
 800b4c8:	bf34      	ite	cc
 800b4ca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b4ce:	2100      	movcs	r1, #0
 800b4d0:	3015      	adds	r0, #21
 800b4d2:	fa04 f000 	lsl.w	r0, r4, r0
 800b4d6:	fa21 f10e 	lsr.w	r1, r1, lr
 800b4da:	ea40 0201 	orr.w	r2, r0, r1
 800b4de:	ec43 2b10 	vmov	d0, r2, r3
 800b4e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4e4:	42b7      	cmp	r7, r6
 800b4e6:	bf3a      	itte	cc
 800b4e8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b4ec:	f1a5 0608 	subcc.w	r6, r5, #8
 800b4f0:	2100      	movcs	r1, #0
 800b4f2:	380b      	subs	r0, #11
 800b4f4:	d017      	beq.n	800b526 <__b2d+0x92>
 800b4f6:	f1c0 0c20 	rsb	ip, r0, #32
 800b4fa:	fa04 f500 	lsl.w	r5, r4, r0
 800b4fe:	42be      	cmp	r6, r7
 800b500:	fa21 f40c 	lsr.w	r4, r1, ip
 800b504:	ea45 0504 	orr.w	r5, r5, r4
 800b508:	bf8c      	ite	hi
 800b50a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b50e:	2400      	movls	r4, #0
 800b510:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b514:	fa01 f000 	lsl.w	r0, r1, r0
 800b518:	fa24 f40c 	lsr.w	r4, r4, ip
 800b51c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b520:	ea40 0204 	orr.w	r2, r0, r4
 800b524:	e7db      	b.n	800b4de <__b2d+0x4a>
 800b526:	ea44 030c 	orr.w	r3, r4, ip
 800b52a:	460a      	mov	r2, r1
 800b52c:	e7d7      	b.n	800b4de <__b2d+0x4a>
 800b52e:	bf00      	nop
 800b530:	3ff00000 	.word	0x3ff00000

0800b534 <__d2b>:
 800b534:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b538:	4689      	mov	r9, r1
 800b53a:	2101      	movs	r1, #1
 800b53c:	ec57 6b10 	vmov	r6, r7, d0
 800b540:	4690      	mov	r8, r2
 800b542:	f7ff fc09 	bl	800ad58 <_Balloc>
 800b546:	4604      	mov	r4, r0
 800b548:	b930      	cbnz	r0, 800b558 <__d2b+0x24>
 800b54a:	4602      	mov	r2, r0
 800b54c:	4b25      	ldr	r3, [pc, #148]	; (800b5e4 <__d2b+0xb0>)
 800b54e:	4826      	ldr	r0, [pc, #152]	; (800b5e8 <__d2b+0xb4>)
 800b550:	f240 310a 	movw	r1, #778	; 0x30a
 800b554:	f000 fb4e 	bl	800bbf4 <__assert_func>
 800b558:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b55c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b560:	bb35      	cbnz	r5, 800b5b0 <__d2b+0x7c>
 800b562:	2e00      	cmp	r6, #0
 800b564:	9301      	str	r3, [sp, #4]
 800b566:	d028      	beq.n	800b5ba <__d2b+0x86>
 800b568:	4668      	mov	r0, sp
 800b56a:	9600      	str	r6, [sp, #0]
 800b56c:	f7ff fd06 	bl	800af7c <__lo0bits>
 800b570:	9900      	ldr	r1, [sp, #0]
 800b572:	b300      	cbz	r0, 800b5b6 <__d2b+0x82>
 800b574:	9a01      	ldr	r2, [sp, #4]
 800b576:	f1c0 0320 	rsb	r3, r0, #32
 800b57a:	fa02 f303 	lsl.w	r3, r2, r3
 800b57e:	430b      	orrs	r3, r1
 800b580:	40c2      	lsrs	r2, r0
 800b582:	6163      	str	r3, [r4, #20]
 800b584:	9201      	str	r2, [sp, #4]
 800b586:	9b01      	ldr	r3, [sp, #4]
 800b588:	61a3      	str	r3, [r4, #24]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	bf14      	ite	ne
 800b58e:	2202      	movne	r2, #2
 800b590:	2201      	moveq	r2, #1
 800b592:	6122      	str	r2, [r4, #16]
 800b594:	b1d5      	cbz	r5, 800b5cc <__d2b+0x98>
 800b596:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b59a:	4405      	add	r5, r0
 800b59c:	f8c9 5000 	str.w	r5, [r9]
 800b5a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b5a4:	f8c8 0000 	str.w	r0, [r8]
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	b003      	add	sp, #12
 800b5ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5b4:	e7d5      	b.n	800b562 <__d2b+0x2e>
 800b5b6:	6161      	str	r1, [r4, #20]
 800b5b8:	e7e5      	b.n	800b586 <__d2b+0x52>
 800b5ba:	a801      	add	r0, sp, #4
 800b5bc:	f7ff fcde 	bl	800af7c <__lo0bits>
 800b5c0:	9b01      	ldr	r3, [sp, #4]
 800b5c2:	6163      	str	r3, [r4, #20]
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	6122      	str	r2, [r4, #16]
 800b5c8:	3020      	adds	r0, #32
 800b5ca:	e7e3      	b.n	800b594 <__d2b+0x60>
 800b5cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b5d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b5d4:	f8c9 0000 	str.w	r0, [r9]
 800b5d8:	6918      	ldr	r0, [r3, #16]
 800b5da:	f7ff fcaf 	bl	800af3c <__hi0bits>
 800b5de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b5e2:	e7df      	b.n	800b5a4 <__d2b+0x70>
 800b5e4:	0800cb00 	.word	0x0800cb00
 800b5e8:	0800cb8c 	.word	0x0800cb8c

0800b5ec <__ratio>:
 800b5ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f0:	4688      	mov	r8, r1
 800b5f2:	4669      	mov	r1, sp
 800b5f4:	4681      	mov	r9, r0
 800b5f6:	f7ff ff4d 	bl	800b494 <__b2d>
 800b5fa:	a901      	add	r1, sp, #4
 800b5fc:	4640      	mov	r0, r8
 800b5fe:	ec55 4b10 	vmov	r4, r5, d0
 800b602:	f7ff ff47 	bl	800b494 <__b2d>
 800b606:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b60a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b60e:	eba3 0c02 	sub.w	ip, r3, r2
 800b612:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b616:	1a9b      	subs	r3, r3, r2
 800b618:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b61c:	ec51 0b10 	vmov	r0, r1, d0
 800b620:	2b00      	cmp	r3, #0
 800b622:	bfd6      	itet	le
 800b624:	460a      	movle	r2, r1
 800b626:	462a      	movgt	r2, r5
 800b628:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b62c:	468b      	mov	fp, r1
 800b62e:	462f      	mov	r7, r5
 800b630:	bfd4      	ite	le
 800b632:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b636:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b63a:	4620      	mov	r0, r4
 800b63c:	ee10 2a10 	vmov	r2, s0
 800b640:	465b      	mov	r3, fp
 800b642:	4639      	mov	r1, r7
 800b644:	f7f5 f8da 	bl	80007fc <__aeabi_ddiv>
 800b648:	ec41 0b10 	vmov	d0, r0, r1
 800b64c:	b003      	add	sp, #12
 800b64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b652 <__copybits>:
 800b652:	3901      	subs	r1, #1
 800b654:	b570      	push	{r4, r5, r6, lr}
 800b656:	1149      	asrs	r1, r1, #5
 800b658:	6914      	ldr	r4, [r2, #16]
 800b65a:	3101      	adds	r1, #1
 800b65c:	f102 0314 	add.w	r3, r2, #20
 800b660:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b664:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b668:	1f05      	subs	r5, r0, #4
 800b66a:	42a3      	cmp	r3, r4
 800b66c:	d30c      	bcc.n	800b688 <__copybits+0x36>
 800b66e:	1aa3      	subs	r3, r4, r2
 800b670:	3b11      	subs	r3, #17
 800b672:	f023 0303 	bic.w	r3, r3, #3
 800b676:	3211      	adds	r2, #17
 800b678:	42a2      	cmp	r2, r4
 800b67a:	bf88      	it	hi
 800b67c:	2300      	movhi	r3, #0
 800b67e:	4418      	add	r0, r3
 800b680:	2300      	movs	r3, #0
 800b682:	4288      	cmp	r0, r1
 800b684:	d305      	bcc.n	800b692 <__copybits+0x40>
 800b686:	bd70      	pop	{r4, r5, r6, pc}
 800b688:	f853 6b04 	ldr.w	r6, [r3], #4
 800b68c:	f845 6f04 	str.w	r6, [r5, #4]!
 800b690:	e7eb      	b.n	800b66a <__copybits+0x18>
 800b692:	f840 3b04 	str.w	r3, [r0], #4
 800b696:	e7f4      	b.n	800b682 <__copybits+0x30>

0800b698 <__any_on>:
 800b698:	f100 0214 	add.w	r2, r0, #20
 800b69c:	6900      	ldr	r0, [r0, #16]
 800b69e:	114b      	asrs	r3, r1, #5
 800b6a0:	4298      	cmp	r0, r3
 800b6a2:	b510      	push	{r4, lr}
 800b6a4:	db11      	blt.n	800b6ca <__any_on+0x32>
 800b6a6:	dd0a      	ble.n	800b6be <__any_on+0x26>
 800b6a8:	f011 011f 	ands.w	r1, r1, #31
 800b6ac:	d007      	beq.n	800b6be <__any_on+0x26>
 800b6ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b6b2:	fa24 f001 	lsr.w	r0, r4, r1
 800b6b6:	fa00 f101 	lsl.w	r1, r0, r1
 800b6ba:	428c      	cmp	r4, r1
 800b6bc:	d10b      	bne.n	800b6d6 <__any_on+0x3e>
 800b6be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d803      	bhi.n	800b6ce <__any_on+0x36>
 800b6c6:	2000      	movs	r0, #0
 800b6c8:	bd10      	pop	{r4, pc}
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	e7f7      	b.n	800b6be <__any_on+0x26>
 800b6ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b6d2:	2900      	cmp	r1, #0
 800b6d4:	d0f5      	beq.n	800b6c2 <__any_on+0x2a>
 800b6d6:	2001      	movs	r0, #1
 800b6d8:	e7f6      	b.n	800b6c8 <__any_on+0x30>

0800b6da <_calloc_r>:
 800b6da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6dc:	fba1 2402 	umull	r2, r4, r1, r2
 800b6e0:	b94c      	cbnz	r4, 800b6f6 <_calloc_r+0x1c>
 800b6e2:	4611      	mov	r1, r2
 800b6e4:	9201      	str	r2, [sp, #4]
 800b6e6:	f000 f87b 	bl	800b7e0 <_malloc_r>
 800b6ea:	9a01      	ldr	r2, [sp, #4]
 800b6ec:	4605      	mov	r5, r0
 800b6ee:	b930      	cbnz	r0, 800b6fe <_calloc_r+0x24>
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	b003      	add	sp, #12
 800b6f4:	bd30      	pop	{r4, r5, pc}
 800b6f6:	220c      	movs	r2, #12
 800b6f8:	6002      	str	r2, [r0, #0]
 800b6fa:	2500      	movs	r5, #0
 800b6fc:	e7f8      	b.n	800b6f0 <_calloc_r+0x16>
 800b6fe:	4621      	mov	r1, r4
 800b700:	f7fc fbc0 	bl	8007e84 <memset>
 800b704:	e7f4      	b.n	800b6f0 <_calloc_r+0x16>
	...

0800b708 <_free_r>:
 800b708:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b70a:	2900      	cmp	r1, #0
 800b70c:	d044      	beq.n	800b798 <_free_r+0x90>
 800b70e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b712:	9001      	str	r0, [sp, #4]
 800b714:	2b00      	cmp	r3, #0
 800b716:	f1a1 0404 	sub.w	r4, r1, #4
 800b71a:	bfb8      	it	lt
 800b71c:	18e4      	addlt	r4, r4, r3
 800b71e:	f000 fa99 	bl	800bc54 <__malloc_lock>
 800b722:	4a1e      	ldr	r2, [pc, #120]	; (800b79c <_free_r+0x94>)
 800b724:	9801      	ldr	r0, [sp, #4]
 800b726:	6813      	ldr	r3, [r2, #0]
 800b728:	b933      	cbnz	r3, 800b738 <_free_r+0x30>
 800b72a:	6063      	str	r3, [r4, #4]
 800b72c:	6014      	str	r4, [r2, #0]
 800b72e:	b003      	add	sp, #12
 800b730:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b734:	f000 ba94 	b.w	800bc60 <__malloc_unlock>
 800b738:	42a3      	cmp	r3, r4
 800b73a:	d908      	bls.n	800b74e <_free_r+0x46>
 800b73c:	6825      	ldr	r5, [r4, #0]
 800b73e:	1961      	adds	r1, r4, r5
 800b740:	428b      	cmp	r3, r1
 800b742:	bf01      	itttt	eq
 800b744:	6819      	ldreq	r1, [r3, #0]
 800b746:	685b      	ldreq	r3, [r3, #4]
 800b748:	1949      	addeq	r1, r1, r5
 800b74a:	6021      	streq	r1, [r4, #0]
 800b74c:	e7ed      	b.n	800b72a <_free_r+0x22>
 800b74e:	461a      	mov	r2, r3
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	b10b      	cbz	r3, 800b758 <_free_r+0x50>
 800b754:	42a3      	cmp	r3, r4
 800b756:	d9fa      	bls.n	800b74e <_free_r+0x46>
 800b758:	6811      	ldr	r1, [r2, #0]
 800b75a:	1855      	adds	r5, r2, r1
 800b75c:	42a5      	cmp	r5, r4
 800b75e:	d10b      	bne.n	800b778 <_free_r+0x70>
 800b760:	6824      	ldr	r4, [r4, #0]
 800b762:	4421      	add	r1, r4
 800b764:	1854      	adds	r4, r2, r1
 800b766:	42a3      	cmp	r3, r4
 800b768:	6011      	str	r1, [r2, #0]
 800b76a:	d1e0      	bne.n	800b72e <_free_r+0x26>
 800b76c:	681c      	ldr	r4, [r3, #0]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	6053      	str	r3, [r2, #4]
 800b772:	4421      	add	r1, r4
 800b774:	6011      	str	r1, [r2, #0]
 800b776:	e7da      	b.n	800b72e <_free_r+0x26>
 800b778:	d902      	bls.n	800b780 <_free_r+0x78>
 800b77a:	230c      	movs	r3, #12
 800b77c:	6003      	str	r3, [r0, #0]
 800b77e:	e7d6      	b.n	800b72e <_free_r+0x26>
 800b780:	6825      	ldr	r5, [r4, #0]
 800b782:	1961      	adds	r1, r4, r5
 800b784:	428b      	cmp	r3, r1
 800b786:	bf04      	itt	eq
 800b788:	6819      	ldreq	r1, [r3, #0]
 800b78a:	685b      	ldreq	r3, [r3, #4]
 800b78c:	6063      	str	r3, [r4, #4]
 800b78e:	bf04      	itt	eq
 800b790:	1949      	addeq	r1, r1, r5
 800b792:	6021      	streq	r1, [r4, #0]
 800b794:	6054      	str	r4, [r2, #4]
 800b796:	e7ca      	b.n	800b72e <_free_r+0x26>
 800b798:	b003      	add	sp, #12
 800b79a:	bd30      	pop	{r4, r5, pc}
 800b79c:	20005784 	.word	0x20005784

0800b7a0 <sbrk_aligned>:
 800b7a0:	b570      	push	{r4, r5, r6, lr}
 800b7a2:	4e0e      	ldr	r6, [pc, #56]	; (800b7dc <sbrk_aligned+0x3c>)
 800b7a4:	460c      	mov	r4, r1
 800b7a6:	6831      	ldr	r1, [r6, #0]
 800b7a8:	4605      	mov	r5, r0
 800b7aa:	b911      	cbnz	r1, 800b7b2 <sbrk_aligned+0x12>
 800b7ac:	f000 f9f0 	bl	800bb90 <_sbrk_r>
 800b7b0:	6030      	str	r0, [r6, #0]
 800b7b2:	4621      	mov	r1, r4
 800b7b4:	4628      	mov	r0, r5
 800b7b6:	f000 f9eb 	bl	800bb90 <_sbrk_r>
 800b7ba:	1c43      	adds	r3, r0, #1
 800b7bc:	d00a      	beq.n	800b7d4 <sbrk_aligned+0x34>
 800b7be:	1cc4      	adds	r4, r0, #3
 800b7c0:	f024 0403 	bic.w	r4, r4, #3
 800b7c4:	42a0      	cmp	r0, r4
 800b7c6:	d007      	beq.n	800b7d8 <sbrk_aligned+0x38>
 800b7c8:	1a21      	subs	r1, r4, r0
 800b7ca:	4628      	mov	r0, r5
 800b7cc:	f000 f9e0 	bl	800bb90 <_sbrk_r>
 800b7d0:	3001      	adds	r0, #1
 800b7d2:	d101      	bne.n	800b7d8 <sbrk_aligned+0x38>
 800b7d4:	f04f 34ff 	mov.w	r4, #4294967295
 800b7d8:	4620      	mov	r0, r4
 800b7da:	bd70      	pop	{r4, r5, r6, pc}
 800b7dc:	20005788 	.word	0x20005788

0800b7e0 <_malloc_r>:
 800b7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7e4:	1ccd      	adds	r5, r1, #3
 800b7e6:	f025 0503 	bic.w	r5, r5, #3
 800b7ea:	3508      	adds	r5, #8
 800b7ec:	2d0c      	cmp	r5, #12
 800b7ee:	bf38      	it	cc
 800b7f0:	250c      	movcc	r5, #12
 800b7f2:	2d00      	cmp	r5, #0
 800b7f4:	4607      	mov	r7, r0
 800b7f6:	db01      	blt.n	800b7fc <_malloc_r+0x1c>
 800b7f8:	42a9      	cmp	r1, r5
 800b7fa:	d905      	bls.n	800b808 <_malloc_r+0x28>
 800b7fc:	230c      	movs	r3, #12
 800b7fe:	603b      	str	r3, [r7, #0]
 800b800:	2600      	movs	r6, #0
 800b802:	4630      	mov	r0, r6
 800b804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b808:	4e2e      	ldr	r6, [pc, #184]	; (800b8c4 <_malloc_r+0xe4>)
 800b80a:	f000 fa23 	bl	800bc54 <__malloc_lock>
 800b80e:	6833      	ldr	r3, [r6, #0]
 800b810:	461c      	mov	r4, r3
 800b812:	bb34      	cbnz	r4, 800b862 <_malloc_r+0x82>
 800b814:	4629      	mov	r1, r5
 800b816:	4638      	mov	r0, r7
 800b818:	f7ff ffc2 	bl	800b7a0 <sbrk_aligned>
 800b81c:	1c43      	adds	r3, r0, #1
 800b81e:	4604      	mov	r4, r0
 800b820:	d14d      	bne.n	800b8be <_malloc_r+0xde>
 800b822:	6834      	ldr	r4, [r6, #0]
 800b824:	4626      	mov	r6, r4
 800b826:	2e00      	cmp	r6, #0
 800b828:	d140      	bne.n	800b8ac <_malloc_r+0xcc>
 800b82a:	6823      	ldr	r3, [r4, #0]
 800b82c:	4631      	mov	r1, r6
 800b82e:	4638      	mov	r0, r7
 800b830:	eb04 0803 	add.w	r8, r4, r3
 800b834:	f000 f9ac 	bl	800bb90 <_sbrk_r>
 800b838:	4580      	cmp	r8, r0
 800b83a:	d13a      	bne.n	800b8b2 <_malloc_r+0xd2>
 800b83c:	6821      	ldr	r1, [r4, #0]
 800b83e:	3503      	adds	r5, #3
 800b840:	1a6d      	subs	r5, r5, r1
 800b842:	f025 0503 	bic.w	r5, r5, #3
 800b846:	3508      	adds	r5, #8
 800b848:	2d0c      	cmp	r5, #12
 800b84a:	bf38      	it	cc
 800b84c:	250c      	movcc	r5, #12
 800b84e:	4629      	mov	r1, r5
 800b850:	4638      	mov	r0, r7
 800b852:	f7ff ffa5 	bl	800b7a0 <sbrk_aligned>
 800b856:	3001      	adds	r0, #1
 800b858:	d02b      	beq.n	800b8b2 <_malloc_r+0xd2>
 800b85a:	6823      	ldr	r3, [r4, #0]
 800b85c:	442b      	add	r3, r5
 800b85e:	6023      	str	r3, [r4, #0]
 800b860:	e00e      	b.n	800b880 <_malloc_r+0xa0>
 800b862:	6822      	ldr	r2, [r4, #0]
 800b864:	1b52      	subs	r2, r2, r5
 800b866:	d41e      	bmi.n	800b8a6 <_malloc_r+0xc6>
 800b868:	2a0b      	cmp	r2, #11
 800b86a:	d916      	bls.n	800b89a <_malloc_r+0xba>
 800b86c:	1961      	adds	r1, r4, r5
 800b86e:	42a3      	cmp	r3, r4
 800b870:	6025      	str	r5, [r4, #0]
 800b872:	bf18      	it	ne
 800b874:	6059      	strne	r1, [r3, #4]
 800b876:	6863      	ldr	r3, [r4, #4]
 800b878:	bf08      	it	eq
 800b87a:	6031      	streq	r1, [r6, #0]
 800b87c:	5162      	str	r2, [r4, r5]
 800b87e:	604b      	str	r3, [r1, #4]
 800b880:	4638      	mov	r0, r7
 800b882:	f104 060b 	add.w	r6, r4, #11
 800b886:	f000 f9eb 	bl	800bc60 <__malloc_unlock>
 800b88a:	f026 0607 	bic.w	r6, r6, #7
 800b88e:	1d23      	adds	r3, r4, #4
 800b890:	1af2      	subs	r2, r6, r3
 800b892:	d0b6      	beq.n	800b802 <_malloc_r+0x22>
 800b894:	1b9b      	subs	r3, r3, r6
 800b896:	50a3      	str	r3, [r4, r2]
 800b898:	e7b3      	b.n	800b802 <_malloc_r+0x22>
 800b89a:	6862      	ldr	r2, [r4, #4]
 800b89c:	42a3      	cmp	r3, r4
 800b89e:	bf0c      	ite	eq
 800b8a0:	6032      	streq	r2, [r6, #0]
 800b8a2:	605a      	strne	r2, [r3, #4]
 800b8a4:	e7ec      	b.n	800b880 <_malloc_r+0xa0>
 800b8a6:	4623      	mov	r3, r4
 800b8a8:	6864      	ldr	r4, [r4, #4]
 800b8aa:	e7b2      	b.n	800b812 <_malloc_r+0x32>
 800b8ac:	4634      	mov	r4, r6
 800b8ae:	6876      	ldr	r6, [r6, #4]
 800b8b0:	e7b9      	b.n	800b826 <_malloc_r+0x46>
 800b8b2:	230c      	movs	r3, #12
 800b8b4:	603b      	str	r3, [r7, #0]
 800b8b6:	4638      	mov	r0, r7
 800b8b8:	f000 f9d2 	bl	800bc60 <__malloc_unlock>
 800b8bc:	e7a1      	b.n	800b802 <_malloc_r+0x22>
 800b8be:	6025      	str	r5, [r4, #0]
 800b8c0:	e7de      	b.n	800b880 <_malloc_r+0xa0>
 800b8c2:	bf00      	nop
 800b8c4:	20005784 	.word	0x20005784

0800b8c8 <__ssputs_r>:
 800b8c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8cc:	688e      	ldr	r6, [r1, #8]
 800b8ce:	429e      	cmp	r6, r3
 800b8d0:	4682      	mov	sl, r0
 800b8d2:	460c      	mov	r4, r1
 800b8d4:	4690      	mov	r8, r2
 800b8d6:	461f      	mov	r7, r3
 800b8d8:	d838      	bhi.n	800b94c <__ssputs_r+0x84>
 800b8da:	898a      	ldrh	r2, [r1, #12]
 800b8dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b8e0:	d032      	beq.n	800b948 <__ssputs_r+0x80>
 800b8e2:	6825      	ldr	r5, [r4, #0]
 800b8e4:	6909      	ldr	r1, [r1, #16]
 800b8e6:	eba5 0901 	sub.w	r9, r5, r1
 800b8ea:	6965      	ldr	r5, [r4, #20]
 800b8ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b8f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	444b      	add	r3, r9
 800b8f8:	106d      	asrs	r5, r5, #1
 800b8fa:	429d      	cmp	r5, r3
 800b8fc:	bf38      	it	cc
 800b8fe:	461d      	movcc	r5, r3
 800b900:	0553      	lsls	r3, r2, #21
 800b902:	d531      	bpl.n	800b968 <__ssputs_r+0xa0>
 800b904:	4629      	mov	r1, r5
 800b906:	f7ff ff6b 	bl	800b7e0 <_malloc_r>
 800b90a:	4606      	mov	r6, r0
 800b90c:	b950      	cbnz	r0, 800b924 <__ssputs_r+0x5c>
 800b90e:	230c      	movs	r3, #12
 800b910:	f8ca 3000 	str.w	r3, [sl]
 800b914:	89a3      	ldrh	r3, [r4, #12]
 800b916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b91a:	81a3      	strh	r3, [r4, #12]
 800b91c:	f04f 30ff 	mov.w	r0, #4294967295
 800b920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b924:	6921      	ldr	r1, [r4, #16]
 800b926:	464a      	mov	r2, r9
 800b928:	f7fc fa84 	bl	8007e34 <memcpy>
 800b92c:	89a3      	ldrh	r3, [r4, #12]
 800b92e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b936:	81a3      	strh	r3, [r4, #12]
 800b938:	6126      	str	r6, [r4, #16]
 800b93a:	6165      	str	r5, [r4, #20]
 800b93c:	444e      	add	r6, r9
 800b93e:	eba5 0509 	sub.w	r5, r5, r9
 800b942:	6026      	str	r6, [r4, #0]
 800b944:	60a5      	str	r5, [r4, #8]
 800b946:	463e      	mov	r6, r7
 800b948:	42be      	cmp	r6, r7
 800b94a:	d900      	bls.n	800b94e <__ssputs_r+0x86>
 800b94c:	463e      	mov	r6, r7
 800b94e:	6820      	ldr	r0, [r4, #0]
 800b950:	4632      	mov	r2, r6
 800b952:	4641      	mov	r1, r8
 800b954:	f7fc fa7c 	bl	8007e50 <memmove>
 800b958:	68a3      	ldr	r3, [r4, #8]
 800b95a:	1b9b      	subs	r3, r3, r6
 800b95c:	60a3      	str	r3, [r4, #8]
 800b95e:	6823      	ldr	r3, [r4, #0]
 800b960:	4433      	add	r3, r6
 800b962:	6023      	str	r3, [r4, #0]
 800b964:	2000      	movs	r0, #0
 800b966:	e7db      	b.n	800b920 <__ssputs_r+0x58>
 800b968:	462a      	mov	r2, r5
 800b96a:	f000 f97f 	bl	800bc6c <_realloc_r>
 800b96e:	4606      	mov	r6, r0
 800b970:	2800      	cmp	r0, #0
 800b972:	d1e1      	bne.n	800b938 <__ssputs_r+0x70>
 800b974:	6921      	ldr	r1, [r4, #16]
 800b976:	4650      	mov	r0, sl
 800b978:	f7ff fec6 	bl	800b708 <_free_r>
 800b97c:	e7c7      	b.n	800b90e <__ssputs_r+0x46>
	...

0800b980 <_svfiprintf_r>:
 800b980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b984:	4698      	mov	r8, r3
 800b986:	898b      	ldrh	r3, [r1, #12]
 800b988:	061b      	lsls	r3, r3, #24
 800b98a:	b09d      	sub	sp, #116	; 0x74
 800b98c:	4607      	mov	r7, r0
 800b98e:	460d      	mov	r5, r1
 800b990:	4614      	mov	r4, r2
 800b992:	d50e      	bpl.n	800b9b2 <_svfiprintf_r+0x32>
 800b994:	690b      	ldr	r3, [r1, #16]
 800b996:	b963      	cbnz	r3, 800b9b2 <_svfiprintf_r+0x32>
 800b998:	2140      	movs	r1, #64	; 0x40
 800b99a:	f7ff ff21 	bl	800b7e0 <_malloc_r>
 800b99e:	6028      	str	r0, [r5, #0]
 800b9a0:	6128      	str	r0, [r5, #16]
 800b9a2:	b920      	cbnz	r0, 800b9ae <_svfiprintf_r+0x2e>
 800b9a4:	230c      	movs	r3, #12
 800b9a6:	603b      	str	r3, [r7, #0]
 800b9a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ac:	e0d1      	b.n	800bb52 <_svfiprintf_r+0x1d2>
 800b9ae:	2340      	movs	r3, #64	; 0x40
 800b9b0:	616b      	str	r3, [r5, #20]
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	9309      	str	r3, [sp, #36]	; 0x24
 800b9b6:	2320      	movs	r3, #32
 800b9b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9c0:	2330      	movs	r3, #48	; 0x30
 800b9c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bb6c <_svfiprintf_r+0x1ec>
 800b9c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9ca:	f04f 0901 	mov.w	r9, #1
 800b9ce:	4623      	mov	r3, r4
 800b9d0:	469a      	mov	sl, r3
 800b9d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9d6:	b10a      	cbz	r2, 800b9dc <_svfiprintf_r+0x5c>
 800b9d8:	2a25      	cmp	r2, #37	; 0x25
 800b9da:	d1f9      	bne.n	800b9d0 <_svfiprintf_r+0x50>
 800b9dc:	ebba 0b04 	subs.w	fp, sl, r4
 800b9e0:	d00b      	beq.n	800b9fa <_svfiprintf_r+0x7a>
 800b9e2:	465b      	mov	r3, fp
 800b9e4:	4622      	mov	r2, r4
 800b9e6:	4629      	mov	r1, r5
 800b9e8:	4638      	mov	r0, r7
 800b9ea:	f7ff ff6d 	bl	800b8c8 <__ssputs_r>
 800b9ee:	3001      	adds	r0, #1
 800b9f0:	f000 80aa 	beq.w	800bb48 <_svfiprintf_r+0x1c8>
 800b9f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9f6:	445a      	add	r2, fp
 800b9f8:	9209      	str	r2, [sp, #36]	; 0x24
 800b9fa:	f89a 3000 	ldrb.w	r3, [sl]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	f000 80a2 	beq.w	800bb48 <_svfiprintf_r+0x1c8>
 800ba04:	2300      	movs	r3, #0
 800ba06:	f04f 32ff 	mov.w	r2, #4294967295
 800ba0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba0e:	f10a 0a01 	add.w	sl, sl, #1
 800ba12:	9304      	str	r3, [sp, #16]
 800ba14:	9307      	str	r3, [sp, #28]
 800ba16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba1a:	931a      	str	r3, [sp, #104]	; 0x68
 800ba1c:	4654      	mov	r4, sl
 800ba1e:	2205      	movs	r2, #5
 800ba20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba24:	4851      	ldr	r0, [pc, #324]	; (800bb6c <_svfiprintf_r+0x1ec>)
 800ba26:	f7f4 fbb3 	bl	8000190 <memchr>
 800ba2a:	9a04      	ldr	r2, [sp, #16]
 800ba2c:	b9d8      	cbnz	r0, 800ba66 <_svfiprintf_r+0xe6>
 800ba2e:	06d0      	lsls	r0, r2, #27
 800ba30:	bf44      	itt	mi
 800ba32:	2320      	movmi	r3, #32
 800ba34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba38:	0711      	lsls	r1, r2, #28
 800ba3a:	bf44      	itt	mi
 800ba3c:	232b      	movmi	r3, #43	; 0x2b
 800ba3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba42:	f89a 3000 	ldrb.w	r3, [sl]
 800ba46:	2b2a      	cmp	r3, #42	; 0x2a
 800ba48:	d015      	beq.n	800ba76 <_svfiprintf_r+0xf6>
 800ba4a:	9a07      	ldr	r2, [sp, #28]
 800ba4c:	4654      	mov	r4, sl
 800ba4e:	2000      	movs	r0, #0
 800ba50:	f04f 0c0a 	mov.w	ip, #10
 800ba54:	4621      	mov	r1, r4
 800ba56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba5a:	3b30      	subs	r3, #48	; 0x30
 800ba5c:	2b09      	cmp	r3, #9
 800ba5e:	d94e      	bls.n	800bafe <_svfiprintf_r+0x17e>
 800ba60:	b1b0      	cbz	r0, 800ba90 <_svfiprintf_r+0x110>
 800ba62:	9207      	str	r2, [sp, #28]
 800ba64:	e014      	b.n	800ba90 <_svfiprintf_r+0x110>
 800ba66:	eba0 0308 	sub.w	r3, r0, r8
 800ba6a:	fa09 f303 	lsl.w	r3, r9, r3
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	9304      	str	r3, [sp, #16]
 800ba72:	46a2      	mov	sl, r4
 800ba74:	e7d2      	b.n	800ba1c <_svfiprintf_r+0x9c>
 800ba76:	9b03      	ldr	r3, [sp, #12]
 800ba78:	1d19      	adds	r1, r3, #4
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	9103      	str	r1, [sp, #12]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	bfbb      	ittet	lt
 800ba82:	425b      	neglt	r3, r3
 800ba84:	f042 0202 	orrlt.w	r2, r2, #2
 800ba88:	9307      	strge	r3, [sp, #28]
 800ba8a:	9307      	strlt	r3, [sp, #28]
 800ba8c:	bfb8      	it	lt
 800ba8e:	9204      	strlt	r2, [sp, #16]
 800ba90:	7823      	ldrb	r3, [r4, #0]
 800ba92:	2b2e      	cmp	r3, #46	; 0x2e
 800ba94:	d10c      	bne.n	800bab0 <_svfiprintf_r+0x130>
 800ba96:	7863      	ldrb	r3, [r4, #1]
 800ba98:	2b2a      	cmp	r3, #42	; 0x2a
 800ba9a:	d135      	bne.n	800bb08 <_svfiprintf_r+0x188>
 800ba9c:	9b03      	ldr	r3, [sp, #12]
 800ba9e:	1d1a      	adds	r2, r3, #4
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	9203      	str	r2, [sp, #12]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	bfb8      	it	lt
 800baa8:	f04f 33ff 	movlt.w	r3, #4294967295
 800baac:	3402      	adds	r4, #2
 800baae:	9305      	str	r3, [sp, #20]
 800bab0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bb7c <_svfiprintf_r+0x1fc>
 800bab4:	7821      	ldrb	r1, [r4, #0]
 800bab6:	2203      	movs	r2, #3
 800bab8:	4650      	mov	r0, sl
 800baba:	f7f4 fb69 	bl	8000190 <memchr>
 800babe:	b140      	cbz	r0, 800bad2 <_svfiprintf_r+0x152>
 800bac0:	2340      	movs	r3, #64	; 0x40
 800bac2:	eba0 000a 	sub.w	r0, r0, sl
 800bac6:	fa03 f000 	lsl.w	r0, r3, r0
 800baca:	9b04      	ldr	r3, [sp, #16]
 800bacc:	4303      	orrs	r3, r0
 800bace:	3401      	adds	r4, #1
 800bad0:	9304      	str	r3, [sp, #16]
 800bad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bad6:	4826      	ldr	r0, [pc, #152]	; (800bb70 <_svfiprintf_r+0x1f0>)
 800bad8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800badc:	2206      	movs	r2, #6
 800bade:	f7f4 fb57 	bl	8000190 <memchr>
 800bae2:	2800      	cmp	r0, #0
 800bae4:	d038      	beq.n	800bb58 <_svfiprintf_r+0x1d8>
 800bae6:	4b23      	ldr	r3, [pc, #140]	; (800bb74 <_svfiprintf_r+0x1f4>)
 800bae8:	bb1b      	cbnz	r3, 800bb32 <_svfiprintf_r+0x1b2>
 800baea:	9b03      	ldr	r3, [sp, #12]
 800baec:	3307      	adds	r3, #7
 800baee:	f023 0307 	bic.w	r3, r3, #7
 800baf2:	3308      	adds	r3, #8
 800baf4:	9303      	str	r3, [sp, #12]
 800baf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baf8:	4433      	add	r3, r6
 800bafa:	9309      	str	r3, [sp, #36]	; 0x24
 800bafc:	e767      	b.n	800b9ce <_svfiprintf_r+0x4e>
 800bafe:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb02:	460c      	mov	r4, r1
 800bb04:	2001      	movs	r0, #1
 800bb06:	e7a5      	b.n	800ba54 <_svfiprintf_r+0xd4>
 800bb08:	2300      	movs	r3, #0
 800bb0a:	3401      	adds	r4, #1
 800bb0c:	9305      	str	r3, [sp, #20]
 800bb0e:	4619      	mov	r1, r3
 800bb10:	f04f 0c0a 	mov.w	ip, #10
 800bb14:	4620      	mov	r0, r4
 800bb16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb1a:	3a30      	subs	r2, #48	; 0x30
 800bb1c:	2a09      	cmp	r2, #9
 800bb1e:	d903      	bls.n	800bb28 <_svfiprintf_r+0x1a8>
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d0c5      	beq.n	800bab0 <_svfiprintf_r+0x130>
 800bb24:	9105      	str	r1, [sp, #20]
 800bb26:	e7c3      	b.n	800bab0 <_svfiprintf_r+0x130>
 800bb28:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb2c:	4604      	mov	r4, r0
 800bb2e:	2301      	movs	r3, #1
 800bb30:	e7f0      	b.n	800bb14 <_svfiprintf_r+0x194>
 800bb32:	ab03      	add	r3, sp, #12
 800bb34:	9300      	str	r3, [sp, #0]
 800bb36:	462a      	mov	r2, r5
 800bb38:	4b0f      	ldr	r3, [pc, #60]	; (800bb78 <_svfiprintf_r+0x1f8>)
 800bb3a:	a904      	add	r1, sp, #16
 800bb3c:	4638      	mov	r0, r7
 800bb3e:	f7fc fa49 	bl	8007fd4 <_printf_float>
 800bb42:	1c42      	adds	r2, r0, #1
 800bb44:	4606      	mov	r6, r0
 800bb46:	d1d6      	bne.n	800baf6 <_svfiprintf_r+0x176>
 800bb48:	89ab      	ldrh	r3, [r5, #12]
 800bb4a:	065b      	lsls	r3, r3, #25
 800bb4c:	f53f af2c 	bmi.w	800b9a8 <_svfiprintf_r+0x28>
 800bb50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb52:	b01d      	add	sp, #116	; 0x74
 800bb54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb58:	ab03      	add	r3, sp, #12
 800bb5a:	9300      	str	r3, [sp, #0]
 800bb5c:	462a      	mov	r2, r5
 800bb5e:	4b06      	ldr	r3, [pc, #24]	; (800bb78 <_svfiprintf_r+0x1f8>)
 800bb60:	a904      	add	r1, sp, #16
 800bb62:	4638      	mov	r0, r7
 800bb64:	f7fc fcda 	bl	800851c <_printf_i>
 800bb68:	e7eb      	b.n	800bb42 <_svfiprintf_r+0x1c2>
 800bb6a:	bf00      	nop
 800bb6c:	0800cce4 	.word	0x0800cce4
 800bb70:	0800ccee 	.word	0x0800ccee
 800bb74:	08007fd5 	.word	0x08007fd5
 800bb78:	0800b8c9 	.word	0x0800b8c9
 800bb7c:	0800ccea 	.word	0x0800ccea

0800bb80 <nan>:
 800bb80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bb88 <nan+0x8>
 800bb84:	4770      	bx	lr
 800bb86:	bf00      	nop
 800bb88:	00000000 	.word	0x00000000
 800bb8c:	7ff80000 	.word	0x7ff80000

0800bb90 <_sbrk_r>:
 800bb90:	b538      	push	{r3, r4, r5, lr}
 800bb92:	4d06      	ldr	r5, [pc, #24]	; (800bbac <_sbrk_r+0x1c>)
 800bb94:	2300      	movs	r3, #0
 800bb96:	4604      	mov	r4, r0
 800bb98:	4608      	mov	r0, r1
 800bb9a:	602b      	str	r3, [r5, #0]
 800bb9c:	f7f7 fc1a 	bl	80033d4 <_sbrk>
 800bba0:	1c43      	adds	r3, r0, #1
 800bba2:	d102      	bne.n	800bbaa <_sbrk_r+0x1a>
 800bba4:	682b      	ldr	r3, [r5, #0]
 800bba6:	b103      	cbz	r3, 800bbaa <_sbrk_r+0x1a>
 800bba8:	6023      	str	r3, [r4, #0]
 800bbaa:	bd38      	pop	{r3, r4, r5, pc}
 800bbac:	2000578c 	.word	0x2000578c

0800bbb0 <strncmp>:
 800bbb0:	b510      	push	{r4, lr}
 800bbb2:	b17a      	cbz	r2, 800bbd4 <strncmp+0x24>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	3901      	subs	r1, #1
 800bbb8:	1884      	adds	r4, r0, r2
 800bbba:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bbbe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bbc2:	4290      	cmp	r0, r2
 800bbc4:	d101      	bne.n	800bbca <strncmp+0x1a>
 800bbc6:	42a3      	cmp	r3, r4
 800bbc8:	d101      	bne.n	800bbce <strncmp+0x1e>
 800bbca:	1a80      	subs	r0, r0, r2
 800bbcc:	bd10      	pop	{r4, pc}
 800bbce:	2800      	cmp	r0, #0
 800bbd0:	d1f3      	bne.n	800bbba <strncmp+0xa>
 800bbd2:	e7fa      	b.n	800bbca <strncmp+0x1a>
 800bbd4:	4610      	mov	r0, r2
 800bbd6:	e7f9      	b.n	800bbcc <strncmp+0x1c>

0800bbd8 <__ascii_wctomb>:
 800bbd8:	b149      	cbz	r1, 800bbee <__ascii_wctomb+0x16>
 800bbda:	2aff      	cmp	r2, #255	; 0xff
 800bbdc:	bf85      	ittet	hi
 800bbde:	238a      	movhi	r3, #138	; 0x8a
 800bbe0:	6003      	strhi	r3, [r0, #0]
 800bbe2:	700a      	strbls	r2, [r1, #0]
 800bbe4:	f04f 30ff 	movhi.w	r0, #4294967295
 800bbe8:	bf98      	it	ls
 800bbea:	2001      	movls	r0, #1
 800bbec:	4770      	bx	lr
 800bbee:	4608      	mov	r0, r1
 800bbf0:	4770      	bx	lr
	...

0800bbf4 <__assert_func>:
 800bbf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bbf6:	4614      	mov	r4, r2
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	4b09      	ldr	r3, [pc, #36]	; (800bc20 <__assert_func+0x2c>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	4605      	mov	r5, r0
 800bc00:	68d8      	ldr	r0, [r3, #12]
 800bc02:	b14c      	cbz	r4, 800bc18 <__assert_func+0x24>
 800bc04:	4b07      	ldr	r3, [pc, #28]	; (800bc24 <__assert_func+0x30>)
 800bc06:	9100      	str	r1, [sp, #0]
 800bc08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc0c:	4906      	ldr	r1, [pc, #24]	; (800bc28 <__assert_func+0x34>)
 800bc0e:	462b      	mov	r3, r5
 800bc10:	f000 f80e 	bl	800bc30 <fiprintf>
 800bc14:	f000 fa72 	bl	800c0fc <abort>
 800bc18:	4b04      	ldr	r3, [pc, #16]	; (800bc2c <__assert_func+0x38>)
 800bc1a:	461c      	mov	r4, r3
 800bc1c:	e7f3      	b.n	800bc06 <__assert_func+0x12>
 800bc1e:	bf00      	nop
 800bc20:	2000010c 	.word	0x2000010c
 800bc24:	0800ccf5 	.word	0x0800ccf5
 800bc28:	0800cd02 	.word	0x0800cd02
 800bc2c:	0800cd30 	.word	0x0800cd30

0800bc30 <fiprintf>:
 800bc30:	b40e      	push	{r1, r2, r3}
 800bc32:	b503      	push	{r0, r1, lr}
 800bc34:	4601      	mov	r1, r0
 800bc36:	ab03      	add	r3, sp, #12
 800bc38:	4805      	ldr	r0, [pc, #20]	; (800bc50 <fiprintf+0x20>)
 800bc3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc3e:	6800      	ldr	r0, [r0, #0]
 800bc40:	9301      	str	r3, [sp, #4]
 800bc42:	f000 f86b 	bl	800bd1c <_vfiprintf_r>
 800bc46:	b002      	add	sp, #8
 800bc48:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc4c:	b003      	add	sp, #12
 800bc4e:	4770      	bx	lr
 800bc50:	2000010c 	.word	0x2000010c

0800bc54 <__malloc_lock>:
 800bc54:	4801      	ldr	r0, [pc, #4]	; (800bc5c <__malloc_lock+0x8>)
 800bc56:	f000 bc11 	b.w	800c47c <__retarget_lock_acquire_recursive>
 800bc5a:	bf00      	nop
 800bc5c:	20005790 	.word	0x20005790

0800bc60 <__malloc_unlock>:
 800bc60:	4801      	ldr	r0, [pc, #4]	; (800bc68 <__malloc_unlock+0x8>)
 800bc62:	f000 bc0c 	b.w	800c47e <__retarget_lock_release_recursive>
 800bc66:	bf00      	nop
 800bc68:	20005790 	.word	0x20005790

0800bc6c <_realloc_r>:
 800bc6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc70:	4680      	mov	r8, r0
 800bc72:	4614      	mov	r4, r2
 800bc74:	460e      	mov	r6, r1
 800bc76:	b921      	cbnz	r1, 800bc82 <_realloc_r+0x16>
 800bc78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc7c:	4611      	mov	r1, r2
 800bc7e:	f7ff bdaf 	b.w	800b7e0 <_malloc_r>
 800bc82:	b92a      	cbnz	r2, 800bc90 <_realloc_r+0x24>
 800bc84:	f7ff fd40 	bl	800b708 <_free_r>
 800bc88:	4625      	mov	r5, r4
 800bc8a:	4628      	mov	r0, r5
 800bc8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc90:	f000 fc5c 	bl	800c54c <_malloc_usable_size_r>
 800bc94:	4284      	cmp	r4, r0
 800bc96:	4607      	mov	r7, r0
 800bc98:	d802      	bhi.n	800bca0 <_realloc_r+0x34>
 800bc9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bc9e:	d812      	bhi.n	800bcc6 <_realloc_r+0x5a>
 800bca0:	4621      	mov	r1, r4
 800bca2:	4640      	mov	r0, r8
 800bca4:	f7ff fd9c 	bl	800b7e0 <_malloc_r>
 800bca8:	4605      	mov	r5, r0
 800bcaa:	2800      	cmp	r0, #0
 800bcac:	d0ed      	beq.n	800bc8a <_realloc_r+0x1e>
 800bcae:	42bc      	cmp	r4, r7
 800bcb0:	4622      	mov	r2, r4
 800bcb2:	4631      	mov	r1, r6
 800bcb4:	bf28      	it	cs
 800bcb6:	463a      	movcs	r2, r7
 800bcb8:	f7fc f8bc 	bl	8007e34 <memcpy>
 800bcbc:	4631      	mov	r1, r6
 800bcbe:	4640      	mov	r0, r8
 800bcc0:	f7ff fd22 	bl	800b708 <_free_r>
 800bcc4:	e7e1      	b.n	800bc8a <_realloc_r+0x1e>
 800bcc6:	4635      	mov	r5, r6
 800bcc8:	e7df      	b.n	800bc8a <_realloc_r+0x1e>

0800bcca <__sfputc_r>:
 800bcca:	6893      	ldr	r3, [r2, #8]
 800bccc:	3b01      	subs	r3, #1
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	b410      	push	{r4}
 800bcd2:	6093      	str	r3, [r2, #8]
 800bcd4:	da08      	bge.n	800bce8 <__sfputc_r+0x1e>
 800bcd6:	6994      	ldr	r4, [r2, #24]
 800bcd8:	42a3      	cmp	r3, r4
 800bcda:	db01      	blt.n	800bce0 <__sfputc_r+0x16>
 800bcdc:	290a      	cmp	r1, #10
 800bcde:	d103      	bne.n	800bce8 <__sfputc_r+0x1e>
 800bce0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bce4:	f000 b94a 	b.w	800bf7c <__swbuf_r>
 800bce8:	6813      	ldr	r3, [r2, #0]
 800bcea:	1c58      	adds	r0, r3, #1
 800bcec:	6010      	str	r0, [r2, #0]
 800bcee:	7019      	strb	r1, [r3, #0]
 800bcf0:	4608      	mov	r0, r1
 800bcf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <__sfputs_r>:
 800bcf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcfa:	4606      	mov	r6, r0
 800bcfc:	460f      	mov	r7, r1
 800bcfe:	4614      	mov	r4, r2
 800bd00:	18d5      	adds	r5, r2, r3
 800bd02:	42ac      	cmp	r4, r5
 800bd04:	d101      	bne.n	800bd0a <__sfputs_r+0x12>
 800bd06:	2000      	movs	r0, #0
 800bd08:	e007      	b.n	800bd1a <__sfputs_r+0x22>
 800bd0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd0e:	463a      	mov	r2, r7
 800bd10:	4630      	mov	r0, r6
 800bd12:	f7ff ffda 	bl	800bcca <__sfputc_r>
 800bd16:	1c43      	adds	r3, r0, #1
 800bd18:	d1f3      	bne.n	800bd02 <__sfputs_r+0xa>
 800bd1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bd1c <_vfiprintf_r>:
 800bd1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd20:	460d      	mov	r5, r1
 800bd22:	b09d      	sub	sp, #116	; 0x74
 800bd24:	4614      	mov	r4, r2
 800bd26:	4698      	mov	r8, r3
 800bd28:	4606      	mov	r6, r0
 800bd2a:	b118      	cbz	r0, 800bd34 <_vfiprintf_r+0x18>
 800bd2c:	6983      	ldr	r3, [r0, #24]
 800bd2e:	b90b      	cbnz	r3, 800bd34 <_vfiprintf_r+0x18>
 800bd30:	f000 fb06 	bl	800c340 <__sinit>
 800bd34:	4b89      	ldr	r3, [pc, #548]	; (800bf5c <_vfiprintf_r+0x240>)
 800bd36:	429d      	cmp	r5, r3
 800bd38:	d11b      	bne.n	800bd72 <_vfiprintf_r+0x56>
 800bd3a:	6875      	ldr	r5, [r6, #4]
 800bd3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd3e:	07d9      	lsls	r1, r3, #31
 800bd40:	d405      	bmi.n	800bd4e <_vfiprintf_r+0x32>
 800bd42:	89ab      	ldrh	r3, [r5, #12]
 800bd44:	059a      	lsls	r2, r3, #22
 800bd46:	d402      	bmi.n	800bd4e <_vfiprintf_r+0x32>
 800bd48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd4a:	f000 fb97 	bl	800c47c <__retarget_lock_acquire_recursive>
 800bd4e:	89ab      	ldrh	r3, [r5, #12]
 800bd50:	071b      	lsls	r3, r3, #28
 800bd52:	d501      	bpl.n	800bd58 <_vfiprintf_r+0x3c>
 800bd54:	692b      	ldr	r3, [r5, #16]
 800bd56:	b9eb      	cbnz	r3, 800bd94 <_vfiprintf_r+0x78>
 800bd58:	4629      	mov	r1, r5
 800bd5a:	4630      	mov	r0, r6
 800bd5c:	f000 f960 	bl	800c020 <__swsetup_r>
 800bd60:	b1c0      	cbz	r0, 800bd94 <_vfiprintf_r+0x78>
 800bd62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd64:	07dc      	lsls	r4, r3, #31
 800bd66:	d50e      	bpl.n	800bd86 <_vfiprintf_r+0x6a>
 800bd68:	f04f 30ff 	mov.w	r0, #4294967295
 800bd6c:	b01d      	add	sp, #116	; 0x74
 800bd6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd72:	4b7b      	ldr	r3, [pc, #492]	; (800bf60 <_vfiprintf_r+0x244>)
 800bd74:	429d      	cmp	r5, r3
 800bd76:	d101      	bne.n	800bd7c <_vfiprintf_r+0x60>
 800bd78:	68b5      	ldr	r5, [r6, #8]
 800bd7a:	e7df      	b.n	800bd3c <_vfiprintf_r+0x20>
 800bd7c:	4b79      	ldr	r3, [pc, #484]	; (800bf64 <_vfiprintf_r+0x248>)
 800bd7e:	429d      	cmp	r5, r3
 800bd80:	bf08      	it	eq
 800bd82:	68f5      	ldreq	r5, [r6, #12]
 800bd84:	e7da      	b.n	800bd3c <_vfiprintf_r+0x20>
 800bd86:	89ab      	ldrh	r3, [r5, #12]
 800bd88:	0598      	lsls	r0, r3, #22
 800bd8a:	d4ed      	bmi.n	800bd68 <_vfiprintf_r+0x4c>
 800bd8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd8e:	f000 fb76 	bl	800c47e <__retarget_lock_release_recursive>
 800bd92:	e7e9      	b.n	800bd68 <_vfiprintf_r+0x4c>
 800bd94:	2300      	movs	r3, #0
 800bd96:	9309      	str	r3, [sp, #36]	; 0x24
 800bd98:	2320      	movs	r3, #32
 800bd9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bda2:	2330      	movs	r3, #48	; 0x30
 800bda4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bf68 <_vfiprintf_r+0x24c>
 800bda8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bdac:	f04f 0901 	mov.w	r9, #1
 800bdb0:	4623      	mov	r3, r4
 800bdb2:	469a      	mov	sl, r3
 800bdb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdb8:	b10a      	cbz	r2, 800bdbe <_vfiprintf_r+0xa2>
 800bdba:	2a25      	cmp	r2, #37	; 0x25
 800bdbc:	d1f9      	bne.n	800bdb2 <_vfiprintf_r+0x96>
 800bdbe:	ebba 0b04 	subs.w	fp, sl, r4
 800bdc2:	d00b      	beq.n	800bddc <_vfiprintf_r+0xc0>
 800bdc4:	465b      	mov	r3, fp
 800bdc6:	4622      	mov	r2, r4
 800bdc8:	4629      	mov	r1, r5
 800bdca:	4630      	mov	r0, r6
 800bdcc:	f7ff ff94 	bl	800bcf8 <__sfputs_r>
 800bdd0:	3001      	adds	r0, #1
 800bdd2:	f000 80aa 	beq.w	800bf2a <_vfiprintf_r+0x20e>
 800bdd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdd8:	445a      	add	r2, fp
 800bdda:	9209      	str	r2, [sp, #36]	; 0x24
 800bddc:	f89a 3000 	ldrb.w	r3, [sl]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	f000 80a2 	beq.w	800bf2a <_vfiprintf_r+0x20e>
 800bde6:	2300      	movs	r3, #0
 800bde8:	f04f 32ff 	mov.w	r2, #4294967295
 800bdec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdf0:	f10a 0a01 	add.w	sl, sl, #1
 800bdf4:	9304      	str	r3, [sp, #16]
 800bdf6:	9307      	str	r3, [sp, #28]
 800bdf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bdfc:	931a      	str	r3, [sp, #104]	; 0x68
 800bdfe:	4654      	mov	r4, sl
 800be00:	2205      	movs	r2, #5
 800be02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be06:	4858      	ldr	r0, [pc, #352]	; (800bf68 <_vfiprintf_r+0x24c>)
 800be08:	f7f4 f9c2 	bl	8000190 <memchr>
 800be0c:	9a04      	ldr	r2, [sp, #16]
 800be0e:	b9d8      	cbnz	r0, 800be48 <_vfiprintf_r+0x12c>
 800be10:	06d1      	lsls	r1, r2, #27
 800be12:	bf44      	itt	mi
 800be14:	2320      	movmi	r3, #32
 800be16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be1a:	0713      	lsls	r3, r2, #28
 800be1c:	bf44      	itt	mi
 800be1e:	232b      	movmi	r3, #43	; 0x2b
 800be20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be24:	f89a 3000 	ldrb.w	r3, [sl]
 800be28:	2b2a      	cmp	r3, #42	; 0x2a
 800be2a:	d015      	beq.n	800be58 <_vfiprintf_r+0x13c>
 800be2c:	9a07      	ldr	r2, [sp, #28]
 800be2e:	4654      	mov	r4, sl
 800be30:	2000      	movs	r0, #0
 800be32:	f04f 0c0a 	mov.w	ip, #10
 800be36:	4621      	mov	r1, r4
 800be38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be3c:	3b30      	subs	r3, #48	; 0x30
 800be3e:	2b09      	cmp	r3, #9
 800be40:	d94e      	bls.n	800bee0 <_vfiprintf_r+0x1c4>
 800be42:	b1b0      	cbz	r0, 800be72 <_vfiprintf_r+0x156>
 800be44:	9207      	str	r2, [sp, #28]
 800be46:	e014      	b.n	800be72 <_vfiprintf_r+0x156>
 800be48:	eba0 0308 	sub.w	r3, r0, r8
 800be4c:	fa09 f303 	lsl.w	r3, r9, r3
 800be50:	4313      	orrs	r3, r2
 800be52:	9304      	str	r3, [sp, #16]
 800be54:	46a2      	mov	sl, r4
 800be56:	e7d2      	b.n	800bdfe <_vfiprintf_r+0xe2>
 800be58:	9b03      	ldr	r3, [sp, #12]
 800be5a:	1d19      	adds	r1, r3, #4
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	9103      	str	r1, [sp, #12]
 800be60:	2b00      	cmp	r3, #0
 800be62:	bfbb      	ittet	lt
 800be64:	425b      	neglt	r3, r3
 800be66:	f042 0202 	orrlt.w	r2, r2, #2
 800be6a:	9307      	strge	r3, [sp, #28]
 800be6c:	9307      	strlt	r3, [sp, #28]
 800be6e:	bfb8      	it	lt
 800be70:	9204      	strlt	r2, [sp, #16]
 800be72:	7823      	ldrb	r3, [r4, #0]
 800be74:	2b2e      	cmp	r3, #46	; 0x2e
 800be76:	d10c      	bne.n	800be92 <_vfiprintf_r+0x176>
 800be78:	7863      	ldrb	r3, [r4, #1]
 800be7a:	2b2a      	cmp	r3, #42	; 0x2a
 800be7c:	d135      	bne.n	800beea <_vfiprintf_r+0x1ce>
 800be7e:	9b03      	ldr	r3, [sp, #12]
 800be80:	1d1a      	adds	r2, r3, #4
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	9203      	str	r2, [sp, #12]
 800be86:	2b00      	cmp	r3, #0
 800be88:	bfb8      	it	lt
 800be8a:	f04f 33ff 	movlt.w	r3, #4294967295
 800be8e:	3402      	adds	r4, #2
 800be90:	9305      	str	r3, [sp, #20]
 800be92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bf78 <_vfiprintf_r+0x25c>
 800be96:	7821      	ldrb	r1, [r4, #0]
 800be98:	2203      	movs	r2, #3
 800be9a:	4650      	mov	r0, sl
 800be9c:	f7f4 f978 	bl	8000190 <memchr>
 800bea0:	b140      	cbz	r0, 800beb4 <_vfiprintf_r+0x198>
 800bea2:	2340      	movs	r3, #64	; 0x40
 800bea4:	eba0 000a 	sub.w	r0, r0, sl
 800bea8:	fa03 f000 	lsl.w	r0, r3, r0
 800beac:	9b04      	ldr	r3, [sp, #16]
 800beae:	4303      	orrs	r3, r0
 800beb0:	3401      	adds	r4, #1
 800beb2:	9304      	str	r3, [sp, #16]
 800beb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beb8:	482c      	ldr	r0, [pc, #176]	; (800bf6c <_vfiprintf_r+0x250>)
 800beba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bebe:	2206      	movs	r2, #6
 800bec0:	f7f4 f966 	bl	8000190 <memchr>
 800bec4:	2800      	cmp	r0, #0
 800bec6:	d03f      	beq.n	800bf48 <_vfiprintf_r+0x22c>
 800bec8:	4b29      	ldr	r3, [pc, #164]	; (800bf70 <_vfiprintf_r+0x254>)
 800beca:	bb1b      	cbnz	r3, 800bf14 <_vfiprintf_r+0x1f8>
 800becc:	9b03      	ldr	r3, [sp, #12]
 800bece:	3307      	adds	r3, #7
 800bed0:	f023 0307 	bic.w	r3, r3, #7
 800bed4:	3308      	adds	r3, #8
 800bed6:	9303      	str	r3, [sp, #12]
 800bed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beda:	443b      	add	r3, r7
 800bedc:	9309      	str	r3, [sp, #36]	; 0x24
 800bede:	e767      	b.n	800bdb0 <_vfiprintf_r+0x94>
 800bee0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bee4:	460c      	mov	r4, r1
 800bee6:	2001      	movs	r0, #1
 800bee8:	e7a5      	b.n	800be36 <_vfiprintf_r+0x11a>
 800beea:	2300      	movs	r3, #0
 800beec:	3401      	adds	r4, #1
 800beee:	9305      	str	r3, [sp, #20]
 800bef0:	4619      	mov	r1, r3
 800bef2:	f04f 0c0a 	mov.w	ip, #10
 800bef6:	4620      	mov	r0, r4
 800bef8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800befc:	3a30      	subs	r2, #48	; 0x30
 800befe:	2a09      	cmp	r2, #9
 800bf00:	d903      	bls.n	800bf0a <_vfiprintf_r+0x1ee>
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d0c5      	beq.n	800be92 <_vfiprintf_r+0x176>
 800bf06:	9105      	str	r1, [sp, #20]
 800bf08:	e7c3      	b.n	800be92 <_vfiprintf_r+0x176>
 800bf0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf0e:	4604      	mov	r4, r0
 800bf10:	2301      	movs	r3, #1
 800bf12:	e7f0      	b.n	800bef6 <_vfiprintf_r+0x1da>
 800bf14:	ab03      	add	r3, sp, #12
 800bf16:	9300      	str	r3, [sp, #0]
 800bf18:	462a      	mov	r2, r5
 800bf1a:	4b16      	ldr	r3, [pc, #88]	; (800bf74 <_vfiprintf_r+0x258>)
 800bf1c:	a904      	add	r1, sp, #16
 800bf1e:	4630      	mov	r0, r6
 800bf20:	f7fc f858 	bl	8007fd4 <_printf_float>
 800bf24:	4607      	mov	r7, r0
 800bf26:	1c78      	adds	r0, r7, #1
 800bf28:	d1d6      	bne.n	800bed8 <_vfiprintf_r+0x1bc>
 800bf2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf2c:	07d9      	lsls	r1, r3, #31
 800bf2e:	d405      	bmi.n	800bf3c <_vfiprintf_r+0x220>
 800bf30:	89ab      	ldrh	r3, [r5, #12]
 800bf32:	059a      	lsls	r2, r3, #22
 800bf34:	d402      	bmi.n	800bf3c <_vfiprintf_r+0x220>
 800bf36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf38:	f000 faa1 	bl	800c47e <__retarget_lock_release_recursive>
 800bf3c:	89ab      	ldrh	r3, [r5, #12]
 800bf3e:	065b      	lsls	r3, r3, #25
 800bf40:	f53f af12 	bmi.w	800bd68 <_vfiprintf_r+0x4c>
 800bf44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf46:	e711      	b.n	800bd6c <_vfiprintf_r+0x50>
 800bf48:	ab03      	add	r3, sp, #12
 800bf4a:	9300      	str	r3, [sp, #0]
 800bf4c:	462a      	mov	r2, r5
 800bf4e:	4b09      	ldr	r3, [pc, #36]	; (800bf74 <_vfiprintf_r+0x258>)
 800bf50:	a904      	add	r1, sp, #16
 800bf52:	4630      	mov	r0, r6
 800bf54:	f7fc fae2 	bl	800851c <_printf_i>
 800bf58:	e7e4      	b.n	800bf24 <_vfiprintf_r+0x208>
 800bf5a:	bf00      	nop
 800bf5c:	0800cd54 	.word	0x0800cd54
 800bf60:	0800cd74 	.word	0x0800cd74
 800bf64:	0800cd34 	.word	0x0800cd34
 800bf68:	0800cce4 	.word	0x0800cce4
 800bf6c:	0800ccee 	.word	0x0800ccee
 800bf70:	08007fd5 	.word	0x08007fd5
 800bf74:	0800bcf9 	.word	0x0800bcf9
 800bf78:	0800ccea 	.word	0x0800ccea

0800bf7c <__swbuf_r>:
 800bf7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf7e:	460e      	mov	r6, r1
 800bf80:	4614      	mov	r4, r2
 800bf82:	4605      	mov	r5, r0
 800bf84:	b118      	cbz	r0, 800bf8e <__swbuf_r+0x12>
 800bf86:	6983      	ldr	r3, [r0, #24]
 800bf88:	b90b      	cbnz	r3, 800bf8e <__swbuf_r+0x12>
 800bf8a:	f000 f9d9 	bl	800c340 <__sinit>
 800bf8e:	4b21      	ldr	r3, [pc, #132]	; (800c014 <__swbuf_r+0x98>)
 800bf90:	429c      	cmp	r4, r3
 800bf92:	d12b      	bne.n	800bfec <__swbuf_r+0x70>
 800bf94:	686c      	ldr	r4, [r5, #4]
 800bf96:	69a3      	ldr	r3, [r4, #24]
 800bf98:	60a3      	str	r3, [r4, #8]
 800bf9a:	89a3      	ldrh	r3, [r4, #12]
 800bf9c:	071a      	lsls	r2, r3, #28
 800bf9e:	d52f      	bpl.n	800c000 <__swbuf_r+0x84>
 800bfa0:	6923      	ldr	r3, [r4, #16]
 800bfa2:	b36b      	cbz	r3, 800c000 <__swbuf_r+0x84>
 800bfa4:	6923      	ldr	r3, [r4, #16]
 800bfa6:	6820      	ldr	r0, [r4, #0]
 800bfa8:	1ac0      	subs	r0, r0, r3
 800bfaa:	6963      	ldr	r3, [r4, #20]
 800bfac:	b2f6      	uxtb	r6, r6
 800bfae:	4283      	cmp	r3, r0
 800bfb0:	4637      	mov	r7, r6
 800bfb2:	dc04      	bgt.n	800bfbe <__swbuf_r+0x42>
 800bfb4:	4621      	mov	r1, r4
 800bfb6:	4628      	mov	r0, r5
 800bfb8:	f000 f92e 	bl	800c218 <_fflush_r>
 800bfbc:	bb30      	cbnz	r0, 800c00c <__swbuf_r+0x90>
 800bfbe:	68a3      	ldr	r3, [r4, #8]
 800bfc0:	3b01      	subs	r3, #1
 800bfc2:	60a3      	str	r3, [r4, #8]
 800bfc4:	6823      	ldr	r3, [r4, #0]
 800bfc6:	1c5a      	adds	r2, r3, #1
 800bfc8:	6022      	str	r2, [r4, #0]
 800bfca:	701e      	strb	r6, [r3, #0]
 800bfcc:	6963      	ldr	r3, [r4, #20]
 800bfce:	3001      	adds	r0, #1
 800bfd0:	4283      	cmp	r3, r0
 800bfd2:	d004      	beq.n	800bfde <__swbuf_r+0x62>
 800bfd4:	89a3      	ldrh	r3, [r4, #12]
 800bfd6:	07db      	lsls	r3, r3, #31
 800bfd8:	d506      	bpl.n	800bfe8 <__swbuf_r+0x6c>
 800bfda:	2e0a      	cmp	r6, #10
 800bfdc:	d104      	bne.n	800bfe8 <__swbuf_r+0x6c>
 800bfde:	4621      	mov	r1, r4
 800bfe0:	4628      	mov	r0, r5
 800bfe2:	f000 f919 	bl	800c218 <_fflush_r>
 800bfe6:	b988      	cbnz	r0, 800c00c <__swbuf_r+0x90>
 800bfe8:	4638      	mov	r0, r7
 800bfea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfec:	4b0a      	ldr	r3, [pc, #40]	; (800c018 <__swbuf_r+0x9c>)
 800bfee:	429c      	cmp	r4, r3
 800bff0:	d101      	bne.n	800bff6 <__swbuf_r+0x7a>
 800bff2:	68ac      	ldr	r4, [r5, #8]
 800bff4:	e7cf      	b.n	800bf96 <__swbuf_r+0x1a>
 800bff6:	4b09      	ldr	r3, [pc, #36]	; (800c01c <__swbuf_r+0xa0>)
 800bff8:	429c      	cmp	r4, r3
 800bffa:	bf08      	it	eq
 800bffc:	68ec      	ldreq	r4, [r5, #12]
 800bffe:	e7ca      	b.n	800bf96 <__swbuf_r+0x1a>
 800c000:	4621      	mov	r1, r4
 800c002:	4628      	mov	r0, r5
 800c004:	f000 f80c 	bl	800c020 <__swsetup_r>
 800c008:	2800      	cmp	r0, #0
 800c00a:	d0cb      	beq.n	800bfa4 <__swbuf_r+0x28>
 800c00c:	f04f 37ff 	mov.w	r7, #4294967295
 800c010:	e7ea      	b.n	800bfe8 <__swbuf_r+0x6c>
 800c012:	bf00      	nop
 800c014:	0800cd54 	.word	0x0800cd54
 800c018:	0800cd74 	.word	0x0800cd74
 800c01c:	0800cd34 	.word	0x0800cd34

0800c020 <__swsetup_r>:
 800c020:	4b32      	ldr	r3, [pc, #200]	; (800c0ec <__swsetup_r+0xcc>)
 800c022:	b570      	push	{r4, r5, r6, lr}
 800c024:	681d      	ldr	r5, [r3, #0]
 800c026:	4606      	mov	r6, r0
 800c028:	460c      	mov	r4, r1
 800c02a:	b125      	cbz	r5, 800c036 <__swsetup_r+0x16>
 800c02c:	69ab      	ldr	r3, [r5, #24]
 800c02e:	b913      	cbnz	r3, 800c036 <__swsetup_r+0x16>
 800c030:	4628      	mov	r0, r5
 800c032:	f000 f985 	bl	800c340 <__sinit>
 800c036:	4b2e      	ldr	r3, [pc, #184]	; (800c0f0 <__swsetup_r+0xd0>)
 800c038:	429c      	cmp	r4, r3
 800c03a:	d10f      	bne.n	800c05c <__swsetup_r+0x3c>
 800c03c:	686c      	ldr	r4, [r5, #4]
 800c03e:	89a3      	ldrh	r3, [r4, #12]
 800c040:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c044:	0719      	lsls	r1, r3, #28
 800c046:	d42c      	bmi.n	800c0a2 <__swsetup_r+0x82>
 800c048:	06dd      	lsls	r5, r3, #27
 800c04a:	d411      	bmi.n	800c070 <__swsetup_r+0x50>
 800c04c:	2309      	movs	r3, #9
 800c04e:	6033      	str	r3, [r6, #0]
 800c050:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c054:	81a3      	strh	r3, [r4, #12]
 800c056:	f04f 30ff 	mov.w	r0, #4294967295
 800c05a:	e03e      	b.n	800c0da <__swsetup_r+0xba>
 800c05c:	4b25      	ldr	r3, [pc, #148]	; (800c0f4 <__swsetup_r+0xd4>)
 800c05e:	429c      	cmp	r4, r3
 800c060:	d101      	bne.n	800c066 <__swsetup_r+0x46>
 800c062:	68ac      	ldr	r4, [r5, #8]
 800c064:	e7eb      	b.n	800c03e <__swsetup_r+0x1e>
 800c066:	4b24      	ldr	r3, [pc, #144]	; (800c0f8 <__swsetup_r+0xd8>)
 800c068:	429c      	cmp	r4, r3
 800c06a:	bf08      	it	eq
 800c06c:	68ec      	ldreq	r4, [r5, #12]
 800c06e:	e7e6      	b.n	800c03e <__swsetup_r+0x1e>
 800c070:	0758      	lsls	r0, r3, #29
 800c072:	d512      	bpl.n	800c09a <__swsetup_r+0x7a>
 800c074:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c076:	b141      	cbz	r1, 800c08a <__swsetup_r+0x6a>
 800c078:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c07c:	4299      	cmp	r1, r3
 800c07e:	d002      	beq.n	800c086 <__swsetup_r+0x66>
 800c080:	4630      	mov	r0, r6
 800c082:	f7ff fb41 	bl	800b708 <_free_r>
 800c086:	2300      	movs	r3, #0
 800c088:	6363      	str	r3, [r4, #52]	; 0x34
 800c08a:	89a3      	ldrh	r3, [r4, #12]
 800c08c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c090:	81a3      	strh	r3, [r4, #12]
 800c092:	2300      	movs	r3, #0
 800c094:	6063      	str	r3, [r4, #4]
 800c096:	6923      	ldr	r3, [r4, #16]
 800c098:	6023      	str	r3, [r4, #0]
 800c09a:	89a3      	ldrh	r3, [r4, #12]
 800c09c:	f043 0308 	orr.w	r3, r3, #8
 800c0a0:	81a3      	strh	r3, [r4, #12]
 800c0a2:	6923      	ldr	r3, [r4, #16]
 800c0a4:	b94b      	cbnz	r3, 800c0ba <__swsetup_r+0x9a>
 800c0a6:	89a3      	ldrh	r3, [r4, #12]
 800c0a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c0ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0b0:	d003      	beq.n	800c0ba <__swsetup_r+0x9a>
 800c0b2:	4621      	mov	r1, r4
 800c0b4:	4630      	mov	r0, r6
 800c0b6:	f000 fa09 	bl	800c4cc <__smakebuf_r>
 800c0ba:	89a0      	ldrh	r0, [r4, #12]
 800c0bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c0c0:	f010 0301 	ands.w	r3, r0, #1
 800c0c4:	d00a      	beq.n	800c0dc <__swsetup_r+0xbc>
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	60a3      	str	r3, [r4, #8]
 800c0ca:	6963      	ldr	r3, [r4, #20]
 800c0cc:	425b      	negs	r3, r3
 800c0ce:	61a3      	str	r3, [r4, #24]
 800c0d0:	6923      	ldr	r3, [r4, #16]
 800c0d2:	b943      	cbnz	r3, 800c0e6 <__swsetup_r+0xc6>
 800c0d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c0d8:	d1ba      	bne.n	800c050 <__swsetup_r+0x30>
 800c0da:	bd70      	pop	{r4, r5, r6, pc}
 800c0dc:	0781      	lsls	r1, r0, #30
 800c0de:	bf58      	it	pl
 800c0e0:	6963      	ldrpl	r3, [r4, #20]
 800c0e2:	60a3      	str	r3, [r4, #8]
 800c0e4:	e7f4      	b.n	800c0d0 <__swsetup_r+0xb0>
 800c0e6:	2000      	movs	r0, #0
 800c0e8:	e7f7      	b.n	800c0da <__swsetup_r+0xba>
 800c0ea:	bf00      	nop
 800c0ec:	2000010c 	.word	0x2000010c
 800c0f0:	0800cd54 	.word	0x0800cd54
 800c0f4:	0800cd74 	.word	0x0800cd74
 800c0f8:	0800cd34 	.word	0x0800cd34

0800c0fc <abort>:
 800c0fc:	b508      	push	{r3, lr}
 800c0fe:	2006      	movs	r0, #6
 800c100:	f000 fa54 	bl	800c5ac <raise>
 800c104:	2001      	movs	r0, #1
 800c106:	f7f7 f935 	bl	8003374 <_exit>
	...

0800c10c <__sflush_r>:
 800c10c:	898a      	ldrh	r2, [r1, #12]
 800c10e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c112:	4605      	mov	r5, r0
 800c114:	0710      	lsls	r0, r2, #28
 800c116:	460c      	mov	r4, r1
 800c118:	d458      	bmi.n	800c1cc <__sflush_r+0xc0>
 800c11a:	684b      	ldr	r3, [r1, #4]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	dc05      	bgt.n	800c12c <__sflush_r+0x20>
 800c120:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c122:	2b00      	cmp	r3, #0
 800c124:	dc02      	bgt.n	800c12c <__sflush_r+0x20>
 800c126:	2000      	movs	r0, #0
 800c128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c12c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c12e:	2e00      	cmp	r6, #0
 800c130:	d0f9      	beq.n	800c126 <__sflush_r+0x1a>
 800c132:	2300      	movs	r3, #0
 800c134:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c138:	682f      	ldr	r7, [r5, #0]
 800c13a:	602b      	str	r3, [r5, #0]
 800c13c:	d032      	beq.n	800c1a4 <__sflush_r+0x98>
 800c13e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c140:	89a3      	ldrh	r3, [r4, #12]
 800c142:	075a      	lsls	r2, r3, #29
 800c144:	d505      	bpl.n	800c152 <__sflush_r+0x46>
 800c146:	6863      	ldr	r3, [r4, #4]
 800c148:	1ac0      	subs	r0, r0, r3
 800c14a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c14c:	b10b      	cbz	r3, 800c152 <__sflush_r+0x46>
 800c14e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c150:	1ac0      	subs	r0, r0, r3
 800c152:	2300      	movs	r3, #0
 800c154:	4602      	mov	r2, r0
 800c156:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c158:	6a21      	ldr	r1, [r4, #32]
 800c15a:	4628      	mov	r0, r5
 800c15c:	47b0      	blx	r6
 800c15e:	1c43      	adds	r3, r0, #1
 800c160:	89a3      	ldrh	r3, [r4, #12]
 800c162:	d106      	bne.n	800c172 <__sflush_r+0x66>
 800c164:	6829      	ldr	r1, [r5, #0]
 800c166:	291d      	cmp	r1, #29
 800c168:	d82c      	bhi.n	800c1c4 <__sflush_r+0xb8>
 800c16a:	4a2a      	ldr	r2, [pc, #168]	; (800c214 <__sflush_r+0x108>)
 800c16c:	40ca      	lsrs	r2, r1
 800c16e:	07d6      	lsls	r6, r2, #31
 800c170:	d528      	bpl.n	800c1c4 <__sflush_r+0xb8>
 800c172:	2200      	movs	r2, #0
 800c174:	6062      	str	r2, [r4, #4]
 800c176:	04d9      	lsls	r1, r3, #19
 800c178:	6922      	ldr	r2, [r4, #16]
 800c17a:	6022      	str	r2, [r4, #0]
 800c17c:	d504      	bpl.n	800c188 <__sflush_r+0x7c>
 800c17e:	1c42      	adds	r2, r0, #1
 800c180:	d101      	bne.n	800c186 <__sflush_r+0x7a>
 800c182:	682b      	ldr	r3, [r5, #0]
 800c184:	b903      	cbnz	r3, 800c188 <__sflush_r+0x7c>
 800c186:	6560      	str	r0, [r4, #84]	; 0x54
 800c188:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c18a:	602f      	str	r7, [r5, #0]
 800c18c:	2900      	cmp	r1, #0
 800c18e:	d0ca      	beq.n	800c126 <__sflush_r+0x1a>
 800c190:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c194:	4299      	cmp	r1, r3
 800c196:	d002      	beq.n	800c19e <__sflush_r+0x92>
 800c198:	4628      	mov	r0, r5
 800c19a:	f7ff fab5 	bl	800b708 <_free_r>
 800c19e:	2000      	movs	r0, #0
 800c1a0:	6360      	str	r0, [r4, #52]	; 0x34
 800c1a2:	e7c1      	b.n	800c128 <__sflush_r+0x1c>
 800c1a4:	6a21      	ldr	r1, [r4, #32]
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	4628      	mov	r0, r5
 800c1aa:	47b0      	blx	r6
 800c1ac:	1c41      	adds	r1, r0, #1
 800c1ae:	d1c7      	bne.n	800c140 <__sflush_r+0x34>
 800c1b0:	682b      	ldr	r3, [r5, #0]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d0c4      	beq.n	800c140 <__sflush_r+0x34>
 800c1b6:	2b1d      	cmp	r3, #29
 800c1b8:	d001      	beq.n	800c1be <__sflush_r+0xb2>
 800c1ba:	2b16      	cmp	r3, #22
 800c1bc:	d101      	bne.n	800c1c2 <__sflush_r+0xb6>
 800c1be:	602f      	str	r7, [r5, #0]
 800c1c0:	e7b1      	b.n	800c126 <__sflush_r+0x1a>
 800c1c2:	89a3      	ldrh	r3, [r4, #12]
 800c1c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1c8:	81a3      	strh	r3, [r4, #12]
 800c1ca:	e7ad      	b.n	800c128 <__sflush_r+0x1c>
 800c1cc:	690f      	ldr	r7, [r1, #16]
 800c1ce:	2f00      	cmp	r7, #0
 800c1d0:	d0a9      	beq.n	800c126 <__sflush_r+0x1a>
 800c1d2:	0793      	lsls	r3, r2, #30
 800c1d4:	680e      	ldr	r6, [r1, #0]
 800c1d6:	bf08      	it	eq
 800c1d8:	694b      	ldreq	r3, [r1, #20]
 800c1da:	600f      	str	r7, [r1, #0]
 800c1dc:	bf18      	it	ne
 800c1de:	2300      	movne	r3, #0
 800c1e0:	eba6 0807 	sub.w	r8, r6, r7
 800c1e4:	608b      	str	r3, [r1, #8]
 800c1e6:	f1b8 0f00 	cmp.w	r8, #0
 800c1ea:	dd9c      	ble.n	800c126 <__sflush_r+0x1a>
 800c1ec:	6a21      	ldr	r1, [r4, #32]
 800c1ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c1f0:	4643      	mov	r3, r8
 800c1f2:	463a      	mov	r2, r7
 800c1f4:	4628      	mov	r0, r5
 800c1f6:	47b0      	blx	r6
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	dc06      	bgt.n	800c20a <__sflush_r+0xfe>
 800c1fc:	89a3      	ldrh	r3, [r4, #12]
 800c1fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c202:	81a3      	strh	r3, [r4, #12]
 800c204:	f04f 30ff 	mov.w	r0, #4294967295
 800c208:	e78e      	b.n	800c128 <__sflush_r+0x1c>
 800c20a:	4407      	add	r7, r0
 800c20c:	eba8 0800 	sub.w	r8, r8, r0
 800c210:	e7e9      	b.n	800c1e6 <__sflush_r+0xda>
 800c212:	bf00      	nop
 800c214:	20400001 	.word	0x20400001

0800c218 <_fflush_r>:
 800c218:	b538      	push	{r3, r4, r5, lr}
 800c21a:	690b      	ldr	r3, [r1, #16]
 800c21c:	4605      	mov	r5, r0
 800c21e:	460c      	mov	r4, r1
 800c220:	b913      	cbnz	r3, 800c228 <_fflush_r+0x10>
 800c222:	2500      	movs	r5, #0
 800c224:	4628      	mov	r0, r5
 800c226:	bd38      	pop	{r3, r4, r5, pc}
 800c228:	b118      	cbz	r0, 800c232 <_fflush_r+0x1a>
 800c22a:	6983      	ldr	r3, [r0, #24]
 800c22c:	b90b      	cbnz	r3, 800c232 <_fflush_r+0x1a>
 800c22e:	f000 f887 	bl	800c340 <__sinit>
 800c232:	4b14      	ldr	r3, [pc, #80]	; (800c284 <_fflush_r+0x6c>)
 800c234:	429c      	cmp	r4, r3
 800c236:	d11b      	bne.n	800c270 <_fflush_r+0x58>
 800c238:	686c      	ldr	r4, [r5, #4]
 800c23a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d0ef      	beq.n	800c222 <_fflush_r+0xa>
 800c242:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c244:	07d0      	lsls	r0, r2, #31
 800c246:	d404      	bmi.n	800c252 <_fflush_r+0x3a>
 800c248:	0599      	lsls	r1, r3, #22
 800c24a:	d402      	bmi.n	800c252 <_fflush_r+0x3a>
 800c24c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c24e:	f000 f915 	bl	800c47c <__retarget_lock_acquire_recursive>
 800c252:	4628      	mov	r0, r5
 800c254:	4621      	mov	r1, r4
 800c256:	f7ff ff59 	bl	800c10c <__sflush_r>
 800c25a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c25c:	07da      	lsls	r2, r3, #31
 800c25e:	4605      	mov	r5, r0
 800c260:	d4e0      	bmi.n	800c224 <_fflush_r+0xc>
 800c262:	89a3      	ldrh	r3, [r4, #12]
 800c264:	059b      	lsls	r3, r3, #22
 800c266:	d4dd      	bmi.n	800c224 <_fflush_r+0xc>
 800c268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c26a:	f000 f908 	bl	800c47e <__retarget_lock_release_recursive>
 800c26e:	e7d9      	b.n	800c224 <_fflush_r+0xc>
 800c270:	4b05      	ldr	r3, [pc, #20]	; (800c288 <_fflush_r+0x70>)
 800c272:	429c      	cmp	r4, r3
 800c274:	d101      	bne.n	800c27a <_fflush_r+0x62>
 800c276:	68ac      	ldr	r4, [r5, #8]
 800c278:	e7df      	b.n	800c23a <_fflush_r+0x22>
 800c27a:	4b04      	ldr	r3, [pc, #16]	; (800c28c <_fflush_r+0x74>)
 800c27c:	429c      	cmp	r4, r3
 800c27e:	bf08      	it	eq
 800c280:	68ec      	ldreq	r4, [r5, #12]
 800c282:	e7da      	b.n	800c23a <_fflush_r+0x22>
 800c284:	0800cd54 	.word	0x0800cd54
 800c288:	0800cd74 	.word	0x0800cd74
 800c28c:	0800cd34 	.word	0x0800cd34

0800c290 <std>:
 800c290:	2300      	movs	r3, #0
 800c292:	b510      	push	{r4, lr}
 800c294:	4604      	mov	r4, r0
 800c296:	e9c0 3300 	strd	r3, r3, [r0]
 800c29a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c29e:	6083      	str	r3, [r0, #8]
 800c2a0:	8181      	strh	r1, [r0, #12]
 800c2a2:	6643      	str	r3, [r0, #100]	; 0x64
 800c2a4:	81c2      	strh	r2, [r0, #14]
 800c2a6:	6183      	str	r3, [r0, #24]
 800c2a8:	4619      	mov	r1, r3
 800c2aa:	2208      	movs	r2, #8
 800c2ac:	305c      	adds	r0, #92	; 0x5c
 800c2ae:	f7fb fde9 	bl	8007e84 <memset>
 800c2b2:	4b05      	ldr	r3, [pc, #20]	; (800c2c8 <std+0x38>)
 800c2b4:	6263      	str	r3, [r4, #36]	; 0x24
 800c2b6:	4b05      	ldr	r3, [pc, #20]	; (800c2cc <std+0x3c>)
 800c2b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800c2ba:	4b05      	ldr	r3, [pc, #20]	; (800c2d0 <std+0x40>)
 800c2bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c2be:	4b05      	ldr	r3, [pc, #20]	; (800c2d4 <std+0x44>)
 800c2c0:	6224      	str	r4, [r4, #32]
 800c2c2:	6323      	str	r3, [r4, #48]	; 0x30
 800c2c4:	bd10      	pop	{r4, pc}
 800c2c6:	bf00      	nop
 800c2c8:	0800c5e5 	.word	0x0800c5e5
 800c2cc:	0800c607 	.word	0x0800c607
 800c2d0:	0800c63f 	.word	0x0800c63f
 800c2d4:	0800c663 	.word	0x0800c663

0800c2d8 <_cleanup_r>:
 800c2d8:	4901      	ldr	r1, [pc, #4]	; (800c2e0 <_cleanup_r+0x8>)
 800c2da:	f000 b8af 	b.w	800c43c <_fwalk_reent>
 800c2de:	bf00      	nop
 800c2e0:	0800c219 	.word	0x0800c219

0800c2e4 <__sfmoreglue>:
 800c2e4:	b570      	push	{r4, r5, r6, lr}
 800c2e6:	2268      	movs	r2, #104	; 0x68
 800c2e8:	1e4d      	subs	r5, r1, #1
 800c2ea:	4355      	muls	r5, r2
 800c2ec:	460e      	mov	r6, r1
 800c2ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c2f2:	f7ff fa75 	bl	800b7e0 <_malloc_r>
 800c2f6:	4604      	mov	r4, r0
 800c2f8:	b140      	cbz	r0, 800c30c <__sfmoreglue+0x28>
 800c2fa:	2100      	movs	r1, #0
 800c2fc:	e9c0 1600 	strd	r1, r6, [r0]
 800c300:	300c      	adds	r0, #12
 800c302:	60a0      	str	r0, [r4, #8]
 800c304:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c308:	f7fb fdbc 	bl	8007e84 <memset>
 800c30c:	4620      	mov	r0, r4
 800c30e:	bd70      	pop	{r4, r5, r6, pc}

0800c310 <__sfp_lock_acquire>:
 800c310:	4801      	ldr	r0, [pc, #4]	; (800c318 <__sfp_lock_acquire+0x8>)
 800c312:	f000 b8b3 	b.w	800c47c <__retarget_lock_acquire_recursive>
 800c316:	bf00      	nop
 800c318:	20005791 	.word	0x20005791

0800c31c <__sfp_lock_release>:
 800c31c:	4801      	ldr	r0, [pc, #4]	; (800c324 <__sfp_lock_release+0x8>)
 800c31e:	f000 b8ae 	b.w	800c47e <__retarget_lock_release_recursive>
 800c322:	bf00      	nop
 800c324:	20005791 	.word	0x20005791

0800c328 <__sinit_lock_acquire>:
 800c328:	4801      	ldr	r0, [pc, #4]	; (800c330 <__sinit_lock_acquire+0x8>)
 800c32a:	f000 b8a7 	b.w	800c47c <__retarget_lock_acquire_recursive>
 800c32e:	bf00      	nop
 800c330:	20005792 	.word	0x20005792

0800c334 <__sinit_lock_release>:
 800c334:	4801      	ldr	r0, [pc, #4]	; (800c33c <__sinit_lock_release+0x8>)
 800c336:	f000 b8a2 	b.w	800c47e <__retarget_lock_release_recursive>
 800c33a:	bf00      	nop
 800c33c:	20005792 	.word	0x20005792

0800c340 <__sinit>:
 800c340:	b510      	push	{r4, lr}
 800c342:	4604      	mov	r4, r0
 800c344:	f7ff fff0 	bl	800c328 <__sinit_lock_acquire>
 800c348:	69a3      	ldr	r3, [r4, #24]
 800c34a:	b11b      	cbz	r3, 800c354 <__sinit+0x14>
 800c34c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c350:	f7ff bff0 	b.w	800c334 <__sinit_lock_release>
 800c354:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c358:	6523      	str	r3, [r4, #80]	; 0x50
 800c35a:	4b13      	ldr	r3, [pc, #76]	; (800c3a8 <__sinit+0x68>)
 800c35c:	4a13      	ldr	r2, [pc, #76]	; (800c3ac <__sinit+0x6c>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	62a2      	str	r2, [r4, #40]	; 0x28
 800c362:	42a3      	cmp	r3, r4
 800c364:	bf04      	itt	eq
 800c366:	2301      	moveq	r3, #1
 800c368:	61a3      	streq	r3, [r4, #24]
 800c36a:	4620      	mov	r0, r4
 800c36c:	f000 f820 	bl	800c3b0 <__sfp>
 800c370:	6060      	str	r0, [r4, #4]
 800c372:	4620      	mov	r0, r4
 800c374:	f000 f81c 	bl	800c3b0 <__sfp>
 800c378:	60a0      	str	r0, [r4, #8]
 800c37a:	4620      	mov	r0, r4
 800c37c:	f000 f818 	bl	800c3b0 <__sfp>
 800c380:	2200      	movs	r2, #0
 800c382:	60e0      	str	r0, [r4, #12]
 800c384:	2104      	movs	r1, #4
 800c386:	6860      	ldr	r0, [r4, #4]
 800c388:	f7ff ff82 	bl	800c290 <std>
 800c38c:	68a0      	ldr	r0, [r4, #8]
 800c38e:	2201      	movs	r2, #1
 800c390:	2109      	movs	r1, #9
 800c392:	f7ff ff7d 	bl	800c290 <std>
 800c396:	68e0      	ldr	r0, [r4, #12]
 800c398:	2202      	movs	r2, #2
 800c39a:	2112      	movs	r1, #18
 800c39c:	f7ff ff78 	bl	800c290 <std>
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	61a3      	str	r3, [r4, #24]
 800c3a4:	e7d2      	b.n	800c34c <__sinit+0xc>
 800c3a6:	bf00      	nop
 800c3a8:	0800c8ec 	.word	0x0800c8ec
 800c3ac:	0800c2d9 	.word	0x0800c2d9

0800c3b0 <__sfp>:
 800c3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3b2:	4607      	mov	r7, r0
 800c3b4:	f7ff ffac 	bl	800c310 <__sfp_lock_acquire>
 800c3b8:	4b1e      	ldr	r3, [pc, #120]	; (800c434 <__sfp+0x84>)
 800c3ba:	681e      	ldr	r6, [r3, #0]
 800c3bc:	69b3      	ldr	r3, [r6, #24]
 800c3be:	b913      	cbnz	r3, 800c3c6 <__sfp+0x16>
 800c3c0:	4630      	mov	r0, r6
 800c3c2:	f7ff ffbd 	bl	800c340 <__sinit>
 800c3c6:	3648      	adds	r6, #72	; 0x48
 800c3c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c3cc:	3b01      	subs	r3, #1
 800c3ce:	d503      	bpl.n	800c3d8 <__sfp+0x28>
 800c3d0:	6833      	ldr	r3, [r6, #0]
 800c3d2:	b30b      	cbz	r3, 800c418 <__sfp+0x68>
 800c3d4:	6836      	ldr	r6, [r6, #0]
 800c3d6:	e7f7      	b.n	800c3c8 <__sfp+0x18>
 800c3d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c3dc:	b9d5      	cbnz	r5, 800c414 <__sfp+0x64>
 800c3de:	4b16      	ldr	r3, [pc, #88]	; (800c438 <__sfp+0x88>)
 800c3e0:	60e3      	str	r3, [r4, #12]
 800c3e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c3e6:	6665      	str	r5, [r4, #100]	; 0x64
 800c3e8:	f000 f847 	bl	800c47a <__retarget_lock_init_recursive>
 800c3ec:	f7ff ff96 	bl	800c31c <__sfp_lock_release>
 800c3f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c3f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c3f8:	6025      	str	r5, [r4, #0]
 800c3fa:	61a5      	str	r5, [r4, #24]
 800c3fc:	2208      	movs	r2, #8
 800c3fe:	4629      	mov	r1, r5
 800c400:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c404:	f7fb fd3e 	bl	8007e84 <memset>
 800c408:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c40c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c410:	4620      	mov	r0, r4
 800c412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c414:	3468      	adds	r4, #104	; 0x68
 800c416:	e7d9      	b.n	800c3cc <__sfp+0x1c>
 800c418:	2104      	movs	r1, #4
 800c41a:	4638      	mov	r0, r7
 800c41c:	f7ff ff62 	bl	800c2e4 <__sfmoreglue>
 800c420:	4604      	mov	r4, r0
 800c422:	6030      	str	r0, [r6, #0]
 800c424:	2800      	cmp	r0, #0
 800c426:	d1d5      	bne.n	800c3d4 <__sfp+0x24>
 800c428:	f7ff ff78 	bl	800c31c <__sfp_lock_release>
 800c42c:	230c      	movs	r3, #12
 800c42e:	603b      	str	r3, [r7, #0]
 800c430:	e7ee      	b.n	800c410 <__sfp+0x60>
 800c432:	bf00      	nop
 800c434:	0800c8ec 	.word	0x0800c8ec
 800c438:	ffff0001 	.word	0xffff0001

0800c43c <_fwalk_reent>:
 800c43c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c440:	4606      	mov	r6, r0
 800c442:	4688      	mov	r8, r1
 800c444:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c448:	2700      	movs	r7, #0
 800c44a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c44e:	f1b9 0901 	subs.w	r9, r9, #1
 800c452:	d505      	bpl.n	800c460 <_fwalk_reent+0x24>
 800c454:	6824      	ldr	r4, [r4, #0]
 800c456:	2c00      	cmp	r4, #0
 800c458:	d1f7      	bne.n	800c44a <_fwalk_reent+0xe>
 800c45a:	4638      	mov	r0, r7
 800c45c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c460:	89ab      	ldrh	r3, [r5, #12]
 800c462:	2b01      	cmp	r3, #1
 800c464:	d907      	bls.n	800c476 <_fwalk_reent+0x3a>
 800c466:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c46a:	3301      	adds	r3, #1
 800c46c:	d003      	beq.n	800c476 <_fwalk_reent+0x3a>
 800c46e:	4629      	mov	r1, r5
 800c470:	4630      	mov	r0, r6
 800c472:	47c0      	blx	r8
 800c474:	4307      	orrs	r7, r0
 800c476:	3568      	adds	r5, #104	; 0x68
 800c478:	e7e9      	b.n	800c44e <_fwalk_reent+0x12>

0800c47a <__retarget_lock_init_recursive>:
 800c47a:	4770      	bx	lr

0800c47c <__retarget_lock_acquire_recursive>:
 800c47c:	4770      	bx	lr

0800c47e <__retarget_lock_release_recursive>:
 800c47e:	4770      	bx	lr

0800c480 <__swhatbuf_r>:
 800c480:	b570      	push	{r4, r5, r6, lr}
 800c482:	460e      	mov	r6, r1
 800c484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c488:	2900      	cmp	r1, #0
 800c48a:	b096      	sub	sp, #88	; 0x58
 800c48c:	4614      	mov	r4, r2
 800c48e:	461d      	mov	r5, r3
 800c490:	da08      	bge.n	800c4a4 <__swhatbuf_r+0x24>
 800c492:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c496:	2200      	movs	r2, #0
 800c498:	602a      	str	r2, [r5, #0]
 800c49a:	061a      	lsls	r2, r3, #24
 800c49c:	d410      	bmi.n	800c4c0 <__swhatbuf_r+0x40>
 800c49e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4a2:	e00e      	b.n	800c4c2 <__swhatbuf_r+0x42>
 800c4a4:	466a      	mov	r2, sp
 800c4a6:	f000 f903 	bl	800c6b0 <_fstat_r>
 800c4aa:	2800      	cmp	r0, #0
 800c4ac:	dbf1      	blt.n	800c492 <__swhatbuf_r+0x12>
 800c4ae:	9a01      	ldr	r2, [sp, #4]
 800c4b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c4b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c4b8:	425a      	negs	r2, r3
 800c4ba:	415a      	adcs	r2, r3
 800c4bc:	602a      	str	r2, [r5, #0]
 800c4be:	e7ee      	b.n	800c49e <__swhatbuf_r+0x1e>
 800c4c0:	2340      	movs	r3, #64	; 0x40
 800c4c2:	2000      	movs	r0, #0
 800c4c4:	6023      	str	r3, [r4, #0]
 800c4c6:	b016      	add	sp, #88	; 0x58
 800c4c8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c4cc <__smakebuf_r>:
 800c4cc:	898b      	ldrh	r3, [r1, #12]
 800c4ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c4d0:	079d      	lsls	r5, r3, #30
 800c4d2:	4606      	mov	r6, r0
 800c4d4:	460c      	mov	r4, r1
 800c4d6:	d507      	bpl.n	800c4e8 <__smakebuf_r+0x1c>
 800c4d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c4dc:	6023      	str	r3, [r4, #0]
 800c4de:	6123      	str	r3, [r4, #16]
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	6163      	str	r3, [r4, #20]
 800c4e4:	b002      	add	sp, #8
 800c4e6:	bd70      	pop	{r4, r5, r6, pc}
 800c4e8:	ab01      	add	r3, sp, #4
 800c4ea:	466a      	mov	r2, sp
 800c4ec:	f7ff ffc8 	bl	800c480 <__swhatbuf_r>
 800c4f0:	9900      	ldr	r1, [sp, #0]
 800c4f2:	4605      	mov	r5, r0
 800c4f4:	4630      	mov	r0, r6
 800c4f6:	f7ff f973 	bl	800b7e0 <_malloc_r>
 800c4fa:	b948      	cbnz	r0, 800c510 <__smakebuf_r+0x44>
 800c4fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c500:	059a      	lsls	r2, r3, #22
 800c502:	d4ef      	bmi.n	800c4e4 <__smakebuf_r+0x18>
 800c504:	f023 0303 	bic.w	r3, r3, #3
 800c508:	f043 0302 	orr.w	r3, r3, #2
 800c50c:	81a3      	strh	r3, [r4, #12]
 800c50e:	e7e3      	b.n	800c4d8 <__smakebuf_r+0xc>
 800c510:	4b0d      	ldr	r3, [pc, #52]	; (800c548 <__smakebuf_r+0x7c>)
 800c512:	62b3      	str	r3, [r6, #40]	; 0x28
 800c514:	89a3      	ldrh	r3, [r4, #12]
 800c516:	6020      	str	r0, [r4, #0]
 800c518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c51c:	81a3      	strh	r3, [r4, #12]
 800c51e:	9b00      	ldr	r3, [sp, #0]
 800c520:	6163      	str	r3, [r4, #20]
 800c522:	9b01      	ldr	r3, [sp, #4]
 800c524:	6120      	str	r0, [r4, #16]
 800c526:	b15b      	cbz	r3, 800c540 <__smakebuf_r+0x74>
 800c528:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c52c:	4630      	mov	r0, r6
 800c52e:	f000 f8d1 	bl	800c6d4 <_isatty_r>
 800c532:	b128      	cbz	r0, 800c540 <__smakebuf_r+0x74>
 800c534:	89a3      	ldrh	r3, [r4, #12]
 800c536:	f023 0303 	bic.w	r3, r3, #3
 800c53a:	f043 0301 	orr.w	r3, r3, #1
 800c53e:	81a3      	strh	r3, [r4, #12]
 800c540:	89a0      	ldrh	r0, [r4, #12]
 800c542:	4305      	orrs	r5, r0
 800c544:	81a5      	strh	r5, [r4, #12]
 800c546:	e7cd      	b.n	800c4e4 <__smakebuf_r+0x18>
 800c548:	0800c2d9 	.word	0x0800c2d9

0800c54c <_malloc_usable_size_r>:
 800c54c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c550:	1f18      	subs	r0, r3, #4
 800c552:	2b00      	cmp	r3, #0
 800c554:	bfbc      	itt	lt
 800c556:	580b      	ldrlt	r3, [r1, r0]
 800c558:	18c0      	addlt	r0, r0, r3
 800c55a:	4770      	bx	lr

0800c55c <_raise_r>:
 800c55c:	291f      	cmp	r1, #31
 800c55e:	b538      	push	{r3, r4, r5, lr}
 800c560:	4604      	mov	r4, r0
 800c562:	460d      	mov	r5, r1
 800c564:	d904      	bls.n	800c570 <_raise_r+0x14>
 800c566:	2316      	movs	r3, #22
 800c568:	6003      	str	r3, [r0, #0]
 800c56a:	f04f 30ff 	mov.w	r0, #4294967295
 800c56e:	bd38      	pop	{r3, r4, r5, pc}
 800c570:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c572:	b112      	cbz	r2, 800c57a <_raise_r+0x1e>
 800c574:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c578:	b94b      	cbnz	r3, 800c58e <_raise_r+0x32>
 800c57a:	4620      	mov	r0, r4
 800c57c:	f000 f830 	bl	800c5e0 <_getpid_r>
 800c580:	462a      	mov	r2, r5
 800c582:	4601      	mov	r1, r0
 800c584:	4620      	mov	r0, r4
 800c586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c58a:	f000 b817 	b.w	800c5bc <_kill_r>
 800c58e:	2b01      	cmp	r3, #1
 800c590:	d00a      	beq.n	800c5a8 <_raise_r+0x4c>
 800c592:	1c59      	adds	r1, r3, #1
 800c594:	d103      	bne.n	800c59e <_raise_r+0x42>
 800c596:	2316      	movs	r3, #22
 800c598:	6003      	str	r3, [r0, #0]
 800c59a:	2001      	movs	r0, #1
 800c59c:	e7e7      	b.n	800c56e <_raise_r+0x12>
 800c59e:	2400      	movs	r4, #0
 800c5a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c5a4:	4628      	mov	r0, r5
 800c5a6:	4798      	blx	r3
 800c5a8:	2000      	movs	r0, #0
 800c5aa:	e7e0      	b.n	800c56e <_raise_r+0x12>

0800c5ac <raise>:
 800c5ac:	4b02      	ldr	r3, [pc, #8]	; (800c5b8 <raise+0xc>)
 800c5ae:	4601      	mov	r1, r0
 800c5b0:	6818      	ldr	r0, [r3, #0]
 800c5b2:	f7ff bfd3 	b.w	800c55c <_raise_r>
 800c5b6:	bf00      	nop
 800c5b8:	2000010c 	.word	0x2000010c

0800c5bc <_kill_r>:
 800c5bc:	b538      	push	{r3, r4, r5, lr}
 800c5be:	4d07      	ldr	r5, [pc, #28]	; (800c5dc <_kill_r+0x20>)
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	4604      	mov	r4, r0
 800c5c4:	4608      	mov	r0, r1
 800c5c6:	4611      	mov	r1, r2
 800c5c8:	602b      	str	r3, [r5, #0]
 800c5ca:	f7f6 fecb 	bl	8003364 <_kill>
 800c5ce:	1c43      	adds	r3, r0, #1
 800c5d0:	d102      	bne.n	800c5d8 <_kill_r+0x1c>
 800c5d2:	682b      	ldr	r3, [r5, #0]
 800c5d4:	b103      	cbz	r3, 800c5d8 <_kill_r+0x1c>
 800c5d6:	6023      	str	r3, [r4, #0]
 800c5d8:	bd38      	pop	{r3, r4, r5, pc}
 800c5da:	bf00      	nop
 800c5dc:	2000578c 	.word	0x2000578c

0800c5e0 <_getpid_r>:
 800c5e0:	f7f6 bebe 	b.w	8003360 <_getpid>

0800c5e4 <__sread>:
 800c5e4:	b510      	push	{r4, lr}
 800c5e6:	460c      	mov	r4, r1
 800c5e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5ec:	f000 f894 	bl	800c718 <_read_r>
 800c5f0:	2800      	cmp	r0, #0
 800c5f2:	bfab      	itete	ge
 800c5f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c5f6:	89a3      	ldrhlt	r3, [r4, #12]
 800c5f8:	181b      	addge	r3, r3, r0
 800c5fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c5fe:	bfac      	ite	ge
 800c600:	6563      	strge	r3, [r4, #84]	; 0x54
 800c602:	81a3      	strhlt	r3, [r4, #12]
 800c604:	bd10      	pop	{r4, pc}

0800c606 <__swrite>:
 800c606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c60a:	461f      	mov	r7, r3
 800c60c:	898b      	ldrh	r3, [r1, #12]
 800c60e:	05db      	lsls	r3, r3, #23
 800c610:	4605      	mov	r5, r0
 800c612:	460c      	mov	r4, r1
 800c614:	4616      	mov	r6, r2
 800c616:	d505      	bpl.n	800c624 <__swrite+0x1e>
 800c618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c61c:	2302      	movs	r3, #2
 800c61e:	2200      	movs	r2, #0
 800c620:	f000 f868 	bl	800c6f4 <_lseek_r>
 800c624:	89a3      	ldrh	r3, [r4, #12]
 800c626:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c62a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c62e:	81a3      	strh	r3, [r4, #12]
 800c630:	4632      	mov	r2, r6
 800c632:	463b      	mov	r3, r7
 800c634:	4628      	mov	r0, r5
 800c636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c63a:	f000 b817 	b.w	800c66c <_write_r>

0800c63e <__sseek>:
 800c63e:	b510      	push	{r4, lr}
 800c640:	460c      	mov	r4, r1
 800c642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c646:	f000 f855 	bl	800c6f4 <_lseek_r>
 800c64a:	1c43      	adds	r3, r0, #1
 800c64c:	89a3      	ldrh	r3, [r4, #12]
 800c64e:	bf15      	itete	ne
 800c650:	6560      	strne	r0, [r4, #84]	; 0x54
 800c652:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c656:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c65a:	81a3      	strheq	r3, [r4, #12]
 800c65c:	bf18      	it	ne
 800c65e:	81a3      	strhne	r3, [r4, #12]
 800c660:	bd10      	pop	{r4, pc}

0800c662 <__sclose>:
 800c662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c666:	f000 b813 	b.w	800c690 <_close_r>
	...

0800c66c <_write_r>:
 800c66c:	b538      	push	{r3, r4, r5, lr}
 800c66e:	4d07      	ldr	r5, [pc, #28]	; (800c68c <_write_r+0x20>)
 800c670:	4604      	mov	r4, r0
 800c672:	4608      	mov	r0, r1
 800c674:	4611      	mov	r1, r2
 800c676:	2200      	movs	r2, #0
 800c678:	602a      	str	r2, [r5, #0]
 800c67a:	461a      	mov	r2, r3
 800c67c:	f7f6 fe8e 	bl	800339c <_write>
 800c680:	1c43      	adds	r3, r0, #1
 800c682:	d102      	bne.n	800c68a <_write_r+0x1e>
 800c684:	682b      	ldr	r3, [r5, #0]
 800c686:	b103      	cbz	r3, 800c68a <_write_r+0x1e>
 800c688:	6023      	str	r3, [r4, #0]
 800c68a:	bd38      	pop	{r3, r4, r5, pc}
 800c68c:	2000578c 	.word	0x2000578c

0800c690 <_close_r>:
 800c690:	b538      	push	{r3, r4, r5, lr}
 800c692:	4d06      	ldr	r5, [pc, #24]	; (800c6ac <_close_r+0x1c>)
 800c694:	2300      	movs	r3, #0
 800c696:	4604      	mov	r4, r0
 800c698:	4608      	mov	r0, r1
 800c69a:	602b      	str	r3, [r5, #0]
 800c69c:	f7f6 fe8c 	bl	80033b8 <_close>
 800c6a0:	1c43      	adds	r3, r0, #1
 800c6a2:	d102      	bne.n	800c6aa <_close_r+0x1a>
 800c6a4:	682b      	ldr	r3, [r5, #0]
 800c6a6:	b103      	cbz	r3, 800c6aa <_close_r+0x1a>
 800c6a8:	6023      	str	r3, [r4, #0]
 800c6aa:	bd38      	pop	{r3, r4, r5, pc}
 800c6ac:	2000578c 	.word	0x2000578c

0800c6b0 <_fstat_r>:
 800c6b0:	b538      	push	{r3, r4, r5, lr}
 800c6b2:	4d07      	ldr	r5, [pc, #28]	; (800c6d0 <_fstat_r+0x20>)
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	4604      	mov	r4, r0
 800c6b8:	4608      	mov	r0, r1
 800c6ba:	4611      	mov	r1, r2
 800c6bc:	602b      	str	r3, [r5, #0]
 800c6be:	f7f6 fe7f 	bl	80033c0 <_fstat>
 800c6c2:	1c43      	adds	r3, r0, #1
 800c6c4:	d102      	bne.n	800c6cc <_fstat_r+0x1c>
 800c6c6:	682b      	ldr	r3, [r5, #0]
 800c6c8:	b103      	cbz	r3, 800c6cc <_fstat_r+0x1c>
 800c6ca:	6023      	str	r3, [r4, #0]
 800c6cc:	bd38      	pop	{r3, r4, r5, pc}
 800c6ce:	bf00      	nop
 800c6d0:	2000578c 	.word	0x2000578c

0800c6d4 <_isatty_r>:
 800c6d4:	b538      	push	{r3, r4, r5, lr}
 800c6d6:	4d06      	ldr	r5, [pc, #24]	; (800c6f0 <_isatty_r+0x1c>)
 800c6d8:	2300      	movs	r3, #0
 800c6da:	4604      	mov	r4, r0
 800c6dc:	4608      	mov	r0, r1
 800c6de:	602b      	str	r3, [r5, #0]
 800c6e0:	f7f6 fe74 	bl	80033cc <_isatty>
 800c6e4:	1c43      	adds	r3, r0, #1
 800c6e6:	d102      	bne.n	800c6ee <_isatty_r+0x1a>
 800c6e8:	682b      	ldr	r3, [r5, #0]
 800c6ea:	b103      	cbz	r3, 800c6ee <_isatty_r+0x1a>
 800c6ec:	6023      	str	r3, [r4, #0]
 800c6ee:	bd38      	pop	{r3, r4, r5, pc}
 800c6f0:	2000578c 	.word	0x2000578c

0800c6f4 <_lseek_r>:
 800c6f4:	b538      	push	{r3, r4, r5, lr}
 800c6f6:	4d07      	ldr	r5, [pc, #28]	; (800c714 <_lseek_r+0x20>)
 800c6f8:	4604      	mov	r4, r0
 800c6fa:	4608      	mov	r0, r1
 800c6fc:	4611      	mov	r1, r2
 800c6fe:	2200      	movs	r2, #0
 800c700:	602a      	str	r2, [r5, #0]
 800c702:	461a      	mov	r2, r3
 800c704:	f7f6 fe64 	bl	80033d0 <_lseek>
 800c708:	1c43      	adds	r3, r0, #1
 800c70a:	d102      	bne.n	800c712 <_lseek_r+0x1e>
 800c70c:	682b      	ldr	r3, [r5, #0]
 800c70e:	b103      	cbz	r3, 800c712 <_lseek_r+0x1e>
 800c710:	6023      	str	r3, [r4, #0]
 800c712:	bd38      	pop	{r3, r4, r5, pc}
 800c714:	2000578c 	.word	0x2000578c

0800c718 <_read_r>:
 800c718:	b538      	push	{r3, r4, r5, lr}
 800c71a:	4d07      	ldr	r5, [pc, #28]	; (800c738 <_read_r+0x20>)
 800c71c:	4604      	mov	r4, r0
 800c71e:	4608      	mov	r0, r1
 800c720:	4611      	mov	r1, r2
 800c722:	2200      	movs	r2, #0
 800c724:	602a      	str	r2, [r5, #0]
 800c726:	461a      	mov	r2, r3
 800c728:	f7f6 fe2a 	bl	8003380 <_read>
 800c72c:	1c43      	adds	r3, r0, #1
 800c72e:	d102      	bne.n	800c736 <_read_r+0x1e>
 800c730:	682b      	ldr	r3, [r5, #0]
 800c732:	b103      	cbz	r3, 800c736 <_read_r+0x1e>
 800c734:	6023      	str	r3, [r4, #0]
 800c736:	bd38      	pop	{r3, r4, r5, pc}
 800c738:	2000578c 	.word	0x2000578c

0800c73c <_init>:
 800c73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c73e:	bf00      	nop
 800c740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c742:	bc08      	pop	{r3}
 800c744:	469e      	mov	lr, r3
 800c746:	4770      	bx	lr

0800c748 <_fini>:
 800c748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c74a:	bf00      	nop
 800c74c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c74e:	bc08      	pop	{r3}
 800c750:	469e      	mov	lr, r3
 800c752:	4770      	bx	lr
