
PanTompkins-powerConcumtionComputation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007098  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e4c  080071d8  080071d8  000171d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009024  08009024  00019024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009028  08009028  00019028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e0  20000004  0800902c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001c0  200001e4  0800920c  000201e4  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200003a4  0800920c  000203a4  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001dca9  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000025fc  00000000  00000000  0003debd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00034e6b  00000000  00000000  000404b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b68  00000000  00000000  00075328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00003af0  00000000  00000000  00075e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00021f0d  00000000  00000000  00079980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001daf7  00000000  00000000  0009b88d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d4690  00000000  00000000  000b9384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0018da14  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003900  00000000  00000000  0018da64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e4 	.word	0x200001e4
 800015c:	00000000 	.word	0x00000000
 8000160:	080071c0 	.word	0x080071c0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e8 	.word	0x200001e8
 800017c:	080071c0 	.word	0x080071c0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_d2lz>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460d      	mov	r5, r1
 8000c42:	f7ff ff23 	bl	8000a8c <__aeabi_dcmplt>
 8000c46:	b928      	cbnz	r0, 8000c54 <__aeabi_d2lz+0x1c>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c50:	f000 b80a 	b.w	8000c68 <__aeabi_d2ulz>
 8000c54:	4620      	mov	r0, r4
 8000c56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5a:	f000 f805 	bl	8000c68 <__aeabi_d2ulz>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2ulz>:
 8000c68:	b5d0      	push	{r4, r6, r7, lr}
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__aeabi_d2ulz+0x34>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	f7ff fc99 	bl	80005a8 <__aeabi_dmul>
 8000c76:	f7ff ff6f 	bl	8000b58 <__aeabi_d2uiz>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	f7ff fc1a 	bl	80004b4 <__aeabi_ui2d>
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <__aeabi_d2ulz+0x38>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f7ff fc90 	bl	80005a8 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	4639      	mov	r1, r7
 8000c90:	f7ff fad2 	bl	8000238 <__aeabi_dsub>
 8000c94:	f7ff ff60 	bl	8000b58 <__aeabi_d2uiz>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c9c:	3df00000 	.word	0x3df00000
 8000ca0:	41f00000 	.word	0x41f00000

08000ca4 <arm_PT_init>:
float previousSignalPeak = 0, lastQRSpeak = 0, TresholdF = 0, SignalLevelF = 0, NoiseLevelF = 0;
uint16_t peakTimeDelay = 0, latencyDelay = 0;
uint8_t rissingEdge = 0;

void arm_PT_init()
{
 8000ca4:	b530      	push	{r4, r5, lr}
 8000ca6:	b083      	sub	sp, #12
	//Initiate filter function
	arm_fir_init_f32(&Derivative, NUM_DERIVATIVE_TAPS, (float32_t *)&firDerivativeCoefficients[0], &firStateF32[0], BLOCK_SIZE);
 8000ca8:	2401      	movs	r4, #1
 8000caa:	9400      	str	r4, [sp, #0]
 8000cac:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <arm_PT_init+0x80>)
 8000cae:	4a1e      	ldr	r2, [pc, #120]	; (8000d28 <arm_PT_init+0x84>)
 8000cb0:	481e      	ldr	r0, [pc, #120]	; (8000d2c <arm_PT_init+0x88>)
 8000cb2:	2105      	movs	r1, #5
 8000cb4:	f001 fdd4 	bl	8002860 <arm_fir_init_f32>
	arm_biquad_cascade_df1_init_f32 (&highPassFilter,1, (float32_t *)&iirHighPassFilterCoefficients[0], &highPassFilterStateF32[0]);
 8000cb8:	4621      	mov	r1, r4
 8000cba:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <arm_PT_init+0x8c>)
 8000cbc:	4a1d      	ldr	r2, [pc, #116]	; (8000d34 <arm_PT_init+0x90>)
 8000cbe:	481e      	ldr	r0, [pc, #120]	; (8000d38 <arm_PT_init+0x94>)
 8000cc0:	f001 fd8a 	bl	80027d8 <arm_biquad_cascade_df1_init_f32>
	arm_biquad_cascade_df1_init_f32 (&lowPassFilter,1, (float32_t *)&iirLowPassFilterCoefficients[0], &lowPassFilterStateF32[0]);
 8000cc4:	4621      	mov	r1, r4
 8000cc6:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <arm_PT_init+0x98>)
 8000cc8:	4a1d      	ldr	r2, [pc, #116]	; (8000d40 <arm_PT_init+0x9c>)
 8000cca:	481e      	ldr	r0, [pc, #120]	; (8000d44 <arm_PT_init+0xa0>)
 8000ccc:	f001 fd84 	bl	80027d8 <arm_biquad_cascade_df1_init_f32>
	//Reset buffers
	for (int i = 0; i<NUM_DERIVATIVE_TAPS_ARRAY_SIZE; i++)
	{
		derivativeBuffer[i]=0;
 8000cd0:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <arm_PT_init+0xa4>)
	}
	movingAverageBufferIndex=0;
 8000cd2:	491e      	ldr	r1, [pc, #120]	; (8000d4c <arm_PT_init+0xa8>)
	for (int i = 0; i<MovingAverageSampleCount; i++)
	{
		movingAverageBuffer[i] = 0;
 8000cd4:	481e      	ldr	r0, [pc, #120]	; (8000d50 <arm_PT_init+0xac>)
		derivativeBuffer[i]=0;
 8000cd6:	2400      	movs	r4, #0
	movingAverageBufferIndex=0;
 8000cd8:	2500      	movs	r5, #0
		derivativeBuffer[i]=0;
 8000cda:	601c      	str	r4, [r3, #0]
 8000cdc:	605c      	str	r4, [r3, #4]
 8000cde:	609c      	str	r4, [r3, #8]
 8000ce0:	60dc      	str	r4, [r3, #12]
 8000ce2:	611c      	str	r4, [r3, #16]
	movingAverageBufferIndex=0;
 8000ce4:	600d      	str	r5, [r1, #0]
		movingAverageBuffer[i] = 0;
 8000ce6:	22d8      	movs	r2, #216	; 0xd8
 8000ce8:	4629      	mov	r1, r5
 8000cea:	f001 fe01 	bl	80028f0 <memset>
	}
	MeanSum = 0;
	meanValue = 0;
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <arm_PT_init+0xb0>)
	MeanSum = 0;
 8000cf0:	4919      	ldr	r1, [pc, #100]	; (8000d58 <arm_PT_init+0xb4>)
	meanValue = 0;
 8000cf2:	601c      	str	r4, [r3, #0]
	TresholdI = 0;
	SignalLevelI = 0;
 8000cf4:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <arm_PT_init+0xb8>)
	TresholdI = 0;
 8000cf6:	4a1a      	ldr	r2, [pc, #104]	; (8000d60 <arm_PT_init+0xbc>)
	SignalLevelI = 0;
 8000cf8:	601c      	str	r4, [r3, #0]
	NoiseLevelI = 0;
	previousSignalPeak = 0;
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <arm_PT_init+0xc0>)
	MeanSum = 0;
 8000cfc:	600c      	str	r4, [r1, #0]
	previousSignalPeak = 0;
 8000cfe:	601c      	str	r4, [r3, #0]
	lastQRSpeak = 0;
	TresholdF = 0;
 8000d00:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <arm_PT_init+0xc4>)
	TresholdI = 0;
 8000d02:	6014      	str	r4, [r2, #0]
	TresholdF = 0;
 8000d04:	601c      	str	r4, [r3, #0]
	NoiseLevelI = 0;
 8000d06:	4919      	ldr	r1, [pc, #100]	; (8000d6c <arm_PT_init+0xc8>)
	lastQRSpeak = 0;
 8000d08:	4a19      	ldr	r2, [pc, #100]	; (8000d70 <arm_PT_init+0xcc>)
	SignalLevelF = 0;
	NoiseLevelF = 0;
 8000d0a:	4b1a      	ldr	r3, [pc, #104]	; (8000d74 <arm_PT_init+0xd0>)
	NoiseLevelI = 0;
 8000d0c:	600c      	str	r4, [r1, #0]
	lastQRSpeak = 0;
 8000d0e:	6014      	str	r4, [r2, #0]
	NoiseLevelF = 0;
 8000d10:	601c      	str	r4, [r3, #0]
	SignalLevelF = 0;
 8000d12:	4919      	ldr	r1, [pc, #100]	; (8000d78 <arm_PT_init+0xd4>)
	peakTimeDelay = 0;
 8000d14:	4a19      	ldr	r2, [pc, #100]	; (8000d7c <arm_PT_init+0xd8>)
	latencyDelay = 0;
 8000d16:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <arm_PT_init+0xdc>)
	SignalLevelF = 0;
 8000d18:	600c      	str	r4, [r1, #0]
	peakTimeDelay = 0;
 8000d1a:	8015      	strh	r5, [r2, #0]
	latencyDelay = 0;
 8000d1c:	801d      	strh	r5, [r3, #0]
}
 8000d1e:	b003      	add	sp, #12
 8000d20:	bd30      	pop	{r4, r5, pc}
 8000d22:	bf00      	nop
 8000d24:	2000023c 	.word	0x2000023c
 8000d28:	080071e8 	.word	0x080071e8
 8000d2c:	20000200 	.word	0x20000200
 8000d30:	20000260 	.word	0x20000260
 8000d34:	080071fc 	.word	0x080071fc
 8000d38:	20000250 	.word	0x20000250
 8000d3c:	20000288 	.word	0x20000288
 8000d40:	08007210 	.word	0x08007210
 8000d44:	20000278 	.word	0x20000278
 8000d48:	20000228 	.word	0x20000228
 8000d4c:	20000374 	.word	0x20000374
 8000d50:	2000029c 	.word	0x2000029c
 8000d54:	20000298 	.word	0x20000298
 8000d58:	2000020c 	.word	0x2000020c
 8000d5c:	2000021c 	.word	0x2000021c
 8000d60:	20000224 	.word	0x20000224
 8000d64:	20000380 	.word	0x20000380
 8000d68:	20000220 	.word	0x20000220
 8000d6c:	20000214 	.word	0x20000214
 8000d70:	20000270 	.word	0x20000270
 8000d74:	20000210 	.word	0x20000210
 8000d78:	20000218 	.word	0x20000218
 8000d7c:	20000378 	.word	0x20000378
 8000d80:	20000274 	.word	0x20000274

08000d84 <arm_PT_ST>:


int16_t arm_PT_ST(int16_t sample)
{
 8000d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d88:	ed2d 8b06 	vpush	{d8-d10}
	float32_t newSample = (float)sample;
 8000d8c:	ee07 0a90 	vmov	s15, r0
	//low pass filter operation
	arm_biquad_cascade_df1_f32 (&lowPassFilter, &newSample,&lowPassFilterResult,1);
 8000d90:	4da5      	ldr	r5, [pc, #660]	; (8001028 <arm_PT_ST+0x2a4>)
 8000d92:	48a6      	ldr	r0, [pc, #664]	; (800102c <arm_PT_ST+0x2a8>)



	//Store potential peak value (QRS can be also minimum or maximum)
	float potentialPeak = lowPassFilterResult*lowPassFilterResult;
	if (potentialPeak>previousSignalPeak)
 8000d94:	4ca6      	ldr	r4, [pc, #664]	; (8001030 <arm_PT_ST+0x2ac>)
 8000d96:	4ea7      	ldr	r6, [pc, #668]	; (8001034 <arm_PT_ST+0x2b0>)
	float32_t newSample = (float)sample;
 8000d98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8000d9c:	b083      	sub	sp, #12
	arm_biquad_cascade_df1_f32 (&lowPassFilter, &newSample,&lowPassFilterResult,1);
 8000d9e:	2301      	movs	r3, #1
 8000da0:	462a      	mov	r2, r5
 8000da2:	a901      	add	r1, sp, #4
	float32_t newSample = (float)sample;
 8000da4:	edcd 7a01 	vstr	s15, [sp, #4]
	arm_biquad_cascade_df1_f32 (&lowPassFilter, &newSample,&lowPassFilterResult,1);
 8000da8:	f001 fcc6 	bl	8002738 <arm_biquad_cascade_df1_f32>
	arm_biquad_cascade_df1_f32 (&highPassFilter, &lowPassFilterResult,&highPassFilterResult,1);
 8000dac:	4aa2      	ldr	r2, [pc, #648]	; (8001038 <arm_PT_ST+0x2b4>)
 8000dae:	48a3      	ldr	r0, [pc, #652]	; (800103c <arm_PT_ST+0x2b8>)
 8000db0:	2301      	movs	r3, #1
 8000db2:	4629      	mov	r1, r5
 8000db4:	f001 fcc0 	bl	8002738 <arm_biquad_cascade_df1_f32>
	float potentialPeak = lowPassFilterResult*lowPassFilterResult;
 8000db8:	edd5 7a00 	vldr	s15, [r5]
	if (potentialPeak>previousSignalPeak)
 8000dbc:	ed94 7a00 	vldr	s14, [r4]
	float potentialPeak = lowPassFilterResult*lowPassFilterResult;
 8000dc0:	ee67 7aa7 	vmul.f32	s15, s15, s15
	if (potentialPeak>previousSignalPeak)
 8000dc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dcc:	d472      	bmi.n	8000eb4 <arm_PT_ST+0x130>
	{//Store maximum of squared signal
		previousSignalPeak = potentialPeak;
		peakTimeDelay = 0;
	}
	peakTimeDelay++;
 8000dce:	8833      	ldrh	r3, [r6, #0]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	b29b      	uxth	r3, r3
	if (latencyDelay < latencyTreshold)
 8000dd4:	4f9a      	ldr	r7, [pc, #616]	; (8001040 <arm_PT_ST+0x2bc>)
	peakTimeDelay++;
 8000dd6:	8033      	strh	r3, [r6, #0]
	if (latencyDelay < latencyTreshold)
 8000dd8:	883b      	ldrh	r3, [r7, #0]
 8000dda:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 8000dde:	d26d      	bcs.n	8000ebc <arm_PT_ST+0x138>
	{
		latencyDelay++;
 8000de0:	3301      	adds	r3, #1
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	803b      	strh	r3, [r7, #0]
	else
	{//If peak wasn't find in given time restart variables
		latencyDelay = 0;
		arm_PT_init();
	}
	if (latencyDelay == (latencyTreshold>>1))
 8000de6:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8000dea:	d10f      	bne.n	8000e0c <arm_PT_ST+0x88>
	{//In original algorithm this should be look-back
		//here only decrease thresholds
		TresholdI = TresholdI * 0.5;
 8000dec:	4a95      	ldr	r2, [pc, #596]	; (8001044 <arm_PT_ST+0x2c0>)
		TresholdF = TresholdF * 0.5;
 8000dee:	4b96      	ldr	r3, [pc, #600]	; (8001048 <arm_PT_ST+0x2c4>)
		TresholdI = TresholdI * 0.5;
 8000df0:	ed92 7a00 	vldr	s14, [r2]
		TresholdF = TresholdF * 0.5;
 8000df4:	edd3 7a00 	vldr	s15, [r3]
		TresholdI = TresholdI * 0.5;
 8000df8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8000dfc:	ee27 7a26 	vmul.f32	s14, s14, s13
		TresholdF = TresholdF * 0.5;
 8000e00:	ee67 7aa6 	vmul.f32	s15, s15, s13
		TresholdI = TresholdI * 0.5;
 8000e04:	ed82 7a00 	vstr	s14, [r2]
		TresholdF = TresholdF * 0.5;
 8000e08:	edc3 7a00 	vstr	s15, [r3]
	}
	//Derivative with FIR filter
	arm_fir_f32 (&Derivative,&lowPassFilterResult,&derivativeOutput[0],BLOCK_SIZE);
 8000e0c:	4d8f      	ldr	r5, [pc, #572]	; (800104c <arm_PT_ST+0x2c8>)
 8000e0e:	4986      	ldr	r1, [pc, #536]	; (8001028 <arm_PT_ST+0x2a4>)
 8000e10:	488f      	ldr	r0, [pc, #572]	; (8001050 <arm_PT_ST+0x2cc>)
 8000e12:	462a      	mov	r2, r5
 8000e14:	2301      	movs	r3, #1
 8000e16:	f001 fceb 	bl	80027f0 <arm_fir_f32>
	//Square the value
	squaredValue = derivativeOutput[0] * derivativeOutput[0];
 8000e1a:	ed95 8a00 	vldr	s16, [r5]
	MeanSum -= movingAverageBuffer[movingAverageBufferIndex];
 8000e1e:	498d      	ldr	r1, [pc, #564]	; (8001054 <arm_PT_ST+0x2d0>)
	squaredValue = derivativeOutput[0] * derivativeOutput[0];
 8000e20:	4b8d      	ldr	r3, [pc, #564]	; (8001058 <arm_PT_ST+0x2d4>)
	MeanSum -= movingAverageBuffer[movingAverageBufferIndex];
 8000e22:	680a      	ldr	r2, [r1, #0]
	 */
	//putOnMovingAverageBuffer(squaredValue);
	//arm_mean_f32 (&movingAverageBuffer[0], MovingAverageSampleCount, &meanValue);

	//Detection of maximum in moving average signal
	if (meanValue!=previousMean)
 8000e24:	4d8d      	ldr	r5, [pc, #564]	; (800105c <arm_PT_ST+0x2d8>)
	squaredValue = derivativeOutput[0] * derivativeOutput[0];
 8000e26:	ee28 8a08 	vmul.f32	s16, s16, s16
	if (movingAverageBufferIndex==MovingAverageSampleCount)
 8000e2a:	2a35      	cmp	r2, #53	; 0x35
	squaredValue = derivativeOutput[0] * derivativeOutput[0];
 8000e2c:	ed83 8a00 	vstr	s16, [r3]
	MeanSum -= movingAverageBuffer[movingAverageBufferIndex];
 8000e30:	4b8b      	ldr	r3, [pc, #556]	; (8001060 <arm_PT_ST+0x2dc>)
 8000e32:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000e36:	ed93 7a00 	vldr	s14, [r3]
	movingAverageBuffer[movingAverageBufferIndex] = sample;
 8000e3a:	ed83 8a00 	vstr	s16, [r3]
	MeanSum -= movingAverageBuffer[movingAverageBufferIndex];
 8000e3e:	4b89      	ldr	r3, [pc, #548]	; (8001064 <arm_PT_ST+0x2e0>)
 8000e40:	edd3 7a00 	vldr	s15, [r3]
 8000e44:	ee77 7ac7 	vsub.f32	s15, s15, s14
	MeanSum += sample;
 8000e48:	ee38 8a27 	vadd.f32	s16, s16, s15
	return MeanSum * meanDivider;
 8000e4c:	eddf 7a86 	vldr	s15, [pc, #536]	; 8001068 <arm_PT_ST+0x2e4>
	MeanSum += sample;
 8000e50:	ed83 8a00 	vstr	s16, [r3]
	return MeanSum * meanDivider;
 8000e54:	ee28 8a27 	vmul.f32	s16, s16, s15
	if (meanValue!=previousMean)
 8000e58:	edd5 7a00 	vldr	s15, [r5]
	movingAverageBufferIndex++;
 8000e5c:	f102 0301 	add.w	r3, r2, #1
		movingAverageBufferIndex = 0;
 8000e60:	bf08      	it	eq
 8000e62:	2300      	moveq	r3, #0
 8000e64:	600b      	str	r3, [r1, #0]
	if (meanValue!=previousMean)
 8000e66:	eef4 7a48 	vcmp.f32	s15, s16
	meanValue = putOnMovingAverageBufferAndGetMean(squaredValue);
 8000e6a:	4b80      	ldr	r3, [pc, #512]	; (800106c <arm_PT_ST+0x2e8>)
	if (meanValue!=previousMean)
 8000e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	meanValue = putOnMovingAverageBufferAndGetMean(squaredValue);
 8000e70:	ed83 8a00 	vstr	s16, [r3]
	if (meanValue!=previousMean)
 8000e74:	d00b      	beq.n	8000e8e <arm_PT_ST+0x10a>
	{
		if (meanValue>previousMean)
 8000e76:	eef4 7ac8 	vcmpe.f32	s15, s16
 8000e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e7e:	d50c      	bpl.n	8000e9a <arm_PT_ST+0x116>
		{//This is not maximum
			previousMean = meanValue;
			if (previousMean != 0)
 8000e80:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8000e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			previousMean = meanValue;
 8000e88:	ed85 8a00 	vstr	s16, [r5]
			if (previousMean != 0)
 8000e8c:	d11c      	bne.n	8000ec8 <arm_PT_ST+0x144>
				previousSignalPeak = 0;
				previousMean = 0;
			}
		}
	}
	return 0;
 8000e8e:	2000      	movs	r0, #0
}
 8000e90:	b003      	add	sp, #12
 8000e92:	ecbd 8b06 	vpop	{d8-d10}
 8000e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(rissingEdge ==1)
 8000e9a:	4b75      	ldr	r3, [pc, #468]	; (8001070 <arm_PT_ST+0x2ec>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d016      	beq.n	8000ed0 <arm_PT_ST+0x14c>
				previousSignalPeak = 0;
 8000ea2:	2300      	movs	r3, #0
	return 0;
 8000ea4:	2000      	movs	r0, #0
				previousSignalPeak = 0;
 8000ea6:	6023      	str	r3, [r4, #0]
				previousMean = 0;
 8000ea8:	602b      	str	r3, [r5, #0]
}
 8000eaa:	b003      	add	sp, #12
 8000eac:	ecbd 8b06 	vpop	{d8-d10}
 8000eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		previousSignalPeak = potentialPeak;
 8000eb4:	edc4 7a00 	vstr	s15, [r4]
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e78b      	b.n	8000dd4 <arm_PT_ST+0x50>
		latencyDelay = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	803b      	strh	r3, [r7, #0]
		arm_PT_init();
 8000ec0:	f7ff fef0 	bl	8000ca4 <arm_PT_init>
	if (latencyDelay == (latencyTreshold>>1))
 8000ec4:	883b      	ldrh	r3, [r7, #0]
 8000ec6:	e78e      	b.n	8000de6 <arm_PT_ST+0x62>
				rissingEdge = 1;
 8000ec8:	4b69      	ldr	r3, [pc, #420]	; (8001070 <arm_PT_ST+0x2ec>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	701a      	strb	r2, [r3, #0]
 8000ece:	e7de      	b.n	8000e8e <arm_PT_ST+0x10a>
				if ((previousMean > TresholdI) && (latencyDelay > latencyTwaveDelayTreshold))
 8000ed0:	f8df b170 	ldr.w	fp, [pc, #368]	; 8001044 <arm_PT_ST+0x2c0>
 8000ed4:	ed9b 7a00 	vldr	s14, [fp]
 8000ed8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee0:	f340 80d8 	ble.w	8001094 <arm_PT_ST+0x310>
 8000ee4:	883b      	ldrh	r3, [r7, #0]
 8000ee6:	2b48      	cmp	r3, #72	; 0x48
 8000ee8:	f240 80d4 	bls.w	8001094 <arm_PT_ST+0x310>
					if (latencyDelay< latencyPossibleTwave)
 8000eec:	2b81      	cmp	r3, #129	; 0x81
 8000eee:	f200 8140 	bhi.w	8001172 <arm_PT_ST+0x3ee>
						if (previousSignalPeak>(lastQRSpeak*0.5))
 8000ef2:	f8d4 a000 	ldr.w	sl, [r4]
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	f7ff fafe 	bl	80004f8 <__aeabi_f2d>
 8000efc:	4b5d      	ldr	r3, [pc, #372]	; (8001074 <arm_PT_ST+0x2f0>)
 8000efe:	4680      	mov	r8, r0
 8000f00:	6818      	ldr	r0, [r3, #0]
 8000f02:	4689      	mov	r9, r1
 8000f04:	f7ff faf8 	bl	80004f8 <__aeabi_f2d>
 8000f08:	4b5b      	ldr	r3, [pc, #364]	; (8001078 <arm_PT_ST+0x2f4>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f7ff fb4c 	bl	80005a8 <__aeabi_dmul>
 8000f10:	4602      	mov	r2, r0
 8000f12:	460b      	mov	r3, r1
 8000f14:	4640      	mov	r0, r8
 8000f16:	4649      	mov	r1, r9
 8000f18:	f7ff fdd6 	bl	8000ac8 <__aeabi_dcmpgt>
 8000f1c:	2800      	cmp	r0, #0
 8000f1e:	d0b6      	beq.n	8000e8e <arm_PT_ST+0x10a>
							SignalLevelF = 0.125*previousSignalPeak + 0.875*SignalLevelF;
 8000f20:	4b56      	ldr	r3, [pc, #344]	; (800107c <arm_PT_ST+0x2f8>)
 8000f22:	6818      	ldr	r0, [r3, #0]
 8000f24:	f7ff fae8 	bl	80004f8 <__aeabi_f2d>
 8000f28:	4b55      	ldr	r3, [pc, #340]	; (8001080 <arm_PT_ST+0x2fc>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f7ff fb3c 	bl	80005a8 <__aeabi_dmul>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	4640      	mov	r0, r8
 8000f36:	4649      	mov	r1, r9
 8000f38:	4690      	mov	r8, r2
 8000f3a:	4699      	mov	r9, r3
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8000f42:	f7ff fb31 	bl	80005a8 <__aeabi_dmul>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	4640      	mov	r0, r8
 8000f4c:	4649      	mov	r1, r9
 8000f4e:	f7ff f975 	bl	800023c <__adddf3>
 8000f52:	f7ff fe21 	bl	8000b98 <__aeabi_d2f>
 8000f56:	4b49      	ldr	r3, [pc, #292]	; (800107c <arm_PT_ST+0x2f8>)
 8000f58:	6018      	str	r0, [r3, #0]
							TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 8000f5a:	4b4a      	ldr	r3, [pc, #296]	; (8001084 <arm_PT_ST+0x300>)
							SignalLevelF = 0.125*previousSignalPeak + 0.875*SignalLevelF;
 8000f5c:	ee07 0a90 	vmov	s15, r0
							TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 8000f60:	edd3 8a00 	vldr	s17, [r3]
 8000f64:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8000f68:	ee17 0a90 	vmov	r0, s15
 8000f6c:	f7ff fac4 	bl	80004f8 <__aeabi_f2d>
 8000f70:	4b45      	ldr	r3, [pc, #276]	; (8001088 <arm_PT_ST+0x304>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	f7ff fb18 	bl	80005a8 <__aeabi_dmul>
 8000f78:	4680      	mov	r8, r0
 8000f7a:	ee18 0a90 	vmov	r0, s17
 8000f7e:	4689      	mov	r9, r1
 8000f80:	f7ff faba 	bl	80004f8 <__aeabi_f2d>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4640      	mov	r0, r8
 8000f8a:	4649      	mov	r1, r9
 8000f8c:	f7ff f956 	bl	800023c <__adddf3>
 8000f90:	f7ff fe02 	bl	8000b98 <__aeabi_d2f>
							lastQRSpeak = previousSignalPeak;
 8000f94:	4b37      	ldr	r3, [pc, #220]	; (8001074 <arm_PT_ST+0x2f0>)
 8000f96:	f8c3 a000 	str.w	sl, [r3]
							TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 8000f9a:	4b2b      	ldr	r3, [pc, #172]	; (8001048 <arm_PT_ST+0x2c4>)
 8000f9c:	6018      	str	r0, [r3, #0]
							SignalLevelI = 0.125*meanValue + 0.875*SignalLevelI;
 8000f9e:	4b3b      	ldr	r3, [pc, #236]	; (800108c <arm_PT_ST+0x308>)
 8000fa0:	6818      	ldr	r0, [r3, #0]
 8000fa2:	f7ff faa9 	bl	80004f8 <__aeabi_f2d>
 8000fa6:	4b36      	ldr	r3, [pc, #216]	; (8001080 <arm_PT_ST+0x2fc>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f7ff fafd 	bl	80005a8 <__aeabi_dmul>
 8000fae:	4680      	mov	r8, r0
 8000fb0:	ee18 0a10 	vmov	r0, s16
 8000fb4:	4689      	mov	r9, r1
 8000fb6:	f7ff fa9f 	bl	80004f8 <__aeabi_f2d>
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8000fc0:	f7ff faf2 	bl	80005a8 <__aeabi_dmul>
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	4649      	mov	r1, r9
 8000fca:	4640      	mov	r0, r8
 8000fcc:	f7ff f936 	bl	800023c <__adddf3>
 8000fd0:	f7ff fde2 	bl	8000b98 <__aeabi_d2f>
 8000fd4:	4b2d      	ldr	r3, [pc, #180]	; (800108c <arm_PT_ST+0x308>)
 8000fd6:	ee07 0a90 	vmov	s15, r0
 8000fda:	6018      	str	r0, [r3, #0]
							TresholdI = NoiseLevelI + 0.25 * (SignalLevelI - NoiseLevelI);
 8000fdc:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <arm_PT_ST+0x30c>)
 8000fde:	ed93 8a00 	vldr	s16, [r3]
 8000fe2:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8000fe6:	ee17 0a90 	vmov	r0, s15
 8000fea:	f7ff fa85 	bl	80004f8 <__aeabi_f2d>
 8000fee:	4b26      	ldr	r3, [pc, #152]	; (8001088 <arm_PT_ST+0x304>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f7ff fad9 	bl	80005a8 <__aeabi_dmul>
 8000ff6:	4680      	mov	r8, r0
 8000ff8:	ee18 0a10 	vmov	r0, s16
 8000ffc:	4689      	mov	r9, r1
 8000ffe:	f7ff fa7b 	bl	80004f8 <__aeabi_f2d>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4640      	mov	r0, r8
 8001008:	4649      	mov	r1, r9
 800100a:	f7ff f917 	bl	800023c <__adddf3>
 800100e:	f7ff fdc3 	bl	8000b98 <__aeabi_d2f>
							previousSignalPeak = 0;
 8001012:	2300      	movs	r3, #0
							latencyDelay = 0;
 8001014:	2200      	movs	r2, #0
							TresholdI = NoiseLevelI + 0.25 * (SignalLevelI - NoiseLevelI);
 8001016:	f8cb 0000 	str.w	r0, [fp]
							previousSignalPeak = 0;
 800101a:	6023      	str	r3, [r4, #0]
							return peakTimeDelay;
 800101c:	f9b6 0000 	ldrsh.w	r0, [r6]
							previousMean = 0;
 8001020:	602b      	str	r3, [r5, #0]
							latencyDelay = 0;
 8001022:	803a      	strh	r2, [r7, #0]
							return peakTimeDelay;
 8001024:	e734      	b.n	8000e90 <arm_PT_ST+0x10c>
 8001026:	bf00      	nop
 8001028:	20000284 	.word	0x20000284
 800102c:	20000278 	.word	0x20000278
 8001030:	20000380 	.word	0x20000380
 8001034:	20000378 	.word	0x20000378
 8001038:	2000025c 	.word	0x2000025c
 800103c:	20000250 	.word	0x20000250
 8001040:	20000274 	.word	0x20000274
 8001044:	20000224 	.word	0x20000224
 8001048:	20000220 	.word	0x20000220
 800104c:	2000023c 	.word	0x2000023c
 8001050:	20000200 	.word	0x20000200
 8001054:	20000374 	.word	0x20000374
 8001058:	20000388 	.word	0x20000388
 800105c:	2000037c 	.word	0x2000037c
 8001060:	2000029c 	.word	0x2000029c
 8001064:	2000020c 	.word	0x2000020c
 8001068:	3c97b741 	.word	0x3c97b741
 800106c:	20000298 	.word	0x20000298
 8001070:	20000384 	.word	0x20000384
 8001074:	20000270 	.word	0x20000270
 8001078:	3fe00000 	.word	0x3fe00000
 800107c:	20000218 	.word	0x20000218
 8001080:	3fec0000 	.word	0x3fec0000
 8001084:	20000210 	.word	0x20000210
 8001088:	3fd00000 	.word	0x3fd00000
 800108c:	2000021c 	.word	0x2000021c
 8001090:	20000214 	.word	0x20000214
					NoiseLevelF = 0.125*previousSignalPeak + 0.875*NoiseLevelI;
 8001094:	f8df a26c 	ldr.w	sl, [pc, #620]	; 8001304 <arm_PT_ST+0x580>
 8001098:	f8da 0000 	ldr.w	r0, [sl]
 800109c:	f7ff fa2c 	bl	80004f8 <__aeabi_f2d>
 80010a0:	4b92      	ldr	r3, [pc, #584]	; (80012ec <arm_PT_ST+0x568>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	f7ff fa80 	bl	80005a8 <__aeabi_dmul>
 80010a8:	4606      	mov	r6, r0
 80010aa:	6820      	ldr	r0, [r4, #0]
 80010ac:	460f      	mov	r7, r1
 80010ae:	f7ff fa23 	bl	80004f8 <__aeabi_f2d>
 80010b2:	2200      	movs	r2, #0
 80010b4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80010b8:	f7ff fa76 	bl	80005a8 <__aeabi_dmul>
 80010bc:	4632      	mov	r2, r6
 80010be:	463b      	mov	r3, r7
 80010c0:	f7ff f8bc 	bl	800023c <__adddf3>
 80010c4:	f7ff fd68 	bl	8000b98 <__aeabi_d2f>
					TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 80010c8:	4b89      	ldr	r3, [pc, #548]	; (80012f0 <arm_PT_ST+0x56c>)
					NoiseLevelF = 0.125*previousSignalPeak + 0.875*NoiseLevelI;
 80010ca:	ee08 0a90 	vmov	s17, r0
					TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 80010ce:	edd3 7a00 	vldr	s15, [r3]
					NoiseLevelF = 0.125*previousSignalPeak + 0.875*NoiseLevelI;
 80010d2:	4b88      	ldr	r3, [pc, #544]	; (80012f4 <arm_PT_ST+0x570>)
					TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 80010d4:	ee77 7ae8 	vsub.f32	s15, s15, s17
					NoiseLevelF = 0.125*previousSignalPeak + 0.875*NoiseLevelI;
 80010d8:	6018      	str	r0, [r3, #0]
					TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 80010da:	ee17 0a90 	vmov	r0, s15
 80010de:	f7ff fa0b 	bl	80004f8 <__aeabi_f2d>
 80010e2:	4b85      	ldr	r3, [pc, #532]	; (80012f8 <arm_PT_ST+0x574>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	f7ff fa5f 	bl	80005a8 <__aeabi_dmul>
 80010ea:	4680      	mov	r8, r0
 80010ec:	ee18 0a90 	vmov	r0, s17
 80010f0:	4689      	mov	r9, r1
 80010f2:	f7ff fa01 	bl	80004f8 <__aeabi_f2d>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4640      	mov	r0, r8
 80010fc:	4649      	mov	r1, r9
 80010fe:	f7ff f89d 	bl	800023c <__adddf3>
 8001102:	f7ff fd49 	bl	8000b98 <__aeabi_d2f>
 8001106:	4b7d      	ldr	r3, [pc, #500]	; (80012fc <arm_PT_ST+0x578>)
 8001108:	6018      	str	r0, [r3, #0]
					NoiseLevelI = 0.125*meanValue + 0.875*NoiseLevelI;
 800110a:	ee18 0a10 	vmov	r0, s16
 800110e:	f7ff f9f3 	bl	80004f8 <__aeabi_f2d>
 8001112:	2200      	movs	r2, #0
 8001114:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001118:	f7ff fa46 	bl	80005a8 <__aeabi_dmul>
 800111c:	463b      	mov	r3, r7
 800111e:	4632      	mov	r2, r6
 8001120:	f7ff f88c 	bl	800023c <__adddf3>
 8001124:	f7ff fd38 	bl	8000b98 <__aeabi_d2f>
					TresholdI = NoiseLevelI + 0.25 * (SignalLevelI - NoiseLevelI);
 8001128:	4b75      	ldr	r3, [pc, #468]	; (8001300 <arm_PT_ST+0x57c>)
					NoiseLevelI = 0.125*meanValue + 0.875*NoiseLevelI;
 800112a:	f8ca 0000 	str.w	r0, [sl]
 800112e:	ee08 0a10 	vmov	s16, r0
					TresholdI = NoiseLevelI + 0.25 * (SignalLevelI - NoiseLevelI);
 8001132:	edd3 7a00 	vldr	s15, [r3]
 8001136:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800113a:	ee17 0a90 	vmov	r0, s15
 800113e:	f7ff f9db 	bl	80004f8 <__aeabi_f2d>
 8001142:	4b6d      	ldr	r3, [pc, #436]	; (80012f8 <arm_PT_ST+0x574>)
 8001144:	2200      	movs	r2, #0
 8001146:	f7ff fa2f 	bl	80005a8 <__aeabi_dmul>
 800114a:	4606      	mov	r6, r0
 800114c:	ee18 0a10 	vmov	r0, s16
 8001150:	460f      	mov	r7, r1
 8001152:	f7ff f9d1 	bl	80004f8 <__aeabi_f2d>
 8001156:	460b      	mov	r3, r1
 8001158:	4602      	mov	r2, r0
 800115a:	4639      	mov	r1, r7
 800115c:	4630      	mov	r0, r6
 800115e:	f7ff f86d 	bl	800023c <__adddf3>
 8001162:	f7ff fd19 	bl	8000b98 <__aeabi_d2f>
					previousSignalPeak = 0;
 8001166:	2300      	movs	r3, #0
					TresholdI = NoiseLevelI + 0.25 * (SignalLevelI - NoiseLevelI);
 8001168:	f8cb 0000 	str.w	r0, [fp]
					previousSignalPeak = 0;
 800116c:	6023      	str	r3, [r4, #0]
					previousMean = 0;
 800116e:	602b      	str	r3, [r5, #0]
 8001170:	e68d      	b.n	8000e8e <arm_PT_ST+0x10a>
						if (previousSignalPeak>TresholdF)
 8001172:	f8df a188 	ldr.w	sl, [pc, #392]	; 80012fc <arm_PT_ST+0x578>
 8001176:	edd4 8a00 	vldr	s17, [r4]
 800117a:	edda 7a00 	vldr	s15, [sl]
 800117e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8001182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001186:	dc4e      	bgt.n	8001226 <arm_PT_ST+0x4a2>
							NoiseLevelF = 0.125*previousSignalPeak + 0.875*NoiseLevelI;
 8001188:	4b5e      	ldr	r3, [pc, #376]	; (8001304 <arm_PT_ST+0x580>)
 800118a:	6818      	ldr	r0, [r3, #0]
 800118c:	f7ff f9b4 	bl	80004f8 <__aeabi_f2d>
 8001190:	4b56      	ldr	r3, [pc, #344]	; (80012ec <arm_PT_ST+0x568>)
 8001192:	2200      	movs	r2, #0
 8001194:	f7ff fa08 	bl	80005a8 <__aeabi_dmul>
 8001198:	4606      	mov	r6, r0
 800119a:	ee18 0a90 	vmov	r0, s17
 800119e:	460f      	mov	r7, r1
 80011a0:	f7ff f9aa 	bl	80004f8 <__aeabi_f2d>
 80011a4:	2200      	movs	r2, #0
 80011a6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80011aa:	f7ff f9fd 	bl	80005a8 <__aeabi_dmul>
 80011ae:	4632      	mov	r2, r6
 80011b0:	463b      	mov	r3, r7
 80011b2:	f7ff f843 	bl	800023c <__adddf3>
 80011b6:	f7ff fcef 	bl	8000b98 <__aeabi_d2f>
							TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 80011ba:	4b4d      	ldr	r3, [pc, #308]	; (80012f0 <arm_PT_ST+0x56c>)
							NoiseLevelF = 0.125*previousSignalPeak + 0.875*NoiseLevelI;
 80011bc:	ee08 0a90 	vmov	s17, r0
							TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 80011c0:	edd3 7a00 	vldr	s15, [r3]
							NoiseLevelF = 0.125*previousSignalPeak + 0.875*NoiseLevelI;
 80011c4:	4b4b      	ldr	r3, [pc, #300]	; (80012f4 <arm_PT_ST+0x570>)
							TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 80011c6:	ee77 7ae8 	vsub.f32	s15, s15, s17
							NoiseLevelF = 0.125*previousSignalPeak + 0.875*NoiseLevelI;
 80011ca:	6018      	str	r0, [r3, #0]
							TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 80011cc:	ee17 0a90 	vmov	r0, s15
 80011d0:	f7ff f992 	bl	80004f8 <__aeabi_f2d>
 80011d4:	4b48      	ldr	r3, [pc, #288]	; (80012f8 <arm_PT_ST+0x574>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	f7ff f9e6 	bl	80005a8 <__aeabi_dmul>
 80011dc:	4680      	mov	r8, r0
 80011de:	ee18 0a90 	vmov	r0, s17
 80011e2:	4689      	mov	r9, r1
 80011e4:	f7ff f988 	bl	80004f8 <__aeabi_f2d>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4640      	mov	r0, r8
 80011ee:	4649      	mov	r1, r9
 80011f0:	f7ff f824 	bl	800023c <__adddf3>
 80011f4:	f7ff fcd0 	bl	8000b98 <__aeabi_d2f>
 80011f8:	f8ca 0000 	str.w	r0, [sl]
							NoiseLevelI = 0.125*meanValue + 0.875*NoiseLevelI;
 80011fc:	ee18 0a10 	vmov	r0, s16
 8001200:	f7ff f97a 	bl	80004f8 <__aeabi_f2d>
 8001204:	2200      	movs	r2, #0
 8001206:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800120a:	f7ff f9cd 	bl	80005a8 <__aeabi_dmul>
 800120e:	4632      	mov	r2, r6
 8001210:	463b      	mov	r3, r7
 8001212:	f7ff f813 	bl	800023c <__adddf3>
 8001216:	f7ff fcbf 	bl	8000b98 <__aeabi_d2f>
 800121a:	4a3a      	ldr	r2, [pc, #232]	; (8001304 <arm_PT_ST+0x580>)
							TresholdI = NoiseLevelI + 0.25 * (SignalLevelI - NoiseLevelI);
 800121c:	4b38      	ldr	r3, [pc, #224]	; (8001300 <arm_PT_ST+0x57c>)
							NoiseLevelI = 0.125*meanValue + 0.875*NoiseLevelI;
 800121e:	6010      	str	r0, [r2, #0]
 8001220:	ee08 0a10 	vmov	s16, r0
 8001224:	e785      	b.n	8001132 <arm_PT_ST+0x3ae>
							SignalLevelF = 0.125*previousSignalPeak + 0.875*SignalLevelF;
 8001226:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80012f0 <arm_PT_ST+0x56c>
							SignalLevelI = 0.125*meanValue + 0.875*SignalLevelI;
 800122a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8001300 <arm_PT_ST+0x57c>
							SignalLevelF = 0.125*previousSignalPeak + 0.875*SignalLevelF;
 800122e:	f8d9 0000 	ldr.w	r0, [r9]
 8001232:	f7ff f961 	bl	80004f8 <__aeabi_f2d>
 8001236:	4b2d      	ldr	r3, [pc, #180]	; (80012ec <arm_PT_ST+0x568>)
 8001238:	2200      	movs	r2, #0
 800123a:	f7ff f9b5 	bl	80005a8 <__aeabi_dmul>
 800123e:	ec41 0b1a 	vmov	d10, r0, r1
 8001242:	ee18 0a90 	vmov	r0, s17
 8001246:	f7ff f957 	bl	80004f8 <__aeabi_f2d>
 800124a:	2200      	movs	r2, #0
 800124c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001250:	f7ff f9aa 	bl	80005a8 <__aeabi_dmul>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	ec51 0b1a 	vmov	r0, r1, d10
 800125c:	f7fe ffee 	bl	800023c <__adddf3>
 8001260:	f7ff fc9a 	bl	8000b98 <__aeabi_d2f>
							TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 8001264:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <arm_PT_ST+0x570>)
							SignalLevelF = 0.125*previousSignalPeak + 0.875*SignalLevelF;
 8001266:	f8c9 0000 	str.w	r0, [r9]
							TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 800126a:	ed93 9a00 	vldr	s18, [r3]
							SignalLevelF = 0.125*previousSignalPeak + 0.875*SignalLevelF;
 800126e:	ee07 0a90 	vmov	s15, r0
							TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 8001272:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8001276:	ee17 0a90 	vmov	r0, s15
 800127a:	f7ff f93d 	bl	80004f8 <__aeabi_f2d>
 800127e:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <arm_PT_ST+0x574>)
 8001280:	2200      	movs	r2, #0
 8001282:	f7ff f991 	bl	80005a8 <__aeabi_dmul>
 8001286:	ec41 0b1a 	vmov	d10, r0, r1
 800128a:	ee19 0a10 	vmov	r0, s18
 800128e:	f7ff f933 	bl	80004f8 <__aeabi_f2d>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	ec51 0b1a 	vmov	r0, r1, d10
 800129a:	f7fe ffcf 	bl	800023c <__adddf3>
 800129e:	f7ff fc7b 	bl	8000b98 <__aeabi_d2f>
							lastQRSpeak = previousSignalPeak;
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <arm_PT_ST+0x584>)
							TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 80012a4:	f8ca 0000 	str.w	r0, [sl]
							lastQRSpeak = previousSignalPeak;
 80012a8:	edc3 8a00 	vstr	s17, [r3]
							SignalLevelI = 0.125*meanValue + 0.875*SignalLevelI;
 80012ac:	f8d8 0000 	ldr.w	r0, [r8]
 80012b0:	f7ff f922 	bl	80004f8 <__aeabi_f2d>
 80012b4:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <arm_PT_ST+0x568>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	f7ff f976 	bl	80005a8 <__aeabi_dmul>
 80012bc:	4681      	mov	r9, r0
 80012be:	ee18 0a10 	vmov	r0, s16
 80012c2:	468a      	mov	sl, r1
 80012c4:	f7ff f918 	bl	80004f8 <__aeabi_f2d>
 80012c8:	2200      	movs	r2, #0
 80012ca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80012ce:	f7ff f96b 	bl	80005a8 <__aeabi_dmul>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4648      	mov	r0, r9
 80012d8:	4651      	mov	r1, sl
 80012da:	f7fe ffaf 	bl	800023c <__adddf3>
 80012de:	f7ff fc5b 	bl	8000b98 <__aeabi_d2f>
 80012e2:	ee07 0a90 	vmov	s15, r0
 80012e6:	f8c8 0000 	str.w	r0, [r8]
 80012ea:	e677      	b.n	8000fdc <arm_PT_ST+0x258>
 80012ec:	3fec0000 	.word	0x3fec0000
 80012f0:	20000218 	.word	0x20000218
 80012f4:	20000210 	.word	0x20000210
 80012f8:	3fd00000 	.word	0x3fd00000
 80012fc:	20000220 	.word	0x20000220
 8001300:	2000021c 	.word	0x2000021c
 8001304:	20000214 	.word	0x20000214
 8001308:	20000270 	.word	0x20000270
 800130c:	00000000 	.word	0x00000000

08001310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001310:	b510      	push	{r4, lr}
 8001312:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001314:	2228      	movs	r2, #40	; 0x28
 8001316:	2100      	movs	r1, #0
 8001318:	a80b      	add	r0, sp, #44	; 0x2c
 800131a:	f001 fae9 	bl	80028f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800131e:	2300      	movs	r3, #0
 8001320:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001324:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001328:	e9cd 3306 	strd	r3, r3, [sp, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800132c:	4928      	ldr	r1, [pc, #160]	; (80013d0 <SystemClock_Config+0xc0>)
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800132e:	9308      	str	r3, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001330:	680a      	ldr	r2, [r1, #0]
 8001332:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800133a:	600a      	str	r2, [r1, #0]
 800133c:	680a      	ldr	r2, [r1, #0]
 800133e:	f402 62c0 	and.w	r2, r2, #1536	; 0x600

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8001342:	2122      	movs	r1, #34	; 0x22
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001344:	9201      	str	r2, [sp, #4]
 8001346:	9a01      	ldr	r2, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8001348:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800134a:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800134c:	f44f 7180 	mov.w	r1, #256	; 0x100
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001350:	2001      	movs	r0, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001352:	910d      	str	r1, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001354:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001356:	2160      	movs	r1, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001358:	2202      	movs	r2, #2
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800135a:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800135e:	e9cd 0316 	strd	r0, r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001362:	9011      	str	r0, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001364:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001366:	2420      	movs	r4, #32
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001368:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800136c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001370:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001374:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001376:	e9cd 4118 	strd	r4, r1, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800137a:	e9cd 321a 	strd	r3, r2, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137e:	f000 fb0b 	bl	8001998 <HAL_RCC_OscConfig>
 8001382:	b108      	cbz	r0, 8001388 <SystemClock_Config+0x78>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001384:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001386:	e7fe      	b.n	8001386 <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001388:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 80013b8 <SystemClock_Config+0xa8>
 800138c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001390:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 80013c0 <SystemClock_Config+0xb0>
 8001394:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001398:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 80013c8 <SystemClock_Config+0xb8>
 800139c:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800139e:	2103      	movs	r1, #3
 80013a0:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80013a2:	ed8d 7b06 	vstr	d7, [sp, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80013a6:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013a8:	f000 fe50 	bl	800204c <HAL_RCC_ClockConfig>
 80013ac:	b108      	cbz	r0, 80013b2 <SystemClock_Config+0xa2>
 80013ae:	b672      	cpsid	i
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <SystemClock_Config+0xa0>
}
 80013b2:	b01c      	add	sp, #112	; 0x70
 80013b4:	bd10      	pop	{r4, pc}
 80013b6:	bf00      	nop
 80013b8:	0000006f 	.word	0x0000006f
 80013bc:	00000003 	.word	0x00000003
	...
 80013cc:	00000080 	.word	0x00000080
 80013d0:	58000400 	.word	0x58000400

080013d4 <PeriphCommonClock_Config>:
{
 80013d4:	b500      	push	{lr}
 80013d6:	b095      	sub	sp, #84	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013d8:	2248      	movs	r2, #72	; 0x48
 80013da:	2100      	movs	r1, #0
 80013dc:	a801      	add	r0, sp, #4
 80013de:	f001 fa87 	bl	80028f0 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80013e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80013e6:	2310      	movs	r3, #16
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013e8:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80013ea:	9200      	str	r2, [sp, #0]
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80013ec:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ee:	f000 ffb3 	bl	8002358 <HAL_RCCEx_PeriphCLKConfig>
 80013f2:	b108      	cbz	r0, 80013f8 <PeriphCommonClock_Config+0x24>
 80013f4:	b672      	cpsid	i
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <PeriphCommonClock_Config+0x22>
}
 80013f8:	b015      	add	sp, #84	; 0x54
 80013fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80013fe:	bf00      	nop

08001400 <main>:
{
 8001400:	b570      	push	{r4, r5, r6, lr}
  HAL_Init();
 8001402:	f000 f91b 	bl	800163c <HAL_Init>
  SystemClock_Config();
 8001406:	f7ff ff83 	bl	8001310 <SystemClock_Config>
  PeriphCommonClock_Config();
 800140a:	f7ff ffe3 	bl	80013d4 <PeriphCommonClock_Config>
	arm_PT_init();
 800140e:	f7ff fc49 	bl	8000ca4 <arm_PT_init>
	for (uint16_t i = 0; i < N; i++)
 8001412:	4d09      	ldr	r5, [pc, #36]	; (8001438 <main+0x38>)
	arm_PT_init();
 8001414:	26c8      	movs	r6, #200	; 0xc8
 8001416:	4c09      	ldr	r4, [pc, #36]	; (800143c <main+0x3c>)
			arm_PT_ST (ECG[count]);
 8001418:	f934 0f02 	ldrsh.w	r0, [r4, #2]!
 800141c:	f7ff fcb2 	bl	8000d84 <arm_PT_ST>
		}while (count < ECG_samples);
 8001420:	42ac      	cmp	r4, r5
 8001422:	d1f9      	bne.n	8001418 <main+0x18>
	for (uint16_t i = 0; i < N; i++)
 8001424:	3e01      	subs	r6, #1
 8001426:	b2b6      	uxth	r6, r6
 8001428:	2e00      	cmp	r6, #0
 800142a:	d1f4      	bne.n	8001416 <main+0x16>
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800142c:	4630      	mov	r0, r6
 800142e:	2101      	movs	r1, #1
 8001430:	f000 f9a6 	bl	8001780 <HAL_PWR_EnterSLEEPMode>
}
 8001434:	4630      	mov	r0, r6
 8001436:	bd70      	pop	{r4, r5, r6, pc}
 8001438:	08008af6 	.word	0x08008af6
 800143c:	08007222 	.word	0x08007222

08001440 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop

08001444 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <NMI_Handler>
 8001446:	bf00      	nop

08001448 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <HardFault_Handler>
 800144a:	bf00      	nop

0800144c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800144c:	e7fe      	b.n	800144c <MemManage_Handler>
 800144e:	bf00      	nop

08001450 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <BusFault_Handler>
 8001452:	bf00      	nop

08001454 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <UsageFault_Handler>
 8001456:	bf00      	nop

08001458 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop

0800145c <DebugMon_Handler>:
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop

08001460 <PendSV_Handler>:
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop

08001464 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001464:	f000 b902 	b.w	800166c <HAL_IncTick>

08001468 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001468:	2001      	movs	r0, #1
 800146a:	4770      	bx	lr

0800146c <_kill>:

int _kill(int pid, int sig)
{
 800146c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800146e:	f001 fa07 	bl	8002880 <__errno>
 8001472:	2316      	movs	r3, #22
 8001474:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001476:	f04f 30ff 	mov.w	r0, #4294967295
 800147a:	bd08      	pop	{r3, pc}

0800147c <_exit>:

void _exit (int status)
{
 800147c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800147e:	f001 f9ff 	bl	8002880 <__errno>
 8001482:	2316      	movs	r3, #22
 8001484:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001486:	e7fe      	b.n	8001486 <_exit+0xa>

08001488 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001488:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148a:	1e16      	subs	r6, r2, #0
 800148c:	dd07      	ble.n	800149e <_read+0x16>
 800148e:	460c      	mov	r4, r1
 8001490:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8001492:	f3af 8000 	nop.w
 8001496:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149a:	42a5      	cmp	r5, r4
 800149c:	d1f9      	bne.n	8001492 <_read+0xa>
	}

return len;
}
 800149e:	4630      	mov	r0, r6
 80014a0:	bd70      	pop	{r4, r5, r6, pc}
 80014a2:	bf00      	nop

080014a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014a4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a6:	1e16      	subs	r6, r2, #0
 80014a8:	dd07      	ble.n	80014ba <_write+0x16>
 80014aa:	460c      	mov	r4, r1
 80014ac:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80014ae:	f814 0b01 	ldrb.w	r0, [r4], #1
 80014b2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b6:	42ac      	cmp	r4, r5
 80014b8:	d1f9      	bne.n	80014ae <_write+0xa>
	}
	return len;
}
 80014ba:	4630      	mov	r0, r6
 80014bc:	bd70      	pop	{r4, r5, r6, pc}
 80014be:	bf00      	nop

080014c0 <_close>:

int _close(int file)
{
	return -1;
}
 80014c0:	f04f 30ff 	mov.w	r0, #4294967295
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop

080014c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80014c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014cc:	604b      	str	r3, [r1, #4]
	return 0;
}
 80014ce:	2000      	movs	r0, #0
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop

080014d4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80014d4:	2001      	movs	r0, #1
 80014d6:	4770      	bx	lr

080014d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80014d8:	2000      	movs	r0, #0
 80014da:	4770      	bx	lr

080014dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014dc:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014de:	4c0c      	ldr	r4, [pc, #48]	; (8001510 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <_sbrk+0x38>)
 80014e2:	490d      	ldr	r1, [pc, #52]	; (8001518 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 80014e4:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e6:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 80014e8:	b12a      	cbz	r2, 80014f6 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ea:	4410      	add	r0, r2
 80014ec:	4288      	cmp	r0, r1
 80014ee:	d807      	bhi.n	8001500 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80014f0:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 80014f2:	4610      	mov	r0, r2
 80014f4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80014f6:	4a09      	ldr	r2, [pc, #36]	; (800151c <_sbrk+0x40>)
 80014f8:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80014fa:	4410      	add	r0, r2
 80014fc:	4288      	cmp	r0, r1
 80014fe:	d9f7      	bls.n	80014f0 <_sbrk+0x14>
    errno = ENOMEM;
 8001500:	f001 f9be 	bl	8002880 <__errno>
 8001504:	230c      	movs	r3, #12
    return (void *)-1;
 8001506:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 800150a:	6003      	str	r3, [r0, #0]
}
 800150c:	4610      	mov	r0, r2
 800150e:	bd10      	pop	{r4, pc}
 8001510:	2000038c 	.word	0x2000038c
 8001514:	20030000 	.word	0x20030000
 8001518:	00000400 	.word	0x00000400
 800151c:	200003a8 	.word	0x200003a8

08001520 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001520:	4914      	ldr	r1, [pc, #80]	; (8001574 <SystemInit+0x54>)
 8001522:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800152a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800152e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_MSION;
 8001532:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001534:	4a10      	ldr	r2, [pc, #64]	; (8001578 <SystemInit+0x58>)
  RCC->CFGR = 0x00070000U;
 8001536:	f44f 20e0 	mov.w	r0, #458752	; 0x70000
  RCC->CR |= RCC_CR_MSION;
 800153a:	f041 0101 	orr.w	r1, r1, #1
 800153e:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00070000U;
 8001540:	6098      	str	r0, [r3, #8]
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001542:	6818      	ldr	r0, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001544:	490d      	ldr	r1, [pc, #52]	; (800157c <SystemInit+0x5c>)
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001546:	4002      	ands	r2, r0
 8001548:	601a      	str	r2, [r3, #0]
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800154a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800154e:	f022 0205 	bic.w	r2, r2, #5
 8001552:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001556:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800155a:	f022 0201 	bic.w	r2, r2, #1
 800155e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  RCC->PLLCFGR = 0x22041000U;
 8001562:	60d9      	str	r1, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001564:	6119      	str	r1, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001566:	681a      	ldr	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001568:	2100      	movs	r1, #0
  RCC->CR &= 0xFFFBFFFFU;
 800156a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800156e:	601a      	str	r2, [r3, #0]
  RCC->CIER = 0x00000000;
 8001570:	6199      	str	r1, [r3, #24]
}
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00
 8001578:	faf6fefb 	.word	0xfaf6fefb
 800157c:	22041000 	.word	0x22041000

08001580 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001580:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001582:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001584:	3304      	adds	r3, #4

08001586 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001586:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001588:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800158a:	d3f9      	bcc.n	8001580 <CopyDataInit>
  bx lr
 800158c:	4770      	bx	lr

0800158e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800158e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001590:	3004      	adds	r0, #4

08001592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001592:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001594:	d3fb      	bcc.n	800158e <FillZerobss>
  bx lr
 8001596:	4770      	bx	lr

08001598 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001598:	480c      	ldr	r0, [pc, #48]	; (80015cc <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800159a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800159c:	f7ff ffc0 	bl	8001520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80015a0:	480b      	ldr	r0, [pc, #44]	; (80015d0 <LoopForever+0x8>)
 80015a2:	490c      	ldr	r1, [pc, #48]	; (80015d4 <LoopForever+0xc>)
 80015a4:	4a0c      	ldr	r2, [pc, #48]	; (80015d8 <LoopForever+0x10>)
 80015a6:	2300      	movs	r3, #0
 80015a8:	f7ff ffed 	bl	8001586 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80015ac:	480b      	ldr	r0, [pc, #44]	; (80015dc <LoopForever+0x14>)
 80015ae:	490c      	ldr	r1, [pc, #48]	; (80015e0 <LoopForever+0x18>)
 80015b0:	2300      	movs	r3, #0
 80015b2:	f7ff ffee 	bl	8001592 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80015b6:	480b      	ldr	r0, [pc, #44]	; (80015e4 <LoopForever+0x1c>)
 80015b8:	490b      	ldr	r1, [pc, #44]	; (80015e8 <LoopForever+0x20>)
 80015ba:	2300      	movs	r3, #0
 80015bc:	f7ff ffe9 	bl	8001592 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015c0:	f001 f964 	bl	800288c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80015c4:	f7ff ff1c 	bl	8001400 <main>

080015c8 <LoopForever>:

LoopForever:
  b LoopForever
 80015c8:	e7fe      	b.n	80015c8 <LoopForever>
 80015ca:	0000      	.short	0x0000
  ldr   r0, =_estack
 80015cc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80015d0:	20000004 	.word	0x20000004
 80015d4:	200001e4 	.word	0x200001e4
 80015d8:	0800902c 	.word	0x0800902c
  INIT_BSS _sbss, _ebss
 80015dc:	200001e4 	.word	0x200001e4
 80015e0:	200003a4 	.word	0x200003a4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80015e4:	20030000 	.word	0x20030000
 80015e8:	20030000 	.word	0x20030000

080015ec <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015ec:	e7fe      	b.n	80015ec <ADC1_IRQHandler>
	...

080015f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0U)
 80015f2:	4c10      	ldr	r4, [pc, #64]	; (8001634 <HAL_InitTick+0x44>)
 80015f4:	7823      	ldrb	r3, [r4, #0]
 80015f6:	b90b      	cbnz	r3, 80015fc <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80015f8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80015fa:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015fc:	4605      	mov	r5, r0
 80015fe:	f000 fe73 	bl	80022e8 <HAL_RCC_GetHCLKFreq>
 8001602:	7822      	ldrb	r2, [r4, #0]
 8001604:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001608:	fbb3 f3f2 	udiv	r3, r3, r2
 800160c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001610:	f000 f894 	bl	800173c <HAL_SYSTICK_Config>
 8001614:	4604      	mov	r4, r0
 8001616:	2800      	cmp	r0, #0
 8001618:	d1ee      	bne.n	80015f8 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800161a:	2d0f      	cmp	r5, #15
 800161c:	d8ec      	bhi.n	80015f8 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800161e:	4602      	mov	r2, r0
 8001620:	4629      	mov	r1, r5
 8001622:	f04f 30ff 	mov.w	r0, #4294967295
 8001626:	f000 f84b 	bl	80016c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800162a:	4b03      	ldr	r3, [pc, #12]	; (8001638 <HAL_InitTick+0x48>)
 800162c:	4620      	mov	r0, r4
 800162e:	601d      	str	r5, [r3, #0]
}
 8001630:	bd38      	pop	{r3, r4, r5, pc}
 8001632:	bf00      	nop
 8001634:	20000008 	.word	0x20000008
 8001638:	2000000c 	.word	0x2000000c

0800163c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800163c:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <HAL_Init+0x2c>)
 800163e:	6813      	ldr	r3, [r2, #0]
 8001640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8001644:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001646:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001648:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800164a:	f000 f827 	bl	800169c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800164e:	200f      	movs	r0, #15
 8001650:	f7ff ffce 	bl	80015f0 <HAL_InitTick>
 8001654:	b110      	cbz	r0, 800165c <HAL_Init+0x20>
    status = HAL_ERROR;
 8001656:	2401      	movs	r4, #1
}
 8001658:	4620      	mov	r0, r4
 800165a:	bd10      	pop	{r4, pc}
 800165c:	4604      	mov	r4, r0
    HAL_MspInit();
 800165e:	f7ff feef 	bl	8001440 <HAL_MspInit>
}
 8001662:	4620      	mov	r0, r4
 8001664:	bd10      	pop	{r4, pc}
 8001666:	bf00      	nop
 8001668:	58004000 	.word	0x58004000

0800166c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800166c:	4a03      	ldr	r2, [pc, #12]	; (800167c <HAL_IncTick+0x10>)
 800166e:	4b04      	ldr	r3, [pc, #16]	; (8001680 <HAL_IncTick+0x14>)
 8001670:	6811      	ldr	r1, [r2, #0]
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	440b      	add	r3, r1
 8001676:	6013      	str	r3, [r2, #0]
}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000390 	.word	0x20000390
 8001680:	20000008 	.word	0x20000008

08001684 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001684:	4b01      	ldr	r3, [pc, #4]	; (800168c <HAL_GetTick+0x8>)
 8001686:	6818      	ldr	r0, [r3, #0]
}
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	20000390 	.word	0x20000390

08001690 <HAL_GetTickPrio>:
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
 8001690:	4b01      	ldr	r3, [pc, #4]	; (8001698 <HAL_GetTickPrio+0x8>)
}
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	2000000c 	.word	0x2000000c

0800169c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800169c:	4907      	ldr	r1, [pc, #28]	; (80016bc <HAL_NVIC_SetPriorityGrouping+0x20>)
 800169e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016a2:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016aa:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ac:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ae:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80016b6:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c0:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <HAL_NVIC_SetPriority+0x74>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c8:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ca:	f1c3 0e07 	rsb	lr, r3, #7
 80016ce:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d6:	bf28      	it	cs
 80016d8:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016dc:	f1bc 0f06 	cmp.w	ip, #6
 80016e0:	d91b      	bls.n	800171a <HAL_NVIC_SetPriority+0x5a>
 80016e2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e4:	f04f 3cff 	mov.w	ip, #4294967295
 80016e8:	fa0c fc03 	lsl.w	ip, ip, r3
 80016ec:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	f04f 3cff 	mov.w	ip, #4294967295
 80016f4:	fa0c fc0e 	lsl.w	ip, ip, lr
 80016f8:	ea21 010c 	bic.w	r1, r1, ip
 80016fc:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80016fe:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001704:	db0c      	blt.n	8001720 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001706:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800170a:	0109      	lsls	r1, r1, #4
 800170c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001710:	b2c9      	uxtb	r1, r1
 8001712:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001716:	f85d fb04 	ldr.w	pc, [sp], #4
 800171a:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171c:	4613      	mov	r3, r2
 800171e:	e7e7      	b.n	80016f0 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <HAL_NVIC_SetPriority+0x78>)
 8001722:	f000 000f 	and.w	r0, r0, #15
 8001726:	0109      	lsls	r1, r1, #4
 8001728:	4403      	add	r3, r0
 800172a:	b2c9      	uxtb	r1, r1
 800172c:	7619      	strb	r1, [r3, #24]
 800172e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001732:	bf00      	nop
 8001734:	e000ed00 	.word	0xe000ed00
 8001738:	e000ecfc 	.word	0xe000ecfc

0800173c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800173c:	3801      	subs	r0, #1
 800173e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001742:	d210      	bcs.n	8001766 <HAL_SYSTICK_Config+0x2a>
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001744:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001746:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174a:	4c08      	ldr	r4, [pc, #32]	; (800176c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800174c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174e:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8001752:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001756:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001758:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800175a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800175c:	619a      	str	r2, [r3, #24]
  return SysTick_Config(TicksNumb);
}
 800175e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001762:	6119      	str	r1, [r3, #16]
 8001764:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001766:	2001      	movs	r0, #1
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001770:	4a02      	ldr	r2, [pc, #8]	; (800177c <HAL_PWR_EnableBkUpAccess+0xc>)
 8001772:	6813      	ldr	r3, [r2, #0]
 8001774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001778:	6013      	str	r3, [r2, #0]
}
 800177a:	4770      	bx	lr
 800177c:	58000400 	.word	0x58000400

08001780 <HAL_PWR_EnterSLEEPMode>:

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8001780:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <HAL_PWR_EnterSLEEPMode+0x3c>)
{
 8001782:	b510      	push	{r4, lr}
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8001784:	695b      	ldr	r3, [r3, #20]
{
 8001786:	460c      	mov	r4, r1
  if (Regulator == PWR_MAINREGULATOR_ON)
 8001788:	b960      	cbnz	r0, 80017a4 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800178a:	059a      	lsls	r2, r3, #22
 800178c:	d411      	bmi.n	80017b2 <HAL_PWR_EnterSLEEPMode+0x32>
      HAL_PWREx_EnableLowPowerRunMode();  
    } 
  } 
    
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800178e:	4a0c      	ldr	r2, [pc, #48]	; (80017c0 <HAL_PWR_EnterSLEEPMode+0x40>)
 8001790:	6913      	ldr	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001792:	2c01      	cmp	r4, #1
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001794:	f023 0304 	bic.w	r3, r3, #4
 8001798:	6113      	str	r3, [r2, #16]
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800179a:	d008      	beq.n	80017ae <HAL_PWR_EnterSLEEPMode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800179c:	bf40      	sev
    __WFE();
 800179e:	bf20      	wfe
    __WFE();
 80017a0:	bf20      	wfe
  }
}
 80017a2:	bd10      	pop	{r4, pc}
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 80017a4:	059b      	lsls	r3, r3, #22
 80017a6:	d4f2      	bmi.n	800178e <HAL_PWR_EnterSLEEPMode+0xe>
      HAL_PWREx_EnableLowPowerRunMode();  
 80017a8:	f000 f814 	bl	80017d4 <HAL_PWREx_EnableLowPowerRunMode>
 80017ac:	e7ef      	b.n	800178e <HAL_PWR_EnterSLEEPMode+0xe>
    __WFI();
 80017ae:	bf30      	wfi
}
 80017b0:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80017b2:	f000 f817 	bl	80017e4 <HAL_PWREx_DisableLowPowerRunMode>
 80017b6:	2800      	cmp	r0, #0
 80017b8:	d0e9      	beq.n	800178e <HAL_PWR_EnterSLEEPMode+0xe>
}
 80017ba:	bd10      	pop	{r4, pc}
 80017bc:	58000400 	.word	0x58000400
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017c4:	4b02      	ldr	r3, [pc, #8]	; (80017d0 <HAL_PWREx_GetVoltageRange+0xc>)
 80017c6:	6818      	ldr	r0, [r3, #0]
}
 80017c8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	58000400 	.word	0x58000400

080017d4 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR); 
 80017d4:	4a02      	ldr	r2, [pc, #8]	; (80017e0 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 80017d6:	6813      	ldr	r3, [r2, #0]
 80017d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017dc:	6013      	str	r3, [r2, #0]
}
 80017de:	4770      	bx	lr
 80017e0:	58000400 	.word	0x58000400

080017e4 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;
  
  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR); 
 80017e4:	4910      	ldr	r1, [pc, #64]	; (8001828 <HAL_PWREx_DisableLowPowerRunMode+0x44>)

  /* Wait until REGLPF is reset */
  wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000U));
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <HAL_PWREx_DisableLowPowerRunMode+0x48>)
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR); 
 80017e8:	680a      	ldr	r2, [r1, #0]
 80017ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
{
 80017ee:	b410      	push	{r4}
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR); 
 80017f0:	600a      	str	r2, [r1, #0]
  wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000U));
 80017f2:	4c0f      	ldr	r4, [pc, #60]	; (8001830 <HAL_PWREx_DisableLowPowerRunMode+0x4c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80017f6:	694a      	ldr	r2, [r1, #20]
  wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000U));
 80017f8:	fba4 4303 	umull	r4, r3, r4, r3
 80017fc:	2032      	movs	r0, #50	; 0x32
 80017fe:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8001800:	0594      	lsls	r4, r2, #22
  wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000U));
 8001802:	fb00 f303 	mul.w	r3, r0, r3
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8001806:	d505      	bpl.n	8001814 <HAL_PWREx_DisableLowPowerRunMode+0x30>
 8001808:	b123      	cbz	r3, 8001814 <HAL_PWREx_DisableLowPowerRunMode+0x30>
 800180a:	694a      	ldr	r2, [r1, #20]
 800180c:	0592      	lsls	r2, r2, #22
  {
    wait_loop_index--;
 800180e:	f103 33ff 	add.w	r3, r3, #4294967295
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8001812:	d4f9      	bmi.n	8001808 <HAL_PWREx_DisableLowPowerRunMode+0x24>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8001814:	4b04      	ldr	r3, [pc, #16]	; (8001828 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
  {
    return HAL_TIMEOUT;
  }
  
  return HAL_OK;
}
 8001816:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800181a:	695b      	ldr	r3, [r3, #20]
    return HAL_TIMEOUT;
 800181c:	f413 7f00 	tst.w	r3, #512	; 0x200
}
 8001820:	bf14      	ite	ne
 8001822:	2003      	movne	r0, #3
 8001824:	2000      	moveq	r0, #0
 8001826:	4770      	bx	lr
 8001828:	58000400 	.word	0x58000400
 800182c:	20000004 	.word	0x20000004
 8001830:	431bde83 	.word	0x431bde83

08001834 <RCC_SetFlashLatencyFromMSIRange>:

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8001834:	28b0      	cmp	r0, #176	; 0xb0
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8001836:	4b31      	ldr	r3, [pc, #196]	; (80018fc <RCC_SetFlashLatencyFromMSIRange+0xc8>)
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001838:	4a31      	ldr	r2, [pc, #196]	; (8001900 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800183a:	bf98      	it	ls
 800183c:	0900      	lsrls	r0, r0, #4
{
 800183e:	b570      	push	{r4, r5, r6, lr}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8001840:	bf8c      	ite	hi
 8001842:	6adc      	ldrhi	r4, [r3, #44]	; 0x2c
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8001844:	f853 4020 	ldrls.w	r4, [r3, r0, lsl #2]
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 800184c:	b084      	sub	sp, #16
 800184e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001852:	f003 030f 	and.w	r3, r3, #15
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001856:	ae04      	add	r6, sp, #16
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185c:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001860:	f7ff ffb0 	bl	80017c4 <HAL_PWREx_GetVoltageRange>
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001864:	4b27      	ldr	r3, [pc, #156]	; (8001904 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001866:	4605      	mov	r5, r0
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001868:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800186a:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800186e:	e906 000f 	stmdb	r6, {r0, r1, r2, r3}
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001872:	d029      	beq.n	80018c8 <RCC_SetFlashLatencyFromMSIRange+0x94>
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001874:	4b24      	ldr	r3, [pc, #144]	; (8001908 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8001876:	429c      	cmp	r4, r3
 8001878:	d33a      	bcc.n	80018f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>
 800187a:	f503 03b7 	add.w	r3, r3, #5996544	; 0x5b8000
 800187e:	f603 537f 	addw	r3, r3, #3455	; 0xd7f
 8001882:	429c      	cmp	r4, r3
 8001884:	d936      	bls.n	80018f4 <RCC_SetFlashLatencyFromMSIRange+0xc0>
 8001886:	f503 1374 	add.w	r3, r3, #3997696	; 0x3d0000
 800188a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800188e:	429c      	cmp	r4, r3
 8001890:	d932      	bls.n	80018f8 <RCC_SetFlashLatencyFromMSIRange+0xc4>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001892:	2600      	movs	r6, #0
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8001894:	4c1d      	ldr	r4, [pc, #116]	; (800190c <RCC_SetFlashLatencyFromMSIRange+0xd8>)
 8001896:	6823      	ldr	r3, [r4, #0]
 8001898:	f023 0307 	bic.w	r3, r3, #7
 800189c:	4333      	orrs	r3, r6
 800189e:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80018a0:	f7ff fef0 	bl	8001684 <HAL_GetTick>
 80018a4:	4605      	mov	r5, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80018a6:	e004      	b.n	80018b2 <RCC_SetFlashLatencyFromMSIRange+0x7e>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80018a8:	f7ff feec 	bl	8001684 <HAL_GetTick>
 80018ac:	1b40      	subs	r0, r0, r5
 80018ae:	2802      	cmp	r0, #2
 80018b0:	d807      	bhi.n	80018c2 <RCC_SetFlashLatencyFromMSIRange+0x8e>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80018b2:	6823      	ldr	r3, [r4, #0]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	429e      	cmp	r6, r3
 80018ba:	d1f5      	bne.n	80018a8 <RCC_SetFlashLatencyFromMSIRange+0x74>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80018bc:	2000      	movs	r0, #0
}
 80018be:	b004      	add	sp, #16
 80018c0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 80018c2:	2003      	movs	r0, #3
}
 80018c4:	b004      	add	sp, #16
 80018c6:	bd70      	pop	{r4, r5, r6, pc}
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <RCC_SetFlashLatencyFromMSIRange+0xdc>)
 80018ca:	429c      	cmp	r4, r3
 80018cc:	d910      	bls.n	80018f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>
 80018ce:	4b11      	ldr	r3, [pc, #68]	; (8001914 <RCC_SetFlashLatencyFromMSIRange+0xe0>)
 80018d0:	429c      	cmp	r4, r3
 80018d2:	d90f      	bls.n	80018f4 <RCC_SetFlashLatencyFromMSIRange+0xc0>
 80018d4:	4b10      	ldr	r3, [pc, #64]	; (8001918 <RCC_SetFlashLatencyFromMSIRange+0xe4>)
 80018d6:	429c      	cmp	r4, r3
 80018d8:	d90e      	bls.n	80018f8 <RCC_SetFlashLatencyFromMSIRange+0xc4>
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <RCC_SetFlashLatencyFromMSIRange+0xe8>)
 80018dc:	429c      	cmp	r4, r3
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80018de:	bf38      	it	cc
 80018e0:	2303      	movcc	r3, #3
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80018e2:	d2d6      	bcs.n	8001892 <RCC_SetFlashLatencyFromMSIRange+0x5e>
        latency = FLASH_LATENCY_RANGE[index];
 80018e4:	aa04      	add	r2, sp, #16
 80018e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80018ea:	f853 6c10 	ldr.w	r6, [r3, #-16]
        break;
 80018ee:	e7d1      	b.n	8001894 <RCC_SetFlashLatencyFromMSIRange+0x60>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80018f0:	2300      	movs	r3, #0
 80018f2:	e7f7      	b.n	80018e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
 80018f4:	2301      	movs	r3, #1
 80018f6:	e7f5      	b.n	80018e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
 80018f8:	2302      	movs	r3, #2
 80018fa:	e7f3      	b.n	80018e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
 80018fc:	08008b3c 	.word	0x08008b3c
 8001900:	08008afc 	.word	0x08008afc
 8001904:	080071d8 	.word	0x080071d8
 8001908:	006acfc0 	.word	0x006acfc0
 800190c:	58004000 	.word	0x58004000
 8001910:	0121eabf 	.word	0x0121eabf
 8001914:	0234933f 	.word	0x0234933f
 8001918:	03473bbf 	.word	0x03473bbf
 800191c:	03dfd240 	.word	0x03dfd240

08001920 <HAL_RCC_GetSysClockFreq.part.0>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001920:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
uint32_t HAL_RCC_GetSysClockFreq(void)
 8001924:	b410      	push	{r4}
 8001926:	68d3      	ldr	r3, [r2, #12]
 8001928:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800192c:	2b02      	cmp	r3, #2
 800192e:	d01d      	beq.n	800196c <HAL_RCC_GetSysClockFreq.part.0+0x4c>
 8001930:	2b03      	cmp	r3, #3
 8001932:	d11d      	bne.n	8001970 <HAL_RCC_GetSysClockFreq.part.0+0x50>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001934:	6812      	ldr	r2, [r2, #0]
          pllinputfreq = HSE_VALUE / 2U;
 8001936:	4b14      	ldr	r3, [pc, #80]	; (8001988 <HAL_RCC_GetSysClockFreq.part.0+0x68>)
 8001938:	4c14      	ldr	r4, [pc, #80]	; (800198c <HAL_RCC_GetSysClockFreq.part.0+0x6c>)
 800193a:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800193e:	bf08      	it	eq
 8001940:	461c      	moveq	r4, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001942:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001946:	68cb      	ldr	r3, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001948:	68ca      	ldr	r2, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800194a:	68c8      	ldr	r0, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800194c:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8001950:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8001954:	0f40      	lsrs	r0, r0, #29
 8001956:	fb04 f303 	mul.w	r3, r4, r3
 800195a:	3201      	adds	r2, #1
 800195c:	3001      	adds	r0, #1
 800195e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8001962:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001966:	fbb3 f0f0 	udiv	r0, r3, r0
 800196a:	4770      	bx	lr
    switch (pllsource)
 800196c:	4c08      	ldr	r4, [pc, #32]	; (8001990 <HAL_RCC_GetSysClockFreq.part.0+0x70>)
 800196e:	e7e8      	b.n	8001942 <HAL_RCC_GetSysClockFreq.part.0+0x22>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001970:	6813      	ldr	r3, [r2, #0]
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001972:	4a08      	ldr	r2, [pc, #32]	; (8001994 <HAL_RCC_GetSysClockFreq.part.0+0x74>)
 8001974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001978:	2bb0      	cmp	r3, #176	; 0xb0
 800197a:	bf28      	it	cs
 800197c:	23b0      	movcs	r3, #176	; 0xb0
 800197e:	091b      	lsrs	r3, r3, #4
 8001980:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
        break;
 8001984:	e7dd      	b.n	8001942 <HAL_RCC_GetSysClockFreq.part.0+0x22>
 8001986:	bf00      	nop
 8001988:	007a1200 	.word	0x007a1200
 800198c:	003d0900 	.word	0x003d0900
 8001990:	00f42400 	.word	0x00f42400
 8001994:	08008b3c 	.word	0x08008b3c

08001998 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8001998:	2800      	cmp	r0, #0
 800199a:	f000 82bb 	beq.w	8001f14 <HAL_RCC_OscConfig+0x57c>
{
 800199e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019a0:	6803      	ldr	r3, [r0, #0]
 80019a2:	069a      	lsls	r2, r3, #26
 80019a4:	4604      	mov	r4, r0
 80019a6:	d529      	bpl.n	80019fc <HAL_RCC_OscConfig+0x64>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80019a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019ac:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80019ae:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80019b0:	f013 030c 	ands.w	r3, r3, #12
 80019b4:	f000 80f9 	beq.w	8001baa <HAL_RCC_OscConfig+0x212>
 80019b8:	2b0c      	cmp	r3, #12
 80019ba:	f000 80f1 	beq.w	8001ba0 <HAL_RCC_OscConfig+0x208>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019be:	69e3      	ldr	r3, [r4, #28]
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80019c0:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 8276 	beq.w	8001eb6 <HAL_RCC_OscConfig+0x51e>
 80019ca:	682b      	ldr	r3, [r5, #0]
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80019d2:	f7ff fe57 	bl	8001684 <HAL_GetTick>
 80019d6:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80019d8:	682b      	ldr	r3, [r5, #0]
 80019da:	079b      	lsls	r3, r3, #30
 80019dc:	f140 827c 	bpl.w	8001ed8 <HAL_RCC_OscConfig+0x540>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80019e0:	682b      	ldr	r3, [r5, #0]
 80019e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80019e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019e8:	4313      	orrs	r3, r2
 80019ea:	602b      	str	r3, [r5, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80019ec:	686b      	ldr	r3, [r5, #4]
 80019ee:	6a22      	ldr	r2, [r4, #32]
 80019f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80019f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80019f8:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019fa:	6823      	ldr	r3, [r4, #0]
 80019fc:	07dd      	lsls	r5, r3, #31
 80019fe:	d527      	bpl.n	8001a50 <HAL_RCC_OscConfig+0xb8>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001a00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a04:	688a      	ldr	r2, [r1, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001a06:	68c9      	ldr	r1, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001a08:	f002 020c 	and.w	r2, r2, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001a0c:	2a08      	cmp	r2, #8
 8001a0e:	f000 81f1 	beq.w	8001df4 <HAL_RCC_OscConfig+0x45c>
 8001a12:	2a0c      	cmp	r2, #12
 8001a14:	f000 81e9 	beq.w	8001dea <HAL_RCC_OscConfig+0x452>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a18:	6863      	ldr	r3, [r4, #4]
 8001a1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a1e:	f000 8235 	beq.w	8001e8c <HAL_RCC_OscConfig+0x4f4>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001a22:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001a26:	682a      	ldr	r2, [r5, #0]
 8001a28:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a2c:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f040 8232 	bne.w	8001e98 <HAL_RCC_OscConfig+0x500>
        tickstart = HAL_GetTick();
 8001a34:	f7ff fe26 	bl	8001684 <HAL_GetTick>
 8001a38:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001a3a:	682b      	ldr	r3, [r5, #0]
 8001a3c:	0399      	lsls	r1, r3, #14
 8001a3e:	d506      	bpl.n	8001a4e <HAL_RCC_OscConfig+0xb6>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a40:	f7ff fe20 	bl	8001684 <HAL_GetTick>
 8001a44:	1b80      	subs	r0, r0, r6
 8001a46:	2864      	cmp	r0, #100	; 0x64
 8001a48:	d9f7      	bls.n	8001a3a <HAL_RCC_OscConfig+0xa2>
            return HAL_TIMEOUT;
 8001a4a:	2003      	movs	r0, #3
}
 8001a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a4e:	6823      	ldr	r3, [r4, #0]
 8001a50:	079a      	lsls	r2, r3, #30
 8001a52:	d52c      	bpl.n	8001aae <HAL_RCC_OscConfig+0x116>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001a54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a58:	688a      	ldr	r2, [r1, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001a5a:	68c9      	ldr	r1, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001a5c:	f002 020c 	and.w	r2, r2, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001a60:	2a04      	cmp	r2, #4
 8001a62:	f000 8120 	beq.w	8001ca6 <HAL_RCC_OscConfig+0x30e>
 8001a66:	2a0c      	cmp	r2, #12
 8001a68:	f000 8118 	beq.w	8001c9c <HAL_RCC_OscConfig+0x304>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a6c:	68e3      	ldr	r3, [r4, #12]
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001a6e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001a72:	b183      	cbz	r3, 8001a96 <HAL_RCC_OscConfig+0xfe>
 8001a74:	682b      	ldr	r3, [r5, #0]
 8001a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001a7c:	f7ff fe02 	bl	8001684 <HAL_GetTick>
 8001a80:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001a82:	682b      	ldr	r3, [r5, #0]
 8001a84:	055b      	lsls	r3, r3, #21
 8001a86:	f100 8235 	bmi.w	8001ef4 <HAL_RCC_OscConfig+0x55c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a8a:	f7ff fdfb 	bl	8001684 <HAL_GetTick>
 8001a8e:	1b80      	subs	r0, r0, r6
 8001a90:	2802      	cmp	r0, #2
 8001a92:	d9f6      	bls.n	8001a82 <HAL_RCC_OscConfig+0xea>
 8001a94:	e7d9      	b.n	8001a4a <HAL_RCC_OscConfig+0xb2>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001a96:	682b      	ldr	r3, [r5, #0]
 8001a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a9c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001a9e:	f7ff fdf1 	bl	8001684 <HAL_GetTick>
 8001aa2:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001aa4:	682b      	ldr	r3, [r5, #0]
 8001aa6:	055f      	lsls	r7, r3, #21
 8001aa8:	f100 822d 	bmi.w	8001f06 <HAL_RCC_OscConfig+0x56e>
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001aac:	6823      	ldr	r3, [r4, #0]
 8001aae:	f013 0f18 	tst.w	r3, #24
 8001ab2:	d023      	beq.n	8001afc <HAL_RCC_OscConfig+0x164>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ab4:	6962      	ldr	r2, [r4, #20]
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001ab6:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001aba:	2a00      	cmp	r2, #0
 8001abc:	f000 8100 	beq.w	8001cc0 <HAL_RCC_OscConfig+0x328>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001ac0:	f013 0f10 	tst.w	r3, #16
 8001ac4:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001ac8:	f000 8238 	beq.w	8001f3c <HAL_RCC_OscConfig+0x5a4>
 8001acc:	0798      	lsls	r0, r3, #30
 8001ace:	f100 81a5 	bmi.w	8001e1c <HAL_RCC_OscConfig+0x484>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001ad2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
          tickstart = HAL_GetTick();
 8001ade:	f7ff fdd1 	bl	8001684 <HAL_GetTick>
 8001ae2:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001ae4:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001ae8:	0799      	lsls	r1, r3, #30
 8001aea:	f100 8197 	bmi.w	8001e1c <HAL_RCC_OscConfig+0x484>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001aee:	f7ff fdc9 	bl	8001684 <HAL_GetTick>
 8001af2:	1b80      	subs	r0, r0, r6
 8001af4:	2802      	cmp	r0, #2
 8001af6:	d9f5      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x14c>
 8001af8:	e7a7      	b.n	8001a4a <HAL_RCC_OscConfig+0xb2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001afa:	6823      	ldr	r3, [r4, #0]
 8001afc:	075a      	lsls	r2, r3, #29
 8001afe:	d422      	bmi.n	8001b46 <HAL_RCC_OscConfig+0x1ae>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b00:	065a      	lsls	r2, r3, #25
 8001b02:	d51b      	bpl.n	8001b3c <HAL_RCC_OscConfig+0x1a4>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001b06:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 80b2 	beq.w	8001c74 <HAL_RCC_OscConfig+0x2dc>
 8001b10:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001b1c:	f7ff fdb2 	bl	8001684 <HAL_GetTick>
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001b20:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001b24:	079b      	lsls	r3, r3, #30
 8001b26:	4606      	mov	r6, r0
 8001b28:	d408      	bmi.n	8001b3c <HAL_RCC_OscConfig+0x1a4>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b2a:	f7ff fdab 	bl	8001684 <HAL_GetTick>
 8001b2e:	1b80      	subs	r0, r0, r6
 8001b30:	2802      	cmp	r0, #2
 8001b32:	d88a      	bhi.n	8001a4a <HAL_RCC_OscConfig+0xb2>
 8001b34:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001b38:	079b      	lsls	r3, r3, #30
 8001b3a:	d5f6      	bpl.n	8001b2a <HAL_RCC_OscConfig+0x192>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d176      	bne.n	8001c30 <HAL_RCC_OscConfig+0x298>
  return HAL_OK;
 8001b42:	2000      	movs	r0, #0
}
 8001b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b46:	4daf      	ldr	r5, [pc, #700]	; (8001e04 <HAL_RCC_OscConfig+0x46c>)
 8001b48:	682b      	ldr	r3, [r5, #0]
 8001b4a:	05db      	lsls	r3, r3, #23
 8001b4c:	f140 80dc 	bpl.w	8001d08 <HAL_RCC_OscConfig+0x370>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b50:	68a3      	ldr	r3, [r4, #8]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	f000 8130 	beq.w	8001db8 <HAL_RCC_OscConfig+0x420>
 8001b58:	2b05      	cmp	r3, #5
 8001b5a:	f000 821e 	beq.w	8001f9a <HAL_RCC_OscConfig+0x602>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b5e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001b62:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8001b66:	f022 0201 	bic.w	r2, r2, #1
 8001b6a:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b6e:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8001b72:	f022 0204 	bic.w	r2, r2, #4
 8001b76:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f040 8124 	bne.w	8001dc8 <HAL_RCC_OscConfig+0x430>
      tickstart = HAL_GetTick();
 8001b80:	f7ff fd80 	bl	8001684 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b84:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001b88:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001b8a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001b8e:	0799      	lsls	r1, r3, #30
 8001b90:	f140 8135 	bpl.w	8001dfe <HAL_RCC_OscConfig+0x466>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b94:	f7ff fd76 	bl	8001684 <HAL_GetTick>
 8001b98:	1b80      	subs	r0, r0, r6
 8001b9a:	42b8      	cmp	r0, r7
 8001b9c:	d9f5      	bls.n	8001b8a <HAL_RCC_OscConfig+0x1f2>
 8001b9e:	e754      	b.n	8001a4a <HAL_RCC_OscConfig+0xb2>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001ba0:	f002 0203 	and.w	r2, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001ba4:	2a01      	cmp	r2, #1
 8001ba6:	f47f af0a 	bne.w	80019be <HAL_RCC_OscConfig+0x26>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001baa:	69e3      	ldr	r3, [r4, #28]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d03d      	beq.n	8001c2c <HAL_RCC_OscConfig+0x294>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001bb0:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bb4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001bb6:	682b      	ldr	r3, [r5, #0]
 8001bb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bbc:	2bb0      	cmp	r3, #176	; 0xb0
 8001bbe:	bf28      	it	cs
 8001bc0:	23b0      	movcs	r3, #176	; 0xb0
 8001bc2:	4298      	cmp	r0, r3
 8001bc4:	f240 81a8 	bls.w	8001f18 <HAL_RCC_OscConfig+0x580>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bc8:	f7ff fe34 	bl	8001834 <RCC_SetFlashLatencyFromMSIRange>
 8001bcc:	bb70      	cbnz	r0, 8001c2c <HAL_RCC_OscConfig+0x294>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001bce:	682b      	ldr	r3, [r5, #0]
 8001bd0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001bd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	602b      	str	r3, [r5, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001bda:	686b      	ldr	r3, [r5, #4]
 8001bdc:	6a22      	ldr	r2, [r4, #32]
 8001bde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001be2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001be6:	606b      	str	r3, [r5, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001be8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bec:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001bee:	f013 030c 	ands.w	r3, r3, #12
 8001bf2:	f000 81c7 	beq.w	8001f84 <HAL_RCC_OscConfig+0x5ec>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	f000 821d 	beq.w	8002036 <HAL_RCC_OscConfig+0x69e>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	f000 8212 	beq.w	8002026 <HAL_RCC_OscConfig+0x68e>
 8001c02:	f7ff fe8d 	bl	8001920 <HAL_RCC_GetSysClockFreq.part.0>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001c0a:	497f      	ldr	r1, [pc, #508]	; (8001e08 <HAL_RCC_OscConfig+0x470>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001c0e:	4a7f      	ldr	r2, [pc, #508]	; (8001e0c <HAL_RCC_OscConfig+0x474>)
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001c10:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001c14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c18:	497d      	ldr	r1, [pc, #500]	; (8001e10 <HAL_RCC_OscConfig+0x478>)
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001c1a:	fbb0 f3f3 	udiv	r3, r0, r3
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c1e:	6808      	ldr	r0, [r1, #0]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001c20:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c22:	f7ff fce5 	bl	80015f0 <HAL_InitTick>
 8001c26:	2800      	cmp	r0, #0
 8001c28:	f43f aee7 	beq.w	80019fa <HAL_RCC_OscConfig+0x62>
          return HAL_ERROR;
 8001c2c:	2001      	movs	r0, #1
}
 8001c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001c30:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	68aa      	ldr	r2, [r5, #8]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8001c38:	68e9      	ldr	r1, [r5, #12]
 8001c3a:	f002 020c 	and.w	r2, r2, #12
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c3e:	d073      	beq.n	8001d28 <HAL_RCC_OscConfig+0x390>
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c40:	2a0c      	cmp	r2, #12
 8001c42:	d0f3      	beq.n	8001c2c <HAL_RCC_OscConfig+0x294>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001c44:	682b      	ldr	r3, [r5, #0]
 8001c46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c4a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001c4c:	f7ff fd1a 	bl	8001684 <HAL_GetTick>
 8001c50:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c52:	e005      	b.n	8001c60 <HAL_RCC_OscConfig+0x2c8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c54:	f7ff fd16 	bl	8001684 <HAL_GetTick>
 8001c58:	1b00      	subs	r0, r0, r4
 8001c5a:	2802      	cmp	r0, #2
 8001c5c:	f63f aef5 	bhi.w	8001a4a <HAL_RCC_OscConfig+0xb2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c60:	682b      	ldr	r3, [r5, #0]
 8001c62:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8001c66:	d1f5      	bne.n	8001c54 <HAL_RCC_OscConfig+0x2bc>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001c68:	68e9      	ldr	r1, [r5, #12]
 8001c6a:	4a6a      	ldr	r2, [pc, #424]	; (8001e14 <HAL_RCC_OscConfig+0x47c>)
 8001c6c:	400a      	ands	r2, r1
  return HAL_OK;
 8001c6e:	4618      	mov	r0, r3
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001c70:	60ea      	str	r2, [r5, #12]
}
 8001c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001c74:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001c78:	f023 0301 	bic.w	r3, r3, #1
 8001c7c:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001c80:	f7ff fd00 	bl	8001684 <HAL_GetTick>
 8001c84:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001c86:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001c8a:	079f      	lsls	r7, r3, #30
 8001c8c:	f57f af56 	bpl.w	8001b3c <HAL_RCC_OscConfig+0x1a4>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c90:	f7ff fcf8 	bl	8001684 <HAL_GetTick>
 8001c94:	1b80      	subs	r0, r0, r6
 8001c96:	2802      	cmp	r0, #2
 8001c98:	d9f5      	bls.n	8001c86 <HAL_RCC_OscConfig+0x2ee>
 8001c9a:	e6d6      	b.n	8001a4a <HAL_RCC_OscConfig+0xb2>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001c9c:	f001 0103 	and.w	r1, r1, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001ca0:	2902      	cmp	r1, #2
 8001ca2:	f47f aee3 	bne.w	8001a6c <HAL_RCC_OscConfig+0xd4>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001ca6:	68e2      	ldr	r2, [r4, #12]
 8001ca8:	2a00      	cmp	r2, #0
 8001caa:	d0bf      	beq.n	8001c2c <HAL_RCC_OscConfig+0x294>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001cac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cb0:	6920      	ldr	r0, [r4, #16]
 8001cb2:	684a      	ldr	r2, [r1, #4]
 8001cb4:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 8001cb8:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8001cbc:	604a      	str	r2, [r1, #4]
}
 8001cbe:	e6f6      	b.n	8001aae <HAL_RCC_OscConfig+0x116>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001cc0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001cc4:	f023 0304 	bic.w	r3, r3, #4
 8001cc8:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001ccc:	f7ff fcda 	bl	8001684 <HAL_GetTick>
 8001cd0:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001cd2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001cd6:	0718      	lsls	r0, r3, #28
 8001cd8:	f100 8105 	bmi.w	8001ee6 <HAL_RCC_OscConfig+0x54e>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001cdc:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001ce0:	f023 0301 	bic.w	r3, r3, #1
 8001ce4:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001ce8:	f7ff fccc 	bl	8001684 <HAL_GetTick>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001cec:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8001cf0:	4605      	mov	r5, r0
 8001cf2:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8001cf6:	0799      	lsls	r1, r3, #30
 8001cf8:	f57f aeff 	bpl.w	8001afa <HAL_RCC_OscConfig+0x162>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001cfc:	f7ff fcc2 	bl	8001684 <HAL_GetTick>
 8001d00:	1b40      	subs	r0, r0, r5
 8001d02:	2802      	cmp	r0, #2
 8001d04:	d9f5      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x35a>
 8001d06:	e6a0      	b.n	8001a4a <HAL_RCC_OscConfig+0xb2>
      HAL_PWR_EnableBkUpAccess();
 8001d08:	f7ff fd32 	bl	8001770 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8001d0c:	f7ff fcba 	bl	8001684 <HAL_GetTick>
 8001d10:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d12:	e005      	b.n	8001d20 <HAL_RCC_OscConfig+0x388>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d14:	f7ff fcb6 	bl	8001684 <HAL_GetTick>
 8001d18:	1b80      	subs	r0, r0, r6
 8001d1a:	2802      	cmp	r0, #2
 8001d1c:	f63f ae95 	bhi.w	8001a4a <HAL_RCC_OscConfig+0xb2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d20:	682b      	ldr	r3, [r5, #0]
 8001d22:	05df      	lsls	r7, r3, #23
 8001d24:	d5f6      	bpl.n	8001d14 <HAL_RCC_OscConfig+0x37c>
 8001d26:	e713      	b.n	8001b50 <HAL_RCC_OscConfig+0x1b8>
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d28:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001d2a:	f001 0303 	and.w	r3, r1, #3
 8001d2e:	4283      	cmp	r3, r0
 8001d30:	f000 8142 	beq.w	8001fb8 <HAL_RCC_OscConfig+0x620>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d34:	2a0c      	cmp	r2, #12
 8001d36:	f43f af79 	beq.w	8001c2c <HAL_RCC_OscConfig+0x294>
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d3a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001d3e:	682b      	ldr	r3, [r5, #0]
 8001d40:	015e      	lsls	r6, r3, #5
 8001d42:	f53f af73 	bmi.w	8001c2c <HAL_RCC_OscConfig+0x294>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001d46:	682b      	ldr	r3, [r5, #0]
 8001d48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d4c:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8001d4e:	f7ff fc99 	bl	8001684 <HAL_GetTick>
 8001d52:	4606      	mov	r6, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d54:	e005      	b.n	8001d62 <HAL_RCC_OscConfig+0x3ca>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d56:	f7ff fc95 	bl	8001684 <HAL_GetTick>
 8001d5a:	1b80      	subs	r0, r0, r6
 8001d5c:	2802      	cmp	r0, #2
 8001d5e:	f63f ae74 	bhi.w	8001a4a <HAL_RCC_OscConfig+0xb2>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d62:	682b      	ldr	r3, [r5, #0]
 8001d64:	0198      	lsls	r0, r3, #6
 8001d66:	d4f6      	bmi.n	8001d56 <HAL_RCC_OscConfig+0x3be>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d68:	e9d4 320c 	ldrd	r3, r2, [r4, #48]	; 0x30
 8001d6c:	68e9      	ldr	r1, [r5, #12]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	4a29      	ldr	r2, [pc, #164]	; (8001e18 <HAL_RCC_OscConfig+0x480>)
 8001d72:	400a      	ands	r2, r1
 8001d74:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001d76:	4313      	orrs	r3, r2
 8001d78:	430b      	orrs	r3, r1
 8001d7a:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	; 0x40
 8001d7e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001d80:	4303      	orrs	r3, r0
 8001d82:	430b      	orrs	r3, r1
 8001d84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001d88:	60eb      	str	r3, [r5, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001d8a:	682b      	ldr	r3, [r5, #0]
 8001d8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d90:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d92:	68eb      	ldr	r3, [r5, #12]
 8001d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d98:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 8001d9a:	f7ff fc73 	bl	8001684 <HAL_GetTick>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d9e:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
            tickstart = HAL_GetTick();
 8001da2:	4604      	mov	r4, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001da4:	6833      	ldr	r3, [r6, #0]
 8001da6:	0199      	lsls	r1, r3, #6
 8001da8:	f53f aecb 	bmi.w	8001b42 <HAL_RCC_OscConfig+0x1aa>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dac:	f7ff fc6a 	bl	8001684 <HAL_GetTick>
 8001db0:	1b00      	subs	r0, r0, r4
 8001db2:	2802      	cmp	r0, #2
 8001db4:	d9f6      	bls.n	8001da4 <HAL_RCC_OscConfig+0x40c>
 8001db6:	e648      	b.n	8001a4a <HAL_RCC_OscConfig+0xb2>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001db8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dbc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001dc8:	f7ff fc5c 	bl	8001684 <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001dcc:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8001dd0:	4605      	mov	r5, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd2:	f241 3788 	movw	r7, #5000	; 0x1388
 8001dd6:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001dda:	0798      	lsls	r0, r3, #30
 8001ddc:	d40f      	bmi.n	8001dfe <HAL_RCC_OscConfig+0x466>
 8001dde:	f7ff fc51 	bl	8001684 <HAL_GetTick>
 8001de2:	1b40      	subs	r0, r0, r5
 8001de4:	42b8      	cmp	r0, r7
 8001de6:	d9f6      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x43e>
 8001de8:	e62f      	b.n	8001a4a <HAL_RCC_OscConfig+0xb2>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001dea:	f001 0103 	and.w	r1, r1, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001dee:	2903      	cmp	r1, #3
 8001df0:	f47f ae12 	bne.w	8001a18 <HAL_RCC_OscConfig+0x80>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001df4:	6862      	ldr	r2, [r4, #4]
 8001df6:	2a00      	cmp	r2, #0
 8001df8:	f47f ae2a 	bne.w	8001a50 <HAL_RCC_OscConfig+0xb8>
 8001dfc:	e716      	b.n	8001c2c <HAL_RCC_OscConfig+0x294>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001dfe:	6823      	ldr	r3, [r4, #0]
 8001e00:	e67e      	b.n	8001b00 <HAL_RCC_OscConfig+0x168>
 8001e02:	bf00      	nop
 8001e04:	58000400 	.word	0x58000400
 8001e08:	08008afc 	.word	0x08008afc
 8001e0c:	20000004 	.word	0x20000004
 8001e10:	2000000c 	.word	0x2000000c
 8001e14:	eefefffc 	.word	0xeefefffc
 8001e18:	11c1808c 	.word	0x11c1808c
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001e1c:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001e20:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001e24:	f043 0304 	orr.w	r3, r3, #4
 8001e28:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8001e2c:	f7ff fc2a 	bl	8001684 <HAL_GetTick>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001e30:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001e34:	071a      	lsls	r2, r3, #28
 8001e36:	4606      	mov	r6, r0
 8001e38:	d409      	bmi.n	8001e4e <HAL_RCC_OscConfig+0x4b6>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001e3a:	f7ff fc23 	bl	8001684 <HAL_GetTick>
 8001e3e:	1b80      	subs	r0, r0, r6
 8001e40:	2803      	cmp	r0, #3
 8001e42:	f63f ae02 	bhi.w	8001a4a <HAL_RCC_OscConfig+0xb2>
 8001e46:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001e4a:	071a      	lsls	r2, r3, #28
 8001e4c:	d5f5      	bpl.n	8001e3a <HAL_RCC_OscConfig+0x4a2>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001e4e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001e52:	69a2      	ldr	r2, [r4, #24]
 8001e54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e5c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001e60:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001e64:	f023 0301 	bic.w	r3, r3, #1
 8001e68:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8001e6c:	f7ff fc0a 	bl	8001684 <HAL_GetTick>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001e70:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8001e74:	4605      	mov	r5, r0
 8001e76:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8001e7a:	079b      	lsls	r3, r3, #30
 8001e7c:	f57f ae3d 	bpl.w	8001afa <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001e80:	f7ff fc00 	bl	8001684 <HAL_GetTick>
 8001e84:	1b40      	subs	r0, r0, r5
 8001e86:	2802      	cmp	r0, #2
 8001e88:	d9f5      	bls.n	8001e76 <HAL_RCC_OscConfig+0x4de>
 8001e8a:	e5de      	b.n	8001a4a <HAL_RCC_OscConfig+0xb2>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001e8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e90:	6813      	ldr	r3, [r2, #0]
 8001e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e96:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001e98:	f7ff fbf4 	bl	8001684 <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001e9c:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8001ea0:	4605      	mov	r5, r0
 8001ea2:	6833      	ldr	r3, [r6, #0]
 8001ea4:	0398      	lsls	r0, r3, #14
 8001ea6:	f53f add2 	bmi.w	8001a4e <HAL_RCC_OscConfig+0xb6>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eaa:	f7ff fbeb 	bl	8001684 <HAL_GetTick>
 8001eae:	1b40      	subs	r0, r0, r5
 8001eb0:	2864      	cmp	r0, #100	; 0x64
 8001eb2:	d9f6      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x50a>
 8001eb4:	e5c9      	b.n	8001a4a <HAL_RCC_OscConfig+0xb2>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001eb6:	682b      	ldr	r3, [r5, #0]
 8001eb8:	f023 0301 	bic.w	r3, r3, #1
 8001ebc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001ebe:	f7ff fbe1 	bl	8001684 <HAL_GetTick>
 8001ec2:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001ec4:	682b      	ldr	r3, [r5, #0]
 8001ec6:	079f      	lsls	r7, r3, #30
 8001ec8:	f57f ad97 	bpl.w	80019fa <HAL_RCC_OscConfig+0x62>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ecc:	f7ff fbda 	bl	8001684 <HAL_GetTick>
 8001ed0:	1b80      	subs	r0, r0, r6
 8001ed2:	2802      	cmp	r0, #2
 8001ed4:	d9f6      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x52c>
 8001ed6:	e5b8      	b.n	8001a4a <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ed8:	f7ff fbd4 	bl	8001684 <HAL_GetTick>
 8001edc:	1b80      	subs	r0, r0, r6
 8001ede:	2802      	cmp	r0, #2
 8001ee0:	f67f ad7a 	bls.w	80019d8 <HAL_RCC_OscConfig+0x40>
 8001ee4:	e5b1      	b.n	8001a4a <HAL_RCC_OscConfig+0xb2>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001ee6:	f7ff fbcd 	bl	8001684 <HAL_GetTick>
 8001eea:	1b80      	subs	r0, r0, r6
 8001eec:	2803      	cmp	r0, #3
 8001eee:	f67f aef0 	bls.w	8001cd2 <HAL_RCC_OscConfig+0x33a>
 8001ef2:	e5aa      	b.n	8001a4a <HAL_RCC_OscConfig+0xb2>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001ef4:	686b      	ldr	r3, [r5, #4]
 8001ef6:	6922      	ldr	r2, [r4, #16]
 8001ef8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001efc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001f00:	606b      	str	r3, [r5, #4]
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001f02:	6823      	ldr	r3, [r4, #0]
}
 8001f04:	e5d3      	b.n	8001aae <HAL_RCC_OscConfig+0x116>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f06:	f7ff fbbd 	bl	8001684 <HAL_GetTick>
 8001f0a:	1b80      	subs	r0, r0, r6
 8001f0c:	2802      	cmp	r0, #2
 8001f0e:	f67f adc9 	bls.w	8001aa4 <HAL_RCC_OscConfig+0x10c>
 8001f12:	e59a      	b.n	8001a4a <HAL_RCC_OscConfig+0xb2>
    return HAL_ERROR;
 8001f14:	2001      	movs	r0, #1
}
 8001f16:	4770      	bx	lr
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001f18:	682b      	ldr	r3, [r5, #0]
 8001f1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f1e:	4303      	orrs	r3, r0
 8001f20:	602b      	str	r3, [r5, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001f22:	686b      	ldr	r3, [r5, #4]
 8001f24:	6a22      	ldr	r2, [r4, #32]
 8001f26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001f2e:	606b      	str	r3, [r5, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f30:	f7ff fc80 	bl	8001834 <RCC_SetFlashLatencyFromMSIRange>
 8001f34:	2800      	cmp	r0, #0
 8001f36:	f43f ae57 	beq.w	8001be8 <HAL_RCC_OscConfig+0x250>
 8001f3a:	e677      	b.n	8001c2c <HAL_RCC_OscConfig+0x294>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8001f44:	f7ff fb9e 	bl	8001684 <HAL_GetTick>
 8001f48:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001f4a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001f4e:	079f      	lsls	r7, r3, #30
 8001f50:	d405      	bmi.n	8001f5e <HAL_RCC_OscConfig+0x5c6>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001f52:	f7ff fb97 	bl	8001684 <HAL_GetTick>
 8001f56:	1b80      	subs	r0, r0, r6
 8001f58:	2802      	cmp	r0, #2
 8001f5a:	d9f6      	bls.n	8001f4a <HAL_RCC_OscConfig+0x5b2>
 8001f5c:	e575      	b.n	8001a4a <HAL_RCC_OscConfig+0xb2>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001f5e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001f62:	f023 0304 	bic.w	r3, r3, #4
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001f66:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001f6a:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001f6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f72:	071d      	lsls	r5, r3, #28
 8001f74:	f57f adc1 	bpl.w	8001afa <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001f78:	f7ff fb84 	bl	8001684 <HAL_GetTick>
 8001f7c:	1b80      	subs	r0, r0, r6
 8001f7e:	2803      	cmp	r0, #3
 8001f80:	d9f5      	bls.n	8001f6e <HAL_RCC_OscConfig+0x5d6>
 8001f82:	e562      	b.n	8001a4a <HAL_RCC_OscConfig+0xb2>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001f84:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001f86:	4a2d      	ldr	r2, [pc, #180]	; (800203c <HAL_RCC_OscConfig+0x6a4>)
 8001f88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f8c:	2bb0      	cmp	r3, #176	; 0xb0
 8001f8e:	bf28      	it	cs
 8001f90:	23b0      	movcs	r3, #176	; 0xb0
 8001f92:	091b      	lsrs	r3, r3, #4
 8001f94:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f98:	e635      	b.n	8001c06 <HAL_RCC_OscConfig+0x26e>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f9e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001fa2:	f042 0204 	orr.w	r2, r2, #4
 8001fa6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001faa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001fae:	f042 0201 	orr.w	r2, r2, #1
 8001fb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fb6:	e707      	b.n	8001dc8 <HAL_RCC_OscConfig+0x430>
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb8:	6b60      	ldr	r0, [r4, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fba:	f001 0370 	and.w	r3, r1, #112	; 0x70
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fbe:	4283      	cmp	r3, r0
 8001fc0:	f47f aeb8 	bne.w	8001d34 <HAL_RCC_OscConfig+0x39c>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fc4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001fc6:	f3c1 2306 	ubfx	r3, r1, #8, #7
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fca:	4283      	cmp	r3, r0
 8001fcc:	f47f aeb2 	bne.w	8001d34 <HAL_RCC_OscConfig+0x39c>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001fd0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fd2:	f401 1378 	and.w	r3, r1, #4063232	; 0x3e0000
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001fd6:	4283      	cmp	r3, r0
 8001fd8:	f47f aeac 	bne.w	8001d34 <HAL_RCC_OscConfig+0x39c>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fdc:	6c20      	ldr	r0, [r4, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001fde:	f001 6360 	and.w	r3, r1, #234881024	; 0xe000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fe2:	4283      	cmp	r3, r0
 8001fe4:	f47f aea6 	bne.w	8001d34 <HAL_RCC_OscConfig+0x39c>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001fe8:	6c63      	ldr	r3, [r4, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001fea:	f001 4160 	and.w	r1, r1, #3758096384	; 0xe0000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001fee:	4299      	cmp	r1, r3
 8001ff0:	f47f aea0 	bne.w	8001d34 <HAL_RCC_OscConfig+0x39c>
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ff4:	682b      	ldr	r3, [r5, #0]
 8001ff6:	019a      	lsls	r2, r3, #6
 8001ff8:	f53f ada3 	bmi.w	8001b42 <HAL_RCC_OscConfig+0x1aa>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001ffc:	682b      	ldr	r3, [r5, #0]
 8001ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002002:	602b      	str	r3, [r5, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002004:	68eb      	ldr	r3, [r5, #12]
 8002006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800200a:	60eb      	str	r3, [r5, #12]
          tickstart = HAL_GetTick();
 800200c:	f7ff fb3a 	bl	8001684 <HAL_GetTick>
 8002010:	4604      	mov	r4, r0
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002012:	682b      	ldr	r3, [r5, #0]
 8002014:	019b      	lsls	r3, r3, #6
 8002016:	f53f ad94 	bmi.w	8001b42 <HAL_RCC_OscConfig+0x1aa>
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201a:	f7ff fb33 	bl	8001684 <HAL_GetTick>
 800201e:	1b00      	subs	r0, r0, r4
 8002020:	2802      	cmp	r0, #2
 8002022:	d9f6      	bls.n	8002012 <HAL_RCC_OscConfig+0x67a>
 8002024:	e511      	b.n	8001a4a <HAL_RCC_OscConfig+0xb2>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002026:	6812      	ldr	r2, [r2, #0]
      sysclockfreq = HSE_VALUE;
 8002028:	4b05      	ldr	r3, [pc, #20]	; (8002040 <HAL_RCC_OscConfig+0x6a8>)
 800202a:	4806      	ldr	r0, [pc, #24]	; (8002044 <HAL_RCC_OscConfig+0x6ac>)
 800202c:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8002030:	bf18      	it	ne
 8002032:	4618      	movne	r0, r3
 8002034:	e5e7      	b.n	8001c06 <HAL_RCC_OscConfig+0x26e>
    sysclockfreq = HSI_VALUE;
 8002036:	4804      	ldr	r0, [pc, #16]	; (8002048 <HAL_RCC_OscConfig+0x6b0>)
 8002038:	e5e5      	b.n	8001c06 <HAL_RCC_OscConfig+0x26e>
 800203a:	bf00      	nop
 800203c:	08008b3c 	.word	0x08008b3c
 8002040:	003d0900 	.word	0x003d0900
 8002044:	007a1200 	.word	0x007a1200
 8002048:	00f42400 	.word	0x00f42400

0800204c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800204c:	2800      	cmp	r0, #0
 800204e:	f000 8130 	beq.w	80022b2 <HAL_RCC_ClockConfig+0x266>
{
 8002052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002056:	4e9d      	ldr	r6, [pc, #628]	; (80022cc <HAL_RCC_ClockConfig+0x280>)
 8002058:	6833      	ldr	r3, [r6, #0]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	428b      	cmp	r3, r1
 8002060:	460c      	mov	r4, r1
 8002062:	4605      	mov	r5, r0
 8002064:	f0c0 80d9 	bcc.w	800221a <HAL_RCC_ClockConfig+0x1ce>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002068:	682b      	ldr	r3, [r5, #0]
 800206a:	079a      	lsls	r2, r3, #30
 800206c:	d472      	bmi.n	8002154 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800206e:	0698      	lsls	r0, r3, #26
 8002070:	f100 8082 	bmi.w	8002178 <HAL_RCC_ClockConfig+0x12c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002074:	065a      	lsls	r2, r3, #25
 8002076:	f100 8094 	bmi.w	80021a2 <HAL_RCC_ClockConfig+0x156>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800207a:	0758      	lsls	r0, r3, #29
 800207c:	f100 80a7 	bmi.w	80021ce <HAL_RCC_ClockConfig+0x182>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002080:	071a      	lsls	r2, r3, #28
 8002082:	f100 80b6 	bmi.w	80021f2 <HAL_RCC_ClockConfig+0x1a6>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002086:	07df      	lsls	r7, r3, #31
 8002088:	d529      	bpl.n	80020de <HAL_RCC_ClockConfig+0x92>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800208a:	686b      	ldr	r3, [r5, #4]
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800208c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002090:	2b02      	cmp	r3, #2
 8002092:	6812      	ldr	r2, [r2, #0]
 8002094:	f000 8106 	beq.w	80022a4 <HAL_RCC_ClockConfig+0x258>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002098:	2b03      	cmp	r3, #3
 800209a:	f000 80fd 	beq.w	8002298 <HAL_RCC_ClockConfig+0x24c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f040 8104 	bne.w	80022ac <HAL_RCC_ClockConfig+0x260>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80020a4:	0791      	lsls	r1, r2, #30
 80020a6:	f140 80fa 	bpl.w	800229e <HAL_RCC_ClockConfig+0x252>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80020aa:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ae:	f241 3888 	movw	r8, #5000	; 0x1388
 80020b2:	68b2      	ldr	r2, [r6, #8]
 80020b4:	f022 0203 	bic.w	r2, r2, #3
 80020b8:	4313      	orrs	r3, r2
 80020ba:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80020bc:	f7ff fae2 	bl	8001684 <HAL_GetTick>
 80020c0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c2:	e005      	b.n	80020d0 <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c4:	f7ff fade 	bl	8001684 <HAL_GetTick>
 80020c8:	1bc0      	subs	r0, r0, r7
 80020ca:	4540      	cmp	r0, r8
 80020cc:	f200 80b8 	bhi.w	8002240 <HAL_RCC_ClockConfig+0x1f4>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80020d0:	68b3      	ldr	r3, [r6, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d2:	686a      	ldr	r2, [r5, #4]
 80020d4:	f003 030c 	and.w	r3, r3, #12
 80020d8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80020dc:	d1f2      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x78>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020de:	4d7b      	ldr	r5, [pc, #492]	; (80022cc <HAL_RCC_ClockConfig+0x280>)
 80020e0:	682b      	ldr	r3, [r5, #0]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	42a3      	cmp	r3, r4
 80020e8:	d913      	bls.n	8002112 <HAL_RCC_ClockConfig+0xc6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ea:	682b      	ldr	r3, [r5, #0]
 80020ec:	f023 0307 	bic.w	r3, r3, #7
 80020f0:	4323      	orrs	r3, r4
 80020f2:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80020f4:	f7ff fac6 	bl	8001684 <HAL_GetTick>
 80020f8:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fa:	e005      	b.n	8002108 <HAL_RCC_ClockConfig+0xbc>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80020fc:	f7ff fac2 	bl	8001684 <HAL_GetTick>
 8002100:	1b80      	subs	r0, r0, r6
 8002102:	2802      	cmp	r0, #2
 8002104:	f200 809c 	bhi.w	8002240 <HAL_RCC_ClockConfig+0x1f4>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002108:	682b      	ldr	r3, [r5, #0]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	42a3      	cmp	r3, r4
 8002110:	d1f4      	bne.n	80020fc <HAL_RCC_ClockConfig+0xb0>
 8002112:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002116:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002118:	f013 030c 	ands.w	r3, r3, #12
 800211c:	f000 80b1 	beq.w	8002282 <HAL_RCC_ClockConfig+0x236>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002120:	2b04      	cmp	r3, #4
 8002122:	f000 80d0 	beq.w	80022c6 <HAL_RCC_ClockConfig+0x27a>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002126:	2b08      	cmp	r3, #8
 8002128:	f000 80c5 	beq.w	80022b6 <HAL_RCC_ClockConfig+0x26a>
 800212c:	f7ff fbf8 	bl	8001920 <HAL_RCC_GetSysClockFreq.part.0>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002134:	4a66      	ldr	r2, [pc, #408]	; (80022d0 <HAL_RCC_ClockConfig+0x284>)
 8002136:	689b      	ldr	r3, [r3, #8]
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002138:	4966      	ldr	r1, [pc, #408]	; (80022d4 <HAL_RCC_ClockConfig+0x288>)
 800213a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800213e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002142:	fbb0 f0f3 	udiv	r0, r0, r3
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002146:	6010      	str	r0, [r2, #0]
  return HAL_InitTick(HAL_GetTickPrio());
 8002148:	f7ff faa2 	bl	8001690 <HAL_GetTickPrio>
}
 800214c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(HAL_GetTickPrio());
 8002150:	f7ff ba4e 	b.w	80015f0 <HAL_InitTick>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002154:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002158:	68aa      	ldr	r2, [r5, #8]
 800215a:	68b3      	ldr	r3, [r6, #8]
 800215c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002160:	4313      	orrs	r3, r2
 8002162:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002164:	f7ff fa8e 	bl	8001684 <HAL_GetTick>
 8002168:	4607      	mov	r7, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800216a:	68b3      	ldr	r3, [r6, #8]
 800216c:	03db      	lsls	r3, r3, #15
 800216e:	d56a      	bpl.n	8002246 <HAL_RCC_ClockConfig+0x1fa>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002170:	682b      	ldr	r3, [r5, #0]
 8002172:	0698      	lsls	r0, r3, #26
 8002174:	f57f af7e 	bpl.w	8002074 <HAL_RCC_ClockConfig+0x28>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002178:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800217c:	696a      	ldr	r2, [r5, #20]
 800217e:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8002182:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002186:	4313      	orrs	r3, r2
 8002188:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 800218c:	f7ff fa7a 	bl	8001684 <HAL_GetTick>
 8002190:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002192:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8002196:	0399      	lsls	r1, r3, #14
 8002198:	d55b      	bpl.n	8002252 <HAL_RCC_ClockConfig+0x206>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800219a:	682b      	ldr	r3, [r5, #0]
 800219c:	065a      	lsls	r2, r3, #25
 800219e:	f57f af6c 	bpl.w	800207a <HAL_RCC_ClockConfig+0x2e>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80021a2:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80021a6:	69aa      	ldr	r2, [r5, #24]
 80021a8:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 80021ac:	f023 030f 	bic.w	r3, r3, #15
 80021b0:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 80021b4:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 80021b8:	f7ff fa64 	bl	8001684 <HAL_GetTick>
 80021bc:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80021be:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 80021c2:	03db      	lsls	r3, r3, #15
 80021c4:	d54b      	bpl.n	800225e <HAL_RCC_ClockConfig+0x212>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c6:	682b      	ldr	r3, [r5, #0]
 80021c8:	0758      	lsls	r0, r3, #29
 80021ca:	f57f af59 	bpl.w	8002080 <HAL_RCC_ClockConfig+0x34>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80021ce:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80021d2:	68ea      	ldr	r2, [r5, #12]
 80021d4:	68b3      	ldr	r3, [r6, #8]
 80021d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021da:	4313      	orrs	r3, r2
 80021dc:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80021de:	f7ff fa51 	bl	8001684 <HAL_GetTick>
 80021e2:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80021e4:	68b3      	ldr	r3, [r6, #8]
 80021e6:	0399      	lsls	r1, r3, #14
 80021e8:	d53f      	bpl.n	800226a <HAL_RCC_ClockConfig+0x21e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ea:	682b      	ldr	r3, [r5, #0]
 80021ec:	071a      	lsls	r2, r3, #28
 80021ee:	f57f af4a 	bpl.w	8002086 <HAL_RCC_ClockConfig+0x3a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80021f2:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80021f6:	692a      	ldr	r2, [r5, #16]
 80021f8:	68b3      	ldr	r3, [r6, #8]
 80021fa:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80021fe:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002202:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002204:	f7ff fa3e 	bl	8001684 <HAL_GetTick>
 8002208:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800220a:	68b3      	ldr	r3, [r6, #8]
 800220c:	035b      	lsls	r3, r3, #13
 800220e:	d532      	bpl.n	8002276 <HAL_RCC_ClockConfig+0x22a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002210:	682b      	ldr	r3, [r5, #0]
 8002212:	07df      	lsls	r7, r3, #31
 8002214:	f53f af39 	bmi.w	800208a <HAL_RCC_ClockConfig+0x3e>
 8002218:	e761      	b.n	80020de <HAL_RCC_ClockConfig+0x92>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	6833      	ldr	r3, [r6, #0]
 800221c:	f023 0307 	bic.w	r3, r3, #7
 8002220:	430b      	orrs	r3, r1
 8002222:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002224:	f7ff fa2e 	bl	8001684 <HAL_GetTick>
 8002228:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	6833      	ldr	r3, [r6, #0]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	42a3      	cmp	r3, r4
 8002232:	f43f af19 	beq.w	8002068 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002236:	f7ff fa25 	bl	8001684 <HAL_GetTick>
 800223a:	1bc3      	subs	r3, r0, r7
 800223c:	2b02      	cmp	r3, #2
 800223e:	d9f4      	bls.n	800222a <HAL_RCC_ClockConfig+0x1de>
        return HAL_TIMEOUT;
 8002240:	2003      	movs	r0, #3
}
 8002242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002246:	f7ff fa1d 	bl	8001684 <HAL_GetTick>
 800224a:	1bc0      	subs	r0, r0, r7
 800224c:	2802      	cmp	r0, #2
 800224e:	d98c      	bls.n	800216a <HAL_RCC_ClockConfig+0x11e>
 8002250:	e7f6      	b.n	8002240 <HAL_RCC_ClockConfig+0x1f4>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002252:	f7ff fa17 	bl	8001684 <HAL_GetTick>
 8002256:	1bc0      	subs	r0, r0, r7
 8002258:	2802      	cmp	r0, #2
 800225a:	d99a      	bls.n	8002192 <HAL_RCC_ClockConfig+0x146>
 800225c:	e7f0      	b.n	8002240 <HAL_RCC_ClockConfig+0x1f4>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800225e:	f7ff fa11 	bl	8001684 <HAL_GetTick>
 8002262:	1bc0      	subs	r0, r0, r7
 8002264:	2802      	cmp	r0, #2
 8002266:	d9aa      	bls.n	80021be <HAL_RCC_ClockConfig+0x172>
 8002268:	e7ea      	b.n	8002240 <HAL_RCC_ClockConfig+0x1f4>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800226a:	f7ff fa0b 	bl	8001684 <HAL_GetTick>
 800226e:	1bc0      	subs	r0, r0, r7
 8002270:	2802      	cmp	r0, #2
 8002272:	d9b7      	bls.n	80021e4 <HAL_RCC_ClockConfig+0x198>
 8002274:	e7e4      	b.n	8002240 <HAL_RCC_ClockConfig+0x1f4>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002276:	f7ff fa05 	bl	8001684 <HAL_GetTick>
 800227a:	1bc0      	subs	r0, r0, r7
 800227c:	2802      	cmp	r0, #2
 800227e:	d9c4      	bls.n	800220a <HAL_RCC_ClockConfig+0x1be>
 8002280:	e7de      	b.n	8002240 <HAL_RCC_ClockConfig+0x1f4>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002282:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002284:	4a14      	ldr	r2, [pc, #80]	; (80022d8 <HAL_RCC_ClockConfig+0x28c>)
 8002286:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800228a:	2bb0      	cmp	r3, #176	; 0xb0
 800228c:	bf28      	it	cs
 800228e:	23b0      	movcs	r3, #176	; 0xb0
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002296:	e74b      	b.n	8002130 <HAL_RCC_ClockConfig+0xe4>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002298:	0190      	lsls	r0, r2, #6
 800229a:	f53f af06 	bmi.w	80020aa <HAL_RCC_ClockConfig+0x5e>
    return HAL_ERROR;
 800229e:	2001      	movs	r0, #1
}
 80022a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80022a4:	0396      	lsls	r6, r2, #14
 80022a6:	f53f af00 	bmi.w	80020aa <HAL_RCC_ClockConfig+0x5e>
 80022aa:	e7f8      	b.n	800229e <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80022ac:	0552      	lsls	r2, r2, #21
 80022ae:	d5f6      	bpl.n	800229e <HAL_RCC_ClockConfig+0x252>
 80022b0:	e6fb      	b.n	80020aa <HAL_RCC_ClockConfig+0x5e>
    return HAL_ERROR;
 80022b2:	2001      	movs	r0, #1
}
 80022b4:	4770      	bx	lr
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80022b6:	6812      	ldr	r2, [r2, #0]
      sysclockfreq = HSE_VALUE;
 80022b8:	4b08      	ldr	r3, [pc, #32]	; (80022dc <HAL_RCC_ClockConfig+0x290>)
 80022ba:	4809      	ldr	r0, [pc, #36]	; (80022e0 <HAL_RCC_ClockConfig+0x294>)
 80022bc:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 80022c0:	bf08      	it	eq
 80022c2:	4618      	moveq	r0, r3
 80022c4:	e734      	b.n	8002130 <HAL_RCC_ClockConfig+0xe4>
    sysclockfreq = HSI_VALUE;
 80022c6:	4807      	ldr	r0, [pc, #28]	; (80022e4 <HAL_RCC_ClockConfig+0x298>)
 80022c8:	e732      	b.n	8002130 <HAL_RCC_ClockConfig+0xe4>
 80022ca:	bf00      	nop
 80022cc:	58004000 	.word	0x58004000
 80022d0:	20000004 	.word	0x20000004
 80022d4:	08008afc 	.word	0x08008afc
 80022d8:	08008b3c 	.word	0x08008b3c
 80022dc:	007a1200 	.word	0x007a1200
 80022e0:	003d0900 	.word	0x003d0900
 80022e4:	00f42400 	.word	0x00f42400

080022e8 <HAL_RCC_GetHCLKFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80022e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
{
 80022ec:	b508      	push	{r3, lr}
 80022ee:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80022f0:	f013 030c 	ands.w	r3, r3, #12
 80022f4:	d114      	bne.n	8002320 <HAL_RCC_GetHCLKFreq+0x38>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80022f6:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80022f8:	4a12      	ldr	r2, [pc, #72]	; (8002344 <HAL_RCC_GetHCLKFreq+0x5c>)
 80022fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022fe:	2bb0      	cmp	r3, #176	; 0xb0
 8002300:	bf28      	it	cs
 8002302:	23b0      	movcs	r3, #176	; 0xb0
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800230a:	4a0f      	ldr	r2, [pc, #60]	; (8002348 <HAL_RCC_GetHCLKFreq+0x60>)
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800230c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800231a:	fbb0 f0f3 	udiv	r0, r0, r3
 800231e:	bd08      	pop	{r3, pc}
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002320:	2b04      	cmp	r3, #4
 8002322:	d004      	beq.n	800232e <HAL_RCC_GetHCLKFreq+0x46>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002324:	2b08      	cmp	r3, #8
 8002326:	d004      	beq.n	8002332 <HAL_RCC_GetHCLKFreq+0x4a>
 8002328:	f7ff fafa 	bl	8001920 <HAL_RCC_GetSysClockFreq.part.0>
 800232c:	e7ed      	b.n	800230a <HAL_RCC_GetHCLKFreq+0x22>
    sysclockfreq = HSI_VALUE;
 800232e:	4807      	ldr	r0, [pc, #28]	; (800234c <HAL_RCC_GetHCLKFreq+0x64>)
 8002330:	e7eb      	b.n	800230a <HAL_RCC_GetHCLKFreq+0x22>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002332:	6812      	ldr	r2, [r2, #0]
      sysclockfreq = HSE_VALUE;
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_RCC_GetHCLKFreq+0x68>)
 8002336:	4807      	ldr	r0, [pc, #28]	; (8002354 <HAL_RCC_GetHCLKFreq+0x6c>)
 8002338:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800233c:	bf08      	it	eq
 800233e:	4618      	moveq	r0, r3
 8002340:	e7e3      	b.n	800230a <HAL_RCC_GetHCLKFreq+0x22>
 8002342:	bf00      	nop
 8002344:	08008b3c 	.word	0x08008b3c
 8002348:	08008afc 	.word	0x08008afc
 800234c:	00f42400 	.word	0x00f42400
 8002350:	007a1200 	.word	0x007a1200
 8002354:	003d0900 	.word	0x003d0900

08002358 <HAL_RCCEx_PeriphCLKConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002358:	6803      	ldr	r3, [r0, #0]
{
 800235a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800235e:	f013 0540 	ands.w	r5, r3, #64	; 0x40
{
 8002362:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002364:	d040      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002366:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002368:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800236c:	f000 8134 	beq.w	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8002370:	f200 8119 	bhi.w	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8002374:	2a00      	cmp	r2, #0
 8002376:	f040 811c 	bne.w	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800237a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800237e:	682b      	ldr	r3, [r5, #0]
 8002380:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002384:	602b      	str	r3, [r5, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002386:	f7ff f97d 	bl	8001684 <HAL_GetTick>
 800238a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800238c:	682b      	ldr	r3, [r5, #0]
 800238e:	011f      	lsls	r7, r3, #4
 8002390:	f100 8131 	bmi.w	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002394:	692b      	ldr	r3, [r5, #16]
 8002396:	6862      	ldr	r2, [r4, #4]
 8002398:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800239c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80023a0:	612b      	str	r3, [r5, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80023a2:	692b      	ldr	r3, [r5, #16]
 80023a4:	68a2      	ldr	r2, [r4, #8]
 80023a6:	f423 1378 	bic.w	r3, r3, #4063232	; 0x3e0000
 80023aa:	4313      	orrs	r3, r2
 80023ac:	612b      	str	r3, [r5, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80023ae:	682b      	ldr	r3, [r5, #0]
 80023b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023b4:	602b      	str	r3, [r5, #0]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023b6:	f7ff f965 	bl	8001684 <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80023ba:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80023be:	4605      	mov	r5, r0
 80023c0:	6833      	ldr	r3, [r6, #0]
 80023c2:	0118      	lsls	r0, r3, #4
 80023c4:	f140 81b0 	bpl.w	8002728 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80023c8:	6962      	ldr	r2, [r4, #20]
 80023ca:	6933      	ldr	r3, [r6, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	6133      	str	r3, [r6, #16]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023d0:	6b22      	ldr	r2, [r4, #48]	; 0x30
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023d2:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80023d4:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
}
 80023d8:	2500      	movs	r5, #0
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80023da:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 80023de:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 80023e2:	430a      	orrs	r2, r1
 80023e4:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 80023e8:	0519      	lsls	r1, r3, #20
 80023ea:	d509      	bpl.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80023ec:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80023f0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80023f2:	f8d7 6090 	ldr.w	r6, [r7, #144]	; 0x90
 80023f6:	f406 7640 	and.w	r6, r6, #768	; 0x300
 80023fa:	42b2      	cmp	r2, r6
 80023fc:	f040 80b4 	bne.w	8002568 <HAL_RCCEx_PeriphCLKConfig+0x210>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002400:	07d8      	lsls	r0, r3, #31
 8002402:	d509      	bpl.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002404:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002408:	69a0      	ldr	r0, [r4, #24]
 800240a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800240e:	f022 0203 	bic.w	r2, r2, #3
 8002412:	4302      	orrs	r2, r0
 8002414:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002418:	0799      	lsls	r1, r3, #30
 800241a:	d509      	bpl.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800241c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002420:	69e0      	ldr	r0, [r4, #28]
 8002422:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002426:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800242a:	4302      	orrs	r2, r0
 800242c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002430:	06da      	lsls	r2, r3, #27
 8002432:	d50c      	bpl.n	800244e <HAL_RCCEx_PeriphCLKConfig+0xf6>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002434:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002436:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800243a:	0c31      	lsrs	r1, r6, #16
 800243c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002440:	0409      	lsls	r1, r1, #16
 8002442:	ea22 0201 	bic.w	r2, r2, r1
 8002446:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800244a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800244e:	069f      	lsls	r7, r3, #26
 8002450:	d50c      	bpl.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x114>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002452:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002454:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8002458:	0c31      	lsrs	r1, r6, #16
 800245a:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800245e:	0409      	lsls	r1, r1, #16
 8002460:	ea22 0201 	bic.w	r2, r2, r1
 8002464:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8002468:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800246c:	075e      	lsls	r6, r3, #29
 800246e:	d50f      	bpl.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x138>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002470:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002472:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002476:	0911      	lsrs	r1, r2, #4
 8002478:	f401 207f 	and.w	r0, r1, #1044480	; 0xff000
 800247c:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
 8002480:	0112      	lsls	r2, r2, #4
 8002482:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 8002486:	ea21 0100 	bic.w	r1, r1, r0
 800248a:	430a      	orrs	r2, r1
 800248c:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002490:	0718      	lsls	r0, r3, #28
 8002492:	d50f      	bpl.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002494:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002496:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800249a:	0911      	lsrs	r1, r2, #4
 800249c:	f401 207f 	and.w	r0, r1, #1044480	; 0xff000
 80024a0:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
 80024a4:	0112      	lsls	r2, r2, #4
 80024a6:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 80024aa:	ea21 0100 	bic.w	r1, r1, r0
 80024ae:	430a      	orrs	r2, r1
 80024b0:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024b4:	05d9      	lsls	r1, r3, #23
 80024b6:	d510      	bpl.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x182>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80024b8:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80024be:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 80024c2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80024c6:	430a      	orrs	r2, r1
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024c8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 80024cc:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
 80024d0:	d07d      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x276>
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024d2:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80024d6:	f000 80d2 	beq.w	800267e <HAL_RCCEx_PeriphCLKConfig+0x326>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024da:	059f      	lsls	r7, r3, #22
 80024dc:	d513      	bpl.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80024e0:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80024e4:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80024e8:	d003      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
 80024ea:	f031 4280 	bics.w	r2, r1, #1073741824	; 0x40000000
 80024ee:	f040 808b 	bne.w	8002608 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80024f2:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80024f6:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80024fa:	430a      	orrs	r2, r1
 80024fc:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002500:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
 8002504:	d057      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002506:	055e      	lsls	r6, r3, #21
 8002508:	d50f      	bpl.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800250a:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800250e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002510:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 8002514:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002518:	430a      	orrs	r2, r1
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800251a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800251e:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
 8002522:	d04f      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002524:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8002528:	d07e      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800252a:	04da      	lsls	r2, r3, #19
 800252c:	d509      	bpl.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800252e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002532:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002534:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8002538:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800253c:	4302      	orrs	r2, r0
 800253e:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002542:	049b      	lsls	r3, r3, #18
 8002544:	d50d      	bpl.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002546:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800254a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800254c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800254e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002552:	430b      	orrs	r3, r1
 8002554:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002556:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002558:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800255a:	f023 0303 	bic.w	r3, r3, #3
 800255e:	430b      	orrs	r3, r1
 8002560:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002562:	4628      	mov	r0, r5
 8002564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      HAL_PWR_EnableBkUpAccess();
 8002568:	f7ff f902 	bl	8001770 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800256c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002570:	2e00      	cmp	r6, #0
 8002572:	d038      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002574:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002578:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800257c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002580:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002584:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002588:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800258c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800258e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002592:	4313      	orrs	r3, r2
        LL_RCC_WriteReg(BDCR, bdcr);
 8002594:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002598:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800259c:	07da      	lsls	r2, r3, #31
 800259e:	f100 80b1 	bmi.w	8002704 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025a2:	6823      	ldr	r3, [r4, #0]
 80025a4:	e72c      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    switch (PeriphClkInit->Sai1ClockSelection)
 80025a6:	f422 0180 	bic.w	r1, r2, #4194304	; 0x400000
 80025aa:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80025ae:	f43f af11 	beq.w	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80025b2:	2501      	movs	r5, #1
 80025b4:	e718      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80025b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025ba:	68ca      	ldr	r2, [r1, #12]
 80025bc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80025c0:	60ca      	str	r2, [r1, #12]
 80025c2:	e7a0      	b.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80025c4:	68f2      	ldr	r2, [r6, #12]
 80025c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80025ca:	60f2      	str	r2, [r6, #12]
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025cc:	e7ad      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80025ce:	68f2      	ldr	r2, [r6, #12]
 80025d0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80025d4:	60f2      	str	r2, [r6, #12]
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025d6:	e780      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x182>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80025d8:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80025dc:	68c1      	ldr	r1, [r0, #12]
 80025de:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80025e2:	60c1      	str	r1, [r0, #12]
    if (ret == HAL_OK)
 80025e4:	e6f6      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80025e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80025e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025f2:	6823      	ldr	r3, [r4, #0]
}
 80025f4:	e704      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025f6:	f7ff f845 	bl	8001684 <HAL_GetTick>
 80025fa:	1b80      	subs	r0, r0, r6
 80025fc:	2802      	cmp	r0, #2
 80025fe:	f67f aec5 	bls.w	800238c <HAL_RCCEx_PeriphCLKConfig+0x34>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002602:	6823      	ldr	r3, [r4, #0]
 8002604:	2503      	movs	r5, #3
 8002606:	e6ef      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002608:	f8d0 6088 	ldr.w	r6, [r0, #136]	; 0x88
 800260c:	f026 4640 	bic.w	r6, r6, #3221225472	; 0xc0000000
 8002610:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002614:	f8d0 6088 	ldr.w	r6, [r0, #136]	; 0x88
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002618:	f021 5280 	bic.w	r2, r1, #268435456	; 0x10000000
 800261c:	f026 6640 	bic.w	r6, r6, #201326592	; 0xc000000
 8002620:	4332      	orrs	r2, r6
 8002622:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
}
 8002626:	e76b      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002628:	6833      	ldr	r3, [r6, #0]
 800262a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800262e:	6033      	str	r3, [r6, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002630:	f7ff f828 	bl	8001684 <HAL_GetTick>
 8002634:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002636:	6833      	ldr	r3, [r6, #0]
 8002638:	0118      	lsls	r0, r3, #4
 800263a:	d451      	bmi.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x388>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800263c:	6933      	ldr	r3, [r6, #16]
 800263e:	6862      	ldr	r2, [r4, #4]
 8002640:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002644:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002648:	6133      	str	r3, [r6, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800264a:	6933      	ldr	r3, [r6, #16]
 800264c:	6922      	ldr	r2, [r4, #16]
 800264e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8002652:	4313      	orrs	r3, r2
 8002654:	6133      	str	r3, [r6, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002656:	6833      	ldr	r3, [r6, #0]
 8002658:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800265c:	6033      	str	r3, [r6, #0]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800265e:	f7ff f811 	bl	8001684 <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002662:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8002666:	4606      	mov	r6, r0
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	0119      	lsls	r1, r3, #4
 800266c:	d444      	bmi.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x3a0>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800266e:	f7ff f809 	bl	8001684 <HAL_GetTick>
 8002672:	1b80      	subs	r0, r0, r6
 8002674:	2802      	cmp	r0, #2
 8002676:	d9f7      	bls.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x310>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002678:	6823      	ldr	r3, [r4, #0]
 800267a:	2503      	movs	r5, #3
 800267c:	e755      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800267e:	6833      	ldr	r3, [r6, #0]
 8002680:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002684:	6033      	str	r3, [r6, #0]
  tickstart = HAL_GetTick();
 8002686:	f7fe fffd 	bl	8001684 <HAL_GetTick>
 800268a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800268c:	6833      	ldr	r3, [r6, #0]
 800268e:	011a      	lsls	r2, r3, #4
 8002690:	d420      	bmi.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002692:	6933      	ldr	r3, [r6, #16]
 8002694:	6862      	ldr	r2, [r4, #4]
 8002696:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800269a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800269e:	6133      	str	r3, [r6, #16]
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80026a0:	6933      	ldr	r3, [r6, #16]
 80026a2:	68e2      	ldr	r2, [r4, #12]
 80026a4:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80026a8:	4313      	orrs	r3, r2
 80026aa:	6133      	str	r3, [r6, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80026ac:	6833      	ldr	r3, [r6, #0]
 80026ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026b2:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80026b4:	f7fe ffe6 	bl	8001684 <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80026b8:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80026bc:	4606      	mov	r6, r0
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	d413      	bmi.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x394>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026c4:	f7fe ffde 	bl	8001684 <HAL_GetTick>
 80026c8:	1b80      	subs	r0, r0, r6
 80026ca:	2802      	cmp	r0, #2
 80026cc:	d9f7      	bls.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x366>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026ce:	6823      	ldr	r3, [r4, #0]
 80026d0:	2503      	movs	r5, #3
 80026d2:	e702      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x182>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026d4:	f7fe ffd6 	bl	8001684 <HAL_GetTick>
 80026d8:	1bc0      	subs	r0, r0, r7
 80026da:	2802      	cmp	r0, #2
 80026dc:	d9d6      	bls.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x334>
 80026de:	e7f6      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x376>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026e0:	f7fe ffd0 	bl	8001684 <HAL_GetTick>
 80026e4:	1bc0      	subs	r0, r0, r7
 80026e6:	2802      	cmp	r0, #2
 80026e8:	d9a5      	bls.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80026ea:	e7c5      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x320>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	6962      	ldr	r2, [r4, #20]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026f4:	6823      	ldr	r3, [r4, #0]
 80026f6:	e6f0      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x182>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	6962      	ldr	r2, [r4, #20]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002700:	6823      	ldr	r3, [r4, #0]
 8002702:	e712      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
          tickstart = HAL_GetTick();
 8002704:	f7fe ffbe 	bl	8001684 <HAL_GetTick>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002708:	f241 3888 	movw	r8, #5000	; 0x1388
          tickstart = HAL_GetTick();
 800270c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800270e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002712:	079b      	lsls	r3, r3, #30
 8002714:	f53f af45 	bmi.w	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002718:	f7fe ffb4 	bl	8001684 <HAL_GetTick>
 800271c:	1b80      	subs	r0, r0, r6
 800271e:	4540      	cmp	r0, r8
 8002720:	d9f5      	bls.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002722:	6823      	ldr	r3, [r4, #0]
              ret = HAL_TIMEOUT;
 8002724:	2503      	movs	r5, #3
 8002726:	e66b      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002728:	f7fe ffac 	bl	8001684 <HAL_GetTick>
 800272c:	1b40      	subs	r0, r0, r5
 800272e:	2802      	cmp	r0, #2
 8002730:	f67f ae46 	bls.w	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8002734:	e765      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8002736:	bf00      	nop

08002738 <arm_biquad_cascade_df1_f32>:
void arm_biquad_cascade_df1_f32(
  const arm_biquad_casd_df1_inst_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 8002738:	b530      	push	{r4, r5, lr}
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
        float32_t acc;                                 /* Accumulator */
        float32_t b0, b1, b2, a1, a2;                  /* Filter coefficients */
        float32_t Xn1, Xn2, Yn1, Yn2;                  /* Filter pState variables */
        float32_t Xn;                                  /* Temporary input */
        uint32_t sample, stage = S->numStages;         /* Loop counters */
 800273a:	6805      	ldr	r5, [r0, #0]
 800273c:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8002740:	3414      	adds	r4, #20
 8002742:	f100 0e10 	add.w	lr, r0, #16

  do
  {
    /* Reading the coefficients */
    b0 = *pCoeffs++;
 8002746:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
    b1 = *pCoeffs++;
 800274a:	ed14 4a04 	vldr	s8, [r4, #-16]
    b2 = *pCoeffs++;
 800274e:	ed54 3a03 	vldr	s7, [r4, #-12]
    a1 = *pCoeffs++;
 8002752:	ed14 3a02 	vldr	s6, [r4, #-8]
    a2 = *pCoeffs++;
 8002756:	ed54 2a01 	vldr	s5, [r4, #-4]

    /* Reading the pState values */
    Xn1 = pState[0];
 800275a:	ed5e 6a04 	vldr	s13, [lr, #-16]
    Xn2 = pState[1];
 800275e:	ed5e 5a03 	vldr	s11, [lr, #-12]
    Yn1 = pState[2];
 8002762:	ed1e 7a02 	vldr	s14, [lr, #-8]
    Yn2 = pState[3];
 8002766:	ed1e 5a01 	vldr	s10, [lr, #-4]
    /* Initialize blkCnt with number of samples */
    sample = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (sample > 0U)
 800276a:	b353      	cbz	r3, 80027c2 <arm_biquad_cascade_df1_f32+0x8a>
 800276c:	4618      	mov	r0, r3
 800276e:	4694      	mov	ip, r2
 8002770:	e003      	b.n	800277a <arm_biquad_cascade_df1_f32+0x42>
    {
      /* Read the input */
      Xn = *pIn++;

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      acc = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 8002772:	eeb0 7a67 	vmov.f32	s14, s15
      Xn = *pIn++;
 8002776:	eef0 6a46 	vmov.f32	s13, s12
 800277a:	ecb1 6a01 	vldmia	r1!, {s12}
      acc = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 800277e:	ee64 7a26 	vmul.f32	s15, s8, s13
    while (sample > 0U)
 8002782:	3801      	subs	r0, #1
      acc = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 8002784:	eee4 7a86 	vfma.f32	s15, s9, s12
 8002788:	eee3 7aa5 	vfma.f32	s15, s7, s11
 800278c:	eef0 5a66 	vmov.f32	s11, s13
 8002790:	eee3 7a07 	vfma.f32	s15, s6, s14
 8002794:	eee2 7a85 	vfma.f32	s15, s5, s10

      /* Store output in destination buffer. */
      *pOut++ = acc;
 8002798:	eeb0 5a47 	vmov.f32	s10, s14
 800279c:	ecec 7a01 	vstmia	ip!, {s15}
    while (sample > 0U)
 80027a0:	d1e7      	bne.n	8002772 <arm_biquad_cascade_df1_f32+0x3a>
    pOut = pDst;

    /* decrement loop counter */
    stage--;

  } while (stage > 0U);
 80027a2:	3d01      	subs	r5, #1
    *pState++ = Xn1;
 80027a4:	ed0e 6a04 	vstr	s12, [lr, #-16]
    *pState++ = Xn2;
 80027a8:	ed4e 6a03 	vstr	s13, [lr, #-12]
    *pState++ = Yn1;
 80027ac:	ed4e 7a02 	vstr	s15, [lr, #-8]
    *pState++ = Yn2;
 80027b0:	ed0e 7a01 	vstr	s14, [lr, #-4]
  } while (stage > 0U);
 80027b4:	f104 0414 	add.w	r4, r4, #20
 80027b8:	f10e 0e10 	add.w	lr, lr, #16
 80027bc:	d00a      	beq.n	80027d4 <arm_biquad_cascade_df1_f32+0x9c>
    pIn = pDst;
 80027be:	4611      	mov	r1, r2
 80027c0:	e7c1      	b.n	8002746 <arm_biquad_cascade_df1_f32+0xe>
    Yn1 = pState[2];
 80027c2:	eef0 7a47 	vmov.f32	s15, s14
    Xn1 = pState[0];
 80027c6:	eeb0 6a66 	vmov.f32	s12, s13
    Yn2 = pState[3];
 80027ca:	eeb0 7a45 	vmov.f32	s14, s10
    Xn2 = pState[1];
 80027ce:	eef0 6a65 	vmov.f32	s13, s11
 80027d2:	e7e6      	b.n	80027a2 <arm_biquad_cascade_df1_f32+0x6a>

}
 80027d4:	bd30      	pop	{r4, r5, pc}
 80027d6:	bf00      	nop

080027d8 <arm_biquad_cascade_df1_init_f32>:
void arm_biquad_cascade_df1_init_f32(
        arm_biquad_casd_df1_inst_f32 * S,
        uint8_t numStages,
  const float32_t * pCoeffs,
        float32_t * pState)
{
 80027d8:	b510      	push	{r4, lr}
  /* Assign filter stages */
  S->numStages = numStages;
 80027da:	6001      	str	r1, [r0, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 80027dc:	6082      	str	r2, [r0, #8]
{
 80027de:	4604      	mov	r4, r0

  /* Clear state buffer and size is always 4 * numStages */
  memset(pState, 0, (4U * (uint32_t) numStages) * sizeof(float32_t));
 80027e0:	010a      	lsls	r2, r1, #4
 80027e2:	4618      	mov	r0, r3
 80027e4:	2100      	movs	r1, #0
 80027e6:	f000 f883 	bl	80028f0 <memset>

  /* Assign state pointer */
  S->pState = pState;
 80027ea:	6060      	str	r0, [r4, #4]
}
 80027ec:	bd10      	pop	{r4, pc}
 80027ee:	bf00      	nop

080027f0 <arm_fir_f32>:
void arm_fir_f32(
  const arm_fir_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 80027f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
        float32_t *pStateCurnt;                        /* Points to the current sample of the state */
        float32_t *px;                                 /* Temporary pointer for state buffer */
  const float32_t *pb;                                 /* Temporary pointer for coefficient buffer */
        float32_t acc0;                                /* Accumulator */
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 80027f4:	8804      	ldrh	r4, [r0, #0]
        float32_t *pState = S->pState;                 /* State pointer */
 80027f6:	f8d0 8004 	ldr.w	r8, [r0, #4]
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 80027fa:	f8d0 9008 	ldr.w	r9, [r0, #8]
        float32_t c0;                                           /* Temporary variable to hold coefficient value */
#endif

  /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
  /* pStateCurnt points to the location where the new input data should be written */
  pStateCurnt = &(S->pState[(numTaps - 1U)]);
 80027fe:	f104 4080 	add.w	r0, r4, #1073741824	; 0x40000000
 8002802:	3801      	subs	r0, #1
 8002804:	eb08 0780 	add.w	r7, r8, r0, lsl #2
  /* Initialize blkCnt with number of taps */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8002808:	b32b      	cbz	r3, 8002856 <arm_fir_f32+0x66>
 800280a:	461d      	mov	r5, r3
        float32_t *pState = S->pState;                 /* State pointer */
 800280c:	4646      	mov	r6, r8
  {
    /* Copy one sample at a time into state buffer */
    *pStateCurnt++ = *pSrc++;
 800280e:	f851 0b04 	ldr.w	r0, [r1], #4
 8002812:	f847 0b04 	str.w	r0, [r7], #4

    /* Set the accumulator to zero */
    acc0 = 0.0f;
 8002816:	eddf 7a11 	vldr	s15, [pc, #68]	; 800285c <arm_fir_f32+0x6c>
    pb = pCoeffs;

    i = numTaps;

    /* Perform the multiply-accumulates */
    while (i > 0U)
 800281a:	b154      	cbz	r4, 8002832 <arm_fir_f32+0x42>
 800281c:	4620      	mov	r0, r4
    pb = pCoeffs;
 800281e:	46ce      	mov	lr, r9
    while (i > 0U)
 8002820:	46b4      	mov	ip, r6
    {
      /* acc =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-numTaps-3] +...+ b[0] * x[0] */
      acc0 += *px++ * *pb++;
 8002822:	ecfc 6a01 	vldmia	ip!, {s13}
 8002826:	ecbe 7a01 	vldmia	lr!, {s14}
    while (i > 0U)
 800282a:	3801      	subs	r0, #1
      acc0 += *px++ * *pb++;
 800282c:	eee6 7a87 	vfma.f32	s15, s13, s14
    while (i > 0U)
 8002830:	d1f7      	bne.n	8002822 <arm_fir_f32+0x32>
  while (blkCnt > 0U)
 8002832:	3d01      	subs	r5, #1

      i--;
    }

    /* Store result in destination buffer. */
    *pDst++ = acc0;
 8002834:	ece2 7a01 	vstmia	r2!, {s15}

    /* Advance state pointer by 1 for the next sample */
    pState = pState + 1U;
 8002838:	f106 0604 	add.w	r6, r6, #4
  while (blkCnt > 0U)
 800283c:	d1e7      	bne.n	800280e <arm_fir_f32+0x1e>
    pState = pState + 1U;
 800283e:	eb08 0283 	add.w	r2, r8, r3, lsl #2
  tapCnt = (numTaps - 1U);

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy remaining data */
  while (tapCnt > 0U)
 8002842:	1e63      	subs	r3, r4, #1
 8002844:	d005      	beq.n	8002852 <arm_fir_f32+0x62>
  {
    *pStateCurnt++ = *pState++;
 8002846:	f852 1b04 	ldr.w	r1, [r2], #4
 800284a:	f848 1b04 	str.w	r1, [r8], #4
  while (tapCnt > 0U)
 800284e:	3b01      	subs	r3, #1
 8002850:	d1f9      	bne.n	8002846 <arm_fir_f32+0x56>

    /* Decrement loop counter */
    tapCnt--;
  }

}
 8002852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        float32_t *pState = S->pState;                 /* State pointer */
 8002856:	4642      	mov	r2, r8
 8002858:	e7f3      	b.n	8002842 <arm_fir_f32+0x52>
 800285a:	bf00      	nop
 800285c:	00000000 	.word	0x00000000

08002860 <arm_fir_init_f32>:
        arm_fir_instance_f32 * S,
        uint16_t numTaps,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
 8002860:	b510      	push	{r4, lr}
 8002862:	4604      	mov	r4, r0

  /* Clear state buffer. The size is always (blockSize + numTaps - 1) */
#if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  memset(pState, 0, (numTaps + (blockSize - 1U) + blockSize) * sizeof(float32_t));
#else
  memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 8002864:	9802      	ldr	r0, [sp, #8]
  S->numTaps = numTaps;
 8002866:	8021      	strh	r1, [r4, #0]
  memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 8002868:	f100 3cff 	add.w	ip, r0, #4294967295
 800286c:	448c      	add	ip, r1
  S->pCoeffs = pCoeffs;
 800286e:	60a2      	str	r2, [r4, #8]
  memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 8002870:	2100      	movs	r1, #0
 8002872:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8002876:	4618      	mov	r0, r3
 8002878:	f000 f83a 	bl	80028f0 <memset>
#endif
  /* Assign state pointer */
  S->pState = pState;
 800287c:	6060      	str	r0, [r4, #4]
}
 800287e:	bd10      	pop	{r4, pc}

08002880 <__errno>:
 8002880:	4b01      	ldr	r3, [pc, #4]	; (8002888 <__errno+0x8>)
 8002882:	6818      	ldr	r0, [r3, #0]
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	20000010 	.word	0x20000010

0800288c <__libc_init_array>:
 800288c:	b570      	push	{r4, r5, r6, lr}
 800288e:	4d0d      	ldr	r5, [pc, #52]	; (80028c4 <__libc_init_array+0x38>)
 8002890:	4c0d      	ldr	r4, [pc, #52]	; (80028c8 <__libc_init_array+0x3c>)
 8002892:	1b64      	subs	r4, r4, r5
 8002894:	10a4      	asrs	r4, r4, #2
 8002896:	2600      	movs	r6, #0
 8002898:	42a6      	cmp	r6, r4
 800289a:	d109      	bne.n	80028b0 <__libc_init_array+0x24>
 800289c:	4d0b      	ldr	r5, [pc, #44]	; (80028cc <__libc_init_array+0x40>)
 800289e:	4c0c      	ldr	r4, [pc, #48]	; (80028d0 <__libc_init_array+0x44>)
 80028a0:	f004 fc8e 	bl	80071c0 <_init>
 80028a4:	1b64      	subs	r4, r4, r5
 80028a6:	10a4      	asrs	r4, r4, #2
 80028a8:	2600      	movs	r6, #0
 80028aa:	42a6      	cmp	r6, r4
 80028ac:	d105      	bne.n	80028ba <__libc_init_array+0x2e>
 80028ae:	bd70      	pop	{r4, r5, r6, pc}
 80028b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80028b4:	4798      	blx	r3
 80028b6:	3601      	adds	r6, #1
 80028b8:	e7ee      	b.n	8002898 <__libc_init_array+0xc>
 80028ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80028be:	4798      	blx	r3
 80028c0:	3601      	adds	r6, #1
 80028c2:	e7f2      	b.n	80028aa <__libc_init_array+0x1e>
 80028c4:	08009024 	.word	0x08009024
 80028c8:	08009024 	.word	0x08009024
 80028cc:	08009024 	.word	0x08009024
 80028d0:	08009028 	.word	0x08009028

080028d4 <memcpy>:
 80028d4:	440a      	add	r2, r1
 80028d6:	4291      	cmp	r1, r2
 80028d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80028dc:	d100      	bne.n	80028e0 <memcpy+0xc>
 80028de:	4770      	bx	lr
 80028e0:	b510      	push	{r4, lr}
 80028e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80028e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80028ea:	4291      	cmp	r1, r2
 80028ec:	d1f9      	bne.n	80028e2 <memcpy+0xe>
 80028ee:	bd10      	pop	{r4, pc}

080028f0 <memset>:
 80028f0:	4402      	add	r2, r0
 80028f2:	4603      	mov	r3, r0
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d100      	bne.n	80028fa <memset+0xa>
 80028f8:	4770      	bx	lr
 80028fa:	f803 1b01 	strb.w	r1, [r3], #1
 80028fe:	e7f9      	b.n	80028f4 <memset+0x4>

08002900 <__cvt>:
 8002900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002904:	ec55 4b10 	vmov	r4, r5, d0
 8002908:	2d00      	cmp	r5, #0
 800290a:	460e      	mov	r6, r1
 800290c:	4619      	mov	r1, r3
 800290e:	462b      	mov	r3, r5
 8002910:	bfbb      	ittet	lt
 8002912:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002916:	461d      	movlt	r5, r3
 8002918:	2300      	movge	r3, #0
 800291a:	232d      	movlt	r3, #45	; 0x2d
 800291c:	700b      	strb	r3, [r1, #0]
 800291e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002920:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002924:	4691      	mov	r9, r2
 8002926:	f023 0820 	bic.w	r8, r3, #32
 800292a:	bfbc      	itt	lt
 800292c:	4622      	movlt	r2, r4
 800292e:	4614      	movlt	r4, r2
 8002930:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002934:	d005      	beq.n	8002942 <__cvt+0x42>
 8002936:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800293a:	d100      	bne.n	800293e <__cvt+0x3e>
 800293c:	3601      	adds	r6, #1
 800293e:	2102      	movs	r1, #2
 8002940:	e000      	b.n	8002944 <__cvt+0x44>
 8002942:	2103      	movs	r1, #3
 8002944:	ab03      	add	r3, sp, #12
 8002946:	9301      	str	r3, [sp, #4]
 8002948:	ab02      	add	r3, sp, #8
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	ec45 4b10 	vmov	d0, r4, r5
 8002950:	4653      	mov	r3, sl
 8002952:	4632      	mov	r2, r6
 8002954:	f001 fdac 	bl	80044b0 <_dtoa_r>
 8002958:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800295c:	4607      	mov	r7, r0
 800295e:	d102      	bne.n	8002966 <__cvt+0x66>
 8002960:	f019 0f01 	tst.w	r9, #1
 8002964:	d022      	beq.n	80029ac <__cvt+0xac>
 8002966:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800296a:	eb07 0906 	add.w	r9, r7, r6
 800296e:	d110      	bne.n	8002992 <__cvt+0x92>
 8002970:	783b      	ldrb	r3, [r7, #0]
 8002972:	2b30      	cmp	r3, #48	; 0x30
 8002974:	d10a      	bne.n	800298c <__cvt+0x8c>
 8002976:	2200      	movs	r2, #0
 8002978:	2300      	movs	r3, #0
 800297a:	4620      	mov	r0, r4
 800297c:	4629      	mov	r1, r5
 800297e:	f7fe f87b 	bl	8000a78 <__aeabi_dcmpeq>
 8002982:	b918      	cbnz	r0, 800298c <__cvt+0x8c>
 8002984:	f1c6 0601 	rsb	r6, r6, #1
 8002988:	f8ca 6000 	str.w	r6, [sl]
 800298c:	f8da 3000 	ldr.w	r3, [sl]
 8002990:	4499      	add	r9, r3
 8002992:	2200      	movs	r2, #0
 8002994:	2300      	movs	r3, #0
 8002996:	4620      	mov	r0, r4
 8002998:	4629      	mov	r1, r5
 800299a:	f7fe f86d 	bl	8000a78 <__aeabi_dcmpeq>
 800299e:	b108      	cbz	r0, 80029a4 <__cvt+0xa4>
 80029a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80029a4:	2230      	movs	r2, #48	; 0x30
 80029a6:	9b03      	ldr	r3, [sp, #12]
 80029a8:	454b      	cmp	r3, r9
 80029aa:	d307      	bcc.n	80029bc <__cvt+0xbc>
 80029ac:	9b03      	ldr	r3, [sp, #12]
 80029ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80029b0:	1bdb      	subs	r3, r3, r7
 80029b2:	4638      	mov	r0, r7
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	b004      	add	sp, #16
 80029b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029bc:	1c59      	adds	r1, r3, #1
 80029be:	9103      	str	r1, [sp, #12]
 80029c0:	701a      	strb	r2, [r3, #0]
 80029c2:	e7f0      	b.n	80029a6 <__cvt+0xa6>

080029c4 <__exponent>:
 80029c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029c6:	4603      	mov	r3, r0
 80029c8:	2900      	cmp	r1, #0
 80029ca:	bfb8      	it	lt
 80029cc:	4249      	neglt	r1, r1
 80029ce:	f803 2b02 	strb.w	r2, [r3], #2
 80029d2:	bfb4      	ite	lt
 80029d4:	222d      	movlt	r2, #45	; 0x2d
 80029d6:	222b      	movge	r2, #43	; 0x2b
 80029d8:	2909      	cmp	r1, #9
 80029da:	7042      	strb	r2, [r0, #1]
 80029dc:	dd2a      	ble.n	8002a34 <__exponent+0x70>
 80029de:	f10d 0407 	add.w	r4, sp, #7
 80029e2:	46a4      	mov	ip, r4
 80029e4:	270a      	movs	r7, #10
 80029e6:	46a6      	mov	lr, r4
 80029e8:	460a      	mov	r2, r1
 80029ea:	fb91 f6f7 	sdiv	r6, r1, r7
 80029ee:	fb07 1516 	mls	r5, r7, r6, r1
 80029f2:	3530      	adds	r5, #48	; 0x30
 80029f4:	2a63      	cmp	r2, #99	; 0x63
 80029f6:	f104 34ff 	add.w	r4, r4, #4294967295
 80029fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80029fe:	4631      	mov	r1, r6
 8002a00:	dcf1      	bgt.n	80029e6 <__exponent+0x22>
 8002a02:	3130      	adds	r1, #48	; 0x30
 8002a04:	f1ae 0502 	sub.w	r5, lr, #2
 8002a08:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002a0c:	1c44      	adds	r4, r0, #1
 8002a0e:	4629      	mov	r1, r5
 8002a10:	4561      	cmp	r1, ip
 8002a12:	d30a      	bcc.n	8002a2a <__exponent+0x66>
 8002a14:	f10d 0209 	add.w	r2, sp, #9
 8002a18:	eba2 020e 	sub.w	r2, r2, lr
 8002a1c:	4565      	cmp	r5, ip
 8002a1e:	bf88      	it	hi
 8002a20:	2200      	movhi	r2, #0
 8002a22:	4413      	add	r3, r2
 8002a24:	1a18      	subs	r0, r3, r0
 8002a26:	b003      	add	sp, #12
 8002a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002a2e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002a32:	e7ed      	b.n	8002a10 <__exponent+0x4c>
 8002a34:	2330      	movs	r3, #48	; 0x30
 8002a36:	3130      	adds	r1, #48	; 0x30
 8002a38:	7083      	strb	r3, [r0, #2]
 8002a3a:	70c1      	strb	r1, [r0, #3]
 8002a3c:	1d03      	adds	r3, r0, #4
 8002a3e:	e7f1      	b.n	8002a24 <__exponent+0x60>

08002a40 <_printf_float>:
 8002a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a44:	ed2d 8b02 	vpush	{d8}
 8002a48:	b08d      	sub	sp, #52	; 0x34
 8002a4a:	460c      	mov	r4, r1
 8002a4c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002a50:	4616      	mov	r6, r2
 8002a52:	461f      	mov	r7, r3
 8002a54:	4605      	mov	r5, r0
 8002a56:	f002 fe89 	bl	800576c <_localeconv_r>
 8002a5a:	f8d0 a000 	ldr.w	sl, [r0]
 8002a5e:	4650      	mov	r0, sl
 8002a60:	f7fd fb8e 	bl	8000180 <strlen>
 8002a64:	2300      	movs	r3, #0
 8002a66:	930a      	str	r3, [sp, #40]	; 0x28
 8002a68:	6823      	ldr	r3, [r4, #0]
 8002a6a:	9305      	str	r3, [sp, #20]
 8002a6c:	f8d8 3000 	ldr.w	r3, [r8]
 8002a70:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002a74:	3307      	adds	r3, #7
 8002a76:	f023 0307 	bic.w	r3, r3, #7
 8002a7a:	f103 0208 	add.w	r2, r3, #8
 8002a7e:	f8c8 2000 	str.w	r2, [r8]
 8002a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a86:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002a8a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002a8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002a92:	9307      	str	r3, [sp, #28]
 8002a94:	f8cd 8018 	str.w	r8, [sp, #24]
 8002a98:	ee08 0a10 	vmov	s16, r0
 8002a9c:	4b9f      	ldr	r3, [pc, #636]	; (8002d1c <_printf_float+0x2dc>)
 8002a9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa6:	f7fe f819 	bl	8000adc <__aeabi_dcmpun>
 8002aaa:	bb88      	cbnz	r0, 8002b10 <_printf_float+0xd0>
 8002aac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002ab0:	4b9a      	ldr	r3, [pc, #616]	; (8002d1c <_printf_float+0x2dc>)
 8002ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab6:	f7fd fff3 	bl	8000aa0 <__aeabi_dcmple>
 8002aba:	bb48      	cbnz	r0, 8002b10 <_printf_float+0xd0>
 8002abc:	2200      	movs	r2, #0
 8002abe:	2300      	movs	r3, #0
 8002ac0:	4640      	mov	r0, r8
 8002ac2:	4649      	mov	r1, r9
 8002ac4:	f7fd ffe2 	bl	8000a8c <__aeabi_dcmplt>
 8002ac8:	b110      	cbz	r0, 8002ad0 <_printf_float+0x90>
 8002aca:	232d      	movs	r3, #45	; 0x2d
 8002acc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ad0:	4b93      	ldr	r3, [pc, #588]	; (8002d20 <_printf_float+0x2e0>)
 8002ad2:	4894      	ldr	r0, [pc, #592]	; (8002d24 <_printf_float+0x2e4>)
 8002ad4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002ad8:	bf94      	ite	ls
 8002ada:	4698      	movls	r8, r3
 8002adc:	4680      	movhi	r8, r0
 8002ade:	2303      	movs	r3, #3
 8002ae0:	6123      	str	r3, [r4, #16]
 8002ae2:	9b05      	ldr	r3, [sp, #20]
 8002ae4:	f023 0204 	bic.w	r2, r3, #4
 8002ae8:	6022      	str	r2, [r4, #0]
 8002aea:	f04f 0900 	mov.w	r9, #0
 8002aee:	9700      	str	r7, [sp, #0]
 8002af0:	4633      	mov	r3, r6
 8002af2:	aa0b      	add	r2, sp, #44	; 0x2c
 8002af4:	4621      	mov	r1, r4
 8002af6:	4628      	mov	r0, r5
 8002af8:	f000 f9d8 	bl	8002eac <_printf_common>
 8002afc:	3001      	adds	r0, #1
 8002afe:	f040 8090 	bne.w	8002c22 <_printf_float+0x1e2>
 8002b02:	f04f 30ff 	mov.w	r0, #4294967295
 8002b06:	b00d      	add	sp, #52	; 0x34
 8002b08:	ecbd 8b02 	vpop	{d8}
 8002b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b10:	4642      	mov	r2, r8
 8002b12:	464b      	mov	r3, r9
 8002b14:	4640      	mov	r0, r8
 8002b16:	4649      	mov	r1, r9
 8002b18:	f7fd ffe0 	bl	8000adc <__aeabi_dcmpun>
 8002b1c:	b140      	cbz	r0, 8002b30 <_printf_float+0xf0>
 8002b1e:	464b      	mov	r3, r9
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	bfbc      	itt	lt
 8002b24:	232d      	movlt	r3, #45	; 0x2d
 8002b26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002b2a:	487f      	ldr	r0, [pc, #508]	; (8002d28 <_printf_float+0x2e8>)
 8002b2c:	4b7f      	ldr	r3, [pc, #508]	; (8002d2c <_printf_float+0x2ec>)
 8002b2e:	e7d1      	b.n	8002ad4 <_printf_float+0x94>
 8002b30:	6863      	ldr	r3, [r4, #4]
 8002b32:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002b36:	9206      	str	r2, [sp, #24]
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	d13f      	bne.n	8002bbc <_printf_float+0x17c>
 8002b3c:	2306      	movs	r3, #6
 8002b3e:	6063      	str	r3, [r4, #4]
 8002b40:	9b05      	ldr	r3, [sp, #20]
 8002b42:	6861      	ldr	r1, [r4, #4]
 8002b44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002b48:	2300      	movs	r3, #0
 8002b4a:	9303      	str	r3, [sp, #12]
 8002b4c:	ab0a      	add	r3, sp, #40	; 0x28
 8002b4e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002b52:	ab09      	add	r3, sp, #36	; 0x24
 8002b54:	ec49 8b10 	vmov	d0, r8, r9
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	6022      	str	r2, [r4, #0]
 8002b5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002b60:	4628      	mov	r0, r5
 8002b62:	f7ff fecd 	bl	8002900 <__cvt>
 8002b66:	9b06      	ldr	r3, [sp, #24]
 8002b68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002b6a:	2b47      	cmp	r3, #71	; 0x47
 8002b6c:	4680      	mov	r8, r0
 8002b6e:	d108      	bne.n	8002b82 <_printf_float+0x142>
 8002b70:	1cc8      	adds	r0, r1, #3
 8002b72:	db02      	blt.n	8002b7a <_printf_float+0x13a>
 8002b74:	6863      	ldr	r3, [r4, #4]
 8002b76:	4299      	cmp	r1, r3
 8002b78:	dd41      	ble.n	8002bfe <_printf_float+0x1be>
 8002b7a:	f1ab 0b02 	sub.w	fp, fp, #2
 8002b7e:	fa5f fb8b 	uxtb.w	fp, fp
 8002b82:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002b86:	d820      	bhi.n	8002bca <_printf_float+0x18a>
 8002b88:	3901      	subs	r1, #1
 8002b8a:	465a      	mov	r2, fp
 8002b8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002b90:	9109      	str	r1, [sp, #36]	; 0x24
 8002b92:	f7ff ff17 	bl	80029c4 <__exponent>
 8002b96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002b98:	1813      	adds	r3, r2, r0
 8002b9a:	2a01      	cmp	r2, #1
 8002b9c:	4681      	mov	r9, r0
 8002b9e:	6123      	str	r3, [r4, #16]
 8002ba0:	dc02      	bgt.n	8002ba8 <_printf_float+0x168>
 8002ba2:	6822      	ldr	r2, [r4, #0]
 8002ba4:	07d2      	lsls	r2, r2, #31
 8002ba6:	d501      	bpl.n	8002bac <_printf_float+0x16c>
 8002ba8:	3301      	adds	r3, #1
 8002baa:	6123      	str	r3, [r4, #16]
 8002bac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d09c      	beq.n	8002aee <_printf_float+0xae>
 8002bb4:	232d      	movs	r3, #45	; 0x2d
 8002bb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bba:	e798      	b.n	8002aee <_printf_float+0xae>
 8002bbc:	9a06      	ldr	r2, [sp, #24]
 8002bbe:	2a47      	cmp	r2, #71	; 0x47
 8002bc0:	d1be      	bne.n	8002b40 <_printf_float+0x100>
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1bc      	bne.n	8002b40 <_printf_float+0x100>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e7b9      	b.n	8002b3e <_printf_float+0xfe>
 8002bca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002bce:	d118      	bne.n	8002c02 <_printf_float+0x1c2>
 8002bd0:	2900      	cmp	r1, #0
 8002bd2:	6863      	ldr	r3, [r4, #4]
 8002bd4:	dd0b      	ble.n	8002bee <_printf_float+0x1ae>
 8002bd6:	6121      	str	r1, [r4, #16]
 8002bd8:	b913      	cbnz	r3, 8002be0 <_printf_float+0x1a0>
 8002bda:	6822      	ldr	r2, [r4, #0]
 8002bdc:	07d0      	lsls	r0, r2, #31
 8002bde:	d502      	bpl.n	8002be6 <_printf_float+0x1a6>
 8002be0:	3301      	adds	r3, #1
 8002be2:	440b      	add	r3, r1
 8002be4:	6123      	str	r3, [r4, #16]
 8002be6:	65a1      	str	r1, [r4, #88]	; 0x58
 8002be8:	f04f 0900 	mov.w	r9, #0
 8002bec:	e7de      	b.n	8002bac <_printf_float+0x16c>
 8002bee:	b913      	cbnz	r3, 8002bf6 <_printf_float+0x1b6>
 8002bf0:	6822      	ldr	r2, [r4, #0]
 8002bf2:	07d2      	lsls	r2, r2, #31
 8002bf4:	d501      	bpl.n	8002bfa <_printf_float+0x1ba>
 8002bf6:	3302      	adds	r3, #2
 8002bf8:	e7f4      	b.n	8002be4 <_printf_float+0x1a4>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e7f2      	b.n	8002be4 <_printf_float+0x1a4>
 8002bfe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002c02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c04:	4299      	cmp	r1, r3
 8002c06:	db05      	blt.n	8002c14 <_printf_float+0x1d4>
 8002c08:	6823      	ldr	r3, [r4, #0]
 8002c0a:	6121      	str	r1, [r4, #16]
 8002c0c:	07d8      	lsls	r0, r3, #31
 8002c0e:	d5ea      	bpl.n	8002be6 <_printf_float+0x1a6>
 8002c10:	1c4b      	adds	r3, r1, #1
 8002c12:	e7e7      	b.n	8002be4 <_printf_float+0x1a4>
 8002c14:	2900      	cmp	r1, #0
 8002c16:	bfd4      	ite	le
 8002c18:	f1c1 0202 	rsble	r2, r1, #2
 8002c1c:	2201      	movgt	r2, #1
 8002c1e:	4413      	add	r3, r2
 8002c20:	e7e0      	b.n	8002be4 <_printf_float+0x1a4>
 8002c22:	6823      	ldr	r3, [r4, #0]
 8002c24:	055a      	lsls	r2, r3, #21
 8002c26:	d407      	bmi.n	8002c38 <_printf_float+0x1f8>
 8002c28:	6923      	ldr	r3, [r4, #16]
 8002c2a:	4642      	mov	r2, r8
 8002c2c:	4631      	mov	r1, r6
 8002c2e:	4628      	mov	r0, r5
 8002c30:	47b8      	blx	r7
 8002c32:	3001      	adds	r0, #1
 8002c34:	d12c      	bne.n	8002c90 <_printf_float+0x250>
 8002c36:	e764      	b.n	8002b02 <_printf_float+0xc2>
 8002c38:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002c3c:	f240 80e0 	bls.w	8002e00 <_printf_float+0x3c0>
 8002c40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002c44:	2200      	movs	r2, #0
 8002c46:	2300      	movs	r3, #0
 8002c48:	f7fd ff16 	bl	8000a78 <__aeabi_dcmpeq>
 8002c4c:	2800      	cmp	r0, #0
 8002c4e:	d034      	beq.n	8002cba <_printf_float+0x27a>
 8002c50:	4a37      	ldr	r2, [pc, #220]	; (8002d30 <_printf_float+0x2f0>)
 8002c52:	2301      	movs	r3, #1
 8002c54:	4631      	mov	r1, r6
 8002c56:	4628      	mov	r0, r5
 8002c58:	47b8      	blx	r7
 8002c5a:	3001      	adds	r0, #1
 8002c5c:	f43f af51 	beq.w	8002b02 <_printf_float+0xc2>
 8002c60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002c64:	429a      	cmp	r2, r3
 8002c66:	db02      	blt.n	8002c6e <_printf_float+0x22e>
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	07d8      	lsls	r0, r3, #31
 8002c6c:	d510      	bpl.n	8002c90 <_printf_float+0x250>
 8002c6e:	ee18 3a10 	vmov	r3, s16
 8002c72:	4652      	mov	r2, sl
 8002c74:	4631      	mov	r1, r6
 8002c76:	4628      	mov	r0, r5
 8002c78:	47b8      	blx	r7
 8002c7a:	3001      	adds	r0, #1
 8002c7c:	f43f af41 	beq.w	8002b02 <_printf_float+0xc2>
 8002c80:	f04f 0800 	mov.w	r8, #0
 8002c84:	f104 091a 	add.w	r9, r4, #26
 8002c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	4543      	cmp	r3, r8
 8002c8e:	dc09      	bgt.n	8002ca4 <_printf_float+0x264>
 8002c90:	6823      	ldr	r3, [r4, #0]
 8002c92:	079b      	lsls	r3, r3, #30
 8002c94:	f100 8105 	bmi.w	8002ea2 <_printf_float+0x462>
 8002c98:	68e0      	ldr	r0, [r4, #12]
 8002c9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002c9c:	4298      	cmp	r0, r3
 8002c9e:	bfb8      	it	lt
 8002ca0:	4618      	movlt	r0, r3
 8002ca2:	e730      	b.n	8002b06 <_printf_float+0xc6>
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	464a      	mov	r2, r9
 8002ca8:	4631      	mov	r1, r6
 8002caa:	4628      	mov	r0, r5
 8002cac:	47b8      	blx	r7
 8002cae:	3001      	adds	r0, #1
 8002cb0:	f43f af27 	beq.w	8002b02 <_printf_float+0xc2>
 8002cb4:	f108 0801 	add.w	r8, r8, #1
 8002cb8:	e7e6      	b.n	8002c88 <_printf_float+0x248>
 8002cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	dc39      	bgt.n	8002d34 <_printf_float+0x2f4>
 8002cc0:	4a1b      	ldr	r2, [pc, #108]	; (8002d30 <_printf_float+0x2f0>)
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	4631      	mov	r1, r6
 8002cc6:	4628      	mov	r0, r5
 8002cc8:	47b8      	blx	r7
 8002cca:	3001      	adds	r0, #1
 8002ccc:	f43f af19 	beq.w	8002b02 <_printf_float+0xc2>
 8002cd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	d102      	bne.n	8002cde <_printf_float+0x29e>
 8002cd8:	6823      	ldr	r3, [r4, #0]
 8002cda:	07d9      	lsls	r1, r3, #31
 8002cdc:	d5d8      	bpl.n	8002c90 <_printf_float+0x250>
 8002cde:	ee18 3a10 	vmov	r3, s16
 8002ce2:	4652      	mov	r2, sl
 8002ce4:	4631      	mov	r1, r6
 8002ce6:	4628      	mov	r0, r5
 8002ce8:	47b8      	blx	r7
 8002cea:	3001      	adds	r0, #1
 8002cec:	f43f af09 	beq.w	8002b02 <_printf_float+0xc2>
 8002cf0:	f04f 0900 	mov.w	r9, #0
 8002cf4:	f104 0a1a 	add.w	sl, r4, #26
 8002cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cfa:	425b      	negs	r3, r3
 8002cfc:	454b      	cmp	r3, r9
 8002cfe:	dc01      	bgt.n	8002d04 <_printf_float+0x2c4>
 8002d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d02:	e792      	b.n	8002c2a <_printf_float+0x1ea>
 8002d04:	2301      	movs	r3, #1
 8002d06:	4652      	mov	r2, sl
 8002d08:	4631      	mov	r1, r6
 8002d0a:	4628      	mov	r0, r5
 8002d0c:	47b8      	blx	r7
 8002d0e:	3001      	adds	r0, #1
 8002d10:	f43f aef7 	beq.w	8002b02 <_printf_float+0xc2>
 8002d14:	f109 0901 	add.w	r9, r9, #1
 8002d18:	e7ee      	b.n	8002cf8 <_printf_float+0x2b8>
 8002d1a:	bf00      	nop
 8002d1c:	7fefffff 	.word	0x7fefffff
 8002d20:	08008b80 	.word	0x08008b80
 8002d24:	08008b84 	.word	0x08008b84
 8002d28:	08008b8c 	.word	0x08008b8c
 8002d2c:	08008b88 	.word	0x08008b88
 8002d30:	08008b90 	.word	0x08008b90
 8002d34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002d36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	bfa8      	it	ge
 8002d3c:	461a      	movge	r2, r3
 8002d3e:	2a00      	cmp	r2, #0
 8002d40:	4691      	mov	r9, r2
 8002d42:	dc37      	bgt.n	8002db4 <_printf_float+0x374>
 8002d44:	f04f 0b00 	mov.w	fp, #0
 8002d48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002d4c:	f104 021a 	add.w	r2, r4, #26
 8002d50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d52:	9305      	str	r3, [sp, #20]
 8002d54:	eba3 0309 	sub.w	r3, r3, r9
 8002d58:	455b      	cmp	r3, fp
 8002d5a:	dc33      	bgt.n	8002dc4 <_printf_float+0x384>
 8002d5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002d60:	429a      	cmp	r2, r3
 8002d62:	db3b      	blt.n	8002ddc <_printf_float+0x39c>
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	07da      	lsls	r2, r3, #31
 8002d68:	d438      	bmi.n	8002ddc <_printf_float+0x39c>
 8002d6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d6c:	9a05      	ldr	r2, [sp, #20]
 8002d6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002d70:	1a9a      	subs	r2, r3, r2
 8002d72:	eba3 0901 	sub.w	r9, r3, r1
 8002d76:	4591      	cmp	r9, r2
 8002d78:	bfa8      	it	ge
 8002d7a:	4691      	movge	r9, r2
 8002d7c:	f1b9 0f00 	cmp.w	r9, #0
 8002d80:	dc35      	bgt.n	8002dee <_printf_float+0x3ae>
 8002d82:	f04f 0800 	mov.w	r8, #0
 8002d86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002d8a:	f104 0a1a 	add.w	sl, r4, #26
 8002d8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002d92:	1a9b      	subs	r3, r3, r2
 8002d94:	eba3 0309 	sub.w	r3, r3, r9
 8002d98:	4543      	cmp	r3, r8
 8002d9a:	f77f af79 	ble.w	8002c90 <_printf_float+0x250>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	4652      	mov	r2, sl
 8002da2:	4631      	mov	r1, r6
 8002da4:	4628      	mov	r0, r5
 8002da6:	47b8      	blx	r7
 8002da8:	3001      	adds	r0, #1
 8002daa:	f43f aeaa 	beq.w	8002b02 <_printf_float+0xc2>
 8002dae:	f108 0801 	add.w	r8, r8, #1
 8002db2:	e7ec      	b.n	8002d8e <_printf_float+0x34e>
 8002db4:	4613      	mov	r3, r2
 8002db6:	4631      	mov	r1, r6
 8002db8:	4642      	mov	r2, r8
 8002dba:	4628      	mov	r0, r5
 8002dbc:	47b8      	blx	r7
 8002dbe:	3001      	adds	r0, #1
 8002dc0:	d1c0      	bne.n	8002d44 <_printf_float+0x304>
 8002dc2:	e69e      	b.n	8002b02 <_printf_float+0xc2>
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	4631      	mov	r1, r6
 8002dc8:	4628      	mov	r0, r5
 8002dca:	9205      	str	r2, [sp, #20]
 8002dcc:	47b8      	blx	r7
 8002dce:	3001      	adds	r0, #1
 8002dd0:	f43f ae97 	beq.w	8002b02 <_printf_float+0xc2>
 8002dd4:	9a05      	ldr	r2, [sp, #20]
 8002dd6:	f10b 0b01 	add.w	fp, fp, #1
 8002dda:	e7b9      	b.n	8002d50 <_printf_float+0x310>
 8002ddc:	ee18 3a10 	vmov	r3, s16
 8002de0:	4652      	mov	r2, sl
 8002de2:	4631      	mov	r1, r6
 8002de4:	4628      	mov	r0, r5
 8002de6:	47b8      	blx	r7
 8002de8:	3001      	adds	r0, #1
 8002dea:	d1be      	bne.n	8002d6a <_printf_float+0x32a>
 8002dec:	e689      	b.n	8002b02 <_printf_float+0xc2>
 8002dee:	9a05      	ldr	r2, [sp, #20]
 8002df0:	464b      	mov	r3, r9
 8002df2:	4442      	add	r2, r8
 8002df4:	4631      	mov	r1, r6
 8002df6:	4628      	mov	r0, r5
 8002df8:	47b8      	blx	r7
 8002dfa:	3001      	adds	r0, #1
 8002dfc:	d1c1      	bne.n	8002d82 <_printf_float+0x342>
 8002dfe:	e680      	b.n	8002b02 <_printf_float+0xc2>
 8002e00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002e02:	2a01      	cmp	r2, #1
 8002e04:	dc01      	bgt.n	8002e0a <_printf_float+0x3ca>
 8002e06:	07db      	lsls	r3, r3, #31
 8002e08:	d538      	bpl.n	8002e7c <_printf_float+0x43c>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	4642      	mov	r2, r8
 8002e0e:	4631      	mov	r1, r6
 8002e10:	4628      	mov	r0, r5
 8002e12:	47b8      	blx	r7
 8002e14:	3001      	adds	r0, #1
 8002e16:	f43f ae74 	beq.w	8002b02 <_printf_float+0xc2>
 8002e1a:	ee18 3a10 	vmov	r3, s16
 8002e1e:	4652      	mov	r2, sl
 8002e20:	4631      	mov	r1, r6
 8002e22:	4628      	mov	r0, r5
 8002e24:	47b8      	blx	r7
 8002e26:	3001      	adds	r0, #1
 8002e28:	f43f ae6b 	beq.w	8002b02 <_printf_float+0xc2>
 8002e2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002e30:	2200      	movs	r2, #0
 8002e32:	2300      	movs	r3, #0
 8002e34:	f7fd fe20 	bl	8000a78 <__aeabi_dcmpeq>
 8002e38:	b9d8      	cbnz	r0, 8002e72 <_printf_float+0x432>
 8002e3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e3c:	f108 0201 	add.w	r2, r8, #1
 8002e40:	3b01      	subs	r3, #1
 8002e42:	4631      	mov	r1, r6
 8002e44:	4628      	mov	r0, r5
 8002e46:	47b8      	blx	r7
 8002e48:	3001      	adds	r0, #1
 8002e4a:	d10e      	bne.n	8002e6a <_printf_float+0x42a>
 8002e4c:	e659      	b.n	8002b02 <_printf_float+0xc2>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	4652      	mov	r2, sl
 8002e52:	4631      	mov	r1, r6
 8002e54:	4628      	mov	r0, r5
 8002e56:	47b8      	blx	r7
 8002e58:	3001      	adds	r0, #1
 8002e5a:	f43f ae52 	beq.w	8002b02 <_printf_float+0xc2>
 8002e5e:	f108 0801 	add.w	r8, r8, #1
 8002e62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e64:	3b01      	subs	r3, #1
 8002e66:	4543      	cmp	r3, r8
 8002e68:	dcf1      	bgt.n	8002e4e <_printf_float+0x40e>
 8002e6a:	464b      	mov	r3, r9
 8002e6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002e70:	e6dc      	b.n	8002c2c <_printf_float+0x1ec>
 8002e72:	f04f 0800 	mov.w	r8, #0
 8002e76:	f104 0a1a 	add.w	sl, r4, #26
 8002e7a:	e7f2      	b.n	8002e62 <_printf_float+0x422>
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	4642      	mov	r2, r8
 8002e80:	e7df      	b.n	8002e42 <_printf_float+0x402>
 8002e82:	2301      	movs	r3, #1
 8002e84:	464a      	mov	r2, r9
 8002e86:	4631      	mov	r1, r6
 8002e88:	4628      	mov	r0, r5
 8002e8a:	47b8      	blx	r7
 8002e8c:	3001      	adds	r0, #1
 8002e8e:	f43f ae38 	beq.w	8002b02 <_printf_float+0xc2>
 8002e92:	f108 0801 	add.w	r8, r8, #1
 8002e96:	68e3      	ldr	r3, [r4, #12]
 8002e98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002e9a:	1a5b      	subs	r3, r3, r1
 8002e9c:	4543      	cmp	r3, r8
 8002e9e:	dcf0      	bgt.n	8002e82 <_printf_float+0x442>
 8002ea0:	e6fa      	b.n	8002c98 <_printf_float+0x258>
 8002ea2:	f04f 0800 	mov.w	r8, #0
 8002ea6:	f104 0919 	add.w	r9, r4, #25
 8002eaa:	e7f4      	b.n	8002e96 <_printf_float+0x456>

08002eac <_printf_common>:
 8002eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002eb0:	4616      	mov	r6, r2
 8002eb2:	4699      	mov	r9, r3
 8002eb4:	688a      	ldr	r2, [r1, #8]
 8002eb6:	690b      	ldr	r3, [r1, #16]
 8002eb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	bfb8      	it	lt
 8002ec0:	4613      	movlt	r3, r2
 8002ec2:	6033      	str	r3, [r6, #0]
 8002ec4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ec8:	4607      	mov	r7, r0
 8002eca:	460c      	mov	r4, r1
 8002ecc:	b10a      	cbz	r2, 8002ed2 <_printf_common+0x26>
 8002ece:	3301      	adds	r3, #1
 8002ed0:	6033      	str	r3, [r6, #0]
 8002ed2:	6823      	ldr	r3, [r4, #0]
 8002ed4:	0699      	lsls	r1, r3, #26
 8002ed6:	bf42      	ittt	mi
 8002ed8:	6833      	ldrmi	r3, [r6, #0]
 8002eda:	3302      	addmi	r3, #2
 8002edc:	6033      	strmi	r3, [r6, #0]
 8002ede:	6825      	ldr	r5, [r4, #0]
 8002ee0:	f015 0506 	ands.w	r5, r5, #6
 8002ee4:	d106      	bne.n	8002ef4 <_printf_common+0x48>
 8002ee6:	f104 0a19 	add.w	sl, r4, #25
 8002eea:	68e3      	ldr	r3, [r4, #12]
 8002eec:	6832      	ldr	r2, [r6, #0]
 8002eee:	1a9b      	subs	r3, r3, r2
 8002ef0:	42ab      	cmp	r3, r5
 8002ef2:	dc26      	bgt.n	8002f42 <_printf_common+0x96>
 8002ef4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ef8:	1e13      	subs	r3, r2, #0
 8002efa:	6822      	ldr	r2, [r4, #0]
 8002efc:	bf18      	it	ne
 8002efe:	2301      	movne	r3, #1
 8002f00:	0692      	lsls	r2, r2, #26
 8002f02:	d42b      	bmi.n	8002f5c <_printf_common+0xb0>
 8002f04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f08:	4649      	mov	r1, r9
 8002f0a:	4638      	mov	r0, r7
 8002f0c:	47c0      	blx	r8
 8002f0e:	3001      	adds	r0, #1
 8002f10:	d01e      	beq.n	8002f50 <_printf_common+0xa4>
 8002f12:	6823      	ldr	r3, [r4, #0]
 8002f14:	68e5      	ldr	r5, [r4, #12]
 8002f16:	6832      	ldr	r2, [r6, #0]
 8002f18:	f003 0306 	and.w	r3, r3, #6
 8002f1c:	2b04      	cmp	r3, #4
 8002f1e:	bf08      	it	eq
 8002f20:	1aad      	subeq	r5, r5, r2
 8002f22:	68a3      	ldr	r3, [r4, #8]
 8002f24:	6922      	ldr	r2, [r4, #16]
 8002f26:	bf0c      	ite	eq
 8002f28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f2c:	2500      	movne	r5, #0
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	bfc4      	itt	gt
 8002f32:	1a9b      	subgt	r3, r3, r2
 8002f34:	18ed      	addgt	r5, r5, r3
 8002f36:	2600      	movs	r6, #0
 8002f38:	341a      	adds	r4, #26
 8002f3a:	42b5      	cmp	r5, r6
 8002f3c:	d11a      	bne.n	8002f74 <_printf_common+0xc8>
 8002f3e:	2000      	movs	r0, #0
 8002f40:	e008      	b.n	8002f54 <_printf_common+0xa8>
 8002f42:	2301      	movs	r3, #1
 8002f44:	4652      	mov	r2, sl
 8002f46:	4649      	mov	r1, r9
 8002f48:	4638      	mov	r0, r7
 8002f4a:	47c0      	blx	r8
 8002f4c:	3001      	adds	r0, #1
 8002f4e:	d103      	bne.n	8002f58 <_printf_common+0xac>
 8002f50:	f04f 30ff 	mov.w	r0, #4294967295
 8002f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f58:	3501      	adds	r5, #1
 8002f5a:	e7c6      	b.n	8002eea <_printf_common+0x3e>
 8002f5c:	18e1      	adds	r1, r4, r3
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	2030      	movs	r0, #48	; 0x30
 8002f62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f66:	4422      	add	r2, r4
 8002f68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f70:	3302      	adds	r3, #2
 8002f72:	e7c7      	b.n	8002f04 <_printf_common+0x58>
 8002f74:	2301      	movs	r3, #1
 8002f76:	4622      	mov	r2, r4
 8002f78:	4649      	mov	r1, r9
 8002f7a:	4638      	mov	r0, r7
 8002f7c:	47c0      	blx	r8
 8002f7e:	3001      	adds	r0, #1
 8002f80:	d0e6      	beq.n	8002f50 <_printf_common+0xa4>
 8002f82:	3601      	adds	r6, #1
 8002f84:	e7d9      	b.n	8002f3a <_printf_common+0x8e>
	...

08002f88 <_printf_i>:
 8002f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f8c:	7e0f      	ldrb	r7, [r1, #24]
 8002f8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002f90:	2f78      	cmp	r7, #120	; 0x78
 8002f92:	4691      	mov	r9, r2
 8002f94:	4680      	mov	r8, r0
 8002f96:	460c      	mov	r4, r1
 8002f98:	469a      	mov	sl, r3
 8002f9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002f9e:	d807      	bhi.n	8002fb0 <_printf_i+0x28>
 8002fa0:	2f62      	cmp	r7, #98	; 0x62
 8002fa2:	d80a      	bhi.n	8002fba <_printf_i+0x32>
 8002fa4:	2f00      	cmp	r7, #0
 8002fa6:	f000 80d8 	beq.w	800315a <_printf_i+0x1d2>
 8002faa:	2f58      	cmp	r7, #88	; 0x58
 8002fac:	f000 80a3 	beq.w	80030f6 <_printf_i+0x16e>
 8002fb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002fb8:	e03a      	b.n	8003030 <_printf_i+0xa8>
 8002fba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002fbe:	2b15      	cmp	r3, #21
 8002fc0:	d8f6      	bhi.n	8002fb0 <_printf_i+0x28>
 8002fc2:	a101      	add	r1, pc, #4	; (adr r1, 8002fc8 <_printf_i+0x40>)
 8002fc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002fc8:	08003021 	.word	0x08003021
 8002fcc:	08003035 	.word	0x08003035
 8002fd0:	08002fb1 	.word	0x08002fb1
 8002fd4:	08002fb1 	.word	0x08002fb1
 8002fd8:	08002fb1 	.word	0x08002fb1
 8002fdc:	08002fb1 	.word	0x08002fb1
 8002fe0:	08003035 	.word	0x08003035
 8002fe4:	08002fb1 	.word	0x08002fb1
 8002fe8:	08002fb1 	.word	0x08002fb1
 8002fec:	08002fb1 	.word	0x08002fb1
 8002ff0:	08002fb1 	.word	0x08002fb1
 8002ff4:	08003141 	.word	0x08003141
 8002ff8:	08003065 	.word	0x08003065
 8002ffc:	08003123 	.word	0x08003123
 8003000:	08002fb1 	.word	0x08002fb1
 8003004:	08002fb1 	.word	0x08002fb1
 8003008:	08003163 	.word	0x08003163
 800300c:	08002fb1 	.word	0x08002fb1
 8003010:	08003065 	.word	0x08003065
 8003014:	08002fb1 	.word	0x08002fb1
 8003018:	08002fb1 	.word	0x08002fb1
 800301c:	0800312b 	.word	0x0800312b
 8003020:	682b      	ldr	r3, [r5, #0]
 8003022:	1d1a      	adds	r2, r3, #4
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	602a      	str	r2, [r5, #0]
 8003028:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800302c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003030:	2301      	movs	r3, #1
 8003032:	e0a3      	b.n	800317c <_printf_i+0x1f4>
 8003034:	6820      	ldr	r0, [r4, #0]
 8003036:	6829      	ldr	r1, [r5, #0]
 8003038:	0606      	lsls	r6, r0, #24
 800303a:	f101 0304 	add.w	r3, r1, #4
 800303e:	d50a      	bpl.n	8003056 <_printf_i+0xce>
 8003040:	680e      	ldr	r6, [r1, #0]
 8003042:	602b      	str	r3, [r5, #0]
 8003044:	2e00      	cmp	r6, #0
 8003046:	da03      	bge.n	8003050 <_printf_i+0xc8>
 8003048:	232d      	movs	r3, #45	; 0x2d
 800304a:	4276      	negs	r6, r6
 800304c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003050:	485e      	ldr	r0, [pc, #376]	; (80031cc <_printf_i+0x244>)
 8003052:	230a      	movs	r3, #10
 8003054:	e019      	b.n	800308a <_printf_i+0x102>
 8003056:	680e      	ldr	r6, [r1, #0]
 8003058:	602b      	str	r3, [r5, #0]
 800305a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800305e:	bf18      	it	ne
 8003060:	b236      	sxthne	r6, r6
 8003062:	e7ef      	b.n	8003044 <_printf_i+0xbc>
 8003064:	682b      	ldr	r3, [r5, #0]
 8003066:	6820      	ldr	r0, [r4, #0]
 8003068:	1d19      	adds	r1, r3, #4
 800306a:	6029      	str	r1, [r5, #0]
 800306c:	0601      	lsls	r1, r0, #24
 800306e:	d501      	bpl.n	8003074 <_printf_i+0xec>
 8003070:	681e      	ldr	r6, [r3, #0]
 8003072:	e002      	b.n	800307a <_printf_i+0xf2>
 8003074:	0646      	lsls	r6, r0, #25
 8003076:	d5fb      	bpl.n	8003070 <_printf_i+0xe8>
 8003078:	881e      	ldrh	r6, [r3, #0]
 800307a:	4854      	ldr	r0, [pc, #336]	; (80031cc <_printf_i+0x244>)
 800307c:	2f6f      	cmp	r7, #111	; 0x6f
 800307e:	bf0c      	ite	eq
 8003080:	2308      	moveq	r3, #8
 8003082:	230a      	movne	r3, #10
 8003084:	2100      	movs	r1, #0
 8003086:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800308a:	6865      	ldr	r5, [r4, #4]
 800308c:	60a5      	str	r5, [r4, #8]
 800308e:	2d00      	cmp	r5, #0
 8003090:	bfa2      	ittt	ge
 8003092:	6821      	ldrge	r1, [r4, #0]
 8003094:	f021 0104 	bicge.w	r1, r1, #4
 8003098:	6021      	strge	r1, [r4, #0]
 800309a:	b90e      	cbnz	r6, 80030a0 <_printf_i+0x118>
 800309c:	2d00      	cmp	r5, #0
 800309e:	d04d      	beq.n	800313c <_printf_i+0x1b4>
 80030a0:	4615      	mov	r5, r2
 80030a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80030a6:	fb03 6711 	mls	r7, r3, r1, r6
 80030aa:	5dc7      	ldrb	r7, [r0, r7]
 80030ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80030b0:	4637      	mov	r7, r6
 80030b2:	42bb      	cmp	r3, r7
 80030b4:	460e      	mov	r6, r1
 80030b6:	d9f4      	bls.n	80030a2 <_printf_i+0x11a>
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d10b      	bne.n	80030d4 <_printf_i+0x14c>
 80030bc:	6823      	ldr	r3, [r4, #0]
 80030be:	07de      	lsls	r6, r3, #31
 80030c0:	d508      	bpl.n	80030d4 <_printf_i+0x14c>
 80030c2:	6923      	ldr	r3, [r4, #16]
 80030c4:	6861      	ldr	r1, [r4, #4]
 80030c6:	4299      	cmp	r1, r3
 80030c8:	bfde      	ittt	le
 80030ca:	2330      	movle	r3, #48	; 0x30
 80030cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80030d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80030d4:	1b52      	subs	r2, r2, r5
 80030d6:	6122      	str	r2, [r4, #16]
 80030d8:	f8cd a000 	str.w	sl, [sp]
 80030dc:	464b      	mov	r3, r9
 80030de:	aa03      	add	r2, sp, #12
 80030e0:	4621      	mov	r1, r4
 80030e2:	4640      	mov	r0, r8
 80030e4:	f7ff fee2 	bl	8002eac <_printf_common>
 80030e8:	3001      	adds	r0, #1
 80030ea:	d14c      	bne.n	8003186 <_printf_i+0x1fe>
 80030ec:	f04f 30ff 	mov.w	r0, #4294967295
 80030f0:	b004      	add	sp, #16
 80030f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030f6:	4835      	ldr	r0, [pc, #212]	; (80031cc <_printf_i+0x244>)
 80030f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80030fc:	6829      	ldr	r1, [r5, #0]
 80030fe:	6823      	ldr	r3, [r4, #0]
 8003100:	f851 6b04 	ldr.w	r6, [r1], #4
 8003104:	6029      	str	r1, [r5, #0]
 8003106:	061d      	lsls	r5, r3, #24
 8003108:	d514      	bpl.n	8003134 <_printf_i+0x1ac>
 800310a:	07df      	lsls	r7, r3, #31
 800310c:	bf44      	itt	mi
 800310e:	f043 0320 	orrmi.w	r3, r3, #32
 8003112:	6023      	strmi	r3, [r4, #0]
 8003114:	b91e      	cbnz	r6, 800311e <_printf_i+0x196>
 8003116:	6823      	ldr	r3, [r4, #0]
 8003118:	f023 0320 	bic.w	r3, r3, #32
 800311c:	6023      	str	r3, [r4, #0]
 800311e:	2310      	movs	r3, #16
 8003120:	e7b0      	b.n	8003084 <_printf_i+0xfc>
 8003122:	6823      	ldr	r3, [r4, #0]
 8003124:	f043 0320 	orr.w	r3, r3, #32
 8003128:	6023      	str	r3, [r4, #0]
 800312a:	2378      	movs	r3, #120	; 0x78
 800312c:	4828      	ldr	r0, [pc, #160]	; (80031d0 <_printf_i+0x248>)
 800312e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003132:	e7e3      	b.n	80030fc <_printf_i+0x174>
 8003134:	0659      	lsls	r1, r3, #25
 8003136:	bf48      	it	mi
 8003138:	b2b6      	uxthmi	r6, r6
 800313a:	e7e6      	b.n	800310a <_printf_i+0x182>
 800313c:	4615      	mov	r5, r2
 800313e:	e7bb      	b.n	80030b8 <_printf_i+0x130>
 8003140:	682b      	ldr	r3, [r5, #0]
 8003142:	6826      	ldr	r6, [r4, #0]
 8003144:	6961      	ldr	r1, [r4, #20]
 8003146:	1d18      	adds	r0, r3, #4
 8003148:	6028      	str	r0, [r5, #0]
 800314a:	0635      	lsls	r5, r6, #24
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	d501      	bpl.n	8003154 <_printf_i+0x1cc>
 8003150:	6019      	str	r1, [r3, #0]
 8003152:	e002      	b.n	800315a <_printf_i+0x1d2>
 8003154:	0670      	lsls	r0, r6, #25
 8003156:	d5fb      	bpl.n	8003150 <_printf_i+0x1c8>
 8003158:	8019      	strh	r1, [r3, #0]
 800315a:	2300      	movs	r3, #0
 800315c:	6123      	str	r3, [r4, #16]
 800315e:	4615      	mov	r5, r2
 8003160:	e7ba      	b.n	80030d8 <_printf_i+0x150>
 8003162:	682b      	ldr	r3, [r5, #0]
 8003164:	1d1a      	adds	r2, r3, #4
 8003166:	602a      	str	r2, [r5, #0]
 8003168:	681d      	ldr	r5, [r3, #0]
 800316a:	6862      	ldr	r2, [r4, #4]
 800316c:	2100      	movs	r1, #0
 800316e:	4628      	mov	r0, r5
 8003170:	f7fd f80e 	bl	8000190 <memchr>
 8003174:	b108      	cbz	r0, 800317a <_printf_i+0x1f2>
 8003176:	1b40      	subs	r0, r0, r5
 8003178:	6060      	str	r0, [r4, #4]
 800317a:	6863      	ldr	r3, [r4, #4]
 800317c:	6123      	str	r3, [r4, #16]
 800317e:	2300      	movs	r3, #0
 8003180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003184:	e7a8      	b.n	80030d8 <_printf_i+0x150>
 8003186:	6923      	ldr	r3, [r4, #16]
 8003188:	462a      	mov	r2, r5
 800318a:	4649      	mov	r1, r9
 800318c:	4640      	mov	r0, r8
 800318e:	47d0      	blx	sl
 8003190:	3001      	adds	r0, #1
 8003192:	d0ab      	beq.n	80030ec <_printf_i+0x164>
 8003194:	6823      	ldr	r3, [r4, #0]
 8003196:	079b      	lsls	r3, r3, #30
 8003198:	d413      	bmi.n	80031c2 <_printf_i+0x23a>
 800319a:	68e0      	ldr	r0, [r4, #12]
 800319c:	9b03      	ldr	r3, [sp, #12]
 800319e:	4298      	cmp	r0, r3
 80031a0:	bfb8      	it	lt
 80031a2:	4618      	movlt	r0, r3
 80031a4:	e7a4      	b.n	80030f0 <_printf_i+0x168>
 80031a6:	2301      	movs	r3, #1
 80031a8:	4632      	mov	r2, r6
 80031aa:	4649      	mov	r1, r9
 80031ac:	4640      	mov	r0, r8
 80031ae:	47d0      	blx	sl
 80031b0:	3001      	adds	r0, #1
 80031b2:	d09b      	beq.n	80030ec <_printf_i+0x164>
 80031b4:	3501      	adds	r5, #1
 80031b6:	68e3      	ldr	r3, [r4, #12]
 80031b8:	9903      	ldr	r1, [sp, #12]
 80031ba:	1a5b      	subs	r3, r3, r1
 80031bc:	42ab      	cmp	r3, r5
 80031be:	dcf2      	bgt.n	80031a6 <_printf_i+0x21e>
 80031c0:	e7eb      	b.n	800319a <_printf_i+0x212>
 80031c2:	2500      	movs	r5, #0
 80031c4:	f104 0619 	add.w	r6, r4, #25
 80031c8:	e7f5      	b.n	80031b6 <_printf_i+0x22e>
 80031ca:	bf00      	nop
 80031cc:	08008b92 	.word	0x08008b92
 80031d0:	08008ba3 	.word	0x08008ba3

080031d4 <_scanf_float>:
 80031d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031d8:	b087      	sub	sp, #28
 80031da:	4617      	mov	r7, r2
 80031dc:	9303      	str	r3, [sp, #12]
 80031de:	688b      	ldr	r3, [r1, #8]
 80031e0:	1e5a      	subs	r2, r3, #1
 80031e2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80031e6:	bf83      	ittte	hi
 80031e8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80031ec:	195b      	addhi	r3, r3, r5
 80031ee:	9302      	strhi	r3, [sp, #8]
 80031f0:	2300      	movls	r3, #0
 80031f2:	bf86      	itte	hi
 80031f4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80031f8:	608b      	strhi	r3, [r1, #8]
 80031fa:	9302      	strls	r3, [sp, #8]
 80031fc:	680b      	ldr	r3, [r1, #0]
 80031fe:	468b      	mov	fp, r1
 8003200:	2500      	movs	r5, #0
 8003202:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003206:	f84b 3b1c 	str.w	r3, [fp], #28
 800320a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800320e:	4680      	mov	r8, r0
 8003210:	460c      	mov	r4, r1
 8003212:	465e      	mov	r6, fp
 8003214:	46aa      	mov	sl, r5
 8003216:	46a9      	mov	r9, r5
 8003218:	9501      	str	r5, [sp, #4]
 800321a:	68a2      	ldr	r2, [r4, #8]
 800321c:	b152      	cbz	r2, 8003234 <_scanf_float+0x60>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b4e      	cmp	r3, #78	; 0x4e
 8003224:	d864      	bhi.n	80032f0 <_scanf_float+0x11c>
 8003226:	2b40      	cmp	r3, #64	; 0x40
 8003228:	d83c      	bhi.n	80032a4 <_scanf_float+0xd0>
 800322a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800322e:	b2c8      	uxtb	r0, r1
 8003230:	280e      	cmp	r0, #14
 8003232:	d93a      	bls.n	80032aa <_scanf_float+0xd6>
 8003234:	f1b9 0f00 	cmp.w	r9, #0
 8003238:	d003      	beq.n	8003242 <_scanf_float+0x6e>
 800323a:	6823      	ldr	r3, [r4, #0]
 800323c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003240:	6023      	str	r3, [r4, #0]
 8003242:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003246:	f1ba 0f01 	cmp.w	sl, #1
 800324a:	f200 8113 	bhi.w	8003474 <_scanf_float+0x2a0>
 800324e:	455e      	cmp	r6, fp
 8003250:	f200 8105 	bhi.w	800345e <_scanf_float+0x28a>
 8003254:	2501      	movs	r5, #1
 8003256:	4628      	mov	r0, r5
 8003258:	b007      	add	sp, #28
 800325a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800325e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003262:	2a0d      	cmp	r2, #13
 8003264:	d8e6      	bhi.n	8003234 <_scanf_float+0x60>
 8003266:	a101      	add	r1, pc, #4	; (adr r1, 800326c <_scanf_float+0x98>)
 8003268:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800326c:	080033ab 	.word	0x080033ab
 8003270:	08003235 	.word	0x08003235
 8003274:	08003235 	.word	0x08003235
 8003278:	08003235 	.word	0x08003235
 800327c:	0800340b 	.word	0x0800340b
 8003280:	080033e3 	.word	0x080033e3
 8003284:	08003235 	.word	0x08003235
 8003288:	08003235 	.word	0x08003235
 800328c:	080033b9 	.word	0x080033b9
 8003290:	08003235 	.word	0x08003235
 8003294:	08003235 	.word	0x08003235
 8003298:	08003235 	.word	0x08003235
 800329c:	08003235 	.word	0x08003235
 80032a0:	08003371 	.word	0x08003371
 80032a4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80032a8:	e7db      	b.n	8003262 <_scanf_float+0x8e>
 80032aa:	290e      	cmp	r1, #14
 80032ac:	d8c2      	bhi.n	8003234 <_scanf_float+0x60>
 80032ae:	a001      	add	r0, pc, #4	; (adr r0, 80032b4 <_scanf_float+0xe0>)
 80032b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80032b4:	08003363 	.word	0x08003363
 80032b8:	08003235 	.word	0x08003235
 80032bc:	08003363 	.word	0x08003363
 80032c0:	080033f7 	.word	0x080033f7
 80032c4:	08003235 	.word	0x08003235
 80032c8:	08003311 	.word	0x08003311
 80032cc:	0800334d 	.word	0x0800334d
 80032d0:	0800334d 	.word	0x0800334d
 80032d4:	0800334d 	.word	0x0800334d
 80032d8:	0800334d 	.word	0x0800334d
 80032dc:	0800334d 	.word	0x0800334d
 80032e0:	0800334d 	.word	0x0800334d
 80032e4:	0800334d 	.word	0x0800334d
 80032e8:	0800334d 	.word	0x0800334d
 80032ec:	0800334d 	.word	0x0800334d
 80032f0:	2b6e      	cmp	r3, #110	; 0x6e
 80032f2:	d809      	bhi.n	8003308 <_scanf_float+0x134>
 80032f4:	2b60      	cmp	r3, #96	; 0x60
 80032f6:	d8b2      	bhi.n	800325e <_scanf_float+0x8a>
 80032f8:	2b54      	cmp	r3, #84	; 0x54
 80032fa:	d077      	beq.n	80033ec <_scanf_float+0x218>
 80032fc:	2b59      	cmp	r3, #89	; 0x59
 80032fe:	d199      	bne.n	8003234 <_scanf_float+0x60>
 8003300:	2d07      	cmp	r5, #7
 8003302:	d197      	bne.n	8003234 <_scanf_float+0x60>
 8003304:	2508      	movs	r5, #8
 8003306:	e029      	b.n	800335c <_scanf_float+0x188>
 8003308:	2b74      	cmp	r3, #116	; 0x74
 800330a:	d06f      	beq.n	80033ec <_scanf_float+0x218>
 800330c:	2b79      	cmp	r3, #121	; 0x79
 800330e:	e7f6      	b.n	80032fe <_scanf_float+0x12a>
 8003310:	6821      	ldr	r1, [r4, #0]
 8003312:	05c8      	lsls	r0, r1, #23
 8003314:	d51a      	bpl.n	800334c <_scanf_float+0x178>
 8003316:	9b02      	ldr	r3, [sp, #8]
 8003318:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800331c:	6021      	str	r1, [r4, #0]
 800331e:	f109 0901 	add.w	r9, r9, #1
 8003322:	b11b      	cbz	r3, 800332c <_scanf_float+0x158>
 8003324:	3b01      	subs	r3, #1
 8003326:	3201      	adds	r2, #1
 8003328:	9302      	str	r3, [sp, #8]
 800332a:	60a2      	str	r2, [r4, #8]
 800332c:	68a3      	ldr	r3, [r4, #8]
 800332e:	3b01      	subs	r3, #1
 8003330:	60a3      	str	r3, [r4, #8]
 8003332:	6923      	ldr	r3, [r4, #16]
 8003334:	3301      	adds	r3, #1
 8003336:	6123      	str	r3, [r4, #16]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3b01      	subs	r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	607b      	str	r3, [r7, #4]
 8003340:	f340 8084 	ble.w	800344c <_scanf_float+0x278>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	3301      	adds	r3, #1
 8003348:	603b      	str	r3, [r7, #0]
 800334a:	e766      	b.n	800321a <_scanf_float+0x46>
 800334c:	eb1a 0f05 	cmn.w	sl, r5
 8003350:	f47f af70 	bne.w	8003234 <_scanf_float+0x60>
 8003354:	6822      	ldr	r2, [r4, #0]
 8003356:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800335a:	6022      	str	r2, [r4, #0]
 800335c:	f806 3b01 	strb.w	r3, [r6], #1
 8003360:	e7e4      	b.n	800332c <_scanf_float+0x158>
 8003362:	6822      	ldr	r2, [r4, #0]
 8003364:	0610      	lsls	r0, r2, #24
 8003366:	f57f af65 	bpl.w	8003234 <_scanf_float+0x60>
 800336a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800336e:	e7f4      	b.n	800335a <_scanf_float+0x186>
 8003370:	f1ba 0f00 	cmp.w	sl, #0
 8003374:	d10e      	bne.n	8003394 <_scanf_float+0x1c0>
 8003376:	f1b9 0f00 	cmp.w	r9, #0
 800337a:	d10e      	bne.n	800339a <_scanf_float+0x1c6>
 800337c:	6822      	ldr	r2, [r4, #0]
 800337e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003382:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003386:	d108      	bne.n	800339a <_scanf_float+0x1c6>
 8003388:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800338c:	6022      	str	r2, [r4, #0]
 800338e:	f04f 0a01 	mov.w	sl, #1
 8003392:	e7e3      	b.n	800335c <_scanf_float+0x188>
 8003394:	f1ba 0f02 	cmp.w	sl, #2
 8003398:	d055      	beq.n	8003446 <_scanf_float+0x272>
 800339a:	2d01      	cmp	r5, #1
 800339c:	d002      	beq.n	80033a4 <_scanf_float+0x1d0>
 800339e:	2d04      	cmp	r5, #4
 80033a0:	f47f af48 	bne.w	8003234 <_scanf_float+0x60>
 80033a4:	3501      	adds	r5, #1
 80033a6:	b2ed      	uxtb	r5, r5
 80033a8:	e7d8      	b.n	800335c <_scanf_float+0x188>
 80033aa:	f1ba 0f01 	cmp.w	sl, #1
 80033ae:	f47f af41 	bne.w	8003234 <_scanf_float+0x60>
 80033b2:	f04f 0a02 	mov.w	sl, #2
 80033b6:	e7d1      	b.n	800335c <_scanf_float+0x188>
 80033b8:	b97d      	cbnz	r5, 80033da <_scanf_float+0x206>
 80033ba:	f1b9 0f00 	cmp.w	r9, #0
 80033be:	f47f af3c 	bne.w	800323a <_scanf_float+0x66>
 80033c2:	6822      	ldr	r2, [r4, #0]
 80033c4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80033c8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80033cc:	f47f af39 	bne.w	8003242 <_scanf_float+0x6e>
 80033d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80033d4:	6022      	str	r2, [r4, #0]
 80033d6:	2501      	movs	r5, #1
 80033d8:	e7c0      	b.n	800335c <_scanf_float+0x188>
 80033da:	2d03      	cmp	r5, #3
 80033dc:	d0e2      	beq.n	80033a4 <_scanf_float+0x1d0>
 80033de:	2d05      	cmp	r5, #5
 80033e0:	e7de      	b.n	80033a0 <_scanf_float+0x1cc>
 80033e2:	2d02      	cmp	r5, #2
 80033e4:	f47f af26 	bne.w	8003234 <_scanf_float+0x60>
 80033e8:	2503      	movs	r5, #3
 80033ea:	e7b7      	b.n	800335c <_scanf_float+0x188>
 80033ec:	2d06      	cmp	r5, #6
 80033ee:	f47f af21 	bne.w	8003234 <_scanf_float+0x60>
 80033f2:	2507      	movs	r5, #7
 80033f4:	e7b2      	b.n	800335c <_scanf_float+0x188>
 80033f6:	6822      	ldr	r2, [r4, #0]
 80033f8:	0591      	lsls	r1, r2, #22
 80033fa:	f57f af1b 	bpl.w	8003234 <_scanf_float+0x60>
 80033fe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003402:	6022      	str	r2, [r4, #0]
 8003404:	f8cd 9004 	str.w	r9, [sp, #4]
 8003408:	e7a8      	b.n	800335c <_scanf_float+0x188>
 800340a:	6822      	ldr	r2, [r4, #0]
 800340c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003410:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003414:	d006      	beq.n	8003424 <_scanf_float+0x250>
 8003416:	0550      	lsls	r0, r2, #21
 8003418:	f57f af0c 	bpl.w	8003234 <_scanf_float+0x60>
 800341c:	f1b9 0f00 	cmp.w	r9, #0
 8003420:	f43f af0f 	beq.w	8003242 <_scanf_float+0x6e>
 8003424:	0591      	lsls	r1, r2, #22
 8003426:	bf58      	it	pl
 8003428:	9901      	ldrpl	r1, [sp, #4]
 800342a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800342e:	bf58      	it	pl
 8003430:	eba9 0101 	subpl.w	r1, r9, r1
 8003434:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003438:	bf58      	it	pl
 800343a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800343e:	6022      	str	r2, [r4, #0]
 8003440:	f04f 0900 	mov.w	r9, #0
 8003444:	e78a      	b.n	800335c <_scanf_float+0x188>
 8003446:	f04f 0a03 	mov.w	sl, #3
 800344a:	e787      	b.n	800335c <_scanf_float+0x188>
 800344c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003450:	4639      	mov	r1, r7
 8003452:	4640      	mov	r0, r8
 8003454:	4798      	blx	r3
 8003456:	2800      	cmp	r0, #0
 8003458:	f43f aedf 	beq.w	800321a <_scanf_float+0x46>
 800345c:	e6ea      	b.n	8003234 <_scanf_float+0x60>
 800345e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003462:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003466:	463a      	mov	r2, r7
 8003468:	4640      	mov	r0, r8
 800346a:	4798      	blx	r3
 800346c:	6923      	ldr	r3, [r4, #16]
 800346e:	3b01      	subs	r3, #1
 8003470:	6123      	str	r3, [r4, #16]
 8003472:	e6ec      	b.n	800324e <_scanf_float+0x7a>
 8003474:	1e6b      	subs	r3, r5, #1
 8003476:	2b06      	cmp	r3, #6
 8003478:	d825      	bhi.n	80034c6 <_scanf_float+0x2f2>
 800347a:	2d02      	cmp	r5, #2
 800347c:	d836      	bhi.n	80034ec <_scanf_float+0x318>
 800347e:	455e      	cmp	r6, fp
 8003480:	f67f aee8 	bls.w	8003254 <_scanf_float+0x80>
 8003484:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003488:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800348c:	463a      	mov	r2, r7
 800348e:	4640      	mov	r0, r8
 8003490:	4798      	blx	r3
 8003492:	6923      	ldr	r3, [r4, #16]
 8003494:	3b01      	subs	r3, #1
 8003496:	6123      	str	r3, [r4, #16]
 8003498:	e7f1      	b.n	800347e <_scanf_float+0x2aa>
 800349a:	9802      	ldr	r0, [sp, #8]
 800349c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80034a0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80034a4:	9002      	str	r0, [sp, #8]
 80034a6:	463a      	mov	r2, r7
 80034a8:	4640      	mov	r0, r8
 80034aa:	4798      	blx	r3
 80034ac:	6923      	ldr	r3, [r4, #16]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	6123      	str	r3, [r4, #16]
 80034b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80034b6:	fa5f fa8a 	uxtb.w	sl, sl
 80034ba:	f1ba 0f02 	cmp.w	sl, #2
 80034be:	d1ec      	bne.n	800349a <_scanf_float+0x2c6>
 80034c0:	3d03      	subs	r5, #3
 80034c2:	b2ed      	uxtb	r5, r5
 80034c4:	1b76      	subs	r6, r6, r5
 80034c6:	6823      	ldr	r3, [r4, #0]
 80034c8:	05da      	lsls	r2, r3, #23
 80034ca:	d52f      	bpl.n	800352c <_scanf_float+0x358>
 80034cc:	055b      	lsls	r3, r3, #21
 80034ce:	d510      	bpl.n	80034f2 <_scanf_float+0x31e>
 80034d0:	455e      	cmp	r6, fp
 80034d2:	f67f aebf 	bls.w	8003254 <_scanf_float+0x80>
 80034d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80034da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80034de:	463a      	mov	r2, r7
 80034e0:	4640      	mov	r0, r8
 80034e2:	4798      	blx	r3
 80034e4:	6923      	ldr	r3, [r4, #16]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	6123      	str	r3, [r4, #16]
 80034ea:	e7f1      	b.n	80034d0 <_scanf_float+0x2fc>
 80034ec:	46aa      	mov	sl, r5
 80034ee:	9602      	str	r6, [sp, #8]
 80034f0:	e7df      	b.n	80034b2 <_scanf_float+0x2de>
 80034f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80034f6:	6923      	ldr	r3, [r4, #16]
 80034f8:	2965      	cmp	r1, #101	; 0x65
 80034fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80034fe:	f106 35ff 	add.w	r5, r6, #4294967295
 8003502:	6123      	str	r3, [r4, #16]
 8003504:	d00c      	beq.n	8003520 <_scanf_float+0x34c>
 8003506:	2945      	cmp	r1, #69	; 0x45
 8003508:	d00a      	beq.n	8003520 <_scanf_float+0x34c>
 800350a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800350e:	463a      	mov	r2, r7
 8003510:	4640      	mov	r0, r8
 8003512:	4798      	blx	r3
 8003514:	6923      	ldr	r3, [r4, #16]
 8003516:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800351a:	3b01      	subs	r3, #1
 800351c:	1eb5      	subs	r5, r6, #2
 800351e:	6123      	str	r3, [r4, #16]
 8003520:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003524:	463a      	mov	r2, r7
 8003526:	4640      	mov	r0, r8
 8003528:	4798      	blx	r3
 800352a:	462e      	mov	r6, r5
 800352c:	6825      	ldr	r5, [r4, #0]
 800352e:	f015 0510 	ands.w	r5, r5, #16
 8003532:	d159      	bne.n	80035e8 <_scanf_float+0x414>
 8003534:	7035      	strb	r5, [r6, #0]
 8003536:	6823      	ldr	r3, [r4, #0]
 8003538:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800353c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003540:	d11b      	bne.n	800357a <_scanf_float+0x3a6>
 8003542:	9b01      	ldr	r3, [sp, #4]
 8003544:	454b      	cmp	r3, r9
 8003546:	eba3 0209 	sub.w	r2, r3, r9
 800354a:	d123      	bne.n	8003594 <_scanf_float+0x3c0>
 800354c:	2200      	movs	r2, #0
 800354e:	4659      	mov	r1, fp
 8003550:	4640      	mov	r0, r8
 8003552:	f000 fe97 	bl	8004284 <_strtod_r>
 8003556:	6822      	ldr	r2, [r4, #0]
 8003558:	9b03      	ldr	r3, [sp, #12]
 800355a:	f012 0f02 	tst.w	r2, #2
 800355e:	ec57 6b10 	vmov	r6, r7, d0
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	d021      	beq.n	80035aa <_scanf_float+0x3d6>
 8003566:	9903      	ldr	r1, [sp, #12]
 8003568:	1d1a      	adds	r2, r3, #4
 800356a:	600a      	str	r2, [r1, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	e9c3 6700 	strd	r6, r7, [r3]
 8003572:	68e3      	ldr	r3, [r4, #12]
 8003574:	3301      	adds	r3, #1
 8003576:	60e3      	str	r3, [r4, #12]
 8003578:	e66d      	b.n	8003256 <_scanf_float+0x82>
 800357a:	9b04      	ldr	r3, [sp, #16]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0e5      	beq.n	800354c <_scanf_float+0x378>
 8003580:	9905      	ldr	r1, [sp, #20]
 8003582:	230a      	movs	r3, #10
 8003584:	462a      	mov	r2, r5
 8003586:	3101      	adds	r1, #1
 8003588:	4640      	mov	r0, r8
 800358a:	f000 ff03 	bl	8004394 <_strtol_r>
 800358e:	9b04      	ldr	r3, [sp, #16]
 8003590:	9e05      	ldr	r6, [sp, #20]
 8003592:	1ac2      	subs	r2, r0, r3
 8003594:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003598:	429e      	cmp	r6, r3
 800359a:	bf28      	it	cs
 800359c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80035a0:	4912      	ldr	r1, [pc, #72]	; (80035ec <_scanf_float+0x418>)
 80035a2:	4630      	mov	r0, r6
 80035a4:	f000 f82c 	bl	8003600 <siprintf>
 80035a8:	e7d0      	b.n	800354c <_scanf_float+0x378>
 80035aa:	9903      	ldr	r1, [sp, #12]
 80035ac:	f012 0f04 	tst.w	r2, #4
 80035b0:	f103 0204 	add.w	r2, r3, #4
 80035b4:	600a      	str	r2, [r1, #0]
 80035b6:	d1d9      	bne.n	800356c <_scanf_float+0x398>
 80035b8:	f8d3 8000 	ldr.w	r8, [r3]
 80035bc:	ee10 2a10 	vmov	r2, s0
 80035c0:	ee10 0a10 	vmov	r0, s0
 80035c4:	463b      	mov	r3, r7
 80035c6:	4639      	mov	r1, r7
 80035c8:	f7fd fa88 	bl	8000adc <__aeabi_dcmpun>
 80035cc:	b128      	cbz	r0, 80035da <_scanf_float+0x406>
 80035ce:	4808      	ldr	r0, [pc, #32]	; (80035f0 <_scanf_float+0x41c>)
 80035d0:	f000 f810 	bl	80035f4 <nanf>
 80035d4:	ed88 0a00 	vstr	s0, [r8]
 80035d8:	e7cb      	b.n	8003572 <_scanf_float+0x39e>
 80035da:	4630      	mov	r0, r6
 80035dc:	4639      	mov	r1, r7
 80035de:	f7fd fadb 	bl	8000b98 <__aeabi_d2f>
 80035e2:	f8c8 0000 	str.w	r0, [r8]
 80035e6:	e7c4      	b.n	8003572 <_scanf_float+0x39e>
 80035e8:	2500      	movs	r5, #0
 80035ea:	e634      	b.n	8003256 <_scanf_float+0x82>
 80035ec:	08008bb4 	.word	0x08008bb4
 80035f0:	08008fc0 	.word	0x08008fc0

080035f4 <nanf>:
 80035f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80035fc <nanf+0x8>
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	7fc00000 	.word	0x7fc00000

08003600 <siprintf>:
 8003600:	b40e      	push	{r1, r2, r3}
 8003602:	b500      	push	{lr}
 8003604:	b09c      	sub	sp, #112	; 0x70
 8003606:	ab1d      	add	r3, sp, #116	; 0x74
 8003608:	9002      	str	r0, [sp, #8]
 800360a:	9006      	str	r0, [sp, #24]
 800360c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003610:	4809      	ldr	r0, [pc, #36]	; (8003638 <siprintf+0x38>)
 8003612:	9107      	str	r1, [sp, #28]
 8003614:	9104      	str	r1, [sp, #16]
 8003616:	4909      	ldr	r1, [pc, #36]	; (800363c <siprintf+0x3c>)
 8003618:	f853 2b04 	ldr.w	r2, [r3], #4
 800361c:	9105      	str	r1, [sp, #20]
 800361e:	6800      	ldr	r0, [r0, #0]
 8003620:	9301      	str	r3, [sp, #4]
 8003622:	a902      	add	r1, sp, #8
 8003624:	f002 fed4 	bl	80063d0 <_svfiprintf_r>
 8003628:	9b02      	ldr	r3, [sp, #8]
 800362a:	2200      	movs	r2, #0
 800362c:	701a      	strb	r2, [r3, #0]
 800362e:	b01c      	add	sp, #112	; 0x70
 8003630:	f85d eb04 	ldr.w	lr, [sp], #4
 8003634:	b003      	add	sp, #12
 8003636:	4770      	bx	lr
 8003638:	20000010 	.word	0x20000010
 800363c:	ffff0208 	.word	0xffff0208

08003640 <sulp>:
 8003640:	b570      	push	{r4, r5, r6, lr}
 8003642:	4604      	mov	r4, r0
 8003644:	460d      	mov	r5, r1
 8003646:	ec45 4b10 	vmov	d0, r4, r5
 800364a:	4616      	mov	r6, r2
 800364c:	f002 fc1e 	bl	8005e8c <__ulp>
 8003650:	ec51 0b10 	vmov	r0, r1, d0
 8003654:	b17e      	cbz	r6, 8003676 <sulp+0x36>
 8003656:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800365a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800365e:	2b00      	cmp	r3, #0
 8003660:	dd09      	ble.n	8003676 <sulp+0x36>
 8003662:	051b      	lsls	r3, r3, #20
 8003664:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003668:	2400      	movs	r4, #0
 800366a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800366e:	4622      	mov	r2, r4
 8003670:	462b      	mov	r3, r5
 8003672:	f7fc ff99 	bl	80005a8 <__aeabi_dmul>
 8003676:	bd70      	pop	{r4, r5, r6, pc}

08003678 <_strtod_l>:
 8003678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800367c:	ed2d 8b02 	vpush	{d8}
 8003680:	b09d      	sub	sp, #116	; 0x74
 8003682:	461f      	mov	r7, r3
 8003684:	2300      	movs	r3, #0
 8003686:	9318      	str	r3, [sp, #96]	; 0x60
 8003688:	4ba2      	ldr	r3, [pc, #648]	; (8003914 <_strtod_l+0x29c>)
 800368a:	9213      	str	r2, [sp, #76]	; 0x4c
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	9305      	str	r3, [sp, #20]
 8003690:	4604      	mov	r4, r0
 8003692:	4618      	mov	r0, r3
 8003694:	4688      	mov	r8, r1
 8003696:	f7fc fd73 	bl	8000180 <strlen>
 800369a:	f04f 0a00 	mov.w	sl, #0
 800369e:	4605      	mov	r5, r0
 80036a0:	f04f 0b00 	mov.w	fp, #0
 80036a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80036a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80036aa:	781a      	ldrb	r2, [r3, #0]
 80036ac:	2a2b      	cmp	r2, #43	; 0x2b
 80036ae:	d04e      	beq.n	800374e <_strtod_l+0xd6>
 80036b0:	d83b      	bhi.n	800372a <_strtod_l+0xb2>
 80036b2:	2a0d      	cmp	r2, #13
 80036b4:	d834      	bhi.n	8003720 <_strtod_l+0xa8>
 80036b6:	2a08      	cmp	r2, #8
 80036b8:	d834      	bhi.n	8003724 <_strtod_l+0xac>
 80036ba:	2a00      	cmp	r2, #0
 80036bc:	d03e      	beq.n	800373c <_strtod_l+0xc4>
 80036be:	2300      	movs	r3, #0
 80036c0:	930a      	str	r3, [sp, #40]	; 0x28
 80036c2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80036c4:	7833      	ldrb	r3, [r6, #0]
 80036c6:	2b30      	cmp	r3, #48	; 0x30
 80036c8:	f040 80b0 	bne.w	800382c <_strtod_l+0x1b4>
 80036cc:	7873      	ldrb	r3, [r6, #1]
 80036ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80036d2:	2b58      	cmp	r3, #88	; 0x58
 80036d4:	d168      	bne.n	80037a8 <_strtod_l+0x130>
 80036d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036d8:	9301      	str	r3, [sp, #4]
 80036da:	ab18      	add	r3, sp, #96	; 0x60
 80036dc:	9702      	str	r7, [sp, #8]
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	4a8d      	ldr	r2, [pc, #564]	; (8003918 <_strtod_l+0x2a0>)
 80036e2:	ab19      	add	r3, sp, #100	; 0x64
 80036e4:	a917      	add	r1, sp, #92	; 0x5c
 80036e6:	4620      	mov	r0, r4
 80036e8:	f001 fd38 	bl	800515c <__gethex>
 80036ec:	f010 0707 	ands.w	r7, r0, #7
 80036f0:	4605      	mov	r5, r0
 80036f2:	d005      	beq.n	8003700 <_strtod_l+0x88>
 80036f4:	2f06      	cmp	r7, #6
 80036f6:	d12c      	bne.n	8003752 <_strtod_l+0xda>
 80036f8:	3601      	adds	r6, #1
 80036fa:	2300      	movs	r3, #0
 80036fc:	9617      	str	r6, [sp, #92]	; 0x5c
 80036fe:	930a      	str	r3, [sp, #40]	; 0x28
 8003700:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003702:	2b00      	cmp	r3, #0
 8003704:	f040 8590 	bne.w	8004228 <_strtod_l+0xbb0>
 8003708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800370a:	b1eb      	cbz	r3, 8003748 <_strtod_l+0xd0>
 800370c:	4652      	mov	r2, sl
 800370e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8003712:	ec43 2b10 	vmov	d0, r2, r3
 8003716:	b01d      	add	sp, #116	; 0x74
 8003718:	ecbd 8b02 	vpop	{d8}
 800371c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003720:	2a20      	cmp	r2, #32
 8003722:	d1cc      	bne.n	80036be <_strtod_l+0x46>
 8003724:	3301      	adds	r3, #1
 8003726:	9317      	str	r3, [sp, #92]	; 0x5c
 8003728:	e7be      	b.n	80036a8 <_strtod_l+0x30>
 800372a:	2a2d      	cmp	r2, #45	; 0x2d
 800372c:	d1c7      	bne.n	80036be <_strtod_l+0x46>
 800372e:	2201      	movs	r2, #1
 8003730:	920a      	str	r2, [sp, #40]	; 0x28
 8003732:	1c5a      	adds	r2, r3, #1
 8003734:	9217      	str	r2, [sp, #92]	; 0x5c
 8003736:	785b      	ldrb	r3, [r3, #1]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1c2      	bne.n	80036c2 <_strtod_l+0x4a>
 800373c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800373e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8003742:	2b00      	cmp	r3, #0
 8003744:	f040 856e 	bne.w	8004224 <_strtod_l+0xbac>
 8003748:	4652      	mov	r2, sl
 800374a:	465b      	mov	r3, fp
 800374c:	e7e1      	b.n	8003712 <_strtod_l+0x9a>
 800374e:	2200      	movs	r2, #0
 8003750:	e7ee      	b.n	8003730 <_strtod_l+0xb8>
 8003752:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8003754:	b13a      	cbz	r2, 8003766 <_strtod_l+0xee>
 8003756:	2135      	movs	r1, #53	; 0x35
 8003758:	a81a      	add	r0, sp, #104	; 0x68
 800375a:	f002 fca2 	bl	80060a2 <__copybits>
 800375e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003760:	4620      	mov	r0, r4
 8003762:	f002 f861 	bl	8005828 <_Bfree>
 8003766:	3f01      	subs	r7, #1
 8003768:	2f04      	cmp	r7, #4
 800376a:	d806      	bhi.n	800377a <_strtod_l+0x102>
 800376c:	e8df f007 	tbb	[pc, r7]
 8003770:	1714030a 	.word	0x1714030a
 8003774:	0a          	.byte	0x0a
 8003775:	00          	.byte	0x00
 8003776:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800377a:	0728      	lsls	r0, r5, #28
 800377c:	d5c0      	bpl.n	8003700 <_strtod_l+0x88>
 800377e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8003782:	e7bd      	b.n	8003700 <_strtod_l+0x88>
 8003784:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8003788:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800378a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800378e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003792:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8003796:	e7f0      	b.n	800377a <_strtod_l+0x102>
 8003798:	f8df b180 	ldr.w	fp, [pc, #384]	; 800391c <_strtod_l+0x2a4>
 800379c:	e7ed      	b.n	800377a <_strtod_l+0x102>
 800379e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80037a2:	f04f 3aff 	mov.w	sl, #4294967295
 80037a6:	e7e8      	b.n	800377a <_strtod_l+0x102>
 80037a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80037ae:	785b      	ldrb	r3, [r3, #1]
 80037b0:	2b30      	cmp	r3, #48	; 0x30
 80037b2:	d0f9      	beq.n	80037a8 <_strtod_l+0x130>
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0a3      	beq.n	8003700 <_strtod_l+0x88>
 80037b8:	2301      	movs	r3, #1
 80037ba:	f04f 0900 	mov.w	r9, #0
 80037be:	9304      	str	r3, [sp, #16]
 80037c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80037c2:	9308      	str	r3, [sp, #32]
 80037c4:	f8cd 901c 	str.w	r9, [sp, #28]
 80037c8:	464f      	mov	r7, r9
 80037ca:	220a      	movs	r2, #10
 80037cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80037ce:	7806      	ldrb	r6, [r0, #0]
 80037d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80037d4:	b2d9      	uxtb	r1, r3
 80037d6:	2909      	cmp	r1, #9
 80037d8:	d92a      	bls.n	8003830 <_strtod_l+0x1b8>
 80037da:	9905      	ldr	r1, [sp, #20]
 80037dc:	462a      	mov	r2, r5
 80037de:	f002 ff0f 	bl	8006600 <strncmp>
 80037e2:	b398      	cbz	r0, 800384c <_strtod_l+0x1d4>
 80037e4:	2000      	movs	r0, #0
 80037e6:	4632      	mov	r2, r6
 80037e8:	463d      	mov	r5, r7
 80037ea:	9005      	str	r0, [sp, #20]
 80037ec:	4603      	mov	r3, r0
 80037ee:	2a65      	cmp	r2, #101	; 0x65
 80037f0:	d001      	beq.n	80037f6 <_strtod_l+0x17e>
 80037f2:	2a45      	cmp	r2, #69	; 0x45
 80037f4:	d118      	bne.n	8003828 <_strtod_l+0x1b0>
 80037f6:	b91d      	cbnz	r5, 8003800 <_strtod_l+0x188>
 80037f8:	9a04      	ldr	r2, [sp, #16]
 80037fa:	4302      	orrs	r2, r0
 80037fc:	d09e      	beq.n	800373c <_strtod_l+0xc4>
 80037fe:	2500      	movs	r5, #0
 8003800:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8003804:	f108 0201 	add.w	r2, r8, #1
 8003808:	9217      	str	r2, [sp, #92]	; 0x5c
 800380a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800380e:	2a2b      	cmp	r2, #43	; 0x2b
 8003810:	d075      	beq.n	80038fe <_strtod_l+0x286>
 8003812:	2a2d      	cmp	r2, #45	; 0x2d
 8003814:	d07b      	beq.n	800390e <_strtod_l+0x296>
 8003816:	f04f 0c00 	mov.w	ip, #0
 800381a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800381e:	2909      	cmp	r1, #9
 8003820:	f240 8082 	bls.w	8003928 <_strtod_l+0x2b0>
 8003824:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8003828:	2600      	movs	r6, #0
 800382a:	e09d      	b.n	8003968 <_strtod_l+0x2f0>
 800382c:	2300      	movs	r3, #0
 800382e:	e7c4      	b.n	80037ba <_strtod_l+0x142>
 8003830:	2f08      	cmp	r7, #8
 8003832:	bfd8      	it	le
 8003834:	9907      	ldrle	r1, [sp, #28]
 8003836:	f100 0001 	add.w	r0, r0, #1
 800383a:	bfda      	itte	le
 800383c:	fb02 3301 	mlale	r3, r2, r1, r3
 8003840:	9307      	strle	r3, [sp, #28]
 8003842:	fb02 3909 	mlagt	r9, r2, r9, r3
 8003846:	3701      	adds	r7, #1
 8003848:	9017      	str	r0, [sp, #92]	; 0x5c
 800384a:	e7bf      	b.n	80037cc <_strtod_l+0x154>
 800384c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800384e:	195a      	adds	r2, r3, r5
 8003850:	9217      	str	r2, [sp, #92]	; 0x5c
 8003852:	5d5a      	ldrb	r2, [r3, r5]
 8003854:	2f00      	cmp	r7, #0
 8003856:	d037      	beq.n	80038c8 <_strtod_l+0x250>
 8003858:	9005      	str	r0, [sp, #20]
 800385a:	463d      	mov	r5, r7
 800385c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8003860:	2b09      	cmp	r3, #9
 8003862:	d912      	bls.n	800388a <_strtod_l+0x212>
 8003864:	2301      	movs	r3, #1
 8003866:	e7c2      	b.n	80037ee <_strtod_l+0x176>
 8003868:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	9217      	str	r2, [sp, #92]	; 0x5c
 800386e:	785a      	ldrb	r2, [r3, #1]
 8003870:	3001      	adds	r0, #1
 8003872:	2a30      	cmp	r2, #48	; 0x30
 8003874:	d0f8      	beq.n	8003868 <_strtod_l+0x1f0>
 8003876:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800387a:	2b08      	cmp	r3, #8
 800387c:	f200 84d9 	bhi.w	8004232 <_strtod_l+0xbba>
 8003880:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003882:	9005      	str	r0, [sp, #20]
 8003884:	2000      	movs	r0, #0
 8003886:	9308      	str	r3, [sp, #32]
 8003888:	4605      	mov	r5, r0
 800388a:	3a30      	subs	r2, #48	; 0x30
 800388c:	f100 0301 	add.w	r3, r0, #1
 8003890:	d014      	beq.n	80038bc <_strtod_l+0x244>
 8003892:	9905      	ldr	r1, [sp, #20]
 8003894:	4419      	add	r1, r3
 8003896:	9105      	str	r1, [sp, #20]
 8003898:	462b      	mov	r3, r5
 800389a:	eb00 0e05 	add.w	lr, r0, r5
 800389e:	210a      	movs	r1, #10
 80038a0:	4573      	cmp	r3, lr
 80038a2:	d113      	bne.n	80038cc <_strtod_l+0x254>
 80038a4:	182b      	adds	r3, r5, r0
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	f105 0501 	add.w	r5, r5, #1
 80038ac:	4405      	add	r5, r0
 80038ae:	dc1c      	bgt.n	80038ea <_strtod_l+0x272>
 80038b0:	9907      	ldr	r1, [sp, #28]
 80038b2:	230a      	movs	r3, #10
 80038b4:	fb03 2301 	mla	r3, r3, r1, r2
 80038b8:	9307      	str	r3, [sp, #28]
 80038ba:	2300      	movs	r3, #0
 80038bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80038be:	1c51      	adds	r1, r2, #1
 80038c0:	9117      	str	r1, [sp, #92]	; 0x5c
 80038c2:	7852      	ldrb	r2, [r2, #1]
 80038c4:	4618      	mov	r0, r3
 80038c6:	e7c9      	b.n	800385c <_strtod_l+0x1e4>
 80038c8:	4638      	mov	r0, r7
 80038ca:	e7d2      	b.n	8003872 <_strtod_l+0x1fa>
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	dc04      	bgt.n	80038da <_strtod_l+0x262>
 80038d0:	9e07      	ldr	r6, [sp, #28]
 80038d2:	434e      	muls	r6, r1
 80038d4:	9607      	str	r6, [sp, #28]
 80038d6:	3301      	adds	r3, #1
 80038d8:	e7e2      	b.n	80038a0 <_strtod_l+0x228>
 80038da:	f103 0c01 	add.w	ip, r3, #1
 80038de:	f1bc 0f10 	cmp.w	ip, #16
 80038e2:	bfd8      	it	le
 80038e4:	fb01 f909 	mulle.w	r9, r1, r9
 80038e8:	e7f5      	b.n	80038d6 <_strtod_l+0x25e>
 80038ea:	2d10      	cmp	r5, #16
 80038ec:	bfdc      	itt	le
 80038ee:	230a      	movle	r3, #10
 80038f0:	fb03 2909 	mlale	r9, r3, r9, r2
 80038f4:	e7e1      	b.n	80038ba <_strtod_l+0x242>
 80038f6:	2300      	movs	r3, #0
 80038f8:	9305      	str	r3, [sp, #20]
 80038fa:	2301      	movs	r3, #1
 80038fc:	e77c      	b.n	80037f8 <_strtod_l+0x180>
 80038fe:	f04f 0c00 	mov.w	ip, #0
 8003902:	f108 0202 	add.w	r2, r8, #2
 8003906:	9217      	str	r2, [sp, #92]	; 0x5c
 8003908:	f898 2002 	ldrb.w	r2, [r8, #2]
 800390c:	e785      	b.n	800381a <_strtod_l+0x1a2>
 800390e:	f04f 0c01 	mov.w	ip, #1
 8003912:	e7f6      	b.n	8003902 <_strtod_l+0x28a>
 8003914:	08008e08 	.word	0x08008e08
 8003918:	08008bbc 	.word	0x08008bbc
 800391c:	7ff00000 	.word	0x7ff00000
 8003920:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003922:	1c51      	adds	r1, r2, #1
 8003924:	9117      	str	r1, [sp, #92]	; 0x5c
 8003926:	7852      	ldrb	r2, [r2, #1]
 8003928:	2a30      	cmp	r2, #48	; 0x30
 800392a:	d0f9      	beq.n	8003920 <_strtod_l+0x2a8>
 800392c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8003930:	2908      	cmp	r1, #8
 8003932:	f63f af79 	bhi.w	8003828 <_strtod_l+0x1b0>
 8003936:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800393a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800393c:	9206      	str	r2, [sp, #24]
 800393e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003940:	1c51      	adds	r1, r2, #1
 8003942:	9117      	str	r1, [sp, #92]	; 0x5c
 8003944:	7852      	ldrb	r2, [r2, #1]
 8003946:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800394a:	2e09      	cmp	r6, #9
 800394c:	d937      	bls.n	80039be <_strtod_l+0x346>
 800394e:	9e06      	ldr	r6, [sp, #24]
 8003950:	1b89      	subs	r1, r1, r6
 8003952:	2908      	cmp	r1, #8
 8003954:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8003958:	dc02      	bgt.n	8003960 <_strtod_l+0x2e8>
 800395a:	4576      	cmp	r6, lr
 800395c:	bfa8      	it	ge
 800395e:	4676      	movge	r6, lr
 8003960:	f1bc 0f00 	cmp.w	ip, #0
 8003964:	d000      	beq.n	8003968 <_strtod_l+0x2f0>
 8003966:	4276      	negs	r6, r6
 8003968:	2d00      	cmp	r5, #0
 800396a:	d14d      	bne.n	8003a08 <_strtod_l+0x390>
 800396c:	9904      	ldr	r1, [sp, #16]
 800396e:	4301      	orrs	r1, r0
 8003970:	f47f aec6 	bne.w	8003700 <_strtod_l+0x88>
 8003974:	2b00      	cmp	r3, #0
 8003976:	f47f aee1 	bne.w	800373c <_strtod_l+0xc4>
 800397a:	2a69      	cmp	r2, #105	; 0x69
 800397c:	d027      	beq.n	80039ce <_strtod_l+0x356>
 800397e:	dc24      	bgt.n	80039ca <_strtod_l+0x352>
 8003980:	2a49      	cmp	r2, #73	; 0x49
 8003982:	d024      	beq.n	80039ce <_strtod_l+0x356>
 8003984:	2a4e      	cmp	r2, #78	; 0x4e
 8003986:	f47f aed9 	bne.w	800373c <_strtod_l+0xc4>
 800398a:	499f      	ldr	r1, [pc, #636]	; (8003c08 <_strtod_l+0x590>)
 800398c:	a817      	add	r0, sp, #92	; 0x5c
 800398e:	f001 fe3d 	bl	800560c <__match>
 8003992:	2800      	cmp	r0, #0
 8003994:	f43f aed2 	beq.w	800373c <_strtod_l+0xc4>
 8003998:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b28      	cmp	r3, #40	; 0x28
 800399e:	d12d      	bne.n	80039fc <_strtod_l+0x384>
 80039a0:	499a      	ldr	r1, [pc, #616]	; (8003c0c <_strtod_l+0x594>)
 80039a2:	aa1a      	add	r2, sp, #104	; 0x68
 80039a4:	a817      	add	r0, sp, #92	; 0x5c
 80039a6:	f001 fe45 	bl	8005634 <__hexnan>
 80039aa:	2805      	cmp	r0, #5
 80039ac:	d126      	bne.n	80039fc <_strtod_l+0x384>
 80039ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80039b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80039b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80039b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80039bc:	e6a0      	b.n	8003700 <_strtod_l+0x88>
 80039be:	210a      	movs	r1, #10
 80039c0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80039c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80039c8:	e7b9      	b.n	800393e <_strtod_l+0x2c6>
 80039ca:	2a6e      	cmp	r2, #110	; 0x6e
 80039cc:	e7db      	b.n	8003986 <_strtod_l+0x30e>
 80039ce:	4990      	ldr	r1, [pc, #576]	; (8003c10 <_strtod_l+0x598>)
 80039d0:	a817      	add	r0, sp, #92	; 0x5c
 80039d2:	f001 fe1b 	bl	800560c <__match>
 80039d6:	2800      	cmp	r0, #0
 80039d8:	f43f aeb0 	beq.w	800373c <_strtod_l+0xc4>
 80039dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80039de:	498d      	ldr	r1, [pc, #564]	; (8003c14 <_strtod_l+0x59c>)
 80039e0:	3b01      	subs	r3, #1
 80039e2:	a817      	add	r0, sp, #92	; 0x5c
 80039e4:	9317      	str	r3, [sp, #92]	; 0x5c
 80039e6:	f001 fe11 	bl	800560c <__match>
 80039ea:	b910      	cbnz	r0, 80039f2 <_strtod_l+0x37a>
 80039ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80039ee:	3301      	adds	r3, #1
 80039f0:	9317      	str	r3, [sp, #92]	; 0x5c
 80039f2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8003c24 <_strtod_l+0x5ac>
 80039f6:	f04f 0a00 	mov.w	sl, #0
 80039fa:	e681      	b.n	8003700 <_strtod_l+0x88>
 80039fc:	4886      	ldr	r0, [pc, #536]	; (8003c18 <_strtod_l+0x5a0>)
 80039fe:	f002 fde7 	bl	80065d0 <nan>
 8003a02:	ec5b ab10 	vmov	sl, fp, d0
 8003a06:	e67b      	b.n	8003700 <_strtod_l+0x88>
 8003a08:	9b05      	ldr	r3, [sp, #20]
 8003a0a:	9807      	ldr	r0, [sp, #28]
 8003a0c:	1af3      	subs	r3, r6, r3
 8003a0e:	2f00      	cmp	r7, #0
 8003a10:	bf08      	it	eq
 8003a12:	462f      	moveq	r7, r5
 8003a14:	2d10      	cmp	r5, #16
 8003a16:	9306      	str	r3, [sp, #24]
 8003a18:	46a8      	mov	r8, r5
 8003a1a:	bfa8      	it	ge
 8003a1c:	f04f 0810 	movge.w	r8, #16
 8003a20:	f7fc fd48 	bl	80004b4 <__aeabi_ui2d>
 8003a24:	2d09      	cmp	r5, #9
 8003a26:	4682      	mov	sl, r0
 8003a28:	468b      	mov	fp, r1
 8003a2a:	dd13      	ble.n	8003a54 <_strtod_l+0x3dc>
 8003a2c:	4b7b      	ldr	r3, [pc, #492]	; (8003c1c <_strtod_l+0x5a4>)
 8003a2e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8003a32:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003a36:	f7fc fdb7 	bl	80005a8 <__aeabi_dmul>
 8003a3a:	4682      	mov	sl, r0
 8003a3c:	4648      	mov	r0, r9
 8003a3e:	468b      	mov	fp, r1
 8003a40:	f7fc fd38 	bl	80004b4 <__aeabi_ui2d>
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4650      	mov	r0, sl
 8003a4a:	4659      	mov	r1, fp
 8003a4c:	f7fc fbf6 	bl	800023c <__adddf3>
 8003a50:	4682      	mov	sl, r0
 8003a52:	468b      	mov	fp, r1
 8003a54:	2d0f      	cmp	r5, #15
 8003a56:	dc38      	bgt.n	8003aca <_strtod_l+0x452>
 8003a58:	9b06      	ldr	r3, [sp, #24]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f43f ae50 	beq.w	8003700 <_strtod_l+0x88>
 8003a60:	dd24      	ble.n	8003aac <_strtod_l+0x434>
 8003a62:	2b16      	cmp	r3, #22
 8003a64:	dc0b      	bgt.n	8003a7e <_strtod_l+0x406>
 8003a66:	496d      	ldr	r1, [pc, #436]	; (8003c1c <_strtod_l+0x5a4>)
 8003a68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003a6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a70:	4652      	mov	r2, sl
 8003a72:	465b      	mov	r3, fp
 8003a74:	f7fc fd98 	bl	80005a8 <__aeabi_dmul>
 8003a78:	4682      	mov	sl, r0
 8003a7a:	468b      	mov	fp, r1
 8003a7c:	e640      	b.n	8003700 <_strtod_l+0x88>
 8003a7e:	9a06      	ldr	r2, [sp, #24]
 8003a80:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8003a84:	4293      	cmp	r3, r2
 8003a86:	db20      	blt.n	8003aca <_strtod_l+0x452>
 8003a88:	4c64      	ldr	r4, [pc, #400]	; (8003c1c <_strtod_l+0x5a4>)
 8003a8a:	f1c5 050f 	rsb	r5, r5, #15
 8003a8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8003a92:	4652      	mov	r2, sl
 8003a94:	465b      	mov	r3, fp
 8003a96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a9a:	f7fc fd85 	bl	80005a8 <__aeabi_dmul>
 8003a9e:	9b06      	ldr	r3, [sp, #24]
 8003aa0:	1b5d      	subs	r5, r3, r5
 8003aa2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8003aa6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003aaa:	e7e3      	b.n	8003a74 <_strtod_l+0x3fc>
 8003aac:	9b06      	ldr	r3, [sp, #24]
 8003aae:	3316      	adds	r3, #22
 8003ab0:	db0b      	blt.n	8003aca <_strtod_l+0x452>
 8003ab2:	9b05      	ldr	r3, [sp, #20]
 8003ab4:	1b9e      	subs	r6, r3, r6
 8003ab6:	4b59      	ldr	r3, [pc, #356]	; (8003c1c <_strtod_l+0x5a4>)
 8003ab8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8003abc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003ac0:	4650      	mov	r0, sl
 8003ac2:	4659      	mov	r1, fp
 8003ac4:	f7fc fe9a 	bl	80007fc <__aeabi_ddiv>
 8003ac8:	e7d6      	b.n	8003a78 <_strtod_l+0x400>
 8003aca:	9b06      	ldr	r3, [sp, #24]
 8003acc:	eba5 0808 	sub.w	r8, r5, r8
 8003ad0:	4498      	add	r8, r3
 8003ad2:	f1b8 0f00 	cmp.w	r8, #0
 8003ad6:	dd74      	ble.n	8003bc2 <_strtod_l+0x54a>
 8003ad8:	f018 030f 	ands.w	r3, r8, #15
 8003adc:	d00a      	beq.n	8003af4 <_strtod_l+0x47c>
 8003ade:	494f      	ldr	r1, [pc, #316]	; (8003c1c <_strtod_l+0x5a4>)
 8003ae0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003ae4:	4652      	mov	r2, sl
 8003ae6:	465b      	mov	r3, fp
 8003ae8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003aec:	f7fc fd5c 	bl	80005a8 <__aeabi_dmul>
 8003af0:	4682      	mov	sl, r0
 8003af2:	468b      	mov	fp, r1
 8003af4:	f038 080f 	bics.w	r8, r8, #15
 8003af8:	d04f      	beq.n	8003b9a <_strtod_l+0x522>
 8003afa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8003afe:	dd22      	ble.n	8003b46 <_strtod_l+0x4ce>
 8003b00:	2500      	movs	r5, #0
 8003b02:	462e      	mov	r6, r5
 8003b04:	9507      	str	r5, [sp, #28]
 8003b06:	9505      	str	r5, [sp, #20]
 8003b08:	2322      	movs	r3, #34	; 0x22
 8003b0a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8003c24 <_strtod_l+0x5ac>
 8003b0e:	6023      	str	r3, [r4, #0]
 8003b10:	f04f 0a00 	mov.w	sl, #0
 8003b14:	9b07      	ldr	r3, [sp, #28]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f43f adf2 	beq.w	8003700 <_strtod_l+0x88>
 8003b1c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003b1e:	4620      	mov	r0, r4
 8003b20:	f001 fe82 	bl	8005828 <_Bfree>
 8003b24:	9905      	ldr	r1, [sp, #20]
 8003b26:	4620      	mov	r0, r4
 8003b28:	f001 fe7e 	bl	8005828 <_Bfree>
 8003b2c:	4631      	mov	r1, r6
 8003b2e:	4620      	mov	r0, r4
 8003b30:	f001 fe7a 	bl	8005828 <_Bfree>
 8003b34:	9907      	ldr	r1, [sp, #28]
 8003b36:	4620      	mov	r0, r4
 8003b38:	f001 fe76 	bl	8005828 <_Bfree>
 8003b3c:	4629      	mov	r1, r5
 8003b3e:	4620      	mov	r0, r4
 8003b40:	f001 fe72 	bl	8005828 <_Bfree>
 8003b44:	e5dc      	b.n	8003700 <_strtod_l+0x88>
 8003b46:	4b36      	ldr	r3, [pc, #216]	; (8003c20 <_strtod_l+0x5a8>)
 8003b48:	9304      	str	r3, [sp, #16]
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8003b50:	4650      	mov	r0, sl
 8003b52:	4659      	mov	r1, fp
 8003b54:	4699      	mov	r9, r3
 8003b56:	f1b8 0f01 	cmp.w	r8, #1
 8003b5a:	dc21      	bgt.n	8003ba0 <_strtod_l+0x528>
 8003b5c:	b10b      	cbz	r3, 8003b62 <_strtod_l+0x4ea>
 8003b5e:	4682      	mov	sl, r0
 8003b60:	468b      	mov	fp, r1
 8003b62:	4b2f      	ldr	r3, [pc, #188]	; (8003c20 <_strtod_l+0x5a8>)
 8003b64:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8003b68:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8003b6c:	4652      	mov	r2, sl
 8003b6e:	465b      	mov	r3, fp
 8003b70:	e9d9 0100 	ldrd	r0, r1, [r9]
 8003b74:	f7fc fd18 	bl	80005a8 <__aeabi_dmul>
 8003b78:	4b2a      	ldr	r3, [pc, #168]	; (8003c24 <_strtod_l+0x5ac>)
 8003b7a:	460a      	mov	r2, r1
 8003b7c:	400b      	ands	r3, r1
 8003b7e:	492a      	ldr	r1, [pc, #168]	; (8003c28 <_strtod_l+0x5b0>)
 8003b80:	428b      	cmp	r3, r1
 8003b82:	4682      	mov	sl, r0
 8003b84:	d8bc      	bhi.n	8003b00 <_strtod_l+0x488>
 8003b86:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003b8a:	428b      	cmp	r3, r1
 8003b8c:	bf86      	itte	hi
 8003b8e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8003c2c <_strtod_l+0x5b4>
 8003b92:	f04f 3aff 	movhi.w	sl, #4294967295
 8003b96:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	9304      	str	r3, [sp, #16]
 8003b9e:	e084      	b.n	8003caa <_strtod_l+0x632>
 8003ba0:	f018 0f01 	tst.w	r8, #1
 8003ba4:	d005      	beq.n	8003bb2 <_strtod_l+0x53a>
 8003ba6:	9b04      	ldr	r3, [sp, #16]
 8003ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bac:	f7fc fcfc 	bl	80005a8 <__aeabi_dmul>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	9a04      	ldr	r2, [sp, #16]
 8003bb4:	3208      	adds	r2, #8
 8003bb6:	f109 0901 	add.w	r9, r9, #1
 8003bba:	ea4f 0868 	mov.w	r8, r8, asr #1
 8003bbe:	9204      	str	r2, [sp, #16]
 8003bc0:	e7c9      	b.n	8003b56 <_strtod_l+0x4de>
 8003bc2:	d0ea      	beq.n	8003b9a <_strtod_l+0x522>
 8003bc4:	f1c8 0800 	rsb	r8, r8, #0
 8003bc8:	f018 020f 	ands.w	r2, r8, #15
 8003bcc:	d00a      	beq.n	8003be4 <_strtod_l+0x56c>
 8003bce:	4b13      	ldr	r3, [pc, #76]	; (8003c1c <_strtod_l+0x5a4>)
 8003bd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003bd4:	4650      	mov	r0, sl
 8003bd6:	4659      	mov	r1, fp
 8003bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bdc:	f7fc fe0e 	bl	80007fc <__aeabi_ddiv>
 8003be0:	4682      	mov	sl, r0
 8003be2:	468b      	mov	fp, r1
 8003be4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8003be8:	d0d7      	beq.n	8003b9a <_strtod_l+0x522>
 8003bea:	f1b8 0f1f 	cmp.w	r8, #31
 8003bee:	dd1f      	ble.n	8003c30 <_strtod_l+0x5b8>
 8003bf0:	2500      	movs	r5, #0
 8003bf2:	462e      	mov	r6, r5
 8003bf4:	9507      	str	r5, [sp, #28]
 8003bf6:	9505      	str	r5, [sp, #20]
 8003bf8:	2322      	movs	r3, #34	; 0x22
 8003bfa:	f04f 0a00 	mov.w	sl, #0
 8003bfe:	f04f 0b00 	mov.w	fp, #0
 8003c02:	6023      	str	r3, [r4, #0]
 8003c04:	e786      	b.n	8003b14 <_strtod_l+0x49c>
 8003c06:	bf00      	nop
 8003c08:	08008b8d 	.word	0x08008b8d
 8003c0c:	08008bd0 	.word	0x08008bd0
 8003c10:	08008b85 	.word	0x08008b85
 8003c14:	08008d14 	.word	0x08008d14
 8003c18:	08008fc0 	.word	0x08008fc0
 8003c1c:	08008ea0 	.word	0x08008ea0
 8003c20:	08008e78 	.word	0x08008e78
 8003c24:	7ff00000 	.word	0x7ff00000
 8003c28:	7ca00000 	.word	0x7ca00000
 8003c2c:	7fefffff 	.word	0x7fefffff
 8003c30:	f018 0310 	ands.w	r3, r8, #16
 8003c34:	bf18      	it	ne
 8003c36:	236a      	movne	r3, #106	; 0x6a
 8003c38:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8003fe8 <_strtod_l+0x970>
 8003c3c:	9304      	str	r3, [sp, #16]
 8003c3e:	4650      	mov	r0, sl
 8003c40:	4659      	mov	r1, fp
 8003c42:	2300      	movs	r3, #0
 8003c44:	f018 0f01 	tst.w	r8, #1
 8003c48:	d004      	beq.n	8003c54 <_strtod_l+0x5dc>
 8003c4a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8003c4e:	f7fc fcab 	bl	80005a8 <__aeabi_dmul>
 8003c52:	2301      	movs	r3, #1
 8003c54:	ea5f 0868 	movs.w	r8, r8, asr #1
 8003c58:	f109 0908 	add.w	r9, r9, #8
 8003c5c:	d1f2      	bne.n	8003c44 <_strtod_l+0x5cc>
 8003c5e:	b10b      	cbz	r3, 8003c64 <_strtod_l+0x5ec>
 8003c60:	4682      	mov	sl, r0
 8003c62:	468b      	mov	fp, r1
 8003c64:	9b04      	ldr	r3, [sp, #16]
 8003c66:	b1c3      	cbz	r3, 8003c9a <_strtod_l+0x622>
 8003c68:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8003c6c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	4659      	mov	r1, fp
 8003c74:	dd11      	ble.n	8003c9a <_strtod_l+0x622>
 8003c76:	2b1f      	cmp	r3, #31
 8003c78:	f340 8124 	ble.w	8003ec4 <_strtod_l+0x84c>
 8003c7c:	2b34      	cmp	r3, #52	; 0x34
 8003c7e:	bfde      	ittt	le
 8003c80:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8003c84:	f04f 33ff 	movle.w	r3, #4294967295
 8003c88:	fa03 f202 	lslle.w	r2, r3, r2
 8003c8c:	f04f 0a00 	mov.w	sl, #0
 8003c90:	bfcc      	ite	gt
 8003c92:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8003c96:	ea02 0b01 	andle.w	fp, r2, r1
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	4650      	mov	r0, sl
 8003ca0:	4659      	mov	r1, fp
 8003ca2:	f7fc fee9 	bl	8000a78 <__aeabi_dcmpeq>
 8003ca6:	2800      	cmp	r0, #0
 8003ca8:	d1a2      	bne.n	8003bf0 <_strtod_l+0x578>
 8003caa:	9b07      	ldr	r3, [sp, #28]
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	9908      	ldr	r1, [sp, #32]
 8003cb0:	462b      	mov	r3, r5
 8003cb2:	463a      	mov	r2, r7
 8003cb4:	4620      	mov	r0, r4
 8003cb6:	f001 fe1f 	bl	80058f8 <__s2b>
 8003cba:	9007      	str	r0, [sp, #28]
 8003cbc:	2800      	cmp	r0, #0
 8003cbe:	f43f af1f 	beq.w	8003b00 <_strtod_l+0x488>
 8003cc2:	9b05      	ldr	r3, [sp, #20]
 8003cc4:	1b9e      	subs	r6, r3, r6
 8003cc6:	9b06      	ldr	r3, [sp, #24]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	bfb4      	ite	lt
 8003ccc:	4633      	movlt	r3, r6
 8003cce:	2300      	movge	r3, #0
 8003cd0:	930c      	str	r3, [sp, #48]	; 0x30
 8003cd2:	9b06      	ldr	r3, [sp, #24]
 8003cd4:	2500      	movs	r5, #0
 8003cd6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003cda:	9312      	str	r3, [sp, #72]	; 0x48
 8003cdc:	462e      	mov	r6, r5
 8003cde:	9b07      	ldr	r3, [sp, #28]
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	6859      	ldr	r1, [r3, #4]
 8003ce4:	f001 fd60 	bl	80057a8 <_Balloc>
 8003ce8:	9005      	str	r0, [sp, #20]
 8003cea:	2800      	cmp	r0, #0
 8003cec:	f43f af0c 	beq.w	8003b08 <_strtod_l+0x490>
 8003cf0:	9b07      	ldr	r3, [sp, #28]
 8003cf2:	691a      	ldr	r2, [r3, #16]
 8003cf4:	3202      	adds	r2, #2
 8003cf6:	f103 010c 	add.w	r1, r3, #12
 8003cfa:	0092      	lsls	r2, r2, #2
 8003cfc:	300c      	adds	r0, #12
 8003cfe:	f7fe fde9 	bl	80028d4 <memcpy>
 8003d02:	ec4b ab10 	vmov	d0, sl, fp
 8003d06:	aa1a      	add	r2, sp, #104	; 0x68
 8003d08:	a919      	add	r1, sp, #100	; 0x64
 8003d0a:	4620      	mov	r0, r4
 8003d0c:	f002 f93a 	bl	8005f84 <__d2b>
 8003d10:	ec4b ab18 	vmov	d8, sl, fp
 8003d14:	9018      	str	r0, [sp, #96]	; 0x60
 8003d16:	2800      	cmp	r0, #0
 8003d18:	f43f aef6 	beq.w	8003b08 <_strtod_l+0x490>
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	4620      	mov	r0, r4
 8003d20:	f001 fe84 	bl	8005a2c <__i2b>
 8003d24:	4606      	mov	r6, r0
 8003d26:	2800      	cmp	r0, #0
 8003d28:	f43f aeee 	beq.w	8003b08 <_strtod_l+0x490>
 8003d2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003d2e:	9904      	ldr	r1, [sp, #16]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	bfab      	itete	ge
 8003d34:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8003d36:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8003d38:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8003d3a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8003d3e:	bfac      	ite	ge
 8003d40:	eb03 0902 	addge.w	r9, r3, r2
 8003d44:	1ad7      	sublt	r7, r2, r3
 8003d46:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003d48:	eba3 0801 	sub.w	r8, r3, r1
 8003d4c:	4490      	add	r8, r2
 8003d4e:	4ba1      	ldr	r3, [pc, #644]	; (8003fd4 <_strtod_l+0x95c>)
 8003d50:	f108 38ff 	add.w	r8, r8, #4294967295
 8003d54:	4598      	cmp	r8, r3
 8003d56:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8003d5a:	f280 80c7 	bge.w	8003eec <_strtod_l+0x874>
 8003d5e:	eba3 0308 	sub.w	r3, r3, r8
 8003d62:	2b1f      	cmp	r3, #31
 8003d64:	eba2 0203 	sub.w	r2, r2, r3
 8003d68:	f04f 0101 	mov.w	r1, #1
 8003d6c:	f300 80b1 	bgt.w	8003ed2 <_strtod_l+0x85a>
 8003d70:	fa01 f303 	lsl.w	r3, r1, r3
 8003d74:	930d      	str	r3, [sp, #52]	; 0x34
 8003d76:	2300      	movs	r3, #0
 8003d78:	9308      	str	r3, [sp, #32]
 8003d7a:	eb09 0802 	add.w	r8, r9, r2
 8003d7e:	9b04      	ldr	r3, [sp, #16]
 8003d80:	45c1      	cmp	r9, r8
 8003d82:	4417      	add	r7, r2
 8003d84:	441f      	add	r7, r3
 8003d86:	464b      	mov	r3, r9
 8003d88:	bfa8      	it	ge
 8003d8a:	4643      	movge	r3, r8
 8003d8c:	42bb      	cmp	r3, r7
 8003d8e:	bfa8      	it	ge
 8003d90:	463b      	movge	r3, r7
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	bfc2      	ittt	gt
 8003d96:	eba8 0803 	subgt.w	r8, r8, r3
 8003d9a:	1aff      	subgt	r7, r7, r3
 8003d9c:	eba9 0903 	subgt.w	r9, r9, r3
 8003da0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	dd17      	ble.n	8003dd6 <_strtod_l+0x75e>
 8003da6:	4631      	mov	r1, r6
 8003da8:	461a      	mov	r2, r3
 8003daa:	4620      	mov	r0, r4
 8003dac:	f001 fefe 	bl	8005bac <__pow5mult>
 8003db0:	4606      	mov	r6, r0
 8003db2:	2800      	cmp	r0, #0
 8003db4:	f43f aea8 	beq.w	8003b08 <_strtod_l+0x490>
 8003db8:	4601      	mov	r1, r0
 8003dba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8003dbc:	4620      	mov	r0, r4
 8003dbe:	f001 fe4b 	bl	8005a58 <__multiply>
 8003dc2:	900b      	str	r0, [sp, #44]	; 0x2c
 8003dc4:	2800      	cmp	r0, #0
 8003dc6:	f43f ae9f 	beq.w	8003b08 <_strtod_l+0x490>
 8003dca:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003dcc:	4620      	mov	r0, r4
 8003dce:	f001 fd2b 	bl	8005828 <_Bfree>
 8003dd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003dd4:	9318      	str	r3, [sp, #96]	; 0x60
 8003dd6:	f1b8 0f00 	cmp.w	r8, #0
 8003dda:	f300 808c 	bgt.w	8003ef6 <_strtod_l+0x87e>
 8003dde:	9b06      	ldr	r3, [sp, #24]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	dd08      	ble.n	8003df6 <_strtod_l+0x77e>
 8003de4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003de6:	9905      	ldr	r1, [sp, #20]
 8003de8:	4620      	mov	r0, r4
 8003dea:	f001 fedf 	bl	8005bac <__pow5mult>
 8003dee:	9005      	str	r0, [sp, #20]
 8003df0:	2800      	cmp	r0, #0
 8003df2:	f43f ae89 	beq.w	8003b08 <_strtod_l+0x490>
 8003df6:	2f00      	cmp	r7, #0
 8003df8:	dd08      	ble.n	8003e0c <_strtod_l+0x794>
 8003dfa:	9905      	ldr	r1, [sp, #20]
 8003dfc:	463a      	mov	r2, r7
 8003dfe:	4620      	mov	r0, r4
 8003e00:	f001 ff2e 	bl	8005c60 <__lshift>
 8003e04:	9005      	str	r0, [sp, #20]
 8003e06:	2800      	cmp	r0, #0
 8003e08:	f43f ae7e 	beq.w	8003b08 <_strtod_l+0x490>
 8003e0c:	f1b9 0f00 	cmp.w	r9, #0
 8003e10:	dd08      	ble.n	8003e24 <_strtod_l+0x7ac>
 8003e12:	4631      	mov	r1, r6
 8003e14:	464a      	mov	r2, r9
 8003e16:	4620      	mov	r0, r4
 8003e18:	f001 ff22 	bl	8005c60 <__lshift>
 8003e1c:	4606      	mov	r6, r0
 8003e1e:	2800      	cmp	r0, #0
 8003e20:	f43f ae72 	beq.w	8003b08 <_strtod_l+0x490>
 8003e24:	9a05      	ldr	r2, [sp, #20]
 8003e26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003e28:	4620      	mov	r0, r4
 8003e2a:	f001 ffa5 	bl	8005d78 <__mdiff>
 8003e2e:	4605      	mov	r5, r0
 8003e30:	2800      	cmp	r0, #0
 8003e32:	f43f ae69 	beq.w	8003b08 <_strtod_l+0x490>
 8003e36:	68c3      	ldr	r3, [r0, #12]
 8003e38:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60c3      	str	r3, [r0, #12]
 8003e3e:	4631      	mov	r1, r6
 8003e40:	f001 ff7e 	bl	8005d40 <__mcmp>
 8003e44:	2800      	cmp	r0, #0
 8003e46:	da60      	bge.n	8003f0a <_strtod_l+0x892>
 8003e48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e4a:	ea53 030a 	orrs.w	r3, r3, sl
 8003e4e:	f040 8082 	bne.w	8003f56 <_strtod_l+0x8de>
 8003e52:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d17d      	bne.n	8003f56 <_strtod_l+0x8de>
 8003e5a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003e5e:	0d1b      	lsrs	r3, r3, #20
 8003e60:	051b      	lsls	r3, r3, #20
 8003e62:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8003e66:	d976      	bls.n	8003f56 <_strtod_l+0x8de>
 8003e68:	696b      	ldr	r3, [r5, #20]
 8003e6a:	b913      	cbnz	r3, 8003e72 <_strtod_l+0x7fa>
 8003e6c:	692b      	ldr	r3, [r5, #16]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	dd71      	ble.n	8003f56 <_strtod_l+0x8de>
 8003e72:	4629      	mov	r1, r5
 8003e74:	2201      	movs	r2, #1
 8003e76:	4620      	mov	r0, r4
 8003e78:	f001 fef2 	bl	8005c60 <__lshift>
 8003e7c:	4631      	mov	r1, r6
 8003e7e:	4605      	mov	r5, r0
 8003e80:	f001 ff5e 	bl	8005d40 <__mcmp>
 8003e84:	2800      	cmp	r0, #0
 8003e86:	dd66      	ble.n	8003f56 <_strtod_l+0x8de>
 8003e88:	9904      	ldr	r1, [sp, #16]
 8003e8a:	4a53      	ldr	r2, [pc, #332]	; (8003fd8 <_strtod_l+0x960>)
 8003e8c:	465b      	mov	r3, fp
 8003e8e:	2900      	cmp	r1, #0
 8003e90:	f000 8081 	beq.w	8003f96 <_strtod_l+0x91e>
 8003e94:	ea02 010b 	and.w	r1, r2, fp
 8003e98:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8003e9c:	dc7b      	bgt.n	8003f96 <_strtod_l+0x91e>
 8003e9e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8003ea2:	f77f aea9 	ble.w	8003bf8 <_strtod_l+0x580>
 8003ea6:	4b4d      	ldr	r3, [pc, #308]	; (8003fdc <_strtod_l+0x964>)
 8003ea8:	4650      	mov	r0, sl
 8003eaa:	4659      	mov	r1, fp
 8003eac:	2200      	movs	r2, #0
 8003eae:	f7fc fb7b 	bl	80005a8 <__aeabi_dmul>
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4303      	orrs	r3, r0
 8003eb6:	bf08      	it	eq
 8003eb8:	2322      	moveq	r3, #34	; 0x22
 8003eba:	4682      	mov	sl, r0
 8003ebc:	468b      	mov	fp, r1
 8003ebe:	bf08      	it	eq
 8003ec0:	6023      	streq	r3, [r4, #0]
 8003ec2:	e62b      	b.n	8003b1c <_strtod_l+0x4a4>
 8003ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ecc:	ea03 0a0a 	and.w	sl, r3, sl
 8003ed0:	e6e3      	b.n	8003c9a <_strtod_l+0x622>
 8003ed2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8003ed6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8003eda:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8003ede:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8003ee2:	fa01 f308 	lsl.w	r3, r1, r8
 8003ee6:	9308      	str	r3, [sp, #32]
 8003ee8:	910d      	str	r1, [sp, #52]	; 0x34
 8003eea:	e746      	b.n	8003d7a <_strtod_l+0x702>
 8003eec:	2300      	movs	r3, #0
 8003eee:	9308      	str	r3, [sp, #32]
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	930d      	str	r3, [sp, #52]	; 0x34
 8003ef4:	e741      	b.n	8003d7a <_strtod_l+0x702>
 8003ef6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003ef8:	4642      	mov	r2, r8
 8003efa:	4620      	mov	r0, r4
 8003efc:	f001 feb0 	bl	8005c60 <__lshift>
 8003f00:	9018      	str	r0, [sp, #96]	; 0x60
 8003f02:	2800      	cmp	r0, #0
 8003f04:	f47f af6b 	bne.w	8003dde <_strtod_l+0x766>
 8003f08:	e5fe      	b.n	8003b08 <_strtod_l+0x490>
 8003f0a:	465f      	mov	r7, fp
 8003f0c:	d16e      	bne.n	8003fec <_strtod_l+0x974>
 8003f0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003f10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003f14:	b342      	cbz	r2, 8003f68 <_strtod_l+0x8f0>
 8003f16:	4a32      	ldr	r2, [pc, #200]	; (8003fe0 <_strtod_l+0x968>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d128      	bne.n	8003f6e <_strtod_l+0x8f6>
 8003f1c:	9b04      	ldr	r3, [sp, #16]
 8003f1e:	4651      	mov	r1, sl
 8003f20:	b1eb      	cbz	r3, 8003f5e <_strtod_l+0x8e6>
 8003f22:	4b2d      	ldr	r3, [pc, #180]	; (8003fd8 <_strtod_l+0x960>)
 8003f24:	403b      	ands	r3, r7
 8003f26:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8003f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f2e:	d819      	bhi.n	8003f64 <_strtod_l+0x8ec>
 8003f30:	0d1b      	lsrs	r3, r3, #20
 8003f32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003f36:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3a:	4299      	cmp	r1, r3
 8003f3c:	d117      	bne.n	8003f6e <_strtod_l+0x8f6>
 8003f3e:	4b29      	ldr	r3, [pc, #164]	; (8003fe4 <_strtod_l+0x96c>)
 8003f40:	429f      	cmp	r7, r3
 8003f42:	d102      	bne.n	8003f4a <_strtod_l+0x8d2>
 8003f44:	3101      	adds	r1, #1
 8003f46:	f43f addf 	beq.w	8003b08 <_strtod_l+0x490>
 8003f4a:	4b23      	ldr	r3, [pc, #140]	; (8003fd8 <_strtod_l+0x960>)
 8003f4c:	403b      	ands	r3, r7
 8003f4e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8003f52:	f04f 0a00 	mov.w	sl, #0
 8003f56:	9b04      	ldr	r3, [sp, #16]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1a4      	bne.n	8003ea6 <_strtod_l+0x82e>
 8003f5c:	e5de      	b.n	8003b1c <_strtod_l+0x4a4>
 8003f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f62:	e7ea      	b.n	8003f3a <_strtod_l+0x8c2>
 8003f64:	4613      	mov	r3, r2
 8003f66:	e7e8      	b.n	8003f3a <_strtod_l+0x8c2>
 8003f68:	ea53 030a 	orrs.w	r3, r3, sl
 8003f6c:	d08c      	beq.n	8003e88 <_strtod_l+0x810>
 8003f6e:	9b08      	ldr	r3, [sp, #32]
 8003f70:	b1db      	cbz	r3, 8003faa <_strtod_l+0x932>
 8003f72:	423b      	tst	r3, r7
 8003f74:	d0ef      	beq.n	8003f56 <_strtod_l+0x8de>
 8003f76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f78:	9a04      	ldr	r2, [sp, #16]
 8003f7a:	4650      	mov	r0, sl
 8003f7c:	4659      	mov	r1, fp
 8003f7e:	b1c3      	cbz	r3, 8003fb2 <_strtod_l+0x93a>
 8003f80:	f7ff fb5e 	bl	8003640 <sulp>
 8003f84:	4602      	mov	r2, r0
 8003f86:	460b      	mov	r3, r1
 8003f88:	ec51 0b18 	vmov	r0, r1, d8
 8003f8c:	f7fc f956 	bl	800023c <__adddf3>
 8003f90:	4682      	mov	sl, r0
 8003f92:	468b      	mov	fp, r1
 8003f94:	e7df      	b.n	8003f56 <_strtod_l+0x8de>
 8003f96:	4013      	ands	r3, r2
 8003f98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8003f9c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8003fa0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8003fa4:	f04f 3aff 	mov.w	sl, #4294967295
 8003fa8:	e7d5      	b.n	8003f56 <_strtod_l+0x8de>
 8003faa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003fac:	ea13 0f0a 	tst.w	r3, sl
 8003fb0:	e7e0      	b.n	8003f74 <_strtod_l+0x8fc>
 8003fb2:	f7ff fb45 	bl	8003640 <sulp>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	ec51 0b18 	vmov	r0, r1, d8
 8003fbe:	f7fc f93b 	bl	8000238 <__aeabi_dsub>
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	4682      	mov	sl, r0
 8003fc8:	468b      	mov	fp, r1
 8003fca:	f7fc fd55 	bl	8000a78 <__aeabi_dcmpeq>
 8003fce:	2800      	cmp	r0, #0
 8003fd0:	d0c1      	beq.n	8003f56 <_strtod_l+0x8de>
 8003fd2:	e611      	b.n	8003bf8 <_strtod_l+0x580>
 8003fd4:	fffffc02 	.word	0xfffffc02
 8003fd8:	7ff00000 	.word	0x7ff00000
 8003fdc:	39500000 	.word	0x39500000
 8003fe0:	000fffff 	.word	0x000fffff
 8003fe4:	7fefffff 	.word	0x7fefffff
 8003fe8:	08008be8 	.word	0x08008be8
 8003fec:	4631      	mov	r1, r6
 8003fee:	4628      	mov	r0, r5
 8003ff0:	f002 f824 	bl	800603c <__ratio>
 8003ff4:	ec59 8b10 	vmov	r8, r9, d0
 8003ff8:	ee10 0a10 	vmov	r0, s0
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004002:	4649      	mov	r1, r9
 8004004:	f7fc fd4c 	bl	8000aa0 <__aeabi_dcmple>
 8004008:	2800      	cmp	r0, #0
 800400a:	d07a      	beq.n	8004102 <_strtod_l+0xa8a>
 800400c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800400e:	2b00      	cmp	r3, #0
 8004010:	d04a      	beq.n	80040a8 <_strtod_l+0xa30>
 8004012:	4b95      	ldr	r3, [pc, #596]	; (8004268 <_strtod_l+0xbf0>)
 8004014:	2200      	movs	r2, #0
 8004016:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800401a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8004268 <_strtod_l+0xbf0>
 800401e:	f04f 0800 	mov.w	r8, #0
 8004022:	4b92      	ldr	r3, [pc, #584]	; (800426c <_strtod_l+0xbf4>)
 8004024:	403b      	ands	r3, r7
 8004026:	930d      	str	r3, [sp, #52]	; 0x34
 8004028:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800402a:	4b91      	ldr	r3, [pc, #580]	; (8004270 <_strtod_l+0xbf8>)
 800402c:	429a      	cmp	r2, r3
 800402e:	f040 80b0 	bne.w	8004192 <_strtod_l+0xb1a>
 8004032:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004036:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800403a:	ec4b ab10 	vmov	d0, sl, fp
 800403e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004042:	f001 ff23 	bl	8005e8c <__ulp>
 8004046:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800404a:	ec53 2b10 	vmov	r2, r3, d0
 800404e:	f7fc faab 	bl	80005a8 <__aeabi_dmul>
 8004052:	4652      	mov	r2, sl
 8004054:	465b      	mov	r3, fp
 8004056:	f7fc f8f1 	bl	800023c <__adddf3>
 800405a:	460b      	mov	r3, r1
 800405c:	4983      	ldr	r1, [pc, #524]	; (800426c <_strtod_l+0xbf4>)
 800405e:	4a85      	ldr	r2, [pc, #532]	; (8004274 <_strtod_l+0xbfc>)
 8004060:	4019      	ands	r1, r3
 8004062:	4291      	cmp	r1, r2
 8004064:	4682      	mov	sl, r0
 8004066:	d960      	bls.n	800412a <_strtod_l+0xab2>
 8004068:	ee18 3a90 	vmov	r3, s17
 800406c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004070:	4293      	cmp	r3, r2
 8004072:	d104      	bne.n	800407e <_strtod_l+0xa06>
 8004074:	ee18 3a10 	vmov	r3, s16
 8004078:	3301      	adds	r3, #1
 800407a:	f43f ad45 	beq.w	8003b08 <_strtod_l+0x490>
 800407e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8004280 <_strtod_l+0xc08>
 8004082:	f04f 3aff 	mov.w	sl, #4294967295
 8004086:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004088:	4620      	mov	r0, r4
 800408a:	f001 fbcd 	bl	8005828 <_Bfree>
 800408e:	9905      	ldr	r1, [sp, #20]
 8004090:	4620      	mov	r0, r4
 8004092:	f001 fbc9 	bl	8005828 <_Bfree>
 8004096:	4631      	mov	r1, r6
 8004098:	4620      	mov	r0, r4
 800409a:	f001 fbc5 	bl	8005828 <_Bfree>
 800409e:	4629      	mov	r1, r5
 80040a0:	4620      	mov	r0, r4
 80040a2:	f001 fbc1 	bl	8005828 <_Bfree>
 80040a6:	e61a      	b.n	8003cde <_strtod_l+0x666>
 80040a8:	f1ba 0f00 	cmp.w	sl, #0
 80040ac:	d11b      	bne.n	80040e6 <_strtod_l+0xa6e>
 80040ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80040b2:	b9f3      	cbnz	r3, 80040f2 <_strtod_l+0xa7a>
 80040b4:	4b6c      	ldr	r3, [pc, #432]	; (8004268 <_strtod_l+0xbf0>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	4640      	mov	r0, r8
 80040ba:	4649      	mov	r1, r9
 80040bc:	f7fc fce6 	bl	8000a8c <__aeabi_dcmplt>
 80040c0:	b9d0      	cbnz	r0, 80040f8 <_strtod_l+0xa80>
 80040c2:	4640      	mov	r0, r8
 80040c4:	4649      	mov	r1, r9
 80040c6:	4b6c      	ldr	r3, [pc, #432]	; (8004278 <_strtod_l+0xc00>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	f7fc fa6d 	bl	80005a8 <__aeabi_dmul>
 80040ce:	4680      	mov	r8, r0
 80040d0:	4689      	mov	r9, r1
 80040d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80040d6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80040da:	9315      	str	r3, [sp, #84]	; 0x54
 80040dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80040e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80040e4:	e79d      	b.n	8004022 <_strtod_l+0x9aa>
 80040e6:	f1ba 0f01 	cmp.w	sl, #1
 80040ea:	d102      	bne.n	80040f2 <_strtod_l+0xa7a>
 80040ec:	2f00      	cmp	r7, #0
 80040ee:	f43f ad83 	beq.w	8003bf8 <_strtod_l+0x580>
 80040f2:	4b62      	ldr	r3, [pc, #392]	; (800427c <_strtod_l+0xc04>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	e78e      	b.n	8004016 <_strtod_l+0x99e>
 80040f8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8004278 <_strtod_l+0xc00>
 80040fc:	f04f 0800 	mov.w	r8, #0
 8004100:	e7e7      	b.n	80040d2 <_strtod_l+0xa5a>
 8004102:	4b5d      	ldr	r3, [pc, #372]	; (8004278 <_strtod_l+0xc00>)
 8004104:	4640      	mov	r0, r8
 8004106:	4649      	mov	r1, r9
 8004108:	2200      	movs	r2, #0
 800410a:	f7fc fa4d 	bl	80005a8 <__aeabi_dmul>
 800410e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004110:	4680      	mov	r8, r0
 8004112:	4689      	mov	r9, r1
 8004114:	b933      	cbnz	r3, 8004124 <_strtod_l+0xaac>
 8004116:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800411a:	900e      	str	r0, [sp, #56]	; 0x38
 800411c:	930f      	str	r3, [sp, #60]	; 0x3c
 800411e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004122:	e7dd      	b.n	80040e0 <_strtod_l+0xa68>
 8004124:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8004128:	e7f9      	b.n	800411e <_strtod_l+0xaa6>
 800412a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800412e:	9b04      	ldr	r3, [sp, #16]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1a8      	bne.n	8004086 <_strtod_l+0xa0e>
 8004134:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004138:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800413a:	0d1b      	lsrs	r3, r3, #20
 800413c:	051b      	lsls	r3, r3, #20
 800413e:	429a      	cmp	r2, r3
 8004140:	d1a1      	bne.n	8004086 <_strtod_l+0xa0e>
 8004142:	4640      	mov	r0, r8
 8004144:	4649      	mov	r1, r9
 8004146:	f7fc fd77 	bl	8000c38 <__aeabi_d2lz>
 800414a:	f7fc f9ff 	bl	800054c <__aeabi_l2d>
 800414e:	4602      	mov	r2, r0
 8004150:	460b      	mov	r3, r1
 8004152:	4640      	mov	r0, r8
 8004154:	4649      	mov	r1, r9
 8004156:	f7fc f86f 	bl	8000238 <__aeabi_dsub>
 800415a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800415c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004160:	ea43 030a 	orr.w	r3, r3, sl
 8004164:	4313      	orrs	r3, r2
 8004166:	4680      	mov	r8, r0
 8004168:	4689      	mov	r9, r1
 800416a:	d055      	beq.n	8004218 <_strtod_l+0xba0>
 800416c:	a336      	add	r3, pc, #216	; (adr r3, 8004248 <_strtod_l+0xbd0>)
 800416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004172:	f7fc fc8b 	bl	8000a8c <__aeabi_dcmplt>
 8004176:	2800      	cmp	r0, #0
 8004178:	f47f acd0 	bne.w	8003b1c <_strtod_l+0x4a4>
 800417c:	a334      	add	r3, pc, #208	; (adr r3, 8004250 <_strtod_l+0xbd8>)
 800417e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004182:	4640      	mov	r0, r8
 8004184:	4649      	mov	r1, r9
 8004186:	f7fc fc9f 	bl	8000ac8 <__aeabi_dcmpgt>
 800418a:	2800      	cmp	r0, #0
 800418c:	f43f af7b 	beq.w	8004086 <_strtod_l+0xa0e>
 8004190:	e4c4      	b.n	8003b1c <_strtod_l+0x4a4>
 8004192:	9b04      	ldr	r3, [sp, #16]
 8004194:	b333      	cbz	r3, 80041e4 <_strtod_l+0xb6c>
 8004196:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004198:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800419c:	d822      	bhi.n	80041e4 <_strtod_l+0xb6c>
 800419e:	a32e      	add	r3, pc, #184	; (adr r3, 8004258 <_strtod_l+0xbe0>)
 80041a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a4:	4640      	mov	r0, r8
 80041a6:	4649      	mov	r1, r9
 80041a8:	f7fc fc7a 	bl	8000aa0 <__aeabi_dcmple>
 80041ac:	b1a0      	cbz	r0, 80041d8 <_strtod_l+0xb60>
 80041ae:	4649      	mov	r1, r9
 80041b0:	4640      	mov	r0, r8
 80041b2:	f7fc fcd1 	bl	8000b58 <__aeabi_d2uiz>
 80041b6:	2801      	cmp	r0, #1
 80041b8:	bf38      	it	cc
 80041ba:	2001      	movcc	r0, #1
 80041bc:	f7fc f97a 	bl	80004b4 <__aeabi_ui2d>
 80041c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80041c2:	4680      	mov	r8, r0
 80041c4:	4689      	mov	r9, r1
 80041c6:	bb23      	cbnz	r3, 8004212 <_strtod_l+0xb9a>
 80041c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80041cc:	9010      	str	r0, [sp, #64]	; 0x40
 80041ce:	9311      	str	r3, [sp, #68]	; 0x44
 80041d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80041d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80041d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80041dc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	9309      	str	r3, [sp, #36]	; 0x24
 80041e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80041e8:	eeb0 0a48 	vmov.f32	s0, s16
 80041ec:	eef0 0a68 	vmov.f32	s1, s17
 80041f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80041f4:	f001 fe4a 	bl	8005e8c <__ulp>
 80041f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80041fc:	ec53 2b10 	vmov	r2, r3, d0
 8004200:	f7fc f9d2 	bl	80005a8 <__aeabi_dmul>
 8004204:	ec53 2b18 	vmov	r2, r3, d8
 8004208:	f7fc f818 	bl	800023c <__adddf3>
 800420c:	4682      	mov	sl, r0
 800420e:	468b      	mov	fp, r1
 8004210:	e78d      	b.n	800412e <_strtod_l+0xab6>
 8004212:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8004216:	e7db      	b.n	80041d0 <_strtod_l+0xb58>
 8004218:	a311      	add	r3, pc, #68	; (adr r3, 8004260 <_strtod_l+0xbe8>)
 800421a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421e:	f7fc fc35 	bl	8000a8c <__aeabi_dcmplt>
 8004222:	e7b2      	b.n	800418a <_strtod_l+0xb12>
 8004224:	2300      	movs	r3, #0
 8004226:	930a      	str	r3, [sp, #40]	; 0x28
 8004228:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800422a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800422c:	6013      	str	r3, [r2, #0]
 800422e:	f7ff ba6b 	b.w	8003708 <_strtod_l+0x90>
 8004232:	2a65      	cmp	r2, #101	; 0x65
 8004234:	f43f ab5f 	beq.w	80038f6 <_strtod_l+0x27e>
 8004238:	2a45      	cmp	r2, #69	; 0x45
 800423a:	f43f ab5c 	beq.w	80038f6 <_strtod_l+0x27e>
 800423e:	2301      	movs	r3, #1
 8004240:	f7ff bb94 	b.w	800396c <_strtod_l+0x2f4>
 8004244:	f3af 8000 	nop.w
 8004248:	94a03595 	.word	0x94a03595
 800424c:	3fdfffff 	.word	0x3fdfffff
 8004250:	35afe535 	.word	0x35afe535
 8004254:	3fe00000 	.word	0x3fe00000
 8004258:	ffc00000 	.word	0xffc00000
 800425c:	41dfffff 	.word	0x41dfffff
 8004260:	94a03595 	.word	0x94a03595
 8004264:	3fcfffff 	.word	0x3fcfffff
 8004268:	3ff00000 	.word	0x3ff00000
 800426c:	7ff00000 	.word	0x7ff00000
 8004270:	7fe00000 	.word	0x7fe00000
 8004274:	7c9fffff 	.word	0x7c9fffff
 8004278:	3fe00000 	.word	0x3fe00000
 800427c:	bff00000 	.word	0xbff00000
 8004280:	7fefffff 	.word	0x7fefffff

08004284 <_strtod_r>:
 8004284:	4b01      	ldr	r3, [pc, #4]	; (800428c <_strtod_r+0x8>)
 8004286:	f7ff b9f7 	b.w	8003678 <_strtod_l>
 800428a:	bf00      	nop
 800428c:	20000078 	.word	0x20000078

08004290 <_strtol_l.constprop.0>:
 8004290:	2b01      	cmp	r3, #1
 8004292:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004296:	d001      	beq.n	800429c <_strtol_l.constprop.0+0xc>
 8004298:	2b24      	cmp	r3, #36	; 0x24
 800429a:	d906      	bls.n	80042aa <_strtol_l.constprop.0+0x1a>
 800429c:	f7fe faf0 	bl	8002880 <__errno>
 80042a0:	2316      	movs	r3, #22
 80042a2:	6003      	str	r3, [r0, #0]
 80042a4:	2000      	movs	r0, #0
 80042a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004390 <_strtol_l.constprop.0+0x100>
 80042ae:	460d      	mov	r5, r1
 80042b0:	462e      	mov	r6, r5
 80042b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80042b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80042ba:	f017 0708 	ands.w	r7, r7, #8
 80042be:	d1f7      	bne.n	80042b0 <_strtol_l.constprop.0+0x20>
 80042c0:	2c2d      	cmp	r4, #45	; 0x2d
 80042c2:	d132      	bne.n	800432a <_strtol_l.constprop.0+0x9a>
 80042c4:	782c      	ldrb	r4, [r5, #0]
 80042c6:	2701      	movs	r7, #1
 80042c8:	1cb5      	adds	r5, r6, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d05b      	beq.n	8004386 <_strtol_l.constprop.0+0xf6>
 80042ce:	2b10      	cmp	r3, #16
 80042d0:	d109      	bne.n	80042e6 <_strtol_l.constprop.0+0x56>
 80042d2:	2c30      	cmp	r4, #48	; 0x30
 80042d4:	d107      	bne.n	80042e6 <_strtol_l.constprop.0+0x56>
 80042d6:	782c      	ldrb	r4, [r5, #0]
 80042d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80042dc:	2c58      	cmp	r4, #88	; 0x58
 80042de:	d14d      	bne.n	800437c <_strtol_l.constprop.0+0xec>
 80042e0:	786c      	ldrb	r4, [r5, #1]
 80042e2:	2310      	movs	r3, #16
 80042e4:	3502      	adds	r5, #2
 80042e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80042ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80042ee:	f04f 0c00 	mov.w	ip, #0
 80042f2:	fbb8 f9f3 	udiv	r9, r8, r3
 80042f6:	4666      	mov	r6, ip
 80042f8:	fb03 8a19 	mls	sl, r3, r9, r8
 80042fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004300:	f1be 0f09 	cmp.w	lr, #9
 8004304:	d816      	bhi.n	8004334 <_strtol_l.constprop.0+0xa4>
 8004306:	4674      	mov	r4, lr
 8004308:	42a3      	cmp	r3, r4
 800430a:	dd24      	ble.n	8004356 <_strtol_l.constprop.0+0xc6>
 800430c:	f1bc 0f00 	cmp.w	ip, #0
 8004310:	db1e      	blt.n	8004350 <_strtol_l.constprop.0+0xc0>
 8004312:	45b1      	cmp	r9, r6
 8004314:	d31c      	bcc.n	8004350 <_strtol_l.constprop.0+0xc0>
 8004316:	d101      	bne.n	800431c <_strtol_l.constprop.0+0x8c>
 8004318:	45a2      	cmp	sl, r4
 800431a:	db19      	blt.n	8004350 <_strtol_l.constprop.0+0xc0>
 800431c:	fb06 4603 	mla	r6, r6, r3, r4
 8004320:	f04f 0c01 	mov.w	ip, #1
 8004324:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004328:	e7e8      	b.n	80042fc <_strtol_l.constprop.0+0x6c>
 800432a:	2c2b      	cmp	r4, #43	; 0x2b
 800432c:	bf04      	itt	eq
 800432e:	782c      	ldrbeq	r4, [r5, #0]
 8004330:	1cb5      	addeq	r5, r6, #2
 8004332:	e7ca      	b.n	80042ca <_strtol_l.constprop.0+0x3a>
 8004334:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004338:	f1be 0f19 	cmp.w	lr, #25
 800433c:	d801      	bhi.n	8004342 <_strtol_l.constprop.0+0xb2>
 800433e:	3c37      	subs	r4, #55	; 0x37
 8004340:	e7e2      	b.n	8004308 <_strtol_l.constprop.0+0x78>
 8004342:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004346:	f1be 0f19 	cmp.w	lr, #25
 800434a:	d804      	bhi.n	8004356 <_strtol_l.constprop.0+0xc6>
 800434c:	3c57      	subs	r4, #87	; 0x57
 800434e:	e7db      	b.n	8004308 <_strtol_l.constprop.0+0x78>
 8004350:	f04f 3cff 	mov.w	ip, #4294967295
 8004354:	e7e6      	b.n	8004324 <_strtol_l.constprop.0+0x94>
 8004356:	f1bc 0f00 	cmp.w	ip, #0
 800435a:	da05      	bge.n	8004368 <_strtol_l.constprop.0+0xd8>
 800435c:	2322      	movs	r3, #34	; 0x22
 800435e:	6003      	str	r3, [r0, #0]
 8004360:	4646      	mov	r6, r8
 8004362:	b942      	cbnz	r2, 8004376 <_strtol_l.constprop.0+0xe6>
 8004364:	4630      	mov	r0, r6
 8004366:	e79e      	b.n	80042a6 <_strtol_l.constprop.0+0x16>
 8004368:	b107      	cbz	r7, 800436c <_strtol_l.constprop.0+0xdc>
 800436a:	4276      	negs	r6, r6
 800436c:	2a00      	cmp	r2, #0
 800436e:	d0f9      	beq.n	8004364 <_strtol_l.constprop.0+0xd4>
 8004370:	f1bc 0f00 	cmp.w	ip, #0
 8004374:	d000      	beq.n	8004378 <_strtol_l.constprop.0+0xe8>
 8004376:	1e69      	subs	r1, r5, #1
 8004378:	6011      	str	r1, [r2, #0]
 800437a:	e7f3      	b.n	8004364 <_strtol_l.constprop.0+0xd4>
 800437c:	2430      	movs	r4, #48	; 0x30
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1b1      	bne.n	80042e6 <_strtol_l.constprop.0+0x56>
 8004382:	2308      	movs	r3, #8
 8004384:	e7af      	b.n	80042e6 <_strtol_l.constprop.0+0x56>
 8004386:	2c30      	cmp	r4, #48	; 0x30
 8004388:	d0a5      	beq.n	80042d6 <_strtol_l.constprop.0+0x46>
 800438a:	230a      	movs	r3, #10
 800438c:	e7ab      	b.n	80042e6 <_strtol_l.constprop.0+0x56>
 800438e:	bf00      	nop
 8004390:	08008c11 	.word	0x08008c11

08004394 <_strtol_r>:
 8004394:	f7ff bf7c 	b.w	8004290 <_strtol_l.constprop.0>

08004398 <quorem>:
 8004398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800439c:	6903      	ldr	r3, [r0, #16]
 800439e:	690c      	ldr	r4, [r1, #16]
 80043a0:	42a3      	cmp	r3, r4
 80043a2:	4607      	mov	r7, r0
 80043a4:	f2c0 8081 	blt.w	80044aa <quorem+0x112>
 80043a8:	3c01      	subs	r4, #1
 80043aa:	f101 0814 	add.w	r8, r1, #20
 80043ae:	f100 0514 	add.w	r5, r0, #20
 80043b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80043b6:	9301      	str	r3, [sp, #4]
 80043b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80043bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80043c0:	3301      	adds	r3, #1
 80043c2:	429a      	cmp	r2, r3
 80043c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80043c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80043cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80043d0:	d331      	bcc.n	8004436 <quorem+0x9e>
 80043d2:	f04f 0e00 	mov.w	lr, #0
 80043d6:	4640      	mov	r0, r8
 80043d8:	46ac      	mov	ip, r5
 80043da:	46f2      	mov	sl, lr
 80043dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80043e0:	b293      	uxth	r3, r2
 80043e2:	fb06 e303 	mla	r3, r6, r3, lr
 80043e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	ebaa 0303 	sub.w	r3, sl, r3
 80043f0:	f8dc a000 	ldr.w	sl, [ip]
 80043f4:	0c12      	lsrs	r2, r2, #16
 80043f6:	fa13 f38a 	uxtah	r3, r3, sl
 80043fa:	fb06 e202 	mla	r2, r6, r2, lr
 80043fe:	9300      	str	r3, [sp, #0]
 8004400:	9b00      	ldr	r3, [sp, #0]
 8004402:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004406:	b292      	uxth	r2, r2
 8004408:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800440c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004410:	f8bd 3000 	ldrh.w	r3, [sp]
 8004414:	4581      	cmp	r9, r0
 8004416:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800441a:	f84c 3b04 	str.w	r3, [ip], #4
 800441e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004422:	d2db      	bcs.n	80043dc <quorem+0x44>
 8004424:	f855 300b 	ldr.w	r3, [r5, fp]
 8004428:	b92b      	cbnz	r3, 8004436 <quorem+0x9e>
 800442a:	9b01      	ldr	r3, [sp, #4]
 800442c:	3b04      	subs	r3, #4
 800442e:	429d      	cmp	r5, r3
 8004430:	461a      	mov	r2, r3
 8004432:	d32e      	bcc.n	8004492 <quorem+0xfa>
 8004434:	613c      	str	r4, [r7, #16]
 8004436:	4638      	mov	r0, r7
 8004438:	f001 fc82 	bl	8005d40 <__mcmp>
 800443c:	2800      	cmp	r0, #0
 800443e:	db24      	blt.n	800448a <quorem+0xf2>
 8004440:	3601      	adds	r6, #1
 8004442:	4628      	mov	r0, r5
 8004444:	f04f 0c00 	mov.w	ip, #0
 8004448:	f858 2b04 	ldr.w	r2, [r8], #4
 800444c:	f8d0 e000 	ldr.w	lr, [r0]
 8004450:	b293      	uxth	r3, r2
 8004452:	ebac 0303 	sub.w	r3, ip, r3
 8004456:	0c12      	lsrs	r2, r2, #16
 8004458:	fa13 f38e 	uxtah	r3, r3, lr
 800445c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004460:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004464:	b29b      	uxth	r3, r3
 8004466:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800446a:	45c1      	cmp	r9, r8
 800446c:	f840 3b04 	str.w	r3, [r0], #4
 8004470:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004474:	d2e8      	bcs.n	8004448 <quorem+0xb0>
 8004476:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800447a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800447e:	b922      	cbnz	r2, 800448a <quorem+0xf2>
 8004480:	3b04      	subs	r3, #4
 8004482:	429d      	cmp	r5, r3
 8004484:	461a      	mov	r2, r3
 8004486:	d30a      	bcc.n	800449e <quorem+0x106>
 8004488:	613c      	str	r4, [r7, #16]
 800448a:	4630      	mov	r0, r6
 800448c:	b003      	add	sp, #12
 800448e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004492:	6812      	ldr	r2, [r2, #0]
 8004494:	3b04      	subs	r3, #4
 8004496:	2a00      	cmp	r2, #0
 8004498:	d1cc      	bne.n	8004434 <quorem+0x9c>
 800449a:	3c01      	subs	r4, #1
 800449c:	e7c7      	b.n	800442e <quorem+0x96>
 800449e:	6812      	ldr	r2, [r2, #0]
 80044a0:	3b04      	subs	r3, #4
 80044a2:	2a00      	cmp	r2, #0
 80044a4:	d1f0      	bne.n	8004488 <quorem+0xf0>
 80044a6:	3c01      	subs	r4, #1
 80044a8:	e7eb      	b.n	8004482 <quorem+0xea>
 80044aa:	2000      	movs	r0, #0
 80044ac:	e7ee      	b.n	800448c <quorem+0xf4>
	...

080044b0 <_dtoa_r>:
 80044b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b4:	ed2d 8b04 	vpush	{d8-d9}
 80044b8:	ec57 6b10 	vmov	r6, r7, d0
 80044bc:	b093      	sub	sp, #76	; 0x4c
 80044be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80044c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80044c4:	9106      	str	r1, [sp, #24]
 80044c6:	ee10 aa10 	vmov	sl, s0
 80044ca:	4604      	mov	r4, r0
 80044cc:	9209      	str	r2, [sp, #36]	; 0x24
 80044ce:	930c      	str	r3, [sp, #48]	; 0x30
 80044d0:	46bb      	mov	fp, r7
 80044d2:	b975      	cbnz	r5, 80044f2 <_dtoa_r+0x42>
 80044d4:	2010      	movs	r0, #16
 80044d6:	f001 f94d 	bl	8005774 <malloc>
 80044da:	4602      	mov	r2, r0
 80044dc:	6260      	str	r0, [r4, #36]	; 0x24
 80044de:	b920      	cbnz	r0, 80044ea <_dtoa_r+0x3a>
 80044e0:	4ba7      	ldr	r3, [pc, #668]	; (8004780 <_dtoa_r+0x2d0>)
 80044e2:	21ea      	movs	r1, #234	; 0xea
 80044e4:	48a7      	ldr	r0, [pc, #668]	; (8004784 <_dtoa_r+0x2d4>)
 80044e6:	f002 f8ad 	bl	8006644 <__assert_func>
 80044ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80044ee:	6005      	str	r5, [r0, #0]
 80044f0:	60c5      	str	r5, [r0, #12]
 80044f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044f4:	6819      	ldr	r1, [r3, #0]
 80044f6:	b151      	cbz	r1, 800450e <_dtoa_r+0x5e>
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	604a      	str	r2, [r1, #4]
 80044fc:	2301      	movs	r3, #1
 80044fe:	4093      	lsls	r3, r2
 8004500:	608b      	str	r3, [r1, #8]
 8004502:	4620      	mov	r0, r4
 8004504:	f001 f990 	bl	8005828 <_Bfree>
 8004508:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800450a:	2200      	movs	r2, #0
 800450c:	601a      	str	r2, [r3, #0]
 800450e:	1e3b      	subs	r3, r7, #0
 8004510:	bfaa      	itet	ge
 8004512:	2300      	movge	r3, #0
 8004514:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004518:	f8c8 3000 	strge.w	r3, [r8]
 800451c:	4b9a      	ldr	r3, [pc, #616]	; (8004788 <_dtoa_r+0x2d8>)
 800451e:	bfbc      	itt	lt
 8004520:	2201      	movlt	r2, #1
 8004522:	f8c8 2000 	strlt.w	r2, [r8]
 8004526:	ea33 030b 	bics.w	r3, r3, fp
 800452a:	d11b      	bne.n	8004564 <_dtoa_r+0xb4>
 800452c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800452e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004532:	6013      	str	r3, [r2, #0]
 8004534:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004538:	4333      	orrs	r3, r6
 800453a:	f000 8592 	beq.w	8005062 <_dtoa_r+0xbb2>
 800453e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004540:	b963      	cbnz	r3, 800455c <_dtoa_r+0xac>
 8004542:	4b92      	ldr	r3, [pc, #584]	; (800478c <_dtoa_r+0x2dc>)
 8004544:	e022      	b.n	800458c <_dtoa_r+0xdc>
 8004546:	4b92      	ldr	r3, [pc, #584]	; (8004790 <_dtoa_r+0x2e0>)
 8004548:	9301      	str	r3, [sp, #4]
 800454a:	3308      	adds	r3, #8
 800454c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	9801      	ldr	r0, [sp, #4]
 8004552:	b013      	add	sp, #76	; 0x4c
 8004554:	ecbd 8b04 	vpop	{d8-d9}
 8004558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800455c:	4b8b      	ldr	r3, [pc, #556]	; (800478c <_dtoa_r+0x2dc>)
 800455e:	9301      	str	r3, [sp, #4]
 8004560:	3303      	adds	r3, #3
 8004562:	e7f3      	b.n	800454c <_dtoa_r+0x9c>
 8004564:	2200      	movs	r2, #0
 8004566:	2300      	movs	r3, #0
 8004568:	4650      	mov	r0, sl
 800456a:	4659      	mov	r1, fp
 800456c:	f7fc fa84 	bl	8000a78 <__aeabi_dcmpeq>
 8004570:	ec4b ab19 	vmov	d9, sl, fp
 8004574:	4680      	mov	r8, r0
 8004576:	b158      	cbz	r0, 8004590 <_dtoa_r+0xe0>
 8004578:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800457a:	2301      	movs	r3, #1
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 856b 	beq.w	800505c <_dtoa_r+0xbac>
 8004586:	4883      	ldr	r0, [pc, #524]	; (8004794 <_dtoa_r+0x2e4>)
 8004588:	6018      	str	r0, [r3, #0]
 800458a:	1e43      	subs	r3, r0, #1
 800458c:	9301      	str	r3, [sp, #4]
 800458e:	e7df      	b.n	8004550 <_dtoa_r+0xa0>
 8004590:	ec4b ab10 	vmov	d0, sl, fp
 8004594:	aa10      	add	r2, sp, #64	; 0x40
 8004596:	a911      	add	r1, sp, #68	; 0x44
 8004598:	4620      	mov	r0, r4
 800459a:	f001 fcf3 	bl	8005f84 <__d2b>
 800459e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80045a2:	ee08 0a10 	vmov	s16, r0
 80045a6:	2d00      	cmp	r5, #0
 80045a8:	f000 8084 	beq.w	80046b4 <_dtoa_r+0x204>
 80045ac:	ee19 3a90 	vmov	r3, s19
 80045b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80045b8:	4656      	mov	r6, sl
 80045ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80045be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80045c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80045c6:	4b74      	ldr	r3, [pc, #464]	; (8004798 <_dtoa_r+0x2e8>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	4630      	mov	r0, r6
 80045cc:	4639      	mov	r1, r7
 80045ce:	f7fb fe33 	bl	8000238 <__aeabi_dsub>
 80045d2:	a365      	add	r3, pc, #404	; (adr r3, 8004768 <_dtoa_r+0x2b8>)
 80045d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d8:	f7fb ffe6 	bl	80005a8 <__aeabi_dmul>
 80045dc:	a364      	add	r3, pc, #400	; (adr r3, 8004770 <_dtoa_r+0x2c0>)
 80045de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e2:	f7fb fe2b 	bl	800023c <__adddf3>
 80045e6:	4606      	mov	r6, r0
 80045e8:	4628      	mov	r0, r5
 80045ea:	460f      	mov	r7, r1
 80045ec:	f7fb ff72 	bl	80004d4 <__aeabi_i2d>
 80045f0:	a361      	add	r3, pc, #388	; (adr r3, 8004778 <_dtoa_r+0x2c8>)
 80045f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f6:	f7fb ffd7 	bl	80005a8 <__aeabi_dmul>
 80045fa:	4602      	mov	r2, r0
 80045fc:	460b      	mov	r3, r1
 80045fe:	4630      	mov	r0, r6
 8004600:	4639      	mov	r1, r7
 8004602:	f7fb fe1b 	bl	800023c <__adddf3>
 8004606:	4606      	mov	r6, r0
 8004608:	460f      	mov	r7, r1
 800460a:	f7fc fa7d 	bl	8000b08 <__aeabi_d2iz>
 800460e:	2200      	movs	r2, #0
 8004610:	9000      	str	r0, [sp, #0]
 8004612:	2300      	movs	r3, #0
 8004614:	4630      	mov	r0, r6
 8004616:	4639      	mov	r1, r7
 8004618:	f7fc fa38 	bl	8000a8c <__aeabi_dcmplt>
 800461c:	b150      	cbz	r0, 8004634 <_dtoa_r+0x184>
 800461e:	9800      	ldr	r0, [sp, #0]
 8004620:	f7fb ff58 	bl	80004d4 <__aeabi_i2d>
 8004624:	4632      	mov	r2, r6
 8004626:	463b      	mov	r3, r7
 8004628:	f7fc fa26 	bl	8000a78 <__aeabi_dcmpeq>
 800462c:	b910      	cbnz	r0, 8004634 <_dtoa_r+0x184>
 800462e:	9b00      	ldr	r3, [sp, #0]
 8004630:	3b01      	subs	r3, #1
 8004632:	9300      	str	r3, [sp, #0]
 8004634:	9b00      	ldr	r3, [sp, #0]
 8004636:	2b16      	cmp	r3, #22
 8004638:	d85a      	bhi.n	80046f0 <_dtoa_r+0x240>
 800463a:	9a00      	ldr	r2, [sp, #0]
 800463c:	4b57      	ldr	r3, [pc, #348]	; (800479c <_dtoa_r+0x2ec>)
 800463e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004646:	ec51 0b19 	vmov	r0, r1, d9
 800464a:	f7fc fa1f 	bl	8000a8c <__aeabi_dcmplt>
 800464e:	2800      	cmp	r0, #0
 8004650:	d050      	beq.n	80046f4 <_dtoa_r+0x244>
 8004652:	9b00      	ldr	r3, [sp, #0]
 8004654:	3b01      	subs	r3, #1
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	2300      	movs	r3, #0
 800465a:	930b      	str	r3, [sp, #44]	; 0x2c
 800465c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800465e:	1b5d      	subs	r5, r3, r5
 8004660:	1e6b      	subs	r3, r5, #1
 8004662:	9305      	str	r3, [sp, #20]
 8004664:	bf45      	ittet	mi
 8004666:	f1c5 0301 	rsbmi	r3, r5, #1
 800466a:	9304      	strmi	r3, [sp, #16]
 800466c:	2300      	movpl	r3, #0
 800466e:	2300      	movmi	r3, #0
 8004670:	bf4c      	ite	mi
 8004672:	9305      	strmi	r3, [sp, #20]
 8004674:	9304      	strpl	r3, [sp, #16]
 8004676:	9b00      	ldr	r3, [sp, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	db3d      	blt.n	80046f8 <_dtoa_r+0x248>
 800467c:	9b05      	ldr	r3, [sp, #20]
 800467e:	9a00      	ldr	r2, [sp, #0]
 8004680:	920a      	str	r2, [sp, #40]	; 0x28
 8004682:	4413      	add	r3, r2
 8004684:	9305      	str	r3, [sp, #20]
 8004686:	2300      	movs	r3, #0
 8004688:	9307      	str	r3, [sp, #28]
 800468a:	9b06      	ldr	r3, [sp, #24]
 800468c:	2b09      	cmp	r3, #9
 800468e:	f200 8089 	bhi.w	80047a4 <_dtoa_r+0x2f4>
 8004692:	2b05      	cmp	r3, #5
 8004694:	bfc4      	itt	gt
 8004696:	3b04      	subgt	r3, #4
 8004698:	9306      	strgt	r3, [sp, #24]
 800469a:	9b06      	ldr	r3, [sp, #24]
 800469c:	f1a3 0302 	sub.w	r3, r3, #2
 80046a0:	bfcc      	ite	gt
 80046a2:	2500      	movgt	r5, #0
 80046a4:	2501      	movle	r5, #1
 80046a6:	2b03      	cmp	r3, #3
 80046a8:	f200 8087 	bhi.w	80047ba <_dtoa_r+0x30a>
 80046ac:	e8df f003 	tbb	[pc, r3]
 80046b0:	59383a2d 	.word	0x59383a2d
 80046b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80046b8:	441d      	add	r5, r3
 80046ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80046be:	2b20      	cmp	r3, #32
 80046c0:	bfc1      	itttt	gt
 80046c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80046c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80046ca:	fa0b f303 	lslgt.w	r3, fp, r3
 80046ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 80046d2:	bfda      	itte	le
 80046d4:	f1c3 0320 	rsble	r3, r3, #32
 80046d8:	fa06 f003 	lslle.w	r0, r6, r3
 80046dc:	4318      	orrgt	r0, r3
 80046de:	f7fb fee9 	bl	80004b4 <__aeabi_ui2d>
 80046e2:	2301      	movs	r3, #1
 80046e4:	4606      	mov	r6, r0
 80046e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80046ea:	3d01      	subs	r5, #1
 80046ec:	930e      	str	r3, [sp, #56]	; 0x38
 80046ee:	e76a      	b.n	80045c6 <_dtoa_r+0x116>
 80046f0:	2301      	movs	r3, #1
 80046f2:	e7b2      	b.n	800465a <_dtoa_r+0x1aa>
 80046f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80046f6:	e7b1      	b.n	800465c <_dtoa_r+0x1ac>
 80046f8:	9b04      	ldr	r3, [sp, #16]
 80046fa:	9a00      	ldr	r2, [sp, #0]
 80046fc:	1a9b      	subs	r3, r3, r2
 80046fe:	9304      	str	r3, [sp, #16]
 8004700:	4253      	negs	r3, r2
 8004702:	9307      	str	r3, [sp, #28]
 8004704:	2300      	movs	r3, #0
 8004706:	930a      	str	r3, [sp, #40]	; 0x28
 8004708:	e7bf      	b.n	800468a <_dtoa_r+0x1da>
 800470a:	2300      	movs	r3, #0
 800470c:	9308      	str	r3, [sp, #32]
 800470e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004710:	2b00      	cmp	r3, #0
 8004712:	dc55      	bgt.n	80047c0 <_dtoa_r+0x310>
 8004714:	2301      	movs	r3, #1
 8004716:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800471a:	461a      	mov	r2, r3
 800471c:	9209      	str	r2, [sp, #36]	; 0x24
 800471e:	e00c      	b.n	800473a <_dtoa_r+0x28a>
 8004720:	2301      	movs	r3, #1
 8004722:	e7f3      	b.n	800470c <_dtoa_r+0x25c>
 8004724:	2300      	movs	r3, #0
 8004726:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004728:	9308      	str	r3, [sp, #32]
 800472a:	9b00      	ldr	r3, [sp, #0]
 800472c:	4413      	add	r3, r2
 800472e:	9302      	str	r3, [sp, #8]
 8004730:	3301      	adds	r3, #1
 8004732:	2b01      	cmp	r3, #1
 8004734:	9303      	str	r3, [sp, #12]
 8004736:	bfb8      	it	lt
 8004738:	2301      	movlt	r3, #1
 800473a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800473c:	2200      	movs	r2, #0
 800473e:	6042      	str	r2, [r0, #4]
 8004740:	2204      	movs	r2, #4
 8004742:	f102 0614 	add.w	r6, r2, #20
 8004746:	429e      	cmp	r6, r3
 8004748:	6841      	ldr	r1, [r0, #4]
 800474a:	d93d      	bls.n	80047c8 <_dtoa_r+0x318>
 800474c:	4620      	mov	r0, r4
 800474e:	f001 f82b 	bl	80057a8 <_Balloc>
 8004752:	9001      	str	r0, [sp, #4]
 8004754:	2800      	cmp	r0, #0
 8004756:	d13b      	bne.n	80047d0 <_dtoa_r+0x320>
 8004758:	4b11      	ldr	r3, [pc, #68]	; (80047a0 <_dtoa_r+0x2f0>)
 800475a:	4602      	mov	r2, r0
 800475c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004760:	e6c0      	b.n	80044e4 <_dtoa_r+0x34>
 8004762:	2301      	movs	r3, #1
 8004764:	e7df      	b.n	8004726 <_dtoa_r+0x276>
 8004766:	bf00      	nop
 8004768:	636f4361 	.word	0x636f4361
 800476c:	3fd287a7 	.word	0x3fd287a7
 8004770:	8b60c8b3 	.word	0x8b60c8b3
 8004774:	3fc68a28 	.word	0x3fc68a28
 8004778:	509f79fb 	.word	0x509f79fb
 800477c:	3fd34413 	.word	0x3fd34413
 8004780:	08008d1e 	.word	0x08008d1e
 8004784:	08008d35 	.word	0x08008d35
 8004788:	7ff00000 	.word	0x7ff00000
 800478c:	08008d1a 	.word	0x08008d1a
 8004790:	08008d11 	.word	0x08008d11
 8004794:	08008b91 	.word	0x08008b91
 8004798:	3ff80000 	.word	0x3ff80000
 800479c:	08008ea0 	.word	0x08008ea0
 80047a0:	08008d90 	.word	0x08008d90
 80047a4:	2501      	movs	r5, #1
 80047a6:	2300      	movs	r3, #0
 80047a8:	9306      	str	r3, [sp, #24]
 80047aa:	9508      	str	r5, [sp, #32]
 80047ac:	f04f 33ff 	mov.w	r3, #4294967295
 80047b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80047b4:	2200      	movs	r2, #0
 80047b6:	2312      	movs	r3, #18
 80047b8:	e7b0      	b.n	800471c <_dtoa_r+0x26c>
 80047ba:	2301      	movs	r3, #1
 80047bc:	9308      	str	r3, [sp, #32]
 80047be:	e7f5      	b.n	80047ac <_dtoa_r+0x2fc>
 80047c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80047c6:	e7b8      	b.n	800473a <_dtoa_r+0x28a>
 80047c8:	3101      	adds	r1, #1
 80047ca:	6041      	str	r1, [r0, #4]
 80047cc:	0052      	lsls	r2, r2, #1
 80047ce:	e7b8      	b.n	8004742 <_dtoa_r+0x292>
 80047d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047d2:	9a01      	ldr	r2, [sp, #4]
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	9b03      	ldr	r3, [sp, #12]
 80047d8:	2b0e      	cmp	r3, #14
 80047da:	f200 809d 	bhi.w	8004918 <_dtoa_r+0x468>
 80047de:	2d00      	cmp	r5, #0
 80047e0:	f000 809a 	beq.w	8004918 <_dtoa_r+0x468>
 80047e4:	9b00      	ldr	r3, [sp, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	dd32      	ble.n	8004850 <_dtoa_r+0x3a0>
 80047ea:	4ab7      	ldr	r2, [pc, #732]	; (8004ac8 <_dtoa_r+0x618>)
 80047ec:	f003 030f 	and.w	r3, r3, #15
 80047f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80047f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80047f8:	9b00      	ldr	r3, [sp, #0]
 80047fa:	05d8      	lsls	r0, r3, #23
 80047fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004800:	d516      	bpl.n	8004830 <_dtoa_r+0x380>
 8004802:	4bb2      	ldr	r3, [pc, #712]	; (8004acc <_dtoa_r+0x61c>)
 8004804:	ec51 0b19 	vmov	r0, r1, d9
 8004808:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800480c:	f7fb fff6 	bl	80007fc <__aeabi_ddiv>
 8004810:	f007 070f 	and.w	r7, r7, #15
 8004814:	4682      	mov	sl, r0
 8004816:	468b      	mov	fp, r1
 8004818:	2503      	movs	r5, #3
 800481a:	4eac      	ldr	r6, [pc, #688]	; (8004acc <_dtoa_r+0x61c>)
 800481c:	b957      	cbnz	r7, 8004834 <_dtoa_r+0x384>
 800481e:	4642      	mov	r2, r8
 8004820:	464b      	mov	r3, r9
 8004822:	4650      	mov	r0, sl
 8004824:	4659      	mov	r1, fp
 8004826:	f7fb ffe9 	bl	80007fc <__aeabi_ddiv>
 800482a:	4682      	mov	sl, r0
 800482c:	468b      	mov	fp, r1
 800482e:	e028      	b.n	8004882 <_dtoa_r+0x3d2>
 8004830:	2502      	movs	r5, #2
 8004832:	e7f2      	b.n	800481a <_dtoa_r+0x36a>
 8004834:	07f9      	lsls	r1, r7, #31
 8004836:	d508      	bpl.n	800484a <_dtoa_r+0x39a>
 8004838:	4640      	mov	r0, r8
 800483a:	4649      	mov	r1, r9
 800483c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004840:	f7fb feb2 	bl	80005a8 <__aeabi_dmul>
 8004844:	3501      	adds	r5, #1
 8004846:	4680      	mov	r8, r0
 8004848:	4689      	mov	r9, r1
 800484a:	107f      	asrs	r7, r7, #1
 800484c:	3608      	adds	r6, #8
 800484e:	e7e5      	b.n	800481c <_dtoa_r+0x36c>
 8004850:	f000 809b 	beq.w	800498a <_dtoa_r+0x4da>
 8004854:	9b00      	ldr	r3, [sp, #0]
 8004856:	4f9d      	ldr	r7, [pc, #628]	; (8004acc <_dtoa_r+0x61c>)
 8004858:	425e      	negs	r6, r3
 800485a:	4b9b      	ldr	r3, [pc, #620]	; (8004ac8 <_dtoa_r+0x618>)
 800485c:	f006 020f 	and.w	r2, r6, #15
 8004860:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004868:	ec51 0b19 	vmov	r0, r1, d9
 800486c:	f7fb fe9c 	bl	80005a8 <__aeabi_dmul>
 8004870:	1136      	asrs	r6, r6, #4
 8004872:	4682      	mov	sl, r0
 8004874:	468b      	mov	fp, r1
 8004876:	2300      	movs	r3, #0
 8004878:	2502      	movs	r5, #2
 800487a:	2e00      	cmp	r6, #0
 800487c:	d17a      	bne.n	8004974 <_dtoa_r+0x4c4>
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1d3      	bne.n	800482a <_dtoa_r+0x37a>
 8004882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 8082 	beq.w	800498e <_dtoa_r+0x4de>
 800488a:	4b91      	ldr	r3, [pc, #580]	; (8004ad0 <_dtoa_r+0x620>)
 800488c:	2200      	movs	r2, #0
 800488e:	4650      	mov	r0, sl
 8004890:	4659      	mov	r1, fp
 8004892:	f7fc f8fb 	bl	8000a8c <__aeabi_dcmplt>
 8004896:	2800      	cmp	r0, #0
 8004898:	d079      	beq.n	800498e <_dtoa_r+0x4de>
 800489a:	9b03      	ldr	r3, [sp, #12]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d076      	beq.n	800498e <_dtoa_r+0x4de>
 80048a0:	9b02      	ldr	r3, [sp, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	dd36      	ble.n	8004914 <_dtoa_r+0x464>
 80048a6:	9b00      	ldr	r3, [sp, #0]
 80048a8:	4650      	mov	r0, sl
 80048aa:	4659      	mov	r1, fp
 80048ac:	1e5f      	subs	r7, r3, #1
 80048ae:	2200      	movs	r2, #0
 80048b0:	4b88      	ldr	r3, [pc, #544]	; (8004ad4 <_dtoa_r+0x624>)
 80048b2:	f7fb fe79 	bl	80005a8 <__aeabi_dmul>
 80048b6:	9e02      	ldr	r6, [sp, #8]
 80048b8:	4682      	mov	sl, r0
 80048ba:	468b      	mov	fp, r1
 80048bc:	3501      	adds	r5, #1
 80048be:	4628      	mov	r0, r5
 80048c0:	f7fb fe08 	bl	80004d4 <__aeabi_i2d>
 80048c4:	4652      	mov	r2, sl
 80048c6:	465b      	mov	r3, fp
 80048c8:	f7fb fe6e 	bl	80005a8 <__aeabi_dmul>
 80048cc:	4b82      	ldr	r3, [pc, #520]	; (8004ad8 <_dtoa_r+0x628>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	f7fb fcb4 	bl	800023c <__adddf3>
 80048d4:	46d0      	mov	r8, sl
 80048d6:	46d9      	mov	r9, fp
 80048d8:	4682      	mov	sl, r0
 80048da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80048de:	2e00      	cmp	r6, #0
 80048e0:	d158      	bne.n	8004994 <_dtoa_r+0x4e4>
 80048e2:	4b7e      	ldr	r3, [pc, #504]	; (8004adc <_dtoa_r+0x62c>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	4640      	mov	r0, r8
 80048e8:	4649      	mov	r1, r9
 80048ea:	f7fb fca5 	bl	8000238 <__aeabi_dsub>
 80048ee:	4652      	mov	r2, sl
 80048f0:	465b      	mov	r3, fp
 80048f2:	4680      	mov	r8, r0
 80048f4:	4689      	mov	r9, r1
 80048f6:	f7fc f8e7 	bl	8000ac8 <__aeabi_dcmpgt>
 80048fa:	2800      	cmp	r0, #0
 80048fc:	f040 8295 	bne.w	8004e2a <_dtoa_r+0x97a>
 8004900:	4652      	mov	r2, sl
 8004902:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004906:	4640      	mov	r0, r8
 8004908:	4649      	mov	r1, r9
 800490a:	f7fc f8bf 	bl	8000a8c <__aeabi_dcmplt>
 800490e:	2800      	cmp	r0, #0
 8004910:	f040 8289 	bne.w	8004e26 <_dtoa_r+0x976>
 8004914:	ec5b ab19 	vmov	sl, fp, d9
 8004918:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800491a:	2b00      	cmp	r3, #0
 800491c:	f2c0 8148 	blt.w	8004bb0 <_dtoa_r+0x700>
 8004920:	9a00      	ldr	r2, [sp, #0]
 8004922:	2a0e      	cmp	r2, #14
 8004924:	f300 8144 	bgt.w	8004bb0 <_dtoa_r+0x700>
 8004928:	4b67      	ldr	r3, [pc, #412]	; (8004ac8 <_dtoa_r+0x618>)
 800492a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800492e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004934:	2b00      	cmp	r3, #0
 8004936:	f280 80d5 	bge.w	8004ae4 <_dtoa_r+0x634>
 800493a:	9b03      	ldr	r3, [sp, #12]
 800493c:	2b00      	cmp	r3, #0
 800493e:	f300 80d1 	bgt.w	8004ae4 <_dtoa_r+0x634>
 8004942:	f040 826f 	bne.w	8004e24 <_dtoa_r+0x974>
 8004946:	4b65      	ldr	r3, [pc, #404]	; (8004adc <_dtoa_r+0x62c>)
 8004948:	2200      	movs	r2, #0
 800494a:	4640      	mov	r0, r8
 800494c:	4649      	mov	r1, r9
 800494e:	f7fb fe2b 	bl	80005a8 <__aeabi_dmul>
 8004952:	4652      	mov	r2, sl
 8004954:	465b      	mov	r3, fp
 8004956:	f7fc f8ad 	bl	8000ab4 <__aeabi_dcmpge>
 800495a:	9e03      	ldr	r6, [sp, #12]
 800495c:	4637      	mov	r7, r6
 800495e:	2800      	cmp	r0, #0
 8004960:	f040 8245 	bne.w	8004dee <_dtoa_r+0x93e>
 8004964:	9d01      	ldr	r5, [sp, #4]
 8004966:	2331      	movs	r3, #49	; 0x31
 8004968:	f805 3b01 	strb.w	r3, [r5], #1
 800496c:	9b00      	ldr	r3, [sp, #0]
 800496e:	3301      	adds	r3, #1
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	e240      	b.n	8004df6 <_dtoa_r+0x946>
 8004974:	07f2      	lsls	r2, r6, #31
 8004976:	d505      	bpl.n	8004984 <_dtoa_r+0x4d4>
 8004978:	e9d7 2300 	ldrd	r2, r3, [r7]
 800497c:	f7fb fe14 	bl	80005a8 <__aeabi_dmul>
 8004980:	3501      	adds	r5, #1
 8004982:	2301      	movs	r3, #1
 8004984:	1076      	asrs	r6, r6, #1
 8004986:	3708      	adds	r7, #8
 8004988:	e777      	b.n	800487a <_dtoa_r+0x3ca>
 800498a:	2502      	movs	r5, #2
 800498c:	e779      	b.n	8004882 <_dtoa_r+0x3d2>
 800498e:	9f00      	ldr	r7, [sp, #0]
 8004990:	9e03      	ldr	r6, [sp, #12]
 8004992:	e794      	b.n	80048be <_dtoa_r+0x40e>
 8004994:	9901      	ldr	r1, [sp, #4]
 8004996:	4b4c      	ldr	r3, [pc, #304]	; (8004ac8 <_dtoa_r+0x618>)
 8004998:	4431      	add	r1, r6
 800499a:	910d      	str	r1, [sp, #52]	; 0x34
 800499c:	9908      	ldr	r1, [sp, #32]
 800499e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80049a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80049a6:	2900      	cmp	r1, #0
 80049a8:	d043      	beq.n	8004a32 <_dtoa_r+0x582>
 80049aa:	494d      	ldr	r1, [pc, #308]	; (8004ae0 <_dtoa_r+0x630>)
 80049ac:	2000      	movs	r0, #0
 80049ae:	f7fb ff25 	bl	80007fc <__aeabi_ddiv>
 80049b2:	4652      	mov	r2, sl
 80049b4:	465b      	mov	r3, fp
 80049b6:	f7fb fc3f 	bl	8000238 <__aeabi_dsub>
 80049ba:	9d01      	ldr	r5, [sp, #4]
 80049bc:	4682      	mov	sl, r0
 80049be:	468b      	mov	fp, r1
 80049c0:	4649      	mov	r1, r9
 80049c2:	4640      	mov	r0, r8
 80049c4:	f7fc f8a0 	bl	8000b08 <__aeabi_d2iz>
 80049c8:	4606      	mov	r6, r0
 80049ca:	f7fb fd83 	bl	80004d4 <__aeabi_i2d>
 80049ce:	4602      	mov	r2, r0
 80049d0:	460b      	mov	r3, r1
 80049d2:	4640      	mov	r0, r8
 80049d4:	4649      	mov	r1, r9
 80049d6:	f7fb fc2f 	bl	8000238 <__aeabi_dsub>
 80049da:	3630      	adds	r6, #48	; 0x30
 80049dc:	f805 6b01 	strb.w	r6, [r5], #1
 80049e0:	4652      	mov	r2, sl
 80049e2:	465b      	mov	r3, fp
 80049e4:	4680      	mov	r8, r0
 80049e6:	4689      	mov	r9, r1
 80049e8:	f7fc f850 	bl	8000a8c <__aeabi_dcmplt>
 80049ec:	2800      	cmp	r0, #0
 80049ee:	d163      	bne.n	8004ab8 <_dtoa_r+0x608>
 80049f0:	4642      	mov	r2, r8
 80049f2:	464b      	mov	r3, r9
 80049f4:	4936      	ldr	r1, [pc, #216]	; (8004ad0 <_dtoa_r+0x620>)
 80049f6:	2000      	movs	r0, #0
 80049f8:	f7fb fc1e 	bl	8000238 <__aeabi_dsub>
 80049fc:	4652      	mov	r2, sl
 80049fe:	465b      	mov	r3, fp
 8004a00:	f7fc f844 	bl	8000a8c <__aeabi_dcmplt>
 8004a04:	2800      	cmp	r0, #0
 8004a06:	f040 80b5 	bne.w	8004b74 <_dtoa_r+0x6c4>
 8004a0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a0c:	429d      	cmp	r5, r3
 8004a0e:	d081      	beq.n	8004914 <_dtoa_r+0x464>
 8004a10:	4b30      	ldr	r3, [pc, #192]	; (8004ad4 <_dtoa_r+0x624>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	4650      	mov	r0, sl
 8004a16:	4659      	mov	r1, fp
 8004a18:	f7fb fdc6 	bl	80005a8 <__aeabi_dmul>
 8004a1c:	4b2d      	ldr	r3, [pc, #180]	; (8004ad4 <_dtoa_r+0x624>)
 8004a1e:	4682      	mov	sl, r0
 8004a20:	468b      	mov	fp, r1
 8004a22:	4640      	mov	r0, r8
 8004a24:	4649      	mov	r1, r9
 8004a26:	2200      	movs	r2, #0
 8004a28:	f7fb fdbe 	bl	80005a8 <__aeabi_dmul>
 8004a2c:	4680      	mov	r8, r0
 8004a2e:	4689      	mov	r9, r1
 8004a30:	e7c6      	b.n	80049c0 <_dtoa_r+0x510>
 8004a32:	4650      	mov	r0, sl
 8004a34:	4659      	mov	r1, fp
 8004a36:	f7fb fdb7 	bl	80005a8 <__aeabi_dmul>
 8004a3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a3c:	9d01      	ldr	r5, [sp, #4]
 8004a3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a40:	4682      	mov	sl, r0
 8004a42:	468b      	mov	fp, r1
 8004a44:	4649      	mov	r1, r9
 8004a46:	4640      	mov	r0, r8
 8004a48:	f7fc f85e 	bl	8000b08 <__aeabi_d2iz>
 8004a4c:	4606      	mov	r6, r0
 8004a4e:	f7fb fd41 	bl	80004d4 <__aeabi_i2d>
 8004a52:	3630      	adds	r6, #48	; 0x30
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	4640      	mov	r0, r8
 8004a5a:	4649      	mov	r1, r9
 8004a5c:	f7fb fbec 	bl	8000238 <__aeabi_dsub>
 8004a60:	f805 6b01 	strb.w	r6, [r5], #1
 8004a64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a66:	429d      	cmp	r5, r3
 8004a68:	4680      	mov	r8, r0
 8004a6a:	4689      	mov	r9, r1
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	d124      	bne.n	8004abc <_dtoa_r+0x60c>
 8004a72:	4b1b      	ldr	r3, [pc, #108]	; (8004ae0 <_dtoa_r+0x630>)
 8004a74:	4650      	mov	r0, sl
 8004a76:	4659      	mov	r1, fp
 8004a78:	f7fb fbe0 	bl	800023c <__adddf3>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4640      	mov	r0, r8
 8004a82:	4649      	mov	r1, r9
 8004a84:	f7fc f820 	bl	8000ac8 <__aeabi_dcmpgt>
 8004a88:	2800      	cmp	r0, #0
 8004a8a:	d173      	bne.n	8004b74 <_dtoa_r+0x6c4>
 8004a8c:	4652      	mov	r2, sl
 8004a8e:	465b      	mov	r3, fp
 8004a90:	4913      	ldr	r1, [pc, #76]	; (8004ae0 <_dtoa_r+0x630>)
 8004a92:	2000      	movs	r0, #0
 8004a94:	f7fb fbd0 	bl	8000238 <__aeabi_dsub>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	4640      	mov	r0, r8
 8004a9e:	4649      	mov	r1, r9
 8004aa0:	f7fb fff4 	bl	8000a8c <__aeabi_dcmplt>
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	f43f af35 	beq.w	8004914 <_dtoa_r+0x464>
 8004aaa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004aac:	1e6b      	subs	r3, r5, #1
 8004aae:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ab0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004ab4:	2b30      	cmp	r3, #48	; 0x30
 8004ab6:	d0f8      	beq.n	8004aaa <_dtoa_r+0x5fa>
 8004ab8:	9700      	str	r7, [sp, #0]
 8004aba:	e049      	b.n	8004b50 <_dtoa_r+0x6a0>
 8004abc:	4b05      	ldr	r3, [pc, #20]	; (8004ad4 <_dtoa_r+0x624>)
 8004abe:	f7fb fd73 	bl	80005a8 <__aeabi_dmul>
 8004ac2:	4680      	mov	r8, r0
 8004ac4:	4689      	mov	r9, r1
 8004ac6:	e7bd      	b.n	8004a44 <_dtoa_r+0x594>
 8004ac8:	08008ea0 	.word	0x08008ea0
 8004acc:	08008e78 	.word	0x08008e78
 8004ad0:	3ff00000 	.word	0x3ff00000
 8004ad4:	40240000 	.word	0x40240000
 8004ad8:	401c0000 	.word	0x401c0000
 8004adc:	40140000 	.word	0x40140000
 8004ae0:	3fe00000 	.word	0x3fe00000
 8004ae4:	9d01      	ldr	r5, [sp, #4]
 8004ae6:	4656      	mov	r6, sl
 8004ae8:	465f      	mov	r7, fp
 8004aea:	4642      	mov	r2, r8
 8004aec:	464b      	mov	r3, r9
 8004aee:	4630      	mov	r0, r6
 8004af0:	4639      	mov	r1, r7
 8004af2:	f7fb fe83 	bl	80007fc <__aeabi_ddiv>
 8004af6:	f7fc f807 	bl	8000b08 <__aeabi_d2iz>
 8004afa:	4682      	mov	sl, r0
 8004afc:	f7fb fcea 	bl	80004d4 <__aeabi_i2d>
 8004b00:	4642      	mov	r2, r8
 8004b02:	464b      	mov	r3, r9
 8004b04:	f7fb fd50 	bl	80005a8 <__aeabi_dmul>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4630      	mov	r0, r6
 8004b0e:	4639      	mov	r1, r7
 8004b10:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004b14:	f7fb fb90 	bl	8000238 <__aeabi_dsub>
 8004b18:	f805 6b01 	strb.w	r6, [r5], #1
 8004b1c:	9e01      	ldr	r6, [sp, #4]
 8004b1e:	9f03      	ldr	r7, [sp, #12]
 8004b20:	1bae      	subs	r6, r5, r6
 8004b22:	42b7      	cmp	r7, r6
 8004b24:	4602      	mov	r2, r0
 8004b26:	460b      	mov	r3, r1
 8004b28:	d135      	bne.n	8004b96 <_dtoa_r+0x6e6>
 8004b2a:	f7fb fb87 	bl	800023c <__adddf3>
 8004b2e:	4642      	mov	r2, r8
 8004b30:	464b      	mov	r3, r9
 8004b32:	4606      	mov	r6, r0
 8004b34:	460f      	mov	r7, r1
 8004b36:	f7fb ffc7 	bl	8000ac8 <__aeabi_dcmpgt>
 8004b3a:	b9d0      	cbnz	r0, 8004b72 <_dtoa_r+0x6c2>
 8004b3c:	4642      	mov	r2, r8
 8004b3e:	464b      	mov	r3, r9
 8004b40:	4630      	mov	r0, r6
 8004b42:	4639      	mov	r1, r7
 8004b44:	f7fb ff98 	bl	8000a78 <__aeabi_dcmpeq>
 8004b48:	b110      	cbz	r0, 8004b50 <_dtoa_r+0x6a0>
 8004b4a:	f01a 0f01 	tst.w	sl, #1
 8004b4e:	d110      	bne.n	8004b72 <_dtoa_r+0x6c2>
 8004b50:	4620      	mov	r0, r4
 8004b52:	ee18 1a10 	vmov	r1, s16
 8004b56:	f000 fe67 	bl	8005828 <_Bfree>
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	9800      	ldr	r0, [sp, #0]
 8004b5e:	702b      	strb	r3, [r5, #0]
 8004b60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b62:	3001      	adds	r0, #1
 8004b64:	6018      	str	r0, [r3, #0]
 8004b66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f43f acf1 	beq.w	8004550 <_dtoa_r+0xa0>
 8004b6e:	601d      	str	r5, [r3, #0]
 8004b70:	e4ee      	b.n	8004550 <_dtoa_r+0xa0>
 8004b72:	9f00      	ldr	r7, [sp, #0]
 8004b74:	462b      	mov	r3, r5
 8004b76:	461d      	mov	r5, r3
 8004b78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b7c:	2a39      	cmp	r2, #57	; 0x39
 8004b7e:	d106      	bne.n	8004b8e <_dtoa_r+0x6de>
 8004b80:	9a01      	ldr	r2, [sp, #4]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d1f7      	bne.n	8004b76 <_dtoa_r+0x6c6>
 8004b86:	9901      	ldr	r1, [sp, #4]
 8004b88:	2230      	movs	r2, #48	; 0x30
 8004b8a:	3701      	adds	r7, #1
 8004b8c:	700a      	strb	r2, [r1, #0]
 8004b8e:	781a      	ldrb	r2, [r3, #0]
 8004b90:	3201      	adds	r2, #1
 8004b92:	701a      	strb	r2, [r3, #0]
 8004b94:	e790      	b.n	8004ab8 <_dtoa_r+0x608>
 8004b96:	4ba6      	ldr	r3, [pc, #664]	; (8004e30 <_dtoa_r+0x980>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f7fb fd05 	bl	80005a8 <__aeabi_dmul>
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	4606      	mov	r6, r0
 8004ba4:	460f      	mov	r7, r1
 8004ba6:	f7fb ff67 	bl	8000a78 <__aeabi_dcmpeq>
 8004baa:	2800      	cmp	r0, #0
 8004bac:	d09d      	beq.n	8004aea <_dtoa_r+0x63a>
 8004bae:	e7cf      	b.n	8004b50 <_dtoa_r+0x6a0>
 8004bb0:	9a08      	ldr	r2, [sp, #32]
 8004bb2:	2a00      	cmp	r2, #0
 8004bb4:	f000 80d7 	beq.w	8004d66 <_dtoa_r+0x8b6>
 8004bb8:	9a06      	ldr	r2, [sp, #24]
 8004bba:	2a01      	cmp	r2, #1
 8004bbc:	f300 80ba 	bgt.w	8004d34 <_dtoa_r+0x884>
 8004bc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004bc2:	2a00      	cmp	r2, #0
 8004bc4:	f000 80b2 	beq.w	8004d2c <_dtoa_r+0x87c>
 8004bc8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004bcc:	9e07      	ldr	r6, [sp, #28]
 8004bce:	9d04      	ldr	r5, [sp, #16]
 8004bd0:	9a04      	ldr	r2, [sp, #16]
 8004bd2:	441a      	add	r2, r3
 8004bd4:	9204      	str	r2, [sp, #16]
 8004bd6:	9a05      	ldr	r2, [sp, #20]
 8004bd8:	2101      	movs	r1, #1
 8004bda:	441a      	add	r2, r3
 8004bdc:	4620      	mov	r0, r4
 8004bde:	9205      	str	r2, [sp, #20]
 8004be0:	f000 ff24 	bl	8005a2c <__i2b>
 8004be4:	4607      	mov	r7, r0
 8004be6:	2d00      	cmp	r5, #0
 8004be8:	dd0c      	ble.n	8004c04 <_dtoa_r+0x754>
 8004bea:	9b05      	ldr	r3, [sp, #20]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	dd09      	ble.n	8004c04 <_dtoa_r+0x754>
 8004bf0:	42ab      	cmp	r3, r5
 8004bf2:	9a04      	ldr	r2, [sp, #16]
 8004bf4:	bfa8      	it	ge
 8004bf6:	462b      	movge	r3, r5
 8004bf8:	1ad2      	subs	r2, r2, r3
 8004bfa:	9204      	str	r2, [sp, #16]
 8004bfc:	9a05      	ldr	r2, [sp, #20]
 8004bfe:	1aed      	subs	r5, r5, r3
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	9305      	str	r3, [sp, #20]
 8004c04:	9b07      	ldr	r3, [sp, #28]
 8004c06:	b31b      	cbz	r3, 8004c50 <_dtoa_r+0x7a0>
 8004c08:	9b08      	ldr	r3, [sp, #32]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 80af 	beq.w	8004d6e <_dtoa_r+0x8be>
 8004c10:	2e00      	cmp	r6, #0
 8004c12:	dd13      	ble.n	8004c3c <_dtoa_r+0x78c>
 8004c14:	4639      	mov	r1, r7
 8004c16:	4632      	mov	r2, r6
 8004c18:	4620      	mov	r0, r4
 8004c1a:	f000 ffc7 	bl	8005bac <__pow5mult>
 8004c1e:	ee18 2a10 	vmov	r2, s16
 8004c22:	4601      	mov	r1, r0
 8004c24:	4607      	mov	r7, r0
 8004c26:	4620      	mov	r0, r4
 8004c28:	f000 ff16 	bl	8005a58 <__multiply>
 8004c2c:	ee18 1a10 	vmov	r1, s16
 8004c30:	4680      	mov	r8, r0
 8004c32:	4620      	mov	r0, r4
 8004c34:	f000 fdf8 	bl	8005828 <_Bfree>
 8004c38:	ee08 8a10 	vmov	s16, r8
 8004c3c:	9b07      	ldr	r3, [sp, #28]
 8004c3e:	1b9a      	subs	r2, r3, r6
 8004c40:	d006      	beq.n	8004c50 <_dtoa_r+0x7a0>
 8004c42:	ee18 1a10 	vmov	r1, s16
 8004c46:	4620      	mov	r0, r4
 8004c48:	f000 ffb0 	bl	8005bac <__pow5mult>
 8004c4c:	ee08 0a10 	vmov	s16, r0
 8004c50:	2101      	movs	r1, #1
 8004c52:	4620      	mov	r0, r4
 8004c54:	f000 feea 	bl	8005a2c <__i2b>
 8004c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	4606      	mov	r6, r0
 8004c5e:	f340 8088 	ble.w	8004d72 <_dtoa_r+0x8c2>
 8004c62:	461a      	mov	r2, r3
 8004c64:	4601      	mov	r1, r0
 8004c66:	4620      	mov	r0, r4
 8004c68:	f000 ffa0 	bl	8005bac <__pow5mult>
 8004c6c:	9b06      	ldr	r3, [sp, #24]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	4606      	mov	r6, r0
 8004c72:	f340 8081 	ble.w	8004d78 <_dtoa_r+0x8c8>
 8004c76:	f04f 0800 	mov.w	r8, #0
 8004c7a:	6933      	ldr	r3, [r6, #16]
 8004c7c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004c80:	6918      	ldr	r0, [r3, #16]
 8004c82:	f000 fe83 	bl	800598c <__hi0bits>
 8004c86:	f1c0 0020 	rsb	r0, r0, #32
 8004c8a:	9b05      	ldr	r3, [sp, #20]
 8004c8c:	4418      	add	r0, r3
 8004c8e:	f010 001f 	ands.w	r0, r0, #31
 8004c92:	f000 8092 	beq.w	8004dba <_dtoa_r+0x90a>
 8004c96:	f1c0 0320 	rsb	r3, r0, #32
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	f340 808a 	ble.w	8004db4 <_dtoa_r+0x904>
 8004ca0:	f1c0 001c 	rsb	r0, r0, #28
 8004ca4:	9b04      	ldr	r3, [sp, #16]
 8004ca6:	4403      	add	r3, r0
 8004ca8:	9304      	str	r3, [sp, #16]
 8004caa:	9b05      	ldr	r3, [sp, #20]
 8004cac:	4403      	add	r3, r0
 8004cae:	4405      	add	r5, r0
 8004cb0:	9305      	str	r3, [sp, #20]
 8004cb2:	9b04      	ldr	r3, [sp, #16]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	dd07      	ble.n	8004cc8 <_dtoa_r+0x818>
 8004cb8:	ee18 1a10 	vmov	r1, s16
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	f000 ffce 	bl	8005c60 <__lshift>
 8004cc4:	ee08 0a10 	vmov	s16, r0
 8004cc8:	9b05      	ldr	r3, [sp, #20]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	dd05      	ble.n	8004cda <_dtoa_r+0x82a>
 8004cce:	4631      	mov	r1, r6
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	f000 ffc4 	bl	8005c60 <__lshift>
 8004cd8:	4606      	mov	r6, r0
 8004cda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d06e      	beq.n	8004dbe <_dtoa_r+0x90e>
 8004ce0:	ee18 0a10 	vmov	r0, s16
 8004ce4:	4631      	mov	r1, r6
 8004ce6:	f001 f82b 	bl	8005d40 <__mcmp>
 8004cea:	2800      	cmp	r0, #0
 8004cec:	da67      	bge.n	8004dbe <_dtoa_r+0x90e>
 8004cee:	9b00      	ldr	r3, [sp, #0]
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	ee18 1a10 	vmov	r1, s16
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	220a      	movs	r2, #10
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	f000 fdb5 	bl	800586c <__multadd>
 8004d02:	9b08      	ldr	r3, [sp, #32]
 8004d04:	ee08 0a10 	vmov	s16, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 81b1 	beq.w	8005070 <_dtoa_r+0xbc0>
 8004d0e:	2300      	movs	r3, #0
 8004d10:	4639      	mov	r1, r7
 8004d12:	220a      	movs	r2, #10
 8004d14:	4620      	mov	r0, r4
 8004d16:	f000 fda9 	bl	800586c <__multadd>
 8004d1a:	9b02      	ldr	r3, [sp, #8]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	4607      	mov	r7, r0
 8004d20:	f300 808e 	bgt.w	8004e40 <_dtoa_r+0x990>
 8004d24:	9b06      	ldr	r3, [sp, #24]
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	dc51      	bgt.n	8004dce <_dtoa_r+0x91e>
 8004d2a:	e089      	b.n	8004e40 <_dtoa_r+0x990>
 8004d2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004d32:	e74b      	b.n	8004bcc <_dtoa_r+0x71c>
 8004d34:	9b03      	ldr	r3, [sp, #12]
 8004d36:	1e5e      	subs	r6, r3, #1
 8004d38:	9b07      	ldr	r3, [sp, #28]
 8004d3a:	42b3      	cmp	r3, r6
 8004d3c:	bfbf      	itttt	lt
 8004d3e:	9b07      	ldrlt	r3, [sp, #28]
 8004d40:	9607      	strlt	r6, [sp, #28]
 8004d42:	1af2      	sublt	r2, r6, r3
 8004d44:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004d46:	bfb6      	itet	lt
 8004d48:	189b      	addlt	r3, r3, r2
 8004d4a:	1b9e      	subge	r6, r3, r6
 8004d4c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8004d4e:	9b03      	ldr	r3, [sp, #12]
 8004d50:	bfb8      	it	lt
 8004d52:	2600      	movlt	r6, #0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	bfb7      	itett	lt
 8004d58:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8004d5c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004d60:	1a9d      	sublt	r5, r3, r2
 8004d62:	2300      	movlt	r3, #0
 8004d64:	e734      	b.n	8004bd0 <_dtoa_r+0x720>
 8004d66:	9e07      	ldr	r6, [sp, #28]
 8004d68:	9d04      	ldr	r5, [sp, #16]
 8004d6a:	9f08      	ldr	r7, [sp, #32]
 8004d6c:	e73b      	b.n	8004be6 <_dtoa_r+0x736>
 8004d6e:	9a07      	ldr	r2, [sp, #28]
 8004d70:	e767      	b.n	8004c42 <_dtoa_r+0x792>
 8004d72:	9b06      	ldr	r3, [sp, #24]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	dc18      	bgt.n	8004daa <_dtoa_r+0x8fa>
 8004d78:	f1ba 0f00 	cmp.w	sl, #0
 8004d7c:	d115      	bne.n	8004daa <_dtoa_r+0x8fa>
 8004d7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004d82:	b993      	cbnz	r3, 8004daa <_dtoa_r+0x8fa>
 8004d84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004d88:	0d1b      	lsrs	r3, r3, #20
 8004d8a:	051b      	lsls	r3, r3, #20
 8004d8c:	b183      	cbz	r3, 8004db0 <_dtoa_r+0x900>
 8004d8e:	9b04      	ldr	r3, [sp, #16]
 8004d90:	3301      	adds	r3, #1
 8004d92:	9304      	str	r3, [sp, #16]
 8004d94:	9b05      	ldr	r3, [sp, #20]
 8004d96:	3301      	adds	r3, #1
 8004d98:	9305      	str	r3, [sp, #20]
 8004d9a:	f04f 0801 	mov.w	r8, #1
 8004d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f47f af6a 	bne.w	8004c7a <_dtoa_r+0x7ca>
 8004da6:	2001      	movs	r0, #1
 8004da8:	e76f      	b.n	8004c8a <_dtoa_r+0x7da>
 8004daa:	f04f 0800 	mov.w	r8, #0
 8004dae:	e7f6      	b.n	8004d9e <_dtoa_r+0x8ee>
 8004db0:	4698      	mov	r8, r3
 8004db2:	e7f4      	b.n	8004d9e <_dtoa_r+0x8ee>
 8004db4:	f43f af7d 	beq.w	8004cb2 <_dtoa_r+0x802>
 8004db8:	4618      	mov	r0, r3
 8004dba:	301c      	adds	r0, #28
 8004dbc:	e772      	b.n	8004ca4 <_dtoa_r+0x7f4>
 8004dbe:	9b03      	ldr	r3, [sp, #12]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	dc37      	bgt.n	8004e34 <_dtoa_r+0x984>
 8004dc4:	9b06      	ldr	r3, [sp, #24]
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	dd34      	ble.n	8004e34 <_dtoa_r+0x984>
 8004dca:	9b03      	ldr	r3, [sp, #12]
 8004dcc:	9302      	str	r3, [sp, #8]
 8004dce:	9b02      	ldr	r3, [sp, #8]
 8004dd0:	b96b      	cbnz	r3, 8004dee <_dtoa_r+0x93e>
 8004dd2:	4631      	mov	r1, r6
 8004dd4:	2205      	movs	r2, #5
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	f000 fd48 	bl	800586c <__multadd>
 8004ddc:	4601      	mov	r1, r0
 8004dde:	4606      	mov	r6, r0
 8004de0:	ee18 0a10 	vmov	r0, s16
 8004de4:	f000 ffac 	bl	8005d40 <__mcmp>
 8004de8:	2800      	cmp	r0, #0
 8004dea:	f73f adbb 	bgt.w	8004964 <_dtoa_r+0x4b4>
 8004dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004df0:	9d01      	ldr	r5, [sp, #4]
 8004df2:	43db      	mvns	r3, r3
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	f04f 0800 	mov.w	r8, #0
 8004dfa:	4631      	mov	r1, r6
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	f000 fd13 	bl	8005828 <_Bfree>
 8004e02:	2f00      	cmp	r7, #0
 8004e04:	f43f aea4 	beq.w	8004b50 <_dtoa_r+0x6a0>
 8004e08:	f1b8 0f00 	cmp.w	r8, #0
 8004e0c:	d005      	beq.n	8004e1a <_dtoa_r+0x96a>
 8004e0e:	45b8      	cmp	r8, r7
 8004e10:	d003      	beq.n	8004e1a <_dtoa_r+0x96a>
 8004e12:	4641      	mov	r1, r8
 8004e14:	4620      	mov	r0, r4
 8004e16:	f000 fd07 	bl	8005828 <_Bfree>
 8004e1a:	4639      	mov	r1, r7
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	f000 fd03 	bl	8005828 <_Bfree>
 8004e22:	e695      	b.n	8004b50 <_dtoa_r+0x6a0>
 8004e24:	2600      	movs	r6, #0
 8004e26:	4637      	mov	r7, r6
 8004e28:	e7e1      	b.n	8004dee <_dtoa_r+0x93e>
 8004e2a:	9700      	str	r7, [sp, #0]
 8004e2c:	4637      	mov	r7, r6
 8004e2e:	e599      	b.n	8004964 <_dtoa_r+0x4b4>
 8004e30:	40240000 	.word	0x40240000
 8004e34:	9b08      	ldr	r3, [sp, #32]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 80ca 	beq.w	8004fd0 <_dtoa_r+0xb20>
 8004e3c:	9b03      	ldr	r3, [sp, #12]
 8004e3e:	9302      	str	r3, [sp, #8]
 8004e40:	2d00      	cmp	r5, #0
 8004e42:	dd05      	ble.n	8004e50 <_dtoa_r+0x9a0>
 8004e44:	4639      	mov	r1, r7
 8004e46:	462a      	mov	r2, r5
 8004e48:	4620      	mov	r0, r4
 8004e4a:	f000 ff09 	bl	8005c60 <__lshift>
 8004e4e:	4607      	mov	r7, r0
 8004e50:	f1b8 0f00 	cmp.w	r8, #0
 8004e54:	d05b      	beq.n	8004f0e <_dtoa_r+0xa5e>
 8004e56:	6879      	ldr	r1, [r7, #4]
 8004e58:	4620      	mov	r0, r4
 8004e5a:	f000 fca5 	bl	80057a8 <_Balloc>
 8004e5e:	4605      	mov	r5, r0
 8004e60:	b928      	cbnz	r0, 8004e6e <_dtoa_r+0x9be>
 8004e62:	4b87      	ldr	r3, [pc, #540]	; (8005080 <_dtoa_r+0xbd0>)
 8004e64:	4602      	mov	r2, r0
 8004e66:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004e6a:	f7ff bb3b 	b.w	80044e4 <_dtoa_r+0x34>
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	3202      	adds	r2, #2
 8004e72:	0092      	lsls	r2, r2, #2
 8004e74:	f107 010c 	add.w	r1, r7, #12
 8004e78:	300c      	adds	r0, #12
 8004e7a:	f7fd fd2b 	bl	80028d4 <memcpy>
 8004e7e:	2201      	movs	r2, #1
 8004e80:	4629      	mov	r1, r5
 8004e82:	4620      	mov	r0, r4
 8004e84:	f000 feec 	bl	8005c60 <__lshift>
 8004e88:	9b01      	ldr	r3, [sp, #4]
 8004e8a:	f103 0901 	add.w	r9, r3, #1
 8004e8e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8004e92:	4413      	add	r3, r2
 8004e94:	9305      	str	r3, [sp, #20]
 8004e96:	f00a 0301 	and.w	r3, sl, #1
 8004e9a:	46b8      	mov	r8, r7
 8004e9c:	9304      	str	r3, [sp, #16]
 8004e9e:	4607      	mov	r7, r0
 8004ea0:	4631      	mov	r1, r6
 8004ea2:	ee18 0a10 	vmov	r0, s16
 8004ea6:	f7ff fa77 	bl	8004398 <quorem>
 8004eaa:	4641      	mov	r1, r8
 8004eac:	9002      	str	r0, [sp, #8]
 8004eae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004eb2:	ee18 0a10 	vmov	r0, s16
 8004eb6:	f000 ff43 	bl	8005d40 <__mcmp>
 8004eba:	463a      	mov	r2, r7
 8004ebc:	9003      	str	r0, [sp, #12]
 8004ebe:	4631      	mov	r1, r6
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	f000 ff59 	bl	8005d78 <__mdiff>
 8004ec6:	68c2      	ldr	r2, [r0, #12]
 8004ec8:	f109 3bff 	add.w	fp, r9, #4294967295
 8004ecc:	4605      	mov	r5, r0
 8004ece:	bb02      	cbnz	r2, 8004f12 <_dtoa_r+0xa62>
 8004ed0:	4601      	mov	r1, r0
 8004ed2:	ee18 0a10 	vmov	r0, s16
 8004ed6:	f000 ff33 	bl	8005d40 <__mcmp>
 8004eda:	4602      	mov	r2, r0
 8004edc:	4629      	mov	r1, r5
 8004ede:	4620      	mov	r0, r4
 8004ee0:	9207      	str	r2, [sp, #28]
 8004ee2:	f000 fca1 	bl	8005828 <_Bfree>
 8004ee6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004eea:	ea43 0102 	orr.w	r1, r3, r2
 8004eee:	9b04      	ldr	r3, [sp, #16]
 8004ef0:	430b      	orrs	r3, r1
 8004ef2:	464d      	mov	r5, r9
 8004ef4:	d10f      	bne.n	8004f16 <_dtoa_r+0xa66>
 8004ef6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004efa:	d02a      	beq.n	8004f52 <_dtoa_r+0xaa2>
 8004efc:	9b03      	ldr	r3, [sp, #12]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	dd02      	ble.n	8004f08 <_dtoa_r+0xa58>
 8004f02:	9b02      	ldr	r3, [sp, #8]
 8004f04:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004f08:	f88b a000 	strb.w	sl, [fp]
 8004f0c:	e775      	b.n	8004dfa <_dtoa_r+0x94a>
 8004f0e:	4638      	mov	r0, r7
 8004f10:	e7ba      	b.n	8004e88 <_dtoa_r+0x9d8>
 8004f12:	2201      	movs	r2, #1
 8004f14:	e7e2      	b.n	8004edc <_dtoa_r+0xa2c>
 8004f16:	9b03      	ldr	r3, [sp, #12]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	db04      	blt.n	8004f26 <_dtoa_r+0xa76>
 8004f1c:	9906      	ldr	r1, [sp, #24]
 8004f1e:	430b      	orrs	r3, r1
 8004f20:	9904      	ldr	r1, [sp, #16]
 8004f22:	430b      	orrs	r3, r1
 8004f24:	d122      	bne.n	8004f6c <_dtoa_r+0xabc>
 8004f26:	2a00      	cmp	r2, #0
 8004f28:	ddee      	ble.n	8004f08 <_dtoa_r+0xa58>
 8004f2a:	ee18 1a10 	vmov	r1, s16
 8004f2e:	2201      	movs	r2, #1
 8004f30:	4620      	mov	r0, r4
 8004f32:	f000 fe95 	bl	8005c60 <__lshift>
 8004f36:	4631      	mov	r1, r6
 8004f38:	ee08 0a10 	vmov	s16, r0
 8004f3c:	f000 ff00 	bl	8005d40 <__mcmp>
 8004f40:	2800      	cmp	r0, #0
 8004f42:	dc03      	bgt.n	8004f4c <_dtoa_r+0xa9c>
 8004f44:	d1e0      	bne.n	8004f08 <_dtoa_r+0xa58>
 8004f46:	f01a 0f01 	tst.w	sl, #1
 8004f4a:	d0dd      	beq.n	8004f08 <_dtoa_r+0xa58>
 8004f4c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004f50:	d1d7      	bne.n	8004f02 <_dtoa_r+0xa52>
 8004f52:	2339      	movs	r3, #57	; 0x39
 8004f54:	f88b 3000 	strb.w	r3, [fp]
 8004f58:	462b      	mov	r3, r5
 8004f5a:	461d      	mov	r5, r3
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004f62:	2a39      	cmp	r2, #57	; 0x39
 8004f64:	d071      	beq.n	800504a <_dtoa_r+0xb9a>
 8004f66:	3201      	adds	r2, #1
 8004f68:	701a      	strb	r2, [r3, #0]
 8004f6a:	e746      	b.n	8004dfa <_dtoa_r+0x94a>
 8004f6c:	2a00      	cmp	r2, #0
 8004f6e:	dd07      	ble.n	8004f80 <_dtoa_r+0xad0>
 8004f70:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004f74:	d0ed      	beq.n	8004f52 <_dtoa_r+0xaa2>
 8004f76:	f10a 0301 	add.w	r3, sl, #1
 8004f7a:	f88b 3000 	strb.w	r3, [fp]
 8004f7e:	e73c      	b.n	8004dfa <_dtoa_r+0x94a>
 8004f80:	9b05      	ldr	r3, [sp, #20]
 8004f82:	f809 ac01 	strb.w	sl, [r9, #-1]
 8004f86:	4599      	cmp	r9, r3
 8004f88:	d047      	beq.n	800501a <_dtoa_r+0xb6a>
 8004f8a:	ee18 1a10 	vmov	r1, s16
 8004f8e:	2300      	movs	r3, #0
 8004f90:	220a      	movs	r2, #10
 8004f92:	4620      	mov	r0, r4
 8004f94:	f000 fc6a 	bl	800586c <__multadd>
 8004f98:	45b8      	cmp	r8, r7
 8004f9a:	ee08 0a10 	vmov	s16, r0
 8004f9e:	f04f 0300 	mov.w	r3, #0
 8004fa2:	f04f 020a 	mov.w	r2, #10
 8004fa6:	4641      	mov	r1, r8
 8004fa8:	4620      	mov	r0, r4
 8004faa:	d106      	bne.n	8004fba <_dtoa_r+0xb0a>
 8004fac:	f000 fc5e 	bl	800586c <__multadd>
 8004fb0:	4680      	mov	r8, r0
 8004fb2:	4607      	mov	r7, r0
 8004fb4:	f109 0901 	add.w	r9, r9, #1
 8004fb8:	e772      	b.n	8004ea0 <_dtoa_r+0x9f0>
 8004fba:	f000 fc57 	bl	800586c <__multadd>
 8004fbe:	4639      	mov	r1, r7
 8004fc0:	4680      	mov	r8, r0
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	220a      	movs	r2, #10
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	f000 fc50 	bl	800586c <__multadd>
 8004fcc:	4607      	mov	r7, r0
 8004fce:	e7f1      	b.n	8004fb4 <_dtoa_r+0xb04>
 8004fd0:	9b03      	ldr	r3, [sp, #12]
 8004fd2:	9302      	str	r3, [sp, #8]
 8004fd4:	9d01      	ldr	r5, [sp, #4]
 8004fd6:	ee18 0a10 	vmov	r0, s16
 8004fda:	4631      	mov	r1, r6
 8004fdc:	f7ff f9dc 	bl	8004398 <quorem>
 8004fe0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004fe4:	9b01      	ldr	r3, [sp, #4]
 8004fe6:	f805 ab01 	strb.w	sl, [r5], #1
 8004fea:	1aea      	subs	r2, r5, r3
 8004fec:	9b02      	ldr	r3, [sp, #8]
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	dd09      	ble.n	8005006 <_dtoa_r+0xb56>
 8004ff2:	ee18 1a10 	vmov	r1, s16
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	220a      	movs	r2, #10
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	f000 fc36 	bl	800586c <__multadd>
 8005000:	ee08 0a10 	vmov	s16, r0
 8005004:	e7e7      	b.n	8004fd6 <_dtoa_r+0xb26>
 8005006:	9b02      	ldr	r3, [sp, #8]
 8005008:	2b00      	cmp	r3, #0
 800500a:	bfc8      	it	gt
 800500c:	461d      	movgt	r5, r3
 800500e:	9b01      	ldr	r3, [sp, #4]
 8005010:	bfd8      	it	le
 8005012:	2501      	movle	r5, #1
 8005014:	441d      	add	r5, r3
 8005016:	f04f 0800 	mov.w	r8, #0
 800501a:	ee18 1a10 	vmov	r1, s16
 800501e:	2201      	movs	r2, #1
 8005020:	4620      	mov	r0, r4
 8005022:	f000 fe1d 	bl	8005c60 <__lshift>
 8005026:	4631      	mov	r1, r6
 8005028:	ee08 0a10 	vmov	s16, r0
 800502c:	f000 fe88 	bl	8005d40 <__mcmp>
 8005030:	2800      	cmp	r0, #0
 8005032:	dc91      	bgt.n	8004f58 <_dtoa_r+0xaa8>
 8005034:	d102      	bne.n	800503c <_dtoa_r+0xb8c>
 8005036:	f01a 0f01 	tst.w	sl, #1
 800503a:	d18d      	bne.n	8004f58 <_dtoa_r+0xaa8>
 800503c:	462b      	mov	r3, r5
 800503e:	461d      	mov	r5, r3
 8005040:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005044:	2a30      	cmp	r2, #48	; 0x30
 8005046:	d0fa      	beq.n	800503e <_dtoa_r+0xb8e>
 8005048:	e6d7      	b.n	8004dfa <_dtoa_r+0x94a>
 800504a:	9a01      	ldr	r2, [sp, #4]
 800504c:	429a      	cmp	r2, r3
 800504e:	d184      	bne.n	8004f5a <_dtoa_r+0xaaa>
 8005050:	9b00      	ldr	r3, [sp, #0]
 8005052:	3301      	adds	r3, #1
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	2331      	movs	r3, #49	; 0x31
 8005058:	7013      	strb	r3, [r2, #0]
 800505a:	e6ce      	b.n	8004dfa <_dtoa_r+0x94a>
 800505c:	4b09      	ldr	r3, [pc, #36]	; (8005084 <_dtoa_r+0xbd4>)
 800505e:	f7ff ba95 	b.w	800458c <_dtoa_r+0xdc>
 8005062:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005064:	2b00      	cmp	r3, #0
 8005066:	f47f aa6e 	bne.w	8004546 <_dtoa_r+0x96>
 800506a:	4b07      	ldr	r3, [pc, #28]	; (8005088 <_dtoa_r+0xbd8>)
 800506c:	f7ff ba8e 	b.w	800458c <_dtoa_r+0xdc>
 8005070:	9b02      	ldr	r3, [sp, #8]
 8005072:	2b00      	cmp	r3, #0
 8005074:	dcae      	bgt.n	8004fd4 <_dtoa_r+0xb24>
 8005076:	9b06      	ldr	r3, [sp, #24]
 8005078:	2b02      	cmp	r3, #2
 800507a:	f73f aea8 	bgt.w	8004dce <_dtoa_r+0x91e>
 800507e:	e7a9      	b.n	8004fd4 <_dtoa_r+0xb24>
 8005080:	08008d90 	.word	0x08008d90
 8005084:	08008b90 	.word	0x08008b90
 8005088:	08008d11 	.word	0x08008d11

0800508c <rshift>:
 800508c:	6903      	ldr	r3, [r0, #16]
 800508e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005092:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005096:	ea4f 1261 	mov.w	r2, r1, asr #5
 800509a:	f100 0414 	add.w	r4, r0, #20
 800509e:	dd45      	ble.n	800512c <rshift+0xa0>
 80050a0:	f011 011f 	ands.w	r1, r1, #31
 80050a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80050a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80050ac:	d10c      	bne.n	80050c8 <rshift+0x3c>
 80050ae:	f100 0710 	add.w	r7, r0, #16
 80050b2:	4629      	mov	r1, r5
 80050b4:	42b1      	cmp	r1, r6
 80050b6:	d334      	bcc.n	8005122 <rshift+0x96>
 80050b8:	1a9b      	subs	r3, r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	1eea      	subs	r2, r5, #3
 80050be:	4296      	cmp	r6, r2
 80050c0:	bf38      	it	cc
 80050c2:	2300      	movcc	r3, #0
 80050c4:	4423      	add	r3, r4
 80050c6:	e015      	b.n	80050f4 <rshift+0x68>
 80050c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80050cc:	f1c1 0820 	rsb	r8, r1, #32
 80050d0:	40cf      	lsrs	r7, r1
 80050d2:	f105 0e04 	add.w	lr, r5, #4
 80050d6:	46a1      	mov	r9, r4
 80050d8:	4576      	cmp	r6, lr
 80050da:	46f4      	mov	ip, lr
 80050dc:	d815      	bhi.n	800510a <rshift+0x7e>
 80050de:	1a9a      	subs	r2, r3, r2
 80050e0:	0092      	lsls	r2, r2, #2
 80050e2:	3a04      	subs	r2, #4
 80050e4:	3501      	adds	r5, #1
 80050e6:	42ae      	cmp	r6, r5
 80050e8:	bf38      	it	cc
 80050ea:	2200      	movcc	r2, #0
 80050ec:	18a3      	adds	r3, r4, r2
 80050ee:	50a7      	str	r7, [r4, r2]
 80050f0:	b107      	cbz	r7, 80050f4 <rshift+0x68>
 80050f2:	3304      	adds	r3, #4
 80050f4:	1b1a      	subs	r2, r3, r4
 80050f6:	42a3      	cmp	r3, r4
 80050f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80050fc:	bf08      	it	eq
 80050fe:	2300      	moveq	r3, #0
 8005100:	6102      	str	r2, [r0, #16]
 8005102:	bf08      	it	eq
 8005104:	6143      	streq	r3, [r0, #20]
 8005106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800510a:	f8dc c000 	ldr.w	ip, [ip]
 800510e:	fa0c fc08 	lsl.w	ip, ip, r8
 8005112:	ea4c 0707 	orr.w	r7, ip, r7
 8005116:	f849 7b04 	str.w	r7, [r9], #4
 800511a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800511e:	40cf      	lsrs	r7, r1
 8005120:	e7da      	b.n	80050d8 <rshift+0x4c>
 8005122:	f851 cb04 	ldr.w	ip, [r1], #4
 8005126:	f847 cf04 	str.w	ip, [r7, #4]!
 800512a:	e7c3      	b.n	80050b4 <rshift+0x28>
 800512c:	4623      	mov	r3, r4
 800512e:	e7e1      	b.n	80050f4 <rshift+0x68>

08005130 <__hexdig_fun>:
 8005130:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005134:	2b09      	cmp	r3, #9
 8005136:	d802      	bhi.n	800513e <__hexdig_fun+0xe>
 8005138:	3820      	subs	r0, #32
 800513a:	b2c0      	uxtb	r0, r0
 800513c:	4770      	bx	lr
 800513e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005142:	2b05      	cmp	r3, #5
 8005144:	d801      	bhi.n	800514a <__hexdig_fun+0x1a>
 8005146:	3847      	subs	r0, #71	; 0x47
 8005148:	e7f7      	b.n	800513a <__hexdig_fun+0xa>
 800514a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800514e:	2b05      	cmp	r3, #5
 8005150:	d801      	bhi.n	8005156 <__hexdig_fun+0x26>
 8005152:	3827      	subs	r0, #39	; 0x27
 8005154:	e7f1      	b.n	800513a <__hexdig_fun+0xa>
 8005156:	2000      	movs	r0, #0
 8005158:	4770      	bx	lr
	...

0800515c <__gethex>:
 800515c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005160:	ed2d 8b02 	vpush	{d8}
 8005164:	b089      	sub	sp, #36	; 0x24
 8005166:	ee08 0a10 	vmov	s16, r0
 800516a:	9304      	str	r3, [sp, #16]
 800516c:	4bb4      	ldr	r3, [pc, #720]	; (8005440 <__gethex+0x2e4>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	9301      	str	r3, [sp, #4]
 8005172:	4618      	mov	r0, r3
 8005174:	468b      	mov	fp, r1
 8005176:	4690      	mov	r8, r2
 8005178:	f7fb f802 	bl	8000180 <strlen>
 800517c:	9b01      	ldr	r3, [sp, #4]
 800517e:	f8db 2000 	ldr.w	r2, [fp]
 8005182:	4403      	add	r3, r0
 8005184:	4682      	mov	sl, r0
 8005186:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800518a:	9305      	str	r3, [sp, #20]
 800518c:	1c93      	adds	r3, r2, #2
 800518e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005192:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005196:	32fe      	adds	r2, #254	; 0xfe
 8005198:	18d1      	adds	r1, r2, r3
 800519a:	461f      	mov	r7, r3
 800519c:	f813 0b01 	ldrb.w	r0, [r3], #1
 80051a0:	9100      	str	r1, [sp, #0]
 80051a2:	2830      	cmp	r0, #48	; 0x30
 80051a4:	d0f8      	beq.n	8005198 <__gethex+0x3c>
 80051a6:	f7ff ffc3 	bl	8005130 <__hexdig_fun>
 80051aa:	4604      	mov	r4, r0
 80051ac:	2800      	cmp	r0, #0
 80051ae:	d13a      	bne.n	8005226 <__gethex+0xca>
 80051b0:	9901      	ldr	r1, [sp, #4]
 80051b2:	4652      	mov	r2, sl
 80051b4:	4638      	mov	r0, r7
 80051b6:	f001 fa23 	bl	8006600 <strncmp>
 80051ba:	4605      	mov	r5, r0
 80051bc:	2800      	cmp	r0, #0
 80051be:	d168      	bne.n	8005292 <__gethex+0x136>
 80051c0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80051c4:	eb07 060a 	add.w	r6, r7, sl
 80051c8:	f7ff ffb2 	bl	8005130 <__hexdig_fun>
 80051cc:	2800      	cmp	r0, #0
 80051ce:	d062      	beq.n	8005296 <__gethex+0x13a>
 80051d0:	4633      	mov	r3, r6
 80051d2:	7818      	ldrb	r0, [r3, #0]
 80051d4:	2830      	cmp	r0, #48	; 0x30
 80051d6:	461f      	mov	r7, r3
 80051d8:	f103 0301 	add.w	r3, r3, #1
 80051dc:	d0f9      	beq.n	80051d2 <__gethex+0x76>
 80051de:	f7ff ffa7 	bl	8005130 <__hexdig_fun>
 80051e2:	2301      	movs	r3, #1
 80051e4:	fab0 f480 	clz	r4, r0
 80051e8:	0964      	lsrs	r4, r4, #5
 80051ea:	4635      	mov	r5, r6
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	463a      	mov	r2, r7
 80051f0:	4616      	mov	r6, r2
 80051f2:	3201      	adds	r2, #1
 80051f4:	7830      	ldrb	r0, [r6, #0]
 80051f6:	f7ff ff9b 	bl	8005130 <__hexdig_fun>
 80051fa:	2800      	cmp	r0, #0
 80051fc:	d1f8      	bne.n	80051f0 <__gethex+0x94>
 80051fe:	9901      	ldr	r1, [sp, #4]
 8005200:	4652      	mov	r2, sl
 8005202:	4630      	mov	r0, r6
 8005204:	f001 f9fc 	bl	8006600 <strncmp>
 8005208:	b980      	cbnz	r0, 800522c <__gethex+0xd0>
 800520a:	b94d      	cbnz	r5, 8005220 <__gethex+0xc4>
 800520c:	eb06 050a 	add.w	r5, r6, sl
 8005210:	462a      	mov	r2, r5
 8005212:	4616      	mov	r6, r2
 8005214:	3201      	adds	r2, #1
 8005216:	7830      	ldrb	r0, [r6, #0]
 8005218:	f7ff ff8a 	bl	8005130 <__hexdig_fun>
 800521c:	2800      	cmp	r0, #0
 800521e:	d1f8      	bne.n	8005212 <__gethex+0xb6>
 8005220:	1bad      	subs	r5, r5, r6
 8005222:	00ad      	lsls	r5, r5, #2
 8005224:	e004      	b.n	8005230 <__gethex+0xd4>
 8005226:	2400      	movs	r4, #0
 8005228:	4625      	mov	r5, r4
 800522a:	e7e0      	b.n	80051ee <__gethex+0x92>
 800522c:	2d00      	cmp	r5, #0
 800522e:	d1f7      	bne.n	8005220 <__gethex+0xc4>
 8005230:	7833      	ldrb	r3, [r6, #0]
 8005232:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005236:	2b50      	cmp	r3, #80	; 0x50
 8005238:	d13b      	bne.n	80052b2 <__gethex+0x156>
 800523a:	7873      	ldrb	r3, [r6, #1]
 800523c:	2b2b      	cmp	r3, #43	; 0x2b
 800523e:	d02c      	beq.n	800529a <__gethex+0x13e>
 8005240:	2b2d      	cmp	r3, #45	; 0x2d
 8005242:	d02e      	beq.n	80052a2 <__gethex+0x146>
 8005244:	1c71      	adds	r1, r6, #1
 8005246:	f04f 0900 	mov.w	r9, #0
 800524a:	7808      	ldrb	r0, [r1, #0]
 800524c:	f7ff ff70 	bl	8005130 <__hexdig_fun>
 8005250:	1e43      	subs	r3, r0, #1
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b18      	cmp	r3, #24
 8005256:	d82c      	bhi.n	80052b2 <__gethex+0x156>
 8005258:	f1a0 0210 	sub.w	r2, r0, #16
 800525c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005260:	f7ff ff66 	bl	8005130 <__hexdig_fun>
 8005264:	1e43      	subs	r3, r0, #1
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b18      	cmp	r3, #24
 800526a:	d91d      	bls.n	80052a8 <__gethex+0x14c>
 800526c:	f1b9 0f00 	cmp.w	r9, #0
 8005270:	d000      	beq.n	8005274 <__gethex+0x118>
 8005272:	4252      	negs	r2, r2
 8005274:	4415      	add	r5, r2
 8005276:	f8cb 1000 	str.w	r1, [fp]
 800527a:	b1e4      	cbz	r4, 80052b6 <__gethex+0x15a>
 800527c:	9b00      	ldr	r3, [sp, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	bf14      	ite	ne
 8005282:	2700      	movne	r7, #0
 8005284:	2706      	moveq	r7, #6
 8005286:	4638      	mov	r0, r7
 8005288:	b009      	add	sp, #36	; 0x24
 800528a:	ecbd 8b02 	vpop	{d8}
 800528e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005292:	463e      	mov	r6, r7
 8005294:	4625      	mov	r5, r4
 8005296:	2401      	movs	r4, #1
 8005298:	e7ca      	b.n	8005230 <__gethex+0xd4>
 800529a:	f04f 0900 	mov.w	r9, #0
 800529e:	1cb1      	adds	r1, r6, #2
 80052a0:	e7d3      	b.n	800524a <__gethex+0xee>
 80052a2:	f04f 0901 	mov.w	r9, #1
 80052a6:	e7fa      	b.n	800529e <__gethex+0x142>
 80052a8:	230a      	movs	r3, #10
 80052aa:	fb03 0202 	mla	r2, r3, r2, r0
 80052ae:	3a10      	subs	r2, #16
 80052b0:	e7d4      	b.n	800525c <__gethex+0x100>
 80052b2:	4631      	mov	r1, r6
 80052b4:	e7df      	b.n	8005276 <__gethex+0x11a>
 80052b6:	1bf3      	subs	r3, r6, r7
 80052b8:	3b01      	subs	r3, #1
 80052ba:	4621      	mov	r1, r4
 80052bc:	2b07      	cmp	r3, #7
 80052be:	dc0b      	bgt.n	80052d8 <__gethex+0x17c>
 80052c0:	ee18 0a10 	vmov	r0, s16
 80052c4:	f000 fa70 	bl	80057a8 <_Balloc>
 80052c8:	4604      	mov	r4, r0
 80052ca:	b940      	cbnz	r0, 80052de <__gethex+0x182>
 80052cc:	4b5d      	ldr	r3, [pc, #372]	; (8005444 <__gethex+0x2e8>)
 80052ce:	4602      	mov	r2, r0
 80052d0:	21de      	movs	r1, #222	; 0xde
 80052d2:	485d      	ldr	r0, [pc, #372]	; (8005448 <__gethex+0x2ec>)
 80052d4:	f001 f9b6 	bl	8006644 <__assert_func>
 80052d8:	3101      	adds	r1, #1
 80052da:	105b      	asrs	r3, r3, #1
 80052dc:	e7ee      	b.n	80052bc <__gethex+0x160>
 80052de:	f100 0914 	add.w	r9, r0, #20
 80052e2:	f04f 0b00 	mov.w	fp, #0
 80052e6:	f1ca 0301 	rsb	r3, sl, #1
 80052ea:	f8cd 9008 	str.w	r9, [sp, #8]
 80052ee:	f8cd b000 	str.w	fp, [sp]
 80052f2:	9306      	str	r3, [sp, #24]
 80052f4:	42b7      	cmp	r7, r6
 80052f6:	d340      	bcc.n	800537a <__gethex+0x21e>
 80052f8:	9802      	ldr	r0, [sp, #8]
 80052fa:	9b00      	ldr	r3, [sp, #0]
 80052fc:	f840 3b04 	str.w	r3, [r0], #4
 8005300:	eba0 0009 	sub.w	r0, r0, r9
 8005304:	1080      	asrs	r0, r0, #2
 8005306:	0146      	lsls	r6, r0, #5
 8005308:	6120      	str	r0, [r4, #16]
 800530a:	4618      	mov	r0, r3
 800530c:	f000 fb3e 	bl	800598c <__hi0bits>
 8005310:	1a30      	subs	r0, r6, r0
 8005312:	f8d8 6000 	ldr.w	r6, [r8]
 8005316:	42b0      	cmp	r0, r6
 8005318:	dd63      	ble.n	80053e2 <__gethex+0x286>
 800531a:	1b87      	subs	r7, r0, r6
 800531c:	4639      	mov	r1, r7
 800531e:	4620      	mov	r0, r4
 8005320:	f000 fee2 	bl	80060e8 <__any_on>
 8005324:	4682      	mov	sl, r0
 8005326:	b1a8      	cbz	r0, 8005354 <__gethex+0x1f8>
 8005328:	1e7b      	subs	r3, r7, #1
 800532a:	1159      	asrs	r1, r3, #5
 800532c:	f003 021f 	and.w	r2, r3, #31
 8005330:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005334:	f04f 0a01 	mov.w	sl, #1
 8005338:	fa0a f202 	lsl.w	r2, sl, r2
 800533c:	420a      	tst	r2, r1
 800533e:	d009      	beq.n	8005354 <__gethex+0x1f8>
 8005340:	4553      	cmp	r3, sl
 8005342:	dd05      	ble.n	8005350 <__gethex+0x1f4>
 8005344:	1eb9      	subs	r1, r7, #2
 8005346:	4620      	mov	r0, r4
 8005348:	f000 fece 	bl	80060e8 <__any_on>
 800534c:	2800      	cmp	r0, #0
 800534e:	d145      	bne.n	80053dc <__gethex+0x280>
 8005350:	f04f 0a02 	mov.w	sl, #2
 8005354:	4639      	mov	r1, r7
 8005356:	4620      	mov	r0, r4
 8005358:	f7ff fe98 	bl	800508c <rshift>
 800535c:	443d      	add	r5, r7
 800535e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005362:	42ab      	cmp	r3, r5
 8005364:	da4c      	bge.n	8005400 <__gethex+0x2a4>
 8005366:	ee18 0a10 	vmov	r0, s16
 800536a:	4621      	mov	r1, r4
 800536c:	f000 fa5c 	bl	8005828 <_Bfree>
 8005370:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005372:	2300      	movs	r3, #0
 8005374:	6013      	str	r3, [r2, #0]
 8005376:	27a3      	movs	r7, #163	; 0xa3
 8005378:	e785      	b.n	8005286 <__gethex+0x12a>
 800537a:	1e73      	subs	r3, r6, #1
 800537c:	9a05      	ldr	r2, [sp, #20]
 800537e:	9303      	str	r3, [sp, #12]
 8005380:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005384:	4293      	cmp	r3, r2
 8005386:	d019      	beq.n	80053bc <__gethex+0x260>
 8005388:	f1bb 0f20 	cmp.w	fp, #32
 800538c:	d107      	bne.n	800539e <__gethex+0x242>
 800538e:	9b02      	ldr	r3, [sp, #8]
 8005390:	9a00      	ldr	r2, [sp, #0]
 8005392:	f843 2b04 	str.w	r2, [r3], #4
 8005396:	9302      	str	r3, [sp, #8]
 8005398:	2300      	movs	r3, #0
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	469b      	mov	fp, r3
 800539e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80053a2:	f7ff fec5 	bl	8005130 <__hexdig_fun>
 80053a6:	9b00      	ldr	r3, [sp, #0]
 80053a8:	f000 000f 	and.w	r0, r0, #15
 80053ac:	fa00 f00b 	lsl.w	r0, r0, fp
 80053b0:	4303      	orrs	r3, r0
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	f10b 0b04 	add.w	fp, fp, #4
 80053b8:	9b03      	ldr	r3, [sp, #12]
 80053ba:	e00d      	b.n	80053d8 <__gethex+0x27c>
 80053bc:	9b03      	ldr	r3, [sp, #12]
 80053be:	9a06      	ldr	r2, [sp, #24]
 80053c0:	4413      	add	r3, r2
 80053c2:	42bb      	cmp	r3, r7
 80053c4:	d3e0      	bcc.n	8005388 <__gethex+0x22c>
 80053c6:	4618      	mov	r0, r3
 80053c8:	9901      	ldr	r1, [sp, #4]
 80053ca:	9307      	str	r3, [sp, #28]
 80053cc:	4652      	mov	r2, sl
 80053ce:	f001 f917 	bl	8006600 <strncmp>
 80053d2:	9b07      	ldr	r3, [sp, #28]
 80053d4:	2800      	cmp	r0, #0
 80053d6:	d1d7      	bne.n	8005388 <__gethex+0x22c>
 80053d8:	461e      	mov	r6, r3
 80053da:	e78b      	b.n	80052f4 <__gethex+0x198>
 80053dc:	f04f 0a03 	mov.w	sl, #3
 80053e0:	e7b8      	b.n	8005354 <__gethex+0x1f8>
 80053e2:	da0a      	bge.n	80053fa <__gethex+0x29e>
 80053e4:	1a37      	subs	r7, r6, r0
 80053e6:	4621      	mov	r1, r4
 80053e8:	ee18 0a10 	vmov	r0, s16
 80053ec:	463a      	mov	r2, r7
 80053ee:	f000 fc37 	bl	8005c60 <__lshift>
 80053f2:	1bed      	subs	r5, r5, r7
 80053f4:	4604      	mov	r4, r0
 80053f6:	f100 0914 	add.w	r9, r0, #20
 80053fa:	f04f 0a00 	mov.w	sl, #0
 80053fe:	e7ae      	b.n	800535e <__gethex+0x202>
 8005400:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005404:	42a8      	cmp	r0, r5
 8005406:	dd72      	ble.n	80054ee <__gethex+0x392>
 8005408:	1b45      	subs	r5, r0, r5
 800540a:	42ae      	cmp	r6, r5
 800540c:	dc36      	bgt.n	800547c <__gethex+0x320>
 800540e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005412:	2b02      	cmp	r3, #2
 8005414:	d02a      	beq.n	800546c <__gethex+0x310>
 8005416:	2b03      	cmp	r3, #3
 8005418:	d02c      	beq.n	8005474 <__gethex+0x318>
 800541a:	2b01      	cmp	r3, #1
 800541c:	d11c      	bne.n	8005458 <__gethex+0x2fc>
 800541e:	42ae      	cmp	r6, r5
 8005420:	d11a      	bne.n	8005458 <__gethex+0x2fc>
 8005422:	2e01      	cmp	r6, #1
 8005424:	d112      	bne.n	800544c <__gethex+0x2f0>
 8005426:	9a04      	ldr	r2, [sp, #16]
 8005428:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	2301      	movs	r3, #1
 8005430:	6123      	str	r3, [r4, #16]
 8005432:	f8c9 3000 	str.w	r3, [r9]
 8005436:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005438:	2762      	movs	r7, #98	; 0x62
 800543a:	601c      	str	r4, [r3, #0]
 800543c:	e723      	b.n	8005286 <__gethex+0x12a>
 800543e:	bf00      	nop
 8005440:	08008e08 	.word	0x08008e08
 8005444:	08008d90 	.word	0x08008d90
 8005448:	08008da1 	.word	0x08008da1
 800544c:	1e71      	subs	r1, r6, #1
 800544e:	4620      	mov	r0, r4
 8005450:	f000 fe4a 	bl	80060e8 <__any_on>
 8005454:	2800      	cmp	r0, #0
 8005456:	d1e6      	bne.n	8005426 <__gethex+0x2ca>
 8005458:	ee18 0a10 	vmov	r0, s16
 800545c:	4621      	mov	r1, r4
 800545e:	f000 f9e3 	bl	8005828 <_Bfree>
 8005462:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005464:	2300      	movs	r3, #0
 8005466:	6013      	str	r3, [r2, #0]
 8005468:	2750      	movs	r7, #80	; 0x50
 800546a:	e70c      	b.n	8005286 <__gethex+0x12a>
 800546c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1f2      	bne.n	8005458 <__gethex+0x2fc>
 8005472:	e7d8      	b.n	8005426 <__gethex+0x2ca>
 8005474:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1d5      	bne.n	8005426 <__gethex+0x2ca>
 800547a:	e7ed      	b.n	8005458 <__gethex+0x2fc>
 800547c:	1e6f      	subs	r7, r5, #1
 800547e:	f1ba 0f00 	cmp.w	sl, #0
 8005482:	d131      	bne.n	80054e8 <__gethex+0x38c>
 8005484:	b127      	cbz	r7, 8005490 <__gethex+0x334>
 8005486:	4639      	mov	r1, r7
 8005488:	4620      	mov	r0, r4
 800548a:	f000 fe2d 	bl	80060e8 <__any_on>
 800548e:	4682      	mov	sl, r0
 8005490:	117b      	asrs	r3, r7, #5
 8005492:	2101      	movs	r1, #1
 8005494:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005498:	f007 071f 	and.w	r7, r7, #31
 800549c:	fa01 f707 	lsl.w	r7, r1, r7
 80054a0:	421f      	tst	r7, r3
 80054a2:	4629      	mov	r1, r5
 80054a4:	4620      	mov	r0, r4
 80054a6:	bf18      	it	ne
 80054a8:	f04a 0a02 	orrne.w	sl, sl, #2
 80054ac:	1b76      	subs	r6, r6, r5
 80054ae:	f7ff fded 	bl	800508c <rshift>
 80054b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80054b6:	2702      	movs	r7, #2
 80054b8:	f1ba 0f00 	cmp.w	sl, #0
 80054bc:	d048      	beq.n	8005550 <__gethex+0x3f4>
 80054be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d015      	beq.n	80054f2 <__gethex+0x396>
 80054c6:	2b03      	cmp	r3, #3
 80054c8:	d017      	beq.n	80054fa <__gethex+0x39e>
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d109      	bne.n	80054e2 <__gethex+0x386>
 80054ce:	f01a 0f02 	tst.w	sl, #2
 80054d2:	d006      	beq.n	80054e2 <__gethex+0x386>
 80054d4:	f8d9 0000 	ldr.w	r0, [r9]
 80054d8:	ea4a 0a00 	orr.w	sl, sl, r0
 80054dc:	f01a 0f01 	tst.w	sl, #1
 80054e0:	d10e      	bne.n	8005500 <__gethex+0x3a4>
 80054e2:	f047 0710 	orr.w	r7, r7, #16
 80054e6:	e033      	b.n	8005550 <__gethex+0x3f4>
 80054e8:	f04f 0a01 	mov.w	sl, #1
 80054ec:	e7d0      	b.n	8005490 <__gethex+0x334>
 80054ee:	2701      	movs	r7, #1
 80054f0:	e7e2      	b.n	80054b8 <__gethex+0x35c>
 80054f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80054f4:	f1c3 0301 	rsb	r3, r3, #1
 80054f8:	9315      	str	r3, [sp, #84]	; 0x54
 80054fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d0f0      	beq.n	80054e2 <__gethex+0x386>
 8005500:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005504:	f104 0314 	add.w	r3, r4, #20
 8005508:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800550c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005510:	f04f 0c00 	mov.w	ip, #0
 8005514:	4618      	mov	r0, r3
 8005516:	f853 2b04 	ldr.w	r2, [r3], #4
 800551a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800551e:	d01c      	beq.n	800555a <__gethex+0x3fe>
 8005520:	3201      	adds	r2, #1
 8005522:	6002      	str	r2, [r0, #0]
 8005524:	2f02      	cmp	r7, #2
 8005526:	f104 0314 	add.w	r3, r4, #20
 800552a:	d13f      	bne.n	80055ac <__gethex+0x450>
 800552c:	f8d8 2000 	ldr.w	r2, [r8]
 8005530:	3a01      	subs	r2, #1
 8005532:	42b2      	cmp	r2, r6
 8005534:	d10a      	bne.n	800554c <__gethex+0x3f0>
 8005536:	1171      	asrs	r1, r6, #5
 8005538:	2201      	movs	r2, #1
 800553a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800553e:	f006 061f 	and.w	r6, r6, #31
 8005542:	fa02 f606 	lsl.w	r6, r2, r6
 8005546:	421e      	tst	r6, r3
 8005548:	bf18      	it	ne
 800554a:	4617      	movne	r7, r2
 800554c:	f047 0720 	orr.w	r7, r7, #32
 8005550:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005552:	601c      	str	r4, [r3, #0]
 8005554:	9b04      	ldr	r3, [sp, #16]
 8005556:	601d      	str	r5, [r3, #0]
 8005558:	e695      	b.n	8005286 <__gethex+0x12a>
 800555a:	4299      	cmp	r1, r3
 800555c:	f843 cc04 	str.w	ip, [r3, #-4]
 8005560:	d8d8      	bhi.n	8005514 <__gethex+0x3b8>
 8005562:	68a3      	ldr	r3, [r4, #8]
 8005564:	459b      	cmp	fp, r3
 8005566:	db19      	blt.n	800559c <__gethex+0x440>
 8005568:	6861      	ldr	r1, [r4, #4]
 800556a:	ee18 0a10 	vmov	r0, s16
 800556e:	3101      	adds	r1, #1
 8005570:	f000 f91a 	bl	80057a8 <_Balloc>
 8005574:	4681      	mov	r9, r0
 8005576:	b918      	cbnz	r0, 8005580 <__gethex+0x424>
 8005578:	4b1a      	ldr	r3, [pc, #104]	; (80055e4 <__gethex+0x488>)
 800557a:	4602      	mov	r2, r0
 800557c:	2184      	movs	r1, #132	; 0x84
 800557e:	e6a8      	b.n	80052d2 <__gethex+0x176>
 8005580:	6922      	ldr	r2, [r4, #16]
 8005582:	3202      	adds	r2, #2
 8005584:	f104 010c 	add.w	r1, r4, #12
 8005588:	0092      	lsls	r2, r2, #2
 800558a:	300c      	adds	r0, #12
 800558c:	f7fd f9a2 	bl	80028d4 <memcpy>
 8005590:	4621      	mov	r1, r4
 8005592:	ee18 0a10 	vmov	r0, s16
 8005596:	f000 f947 	bl	8005828 <_Bfree>
 800559a:	464c      	mov	r4, r9
 800559c:	6923      	ldr	r3, [r4, #16]
 800559e:	1c5a      	adds	r2, r3, #1
 80055a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80055a4:	6122      	str	r2, [r4, #16]
 80055a6:	2201      	movs	r2, #1
 80055a8:	615a      	str	r2, [r3, #20]
 80055aa:	e7bb      	b.n	8005524 <__gethex+0x3c8>
 80055ac:	6922      	ldr	r2, [r4, #16]
 80055ae:	455a      	cmp	r2, fp
 80055b0:	dd0b      	ble.n	80055ca <__gethex+0x46e>
 80055b2:	2101      	movs	r1, #1
 80055b4:	4620      	mov	r0, r4
 80055b6:	f7ff fd69 	bl	800508c <rshift>
 80055ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80055be:	3501      	adds	r5, #1
 80055c0:	42ab      	cmp	r3, r5
 80055c2:	f6ff aed0 	blt.w	8005366 <__gethex+0x20a>
 80055c6:	2701      	movs	r7, #1
 80055c8:	e7c0      	b.n	800554c <__gethex+0x3f0>
 80055ca:	f016 061f 	ands.w	r6, r6, #31
 80055ce:	d0fa      	beq.n	80055c6 <__gethex+0x46a>
 80055d0:	4453      	add	r3, sl
 80055d2:	f1c6 0620 	rsb	r6, r6, #32
 80055d6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80055da:	f000 f9d7 	bl	800598c <__hi0bits>
 80055de:	42b0      	cmp	r0, r6
 80055e0:	dbe7      	blt.n	80055b2 <__gethex+0x456>
 80055e2:	e7f0      	b.n	80055c6 <__gethex+0x46a>
 80055e4:	08008d90 	.word	0x08008d90

080055e8 <L_shift>:
 80055e8:	f1c2 0208 	rsb	r2, r2, #8
 80055ec:	0092      	lsls	r2, r2, #2
 80055ee:	b570      	push	{r4, r5, r6, lr}
 80055f0:	f1c2 0620 	rsb	r6, r2, #32
 80055f4:	6843      	ldr	r3, [r0, #4]
 80055f6:	6804      	ldr	r4, [r0, #0]
 80055f8:	fa03 f506 	lsl.w	r5, r3, r6
 80055fc:	432c      	orrs	r4, r5
 80055fe:	40d3      	lsrs	r3, r2
 8005600:	6004      	str	r4, [r0, #0]
 8005602:	f840 3f04 	str.w	r3, [r0, #4]!
 8005606:	4288      	cmp	r0, r1
 8005608:	d3f4      	bcc.n	80055f4 <L_shift+0xc>
 800560a:	bd70      	pop	{r4, r5, r6, pc}

0800560c <__match>:
 800560c:	b530      	push	{r4, r5, lr}
 800560e:	6803      	ldr	r3, [r0, #0]
 8005610:	3301      	adds	r3, #1
 8005612:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005616:	b914      	cbnz	r4, 800561e <__match+0x12>
 8005618:	6003      	str	r3, [r0, #0]
 800561a:	2001      	movs	r0, #1
 800561c:	bd30      	pop	{r4, r5, pc}
 800561e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005622:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005626:	2d19      	cmp	r5, #25
 8005628:	bf98      	it	ls
 800562a:	3220      	addls	r2, #32
 800562c:	42a2      	cmp	r2, r4
 800562e:	d0f0      	beq.n	8005612 <__match+0x6>
 8005630:	2000      	movs	r0, #0
 8005632:	e7f3      	b.n	800561c <__match+0x10>

08005634 <__hexnan>:
 8005634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005638:	680b      	ldr	r3, [r1, #0]
 800563a:	115e      	asrs	r6, r3, #5
 800563c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005640:	f013 031f 	ands.w	r3, r3, #31
 8005644:	b087      	sub	sp, #28
 8005646:	bf18      	it	ne
 8005648:	3604      	addne	r6, #4
 800564a:	2500      	movs	r5, #0
 800564c:	1f37      	subs	r7, r6, #4
 800564e:	4690      	mov	r8, r2
 8005650:	6802      	ldr	r2, [r0, #0]
 8005652:	9301      	str	r3, [sp, #4]
 8005654:	4682      	mov	sl, r0
 8005656:	f846 5c04 	str.w	r5, [r6, #-4]
 800565a:	46b9      	mov	r9, r7
 800565c:	463c      	mov	r4, r7
 800565e:	9502      	str	r5, [sp, #8]
 8005660:	46ab      	mov	fp, r5
 8005662:	7851      	ldrb	r1, [r2, #1]
 8005664:	1c53      	adds	r3, r2, #1
 8005666:	9303      	str	r3, [sp, #12]
 8005668:	b341      	cbz	r1, 80056bc <__hexnan+0x88>
 800566a:	4608      	mov	r0, r1
 800566c:	9205      	str	r2, [sp, #20]
 800566e:	9104      	str	r1, [sp, #16]
 8005670:	f7ff fd5e 	bl	8005130 <__hexdig_fun>
 8005674:	2800      	cmp	r0, #0
 8005676:	d14f      	bne.n	8005718 <__hexnan+0xe4>
 8005678:	9904      	ldr	r1, [sp, #16]
 800567a:	9a05      	ldr	r2, [sp, #20]
 800567c:	2920      	cmp	r1, #32
 800567e:	d818      	bhi.n	80056b2 <__hexnan+0x7e>
 8005680:	9b02      	ldr	r3, [sp, #8]
 8005682:	459b      	cmp	fp, r3
 8005684:	dd13      	ble.n	80056ae <__hexnan+0x7a>
 8005686:	454c      	cmp	r4, r9
 8005688:	d206      	bcs.n	8005698 <__hexnan+0x64>
 800568a:	2d07      	cmp	r5, #7
 800568c:	dc04      	bgt.n	8005698 <__hexnan+0x64>
 800568e:	462a      	mov	r2, r5
 8005690:	4649      	mov	r1, r9
 8005692:	4620      	mov	r0, r4
 8005694:	f7ff ffa8 	bl	80055e8 <L_shift>
 8005698:	4544      	cmp	r4, r8
 800569a:	d950      	bls.n	800573e <__hexnan+0x10a>
 800569c:	2300      	movs	r3, #0
 800569e:	f1a4 0904 	sub.w	r9, r4, #4
 80056a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80056a6:	f8cd b008 	str.w	fp, [sp, #8]
 80056aa:	464c      	mov	r4, r9
 80056ac:	461d      	mov	r5, r3
 80056ae:	9a03      	ldr	r2, [sp, #12]
 80056b0:	e7d7      	b.n	8005662 <__hexnan+0x2e>
 80056b2:	2929      	cmp	r1, #41	; 0x29
 80056b4:	d156      	bne.n	8005764 <__hexnan+0x130>
 80056b6:	3202      	adds	r2, #2
 80056b8:	f8ca 2000 	str.w	r2, [sl]
 80056bc:	f1bb 0f00 	cmp.w	fp, #0
 80056c0:	d050      	beq.n	8005764 <__hexnan+0x130>
 80056c2:	454c      	cmp	r4, r9
 80056c4:	d206      	bcs.n	80056d4 <__hexnan+0xa0>
 80056c6:	2d07      	cmp	r5, #7
 80056c8:	dc04      	bgt.n	80056d4 <__hexnan+0xa0>
 80056ca:	462a      	mov	r2, r5
 80056cc:	4649      	mov	r1, r9
 80056ce:	4620      	mov	r0, r4
 80056d0:	f7ff ff8a 	bl	80055e8 <L_shift>
 80056d4:	4544      	cmp	r4, r8
 80056d6:	d934      	bls.n	8005742 <__hexnan+0x10e>
 80056d8:	f1a8 0204 	sub.w	r2, r8, #4
 80056dc:	4623      	mov	r3, r4
 80056de:	f853 1b04 	ldr.w	r1, [r3], #4
 80056e2:	f842 1f04 	str.w	r1, [r2, #4]!
 80056e6:	429f      	cmp	r7, r3
 80056e8:	d2f9      	bcs.n	80056de <__hexnan+0xaa>
 80056ea:	1b3b      	subs	r3, r7, r4
 80056ec:	f023 0303 	bic.w	r3, r3, #3
 80056f0:	3304      	adds	r3, #4
 80056f2:	3401      	adds	r4, #1
 80056f4:	3e03      	subs	r6, #3
 80056f6:	42b4      	cmp	r4, r6
 80056f8:	bf88      	it	hi
 80056fa:	2304      	movhi	r3, #4
 80056fc:	4443      	add	r3, r8
 80056fe:	2200      	movs	r2, #0
 8005700:	f843 2b04 	str.w	r2, [r3], #4
 8005704:	429f      	cmp	r7, r3
 8005706:	d2fb      	bcs.n	8005700 <__hexnan+0xcc>
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	b91b      	cbnz	r3, 8005714 <__hexnan+0xe0>
 800570c:	4547      	cmp	r7, r8
 800570e:	d127      	bne.n	8005760 <__hexnan+0x12c>
 8005710:	2301      	movs	r3, #1
 8005712:	603b      	str	r3, [r7, #0]
 8005714:	2005      	movs	r0, #5
 8005716:	e026      	b.n	8005766 <__hexnan+0x132>
 8005718:	3501      	adds	r5, #1
 800571a:	2d08      	cmp	r5, #8
 800571c:	f10b 0b01 	add.w	fp, fp, #1
 8005720:	dd06      	ble.n	8005730 <__hexnan+0xfc>
 8005722:	4544      	cmp	r4, r8
 8005724:	d9c3      	bls.n	80056ae <__hexnan+0x7a>
 8005726:	2300      	movs	r3, #0
 8005728:	f844 3c04 	str.w	r3, [r4, #-4]
 800572c:	2501      	movs	r5, #1
 800572e:	3c04      	subs	r4, #4
 8005730:	6822      	ldr	r2, [r4, #0]
 8005732:	f000 000f 	and.w	r0, r0, #15
 8005736:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800573a:	6022      	str	r2, [r4, #0]
 800573c:	e7b7      	b.n	80056ae <__hexnan+0x7a>
 800573e:	2508      	movs	r5, #8
 8005740:	e7b5      	b.n	80056ae <__hexnan+0x7a>
 8005742:	9b01      	ldr	r3, [sp, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d0df      	beq.n	8005708 <__hexnan+0xd4>
 8005748:	f04f 32ff 	mov.w	r2, #4294967295
 800574c:	f1c3 0320 	rsb	r3, r3, #32
 8005750:	fa22 f303 	lsr.w	r3, r2, r3
 8005754:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005758:	401a      	ands	r2, r3
 800575a:	f846 2c04 	str.w	r2, [r6, #-4]
 800575e:	e7d3      	b.n	8005708 <__hexnan+0xd4>
 8005760:	3f04      	subs	r7, #4
 8005762:	e7d1      	b.n	8005708 <__hexnan+0xd4>
 8005764:	2004      	movs	r0, #4
 8005766:	b007      	add	sp, #28
 8005768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800576c <_localeconv_r>:
 800576c:	4800      	ldr	r0, [pc, #0]	; (8005770 <_localeconv_r+0x4>)
 800576e:	4770      	bx	lr
 8005770:	20000168 	.word	0x20000168

08005774 <malloc>:
 8005774:	4b02      	ldr	r3, [pc, #8]	; (8005780 <malloc+0xc>)
 8005776:	4601      	mov	r1, r0
 8005778:	6818      	ldr	r0, [r3, #0]
 800577a:	f000 bd59 	b.w	8006230 <_malloc_r>
 800577e:	bf00      	nop
 8005780:	20000010 	.word	0x20000010

08005784 <__ascii_mbtowc>:
 8005784:	b082      	sub	sp, #8
 8005786:	b901      	cbnz	r1, 800578a <__ascii_mbtowc+0x6>
 8005788:	a901      	add	r1, sp, #4
 800578a:	b142      	cbz	r2, 800579e <__ascii_mbtowc+0x1a>
 800578c:	b14b      	cbz	r3, 80057a2 <__ascii_mbtowc+0x1e>
 800578e:	7813      	ldrb	r3, [r2, #0]
 8005790:	600b      	str	r3, [r1, #0]
 8005792:	7812      	ldrb	r2, [r2, #0]
 8005794:	1e10      	subs	r0, r2, #0
 8005796:	bf18      	it	ne
 8005798:	2001      	movne	r0, #1
 800579a:	b002      	add	sp, #8
 800579c:	4770      	bx	lr
 800579e:	4610      	mov	r0, r2
 80057a0:	e7fb      	b.n	800579a <__ascii_mbtowc+0x16>
 80057a2:	f06f 0001 	mvn.w	r0, #1
 80057a6:	e7f8      	b.n	800579a <__ascii_mbtowc+0x16>

080057a8 <_Balloc>:
 80057a8:	b570      	push	{r4, r5, r6, lr}
 80057aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80057ac:	4604      	mov	r4, r0
 80057ae:	460d      	mov	r5, r1
 80057b0:	b976      	cbnz	r6, 80057d0 <_Balloc+0x28>
 80057b2:	2010      	movs	r0, #16
 80057b4:	f7ff ffde 	bl	8005774 <malloc>
 80057b8:	4602      	mov	r2, r0
 80057ba:	6260      	str	r0, [r4, #36]	; 0x24
 80057bc:	b920      	cbnz	r0, 80057c8 <_Balloc+0x20>
 80057be:	4b18      	ldr	r3, [pc, #96]	; (8005820 <_Balloc+0x78>)
 80057c0:	4818      	ldr	r0, [pc, #96]	; (8005824 <_Balloc+0x7c>)
 80057c2:	2166      	movs	r1, #102	; 0x66
 80057c4:	f000 ff3e 	bl	8006644 <__assert_func>
 80057c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80057cc:	6006      	str	r6, [r0, #0]
 80057ce:	60c6      	str	r6, [r0, #12]
 80057d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80057d2:	68f3      	ldr	r3, [r6, #12]
 80057d4:	b183      	cbz	r3, 80057f8 <_Balloc+0x50>
 80057d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80057de:	b9b8      	cbnz	r0, 8005810 <_Balloc+0x68>
 80057e0:	2101      	movs	r1, #1
 80057e2:	fa01 f605 	lsl.w	r6, r1, r5
 80057e6:	1d72      	adds	r2, r6, #5
 80057e8:	0092      	lsls	r2, r2, #2
 80057ea:	4620      	mov	r0, r4
 80057ec:	f000 fc9d 	bl	800612a <_calloc_r>
 80057f0:	b160      	cbz	r0, 800580c <_Balloc+0x64>
 80057f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80057f6:	e00e      	b.n	8005816 <_Balloc+0x6e>
 80057f8:	2221      	movs	r2, #33	; 0x21
 80057fa:	2104      	movs	r1, #4
 80057fc:	4620      	mov	r0, r4
 80057fe:	f000 fc94 	bl	800612a <_calloc_r>
 8005802:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005804:	60f0      	str	r0, [r6, #12]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1e4      	bne.n	80057d6 <_Balloc+0x2e>
 800580c:	2000      	movs	r0, #0
 800580e:	bd70      	pop	{r4, r5, r6, pc}
 8005810:	6802      	ldr	r2, [r0, #0]
 8005812:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005816:	2300      	movs	r3, #0
 8005818:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800581c:	e7f7      	b.n	800580e <_Balloc+0x66>
 800581e:	bf00      	nop
 8005820:	08008d1e 	.word	0x08008d1e
 8005824:	08008e1c 	.word	0x08008e1c

08005828 <_Bfree>:
 8005828:	b570      	push	{r4, r5, r6, lr}
 800582a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800582c:	4605      	mov	r5, r0
 800582e:	460c      	mov	r4, r1
 8005830:	b976      	cbnz	r6, 8005850 <_Bfree+0x28>
 8005832:	2010      	movs	r0, #16
 8005834:	f7ff ff9e 	bl	8005774 <malloc>
 8005838:	4602      	mov	r2, r0
 800583a:	6268      	str	r0, [r5, #36]	; 0x24
 800583c:	b920      	cbnz	r0, 8005848 <_Bfree+0x20>
 800583e:	4b09      	ldr	r3, [pc, #36]	; (8005864 <_Bfree+0x3c>)
 8005840:	4809      	ldr	r0, [pc, #36]	; (8005868 <_Bfree+0x40>)
 8005842:	218a      	movs	r1, #138	; 0x8a
 8005844:	f000 fefe 	bl	8006644 <__assert_func>
 8005848:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800584c:	6006      	str	r6, [r0, #0]
 800584e:	60c6      	str	r6, [r0, #12]
 8005850:	b13c      	cbz	r4, 8005862 <_Bfree+0x3a>
 8005852:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005854:	6862      	ldr	r2, [r4, #4]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800585c:	6021      	str	r1, [r4, #0]
 800585e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005862:	bd70      	pop	{r4, r5, r6, pc}
 8005864:	08008d1e 	.word	0x08008d1e
 8005868:	08008e1c 	.word	0x08008e1c

0800586c <__multadd>:
 800586c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005870:	690d      	ldr	r5, [r1, #16]
 8005872:	4607      	mov	r7, r0
 8005874:	460c      	mov	r4, r1
 8005876:	461e      	mov	r6, r3
 8005878:	f101 0c14 	add.w	ip, r1, #20
 800587c:	2000      	movs	r0, #0
 800587e:	f8dc 3000 	ldr.w	r3, [ip]
 8005882:	b299      	uxth	r1, r3
 8005884:	fb02 6101 	mla	r1, r2, r1, r6
 8005888:	0c1e      	lsrs	r6, r3, #16
 800588a:	0c0b      	lsrs	r3, r1, #16
 800588c:	fb02 3306 	mla	r3, r2, r6, r3
 8005890:	b289      	uxth	r1, r1
 8005892:	3001      	adds	r0, #1
 8005894:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005898:	4285      	cmp	r5, r0
 800589a:	f84c 1b04 	str.w	r1, [ip], #4
 800589e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80058a2:	dcec      	bgt.n	800587e <__multadd+0x12>
 80058a4:	b30e      	cbz	r6, 80058ea <__multadd+0x7e>
 80058a6:	68a3      	ldr	r3, [r4, #8]
 80058a8:	42ab      	cmp	r3, r5
 80058aa:	dc19      	bgt.n	80058e0 <__multadd+0x74>
 80058ac:	6861      	ldr	r1, [r4, #4]
 80058ae:	4638      	mov	r0, r7
 80058b0:	3101      	adds	r1, #1
 80058b2:	f7ff ff79 	bl	80057a8 <_Balloc>
 80058b6:	4680      	mov	r8, r0
 80058b8:	b928      	cbnz	r0, 80058c6 <__multadd+0x5a>
 80058ba:	4602      	mov	r2, r0
 80058bc:	4b0c      	ldr	r3, [pc, #48]	; (80058f0 <__multadd+0x84>)
 80058be:	480d      	ldr	r0, [pc, #52]	; (80058f4 <__multadd+0x88>)
 80058c0:	21b5      	movs	r1, #181	; 0xb5
 80058c2:	f000 febf 	bl	8006644 <__assert_func>
 80058c6:	6922      	ldr	r2, [r4, #16]
 80058c8:	3202      	adds	r2, #2
 80058ca:	f104 010c 	add.w	r1, r4, #12
 80058ce:	0092      	lsls	r2, r2, #2
 80058d0:	300c      	adds	r0, #12
 80058d2:	f7fc ffff 	bl	80028d4 <memcpy>
 80058d6:	4621      	mov	r1, r4
 80058d8:	4638      	mov	r0, r7
 80058da:	f7ff ffa5 	bl	8005828 <_Bfree>
 80058de:	4644      	mov	r4, r8
 80058e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80058e4:	3501      	adds	r5, #1
 80058e6:	615e      	str	r6, [r3, #20]
 80058e8:	6125      	str	r5, [r4, #16]
 80058ea:	4620      	mov	r0, r4
 80058ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058f0:	08008d90 	.word	0x08008d90
 80058f4:	08008e1c 	.word	0x08008e1c

080058f8 <__s2b>:
 80058f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058fc:	460c      	mov	r4, r1
 80058fe:	4615      	mov	r5, r2
 8005900:	461f      	mov	r7, r3
 8005902:	2209      	movs	r2, #9
 8005904:	3308      	adds	r3, #8
 8005906:	4606      	mov	r6, r0
 8005908:	fb93 f3f2 	sdiv	r3, r3, r2
 800590c:	2100      	movs	r1, #0
 800590e:	2201      	movs	r2, #1
 8005910:	429a      	cmp	r2, r3
 8005912:	db09      	blt.n	8005928 <__s2b+0x30>
 8005914:	4630      	mov	r0, r6
 8005916:	f7ff ff47 	bl	80057a8 <_Balloc>
 800591a:	b940      	cbnz	r0, 800592e <__s2b+0x36>
 800591c:	4602      	mov	r2, r0
 800591e:	4b19      	ldr	r3, [pc, #100]	; (8005984 <__s2b+0x8c>)
 8005920:	4819      	ldr	r0, [pc, #100]	; (8005988 <__s2b+0x90>)
 8005922:	21ce      	movs	r1, #206	; 0xce
 8005924:	f000 fe8e 	bl	8006644 <__assert_func>
 8005928:	0052      	lsls	r2, r2, #1
 800592a:	3101      	adds	r1, #1
 800592c:	e7f0      	b.n	8005910 <__s2b+0x18>
 800592e:	9b08      	ldr	r3, [sp, #32]
 8005930:	6143      	str	r3, [r0, #20]
 8005932:	2d09      	cmp	r5, #9
 8005934:	f04f 0301 	mov.w	r3, #1
 8005938:	6103      	str	r3, [r0, #16]
 800593a:	dd16      	ble.n	800596a <__s2b+0x72>
 800593c:	f104 0909 	add.w	r9, r4, #9
 8005940:	46c8      	mov	r8, r9
 8005942:	442c      	add	r4, r5
 8005944:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005948:	4601      	mov	r1, r0
 800594a:	3b30      	subs	r3, #48	; 0x30
 800594c:	220a      	movs	r2, #10
 800594e:	4630      	mov	r0, r6
 8005950:	f7ff ff8c 	bl	800586c <__multadd>
 8005954:	45a0      	cmp	r8, r4
 8005956:	d1f5      	bne.n	8005944 <__s2b+0x4c>
 8005958:	f1a5 0408 	sub.w	r4, r5, #8
 800595c:	444c      	add	r4, r9
 800595e:	1b2d      	subs	r5, r5, r4
 8005960:	1963      	adds	r3, r4, r5
 8005962:	42bb      	cmp	r3, r7
 8005964:	db04      	blt.n	8005970 <__s2b+0x78>
 8005966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800596a:	340a      	adds	r4, #10
 800596c:	2509      	movs	r5, #9
 800596e:	e7f6      	b.n	800595e <__s2b+0x66>
 8005970:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005974:	4601      	mov	r1, r0
 8005976:	3b30      	subs	r3, #48	; 0x30
 8005978:	220a      	movs	r2, #10
 800597a:	4630      	mov	r0, r6
 800597c:	f7ff ff76 	bl	800586c <__multadd>
 8005980:	e7ee      	b.n	8005960 <__s2b+0x68>
 8005982:	bf00      	nop
 8005984:	08008d90 	.word	0x08008d90
 8005988:	08008e1c 	.word	0x08008e1c

0800598c <__hi0bits>:
 800598c:	0c03      	lsrs	r3, r0, #16
 800598e:	041b      	lsls	r3, r3, #16
 8005990:	b9d3      	cbnz	r3, 80059c8 <__hi0bits+0x3c>
 8005992:	0400      	lsls	r0, r0, #16
 8005994:	2310      	movs	r3, #16
 8005996:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800599a:	bf04      	itt	eq
 800599c:	0200      	lsleq	r0, r0, #8
 800599e:	3308      	addeq	r3, #8
 80059a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80059a4:	bf04      	itt	eq
 80059a6:	0100      	lsleq	r0, r0, #4
 80059a8:	3304      	addeq	r3, #4
 80059aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80059ae:	bf04      	itt	eq
 80059b0:	0080      	lsleq	r0, r0, #2
 80059b2:	3302      	addeq	r3, #2
 80059b4:	2800      	cmp	r0, #0
 80059b6:	db05      	blt.n	80059c4 <__hi0bits+0x38>
 80059b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80059bc:	f103 0301 	add.w	r3, r3, #1
 80059c0:	bf08      	it	eq
 80059c2:	2320      	moveq	r3, #32
 80059c4:	4618      	mov	r0, r3
 80059c6:	4770      	bx	lr
 80059c8:	2300      	movs	r3, #0
 80059ca:	e7e4      	b.n	8005996 <__hi0bits+0xa>

080059cc <__lo0bits>:
 80059cc:	6803      	ldr	r3, [r0, #0]
 80059ce:	f013 0207 	ands.w	r2, r3, #7
 80059d2:	4601      	mov	r1, r0
 80059d4:	d00b      	beq.n	80059ee <__lo0bits+0x22>
 80059d6:	07da      	lsls	r2, r3, #31
 80059d8:	d423      	bmi.n	8005a22 <__lo0bits+0x56>
 80059da:	0798      	lsls	r0, r3, #30
 80059dc:	bf49      	itett	mi
 80059de:	085b      	lsrmi	r3, r3, #1
 80059e0:	089b      	lsrpl	r3, r3, #2
 80059e2:	2001      	movmi	r0, #1
 80059e4:	600b      	strmi	r3, [r1, #0]
 80059e6:	bf5c      	itt	pl
 80059e8:	600b      	strpl	r3, [r1, #0]
 80059ea:	2002      	movpl	r0, #2
 80059ec:	4770      	bx	lr
 80059ee:	b298      	uxth	r0, r3
 80059f0:	b9a8      	cbnz	r0, 8005a1e <__lo0bits+0x52>
 80059f2:	0c1b      	lsrs	r3, r3, #16
 80059f4:	2010      	movs	r0, #16
 80059f6:	b2da      	uxtb	r2, r3
 80059f8:	b90a      	cbnz	r2, 80059fe <__lo0bits+0x32>
 80059fa:	3008      	adds	r0, #8
 80059fc:	0a1b      	lsrs	r3, r3, #8
 80059fe:	071a      	lsls	r2, r3, #28
 8005a00:	bf04      	itt	eq
 8005a02:	091b      	lsreq	r3, r3, #4
 8005a04:	3004      	addeq	r0, #4
 8005a06:	079a      	lsls	r2, r3, #30
 8005a08:	bf04      	itt	eq
 8005a0a:	089b      	lsreq	r3, r3, #2
 8005a0c:	3002      	addeq	r0, #2
 8005a0e:	07da      	lsls	r2, r3, #31
 8005a10:	d403      	bmi.n	8005a1a <__lo0bits+0x4e>
 8005a12:	085b      	lsrs	r3, r3, #1
 8005a14:	f100 0001 	add.w	r0, r0, #1
 8005a18:	d005      	beq.n	8005a26 <__lo0bits+0x5a>
 8005a1a:	600b      	str	r3, [r1, #0]
 8005a1c:	4770      	bx	lr
 8005a1e:	4610      	mov	r0, r2
 8005a20:	e7e9      	b.n	80059f6 <__lo0bits+0x2a>
 8005a22:	2000      	movs	r0, #0
 8005a24:	4770      	bx	lr
 8005a26:	2020      	movs	r0, #32
 8005a28:	4770      	bx	lr
	...

08005a2c <__i2b>:
 8005a2c:	b510      	push	{r4, lr}
 8005a2e:	460c      	mov	r4, r1
 8005a30:	2101      	movs	r1, #1
 8005a32:	f7ff feb9 	bl	80057a8 <_Balloc>
 8005a36:	4602      	mov	r2, r0
 8005a38:	b928      	cbnz	r0, 8005a46 <__i2b+0x1a>
 8005a3a:	4b05      	ldr	r3, [pc, #20]	; (8005a50 <__i2b+0x24>)
 8005a3c:	4805      	ldr	r0, [pc, #20]	; (8005a54 <__i2b+0x28>)
 8005a3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005a42:	f000 fdff 	bl	8006644 <__assert_func>
 8005a46:	2301      	movs	r3, #1
 8005a48:	6144      	str	r4, [r0, #20]
 8005a4a:	6103      	str	r3, [r0, #16]
 8005a4c:	bd10      	pop	{r4, pc}
 8005a4e:	bf00      	nop
 8005a50:	08008d90 	.word	0x08008d90
 8005a54:	08008e1c 	.word	0x08008e1c

08005a58 <__multiply>:
 8005a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a5c:	4691      	mov	r9, r2
 8005a5e:	690a      	ldr	r2, [r1, #16]
 8005a60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	bfb8      	it	lt
 8005a68:	460b      	movlt	r3, r1
 8005a6a:	460c      	mov	r4, r1
 8005a6c:	bfbc      	itt	lt
 8005a6e:	464c      	movlt	r4, r9
 8005a70:	4699      	movlt	r9, r3
 8005a72:	6927      	ldr	r7, [r4, #16]
 8005a74:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005a78:	68a3      	ldr	r3, [r4, #8]
 8005a7a:	6861      	ldr	r1, [r4, #4]
 8005a7c:	eb07 060a 	add.w	r6, r7, sl
 8005a80:	42b3      	cmp	r3, r6
 8005a82:	b085      	sub	sp, #20
 8005a84:	bfb8      	it	lt
 8005a86:	3101      	addlt	r1, #1
 8005a88:	f7ff fe8e 	bl	80057a8 <_Balloc>
 8005a8c:	b930      	cbnz	r0, 8005a9c <__multiply+0x44>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	4b44      	ldr	r3, [pc, #272]	; (8005ba4 <__multiply+0x14c>)
 8005a92:	4845      	ldr	r0, [pc, #276]	; (8005ba8 <__multiply+0x150>)
 8005a94:	f240 115d 	movw	r1, #349	; 0x15d
 8005a98:	f000 fdd4 	bl	8006644 <__assert_func>
 8005a9c:	f100 0514 	add.w	r5, r0, #20
 8005aa0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005aa4:	462b      	mov	r3, r5
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	4543      	cmp	r3, r8
 8005aaa:	d321      	bcc.n	8005af0 <__multiply+0x98>
 8005aac:	f104 0314 	add.w	r3, r4, #20
 8005ab0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005ab4:	f109 0314 	add.w	r3, r9, #20
 8005ab8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005abc:	9202      	str	r2, [sp, #8]
 8005abe:	1b3a      	subs	r2, r7, r4
 8005ac0:	3a15      	subs	r2, #21
 8005ac2:	f022 0203 	bic.w	r2, r2, #3
 8005ac6:	3204      	adds	r2, #4
 8005ac8:	f104 0115 	add.w	r1, r4, #21
 8005acc:	428f      	cmp	r7, r1
 8005ace:	bf38      	it	cc
 8005ad0:	2204      	movcc	r2, #4
 8005ad2:	9201      	str	r2, [sp, #4]
 8005ad4:	9a02      	ldr	r2, [sp, #8]
 8005ad6:	9303      	str	r3, [sp, #12]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d80c      	bhi.n	8005af6 <__multiply+0x9e>
 8005adc:	2e00      	cmp	r6, #0
 8005ade:	dd03      	ble.n	8005ae8 <__multiply+0x90>
 8005ae0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d05a      	beq.n	8005b9e <__multiply+0x146>
 8005ae8:	6106      	str	r6, [r0, #16]
 8005aea:	b005      	add	sp, #20
 8005aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af0:	f843 2b04 	str.w	r2, [r3], #4
 8005af4:	e7d8      	b.n	8005aa8 <__multiply+0x50>
 8005af6:	f8b3 a000 	ldrh.w	sl, [r3]
 8005afa:	f1ba 0f00 	cmp.w	sl, #0
 8005afe:	d024      	beq.n	8005b4a <__multiply+0xf2>
 8005b00:	f104 0e14 	add.w	lr, r4, #20
 8005b04:	46a9      	mov	r9, r5
 8005b06:	f04f 0c00 	mov.w	ip, #0
 8005b0a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005b0e:	f8d9 1000 	ldr.w	r1, [r9]
 8005b12:	fa1f fb82 	uxth.w	fp, r2
 8005b16:	b289      	uxth	r1, r1
 8005b18:	fb0a 110b 	mla	r1, sl, fp, r1
 8005b1c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005b20:	f8d9 2000 	ldr.w	r2, [r9]
 8005b24:	4461      	add	r1, ip
 8005b26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005b2a:	fb0a c20b 	mla	r2, sl, fp, ip
 8005b2e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005b32:	b289      	uxth	r1, r1
 8005b34:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005b38:	4577      	cmp	r7, lr
 8005b3a:	f849 1b04 	str.w	r1, [r9], #4
 8005b3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005b42:	d8e2      	bhi.n	8005b0a <__multiply+0xb2>
 8005b44:	9a01      	ldr	r2, [sp, #4]
 8005b46:	f845 c002 	str.w	ip, [r5, r2]
 8005b4a:	9a03      	ldr	r2, [sp, #12]
 8005b4c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005b50:	3304      	adds	r3, #4
 8005b52:	f1b9 0f00 	cmp.w	r9, #0
 8005b56:	d020      	beq.n	8005b9a <__multiply+0x142>
 8005b58:	6829      	ldr	r1, [r5, #0]
 8005b5a:	f104 0c14 	add.w	ip, r4, #20
 8005b5e:	46ae      	mov	lr, r5
 8005b60:	f04f 0a00 	mov.w	sl, #0
 8005b64:	f8bc b000 	ldrh.w	fp, [ip]
 8005b68:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005b6c:	fb09 220b 	mla	r2, r9, fp, r2
 8005b70:	4492      	add	sl, r2
 8005b72:	b289      	uxth	r1, r1
 8005b74:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005b78:	f84e 1b04 	str.w	r1, [lr], #4
 8005b7c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005b80:	f8be 1000 	ldrh.w	r1, [lr]
 8005b84:	0c12      	lsrs	r2, r2, #16
 8005b86:	fb09 1102 	mla	r1, r9, r2, r1
 8005b8a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005b8e:	4567      	cmp	r7, ip
 8005b90:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005b94:	d8e6      	bhi.n	8005b64 <__multiply+0x10c>
 8005b96:	9a01      	ldr	r2, [sp, #4]
 8005b98:	50a9      	str	r1, [r5, r2]
 8005b9a:	3504      	adds	r5, #4
 8005b9c:	e79a      	b.n	8005ad4 <__multiply+0x7c>
 8005b9e:	3e01      	subs	r6, #1
 8005ba0:	e79c      	b.n	8005adc <__multiply+0x84>
 8005ba2:	bf00      	nop
 8005ba4:	08008d90 	.word	0x08008d90
 8005ba8:	08008e1c 	.word	0x08008e1c

08005bac <__pow5mult>:
 8005bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bb0:	4615      	mov	r5, r2
 8005bb2:	f012 0203 	ands.w	r2, r2, #3
 8005bb6:	4606      	mov	r6, r0
 8005bb8:	460f      	mov	r7, r1
 8005bba:	d007      	beq.n	8005bcc <__pow5mult+0x20>
 8005bbc:	4c25      	ldr	r4, [pc, #148]	; (8005c54 <__pow5mult+0xa8>)
 8005bbe:	3a01      	subs	r2, #1
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005bc6:	f7ff fe51 	bl	800586c <__multadd>
 8005bca:	4607      	mov	r7, r0
 8005bcc:	10ad      	asrs	r5, r5, #2
 8005bce:	d03d      	beq.n	8005c4c <__pow5mult+0xa0>
 8005bd0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005bd2:	b97c      	cbnz	r4, 8005bf4 <__pow5mult+0x48>
 8005bd4:	2010      	movs	r0, #16
 8005bd6:	f7ff fdcd 	bl	8005774 <malloc>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	6270      	str	r0, [r6, #36]	; 0x24
 8005bde:	b928      	cbnz	r0, 8005bec <__pow5mult+0x40>
 8005be0:	4b1d      	ldr	r3, [pc, #116]	; (8005c58 <__pow5mult+0xac>)
 8005be2:	481e      	ldr	r0, [pc, #120]	; (8005c5c <__pow5mult+0xb0>)
 8005be4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005be8:	f000 fd2c 	bl	8006644 <__assert_func>
 8005bec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005bf0:	6004      	str	r4, [r0, #0]
 8005bf2:	60c4      	str	r4, [r0, #12]
 8005bf4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005bf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005bfc:	b94c      	cbnz	r4, 8005c12 <__pow5mult+0x66>
 8005bfe:	f240 2171 	movw	r1, #625	; 0x271
 8005c02:	4630      	mov	r0, r6
 8005c04:	f7ff ff12 	bl	8005a2c <__i2b>
 8005c08:	2300      	movs	r3, #0
 8005c0a:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c0e:	4604      	mov	r4, r0
 8005c10:	6003      	str	r3, [r0, #0]
 8005c12:	f04f 0900 	mov.w	r9, #0
 8005c16:	07eb      	lsls	r3, r5, #31
 8005c18:	d50a      	bpl.n	8005c30 <__pow5mult+0x84>
 8005c1a:	4639      	mov	r1, r7
 8005c1c:	4622      	mov	r2, r4
 8005c1e:	4630      	mov	r0, r6
 8005c20:	f7ff ff1a 	bl	8005a58 <__multiply>
 8005c24:	4639      	mov	r1, r7
 8005c26:	4680      	mov	r8, r0
 8005c28:	4630      	mov	r0, r6
 8005c2a:	f7ff fdfd 	bl	8005828 <_Bfree>
 8005c2e:	4647      	mov	r7, r8
 8005c30:	106d      	asrs	r5, r5, #1
 8005c32:	d00b      	beq.n	8005c4c <__pow5mult+0xa0>
 8005c34:	6820      	ldr	r0, [r4, #0]
 8005c36:	b938      	cbnz	r0, 8005c48 <__pow5mult+0x9c>
 8005c38:	4622      	mov	r2, r4
 8005c3a:	4621      	mov	r1, r4
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	f7ff ff0b 	bl	8005a58 <__multiply>
 8005c42:	6020      	str	r0, [r4, #0]
 8005c44:	f8c0 9000 	str.w	r9, [r0]
 8005c48:	4604      	mov	r4, r0
 8005c4a:	e7e4      	b.n	8005c16 <__pow5mult+0x6a>
 8005c4c:	4638      	mov	r0, r7
 8005c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c52:	bf00      	nop
 8005c54:	08008f68 	.word	0x08008f68
 8005c58:	08008d1e 	.word	0x08008d1e
 8005c5c:	08008e1c 	.word	0x08008e1c

08005c60 <__lshift>:
 8005c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c64:	460c      	mov	r4, r1
 8005c66:	6849      	ldr	r1, [r1, #4]
 8005c68:	6923      	ldr	r3, [r4, #16]
 8005c6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005c6e:	68a3      	ldr	r3, [r4, #8]
 8005c70:	4607      	mov	r7, r0
 8005c72:	4691      	mov	r9, r2
 8005c74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005c78:	f108 0601 	add.w	r6, r8, #1
 8005c7c:	42b3      	cmp	r3, r6
 8005c7e:	db0b      	blt.n	8005c98 <__lshift+0x38>
 8005c80:	4638      	mov	r0, r7
 8005c82:	f7ff fd91 	bl	80057a8 <_Balloc>
 8005c86:	4605      	mov	r5, r0
 8005c88:	b948      	cbnz	r0, 8005c9e <__lshift+0x3e>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	4b2a      	ldr	r3, [pc, #168]	; (8005d38 <__lshift+0xd8>)
 8005c8e:	482b      	ldr	r0, [pc, #172]	; (8005d3c <__lshift+0xdc>)
 8005c90:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005c94:	f000 fcd6 	bl	8006644 <__assert_func>
 8005c98:	3101      	adds	r1, #1
 8005c9a:	005b      	lsls	r3, r3, #1
 8005c9c:	e7ee      	b.n	8005c7c <__lshift+0x1c>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	f100 0114 	add.w	r1, r0, #20
 8005ca4:	f100 0210 	add.w	r2, r0, #16
 8005ca8:	4618      	mov	r0, r3
 8005caa:	4553      	cmp	r3, sl
 8005cac:	db37      	blt.n	8005d1e <__lshift+0xbe>
 8005cae:	6920      	ldr	r0, [r4, #16]
 8005cb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005cb4:	f104 0314 	add.w	r3, r4, #20
 8005cb8:	f019 091f 	ands.w	r9, r9, #31
 8005cbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005cc0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005cc4:	d02f      	beq.n	8005d26 <__lshift+0xc6>
 8005cc6:	f1c9 0e20 	rsb	lr, r9, #32
 8005cca:	468a      	mov	sl, r1
 8005ccc:	f04f 0c00 	mov.w	ip, #0
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	fa02 f209 	lsl.w	r2, r2, r9
 8005cd6:	ea42 020c 	orr.w	r2, r2, ip
 8005cda:	f84a 2b04 	str.w	r2, [sl], #4
 8005cde:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ce2:	4298      	cmp	r0, r3
 8005ce4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005ce8:	d8f2      	bhi.n	8005cd0 <__lshift+0x70>
 8005cea:	1b03      	subs	r3, r0, r4
 8005cec:	3b15      	subs	r3, #21
 8005cee:	f023 0303 	bic.w	r3, r3, #3
 8005cf2:	3304      	adds	r3, #4
 8005cf4:	f104 0215 	add.w	r2, r4, #21
 8005cf8:	4290      	cmp	r0, r2
 8005cfa:	bf38      	it	cc
 8005cfc:	2304      	movcc	r3, #4
 8005cfe:	f841 c003 	str.w	ip, [r1, r3]
 8005d02:	f1bc 0f00 	cmp.w	ip, #0
 8005d06:	d001      	beq.n	8005d0c <__lshift+0xac>
 8005d08:	f108 0602 	add.w	r6, r8, #2
 8005d0c:	3e01      	subs	r6, #1
 8005d0e:	4638      	mov	r0, r7
 8005d10:	612e      	str	r6, [r5, #16]
 8005d12:	4621      	mov	r1, r4
 8005d14:	f7ff fd88 	bl	8005828 <_Bfree>
 8005d18:	4628      	mov	r0, r5
 8005d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005d22:	3301      	adds	r3, #1
 8005d24:	e7c1      	b.n	8005caa <__lshift+0x4a>
 8005d26:	3904      	subs	r1, #4
 8005d28:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d2c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d30:	4298      	cmp	r0, r3
 8005d32:	d8f9      	bhi.n	8005d28 <__lshift+0xc8>
 8005d34:	e7ea      	b.n	8005d0c <__lshift+0xac>
 8005d36:	bf00      	nop
 8005d38:	08008d90 	.word	0x08008d90
 8005d3c:	08008e1c 	.word	0x08008e1c

08005d40 <__mcmp>:
 8005d40:	b530      	push	{r4, r5, lr}
 8005d42:	6902      	ldr	r2, [r0, #16]
 8005d44:	690c      	ldr	r4, [r1, #16]
 8005d46:	1b12      	subs	r2, r2, r4
 8005d48:	d10e      	bne.n	8005d68 <__mcmp+0x28>
 8005d4a:	f100 0314 	add.w	r3, r0, #20
 8005d4e:	3114      	adds	r1, #20
 8005d50:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005d54:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005d58:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005d5c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005d60:	42a5      	cmp	r5, r4
 8005d62:	d003      	beq.n	8005d6c <__mcmp+0x2c>
 8005d64:	d305      	bcc.n	8005d72 <__mcmp+0x32>
 8005d66:	2201      	movs	r2, #1
 8005d68:	4610      	mov	r0, r2
 8005d6a:	bd30      	pop	{r4, r5, pc}
 8005d6c:	4283      	cmp	r3, r0
 8005d6e:	d3f3      	bcc.n	8005d58 <__mcmp+0x18>
 8005d70:	e7fa      	b.n	8005d68 <__mcmp+0x28>
 8005d72:	f04f 32ff 	mov.w	r2, #4294967295
 8005d76:	e7f7      	b.n	8005d68 <__mcmp+0x28>

08005d78 <__mdiff>:
 8005d78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d7c:	460c      	mov	r4, r1
 8005d7e:	4606      	mov	r6, r0
 8005d80:	4611      	mov	r1, r2
 8005d82:	4620      	mov	r0, r4
 8005d84:	4690      	mov	r8, r2
 8005d86:	f7ff ffdb 	bl	8005d40 <__mcmp>
 8005d8a:	1e05      	subs	r5, r0, #0
 8005d8c:	d110      	bne.n	8005db0 <__mdiff+0x38>
 8005d8e:	4629      	mov	r1, r5
 8005d90:	4630      	mov	r0, r6
 8005d92:	f7ff fd09 	bl	80057a8 <_Balloc>
 8005d96:	b930      	cbnz	r0, 8005da6 <__mdiff+0x2e>
 8005d98:	4b3a      	ldr	r3, [pc, #232]	; (8005e84 <__mdiff+0x10c>)
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	f240 2132 	movw	r1, #562	; 0x232
 8005da0:	4839      	ldr	r0, [pc, #228]	; (8005e88 <__mdiff+0x110>)
 8005da2:	f000 fc4f 	bl	8006644 <__assert_func>
 8005da6:	2301      	movs	r3, #1
 8005da8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005dac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db0:	bfa4      	itt	ge
 8005db2:	4643      	movge	r3, r8
 8005db4:	46a0      	movge	r8, r4
 8005db6:	4630      	mov	r0, r6
 8005db8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005dbc:	bfa6      	itte	ge
 8005dbe:	461c      	movge	r4, r3
 8005dc0:	2500      	movge	r5, #0
 8005dc2:	2501      	movlt	r5, #1
 8005dc4:	f7ff fcf0 	bl	80057a8 <_Balloc>
 8005dc8:	b920      	cbnz	r0, 8005dd4 <__mdiff+0x5c>
 8005dca:	4b2e      	ldr	r3, [pc, #184]	; (8005e84 <__mdiff+0x10c>)
 8005dcc:	4602      	mov	r2, r0
 8005dce:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005dd2:	e7e5      	b.n	8005da0 <__mdiff+0x28>
 8005dd4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005dd8:	6926      	ldr	r6, [r4, #16]
 8005dda:	60c5      	str	r5, [r0, #12]
 8005ddc:	f104 0914 	add.w	r9, r4, #20
 8005de0:	f108 0514 	add.w	r5, r8, #20
 8005de4:	f100 0e14 	add.w	lr, r0, #20
 8005de8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005dec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005df0:	f108 0210 	add.w	r2, r8, #16
 8005df4:	46f2      	mov	sl, lr
 8005df6:	2100      	movs	r1, #0
 8005df8:	f859 3b04 	ldr.w	r3, [r9], #4
 8005dfc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005e00:	fa1f f883 	uxth.w	r8, r3
 8005e04:	fa11 f18b 	uxtah	r1, r1, fp
 8005e08:	0c1b      	lsrs	r3, r3, #16
 8005e0a:	eba1 0808 	sub.w	r8, r1, r8
 8005e0e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005e12:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005e16:	fa1f f888 	uxth.w	r8, r8
 8005e1a:	1419      	asrs	r1, r3, #16
 8005e1c:	454e      	cmp	r6, r9
 8005e1e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005e22:	f84a 3b04 	str.w	r3, [sl], #4
 8005e26:	d8e7      	bhi.n	8005df8 <__mdiff+0x80>
 8005e28:	1b33      	subs	r3, r6, r4
 8005e2a:	3b15      	subs	r3, #21
 8005e2c:	f023 0303 	bic.w	r3, r3, #3
 8005e30:	3304      	adds	r3, #4
 8005e32:	3415      	adds	r4, #21
 8005e34:	42a6      	cmp	r6, r4
 8005e36:	bf38      	it	cc
 8005e38:	2304      	movcc	r3, #4
 8005e3a:	441d      	add	r5, r3
 8005e3c:	4473      	add	r3, lr
 8005e3e:	469e      	mov	lr, r3
 8005e40:	462e      	mov	r6, r5
 8005e42:	4566      	cmp	r6, ip
 8005e44:	d30e      	bcc.n	8005e64 <__mdiff+0xec>
 8005e46:	f10c 0203 	add.w	r2, ip, #3
 8005e4a:	1b52      	subs	r2, r2, r5
 8005e4c:	f022 0203 	bic.w	r2, r2, #3
 8005e50:	3d03      	subs	r5, #3
 8005e52:	45ac      	cmp	ip, r5
 8005e54:	bf38      	it	cc
 8005e56:	2200      	movcc	r2, #0
 8005e58:	441a      	add	r2, r3
 8005e5a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005e5e:	b17b      	cbz	r3, 8005e80 <__mdiff+0x108>
 8005e60:	6107      	str	r7, [r0, #16]
 8005e62:	e7a3      	b.n	8005dac <__mdiff+0x34>
 8005e64:	f856 8b04 	ldr.w	r8, [r6], #4
 8005e68:	fa11 f288 	uxtah	r2, r1, r8
 8005e6c:	1414      	asrs	r4, r2, #16
 8005e6e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005e72:	b292      	uxth	r2, r2
 8005e74:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005e78:	f84e 2b04 	str.w	r2, [lr], #4
 8005e7c:	1421      	asrs	r1, r4, #16
 8005e7e:	e7e0      	b.n	8005e42 <__mdiff+0xca>
 8005e80:	3f01      	subs	r7, #1
 8005e82:	e7ea      	b.n	8005e5a <__mdiff+0xe2>
 8005e84:	08008d90 	.word	0x08008d90
 8005e88:	08008e1c 	.word	0x08008e1c

08005e8c <__ulp>:
 8005e8c:	b082      	sub	sp, #8
 8005e8e:	ed8d 0b00 	vstr	d0, [sp]
 8005e92:	9b01      	ldr	r3, [sp, #4]
 8005e94:	4912      	ldr	r1, [pc, #72]	; (8005ee0 <__ulp+0x54>)
 8005e96:	4019      	ands	r1, r3
 8005e98:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8005e9c:	2900      	cmp	r1, #0
 8005e9e:	dd05      	ble.n	8005eac <__ulp+0x20>
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	ec43 2b10 	vmov	d0, r2, r3
 8005ea8:	b002      	add	sp, #8
 8005eaa:	4770      	bx	lr
 8005eac:	4249      	negs	r1, r1
 8005eae:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8005eb2:	ea4f 5021 	mov.w	r0, r1, asr #20
 8005eb6:	f04f 0200 	mov.w	r2, #0
 8005eba:	f04f 0300 	mov.w	r3, #0
 8005ebe:	da04      	bge.n	8005eca <__ulp+0x3e>
 8005ec0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8005ec4:	fa41 f300 	asr.w	r3, r1, r0
 8005ec8:	e7ec      	b.n	8005ea4 <__ulp+0x18>
 8005eca:	f1a0 0114 	sub.w	r1, r0, #20
 8005ece:	291e      	cmp	r1, #30
 8005ed0:	bfda      	itte	le
 8005ed2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8005ed6:	fa20 f101 	lsrle.w	r1, r0, r1
 8005eda:	2101      	movgt	r1, #1
 8005edc:	460a      	mov	r2, r1
 8005ede:	e7e1      	b.n	8005ea4 <__ulp+0x18>
 8005ee0:	7ff00000 	.word	0x7ff00000

08005ee4 <__b2d>:
 8005ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee6:	6905      	ldr	r5, [r0, #16]
 8005ee8:	f100 0714 	add.w	r7, r0, #20
 8005eec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8005ef0:	1f2e      	subs	r6, r5, #4
 8005ef2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	f7ff fd48 	bl	800598c <__hi0bits>
 8005efc:	f1c0 0320 	rsb	r3, r0, #32
 8005f00:	280a      	cmp	r0, #10
 8005f02:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8005f80 <__b2d+0x9c>
 8005f06:	600b      	str	r3, [r1, #0]
 8005f08:	dc14      	bgt.n	8005f34 <__b2d+0x50>
 8005f0a:	f1c0 0e0b 	rsb	lr, r0, #11
 8005f0e:	fa24 f10e 	lsr.w	r1, r4, lr
 8005f12:	42b7      	cmp	r7, r6
 8005f14:	ea41 030c 	orr.w	r3, r1, ip
 8005f18:	bf34      	ite	cc
 8005f1a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8005f1e:	2100      	movcs	r1, #0
 8005f20:	3015      	adds	r0, #21
 8005f22:	fa04 f000 	lsl.w	r0, r4, r0
 8005f26:	fa21 f10e 	lsr.w	r1, r1, lr
 8005f2a:	ea40 0201 	orr.w	r2, r0, r1
 8005f2e:	ec43 2b10 	vmov	d0, r2, r3
 8005f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f34:	42b7      	cmp	r7, r6
 8005f36:	bf3a      	itte	cc
 8005f38:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8005f3c:	f1a5 0608 	subcc.w	r6, r5, #8
 8005f40:	2100      	movcs	r1, #0
 8005f42:	380b      	subs	r0, #11
 8005f44:	d017      	beq.n	8005f76 <__b2d+0x92>
 8005f46:	f1c0 0c20 	rsb	ip, r0, #32
 8005f4a:	fa04 f500 	lsl.w	r5, r4, r0
 8005f4e:	42be      	cmp	r6, r7
 8005f50:	fa21 f40c 	lsr.w	r4, r1, ip
 8005f54:	ea45 0504 	orr.w	r5, r5, r4
 8005f58:	bf8c      	ite	hi
 8005f5a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8005f5e:	2400      	movls	r4, #0
 8005f60:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8005f64:	fa01 f000 	lsl.w	r0, r1, r0
 8005f68:	fa24 f40c 	lsr.w	r4, r4, ip
 8005f6c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005f70:	ea40 0204 	orr.w	r2, r0, r4
 8005f74:	e7db      	b.n	8005f2e <__b2d+0x4a>
 8005f76:	ea44 030c 	orr.w	r3, r4, ip
 8005f7a:	460a      	mov	r2, r1
 8005f7c:	e7d7      	b.n	8005f2e <__b2d+0x4a>
 8005f7e:	bf00      	nop
 8005f80:	3ff00000 	.word	0x3ff00000

08005f84 <__d2b>:
 8005f84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005f88:	4689      	mov	r9, r1
 8005f8a:	2101      	movs	r1, #1
 8005f8c:	ec57 6b10 	vmov	r6, r7, d0
 8005f90:	4690      	mov	r8, r2
 8005f92:	f7ff fc09 	bl	80057a8 <_Balloc>
 8005f96:	4604      	mov	r4, r0
 8005f98:	b930      	cbnz	r0, 8005fa8 <__d2b+0x24>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	4b25      	ldr	r3, [pc, #148]	; (8006034 <__d2b+0xb0>)
 8005f9e:	4826      	ldr	r0, [pc, #152]	; (8006038 <__d2b+0xb4>)
 8005fa0:	f240 310a 	movw	r1, #778	; 0x30a
 8005fa4:	f000 fb4e 	bl	8006644 <__assert_func>
 8005fa8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005fac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005fb0:	bb35      	cbnz	r5, 8006000 <__d2b+0x7c>
 8005fb2:	2e00      	cmp	r6, #0
 8005fb4:	9301      	str	r3, [sp, #4]
 8005fb6:	d028      	beq.n	800600a <__d2b+0x86>
 8005fb8:	4668      	mov	r0, sp
 8005fba:	9600      	str	r6, [sp, #0]
 8005fbc:	f7ff fd06 	bl	80059cc <__lo0bits>
 8005fc0:	9900      	ldr	r1, [sp, #0]
 8005fc2:	b300      	cbz	r0, 8006006 <__d2b+0x82>
 8005fc4:	9a01      	ldr	r2, [sp, #4]
 8005fc6:	f1c0 0320 	rsb	r3, r0, #32
 8005fca:	fa02 f303 	lsl.w	r3, r2, r3
 8005fce:	430b      	orrs	r3, r1
 8005fd0:	40c2      	lsrs	r2, r0
 8005fd2:	6163      	str	r3, [r4, #20]
 8005fd4:	9201      	str	r2, [sp, #4]
 8005fd6:	9b01      	ldr	r3, [sp, #4]
 8005fd8:	61a3      	str	r3, [r4, #24]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	bf14      	ite	ne
 8005fde:	2202      	movne	r2, #2
 8005fe0:	2201      	moveq	r2, #1
 8005fe2:	6122      	str	r2, [r4, #16]
 8005fe4:	b1d5      	cbz	r5, 800601c <__d2b+0x98>
 8005fe6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005fea:	4405      	add	r5, r0
 8005fec:	f8c9 5000 	str.w	r5, [r9]
 8005ff0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005ff4:	f8c8 0000 	str.w	r0, [r8]
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	b003      	add	sp, #12
 8005ffc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006000:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006004:	e7d5      	b.n	8005fb2 <__d2b+0x2e>
 8006006:	6161      	str	r1, [r4, #20]
 8006008:	e7e5      	b.n	8005fd6 <__d2b+0x52>
 800600a:	a801      	add	r0, sp, #4
 800600c:	f7ff fcde 	bl	80059cc <__lo0bits>
 8006010:	9b01      	ldr	r3, [sp, #4]
 8006012:	6163      	str	r3, [r4, #20]
 8006014:	2201      	movs	r2, #1
 8006016:	6122      	str	r2, [r4, #16]
 8006018:	3020      	adds	r0, #32
 800601a:	e7e3      	b.n	8005fe4 <__d2b+0x60>
 800601c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006020:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006024:	f8c9 0000 	str.w	r0, [r9]
 8006028:	6918      	ldr	r0, [r3, #16]
 800602a:	f7ff fcaf 	bl	800598c <__hi0bits>
 800602e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006032:	e7df      	b.n	8005ff4 <__d2b+0x70>
 8006034:	08008d90 	.word	0x08008d90
 8006038:	08008e1c 	.word	0x08008e1c

0800603c <__ratio>:
 800603c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006040:	4688      	mov	r8, r1
 8006042:	4669      	mov	r1, sp
 8006044:	4681      	mov	r9, r0
 8006046:	f7ff ff4d 	bl	8005ee4 <__b2d>
 800604a:	a901      	add	r1, sp, #4
 800604c:	4640      	mov	r0, r8
 800604e:	ec55 4b10 	vmov	r4, r5, d0
 8006052:	f7ff ff47 	bl	8005ee4 <__b2d>
 8006056:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800605a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800605e:	eba3 0c02 	sub.w	ip, r3, r2
 8006062:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006066:	1a9b      	subs	r3, r3, r2
 8006068:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800606c:	ec51 0b10 	vmov	r0, r1, d0
 8006070:	2b00      	cmp	r3, #0
 8006072:	bfd6      	itet	le
 8006074:	460a      	movle	r2, r1
 8006076:	462a      	movgt	r2, r5
 8006078:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800607c:	468b      	mov	fp, r1
 800607e:	462f      	mov	r7, r5
 8006080:	bfd4      	ite	le
 8006082:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006086:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800608a:	4620      	mov	r0, r4
 800608c:	ee10 2a10 	vmov	r2, s0
 8006090:	465b      	mov	r3, fp
 8006092:	4639      	mov	r1, r7
 8006094:	f7fa fbb2 	bl	80007fc <__aeabi_ddiv>
 8006098:	ec41 0b10 	vmov	d0, r0, r1
 800609c:	b003      	add	sp, #12
 800609e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080060a2 <__copybits>:
 80060a2:	3901      	subs	r1, #1
 80060a4:	b570      	push	{r4, r5, r6, lr}
 80060a6:	1149      	asrs	r1, r1, #5
 80060a8:	6914      	ldr	r4, [r2, #16]
 80060aa:	3101      	adds	r1, #1
 80060ac:	f102 0314 	add.w	r3, r2, #20
 80060b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80060b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80060b8:	1f05      	subs	r5, r0, #4
 80060ba:	42a3      	cmp	r3, r4
 80060bc:	d30c      	bcc.n	80060d8 <__copybits+0x36>
 80060be:	1aa3      	subs	r3, r4, r2
 80060c0:	3b11      	subs	r3, #17
 80060c2:	f023 0303 	bic.w	r3, r3, #3
 80060c6:	3211      	adds	r2, #17
 80060c8:	42a2      	cmp	r2, r4
 80060ca:	bf88      	it	hi
 80060cc:	2300      	movhi	r3, #0
 80060ce:	4418      	add	r0, r3
 80060d0:	2300      	movs	r3, #0
 80060d2:	4288      	cmp	r0, r1
 80060d4:	d305      	bcc.n	80060e2 <__copybits+0x40>
 80060d6:	bd70      	pop	{r4, r5, r6, pc}
 80060d8:	f853 6b04 	ldr.w	r6, [r3], #4
 80060dc:	f845 6f04 	str.w	r6, [r5, #4]!
 80060e0:	e7eb      	b.n	80060ba <__copybits+0x18>
 80060e2:	f840 3b04 	str.w	r3, [r0], #4
 80060e6:	e7f4      	b.n	80060d2 <__copybits+0x30>

080060e8 <__any_on>:
 80060e8:	f100 0214 	add.w	r2, r0, #20
 80060ec:	6900      	ldr	r0, [r0, #16]
 80060ee:	114b      	asrs	r3, r1, #5
 80060f0:	4298      	cmp	r0, r3
 80060f2:	b510      	push	{r4, lr}
 80060f4:	db11      	blt.n	800611a <__any_on+0x32>
 80060f6:	dd0a      	ble.n	800610e <__any_on+0x26>
 80060f8:	f011 011f 	ands.w	r1, r1, #31
 80060fc:	d007      	beq.n	800610e <__any_on+0x26>
 80060fe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006102:	fa24 f001 	lsr.w	r0, r4, r1
 8006106:	fa00 f101 	lsl.w	r1, r0, r1
 800610a:	428c      	cmp	r4, r1
 800610c:	d10b      	bne.n	8006126 <__any_on+0x3e>
 800610e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006112:	4293      	cmp	r3, r2
 8006114:	d803      	bhi.n	800611e <__any_on+0x36>
 8006116:	2000      	movs	r0, #0
 8006118:	bd10      	pop	{r4, pc}
 800611a:	4603      	mov	r3, r0
 800611c:	e7f7      	b.n	800610e <__any_on+0x26>
 800611e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006122:	2900      	cmp	r1, #0
 8006124:	d0f5      	beq.n	8006112 <__any_on+0x2a>
 8006126:	2001      	movs	r0, #1
 8006128:	e7f6      	b.n	8006118 <__any_on+0x30>

0800612a <_calloc_r>:
 800612a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800612c:	fba1 2402 	umull	r2, r4, r1, r2
 8006130:	b94c      	cbnz	r4, 8006146 <_calloc_r+0x1c>
 8006132:	4611      	mov	r1, r2
 8006134:	9201      	str	r2, [sp, #4]
 8006136:	f000 f87b 	bl	8006230 <_malloc_r>
 800613a:	9a01      	ldr	r2, [sp, #4]
 800613c:	4605      	mov	r5, r0
 800613e:	b930      	cbnz	r0, 800614e <_calloc_r+0x24>
 8006140:	4628      	mov	r0, r5
 8006142:	b003      	add	sp, #12
 8006144:	bd30      	pop	{r4, r5, pc}
 8006146:	220c      	movs	r2, #12
 8006148:	6002      	str	r2, [r0, #0]
 800614a:	2500      	movs	r5, #0
 800614c:	e7f8      	b.n	8006140 <_calloc_r+0x16>
 800614e:	4621      	mov	r1, r4
 8006150:	f7fc fbce 	bl	80028f0 <memset>
 8006154:	e7f4      	b.n	8006140 <_calloc_r+0x16>
	...

08006158 <_free_r>:
 8006158:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800615a:	2900      	cmp	r1, #0
 800615c:	d044      	beq.n	80061e8 <_free_r+0x90>
 800615e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006162:	9001      	str	r0, [sp, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	f1a1 0404 	sub.w	r4, r1, #4
 800616a:	bfb8      	it	lt
 800616c:	18e4      	addlt	r4, r4, r3
 800616e:	f000 fab3 	bl	80066d8 <__malloc_lock>
 8006172:	4a1e      	ldr	r2, [pc, #120]	; (80061ec <_free_r+0x94>)
 8006174:	9801      	ldr	r0, [sp, #4]
 8006176:	6813      	ldr	r3, [r2, #0]
 8006178:	b933      	cbnz	r3, 8006188 <_free_r+0x30>
 800617a:	6063      	str	r3, [r4, #4]
 800617c:	6014      	str	r4, [r2, #0]
 800617e:	b003      	add	sp, #12
 8006180:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006184:	f000 baae 	b.w	80066e4 <__malloc_unlock>
 8006188:	42a3      	cmp	r3, r4
 800618a:	d908      	bls.n	800619e <_free_r+0x46>
 800618c:	6825      	ldr	r5, [r4, #0]
 800618e:	1961      	adds	r1, r4, r5
 8006190:	428b      	cmp	r3, r1
 8006192:	bf01      	itttt	eq
 8006194:	6819      	ldreq	r1, [r3, #0]
 8006196:	685b      	ldreq	r3, [r3, #4]
 8006198:	1949      	addeq	r1, r1, r5
 800619a:	6021      	streq	r1, [r4, #0]
 800619c:	e7ed      	b.n	800617a <_free_r+0x22>
 800619e:	461a      	mov	r2, r3
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	b10b      	cbz	r3, 80061a8 <_free_r+0x50>
 80061a4:	42a3      	cmp	r3, r4
 80061a6:	d9fa      	bls.n	800619e <_free_r+0x46>
 80061a8:	6811      	ldr	r1, [r2, #0]
 80061aa:	1855      	adds	r5, r2, r1
 80061ac:	42a5      	cmp	r5, r4
 80061ae:	d10b      	bne.n	80061c8 <_free_r+0x70>
 80061b0:	6824      	ldr	r4, [r4, #0]
 80061b2:	4421      	add	r1, r4
 80061b4:	1854      	adds	r4, r2, r1
 80061b6:	42a3      	cmp	r3, r4
 80061b8:	6011      	str	r1, [r2, #0]
 80061ba:	d1e0      	bne.n	800617e <_free_r+0x26>
 80061bc:	681c      	ldr	r4, [r3, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	6053      	str	r3, [r2, #4]
 80061c2:	4421      	add	r1, r4
 80061c4:	6011      	str	r1, [r2, #0]
 80061c6:	e7da      	b.n	800617e <_free_r+0x26>
 80061c8:	d902      	bls.n	80061d0 <_free_r+0x78>
 80061ca:	230c      	movs	r3, #12
 80061cc:	6003      	str	r3, [r0, #0]
 80061ce:	e7d6      	b.n	800617e <_free_r+0x26>
 80061d0:	6825      	ldr	r5, [r4, #0]
 80061d2:	1961      	adds	r1, r4, r5
 80061d4:	428b      	cmp	r3, r1
 80061d6:	bf04      	itt	eq
 80061d8:	6819      	ldreq	r1, [r3, #0]
 80061da:	685b      	ldreq	r3, [r3, #4]
 80061dc:	6063      	str	r3, [r4, #4]
 80061de:	bf04      	itt	eq
 80061e0:	1949      	addeq	r1, r1, r5
 80061e2:	6021      	streq	r1, [r4, #0]
 80061e4:	6054      	str	r4, [r2, #4]
 80061e6:	e7ca      	b.n	800617e <_free_r+0x26>
 80061e8:	b003      	add	sp, #12
 80061ea:	bd30      	pop	{r4, r5, pc}
 80061ec:	20000394 	.word	0x20000394

080061f0 <sbrk_aligned>:
 80061f0:	b570      	push	{r4, r5, r6, lr}
 80061f2:	4e0e      	ldr	r6, [pc, #56]	; (800622c <sbrk_aligned+0x3c>)
 80061f4:	460c      	mov	r4, r1
 80061f6:	6831      	ldr	r1, [r6, #0]
 80061f8:	4605      	mov	r5, r0
 80061fa:	b911      	cbnz	r1, 8006202 <sbrk_aligned+0x12>
 80061fc:	f000 f9f0 	bl	80065e0 <_sbrk_r>
 8006200:	6030      	str	r0, [r6, #0]
 8006202:	4621      	mov	r1, r4
 8006204:	4628      	mov	r0, r5
 8006206:	f000 f9eb 	bl	80065e0 <_sbrk_r>
 800620a:	1c43      	adds	r3, r0, #1
 800620c:	d00a      	beq.n	8006224 <sbrk_aligned+0x34>
 800620e:	1cc4      	adds	r4, r0, #3
 8006210:	f024 0403 	bic.w	r4, r4, #3
 8006214:	42a0      	cmp	r0, r4
 8006216:	d007      	beq.n	8006228 <sbrk_aligned+0x38>
 8006218:	1a21      	subs	r1, r4, r0
 800621a:	4628      	mov	r0, r5
 800621c:	f000 f9e0 	bl	80065e0 <_sbrk_r>
 8006220:	3001      	adds	r0, #1
 8006222:	d101      	bne.n	8006228 <sbrk_aligned+0x38>
 8006224:	f04f 34ff 	mov.w	r4, #4294967295
 8006228:	4620      	mov	r0, r4
 800622a:	bd70      	pop	{r4, r5, r6, pc}
 800622c:	20000398 	.word	0x20000398

08006230 <_malloc_r>:
 8006230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006234:	1ccd      	adds	r5, r1, #3
 8006236:	f025 0503 	bic.w	r5, r5, #3
 800623a:	3508      	adds	r5, #8
 800623c:	2d0c      	cmp	r5, #12
 800623e:	bf38      	it	cc
 8006240:	250c      	movcc	r5, #12
 8006242:	2d00      	cmp	r5, #0
 8006244:	4607      	mov	r7, r0
 8006246:	db01      	blt.n	800624c <_malloc_r+0x1c>
 8006248:	42a9      	cmp	r1, r5
 800624a:	d905      	bls.n	8006258 <_malloc_r+0x28>
 800624c:	230c      	movs	r3, #12
 800624e:	603b      	str	r3, [r7, #0]
 8006250:	2600      	movs	r6, #0
 8006252:	4630      	mov	r0, r6
 8006254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006258:	4e2e      	ldr	r6, [pc, #184]	; (8006314 <_malloc_r+0xe4>)
 800625a:	f000 fa3d 	bl	80066d8 <__malloc_lock>
 800625e:	6833      	ldr	r3, [r6, #0]
 8006260:	461c      	mov	r4, r3
 8006262:	bb34      	cbnz	r4, 80062b2 <_malloc_r+0x82>
 8006264:	4629      	mov	r1, r5
 8006266:	4638      	mov	r0, r7
 8006268:	f7ff ffc2 	bl	80061f0 <sbrk_aligned>
 800626c:	1c43      	adds	r3, r0, #1
 800626e:	4604      	mov	r4, r0
 8006270:	d14d      	bne.n	800630e <_malloc_r+0xde>
 8006272:	6834      	ldr	r4, [r6, #0]
 8006274:	4626      	mov	r6, r4
 8006276:	2e00      	cmp	r6, #0
 8006278:	d140      	bne.n	80062fc <_malloc_r+0xcc>
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	4631      	mov	r1, r6
 800627e:	4638      	mov	r0, r7
 8006280:	eb04 0803 	add.w	r8, r4, r3
 8006284:	f000 f9ac 	bl	80065e0 <_sbrk_r>
 8006288:	4580      	cmp	r8, r0
 800628a:	d13a      	bne.n	8006302 <_malloc_r+0xd2>
 800628c:	6821      	ldr	r1, [r4, #0]
 800628e:	3503      	adds	r5, #3
 8006290:	1a6d      	subs	r5, r5, r1
 8006292:	f025 0503 	bic.w	r5, r5, #3
 8006296:	3508      	adds	r5, #8
 8006298:	2d0c      	cmp	r5, #12
 800629a:	bf38      	it	cc
 800629c:	250c      	movcc	r5, #12
 800629e:	4629      	mov	r1, r5
 80062a0:	4638      	mov	r0, r7
 80062a2:	f7ff ffa5 	bl	80061f0 <sbrk_aligned>
 80062a6:	3001      	adds	r0, #1
 80062a8:	d02b      	beq.n	8006302 <_malloc_r+0xd2>
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	442b      	add	r3, r5
 80062ae:	6023      	str	r3, [r4, #0]
 80062b0:	e00e      	b.n	80062d0 <_malloc_r+0xa0>
 80062b2:	6822      	ldr	r2, [r4, #0]
 80062b4:	1b52      	subs	r2, r2, r5
 80062b6:	d41e      	bmi.n	80062f6 <_malloc_r+0xc6>
 80062b8:	2a0b      	cmp	r2, #11
 80062ba:	d916      	bls.n	80062ea <_malloc_r+0xba>
 80062bc:	1961      	adds	r1, r4, r5
 80062be:	42a3      	cmp	r3, r4
 80062c0:	6025      	str	r5, [r4, #0]
 80062c2:	bf18      	it	ne
 80062c4:	6059      	strne	r1, [r3, #4]
 80062c6:	6863      	ldr	r3, [r4, #4]
 80062c8:	bf08      	it	eq
 80062ca:	6031      	streq	r1, [r6, #0]
 80062cc:	5162      	str	r2, [r4, r5]
 80062ce:	604b      	str	r3, [r1, #4]
 80062d0:	4638      	mov	r0, r7
 80062d2:	f104 060b 	add.w	r6, r4, #11
 80062d6:	f000 fa05 	bl	80066e4 <__malloc_unlock>
 80062da:	f026 0607 	bic.w	r6, r6, #7
 80062de:	1d23      	adds	r3, r4, #4
 80062e0:	1af2      	subs	r2, r6, r3
 80062e2:	d0b6      	beq.n	8006252 <_malloc_r+0x22>
 80062e4:	1b9b      	subs	r3, r3, r6
 80062e6:	50a3      	str	r3, [r4, r2]
 80062e8:	e7b3      	b.n	8006252 <_malloc_r+0x22>
 80062ea:	6862      	ldr	r2, [r4, #4]
 80062ec:	42a3      	cmp	r3, r4
 80062ee:	bf0c      	ite	eq
 80062f0:	6032      	streq	r2, [r6, #0]
 80062f2:	605a      	strne	r2, [r3, #4]
 80062f4:	e7ec      	b.n	80062d0 <_malloc_r+0xa0>
 80062f6:	4623      	mov	r3, r4
 80062f8:	6864      	ldr	r4, [r4, #4]
 80062fa:	e7b2      	b.n	8006262 <_malloc_r+0x32>
 80062fc:	4634      	mov	r4, r6
 80062fe:	6876      	ldr	r6, [r6, #4]
 8006300:	e7b9      	b.n	8006276 <_malloc_r+0x46>
 8006302:	230c      	movs	r3, #12
 8006304:	603b      	str	r3, [r7, #0]
 8006306:	4638      	mov	r0, r7
 8006308:	f000 f9ec 	bl	80066e4 <__malloc_unlock>
 800630c:	e7a1      	b.n	8006252 <_malloc_r+0x22>
 800630e:	6025      	str	r5, [r4, #0]
 8006310:	e7de      	b.n	80062d0 <_malloc_r+0xa0>
 8006312:	bf00      	nop
 8006314:	20000394 	.word	0x20000394

08006318 <__ssputs_r>:
 8006318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800631c:	688e      	ldr	r6, [r1, #8]
 800631e:	429e      	cmp	r6, r3
 8006320:	4682      	mov	sl, r0
 8006322:	460c      	mov	r4, r1
 8006324:	4690      	mov	r8, r2
 8006326:	461f      	mov	r7, r3
 8006328:	d838      	bhi.n	800639c <__ssputs_r+0x84>
 800632a:	898a      	ldrh	r2, [r1, #12]
 800632c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006330:	d032      	beq.n	8006398 <__ssputs_r+0x80>
 8006332:	6825      	ldr	r5, [r4, #0]
 8006334:	6909      	ldr	r1, [r1, #16]
 8006336:	eba5 0901 	sub.w	r9, r5, r1
 800633a:	6965      	ldr	r5, [r4, #20]
 800633c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006340:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006344:	3301      	adds	r3, #1
 8006346:	444b      	add	r3, r9
 8006348:	106d      	asrs	r5, r5, #1
 800634a:	429d      	cmp	r5, r3
 800634c:	bf38      	it	cc
 800634e:	461d      	movcc	r5, r3
 8006350:	0553      	lsls	r3, r2, #21
 8006352:	d531      	bpl.n	80063b8 <__ssputs_r+0xa0>
 8006354:	4629      	mov	r1, r5
 8006356:	f7ff ff6b 	bl	8006230 <_malloc_r>
 800635a:	4606      	mov	r6, r0
 800635c:	b950      	cbnz	r0, 8006374 <__ssputs_r+0x5c>
 800635e:	230c      	movs	r3, #12
 8006360:	f8ca 3000 	str.w	r3, [sl]
 8006364:	89a3      	ldrh	r3, [r4, #12]
 8006366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800636a:	81a3      	strh	r3, [r4, #12]
 800636c:	f04f 30ff 	mov.w	r0, #4294967295
 8006370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006374:	6921      	ldr	r1, [r4, #16]
 8006376:	464a      	mov	r2, r9
 8006378:	f7fc faac 	bl	80028d4 <memcpy>
 800637c:	89a3      	ldrh	r3, [r4, #12]
 800637e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006386:	81a3      	strh	r3, [r4, #12]
 8006388:	6126      	str	r6, [r4, #16]
 800638a:	6165      	str	r5, [r4, #20]
 800638c:	444e      	add	r6, r9
 800638e:	eba5 0509 	sub.w	r5, r5, r9
 8006392:	6026      	str	r6, [r4, #0]
 8006394:	60a5      	str	r5, [r4, #8]
 8006396:	463e      	mov	r6, r7
 8006398:	42be      	cmp	r6, r7
 800639a:	d900      	bls.n	800639e <__ssputs_r+0x86>
 800639c:	463e      	mov	r6, r7
 800639e:	6820      	ldr	r0, [r4, #0]
 80063a0:	4632      	mov	r2, r6
 80063a2:	4641      	mov	r1, r8
 80063a4:	f000 f97e 	bl	80066a4 <memmove>
 80063a8:	68a3      	ldr	r3, [r4, #8]
 80063aa:	1b9b      	subs	r3, r3, r6
 80063ac:	60a3      	str	r3, [r4, #8]
 80063ae:	6823      	ldr	r3, [r4, #0]
 80063b0:	4433      	add	r3, r6
 80063b2:	6023      	str	r3, [r4, #0]
 80063b4:	2000      	movs	r0, #0
 80063b6:	e7db      	b.n	8006370 <__ssputs_r+0x58>
 80063b8:	462a      	mov	r2, r5
 80063ba:	f000 f999 	bl	80066f0 <_realloc_r>
 80063be:	4606      	mov	r6, r0
 80063c0:	2800      	cmp	r0, #0
 80063c2:	d1e1      	bne.n	8006388 <__ssputs_r+0x70>
 80063c4:	6921      	ldr	r1, [r4, #16]
 80063c6:	4650      	mov	r0, sl
 80063c8:	f7ff fec6 	bl	8006158 <_free_r>
 80063cc:	e7c7      	b.n	800635e <__ssputs_r+0x46>
	...

080063d0 <_svfiprintf_r>:
 80063d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d4:	4698      	mov	r8, r3
 80063d6:	898b      	ldrh	r3, [r1, #12]
 80063d8:	061b      	lsls	r3, r3, #24
 80063da:	b09d      	sub	sp, #116	; 0x74
 80063dc:	4607      	mov	r7, r0
 80063de:	460d      	mov	r5, r1
 80063e0:	4614      	mov	r4, r2
 80063e2:	d50e      	bpl.n	8006402 <_svfiprintf_r+0x32>
 80063e4:	690b      	ldr	r3, [r1, #16]
 80063e6:	b963      	cbnz	r3, 8006402 <_svfiprintf_r+0x32>
 80063e8:	2140      	movs	r1, #64	; 0x40
 80063ea:	f7ff ff21 	bl	8006230 <_malloc_r>
 80063ee:	6028      	str	r0, [r5, #0]
 80063f0:	6128      	str	r0, [r5, #16]
 80063f2:	b920      	cbnz	r0, 80063fe <_svfiprintf_r+0x2e>
 80063f4:	230c      	movs	r3, #12
 80063f6:	603b      	str	r3, [r7, #0]
 80063f8:	f04f 30ff 	mov.w	r0, #4294967295
 80063fc:	e0d1      	b.n	80065a2 <_svfiprintf_r+0x1d2>
 80063fe:	2340      	movs	r3, #64	; 0x40
 8006400:	616b      	str	r3, [r5, #20]
 8006402:	2300      	movs	r3, #0
 8006404:	9309      	str	r3, [sp, #36]	; 0x24
 8006406:	2320      	movs	r3, #32
 8006408:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800640c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006410:	2330      	movs	r3, #48	; 0x30
 8006412:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80065bc <_svfiprintf_r+0x1ec>
 8006416:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800641a:	f04f 0901 	mov.w	r9, #1
 800641e:	4623      	mov	r3, r4
 8006420:	469a      	mov	sl, r3
 8006422:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006426:	b10a      	cbz	r2, 800642c <_svfiprintf_r+0x5c>
 8006428:	2a25      	cmp	r2, #37	; 0x25
 800642a:	d1f9      	bne.n	8006420 <_svfiprintf_r+0x50>
 800642c:	ebba 0b04 	subs.w	fp, sl, r4
 8006430:	d00b      	beq.n	800644a <_svfiprintf_r+0x7a>
 8006432:	465b      	mov	r3, fp
 8006434:	4622      	mov	r2, r4
 8006436:	4629      	mov	r1, r5
 8006438:	4638      	mov	r0, r7
 800643a:	f7ff ff6d 	bl	8006318 <__ssputs_r>
 800643e:	3001      	adds	r0, #1
 8006440:	f000 80aa 	beq.w	8006598 <_svfiprintf_r+0x1c8>
 8006444:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006446:	445a      	add	r2, fp
 8006448:	9209      	str	r2, [sp, #36]	; 0x24
 800644a:	f89a 3000 	ldrb.w	r3, [sl]
 800644e:	2b00      	cmp	r3, #0
 8006450:	f000 80a2 	beq.w	8006598 <_svfiprintf_r+0x1c8>
 8006454:	2300      	movs	r3, #0
 8006456:	f04f 32ff 	mov.w	r2, #4294967295
 800645a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800645e:	f10a 0a01 	add.w	sl, sl, #1
 8006462:	9304      	str	r3, [sp, #16]
 8006464:	9307      	str	r3, [sp, #28]
 8006466:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800646a:	931a      	str	r3, [sp, #104]	; 0x68
 800646c:	4654      	mov	r4, sl
 800646e:	2205      	movs	r2, #5
 8006470:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006474:	4851      	ldr	r0, [pc, #324]	; (80065bc <_svfiprintf_r+0x1ec>)
 8006476:	f7f9 fe8b 	bl	8000190 <memchr>
 800647a:	9a04      	ldr	r2, [sp, #16]
 800647c:	b9d8      	cbnz	r0, 80064b6 <_svfiprintf_r+0xe6>
 800647e:	06d0      	lsls	r0, r2, #27
 8006480:	bf44      	itt	mi
 8006482:	2320      	movmi	r3, #32
 8006484:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006488:	0711      	lsls	r1, r2, #28
 800648a:	bf44      	itt	mi
 800648c:	232b      	movmi	r3, #43	; 0x2b
 800648e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006492:	f89a 3000 	ldrb.w	r3, [sl]
 8006496:	2b2a      	cmp	r3, #42	; 0x2a
 8006498:	d015      	beq.n	80064c6 <_svfiprintf_r+0xf6>
 800649a:	9a07      	ldr	r2, [sp, #28]
 800649c:	4654      	mov	r4, sl
 800649e:	2000      	movs	r0, #0
 80064a0:	f04f 0c0a 	mov.w	ip, #10
 80064a4:	4621      	mov	r1, r4
 80064a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064aa:	3b30      	subs	r3, #48	; 0x30
 80064ac:	2b09      	cmp	r3, #9
 80064ae:	d94e      	bls.n	800654e <_svfiprintf_r+0x17e>
 80064b0:	b1b0      	cbz	r0, 80064e0 <_svfiprintf_r+0x110>
 80064b2:	9207      	str	r2, [sp, #28]
 80064b4:	e014      	b.n	80064e0 <_svfiprintf_r+0x110>
 80064b6:	eba0 0308 	sub.w	r3, r0, r8
 80064ba:	fa09 f303 	lsl.w	r3, r9, r3
 80064be:	4313      	orrs	r3, r2
 80064c0:	9304      	str	r3, [sp, #16]
 80064c2:	46a2      	mov	sl, r4
 80064c4:	e7d2      	b.n	800646c <_svfiprintf_r+0x9c>
 80064c6:	9b03      	ldr	r3, [sp, #12]
 80064c8:	1d19      	adds	r1, r3, #4
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	9103      	str	r1, [sp, #12]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	bfbb      	ittet	lt
 80064d2:	425b      	neglt	r3, r3
 80064d4:	f042 0202 	orrlt.w	r2, r2, #2
 80064d8:	9307      	strge	r3, [sp, #28]
 80064da:	9307      	strlt	r3, [sp, #28]
 80064dc:	bfb8      	it	lt
 80064de:	9204      	strlt	r2, [sp, #16]
 80064e0:	7823      	ldrb	r3, [r4, #0]
 80064e2:	2b2e      	cmp	r3, #46	; 0x2e
 80064e4:	d10c      	bne.n	8006500 <_svfiprintf_r+0x130>
 80064e6:	7863      	ldrb	r3, [r4, #1]
 80064e8:	2b2a      	cmp	r3, #42	; 0x2a
 80064ea:	d135      	bne.n	8006558 <_svfiprintf_r+0x188>
 80064ec:	9b03      	ldr	r3, [sp, #12]
 80064ee:	1d1a      	adds	r2, r3, #4
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	9203      	str	r2, [sp, #12]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	bfb8      	it	lt
 80064f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80064fc:	3402      	adds	r4, #2
 80064fe:	9305      	str	r3, [sp, #20]
 8006500:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80065cc <_svfiprintf_r+0x1fc>
 8006504:	7821      	ldrb	r1, [r4, #0]
 8006506:	2203      	movs	r2, #3
 8006508:	4650      	mov	r0, sl
 800650a:	f7f9 fe41 	bl	8000190 <memchr>
 800650e:	b140      	cbz	r0, 8006522 <_svfiprintf_r+0x152>
 8006510:	2340      	movs	r3, #64	; 0x40
 8006512:	eba0 000a 	sub.w	r0, r0, sl
 8006516:	fa03 f000 	lsl.w	r0, r3, r0
 800651a:	9b04      	ldr	r3, [sp, #16]
 800651c:	4303      	orrs	r3, r0
 800651e:	3401      	adds	r4, #1
 8006520:	9304      	str	r3, [sp, #16]
 8006522:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006526:	4826      	ldr	r0, [pc, #152]	; (80065c0 <_svfiprintf_r+0x1f0>)
 8006528:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800652c:	2206      	movs	r2, #6
 800652e:	f7f9 fe2f 	bl	8000190 <memchr>
 8006532:	2800      	cmp	r0, #0
 8006534:	d038      	beq.n	80065a8 <_svfiprintf_r+0x1d8>
 8006536:	4b23      	ldr	r3, [pc, #140]	; (80065c4 <_svfiprintf_r+0x1f4>)
 8006538:	bb1b      	cbnz	r3, 8006582 <_svfiprintf_r+0x1b2>
 800653a:	9b03      	ldr	r3, [sp, #12]
 800653c:	3307      	adds	r3, #7
 800653e:	f023 0307 	bic.w	r3, r3, #7
 8006542:	3308      	adds	r3, #8
 8006544:	9303      	str	r3, [sp, #12]
 8006546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006548:	4433      	add	r3, r6
 800654a:	9309      	str	r3, [sp, #36]	; 0x24
 800654c:	e767      	b.n	800641e <_svfiprintf_r+0x4e>
 800654e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006552:	460c      	mov	r4, r1
 8006554:	2001      	movs	r0, #1
 8006556:	e7a5      	b.n	80064a4 <_svfiprintf_r+0xd4>
 8006558:	2300      	movs	r3, #0
 800655a:	3401      	adds	r4, #1
 800655c:	9305      	str	r3, [sp, #20]
 800655e:	4619      	mov	r1, r3
 8006560:	f04f 0c0a 	mov.w	ip, #10
 8006564:	4620      	mov	r0, r4
 8006566:	f810 2b01 	ldrb.w	r2, [r0], #1
 800656a:	3a30      	subs	r2, #48	; 0x30
 800656c:	2a09      	cmp	r2, #9
 800656e:	d903      	bls.n	8006578 <_svfiprintf_r+0x1a8>
 8006570:	2b00      	cmp	r3, #0
 8006572:	d0c5      	beq.n	8006500 <_svfiprintf_r+0x130>
 8006574:	9105      	str	r1, [sp, #20]
 8006576:	e7c3      	b.n	8006500 <_svfiprintf_r+0x130>
 8006578:	fb0c 2101 	mla	r1, ip, r1, r2
 800657c:	4604      	mov	r4, r0
 800657e:	2301      	movs	r3, #1
 8006580:	e7f0      	b.n	8006564 <_svfiprintf_r+0x194>
 8006582:	ab03      	add	r3, sp, #12
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	462a      	mov	r2, r5
 8006588:	4b0f      	ldr	r3, [pc, #60]	; (80065c8 <_svfiprintf_r+0x1f8>)
 800658a:	a904      	add	r1, sp, #16
 800658c:	4638      	mov	r0, r7
 800658e:	f7fc fa57 	bl	8002a40 <_printf_float>
 8006592:	1c42      	adds	r2, r0, #1
 8006594:	4606      	mov	r6, r0
 8006596:	d1d6      	bne.n	8006546 <_svfiprintf_r+0x176>
 8006598:	89ab      	ldrh	r3, [r5, #12]
 800659a:	065b      	lsls	r3, r3, #25
 800659c:	f53f af2c 	bmi.w	80063f8 <_svfiprintf_r+0x28>
 80065a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065a2:	b01d      	add	sp, #116	; 0x74
 80065a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a8:	ab03      	add	r3, sp, #12
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	462a      	mov	r2, r5
 80065ae:	4b06      	ldr	r3, [pc, #24]	; (80065c8 <_svfiprintf_r+0x1f8>)
 80065b0:	a904      	add	r1, sp, #16
 80065b2:	4638      	mov	r0, r7
 80065b4:	f7fc fce8 	bl	8002f88 <_printf_i>
 80065b8:	e7eb      	b.n	8006592 <_svfiprintf_r+0x1c2>
 80065ba:	bf00      	nop
 80065bc:	08008f74 	.word	0x08008f74
 80065c0:	08008f7e 	.word	0x08008f7e
 80065c4:	08002a41 	.word	0x08002a41
 80065c8:	08006319 	.word	0x08006319
 80065cc:	08008f7a 	.word	0x08008f7a

080065d0 <nan>:
 80065d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80065d8 <nan+0x8>
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	00000000 	.word	0x00000000
 80065dc:	7ff80000 	.word	0x7ff80000

080065e0 <_sbrk_r>:
 80065e0:	b538      	push	{r3, r4, r5, lr}
 80065e2:	4d06      	ldr	r5, [pc, #24]	; (80065fc <_sbrk_r+0x1c>)
 80065e4:	2300      	movs	r3, #0
 80065e6:	4604      	mov	r4, r0
 80065e8:	4608      	mov	r0, r1
 80065ea:	602b      	str	r3, [r5, #0]
 80065ec:	f7fa ff76 	bl	80014dc <_sbrk>
 80065f0:	1c43      	adds	r3, r0, #1
 80065f2:	d102      	bne.n	80065fa <_sbrk_r+0x1a>
 80065f4:	682b      	ldr	r3, [r5, #0]
 80065f6:	b103      	cbz	r3, 80065fa <_sbrk_r+0x1a>
 80065f8:	6023      	str	r3, [r4, #0]
 80065fa:	bd38      	pop	{r3, r4, r5, pc}
 80065fc:	2000039c 	.word	0x2000039c

08006600 <strncmp>:
 8006600:	b510      	push	{r4, lr}
 8006602:	b17a      	cbz	r2, 8006624 <strncmp+0x24>
 8006604:	4603      	mov	r3, r0
 8006606:	3901      	subs	r1, #1
 8006608:	1884      	adds	r4, r0, r2
 800660a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800660e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006612:	4290      	cmp	r0, r2
 8006614:	d101      	bne.n	800661a <strncmp+0x1a>
 8006616:	42a3      	cmp	r3, r4
 8006618:	d101      	bne.n	800661e <strncmp+0x1e>
 800661a:	1a80      	subs	r0, r0, r2
 800661c:	bd10      	pop	{r4, pc}
 800661e:	2800      	cmp	r0, #0
 8006620:	d1f3      	bne.n	800660a <strncmp+0xa>
 8006622:	e7fa      	b.n	800661a <strncmp+0x1a>
 8006624:	4610      	mov	r0, r2
 8006626:	e7f9      	b.n	800661c <strncmp+0x1c>

08006628 <__ascii_wctomb>:
 8006628:	b149      	cbz	r1, 800663e <__ascii_wctomb+0x16>
 800662a:	2aff      	cmp	r2, #255	; 0xff
 800662c:	bf85      	ittet	hi
 800662e:	238a      	movhi	r3, #138	; 0x8a
 8006630:	6003      	strhi	r3, [r0, #0]
 8006632:	700a      	strbls	r2, [r1, #0]
 8006634:	f04f 30ff 	movhi.w	r0, #4294967295
 8006638:	bf98      	it	ls
 800663a:	2001      	movls	r0, #1
 800663c:	4770      	bx	lr
 800663e:	4608      	mov	r0, r1
 8006640:	4770      	bx	lr
	...

08006644 <__assert_func>:
 8006644:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006646:	4614      	mov	r4, r2
 8006648:	461a      	mov	r2, r3
 800664a:	4b09      	ldr	r3, [pc, #36]	; (8006670 <__assert_func+0x2c>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4605      	mov	r5, r0
 8006650:	68d8      	ldr	r0, [r3, #12]
 8006652:	b14c      	cbz	r4, 8006668 <__assert_func+0x24>
 8006654:	4b07      	ldr	r3, [pc, #28]	; (8006674 <__assert_func+0x30>)
 8006656:	9100      	str	r1, [sp, #0]
 8006658:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800665c:	4906      	ldr	r1, [pc, #24]	; (8006678 <__assert_func+0x34>)
 800665e:	462b      	mov	r3, r5
 8006660:	f000 f80e 	bl	8006680 <fiprintf>
 8006664:	f000 fa8c 	bl	8006b80 <abort>
 8006668:	4b04      	ldr	r3, [pc, #16]	; (800667c <__assert_func+0x38>)
 800666a:	461c      	mov	r4, r3
 800666c:	e7f3      	b.n	8006656 <__assert_func+0x12>
 800666e:	bf00      	nop
 8006670:	20000010 	.word	0x20000010
 8006674:	08008f85 	.word	0x08008f85
 8006678:	08008f92 	.word	0x08008f92
 800667c:	08008fc0 	.word	0x08008fc0

08006680 <fiprintf>:
 8006680:	b40e      	push	{r1, r2, r3}
 8006682:	b503      	push	{r0, r1, lr}
 8006684:	4601      	mov	r1, r0
 8006686:	ab03      	add	r3, sp, #12
 8006688:	4805      	ldr	r0, [pc, #20]	; (80066a0 <fiprintf+0x20>)
 800668a:	f853 2b04 	ldr.w	r2, [r3], #4
 800668e:	6800      	ldr	r0, [r0, #0]
 8006690:	9301      	str	r3, [sp, #4]
 8006692:	f000 f885 	bl	80067a0 <_vfiprintf_r>
 8006696:	b002      	add	sp, #8
 8006698:	f85d eb04 	ldr.w	lr, [sp], #4
 800669c:	b003      	add	sp, #12
 800669e:	4770      	bx	lr
 80066a0:	20000010 	.word	0x20000010

080066a4 <memmove>:
 80066a4:	4288      	cmp	r0, r1
 80066a6:	b510      	push	{r4, lr}
 80066a8:	eb01 0402 	add.w	r4, r1, r2
 80066ac:	d902      	bls.n	80066b4 <memmove+0x10>
 80066ae:	4284      	cmp	r4, r0
 80066b0:	4623      	mov	r3, r4
 80066b2:	d807      	bhi.n	80066c4 <memmove+0x20>
 80066b4:	1e43      	subs	r3, r0, #1
 80066b6:	42a1      	cmp	r1, r4
 80066b8:	d008      	beq.n	80066cc <memmove+0x28>
 80066ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066c2:	e7f8      	b.n	80066b6 <memmove+0x12>
 80066c4:	4402      	add	r2, r0
 80066c6:	4601      	mov	r1, r0
 80066c8:	428a      	cmp	r2, r1
 80066ca:	d100      	bne.n	80066ce <memmove+0x2a>
 80066cc:	bd10      	pop	{r4, pc}
 80066ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066d6:	e7f7      	b.n	80066c8 <memmove+0x24>

080066d8 <__malloc_lock>:
 80066d8:	4801      	ldr	r0, [pc, #4]	; (80066e0 <__malloc_lock+0x8>)
 80066da:	f000 bc11 	b.w	8006f00 <__retarget_lock_acquire_recursive>
 80066de:	bf00      	nop
 80066e0:	200003a0 	.word	0x200003a0

080066e4 <__malloc_unlock>:
 80066e4:	4801      	ldr	r0, [pc, #4]	; (80066ec <__malloc_unlock+0x8>)
 80066e6:	f000 bc0c 	b.w	8006f02 <__retarget_lock_release_recursive>
 80066ea:	bf00      	nop
 80066ec:	200003a0 	.word	0x200003a0

080066f0 <_realloc_r>:
 80066f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066f4:	4680      	mov	r8, r0
 80066f6:	4614      	mov	r4, r2
 80066f8:	460e      	mov	r6, r1
 80066fa:	b921      	cbnz	r1, 8006706 <_realloc_r+0x16>
 80066fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006700:	4611      	mov	r1, r2
 8006702:	f7ff bd95 	b.w	8006230 <_malloc_r>
 8006706:	b92a      	cbnz	r2, 8006714 <_realloc_r+0x24>
 8006708:	f7ff fd26 	bl	8006158 <_free_r>
 800670c:	4625      	mov	r5, r4
 800670e:	4628      	mov	r0, r5
 8006710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006714:	f000 fc5c 	bl	8006fd0 <_malloc_usable_size_r>
 8006718:	4284      	cmp	r4, r0
 800671a:	4607      	mov	r7, r0
 800671c:	d802      	bhi.n	8006724 <_realloc_r+0x34>
 800671e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006722:	d812      	bhi.n	800674a <_realloc_r+0x5a>
 8006724:	4621      	mov	r1, r4
 8006726:	4640      	mov	r0, r8
 8006728:	f7ff fd82 	bl	8006230 <_malloc_r>
 800672c:	4605      	mov	r5, r0
 800672e:	2800      	cmp	r0, #0
 8006730:	d0ed      	beq.n	800670e <_realloc_r+0x1e>
 8006732:	42bc      	cmp	r4, r7
 8006734:	4622      	mov	r2, r4
 8006736:	4631      	mov	r1, r6
 8006738:	bf28      	it	cs
 800673a:	463a      	movcs	r2, r7
 800673c:	f7fc f8ca 	bl	80028d4 <memcpy>
 8006740:	4631      	mov	r1, r6
 8006742:	4640      	mov	r0, r8
 8006744:	f7ff fd08 	bl	8006158 <_free_r>
 8006748:	e7e1      	b.n	800670e <_realloc_r+0x1e>
 800674a:	4635      	mov	r5, r6
 800674c:	e7df      	b.n	800670e <_realloc_r+0x1e>

0800674e <__sfputc_r>:
 800674e:	6893      	ldr	r3, [r2, #8]
 8006750:	3b01      	subs	r3, #1
 8006752:	2b00      	cmp	r3, #0
 8006754:	b410      	push	{r4}
 8006756:	6093      	str	r3, [r2, #8]
 8006758:	da08      	bge.n	800676c <__sfputc_r+0x1e>
 800675a:	6994      	ldr	r4, [r2, #24]
 800675c:	42a3      	cmp	r3, r4
 800675e:	db01      	blt.n	8006764 <__sfputc_r+0x16>
 8006760:	290a      	cmp	r1, #10
 8006762:	d103      	bne.n	800676c <__sfputc_r+0x1e>
 8006764:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006768:	f000 b94a 	b.w	8006a00 <__swbuf_r>
 800676c:	6813      	ldr	r3, [r2, #0]
 800676e:	1c58      	adds	r0, r3, #1
 8006770:	6010      	str	r0, [r2, #0]
 8006772:	7019      	strb	r1, [r3, #0]
 8006774:	4608      	mov	r0, r1
 8006776:	f85d 4b04 	ldr.w	r4, [sp], #4
 800677a:	4770      	bx	lr

0800677c <__sfputs_r>:
 800677c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677e:	4606      	mov	r6, r0
 8006780:	460f      	mov	r7, r1
 8006782:	4614      	mov	r4, r2
 8006784:	18d5      	adds	r5, r2, r3
 8006786:	42ac      	cmp	r4, r5
 8006788:	d101      	bne.n	800678e <__sfputs_r+0x12>
 800678a:	2000      	movs	r0, #0
 800678c:	e007      	b.n	800679e <__sfputs_r+0x22>
 800678e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006792:	463a      	mov	r2, r7
 8006794:	4630      	mov	r0, r6
 8006796:	f7ff ffda 	bl	800674e <__sfputc_r>
 800679a:	1c43      	adds	r3, r0, #1
 800679c:	d1f3      	bne.n	8006786 <__sfputs_r+0xa>
 800679e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080067a0 <_vfiprintf_r>:
 80067a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a4:	460d      	mov	r5, r1
 80067a6:	b09d      	sub	sp, #116	; 0x74
 80067a8:	4614      	mov	r4, r2
 80067aa:	4698      	mov	r8, r3
 80067ac:	4606      	mov	r6, r0
 80067ae:	b118      	cbz	r0, 80067b8 <_vfiprintf_r+0x18>
 80067b0:	6983      	ldr	r3, [r0, #24]
 80067b2:	b90b      	cbnz	r3, 80067b8 <_vfiprintf_r+0x18>
 80067b4:	f000 fb06 	bl	8006dc4 <__sinit>
 80067b8:	4b89      	ldr	r3, [pc, #548]	; (80069e0 <_vfiprintf_r+0x240>)
 80067ba:	429d      	cmp	r5, r3
 80067bc:	d11b      	bne.n	80067f6 <_vfiprintf_r+0x56>
 80067be:	6875      	ldr	r5, [r6, #4]
 80067c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067c2:	07d9      	lsls	r1, r3, #31
 80067c4:	d405      	bmi.n	80067d2 <_vfiprintf_r+0x32>
 80067c6:	89ab      	ldrh	r3, [r5, #12]
 80067c8:	059a      	lsls	r2, r3, #22
 80067ca:	d402      	bmi.n	80067d2 <_vfiprintf_r+0x32>
 80067cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067ce:	f000 fb97 	bl	8006f00 <__retarget_lock_acquire_recursive>
 80067d2:	89ab      	ldrh	r3, [r5, #12]
 80067d4:	071b      	lsls	r3, r3, #28
 80067d6:	d501      	bpl.n	80067dc <_vfiprintf_r+0x3c>
 80067d8:	692b      	ldr	r3, [r5, #16]
 80067da:	b9eb      	cbnz	r3, 8006818 <_vfiprintf_r+0x78>
 80067dc:	4629      	mov	r1, r5
 80067de:	4630      	mov	r0, r6
 80067e0:	f000 f960 	bl	8006aa4 <__swsetup_r>
 80067e4:	b1c0      	cbz	r0, 8006818 <_vfiprintf_r+0x78>
 80067e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067e8:	07dc      	lsls	r4, r3, #31
 80067ea:	d50e      	bpl.n	800680a <_vfiprintf_r+0x6a>
 80067ec:	f04f 30ff 	mov.w	r0, #4294967295
 80067f0:	b01d      	add	sp, #116	; 0x74
 80067f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f6:	4b7b      	ldr	r3, [pc, #492]	; (80069e4 <_vfiprintf_r+0x244>)
 80067f8:	429d      	cmp	r5, r3
 80067fa:	d101      	bne.n	8006800 <_vfiprintf_r+0x60>
 80067fc:	68b5      	ldr	r5, [r6, #8]
 80067fe:	e7df      	b.n	80067c0 <_vfiprintf_r+0x20>
 8006800:	4b79      	ldr	r3, [pc, #484]	; (80069e8 <_vfiprintf_r+0x248>)
 8006802:	429d      	cmp	r5, r3
 8006804:	bf08      	it	eq
 8006806:	68f5      	ldreq	r5, [r6, #12]
 8006808:	e7da      	b.n	80067c0 <_vfiprintf_r+0x20>
 800680a:	89ab      	ldrh	r3, [r5, #12]
 800680c:	0598      	lsls	r0, r3, #22
 800680e:	d4ed      	bmi.n	80067ec <_vfiprintf_r+0x4c>
 8006810:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006812:	f000 fb76 	bl	8006f02 <__retarget_lock_release_recursive>
 8006816:	e7e9      	b.n	80067ec <_vfiprintf_r+0x4c>
 8006818:	2300      	movs	r3, #0
 800681a:	9309      	str	r3, [sp, #36]	; 0x24
 800681c:	2320      	movs	r3, #32
 800681e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006822:	f8cd 800c 	str.w	r8, [sp, #12]
 8006826:	2330      	movs	r3, #48	; 0x30
 8006828:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80069ec <_vfiprintf_r+0x24c>
 800682c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006830:	f04f 0901 	mov.w	r9, #1
 8006834:	4623      	mov	r3, r4
 8006836:	469a      	mov	sl, r3
 8006838:	f813 2b01 	ldrb.w	r2, [r3], #1
 800683c:	b10a      	cbz	r2, 8006842 <_vfiprintf_r+0xa2>
 800683e:	2a25      	cmp	r2, #37	; 0x25
 8006840:	d1f9      	bne.n	8006836 <_vfiprintf_r+0x96>
 8006842:	ebba 0b04 	subs.w	fp, sl, r4
 8006846:	d00b      	beq.n	8006860 <_vfiprintf_r+0xc0>
 8006848:	465b      	mov	r3, fp
 800684a:	4622      	mov	r2, r4
 800684c:	4629      	mov	r1, r5
 800684e:	4630      	mov	r0, r6
 8006850:	f7ff ff94 	bl	800677c <__sfputs_r>
 8006854:	3001      	adds	r0, #1
 8006856:	f000 80aa 	beq.w	80069ae <_vfiprintf_r+0x20e>
 800685a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800685c:	445a      	add	r2, fp
 800685e:	9209      	str	r2, [sp, #36]	; 0x24
 8006860:	f89a 3000 	ldrb.w	r3, [sl]
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 80a2 	beq.w	80069ae <_vfiprintf_r+0x20e>
 800686a:	2300      	movs	r3, #0
 800686c:	f04f 32ff 	mov.w	r2, #4294967295
 8006870:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006874:	f10a 0a01 	add.w	sl, sl, #1
 8006878:	9304      	str	r3, [sp, #16]
 800687a:	9307      	str	r3, [sp, #28]
 800687c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006880:	931a      	str	r3, [sp, #104]	; 0x68
 8006882:	4654      	mov	r4, sl
 8006884:	2205      	movs	r2, #5
 8006886:	f814 1b01 	ldrb.w	r1, [r4], #1
 800688a:	4858      	ldr	r0, [pc, #352]	; (80069ec <_vfiprintf_r+0x24c>)
 800688c:	f7f9 fc80 	bl	8000190 <memchr>
 8006890:	9a04      	ldr	r2, [sp, #16]
 8006892:	b9d8      	cbnz	r0, 80068cc <_vfiprintf_r+0x12c>
 8006894:	06d1      	lsls	r1, r2, #27
 8006896:	bf44      	itt	mi
 8006898:	2320      	movmi	r3, #32
 800689a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800689e:	0713      	lsls	r3, r2, #28
 80068a0:	bf44      	itt	mi
 80068a2:	232b      	movmi	r3, #43	; 0x2b
 80068a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068a8:	f89a 3000 	ldrb.w	r3, [sl]
 80068ac:	2b2a      	cmp	r3, #42	; 0x2a
 80068ae:	d015      	beq.n	80068dc <_vfiprintf_r+0x13c>
 80068b0:	9a07      	ldr	r2, [sp, #28]
 80068b2:	4654      	mov	r4, sl
 80068b4:	2000      	movs	r0, #0
 80068b6:	f04f 0c0a 	mov.w	ip, #10
 80068ba:	4621      	mov	r1, r4
 80068bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068c0:	3b30      	subs	r3, #48	; 0x30
 80068c2:	2b09      	cmp	r3, #9
 80068c4:	d94e      	bls.n	8006964 <_vfiprintf_r+0x1c4>
 80068c6:	b1b0      	cbz	r0, 80068f6 <_vfiprintf_r+0x156>
 80068c8:	9207      	str	r2, [sp, #28]
 80068ca:	e014      	b.n	80068f6 <_vfiprintf_r+0x156>
 80068cc:	eba0 0308 	sub.w	r3, r0, r8
 80068d0:	fa09 f303 	lsl.w	r3, r9, r3
 80068d4:	4313      	orrs	r3, r2
 80068d6:	9304      	str	r3, [sp, #16]
 80068d8:	46a2      	mov	sl, r4
 80068da:	e7d2      	b.n	8006882 <_vfiprintf_r+0xe2>
 80068dc:	9b03      	ldr	r3, [sp, #12]
 80068de:	1d19      	adds	r1, r3, #4
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	9103      	str	r1, [sp, #12]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	bfbb      	ittet	lt
 80068e8:	425b      	neglt	r3, r3
 80068ea:	f042 0202 	orrlt.w	r2, r2, #2
 80068ee:	9307      	strge	r3, [sp, #28]
 80068f0:	9307      	strlt	r3, [sp, #28]
 80068f2:	bfb8      	it	lt
 80068f4:	9204      	strlt	r2, [sp, #16]
 80068f6:	7823      	ldrb	r3, [r4, #0]
 80068f8:	2b2e      	cmp	r3, #46	; 0x2e
 80068fa:	d10c      	bne.n	8006916 <_vfiprintf_r+0x176>
 80068fc:	7863      	ldrb	r3, [r4, #1]
 80068fe:	2b2a      	cmp	r3, #42	; 0x2a
 8006900:	d135      	bne.n	800696e <_vfiprintf_r+0x1ce>
 8006902:	9b03      	ldr	r3, [sp, #12]
 8006904:	1d1a      	adds	r2, r3, #4
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	9203      	str	r2, [sp, #12]
 800690a:	2b00      	cmp	r3, #0
 800690c:	bfb8      	it	lt
 800690e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006912:	3402      	adds	r4, #2
 8006914:	9305      	str	r3, [sp, #20]
 8006916:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80069fc <_vfiprintf_r+0x25c>
 800691a:	7821      	ldrb	r1, [r4, #0]
 800691c:	2203      	movs	r2, #3
 800691e:	4650      	mov	r0, sl
 8006920:	f7f9 fc36 	bl	8000190 <memchr>
 8006924:	b140      	cbz	r0, 8006938 <_vfiprintf_r+0x198>
 8006926:	2340      	movs	r3, #64	; 0x40
 8006928:	eba0 000a 	sub.w	r0, r0, sl
 800692c:	fa03 f000 	lsl.w	r0, r3, r0
 8006930:	9b04      	ldr	r3, [sp, #16]
 8006932:	4303      	orrs	r3, r0
 8006934:	3401      	adds	r4, #1
 8006936:	9304      	str	r3, [sp, #16]
 8006938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800693c:	482c      	ldr	r0, [pc, #176]	; (80069f0 <_vfiprintf_r+0x250>)
 800693e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006942:	2206      	movs	r2, #6
 8006944:	f7f9 fc24 	bl	8000190 <memchr>
 8006948:	2800      	cmp	r0, #0
 800694a:	d03f      	beq.n	80069cc <_vfiprintf_r+0x22c>
 800694c:	4b29      	ldr	r3, [pc, #164]	; (80069f4 <_vfiprintf_r+0x254>)
 800694e:	bb1b      	cbnz	r3, 8006998 <_vfiprintf_r+0x1f8>
 8006950:	9b03      	ldr	r3, [sp, #12]
 8006952:	3307      	adds	r3, #7
 8006954:	f023 0307 	bic.w	r3, r3, #7
 8006958:	3308      	adds	r3, #8
 800695a:	9303      	str	r3, [sp, #12]
 800695c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800695e:	443b      	add	r3, r7
 8006960:	9309      	str	r3, [sp, #36]	; 0x24
 8006962:	e767      	b.n	8006834 <_vfiprintf_r+0x94>
 8006964:	fb0c 3202 	mla	r2, ip, r2, r3
 8006968:	460c      	mov	r4, r1
 800696a:	2001      	movs	r0, #1
 800696c:	e7a5      	b.n	80068ba <_vfiprintf_r+0x11a>
 800696e:	2300      	movs	r3, #0
 8006970:	3401      	adds	r4, #1
 8006972:	9305      	str	r3, [sp, #20]
 8006974:	4619      	mov	r1, r3
 8006976:	f04f 0c0a 	mov.w	ip, #10
 800697a:	4620      	mov	r0, r4
 800697c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006980:	3a30      	subs	r2, #48	; 0x30
 8006982:	2a09      	cmp	r2, #9
 8006984:	d903      	bls.n	800698e <_vfiprintf_r+0x1ee>
 8006986:	2b00      	cmp	r3, #0
 8006988:	d0c5      	beq.n	8006916 <_vfiprintf_r+0x176>
 800698a:	9105      	str	r1, [sp, #20]
 800698c:	e7c3      	b.n	8006916 <_vfiprintf_r+0x176>
 800698e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006992:	4604      	mov	r4, r0
 8006994:	2301      	movs	r3, #1
 8006996:	e7f0      	b.n	800697a <_vfiprintf_r+0x1da>
 8006998:	ab03      	add	r3, sp, #12
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	462a      	mov	r2, r5
 800699e:	4b16      	ldr	r3, [pc, #88]	; (80069f8 <_vfiprintf_r+0x258>)
 80069a0:	a904      	add	r1, sp, #16
 80069a2:	4630      	mov	r0, r6
 80069a4:	f7fc f84c 	bl	8002a40 <_printf_float>
 80069a8:	4607      	mov	r7, r0
 80069aa:	1c78      	adds	r0, r7, #1
 80069ac:	d1d6      	bne.n	800695c <_vfiprintf_r+0x1bc>
 80069ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069b0:	07d9      	lsls	r1, r3, #31
 80069b2:	d405      	bmi.n	80069c0 <_vfiprintf_r+0x220>
 80069b4:	89ab      	ldrh	r3, [r5, #12]
 80069b6:	059a      	lsls	r2, r3, #22
 80069b8:	d402      	bmi.n	80069c0 <_vfiprintf_r+0x220>
 80069ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069bc:	f000 faa1 	bl	8006f02 <__retarget_lock_release_recursive>
 80069c0:	89ab      	ldrh	r3, [r5, #12]
 80069c2:	065b      	lsls	r3, r3, #25
 80069c4:	f53f af12 	bmi.w	80067ec <_vfiprintf_r+0x4c>
 80069c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069ca:	e711      	b.n	80067f0 <_vfiprintf_r+0x50>
 80069cc:	ab03      	add	r3, sp, #12
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	462a      	mov	r2, r5
 80069d2:	4b09      	ldr	r3, [pc, #36]	; (80069f8 <_vfiprintf_r+0x258>)
 80069d4:	a904      	add	r1, sp, #16
 80069d6:	4630      	mov	r0, r6
 80069d8:	f7fc fad6 	bl	8002f88 <_printf_i>
 80069dc:	e7e4      	b.n	80069a8 <_vfiprintf_r+0x208>
 80069de:	bf00      	nop
 80069e0:	08008fe4 	.word	0x08008fe4
 80069e4:	08009004 	.word	0x08009004
 80069e8:	08008fc4 	.word	0x08008fc4
 80069ec:	08008f74 	.word	0x08008f74
 80069f0:	08008f7e 	.word	0x08008f7e
 80069f4:	08002a41 	.word	0x08002a41
 80069f8:	0800677d 	.word	0x0800677d
 80069fc:	08008f7a 	.word	0x08008f7a

08006a00 <__swbuf_r>:
 8006a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a02:	460e      	mov	r6, r1
 8006a04:	4614      	mov	r4, r2
 8006a06:	4605      	mov	r5, r0
 8006a08:	b118      	cbz	r0, 8006a12 <__swbuf_r+0x12>
 8006a0a:	6983      	ldr	r3, [r0, #24]
 8006a0c:	b90b      	cbnz	r3, 8006a12 <__swbuf_r+0x12>
 8006a0e:	f000 f9d9 	bl	8006dc4 <__sinit>
 8006a12:	4b21      	ldr	r3, [pc, #132]	; (8006a98 <__swbuf_r+0x98>)
 8006a14:	429c      	cmp	r4, r3
 8006a16:	d12b      	bne.n	8006a70 <__swbuf_r+0x70>
 8006a18:	686c      	ldr	r4, [r5, #4]
 8006a1a:	69a3      	ldr	r3, [r4, #24]
 8006a1c:	60a3      	str	r3, [r4, #8]
 8006a1e:	89a3      	ldrh	r3, [r4, #12]
 8006a20:	071a      	lsls	r2, r3, #28
 8006a22:	d52f      	bpl.n	8006a84 <__swbuf_r+0x84>
 8006a24:	6923      	ldr	r3, [r4, #16]
 8006a26:	b36b      	cbz	r3, 8006a84 <__swbuf_r+0x84>
 8006a28:	6923      	ldr	r3, [r4, #16]
 8006a2a:	6820      	ldr	r0, [r4, #0]
 8006a2c:	1ac0      	subs	r0, r0, r3
 8006a2e:	6963      	ldr	r3, [r4, #20]
 8006a30:	b2f6      	uxtb	r6, r6
 8006a32:	4283      	cmp	r3, r0
 8006a34:	4637      	mov	r7, r6
 8006a36:	dc04      	bgt.n	8006a42 <__swbuf_r+0x42>
 8006a38:	4621      	mov	r1, r4
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	f000 f92e 	bl	8006c9c <_fflush_r>
 8006a40:	bb30      	cbnz	r0, 8006a90 <__swbuf_r+0x90>
 8006a42:	68a3      	ldr	r3, [r4, #8]
 8006a44:	3b01      	subs	r3, #1
 8006a46:	60a3      	str	r3, [r4, #8]
 8006a48:	6823      	ldr	r3, [r4, #0]
 8006a4a:	1c5a      	adds	r2, r3, #1
 8006a4c:	6022      	str	r2, [r4, #0]
 8006a4e:	701e      	strb	r6, [r3, #0]
 8006a50:	6963      	ldr	r3, [r4, #20]
 8006a52:	3001      	adds	r0, #1
 8006a54:	4283      	cmp	r3, r0
 8006a56:	d004      	beq.n	8006a62 <__swbuf_r+0x62>
 8006a58:	89a3      	ldrh	r3, [r4, #12]
 8006a5a:	07db      	lsls	r3, r3, #31
 8006a5c:	d506      	bpl.n	8006a6c <__swbuf_r+0x6c>
 8006a5e:	2e0a      	cmp	r6, #10
 8006a60:	d104      	bne.n	8006a6c <__swbuf_r+0x6c>
 8006a62:	4621      	mov	r1, r4
 8006a64:	4628      	mov	r0, r5
 8006a66:	f000 f919 	bl	8006c9c <_fflush_r>
 8006a6a:	b988      	cbnz	r0, 8006a90 <__swbuf_r+0x90>
 8006a6c:	4638      	mov	r0, r7
 8006a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a70:	4b0a      	ldr	r3, [pc, #40]	; (8006a9c <__swbuf_r+0x9c>)
 8006a72:	429c      	cmp	r4, r3
 8006a74:	d101      	bne.n	8006a7a <__swbuf_r+0x7a>
 8006a76:	68ac      	ldr	r4, [r5, #8]
 8006a78:	e7cf      	b.n	8006a1a <__swbuf_r+0x1a>
 8006a7a:	4b09      	ldr	r3, [pc, #36]	; (8006aa0 <__swbuf_r+0xa0>)
 8006a7c:	429c      	cmp	r4, r3
 8006a7e:	bf08      	it	eq
 8006a80:	68ec      	ldreq	r4, [r5, #12]
 8006a82:	e7ca      	b.n	8006a1a <__swbuf_r+0x1a>
 8006a84:	4621      	mov	r1, r4
 8006a86:	4628      	mov	r0, r5
 8006a88:	f000 f80c 	bl	8006aa4 <__swsetup_r>
 8006a8c:	2800      	cmp	r0, #0
 8006a8e:	d0cb      	beq.n	8006a28 <__swbuf_r+0x28>
 8006a90:	f04f 37ff 	mov.w	r7, #4294967295
 8006a94:	e7ea      	b.n	8006a6c <__swbuf_r+0x6c>
 8006a96:	bf00      	nop
 8006a98:	08008fe4 	.word	0x08008fe4
 8006a9c:	08009004 	.word	0x08009004
 8006aa0:	08008fc4 	.word	0x08008fc4

08006aa4 <__swsetup_r>:
 8006aa4:	4b32      	ldr	r3, [pc, #200]	; (8006b70 <__swsetup_r+0xcc>)
 8006aa6:	b570      	push	{r4, r5, r6, lr}
 8006aa8:	681d      	ldr	r5, [r3, #0]
 8006aaa:	4606      	mov	r6, r0
 8006aac:	460c      	mov	r4, r1
 8006aae:	b125      	cbz	r5, 8006aba <__swsetup_r+0x16>
 8006ab0:	69ab      	ldr	r3, [r5, #24]
 8006ab2:	b913      	cbnz	r3, 8006aba <__swsetup_r+0x16>
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	f000 f985 	bl	8006dc4 <__sinit>
 8006aba:	4b2e      	ldr	r3, [pc, #184]	; (8006b74 <__swsetup_r+0xd0>)
 8006abc:	429c      	cmp	r4, r3
 8006abe:	d10f      	bne.n	8006ae0 <__swsetup_r+0x3c>
 8006ac0:	686c      	ldr	r4, [r5, #4]
 8006ac2:	89a3      	ldrh	r3, [r4, #12]
 8006ac4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ac8:	0719      	lsls	r1, r3, #28
 8006aca:	d42c      	bmi.n	8006b26 <__swsetup_r+0x82>
 8006acc:	06dd      	lsls	r5, r3, #27
 8006ace:	d411      	bmi.n	8006af4 <__swsetup_r+0x50>
 8006ad0:	2309      	movs	r3, #9
 8006ad2:	6033      	str	r3, [r6, #0]
 8006ad4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ad8:	81a3      	strh	r3, [r4, #12]
 8006ada:	f04f 30ff 	mov.w	r0, #4294967295
 8006ade:	e03e      	b.n	8006b5e <__swsetup_r+0xba>
 8006ae0:	4b25      	ldr	r3, [pc, #148]	; (8006b78 <__swsetup_r+0xd4>)
 8006ae2:	429c      	cmp	r4, r3
 8006ae4:	d101      	bne.n	8006aea <__swsetup_r+0x46>
 8006ae6:	68ac      	ldr	r4, [r5, #8]
 8006ae8:	e7eb      	b.n	8006ac2 <__swsetup_r+0x1e>
 8006aea:	4b24      	ldr	r3, [pc, #144]	; (8006b7c <__swsetup_r+0xd8>)
 8006aec:	429c      	cmp	r4, r3
 8006aee:	bf08      	it	eq
 8006af0:	68ec      	ldreq	r4, [r5, #12]
 8006af2:	e7e6      	b.n	8006ac2 <__swsetup_r+0x1e>
 8006af4:	0758      	lsls	r0, r3, #29
 8006af6:	d512      	bpl.n	8006b1e <__swsetup_r+0x7a>
 8006af8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006afa:	b141      	cbz	r1, 8006b0e <__swsetup_r+0x6a>
 8006afc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b00:	4299      	cmp	r1, r3
 8006b02:	d002      	beq.n	8006b0a <__swsetup_r+0x66>
 8006b04:	4630      	mov	r0, r6
 8006b06:	f7ff fb27 	bl	8006158 <_free_r>
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	6363      	str	r3, [r4, #52]	; 0x34
 8006b0e:	89a3      	ldrh	r3, [r4, #12]
 8006b10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b14:	81a3      	strh	r3, [r4, #12]
 8006b16:	2300      	movs	r3, #0
 8006b18:	6063      	str	r3, [r4, #4]
 8006b1a:	6923      	ldr	r3, [r4, #16]
 8006b1c:	6023      	str	r3, [r4, #0]
 8006b1e:	89a3      	ldrh	r3, [r4, #12]
 8006b20:	f043 0308 	orr.w	r3, r3, #8
 8006b24:	81a3      	strh	r3, [r4, #12]
 8006b26:	6923      	ldr	r3, [r4, #16]
 8006b28:	b94b      	cbnz	r3, 8006b3e <__swsetup_r+0x9a>
 8006b2a:	89a3      	ldrh	r3, [r4, #12]
 8006b2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b34:	d003      	beq.n	8006b3e <__swsetup_r+0x9a>
 8006b36:	4621      	mov	r1, r4
 8006b38:	4630      	mov	r0, r6
 8006b3a:	f000 fa09 	bl	8006f50 <__smakebuf_r>
 8006b3e:	89a0      	ldrh	r0, [r4, #12]
 8006b40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b44:	f010 0301 	ands.w	r3, r0, #1
 8006b48:	d00a      	beq.n	8006b60 <__swsetup_r+0xbc>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	60a3      	str	r3, [r4, #8]
 8006b4e:	6963      	ldr	r3, [r4, #20]
 8006b50:	425b      	negs	r3, r3
 8006b52:	61a3      	str	r3, [r4, #24]
 8006b54:	6923      	ldr	r3, [r4, #16]
 8006b56:	b943      	cbnz	r3, 8006b6a <__swsetup_r+0xc6>
 8006b58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b5c:	d1ba      	bne.n	8006ad4 <__swsetup_r+0x30>
 8006b5e:	bd70      	pop	{r4, r5, r6, pc}
 8006b60:	0781      	lsls	r1, r0, #30
 8006b62:	bf58      	it	pl
 8006b64:	6963      	ldrpl	r3, [r4, #20]
 8006b66:	60a3      	str	r3, [r4, #8]
 8006b68:	e7f4      	b.n	8006b54 <__swsetup_r+0xb0>
 8006b6a:	2000      	movs	r0, #0
 8006b6c:	e7f7      	b.n	8006b5e <__swsetup_r+0xba>
 8006b6e:	bf00      	nop
 8006b70:	20000010 	.word	0x20000010
 8006b74:	08008fe4 	.word	0x08008fe4
 8006b78:	08009004 	.word	0x08009004
 8006b7c:	08008fc4 	.word	0x08008fc4

08006b80 <abort>:
 8006b80:	b508      	push	{r3, lr}
 8006b82:	2006      	movs	r0, #6
 8006b84:	f000 fa54 	bl	8007030 <raise>
 8006b88:	2001      	movs	r0, #1
 8006b8a:	f7fa fc77 	bl	800147c <_exit>
	...

08006b90 <__sflush_r>:
 8006b90:	898a      	ldrh	r2, [r1, #12]
 8006b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b96:	4605      	mov	r5, r0
 8006b98:	0710      	lsls	r0, r2, #28
 8006b9a:	460c      	mov	r4, r1
 8006b9c:	d458      	bmi.n	8006c50 <__sflush_r+0xc0>
 8006b9e:	684b      	ldr	r3, [r1, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	dc05      	bgt.n	8006bb0 <__sflush_r+0x20>
 8006ba4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	dc02      	bgt.n	8006bb0 <__sflush_r+0x20>
 8006baa:	2000      	movs	r0, #0
 8006bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bb2:	2e00      	cmp	r6, #0
 8006bb4:	d0f9      	beq.n	8006baa <__sflush_r+0x1a>
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006bbc:	682f      	ldr	r7, [r5, #0]
 8006bbe:	602b      	str	r3, [r5, #0]
 8006bc0:	d032      	beq.n	8006c28 <__sflush_r+0x98>
 8006bc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006bc4:	89a3      	ldrh	r3, [r4, #12]
 8006bc6:	075a      	lsls	r2, r3, #29
 8006bc8:	d505      	bpl.n	8006bd6 <__sflush_r+0x46>
 8006bca:	6863      	ldr	r3, [r4, #4]
 8006bcc:	1ac0      	subs	r0, r0, r3
 8006bce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006bd0:	b10b      	cbz	r3, 8006bd6 <__sflush_r+0x46>
 8006bd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006bd4:	1ac0      	subs	r0, r0, r3
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	4602      	mov	r2, r0
 8006bda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bdc:	6a21      	ldr	r1, [r4, #32]
 8006bde:	4628      	mov	r0, r5
 8006be0:	47b0      	blx	r6
 8006be2:	1c43      	adds	r3, r0, #1
 8006be4:	89a3      	ldrh	r3, [r4, #12]
 8006be6:	d106      	bne.n	8006bf6 <__sflush_r+0x66>
 8006be8:	6829      	ldr	r1, [r5, #0]
 8006bea:	291d      	cmp	r1, #29
 8006bec:	d82c      	bhi.n	8006c48 <__sflush_r+0xb8>
 8006bee:	4a2a      	ldr	r2, [pc, #168]	; (8006c98 <__sflush_r+0x108>)
 8006bf0:	40ca      	lsrs	r2, r1
 8006bf2:	07d6      	lsls	r6, r2, #31
 8006bf4:	d528      	bpl.n	8006c48 <__sflush_r+0xb8>
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	6062      	str	r2, [r4, #4]
 8006bfa:	04d9      	lsls	r1, r3, #19
 8006bfc:	6922      	ldr	r2, [r4, #16]
 8006bfe:	6022      	str	r2, [r4, #0]
 8006c00:	d504      	bpl.n	8006c0c <__sflush_r+0x7c>
 8006c02:	1c42      	adds	r2, r0, #1
 8006c04:	d101      	bne.n	8006c0a <__sflush_r+0x7a>
 8006c06:	682b      	ldr	r3, [r5, #0]
 8006c08:	b903      	cbnz	r3, 8006c0c <__sflush_r+0x7c>
 8006c0a:	6560      	str	r0, [r4, #84]	; 0x54
 8006c0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c0e:	602f      	str	r7, [r5, #0]
 8006c10:	2900      	cmp	r1, #0
 8006c12:	d0ca      	beq.n	8006baa <__sflush_r+0x1a>
 8006c14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c18:	4299      	cmp	r1, r3
 8006c1a:	d002      	beq.n	8006c22 <__sflush_r+0x92>
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	f7ff fa9b 	bl	8006158 <_free_r>
 8006c22:	2000      	movs	r0, #0
 8006c24:	6360      	str	r0, [r4, #52]	; 0x34
 8006c26:	e7c1      	b.n	8006bac <__sflush_r+0x1c>
 8006c28:	6a21      	ldr	r1, [r4, #32]
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	4628      	mov	r0, r5
 8006c2e:	47b0      	blx	r6
 8006c30:	1c41      	adds	r1, r0, #1
 8006c32:	d1c7      	bne.n	8006bc4 <__sflush_r+0x34>
 8006c34:	682b      	ldr	r3, [r5, #0]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d0c4      	beq.n	8006bc4 <__sflush_r+0x34>
 8006c3a:	2b1d      	cmp	r3, #29
 8006c3c:	d001      	beq.n	8006c42 <__sflush_r+0xb2>
 8006c3e:	2b16      	cmp	r3, #22
 8006c40:	d101      	bne.n	8006c46 <__sflush_r+0xb6>
 8006c42:	602f      	str	r7, [r5, #0]
 8006c44:	e7b1      	b.n	8006baa <__sflush_r+0x1a>
 8006c46:	89a3      	ldrh	r3, [r4, #12]
 8006c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c4c:	81a3      	strh	r3, [r4, #12]
 8006c4e:	e7ad      	b.n	8006bac <__sflush_r+0x1c>
 8006c50:	690f      	ldr	r7, [r1, #16]
 8006c52:	2f00      	cmp	r7, #0
 8006c54:	d0a9      	beq.n	8006baa <__sflush_r+0x1a>
 8006c56:	0793      	lsls	r3, r2, #30
 8006c58:	680e      	ldr	r6, [r1, #0]
 8006c5a:	bf08      	it	eq
 8006c5c:	694b      	ldreq	r3, [r1, #20]
 8006c5e:	600f      	str	r7, [r1, #0]
 8006c60:	bf18      	it	ne
 8006c62:	2300      	movne	r3, #0
 8006c64:	eba6 0807 	sub.w	r8, r6, r7
 8006c68:	608b      	str	r3, [r1, #8]
 8006c6a:	f1b8 0f00 	cmp.w	r8, #0
 8006c6e:	dd9c      	ble.n	8006baa <__sflush_r+0x1a>
 8006c70:	6a21      	ldr	r1, [r4, #32]
 8006c72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c74:	4643      	mov	r3, r8
 8006c76:	463a      	mov	r2, r7
 8006c78:	4628      	mov	r0, r5
 8006c7a:	47b0      	blx	r6
 8006c7c:	2800      	cmp	r0, #0
 8006c7e:	dc06      	bgt.n	8006c8e <__sflush_r+0xfe>
 8006c80:	89a3      	ldrh	r3, [r4, #12]
 8006c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c86:	81a3      	strh	r3, [r4, #12]
 8006c88:	f04f 30ff 	mov.w	r0, #4294967295
 8006c8c:	e78e      	b.n	8006bac <__sflush_r+0x1c>
 8006c8e:	4407      	add	r7, r0
 8006c90:	eba8 0800 	sub.w	r8, r8, r0
 8006c94:	e7e9      	b.n	8006c6a <__sflush_r+0xda>
 8006c96:	bf00      	nop
 8006c98:	20400001 	.word	0x20400001

08006c9c <_fflush_r>:
 8006c9c:	b538      	push	{r3, r4, r5, lr}
 8006c9e:	690b      	ldr	r3, [r1, #16]
 8006ca0:	4605      	mov	r5, r0
 8006ca2:	460c      	mov	r4, r1
 8006ca4:	b913      	cbnz	r3, 8006cac <_fflush_r+0x10>
 8006ca6:	2500      	movs	r5, #0
 8006ca8:	4628      	mov	r0, r5
 8006caa:	bd38      	pop	{r3, r4, r5, pc}
 8006cac:	b118      	cbz	r0, 8006cb6 <_fflush_r+0x1a>
 8006cae:	6983      	ldr	r3, [r0, #24]
 8006cb0:	b90b      	cbnz	r3, 8006cb6 <_fflush_r+0x1a>
 8006cb2:	f000 f887 	bl	8006dc4 <__sinit>
 8006cb6:	4b14      	ldr	r3, [pc, #80]	; (8006d08 <_fflush_r+0x6c>)
 8006cb8:	429c      	cmp	r4, r3
 8006cba:	d11b      	bne.n	8006cf4 <_fflush_r+0x58>
 8006cbc:	686c      	ldr	r4, [r5, #4]
 8006cbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d0ef      	beq.n	8006ca6 <_fflush_r+0xa>
 8006cc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006cc8:	07d0      	lsls	r0, r2, #31
 8006cca:	d404      	bmi.n	8006cd6 <_fflush_r+0x3a>
 8006ccc:	0599      	lsls	r1, r3, #22
 8006cce:	d402      	bmi.n	8006cd6 <_fflush_r+0x3a>
 8006cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cd2:	f000 f915 	bl	8006f00 <__retarget_lock_acquire_recursive>
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	4621      	mov	r1, r4
 8006cda:	f7ff ff59 	bl	8006b90 <__sflush_r>
 8006cde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ce0:	07da      	lsls	r2, r3, #31
 8006ce2:	4605      	mov	r5, r0
 8006ce4:	d4e0      	bmi.n	8006ca8 <_fflush_r+0xc>
 8006ce6:	89a3      	ldrh	r3, [r4, #12]
 8006ce8:	059b      	lsls	r3, r3, #22
 8006cea:	d4dd      	bmi.n	8006ca8 <_fflush_r+0xc>
 8006cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cee:	f000 f908 	bl	8006f02 <__retarget_lock_release_recursive>
 8006cf2:	e7d9      	b.n	8006ca8 <_fflush_r+0xc>
 8006cf4:	4b05      	ldr	r3, [pc, #20]	; (8006d0c <_fflush_r+0x70>)
 8006cf6:	429c      	cmp	r4, r3
 8006cf8:	d101      	bne.n	8006cfe <_fflush_r+0x62>
 8006cfa:	68ac      	ldr	r4, [r5, #8]
 8006cfc:	e7df      	b.n	8006cbe <_fflush_r+0x22>
 8006cfe:	4b04      	ldr	r3, [pc, #16]	; (8006d10 <_fflush_r+0x74>)
 8006d00:	429c      	cmp	r4, r3
 8006d02:	bf08      	it	eq
 8006d04:	68ec      	ldreq	r4, [r5, #12]
 8006d06:	e7da      	b.n	8006cbe <_fflush_r+0x22>
 8006d08:	08008fe4 	.word	0x08008fe4
 8006d0c:	08009004 	.word	0x08009004
 8006d10:	08008fc4 	.word	0x08008fc4

08006d14 <std>:
 8006d14:	2300      	movs	r3, #0
 8006d16:	b510      	push	{r4, lr}
 8006d18:	4604      	mov	r4, r0
 8006d1a:	e9c0 3300 	strd	r3, r3, [r0]
 8006d1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d22:	6083      	str	r3, [r0, #8]
 8006d24:	8181      	strh	r1, [r0, #12]
 8006d26:	6643      	str	r3, [r0, #100]	; 0x64
 8006d28:	81c2      	strh	r2, [r0, #14]
 8006d2a:	6183      	str	r3, [r0, #24]
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	2208      	movs	r2, #8
 8006d30:	305c      	adds	r0, #92	; 0x5c
 8006d32:	f7fb fddd 	bl	80028f0 <memset>
 8006d36:	4b05      	ldr	r3, [pc, #20]	; (8006d4c <std+0x38>)
 8006d38:	6263      	str	r3, [r4, #36]	; 0x24
 8006d3a:	4b05      	ldr	r3, [pc, #20]	; (8006d50 <std+0x3c>)
 8006d3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d3e:	4b05      	ldr	r3, [pc, #20]	; (8006d54 <std+0x40>)
 8006d40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d42:	4b05      	ldr	r3, [pc, #20]	; (8006d58 <std+0x44>)
 8006d44:	6224      	str	r4, [r4, #32]
 8006d46:	6323      	str	r3, [r4, #48]	; 0x30
 8006d48:	bd10      	pop	{r4, pc}
 8006d4a:	bf00      	nop
 8006d4c:	08007069 	.word	0x08007069
 8006d50:	0800708b 	.word	0x0800708b
 8006d54:	080070c3 	.word	0x080070c3
 8006d58:	080070e7 	.word	0x080070e7

08006d5c <_cleanup_r>:
 8006d5c:	4901      	ldr	r1, [pc, #4]	; (8006d64 <_cleanup_r+0x8>)
 8006d5e:	f000 b8af 	b.w	8006ec0 <_fwalk_reent>
 8006d62:	bf00      	nop
 8006d64:	08006c9d 	.word	0x08006c9d

08006d68 <__sfmoreglue>:
 8006d68:	b570      	push	{r4, r5, r6, lr}
 8006d6a:	2268      	movs	r2, #104	; 0x68
 8006d6c:	1e4d      	subs	r5, r1, #1
 8006d6e:	4355      	muls	r5, r2
 8006d70:	460e      	mov	r6, r1
 8006d72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d76:	f7ff fa5b 	bl	8006230 <_malloc_r>
 8006d7a:	4604      	mov	r4, r0
 8006d7c:	b140      	cbz	r0, 8006d90 <__sfmoreglue+0x28>
 8006d7e:	2100      	movs	r1, #0
 8006d80:	e9c0 1600 	strd	r1, r6, [r0]
 8006d84:	300c      	adds	r0, #12
 8006d86:	60a0      	str	r0, [r4, #8]
 8006d88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d8c:	f7fb fdb0 	bl	80028f0 <memset>
 8006d90:	4620      	mov	r0, r4
 8006d92:	bd70      	pop	{r4, r5, r6, pc}

08006d94 <__sfp_lock_acquire>:
 8006d94:	4801      	ldr	r0, [pc, #4]	; (8006d9c <__sfp_lock_acquire+0x8>)
 8006d96:	f000 b8b3 	b.w	8006f00 <__retarget_lock_acquire_recursive>
 8006d9a:	bf00      	nop
 8006d9c:	200003a1 	.word	0x200003a1

08006da0 <__sfp_lock_release>:
 8006da0:	4801      	ldr	r0, [pc, #4]	; (8006da8 <__sfp_lock_release+0x8>)
 8006da2:	f000 b8ae 	b.w	8006f02 <__retarget_lock_release_recursive>
 8006da6:	bf00      	nop
 8006da8:	200003a1 	.word	0x200003a1

08006dac <__sinit_lock_acquire>:
 8006dac:	4801      	ldr	r0, [pc, #4]	; (8006db4 <__sinit_lock_acquire+0x8>)
 8006dae:	f000 b8a7 	b.w	8006f00 <__retarget_lock_acquire_recursive>
 8006db2:	bf00      	nop
 8006db4:	200003a2 	.word	0x200003a2

08006db8 <__sinit_lock_release>:
 8006db8:	4801      	ldr	r0, [pc, #4]	; (8006dc0 <__sinit_lock_release+0x8>)
 8006dba:	f000 b8a2 	b.w	8006f02 <__retarget_lock_release_recursive>
 8006dbe:	bf00      	nop
 8006dc0:	200003a2 	.word	0x200003a2

08006dc4 <__sinit>:
 8006dc4:	b510      	push	{r4, lr}
 8006dc6:	4604      	mov	r4, r0
 8006dc8:	f7ff fff0 	bl	8006dac <__sinit_lock_acquire>
 8006dcc:	69a3      	ldr	r3, [r4, #24]
 8006dce:	b11b      	cbz	r3, 8006dd8 <__sinit+0x14>
 8006dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dd4:	f7ff bff0 	b.w	8006db8 <__sinit_lock_release>
 8006dd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ddc:	6523      	str	r3, [r4, #80]	; 0x50
 8006dde:	4b13      	ldr	r3, [pc, #76]	; (8006e2c <__sinit+0x68>)
 8006de0:	4a13      	ldr	r2, [pc, #76]	; (8006e30 <__sinit+0x6c>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006de6:	42a3      	cmp	r3, r4
 8006de8:	bf04      	itt	eq
 8006dea:	2301      	moveq	r3, #1
 8006dec:	61a3      	streq	r3, [r4, #24]
 8006dee:	4620      	mov	r0, r4
 8006df0:	f000 f820 	bl	8006e34 <__sfp>
 8006df4:	6060      	str	r0, [r4, #4]
 8006df6:	4620      	mov	r0, r4
 8006df8:	f000 f81c 	bl	8006e34 <__sfp>
 8006dfc:	60a0      	str	r0, [r4, #8]
 8006dfe:	4620      	mov	r0, r4
 8006e00:	f000 f818 	bl	8006e34 <__sfp>
 8006e04:	2200      	movs	r2, #0
 8006e06:	60e0      	str	r0, [r4, #12]
 8006e08:	2104      	movs	r1, #4
 8006e0a:	6860      	ldr	r0, [r4, #4]
 8006e0c:	f7ff ff82 	bl	8006d14 <std>
 8006e10:	68a0      	ldr	r0, [r4, #8]
 8006e12:	2201      	movs	r2, #1
 8006e14:	2109      	movs	r1, #9
 8006e16:	f7ff ff7d 	bl	8006d14 <std>
 8006e1a:	68e0      	ldr	r0, [r4, #12]
 8006e1c:	2202      	movs	r2, #2
 8006e1e:	2112      	movs	r1, #18
 8006e20:	f7ff ff78 	bl	8006d14 <std>
 8006e24:	2301      	movs	r3, #1
 8006e26:	61a3      	str	r3, [r4, #24]
 8006e28:	e7d2      	b.n	8006dd0 <__sinit+0xc>
 8006e2a:	bf00      	nop
 8006e2c:	08008b7c 	.word	0x08008b7c
 8006e30:	08006d5d 	.word	0x08006d5d

08006e34 <__sfp>:
 8006e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e36:	4607      	mov	r7, r0
 8006e38:	f7ff ffac 	bl	8006d94 <__sfp_lock_acquire>
 8006e3c:	4b1e      	ldr	r3, [pc, #120]	; (8006eb8 <__sfp+0x84>)
 8006e3e:	681e      	ldr	r6, [r3, #0]
 8006e40:	69b3      	ldr	r3, [r6, #24]
 8006e42:	b913      	cbnz	r3, 8006e4a <__sfp+0x16>
 8006e44:	4630      	mov	r0, r6
 8006e46:	f7ff ffbd 	bl	8006dc4 <__sinit>
 8006e4a:	3648      	adds	r6, #72	; 0x48
 8006e4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e50:	3b01      	subs	r3, #1
 8006e52:	d503      	bpl.n	8006e5c <__sfp+0x28>
 8006e54:	6833      	ldr	r3, [r6, #0]
 8006e56:	b30b      	cbz	r3, 8006e9c <__sfp+0x68>
 8006e58:	6836      	ldr	r6, [r6, #0]
 8006e5a:	e7f7      	b.n	8006e4c <__sfp+0x18>
 8006e5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e60:	b9d5      	cbnz	r5, 8006e98 <__sfp+0x64>
 8006e62:	4b16      	ldr	r3, [pc, #88]	; (8006ebc <__sfp+0x88>)
 8006e64:	60e3      	str	r3, [r4, #12]
 8006e66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e6a:	6665      	str	r5, [r4, #100]	; 0x64
 8006e6c:	f000 f847 	bl	8006efe <__retarget_lock_init_recursive>
 8006e70:	f7ff ff96 	bl	8006da0 <__sfp_lock_release>
 8006e74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e7c:	6025      	str	r5, [r4, #0]
 8006e7e:	61a5      	str	r5, [r4, #24]
 8006e80:	2208      	movs	r2, #8
 8006e82:	4629      	mov	r1, r5
 8006e84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e88:	f7fb fd32 	bl	80028f0 <memset>
 8006e8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e94:	4620      	mov	r0, r4
 8006e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e98:	3468      	adds	r4, #104	; 0x68
 8006e9a:	e7d9      	b.n	8006e50 <__sfp+0x1c>
 8006e9c:	2104      	movs	r1, #4
 8006e9e:	4638      	mov	r0, r7
 8006ea0:	f7ff ff62 	bl	8006d68 <__sfmoreglue>
 8006ea4:	4604      	mov	r4, r0
 8006ea6:	6030      	str	r0, [r6, #0]
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	d1d5      	bne.n	8006e58 <__sfp+0x24>
 8006eac:	f7ff ff78 	bl	8006da0 <__sfp_lock_release>
 8006eb0:	230c      	movs	r3, #12
 8006eb2:	603b      	str	r3, [r7, #0]
 8006eb4:	e7ee      	b.n	8006e94 <__sfp+0x60>
 8006eb6:	bf00      	nop
 8006eb8:	08008b7c 	.word	0x08008b7c
 8006ebc:	ffff0001 	.word	0xffff0001

08006ec0 <_fwalk_reent>:
 8006ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ec4:	4606      	mov	r6, r0
 8006ec6:	4688      	mov	r8, r1
 8006ec8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ecc:	2700      	movs	r7, #0
 8006ece:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ed2:	f1b9 0901 	subs.w	r9, r9, #1
 8006ed6:	d505      	bpl.n	8006ee4 <_fwalk_reent+0x24>
 8006ed8:	6824      	ldr	r4, [r4, #0]
 8006eda:	2c00      	cmp	r4, #0
 8006edc:	d1f7      	bne.n	8006ece <_fwalk_reent+0xe>
 8006ede:	4638      	mov	r0, r7
 8006ee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ee4:	89ab      	ldrh	r3, [r5, #12]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d907      	bls.n	8006efa <_fwalk_reent+0x3a>
 8006eea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	d003      	beq.n	8006efa <_fwalk_reent+0x3a>
 8006ef2:	4629      	mov	r1, r5
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	47c0      	blx	r8
 8006ef8:	4307      	orrs	r7, r0
 8006efa:	3568      	adds	r5, #104	; 0x68
 8006efc:	e7e9      	b.n	8006ed2 <_fwalk_reent+0x12>

08006efe <__retarget_lock_init_recursive>:
 8006efe:	4770      	bx	lr

08006f00 <__retarget_lock_acquire_recursive>:
 8006f00:	4770      	bx	lr

08006f02 <__retarget_lock_release_recursive>:
 8006f02:	4770      	bx	lr

08006f04 <__swhatbuf_r>:
 8006f04:	b570      	push	{r4, r5, r6, lr}
 8006f06:	460e      	mov	r6, r1
 8006f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f0c:	2900      	cmp	r1, #0
 8006f0e:	b096      	sub	sp, #88	; 0x58
 8006f10:	4614      	mov	r4, r2
 8006f12:	461d      	mov	r5, r3
 8006f14:	da08      	bge.n	8006f28 <__swhatbuf_r+0x24>
 8006f16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	602a      	str	r2, [r5, #0]
 8006f1e:	061a      	lsls	r2, r3, #24
 8006f20:	d410      	bmi.n	8006f44 <__swhatbuf_r+0x40>
 8006f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f26:	e00e      	b.n	8006f46 <__swhatbuf_r+0x42>
 8006f28:	466a      	mov	r2, sp
 8006f2a:	f000 f903 	bl	8007134 <_fstat_r>
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	dbf1      	blt.n	8006f16 <__swhatbuf_r+0x12>
 8006f32:	9a01      	ldr	r2, [sp, #4]
 8006f34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f3c:	425a      	negs	r2, r3
 8006f3e:	415a      	adcs	r2, r3
 8006f40:	602a      	str	r2, [r5, #0]
 8006f42:	e7ee      	b.n	8006f22 <__swhatbuf_r+0x1e>
 8006f44:	2340      	movs	r3, #64	; 0x40
 8006f46:	2000      	movs	r0, #0
 8006f48:	6023      	str	r3, [r4, #0]
 8006f4a:	b016      	add	sp, #88	; 0x58
 8006f4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006f50 <__smakebuf_r>:
 8006f50:	898b      	ldrh	r3, [r1, #12]
 8006f52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f54:	079d      	lsls	r5, r3, #30
 8006f56:	4606      	mov	r6, r0
 8006f58:	460c      	mov	r4, r1
 8006f5a:	d507      	bpl.n	8006f6c <__smakebuf_r+0x1c>
 8006f5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f60:	6023      	str	r3, [r4, #0]
 8006f62:	6123      	str	r3, [r4, #16]
 8006f64:	2301      	movs	r3, #1
 8006f66:	6163      	str	r3, [r4, #20]
 8006f68:	b002      	add	sp, #8
 8006f6a:	bd70      	pop	{r4, r5, r6, pc}
 8006f6c:	ab01      	add	r3, sp, #4
 8006f6e:	466a      	mov	r2, sp
 8006f70:	f7ff ffc8 	bl	8006f04 <__swhatbuf_r>
 8006f74:	9900      	ldr	r1, [sp, #0]
 8006f76:	4605      	mov	r5, r0
 8006f78:	4630      	mov	r0, r6
 8006f7a:	f7ff f959 	bl	8006230 <_malloc_r>
 8006f7e:	b948      	cbnz	r0, 8006f94 <__smakebuf_r+0x44>
 8006f80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f84:	059a      	lsls	r2, r3, #22
 8006f86:	d4ef      	bmi.n	8006f68 <__smakebuf_r+0x18>
 8006f88:	f023 0303 	bic.w	r3, r3, #3
 8006f8c:	f043 0302 	orr.w	r3, r3, #2
 8006f90:	81a3      	strh	r3, [r4, #12]
 8006f92:	e7e3      	b.n	8006f5c <__smakebuf_r+0xc>
 8006f94:	4b0d      	ldr	r3, [pc, #52]	; (8006fcc <__smakebuf_r+0x7c>)
 8006f96:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f98:	89a3      	ldrh	r3, [r4, #12]
 8006f9a:	6020      	str	r0, [r4, #0]
 8006f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fa0:	81a3      	strh	r3, [r4, #12]
 8006fa2:	9b00      	ldr	r3, [sp, #0]
 8006fa4:	6163      	str	r3, [r4, #20]
 8006fa6:	9b01      	ldr	r3, [sp, #4]
 8006fa8:	6120      	str	r0, [r4, #16]
 8006faa:	b15b      	cbz	r3, 8006fc4 <__smakebuf_r+0x74>
 8006fac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	f000 f8d1 	bl	8007158 <_isatty_r>
 8006fb6:	b128      	cbz	r0, 8006fc4 <__smakebuf_r+0x74>
 8006fb8:	89a3      	ldrh	r3, [r4, #12]
 8006fba:	f023 0303 	bic.w	r3, r3, #3
 8006fbe:	f043 0301 	orr.w	r3, r3, #1
 8006fc2:	81a3      	strh	r3, [r4, #12]
 8006fc4:	89a0      	ldrh	r0, [r4, #12]
 8006fc6:	4305      	orrs	r5, r0
 8006fc8:	81a5      	strh	r5, [r4, #12]
 8006fca:	e7cd      	b.n	8006f68 <__smakebuf_r+0x18>
 8006fcc:	08006d5d 	.word	0x08006d5d

08006fd0 <_malloc_usable_size_r>:
 8006fd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fd4:	1f18      	subs	r0, r3, #4
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	bfbc      	itt	lt
 8006fda:	580b      	ldrlt	r3, [r1, r0]
 8006fdc:	18c0      	addlt	r0, r0, r3
 8006fde:	4770      	bx	lr

08006fe0 <_raise_r>:
 8006fe0:	291f      	cmp	r1, #31
 8006fe2:	b538      	push	{r3, r4, r5, lr}
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	460d      	mov	r5, r1
 8006fe8:	d904      	bls.n	8006ff4 <_raise_r+0x14>
 8006fea:	2316      	movs	r3, #22
 8006fec:	6003      	str	r3, [r0, #0]
 8006fee:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff2:	bd38      	pop	{r3, r4, r5, pc}
 8006ff4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006ff6:	b112      	cbz	r2, 8006ffe <_raise_r+0x1e>
 8006ff8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ffc:	b94b      	cbnz	r3, 8007012 <_raise_r+0x32>
 8006ffe:	4620      	mov	r0, r4
 8007000:	f000 f830 	bl	8007064 <_getpid_r>
 8007004:	462a      	mov	r2, r5
 8007006:	4601      	mov	r1, r0
 8007008:	4620      	mov	r0, r4
 800700a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800700e:	f000 b817 	b.w	8007040 <_kill_r>
 8007012:	2b01      	cmp	r3, #1
 8007014:	d00a      	beq.n	800702c <_raise_r+0x4c>
 8007016:	1c59      	adds	r1, r3, #1
 8007018:	d103      	bne.n	8007022 <_raise_r+0x42>
 800701a:	2316      	movs	r3, #22
 800701c:	6003      	str	r3, [r0, #0]
 800701e:	2001      	movs	r0, #1
 8007020:	e7e7      	b.n	8006ff2 <_raise_r+0x12>
 8007022:	2400      	movs	r4, #0
 8007024:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007028:	4628      	mov	r0, r5
 800702a:	4798      	blx	r3
 800702c:	2000      	movs	r0, #0
 800702e:	e7e0      	b.n	8006ff2 <_raise_r+0x12>

08007030 <raise>:
 8007030:	4b02      	ldr	r3, [pc, #8]	; (800703c <raise+0xc>)
 8007032:	4601      	mov	r1, r0
 8007034:	6818      	ldr	r0, [r3, #0]
 8007036:	f7ff bfd3 	b.w	8006fe0 <_raise_r>
 800703a:	bf00      	nop
 800703c:	20000010 	.word	0x20000010

08007040 <_kill_r>:
 8007040:	b538      	push	{r3, r4, r5, lr}
 8007042:	4d07      	ldr	r5, [pc, #28]	; (8007060 <_kill_r+0x20>)
 8007044:	2300      	movs	r3, #0
 8007046:	4604      	mov	r4, r0
 8007048:	4608      	mov	r0, r1
 800704a:	4611      	mov	r1, r2
 800704c:	602b      	str	r3, [r5, #0]
 800704e:	f7fa fa0d 	bl	800146c <_kill>
 8007052:	1c43      	adds	r3, r0, #1
 8007054:	d102      	bne.n	800705c <_kill_r+0x1c>
 8007056:	682b      	ldr	r3, [r5, #0]
 8007058:	b103      	cbz	r3, 800705c <_kill_r+0x1c>
 800705a:	6023      	str	r3, [r4, #0]
 800705c:	bd38      	pop	{r3, r4, r5, pc}
 800705e:	bf00      	nop
 8007060:	2000039c 	.word	0x2000039c

08007064 <_getpid_r>:
 8007064:	f7fa ba00 	b.w	8001468 <_getpid>

08007068 <__sread>:
 8007068:	b510      	push	{r4, lr}
 800706a:	460c      	mov	r4, r1
 800706c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007070:	f000 f894 	bl	800719c <_read_r>
 8007074:	2800      	cmp	r0, #0
 8007076:	bfab      	itete	ge
 8007078:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800707a:	89a3      	ldrhlt	r3, [r4, #12]
 800707c:	181b      	addge	r3, r3, r0
 800707e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007082:	bfac      	ite	ge
 8007084:	6563      	strge	r3, [r4, #84]	; 0x54
 8007086:	81a3      	strhlt	r3, [r4, #12]
 8007088:	bd10      	pop	{r4, pc}

0800708a <__swrite>:
 800708a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800708e:	461f      	mov	r7, r3
 8007090:	898b      	ldrh	r3, [r1, #12]
 8007092:	05db      	lsls	r3, r3, #23
 8007094:	4605      	mov	r5, r0
 8007096:	460c      	mov	r4, r1
 8007098:	4616      	mov	r6, r2
 800709a:	d505      	bpl.n	80070a8 <__swrite+0x1e>
 800709c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070a0:	2302      	movs	r3, #2
 80070a2:	2200      	movs	r2, #0
 80070a4:	f000 f868 	bl	8007178 <_lseek_r>
 80070a8:	89a3      	ldrh	r3, [r4, #12]
 80070aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070b2:	81a3      	strh	r3, [r4, #12]
 80070b4:	4632      	mov	r2, r6
 80070b6:	463b      	mov	r3, r7
 80070b8:	4628      	mov	r0, r5
 80070ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070be:	f000 b817 	b.w	80070f0 <_write_r>

080070c2 <__sseek>:
 80070c2:	b510      	push	{r4, lr}
 80070c4:	460c      	mov	r4, r1
 80070c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070ca:	f000 f855 	bl	8007178 <_lseek_r>
 80070ce:	1c43      	adds	r3, r0, #1
 80070d0:	89a3      	ldrh	r3, [r4, #12]
 80070d2:	bf15      	itete	ne
 80070d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80070d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070de:	81a3      	strheq	r3, [r4, #12]
 80070e0:	bf18      	it	ne
 80070e2:	81a3      	strhne	r3, [r4, #12]
 80070e4:	bd10      	pop	{r4, pc}

080070e6 <__sclose>:
 80070e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070ea:	f000 b813 	b.w	8007114 <_close_r>
	...

080070f0 <_write_r>:
 80070f0:	b538      	push	{r3, r4, r5, lr}
 80070f2:	4d07      	ldr	r5, [pc, #28]	; (8007110 <_write_r+0x20>)
 80070f4:	4604      	mov	r4, r0
 80070f6:	4608      	mov	r0, r1
 80070f8:	4611      	mov	r1, r2
 80070fa:	2200      	movs	r2, #0
 80070fc:	602a      	str	r2, [r5, #0]
 80070fe:	461a      	mov	r2, r3
 8007100:	f7fa f9d0 	bl	80014a4 <_write>
 8007104:	1c43      	adds	r3, r0, #1
 8007106:	d102      	bne.n	800710e <_write_r+0x1e>
 8007108:	682b      	ldr	r3, [r5, #0]
 800710a:	b103      	cbz	r3, 800710e <_write_r+0x1e>
 800710c:	6023      	str	r3, [r4, #0]
 800710e:	bd38      	pop	{r3, r4, r5, pc}
 8007110:	2000039c 	.word	0x2000039c

08007114 <_close_r>:
 8007114:	b538      	push	{r3, r4, r5, lr}
 8007116:	4d06      	ldr	r5, [pc, #24]	; (8007130 <_close_r+0x1c>)
 8007118:	2300      	movs	r3, #0
 800711a:	4604      	mov	r4, r0
 800711c:	4608      	mov	r0, r1
 800711e:	602b      	str	r3, [r5, #0]
 8007120:	f7fa f9ce 	bl	80014c0 <_close>
 8007124:	1c43      	adds	r3, r0, #1
 8007126:	d102      	bne.n	800712e <_close_r+0x1a>
 8007128:	682b      	ldr	r3, [r5, #0]
 800712a:	b103      	cbz	r3, 800712e <_close_r+0x1a>
 800712c:	6023      	str	r3, [r4, #0]
 800712e:	bd38      	pop	{r3, r4, r5, pc}
 8007130:	2000039c 	.word	0x2000039c

08007134 <_fstat_r>:
 8007134:	b538      	push	{r3, r4, r5, lr}
 8007136:	4d07      	ldr	r5, [pc, #28]	; (8007154 <_fstat_r+0x20>)
 8007138:	2300      	movs	r3, #0
 800713a:	4604      	mov	r4, r0
 800713c:	4608      	mov	r0, r1
 800713e:	4611      	mov	r1, r2
 8007140:	602b      	str	r3, [r5, #0]
 8007142:	f7fa f9c1 	bl	80014c8 <_fstat>
 8007146:	1c43      	adds	r3, r0, #1
 8007148:	d102      	bne.n	8007150 <_fstat_r+0x1c>
 800714a:	682b      	ldr	r3, [r5, #0]
 800714c:	b103      	cbz	r3, 8007150 <_fstat_r+0x1c>
 800714e:	6023      	str	r3, [r4, #0]
 8007150:	bd38      	pop	{r3, r4, r5, pc}
 8007152:	bf00      	nop
 8007154:	2000039c 	.word	0x2000039c

08007158 <_isatty_r>:
 8007158:	b538      	push	{r3, r4, r5, lr}
 800715a:	4d06      	ldr	r5, [pc, #24]	; (8007174 <_isatty_r+0x1c>)
 800715c:	2300      	movs	r3, #0
 800715e:	4604      	mov	r4, r0
 8007160:	4608      	mov	r0, r1
 8007162:	602b      	str	r3, [r5, #0]
 8007164:	f7fa f9b6 	bl	80014d4 <_isatty>
 8007168:	1c43      	adds	r3, r0, #1
 800716a:	d102      	bne.n	8007172 <_isatty_r+0x1a>
 800716c:	682b      	ldr	r3, [r5, #0]
 800716e:	b103      	cbz	r3, 8007172 <_isatty_r+0x1a>
 8007170:	6023      	str	r3, [r4, #0]
 8007172:	bd38      	pop	{r3, r4, r5, pc}
 8007174:	2000039c 	.word	0x2000039c

08007178 <_lseek_r>:
 8007178:	b538      	push	{r3, r4, r5, lr}
 800717a:	4d07      	ldr	r5, [pc, #28]	; (8007198 <_lseek_r+0x20>)
 800717c:	4604      	mov	r4, r0
 800717e:	4608      	mov	r0, r1
 8007180:	4611      	mov	r1, r2
 8007182:	2200      	movs	r2, #0
 8007184:	602a      	str	r2, [r5, #0]
 8007186:	461a      	mov	r2, r3
 8007188:	f7fa f9a6 	bl	80014d8 <_lseek>
 800718c:	1c43      	adds	r3, r0, #1
 800718e:	d102      	bne.n	8007196 <_lseek_r+0x1e>
 8007190:	682b      	ldr	r3, [r5, #0]
 8007192:	b103      	cbz	r3, 8007196 <_lseek_r+0x1e>
 8007194:	6023      	str	r3, [r4, #0]
 8007196:	bd38      	pop	{r3, r4, r5, pc}
 8007198:	2000039c 	.word	0x2000039c

0800719c <_read_r>:
 800719c:	b538      	push	{r3, r4, r5, lr}
 800719e:	4d07      	ldr	r5, [pc, #28]	; (80071bc <_read_r+0x20>)
 80071a0:	4604      	mov	r4, r0
 80071a2:	4608      	mov	r0, r1
 80071a4:	4611      	mov	r1, r2
 80071a6:	2200      	movs	r2, #0
 80071a8:	602a      	str	r2, [r5, #0]
 80071aa:	461a      	mov	r2, r3
 80071ac:	f7fa f96c 	bl	8001488 <_read>
 80071b0:	1c43      	adds	r3, r0, #1
 80071b2:	d102      	bne.n	80071ba <_read_r+0x1e>
 80071b4:	682b      	ldr	r3, [r5, #0]
 80071b6:	b103      	cbz	r3, 80071ba <_read_r+0x1e>
 80071b8:	6023      	str	r3, [r4, #0]
 80071ba:	bd38      	pop	{r3, r4, r5, pc}
 80071bc:	2000039c 	.word	0x2000039c

080071c0 <_init>:
 80071c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071c2:	bf00      	nop
 80071c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071c6:	bc08      	pop	{r3}
 80071c8:	469e      	mov	lr, r3
 80071ca:	4770      	bx	lr

080071cc <_fini>:
 80071cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ce:	bf00      	nop
 80071d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071d2:	bc08      	pop	{r3}
 80071d4:	469e      	mov	lr, r3
 80071d6:	4770      	bx	lr
