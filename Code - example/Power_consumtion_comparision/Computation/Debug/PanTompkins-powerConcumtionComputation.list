
PanTompkins-powerConcumtionComputation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007030  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e4c  08007170  08007170  00017170  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008fbc  08008fbc  00018fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008fc0  08008fc0  00018fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e0  20000004  08008fc4  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001c0  200001e4  080091a4  000201e4  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200003a4  080091a4  000203a4  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001dc37  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000025cb  00000000  00000000  0003de4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00034e2c  00000000  00000000  00040416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b60  00000000  00000000  00075248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00003ae8  00000000  00000000  00075da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00021f0d  00000000  00000000  00079890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001dac3  00000000  00000000  0009b79d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d46ff  00000000  00000000  000b9260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0018d95f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000038f0  00000000  00000000  0018d9b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e4 	.word	0x200001e4
 800015c:	00000000 	.word	0x00000000
 8000160:	08007158 	.word	0x08007158

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e8 	.word	0x200001e8
 800017c:	08007158 	.word	0x08007158

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_d2lz>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460d      	mov	r5, r1
 8000c42:	f7ff ff23 	bl	8000a8c <__aeabi_dcmplt>
 8000c46:	b928      	cbnz	r0, 8000c54 <__aeabi_d2lz+0x1c>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c50:	f000 b80a 	b.w	8000c68 <__aeabi_d2ulz>
 8000c54:	4620      	mov	r0, r4
 8000c56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5a:	f000 f805 	bl	8000c68 <__aeabi_d2ulz>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2ulz>:
 8000c68:	b5d0      	push	{r4, r6, r7, lr}
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__aeabi_d2ulz+0x34>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	f7ff fc99 	bl	80005a8 <__aeabi_dmul>
 8000c76:	f7ff ff6f 	bl	8000b58 <__aeabi_d2uiz>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	f7ff fc1a 	bl	80004b4 <__aeabi_ui2d>
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <__aeabi_d2ulz+0x38>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f7ff fc90 	bl	80005a8 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	4639      	mov	r1, r7
 8000c90:	f7ff fad2 	bl	8000238 <__aeabi_dsub>
 8000c94:	f7ff ff60 	bl	8000b58 <__aeabi_d2uiz>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c9c:	3df00000 	.word	0x3df00000
 8000ca0:	41f00000 	.word	0x41f00000

08000ca4 <arm_PT_init>:
float previousSignalPeak = 0, lastQRSpeak = 0, TresholdF = 0, SignalLevelF = 0, NoiseLevelF = 0;
uint16_t peakTimeDelay = 0, latencyDelay = 0;
uint8_t rissingEdge = 0;

void arm_PT_init()
{
 8000ca4:	b530      	push	{r4, r5, lr}
 8000ca6:	b083      	sub	sp, #12
	//Initiate filter function
	arm_fir_init_f32(&Derivative, NUM_DERIVATIVE_TAPS, (float32_t *)&firDerivativeCoefficients[0], &firStateF32[0], BLOCK_SIZE);
 8000ca8:	2401      	movs	r4, #1
 8000caa:	9400      	str	r4, [sp, #0]
 8000cac:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <arm_PT_init+0x80>)
 8000cae:	4a1e      	ldr	r2, [pc, #120]	; (8000d28 <arm_PT_init+0x84>)
 8000cb0:	481e      	ldr	r0, [pc, #120]	; (8000d2c <arm_PT_init+0x88>)
 8000cb2:	2105      	movs	r1, #5
 8000cb4:	f001 fda0 	bl	80027f8 <arm_fir_init_f32>
	arm_biquad_cascade_df1_init_f32 (&highPassFilter,1, (float32_t *)&iirHighPassFilterCoefficients[0], &highPassFilterStateF32[0]);
 8000cb8:	4621      	mov	r1, r4
 8000cba:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <arm_PT_init+0x8c>)
 8000cbc:	4a1d      	ldr	r2, [pc, #116]	; (8000d34 <arm_PT_init+0x90>)
 8000cbe:	481e      	ldr	r0, [pc, #120]	; (8000d38 <arm_PT_init+0x94>)
 8000cc0:	f001 fd56 	bl	8002770 <arm_biquad_cascade_df1_init_f32>
	arm_biquad_cascade_df1_init_f32 (&lowPassFilter,1, (float32_t *)&iirLowPassFilterCoefficients[0], &lowPassFilterStateF32[0]);
 8000cc4:	4621      	mov	r1, r4
 8000cc6:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <arm_PT_init+0x98>)
 8000cc8:	4a1d      	ldr	r2, [pc, #116]	; (8000d40 <arm_PT_init+0x9c>)
 8000cca:	481e      	ldr	r0, [pc, #120]	; (8000d44 <arm_PT_init+0xa0>)
 8000ccc:	f001 fd50 	bl	8002770 <arm_biquad_cascade_df1_init_f32>
	//Reset buffers
	for (int i = 0; i<NUM_DERIVATIVE_TAPS_ARRAY_SIZE; i++)
	{
		derivativeBuffer[i]=0;
 8000cd0:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <arm_PT_init+0xa4>)
	}
	movingAverageBufferIndex=0;
 8000cd2:	491e      	ldr	r1, [pc, #120]	; (8000d4c <arm_PT_init+0xa8>)
	for (int i = 0; i<MovingAverageSampleCount; i++)
	{
		movingAverageBuffer[i] = 0;
 8000cd4:	481e      	ldr	r0, [pc, #120]	; (8000d50 <arm_PT_init+0xac>)
		derivativeBuffer[i]=0;
 8000cd6:	2400      	movs	r4, #0
	movingAverageBufferIndex=0;
 8000cd8:	2500      	movs	r5, #0
		derivativeBuffer[i]=0;
 8000cda:	601c      	str	r4, [r3, #0]
 8000cdc:	605c      	str	r4, [r3, #4]
 8000cde:	609c      	str	r4, [r3, #8]
 8000ce0:	60dc      	str	r4, [r3, #12]
 8000ce2:	611c      	str	r4, [r3, #16]
	movingAverageBufferIndex=0;
 8000ce4:	600d      	str	r5, [r1, #0]
		movingAverageBuffer[i] = 0;
 8000ce6:	22d8      	movs	r2, #216	; 0xd8
 8000ce8:	4629      	mov	r1, r5
 8000cea:	f001 fdcd 	bl	8002888 <memset>
	}
	MeanSum = 0;
	meanValue = 0;
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <arm_PT_init+0xb0>)
	MeanSum = 0;
 8000cf0:	4919      	ldr	r1, [pc, #100]	; (8000d58 <arm_PT_init+0xb4>)
	meanValue = 0;
 8000cf2:	601c      	str	r4, [r3, #0]
	TresholdI = 0;
	SignalLevelI = 0;
 8000cf4:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <arm_PT_init+0xb8>)
	TresholdI = 0;
 8000cf6:	4a1a      	ldr	r2, [pc, #104]	; (8000d60 <arm_PT_init+0xbc>)
	SignalLevelI = 0;
 8000cf8:	601c      	str	r4, [r3, #0]
	NoiseLevelI = 0;
	previousSignalPeak = 0;
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <arm_PT_init+0xc0>)
	MeanSum = 0;
 8000cfc:	600c      	str	r4, [r1, #0]
	previousSignalPeak = 0;
 8000cfe:	601c      	str	r4, [r3, #0]
	lastQRSpeak = 0;
	TresholdF = 0;
 8000d00:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <arm_PT_init+0xc4>)
	TresholdI = 0;
 8000d02:	6014      	str	r4, [r2, #0]
	TresholdF = 0;
 8000d04:	601c      	str	r4, [r3, #0]
	NoiseLevelI = 0;
 8000d06:	4919      	ldr	r1, [pc, #100]	; (8000d6c <arm_PT_init+0xc8>)
	lastQRSpeak = 0;
 8000d08:	4a19      	ldr	r2, [pc, #100]	; (8000d70 <arm_PT_init+0xcc>)
	SignalLevelF = 0;
	NoiseLevelF = 0;
 8000d0a:	4b1a      	ldr	r3, [pc, #104]	; (8000d74 <arm_PT_init+0xd0>)
	NoiseLevelI = 0;
 8000d0c:	600c      	str	r4, [r1, #0]
	lastQRSpeak = 0;
 8000d0e:	6014      	str	r4, [r2, #0]
	NoiseLevelF = 0;
 8000d10:	601c      	str	r4, [r3, #0]
	SignalLevelF = 0;
 8000d12:	4919      	ldr	r1, [pc, #100]	; (8000d78 <arm_PT_init+0xd4>)
	peakTimeDelay = 0;
 8000d14:	4a19      	ldr	r2, [pc, #100]	; (8000d7c <arm_PT_init+0xd8>)
	latencyDelay = 0;
 8000d16:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <arm_PT_init+0xdc>)
	SignalLevelF = 0;
 8000d18:	600c      	str	r4, [r1, #0]
	peakTimeDelay = 0;
 8000d1a:	8015      	strh	r5, [r2, #0]
	latencyDelay = 0;
 8000d1c:	801d      	strh	r5, [r3, #0]
}
 8000d1e:	b003      	add	sp, #12
 8000d20:	bd30      	pop	{r4, r5, pc}
 8000d22:	bf00      	nop
 8000d24:	2000023c 	.word	0x2000023c
 8000d28:	08007180 	.word	0x08007180
 8000d2c:	20000200 	.word	0x20000200
 8000d30:	20000260 	.word	0x20000260
 8000d34:	08007194 	.word	0x08007194
 8000d38:	20000250 	.word	0x20000250
 8000d3c:	20000288 	.word	0x20000288
 8000d40:	080071a8 	.word	0x080071a8
 8000d44:	20000278 	.word	0x20000278
 8000d48:	20000228 	.word	0x20000228
 8000d4c:	20000374 	.word	0x20000374
 8000d50:	2000029c 	.word	0x2000029c
 8000d54:	20000298 	.word	0x20000298
 8000d58:	2000020c 	.word	0x2000020c
 8000d5c:	2000021c 	.word	0x2000021c
 8000d60:	20000224 	.word	0x20000224
 8000d64:	20000380 	.word	0x20000380
 8000d68:	20000220 	.word	0x20000220
 8000d6c:	20000214 	.word	0x20000214
 8000d70:	20000270 	.word	0x20000270
 8000d74:	20000210 	.word	0x20000210
 8000d78:	20000218 	.word	0x20000218
 8000d7c:	20000378 	.word	0x20000378
 8000d80:	20000274 	.word	0x20000274

08000d84 <arm_PT_ST>:


int16_t arm_PT_ST(int16_t sample)
{
 8000d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d88:	ed2d 8b06 	vpush	{d8-d10}
	float32_t newSample = (float)sample;
 8000d8c:	ee07 0a90 	vmov	s15, r0
	//low pass filter operation
	arm_biquad_cascade_df1_f32 (&lowPassFilter, &newSample,&lowPassFilterResult,1);
 8000d90:	4da5      	ldr	r5, [pc, #660]	; (8001028 <arm_PT_ST+0x2a4>)
 8000d92:	48a6      	ldr	r0, [pc, #664]	; (800102c <arm_PT_ST+0x2a8>)



	//Store potential peak value (QRS can be also minimum or maximum)
	float potentialPeak = lowPassFilterResult*lowPassFilterResult;
	if (potentialPeak>previousSignalPeak)
 8000d94:	4ca6      	ldr	r4, [pc, #664]	; (8001030 <arm_PT_ST+0x2ac>)
 8000d96:	4ea7      	ldr	r6, [pc, #668]	; (8001034 <arm_PT_ST+0x2b0>)
	float32_t newSample = (float)sample;
 8000d98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8000d9c:	b083      	sub	sp, #12
	arm_biquad_cascade_df1_f32 (&lowPassFilter, &newSample,&lowPassFilterResult,1);
 8000d9e:	2301      	movs	r3, #1
 8000da0:	462a      	mov	r2, r5
 8000da2:	a901      	add	r1, sp, #4
	float32_t newSample = (float)sample;
 8000da4:	edcd 7a01 	vstr	s15, [sp, #4]
	arm_biquad_cascade_df1_f32 (&lowPassFilter, &newSample,&lowPassFilterResult,1);
 8000da8:	f001 fc92 	bl	80026d0 <arm_biquad_cascade_df1_f32>
	arm_biquad_cascade_df1_f32 (&highPassFilter, &lowPassFilterResult,&highPassFilterResult,1);
 8000dac:	4aa2      	ldr	r2, [pc, #648]	; (8001038 <arm_PT_ST+0x2b4>)
 8000dae:	48a3      	ldr	r0, [pc, #652]	; (800103c <arm_PT_ST+0x2b8>)
 8000db0:	2301      	movs	r3, #1
 8000db2:	4629      	mov	r1, r5
 8000db4:	f001 fc8c 	bl	80026d0 <arm_biquad_cascade_df1_f32>
	float potentialPeak = lowPassFilterResult*lowPassFilterResult;
 8000db8:	edd5 7a00 	vldr	s15, [r5]
	if (potentialPeak>previousSignalPeak)
 8000dbc:	ed94 7a00 	vldr	s14, [r4]
	float potentialPeak = lowPassFilterResult*lowPassFilterResult;
 8000dc0:	ee67 7aa7 	vmul.f32	s15, s15, s15
	if (potentialPeak>previousSignalPeak)
 8000dc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dcc:	d472      	bmi.n	8000eb4 <arm_PT_ST+0x130>
	{//Store maximum of squared signal
		previousSignalPeak = potentialPeak;
		peakTimeDelay = 0;
	}
	peakTimeDelay++;
 8000dce:	8833      	ldrh	r3, [r6, #0]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	b29b      	uxth	r3, r3
	if (latencyDelay < latencyTreshold)
 8000dd4:	4f9a      	ldr	r7, [pc, #616]	; (8001040 <arm_PT_ST+0x2bc>)
	peakTimeDelay++;
 8000dd6:	8033      	strh	r3, [r6, #0]
	if (latencyDelay < latencyTreshold)
 8000dd8:	883b      	ldrh	r3, [r7, #0]
 8000dda:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 8000dde:	d26d      	bcs.n	8000ebc <arm_PT_ST+0x138>
	{
		latencyDelay++;
 8000de0:	3301      	adds	r3, #1
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	803b      	strh	r3, [r7, #0]
	else
	{//If peak wasn't find in given time restart variables
		latencyDelay = 0;
		arm_PT_init();
	}
	if (latencyDelay == (latencyTreshold>>1))
 8000de6:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8000dea:	d10f      	bne.n	8000e0c <arm_PT_ST+0x88>
	{//In original algorithm this should be look-back
		//here only decrease thresholds
		TresholdI = TresholdI * 0.5;
 8000dec:	4a95      	ldr	r2, [pc, #596]	; (8001044 <arm_PT_ST+0x2c0>)
		TresholdF = TresholdF * 0.5;
 8000dee:	4b96      	ldr	r3, [pc, #600]	; (8001048 <arm_PT_ST+0x2c4>)
		TresholdI = TresholdI * 0.5;
 8000df0:	ed92 7a00 	vldr	s14, [r2]
		TresholdF = TresholdF * 0.5;
 8000df4:	edd3 7a00 	vldr	s15, [r3]
		TresholdI = TresholdI * 0.5;
 8000df8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8000dfc:	ee27 7a26 	vmul.f32	s14, s14, s13
		TresholdF = TresholdF * 0.5;
 8000e00:	ee67 7aa6 	vmul.f32	s15, s15, s13
		TresholdI = TresholdI * 0.5;
 8000e04:	ed82 7a00 	vstr	s14, [r2]
		TresholdF = TresholdF * 0.5;
 8000e08:	edc3 7a00 	vstr	s15, [r3]
	}
	//Derivative with FIR filter
	arm_fir_f32 (&Derivative,&lowPassFilterResult,&derivativeOutput[0],BLOCK_SIZE);
 8000e0c:	4d8f      	ldr	r5, [pc, #572]	; (800104c <arm_PT_ST+0x2c8>)
 8000e0e:	4986      	ldr	r1, [pc, #536]	; (8001028 <arm_PT_ST+0x2a4>)
 8000e10:	488f      	ldr	r0, [pc, #572]	; (8001050 <arm_PT_ST+0x2cc>)
 8000e12:	462a      	mov	r2, r5
 8000e14:	2301      	movs	r3, #1
 8000e16:	f001 fcb7 	bl	8002788 <arm_fir_f32>
	//Square the value
	squaredValue = derivativeOutput[0] * derivativeOutput[0];
 8000e1a:	ed95 8a00 	vldr	s16, [r5]
	MeanSum -= movingAverageBuffer[movingAverageBufferIndex];
 8000e1e:	498d      	ldr	r1, [pc, #564]	; (8001054 <arm_PT_ST+0x2d0>)
	squaredValue = derivativeOutput[0] * derivativeOutput[0];
 8000e20:	4b8d      	ldr	r3, [pc, #564]	; (8001058 <arm_PT_ST+0x2d4>)
	MeanSum -= movingAverageBuffer[movingAverageBufferIndex];
 8000e22:	680a      	ldr	r2, [r1, #0]
	 */
	//putOnMovingAverageBuffer(squaredValue);
	//arm_mean_f32 (&movingAverageBuffer[0], MovingAverageSampleCount, &meanValue);

	//Detection of maximum in moving average signal
	if (meanValue!=previousMean)
 8000e24:	4d8d      	ldr	r5, [pc, #564]	; (800105c <arm_PT_ST+0x2d8>)
	squaredValue = derivativeOutput[0] * derivativeOutput[0];
 8000e26:	ee28 8a08 	vmul.f32	s16, s16, s16
	if (movingAverageBufferIndex==MovingAverageSampleCount)
 8000e2a:	2a35      	cmp	r2, #53	; 0x35
	squaredValue = derivativeOutput[0] * derivativeOutput[0];
 8000e2c:	ed83 8a00 	vstr	s16, [r3]
	MeanSum -= movingAverageBuffer[movingAverageBufferIndex];
 8000e30:	4b8b      	ldr	r3, [pc, #556]	; (8001060 <arm_PT_ST+0x2dc>)
 8000e32:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000e36:	ed93 7a00 	vldr	s14, [r3]
	movingAverageBuffer[movingAverageBufferIndex] = sample;
 8000e3a:	ed83 8a00 	vstr	s16, [r3]
	MeanSum -= movingAverageBuffer[movingAverageBufferIndex];
 8000e3e:	4b89      	ldr	r3, [pc, #548]	; (8001064 <arm_PT_ST+0x2e0>)
 8000e40:	edd3 7a00 	vldr	s15, [r3]
 8000e44:	ee77 7ac7 	vsub.f32	s15, s15, s14
	MeanSum += sample;
 8000e48:	ee38 8a27 	vadd.f32	s16, s16, s15
	return MeanSum * meanDivider;
 8000e4c:	eddf 7a86 	vldr	s15, [pc, #536]	; 8001068 <arm_PT_ST+0x2e4>
	MeanSum += sample;
 8000e50:	ed83 8a00 	vstr	s16, [r3]
	return MeanSum * meanDivider;
 8000e54:	ee28 8a27 	vmul.f32	s16, s16, s15
	if (meanValue!=previousMean)
 8000e58:	edd5 7a00 	vldr	s15, [r5]
	movingAverageBufferIndex++;
 8000e5c:	f102 0301 	add.w	r3, r2, #1
		movingAverageBufferIndex = 0;
 8000e60:	bf08      	it	eq
 8000e62:	2300      	moveq	r3, #0
 8000e64:	600b      	str	r3, [r1, #0]
	if (meanValue!=previousMean)
 8000e66:	eef4 7a48 	vcmp.f32	s15, s16
	meanValue = putOnMovingAverageBufferAndGetMean(squaredValue);
 8000e6a:	4b80      	ldr	r3, [pc, #512]	; (800106c <arm_PT_ST+0x2e8>)
	if (meanValue!=previousMean)
 8000e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	meanValue = putOnMovingAverageBufferAndGetMean(squaredValue);
 8000e70:	ed83 8a00 	vstr	s16, [r3]
	if (meanValue!=previousMean)
 8000e74:	d00b      	beq.n	8000e8e <arm_PT_ST+0x10a>
	{
		if (meanValue>previousMean)
 8000e76:	eef4 7ac8 	vcmpe.f32	s15, s16
 8000e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e7e:	d50c      	bpl.n	8000e9a <arm_PT_ST+0x116>
		{//This is not maximum
			previousMean = meanValue;
			if (previousMean != 0)
 8000e80:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8000e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			previousMean = meanValue;
 8000e88:	ed85 8a00 	vstr	s16, [r5]
			if (previousMean != 0)
 8000e8c:	d11c      	bne.n	8000ec8 <arm_PT_ST+0x144>
				previousSignalPeak = 0;
				previousMean = 0;
			}
		}
	}
	return 0;
 8000e8e:	2000      	movs	r0, #0
}
 8000e90:	b003      	add	sp, #12
 8000e92:	ecbd 8b06 	vpop	{d8-d10}
 8000e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(rissingEdge ==1)
 8000e9a:	4b75      	ldr	r3, [pc, #468]	; (8001070 <arm_PT_ST+0x2ec>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d016      	beq.n	8000ed0 <arm_PT_ST+0x14c>
				previousSignalPeak = 0;
 8000ea2:	2300      	movs	r3, #0
	return 0;
 8000ea4:	2000      	movs	r0, #0
				previousSignalPeak = 0;
 8000ea6:	6023      	str	r3, [r4, #0]
				previousMean = 0;
 8000ea8:	602b      	str	r3, [r5, #0]
}
 8000eaa:	b003      	add	sp, #12
 8000eac:	ecbd 8b06 	vpop	{d8-d10}
 8000eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		previousSignalPeak = potentialPeak;
 8000eb4:	edc4 7a00 	vstr	s15, [r4]
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e78b      	b.n	8000dd4 <arm_PT_ST+0x50>
		latencyDelay = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	803b      	strh	r3, [r7, #0]
		arm_PT_init();
 8000ec0:	f7ff fef0 	bl	8000ca4 <arm_PT_init>
	if (latencyDelay == (latencyTreshold>>1))
 8000ec4:	883b      	ldrh	r3, [r7, #0]
 8000ec6:	e78e      	b.n	8000de6 <arm_PT_ST+0x62>
				rissingEdge = 1;
 8000ec8:	4b69      	ldr	r3, [pc, #420]	; (8001070 <arm_PT_ST+0x2ec>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	701a      	strb	r2, [r3, #0]
 8000ece:	e7de      	b.n	8000e8e <arm_PT_ST+0x10a>
				if ((previousMean > TresholdI) && (latencyDelay > latencyTwaveDelayTreshold))
 8000ed0:	f8df b170 	ldr.w	fp, [pc, #368]	; 8001044 <arm_PT_ST+0x2c0>
 8000ed4:	ed9b 7a00 	vldr	s14, [fp]
 8000ed8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee0:	f340 80d8 	ble.w	8001094 <arm_PT_ST+0x310>
 8000ee4:	883b      	ldrh	r3, [r7, #0]
 8000ee6:	2b48      	cmp	r3, #72	; 0x48
 8000ee8:	f240 80d4 	bls.w	8001094 <arm_PT_ST+0x310>
					if (latencyDelay< latencyPossibleTwave)
 8000eec:	2b81      	cmp	r3, #129	; 0x81
 8000eee:	f200 8140 	bhi.w	8001172 <arm_PT_ST+0x3ee>
						if (previousSignalPeak>(lastQRSpeak*0.5))
 8000ef2:	f8d4 a000 	ldr.w	sl, [r4]
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	f7ff fafe 	bl	80004f8 <__aeabi_f2d>
 8000efc:	4b5d      	ldr	r3, [pc, #372]	; (8001074 <arm_PT_ST+0x2f0>)
 8000efe:	4680      	mov	r8, r0
 8000f00:	6818      	ldr	r0, [r3, #0]
 8000f02:	4689      	mov	r9, r1
 8000f04:	f7ff faf8 	bl	80004f8 <__aeabi_f2d>
 8000f08:	4b5b      	ldr	r3, [pc, #364]	; (8001078 <arm_PT_ST+0x2f4>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f7ff fb4c 	bl	80005a8 <__aeabi_dmul>
 8000f10:	4602      	mov	r2, r0
 8000f12:	460b      	mov	r3, r1
 8000f14:	4640      	mov	r0, r8
 8000f16:	4649      	mov	r1, r9
 8000f18:	f7ff fdd6 	bl	8000ac8 <__aeabi_dcmpgt>
 8000f1c:	2800      	cmp	r0, #0
 8000f1e:	d0b6      	beq.n	8000e8e <arm_PT_ST+0x10a>
							SignalLevelF = 0.125*previousSignalPeak + 0.875*SignalLevelF;
 8000f20:	4b56      	ldr	r3, [pc, #344]	; (800107c <arm_PT_ST+0x2f8>)
 8000f22:	6818      	ldr	r0, [r3, #0]
 8000f24:	f7ff fae8 	bl	80004f8 <__aeabi_f2d>
 8000f28:	4b55      	ldr	r3, [pc, #340]	; (8001080 <arm_PT_ST+0x2fc>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f7ff fb3c 	bl	80005a8 <__aeabi_dmul>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	4640      	mov	r0, r8
 8000f36:	4649      	mov	r1, r9
 8000f38:	4690      	mov	r8, r2
 8000f3a:	4699      	mov	r9, r3
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8000f42:	f7ff fb31 	bl	80005a8 <__aeabi_dmul>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	4640      	mov	r0, r8
 8000f4c:	4649      	mov	r1, r9
 8000f4e:	f7ff f975 	bl	800023c <__adddf3>
 8000f52:	f7ff fe21 	bl	8000b98 <__aeabi_d2f>
 8000f56:	4b49      	ldr	r3, [pc, #292]	; (800107c <arm_PT_ST+0x2f8>)
 8000f58:	6018      	str	r0, [r3, #0]
							TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 8000f5a:	4b4a      	ldr	r3, [pc, #296]	; (8001084 <arm_PT_ST+0x300>)
							SignalLevelF = 0.125*previousSignalPeak + 0.875*SignalLevelF;
 8000f5c:	ee07 0a90 	vmov	s15, r0
							TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 8000f60:	edd3 8a00 	vldr	s17, [r3]
 8000f64:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8000f68:	ee17 0a90 	vmov	r0, s15
 8000f6c:	f7ff fac4 	bl	80004f8 <__aeabi_f2d>
 8000f70:	4b45      	ldr	r3, [pc, #276]	; (8001088 <arm_PT_ST+0x304>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	f7ff fb18 	bl	80005a8 <__aeabi_dmul>
 8000f78:	4680      	mov	r8, r0
 8000f7a:	ee18 0a90 	vmov	r0, s17
 8000f7e:	4689      	mov	r9, r1
 8000f80:	f7ff faba 	bl	80004f8 <__aeabi_f2d>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4640      	mov	r0, r8
 8000f8a:	4649      	mov	r1, r9
 8000f8c:	f7ff f956 	bl	800023c <__adddf3>
 8000f90:	f7ff fe02 	bl	8000b98 <__aeabi_d2f>
							lastQRSpeak = previousSignalPeak;
 8000f94:	4b37      	ldr	r3, [pc, #220]	; (8001074 <arm_PT_ST+0x2f0>)
 8000f96:	f8c3 a000 	str.w	sl, [r3]
							TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 8000f9a:	4b2b      	ldr	r3, [pc, #172]	; (8001048 <arm_PT_ST+0x2c4>)
 8000f9c:	6018      	str	r0, [r3, #0]
							SignalLevelI = 0.125*meanValue + 0.875*SignalLevelI;
 8000f9e:	4b3b      	ldr	r3, [pc, #236]	; (800108c <arm_PT_ST+0x308>)
 8000fa0:	6818      	ldr	r0, [r3, #0]
 8000fa2:	f7ff faa9 	bl	80004f8 <__aeabi_f2d>
 8000fa6:	4b36      	ldr	r3, [pc, #216]	; (8001080 <arm_PT_ST+0x2fc>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f7ff fafd 	bl	80005a8 <__aeabi_dmul>
 8000fae:	4680      	mov	r8, r0
 8000fb0:	ee18 0a10 	vmov	r0, s16
 8000fb4:	4689      	mov	r9, r1
 8000fb6:	f7ff fa9f 	bl	80004f8 <__aeabi_f2d>
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8000fc0:	f7ff faf2 	bl	80005a8 <__aeabi_dmul>
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	4649      	mov	r1, r9
 8000fca:	4640      	mov	r0, r8
 8000fcc:	f7ff f936 	bl	800023c <__adddf3>
 8000fd0:	f7ff fde2 	bl	8000b98 <__aeabi_d2f>
 8000fd4:	4b2d      	ldr	r3, [pc, #180]	; (800108c <arm_PT_ST+0x308>)
 8000fd6:	ee07 0a90 	vmov	s15, r0
 8000fda:	6018      	str	r0, [r3, #0]
							TresholdI = NoiseLevelI + 0.25 * (SignalLevelI - NoiseLevelI);
 8000fdc:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <arm_PT_ST+0x30c>)
 8000fde:	ed93 8a00 	vldr	s16, [r3]
 8000fe2:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8000fe6:	ee17 0a90 	vmov	r0, s15
 8000fea:	f7ff fa85 	bl	80004f8 <__aeabi_f2d>
 8000fee:	4b26      	ldr	r3, [pc, #152]	; (8001088 <arm_PT_ST+0x304>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f7ff fad9 	bl	80005a8 <__aeabi_dmul>
 8000ff6:	4680      	mov	r8, r0
 8000ff8:	ee18 0a10 	vmov	r0, s16
 8000ffc:	4689      	mov	r9, r1
 8000ffe:	f7ff fa7b 	bl	80004f8 <__aeabi_f2d>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4640      	mov	r0, r8
 8001008:	4649      	mov	r1, r9
 800100a:	f7ff f917 	bl	800023c <__adddf3>
 800100e:	f7ff fdc3 	bl	8000b98 <__aeabi_d2f>
							previousSignalPeak = 0;
 8001012:	2300      	movs	r3, #0
							latencyDelay = 0;
 8001014:	2200      	movs	r2, #0
							TresholdI = NoiseLevelI + 0.25 * (SignalLevelI - NoiseLevelI);
 8001016:	f8cb 0000 	str.w	r0, [fp]
							previousSignalPeak = 0;
 800101a:	6023      	str	r3, [r4, #0]
							return peakTimeDelay;
 800101c:	f9b6 0000 	ldrsh.w	r0, [r6]
							previousMean = 0;
 8001020:	602b      	str	r3, [r5, #0]
							latencyDelay = 0;
 8001022:	803a      	strh	r2, [r7, #0]
							return peakTimeDelay;
 8001024:	e734      	b.n	8000e90 <arm_PT_ST+0x10c>
 8001026:	bf00      	nop
 8001028:	20000284 	.word	0x20000284
 800102c:	20000278 	.word	0x20000278
 8001030:	20000380 	.word	0x20000380
 8001034:	20000378 	.word	0x20000378
 8001038:	2000025c 	.word	0x2000025c
 800103c:	20000250 	.word	0x20000250
 8001040:	20000274 	.word	0x20000274
 8001044:	20000224 	.word	0x20000224
 8001048:	20000220 	.word	0x20000220
 800104c:	2000023c 	.word	0x2000023c
 8001050:	20000200 	.word	0x20000200
 8001054:	20000374 	.word	0x20000374
 8001058:	20000388 	.word	0x20000388
 800105c:	2000037c 	.word	0x2000037c
 8001060:	2000029c 	.word	0x2000029c
 8001064:	2000020c 	.word	0x2000020c
 8001068:	3c97b741 	.word	0x3c97b741
 800106c:	20000298 	.word	0x20000298
 8001070:	20000384 	.word	0x20000384
 8001074:	20000270 	.word	0x20000270
 8001078:	3fe00000 	.word	0x3fe00000
 800107c:	20000218 	.word	0x20000218
 8001080:	3fec0000 	.word	0x3fec0000
 8001084:	20000210 	.word	0x20000210
 8001088:	3fd00000 	.word	0x3fd00000
 800108c:	2000021c 	.word	0x2000021c
 8001090:	20000214 	.word	0x20000214
					NoiseLevelF = 0.125*previousSignalPeak + 0.875*NoiseLevelI;
 8001094:	f8df a26c 	ldr.w	sl, [pc, #620]	; 8001304 <arm_PT_ST+0x580>
 8001098:	f8da 0000 	ldr.w	r0, [sl]
 800109c:	f7ff fa2c 	bl	80004f8 <__aeabi_f2d>
 80010a0:	4b92      	ldr	r3, [pc, #584]	; (80012ec <arm_PT_ST+0x568>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	f7ff fa80 	bl	80005a8 <__aeabi_dmul>
 80010a8:	4606      	mov	r6, r0
 80010aa:	6820      	ldr	r0, [r4, #0]
 80010ac:	460f      	mov	r7, r1
 80010ae:	f7ff fa23 	bl	80004f8 <__aeabi_f2d>
 80010b2:	2200      	movs	r2, #0
 80010b4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80010b8:	f7ff fa76 	bl	80005a8 <__aeabi_dmul>
 80010bc:	4632      	mov	r2, r6
 80010be:	463b      	mov	r3, r7
 80010c0:	f7ff f8bc 	bl	800023c <__adddf3>
 80010c4:	f7ff fd68 	bl	8000b98 <__aeabi_d2f>
					TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 80010c8:	4b89      	ldr	r3, [pc, #548]	; (80012f0 <arm_PT_ST+0x56c>)
					NoiseLevelF = 0.125*previousSignalPeak + 0.875*NoiseLevelI;
 80010ca:	ee08 0a90 	vmov	s17, r0
					TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 80010ce:	edd3 7a00 	vldr	s15, [r3]
					NoiseLevelF = 0.125*previousSignalPeak + 0.875*NoiseLevelI;
 80010d2:	4b88      	ldr	r3, [pc, #544]	; (80012f4 <arm_PT_ST+0x570>)
					TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 80010d4:	ee77 7ae8 	vsub.f32	s15, s15, s17
					NoiseLevelF = 0.125*previousSignalPeak + 0.875*NoiseLevelI;
 80010d8:	6018      	str	r0, [r3, #0]
					TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 80010da:	ee17 0a90 	vmov	r0, s15
 80010de:	f7ff fa0b 	bl	80004f8 <__aeabi_f2d>
 80010e2:	4b85      	ldr	r3, [pc, #532]	; (80012f8 <arm_PT_ST+0x574>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	f7ff fa5f 	bl	80005a8 <__aeabi_dmul>
 80010ea:	4680      	mov	r8, r0
 80010ec:	ee18 0a90 	vmov	r0, s17
 80010f0:	4689      	mov	r9, r1
 80010f2:	f7ff fa01 	bl	80004f8 <__aeabi_f2d>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4640      	mov	r0, r8
 80010fc:	4649      	mov	r1, r9
 80010fe:	f7ff f89d 	bl	800023c <__adddf3>
 8001102:	f7ff fd49 	bl	8000b98 <__aeabi_d2f>
 8001106:	4b7d      	ldr	r3, [pc, #500]	; (80012fc <arm_PT_ST+0x578>)
 8001108:	6018      	str	r0, [r3, #0]
					NoiseLevelI = 0.125*meanValue + 0.875*NoiseLevelI;
 800110a:	ee18 0a10 	vmov	r0, s16
 800110e:	f7ff f9f3 	bl	80004f8 <__aeabi_f2d>
 8001112:	2200      	movs	r2, #0
 8001114:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001118:	f7ff fa46 	bl	80005a8 <__aeabi_dmul>
 800111c:	463b      	mov	r3, r7
 800111e:	4632      	mov	r2, r6
 8001120:	f7ff f88c 	bl	800023c <__adddf3>
 8001124:	f7ff fd38 	bl	8000b98 <__aeabi_d2f>
					TresholdI = NoiseLevelI + 0.25 * (SignalLevelI - NoiseLevelI);
 8001128:	4b75      	ldr	r3, [pc, #468]	; (8001300 <arm_PT_ST+0x57c>)
					NoiseLevelI = 0.125*meanValue + 0.875*NoiseLevelI;
 800112a:	f8ca 0000 	str.w	r0, [sl]
 800112e:	ee08 0a10 	vmov	s16, r0
					TresholdI = NoiseLevelI + 0.25 * (SignalLevelI - NoiseLevelI);
 8001132:	edd3 7a00 	vldr	s15, [r3]
 8001136:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800113a:	ee17 0a90 	vmov	r0, s15
 800113e:	f7ff f9db 	bl	80004f8 <__aeabi_f2d>
 8001142:	4b6d      	ldr	r3, [pc, #436]	; (80012f8 <arm_PT_ST+0x574>)
 8001144:	2200      	movs	r2, #0
 8001146:	f7ff fa2f 	bl	80005a8 <__aeabi_dmul>
 800114a:	4606      	mov	r6, r0
 800114c:	ee18 0a10 	vmov	r0, s16
 8001150:	460f      	mov	r7, r1
 8001152:	f7ff f9d1 	bl	80004f8 <__aeabi_f2d>
 8001156:	460b      	mov	r3, r1
 8001158:	4602      	mov	r2, r0
 800115a:	4639      	mov	r1, r7
 800115c:	4630      	mov	r0, r6
 800115e:	f7ff f86d 	bl	800023c <__adddf3>
 8001162:	f7ff fd19 	bl	8000b98 <__aeabi_d2f>
					previousSignalPeak = 0;
 8001166:	2300      	movs	r3, #0
					TresholdI = NoiseLevelI + 0.25 * (SignalLevelI - NoiseLevelI);
 8001168:	f8cb 0000 	str.w	r0, [fp]
					previousSignalPeak = 0;
 800116c:	6023      	str	r3, [r4, #0]
					previousMean = 0;
 800116e:	602b      	str	r3, [r5, #0]
 8001170:	e68d      	b.n	8000e8e <arm_PT_ST+0x10a>
						if (previousSignalPeak>TresholdF)
 8001172:	f8df a188 	ldr.w	sl, [pc, #392]	; 80012fc <arm_PT_ST+0x578>
 8001176:	edd4 8a00 	vldr	s17, [r4]
 800117a:	edda 7a00 	vldr	s15, [sl]
 800117e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8001182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001186:	dc4e      	bgt.n	8001226 <arm_PT_ST+0x4a2>
							NoiseLevelF = 0.125*previousSignalPeak + 0.875*NoiseLevelI;
 8001188:	4b5e      	ldr	r3, [pc, #376]	; (8001304 <arm_PT_ST+0x580>)
 800118a:	6818      	ldr	r0, [r3, #0]
 800118c:	f7ff f9b4 	bl	80004f8 <__aeabi_f2d>
 8001190:	4b56      	ldr	r3, [pc, #344]	; (80012ec <arm_PT_ST+0x568>)
 8001192:	2200      	movs	r2, #0
 8001194:	f7ff fa08 	bl	80005a8 <__aeabi_dmul>
 8001198:	4606      	mov	r6, r0
 800119a:	ee18 0a90 	vmov	r0, s17
 800119e:	460f      	mov	r7, r1
 80011a0:	f7ff f9aa 	bl	80004f8 <__aeabi_f2d>
 80011a4:	2200      	movs	r2, #0
 80011a6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80011aa:	f7ff f9fd 	bl	80005a8 <__aeabi_dmul>
 80011ae:	4632      	mov	r2, r6
 80011b0:	463b      	mov	r3, r7
 80011b2:	f7ff f843 	bl	800023c <__adddf3>
 80011b6:	f7ff fcef 	bl	8000b98 <__aeabi_d2f>
							TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 80011ba:	4b4d      	ldr	r3, [pc, #308]	; (80012f0 <arm_PT_ST+0x56c>)
							NoiseLevelF = 0.125*previousSignalPeak + 0.875*NoiseLevelI;
 80011bc:	ee08 0a90 	vmov	s17, r0
							TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 80011c0:	edd3 7a00 	vldr	s15, [r3]
							NoiseLevelF = 0.125*previousSignalPeak + 0.875*NoiseLevelI;
 80011c4:	4b4b      	ldr	r3, [pc, #300]	; (80012f4 <arm_PT_ST+0x570>)
							TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 80011c6:	ee77 7ae8 	vsub.f32	s15, s15, s17
							NoiseLevelF = 0.125*previousSignalPeak + 0.875*NoiseLevelI;
 80011ca:	6018      	str	r0, [r3, #0]
							TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 80011cc:	ee17 0a90 	vmov	r0, s15
 80011d0:	f7ff f992 	bl	80004f8 <__aeabi_f2d>
 80011d4:	4b48      	ldr	r3, [pc, #288]	; (80012f8 <arm_PT_ST+0x574>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	f7ff f9e6 	bl	80005a8 <__aeabi_dmul>
 80011dc:	4680      	mov	r8, r0
 80011de:	ee18 0a90 	vmov	r0, s17
 80011e2:	4689      	mov	r9, r1
 80011e4:	f7ff f988 	bl	80004f8 <__aeabi_f2d>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4640      	mov	r0, r8
 80011ee:	4649      	mov	r1, r9
 80011f0:	f7ff f824 	bl	800023c <__adddf3>
 80011f4:	f7ff fcd0 	bl	8000b98 <__aeabi_d2f>
 80011f8:	f8ca 0000 	str.w	r0, [sl]
							NoiseLevelI = 0.125*meanValue + 0.875*NoiseLevelI;
 80011fc:	ee18 0a10 	vmov	r0, s16
 8001200:	f7ff f97a 	bl	80004f8 <__aeabi_f2d>
 8001204:	2200      	movs	r2, #0
 8001206:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800120a:	f7ff f9cd 	bl	80005a8 <__aeabi_dmul>
 800120e:	4632      	mov	r2, r6
 8001210:	463b      	mov	r3, r7
 8001212:	f7ff f813 	bl	800023c <__adddf3>
 8001216:	f7ff fcbf 	bl	8000b98 <__aeabi_d2f>
 800121a:	4a3a      	ldr	r2, [pc, #232]	; (8001304 <arm_PT_ST+0x580>)
							TresholdI = NoiseLevelI + 0.25 * (SignalLevelI - NoiseLevelI);
 800121c:	4b38      	ldr	r3, [pc, #224]	; (8001300 <arm_PT_ST+0x57c>)
							NoiseLevelI = 0.125*meanValue + 0.875*NoiseLevelI;
 800121e:	6010      	str	r0, [r2, #0]
 8001220:	ee08 0a10 	vmov	s16, r0
 8001224:	e785      	b.n	8001132 <arm_PT_ST+0x3ae>
							SignalLevelF = 0.125*previousSignalPeak + 0.875*SignalLevelF;
 8001226:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80012f0 <arm_PT_ST+0x56c>
							SignalLevelI = 0.125*meanValue + 0.875*SignalLevelI;
 800122a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8001300 <arm_PT_ST+0x57c>
							SignalLevelF = 0.125*previousSignalPeak + 0.875*SignalLevelF;
 800122e:	f8d9 0000 	ldr.w	r0, [r9]
 8001232:	f7ff f961 	bl	80004f8 <__aeabi_f2d>
 8001236:	4b2d      	ldr	r3, [pc, #180]	; (80012ec <arm_PT_ST+0x568>)
 8001238:	2200      	movs	r2, #0
 800123a:	f7ff f9b5 	bl	80005a8 <__aeabi_dmul>
 800123e:	ec41 0b1a 	vmov	d10, r0, r1
 8001242:	ee18 0a90 	vmov	r0, s17
 8001246:	f7ff f957 	bl	80004f8 <__aeabi_f2d>
 800124a:	2200      	movs	r2, #0
 800124c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001250:	f7ff f9aa 	bl	80005a8 <__aeabi_dmul>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	ec51 0b1a 	vmov	r0, r1, d10
 800125c:	f7fe ffee 	bl	800023c <__adddf3>
 8001260:	f7ff fc9a 	bl	8000b98 <__aeabi_d2f>
							TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 8001264:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <arm_PT_ST+0x570>)
							SignalLevelF = 0.125*previousSignalPeak + 0.875*SignalLevelF;
 8001266:	f8c9 0000 	str.w	r0, [r9]
							TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 800126a:	ed93 9a00 	vldr	s18, [r3]
							SignalLevelF = 0.125*previousSignalPeak + 0.875*SignalLevelF;
 800126e:	ee07 0a90 	vmov	s15, r0
							TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 8001272:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8001276:	ee17 0a90 	vmov	r0, s15
 800127a:	f7ff f93d 	bl	80004f8 <__aeabi_f2d>
 800127e:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <arm_PT_ST+0x574>)
 8001280:	2200      	movs	r2, #0
 8001282:	f7ff f991 	bl	80005a8 <__aeabi_dmul>
 8001286:	ec41 0b1a 	vmov	d10, r0, r1
 800128a:	ee19 0a10 	vmov	r0, s18
 800128e:	f7ff f933 	bl	80004f8 <__aeabi_f2d>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	ec51 0b1a 	vmov	r0, r1, d10
 800129a:	f7fe ffcf 	bl	800023c <__adddf3>
 800129e:	f7ff fc7b 	bl	8000b98 <__aeabi_d2f>
							lastQRSpeak = previousSignalPeak;
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <arm_PT_ST+0x584>)
							TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 80012a4:	f8ca 0000 	str.w	r0, [sl]
							lastQRSpeak = previousSignalPeak;
 80012a8:	edc3 8a00 	vstr	s17, [r3]
							SignalLevelI = 0.125*meanValue + 0.875*SignalLevelI;
 80012ac:	f8d8 0000 	ldr.w	r0, [r8]
 80012b0:	f7ff f922 	bl	80004f8 <__aeabi_f2d>
 80012b4:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <arm_PT_ST+0x568>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	f7ff f976 	bl	80005a8 <__aeabi_dmul>
 80012bc:	4681      	mov	r9, r0
 80012be:	ee18 0a10 	vmov	r0, s16
 80012c2:	468a      	mov	sl, r1
 80012c4:	f7ff f918 	bl	80004f8 <__aeabi_f2d>
 80012c8:	2200      	movs	r2, #0
 80012ca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80012ce:	f7ff f96b 	bl	80005a8 <__aeabi_dmul>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4648      	mov	r0, r9
 80012d8:	4651      	mov	r1, sl
 80012da:	f7fe ffaf 	bl	800023c <__adddf3>
 80012de:	f7ff fc5b 	bl	8000b98 <__aeabi_d2f>
 80012e2:	ee07 0a90 	vmov	s15, r0
 80012e6:	f8c8 0000 	str.w	r0, [r8]
 80012ea:	e677      	b.n	8000fdc <arm_PT_ST+0x258>
 80012ec:	3fec0000 	.word	0x3fec0000
 80012f0:	20000218 	.word	0x20000218
 80012f4:	20000210 	.word	0x20000210
 80012f8:	3fd00000 	.word	0x3fd00000
 80012fc:	20000220 	.word	0x20000220
 8001300:	2000021c 	.word	0x2000021c
 8001304:	20000214 	.word	0x20000214
 8001308:	20000270 	.word	0x20000270
 800130c:	00000000 	.word	0x00000000

08001310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001310:	b510      	push	{r4, lr}
 8001312:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001314:	2228      	movs	r2, #40	; 0x28
 8001316:	2100      	movs	r1, #0
 8001318:	a80b      	add	r0, sp, #44	; 0x2c
 800131a:	f001 fab5 	bl	8002888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800131e:	2300      	movs	r3, #0
 8001320:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001324:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001328:	e9cd 3306 	strd	r3, r3, [sp, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800132c:	4928      	ldr	r1, [pc, #160]	; (80013d0 <SystemClock_Config+0xc0>)
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800132e:	9308      	str	r3, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001330:	680a      	ldr	r2, [r1, #0]
 8001332:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800133a:	600a      	str	r2, [r1, #0]
 800133c:	680a      	ldr	r2, [r1, #0]
 800133e:	f402 62c0 	and.w	r2, r2, #1536	; 0x600

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8001342:	2122      	movs	r1, #34	; 0x22
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001344:	9201      	str	r2, [sp, #4]
 8001346:	9a01      	ldr	r2, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8001348:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800134a:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800134c:	f44f 7180 	mov.w	r1, #256	; 0x100
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001350:	2001      	movs	r0, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001352:	910d      	str	r1, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001354:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001356:	2160      	movs	r1, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001358:	2202      	movs	r2, #2
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800135a:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800135e:	e9cd 0316 	strd	r0, r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001362:	9011      	str	r0, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001364:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001366:	2420      	movs	r4, #32
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001368:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800136c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001370:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001374:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001376:	e9cd 4118 	strd	r4, r1, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800137a:	e9cd 321a 	strd	r3, r2, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137e:	f000 fad7 	bl	8001930 <HAL_RCC_OscConfig>
 8001382:	b108      	cbz	r0, 8001388 <SystemClock_Config+0x78>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001384:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001386:	e7fe      	b.n	8001386 <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001388:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 80013b8 <SystemClock_Config+0xa8>
 800138c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001390:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 80013c0 <SystemClock_Config+0xb0>
 8001394:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001398:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 80013c8 <SystemClock_Config+0xb8>
 800139c:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800139e:	2103      	movs	r1, #3
 80013a0:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80013a2:	ed8d 7b06 	vstr	d7, [sp, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80013a6:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013a8:	f000 fe1c 	bl	8001fe4 <HAL_RCC_ClockConfig>
 80013ac:	b108      	cbz	r0, 80013b2 <SystemClock_Config+0xa2>
 80013ae:	b672      	cpsid	i
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <SystemClock_Config+0xa0>
}
 80013b2:	b01c      	add	sp, #112	; 0x70
 80013b4:	bd10      	pop	{r4, pc}
 80013b6:	bf00      	nop
 80013b8:	0000006f 	.word	0x0000006f
 80013bc:	00000003 	.word	0x00000003
	...
 80013cc:	00000080 	.word	0x00000080
 80013d0:	58000400 	.word	0x58000400

080013d4 <PeriphCommonClock_Config>:
{
 80013d4:	b500      	push	{lr}
 80013d6:	b095      	sub	sp, #84	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013d8:	2248      	movs	r2, #72	; 0x48
 80013da:	2100      	movs	r1, #0
 80013dc:	a801      	add	r0, sp, #4
 80013de:	f001 fa53 	bl	8002888 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80013e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80013e6:	2310      	movs	r3, #16
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013e8:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80013ea:	9200      	str	r2, [sp, #0]
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80013ec:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ee:	f000 ff7f 	bl	80022f0 <HAL_RCCEx_PeriphCLKConfig>
 80013f2:	b108      	cbz	r0, 80013f8 <PeriphCommonClock_Config+0x24>
 80013f4:	b672      	cpsid	i
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <PeriphCommonClock_Config+0x22>
}
 80013f8:	b015      	add	sp, #84	; 0x54
 80013fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80013fe:	bf00      	nop

08001400 <main>:
{
 8001400:	b570      	push	{r4, r5, r6, lr}
  HAL_Init();
 8001402:	f000 f91b 	bl	800163c <HAL_Init>
  SystemClock_Config();
 8001406:	f7ff ff83 	bl	8001310 <SystemClock_Config>
  PeriphCommonClock_Config();
 800140a:	f7ff ffe3 	bl	80013d4 <PeriphCommonClock_Config>
	arm_PT_init();
 800140e:	f7ff fc49 	bl	8000ca4 <arm_PT_init>
	for (uint16_t i = 0; i < N; i++)
 8001412:	4d09      	ldr	r5, [pc, #36]	; (8001438 <main+0x38>)
	arm_PT_init();
 8001414:	26fa      	movs	r6, #250	; 0xfa
 8001416:	4c09      	ldr	r4, [pc, #36]	; (800143c <main+0x3c>)
			arm_PT_ST (ECG[count]);
 8001418:	f934 0f02 	ldrsh.w	r0, [r4, #2]!
 800141c:	f7ff fcb2 	bl	8000d84 <arm_PT_ST>
		}while (count < ECG_samples);
 8001420:	42ac      	cmp	r4, r5
 8001422:	d1f9      	bne.n	8001418 <main+0x18>
	for (uint16_t i = 0; i < N; i++)
 8001424:	3e01      	subs	r6, #1
 8001426:	b2b6      	uxth	r6, r6
 8001428:	2e00      	cmp	r6, #0
 800142a:	d1f4      	bne.n	8001416 <main+0x16>
    HAL_SuspendTick();
 800142c:	f000 f936 	bl	800169c <HAL_SuspendTick>
	HAL_PWR_EnterSTANDBYMode();
 8001430:	f000 f9ae 	bl	8001790 <HAL_PWR_EnterSTANDBYMode>
}
 8001434:	4630      	mov	r0, r6
 8001436:	bd70      	pop	{r4, r5, r6, pc}
 8001438:	08008a8e 	.word	0x08008a8e
 800143c:	080071ba 	.word	0x080071ba

08001440 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop

08001444 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <NMI_Handler>
 8001446:	bf00      	nop

08001448 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <HardFault_Handler>
 800144a:	bf00      	nop

0800144c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800144c:	e7fe      	b.n	800144c <MemManage_Handler>
 800144e:	bf00      	nop

08001450 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <BusFault_Handler>
 8001452:	bf00      	nop

08001454 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <UsageFault_Handler>
 8001456:	bf00      	nop

08001458 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop

0800145c <DebugMon_Handler>:
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop

08001460 <PendSV_Handler>:
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop

08001464 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001464:	f000 b902 	b.w	800166c <HAL_IncTick>

08001468 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001468:	2001      	movs	r0, #1
 800146a:	4770      	bx	lr

0800146c <_kill>:

int _kill(int pid, int sig)
{
 800146c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800146e:	f001 f9d3 	bl	8002818 <__errno>
 8001472:	2316      	movs	r3, #22
 8001474:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001476:	f04f 30ff 	mov.w	r0, #4294967295
 800147a:	bd08      	pop	{r3, pc}

0800147c <_exit>:

void _exit (int status)
{
 800147c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800147e:	f001 f9cb 	bl	8002818 <__errno>
 8001482:	2316      	movs	r3, #22
 8001484:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001486:	e7fe      	b.n	8001486 <_exit+0xa>

08001488 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001488:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148a:	1e16      	subs	r6, r2, #0
 800148c:	dd07      	ble.n	800149e <_read+0x16>
 800148e:	460c      	mov	r4, r1
 8001490:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8001492:	f3af 8000 	nop.w
 8001496:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149a:	42a5      	cmp	r5, r4
 800149c:	d1f9      	bne.n	8001492 <_read+0xa>
	}

return len;
}
 800149e:	4630      	mov	r0, r6
 80014a0:	bd70      	pop	{r4, r5, r6, pc}
 80014a2:	bf00      	nop

080014a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014a4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a6:	1e16      	subs	r6, r2, #0
 80014a8:	dd07      	ble.n	80014ba <_write+0x16>
 80014aa:	460c      	mov	r4, r1
 80014ac:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80014ae:	f814 0b01 	ldrb.w	r0, [r4], #1
 80014b2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b6:	42ac      	cmp	r4, r5
 80014b8:	d1f9      	bne.n	80014ae <_write+0xa>
	}
	return len;
}
 80014ba:	4630      	mov	r0, r6
 80014bc:	bd70      	pop	{r4, r5, r6, pc}
 80014be:	bf00      	nop

080014c0 <_close>:

int _close(int file)
{
	return -1;
}
 80014c0:	f04f 30ff 	mov.w	r0, #4294967295
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop

080014c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80014c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014cc:	604b      	str	r3, [r1, #4]
	return 0;
}
 80014ce:	2000      	movs	r0, #0
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop

080014d4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80014d4:	2001      	movs	r0, #1
 80014d6:	4770      	bx	lr

080014d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80014d8:	2000      	movs	r0, #0
 80014da:	4770      	bx	lr

080014dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014dc:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014de:	4c0c      	ldr	r4, [pc, #48]	; (8001510 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <_sbrk+0x38>)
 80014e2:	490d      	ldr	r1, [pc, #52]	; (8001518 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 80014e4:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e6:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 80014e8:	b12a      	cbz	r2, 80014f6 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ea:	4410      	add	r0, r2
 80014ec:	4288      	cmp	r0, r1
 80014ee:	d807      	bhi.n	8001500 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80014f0:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 80014f2:	4610      	mov	r0, r2
 80014f4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80014f6:	4a09      	ldr	r2, [pc, #36]	; (800151c <_sbrk+0x40>)
 80014f8:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80014fa:	4410      	add	r0, r2
 80014fc:	4288      	cmp	r0, r1
 80014fe:	d9f7      	bls.n	80014f0 <_sbrk+0x14>
    errno = ENOMEM;
 8001500:	f001 f98a 	bl	8002818 <__errno>
 8001504:	230c      	movs	r3, #12
    return (void *)-1;
 8001506:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 800150a:	6003      	str	r3, [r0, #0]
}
 800150c:	4610      	mov	r0, r2
 800150e:	bd10      	pop	{r4, pc}
 8001510:	2000038c 	.word	0x2000038c
 8001514:	20030000 	.word	0x20030000
 8001518:	00000400 	.word	0x00000400
 800151c:	200003a8 	.word	0x200003a8

08001520 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001520:	4914      	ldr	r1, [pc, #80]	; (8001574 <SystemInit+0x54>)
 8001522:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800152a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800152e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_MSION;
 8001532:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001534:	4a10      	ldr	r2, [pc, #64]	; (8001578 <SystemInit+0x58>)
  RCC->CFGR = 0x00070000U;
 8001536:	f44f 20e0 	mov.w	r0, #458752	; 0x70000
  RCC->CR |= RCC_CR_MSION;
 800153a:	f041 0101 	orr.w	r1, r1, #1
 800153e:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00070000U;
 8001540:	6098      	str	r0, [r3, #8]
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001542:	6818      	ldr	r0, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001544:	490d      	ldr	r1, [pc, #52]	; (800157c <SystemInit+0x5c>)
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001546:	4002      	ands	r2, r0
 8001548:	601a      	str	r2, [r3, #0]
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800154a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800154e:	f022 0205 	bic.w	r2, r2, #5
 8001552:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001556:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800155a:	f022 0201 	bic.w	r2, r2, #1
 800155e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  RCC->PLLCFGR = 0x22041000U;
 8001562:	60d9      	str	r1, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001564:	6119      	str	r1, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001566:	681a      	ldr	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001568:	2100      	movs	r1, #0
  RCC->CR &= 0xFFFBFFFFU;
 800156a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800156e:	601a      	str	r2, [r3, #0]
  RCC->CIER = 0x00000000;
 8001570:	6199      	str	r1, [r3, #24]
}
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00
 8001578:	faf6fefb 	.word	0xfaf6fefb
 800157c:	22041000 	.word	0x22041000

08001580 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001580:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001582:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001584:	3304      	adds	r3, #4

08001586 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001586:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001588:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800158a:	d3f9      	bcc.n	8001580 <CopyDataInit>
  bx lr
 800158c:	4770      	bx	lr

0800158e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800158e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001590:	3004      	adds	r0, #4

08001592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001592:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001594:	d3fb      	bcc.n	800158e <FillZerobss>
  bx lr
 8001596:	4770      	bx	lr

08001598 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001598:	480c      	ldr	r0, [pc, #48]	; (80015cc <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800159a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800159c:	f7ff ffc0 	bl	8001520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80015a0:	480b      	ldr	r0, [pc, #44]	; (80015d0 <LoopForever+0x8>)
 80015a2:	490c      	ldr	r1, [pc, #48]	; (80015d4 <LoopForever+0xc>)
 80015a4:	4a0c      	ldr	r2, [pc, #48]	; (80015d8 <LoopForever+0x10>)
 80015a6:	2300      	movs	r3, #0
 80015a8:	f7ff ffed 	bl	8001586 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80015ac:	480b      	ldr	r0, [pc, #44]	; (80015dc <LoopForever+0x14>)
 80015ae:	490c      	ldr	r1, [pc, #48]	; (80015e0 <LoopForever+0x18>)
 80015b0:	2300      	movs	r3, #0
 80015b2:	f7ff ffee 	bl	8001592 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80015b6:	480b      	ldr	r0, [pc, #44]	; (80015e4 <LoopForever+0x1c>)
 80015b8:	490b      	ldr	r1, [pc, #44]	; (80015e8 <LoopForever+0x20>)
 80015ba:	2300      	movs	r3, #0
 80015bc:	f7ff ffe9 	bl	8001592 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015c0:	f001 f930 	bl	8002824 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80015c4:	f7ff ff1c 	bl	8001400 <main>

080015c8 <LoopForever>:

LoopForever:
  b LoopForever
 80015c8:	e7fe      	b.n	80015c8 <LoopForever>
 80015ca:	0000      	.short	0x0000
  ldr   r0, =_estack
 80015cc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80015d0:	20000004 	.word	0x20000004
 80015d4:	200001e4 	.word	0x200001e4
 80015d8:	08008fc4 	.word	0x08008fc4
  INIT_BSS _sbss, _ebss
 80015dc:	200001e4 	.word	0x200001e4
 80015e0:	200003a4 	.word	0x200003a4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80015e4:	20030000 	.word	0x20030000
 80015e8:	20030000 	.word	0x20030000

080015ec <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015ec:	e7fe      	b.n	80015ec <ADC1_IRQHandler>
	...

080015f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0U)
 80015f2:	4c10      	ldr	r4, [pc, #64]	; (8001634 <HAL_InitTick+0x44>)
 80015f4:	7823      	ldrb	r3, [r4, #0]
 80015f6:	b90b      	cbnz	r3, 80015fc <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80015f8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80015fa:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015fc:	4605      	mov	r5, r0
 80015fe:	f000 fe3f 	bl	8002280 <HAL_RCC_GetHCLKFreq>
 8001602:	7822      	ldrb	r2, [r4, #0]
 8001604:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001608:	fbb3 f3f2 	udiv	r3, r3, r2
 800160c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001610:	f000 f89c 	bl	800174c <HAL_SYSTICK_Config>
 8001614:	4604      	mov	r4, r0
 8001616:	2800      	cmp	r0, #0
 8001618:	d1ee      	bne.n	80015f8 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800161a:	2d0f      	cmp	r5, #15
 800161c:	d8ec      	bhi.n	80015f8 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800161e:	4602      	mov	r2, r0
 8001620:	4629      	mov	r1, r5
 8001622:	f04f 30ff 	mov.w	r0, #4294967295
 8001626:	f000 f853 	bl	80016d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800162a:	4b03      	ldr	r3, [pc, #12]	; (8001638 <HAL_InitTick+0x48>)
 800162c:	4620      	mov	r0, r4
 800162e:	601d      	str	r5, [r3, #0]
}
 8001630:	bd38      	pop	{r3, r4, r5, pc}
 8001632:	bf00      	nop
 8001634:	20000008 	.word	0x20000008
 8001638:	2000000c 	.word	0x2000000c

0800163c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800163c:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <HAL_Init+0x2c>)
 800163e:	6813      	ldr	r3, [r2, #0]
 8001640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8001644:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001646:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001648:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800164a:	f000 f82f 	bl	80016ac <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800164e:	200f      	movs	r0, #15
 8001650:	f7ff ffce 	bl	80015f0 <HAL_InitTick>
 8001654:	b110      	cbz	r0, 800165c <HAL_Init+0x20>
    status = HAL_ERROR;
 8001656:	2401      	movs	r4, #1
}
 8001658:	4620      	mov	r0, r4
 800165a:	bd10      	pop	{r4, pc}
 800165c:	4604      	mov	r4, r0
    HAL_MspInit();
 800165e:	f7ff feef 	bl	8001440 <HAL_MspInit>
}
 8001662:	4620      	mov	r0, r4
 8001664:	bd10      	pop	{r4, pc}
 8001666:	bf00      	nop
 8001668:	58004000 	.word	0x58004000

0800166c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800166c:	4a03      	ldr	r2, [pc, #12]	; (800167c <HAL_IncTick+0x10>)
 800166e:	4b04      	ldr	r3, [pc, #16]	; (8001680 <HAL_IncTick+0x14>)
 8001670:	6811      	ldr	r1, [r2, #0]
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	440b      	add	r3, r1
 8001676:	6013      	str	r3, [r2, #0]
}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000390 	.word	0x20000390
 8001680:	20000008 	.word	0x20000008

08001684 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001684:	4b01      	ldr	r3, [pc, #4]	; (800168c <HAL_GetTick+0x8>)
 8001686:	6818      	ldr	r0, [r3, #0]
}
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	20000390 	.word	0x20000390

08001690 <HAL_GetTickPrio>:
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
 8001690:	4b01      	ldr	r3, [pc, #4]	; (8001698 <HAL_GetTickPrio+0x8>)
}
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	2000000c 	.word	0x2000000c

0800169c <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800169c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80016a0:	6913      	ldr	r3, [r2, #16]
 80016a2:	f023 0302 	bic.w	r3, r3, #2
 80016a6:	6113      	str	r3, [r2, #16]
}
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop

080016ac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ac:	4907      	ldr	r1, [pc, #28]	; (80016cc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80016ae:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b2:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ba:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016bc:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016be:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80016c6:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d0:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <HAL_NVIC_SetPriority+0x74>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d8:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016da:	f1c3 0e07 	rsb	lr, r3, #7
 80016de:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e6:	bf28      	it	cs
 80016e8:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ec:	f1bc 0f06 	cmp.w	ip, #6
 80016f0:	d91b      	bls.n	800172a <HAL_NVIC_SetPriority+0x5a>
 80016f2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f4:	f04f 3cff 	mov.w	ip, #4294967295
 80016f8:	fa0c fc03 	lsl.w	ip, ip, r3
 80016fc:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	f04f 3cff 	mov.w	ip, #4294967295
 8001704:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001708:	ea21 010c 	bic.w	r1, r1, ip
 800170c:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800170e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001710:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001714:	db0c      	blt.n	8001730 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001716:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800171a:	0109      	lsls	r1, r1, #4
 800171c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001720:	b2c9      	uxtb	r1, r1
 8001722:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001726:	f85d fb04 	ldr.w	pc, [sp], #4
 800172a:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172c:	4613      	mov	r3, r2
 800172e:	e7e7      	b.n	8001700 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <HAL_NVIC_SetPriority+0x78>)
 8001732:	f000 000f 	and.w	r0, r0, #15
 8001736:	0109      	lsls	r1, r1, #4
 8001738:	4403      	add	r3, r0
 800173a:	b2c9      	uxtb	r1, r1
 800173c:	7619      	strb	r1, [r3, #24]
 800173e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001742:	bf00      	nop
 8001744:	e000ed00 	.word	0xe000ed00
 8001748:	e000ecfc 	.word	0xe000ecfc

0800174c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800174c:	3801      	subs	r0, #1
 800174e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001752:	d210      	bcs.n	8001776 <HAL_SYSTICK_Config+0x2a>
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001754:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001756:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175a:	4c08      	ldr	r4, [pc, #32]	; (800177c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800175c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175e:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8001762:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001766:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001768:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800176a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800176c:	619a      	str	r2, [r3, #24]
  return SysTick_Config(TicksNumb);
}
 800176e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001772:	6119      	str	r1, [r3, #16]
 8001774:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001776:	2001      	movs	r0, #1
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001780:	4a02      	ldr	r2, [pc, #8]	; (800178c <HAL_PWR_EnableBkUpAccess+0xc>)
 8001782:	6813      	ldr	r3, [r2, #0]
 8001784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001788:	6013      	str	r3, [r2, #0]
}
 800178a:	4770      	bx	lr
 800178c:	58000400 	.word	0x58000400

08001790 <HAL_PWR_EnterSTANDBYMode>:
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STANDBY);
 8001790:	4908      	ldr	r1, [pc, #32]	; (80017b4 <HAL_PWR_EnterSTANDBYMode+0x24>)

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001792:	4a09      	ldr	r2, [pc, #36]	; (80017b8 <HAL_PWR_EnterSTANDBYMode+0x28>)
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STANDBY);
 8001794:	680b      	ldr	r3, [r1, #0]
 8001796:	f023 0307 	bic.w	r3, r3, #7
 800179a:	f043 0303 	orr.w	r3, r3, #3
 800179e:	600b      	str	r3, [r1, #0]
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80017a0:	6913      	ldr	r3, [r2, #16]
 80017a2:	f043 0304 	orr.w	r3, r3, #4
 80017a6:	6113      	str	r3, [r2, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif

  /* Request Wait For Interrupt */
  __WFI();
 80017a8:	bf30      	wfi

  /* Following code is executed after wake up if system did not go to STANDBY
     mode according to system power policy */

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80017aa:	6913      	ldr	r3, [r2, #16]
 80017ac:	f023 0304 	bic.w	r3, r3, #4
 80017b0:	6113      	str	r3, [r2, #16]
}
 80017b2:	4770      	bx	lr
 80017b4:	58000400 	.word	0x58000400
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017bc:	4b02      	ldr	r3, [pc, #8]	; (80017c8 <HAL_PWREx_GetVoltageRange+0xc>)
 80017be:	6818      	ldr	r0, [r3, #0]
}
 80017c0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	58000400 	.word	0x58000400

080017cc <RCC_SetFlashLatencyFromMSIRange>:

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80017cc:	28b0      	cmp	r0, #176	; 0xb0
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80017ce:	4b31      	ldr	r3, [pc, #196]	; (8001894 <RCC_SetFlashLatencyFromMSIRange+0xc8>)
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80017d0:	4a31      	ldr	r2, [pc, #196]	; (8001898 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80017d2:	bf98      	it	ls
 80017d4:	0900      	lsrls	r0, r0, #4
{
 80017d6:	b570      	push	{r4, r5, r6, lr}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80017d8:	bf8c      	ite	hi
 80017da:	6adc      	ldrhi	r4, [r3, #44]	; 0x2c
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80017dc:	f853 4020 	ldrls.w	r4, [r3, r0, lsl #2]
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80017e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 80017e4:	b084      	sub	sp, #16
 80017e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80017ea:	f003 030f 	and.w	r3, r3, #15
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80017ee:	ae04      	add	r6, sp, #16
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80017f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f4:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80017f8:	f7ff ffe0 	bl	80017bc <HAL_PWREx_GetVoltageRange>
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80017fc:	4b27      	ldr	r3, [pc, #156]	; (800189c <RCC_SetFlashLatencyFromMSIRange+0xd0>)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80017fe:	4605      	mov	r5, r0
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001800:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001802:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001806:	e906 000f 	stmdb	r6, {r0, r1, r2, r3}
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800180a:	d029      	beq.n	8001860 <RCC_SetFlashLatencyFromMSIRange+0x94>
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800180c:	4b24      	ldr	r3, [pc, #144]	; (80018a0 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 800180e:	429c      	cmp	r4, r3
 8001810:	d33a      	bcc.n	8001888 <RCC_SetFlashLatencyFromMSIRange+0xbc>
 8001812:	f503 03b7 	add.w	r3, r3, #5996544	; 0x5b8000
 8001816:	f603 537f 	addw	r3, r3, #3455	; 0xd7f
 800181a:	429c      	cmp	r4, r3
 800181c:	d936      	bls.n	800188c <RCC_SetFlashLatencyFromMSIRange+0xc0>
 800181e:	f503 1374 	add.w	r3, r3, #3997696	; 0x3d0000
 8001822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001826:	429c      	cmp	r4, r3
 8001828:	d932      	bls.n	8001890 <RCC_SetFlashLatencyFromMSIRange+0xc4>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800182a:	2600      	movs	r6, #0
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800182c:	4c1d      	ldr	r4, [pc, #116]	; (80018a4 <RCC_SetFlashLatencyFromMSIRange+0xd8>)
 800182e:	6823      	ldr	r3, [r4, #0]
 8001830:	f023 0307 	bic.w	r3, r3, #7
 8001834:	4333      	orrs	r3, r6
 8001836:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001838:	f7ff ff24 	bl	8001684 <HAL_GetTick>
 800183c:	4605      	mov	r5, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800183e:	e004      	b.n	800184a <RCC_SetFlashLatencyFromMSIRange+0x7e>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001840:	f7ff ff20 	bl	8001684 <HAL_GetTick>
 8001844:	1b40      	subs	r0, r0, r5
 8001846:	2802      	cmp	r0, #2
 8001848:	d807      	bhi.n	800185a <RCC_SetFlashLatencyFromMSIRange+0x8e>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800184a:	6823      	ldr	r3, [r4, #0]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	429e      	cmp	r6, r3
 8001852:	d1f5      	bne.n	8001840 <RCC_SetFlashLatencyFromMSIRange+0x74>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8001854:	2000      	movs	r0, #0
}
 8001856:	b004      	add	sp, #16
 8001858:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 800185a:	2003      	movs	r0, #3
}
 800185c:	b004      	add	sp, #16
 800185e:	bd70      	pop	{r4, r5, r6, pc}
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <RCC_SetFlashLatencyFromMSIRange+0xdc>)
 8001862:	429c      	cmp	r4, r3
 8001864:	d910      	bls.n	8001888 <RCC_SetFlashLatencyFromMSIRange+0xbc>
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <RCC_SetFlashLatencyFromMSIRange+0xe0>)
 8001868:	429c      	cmp	r4, r3
 800186a:	d90f      	bls.n	800188c <RCC_SetFlashLatencyFromMSIRange+0xc0>
 800186c:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <RCC_SetFlashLatencyFromMSIRange+0xe4>)
 800186e:	429c      	cmp	r4, r3
 8001870:	d90e      	bls.n	8001890 <RCC_SetFlashLatencyFromMSIRange+0xc4>
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <RCC_SetFlashLatencyFromMSIRange+0xe8>)
 8001874:	429c      	cmp	r4, r3
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001876:	bf38      	it	cc
 8001878:	2303      	movcc	r3, #3
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800187a:	d2d6      	bcs.n	800182a <RCC_SetFlashLatencyFromMSIRange+0x5e>
        latency = FLASH_LATENCY_RANGE[index];
 800187c:	aa04      	add	r2, sp, #16
 800187e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001882:	f853 6c10 	ldr.w	r6, [r3, #-16]
        break;
 8001886:	e7d1      	b.n	800182c <RCC_SetFlashLatencyFromMSIRange+0x60>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001888:	2300      	movs	r3, #0
 800188a:	e7f7      	b.n	800187c <RCC_SetFlashLatencyFromMSIRange+0xb0>
 800188c:	2301      	movs	r3, #1
 800188e:	e7f5      	b.n	800187c <RCC_SetFlashLatencyFromMSIRange+0xb0>
 8001890:	2302      	movs	r3, #2
 8001892:	e7f3      	b.n	800187c <RCC_SetFlashLatencyFromMSIRange+0xb0>
 8001894:	08008ad4 	.word	0x08008ad4
 8001898:	08008a94 	.word	0x08008a94
 800189c:	08007170 	.word	0x08007170
 80018a0:	006acfc0 	.word	0x006acfc0
 80018a4:	58004000 	.word	0x58004000
 80018a8:	0121eabf 	.word	0x0121eabf
 80018ac:	0234933f 	.word	0x0234933f
 80018b0:	03473bbf 	.word	0x03473bbf
 80018b4:	03dfd240 	.word	0x03dfd240

080018b8 <HAL_RCC_GetSysClockFreq.part.0>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80018b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
uint32_t HAL_RCC_GetSysClockFreq(void)
 80018bc:	b410      	push	{r4}
 80018be:	68d3      	ldr	r3, [r2, #12]
 80018c0:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d01d      	beq.n	8001904 <HAL_RCC_GetSysClockFreq.part.0+0x4c>
 80018c8:	2b03      	cmp	r3, #3
 80018ca:	d11d      	bne.n	8001908 <HAL_RCC_GetSysClockFreq.part.0+0x50>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80018cc:	6812      	ldr	r2, [r2, #0]
          pllinputfreq = HSE_VALUE / 2U;
 80018ce:	4b14      	ldr	r3, [pc, #80]	; (8001920 <HAL_RCC_GetSysClockFreq.part.0+0x68>)
 80018d0:	4c14      	ldr	r4, [pc, #80]	; (8001924 <HAL_RCC_GetSysClockFreq.part.0+0x6c>)
 80018d2:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 80018d6:	bf08      	it	eq
 80018d8:	461c      	moveq	r4, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80018da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018de:	68cb      	ldr	r3, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80018e0:	68ca      	ldr	r2, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80018e2:	68c8      	ldr	r0, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80018e4:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80018e8:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80018ec:	0f40      	lsrs	r0, r0, #29
 80018ee:	fb04 f303 	mul.w	r3, r4, r3
 80018f2:	3201      	adds	r2, #1
 80018f4:	3001      	adds	r0, #1
 80018f6:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80018fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018fe:	fbb3 f0f0 	udiv	r0, r3, r0
 8001902:	4770      	bx	lr
    switch (pllsource)
 8001904:	4c08      	ldr	r4, [pc, #32]	; (8001928 <HAL_RCC_GetSysClockFreq.part.0+0x70>)
 8001906:	e7e8      	b.n	80018da <HAL_RCC_GetSysClockFreq.part.0+0x22>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001908:	6813      	ldr	r3, [r2, #0]
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800190a:	4a08      	ldr	r2, [pc, #32]	; (800192c <HAL_RCC_GetSysClockFreq.part.0+0x74>)
 800190c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001910:	2bb0      	cmp	r3, #176	; 0xb0
 8001912:	bf28      	it	cs
 8001914:	23b0      	movcs	r3, #176	; 0xb0
 8001916:	091b      	lsrs	r3, r3, #4
 8001918:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
        break;
 800191c:	e7dd      	b.n	80018da <HAL_RCC_GetSysClockFreq.part.0+0x22>
 800191e:	bf00      	nop
 8001920:	007a1200 	.word	0x007a1200
 8001924:	003d0900 	.word	0x003d0900
 8001928:	00f42400 	.word	0x00f42400
 800192c:	08008ad4 	.word	0x08008ad4

08001930 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8001930:	2800      	cmp	r0, #0
 8001932:	f000 82bb 	beq.w	8001eac <HAL_RCC_OscConfig+0x57c>
{
 8001936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001938:	6803      	ldr	r3, [r0, #0]
 800193a:	069a      	lsls	r2, r3, #26
 800193c:	4604      	mov	r4, r0
 800193e:	d529      	bpl.n	8001994 <HAL_RCC_OscConfig+0x64>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001940:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001944:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001946:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001948:	f013 030c 	ands.w	r3, r3, #12
 800194c:	f000 80f9 	beq.w	8001b42 <HAL_RCC_OscConfig+0x212>
 8001950:	2b0c      	cmp	r3, #12
 8001952:	f000 80f1 	beq.w	8001b38 <HAL_RCC_OscConfig+0x208>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001956:	69e3      	ldr	r3, [r4, #28]
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001958:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 8276 	beq.w	8001e4e <HAL_RCC_OscConfig+0x51e>
 8001962:	682b      	ldr	r3, [r5, #0]
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800196a:	f7ff fe8b 	bl	8001684 <HAL_GetTick>
 800196e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001970:	682b      	ldr	r3, [r5, #0]
 8001972:	079b      	lsls	r3, r3, #30
 8001974:	f140 827c 	bpl.w	8001e70 <HAL_RCC_OscConfig+0x540>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001978:	682b      	ldr	r3, [r5, #0]
 800197a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800197c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001980:	4313      	orrs	r3, r2
 8001982:	602b      	str	r3, [r5, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001984:	686b      	ldr	r3, [r5, #4]
 8001986:	6a22      	ldr	r2, [r4, #32]
 8001988:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800198c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001990:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001992:	6823      	ldr	r3, [r4, #0]
 8001994:	07dd      	lsls	r5, r3, #31
 8001996:	d527      	bpl.n	80019e8 <HAL_RCC_OscConfig+0xb8>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001998:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800199c:	688a      	ldr	r2, [r1, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800199e:	68c9      	ldr	r1, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80019a0:	f002 020c 	and.w	r2, r2, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80019a4:	2a08      	cmp	r2, #8
 80019a6:	f000 81f1 	beq.w	8001d8c <HAL_RCC_OscConfig+0x45c>
 80019aa:	2a0c      	cmp	r2, #12
 80019ac:	f000 81e9 	beq.w	8001d82 <HAL_RCC_OscConfig+0x452>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019b0:	6863      	ldr	r3, [r4, #4]
 80019b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b6:	f000 8235 	beq.w	8001e24 <HAL_RCC_OscConfig+0x4f4>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80019ba:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80019be:	682a      	ldr	r2, [r5, #0]
 80019c0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80019c4:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f040 8232 	bne.w	8001e30 <HAL_RCC_OscConfig+0x500>
        tickstart = HAL_GetTick();
 80019cc:	f7ff fe5a 	bl	8001684 <HAL_GetTick>
 80019d0:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80019d2:	682b      	ldr	r3, [r5, #0]
 80019d4:	0399      	lsls	r1, r3, #14
 80019d6:	d506      	bpl.n	80019e6 <HAL_RCC_OscConfig+0xb6>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d8:	f7ff fe54 	bl	8001684 <HAL_GetTick>
 80019dc:	1b80      	subs	r0, r0, r6
 80019de:	2864      	cmp	r0, #100	; 0x64
 80019e0:	d9f7      	bls.n	80019d2 <HAL_RCC_OscConfig+0xa2>
            return HAL_TIMEOUT;
 80019e2:	2003      	movs	r0, #3
}
 80019e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019e6:	6823      	ldr	r3, [r4, #0]
 80019e8:	079a      	lsls	r2, r3, #30
 80019ea:	d52c      	bpl.n	8001a46 <HAL_RCC_OscConfig+0x116>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80019ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019f0:	688a      	ldr	r2, [r1, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80019f2:	68c9      	ldr	r1, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80019f4:	f002 020c 	and.w	r2, r2, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80019f8:	2a04      	cmp	r2, #4
 80019fa:	f000 8120 	beq.w	8001c3e <HAL_RCC_OscConfig+0x30e>
 80019fe:	2a0c      	cmp	r2, #12
 8001a00:	f000 8118 	beq.w	8001c34 <HAL_RCC_OscConfig+0x304>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a04:	68e3      	ldr	r3, [r4, #12]
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001a06:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001a0a:	b183      	cbz	r3, 8001a2e <HAL_RCC_OscConfig+0xfe>
 8001a0c:	682b      	ldr	r3, [r5, #0]
 8001a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a12:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001a14:	f7ff fe36 	bl	8001684 <HAL_GetTick>
 8001a18:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001a1a:	682b      	ldr	r3, [r5, #0]
 8001a1c:	055b      	lsls	r3, r3, #21
 8001a1e:	f100 8235 	bmi.w	8001e8c <HAL_RCC_OscConfig+0x55c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a22:	f7ff fe2f 	bl	8001684 <HAL_GetTick>
 8001a26:	1b80      	subs	r0, r0, r6
 8001a28:	2802      	cmp	r0, #2
 8001a2a:	d9f6      	bls.n	8001a1a <HAL_RCC_OscConfig+0xea>
 8001a2c:	e7d9      	b.n	80019e2 <HAL_RCC_OscConfig+0xb2>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001a2e:	682b      	ldr	r3, [r5, #0]
 8001a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a34:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001a36:	f7ff fe25 	bl	8001684 <HAL_GetTick>
 8001a3a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001a3c:	682b      	ldr	r3, [r5, #0]
 8001a3e:	055f      	lsls	r7, r3, #21
 8001a40:	f100 822d 	bmi.w	8001e9e <HAL_RCC_OscConfig+0x56e>
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001a44:	6823      	ldr	r3, [r4, #0]
 8001a46:	f013 0f18 	tst.w	r3, #24
 8001a4a:	d023      	beq.n	8001a94 <HAL_RCC_OscConfig+0x164>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a4c:	6962      	ldr	r2, [r4, #20]
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001a4e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001a52:	2a00      	cmp	r2, #0
 8001a54:	f000 8100 	beq.w	8001c58 <HAL_RCC_OscConfig+0x328>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001a58:	f013 0f10 	tst.w	r3, #16
 8001a5c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001a60:	f000 8238 	beq.w	8001ed4 <HAL_RCC_OscConfig+0x5a4>
 8001a64:	0798      	lsls	r0, r3, #30
 8001a66:	f100 81a5 	bmi.w	8001db4 <HAL_RCC_OscConfig+0x484>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001a6a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
          tickstart = HAL_GetTick();
 8001a76:	f7ff fe05 	bl	8001684 <HAL_GetTick>
 8001a7a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001a7c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001a80:	0799      	lsls	r1, r3, #30
 8001a82:	f100 8197 	bmi.w	8001db4 <HAL_RCC_OscConfig+0x484>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001a86:	f7ff fdfd 	bl	8001684 <HAL_GetTick>
 8001a8a:	1b80      	subs	r0, r0, r6
 8001a8c:	2802      	cmp	r0, #2
 8001a8e:	d9f5      	bls.n	8001a7c <HAL_RCC_OscConfig+0x14c>
 8001a90:	e7a7      	b.n	80019e2 <HAL_RCC_OscConfig+0xb2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a92:	6823      	ldr	r3, [r4, #0]
 8001a94:	075a      	lsls	r2, r3, #29
 8001a96:	d422      	bmi.n	8001ade <HAL_RCC_OscConfig+0x1ae>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a98:	065a      	lsls	r2, r3, #25
 8001a9a:	d51b      	bpl.n	8001ad4 <HAL_RCC_OscConfig+0x1a4>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001a9e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 80b2 	beq.w	8001c0c <HAL_RCC_OscConfig+0x2dc>
 8001aa8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001ab4:	f7ff fde6 	bl	8001684 <HAL_GetTick>
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001ab8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001abc:	079b      	lsls	r3, r3, #30
 8001abe:	4606      	mov	r6, r0
 8001ac0:	d408      	bmi.n	8001ad4 <HAL_RCC_OscConfig+0x1a4>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ac2:	f7ff fddf 	bl	8001684 <HAL_GetTick>
 8001ac6:	1b80      	subs	r0, r0, r6
 8001ac8:	2802      	cmp	r0, #2
 8001aca:	d88a      	bhi.n	80019e2 <HAL_RCC_OscConfig+0xb2>
 8001acc:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001ad0:	079b      	lsls	r3, r3, #30
 8001ad2:	d5f6      	bpl.n	8001ac2 <HAL_RCC_OscConfig+0x192>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ad4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d176      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x298>
  return HAL_OK;
 8001ada:	2000      	movs	r0, #0
}
 8001adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ade:	4daf      	ldr	r5, [pc, #700]	; (8001d9c <HAL_RCC_OscConfig+0x46c>)
 8001ae0:	682b      	ldr	r3, [r5, #0]
 8001ae2:	05db      	lsls	r3, r3, #23
 8001ae4:	f140 80dc 	bpl.w	8001ca0 <HAL_RCC_OscConfig+0x370>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae8:	68a3      	ldr	r3, [r4, #8]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	f000 8130 	beq.w	8001d50 <HAL_RCC_OscConfig+0x420>
 8001af0:	2b05      	cmp	r3, #5
 8001af2:	f000 821e 	beq.w	8001f32 <HAL_RCC_OscConfig+0x602>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001af6:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001afa:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8001afe:	f022 0201 	bic.w	r2, r2, #1
 8001b02:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b06:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8001b0a:	f022 0204 	bic.w	r2, r2, #4
 8001b0e:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f040 8124 	bne.w	8001d60 <HAL_RCC_OscConfig+0x430>
      tickstart = HAL_GetTick();
 8001b18:	f7ff fdb4 	bl	8001684 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1c:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001b20:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001b22:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001b26:	0799      	lsls	r1, r3, #30
 8001b28:	f140 8135 	bpl.w	8001d96 <HAL_RCC_OscConfig+0x466>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b2c:	f7ff fdaa 	bl	8001684 <HAL_GetTick>
 8001b30:	1b80      	subs	r0, r0, r6
 8001b32:	42b8      	cmp	r0, r7
 8001b34:	d9f5      	bls.n	8001b22 <HAL_RCC_OscConfig+0x1f2>
 8001b36:	e754      	b.n	80019e2 <HAL_RCC_OscConfig+0xb2>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001b38:	f002 0203 	and.w	r2, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001b3c:	2a01      	cmp	r2, #1
 8001b3e:	f47f af0a 	bne.w	8001956 <HAL_RCC_OscConfig+0x26>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001b42:	69e3      	ldr	r3, [r4, #28]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d03d      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x294>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001b48:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b4c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001b4e:	682b      	ldr	r3, [r5, #0]
 8001b50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b54:	2bb0      	cmp	r3, #176	; 0xb0
 8001b56:	bf28      	it	cs
 8001b58:	23b0      	movcs	r3, #176	; 0xb0
 8001b5a:	4298      	cmp	r0, r3
 8001b5c:	f240 81a8 	bls.w	8001eb0 <HAL_RCC_OscConfig+0x580>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b60:	f7ff fe34 	bl	80017cc <RCC_SetFlashLatencyFromMSIRange>
 8001b64:	bb70      	cbnz	r0, 8001bc4 <HAL_RCC_OscConfig+0x294>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001b66:	682b      	ldr	r3, [r5, #0]
 8001b68:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	602b      	str	r3, [r5, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001b72:	686b      	ldr	r3, [r5, #4]
 8001b74:	6a22      	ldr	r2, [r4, #32]
 8001b76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b7e:	606b      	str	r3, [r5, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b84:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b86:	f013 030c 	ands.w	r3, r3, #12
 8001b8a:	f000 81c7 	beq.w	8001f1c <HAL_RCC_OscConfig+0x5ec>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	f000 821d 	beq.w	8001fce <HAL_RCC_OscConfig+0x69e>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	f000 8212 	beq.w	8001fbe <HAL_RCC_OscConfig+0x68e>
 8001b9a:	f7ff fe8d 	bl	80018b8 <HAL_RCC_GetSysClockFreq.part.0>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001ba2:	497f      	ldr	r1, [pc, #508]	; (8001da0 <HAL_RCC_OscConfig+0x470>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001ba6:	4a7f      	ldr	r2, [pc, #508]	; (8001da4 <HAL_RCC_OscConfig+0x474>)
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001ba8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001bac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001bb0:	497d      	ldr	r1, [pc, #500]	; (8001da8 <HAL_RCC_OscConfig+0x478>)
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001bb2:	fbb0 f3f3 	udiv	r3, r0, r3
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001bb6:	6808      	ldr	r0, [r1, #0]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001bb8:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001bba:	f7ff fd19 	bl	80015f0 <HAL_InitTick>
 8001bbe:	2800      	cmp	r0, #0
 8001bc0:	f43f aee7 	beq.w	8001992 <HAL_RCC_OscConfig+0x62>
          return HAL_ERROR;
 8001bc4:	2001      	movs	r0, #1
}
 8001bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001bc8:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	68aa      	ldr	r2, [r5, #8]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8001bd0:	68e9      	ldr	r1, [r5, #12]
 8001bd2:	f002 020c 	and.w	r2, r2, #12
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bd6:	d073      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x390>
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bd8:	2a0c      	cmp	r2, #12
 8001bda:	d0f3      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x294>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001bdc:	682b      	ldr	r3, [r5, #0]
 8001bde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001be2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001be4:	f7ff fd4e 	bl	8001684 <HAL_GetTick>
 8001be8:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bea:	e005      	b.n	8001bf8 <HAL_RCC_OscConfig+0x2c8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bec:	f7ff fd4a 	bl	8001684 <HAL_GetTick>
 8001bf0:	1b00      	subs	r0, r0, r4
 8001bf2:	2802      	cmp	r0, #2
 8001bf4:	f63f aef5 	bhi.w	80019e2 <HAL_RCC_OscConfig+0xb2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bf8:	682b      	ldr	r3, [r5, #0]
 8001bfa:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8001bfe:	d1f5      	bne.n	8001bec <HAL_RCC_OscConfig+0x2bc>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001c00:	68e9      	ldr	r1, [r5, #12]
 8001c02:	4a6a      	ldr	r2, [pc, #424]	; (8001dac <HAL_RCC_OscConfig+0x47c>)
 8001c04:	400a      	ands	r2, r1
  return HAL_OK;
 8001c06:	4618      	mov	r0, r3
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001c08:	60ea      	str	r2, [r5, #12]
}
 8001c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001c0c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001c10:	f023 0301 	bic.w	r3, r3, #1
 8001c14:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001c18:	f7ff fd34 	bl	8001684 <HAL_GetTick>
 8001c1c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001c1e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001c22:	079f      	lsls	r7, r3, #30
 8001c24:	f57f af56 	bpl.w	8001ad4 <HAL_RCC_OscConfig+0x1a4>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c28:	f7ff fd2c 	bl	8001684 <HAL_GetTick>
 8001c2c:	1b80      	subs	r0, r0, r6
 8001c2e:	2802      	cmp	r0, #2
 8001c30:	d9f5      	bls.n	8001c1e <HAL_RCC_OscConfig+0x2ee>
 8001c32:	e6d6      	b.n	80019e2 <HAL_RCC_OscConfig+0xb2>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001c34:	f001 0103 	and.w	r1, r1, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001c38:	2902      	cmp	r1, #2
 8001c3a:	f47f aee3 	bne.w	8001a04 <HAL_RCC_OscConfig+0xd4>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001c3e:	68e2      	ldr	r2, [r4, #12]
 8001c40:	2a00      	cmp	r2, #0
 8001c42:	d0bf      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x294>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001c44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c48:	6920      	ldr	r0, [r4, #16]
 8001c4a:	684a      	ldr	r2, [r1, #4]
 8001c4c:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 8001c50:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8001c54:	604a      	str	r2, [r1, #4]
}
 8001c56:	e6f6      	b.n	8001a46 <HAL_RCC_OscConfig+0x116>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001c58:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001c5c:	f023 0304 	bic.w	r3, r3, #4
 8001c60:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001c64:	f7ff fd0e 	bl	8001684 <HAL_GetTick>
 8001c68:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001c6a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001c6e:	0718      	lsls	r0, r3, #28
 8001c70:	f100 8105 	bmi.w	8001e7e <HAL_RCC_OscConfig+0x54e>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001c74:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001c78:	f023 0301 	bic.w	r3, r3, #1
 8001c7c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001c80:	f7ff fd00 	bl	8001684 <HAL_GetTick>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001c84:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8001c88:	4605      	mov	r5, r0
 8001c8a:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8001c8e:	0799      	lsls	r1, r3, #30
 8001c90:	f57f aeff 	bpl.w	8001a92 <HAL_RCC_OscConfig+0x162>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001c94:	f7ff fcf6 	bl	8001684 <HAL_GetTick>
 8001c98:	1b40      	subs	r0, r0, r5
 8001c9a:	2802      	cmp	r0, #2
 8001c9c:	d9f5      	bls.n	8001c8a <HAL_RCC_OscConfig+0x35a>
 8001c9e:	e6a0      	b.n	80019e2 <HAL_RCC_OscConfig+0xb2>
      HAL_PWR_EnableBkUpAccess();
 8001ca0:	f7ff fd6e 	bl	8001780 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8001ca4:	f7ff fcee 	bl	8001684 <HAL_GetTick>
 8001ca8:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001caa:	e005      	b.n	8001cb8 <HAL_RCC_OscConfig+0x388>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cac:	f7ff fcea 	bl	8001684 <HAL_GetTick>
 8001cb0:	1b80      	subs	r0, r0, r6
 8001cb2:	2802      	cmp	r0, #2
 8001cb4:	f63f ae95 	bhi.w	80019e2 <HAL_RCC_OscConfig+0xb2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cb8:	682b      	ldr	r3, [r5, #0]
 8001cba:	05df      	lsls	r7, r3, #23
 8001cbc:	d5f6      	bpl.n	8001cac <HAL_RCC_OscConfig+0x37c>
 8001cbe:	e713      	b.n	8001ae8 <HAL_RCC_OscConfig+0x1b8>
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001cc2:	f001 0303 	and.w	r3, r1, #3
 8001cc6:	4283      	cmp	r3, r0
 8001cc8:	f000 8142 	beq.w	8001f50 <HAL_RCC_OscConfig+0x620>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ccc:	2a0c      	cmp	r2, #12
 8001cce:	f43f af79 	beq.w	8001bc4 <HAL_RCC_OscConfig+0x294>
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001cd2:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001cd6:	682b      	ldr	r3, [r5, #0]
 8001cd8:	015e      	lsls	r6, r3, #5
 8001cda:	f53f af73 	bmi.w	8001bc4 <HAL_RCC_OscConfig+0x294>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001cde:	682b      	ldr	r3, [r5, #0]
 8001ce0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ce4:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8001ce6:	f7ff fccd 	bl	8001684 <HAL_GetTick>
 8001cea:	4606      	mov	r6, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cec:	e005      	b.n	8001cfa <HAL_RCC_OscConfig+0x3ca>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cee:	f7ff fcc9 	bl	8001684 <HAL_GetTick>
 8001cf2:	1b80      	subs	r0, r0, r6
 8001cf4:	2802      	cmp	r0, #2
 8001cf6:	f63f ae74 	bhi.w	80019e2 <HAL_RCC_OscConfig+0xb2>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cfa:	682b      	ldr	r3, [r5, #0]
 8001cfc:	0198      	lsls	r0, r3, #6
 8001cfe:	d4f6      	bmi.n	8001cee <HAL_RCC_OscConfig+0x3be>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d00:	e9d4 320c 	ldrd	r3, r2, [r4, #48]	; 0x30
 8001d04:	68e9      	ldr	r1, [r5, #12]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	4a29      	ldr	r2, [pc, #164]	; (8001db0 <HAL_RCC_OscConfig+0x480>)
 8001d0a:	400a      	ands	r2, r1
 8001d0c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	430b      	orrs	r3, r1
 8001d12:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	; 0x40
 8001d16:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001d18:	4303      	orrs	r3, r0
 8001d1a:	430b      	orrs	r3, r1
 8001d1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001d20:	60eb      	str	r3, [r5, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001d22:	682b      	ldr	r3, [r5, #0]
 8001d24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d28:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d2a:	68eb      	ldr	r3, [r5, #12]
 8001d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d30:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 8001d32:	f7ff fca7 	bl	8001684 <HAL_GetTick>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d36:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
            tickstart = HAL_GetTick();
 8001d3a:	4604      	mov	r4, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d3c:	6833      	ldr	r3, [r6, #0]
 8001d3e:	0199      	lsls	r1, r3, #6
 8001d40:	f53f aecb 	bmi.w	8001ada <HAL_RCC_OscConfig+0x1aa>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d44:	f7ff fc9e 	bl	8001684 <HAL_GetTick>
 8001d48:	1b00      	subs	r0, r0, r4
 8001d4a:	2802      	cmp	r0, #2
 8001d4c:	d9f6      	bls.n	8001d3c <HAL_RCC_OscConfig+0x40c>
 8001d4e:	e648      	b.n	80019e2 <HAL_RCC_OscConfig+0xb2>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d54:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001d60:	f7ff fc90 	bl	8001684 <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001d64:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8001d68:	4605      	mov	r5, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6a:	f241 3788 	movw	r7, #5000	; 0x1388
 8001d6e:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001d72:	0798      	lsls	r0, r3, #30
 8001d74:	d40f      	bmi.n	8001d96 <HAL_RCC_OscConfig+0x466>
 8001d76:	f7ff fc85 	bl	8001684 <HAL_GetTick>
 8001d7a:	1b40      	subs	r0, r0, r5
 8001d7c:	42b8      	cmp	r0, r7
 8001d7e:	d9f6      	bls.n	8001d6e <HAL_RCC_OscConfig+0x43e>
 8001d80:	e62f      	b.n	80019e2 <HAL_RCC_OscConfig+0xb2>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001d82:	f001 0103 	and.w	r1, r1, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001d86:	2903      	cmp	r1, #3
 8001d88:	f47f ae12 	bne.w	80019b0 <HAL_RCC_OscConfig+0x80>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001d8c:	6862      	ldr	r2, [r4, #4]
 8001d8e:	2a00      	cmp	r2, #0
 8001d90:	f47f ae2a 	bne.w	80019e8 <HAL_RCC_OscConfig+0xb8>
 8001d94:	e716      	b.n	8001bc4 <HAL_RCC_OscConfig+0x294>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d96:	6823      	ldr	r3, [r4, #0]
 8001d98:	e67e      	b.n	8001a98 <HAL_RCC_OscConfig+0x168>
 8001d9a:	bf00      	nop
 8001d9c:	58000400 	.word	0x58000400
 8001da0:	08008a94 	.word	0x08008a94
 8001da4:	20000004 	.word	0x20000004
 8001da8:	2000000c 	.word	0x2000000c
 8001dac:	eefefffc 	.word	0xeefefffc
 8001db0:	11c1808c 	.word	0x11c1808c
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001db4:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001db8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001dbc:	f043 0304 	orr.w	r3, r3, #4
 8001dc0:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8001dc4:	f7ff fc5e 	bl	8001684 <HAL_GetTick>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001dc8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001dcc:	071a      	lsls	r2, r3, #28
 8001dce:	4606      	mov	r6, r0
 8001dd0:	d409      	bmi.n	8001de6 <HAL_RCC_OscConfig+0x4b6>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001dd2:	f7ff fc57 	bl	8001684 <HAL_GetTick>
 8001dd6:	1b80      	subs	r0, r0, r6
 8001dd8:	2803      	cmp	r0, #3
 8001dda:	f63f ae02 	bhi.w	80019e2 <HAL_RCC_OscConfig+0xb2>
 8001dde:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001de2:	071a      	lsls	r2, r3, #28
 8001de4:	d5f5      	bpl.n	8001dd2 <HAL_RCC_OscConfig+0x4a2>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001de6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001dea:	69a2      	ldr	r2, [r4, #24]
 8001dec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001df0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001df4:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001df8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001dfc:	f023 0301 	bic.w	r3, r3, #1
 8001e00:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8001e04:	f7ff fc3e 	bl	8001684 <HAL_GetTick>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001e08:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8001e0c:	4605      	mov	r5, r0
 8001e0e:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8001e12:	079b      	lsls	r3, r3, #30
 8001e14:	f57f ae3d 	bpl.w	8001a92 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001e18:	f7ff fc34 	bl	8001684 <HAL_GetTick>
 8001e1c:	1b40      	subs	r0, r0, r5
 8001e1e:	2802      	cmp	r0, #2
 8001e20:	d9f5      	bls.n	8001e0e <HAL_RCC_OscConfig+0x4de>
 8001e22:	e5de      	b.n	80019e2 <HAL_RCC_OscConfig+0xb2>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001e24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e28:	6813      	ldr	r3, [r2, #0]
 8001e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e2e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001e30:	f7ff fc28 	bl	8001684 <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001e34:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8001e38:	4605      	mov	r5, r0
 8001e3a:	6833      	ldr	r3, [r6, #0]
 8001e3c:	0398      	lsls	r0, r3, #14
 8001e3e:	f53f add2 	bmi.w	80019e6 <HAL_RCC_OscConfig+0xb6>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e42:	f7ff fc1f 	bl	8001684 <HAL_GetTick>
 8001e46:	1b40      	subs	r0, r0, r5
 8001e48:	2864      	cmp	r0, #100	; 0x64
 8001e4a:	d9f6      	bls.n	8001e3a <HAL_RCC_OscConfig+0x50a>
 8001e4c:	e5c9      	b.n	80019e2 <HAL_RCC_OscConfig+0xb2>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001e4e:	682b      	ldr	r3, [r5, #0]
 8001e50:	f023 0301 	bic.w	r3, r3, #1
 8001e54:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001e56:	f7ff fc15 	bl	8001684 <HAL_GetTick>
 8001e5a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001e5c:	682b      	ldr	r3, [r5, #0]
 8001e5e:	079f      	lsls	r7, r3, #30
 8001e60:	f57f ad97 	bpl.w	8001992 <HAL_RCC_OscConfig+0x62>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e64:	f7ff fc0e 	bl	8001684 <HAL_GetTick>
 8001e68:	1b80      	subs	r0, r0, r6
 8001e6a:	2802      	cmp	r0, #2
 8001e6c:	d9f6      	bls.n	8001e5c <HAL_RCC_OscConfig+0x52c>
 8001e6e:	e5b8      	b.n	80019e2 <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e70:	f7ff fc08 	bl	8001684 <HAL_GetTick>
 8001e74:	1b80      	subs	r0, r0, r6
 8001e76:	2802      	cmp	r0, #2
 8001e78:	f67f ad7a 	bls.w	8001970 <HAL_RCC_OscConfig+0x40>
 8001e7c:	e5b1      	b.n	80019e2 <HAL_RCC_OscConfig+0xb2>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001e7e:	f7ff fc01 	bl	8001684 <HAL_GetTick>
 8001e82:	1b80      	subs	r0, r0, r6
 8001e84:	2803      	cmp	r0, #3
 8001e86:	f67f aef0 	bls.w	8001c6a <HAL_RCC_OscConfig+0x33a>
 8001e8a:	e5aa      	b.n	80019e2 <HAL_RCC_OscConfig+0xb2>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001e8c:	686b      	ldr	r3, [r5, #4]
 8001e8e:	6922      	ldr	r2, [r4, #16]
 8001e90:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001e94:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001e98:	606b      	str	r3, [r5, #4]
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001e9a:	6823      	ldr	r3, [r4, #0]
}
 8001e9c:	e5d3      	b.n	8001a46 <HAL_RCC_OscConfig+0x116>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e9e:	f7ff fbf1 	bl	8001684 <HAL_GetTick>
 8001ea2:	1b80      	subs	r0, r0, r6
 8001ea4:	2802      	cmp	r0, #2
 8001ea6:	f67f adc9 	bls.w	8001a3c <HAL_RCC_OscConfig+0x10c>
 8001eaa:	e59a      	b.n	80019e2 <HAL_RCC_OscConfig+0xb2>
    return HAL_ERROR;
 8001eac:	2001      	movs	r0, #1
}
 8001eae:	4770      	bx	lr
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001eb0:	682b      	ldr	r3, [r5, #0]
 8001eb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001eb6:	4303      	orrs	r3, r0
 8001eb8:	602b      	str	r3, [r5, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001eba:	686b      	ldr	r3, [r5, #4]
 8001ebc:	6a22      	ldr	r2, [r4, #32]
 8001ebe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ec2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001ec6:	606b      	str	r3, [r5, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ec8:	f7ff fc80 	bl	80017cc <RCC_SetFlashLatencyFromMSIRange>
 8001ecc:	2800      	cmp	r0, #0
 8001ece:	f43f ae57 	beq.w	8001b80 <HAL_RCC_OscConfig+0x250>
 8001ed2:	e677      	b.n	8001bc4 <HAL_RCC_OscConfig+0x294>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8001edc:	f7ff fbd2 	bl	8001684 <HAL_GetTick>
 8001ee0:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001ee2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001ee6:	079f      	lsls	r7, r3, #30
 8001ee8:	d405      	bmi.n	8001ef6 <HAL_RCC_OscConfig+0x5c6>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001eea:	f7ff fbcb 	bl	8001684 <HAL_GetTick>
 8001eee:	1b80      	subs	r0, r0, r6
 8001ef0:	2802      	cmp	r0, #2
 8001ef2:	d9f6      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x5b2>
 8001ef4:	e575      	b.n	80019e2 <HAL_RCC_OscConfig+0xb2>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001ef6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001efa:	f023 0304 	bic.w	r3, r3, #4
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001efe:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001f02:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001f06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f0a:	071d      	lsls	r5, r3, #28
 8001f0c:	f57f adc1 	bpl.w	8001a92 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001f10:	f7ff fbb8 	bl	8001684 <HAL_GetTick>
 8001f14:	1b80      	subs	r0, r0, r6
 8001f16:	2803      	cmp	r0, #3
 8001f18:	d9f5      	bls.n	8001f06 <HAL_RCC_OscConfig+0x5d6>
 8001f1a:	e562      	b.n	80019e2 <HAL_RCC_OscConfig+0xb2>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001f1c:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001f1e:	4a2d      	ldr	r2, [pc, #180]	; (8001fd4 <HAL_RCC_OscConfig+0x6a4>)
 8001f20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f24:	2bb0      	cmp	r3, #176	; 0xb0
 8001f26:	bf28      	it	cs
 8001f28:	23b0      	movcs	r3, #176	; 0xb0
 8001f2a:	091b      	lsrs	r3, r3, #4
 8001f2c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f30:	e635      	b.n	8001b9e <HAL_RCC_OscConfig+0x26e>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f36:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001f3a:	f042 0204 	orr.w	r2, r2, #4
 8001f3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f42:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001f46:	f042 0201 	orr.w	r2, r2, #1
 8001f4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f4e:	e707      	b.n	8001d60 <HAL_RCC_OscConfig+0x430>
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f50:	6b60      	ldr	r0, [r4, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f52:	f001 0370 	and.w	r3, r1, #112	; 0x70
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f56:	4283      	cmp	r3, r0
 8001f58:	f47f aeb8 	bne.w	8001ccc <HAL_RCC_OscConfig+0x39c>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f5c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f5e:	f3c1 2306 	ubfx	r3, r1, #8, #7
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f62:	4283      	cmp	r3, r0
 8001f64:	f47f aeb2 	bne.w	8001ccc <HAL_RCC_OscConfig+0x39c>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f68:	6be0      	ldr	r0, [r4, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f6a:	f401 1378 	and.w	r3, r1, #4063232	; 0x3e0000
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f6e:	4283      	cmp	r3, r0
 8001f70:	f47f aeac 	bne.w	8001ccc <HAL_RCC_OscConfig+0x39c>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f74:	6c20      	ldr	r0, [r4, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001f76:	f001 6360 	and.w	r3, r1, #234881024	; 0xe000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f7a:	4283      	cmp	r3, r0
 8001f7c:	f47f aea6 	bne.w	8001ccc <HAL_RCC_OscConfig+0x39c>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001f80:	6c63      	ldr	r3, [r4, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001f82:	f001 4160 	and.w	r1, r1, #3758096384	; 0xe0000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001f86:	4299      	cmp	r1, r3
 8001f88:	f47f aea0 	bne.w	8001ccc <HAL_RCC_OscConfig+0x39c>
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f8c:	682b      	ldr	r3, [r5, #0]
 8001f8e:	019a      	lsls	r2, r3, #6
 8001f90:	f53f ada3 	bmi.w	8001ada <HAL_RCC_OscConfig+0x1aa>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001f94:	682b      	ldr	r3, [r5, #0]
 8001f96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f9a:	602b      	str	r3, [r5, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f9c:	68eb      	ldr	r3, [r5, #12]
 8001f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	60eb      	str	r3, [r5, #12]
          tickstart = HAL_GetTick();
 8001fa4:	f7ff fb6e 	bl	8001684 <HAL_GetTick>
 8001fa8:	4604      	mov	r4, r0
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001faa:	682b      	ldr	r3, [r5, #0]
 8001fac:	019b      	lsls	r3, r3, #6
 8001fae:	f53f ad94 	bmi.w	8001ada <HAL_RCC_OscConfig+0x1aa>
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb2:	f7ff fb67 	bl	8001684 <HAL_GetTick>
 8001fb6:	1b00      	subs	r0, r0, r4
 8001fb8:	2802      	cmp	r0, #2
 8001fba:	d9f6      	bls.n	8001faa <HAL_RCC_OscConfig+0x67a>
 8001fbc:	e511      	b.n	80019e2 <HAL_RCC_OscConfig+0xb2>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001fbe:	6812      	ldr	r2, [r2, #0]
      sysclockfreq = HSE_VALUE;
 8001fc0:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <HAL_RCC_OscConfig+0x6a8>)
 8001fc2:	4806      	ldr	r0, [pc, #24]	; (8001fdc <HAL_RCC_OscConfig+0x6ac>)
 8001fc4:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8001fc8:	bf18      	it	ne
 8001fca:	4618      	movne	r0, r3
 8001fcc:	e5e7      	b.n	8001b9e <HAL_RCC_OscConfig+0x26e>
    sysclockfreq = HSI_VALUE;
 8001fce:	4804      	ldr	r0, [pc, #16]	; (8001fe0 <HAL_RCC_OscConfig+0x6b0>)
 8001fd0:	e5e5      	b.n	8001b9e <HAL_RCC_OscConfig+0x26e>
 8001fd2:	bf00      	nop
 8001fd4:	08008ad4 	.word	0x08008ad4
 8001fd8:	003d0900 	.word	0x003d0900
 8001fdc:	007a1200 	.word	0x007a1200
 8001fe0:	00f42400 	.word	0x00f42400

08001fe4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001fe4:	2800      	cmp	r0, #0
 8001fe6:	f000 8130 	beq.w	800224a <HAL_RCC_ClockConfig+0x266>
{
 8001fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fee:	4e9d      	ldr	r6, [pc, #628]	; (8002264 <HAL_RCC_ClockConfig+0x280>)
 8001ff0:	6833      	ldr	r3, [r6, #0]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	428b      	cmp	r3, r1
 8001ff8:	460c      	mov	r4, r1
 8001ffa:	4605      	mov	r5, r0
 8001ffc:	f0c0 80d9 	bcc.w	80021b2 <HAL_RCC_ClockConfig+0x1ce>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002000:	682b      	ldr	r3, [r5, #0]
 8002002:	079a      	lsls	r2, r3, #30
 8002004:	d472      	bmi.n	80020ec <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002006:	0698      	lsls	r0, r3, #26
 8002008:	f100 8082 	bmi.w	8002110 <HAL_RCC_ClockConfig+0x12c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800200c:	065a      	lsls	r2, r3, #25
 800200e:	f100 8094 	bmi.w	800213a <HAL_RCC_ClockConfig+0x156>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002012:	0758      	lsls	r0, r3, #29
 8002014:	f100 80a7 	bmi.w	8002166 <HAL_RCC_ClockConfig+0x182>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002018:	071a      	lsls	r2, r3, #28
 800201a:	f100 80b6 	bmi.w	800218a <HAL_RCC_ClockConfig+0x1a6>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800201e:	07df      	lsls	r7, r3, #31
 8002020:	d529      	bpl.n	8002076 <HAL_RCC_ClockConfig+0x92>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002022:	686b      	ldr	r3, [r5, #4]
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002024:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002028:	2b02      	cmp	r3, #2
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	f000 8106 	beq.w	800223c <HAL_RCC_ClockConfig+0x258>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002030:	2b03      	cmp	r3, #3
 8002032:	f000 80fd 	beq.w	8002230 <HAL_RCC_ClockConfig+0x24c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002036:	2b00      	cmp	r3, #0
 8002038:	f040 8104 	bne.w	8002244 <HAL_RCC_ClockConfig+0x260>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800203c:	0791      	lsls	r1, r2, #30
 800203e:	f140 80fa 	bpl.w	8002236 <HAL_RCC_ClockConfig+0x252>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002042:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002046:	f241 3888 	movw	r8, #5000	; 0x1388
 800204a:	68b2      	ldr	r2, [r6, #8]
 800204c:	f022 0203 	bic.w	r2, r2, #3
 8002050:	4313      	orrs	r3, r2
 8002052:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002054:	f7ff fb16 	bl	8001684 <HAL_GetTick>
 8002058:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205a:	e005      	b.n	8002068 <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800205c:	f7ff fb12 	bl	8001684 <HAL_GetTick>
 8002060:	1bc0      	subs	r0, r0, r7
 8002062:	4540      	cmp	r0, r8
 8002064:	f200 80b8 	bhi.w	80021d8 <HAL_RCC_ClockConfig+0x1f4>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002068:	68b3      	ldr	r3, [r6, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206a:	686a      	ldr	r2, [r5, #4]
 800206c:	f003 030c 	and.w	r3, r3, #12
 8002070:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002074:	d1f2      	bne.n	800205c <HAL_RCC_ClockConfig+0x78>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002076:	4d7b      	ldr	r5, [pc, #492]	; (8002264 <HAL_RCC_ClockConfig+0x280>)
 8002078:	682b      	ldr	r3, [r5, #0]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	42a3      	cmp	r3, r4
 8002080:	d913      	bls.n	80020aa <HAL_RCC_ClockConfig+0xc6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002082:	682b      	ldr	r3, [r5, #0]
 8002084:	f023 0307 	bic.w	r3, r3, #7
 8002088:	4323      	orrs	r3, r4
 800208a:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800208c:	f7ff fafa 	bl	8001684 <HAL_GetTick>
 8002090:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002092:	e005      	b.n	80020a0 <HAL_RCC_ClockConfig+0xbc>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002094:	f7ff faf6 	bl	8001684 <HAL_GetTick>
 8002098:	1b80      	subs	r0, r0, r6
 800209a:	2802      	cmp	r0, #2
 800209c:	f200 809c 	bhi.w	80021d8 <HAL_RCC_ClockConfig+0x1f4>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a0:	682b      	ldr	r3, [r5, #0]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	42a3      	cmp	r3, r4
 80020a8:	d1f4      	bne.n	8002094 <HAL_RCC_ClockConfig+0xb0>
 80020aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020ae:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80020b0:	f013 030c 	ands.w	r3, r3, #12
 80020b4:	f000 80b1 	beq.w	800221a <HAL_RCC_ClockConfig+0x236>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	f000 80d0 	beq.w	800225e <HAL_RCC_ClockConfig+0x27a>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020be:	2b08      	cmp	r3, #8
 80020c0:	f000 80c5 	beq.w	800224e <HAL_RCC_ClockConfig+0x26a>
 80020c4:	f7ff fbf8 	bl	80018b8 <HAL_RCC_GetSysClockFreq.part.0>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80020c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80020cc:	4a66      	ldr	r2, [pc, #408]	; (8002268 <HAL_RCC_ClockConfig+0x284>)
 80020ce:	689b      	ldr	r3, [r3, #8]
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80020d0:	4966      	ldr	r1, [pc, #408]	; (800226c <HAL_RCC_ClockConfig+0x288>)
 80020d2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80020d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80020da:	fbb0 f0f3 	udiv	r0, r0, r3
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80020de:	6010      	str	r0, [r2, #0]
  return HAL_InitTick(HAL_GetTickPrio());
 80020e0:	f7ff fad6 	bl	8001690 <HAL_GetTickPrio>
}
 80020e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(HAL_GetTickPrio());
 80020e8:	f7ff ba82 	b.w	80015f0 <HAL_InitTick>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80020ec:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80020f0:	68aa      	ldr	r2, [r5, #8]
 80020f2:	68b3      	ldr	r3, [r6, #8]
 80020f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020f8:	4313      	orrs	r3, r2
 80020fa:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80020fc:	f7ff fac2 	bl	8001684 <HAL_GetTick>
 8002100:	4607      	mov	r7, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002102:	68b3      	ldr	r3, [r6, #8]
 8002104:	03db      	lsls	r3, r3, #15
 8002106:	d56a      	bpl.n	80021de <HAL_RCC_ClockConfig+0x1fa>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002108:	682b      	ldr	r3, [r5, #0]
 800210a:	0698      	lsls	r0, r3, #26
 800210c:	f57f af7e 	bpl.w	800200c <HAL_RCC_ClockConfig+0x28>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002110:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002114:	696a      	ldr	r2, [r5, #20]
 8002116:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 800211a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800211e:	4313      	orrs	r3, r2
 8002120:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 8002124:	f7ff faae 	bl	8001684 <HAL_GetTick>
 8002128:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800212a:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 800212e:	0399      	lsls	r1, r3, #14
 8002130:	d55b      	bpl.n	80021ea <HAL_RCC_ClockConfig+0x206>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002132:	682b      	ldr	r3, [r5, #0]
 8002134:	065a      	lsls	r2, r3, #25
 8002136:	f57f af6c 	bpl.w	8002012 <HAL_RCC_ClockConfig+0x2e>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800213a:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800213e:	69aa      	ldr	r2, [r5, #24]
 8002140:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8002144:	f023 030f 	bic.w	r3, r3, #15
 8002148:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 800214c:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 8002150:	f7ff fa98 	bl	8001684 <HAL_GetTick>
 8002154:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002156:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 800215a:	03db      	lsls	r3, r3, #15
 800215c:	d54b      	bpl.n	80021f6 <HAL_RCC_ClockConfig+0x212>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800215e:	682b      	ldr	r3, [r5, #0]
 8002160:	0758      	lsls	r0, r3, #29
 8002162:	f57f af59 	bpl.w	8002018 <HAL_RCC_ClockConfig+0x34>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002166:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800216a:	68ea      	ldr	r2, [r5, #12]
 800216c:	68b3      	ldr	r3, [r6, #8]
 800216e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002172:	4313      	orrs	r3, r2
 8002174:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002176:	f7ff fa85 	bl	8001684 <HAL_GetTick>
 800217a:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800217c:	68b3      	ldr	r3, [r6, #8]
 800217e:	0399      	lsls	r1, r3, #14
 8002180:	d53f      	bpl.n	8002202 <HAL_RCC_ClockConfig+0x21e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002182:	682b      	ldr	r3, [r5, #0]
 8002184:	071a      	lsls	r2, r3, #28
 8002186:	f57f af4a 	bpl.w	800201e <HAL_RCC_ClockConfig+0x3a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800218a:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800218e:	692a      	ldr	r2, [r5, #16]
 8002190:	68b3      	ldr	r3, [r6, #8]
 8002192:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002196:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800219a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800219c:	f7ff fa72 	bl	8001684 <HAL_GetTick>
 80021a0:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80021a2:	68b3      	ldr	r3, [r6, #8]
 80021a4:	035b      	lsls	r3, r3, #13
 80021a6:	d532      	bpl.n	800220e <HAL_RCC_ClockConfig+0x22a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021a8:	682b      	ldr	r3, [r5, #0]
 80021aa:	07df      	lsls	r7, r3, #31
 80021ac:	f53f af39 	bmi.w	8002022 <HAL_RCC_ClockConfig+0x3e>
 80021b0:	e761      	b.n	8002076 <HAL_RCC_ClockConfig+0x92>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b2:	6833      	ldr	r3, [r6, #0]
 80021b4:	f023 0307 	bic.w	r3, r3, #7
 80021b8:	430b      	orrs	r3, r1
 80021ba:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80021bc:	f7ff fa62 	bl	8001684 <HAL_GetTick>
 80021c0:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c2:	6833      	ldr	r3, [r6, #0]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	42a3      	cmp	r3, r4
 80021ca:	f43f af19 	beq.w	8002000 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80021ce:	f7ff fa59 	bl	8001684 <HAL_GetTick>
 80021d2:	1bc3      	subs	r3, r0, r7
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d9f4      	bls.n	80021c2 <HAL_RCC_ClockConfig+0x1de>
        return HAL_TIMEOUT;
 80021d8:	2003      	movs	r0, #3
}
 80021da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80021de:	f7ff fa51 	bl	8001684 <HAL_GetTick>
 80021e2:	1bc0      	subs	r0, r0, r7
 80021e4:	2802      	cmp	r0, #2
 80021e6:	d98c      	bls.n	8002102 <HAL_RCC_ClockConfig+0x11e>
 80021e8:	e7f6      	b.n	80021d8 <HAL_RCC_ClockConfig+0x1f4>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80021ea:	f7ff fa4b 	bl	8001684 <HAL_GetTick>
 80021ee:	1bc0      	subs	r0, r0, r7
 80021f0:	2802      	cmp	r0, #2
 80021f2:	d99a      	bls.n	800212a <HAL_RCC_ClockConfig+0x146>
 80021f4:	e7f0      	b.n	80021d8 <HAL_RCC_ClockConfig+0x1f4>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80021f6:	f7ff fa45 	bl	8001684 <HAL_GetTick>
 80021fa:	1bc0      	subs	r0, r0, r7
 80021fc:	2802      	cmp	r0, #2
 80021fe:	d9aa      	bls.n	8002156 <HAL_RCC_ClockConfig+0x172>
 8002200:	e7ea      	b.n	80021d8 <HAL_RCC_ClockConfig+0x1f4>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002202:	f7ff fa3f 	bl	8001684 <HAL_GetTick>
 8002206:	1bc0      	subs	r0, r0, r7
 8002208:	2802      	cmp	r0, #2
 800220a:	d9b7      	bls.n	800217c <HAL_RCC_ClockConfig+0x198>
 800220c:	e7e4      	b.n	80021d8 <HAL_RCC_ClockConfig+0x1f4>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800220e:	f7ff fa39 	bl	8001684 <HAL_GetTick>
 8002212:	1bc0      	subs	r0, r0, r7
 8002214:	2802      	cmp	r0, #2
 8002216:	d9c4      	bls.n	80021a2 <HAL_RCC_ClockConfig+0x1be>
 8002218:	e7de      	b.n	80021d8 <HAL_RCC_ClockConfig+0x1f4>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800221a:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800221c:	4a14      	ldr	r2, [pc, #80]	; (8002270 <HAL_RCC_ClockConfig+0x28c>)
 800221e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002222:	2bb0      	cmp	r3, #176	; 0xb0
 8002224:	bf28      	it	cs
 8002226:	23b0      	movcs	r3, #176	; 0xb0
 8002228:	091b      	lsrs	r3, r3, #4
 800222a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800222e:	e74b      	b.n	80020c8 <HAL_RCC_ClockConfig+0xe4>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002230:	0190      	lsls	r0, r2, #6
 8002232:	f53f af06 	bmi.w	8002042 <HAL_RCC_ClockConfig+0x5e>
    return HAL_ERROR;
 8002236:	2001      	movs	r0, #1
}
 8002238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800223c:	0396      	lsls	r6, r2, #14
 800223e:	f53f af00 	bmi.w	8002042 <HAL_RCC_ClockConfig+0x5e>
 8002242:	e7f8      	b.n	8002236 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002244:	0552      	lsls	r2, r2, #21
 8002246:	d5f6      	bpl.n	8002236 <HAL_RCC_ClockConfig+0x252>
 8002248:	e6fb      	b.n	8002042 <HAL_RCC_ClockConfig+0x5e>
    return HAL_ERROR;
 800224a:	2001      	movs	r0, #1
}
 800224c:	4770      	bx	lr
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800224e:	6812      	ldr	r2, [r2, #0]
      sysclockfreq = HSE_VALUE;
 8002250:	4b08      	ldr	r3, [pc, #32]	; (8002274 <HAL_RCC_ClockConfig+0x290>)
 8002252:	4809      	ldr	r0, [pc, #36]	; (8002278 <HAL_RCC_ClockConfig+0x294>)
 8002254:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8002258:	bf08      	it	eq
 800225a:	4618      	moveq	r0, r3
 800225c:	e734      	b.n	80020c8 <HAL_RCC_ClockConfig+0xe4>
    sysclockfreq = HSI_VALUE;
 800225e:	4807      	ldr	r0, [pc, #28]	; (800227c <HAL_RCC_ClockConfig+0x298>)
 8002260:	e732      	b.n	80020c8 <HAL_RCC_ClockConfig+0xe4>
 8002262:	bf00      	nop
 8002264:	58004000 	.word	0x58004000
 8002268:	20000004 	.word	0x20000004
 800226c:	08008a94 	.word	0x08008a94
 8002270:	08008ad4 	.word	0x08008ad4
 8002274:	007a1200 	.word	0x007a1200
 8002278:	003d0900 	.word	0x003d0900
 800227c:	00f42400 	.word	0x00f42400

08002280 <HAL_RCC_GetHCLKFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
{
 8002284:	b508      	push	{r3, lr}
 8002286:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002288:	f013 030c 	ands.w	r3, r3, #12
 800228c:	d114      	bne.n	80022b8 <HAL_RCC_GetHCLKFreq+0x38>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800228e:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002290:	4a12      	ldr	r2, [pc, #72]	; (80022dc <HAL_RCC_GetHCLKFreq+0x5c>)
 8002292:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002296:	2bb0      	cmp	r3, #176	; 0xb0
 8002298:	bf28      	it	cs
 800229a:	23b0      	movcs	r3, #176	; 0xb0
 800229c:	091b      	lsrs	r3, r3, #4
 800229e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80022a2:	4a0f      	ldr	r2, [pc, #60]	; (80022e0 <HAL_RCC_GetHCLKFreq+0x60>)
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80022a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80022ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80022b2:	fbb0 f0f3 	udiv	r0, r0, r3
 80022b6:	bd08      	pop	{r3, pc}
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022b8:	2b04      	cmp	r3, #4
 80022ba:	d004      	beq.n	80022c6 <HAL_RCC_GetHCLKFreq+0x46>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d004      	beq.n	80022ca <HAL_RCC_GetHCLKFreq+0x4a>
 80022c0:	f7ff fafa 	bl	80018b8 <HAL_RCC_GetSysClockFreq.part.0>
 80022c4:	e7ed      	b.n	80022a2 <HAL_RCC_GetHCLKFreq+0x22>
    sysclockfreq = HSI_VALUE;
 80022c6:	4807      	ldr	r0, [pc, #28]	; (80022e4 <HAL_RCC_GetHCLKFreq+0x64>)
 80022c8:	e7eb      	b.n	80022a2 <HAL_RCC_GetHCLKFreq+0x22>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80022ca:	6812      	ldr	r2, [r2, #0]
      sysclockfreq = HSE_VALUE;
 80022cc:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <HAL_RCC_GetHCLKFreq+0x68>)
 80022ce:	4807      	ldr	r0, [pc, #28]	; (80022ec <HAL_RCC_GetHCLKFreq+0x6c>)
 80022d0:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 80022d4:	bf08      	it	eq
 80022d6:	4618      	moveq	r0, r3
 80022d8:	e7e3      	b.n	80022a2 <HAL_RCC_GetHCLKFreq+0x22>
 80022da:	bf00      	nop
 80022dc:	08008ad4 	.word	0x08008ad4
 80022e0:	08008a94 	.word	0x08008a94
 80022e4:	00f42400 	.word	0x00f42400
 80022e8:	007a1200 	.word	0x007a1200
 80022ec:	003d0900 	.word	0x003d0900

080022f0 <HAL_RCCEx_PeriphCLKConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022f0:	6803      	ldr	r3, [r0, #0]
{
 80022f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022f6:	f013 0540 	ands.w	r5, r3, #64	; 0x40
{
 80022fa:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022fc:	d040      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80022fe:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002300:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8002304:	f000 8134 	beq.w	8002570 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8002308:	f200 8119 	bhi.w	800253e <HAL_RCCEx_PeriphCLKConfig+0x24e>
 800230c:	2a00      	cmp	r2, #0
 800230e:	f040 811c 	bne.w	800254a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002312:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002316:	682b      	ldr	r3, [r5, #0]
 8002318:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800231c:	602b      	str	r3, [r5, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800231e:	f7ff f9b1 	bl	8001684 <HAL_GetTick>
 8002322:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002324:	682b      	ldr	r3, [r5, #0]
 8002326:	011f      	lsls	r7, r3, #4
 8002328:	f100 8131 	bmi.w	800258e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800232c:	692b      	ldr	r3, [r5, #16]
 800232e:	6862      	ldr	r2, [r4, #4]
 8002330:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002334:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002338:	612b      	str	r3, [r5, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800233a:	692b      	ldr	r3, [r5, #16]
 800233c:	68a2      	ldr	r2, [r4, #8]
 800233e:	f423 1378 	bic.w	r3, r3, #4063232	; 0x3e0000
 8002342:	4313      	orrs	r3, r2
 8002344:	612b      	str	r3, [r5, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002346:	682b      	ldr	r3, [r5, #0]
 8002348:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800234c:	602b      	str	r3, [r5, #0]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800234e:	f7ff f999 	bl	8001684 <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002352:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002356:	4605      	mov	r5, r0
 8002358:	6833      	ldr	r3, [r6, #0]
 800235a:	0118      	lsls	r0, r3, #4
 800235c:	f140 81b0 	bpl.w	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002360:	6962      	ldr	r2, [r4, #20]
 8002362:	6933      	ldr	r3, [r6, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	6133      	str	r3, [r6, #16]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002368:	6b22      	ldr	r2, [r4, #48]	; 0x30
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800236a:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800236c:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
}
 8002370:	2500      	movs	r5, #0
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002372:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8002376:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 800237a:	430a      	orrs	r2, r1
 800237c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 8002380:	0519      	lsls	r1, r3, #20
 8002382:	d509      	bpl.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002384:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002388:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800238a:	f8d7 6090 	ldr.w	r6, [r7, #144]	; 0x90
 800238e:	f406 7640 	and.w	r6, r6, #768	; 0x300
 8002392:	42b2      	cmp	r2, r6
 8002394:	f040 80b4 	bne.w	8002500 <HAL_RCCEx_PeriphCLKConfig+0x210>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002398:	07d8      	lsls	r0, r3, #31
 800239a:	d509      	bpl.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800239c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023a0:	69a0      	ldr	r0, [r4, #24]
 80023a2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80023a6:	f022 0203 	bic.w	r2, r2, #3
 80023aa:	4302      	orrs	r2, r0
 80023ac:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023b0:	0799      	lsls	r1, r3, #30
 80023b2:	d509      	bpl.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80023b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023b8:	69e0      	ldr	r0, [r4, #28]
 80023ba:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80023be:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80023c2:	4302      	orrs	r2, r0
 80023c4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023c8:	06da      	lsls	r2, r3, #27
 80023ca:	d50c      	bpl.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023cc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80023ce:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80023d2:	0c31      	lsrs	r1, r6, #16
 80023d4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80023d8:	0409      	lsls	r1, r1, #16
 80023da:	ea22 0201 	bic.w	r2, r2, r1
 80023de:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80023e2:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80023e6:	069f      	lsls	r7, r3, #26
 80023e8:	d50c      	bpl.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x114>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80023ec:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80023f0:	0c31      	lsrs	r1, r6, #16
 80023f2:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80023f6:	0409      	lsls	r1, r1, #16
 80023f8:	ea22 0201 	bic.w	r2, r2, r1
 80023fc:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8002400:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002404:	075e      	lsls	r6, r3, #29
 8002406:	d50f      	bpl.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x138>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002408:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800240a:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800240e:	0911      	lsrs	r1, r2, #4
 8002410:	f401 207f 	and.w	r0, r1, #1044480	; 0xff000
 8002414:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
 8002418:	0112      	lsls	r2, r2, #4
 800241a:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 800241e:	ea21 0100 	bic.w	r1, r1, r0
 8002422:	430a      	orrs	r2, r1
 8002424:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002428:	0718      	lsls	r0, r3, #28
 800242a:	d50f      	bpl.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800242c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800242e:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002432:	0911      	lsrs	r1, r2, #4
 8002434:	f401 207f 	and.w	r0, r1, #1044480	; 0xff000
 8002438:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
 800243c:	0112      	lsls	r2, r2, #4
 800243e:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 8002442:	ea21 0100 	bic.w	r1, r1, r0
 8002446:	430a      	orrs	r2, r1
 8002448:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800244c:	05d9      	lsls	r1, r3, #23
 800244e:	d510      	bpl.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x182>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002450:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002454:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002456:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 800245a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800245e:	430a      	orrs	r2, r1
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002460:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8002464:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
 8002468:	d07d      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x276>
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800246a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800246e:	f000 80d2 	beq.w	8002616 <HAL_RCCEx_PeriphCLKConfig+0x326>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002472:	059f      	lsls	r7, r3, #22
 8002474:	d513      	bpl.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002476:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002478:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800247c:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8002480:	d003      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8002482:	f031 4280 	bics.w	r2, r1, #1073741824	; 0x40000000
 8002486:	f040 808b 	bne.w	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800248a:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800248e:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8002492:	430a      	orrs	r2, r1
 8002494:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002498:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
 800249c:	d057      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800249e:	055e      	lsls	r6, r3, #21
 80024a0:	d50f      	bpl.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80024a2:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024a6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80024a8:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 80024ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024b0:	430a      	orrs	r2, r1
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80024b2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80024b6:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
 80024ba:	d04f      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x26c>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024bc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80024c0:	d07e      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80024c2:	04da      	lsls	r2, r3, #19
 80024c4:	d509      	bpl.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80024c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024ca:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80024cc:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 80024d0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80024d4:	4302      	orrs	r2, r0
 80024d6:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80024da:	049b      	lsls	r3, r3, #18
 80024dc:	d50d      	bpl.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80024de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024e2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80024e4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80024e6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80024ea:	430b      	orrs	r3, r1
 80024ec:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80024ee:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80024f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80024f2:	f023 0303 	bic.w	r3, r3, #3
 80024f6:	430b      	orrs	r3, r1
 80024f8:	6253      	str	r3, [r2, #36]	; 0x24
}
 80024fa:	4628      	mov	r0, r5
 80024fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      HAL_PWR_EnableBkUpAccess();
 8002500:	f7ff f93e 	bl	8001780 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002504:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002508:	2e00      	cmp	r6, #0
 800250a:	d038      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800250c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002510:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002514:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002518:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800251c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002520:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002524:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800252a:	4313      	orrs	r3, r2
        LL_RCC_WriteReg(BDCR, bdcr);
 800252c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002530:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002534:	07da      	lsls	r2, r3, #31
 8002536:	f100 80b1 	bmi.w	800269c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800253a:	6823      	ldr	r3, [r4, #0]
 800253c:	e72c      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    switch (PeriphClkInit->Sai1ClockSelection)
 800253e:	f422 0180 	bic.w	r1, r2, #4194304	; 0x400000
 8002542:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002546:	f43f af11 	beq.w	800236c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800254a:	2501      	movs	r5, #1
 800254c:	e718      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x90>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800254e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002552:	68ca      	ldr	r2, [r1, #12]
 8002554:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002558:	60ca      	str	r2, [r1, #12]
 800255a:	e7a0      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800255c:	68f2      	ldr	r2, [r6, #12]
 800255e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002562:	60f2      	str	r2, [r6, #12]
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002564:	e7ad      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002566:	68f2      	ldr	r2, [r6, #12]
 8002568:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800256c:	60f2      	str	r2, [r6, #12]
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800256e:	e780      	b.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x182>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002570:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8002574:	68c1      	ldr	r1, [r0, #12]
 8002576:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800257a:	60c1      	str	r1, [r0, #12]
    if (ret == HAL_OK)
 800257c:	e6f6      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x7c>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800257e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800258a:	6823      	ldr	r3, [r4, #0]
}
 800258c:	e704      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800258e:	f7ff f879 	bl	8001684 <HAL_GetTick>
 8002592:	1b80      	subs	r0, r0, r6
 8002594:	2802      	cmp	r0, #2
 8002596:	f67f aec5 	bls.w	8002324 <HAL_RCCEx_PeriphCLKConfig+0x34>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800259a:	6823      	ldr	r3, [r4, #0]
 800259c:	2503      	movs	r5, #3
 800259e:	e6ef      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x90>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80025a0:	f8d0 6088 	ldr.w	r6, [r0, #136]	; 0x88
 80025a4:	f026 4640 	bic.w	r6, r6, #3221225472	; 0xc0000000
 80025a8:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80025ac:	f8d0 6088 	ldr.w	r6, [r0, #136]	; 0x88
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025b0:	f021 5280 	bic.w	r2, r1, #268435456	; 0x10000000
 80025b4:	f026 6640 	bic.w	r6, r6, #201326592	; 0xc000000
 80025b8:	4332      	orrs	r2, r6
 80025ba:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
}
 80025be:	e76b      	b.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80025c0:	6833      	ldr	r3, [r6, #0]
 80025c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025c6:	6033      	str	r3, [r6, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80025c8:	f7ff f85c 	bl	8001684 <HAL_GetTick>
 80025cc:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80025ce:	6833      	ldr	r3, [r6, #0]
 80025d0:	0118      	lsls	r0, r3, #4
 80025d2:	d451      	bmi.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x388>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80025d4:	6933      	ldr	r3, [r6, #16]
 80025d6:	6862      	ldr	r2, [r4, #4]
 80025d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80025e0:	6133      	str	r3, [r6, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80025e2:	6933      	ldr	r3, [r6, #16]
 80025e4:	6922      	ldr	r2, [r4, #16]
 80025e6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80025ea:	4313      	orrs	r3, r2
 80025ec:	6133      	str	r3, [r6, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80025ee:	6833      	ldr	r3, [r6, #0]
 80025f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025f4:	6033      	str	r3, [r6, #0]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025f6:	f7ff f845 	bl	8001684 <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80025fa:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80025fe:	4606      	mov	r6, r0
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	0119      	lsls	r1, r3, #4
 8002604:	d444      	bmi.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x3a0>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002606:	f7ff f83d 	bl	8001684 <HAL_GetTick>
 800260a:	1b80      	subs	r0, r0, r6
 800260c:	2802      	cmp	r0, #2
 800260e:	d9f7      	bls.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x310>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002610:	6823      	ldr	r3, [r4, #0]
 8002612:	2503      	movs	r5, #3
 8002614:	e755      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002616:	6833      	ldr	r3, [r6, #0]
 8002618:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800261c:	6033      	str	r3, [r6, #0]
  tickstart = HAL_GetTick();
 800261e:	f7ff f831 	bl	8001684 <HAL_GetTick>
 8002622:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002624:	6833      	ldr	r3, [r6, #0]
 8002626:	011a      	lsls	r2, r3, #4
 8002628:	d420      	bmi.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x37c>
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800262a:	6933      	ldr	r3, [r6, #16]
 800262c:	6862      	ldr	r2, [r4, #4]
 800262e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002632:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002636:	6133      	str	r3, [r6, #16]
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002638:	6933      	ldr	r3, [r6, #16]
 800263a:	68e2      	ldr	r2, [r4, #12]
 800263c:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8002640:	4313      	orrs	r3, r2
 8002642:	6133      	str	r3, [r6, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002644:	6833      	ldr	r3, [r6, #0]
 8002646:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800264a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800264c:	f7ff f81a 	bl	8001684 <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002650:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8002654:	4606      	mov	r6, r0
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	011b      	lsls	r3, r3, #4
 800265a:	d413      	bmi.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x394>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800265c:	f7ff f812 	bl	8001684 <HAL_GetTick>
 8002660:	1b80      	subs	r0, r0, r6
 8002662:	2802      	cmp	r0, #2
 8002664:	d9f7      	bls.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x366>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002666:	6823      	ldr	r3, [r4, #0]
 8002668:	2503      	movs	r5, #3
 800266a:	e702      	b.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x182>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800266c:	f7ff f80a 	bl	8001684 <HAL_GetTick>
 8002670:	1bc0      	subs	r0, r0, r7
 8002672:	2802      	cmp	r0, #2
 8002674:	d9d6      	bls.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x334>
 8002676:	e7f6      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x376>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002678:	f7ff f804 	bl	8001684 <HAL_GetTick>
 800267c:	1bc0      	subs	r0, r0, r7
 800267e:	2802      	cmp	r0, #2
 8002680:	d9a5      	bls.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8002682:	e7c5      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x320>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	6962      	ldr	r2, [r4, #20]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800268c:	6823      	ldr	r3, [r4, #0]
 800268e:	e6f0      	b.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x182>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	6962      	ldr	r2, [r4, #20]
 8002694:	4313      	orrs	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002698:	6823      	ldr	r3, [r4, #0]
 800269a:	e712      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
          tickstart = HAL_GetTick();
 800269c:	f7fe fff2 	bl	8001684 <HAL_GetTick>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a0:	f241 3888 	movw	r8, #5000	; 0x1388
          tickstart = HAL_GetTick();
 80026a4:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80026a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026aa:	079b      	lsls	r3, r3, #30
 80026ac:	f53f af45 	bmi.w	800253a <HAL_RCCEx_PeriphCLKConfig+0x24a>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b0:	f7fe ffe8 	bl	8001684 <HAL_GetTick>
 80026b4:	1b80      	subs	r0, r0, r6
 80026b6:	4540      	cmp	r0, r8
 80026b8:	d9f5      	bls.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026ba:	6823      	ldr	r3, [r4, #0]
              ret = HAL_TIMEOUT;
 80026bc:	2503      	movs	r5, #3
 80026be:	e66b      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026c0:	f7fe ffe0 	bl	8001684 <HAL_GetTick>
 80026c4:	1b40      	subs	r0, r0, r5
 80026c6:	2802      	cmp	r0, #2
 80026c8:	f67f ae46 	bls.w	8002358 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80026cc:	e765      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80026ce:	bf00      	nop

080026d0 <arm_biquad_cascade_df1_f32>:
void arm_biquad_cascade_df1_f32(
  const arm_biquad_casd_df1_inst_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 80026d0:	b530      	push	{r4, r5, lr}
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
        float32_t acc;                                 /* Accumulator */
        float32_t b0, b1, b2, a1, a2;                  /* Filter coefficients */
        float32_t Xn1, Xn2, Yn1, Yn2;                  /* Filter pState variables */
        float32_t Xn;                                  /* Temporary input */
        uint32_t sample, stage = S->numStages;         /* Loop counters */
 80026d2:	6805      	ldr	r5, [r0, #0]
 80026d4:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 80026d8:	3414      	adds	r4, #20
 80026da:	f100 0e10 	add.w	lr, r0, #16

  do
  {
    /* Reading the coefficients */
    b0 = *pCoeffs++;
 80026de:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
    b1 = *pCoeffs++;
 80026e2:	ed14 4a04 	vldr	s8, [r4, #-16]
    b2 = *pCoeffs++;
 80026e6:	ed54 3a03 	vldr	s7, [r4, #-12]
    a1 = *pCoeffs++;
 80026ea:	ed14 3a02 	vldr	s6, [r4, #-8]
    a2 = *pCoeffs++;
 80026ee:	ed54 2a01 	vldr	s5, [r4, #-4]

    /* Reading the pState values */
    Xn1 = pState[0];
 80026f2:	ed5e 6a04 	vldr	s13, [lr, #-16]
    Xn2 = pState[1];
 80026f6:	ed5e 5a03 	vldr	s11, [lr, #-12]
    Yn1 = pState[2];
 80026fa:	ed1e 7a02 	vldr	s14, [lr, #-8]
    Yn2 = pState[3];
 80026fe:	ed1e 5a01 	vldr	s10, [lr, #-4]
    /* Initialize blkCnt with number of samples */
    sample = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (sample > 0U)
 8002702:	b353      	cbz	r3, 800275a <arm_biquad_cascade_df1_f32+0x8a>
 8002704:	4618      	mov	r0, r3
 8002706:	4694      	mov	ip, r2
 8002708:	e003      	b.n	8002712 <arm_biquad_cascade_df1_f32+0x42>
    {
      /* Read the input */
      Xn = *pIn++;

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      acc = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 800270a:	eeb0 7a67 	vmov.f32	s14, s15
      Xn = *pIn++;
 800270e:	eef0 6a46 	vmov.f32	s13, s12
 8002712:	ecb1 6a01 	vldmia	r1!, {s12}
      acc = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 8002716:	ee64 7a26 	vmul.f32	s15, s8, s13
    while (sample > 0U)
 800271a:	3801      	subs	r0, #1
      acc = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 800271c:	eee4 7a86 	vfma.f32	s15, s9, s12
 8002720:	eee3 7aa5 	vfma.f32	s15, s7, s11
 8002724:	eef0 5a66 	vmov.f32	s11, s13
 8002728:	eee3 7a07 	vfma.f32	s15, s6, s14
 800272c:	eee2 7a85 	vfma.f32	s15, s5, s10

      /* Store output in destination buffer. */
      *pOut++ = acc;
 8002730:	eeb0 5a47 	vmov.f32	s10, s14
 8002734:	ecec 7a01 	vstmia	ip!, {s15}
    while (sample > 0U)
 8002738:	d1e7      	bne.n	800270a <arm_biquad_cascade_df1_f32+0x3a>
    pOut = pDst;

    /* decrement loop counter */
    stage--;

  } while (stage > 0U);
 800273a:	3d01      	subs	r5, #1
    *pState++ = Xn1;
 800273c:	ed0e 6a04 	vstr	s12, [lr, #-16]
    *pState++ = Xn2;
 8002740:	ed4e 6a03 	vstr	s13, [lr, #-12]
    *pState++ = Yn1;
 8002744:	ed4e 7a02 	vstr	s15, [lr, #-8]
    *pState++ = Yn2;
 8002748:	ed0e 7a01 	vstr	s14, [lr, #-4]
  } while (stage > 0U);
 800274c:	f104 0414 	add.w	r4, r4, #20
 8002750:	f10e 0e10 	add.w	lr, lr, #16
 8002754:	d00a      	beq.n	800276c <arm_biquad_cascade_df1_f32+0x9c>
    pIn = pDst;
 8002756:	4611      	mov	r1, r2
 8002758:	e7c1      	b.n	80026de <arm_biquad_cascade_df1_f32+0xe>
    Yn1 = pState[2];
 800275a:	eef0 7a47 	vmov.f32	s15, s14
    Xn1 = pState[0];
 800275e:	eeb0 6a66 	vmov.f32	s12, s13
    Yn2 = pState[3];
 8002762:	eeb0 7a45 	vmov.f32	s14, s10
    Xn2 = pState[1];
 8002766:	eef0 6a65 	vmov.f32	s13, s11
 800276a:	e7e6      	b.n	800273a <arm_biquad_cascade_df1_f32+0x6a>

}
 800276c:	bd30      	pop	{r4, r5, pc}
 800276e:	bf00      	nop

08002770 <arm_biquad_cascade_df1_init_f32>:
void arm_biquad_cascade_df1_init_f32(
        arm_biquad_casd_df1_inst_f32 * S,
        uint8_t numStages,
  const float32_t * pCoeffs,
        float32_t * pState)
{
 8002770:	b510      	push	{r4, lr}
  /* Assign filter stages */
  S->numStages = numStages;
 8002772:	6001      	str	r1, [r0, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 8002774:	6082      	str	r2, [r0, #8]
{
 8002776:	4604      	mov	r4, r0

  /* Clear state buffer and size is always 4 * numStages */
  memset(pState, 0, (4U * (uint32_t) numStages) * sizeof(float32_t));
 8002778:	010a      	lsls	r2, r1, #4
 800277a:	4618      	mov	r0, r3
 800277c:	2100      	movs	r1, #0
 800277e:	f000 f883 	bl	8002888 <memset>

  /* Assign state pointer */
  S->pState = pState;
 8002782:	6060      	str	r0, [r4, #4]
}
 8002784:	bd10      	pop	{r4, pc}
 8002786:	bf00      	nop

08002788 <arm_fir_f32>:
void arm_fir_f32(
  const arm_fir_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 8002788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
        float32_t *pStateCurnt;                        /* Points to the current sample of the state */
        float32_t *px;                                 /* Temporary pointer for state buffer */
  const float32_t *pb;                                 /* Temporary pointer for coefficient buffer */
        float32_t acc0;                                /* Accumulator */
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 800278c:	8804      	ldrh	r4, [r0, #0]
        float32_t *pState = S->pState;                 /* State pointer */
 800278e:	f8d0 8004 	ldr.w	r8, [r0, #4]
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 8002792:	f8d0 9008 	ldr.w	r9, [r0, #8]
        float32_t c0;                                           /* Temporary variable to hold coefficient value */
#endif

  /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
  /* pStateCurnt points to the location where the new input data should be written */
  pStateCurnt = &(S->pState[(numTaps - 1U)]);
 8002796:	f104 4080 	add.w	r0, r4, #1073741824	; 0x40000000
 800279a:	3801      	subs	r0, #1
 800279c:	eb08 0780 	add.w	r7, r8, r0, lsl #2
  /* Initialize blkCnt with number of taps */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 80027a0:	b32b      	cbz	r3, 80027ee <arm_fir_f32+0x66>
 80027a2:	461d      	mov	r5, r3
        float32_t *pState = S->pState;                 /* State pointer */
 80027a4:	4646      	mov	r6, r8
  {
    /* Copy one sample at a time into state buffer */
    *pStateCurnt++ = *pSrc++;
 80027a6:	f851 0b04 	ldr.w	r0, [r1], #4
 80027aa:	f847 0b04 	str.w	r0, [r7], #4

    /* Set the accumulator to zero */
    acc0 = 0.0f;
 80027ae:	eddf 7a11 	vldr	s15, [pc, #68]	; 80027f4 <arm_fir_f32+0x6c>
    pb = pCoeffs;

    i = numTaps;

    /* Perform the multiply-accumulates */
    while (i > 0U)
 80027b2:	b154      	cbz	r4, 80027ca <arm_fir_f32+0x42>
 80027b4:	4620      	mov	r0, r4
    pb = pCoeffs;
 80027b6:	46ce      	mov	lr, r9
    while (i > 0U)
 80027b8:	46b4      	mov	ip, r6
    {
      /* acc =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-numTaps-3] +...+ b[0] * x[0] */
      acc0 += *px++ * *pb++;
 80027ba:	ecfc 6a01 	vldmia	ip!, {s13}
 80027be:	ecbe 7a01 	vldmia	lr!, {s14}
    while (i > 0U)
 80027c2:	3801      	subs	r0, #1
      acc0 += *px++ * *pb++;
 80027c4:	eee6 7a87 	vfma.f32	s15, s13, s14
    while (i > 0U)
 80027c8:	d1f7      	bne.n	80027ba <arm_fir_f32+0x32>
  while (blkCnt > 0U)
 80027ca:	3d01      	subs	r5, #1

      i--;
    }

    /* Store result in destination buffer. */
    *pDst++ = acc0;
 80027cc:	ece2 7a01 	vstmia	r2!, {s15}

    /* Advance state pointer by 1 for the next sample */
    pState = pState + 1U;
 80027d0:	f106 0604 	add.w	r6, r6, #4
  while (blkCnt > 0U)
 80027d4:	d1e7      	bne.n	80027a6 <arm_fir_f32+0x1e>
    pState = pState + 1U;
 80027d6:	eb08 0283 	add.w	r2, r8, r3, lsl #2
  tapCnt = (numTaps - 1U);

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy remaining data */
  while (tapCnt > 0U)
 80027da:	1e63      	subs	r3, r4, #1
 80027dc:	d005      	beq.n	80027ea <arm_fir_f32+0x62>
  {
    *pStateCurnt++ = *pState++;
 80027de:	f852 1b04 	ldr.w	r1, [r2], #4
 80027e2:	f848 1b04 	str.w	r1, [r8], #4
  while (tapCnt > 0U)
 80027e6:	3b01      	subs	r3, #1
 80027e8:	d1f9      	bne.n	80027de <arm_fir_f32+0x56>

    /* Decrement loop counter */
    tapCnt--;
  }

}
 80027ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        float32_t *pState = S->pState;                 /* State pointer */
 80027ee:	4642      	mov	r2, r8
 80027f0:	e7f3      	b.n	80027da <arm_fir_f32+0x52>
 80027f2:	bf00      	nop
 80027f4:	00000000 	.word	0x00000000

080027f8 <arm_fir_init_f32>:
        arm_fir_instance_f32 * S,
        uint16_t numTaps,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
 80027f8:	b510      	push	{r4, lr}
 80027fa:	4604      	mov	r4, r0

  /* Clear state buffer. The size is always (blockSize + numTaps - 1) */
#if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  memset(pState, 0, (numTaps + (blockSize - 1U) + blockSize) * sizeof(float32_t));
#else
  memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 80027fc:	9802      	ldr	r0, [sp, #8]
  S->numTaps = numTaps;
 80027fe:	8021      	strh	r1, [r4, #0]
  memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 8002800:	f100 3cff 	add.w	ip, r0, #4294967295
 8002804:	448c      	add	ip, r1
  S->pCoeffs = pCoeffs;
 8002806:	60a2      	str	r2, [r4, #8]
  memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 8002808:	2100      	movs	r1, #0
 800280a:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800280e:	4618      	mov	r0, r3
 8002810:	f000 f83a 	bl	8002888 <memset>
#endif
  /* Assign state pointer */
  S->pState = pState;
 8002814:	6060      	str	r0, [r4, #4]
}
 8002816:	bd10      	pop	{r4, pc}

08002818 <__errno>:
 8002818:	4b01      	ldr	r3, [pc, #4]	; (8002820 <__errno+0x8>)
 800281a:	6818      	ldr	r0, [r3, #0]
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	20000010 	.word	0x20000010

08002824 <__libc_init_array>:
 8002824:	b570      	push	{r4, r5, r6, lr}
 8002826:	4d0d      	ldr	r5, [pc, #52]	; (800285c <__libc_init_array+0x38>)
 8002828:	4c0d      	ldr	r4, [pc, #52]	; (8002860 <__libc_init_array+0x3c>)
 800282a:	1b64      	subs	r4, r4, r5
 800282c:	10a4      	asrs	r4, r4, #2
 800282e:	2600      	movs	r6, #0
 8002830:	42a6      	cmp	r6, r4
 8002832:	d109      	bne.n	8002848 <__libc_init_array+0x24>
 8002834:	4d0b      	ldr	r5, [pc, #44]	; (8002864 <__libc_init_array+0x40>)
 8002836:	4c0c      	ldr	r4, [pc, #48]	; (8002868 <__libc_init_array+0x44>)
 8002838:	f004 fc8e 	bl	8007158 <_init>
 800283c:	1b64      	subs	r4, r4, r5
 800283e:	10a4      	asrs	r4, r4, #2
 8002840:	2600      	movs	r6, #0
 8002842:	42a6      	cmp	r6, r4
 8002844:	d105      	bne.n	8002852 <__libc_init_array+0x2e>
 8002846:	bd70      	pop	{r4, r5, r6, pc}
 8002848:	f855 3b04 	ldr.w	r3, [r5], #4
 800284c:	4798      	blx	r3
 800284e:	3601      	adds	r6, #1
 8002850:	e7ee      	b.n	8002830 <__libc_init_array+0xc>
 8002852:	f855 3b04 	ldr.w	r3, [r5], #4
 8002856:	4798      	blx	r3
 8002858:	3601      	adds	r6, #1
 800285a:	e7f2      	b.n	8002842 <__libc_init_array+0x1e>
 800285c:	08008fbc 	.word	0x08008fbc
 8002860:	08008fbc 	.word	0x08008fbc
 8002864:	08008fbc 	.word	0x08008fbc
 8002868:	08008fc0 	.word	0x08008fc0

0800286c <memcpy>:
 800286c:	440a      	add	r2, r1
 800286e:	4291      	cmp	r1, r2
 8002870:	f100 33ff 	add.w	r3, r0, #4294967295
 8002874:	d100      	bne.n	8002878 <memcpy+0xc>
 8002876:	4770      	bx	lr
 8002878:	b510      	push	{r4, lr}
 800287a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800287e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002882:	4291      	cmp	r1, r2
 8002884:	d1f9      	bne.n	800287a <memcpy+0xe>
 8002886:	bd10      	pop	{r4, pc}

08002888 <memset>:
 8002888:	4402      	add	r2, r0
 800288a:	4603      	mov	r3, r0
 800288c:	4293      	cmp	r3, r2
 800288e:	d100      	bne.n	8002892 <memset+0xa>
 8002890:	4770      	bx	lr
 8002892:	f803 1b01 	strb.w	r1, [r3], #1
 8002896:	e7f9      	b.n	800288c <memset+0x4>

08002898 <__cvt>:
 8002898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800289c:	ec55 4b10 	vmov	r4, r5, d0
 80028a0:	2d00      	cmp	r5, #0
 80028a2:	460e      	mov	r6, r1
 80028a4:	4619      	mov	r1, r3
 80028a6:	462b      	mov	r3, r5
 80028a8:	bfbb      	ittet	lt
 80028aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80028ae:	461d      	movlt	r5, r3
 80028b0:	2300      	movge	r3, #0
 80028b2:	232d      	movlt	r3, #45	; 0x2d
 80028b4:	700b      	strb	r3, [r1, #0]
 80028b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80028b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80028bc:	4691      	mov	r9, r2
 80028be:	f023 0820 	bic.w	r8, r3, #32
 80028c2:	bfbc      	itt	lt
 80028c4:	4622      	movlt	r2, r4
 80028c6:	4614      	movlt	r4, r2
 80028c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80028cc:	d005      	beq.n	80028da <__cvt+0x42>
 80028ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80028d2:	d100      	bne.n	80028d6 <__cvt+0x3e>
 80028d4:	3601      	adds	r6, #1
 80028d6:	2102      	movs	r1, #2
 80028d8:	e000      	b.n	80028dc <__cvt+0x44>
 80028da:	2103      	movs	r1, #3
 80028dc:	ab03      	add	r3, sp, #12
 80028de:	9301      	str	r3, [sp, #4]
 80028e0:	ab02      	add	r3, sp, #8
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	ec45 4b10 	vmov	d0, r4, r5
 80028e8:	4653      	mov	r3, sl
 80028ea:	4632      	mov	r2, r6
 80028ec:	f001 fdac 	bl	8004448 <_dtoa_r>
 80028f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80028f4:	4607      	mov	r7, r0
 80028f6:	d102      	bne.n	80028fe <__cvt+0x66>
 80028f8:	f019 0f01 	tst.w	r9, #1
 80028fc:	d022      	beq.n	8002944 <__cvt+0xac>
 80028fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002902:	eb07 0906 	add.w	r9, r7, r6
 8002906:	d110      	bne.n	800292a <__cvt+0x92>
 8002908:	783b      	ldrb	r3, [r7, #0]
 800290a:	2b30      	cmp	r3, #48	; 0x30
 800290c:	d10a      	bne.n	8002924 <__cvt+0x8c>
 800290e:	2200      	movs	r2, #0
 8002910:	2300      	movs	r3, #0
 8002912:	4620      	mov	r0, r4
 8002914:	4629      	mov	r1, r5
 8002916:	f7fe f8af 	bl	8000a78 <__aeabi_dcmpeq>
 800291a:	b918      	cbnz	r0, 8002924 <__cvt+0x8c>
 800291c:	f1c6 0601 	rsb	r6, r6, #1
 8002920:	f8ca 6000 	str.w	r6, [sl]
 8002924:	f8da 3000 	ldr.w	r3, [sl]
 8002928:	4499      	add	r9, r3
 800292a:	2200      	movs	r2, #0
 800292c:	2300      	movs	r3, #0
 800292e:	4620      	mov	r0, r4
 8002930:	4629      	mov	r1, r5
 8002932:	f7fe f8a1 	bl	8000a78 <__aeabi_dcmpeq>
 8002936:	b108      	cbz	r0, 800293c <__cvt+0xa4>
 8002938:	f8cd 900c 	str.w	r9, [sp, #12]
 800293c:	2230      	movs	r2, #48	; 0x30
 800293e:	9b03      	ldr	r3, [sp, #12]
 8002940:	454b      	cmp	r3, r9
 8002942:	d307      	bcc.n	8002954 <__cvt+0xbc>
 8002944:	9b03      	ldr	r3, [sp, #12]
 8002946:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002948:	1bdb      	subs	r3, r3, r7
 800294a:	4638      	mov	r0, r7
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	b004      	add	sp, #16
 8002950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002954:	1c59      	adds	r1, r3, #1
 8002956:	9103      	str	r1, [sp, #12]
 8002958:	701a      	strb	r2, [r3, #0]
 800295a:	e7f0      	b.n	800293e <__cvt+0xa6>

0800295c <__exponent>:
 800295c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800295e:	4603      	mov	r3, r0
 8002960:	2900      	cmp	r1, #0
 8002962:	bfb8      	it	lt
 8002964:	4249      	neglt	r1, r1
 8002966:	f803 2b02 	strb.w	r2, [r3], #2
 800296a:	bfb4      	ite	lt
 800296c:	222d      	movlt	r2, #45	; 0x2d
 800296e:	222b      	movge	r2, #43	; 0x2b
 8002970:	2909      	cmp	r1, #9
 8002972:	7042      	strb	r2, [r0, #1]
 8002974:	dd2a      	ble.n	80029cc <__exponent+0x70>
 8002976:	f10d 0407 	add.w	r4, sp, #7
 800297a:	46a4      	mov	ip, r4
 800297c:	270a      	movs	r7, #10
 800297e:	46a6      	mov	lr, r4
 8002980:	460a      	mov	r2, r1
 8002982:	fb91 f6f7 	sdiv	r6, r1, r7
 8002986:	fb07 1516 	mls	r5, r7, r6, r1
 800298a:	3530      	adds	r5, #48	; 0x30
 800298c:	2a63      	cmp	r2, #99	; 0x63
 800298e:	f104 34ff 	add.w	r4, r4, #4294967295
 8002992:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002996:	4631      	mov	r1, r6
 8002998:	dcf1      	bgt.n	800297e <__exponent+0x22>
 800299a:	3130      	adds	r1, #48	; 0x30
 800299c:	f1ae 0502 	sub.w	r5, lr, #2
 80029a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80029a4:	1c44      	adds	r4, r0, #1
 80029a6:	4629      	mov	r1, r5
 80029a8:	4561      	cmp	r1, ip
 80029aa:	d30a      	bcc.n	80029c2 <__exponent+0x66>
 80029ac:	f10d 0209 	add.w	r2, sp, #9
 80029b0:	eba2 020e 	sub.w	r2, r2, lr
 80029b4:	4565      	cmp	r5, ip
 80029b6:	bf88      	it	hi
 80029b8:	2200      	movhi	r2, #0
 80029ba:	4413      	add	r3, r2
 80029bc:	1a18      	subs	r0, r3, r0
 80029be:	b003      	add	sp, #12
 80029c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80029c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80029ca:	e7ed      	b.n	80029a8 <__exponent+0x4c>
 80029cc:	2330      	movs	r3, #48	; 0x30
 80029ce:	3130      	adds	r1, #48	; 0x30
 80029d0:	7083      	strb	r3, [r0, #2]
 80029d2:	70c1      	strb	r1, [r0, #3]
 80029d4:	1d03      	adds	r3, r0, #4
 80029d6:	e7f1      	b.n	80029bc <__exponent+0x60>

080029d8 <_printf_float>:
 80029d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029dc:	ed2d 8b02 	vpush	{d8}
 80029e0:	b08d      	sub	sp, #52	; 0x34
 80029e2:	460c      	mov	r4, r1
 80029e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80029e8:	4616      	mov	r6, r2
 80029ea:	461f      	mov	r7, r3
 80029ec:	4605      	mov	r5, r0
 80029ee:	f002 fe89 	bl	8005704 <_localeconv_r>
 80029f2:	f8d0 a000 	ldr.w	sl, [r0]
 80029f6:	4650      	mov	r0, sl
 80029f8:	f7fd fbc2 	bl	8000180 <strlen>
 80029fc:	2300      	movs	r3, #0
 80029fe:	930a      	str	r3, [sp, #40]	; 0x28
 8002a00:	6823      	ldr	r3, [r4, #0]
 8002a02:	9305      	str	r3, [sp, #20]
 8002a04:	f8d8 3000 	ldr.w	r3, [r8]
 8002a08:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002a0c:	3307      	adds	r3, #7
 8002a0e:	f023 0307 	bic.w	r3, r3, #7
 8002a12:	f103 0208 	add.w	r2, r3, #8
 8002a16:	f8c8 2000 	str.w	r2, [r8]
 8002a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002a22:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002a26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002a2a:	9307      	str	r3, [sp, #28]
 8002a2c:	f8cd 8018 	str.w	r8, [sp, #24]
 8002a30:	ee08 0a10 	vmov	s16, r0
 8002a34:	4b9f      	ldr	r3, [pc, #636]	; (8002cb4 <_printf_float+0x2dc>)
 8002a36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a3e:	f7fe f84d 	bl	8000adc <__aeabi_dcmpun>
 8002a42:	bb88      	cbnz	r0, 8002aa8 <_printf_float+0xd0>
 8002a44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002a48:	4b9a      	ldr	r3, [pc, #616]	; (8002cb4 <_printf_float+0x2dc>)
 8002a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a4e:	f7fe f827 	bl	8000aa0 <__aeabi_dcmple>
 8002a52:	bb48      	cbnz	r0, 8002aa8 <_printf_float+0xd0>
 8002a54:	2200      	movs	r2, #0
 8002a56:	2300      	movs	r3, #0
 8002a58:	4640      	mov	r0, r8
 8002a5a:	4649      	mov	r1, r9
 8002a5c:	f7fe f816 	bl	8000a8c <__aeabi_dcmplt>
 8002a60:	b110      	cbz	r0, 8002a68 <_printf_float+0x90>
 8002a62:	232d      	movs	r3, #45	; 0x2d
 8002a64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a68:	4b93      	ldr	r3, [pc, #588]	; (8002cb8 <_printf_float+0x2e0>)
 8002a6a:	4894      	ldr	r0, [pc, #592]	; (8002cbc <_printf_float+0x2e4>)
 8002a6c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002a70:	bf94      	ite	ls
 8002a72:	4698      	movls	r8, r3
 8002a74:	4680      	movhi	r8, r0
 8002a76:	2303      	movs	r3, #3
 8002a78:	6123      	str	r3, [r4, #16]
 8002a7a:	9b05      	ldr	r3, [sp, #20]
 8002a7c:	f023 0204 	bic.w	r2, r3, #4
 8002a80:	6022      	str	r2, [r4, #0]
 8002a82:	f04f 0900 	mov.w	r9, #0
 8002a86:	9700      	str	r7, [sp, #0]
 8002a88:	4633      	mov	r3, r6
 8002a8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8002a8c:	4621      	mov	r1, r4
 8002a8e:	4628      	mov	r0, r5
 8002a90:	f000 f9d8 	bl	8002e44 <_printf_common>
 8002a94:	3001      	adds	r0, #1
 8002a96:	f040 8090 	bne.w	8002bba <_printf_float+0x1e2>
 8002a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a9e:	b00d      	add	sp, #52	; 0x34
 8002aa0:	ecbd 8b02 	vpop	{d8}
 8002aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002aa8:	4642      	mov	r2, r8
 8002aaa:	464b      	mov	r3, r9
 8002aac:	4640      	mov	r0, r8
 8002aae:	4649      	mov	r1, r9
 8002ab0:	f7fe f814 	bl	8000adc <__aeabi_dcmpun>
 8002ab4:	b140      	cbz	r0, 8002ac8 <_printf_float+0xf0>
 8002ab6:	464b      	mov	r3, r9
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bfbc      	itt	lt
 8002abc:	232d      	movlt	r3, #45	; 0x2d
 8002abe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002ac2:	487f      	ldr	r0, [pc, #508]	; (8002cc0 <_printf_float+0x2e8>)
 8002ac4:	4b7f      	ldr	r3, [pc, #508]	; (8002cc4 <_printf_float+0x2ec>)
 8002ac6:	e7d1      	b.n	8002a6c <_printf_float+0x94>
 8002ac8:	6863      	ldr	r3, [r4, #4]
 8002aca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002ace:	9206      	str	r2, [sp, #24]
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	d13f      	bne.n	8002b54 <_printf_float+0x17c>
 8002ad4:	2306      	movs	r3, #6
 8002ad6:	6063      	str	r3, [r4, #4]
 8002ad8:	9b05      	ldr	r3, [sp, #20]
 8002ada:	6861      	ldr	r1, [r4, #4]
 8002adc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	9303      	str	r3, [sp, #12]
 8002ae4:	ab0a      	add	r3, sp, #40	; 0x28
 8002ae6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002aea:	ab09      	add	r3, sp, #36	; 0x24
 8002aec:	ec49 8b10 	vmov	d0, r8, r9
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	6022      	str	r2, [r4, #0]
 8002af4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002af8:	4628      	mov	r0, r5
 8002afa:	f7ff fecd 	bl	8002898 <__cvt>
 8002afe:	9b06      	ldr	r3, [sp, #24]
 8002b00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002b02:	2b47      	cmp	r3, #71	; 0x47
 8002b04:	4680      	mov	r8, r0
 8002b06:	d108      	bne.n	8002b1a <_printf_float+0x142>
 8002b08:	1cc8      	adds	r0, r1, #3
 8002b0a:	db02      	blt.n	8002b12 <_printf_float+0x13a>
 8002b0c:	6863      	ldr	r3, [r4, #4]
 8002b0e:	4299      	cmp	r1, r3
 8002b10:	dd41      	ble.n	8002b96 <_printf_float+0x1be>
 8002b12:	f1ab 0b02 	sub.w	fp, fp, #2
 8002b16:	fa5f fb8b 	uxtb.w	fp, fp
 8002b1a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002b1e:	d820      	bhi.n	8002b62 <_printf_float+0x18a>
 8002b20:	3901      	subs	r1, #1
 8002b22:	465a      	mov	r2, fp
 8002b24:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002b28:	9109      	str	r1, [sp, #36]	; 0x24
 8002b2a:	f7ff ff17 	bl	800295c <__exponent>
 8002b2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002b30:	1813      	adds	r3, r2, r0
 8002b32:	2a01      	cmp	r2, #1
 8002b34:	4681      	mov	r9, r0
 8002b36:	6123      	str	r3, [r4, #16]
 8002b38:	dc02      	bgt.n	8002b40 <_printf_float+0x168>
 8002b3a:	6822      	ldr	r2, [r4, #0]
 8002b3c:	07d2      	lsls	r2, r2, #31
 8002b3e:	d501      	bpl.n	8002b44 <_printf_float+0x16c>
 8002b40:	3301      	adds	r3, #1
 8002b42:	6123      	str	r3, [r4, #16]
 8002b44:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d09c      	beq.n	8002a86 <_printf_float+0xae>
 8002b4c:	232d      	movs	r3, #45	; 0x2d
 8002b4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b52:	e798      	b.n	8002a86 <_printf_float+0xae>
 8002b54:	9a06      	ldr	r2, [sp, #24]
 8002b56:	2a47      	cmp	r2, #71	; 0x47
 8002b58:	d1be      	bne.n	8002ad8 <_printf_float+0x100>
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1bc      	bne.n	8002ad8 <_printf_float+0x100>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e7b9      	b.n	8002ad6 <_printf_float+0xfe>
 8002b62:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002b66:	d118      	bne.n	8002b9a <_printf_float+0x1c2>
 8002b68:	2900      	cmp	r1, #0
 8002b6a:	6863      	ldr	r3, [r4, #4]
 8002b6c:	dd0b      	ble.n	8002b86 <_printf_float+0x1ae>
 8002b6e:	6121      	str	r1, [r4, #16]
 8002b70:	b913      	cbnz	r3, 8002b78 <_printf_float+0x1a0>
 8002b72:	6822      	ldr	r2, [r4, #0]
 8002b74:	07d0      	lsls	r0, r2, #31
 8002b76:	d502      	bpl.n	8002b7e <_printf_float+0x1a6>
 8002b78:	3301      	adds	r3, #1
 8002b7a:	440b      	add	r3, r1
 8002b7c:	6123      	str	r3, [r4, #16]
 8002b7e:	65a1      	str	r1, [r4, #88]	; 0x58
 8002b80:	f04f 0900 	mov.w	r9, #0
 8002b84:	e7de      	b.n	8002b44 <_printf_float+0x16c>
 8002b86:	b913      	cbnz	r3, 8002b8e <_printf_float+0x1b6>
 8002b88:	6822      	ldr	r2, [r4, #0]
 8002b8a:	07d2      	lsls	r2, r2, #31
 8002b8c:	d501      	bpl.n	8002b92 <_printf_float+0x1ba>
 8002b8e:	3302      	adds	r3, #2
 8002b90:	e7f4      	b.n	8002b7c <_printf_float+0x1a4>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e7f2      	b.n	8002b7c <_printf_float+0x1a4>
 8002b96:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002b9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b9c:	4299      	cmp	r1, r3
 8002b9e:	db05      	blt.n	8002bac <_printf_float+0x1d4>
 8002ba0:	6823      	ldr	r3, [r4, #0]
 8002ba2:	6121      	str	r1, [r4, #16]
 8002ba4:	07d8      	lsls	r0, r3, #31
 8002ba6:	d5ea      	bpl.n	8002b7e <_printf_float+0x1a6>
 8002ba8:	1c4b      	adds	r3, r1, #1
 8002baa:	e7e7      	b.n	8002b7c <_printf_float+0x1a4>
 8002bac:	2900      	cmp	r1, #0
 8002bae:	bfd4      	ite	le
 8002bb0:	f1c1 0202 	rsble	r2, r1, #2
 8002bb4:	2201      	movgt	r2, #1
 8002bb6:	4413      	add	r3, r2
 8002bb8:	e7e0      	b.n	8002b7c <_printf_float+0x1a4>
 8002bba:	6823      	ldr	r3, [r4, #0]
 8002bbc:	055a      	lsls	r2, r3, #21
 8002bbe:	d407      	bmi.n	8002bd0 <_printf_float+0x1f8>
 8002bc0:	6923      	ldr	r3, [r4, #16]
 8002bc2:	4642      	mov	r2, r8
 8002bc4:	4631      	mov	r1, r6
 8002bc6:	4628      	mov	r0, r5
 8002bc8:	47b8      	blx	r7
 8002bca:	3001      	adds	r0, #1
 8002bcc:	d12c      	bne.n	8002c28 <_printf_float+0x250>
 8002bce:	e764      	b.n	8002a9a <_printf_float+0xc2>
 8002bd0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002bd4:	f240 80e0 	bls.w	8002d98 <_printf_float+0x3c0>
 8002bd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2300      	movs	r3, #0
 8002be0:	f7fd ff4a 	bl	8000a78 <__aeabi_dcmpeq>
 8002be4:	2800      	cmp	r0, #0
 8002be6:	d034      	beq.n	8002c52 <_printf_float+0x27a>
 8002be8:	4a37      	ldr	r2, [pc, #220]	; (8002cc8 <_printf_float+0x2f0>)
 8002bea:	2301      	movs	r3, #1
 8002bec:	4631      	mov	r1, r6
 8002bee:	4628      	mov	r0, r5
 8002bf0:	47b8      	blx	r7
 8002bf2:	3001      	adds	r0, #1
 8002bf4:	f43f af51 	beq.w	8002a9a <_printf_float+0xc2>
 8002bf8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	db02      	blt.n	8002c06 <_printf_float+0x22e>
 8002c00:	6823      	ldr	r3, [r4, #0]
 8002c02:	07d8      	lsls	r0, r3, #31
 8002c04:	d510      	bpl.n	8002c28 <_printf_float+0x250>
 8002c06:	ee18 3a10 	vmov	r3, s16
 8002c0a:	4652      	mov	r2, sl
 8002c0c:	4631      	mov	r1, r6
 8002c0e:	4628      	mov	r0, r5
 8002c10:	47b8      	blx	r7
 8002c12:	3001      	adds	r0, #1
 8002c14:	f43f af41 	beq.w	8002a9a <_printf_float+0xc2>
 8002c18:	f04f 0800 	mov.w	r8, #0
 8002c1c:	f104 091a 	add.w	r9, r4, #26
 8002c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c22:	3b01      	subs	r3, #1
 8002c24:	4543      	cmp	r3, r8
 8002c26:	dc09      	bgt.n	8002c3c <_printf_float+0x264>
 8002c28:	6823      	ldr	r3, [r4, #0]
 8002c2a:	079b      	lsls	r3, r3, #30
 8002c2c:	f100 8105 	bmi.w	8002e3a <_printf_float+0x462>
 8002c30:	68e0      	ldr	r0, [r4, #12]
 8002c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002c34:	4298      	cmp	r0, r3
 8002c36:	bfb8      	it	lt
 8002c38:	4618      	movlt	r0, r3
 8002c3a:	e730      	b.n	8002a9e <_printf_float+0xc6>
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	464a      	mov	r2, r9
 8002c40:	4631      	mov	r1, r6
 8002c42:	4628      	mov	r0, r5
 8002c44:	47b8      	blx	r7
 8002c46:	3001      	adds	r0, #1
 8002c48:	f43f af27 	beq.w	8002a9a <_printf_float+0xc2>
 8002c4c:	f108 0801 	add.w	r8, r8, #1
 8002c50:	e7e6      	b.n	8002c20 <_printf_float+0x248>
 8002c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	dc39      	bgt.n	8002ccc <_printf_float+0x2f4>
 8002c58:	4a1b      	ldr	r2, [pc, #108]	; (8002cc8 <_printf_float+0x2f0>)
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	4631      	mov	r1, r6
 8002c5e:	4628      	mov	r0, r5
 8002c60:	47b8      	blx	r7
 8002c62:	3001      	adds	r0, #1
 8002c64:	f43f af19 	beq.w	8002a9a <_printf_float+0xc2>
 8002c68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	d102      	bne.n	8002c76 <_printf_float+0x29e>
 8002c70:	6823      	ldr	r3, [r4, #0]
 8002c72:	07d9      	lsls	r1, r3, #31
 8002c74:	d5d8      	bpl.n	8002c28 <_printf_float+0x250>
 8002c76:	ee18 3a10 	vmov	r3, s16
 8002c7a:	4652      	mov	r2, sl
 8002c7c:	4631      	mov	r1, r6
 8002c7e:	4628      	mov	r0, r5
 8002c80:	47b8      	blx	r7
 8002c82:	3001      	adds	r0, #1
 8002c84:	f43f af09 	beq.w	8002a9a <_printf_float+0xc2>
 8002c88:	f04f 0900 	mov.w	r9, #0
 8002c8c:	f104 0a1a 	add.w	sl, r4, #26
 8002c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c92:	425b      	negs	r3, r3
 8002c94:	454b      	cmp	r3, r9
 8002c96:	dc01      	bgt.n	8002c9c <_printf_float+0x2c4>
 8002c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c9a:	e792      	b.n	8002bc2 <_printf_float+0x1ea>
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	4652      	mov	r2, sl
 8002ca0:	4631      	mov	r1, r6
 8002ca2:	4628      	mov	r0, r5
 8002ca4:	47b8      	blx	r7
 8002ca6:	3001      	adds	r0, #1
 8002ca8:	f43f aef7 	beq.w	8002a9a <_printf_float+0xc2>
 8002cac:	f109 0901 	add.w	r9, r9, #1
 8002cb0:	e7ee      	b.n	8002c90 <_printf_float+0x2b8>
 8002cb2:	bf00      	nop
 8002cb4:	7fefffff 	.word	0x7fefffff
 8002cb8:	08008b18 	.word	0x08008b18
 8002cbc:	08008b1c 	.word	0x08008b1c
 8002cc0:	08008b24 	.word	0x08008b24
 8002cc4:	08008b20 	.word	0x08008b20
 8002cc8:	08008b28 	.word	0x08008b28
 8002ccc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002cce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	bfa8      	it	ge
 8002cd4:	461a      	movge	r2, r3
 8002cd6:	2a00      	cmp	r2, #0
 8002cd8:	4691      	mov	r9, r2
 8002cda:	dc37      	bgt.n	8002d4c <_printf_float+0x374>
 8002cdc:	f04f 0b00 	mov.w	fp, #0
 8002ce0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002ce4:	f104 021a 	add.w	r2, r4, #26
 8002ce8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002cea:	9305      	str	r3, [sp, #20]
 8002cec:	eba3 0309 	sub.w	r3, r3, r9
 8002cf0:	455b      	cmp	r3, fp
 8002cf2:	dc33      	bgt.n	8002d5c <_printf_float+0x384>
 8002cf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	db3b      	blt.n	8002d74 <_printf_float+0x39c>
 8002cfc:	6823      	ldr	r3, [r4, #0]
 8002cfe:	07da      	lsls	r2, r3, #31
 8002d00:	d438      	bmi.n	8002d74 <_printf_float+0x39c>
 8002d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d04:	9a05      	ldr	r2, [sp, #20]
 8002d06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002d08:	1a9a      	subs	r2, r3, r2
 8002d0a:	eba3 0901 	sub.w	r9, r3, r1
 8002d0e:	4591      	cmp	r9, r2
 8002d10:	bfa8      	it	ge
 8002d12:	4691      	movge	r9, r2
 8002d14:	f1b9 0f00 	cmp.w	r9, #0
 8002d18:	dc35      	bgt.n	8002d86 <_printf_float+0x3ae>
 8002d1a:	f04f 0800 	mov.w	r8, #0
 8002d1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002d22:	f104 0a1a 	add.w	sl, r4, #26
 8002d26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002d2a:	1a9b      	subs	r3, r3, r2
 8002d2c:	eba3 0309 	sub.w	r3, r3, r9
 8002d30:	4543      	cmp	r3, r8
 8002d32:	f77f af79 	ble.w	8002c28 <_printf_float+0x250>
 8002d36:	2301      	movs	r3, #1
 8002d38:	4652      	mov	r2, sl
 8002d3a:	4631      	mov	r1, r6
 8002d3c:	4628      	mov	r0, r5
 8002d3e:	47b8      	blx	r7
 8002d40:	3001      	adds	r0, #1
 8002d42:	f43f aeaa 	beq.w	8002a9a <_printf_float+0xc2>
 8002d46:	f108 0801 	add.w	r8, r8, #1
 8002d4a:	e7ec      	b.n	8002d26 <_printf_float+0x34e>
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	4631      	mov	r1, r6
 8002d50:	4642      	mov	r2, r8
 8002d52:	4628      	mov	r0, r5
 8002d54:	47b8      	blx	r7
 8002d56:	3001      	adds	r0, #1
 8002d58:	d1c0      	bne.n	8002cdc <_printf_float+0x304>
 8002d5a:	e69e      	b.n	8002a9a <_printf_float+0xc2>
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	4631      	mov	r1, r6
 8002d60:	4628      	mov	r0, r5
 8002d62:	9205      	str	r2, [sp, #20]
 8002d64:	47b8      	blx	r7
 8002d66:	3001      	adds	r0, #1
 8002d68:	f43f ae97 	beq.w	8002a9a <_printf_float+0xc2>
 8002d6c:	9a05      	ldr	r2, [sp, #20]
 8002d6e:	f10b 0b01 	add.w	fp, fp, #1
 8002d72:	e7b9      	b.n	8002ce8 <_printf_float+0x310>
 8002d74:	ee18 3a10 	vmov	r3, s16
 8002d78:	4652      	mov	r2, sl
 8002d7a:	4631      	mov	r1, r6
 8002d7c:	4628      	mov	r0, r5
 8002d7e:	47b8      	blx	r7
 8002d80:	3001      	adds	r0, #1
 8002d82:	d1be      	bne.n	8002d02 <_printf_float+0x32a>
 8002d84:	e689      	b.n	8002a9a <_printf_float+0xc2>
 8002d86:	9a05      	ldr	r2, [sp, #20]
 8002d88:	464b      	mov	r3, r9
 8002d8a:	4442      	add	r2, r8
 8002d8c:	4631      	mov	r1, r6
 8002d8e:	4628      	mov	r0, r5
 8002d90:	47b8      	blx	r7
 8002d92:	3001      	adds	r0, #1
 8002d94:	d1c1      	bne.n	8002d1a <_printf_float+0x342>
 8002d96:	e680      	b.n	8002a9a <_printf_float+0xc2>
 8002d98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002d9a:	2a01      	cmp	r2, #1
 8002d9c:	dc01      	bgt.n	8002da2 <_printf_float+0x3ca>
 8002d9e:	07db      	lsls	r3, r3, #31
 8002da0:	d538      	bpl.n	8002e14 <_printf_float+0x43c>
 8002da2:	2301      	movs	r3, #1
 8002da4:	4642      	mov	r2, r8
 8002da6:	4631      	mov	r1, r6
 8002da8:	4628      	mov	r0, r5
 8002daa:	47b8      	blx	r7
 8002dac:	3001      	adds	r0, #1
 8002dae:	f43f ae74 	beq.w	8002a9a <_printf_float+0xc2>
 8002db2:	ee18 3a10 	vmov	r3, s16
 8002db6:	4652      	mov	r2, sl
 8002db8:	4631      	mov	r1, r6
 8002dba:	4628      	mov	r0, r5
 8002dbc:	47b8      	blx	r7
 8002dbe:	3001      	adds	r0, #1
 8002dc0:	f43f ae6b 	beq.w	8002a9a <_printf_float+0xc2>
 8002dc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002dc8:	2200      	movs	r2, #0
 8002dca:	2300      	movs	r3, #0
 8002dcc:	f7fd fe54 	bl	8000a78 <__aeabi_dcmpeq>
 8002dd0:	b9d8      	cbnz	r0, 8002e0a <_printf_float+0x432>
 8002dd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002dd4:	f108 0201 	add.w	r2, r8, #1
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	4631      	mov	r1, r6
 8002ddc:	4628      	mov	r0, r5
 8002dde:	47b8      	blx	r7
 8002de0:	3001      	adds	r0, #1
 8002de2:	d10e      	bne.n	8002e02 <_printf_float+0x42a>
 8002de4:	e659      	b.n	8002a9a <_printf_float+0xc2>
 8002de6:	2301      	movs	r3, #1
 8002de8:	4652      	mov	r2, sl
 8002dea:	4631      	mov	r1, r6
 8002dec:	4628      	mov	r0, r5
 8002dee:	47b8      	blx	r7
 8002df0:	3001      	adds	r0, #1
 8002df2:	f43f ae52 	beq.w	8002a9a <_printf_float+0xc2>
 8002df6:	f108 0801 	add.w	r8, r8, #1
 8002dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	4543      	cmp	r3, r8
 8002e00:	dcf1      	bgt.n	8002de6 <_printf_float+0x40e>
 8002e02:	464b      	mov	r3, r9
 8002e04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002e08:	e6dc      	b.n	8002bc4 <_printf_float+0x1ec>
 8002e0a:	f04f 0800 	mov.w	r8, #0
 8002e0e:	f104 0a1a 	add.w	sl, r4, #26
 8002e12:	e7f2      	b.n	8002dfa <_printf_float+0x422>
 8002e14:	2301      	movs	r3, #1
 8002e16:	4642      	mov	r2, r8
 8002e18:	e7df      	b.n	8002dda <_printf_float+0x402>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	464a      	mov	r2, r9
 8002e1e:	4631      	mov	r1, r6
 8002e20:	4628      	mov	r0, r5
 8002e22:	47b8      	blx	r7
 8002e24:	3001      	adds	r0, #1
 8002e26:	f43f ae38 	beq.w	8002a9a <_printf_float+0xc2>
 8002e2a:	f108 0801 	add.w	r8, r8, #1
 8002e2e:	68e3      	ldr	r3, [r4, #12]
 8002e30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002e32:	1a5b      	subs	r3, r3, r1
 8002e34:	4543      	cmp	r3, r8
 8002e36:	dcf0      	bgt.n	8002e1a <_printf_float+0x442>
 8002e38:	e6fa      	b.n	8002c30 <_printf_float+0x258>
 8002e3a:	f04f 0800 	mov.w	r8, #0
 8002e3e:	f104 0919 	add.w	r9, r4, #25
 8002e42:	e7f4      	b.n	8002e2e <_printf_float+0x456>

08002e44 <_printf_common>:
 8002e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e48:	4616      	mov	r6, r2
 8002e4a:	4699      	mov	r9, r3
 8002e4c:	688a      	ldr	r2, [r1, #8]
 8002e4e:	690b      	ldr	r3, [r1, #16]
 8002e50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e54:	4293      	cmp	r3, r2
 8002e56:	bfb8      	it	lt
 8002e58:	4613      	movlt	r3, r2
 8002e5a:	6033      	str	r3, [r6, #0]
 8002e5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e60:	4607      	mov	r7, r0
 8002e62:	460c      	mov	r4, r1
 8002e64:	b10a      	cbz	r2, 8002e6a <_printf_common+0x26>
 8002e66:	3301      	adds	r3, #1
 8002e68:	6033      	str	r3, [r6, #0]
 8002e6a:	6823      	ldr	r3, [r4, #0]
 8002e6c:	0699      	lsls	r1, r3, #26
 8002e6e:	bf42      	ittt	mi
 8002e70:	6833      	ldrmi	r3, [r6, #0]
 8002e72:	3302      	addmi	r3, #2
 8002e74:	6033      	strmi	r3, [r6, #0]
 8002e76:	6825      	ldr	r5, [r4, #0]
 8002e78:	f015 0506 	ands.w	r5, r5, #6
 8002e7c:	d106      	bne.n	8002e8c <_printf_common+0x48>
 8002e7e:	f104 0a19 	add.w	sl, r4, #25
 8002e82:	68e3      	ldr	r3, [r4, #12]
 8002e84:	6832      	ldr	r2, [r6, #0]
 8002e86:	1a9b      	subs	r3, r3, r2
 8002e88:	42ab      	cmp	r3, r5
 8002e8a:	dc26      	bgt.n	8002eda <_printf_common+0x96>
 8002e8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002e90:	1e13      	subs	r3, r2, #0
 8002e92:	6822      	ldr	r2, [r4, #0]
 8002e94:	bf18      	it	ne
 8002e96:	2301      	movne	r3, #1
 8002e98:	0692      	lsls	r2, r2, #26
 8002e9a:	d42b      	bmi.n	8002ef4 <_printf_common+0xb0>
 8002e9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ea0:	4649      	mov	r1, r9
 8002ea2:	4638      	mov	r0, r7
 8002ea4:	47c0      	blx	r8
 8002ea6:	3001      	adds	r0, #1
 8002ea8:	d01e      	beq.n	8002ee8 <_printf_common+0xa4>
 8002eaa:	6823      	ldr	r3, [r4, #0]
 8002eac:	68e5      	ldr	r5, [r4, #12]
 8002eae:	6832      	ldr	r2, [r6, #0]
 8002eb0:	f003 0306 	and.w	r3, r3, #6
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	bf08      	it	eq
 8002eb8:	1aad      	subeq	r5, r5, r2
 8002eba:	68a3      	ldr	r3, [r4, #8]
 8002ebc:	6922      	ldr	r2, [r4, #16]
 8002ebe:	bf0c      	ite	eq
 8002ec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ec4:	2500      	movne	r5, #0
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	bfc4      	itt	gt
 8002eca:	1a9b      	subgt	r3, r3, r2
 8002ecc:	18ed      	addgt	r5, r5, r3
 8002ece:	2600      	movs	r6, #0
 8002ed0:	341a      	adds	r4, #26
 8002ed2:	42b5      	cmp	r5, r6
 8002ed4:	d11a      	bne.n	8002f0c <_printf_common+0xc8>
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	e008      	b.n	8002eec <_printf_common+0xa8>
 8002eda:	2301      	movs	r3, #1
 8002edc:	4652      	mov	r2, sl
 8002ede:	4649      	mov	r1, r9
 8002ee0:	4638      	mov	r0, r7
 8002ee2:	47c0      	blx	r8
 8002ee4:	3001      	adds	r0, #1
 8002ee6:	d103      	bne.n	8002ef0 <_printf_common+0xac>
 8002ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8002eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ef0:	3501      	adds	r5, #1
 8002ef2:	e7c6      	b.n	8002e82 <_printf_common+0x3e>
 8002ef4:	18e1      	adds	r1, r4, r3
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	2030      	movs	r0, #48	; 0x30
 8002efa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002efe:	4422      	add	r2, r4
 8002f00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f08:	3302      	adds	r3, #2
 8002f0a:	e7c7      	b.n	8002e9c <_printf_common+0x58>
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	4622      	mov	r2, r4
 8002f10:	4649      	mov	r1, r9
 8002f12:	4638      	mov	r0, r7
 8002f14:	47c0      	blx	r8
 8002f16:	3001      	adds	r0, #1
 8002f18:	d0e6      	beq.n	8002ee8 <_printf_common+0xa4>
 8002f1a:	3601      	adds	r6, #1
 8002f1c:	e7d9      	b.n	8002ed2 <_printf_common+0x8e>
	...

08002f20 <_printf_i>:
 8002f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f24:	7e0f      	ldrb	r7, [r1, #24]
 8002f26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002f28:	2f78      	cmp	r7, #120	; 0x78
 8002f2a:	4691      	mov	r9, r2
 8002f2c:	4680      	mov	r8, r0
 8002f2e:	460c      	mov	r4, r1
 8002f30:	469a      	mov	sl, r3
 8002f32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002f36:	d807      	bhi.n	8002f48 <_printf_i+0x28>
 8002f38:	2f62      	cmp	r7, #98	; 0x62
 8002f3a:	d80a      	bhi.n	8002f52 <_printf_i+0x32>
 8002f3c:	2f00      	cmp	r7, #0
 8002f3e:	f000 80d8 	beq.w	80030f2 <_printf_i+0x1d2>
 8002f42:	2f58      	cmp	r7, #88	; 0x58
 8002f44:	f000 80a3 	beq.w	800308e <_printf_i+0x16e>
 8002f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f50:	e03a      	b.n	8002fc8 <_printf_i+0xa8>
 8002f52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f56:	2b15      	cmp	r3, #21
 8002f58:	d8f6      	bhi.n	8002f48 <_printf_i+0x28>
 8002f5a:	a101      	add	r1, pc, #4	; (adr r1, 8002f60 <_printf_i+0x40>)
 8002f5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f60:	08002fb9 	.word	0x08002fb9
 8002f64:	08002fcd 	.word	0x08002fcd
 8002f68:	08002f49 	.word	0x08002f49
 8002f6c:	08002f49 	.word	0x08002f49
 8002f70:	08002f49 	.word	0x08002f49
 8002f74:	08002f49 	.word	0x08002f49
 8002f78:	08002fcd 	.word	0x08002fcd
 8002f7c:	08002f49 	.word	0x08002f49
 8002f80:	08002f49 	.word	0x08002f49
 8002f84:	08002f49 	.word	0x08002f49
 8002f88:	08002f49 	.word	0x08002f49
 8002f8c:	080030d9 	.word	0x080030d9
 8002f90:	08002ffd 	.word	0x08002ffd
 8002f94:	080030bb 	.word	0x080030bb
 8002f98:	08002f49 	.word	0x08002f49
 8002f9c:	08002f49 	.word	0x08002f49
 8002fa0:	080030fb 	.word	0x080030fb
 8002fa4:	08002f49 	.word	0x08002f49
 8002fa8:	08002ffd 	.word	0x08002ffd
 8002fac:	08002f49 	.word	0x08002f49
 8002fb0:	08002f49 	.word	0x08002f49
 8002fb4:	080030c3 	.word	0x080030c3
 8002fb8:	682b      	ldr	r3, [r5, #0]
 8002fba:	1d1a      	adds	r2, r3, #4
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	602a      	str	r2, [r5, #0]
 8002fc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e0a3      	b.n	8003114 <_printf_i+0x1f4>
 8002fcc:	6820      	ldr	r0, [r4, #0]
 8002fce:	6829      	ldr	r1, [r5, #0]
 8002fd0:	0606      	lsls	r6, r0, #24
 8002fd2:	f101 0304 	add.w	r3, r1, #4
 8002fd6:	d50a      	bpl.n	8002fee <_printf_i+0xce>
 8002fd8:	680e      	ldr	r6, [r1, #0]
 8002fda:	602b      	str	r3, [r5, #0]
 8002fdc:	2e00      	cmp	r6, #0
 8002fde:	da03      	bge.n	8002fe8 <_printf_i+0xc8>
 8002fe0:	232d      	movs	r3, #45	; 0x2d
 8002fe2:	4276      	negs	r6, r6
 8002fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fe8:	485e      	ldr	r0, [pc, #376]	; (8003164 <_printf_i+0x244>)
 8002fea:	230a      	movs	r3, #10
 8002fec:	e019      	b.n	8003022 <_printf_i+0x102>
 8002fee:	680e      	ldr	r6, [r1, #0]
 8002ff0:	602b      	str	r3, [r5, #0]
 8002ff2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002ff6:	bf18      	it	ne
 8002ff8:	b236      	sxthne	r6, r6
 8002ffa:	e7ef      	b.n	8002fdc <_printf_i+0xbc>
 8002ffc:	682b      	ldr	r3, [r5, #0]
 8002ffe:	6820      	ldr	r0, [r4, #0]
 8003000:	1d19      	adds	r1, r3, #4
 8003002:	6029      	str	r1, [r5, #0]
 8003004:	0601      	lsls	r1, r0, #24
 8003006:	d501      	bpl.n	800300c <_printf_i+0xec>
 8003008:	681e      	ldr	r6, [r3, #0]
 800300a:	e002      	b.n	8003012 <_printf_i+0xf2>
 800300c:	0646      	lsls	r6, r0, #25
 800300e:	d5fb      	bpl.n	8003008 <_printf_i+0xe8>
 8003010:	881e      	ldrh	r6, [r3, #0]
 8003012:	4854      	ldr	r0, [pc, #336]	; (8003164 <_printf_i+0x244>)
 8003014:	2f6f      	cmp	r7, #111	; 0x6f
 8003016:	bf0c      	ite	eq
 8003018:	2308      	moveq	r3, #8
 800301a:	230a      	movne	r3, #10
 800301c:	2100      	movs	r1, #0
 800301e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003022:	6865      	ldr	r5, [r4, #4]
 8003024:	60a5      	str	r5, [r4, #8]
 8003026:	2d00      	cmp	r5, #0
 8003028:	bfa2      	ittt	ge
 800302a:	6821      	ldrge	r1, [r4, #0]
 800302c:	f021 0104 	bicge.w	r1, r1, #4
 8003030:	6021      	strge	r1, [r4, #0]
 8003032:	b90e      	cbnz	r6, 8003038 <_printf_i+0x118>
 8003034:	2d00      	cmp	r5, #0
 8003036:	d04d      	beq.n	80030d4 <_printf_i+0x1b4>
 8003038:	4615      	mov	r5, r2
 800303a:	fbb6 f1f3 	udiv	r1, r6, r3
 800303e:	fb03 6711 	mls	r7, r3, r1, r6
 8003042:	5dc7      	ldrb	r7, [r0, r7]
 8003044:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003048:	4637      	mov	r7, r6
 800304a:	42bb      	cmp	r3, r7
 800304c:	460e      	mov	r6, r1
 800304e:	d9f4      	bls.n	800303a <_printf_i+0x11a>
 8003050:	2b08      	cmp	r3, #8
 8003052:	d10b      	bne.n	800306c <_printf_i+0x14c>
 8003054:	6823      	ldr	r3, [r4, #0]
 8003056:	07de      	lsls	r6, r3, #31
 8003058:	d508      	bpl.n	800306c <_printf_i+0x14c>
 800305a:	6923      	ldr	r3, [r4, #16]
 800305c:	6861      	ldr	r1, [r4, #4]
 800305e:	4299      	cmp	r1, r3
 8003060:	bfde      	ittt	le
 8003062:	2330      	movle	r3, #48	; 0x30
 8003064:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003068:	f105 35ff 	addle.w	r5, r5, #4294967295
 800306c:	1b52      	subs	r2, r2, r5
 800306e:	6122      	str	r2, [r4, #16]
 8003070:	f8cd a000 	str.w	sl, [sp]
 8003074:	464b      	mov	r3, r9
 8003076:	aa03      	add	r2, sp, #12
 8003078:	4621      	mov	r1, r4
 800307a:	4640      	mov	r0, r8
 800307c:	f7ff fee2 	bl	8002e44 <_printf_common>
 8003080:	3001      	adds	r0, #1
 8003082:	d14c      	bne.n	800311e <_printf_i+0x1fe>
 8003084:	f04f 30ff 	mov.w	r0, #4294967295
 8003088:	b004      	add	sp, #16
 800308a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800308e:	4835      	ldr	r0, [pc, #212]	; (8003164 <_printf_i+0x244>)
 8003090:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003094:	6829      	ldr	r1, [r5, #0]
 8003096:	6823      	ldr	r3, [r4, #0]
 8003098:	f851 6b04 	ldr.w	r6, [r1], #4
 800309c:	6029      	str	r1, [r5, #0]
 800309e:	061d      	lsls	r5, r3, #24
 80030a0:	d514      	bpl.n	80030cc <_printf_i+0x1ac>
 80030a2:	07df      	lsls	r7, r3, #31
 80030a4:	bf44      	itt	mi
 80030a6:	f043 0320 	orrmi.w	r3, r3, #32
 80030aa:	6023      	strmi	r3, [r4, #0]
 80030ac:	b91e      	cbnz	r6, 80030b6 <_printf_i+0x196>
 80030ae:	6823      	ldr	r3, [r4, #0]
 80030b0:	f023 0320 	bic.w	r3, r3, #32
 80030b4:	6023      	str	r3, [r4, #0]
 80030b6:	2310      	movs	r3, #16
 80030b8:	e7b0      	b.n	800301c <_printf_i+0xfc>
 80030ba:	6823      	ldr	r3, [r4, #0]
 80030bc:	f043 0320 	orr.w	r3, r3, #32
 80030c0:	6023      	str	r3, [r4, #0]
 80030c2:	2378      	movs	r3, #120	; 0x78
 80030c4:	4828      	ldr	r0, [pc, #160]	; (8003168 <_printf_i+0x248>)
 80030c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80030ca:	e7e3      	b.n	8003094 <_printf_i+0x174>
 80030cc:	0659      	lsls	r1, r3, #25
 80030ce:	bf48      	it	mi
 80030d0:	b2b6      	uxthmi	r6, r6
 80030d2:	e7e6      	b.n	80030a2 <_printf_i+0x182>
 80030d4:	4615      	mov	r5, r2
 80030d6:	e7bb      	b.n	8003050 <_printf_i+0x130>
 80030d8:	682b      	ldr	r3, [r5, #0]
 80030da:	6826      	ldr	r6, [r4, #0]
 80030dc:	6961      	ldr	r1, [r4, #20]
 80030de:	1d18      	adds	r0, r3, #4
 80030e0:	6028      	str	r0, [r5, #0]
 80030e2:	0635      	lsls	r5, r6, #24
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	d501      	bpl.n	80030ec <_printf_i+0x1cc>
 80030e8:	6019      	str	r1, [r3, #0]
 80030ea:	e002      	b.n	80030f2 <_printf_i+0x1d2>
 80030ec:	0670      	lsls	r0, r6, #25
 80030ee:	d5fb      	bpl.n	80030e8 <_printf_i+0x1c8>
 80030f0:	8019      	strh	r1, [r3, #0]
 80030f2:	2300      	movs	r3, #0
 80030f4:	6123      	str	r3, [r4, #16]
 80030f6:	4615      	mov	r5, r2
 80030f8:	e7ba      	b.n	8003070 <_printf_i+0x150>
 80030fa:	682b      	ldr	r3, [r5, #0]
 80030fc:	1d1a      	adds	r2, r3, #4
 80030fe:	602a      	str	r2, [r5, #0]
 8003100:	681d      	ldr	r5, [r3, #0]
 8003102:	6862      	ldr	r2, [r4, #4]
 8003104:	2100      	movs	r1, #0
 8003106:	4628      	mov	r0, r5
 8003108:	f7fd f842 	bl	8000190 <memchr>
 800310c:	b108      	cbz	r0, 8003112 <_printf_i+0x1f2>
 800310e:	1b40      	subs	r0, r0, r5
 8003110:	6060      	str	r0, [r4, #4]
 8003112:	6863      	ldr	r3, [r4, #4]
 8003114:	6123      	str	r3, [r4, #16]
 8003116:	2300      	movs	r3, #0
 8003118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800311c:	e7a8      	b.n	8003070 <_printf_i+0x150>
 800311e:	6923      	ldr	r3, [r4, #16]
 8003120:	462a      	mov	r2, r5
 8003122:	4649      	mov	r1, r9
 8003124:	4640      	mov	r0, r8
 8003126:	47d0      	blx	sl
 8003128:	3001      	adds	r0, #1
 800312a:	d0ab      	beq.n	8003084 <_printf_i+0x164>
 800312c:	6823      	ldr	r3, [r4, #0]
 800312e:	079b      	lsls	r3, r3, #30
 8003130:	d413      	bmi.n	800315a <_printf_i+0x23a>
 8003132:	68e0      	ldr	r0, [r4, #12]
 8003134:	9b03      	ldr	r3, [sp, #12]
 8003136:	4298      	cmp	r0, r3
 8003138:	bfb8      	it	lt
 800313a:	4618      	movlt	r0, r3
 800313c:	e7a4      	b.n	8003088 <_printf_i+0x168>
 800313e:	2301      	movs	r3, #1
 8003140:	4632      	mov	r2, r6
 8003142:	4649      	mov	r1, r9
 8003144:	4640      	mov	r0, r8
 8003146:	47d0      	blx	sl
 8003148:	3001      	adds	r0, #1
 800314a:	d09b      	beq.n	8003084 <_printf_i+0x164>
 800314c:	3501      	adds	r5, #1
 800314e:	68e3      	ldr	r3, [r4, #12]
 8003150:	9903      	ldr	r1, [sp, #12]
 8003152:	1a5b      	subs	r3, r3, r1
 8003154:	42ab      	cmp	r3, r5
 8003156:	dcf2      	bgt.n	800313e <_printf_i+0x21e>
 8003158:	e7eb      	b.n	8003132 <_printf_i+0x212>
 800315a:	2500      	movs	r5, #0
 800315c:	f104 0619 	add.w	r6, r4, #25
 8003160:	e7f5      	b.n	800314e <_printf_i+0x22e>
 8003162:	bf00      	nop
 8003164:	08008b2a 	.word	0x08008b2a
 8003168:	08008b3b 	.word	0x08008b3b

0800316c <_scanf_float>:
 800316c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003170:	b087      	sub	sp, #28
 8003172:	4617      	mov	r7, r2
 8003174:	9303      	str	r3, [sp, #12]
 8003176:	688b      	ldr	r3, [r1, #8]
 8003178:	1e5a      	subs	r2, r3, #1
 800317a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800317e:	bf83      	ittte	hi
 8003180:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003184:	195b      	addhi	r3, r3, r5
 8003186:	9302      	strhi	r3, [sp, #8]
 8003188:	2300      	movls	r3, #0
 800318a:	bf86      	itte	hi
 800318c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003190:	608b      	strhi	r3, [r1, #8]
 8003192:	9302      	strls	r3, [sp, #8]
 8003194:	680b      	ldr	r3, [r1, #0]
 8003196:	468b      	mov	fp, r1
 8003198:	2500      	movs	r5, #0
 800319a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800319e:	f84b 3b1c 	str.w	r3, [fp], #28
 80031a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80031a6:	4680      	mov	r8, r0
 80031a8:	460c      	mov	r4, r1
 80031aa:	465e      	mov	r6, fp
 80031ac:	46aa      	mov	sl, r5
 80031ae:	46a9      	mov	r9, r5
 80031b0:	9501      	str	r5, [sp, #4]
 80031b2:	68a2      	ldr	r2, [r4, #8]
 80031b4:	b152      	cbz	r2, 80031cc <_scanf_float+0x60>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b4e      	cmp	r3, #78	; 0x4e
 80031bc:	d864      	bhi.n	8003288 <_scanf_float+0x11c>
 80031be:	2b40      	cmp	r3, #64	; 0x40
 80031c0:	d83c      	bhi.n	800323c <_scanf_float+0xd0>
 80031c2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80031c6:	b2c8      	uxtb	r0, r1
 80031c8:	280e      	cmp	r0, #14
 80031ca:	d93a      	bls.n	8003242 <_scanf_float+0xd6>
 80031cc:	f1b9 0f00 	cmp.w	r9, #0
 80031d0:	d003      	beq.n	80031da <_scanf_float+0x6e>
 80031d2:	6823      	ldr	r3, [r4, #0]
 80031d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031d8:	6023      	str	r3, [r4, #0]
 80031da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80031de:	f1ba 0f01 	cmp.w	sl, #1
 80031e2:	f200 8113 	bhi.w	800340c <_scanf_float+0x2a0>
 80031e6:	455e      	cmp	r6, fp
 80031e8:	f200 8105 	bhi.w	80033f6 <_scanf_float+0x28a>
 80031ec:	2501      	movs	r5, #1
 80031ee:	4628      	mov	r0, r5
 80031f0:	b007      	add	sp, #28
 80031f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031f6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80031fa:	2a0d      	cmp	r2, #13
 80031fc:	d8e6      	bhi.n	80031cc <_scanf_float+0x60>
 80031fe:	a101      	add	r1, pc, #4	; (adr r1, 8003204 <_scanf_float+0x98>)
 8003200:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003204:	08003343 	.word	0x08003343
 8003208:	080031cd 	.word	0x080031cd
 800320c:	080031cd 	.word	0x080031cd
 8003210:	080031cd 	.word	0x080031cd
 8003214:	080033a3 	.word	0x080033a3
 8003218:	0800337b 	.word	0x0800337b
 800321c:	080031cd 	.word	0x080031cd
 8003220:	080031cd 	.word	0x080031cd
 8003224:	08003351 	.word	0x08003351
 8003228:	080031cd 	.word	0x080031cd
 800322c:	080031cd 	.word	0x080031cd
 8003230:	080031cd 	.word	0x080031cd
 8003234:	080031cd 	.word	0x080031cd
 8003238:	08003309 	.word	0x08003309
 800323c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003240:	e7db      	b.n	80031fa <_scanf_float+0x8e>
 8003242:	290e      	cmp	r1, #14
 8003244:	d8c2      	bhi.n	80031cc <_scanf_float+0x60>
 8003246:	a001      	add	r0, pc, #4	; (adr r0, 800324c <_scanf_float+0xe0>)
 8003248:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800324c:	080032fb 	.word	0x080032fb
 8003250:	080031cd 	.word	0x080031cd
 8003254:	080032fb 	.word	0x080032fb
 8003258:	0800338f 	.word	0x0800338f
 800325c:	080031cd 	.word	0x080031cd
 8003260:	080032a9 	.word	0x080032a9
 8003264:	080032e5 	.word	0x080032e5
 8003268:	080032e5 	.word	0x080032e5
 800326c:	080032e5 	.word	0x080032e5
 8003270:	080032e5 	.word	0x080032e5
 8003274:	080032e5 	.word	0x080032e5
 8003278:	080032e5 	.word	0x080032e5
 800327c:	080032e5 	.word	0x080032e5
 8003280:	080032e5 	.word	0x080032e5
 8003284:	080032e5 	.word	0x080032e5
 8003288:	2b6e      	cmp	r3, #110	; 0x6e
 800328a:	d809      	bhi.n	80032a0 <_scanf_float+0x134>
 800328c:	2b60      	cmp	r3, #96	; 0x60
 800328e:	d8b2      	bhi.n	80031f6 <_scanf_float+0x8a>
 8003290:	2b54      	cmp	r3, #84	; 0x54
 8003292:	d077      	beq.n	8003384 <_scanf_float+0x218>
 8003294:	2b59      	cmp	r3, #89	; 0x59
 8003296:	d199      	bne.n	80031cc <_scanf_float+0x60>
 8003298:	2d07      	cmp	r5, #7
 800329a:	d197      	bne.n	80031cc <_scanf_float+0x60>
 800329c:	2508      	movs	r5, #8
 800329e:	e029      	b.n	80032f4 <_scanf_float+0x188>
 80032a0:	2b74      	cmp	r3, #116	; 0x74
 80032a2:	d06f      	beq.n	8003384 <_scanf_float+0x218>
 80032a4:	2b79      	cmp	r3, #121	; 0x79
 80032a6:	e7f6      	b.n	8003296 <_scanf_float+0x12a>
 80032a8:	6821      	ldr	r1, [r4, #0]
 80032aa:	05c8      	lsls	r0, r1, #23
 80032ac:	d51a      	bpl.n	80032e4 <_scanf_float+0x178>
 80032ae:	9b02      	ldr	r3, [sp, #8]
 80032b0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80032b4:	6021      	str	r1, [r4, #0]
 80032b6:	f109 0901 	add.w	r9, r9, #1
 80032ba:	b11b      	cbz	r3, 80032c4 <_scanf_float+0x158>
 80032bc:	3b01      	subs	r3, #1
 80032be:	3201      	adds	r2, #1
 80032c0:	9302      	str	r3, [sp, #8]
 80032c2:	60a2      	str	r2, [r4, #8]
 80032c4:	68a3      	ldr	r3, [r4, #8]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	60a3      	str	r3, [r4, #8]
 80032ca:	6923      	ldr	r3, [r4, #16]
 80032cc:	3301      	adds	r3, #1
 80032ce:	6123      	str	r3, [r4, #16]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3b01      	subs	r3, #1
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	607b      	str	r3, [r7, #4]
 80032d8:	f340 8084 	ble.w	80033e4 <_scanf_float+0x278>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	3301      	adds	r3, #1
 80032e0:	603b      	str	r3, [r7, #0]
 80032e2:	e766      	b.n	80031b2 <_scanf_float+0x46>
 80032e4:	eb1a 0f05 	cmn.w	sl, r5
 80032e8:	f47f af70 	bne.w	80031cc <_scanf_float+0x60>
 80032ec:	6822      	ldr	r2, [r4, #0]
 80032ee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80032f2:	6022      	str	r2, [r4, #0]
 80032f4:	f806 3b01 	strb.w	r3, [r6], #1
 80032f8:	e7e4      	b.n	80032c4 <_scanf_float+0x158>
 80032fa:	6822      	ldr	r2, [r4, #0]
 80032fc:	0610      	lsls	r0, r2, #24
 80032fe:	f57f af65 	bpl.w	80031cc <_scanf_float+0x60>
 8003302:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003306:	e7f4      	b.n	80032f2 <_scanf_float+0x186>
 8003308:	f1ba 0f00 	cmp.w	sl, #0
 800330c:	d10e      	bne.n	800332c <_scanf_float+0x1c0>
 800330e:	f1b9 0f00 	cmp.w	r9, #0
 8003312:	d10e      	bne.n	8003332 <_scanf_float+0x1c6>
 8003314:	6822      	ldr	r2, [r4, #0]
 8003316:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800331a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800331e:	d108      	bne.n	8003332 <_scanf_float+0x1c6>
 8003320:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003324:	6022      	str	r2, [r4, #0]
 8003326:	f04f 0a01 	mov.w	sl, #1
 800332a:	e7e3      	b.n	80032f4 <_scanf_float+0x188>
 800332c:	f1ba 0f02 	cmp.w	sl, #2
 8003330:	d055      	beq.n	80033de <_scanf_float+0x272>
 8003332:	2d01      	cmp	r5, #1
 8003334:	d002      	beq.n	800333c <_scanf_float+0x1d0>
 8003336:	2d04      	cmp	r5, #4
 8003338:	f47f af48 	bne.w	80031cc <_scanf_float+0x60>
 800333c:	3501      	adds	r5, #1
 800333e:	b2ed      	uxtb	r5, r5
 8003340:	e7d8      	b.n	80032f4 <_scanf_float+0x188>
 8003342:	f1ba 0f01 	cmp.w	sl, #1
 8003346:	f47f af41 	bne.w	80031cc <_scanf_float+0x60>
 800334a:	f04f 0a02 	mov.w	sl, #2
 800334e:	e7d1      	b.n	80032f4 <_scanf_float+0x188>
 8003350:	b97d      	cbnz	r5, 8003372 <_scanf_float+0x206>
 8003352:	f1b9 0f00 	cmp.w	r9, #0
 8003356:	f47f af3c 	bne.w	80031d2 <_scanf_float+0x66>
 800335a:	6822      	ldr	r2, [r4, #0]
 800335c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003360:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003364:	f47f af39 	bne.w	80031da <_scanf_float+0x6e>
 8003368:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800336c:	6022      	str	r2, [r4, #0]
 800336e:	2501      	movs	r5, #1
 8003370:	e7c0      	b.n	80032f4 <_scanf_float+0x188>
 8003372:	2d03      	cmp	r5, #3
 8003374:	d0e2      	beq.n	800333c <_scanf_float+0x1d0>
 8003376:	2d05      	cmp	r5, #5
 8003378:	e7de      	b.n	8003338 <_scanf_float+0x1cc>
 800337a:	2d02      	cmp	r5, #2
 800337c:	f47f af26 	bne.w	80031cc <_scanf_float+0x60>
 8003380:	2503      	movs	r5, #3
 8003382:	e7b7      	b.n	80032f4 <_scanf_float+0x188>
 8003384:	2d06      	cmp	r5, #6
 8003386:	f47f af21 	bne.w	80031cc <_scanf_float+0x60>
 800338a:	2507      	movs	r5, #7
 800338c:	e7b2      	b.n	80032f4 <_scanf_float+0x188>
 800338e:	6822      	ldr	r2, [r4, #0]
 8003390:	0591      	lsls	r1, r2, #22
 8003392:	f57f af1b 	bpl.w	80031cc <_scanf_float+0x60>
 8003396:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800339a:	6022      	str	r2, [r4, #0]
 800339c:	f8cd 9004 	str.w	r9, [sp, #4]
 80033a0:	e7a8      	b.n	80032f4 <_scanf_float+0x188>
 80033a2:	6822      	ldr	r2, [r4, #0]
 80033a4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80033a8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80033ac:	d006      	beq.n	80033bc <_scanf_float+0x250>
 80033ae:	0550      	lsls	r0, r2, #21
 80033b0:	f57f af0c 	bpl.w	80031cc <_scanf_float+0x60>
 80033b4:	f1b9 0f00 	cmp.w	r9, #0
 80033b8:	f43f af0f 	beq.w	80031da <_scanf_float+0x6e>
 80033bc:	0591      	lsls	r1, r2, #22
 80033be:	bf58      	it	pl
 80033c0:	9901      	ldrpl	r1, [sp, #4]
 80033c2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80033c6:	bf58      	it	pl
 80033c8:	eba9 0101 	subpl.w	r1, r9, r1
 80033cc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80033d0:	bf58      	it	pl
 80033d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80033d6:	6022      	str	r2, [r4, #0]
 80033d8:	f04f 0900 	mov.w	r9, #0
 80033dc:	e78a      	b.n	80032f4 <_scanf_float+0x188>
 80033de:	f04f 0a03 	mov.w	sl, #3
 80033e2:	e787      	b.n	80032f4 <_scanf_float+0x188>
 80033e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80033e8:	4639      	mov	r1, r7
 80033ea:	4640      	mov	r0, r8
 80033ec:	4798      	blx	r3
 80033ee:	2800      	cmp	r0, #0
 80033f0:	f43f aedf 	beq.w	80031b2 <_scanf_float+0x46>
 80033f4:	e6ea      	b.n	80031cc <_scanf_float+0x60>
 80033f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80033fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80033fe:	463a      	mov	r2, r7
 8003400:	4640      	mov	r0, r8
 8003402:	4798      	blx	r3
 8003404:	6923      	ldr	r3, [r4, #16]
 8003406:	3b01      	subs	r3, #1
 8003408:	6123      	str	r3, [r4, #16]
 800340a:	e6ec      	b.n	80031e6 <_scanf_float+0x7a>
 800340c:	1e6b      	subs	r3, r5, #1
 800340e:	2b06      	cmp	r3, #6
 8003410:	d825      	bhi.n	800345e <_scanf_float+0x2f2>
 8003412:	2d02      	cmp	r5, #2
 8003414:	d836      	bhi.n	8003484 <_scanf_float+0x318>
 8003416:	455e      	cmp	r6, fp
 8003418:	f67f aee8 	bls.w	80031ec <_scanf_float+0x80>
 800341c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003420:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003424:	463a      	mov	r2, r7
 8003426:	4640      	mov	r0, r8
 8003428:	4798      	blx	r3
 800342a:	6923      	ldr	r3, [r4, #16]
 800342c:	3b01      	subs	r3, #1
 800342e:	6123      	str	r3, [r4, #16]
 8003430:	e7f1      	b.n	8003416 <_scanf_float+0x2aa>
 8003432:	9802      	ldr	r0, [sp, #8]
 8003434:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003438:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800343c:	9002      	str	r0, [sp, #8]
 800343e:	463a      	mov	r2, r7
 8003440:	4640      	mov	r0, r8
 8003442:	4798      	blx	r3
 8003444:	6923      	ldr	r3, [r4, #16]
 8003446:	3b01      	subs	r3, #1
 8003448:	6123      	str	r3, [r4, #16]
 800344a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800344e:	fa5f fa8a 	uxtb.w	sl, sl
 8003452:	f1ba 0f02 	cmp.w	sl, #2
 8003456:	d1ec      	bne.n	8003432 <_scanf_float+0x2c6>
 8003458:	3d03      	subs	r5, #3
 800345a:	b2ed      	uxtb	r5, r5
 800345c:	1b76      	subs	r6, r6, r5
 800345e:	6823      	ldr	r3, [r4, #0]
 8003460:	05da      	lsls	r2, r3, #23
 8003462:	d52f      	bpl.n	80034c4 <_scanf_float+0x358>
 8003464:	055b      	lsls	r3, r3, #21
 8003466:	d510      	bpl.n	800348a <_scanf_float+0x31e>
 8003468:	455e      	cmp	r6, fp
 800346a:	f67f aebf 	bls.w	80031ec <_scanf_float+0x80>
 800346e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003472:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003476:	463a      	mov	r2, r7
 8003478:	4640      	mov	r0, r8
 800347a:	4798      	blx	r3
 800347c:	6923      	ldr	r3, [r4, #16]
 800347e:	3b01      	subs	r3, #1
 8003480:	6123      	str	r3, [r4, #16]
 8003482:	e7f1      	b.n	8003468 <_scanf_float+0x2fc>
 8003484:	46aa      	mov	sl, r5
 8003486:	9602      	str	r6, [sp, #8]
 8003488:	e7df      	b.n	800344a <_scanf_float+0x2de>
 800348a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800348e:	6923      	ldr	r3, [r4, #16]
 8003490:	2965      	cmp	r1, #101	; 0x65
 8003492:	f103 33ff 	add.w	r3, r3, #4294967295
 8003496:	f106 35ff 	add.w	r5, r6, #4294967295
 800349a:	6123      	str	r3, [r4, #16]
 800349c:	d00c      	beq.n	80034b8 <_scanf_float+0x34c>
 800349e:	2945      	cmp	r1, #69	; 0x45
 80034a0:	d00a      	beq.n	80034b8 <_scanf_float+0x34c>
 80034a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80034a6:	463a      	mov	r2, r7
 80034a8:	4640      	mov	r0, r8
 80034aa:	4798      	blx	r3
 80034ac:	6923      	ldr	r3, [r4, #16]
 80034ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	1eb5      	subs	r5, r6, #2
 80034b6:	6123      	str	r3, [r4, #16]
 80034b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80034bc:	463a      	mov	r2, r7
 80034be:	4640      	mov	r0, r8
 80034c0:	4798      	blx	r3
 80034c2:	462e      	mov	r6, r5
 80034c4:	6825      	ldr	r5, [r4, #0]
 80034c6:	f015 0510 	ands.w	r5, r5, #16
 80034ca:	d159      	bne.n	8003580 <_scanf_float+0x414>
 80034cc:	7035      	strb	r5, [r6, #0]
 80034ce:	6823      	ldr	r3, [r4, #0]
 80034d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d8:	d11b      	bne.n	8003512 <_scanf_float+0x3a6>
 80034da:	9b01      	ldr	r3, [sp, #4]
 80034dc:	454b      	cmp	r3, r9
 80034de:	eba3 0209 	sub.w	r2, r3, r9
 80034e2:	d123      	bne.n	800352c <_scanf_float+0x3c0>
 80034e4:	2200      	movs	r2, #0
 80034e6:	4659      	mov	r1, fp
 80034e8:	4640      	mov	r0, r8
 80034ea:	f000 fe97 	bl	800421c <_strtod_r>
 80034ee:	6822      	ldr	r2, [r4, #0]
 80034f0:	9b03      	ldr	r3, [sp, #12]
 80034f2:	f012 0f02 	tst.w	r2, #2
 80034f6:	ec57 6b10 	vmov	r6, r7, d0
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	d021      	beq.n	8003542 <_scanf_float+0x3d6>
 80034fe:	9903      	ldr	r1, [sp, #12]
 8003500:	1d1a      	adds	r2, r3, #4
 8003502:	600a      	str	r2, [r1, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	e9c3 6700 	strd	r6, r7, [r3]
 800350a:	68e3      	ldr	r3, [r4, #12]
 800350c:	3301      	adds	r3, #1
 800350e:	60e3      	str	r3, [r4, #12]
 8003510:	e66d      	b.n	80031ee <_scanf_float+0x82>
 8003512:	9b04      	ldr	r3, [sp, #16]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0e5      	beq.n	80034e4 <_scanf_float+0x378>
 8003518:	9905      	ldr	r1, [sp, #20]
 800351a:	230a      	movs	r3, #10
 800351c:	462a      	mov	r2, r5
 800351e:	3101      	adds	r1, #1
 8003520:	4640      	mov	r0, r8
 8003522:	f000 ff03 	bl	800432c <_strtol_r>
 8003526:	9b04      	ldr	r3, [sp, #16]
 8003528:	9e05      	ldr	r6, [sp, #20]
 800352a:	1ac2      	subs	r2, r0, r3
 800352c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003530:	429e      	cmp	r6, r3
 8003532:	bf28      	it	cs
 8003534:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003538:	4912      	ldr	r1, [pc, #72]	; (8003584 <_scanf_float+0x418>)
 800353a:	4630      	mov	r0, r6
 800353c:	f000 f82c 	bl	8003598 <siprintf>
 8003540:	e7d0      	b.n	80034e4 <_scanf_float+0x378>
 8003542:	9903      	ldr	r1, [sp, #12]
 8003544:	f012 0f04 	tst.w	r2, #4
 8003548:	f103 0204 	add.w	r2, r3, #4
 800354c:	600a      	str	r2, [r1, #0]
 800354e:	d1d9      	bne.n	8003504 <_scanf_float+0x398>
 8003550:	f8d3 8000 	ldr.w	r8, [r3]
 8003554:	ee10 2a10 	vmov	r2, s0
 8003558:	ee10 0a10 	vmov	r0, s0
 800355c:	463b      	mov	r3, r7
 800355e:	4639      	mov	r1, r7
 8003560:	f7fd fabc 	bl	8000adc <__aeabi_dcmpun>
 8003564:	b128      	cbz	r0, 8003572 <_scanf_float+0x406>
 8003566:	4808      	ldr	r0, [pc, #32]	; (8003588 <_scanf_float+0x41c>)
 8003568:	f000 f810 	bl	800358c <nanf>
 800356c:	ed88 0a00 	vstr	s0, [r8]
 8003570:	e7cb      	b.n	800350a <_scanf_float+0x39e>
 8003572:	4630      	mov	r0, r6
 8003574:	4639      	mov	r1, r7
 8003576:	f7fd fb0f 	bl	8000b98 <__aeabi_d2f>
 800357a:	f8c8 0000 	str.w	r0, [r8]
 800357e:	e7c4      	b.n	800350a <_scanf_float+0x39e>
 8003580:	2500      	movs	r5, #0
 8003582:	e634      	b.n	80031ee <_scanf_float+0x82>
 8003584:	08008b4c 	.word	0x08008b4c
 8003588:	08008f58 	.word	0x08008f58

0800358c <nanf>:
 800358c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8003594 <nanf+0x8>
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	7fc00000 	.word	0x7fc00000

08003598 <siprintf>:
 8003598:	b40e      	push	{r1, r2, r3}
 800359a:	b500      	push	{lr}
 800359c:	b09c      	sub	sp, #112	; 0x70
 800359e:	ab1d      	add	r3, sp, #116	; 0x74
 80035a0:	9002      	str	r0, [sp, #8]
 80035a2:	9006      	str	r0, [sp, #24]
 80035a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80035a8:	4809      	ldr	r0, [pc, #36]	; (80035d0 <siprintf+0x38>)
 80035aa:	9107      	str	r1, [sp, #28]
 80035ac:	9104      	str	r1, [sp, #16]
 80035ae:	4909      	ldr	r1, [pc, #36]	; (80035d4 <siprintf+0x3c>)
 80035b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80035b4:	9105      	str	r1, [sp, #20]
 80035b6:	6800      	ldr	r0, [r0, #0]
 80035b8:	9301      	str	r3, [sp, #4]
 80035ba:	a902      	add	r1, sp, #8
 80035bc:	f002 fed4 	bl	8006368 <_svfiprintf_r>
 80035c0:	9b02      	ldr	r3, [sp, #8]
 80035c2:	2200      	movs	r2, #0
 80035c4:	701a      	strb	r2, [r3, #0]
 80035c6:	b01c      	add	sp, #112	; 0x70
 80035c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80035cc:	b003      	add	sp, #12
 80035ce:	4770      	bx	lr
 80035d0:	20000010 	.word	0x20000010
 80035d4:	ffff0208 	.word	0xffff0208

080035d8 <sulp>:
 80035d8:	b570      	push	{r4, r5, r6, lr}
 80035da:	4604      	mov	r4, r0
 80035dc:	460d      	mov	r5, r1
 80035de:	ec45 4b10 	vmov	d0, r4, r5
 80035e2:	4616      	mov	r6, r2
 80035e4:	f002 fc1e 	bl	8005e24 <__ulp>
 80035e8:	ec51 0b10 	vmov	r0, r1, d0
 80035ec:	b17e      	cbz	r6, 800360e <sulp+0x36>
 80035ee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80035f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	dd09      	ble.n	800360e <sulp+0x36>
 80035fa:	051b      	lsls	r3, r3, #20
 80035fc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003600:	2400      	movs	r4, #0
 8003602:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003606:	4622      	mov	r2, r4
 8003608:	462b      	mov	r3, r5
 800360a:	f7fc ffcd 	bl	80005a8 <__aeabi_dmul>
 800360e:	bd70      	pop	{r4, r5, r6, pc}

08003610 <_strtod_l>:
 8003610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003614:	ed2d 8b02 	vpush	{d8}
 8003618:	b09d      	sub	sp, #116	; 0x74
 800361a:	461f      	mov	r7, r3
 800361c:	2300      	movs	r3, #0
 800361e:	9318      	str	r3, [sp, #96]	; 0x60
 8003620:	4ba2      	ldr	r3, [pc, #648]	; (80038ac <_strtod_l+0x29c>)
 8003622:	9213      	str	r2, [sp, #76]	; 0x4c
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	9305      	str	r3, [sp, #20]
 8003628:	4604      	mov	r4, r0
 800362a:	4618      	mov	r0, r3
 800362c:	4688      	mov	r8, r1
 800362e:	f7fc fda7 	bl	8000180 <strlen>
 8003632:	f04f 0a00 	mov.w	sl, #0
 8003636:	4605      	mov	r5, r0
 8003638:	f04f 0b00 	mov.w	fp, #0
 800363c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8003640:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003642:	781a      	ldrb	r2, [r3, #0]
 8003644:	2a2b      	cmp	r2, #43	; 0x2b
 8003646:	d04e      	beq.n	80036e6 <_strtod_l+0xd6>
 8003648:	d83b      	bhi.n	80036c2 <_strtod_l+0xb2>
 800364a:	2a0d      	cmp	r2, #13
 800364c:	d834      	bhi.n	80036b8 <_strtod_l+0xa8>
 800364e:	2a08      	cmp	r2, #8
 8003650:	d834      	bhi.n	80036bc <_strtod_l+0xac>
 8003652:	2a00      	cmp	r2, #0
 8003654:	d03e      	beq.n	80036d4 <_strtod_l+0xc4>
 8003656:	2300      	movs	r3, #0
 8003658:	930a      	str	r3, [sp, #40]	; 0x28
 800365a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800365c:	7833      	ldrb	r3, [r6, #0]
 800365e:	2b30      	cmp	r3, #48	; 0x30
 8003660:	f040 80b0 	bne.w	80037c4 <_strtod_l+0x1b4>
 8003664:	7873      	ldrb	r3, [r6, #1]
 8003666:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800366a:	2b58      	cmp	r3, #88	; 0x58
 800366c:	d168      	bne.n	8003740 <_strtod_l+0x130>
 800366e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003670:	9301      	str	r3, [sp, #4]
 8003672:	ab18      	add	r3, sp, #96	; 0x60
 8003674:	9702      	str	r7, [sp, #8]
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	4a8d      	ldr	r2, [pc, #564]	; (80038b0 <_strtod_l+0x2a0>)
 800367a:	ab19      	add	r3, sp, #100	; 0x64
 800367c:	a917      	add	r1, sp, #92	; 0x5c
 800367e:	4620      	mov	r0, r4
 8003680:	f001 fd38 	bl	80050f4 <__gethex>
 8003684:	f010 0707 	ands.w	r7, r0, #7
 8003688:	4605      	mov	r5, r0
 800368a:	d005      	beq.n	8003698 <_strtod_l+0x88>
 800368c:	2f06      	cmp	r7, #6
 800368e:	d12c      	bne.n	80036ea <_strtod_l+0xda>
 8003690:	3601      	adds	r6, #1
 8003692:	2300      	movs	r3, #0
 8003694:	9617      	str	r6, [sp, #92]	; 0x5c
 8003696:	930a      	str	r3, [sp, #40]	; 0x28
 8003698:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800369a:	2b00      	cmp	r3, #0
 800369c:	f040 8590 	bne.w	80041c0 <_strtod_l+0xbb0>
 80036a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036a2:	b1eb      	cbz	r3, 80036e0 <_strtod_l+0xd0>
 80036a4:	4652      	mov	r2, sl
 80036a6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80036aa:	ec43 2b10 	vmov	d0, r2, r3
 80036ae:	b01d      	add	sp, #116	; 0x74
 80036b0:	ecbd 8b02 	vpop	{d8}
 80036b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036b8:	2a20      	cmp	r2, #32
 80036ba:	d1cc      	bne.n	8003656 <_strtod_l+0x46>
 80036bc:	3301      	adds	r3, #1
 80036be:	9317      	str	r3, [sp, #92]	; 0x5c
 80036c0:	e7be      	b.n	8003640 <_strtod_l+0x30>
 80036c2:	2a2d      	cmp	r2, #45	; 0x2d
 80036c4:	d1c7      	bne.n	8003656 <_strtod_l+0x46>
 80036c6:	2201      	movs	r2, #1
 80036c8:	920a      	str	r2, [sp, #40]	; 0x28
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80036ce:	785b      	ldrb	r3, [r3, #1]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1c2      	bne.n	800365a <_strtod_l+0x4a>
 80036d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80036d6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f040 856e 	bne.w	80041bc <_strtod_l+0xbac>
 80036e0:	4652      	mov	r2, sl
 80036e2:	465b      	mov	r3, fp
 80036e4:	e7e1      	b.n	80036aa <_strtod_l+0x9a>
 80036e6:	2200      	movs	r2, #0
 80036e8:	e7ee      	b.n	80036c8 <_strtod_l+0xb8>
 80036ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80036ec:	b13a      	cbz	r2, 80036fe <_strtod_l+0xee>
 80036ee:	2135      	movs	r1, #53	; 0x35
 80036f0:	a81a      	add	r0, sp, #104	; 0x68
 80036f2:	f002 fca2 	bl	800603a <__copybits>
 80036f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80036f8:	4620      	mov	r0, r4
 80036fa:	f002 f861 	bl	80057c0 <_Bfree>
 80036fe:	3f01      	subs	r7, #1
 8003700:	2f04      	cmp	r7, #4
 8003702:	d806      	bhi.n	8003712 <_strtod_l+0x102>
 8003704:	e8df f007 	tbb	[pc, r7]
 8003708:	1714030a 	.word	0x1714030a
 800370c:	0a          	.byte	0x0a
 800370d:	00          	.byte	0x00
 800370e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8003712:	0728      	lsls	r0, r5, #28
 8003714:	d5c0      	bpl.n	8003698 <_strtod_l+0x88>
 8003716:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800371a:	e7bd      	b.n	8003698 <_strtod_l+0x88>
 800371c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8003720:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003722:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003726:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800372a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800372e:	e7f0      	b.n	8003712 <_strtod_l+0x102>
 8003730:	f8df b180 	ldr.w	fp, [pc, #384]	; 80038b4 <_strtod_l+0x2a4>
 8003734:	e7ed      	b.n	8003712 <_strtod_l+0x102>
 8003736:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800373a:	f04f 3aff 	mov.w	sl, #4294967295
 800373e:	e7e8      	b.n	8003712 <_strtod_l+0x102>
 8003740:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003742:	1c5a      	adds	r2, r3, #1
 8003744:	9217      	str	r2, [sp, #92]	; 0x5c
 8003746:	785b      	ldrb	r3, [r3, #1]
 8003748:	2b30      	cmp	r3, #48	; 0x30
 800374a:	d0f9      	beq.n	8003740 <_strtod_l+0x130>
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0a3      	beq.n	8003698 <_strtod_l+0x88>
 8003750:	2301      	movs	r3, #1
 8003752:	f04f 0900 	mov.w	r9, #0
 8003756:	9304      	str	r3, [sp, #16]
 8003758:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800375a:	9308      	str	r3, [sp, #32]
 800375c:	f8cd 901c 	str.w	r9, [sp, #28]
 8003760:	464f      	mov	r7, r9
 8003762:	220a      	movs	r2, #10
 8003764:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8003766:	7806      	ldrb	r6, [r0, #0]
 8003768:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800376c:	b2d9      	uxtb	r1, r3
 800376e:	2909      	cmp	r1, #9
 8003770:	d92a      	bls.n	80037c8 <_strtod_l+0x1b8>
 8003772:	9905      	ldr	r1, [sp, #20]
 8003774:	462a      	mov	r2, r5
 8003776:	f002 ff0f 	bl	8006598 <strncmp>
 800377a:	b398      	cbz	r0, 80037e4 <_strtod_l+0x1d4>
 800377c:	2000      	movs	r0, #0
 800377e:	4632      	mov	r2, r6
 8003780:	463d      	mov	r5, r7
 8003782:	9005      	str	r0, [sp, #20]
 8003784:	4603      	mov	r3, r0
 8003786:	2a65      	cmp	r2, #101	; 0x65
 8003788:	d001      	beq.n	800378e <_strtod_l+0x17e>
 800378a:	2a45      	cmp	r2, #69	; 0x45
 800378c:	d118      	bne.n	80037c0 <_strtod_l+0x1b0>
 800378e:	b91d      	cbnz	r5, 8003798 <_strtod_l+0x188>
 8003790:	9a04      	ldr	r2, [sp, #16]
 8003792:	4302      	orrs	r2, r0
 8003794:	d09e      	beq.n	80036d4 <_strtod_l+0xc4>
 8003796:	2500      	movs	r5, #0
 8003798:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800379c:	f108 0201 	add.w	r2, r8, #1
 80037a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80037a2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80037a6:	2a2b      	cmp	r2, #43	; 0x2b
 80037a8:	d075      	beq.n	8003896 <_strtod_l+0x286>
 80037aa:	2a2d      	cmp	r2, #45	; 0x2d
 80037ac:	d07b      	beq.n	80038a6 <_strtod_l+0x296>
 80037ae:	f04f 0c00 	mov.w	ip, #0
 80037b2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80037b6:	2909      	cmp	r1, #9
 80037b8:	f240 8082 	bls.w	80038c0 <_strtod_l+0x2b0>
 80037bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80037c0:	2600      	movs	r6, #0
 80037c2:	e09d      	b.n	8003900 <_strtod_l+0x2f0>
 80037c4:	2300      	movs	r3, #0
 80037c6:	e7c4      	b.n	8003752 <_strtod_l+0x142>
 80037c8:	2f08      	cmp	r7, #8
 80037ca:	bfd8      	it	le
 80037cc:	9907      	ldrle	r1, [sp, #28]
 80037ce:	f100 0001 	add.w	r0, r0, #1
 80037d2:	bfda      	itte	le
 80037d4:	fb02 3301 	mlale	r3, r2, r1, r3
 80037d8:	9307      	strle	r3, [sp, #28]
 80037da:	fb02 3909 	mlagt	r9, r2, r9, r3
 80037de:	3701      	adds	r7, #1
 80037e0:	9017      	str	r0, [sp, #92]	; 0x5c
 80037e2:	e7bf      	b.n	8003764 <_strtod_l+0x154>
 80037e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80037e6:	195a      	adds	r2, r3, r5
 80037e8:	9217      	str	r2, [sp, #92]	; 0x5c
 80037ea:	5d5a      	ldrb	r2, [r3, r5]
 80037ec:	2f00      	cmp	r7, #0
 80037ee:	d037      	beq.n	8003860 <_strtod_l+0x250>
 80037f0:	9005      	str	r0, [sp, #20]
 80037f2:	463d      	mov	r5, r7
 80037f4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80037f8:	2b09      	cmp	r3, #9
 80037fa:	d912      	bls.n	8003822 <_strtod_l+0x212>
 80037fc:	2301      	movs	r3, #1
 80037fe:	e7c2      	b.n	8003786 <_strtod_l+0x176>
 8003800:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003802:	1c5a      	adds	r2, r3, #1
 8003804:	9217      	str	r2, [sp, #92]	; 0x5c
 8003806:	785a      	ldrb	r2, [r3, #1]
 8003808:	3001      	adds	r0, #1
 800380a:	2a30      	cmp	r2, #48	; 0x30
 800380c:	d0f8      	beq.n	8003800 <_strtod_l+0x1f0>
 800380e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8003812:	2b08      	cmp	r3, #8
 8003814:	f200 84d9 	bhi.w	80041ca <_strtod_l+0xbba>
 8003818:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800381a:	9005      	str	r0, [sp, #20]
 800381c:	2000      	movs	r0, #0
 800381e:	9308      	str	r3, [sp, #32]
 8003820:	4605      	mov	r5, r0
 8003822:	3a30      	subs	r2, #48	; 0x30
 8003824:	f100 0301 	add.w	r3, r0, #1
 8003828:	d014      	beq.n	8003854 <_strtod_l+0x244>
 800382a:	9905      	ldr	r1, [sp, #20]
 800382c:	4419      	add	r1, r3
 800382e:	9105      	str	r1, [sp, #20]
 8003830:	462b      	mov	r3, r5
 8003832:	eb00 0e05 	add.w	lr, r0, r5
 8003836:	210a      	movs	r1, #10
 8003838:	4573      	cmp	r3, lr
 800383a:	d113      	bne.n	8003864 <_strtod_l+0x254>
 800383c:	182b      	adds	r3, r5, r0
 800383e:	2b08      	cmp	r3, #8
 8003840:	f105 0501 	add.w	r5, r5, #1
 8003844:	4405      	add	r5, r0
 8003846:	dc1c      	bgt.n	8003882 <_strtod_l+0x272>
 8003848:	9907      	ldr	r1, [sp, #28]
 800384a:	230a      	movs	r3, #10
 800384c:	fb03 2301 	mla	r3, r3, r1, r2
 8003850:	9307      	str	r3, [sp, #28]
 8003852:	2300      	movs	r3, #0
 8003854:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003856:	1c51      	adds	r1, r2, #1
 8003858:	9117      	str	r1, [sp, #92]	; 0x5c
 800385a:	7852      	ldrb	r2, [r2, #1]
 800385c:	4618      	mov	r0, r3
 800385e:	e7c9      	b.n	80037f4 <_strtod_l+0x1e4>
 8003860:	4638      	mov	r0, r7
 8003862:	e7d2      	b.n	800380a <_strtod_l+0x1fa>
 8003864:	2b08      	cmp	r3, #8
 8003866:	dc04      	bgt.n	8003872 <_strtod_l+0x262>
 8003868:	9e07      	ldr	r6, [sp, #28]
 800386a:	434e      	muls	r6, r1
 800386c:	9607      	str	r6, [sp, #28]
 800386e:	3301      	adds	r3, #1
 8003870:	e7e2      	b.n	8003838 <_strtod_l+0x228>
 8003872:	f103 0c01 	add.w	ip, r3, #1
 8003876:	f1bc 0f10 	cmp.w	ip, #16
 800387a:	bfd8      	it	le
 800387c:	fb01 f909 	mulle.w	r9, r1, r9
 8003880:	e7f5      	b.n	800386e <_strtod_l+0x25e>
 8003882:	2d10      	cmp	r5, #16
 8003884:	bfdc      	itt	le
 8003886:	230a      	movle	r3, #10
 8003888:	fb03 2909 	mlale	r9, r3, r9, r2
 800388c:	e7e1      	b.n	8003852 <_strtod_l+0x242>
 800388e:	2300      	movs	r3, #0
 8003890:	9305      	str	r3, [sp, #20]
 8003892:	2301      	movs	r3, #1
 8003894:	e77c      	b.n	8003790 <_strtod_l+0x180>
 8003896:	f04f 0c00 	mov.w	ip, #0
 800389a:	f108 0202 	add.w	r2, r8, #2
 800389e:	9217      	str	r2, [sp, #92]	; 0x5c
 80038a0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80038a4:	e785      	b.n	80037b2 <_strtod_l+0x1a2>
 80038a6:	f04f 0c01 	mov.w	ip, #1
 80038aa:	e7f6      	b.n	800389a <_strtod_l+0x28a>
 80038ac:	08008da0 	.word	0x08008da0
 80038b0:	08008b54 	.word	0x08008b54
 80038b4:	7ff00000 	.word	0x7ff00000
 80038b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80038ba:	1c51      	adds	r1, r2, #1
 80038bc:	9117      	str	r1, [sp, #92]	; 0x5c
 80038be:	7852      	ldrb	r2, [r2, #1]
 80038c0:	2a30      	cmp	r2, #48	; 0x30
 80038c2:	d0f9      	beq.n	80038b8 <_strtod_l+0x2a8>
 80038c4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80038c8:	2908      	cmp	r1, #8
 80038ca:	f63f af79 	bhi.w	80037c0 <_strtod_l+0x1b0>
 80038ce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80038d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80038d4:	9206      	str	r2, [sp, #24]
 80038d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80038d8:	1c51      	adds	r1, r2, #1
 80038da:	9117      	str	r1, [sp, #92]	; 0x5c
 80038dc:	7852      	ldrb	r2, [r2, #1]
 80038de:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80038e2:	2e09      	cmp	r6, #9
 80038e4:	d937      	bls.n	8003956 <_strtod_l+0x346>
 80038e6:	9e06      	ldr	r6, [sp, #24]
 80038e8:	1b89      	subs	r1, r1, r6
 80038ea:	2908      	cmp	r1, #8
 80038ec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80038f0:	dc02      	bgt.n	80038f8 <_strtod_l+0x2e8>
 80038f2:	4576      	cmp	r6, lr
 80038f4:	bfa8      	it	ge
 80038f6:	4676      	movge	r6, lr
 80038f8:	f1bc 0f00 	cmp.w	ip, #0
 80038fc:	d000      	beq.n	8003900 <_strtod_l+0x2f0>
 80038fe:	4276      	negs	r6, r6
 8003900:	2d00      	cmp	r5, #0
 8003902:	d14d      	bne.n	80039a0 <_strtod_l+0x390>
 8003904:	9904      	ldr	r1, [sp, #16]
 8003906:	4301      	orrs	r1, r0
 8003908:	f47f aec6 	bne.w	8003698 <_strtod_l+0x88>
 800390c:	2b00      	cmp	r3, #0
 800390e:	f47f aee1 	bne.w	80036d4 <_strtod_l+0xc4>
 8003912:	2a69      	cmp	r2, #105	; 0x69
 8003914:	d027      	beq.n	8003966 <_strtod_l+0x356>
 8003916:	dc24      	bgt.n	8003962 <_strtod_l+0x352>
 8003918:	2a49      	cmp	r2, #73	; 0x49
 800391a:	d024      	beq.n	8003966 <_strtod_l+0x356>
 800391c:	2a4e      	cmp	r2, #78	; 0x4e
 800391e:	f47f aed9 	bne.w	80036d4 <_strtod_l+0xc4>
 8003922:	499f      	ldr	r1, [pc, #636]	; (8003ba0 <_strtod_l+0x590>)
 8003924:	a817      	add	r0, sp, #92	; 0x5c
 8003926:	f001 fe3d 	bl	80055a4 <__match>
 800392a:	2800      	cmp	r0, #0
 800392c:	f43f aed2 	beq.w	80036d4 <_strtod_l+0xc4>
 8003930:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2b28      	cmp	r3, #40	; 0x28
 8003936:	d12d      	bne.n	8003994 <_strtod_l+0x384>
 8003938:	499a      	ldr	r1, [pc, #616]	; (8003ba4 <_strtod_l+0x594>)
 800393a:	aa1a      	add	r2, sp, #104	; 0x68
 800393c:	a817      	add	r0, sp, #92	; 0x5c
 800393e:	f001 fe45 	bl	80055cc <__hexnan>
 8003942:	2805      	cmp	r0, #5
 8003944:	d126      	bne.n	8003994 <_strtod_l+0x384>
 8003946:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003948:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800394c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8003950:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8003954:	e6a0      	b.n	8003698 <_strtod_l+0x88>
 8003956:	210a      	movs	r1, #10
 8003958:	fb01 2e0e 	mla	lr, r1, lr, r2
 800395c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8003960:	e7b9      	b.n	80038d6 <_strtod_l+0x2c6>
 8003962:	2a6e      	cmp	r2, #110	; 0x6e
 8003964:	e7db      	b.n	800391e <_strtod_l+0x30e>
 8003966:	4990      	ldr	r1, [pc, #576]	; (8003ba8 <_strtod_l+0x598>)
 8003968:	a817      	add	r0, sp, #92	; 0x5c
 800396a:	f001 fe1b 	bl	80055a4 <__match>
 800396e:	2800      	cmp	r0, #0
 8003970:	f43f aeb0 	beq.w	80036d4 <_strtod_l+0xc4>
 8003974:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003976:	498d      	ldr	r1, [pc, #564]	; (8003bac <_strtod_l+0x59c>)
 8003978:	3b01      	subs	r3, #1
 800397a:	a817      	add	r0, sp, #92	; 0x5c
 800397c:	9317      	str	r3, [sp, #92]	; 0x5c
 800397e:	f001 fe11 	bl	80055a4 <__match>
 8003982:	b910      	cbnz	r0, 800398a <_strtod_l+0x37a>
 8003984:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003986:	3301      	adds	r3, #1
 8003988:	9317      	str	r3, [sp, #92]	; 0x5c
 800398a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8003bbc <_strtod_l+0x5ac>
 800398e:	f04f 0a00 	mov.w	sl, #0
 8003992:	e681      	b.n	8003698 <_strtod_l+0x88>
 8003994:	4886      	ldr	r0, [pc, #536]	; (8003bb0 <_strtod_l+0x5a0>)
 8003996:	f002 fde7 	bl	8006568 <nan>
 800399a:	ec5b ab10 	vmov	sl, fp, d0
 800399e:	e67b      	b.n	8003698 <_strtod_l+0x88>
 80039a0:	9b05      	ldr	r3, [sp, #20]
 80039a2:	9807      	ldr	r0, [sp, #28]
 80039a4:	1af3      	subs	r3, r6, r3
 80039a6:	2f00      	cmp	r7, #0
 80039a8:	bf08      	it	eq
 80039aa:	462f      	moveq	r7, r5
 80039ac:	2d10      	cmp	r5, #16
 80039ae:	9306      	str	r3, [sp, #24]
 80039b0:	46a8      	mov	r8, r5
 80039b2:	bfa8      	it	ge
 80039b4:	f04f 0810 	movge.w	r8, #16
 80039b8:	f7fc fd7c 	bl	80004b4 <__aeabi_ui2d>
 80039bc:	2d09      	cmp	r5, #9
 80039be:	4682      	mov	sl, r0
 80039c0:	468b      	mov	fp, r1
 80039c2:	dd13      	ble.n	80039ec <_strtod_l+0x3dc>
 80039c4:	4b7b      	ldr	r3, [pc, #492]	; (8003bb4 <_strtod_l+0x5a4>)
 80039c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80039ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80039ce:	f7fc fdeb 	bl	80005a8 <__aeabi_dmul>
 80039d2:	4682      	mov	sl, r0
 80039d4:	4648      	mov	r0, r9
 80039d6:	468b      	mov	fp, r1
 80039d8:	f7fc fd6c 	bl	80004b4 <__aeabi_ui2d>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	4650      	mov	r0, sl
 80039e2:	4659      	mov	r1, fp
 80039e4:	f7fc fc2a 	bl	800023c <__adddf3>
 80039e8:	4682      	mov	sl, r0
 80039ea:	468b      	mov	fp, r1
 80039ec:	2d0f      	cmp	r5, #15
 80039ee:	dc38      	bgt.n	8003a62 <_strtod_l+0x452>
 80039f0:	9b06      	ldr	r3, [sp, #24]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f43f ae50 	beq.w	8003698 <_strtod_l+0x88>
 80039f8:	dd24      	ble.n	8003a44 <_strtod_l+0x434>
 80039fa:	2b16      	cmp	r3, #22
 80039fc:	dc0b      	bgt.n	8003a16 <_strtod_l+0x406>
 80039fe:	496d      	ldr	r1, [pc, #436]	; (8003bb4 <_strtod_l+0x5a4>)
 8003a00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003a04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a08:	4652      	mov	r2, sl
 8003a0a:	465b      	mov	r3, fp
 8003a0c:	f7fc fdcc 	bl	80005a8 <__aeabi_dmul>
 8003a10:	4682      	mov	sl, r0
 8003a12:	468b      	mov	fp, r1
 8003a14:	e640      	b.n	8003698 <_strtod_l+0x88>
 8003a16:	9a06      	ldr	r2, [sp, #24]
 8003a18:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	db20      	blt.n	8003a62 <_strtod_l+0x452>
 8003a20:	4c64      	ldr	r4, [pc, #400]	; (8003bb4 <_strtod_l+0x5a4>)
 8003a22:	f1c5 050f 	rsb	r5, r5, #15
 8003a26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8003a2a:	4652      	mov	r2, sl
 8003a2c:	465b      	mov	r3, fp
 8003a2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a32:	f7fc fdb9 	bl	80005a8 <__aeabi_dmul>
 8003a36:	9b06      	ldr	r3, [sp, #24]
 8003a38:	1b5d      	subs	r5, r3, r5
 8003a3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8003a3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003a42:	e7e3      	b.n	8003a0c <_strtod_l+0x3fc>
 8003a44:	9b06      	ldr	r3, [sp, #24]
 8003a46:	3316      	adds	r3, #22
 8003a48:	db0b      	blt.n	8003a62 <_strtod_l+0x452>
 8003a4a:	9b05      	ldr	r3, [sp, #20]
 8003a4c:	1b9e      	subs	r6, r3, r6
 8003a4e:	4b59      	ldr	r3, [pc, #356]	; (8003bb4 <_strtod_l+0x5a4>)
 8003a50:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8003a54:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003a58:	4650      	mov	r0, sl
 8003a5a:	4659      	mov	r1, fp
 8003a5c:	f7fc fece 	bl	80007fc <__aeabi_ddiv>
 8003a60:	e7d6      	b.n	8003a10 <_strtod_l+0x400>
 8003a62:	9b06      	ldr	r3, [sp, #24]
 8003a64:	eba5 0808 	sub.w	r8, r5, r8
 8003a68:	4498      	add	r8, r3
 8003a6a:	f1b8 0f00 	cmp.w	r8, #0
 8003a6e:	dd74      	ble.n	8003b5a <_strtod_l+0x54a>
 8003a70:	f018 030f 	ands.w	r3, r8, #15
 8003a74:	d00a      	beq.n	8003a8c <_strtod_l+0x47c>
 8003a76:	494f      	ldr	r1, [pc, #316]	; (8003bb4 <_strtod_l+0x5a4>)
 8003a78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003a7c:	4652      	mov	r2, sl
 8003a7e:	465b      	mov	r3, fp
 8003a80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a84:	f7fc fd90 	bl	80005a8 <__aeabi_dmul>
 8003a88:	4682      	mov	sl, r0
 8003a8a:	468b      	mov	fp, r1
 8003a8c:	f038 080f 	bics.w	r8, r8, #15
 8003a90:	d04f      	beq.n	8003b32 <_strtod_l+0x522>
 8003a92:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8003a96:	dd22      	ble.n	8003ade <_strtod_l+0x4ce>
 8003a98:	2500      	movs	r5, #0
 8003a9a:	462e      	mov	r6, r5
 8003a9c:	9507      	str	r5, [sp, #28]
 8003a9e:	9505      	str	r5, [sp, #20]
 8003aa0:	2322      	movs	r3, #34	; 0x22
 8003aa2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8003bbc <_strtod_l+0x5ac>
 8003aa6:	6023      	str	r3, [r4, #0]
 8003aa8:	f04f 0a00 	mov.w	sl, #0
 8003aac:	9b07      	ldr	r3, [sp, #28]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f43f adf2 	beq.w	8003698 <_strtod_l+0x88>
 8003ab4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	f001 fe82 	bl	80057c0 <_Bfree>
 8003abc:	9905      	ldr	r1, [sp, #20]
 8003abe:	4620      	mov	r0, r4
 8003ac0:	f001 fe7e 	bl	80057c0 <_Bfree>
 8003ac4:	4631      	mov	r1, r6
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	f001 fe7a 	bl	80057c0 <_Bfree>
 8003acc:	9907      	ldr	r1, [sp, #28]
 8003ace:	4620      	mov	r0, r4
 8003ad0:	f001 fe76 	bl	80057c0 <_Bfree>
 8003ad4:	4629      	mov	r1, r5
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	f001 fe72 	bl	80057c0 <_Bfree>
 8003adc:	e5dc      	b.n	8003698 <_strtod_l+0x88>
 8003ade:	4b36      	ldr	r3, [pc, #216]	; (8003bb8 <_strtod_l+0x5a8>)
 8003ae0:	9304      	str	r3, [sp, #16]
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8003ae8:	4650      	mov	r0, sl
 8003aea:	4659      	mov	r1, fp
 8003aec:	4699      	mov	r9, r3
 8003aee:	f1b8 0f01 	cmp.w	r8, #1
 8003af2:	dc21      	bgt.n	8003b38 <_strtod_l+0x528>
 8003af4:	b10b      	cbz	r3, 8003afa <_strtod_l+0x4ea>
 8003af6:	4682      	mov	sl, r0
 8003af8:	468b      	mov	fp, r1
 8003afa:	4b2f      	ldr	r3, [pc, #188]	; (8003bb8 <_strtod_l+0x5a8>)
 8003afc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8003b00:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8003b04:	4652      	mov	r2, sl
 8003b06:	465b      	mov	r3, fp
 8003b08:	e9d9 0100 	ldrd	r0, r1, [r9]
 8003b0c:	f7fc fd4c 	bl	80005a8 <__aeabi_dmul>
 8003b10:	4b2a      	ldr	r3, [pc, #168]	; (8003bbc <_strtod_l+0x5ac>)
 8003b12:	460a      	mov	r2, r1
 8003b14:	400b      	ands	r3, r1
 8003b16:	492a      	ldr	r1, [pc, #168]	; (8003bc0 <_strtod_l+0x5b0>)
 8003b18:	428b      	cmp	r3, r1
 8003b1a:	4682      	mov	sl, r0
 8003b1c:	d8bc      	bhi.n	8003a98 <_strtod_l+0x488>
 8003b1e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003b22:	428b      	cmp	r3, r1
 8003b24:	bf86      	itte	hi
 8003b26:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8003bc4 <_strtod_l+0x5b4>
 8003b2a:	f04f 3aff 	movhi.w	sl, #4294967295
 8003b2e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8003b32:	2300      	movs	r3, #0
 8003b34:	9304      	str	r3, [sp, #16]
 8003b36:	e084      	b.n	8003c42 <_strtod_l+0x632>
 8003b38:	f018 0f01 	tst.w	r8, #1
 8003b3c:	d005      	beq.n	8003b4a <_strtod_l+0x53a>
 8003b3e:	9b04      	ldr	r3, [sp, #16]
 8003b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b44:	f7fc fd30 	bl	80005a8 <__aeabi_dmul>
 8003b48:	2301      	movs	r3, #1
 8003b4a:	9a04      	ldr	r2, [sp, #16]
 8003b4c:	3208      	adds	r2, #8
 8003b4e:	f109 0901 	add.w	r9, r9, #1
 8003b52:	ea4f 0868 	mov.w	r8, r8, asr #1
 8003b56:	9204      	str	r2, [sp, #16]
 8003b58:	e7c9      	b.n	8003aee <_strtod_l+0x4de>
 8003b5a:	d0ea      	beq.n	8003b32 <_strtod_l+0x522>
 8003b5c:	f1c8 0800 	rsb	r8, r8, #0
 8003b60:	f018 020f 	ands.w	r2, r8, #15
 8003b64:	d00a      	beq.n	8003b7c <_strtod_l+0x56c>
 8003b66:	4b13      	ldr	r3, [pc, #76]	; (8003bb4 <_strtod_l+0x5a4>)
 8003b68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003b6c:	4650      	mov	r0, sl
 8003b6e:	4659      	mov	r1, fp
 8003b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b74:	f7fc fe42 	bl	80007fc <__aeabi_ddiv>
 8003b78:	4682      	mov	sl, r0
 8003b7a:	468b      	mov	fp, r1
 8003b7c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8003b80:	d0d7      	beq.n	8003b32 <_strtod_l+0x522>
 8003b82:	f1b8 0f1f 	cmp.w	r8, #31
 8003b86:	dd1f      	ble.n	8003bc8 <_strtod_l+0x5b8>
 8003b88:	2500      	movs	r5, #0
 8003b8a:	462e      	mov	r6, r5
 8003b8c:	9507      	str	r5, [sp, #28]
 8003b8e:	9505      	str	r5, [sp, #20]
 8003b90:	2322      	movs	r3, #34	; 0x22
 8003b92:	f04f 0a00 	mov.w	sl, #0
 8003b96:	f04f 0b00 	mov.w	fp, #0
 8003b9a:	6023      	str	r3, [r4, #0]
 8003b9c:	e786      	b.n	8003aac <_strtod_l+0x49c>
 8003b9e:	bf00      	nop
 8003ba0:	08008b25 	.word	0x08008b25
 8003ba4:	08008b68 	.word	0x08008b68
 8003ba8:	08008b1d 	.word	0x08008b1d
 8003bac:	08008cac 	.word	0x08008cac
 8003bb0:	08008f58 	.word	0x08008f58
 8003bb4:	08008e38 	.word	0x08008e38
 8003bb8:	08008e10 	.word	0x08008e10
 8003bbc:	7ff00000 	.word	0x7ff00000
 8003bc0:	7ca00000 	.word	0x7ca00000
 8003bc4:	7fefffff 	.word	0x7fefffff
 8003bc8:	f018 0310 	ands.w	r3, r8, #16
 8003bcc:	bf18      	it	ne
 8003bce:	236a      	movne	r3, #106	; 0x6a
 8003bd0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8003f80 <_strtod_l+0x970>
 8003bd4:	9304      	str	r3, [sp, #16]
 8003bd6:	4650      	mov	r0, sl
 8003bd8:	4659      	mov	r1, fp
 8003bda:	2300      	movs	r3, #0
 8003bdc:	f018 0f01 	tst.w	r8, #1
 8003be0:	d004      	beq.n	8003bec <_strtod_l+0x5dc>
 8003be2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8003be6:	f7fc fcdf 	bl	80005a8 <__aeabi_dmul>
 8003bea:	2301      	movs	r3, #1
 8003bec:	ea5f 0868 	movs.w	r8, r8, asr #1
 8003bf0:	f109 0908 	add.w	r9, r9, #8
 8003bf4:	d1f2      	bne.n	8003bdc <_strtod_l+0x5cc>
 8003bf6:	b10b      	cbz	r3, 8003bfc <_strtod_l+0x5ec>
 8003bf8:	4682      	mov	sl, r0
 8003bfa:	468b      	mov	fp, r1
 8003bfc:	9b04      	ldr	r3, [sp, #16]
 8003bfe:	b1c3      	cbz	r3, 8003c32 <_strtod_l+0x622>
 8003c00:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8003c04:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	4659      	mov	r1, fp
 8003c0c:	dd11      	ble.n	8003c32 <_strtod_l+0x622>
 8003c0e:	2b1f      	cmp	r3, #31
 8003c10:	f340 8124 	ble.w	8003e5c <_strtod_l+0x84c>
 8003c14:	2b34      	cmp	r3, #52	; 0x34
 8003c16:	bfde      	ittt	le
 8003c18:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8003c1c:	f04f 33ff 	movle.w	r3, #4294967295
 8003c20:	fa03 f202 	lslle.w	r2, r3, r2
 8003c24:	f04f 0a00 	mov.w	sl, #0
 8003c28:	bfcc      	ite	gt
 8003c2a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8003c2e:	ea02 0b01 	andle.w	fp, r2, r1
 8003c32:	2200      	movs	r2, #0
 8003c34:	2300      	movs	r3, #0
 8003c36:	4650      	mov	r0, sl
 8003c38:	4659      	mov	r1, fp
 8003c3a:	f7fc ff1d 	bl	8000a78 <__aeabi_dcmpeq>
 8003c3e:	2800      	cmp	r0, #0
 8003c40:	d1a2      	bne.n	8003b88 <_strtod_l+0x578>
 8003c42:	9b07      	ldr	r3, [sp, #28]
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	9908      	ldr	r1, [sp, #32]
 8003c48:	462b      	mov	r3, r5
 8003c4a:	463a      	mov	r2, r7
 8003c4c:	4620      	mov	r0, r4
 8003c4e:	f001 fe1f 	bl	8005890 <__s2b>
 8003c52:	9007      	str	r0, [sp, #28]
 8003c54:	2800      	cmp	r0, #0
 8003c56:	f43f af1f 	beq.w	8003a98 <_strtod_l+0x488>
 8003c5a:	9b05      	ldr	r3, [sp, #20]
 8003c5c:	1b9e      	subs	r6, r3, r6
 8003c5e:	9b06      	ldr	r3, [sp, #24]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	bfb4      	ite	lt
 8003c64:	4633      	movlt	r3, r6
 8003c66:	2300      	movge	r3, #0
 8003c68:	930c      	str	r3, [sp, #48]	; 0x30
 8003c6a:	9b06      	ldr	r3, [sp, #24]
 8003c6c:	2500      	movs	r5, #0
 8003c6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003c72:	9312      	str	r3, [sp, #72]	; 0x48
 8003c74:	462e      	mov	r6, r5
 8003c76:	9b07      	ldr	r3, [sp, #28]
 8003c78:	4620      	mov	r0, r4
 8003c7a:	6859      	ldr	r1, [r3, #4]
 8003c7c:	f001 fd60 	bl	8005740 <_Balloc>
 8003c80:	9005      	str	r0, [sp, #20]
 8003c82:	2800      	cmp	r0, #0
 8003c84:	f43f af0c 	beq.w	8003aa0 <_strtod_l+0x490>
 8003c88:	9b07      	ldr	r3, [sp, #28]
 8003c8a:	691a      	ldr	r2, [r3, #16]
 8003c8c:	3202      	adds	r2, #2
 8003c8e:	f103 010c 	add.w	r1, r3, #12
 8003c92:	0092      	lsls	r2, r2, #2
 8003c94:	300c      	adds	r0, #12
 8003c96:	f7fe fde9 	bl	800286c <memcpy>
 8003c9a:	ec4b ab10 	vmov	d0, sl, fp
 8003c9e:	aa1a      	add	r2, sp, #104	; 0x68
 8003ca0:	a919      	add	r1, sp, #100	; 0x64
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	f002 f93a 	bl	8005f1c <__d2b>
 8003ca8:	ec4b ab18 	vmov	d8, sl, fp
 8003cac:	9018      	str	r0, [sp, #96]	; 0x60
 8003cae:	2800      	cmp	r0, #0
 8003cb0:	f43f aef6 	beq.w	8003aa0 <_strtod_l+0x490>
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	4620      	mov	r0, r4
 8003cb8:	f001 fe84 	bl	80059c4 <__i2b>
 8003cbc:	4606      	mov	r6, r0
 8003cbe:	2800      	cmp	r0, #0
 8003cc0:	f43f aeee 	beq.w	8003aa0 <_strtod_l+0x490>
 8003cc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003cc6:	9904      	ldr	r1, [sp, #16]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	bfab      	itete	ge
 8003ccc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8003cce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8003cd0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8003cd2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8003cd6:	bfac      	ite	ge
 8003cd8:	eb03 0902 	addge.w	r9, r3, r2
 8003cdc:	1ad7      	sublt	r7, r2, r3
 8003cde:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003ce0:	eba3 0801 	sub.w	r8, r3, r1
 8003ce4:	4490      	add	r8, r2
 8003ce6:	4ba1      	ldr	r3, [pc, #644]	; (8003f6c <_strtod_l+0x95c>)
 8003ce8:	f108 38ff 	add.w	r8, r8, #4294967295
 8003cec:	4598      	cmp	r8, r3
 8003cee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8003cf2:	f280 80c7 	bge.w	8003e84 <_strtod_l+0x874>
 8003cf6:	eba3 0308 	sub.w	r3, r3, r8
 8003cfa:	2b1f      	cmp	r3, #31
 8003cfc:	eba2 0203 	sub.w	r2, r2, r3
 8003d00:	f04f 0101 	mov.w	r1, #1
 8003d04:	f300 80b1 	bgt.w	8003e6a <_strtod_l+0x85a>
 8003d08:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0c:	930d      	str	r3, [sp, #52]	; 0x34
 8003d0e:	2300      	movs	r3, #0
 8003d10:	9308      	str	r3, [sp, #32]
 8003d12:	eb09 0802 	add.w	r8, r9, r2
 8003d16:	9b04      	ldr	r3, [sp, #16]
 8003d18:	45c1      	cmp	r9, r8
 8003d1a:	4417      	add	r7, r2
 8003d1c:	441f      	add	r7, r3
 8003d1e:	464b      	mov	r3, r9
 8003d20:	bfa8      	it	ge
 8003d22:	4643      	movge	r3, r8
 8003d24:	42bb      	cmp	r3, r7
 8003d26:	bfa8      	it	ge
 8003d28:	463b      	movge	r3, r7
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	bfc2      	ittt	gt
 8003d2e:	eba8 0803 	subgt.w	r8, r8, r3
 8003d32:	1aff      	subgt	r7, r7, r3
 8003d34:	eba9 0903 	subgt.w	r9, r9, r3
 8003d38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	dd17      	ble.n	8003d6e <_strtod_l+0x75e>
 8003d3e:	4631      	mov	r1, r6
 8003d40:	461a      	mov	r2, r3
 8003d42:	4620      	mov	r0, r4
 8003d44:	f001 fefe 	bl	8005b44 <__pow5mult>
 8003d48:	4606      	mov	r6, r0
 8003d4a:	2800      	cmp	r0, #0
 8003d4c:	f43f aea8 	beq.w	8003aa0 <_strtod_l+0x490>
 8003d50:	4601      	mov	r1, r0
 8003d52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8003d54:	4620      	mov	r0, r4
 8003d56:	f001 fe4b 	bl	80059f0 <__multiply>
 8003d5a:	900b      	str	r0, [sp, #44]	; 0x2c
 8003d5c:	2800      	cmp	r0, #0
 8003d5e:	f43f ae9f 	beq.w	8003aa0 <_strtod_l+0x490>
 8003d62:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003d64:	4620      	mov	r0, r4
 8003d66:	f001 fd2b 	bl	80057c0 <_Bfree>
 8003d6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d6c:	9318      	str	r3, [sp, #96]	; 0x60
 8003d6e:	f1b8 0f00 	cmp.w	r8, #0
 8003d72:	f300 808c 	bgt.w	8003e8e <_strtod_l+0x87e>
 8003d76:	9b06      	ldr	r3, [sp, #24]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	dd08      	ble.n	8003d8e <_strtod_l+0x77e>
 8003d7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003d7e:	9905      	ldr	r1, [sp, #20]
 8003d80:	4620      	mov	r0, r4
 8003d82:	f001 fedf 	bl	8005b44 <__pow5mult>
 8003d86:	9005      	str	r0, [sp, #20]
 8003d88:	2800      	cmp	r0, #0
 8003d8a:	f43f ae89 	beq.w	8003aa0 <_strtod_l+0x490>
 8003d8e:	2f00      	cmp	r7, #0
 8003d90:	dd08      	ble.n	8003da4 <_strtod_l+0x794>
 8003d92:	9905      	ldr	r1, [sp, #20]
 8003d94:	463a      	mov	r2, r7
 8003d96:	4620      	mov	r0, r4
 8003d98:	f001 ff2e 	bl	8005bf8 <__lshift>
 8003d9c:	9005      	str	r0, [sp, #20]
 8003d9e:	2800      	cmp	r0, #0
 8003da0:	f43f ae7e 	beq.w	8003aa0 <_strtod_l+0x490>
 8003da4:	f1b9 0f00 	cmp.w	r9, #0
 8003da8:	dd08      	ble.n	8003dbc <_strtod_l+0x7ac>
 8003daa:	4631      	mov	r1, r6
 8003dac:	464a      	mov	r2, r9
 8003dae:	4620      	mov	r0, r4
 8003db0:	f001 ff22 	bl	8005bf8 <__lshift>
 8003db4:	4606      	mov	r6, r0
 8003db6:	2800      	cmp	r0, #0
 8003db8:	f43f ae72 	beq.w	8003aa0 <_strtod_l+0x490>
 8003dbc:	9a05      	ldr	r2, [sp, #20]
 8003dbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	f001 ffa5 	bl	8005d10 <__mdiff>
 8003dc6:	4605      	mov	r5, r0
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	f43f ae69 	beq.w	8003aa0 <_strtod_l+0x490>
 8003dce:	68c3      	ldr	r3, [r0, #12]
 8003dd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60c3      	str	r3, [r0, #12]
 8003dd6:	4631      	mov	r1, r6
 8003dd8:	f001 ff7e 	bl	8005cd8 <__mcmp>
 8003ddc:	2800      	cmp	r0, #0
 8003dde:	da60      	bge.n	8003ea2 <_strtod_l+0x892>
 8003de0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003de2:	ea53 030a 	orrs.w	r3, r3, sl
 8003de6:	f040 8082 	bne.w	8003eee <_strtod_l+0x8de>
 8003dea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d17d      	bne.n	8003eee <_strtod_l+0x8de>
 8003df2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003df6:	0d1b      	lsrs	r3, r3, #20
 8003df8:	051b      	lsls	r3, r3, #20
 8003dfa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8003dfe:	d976      	bls.n	8003eee <_strtod_l+0x8de>
 8003e00:	696b      	ldr	r3, [r5, #20]
 8003e02:	b913      	cbnz	r3, 8003e0a <_strtod_l+0x7fa>
 8003e04:	692b      	ldr	r3, [r5, #16]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	dd71      	ble.n	8003eee <_strtod_l+0x8de>
 8003e0a:	4629      	mov	r1, r5
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	4620      	mov	r0, r4
 8003e10:	f001 fef2 	bl	8005bf8 <__lshift>
 8003e14:	4631      	mov	r1, r6
 8003e16:	4605      	mov	r5, r0
 8003e18:	f001 ff5e 	bl	8005cd8 <__mcmp>
 8003e1c:	2800      	cmp	r0, #0
 8003e1e:	dd66      	ble.n	8003eee <_strtod_l+0x8de>
 8003e20:	9904      	ldr	r1, [sp, #16]
 8003e22:	4a53      	ldr	r2, [pc, #332]	; (8003f70 <_strtod_l+0x960>)
 8003e24:	465b      	mov	r3, fp
 8003e26:	2900      	cmp	r1, #0
 8003e28:	f000 8081 	beq.w	8003f2e <_strtod_l+0x91e>
 8003e2c:	ea02 010b 	and.w	r1, r2, fp
 8003e30:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8003e34:	dc7b      	bgt.n	8003f2e <_strtod_l+0x91e>
 8003e36:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8003e3a:	f77f aea9 	ble.w	8003b90 <_strtod_l+0x580>
 8003e3e:	4b4d      	ldr	r3, [pc, #308]	; (8003f74 <_strtod_l+0x964>)
 8003e40:	4650      	mov	r0, sl
 8003e42:	4659      	mov	r1, fp
 8003e44:	2200      	movs	r2, #0
 8003e46:	f7fc fbaf 	bl	80005a8 <__aeabi_dmul>
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	4303      	orrs	r3, r0
 8003e4e:	bf08      	it	eq
 8003e50:	2322      	moveq	r3, #34	; 0x22
 8003e52:	4682      	mov	sl, r0
 8003e54:	468b      	mov	fp, r1
 8003e56:	bf08      	it	eq
 8003e58:	6023      	streq	r3, [r4, #0]
 8003e5a:	e62b      	b.n	8003ab4 <_strtod_l+0x4a4>
 8003e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	ea03 0a0a 	and.w	sl, r3, sl
 8003e68:	e6e3      	b.n	8003c32 <_strtod_l+0x622>
 8003e6a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8003e6e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8003e72:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8003e76:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8003e7a:	fa01 f308 	lsl.w	r3, r1, r8
 8003e7e:	9308      	str	r3, [sp, #32]
 8003e80:	910d      	str	r1, [sp, #52]	; 0x34
 8003e82:	e746      	b.n	8003d12 <_strtod_l+0x702>
 8003e84:	2300      	movs	r3, #0
 8003e86:	9308      	str	r3, [sp, #32]
 8003e88:	2301      	movs	r3, #1
 8003e8a:	930d      	str	r3, [sp, #52]	; 0x34
 8003e8c:	e741      	b.n	8003d12 <_strtod_l+0x702>
 8003e8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003e90:	4642      	mov	r2, r8
 8003e92:	4620      	mov	r0, r4
 8003e94:	f001 feb0 	bl	8005bf8 <__lshift>
 8003e98:	9018      	str	r0, [sp, #96]	; 0x60
 8003e9a:	2800      	cmp	r0, #0
 8003e9c:	f47f af6b 	bne.w	8003d76 <_strtod_l+0x766>
 8003ea0:	e5fe      	b.n	8003aa0 <_strtod_l+0x490>
 8003ea2:	465f      	mov	r7, fp
 8003ea4:	d16e      	bne.n	8003f84 <_strtod_l+0x974>
 8003ea6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003ea8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003eac:	b342      	cbz	r2, 8003f00 <_strtod_l+0x8f0>
 8003eae:	4a32      	ldr	r2, [pc, #200]	; (8003f78 <_strtod_l+0x968>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d128      	bne.n	8003f06 <_strtod_l+0x8f6>
 8003eb4:	9b04      	ldr	r3, [sp, #16]
 8003eb6:	4651      	mov	r1, sl
 8003eb8:	b1eb      	cbz	r3, 8003ef6 <_strtod_l+0x8e6>
 8003eba:	4b2d      	ldr	r3, [pc, #180]	; (8003f70 <_strtod_l+0x960>)
 8003ebc:	403b      	ands	r3, r7
 8003ebe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8003ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec6:	d819      	bhi.n	8003efc <_strtod_l+0x8ec>
 8003ec8:	0d1b      	lsrs	r3, r3, #20
 8003eca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	4299      	cmp	r1, r3
 8003ed4:	d117      	bne.n	8003f06 <_strtod_l+0x8f6>
 8003ed6:	4b29      	ldr	r3, [pc, #164]	; (8003f7c <_strtod_l+0x96c>)
 8003ed8:	429f      	cmp	r7, r3
 8003eda:	d102      	bne.n	8003ee2 <_strtod_l+0x8d2>
 8003edc:	3101      	adds	r1, #1
 8003ede:	f43f addf 	beq.w	8003aa0 <_strtod_l+0x490>
 8003ee2:	4b23      	ldr	r3, [pc, #140]	; (8003f70 <_strtod_l+0x960>)
 8003ee4:	403b      	ands	r3, r7
 8003ee6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8003eea:	f04f 0a00 	mov.w	sl, #0
 8003eee:	9b04      	ldr	r3, [sp, #16]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1a4      	bne.n	8003e3e <_strtod_l+0x82e>
 8003ef4:	e5de      	b.n	8003ab4 <_strtod_l+0x4a4>
 8003ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8003efa:	e7ea      	b.n	8003ed2 <_strtod_l+0x8c2>
 8003efc:	4613      	mov	r3, r2
 8003efe:	e7e8      	b.n	8003ed2 <_strtod_l+0x8c2>
 8003f00:	ea53 030a 	orrs.w	r3, r3, sl
 8003f04:	d08c      	beq.n	8003e20 <_strtod_l+0x810>
 8003f06:	9b08      	ldr	r3, [sp, #32]
 8003f08:	b1db      	cbz	r3, 8003f42 <_strtod_l+0x932>
 8003f0a:	423b      	tst	r3, r7
 8003f0c:	d0ef      	beq.n	8003eee <_strtod_l+0x8de>
 8003f0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f10:	9a04      	ldr	r2, [sp, #16]
 8003f12:	4650      	mov	r0, sl
 8003f14:	4659      	mov	r1, fp
 8003f16:	b1c3      	cbz	r3, 8003f4a <_strtod_l+0x93a>
 8003f18:	f7ff fb5e 	bl	80035d8 <sulp>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	ec51 0b18 	vmov	r0, r1, d8
 8003f24:	f7fc f98a 	bl	800023c <__adddf3>
 8003f28:	4682      	mov	sl, r0
 8003f2a:	468b      	mov	fp, r1
 8003f2c:	e7df      	b.n	8003eee <_strtod_l+0x8de>
 8003f2e:	4013      	ands	r3, r2
 8003f30:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8003f34:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8003f38:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8003f3c:	f04f 3aff 	mov.w	sl, #4294967295
 8003f40:	e7d5      	b.n	8003eee <_strtod_l+0x8de>
 8003f42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f44:	ea13 0f0a 	tst.w	r3, sl
 8003f48:	e7e0      	b.n	8003f0c <_strtod_l+0x8fc>
 8003f4a:	f7ff fb45 	bl	80035d8 <sulp>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	ec51 0b18 	vmov	r0, r1, d8
 8003f56:	f7fc f96f 	bl	8000238 <__aeabi_dsub>
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	4682      	mov	sl, r0
 8003f60:	468b      	mov	fp, r1
 8003f62:	f7fc fd89 	bl	8000a78 <__aeabi_dcmpeq>
 8003f66:	2800      	cmp	r0, #0
 8003f68:	d0c1      	beq.n	8003eee <_strtod_l+0x8de>
 8003f6a:	e611      	b.n	8003b90 <_strtod_l+0x580>
 8003f6c:	fffffc02 	.word	0xfffffc02
 8003f70:	7ff00000 	.word	0x7ff00000
 8003f74:	39500000 	.word	0x39500000
 8003f78:	000fffff 	.word	0x000fffff
 8003f7c:	7fefffff 	.word	0x7fefffff
 8003f80:	08008b80 	.word	0x08008b80
 8003f84:	4631      	mov	r1, r6
 8003f86:	4628      	mov	r0, r5
 8003f88:	f002 f824 	bl	8005fd4 <__ratio>
 8003f8c:	ec59 8b10 	vmov	r8, r9, d0
 8003f90:	ee10 0a10 	vmov	r0, s0
 8003f94:	2200      	movs	r2, #0
 8003f96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f9a:	4649      	mov	r1, r9
 8003f9c:	f7fc fd80 	bl	8000aa0 <__aeabi_dcmple>
 8003fa0:	2800      	cmp	r0, #0
 8003fa2:	d07a      	beq.n	800409a <_strtod_l+0xa8a>
 8003fa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d04a      	beq.n	8004040 <_strtod_l+0xa30>
 8003faa:	4b95      	ldr	r3, [pc, #596]	; (8004200 <_strtod_l+0xbf0>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003fb2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8004200 <_strtod_l+0xbf0>
 8003fb6:	f04f 0800 	mov.w	r8, #0
 8003fba:	4b92      	ldr	r3, [pc, #584]	; (8004204 <_strtod_l+0xbf4>)
 8003fbc:	403b      	ands	r3, r7
 8003fbe:	930d      	str	r3, [sp, #52]	; 0x34
 8003fc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003fc2:	4b91      	ldr	r3, [pc, #580]	; (8004208 <_strtod_l+0xbf8>)
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	f040 80b0 	bne.w	800412a <_strtod_l+0xb1a>
 8003fca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003fce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8003fd2:	ec4b ab10 	vmov	d0, sl, fp
 8003fd6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003fda:	f001 ff23 	bl	8005e24 <__ulp>
 8003fde:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003fe2:	ec53 2b10 	vmov	r2, r3, d0
 8003fe6:	f7fc fadf 	bl	80005a8 <__aeabi_dmul>
 8003fea:	4652      	mov	r2, sl
 8003fec:	465b      	mov	r3, fp
 8003fee:	f7fc f925 	bl	800023c <__adddf3>
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4983      	ldr	r1, [pc, #524]	; (8004204 <_strtod_l+0xbf4>)
 8003ff6:	4a85      	ldr	r2, [pc, #532]	; (800420c <_strtod_l+0xbfc>)
 8003ff8:	4019      	ands	r1, r3
 8003ffa:	4291      	cmp	r1, r2
 8003ffc:	4682      	mov	sl, r0
 8003ffe:	d960      	bls.n	80040c2 <_strtod_l+0xab2>
 8004000:	ee18 3a90 	vmov	r3, s17
 8004004:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004008:	4293      	cmp	r3, r2
 800400a:	d104      	bne.n	8004016 <_strtod_l+0xa06>
 800400c:	ee18 3a10 	vmov	r3, s16
 8004010:	3301      	adds	r3, #1
 8004012:	f43f ad45 	beq.w	8003aa0 <_strtod_l+0x490>
 8004016:	f8df b200 	ldr.w	fp, [pc, #512]	; 8004218 <_strtod_l+0xc08>
 800401a:	f04f 3aff 	mov.w	sl, #4294967295
 800401e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004020:	4620      	mov	r0, r4
 8004022:	f001 fbcd 	bl	80057c0 <_Bfree>
 8004026:	9905      	ldr	r1, [sp, #20]
 8004028:	4620      	mov	r0, r4
 800402a:	f001 fbc9 	bl	80057c0 <_Bfree>
 800402e:	4631      	mov	r1, r6
 8004030:	4620      	mov	r0, r4
 8004032:	f001 fbc5 	bl	80057c0 <_Bfree>
 8004036:	4629      	mov	r1, r5
 8004038:	4620      	mov	r0, r4
 800403a:	f001 fbc1 	bl	80057c0 <_Bfree>
 800403e:	e61a      	b.n	8003c76 <_strtod_l+0x666>
 8004040:	f1ba 0f00 	cmp.w	sl, #0
 8004044:	d11b      	bne.n	800407e <_strtod_l+0xa6e>
 8004046:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800404a:	b9f3      	cbnz	r3, 800408a <_strtod_l+0xa7a>
 800404c:	4b6c      	ldr	r3, [pc, #432]	; (8004200 <_strtod_l+0xbf0>)
 800404e:	2200      	movs	r2, #0
 8004050:	4640      	mov	r0, r8
 8004052:	4649      	mov	r1, r9
 8004054:	f7fc fd1a 	bl	8000a8c <__aeabi_dcmplt>
 8004058:	b9d0      	cbnz	r0, 8004090 <_strtod_l+0xa80>
 800405a:	4640      	mov	r0, r8
 800405c:	4649      	mov	r1, r9
 800405e:	4b6c      	ldr	r3, [pc, #432]	; (8004210 <_strtod_l+0xc00>)
 8004060:	2200      	movs	r2, #0
 8004062:	f7fc faa1 	bl	80005a8 <__aeabi_dmul>
 8004066:	4680      	mov	r8, r0
 8004068:	4689      	mov	r9, r1
 800406a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800406e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8004072:	9315      	str	r3, [sp, #84]	; 0x54
 8004074:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004078:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800407c:	e79d      	b.n	8003fba <_strtod_l+0x9aa>
 800407e:	f1ba 0f01 	cmp.w	sl, #1
 8004082:	d102      	bne.n	800408a <_strtod_l+0xa7a>
 8004084:	2f00      	cmp	r7, #0
 8004086:	f43f ad83 	beq.w	8003b90 <_strtod_l+0x580>
 800408a:	4b62      	ldr	r3, [pc, #392]	; (8004214 <_strtod_l+0xc04>)
 800408c:	2200      	movs	r2, #0
 800408e:	e78e      	b.n	8003fae <_strtod_l+0x99e>
 8004090:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8004210 <_strtod_l+0xc00>
 8004094:	f04f 0800 	mov.w	r8, #0
 8004098:	e7e7      	b.n	800406a <_strtod_l+0xa5a>
 800409a:	4b5d      	ldr	r3, [pc, #372]	; (8004210 <_strtod_l+0xc00>)
 800409c:	4640      	mov	r0, r8
 800409e:	4649      	mov	r1, r9
 80040a0:	2200      	movs	r2, #0
 80040a2:	f7fc fa81 	bl	80005a8 <__aeabi_dmul>
 80040a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040a8:	4680      	mov	r8, r0
 80040aa:	4689      	mov	r9, r1
 80040ac:	b933      	cbnz	r3, 80040bc <_strtod_l+0xaac>
 80040ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80040b2:	900e      	str	r0, [sp, #56]	; 0x38
 80040b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80040b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80040ba:	e7dd      	b.n	8004078 <_strtod_l+0xa68>
 80040bc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80040c0:	e7f9      	b.n	80040b6 <_strtod_l+0xaa6>
 80040c2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80040c6:	9b04      	ldr	r3, [sp, #16]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1a8      	bne.n	800401e <_strtod_l+0xa0e>
 80040cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80040d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80040d2:	0d1b      	lsrs	r3, r3, #20
 80040d4:	051b      	lsls	r3, r3, #20
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d1a1      	bne.n	800401e <_strtod_l+0xa0e>
 80040da:	4640      	mov	r0, r8
 80040dc:	4649      	mov	r1, r9
 80040de:	f7fc fdab 	bl	8000c38 <__aeabi_d2lz>
 80040e2:	f7fc fa33 	bl	800054c <__aeabi_l2d>
 80040e6:	4602      	mov	r2, r0
 80040e8:	460b      	mov	r3, r1
 80040ea:	4640      	mov	r0, r8
 80040ec:	4649      	mov	r1, r9
 80040ee:	f7fc f8a3 	bl	8000238 <__aeabi_dsub>
 80040f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80040f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80040f8:	ea43 030a 	orr.w	r3, r3, sl
 80040fc:	4313      	orrs	r3, r2
 80040fe:	4680      	mov	r8, r0
 8004100:	4689      	mov	r9, r1
 8004102:	d055      	beq.n	80041b0 <_strtod_l+0xba0>
 8004104:	a336      	add	r3, pc, #216	; (adr r3, 80041e0 <_strtod_l+0xbd0>)
 8004106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410a:	f7fc fcbf 	bl	8000a8c <__aeabi_dcmplt>
 800410e:	2800      	cmp	r0, #0
 8004110:	f47f acd0 	bne.w	8003ab4 <_strtod_l+0x4a4>
 8004114:	a334      	add	r3, pc, #208	; (adr r3, 80041e8 <_strtod_l+0xbd8>)
 8004116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411a:	4640      	mov	r0, r8
 800411c:	4649      	mov	r1, r9
 800411e:	f7fc fcd3 	bl	8000ac8 <__aeabi_dcmpgt>
 8004122:	2800      	cmp	r0, #0
 8004124:	f43f af7b 	beq.w	800401e <_strtod_l+0xa0e>
 8004128:	e4c4      	b.n	8003ab4 <_strtod_l+0x4a4>
 800412a:	9b04      	ldr	r3, [sp, #16]
 800412c:	b333      	cbz	r3, 800417c <_strtod_l+0xb6c>
 800412e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004130:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004134:	d822      	bhi.n	800417c <_strtod_l+0xb6c>
 8004136:	a32e      	add	r3, pc, #184	; (adr r3, 80041f0 <_strtod_l+0xbe0>)
 8004138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413c:	4640      	mov	r0, r8
 800413e:	4649      	mov	r1, r9
 8004140:	f7fc fcae 	bl	8000aa0 <__aeabi_dcmple>
 8004144:	b1a0      	cbz	r0, 8004170 <_strtod_l+0xb60>
 8004146:	4649      	mov	r1, r9
 8004148:	4640      	mov	r0, r8
 800414a:	f7fc fd05 	bl	8000b58 <__aeabi_d2uiz>
 800414e:	2801      	cmp	r0, #1
 8004150:	bf38      	it	cc
 8004152:	2001      	movcc	r0, #1
 8004154:	f7fc f9ae 	bl	80004b4 <__aeabi_ui2d>
 8004158:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800415a:	4680      	mov	r8, r0
 800415c:	4689      	mov	r9, r1
 800415e:	bb23      	cbnz	r3, 80041aa <_strtod_l+0xb9a>
 8004160:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004164:	9010      	str	r0, [sp, #64]	; 0x40
 8004166:	9311      	str	r3, [sp, #68]	; 0x44
 8004168:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800416c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004172:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004174:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8004178:	1a9b      	subs	r3, r3, r2
 800417a:	9309      	str	r3, [sp, #36]	; 0x24
 800417c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004180:	eeb0 0a48 	vmov.f32	s0, s16
 8004184:	eef0 0a68 	vmov.f32	s1, s17
 8004188:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800418c:	f001 fe4a 	bl	8005e24 <__ulp>
 8004190:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004194:	ec53 2b10 	vmov	r2, r3, d0
 8004198:	f7fc fa06 	bl	80005a8 <__aeabi_dmul>
 800419c:	ec53 2b18 	vmov	r2, r3, d8
 80041a0:	f7fc f84c 	bl	800023c <__adddf3>
 80041a4:	4682      	mov	sl, r0
 80041a6:	468b      	mov	fp, r1
 80041a8:	e78d      	b.n	80040c6 <_strtod_l+0xab6>
 80041aa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80041ae:	e7db      	b.n	8004168 <_strtod_l+0xb58>
 80041b0:	a311      	add	r3, pc, #68	; (adr r3, 80041f8 <_strtod_l+0xbe8>)
 80041b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b6:	f7fc fc69 	bl	8000a8c <__aeabi_dcmplt>
 80041ba:	e7b2      	b.n	8004122 <_strtod_l+0xb12>
 80041bc:	2300      	movs	r3, #0
 80041be:	930a      	str	r3, [sp, #40]	; 0x28
 80041c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80041c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	f7ff ba6b 	b.w	80036a0 <_strtod_l+0x90>
 80041ca:	2a65      	cmp	r2, #101	; 0x65
 80041cc:	f43f ab5f 	beq.w	800388e <_strtod_l+0x27e>
 80041d0:	2a45      	cmp	r2, #69	; 0x45
 80041d2:	f43f ab5c 	beq.w	800388e <_strtod_l+0x27e>
 80041d6:	2301      	movs	r3, #1
 80041d8:	f7ff bb94 	b.w	8003904 <_strtod_l+0x2f4>
 80041dc:	f3af 8000 	nop.w
 80041e0:	94a03595 	.word	0x94a03595
 80041e4:	3fdfffff 	.word	0x3fdfffff
 80041e8:	35afe535 	.word	0x35afe535
 80041ec:	3fe00000 	.word	0x3fe00000
 80041f0:	ffc00000 	.word	0xffc00000
 80041f4:	41dfffff 	.word	0x41dfffff
 80041f8:	94a03595 	.word	0x94a03595
 80041fc:	3fcfffff 	.word	0x3fcfffff
 8004200:	3ff00000 	.word	0x3ff00000
 8004204:	7ff00000 	.word	0x7ff00000
 8004208:	7fe00000 	.word	0x7fe00000
 800420c:	7c9fffff 	.word	0x7c9fffff
 8004210:	3fe00000 	.word	0x3fe00000
 8004214:	bff00000 	.word	0xbff00000
 8004218:	7fefffff 	.word	0x7fefffff

0800421c <_strtod_r>:
 800421c:	4b01      	ldr	r3, [pc, #4]	; (8004224 <_strtod_r+0x8>)
 800421e:	f7ff b9f7 	b.w	8003610 <_strtod_l>
 8004222:	bf00      	nop
 8004224:	20000078 	.word	0x20000078

08004228 <_strtol_l.constprop.0>:
 8004228:	2b01      	cmp	r3, #1
 800422a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800422e:	d001      	beq.n	8004234 <_strtol_l.constprop.0+0xc>
 8004230:	2b24      	cmp	r3, #36	; 0x24
 8004232:	d906      	bls.n	8004242 <_strtol_l.constprop.0+0x1a>
 8004234:	f7fe faf0 	bl	8002818 <__errno>
 8004238:	2316      	movs	r3, #22
 800423a:	6003      	str	r3, [r0, #0]
 800423c:	2000      	movs	r0, #0
 800423e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004242:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004328 <_strtol_l.constprop.0+0x100>
 8004246:	460d      	mov	r5, r1
 8004248:	462e      	mov	r6, r5
 800424a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800424e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8004252:	f017 0708 	ands.w	r7, r7, #8
 8004256:	d1f7      	bne.n	8004248 <_strtol_l.constprop.0+0x20>
 8004258:	2c2d      	cmp	r4, #45	; 0x2d
 800425a:	d132      	bne.n	80042c2 <_strtol_l.constprop.0+0x9a>
 800425c:	782c      	ldrb	r4, [r5, #0]
 800425e:	2701      	movs	r7, #1
 8004260:	1cb5      	adds	r5, r6, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d05b      	beq.n	800431e <_strtol_l.constprop.0+0xf6>
 8004266:	2b10      	cmp	r3, #16
 8004268:	d109      	bne.n	800427e <_strtol_l.constprop.0+0x56>
 800426a:	2c30      	cmp	r4, #48	; 0x30
 800426c:	d107      	bne.n	800427e <_strtol_l.constprop.0+0x56>
 800426e:	782c      	ldrb	r4, [r5, #0]
 8004270:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004274:	2c58      	cmp	r4, #88	; 0x58
 8004276:	d14d      	bne.n	8004314 <_strtol_l.constprop.0+0xec>
 8004278:	786c      	ldrb	r4, [r5, #1]
 800427a:	2310      	movs	r3, #16
 800427c:	3502      	adds	r5, #2
 800427e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004282:	f108 38ff 	add.w	r8, r8, #4294967295
 8004286:	f04f 0c00 	mov.w	ip, #0
 800428a:	fbb8 f9f3 	udiv	r9, r8, r3
 800428e:	4666      	mov	r6, ip
 8004290:	fb03 8a19 	mls	sl, r3, r9, r8
 8004294:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004298:	f1be 0f09 	cmp.w	lr, #9
 800429c:	d816      	bhi.n	80042cc <_strtol_l.constprop.0+0xa4>
 800429e:	4674      	mov	r4, lr
 80042a0:	42a3      	cmp	r3, r4
 80042a2:	dd24      	ble.n	80042ee <_strtol_l.constprop.0+0xc6>
 80042a4:	f1bc 0f00 	cmp.w	ip, #0
 80042a8:	db1e      	blt.n	80042e8 <_strtol_l.constprop.0+0xc0>
 80042aa:	45b1      	cmp	r9, r6
 80042ac:	d31c      	bcc.n	80042e8 <_strtol_l.constprop.0+0xc0>
 80042ae:	d101      	bne.n	80042b4 <_strtol_l.constprop.0+0x8c>
 80042b0:	45a2      	cmp	sl, r4
 80042b2:	db19      	blt.n	80042e8 <_strtol_l.constprop.0+0xc0>
 80042b4:	fb06 4603 	mla	r6, r6, r3, r4
 80042b8:	f04f 0c01 	mov.w	ip, #1
 80042bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80042c0:	e7e8      	b.n	8004294 <_strtol_l.constprop.0+0x6c>
 80042c2:	2c2b      	cmp	r4, #43	; 0x2b
 80042c4:	bf04      	itt	eq
 80042c6:	782c      	ldrbeq	r4, [r5, #0]
 80042c8:	1cb5      	addeq	r5, r6, #2
 80042ca:	e7ca      	b.n	8004262 <_strtol_l.constprop.0+0x3a>
 80042cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80042d0:	f1be 0f19 	cmp.w	lr, #25
 80042d4:	d801      	bhi.n	80042da <_strtol_l.constprop.0+0xb2>
 80042d6:	3c37      	subs	r4, #55	; 0x37
 80042d8:	e7e2      	b.n	80042a0 <_strtol_l.constprop.0+0x78>
 80042da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80042de:	f1be 0f19 	cmp.w	lr, #25
 80042e2:	d804      	bhi.n	80042ee <_strtol_l.constprop.0+0xc6>
 80042e4:	3c57      	subs	r4, #87	; 0x57
 80042e6:	e7db      	b.n	80042a0 <_strtol_l.constprop.0+0x78>
 80042e8:	f04f 3cff 	mov.w	ip, #4294967295
 80042ec:	e7e6      	b.n	80042bc <_strtol_l.constprop.0+0x94>
 80042ee:	f1bc 0f00 	cmp.w	ip, #0
 80042f2:	da05      	bge.n	8004300 <_strtol_l.constprop.0+0xd8>
 80042f4:	2322      	movs	r3, #34	; 0x22
 80042f6:	6003      	str	r3, [r0, #0]
 80042f8:	4646      	mov	r6, r8
 80042fa:	b942      	cbnz	r2, 800430e <_strtol_l.constprop.0+0xe6>
 80042fc:	4630      	mov	r0, r6
 80042fe:	e79e      	b.n	800423e <_strtol_l.constprop.0+0x16>
 8004300:	b107      	cbz	r7, 8004304 <_strtol_l.constprop.0+0xdc>
 8004302:	4276      	negs	r6, r6
 8004304:	2a00      	cmp	r2, #0
 8004306:	d0f9      	beq.n	80042fc <_strtol_l.constprop.0+0xd4>
 8004308:	f1bc 0f00 	cmp.w	ip, #0
 800430c:	d000      	beq.n	8004310 <_strtol_l.constprop.0+0xe8>
 800430e:	1e69      	subs	r1, r5, #1
 8004310:	6011      	str	r1, [r2, #0]
 8004312:	e7f3      	b.n	80042fc <_strtol_l.constprop.0+0xd4>
 8004314:	2430      	movs	r4, #48	; 0x30
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1b1      	bne.n	800427e <_strtol_l.constprop.0+0x56>
 800431a:	2308      	movs	r3, #8
 800431c:	e7af      	b.n	800427e <_strtol_l.constprop.0+0x56>
 800431e:	2c30      	cmp	r4, #48	; 0x30
 8004320:	d0a5      	beq.n	800426e <_strtol_l.constprop.0+0x46>
 8004322:	230a      	movs	r3, #10
 8004324:	e7ab      	b.n	800427e <_strtol_l.constprop.0+0x56>
 8004326:	bf00      	nop
 8004328:	08008ba9 	.word	0x08008ba9

0800432c <_strtol_r>:
 800432c:	f7ff bf7c 	b.w	8004228 <_strtol_l.constprop.0>

08004330 <quorem>:
 8004330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004334:	6903      	ldr	r3, [r0, #16]
 8004336:	690c      	ldr	r4, [r1, #16]
 8004338:	42a3      	cmp	r3, r4
 800433a:	4607      	mov	r7, r0
 800433c:	f2c0 8081 	blt.w	8004442 <quorem+0x112>
 8004340:	3c01      	subs	r4, #1
 8004342:	f101 0814 	add.w	r8, r1, #20
 8004346:	f100 0514 	add.w	r5, r0, #20
 800434a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800434e:	9301      	str	r3, [sp, #4]
 8004350:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004354:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004358:	3301      	adds	r3, #1
 800435a:	429a      	cmp	r2, r3
 800435c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004360:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004364:	fbb2 f6f3 	udiv	r6, r2, r3
 8004368:	d331      	bcc.n	80043ce <quorem+0x9e>
 800436a:	f04f 0e00 	mov.w	lr, #0
 800436e:	4640      	mov	r0, r8
 8004370:	46ac      	mov	ip, r5
 8004372:	46f2      	mov	sl, lr
 8004374:	f850 2b04 	ldr.w	r2, [r0], #4
 8004378:	b293      	uxth	r3, r2
 800437a:	fb06 e303 	mla	r3, r6, r3, lr
 800437e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004382:	b29b      	uxth	r3, r3
 8004384:	ebaa 0303 	sub.w	r3, sl, r3
 8004388:	f8dc a000 	ldr.w	sl, [ip]
 800438c:	0c12      	lsrs	r2, r2, #16
 800438e:	fa13 f38a 	uxtah	r3, r3, sl
 8004392:	fb06 e202 	mla	r2, r6, r2, lr
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	9b00      	ldr	r3, [sp, #0]
 800439a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800439e:	b292      	uxth	r2, r2
 80043a0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80043a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80043a8:	f8bd 3000 	ldrh.w	r3, [sp]
 80043ac:	4581      	cmp	r9, r0
 80043ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80043b2:	f84c 3b04 	str.w	r3, [ip], #4
 80043b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80043ba:	d2db      	bcs.n	8004374 <quorem+0x44>
 80043bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80043c0:	b92b      	cbnz	r3, 80043ce <quorem+0x9e>
 80043c2:	9b01      	ldr	r3, [sp, #4]
 80043c4:	3b04      	subs	r3, #4
 80043c6:	429d      	cmp	r5, r3
 80043c8:	461a      	mov	r2, r3
 80043ca:	d32e      	bcc.n	800442a <quorem+0xfa>
 80043cc:	613c      	str	r4, [r7, #16]
 80043ce:	4638      	mov	r0, r7
 80043d0:	f001 fc82 	bl	8005cd8 <__mcmp>
 80043d4:	2800      	cmp	r0, #0
 80043d6:	db24      	blt.n	8004422 <quorem+0xf2>
 80043d8:	3601      	adds	r6, #1
 80043da:	4628      	mov	r0, r5
 80043dc:	f04f 0c00 	mov.w	ip, #0
 80043e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80043e4:	f8d0 e000 	ldr.w	lr, [r0]
 80043e8:	b293      	uxth	r3, r2
 80043ea:	ebac 0303 	sub.w	r3, ip, r3
 80043ee:	0c12      	lsrs	r2, r2, #16
 80043f0:	fa13 f38e 	uxtah	r3, r3, lr
 80043f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80043f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004402:	45c1      	cmp	r9, r8
 8004404:	f840 3b04 	str.w	r3, [r0], #4
 8004408:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800440c:	d2e8      	bcs.n	80043e0 <quorem+0xb0>
 800440e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004412:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004416:	b922      	cbnz	r2, 8004422 <quorem+0xf2>
 8004418:	3b04      	subs	r3, #4
 800441a:	429d      	cmp	r5, r3
 800441c:	461a      	mov	r2, r3
 800441e:	d30a      	bcc.n	8004436 <quorem+0x106>
 8004420:	613c      	str	r4, [r7, #16]
 8004422:	4630      	mov	r0, r6
 8004424:	b003      	add	sp, #12
 8004426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800442a:	6812      	ldr	r2, [r2, #0]
 800442c:	3b04      	subs	r3, #4
 800442e:	2a00      	cmp	r2, #0
 8004430:	d1cc      	bne.n	80043cc <quorem+0x9c>
 8004432:	3c01      	subs	r4, #1
 8004434:	e7c7      	b.n	80043c6 <quorem+0x96>
 8004436:	6812      	ldr	r2, [r2, #0]
 8004438:	3b04      	subs	r3, #4
 800443a:	2a00      	cmp	r2, #0
 800443c:	d1f0      	bne.n	8004420 <quorem+0xf0>
 800443e:	3c01      	subs	r4, #1
 8004440:	e7eb      	b.n	800441a <quorem+0xea>
 8004442:	2000      	movs	r0, #0
 8004444:	e7ee      	b.n	8004424 <quorem+0xf4>
	...

08004448 <_dtoa_r>:
 8004448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800444c:	ed2d 8b04 	vpush	{d8-d9}
 8004450:	ec57 6b10 	vmov	r6, r7, d0
 8004454:	b093      	sub	sp, #76	; 0x4c
 8004456:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004458:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800445c:	9106      	str	r1, [sp, #24]
 800445e:	ee10 aa10 	vmov	sl, s0
 8004462:	4604      	mov	r4, r0
 8004464:	9209      	str	r2, [sp, #36]	; 0x24
 8004466:	930c      	str	r3, [sp, #48]	; 0x30
 8004468:	46bb      	mov	fp, r7
 800446a:	b975      	cbnz	r5, 800448a <_dtoa_r+0x42>
 800446c:	2010      	movs	r0, #16
 800446e:	f001 f94d 	bl	800570c <malloc>
 8004472:	4602      	mov	r2, r0
 8004474:	6260      	str	r0, [r4, #36]	; 0x24
 8004476:	b920      	cbnz	r0, 8004482 <_dtoa_r+0x3a>
 8004478:	4ba7      	ldr	r3, [pc, #668]	; (8004718 <_dtoa_r+0x2d0>)
 800447a:	21ea      	movs	r1, #234	; 0xea
 800447c:	48a7      	ldr	r0, [pc, #668]	; (800471c <_dtoa_r+0x2d4>)
 800447e:	f002 f8ad 	bl	80065dc <__assert_func>
 8004482:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004486:	6005      	str	r5, [r0, #0]
 8004488:	60c5      	str	r5, [r0, #12]
 800448a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800448c:	6819      	ldr	r1, [r3, #0]
 800448e:	b151      	cbz	r1, 80044a6 <_dtoa_r+0x5e>
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	604a      	str	r2, [r1, #4]
 8004494:	2301      	movs	r3, #1
 8004496:	4093      	lsls	r3, r2
 8004498:	608b      	str	r3, [r1, #8]
 800449a:	4620      	mov	r0, r4
 800449c:	f001 f990 	bl	80057c0 <_Bfree>
 80044a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	1e3b      	subs	r3, r7, #0
 80044a8:	bfaa      	itet	ge
 80044aa:	2300      	movge	r3, #0
 80044ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80044b0:	f8c8 3000 	strge.w	r3, [r8]
 80044b4:	4b9a      	ldr	r3, [pc, #616]	; (8004720 <_dtoa_r+0x2d8>)
 80044b6:	bfbc      	itt	lt
 80044b8:	2201      	movlt	r2, #1
 80044ba:	f8c8 2000 	strlt.w	r2, [r8]
 80044be:	ea33 030b 	bics.w	r3, r3, fp
 80044c2:	d11b      	bne.n	80044fc <_dtoa_r+0xb4>
 80044c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80044c6:	f242 730f 	movw	r3, #9999	; 0x270f
 80044ca:	6013      	str	r3, [r2, #0]
 80044cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80044d0:	4333      	orrs	r3, r6
 80044d2:	f000 8592 	beq.w	8004ffa <_dtoa_r+0xbb2>
 80044d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044d8:	b963      	cbnz	r3, 80044f4 <_dtoa_r+0xac>
 80044da:	4b92      	ldr	r3, [pc, #584]	; (8004724 <_dtoa_r+0x2dc>)
 80044dc:	e022      	b.n	8004524 <_dtoa_r+0xdc>
 80044de:	4b92      	ldr	r3, [pc, #584]	; (8004728 <_dtoa_r+0x2e0>)
 80044e0:	9301      	str	r3, [sp, #4]
 80044e2:	3308      	adds	r3, #8
 80044e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80044e6:	6013      	str	r3, [r2, #0]
 80044e8:	9801      	ldr	r0, [sp, #4]
 80044ea:	b013      	add	sp, #76	; 0x4c
 80044ec:	ecbd 8b04 	vpop	{d8-d9}
 80044f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044f4:	4b8b      	ldr	r3, [pc, #556]	; (8004724 <_dtoa_r+0x2dc>)
 80044f6:	9301      	str	r3, [sp, #4]
 80044f8:	3303      	adds	r3, #3
 80044fa:	e7f3      	b.n	80044e4 <_dtoa_r+0x9c>
 80044fc:	2200      	movs	r2, #0
 80044fe:	2300      	movs	r3, #0
 8004500:	4650      	mov	r0, sl
 8004502:	4659      	mov	r1, fp
 8004504:	f7fc fab8 	bl	8000a78 <__aeabi_dcmpeq>
 8004508:	ec4b ab19 	vmov	d9, sl, fp
 800450c:	4680      	mov	r8, r0
 800450e:	b158      	cbz	r0, 8004528 <_dtoa_r+0xe0>
 8004510:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004512:	2301      	movs	r3, #1
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 856b 	beq.w	8004ff4 <_dtoa_r+0xbac>
 800451e:	4883      	ldr	r0, [pc, #524]	; (800472c <_dtoa_r+0x2e4>)
 8004520:	6018      	str	r0, [r3, #0]
 8004522:	1e43      	subs	r3, r0, #1
 8004524:	9301      	str	r3, [sp, #4]
 8004526:	e7df      	b.n	80044e8 <_dtoa_r+0xa0>
 8004528:	ec4b ab10 	vmov	d0, sl, fp
 800452c:	aa10      	add	r2, sp, #64	; 0x40
 800452e:	a911      	add	r1, sp, #68	; 0x44
 8004530:	4620      	mov	r0, r4
 8004532:	f001 fcf3 	bl	8005f1c <__d2b>
 8004536:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800453a:	ee08 0a10 	vmov	s16, r0
 800453e:	2d00      	cmp	r5, #0
 8004540:	f000 8084 	beq.w	800464c <_dtoa_r+0x204>
 8004544:	ee19 3a90 	vmov	r3, s19
 8004548:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800454c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004550:	4656      	mov	r6, sl
 8004552:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004556:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800455a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800455e:	4b74      	ldr	r3, [pc, #464]	; (8004730 <_dtoa_r+0x2e8>)
 8004560:	2200      	movs	r2, #0
 8004562:	4630      	mov	r0, r6
 8004564:	4639      	mov	r1, r7
 8004566:	f7fb fe67 	bl	8000238 <__aeabi_dsub>
 800456a:	a365      	add	r3, pc, #404	; (adr r3, 8004700 <_dtoa_r+0x2b8>)
 800456c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004570:	f7fc f81a 	bl	80005a8 <__aeabi_dmul>
 8004574:	a364      	add	r3, pc, #400	; (adr r3, 8004708 <_dtoa_r+0x2c0>)
 8004576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457a:	f7fb fe5f 	bl	800023c <__adddf3>
 800457e:	4606      	mov	r6, r0
 8004580:	4628      	mov	r0, r5
 8004582:	460f      	mov	r7, r1
 8004584:	f7fb ffa6 	bl	80004d4 <__aeabi_i2d>
 8004588:	a361      	add	r3, pc, #388	; (adr r3, 8004710 <_dtoa_r+0x2c8>)
 800458a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458e:	f7fc f80b 	bl	80005a8 <__aeabi_dmul>
 8004592:	4602      	mov	r2, r0
 8004594:	460b      	mov	r3, r1
 8004596:	4630      	mov	r0, r6
 8004598:	4639      	mov	r1, r7
 800459a:	f7fb fe4f 	bl	800023c <__adddf3>
 800459e:	4606      	mov	r6, r0
 80045a0:	460f      	mov	r7, r1
 80045a2:	f7fc fab1 	bl	8000b08 <__aeabi_d2iz>
 80045a6:	2200      	movs	r2, #0
 80045a8:	9000      	str	r0, [sp, #0]
 80045aa:	2300      	movs	r3, #0
 80045ac:	4630      	mov	r0, r6
 80045ae:	4639      	mov	r1, r7
 80045b0:	f7fc fa6c 	bl	8000a8c <__aeabi_dcmplt>
 80045b4:	b150      	cbz	r0, 80045cc <_dtoa_r+0x184>
 80045b6:	9800      	ldr	r0, [sp, #0]
 80045b8:	f7fb ff8c 	bl	80004d4 <__aeabi_i2d>
 80045bc:	4632      	mov	r2, r6
 80045be:	463b      	mov	r3, r7
 80045c0:	f7fc fa5a 	bl	8000a78 <__aeabi_dcmpeq>
 80045c4:	b910      	cbnz	r0, 80045cc <_dtoa_r+0x184>
 80045c6:	9b00      	ldr	r3, [sp, #0]
 80045c8:	3b01      	subs	r3, #1
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	9b00      	ldr	r3, [sp, #0]
 80045ce:	2b16      	cmp	r3, #22
 80045d0:	d85a      	bhi.n	8004688 <_dtoa_r+0x240>
 80045d2:	9a00      	ldr	r2, [sp, #0]
 80045d4:	4b57      	ldr	r3, [pc, #348]	; (8004734 <_dtoa_r+0x2ec>)
 80045d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80045da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045de:	ec51 0b19 	vmov	r0, r1, d9
 80045e2:	f7fc fa53 	bl	8000a8c <__aeabi_dcmplt>
 80045e6:	2800      	cmp	r0, #0
 80045e8:	d050      	beq.n	800468c <_dtoa_r+0x244>
 80045ea:	9b00      	ldr	r3, [sp, #0]
 80045ec:	3b01      	subs	r3, #1
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	2300      	movs	r3, #0
 80045f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80045f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80045f6:	1b5d      	subs	r5, r3, r5
 80045f8:	1e6b      	subs	r3, r5, #1
 80045fa:	9305      	str	r3, [sp, #20]
 80045fc:	bf45      	ittet	mi
 80045fe:	f1c5 0301 	rsbmi	r3, r5, #1
 8004602:	9304      	strmi	r3, [sp, #16]
 8004604:	2300      	movpl	r3, #0
 8004606:	2300      	movmi	r3, #0
 8004608:	bf4c      	ite	mi
 800460a:	9305      	strmi	r3, [sp, #20]
 800460c:	9304      	strpl	r3, [sp, #16]
 800460e:	9b00      	ldr	r3, [sp, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	db3d      	blt.n	8004690 <_dtoa_r+0x248>
 8004614:	9b05      	ldr	r3, [sp, #20]
 8004616:	9a00      	ldr	r2, [sp, #0]
 8004618:	920a      	str	r2, [sp, #40]	; 0x28
 800461a:	4413      	add	r3, r2
 800461c:	9305      	str	r3, [sp, #20]
 800461e:	2300      	movs	r3, #0
 8004620:	9307      	str	r3, [sp, #28]
 8004622:	9b06      	ldr	r3, [sp, #24]
 8004624:	2b09      	cmp	r3, #9
 8004626:	f200 8089 	bhi.w	800473c <_dtoa_r+0x2f4>
 800462a:	2b05      	cmp	r3, #5
 800462c:	bfc4      	itt	gt
 800462e:	3b04      	subgt	r3, #4
 8004630:	9306      	strgt	r3, [sp, #24]
 8004632:	9b06      	ldr	r3, [sp, #24]
 8004634:	f1a3 0302 	sub.w	r3, r3, #2
 8004638:	bfcc      	ite	gt
 800463a:	2500      	movgt	r5, #0
 800463c:	2501      	movle	r5, #1
 800463e:	2b03      	cmp	r3, #3
 8004640:	f200 8087 	bhi.w	8004752 <_dtoa_r+0x30a>
 8004644:	e8df f003 	tbb	[pc, r3]
 8004648:	59383a2d 	.word	0x59383a2d
 800464c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004650:	441d      	add	r5, r3
 8004652:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004656:	2b20      	cmp	r3, #32
 8004658:	bfc1      	itttt	gt
 800465a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800465e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004662:	fa0b f303 	lslgt.w	r3, fp, r3
 8004666:	fa26 f000 	lsrgt.w	r0, r6, r0
 800466a:	bfda      	itte	le
 800466c:	f1c3 0320 	rsble	r3, r3, #32
 8004670:	fa06 f003 	lslle.w	r0, r6, r3
 8004674:	4318      	orrgt	r0, r3
 8004676:	f7fb ff1d 	bl	80004b4 <__aeabi_ui2d>
 800467a:	2301      	movs	r3, #1
 800467c:	4606      	mov	r6, r0
 800467e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004682:	3d01      	subs	r5, #1
 8004684:	930e      	str	r3, [sp, #56]	; 0x38
 8004686:	e76a      	b.n	800455e <_dtoa_r+0x116>
 8004688:	2301      	movs	r3, #1
 800468a:	e7b2      	b.n	80045f2 <_dtoa_r+0x1aa>
 800468c:	900b      	str	r0, [sp, #44]	; 0x2c
 800468e:	e7b1      	b.n	80045f4 <_dtoa_r+0x1ac>
 8004690:	9b04      	ldr	r3, [sp, #16]
 8004692:	9a00      	ldr	r2, [sp, #0]
 8004694:	1a9b      	subs	r3, r3, r2
 8004696:	9304      	str	r3, [sp, #16]
 8004698:	4253      	negs	r3, r2
 800469a:	9307      	str	r3, [sp, #28]
 800469c:	2300      	movs	r3, #0
 800469e:	930a      	str	r3, [sp, #40]	; 0x28
 80046a0:	e7bf      	b.n	8004622 <_dtoa_r+0x1da>
 80046a2:	2300      	movs	r3, #0
 80046a4:	9308      	str	r3, [sp, #32]
 80046a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	dc55      	bgt.n	8004758 <_dtoa_r+0x310>
 80046ac:	2301      	movs	r3, #1
 80046ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80046b2:	461a      	mov	r2, r3
 80046b4:	9209      	str	r2, [sp, #36]	; 0x24
 80046b6:	e00c      	b.n	80046d2 <_dtoa_r+0x28a>
 80046b8:	2301      	movs	r3, #1
 80046ba:	e7f3      	b.n	80046a4 <_dtoa_r+0x25c>
 80046bc:	2300      	movs	r3, #0
 80046be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046c0:	9308      	str	r3, [sp, #32]
 80046c2:	9b00      	ldr	r3, [sp, #0]
 80046c4:	4413      	add	r3, r2
 80046c6:	9302      	str	r3, [sp, #8]
 80046c8:	3301      	adds	r3, #1
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	9303      	str	r3, [sp, #12]
 80046ce:	bfb8      	it	lt
 80046d0:	2301      	movlt	r3, #1
 80046d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80046d4:	2200      	movs	r2, #0
 80046d6:	6042      	str	r2, [r0, #4]
 80046d8:	2204      	movs	r2, #4
 80046da:	f102 0614 	add.w	r6, r2, #20
 80046de:	429e      	cmp	r6, r3
 80046e0:	6841      	ldr	r1, [r0, #4]
 80046e2:	d93d      	bls.n	8004760 <_dtoa_r+0x318>
 80046e4:	4620      	mov	r0, r4
 80046e6:	f001 f82b 	bl	8005740 <_Balloc>
 80046ea:	9001      	str	r0, [sp, #4]
 80046ec:	2800      	cmp	r0, #0
 80046ee:	d13b      	bne.n	8004768 <_dtoa_r+0x320>
 80046f0:	4b11      	ldr	r3, [pc, #68]	; (8004738 <_dtoa_r+0x2f0>)
 80046f2:	4602      	mov	r2, r0
 80046f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80046f8:	e6c0      	b.n	800447c <_dtoa_r+0x34>
 80046fa:	2301      	movs	r3, #1
 80046fc:	e7df      	b.n	80046be <_dtoa_r+0x276>
 80046fe:	bf00      	nop
 8004700:	636f4361 	.word	0x636f4361
 8004704:	3fd287a7 	.word	0x3fd287a7
 8004708:	8b60c8b3 	.word	0x8b60c8b3
 800470c:	3fc68a28 	.word	0x3fc68a28
 8004710:	509f79fb 	.word	0x509f79fb
 8004714:	3fd34413 	.word	0x3fd34413
 8004718:	08008cb6 	.word	0x08008cb6
 800471c:	08008ccd 	.word	0x08008ccd
 8004720:	7ff00000 	.word	0x7ff00000
 8004724:	08008cb2 	.word	0x08008cb2
 8004728:	08008ca9 	.word	0x08008ca9
 800472c:	08008b29 	.word	0x08008b29
 8004730:	3ff80000 	.word	0x3ff80000
 8004734:	08008e38 	.word	0x08008e38
 8004738:	08008d28 	.word	0x08008d28
 800473c:	2501      	movs	r5, #1
 800473e:	2300      	movs	r3, #0
 8004740:	9306      	str	r3, [sp, #24]
 8004742:	9508      	str	r5, [sp, #32]
 8004744:	f04f 33ff 	mov.w	r3, #4294967295
 8004748:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800474c:	2200      	movs	r2, #0
 800474e:	2312      	movs	r3, #18
 8004750:	e7b0      	b.n	80046b4 <_dtoa_r+0x26c>
 8004752:	2301      	movs	r3, #1
 8004754:	9308      	str	r3, [sp, #32]
 8004756:	e7f5      	b.n	8004744 <_dtoa_r+0x2fc>
 8004758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800475a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800475e:	e7b8      	b.n	80046d2 <_dtoa_r+0x28a>
 8004760:	3101      	adds	r1, #1
 8004762:	6041      	str	r1, [r0, #4]
 8004764:	0052      	lsls	r2, r2, #1
 8004766:	e7b8      	b.n	80046da <_dtoa_r+0x292>
 8004768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800476a:	9a01      	ldr	r2, [sp, #4]
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	9b03      	ldr	r3, [sp, #12]
 8004770:	2b0e      	cmp	r3, #14
 8004772:	f200 809d 	bhi.w	80048b0 <_dtoa_r+0x468>
 8004776:	2d00      	cmp	r5, #0
 8004778:	f000 809a 	beq.w	80048b0 <_dtoa_r+0x468>
 800477c:	9b00      	ldr	r3, [sp, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	dd32      	ble.n	80047e8 <_dtoa_r+0x3a0>
 8004782:	4ab7      	ldr	r2, [pc, #732]	; (8004a60 <_dtoa_r+0x618>)
 8004784:	f003 030f 	and.w	r3, r3, #15
 8004788:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800478c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004790:	9b00      	ldr	r3, [sp, #0]
 8004792:	05d8      	lsls	r0, r3, #23
 8004794:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004798:	d516      	bpl.n	80047c8 <_dtoa_r+0x380>
 800479a:	4bb2      	ldr	r3, [pc, #712]	; (8004a64 <_dtoa_r+0x61c>)
 800479c:	ec51 0b19 	vmov	r0, r1, d9
 80047a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80047a4:	f7fc f82a 	bl	80007fc <__aeabi_ddiv>
 80047a8:	f007 070f 	and.w	r7, r7, #15
 80047ac:	4682      	mov	sl, r0
 80047ae:	468b      	mov	fp, r1
 80047b0:	2503      	movs	r5, #3
 80047b2:	4eac      	ldr	r6, [pc, #688]	; (8004a64 <_dtoa_r+0x61c>)
 80047b4:	b957      	cbnz	r7, 80047cc <_dtoa_r+0x384>
 80047b6:	4642      	mov	r2, r8
 80047b8:	464b      	mov	r3, r9
 80047ba:	4650      	mov	r0, sl
 80047bc:	4659      	mov	r1, fp
 80047be:	f7fc f81d 	bl	80007fc <__aeabi_ddiv>
 80047c2:	4682      	mov	sl, r0
 80047c4:	468b      	mov	fp, r1
 80047c6:	e028      	b.n	800481a <_dtoa_r+0x3d2>
 80047c8:	2502      	movs	r5, #2
 80047ca:	e7f2      	b.n	80047b2 <_dtoa_r+0x36a>
 80047cc:	07f9      	lsls	r1, r7, #31
 80047ce:	d508      	bpl.n	80047e2 <_dtoa_r+0x39a>
 80047d0:	4640      	mov	r0, r8
 80047d2:	4649      	mov	r1, r9
 80047d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80047d8:	f7fb fee6 	bl	80005a8 <__aeabi_dmul>
 80047dc:	3501      	adds	r5, #1
 80047de:	4680      	mov	r8, r0
 80047e0:	4689      	mov	r9, r1
 80047e2:	107f      	asrs	r7, r7, #1
 80047e4:	3608      	adds	r6, #8
 80047e6:	e7e5      	b.n	80047b4 <_dtoa_r+0x36c>
 80047e8:	f000 809b 	beq.w	8004922 <_dtoa_r+0x4da>
 80047ec:	9b00      	ldr	r3, [sp, #0]
 80047ee:	4f9d      	ldr	r7, [pc, #628]	; (8004a64 <_dtoa_r+0x61c>)
 80047f0:	425e      	negs	r6, r3
 80047f2:	4b9b      	ldr	r3, [pc, #620]	; (8004a60 <_dtoa_r+0x618>)
 80047f4:	f006 020f 	and.w	r2, r6, #15
 80047f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80047fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004800:	ec51 0b19 	vmov	r0, r1, d9
 8004804:	f7fb fed0 	bl	80005a8 <__aeabi_dmul>
 8004808:	1136      	asrs	r6, r6, #4
 800480a:	4682      	mov	sl, r0
 800480c:	468b      	mov	fp, r1
 800480e:	2300      	movs	r3, #0
 8004810:	2502      	movs	r5, #2
 8004812:	2e00      	cmp	r6, #0
 8004814:	d17a      	bne.n	800490c <_dtoa_r+0x4c4>
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1d3      	bne.n	80047c2 <_dtoa_r+0x37a>
 800481a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 8082 	beq.w	8004926 <_dtoa_r+0x4de>
 8004822:	4b91      	ldr	r3, [pc, #580]	; (8004a68 <_dtoa_r+0x620>)
 8004824:	2200      	movs	r2, #0
 8004826:	4650      	mov	r0, sl
 8004828:	4659      	mov	r1, fp
 800482a:	f7fc f92f 	bl	8000a8c <__aeabi_dcmplt>
 800482e:	2800      	cmp	r0, #0
 8004830:	d079      	beq.n	8004926 <_dtoa_r+0x4de>
 8004832:	9b03      	ldr	r3, [sp, #12]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d076      	beq.n	8004926 <_dtoa_r+0x4de>
 8004838:	9b02      	ldr	r3, [sp, #8]
 800483a:	2b00      	cmp	r3, #0
 800483c:	dd36      	ble.n	80048ac <_dtoa_r+0x464>
 800483e:	9b00      	ldr	r3, [sp, #0]
 8004840:	4650      	mov	r0, sl
 8004842:	4659      	mov	r1, fp
 8004844:	1e5f      	subs	r7, r3, #1
 8004846:	2200      	movs	r2, #0
 8004848:	4b88      	ldr	r3, [pc, #544]	; (8004a6c <_dtoa_r+0x624>)
 800484a:	f7fb fead 	bl	80005a8 <__aeabi_dmul>
 800484e:	9e02      	ldr	r6, [sp, #8]
 8004850:	4682      	mov	sl, r0
 8004852:	468b      	mov	fp, r1
 8004854:	3501      	adds	r5, #1
 8004856:	4628      	mov	r0, r5
 8004858:	f7fb fe3c 	bl	80004d4 <__aeabi_i2d>
 800485c:	4652      	mov	r2, sl
 800485e:	465b      	mov	r3, fp
 8004860:	f7fb fea2 	bl	80005a8 <__aeabi_dmul>
 8004864:	4b82      	ldr	r3, [pc, #520]	; (8004a70 <_dtoa_r+0x628>)
 8004866:	2200      	movs	r2, #0
 8004868:	f7fb fce8 	bl	800023c <__adddf3>
 800486c:	46d0      	mov	r8, sl
 800486e:	46d9      	mov	r9, fp
 8004870:	4682      	mov	sl, r0
 8004872:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004876:	2e00      	cmp	r6, #0
 8004878:	d158      	bne.n	800492c <_dtoa_r+0x4e4>
 800487a:	4b7e      	ldr	r3, [pc, #504]	; (8004a74 <_dtoa_r+0x62c>)
 800487c:	2200      	movs	r2, #0
 800487e:	4640      	mov	r0, r8
 8004880:	4649      	mov	r1, r9
 8004882:	f7fb fcd9 	bl	8000238 <__aeabi_dsub>
 8004886:	4652      	mov	r2, sl
 8004888:	465b      	mov	r3, fp
 800488a:	4680      	mov	r8, r0
 800488c:	4689      	mov	r9, r1
 800488e:	f7fc f91b 	bl	8000ac8 <__aeabi_dcmpgt>
 8004892:	2800      	cmp	r0, #0
 8004894:	f040 8295 	bne.w	8004dc2 <_dtoa_r+0x97a>
 8004898:	4652      	mov	r2, sl
 800489a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800489e:	4640      	mov	r0, r8
 80048a0:	4649      	mov	r1, r9
 80048a2:	f7fc f8f3 	bl	8000a8c <__aeabi_dcmplt>
 80048a6:	2800      	cmp	r0, #0
 80048a8:	f040 8289 	bne.w	8004dbe <_dtoa_r+0x976>
 80048ac:	ec5b ab19 	vmov	sl, fp, d9
 80048b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f2c0 8148 	blt.w	8004b48 <_dtoa_r+0x700>
 80048b8:	9a00      	ldr	r2, [sp, #0]
 80048ba:	2a0e      	cmp	r2, #14
 80048bc:	f300 8144 	bgt.w	8004b48 <_dtoa_r+0x700>
 80048c0:	4b67      	ldr	r3, [pc, #412]	; (8004a60 <_dtoa_r+0x618>)
 80048c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80048c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80048ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f280 80d5 	bge.w	8004a7c <_dtoa_r+0x634>
 80048d2:	9b03      	ldr	r3, [sp, #12]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f300 80d1 	bgt.w	8004a7c <_dtoa_r+0x634>
 80048da:	f040 826f 	bne.w	8004dbc <_dtoa_r+0x974>
 80048de:	4b65      	ldr	r3, [pc, #404]	; (8004a74 <_dtoa_r+0x62c>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	4640      	mov	r0, r8
 80048e4:	4649      	mov	r1, r9
 80048e6:	f7fb fe5f 	bl	80005a8 <__aeabi_dmul>
 80048ea:	4652      	mov	r2, sl
 80048ec:	465b      	mov	r3, fp
 80048ee:	f7fc f8e1 	bl	8000ab4 <__aeabi_dcmpge>
 80048f2:	9e03      	ldr	r6, [sp, #12]
 80048f4:	4637      	mov	r7, r6
 80048f6:	2800      	cmp	r0, #0
 80048f8:	f040 8245 	bne.w	8004d86 <_dtoa_r+0x93e>
 80048fc:	9d01      	ldr	r5, [sp, #4]
 80048fe:	2331      	movs	r3, #49	; 0x31
 8004900:	f805 3b01 	strb.w	r3, [r5], #1
 8004904:	9b00      	ldr	r3, [sp, #0]
 8004906:	3301      	adds	r3, #1
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	e240      	b.n	8004d8e <_dtoa_r+0x946>
 800490c:	07f2      	lsls	r2, r6, #31
 800490e:	d505      	bpl.n	800491c <_dtoa_r+0x4d4>
 8004910:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004914:	f7fb fe48 	bl	80005a8 <__aeabi_dmul>
 8004918:	3501      	adds	r5, #1
 800491a:	2301      	movs	r3, #1
 800491c:	1076      	asrs	r6, r6, #1
 800491e:	3708      	adds	r7, #8
 8004920:	e777      	b.n	8004812 <_dtoa_r+0x3ca>
 8004922:	2502      	movs	r5, #2
 8004924:	e779      	b.n	800481a <_dtoa_r+0x3d2>
 8004926:	9f00      	ldr	r7, [sp, #0]
 8004928:	9e03      	ldr	r6, [sp, #12]
 800492a:	e794      	b.n	8004856 <_dtoa_r+0x40e>
 800492c:	9901      	ldr	r1, [sp, #4]
 800492e:	4b4c      	ldr	r3, [pc, #304]	; (8004a60 <_dtoa_r+0x618>)
 8004930:	4431      	add	r1, r6
 8004932:	910d      	str	r1, [sp, #52]	; 0x34
 8004934:	9908      	ldr	r1, [sp, #32]
 8004936:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800493a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800493e:	2900      	cmp	r1, #0
 8004940:	d043      	beq.n	80049ca <_dtoa_r+0x582>
 8004942:	494d      	ldr	r1, [pc, #308]	; (8004a78 <_dtoa_r+0x630>)
 8004944:	2000      	movs	r0, #0
 8004946:	f7fb ff59 	bl	80007fc <__aeabi_ddiv>
 800494a:	4652      	mov	r2, sl
 800494c:	465b      	mov	r3, fp
 800494e:	f7fb fc73 	bl	8000238 <__aeabi_dsub>
 8004952:	9d01      	ldr	r5, [sp, #4]
 8004954:	4682      	mov	sl, r0
 8004956:	468b      	mov	fp, r1
 8004958:	4649      	mov	r1, r9
 800495a:	4640      	mov	r0, r8
 800495c:	f7fc f8d4 	bl	8000b08 <__aeabi_d2iz>
 8004960:	4606      	mov	r6, r0
 8004962:	f7fb fdb7 	bl	80004d4 <__aeabi_i2d>
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	4640      	mov	r0, r8
 800496c:	4649      	mov	r1, r9
 800496e:	f7fb fc63 	bl	8000238 <__aeabi_dsub>
 8004972:	3630      	adds	r6, #48	; 0x30
 8004974:	f805 6b01 	strb.w	r6, [r5], #1
 8004978:	4652      	mov	r2, sl
 800497a:	465b      	mov	r3, fp
 800497c:	4680      	mov	r8, r0
 800497e:	4689      	mov	r9, r1
 8004980:	f7fc f884 	bl	8000a8c <__aeabi_dcmplt>
 8004984:	2800      	cmp	r0, #0
 8004986:	d163      	bne.n	8004a50 <_dtoa_r+0x608>
 8004988:	4642      	mov	r2, r8
 800498a:	464b      	mov	r3, r9
 800498c:	4936      	ldr	r1, [pc, #216]	; (8004a68 <_dtoa_r+0x620>)
 800498e:	2000      	movs	r0, #0
 8004990:	f7fb fc52 	bl	8000238 <__aeabi_dsub>
 8004994:	4652      	mov	r2, sl
 8004996:	465b      	mov	r3, fp
 8004998:	f7fc f878 	bl	8000a8c <__aeabi_dcmplt>
 800499c:	2800      	cmp	r0, #0
 800499e:	f040 80b5 	bne.w	8004b0c <_dtoa_r+0x6c4>
 80049a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049a4:	429d      	cmp	r5, r3
 80049a6:	d081      	beq.n	80048ac <_dtoa_r+0x464>
 80049a8:	4b30      	ldr	r3, [pc, #192]	; (8004a6c <_dtoa_r+0x624>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	4650      	mov	r0, sl
 80049ae:	4659      	mov	r1, fp
 80049b0:	f7fb fdfa 	bl	80005a8 <__aeabi_dmul>
 80049b4:	4b2d      	ldr	r3, [pc, #180]	; (8004a6c <_dtoa_r+0x624>)
 80049b6:	4682      	mov	sl, r0
 80049b8:	468b      	mov	fp, r1
 80049ba:	4640      	mov	r0, r8
 80049bc:	4649      	mov	r1, r9
 80049be:	2200      	movs	r2, #0
 80049c0:	f7fb fdf2 	bl	80005a8 <__aeabi_dmul>
 80049c4:	4680      	mov	r8, r0
 80049c6:	4689      	mov	r9, r1
 80049c8:	e7c6      	b.n	8004958 <_dtoa_r+0x510>
 80049ca:	4650      	mov	r0, sl
 80049cc:	4659      	mov	r1, fp
 80049ce:	f7fb fdeb 	bl	80005a8 <__aeabi_dmul>
 80049d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049d4:	9d01      	ldr	r5, [sp, #4]
 80049d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80049d8:	4682      	mov	sl, r0
 80049da:	468b      	mov	fp, r1
 80049dc:	4649      	mov	r1, r9
 80049de:	4640      	mov	r0, r8
 80049e0:	f7fc f892 	bl	8000b08 <__aeabi_d2iz>
 80049e4:	4606      	mov	r6, r0
 80049e6:	f7fb fd75 	bl	80004d4 <__aeabi_i2d>
 80049ea:	3630      	adds	r6, #48	; 0x30
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	4640      	mov	r0, r8
 80049f2:	4649      	mov	r1, r9
 80049f4:	f7fb fc20 	bl	8000238 <__aeabi_dsub>
 80049f8:	f805 6b01 	strb.w	r6, [r5], #1
 80049fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049fe:	429d      	cmp	r5, r3
 8004a00:	4680      	mov	r8, r0
 8004a02:	4689      	mov	r9, r1
 8004a04:	f04f 0200 	mov.w	r2, #0
 8004a08:	d124      	bne.n	8004a54 <_dtoa_r+0x60c>
 8004a0a:	4b1b      	ldr	r3, [pc, #108]	; (8004a78 <_dtoa_r+0x630>)
 8004a0c:	4650      	mov	r0, sl
 8004a0e:	4659      	mov	r1, fp
 8004a10:	f7fb fc14 	bl	800023c <__adddf3>
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	4640      	mov	r0, r8
 8004a1a:	4649      	mov	r1, r9
 8004a1c:	f7fc f854 	bl	8000ac8 <__aeabi_dcmpgt>
 8004a20:	2800      	cmp	r0, #0
 8004a22:	d173      	bne.n	8004b0c <_dtoa_r+0x6c4>
 8004a24:	4652      	mov	r2, sl
 8004a26:	465b      	mov	r3, fp
 8004a28:	4913      	ldr	r1, [pc, #76]	; (8004a78 <_dtoa_r+0x630>)
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	f7fb fc04 	bl	8000238 <__aeabi_dsub>
 8004a30:	4602      	mov	r2, r0
 8004a32:	460b      	mov	r3, r1
 8004a34:	4640      	mov	r0, r8
 8004a36:	4649      	mov	r1, r9
 8004a38:	f7fc f828 	bl	8000a8c <__aeabi_dcmplt>
 8004a3c:	2800      	cmp	r0, #0
 8004a3e:	f43f af35 	beq.w	80048ac <_dtoa_r+0x464>
 8004a42:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004a44:	1e6b      	subs	r3, r5, #1
 8004a46:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a48:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004a4c:	2b30      	cmp	r3, #48	; 0x30
 8004a4e:	d0f8      	beq.n	8004a42 <_dtoa_r+0x5fa>
 8004a50:	9700      	str	r7, [sp, #0]
 8004a52:	e049      	b.n	8004ae8 <_dtoa_r+0x6a0>
 8004a54:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <_dtoa_r+0x624>)
 8004a56:	f7fb fda7 	bl	80005a8 <__aeabi_dmul>
 8004a5a:	4680      	mov	r8, r0
 8004a5c:	4689      	mov	r9, r1
 8004a5e:	e7bd      	b.n	80049dc <_dtoa_r+0x594>
 8004a60:	08008e38 	.word	0x08008e38
 8004a64:	08008e10 	.word	0x08008e10
 8004a68:	3ff00000 	.word	0x3ff00000
 8004a6c:	40240000 	.word	0x40240000
 8004a70:	401c0000 	.word	0x401c0000
 8004a74:	40140000 	.word	0x40140000
 8004a78:	3fe00000 	.word	0x3fe00000
 8004a7c:	9d01      	ldr	r5, [sp, #4]
 8004a7e:	4656      	mov	r6, sl
 8004a80:	465f      	mov	r7, fp
 8004a82:	4642      	mov	r2, r8
 8004a84:	464b      	mov	r3, r9
 8004a86:	4630      	mov	r0, r6
 8004a88:	4639      	mov	r1, r7
 8004a8a:	f7fb feb7 	bl	80007fc <__aeabi_ddiv>
 8004a8e:	f7fc f83b 	bl	8000b08 <__aeabi_d2iz>
 8004a92:	4682      	mov	sl, r0
 8004a94:	f7fb fd1e 	bl	80004d4 <__aeabi_i2d>
 8004a98:	4642      	mov	r2, r8
 8004a9a:	464b      	mov	r3, r9
 8004a9c:	f7fb fd84 	bl	80005a8 <__aeabi_dmul>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4630      	mov	r0, r6
 8004aa6:	4639      	mov	r1, r7
 8004aa8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004aac:	f7fb fbc4 	bl	8000238 <__aeabi_dsub>
 8004ab0:	f805 6b01 	strb.w	r6, [r5], #1
 8004ab4:	9e01      	ldr	r6, [sp, #4]
 8004ab6:	9f03      	ldr	r7, [sp, #12]
 8004ab8:	1bae      	subs	r6, r5, r6
 8004aba:	42b7      	cmp	r7, r6
 8004abc:	4602      	mov	r2, r0
 8004abe:	460b      	mov	r3, r1
 8004ac0:	d135      	bne.n	8004b2e <_dtoa_r+0x6e6>
 8004ac2:	f7fb fbbb 	bl	800023c <__adddf3>
 8004ac6:	4642      	mov	r2, r8
 8004ac8:	464b      	mov	r3, r9
 8004aca:	4606      	mov	r6, r0
 8004acc:	460f      	mov	r7, r1
 8004ace:	f7fb fffb 	bl	8000ac8 <__aeabi_dcmpgt>
 8004ad2:	b9d0      	cbnz	r0, 8004b0a <_dtoa_r+0x6c2>
 8004ad4:	4642      	mov	r2, r8
 8004ad6:	464b      	mov	r3, r9
 8004ad8:	4630      	mov	r0, r6
 8004ada:	4639      	mov	r1, r7
 8004adc:	f7fb ffcc 	bl	8000a78 <__aeabi_dcmpeq>
 8004ae0:	b110      	cbz	r0, 8004ae8 <_dtoa_r+0x6a0>
 8004ae2:	f01a 0f01 	tst.w	sl, #1
 8004ae6:	d110      	bne.n	8004b0a <_dtoa_r+0x6c2>
 8004ae8:	4620      	mov	r0, r4
 8004aea:	ee18 1a10 	vmov	r1, s16
 8004aee:	f000 fe67 	bl	80057c0 <_Bfree>
 8004af2:	2300      	movs	r3, #0
 8004af4:	9800      	ldr	r0, [sp, #0]
 8004af6:	702b      	strb	r3, [r5, #0]
 8004af8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004afa:	3001      	adds	r0, #1
 8004afc:	6018      	str	r0, [r3, #0]
 8004afe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f43f acf1 	beq.w	80044e8 <_dtoa_r+0xa0>
 8004b06:	601d      	str	r5, [r3, #0]
 8004b08:	e4ee      	b.n	80044e8 <_dtoa_r+0xa0>
 8004b0a:	9f00      	ldr	r7, [sp, #0]
 8004b0c:	462b      	mov	r3, r5
 8004b0e:	461d      	mov	r5, r3
 8004b10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b14:	2a39      	cmp	r2, #57	; 0x39
 8004b16:	d106      	bne.n	8004b26 <_dtoa_r+0x6de>
 8004b18:	9a01      	ldr	r2, [sp, #4]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d1f7      	bne.n	8004b0e <_dtoa_r+0x6c6>
 8004b1e:	9901      	ldr	r1, [sp, #4]
 8004b20:	2230      	movs	r2, #48	; 0x30
 8004b22:	3701      	adds	r7, #1
 8004b24:	700a      	strb	r2, [r1, #0]
 8004b26:	781a      	ldrb	r2, [r3, #0]
 8004b28:	3201      	adds	r2, #1
 8004b2a:	701a      	strb	r2, [r3, #0]
 8004b2c:	e790      	b.n	8004a50 <_dtoa_r+0x608>
 8004b2e:	4ba6      	ldr	r3, [pc, #664]	; (8004dc8 <_dtoa_r+0x980>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	f7fb fd39 	bl	80005a8 <__aeabi_dmul>
 8004b36:	2200      	movs	r2, #0
 8004b38:	2300      	movs	r3, #0
 8004b3a:	4606      	mov	r6, r0
 8004b3c:	460f      	mov	r7, r1
 8004b3e:	f7fb ff9b 	bl	8000a78 <__aeabi_dcmpeq>
 8004b42:	2800      	cmp	r0, #0
 8004b44:	d09d      	beq.n	8004a82 <_dtoa_r+0x63a>
 8004b46:	e7cf      	b.n	8004ae8 <_dtoa_r+0x6a0>
 8004b48:	9a08      	ldr	r2, [sp, #32]
 8004b4a:	2a00      	cmp	r2, #0
 8004b4c:	f000 80d7 	beq.w	8004cfe <_dtoa_r+0x8b6>
 8004b50:	9a06      	ldr	r2, [sp, #24]
 8004b52:	2a01      	cmp	r2, #1
 8004b54:	f300 80ba 	bgt.w	8004ccc <_dtoa_r+0x884>
 8004b58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b5a:	2a00      	cmp	r2, #0
 8004b5c:	f000 80b2 	beq.w	8004cc4 <_dtoa_r+0x87c>
 8004b60:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004b64:	9e07      	ldr	r6, [sp, #28]
 8004b66:	9d04      	ldr	r5, [sp, #16]
 8004b68:	9a04      	ldr	r2, [sp, #16]
 8004b6a:	441a      	add	r2, r3
 8004b6c:	9204      	str	r2, [sp, #16]
 8004b6e:	9a05      	ldr	r2, [sp, #20]
 8004b70:	2101      	movs	r1, #1
 8004b72:	441a      	add	r2, r3
 8004b74:	4620      	mov	r0, r4
 8004b76:	9205      	str	r2, [sp, #20]
 8004b78:	f000 ff24 	bl	80059c4 <__i2b>
 8004b7c:	4607      	mov	r7, r0
 8004b7e:	2d00      	cmp	r5, #0
 8004b80:	dd0c      	ble.n	8004b9c <_dtoa_r+0x754>
 8004b82:	9b05      	ldr	r3, [sp, #20]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	dd09      	ble.n	8004b9c <_dtoa_r+0x754>
 8004b88:	42ab      	cmp	r3, r5
 8004b8a:	9a04      	ldr	r2, [sp, #16]
 8004b8c:	bfa8      	it	ge
 8004b8e:	462b      	movge	r3, r5
 8004b90:	1ad2      	subs	r2, r2, r3
 8004b92:	9204      	str	r2, [sp, #16]
 8004b94:	9a05      	ldr	r2, [sp, #20]
 8004b96:	1aed      	subs	r5, r5, r3
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	9305      	str	r3, [sp, #20]
 8004b9c:	9b07      	ldr	r3, [sp, #28]
 8004b9e:	b31b      	cbz	r3, 8004be8 <_dtoa_r+0x7a0>
 8004ba0:	9b08      	ldr	r3, [sp, #32]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f000 80af 	beq.w	8004d06 <_dtoa_r+0x8be>
 8004ba8:	2e00      	cmp	r6, #0
 8004baa:	dd13      	ble.n	8004bd4 <_dtoa_r+0x78c>
 8004bac:	4639      	mov	r1, r7
 8004bae:	4632      	mov	r2, r6
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	f000 ffc7 	bl	8005b44 <__pow5mult>
 8004bb6:	ee18 2a10 	vmov	r2, s16
 8004bba:	4601      	mov	r1, r0
 8004bbc:	4607      	mov	r7, r0
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	f000 ff16 	bl	80059f0 <__multiply>
 8004bc4:	ee18 1a10 	vmov	r1, s16
 8004bc8:	4680      	mov	r8, r0
 8004bca:	4620      	mov	r0, r4
 8004bcc:	f000 fdf8 	bl	80057c0 <_Bfree>
 8004bd0:	ee08 8a10 	vmov	s16, r8
 8004bd4:	9b07      	ldr	r3, [sp, #28]
 8004bd6:	1b9a      	subs	r2, r3, r6
 8004bd8:	d006      	beq.n	8004be8 <_dtoa_r+0x7a0>
 8004bda:	ee18 1a10 	vmov	r1, s16
 8004bde:	4620      	mov	r0, r4
 8004be0:	f000 ffb0 	bl	8005b44 <__pow5mult>
 8004be4:	ee08 0a10 	vmov	s16, r0
 8004be8:	2101      	movs	r1, #1
 8004bea:	4620      	mov	r0, r4
 8004bec:	f000 feea 	bl	80059c4 <__i2b>
 8004bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	4606      	mov	r6, r0
 8004bf6:	f340 8088 	ble.w	8004d0a <_dtoa_r+0x8c2>
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	4601      	mov	r1, r0
 8004bfe:	4620      	mov	r0, r4
 8004c00:	f000 ffa0 	bl	8005b44 <__pow5mult>
 8004c04:	9b06      	ldr	r3, [sp, #24]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	4606      	mov	r6, r0
 8004c0a:	f340 8081 	ble.w	8004d10 <_dtoa_r+0x8c8>
 8004c0e:	f04f 0800 	mov.w	r8, #0
 8004c12:	6933      	ldr	r3, [r6, #16]
 8004c14:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004c18:	6918      	ldr	r0, [r3, #16]
 8004c1a:	f000 fe83 	bl	8005924 <__hi0bits>
 8004c1e:	f1c0 0020 	rsb	r0, r0, #32
 8004c22:	9b05      	ldr	r3, [sp, #20]
 8004c24:	4418      	add	r0, r3
 8004c26:	f010 001f 	ands.w	r0, r0, #31
 8004c2a:	f000 8092 	beq.w	8004d52 <_dtoa_r+0x90a>
 8004c2e:	f1c0 0320 	rsb	r3, r0, #32
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	f340 808a 	ble.w	8004d4c <_dtoa_r+0x904>
 8004c38:	f1c0 001c 	rsb	r0, r0, #28
 8004c3c:	9b04      	ldr	r3, [sp, #16]
 8004c3e:	4403      	add	r3, r0
 8004c40:	9304      	str	r3, [sp, #16]
 8004c42:	9b05      	ldr	r3, [sp, #20]
 8004c44:	4403      	add	r3, r0
 8004c46:	4405      	add	r5, r0
 8004c48:	9305      	str	r3, [sp, #20]
 8004c4a:	9b04      	ldr	r3, [sp, #16]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	dd07      	ble.n	8004c60 <_dtoa_r+0x818>
 8004c50:	ee18 1a10 	vmov	r1, s16
 8004c54:	461a      	mov	r2, r3
 8004c56:	4620      	mov	r0, r4
 8004c58:	f000 ffce 	bl	8005bf8 <__lshift>
 8004c5c:	ee08 0a10 	vmov	s16, r0
 8004c60:	9b05      	ldr	r3, [sp, #20]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	dd05      	ble.n	8004c72 <_dtoa_r+0x82a>
 8004c66:	4631      	mov	r1, r6
 8004c68:	461a      	mov	r2, r3
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	f000 ffc4 	bl	8005bf8 <__lshift>
 8004c70:	4606      	mov	r6, r0
 8004c72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d06e      	beq.n	8004d56 <_dtoa_r+0x90e>
 8004c78:	ee18 0a10 	vmov	r0, s16
 8004c7c:	4631      	mov	r1, r6
 8004c7e:	f001 f82b 	bl	8005cd8 <__mcmp>
 8004c82:	2800      	cmp	r0, #0
 8004c84:	da67      	bge.n	8004d56 <_dtoa_r+0x90e>
 8004c86:	9b00      	ldr	r3, [sp, #0]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	ee18 1a10 	vmov	r1, s16
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	220a      	movs	r2, #10
 8004c92:	2300      	movs	r3, #0
 8004c94:	4620      	mov	r0, r4
 8004c96:	f000 fdb5 	bl	8005804 <__multadd>
 8004c9a:	9b08      	ldr	r3, [sp, #32]
 8004c9c:	ee08 0a10 	vmov	s16, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 81b1 	beq.w	8005008 <_dtoa_r+0xbc0>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	4639      	mov	r1, r7
 8004caa:	220a      	movs	r2, #10
 8004cac:	4620      	mov	r0, r4
 8004cae:	f000 fda9 	bl	8005804 <__multadd>
 8004cb2:	9b02      	ldr	r3, [sp, #8]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	4607      	mov	r7, r0
 8004cb8:	f300 808e 	bgt.w	8004dd8 <_dtoa_r+0x990>
 8004cbc:	9b06      	ldr	r3, [sp, #24]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	dc51      	bgt.n	8004d66 <_dtoa_r+0x91e>
 8004cc2:	e089      	b.n	8004dd8 <_dtoa_r+0x990>
 8004cc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004cc6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004cca:	e74b      	b.n	8004b64 <_dtoa_r+0x71c>
 8004ccc:	9b03      	ldr	r3, [sp, #12]
 8004cce:	1e5e      	subs	r6, r3, #1
 8004cd0:	9b07      	ldr	r3, [sp, #28]
 8004cd2:	42b3      	cmp	r3, r6
 8004cd4:	bfbf      	itttt	lt
 8004cd6:	9b07      	ldrlt	r3, [sp, #28]
 8004cd8:	9607      	strlt	r6, [sp, #28]
 8004cda:	1af2      	sublt	r2, r6, r3
 8004cdc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004cde:	bfb6      	itet	lt
 8004ce0:	189b      	addlt	r3, r3, r2
 8004ce2:	1b9e      	subge	r6, r3, r6
 8004ce4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8004ce6:	9b03      	ldr	r3, [sp, #12]
 8004ce8:	bfb8      	it	lt
 8004cea:	2600      	movlt	r6, #0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	bfb7      	itett	lt
 8004cf0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8004cf4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004cf8:	1a9d      	sublt	r5, r3, r2
 8004cfa:	2300      	movlt	r3, #0
 8004cfc:	e734      	b.n	8004b68 <_dtoa_r+0x720>
 8004cfe:	9e07      	ldr	r6, [sp, #28]
 8004d00:	9d04      	ldr	r5, [sp, #16]
 8004d02:	9f08      	ldr	r7, [sp, #32]
 8004d04:	e73b      	b.n	8004b7e <_dtoa_r+0x736>
 8004d06:	9a07      	ldr	r2, [sp, #28]
 8004d08:	e767      	b.n	8004bda <_dtoa_r+0x792>
 8004d0a:	9b06      	ldr	r3, [sp, #24]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	dc18      	bgt.n	8004d42 <_dtoa_r+0x8fa>
 8004d10:	f1ba 0f00 	cmp.w	sl, #0
 8004d14:	d115      	bne.n	8004d42 <_dtoa_r+0x8fa>
 8004d16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004d1a:	b993      	cbnz	r3, 8004d42 <_dtoa_r+0x8fa>
 8004d1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004d20:	0d1b      	lsrs	r3, r3, #20
 8004d22:	051b      	lsls	r3, r3, #20
 8004d24:	b183      	cbz	r3, 8004d48 <_dtoa_r+0x900>
 8004d26:	9b04      	ldr	r3, [sp, #16]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	9304      	str	r3, [sp, #16]
 8004d2c:	9b05      	ldr	r3, [sp, #20]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	9305      	str	r3, [sp, #20]
 8004d32:	f04f 0801 	mov.w	r8, #1
 8004d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f47f af6a 	bne.w	8004c12 <_dtoa_r+0x7ca>
 8004d3e:	2001      	movs	r0, #1
 8004d40:	e76f      	b.n	8004c22 <_dtoa_r+0x7da>
 8004d42:	f04f 0800 	mov.w	r8, #0
 8004d46:	e7f6      	b.n	8004d36 <_dtoa_r+0x8ee>
 8004d48:	4698      	mov	r8, r3
 8004d4a:	e7f4      	b.n	8004d36 <_dtoa_r+0x8ee>
 8004d4c:	f43f af7d 	beq.w	8004c4a <_dtoa_r+0x802>
 8004d50:	4618      	mov	r0, r3
 8004d52:	301c      	adds	r0, #28
 8004d54:	e772      	b.n	8004c3c <_dtoa_r+0x7f4>
 8004d56:	9b03      	ldr	r3, [sp, #12]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	dc37      	bgt.n	8004dcc <_dtoa_r+0x984>
 8004d5c:	9b06      	ldr	r3, [sp, #24]
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	dd34      	ble.n	8004dcc <_dtoa_r+0x984>
 8004d62:	9b03      	ldr	r3, [sp, #12]
 8004d64:	9302      	str	r3, [sp, #8]
 8004d66:	9b02      	ldr	r3, [sp, #8]
 8004d68:	b96b      	cbnz	r3, 8004d86 <_dtoa_r+0x93e>
 8004d6a:	4631      	mov	r1, r6
 8004d6c:	2205      	movs	r2, #5
 8004d6e:	4620      	mov	r0, r4
 8004d70:	f000 fd48 	bl	8005804 <__multadd>
 8004d74:	4601      	mov	r1, r0
 8004d76:	4606      	mov	r6, r0
 8004d78:	ee18 0a10 	vmov	r0, s16
 8004d7c:	f000 ffac 	bl	8005cd8 <__mcmp>
 8004d80:	2800      	cmp	r0, #0
 8004d82:	f73f adbb 	bgt.w	80048fc <_dtoa_r+0x4b4>
 8004d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d88:	9d01      	ldr	r5, [sp, #4]
 8004d8a:	43db      	mvns	r3, r3
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	f04f 0800 	mov.w	r8, #0
 8004d92:	4631      	mov	r1, r6
 8004d94:	4620      	mov	r0, r4
 8004d96:	f000 fd13 	bl	80057c0 <_Bfree>
 8004d9a:	2f00      	cmp	r7, #0
 8004d9c:	f43f aea4 	beq.w	8004ae8 <_dtoa_r+0x6a0>
 8004da0:	f1b8 0f00 	cmp.w	r8, #0
 8004da4:	d005      	beq.n	8004db2 <_dtoa_r+0x96a>
 8004da6:	45b8      	cmp	r8, r7
 8004da8:	d003      	beq.n	8004db2 <_dtoa_r+0x96a>
 8004daa:	4641      	mov	r1, r8
 8004dac:	4620      	mov	r0, r4
 8004dae:	f000 fd07 	bl	80057c0 <_Bfree>
 8004db2:	4639      	mov	r1, r7
 8004db4:	4620      	mov	r0, r4
 8004db6:	f000 fd03 	bl	80057c0 <_Bfree>
 8004dba:	e695      	b.n	8004ae8 <_dtoa_r+0x6a0>
 8004dbc:	2600      	movs	r6, #0
 8004dbe:	4637      	mov	r7, r6
 8004dc0:	e7e1      	b.n	8004d86 <_dtoa_r+0x93e>
 8004dc2:	9700      	str	r7, [sp, #0]
 8004dc4:	4637      	mov	r7, r6
 8004dc6:	e599      	b.n	80048fc <_dtoa_r+0x4b4>
 8004dc8:	40240000 	.word	0x40240000
 8004dcc:	9b08      	ldr	r3, [sp, #32]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 80ca 	beq.w	8004f68 <_dtoa_r+0xb20>
 8004dd4:	9b03      	ldr	r3, [sp, #12]
 8004dd6:	9302      	str	r3, [sp, #8]
 8004dd8:	2d00      	cmp	r5, #0
 8004dda:	dd05      	ble.n	8004de8 <_dtoa_r+0x9a0>
 8004ddc:	4639      	mov	r1, r7
 8004dde:	462a      	mov	r2, r5
 8004de0:	4620      	mov	r0, r4
 8004de2:	f000 ff09 	bl	8005bf8 <__lshift>
 8004de6:	4607      	mov	r7, r0
 8004de8:	f1b8 0f00 	cmp.w	r8, #0
 8004dec:	d05b      	beq.n	8004ea6 <_dtoa_r+0xa5e>
 8004dee:	6879      	ldr	r1, [r7, #4]
 8004df0:	4620      	mov	r0, r4
 8004df2:	f000 fca5 	bl	8005740 <_Balloc>
 8004df6:	4605      	mov	r5, r0
 8004df8:	b928      	cbnz	r0, 8004e06 <_dtoa_r+0x9be>
 8004dfa:	4b87      	ldr	r3, [pc, #540]	; (8005018 <_dtoa_r+0xbd0>)
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004e02:	f7ff bb3b 	b.w	800447c <_dtoa_r+0x34>
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	3202      	adds	r2, #2
 8004e0a:	0092      	lsls	r2, r2, #2
 8004e0c:	f107 010c 	add.w	r1, r7, #12
 8004e10:	300c      	adds	r0, #12
 8004e12:	f7fd fd2b 	bl	800286c <memcpy>
 8004e16:	2201      	movs	r2, #1
 8004e18:	4629      	mov	r1, r5
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f000 feec 	bl	8005bf8 <__lshift>
 8004e20:	9b01      	ldr	r3, [sp, #4]
 8004e22:	f103 0901 	add.w	r9, r3, #1
 8004e26:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	9305      	str	r3, [sp, #20]
 8004e2e:	f00a 0301 	and.w	r3, sl, #1
 8004e32:	46b8      	mov	r8, r7
 8004e34:	9304      	str	r3, [sp, #16]
 8004e36:	4607      	mov	r7, r0
 8004e38:	4631      	mov	r1, r6
 8004e3a:	ee18 0a10 	vmov	r0, s16
 8004e3e:	f7ff fa77 	bl	8004330 <quorem>
 8004e42:	4641      	mov	r1, r8
 8004e44:	9002      	str	r0, [sp, #8]
 8004e46:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004e4a:	ee18 0a10 	vmov	r0, s16
 8004e4e:	f000 ff43 	bl	8005cd8 <__mcmp>
 8004e52:	463a      	mov	r2, r7
 8004e54:	9003      	str	r0, [sp, #12]
 8004e56:	4631      	mov	r1, r6
 8004e58:	4620      	mov	r0, r4
 8004e5a:	f000 ff59 	bl	8005d10 <__mdiff>
 8004e5e:	68c2      	ldr	r2, [r0, #12]
 8004e60:	f109 3bff 	add.w	fp, r9, #4294967295
 8004e64:	4605      	mov	r5, r0
 8004e66:	bb02      	cbnz	r2, 8004eaa <_dtoa_r+0xa62>
 8004e68:	4601      	mov	r1, r0
 8004e6a:	ee18 0a10 	vmov	r0, s16
 8004e6e:	f000 ff33 	bl	8005cd8 <__mcmp>
 8004e72:	4602      	mov	r2, r0
 8004e74:	4629      	mov	r1, r5
 8004e76:	4620      	mov	r0, r4
 8004e78:	9207      	str	r2, [sp, #28]
 8004e7a:	f000 fca1 	bl	80057c0 <_Bfree>
 8004e7e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004e82:	ea43 0102 	orr.w	r1, r3, r2
 8004e86:	9b04      	ldr	r3, [sp, #16]
 8004e88:	430b      	orrs	r3, r1
 8004e8a:	464d      	mov	r5, r9
 8004e8c:	d10f      	bne.n	8004eae <_dtoa_r+0xa66>
 8004e8e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004e92:	d02a      	beq.n	8004eea <_dtoa_r+0xaa2>
 8004e94:	9b03      	ldr	r3, [sp, #12]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	dd02      	ble.n	8004ea0 <_dtoa_r+0xa58>
 8004e9a:	9b02      	ldr	r3, [sp, #8]
 8004e9c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004ea0:	f88b a000 	strb.w	sl, [fp]
 8004ea4:	e775      	b.n	8004d92 <_dtoa_r+0x94a>
 8004ea6:	4638      	mov	r0, r7
 8004ea8:	e7ba      	b.n	8004e20 <_dtoa_r+0x9d8>
 8004eaa:	2201      	movs	r2, #1
 8004eac:	e7e2      	b.n	8004e74 <_dtoa_r+0xa2c>
 8004eae:	9b03      	ldr	r3, [sp, #12]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	db04      	blt.n	8004ebe <_dtoa_r+0xa76>
 8004eb4:	9906      	ldr	r1, [sp, #24]
 8004eb6:	430b      	orrs	r3, r1
 8004eb8:	9904      	ldr	r1, [sp, #16]
 8004eba:	430b      	orrs	r3, r1
 8004ebc:	d122      	bne.n	8004f04 <_dtoa_r+0xabc>
 8004ebe:	2a00      	cmp	r2, #0
 8004ec0:	ddee      	ble.n	8004ea0 <_dtoa_r+0xa58>
 8004ec2:	ee18 1a10 	vmov	r1, s16
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	4620      	mov	r0, r4
 8004eca:	f000 fe95 	bl	8005bf8 <__lshift>
 8004ece:	4631      	mov	r1, r6
 8004ed0:	ee08 0a10 	vmov	s16, r0
 8004ed4:	f000 ff00 	bl	8005cd8 <__mcmp>
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	dc03      	bgt.n	8004ee4 <_dtoa_r+0xa9c>
 8004edc:	d1e0      	bne.n	8004ea0 <_dtoa_r+0xa58>
 8004ede:	f01a 0f01 	tst.w	sl, #1
 8004ee2:	d0dd      	beq.n	8004ea0 <_dtoa_r+0xa58>
 8004ee4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004ee8:	d1d7      	bne.n	8004e9a <_dtoa_r+0xa52>
 8004eea:	2339      	movs	r3, #57	; 0x39
 8004eec:	f88b 3000 	strb.w	r3, [fp]
 8004ef0:	462b      	mov	r3, r5
 8004ef2:	461d      	mov	r5, r3
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004efa:	2a39      	cmp	r2, #57	; 0x39
 8004efc:	d071      	beq.n	8004fe2 <_dtoa_r+0xb9a>
 8004efe:	3201      	adds	r2, #1
 8004f00:	701a      	strb	r2, [r3, #0]
 8004f02:	e746      	b.n	8004d92 <_dtoa_r+0x94a>
 8004f04:	2a00      	cmp	r2, #0
 8004f06:	dd07      	ble.n	8004f18 <_dtoa_r+0xad0>
 8004f08:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004f0c:	d0ed      	beq.n	8004eea <_dtoa_r+0xaa2>
 8004f0e:	f10a 0301 	add.w	r3, sl, #1
 8004f12:	f88b 3000 	strb.w	r3, [fp]
 8004f16:	e73c      	b.n	8004d92 <_dtoa_r+0x94a>
 8004f18:	9b05      	ldr	r3, [sp, #20]
 8004f1a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8004f1e:	4599      	cmp	r9, r3
 8004f20:	d047      	beq.n	8004fb2 <_dtoa_r+0xb6a>
 8004f22:	ee18 1a10 	vmov	r1, s16
 8004f26:	2300      	movs	r3, #0
 8004f28:	220a      	movs	r2, #10
 8004f2a:	4620      	mov	r0, r4
 8004f2c:	f000 fc6a 	bl	8005804 <__multadd>
 8004f30:	45b8      	cmp	r8, r7
 8004f32:	ee08 0a10 	vmov	s16, r0
 8004f36:	f04f 0300 	mov.w	r3, #0
 8004f3a:	f04f 020a 	mov.w	r2, #10
 8004f3e:	4641      	mov	r1, r8
 8004f40:	4620      	mov	r0, r4
 8004f42:	d106      	bne.n	8004f52 <_dtoa_r+0xb0a>
 8004f44:	f000 fc5e 	bl	8005804 <__multadd>
 8004f48:	4680      	mov	r8, r0
 8004f4a:	4607      	mov	r7, r0
 8004f4c:	f109 0901 	add.w	r9, r9, #1
 8004f50:	e772      	b.n	8004e38 <_dtoa_r+0x9f0>
 8004f52:	f000 fc57 	bl	8005804 <__multadd>
 8004f56:	4639      	mov	r1, r7
 8004f58:	4680      	mov	r8, r0
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	220a      	movs	r2, #10
 8004f5e:	4620      	mov	r0, r4
 8004f60:	f000 fc50 	bl	8005804 <__multadd>
 8004f64:	4607      	mov	r7, r0
 8004f66:	e7f1      	b.n	8004f4c <_dtoa_r+0xb04>
 8004f68:	9b03      	ldr	r3, [sp, #12]
 8004f6a:	9302      	str	r3, [sp, #8]
 8004f6c:	9d01      	ldr	r5, [sp, #4]
 8004f6e:	ee18 0a10 	vmov	r0, s16
 8004f72:	4631      	mov	r1, r6
 8004f74:	f7ff f9dc 	bl	8004330 <quorem>
 8004f78:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004f7c:	9b01      	ldr	r3, [sp, #4]
 8004f7e:	f805 ab01 	strb.w	sl, [r5], #1
 8004f82:	1aea      	subs	r2, r5, r3
 8004f84:	9b02      	ldr	r3, [sp, #8]
 8004f86:	4293      	cmp	r3, r2
 8004f88:	dd09      	ble.n	8004f9e <_dtoa_r+0xb56>
 8004f8a:	ee18 1a10 	vmov	r1, s16
 8004f8e:	2300      	movs	r3, #0
 8004f90:	220a      	movs	r2, #10
 8004f92:	4620      	mov	r0, r4
 8004f94:	f000 fc36 	bl	8005804 <__multadd>
 8004f98:	ee08 0a10 	vmov	s16, r0
 8004f9c:	e7e7      	b.n	8004f6e <_dtoa_r+0xb26>
 8004f9e:	9b02      	ldr	r3, [sp, #8]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	bfc8      	it	gt
 8004fa4:	461d      	movgt	r5, r3
 8004fa6:	9b01      	ldr	r3, [sp, #4]
 8004fa8:	bfd8      	it	le
 8004faa:	2501      	movle	r5, #1
 8004fac:	441d      	add	r5, r3
 8004fae:	f04f 0800 	mov.w	r8, #0
 8004fb2:	ee18 1a10 	vmov	r1, s16
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	4620      	mov	r0, r4
 8004fba:	f000 fe1d 	bl	8005bf8 <__lshift>
 8004fbe:	4631      	mov	r1, r6
 8004fc0:	ee08 0a10 	vmov	s16, r0
 8004fc4:	f000 fe88 	bl	8005cd8 <__mcmp>
 8004fc8:	2800      	cmp	r0, #0
 8004fca:	dc91      	bgt.n	8004ef0 <_dtoa_r+0xaa8>
 8004fcc:	d102      	bne.n	8004fd4 <_dtoa_r+0xb8c>
 8004fce:	f01a 0f01 	tst.w	sl, #1
 8004fd2:	d18d      	bne.n	8004ef0 <_dtoa_r+0xaa8>
 8004fd4:	462b      	mov	r3, r5
 8004fd6:	461d      	mov	r5, r3
 8004fd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004fdc:	2a30      	cmp	r2, #48	; 0x30
 8004fde:	d0fa      	beq.n	8004fd6 <_dtoa_r+0xb8e>
 8004fe0:	e6d7      	b.n	8004d92 <_dtoa_r+0x94a>
 8004fe2:	9a01      	ldr	r2, [sp, #4]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d184      	bne.n	8004ef2 <_dtoa_r+0xaaa>
 8004fe8:	9b00      	ldr	r3, [sp, #0]
 8004fea:	3301      	adds	r3, #1
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	2331      	movs	r3, #49	; 0x31
 8004ff0:	7013      	strb	r3, [r2, #0]
 8004ff2:	e6ce      	b.n	8004d92 <_dtoa_r+0x94a>
 8004ff4:	4b09      	ldr	r3, [pc, #36]	; (800501c <_dtoa_r+0xbd4>)
 8004ff6:	f7ff ba95 	b.w	8004524 <_dtoa_r+0xdc>
 8004ffa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f47f aa6e 	bne.w	80044de <_dtoa_r+0x96>
 8005002:	4b07      	ldr	r3, [pc, #28]	; (8005020 <_dtoa_r+0xbd8>)
 8005004:	f7ff ba8e 	b.w	8004524 <_dtoa_r+0xdc>
 8005008:	9b02      	ldr	r3, [sp, #8]
 800500a:	2b00      	cmp	r3, #0
 800500c:	dcae      	bgt.n	8004f6c <_dtoa_r+0xb24>
 800500e:	9b06      	ldr	r3, [sp, #24]
 8005010:	2b02      	cmp	r3, #2
 8005012:	f73f aea8 	bgt.w	8004d66 <_dtoa_r+0x91e>
 8005016:	e7a9      	b.n	8004f6c <_dtoa_r+0xb24>
 8005018:	08008d28 	.word	0x08008d28
 800501c:	08008b28 	.word	0x08008b28
 8005020:	08008ca9 	.word	0x08008ca9

08005024 <rshift>:
 8005024:	6903      	ldr	r3, [r0, #16]
 8005026:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800502a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800502e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005032:	f100 0414 	add.w	r4, r0, #20
 8005036:	dd45      	ble.n	80050c4 <rshift+0xa0>
 8005038:	f011 011f 	ands.w	r1, r1, #31
 800503c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005040:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005044:	d10c      	bne.n	8005060 <rshift+0x3c>
 8005046:	f100 0710 	add.w	r7, r0, #16
 800504a:	4629      	mov	r1, r5
 800504c:	42b1      	cmp	r1, r6
 800504e:	d334      	bcc.n	80050ba <rshift+0x96>
 8005050:	1a9b      	subs	r3, r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	1eea      	subs	r2, r5, #3
 8005056:	4296      	cmp	r6, r2
 8005058:	bf38      	it	cc
 800505a:	2300      	movcc	r3, #0
 800505c:	4423      	add	r3, r4
 800505e:	e015      	b.n	800508c <rshift+0x68>
 8005060:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005064:	f1c1 0820 	rsb	r8, r1, #32
 8005068:	40cf      	lsrs	r7, r1
 800506a:	f105 0e04 	add.w	lr, r5, #4
 800506e:	46a1      	mov	r9, r4
 8005070:	4576      	cmp	r6, lr
 8005072:	46f4      	mov	ip, lr
 8005074:	d815      	bhi.n	80050a2 <rshift+0x7e>
 8005076:	1a9a      	subs	r2, r3, r2
 8005078:	0092      	lsls	r2, r2, #2
 800507a:	3a04      	subs	r2, #4
 800507c:	3501      	adds	r5, #1
 800507e:	42ae      	cmp	r6, r5
 8005080:	bf38      	it	cc
 8005082:	2200      	movcc	r2, #0
 8005084:	18a3      	adds	r3, r4, r2
 8005086:	50a7      	str	r7, [r4, r2]
 8005088:	b107      	cbz	r7, 800508c <rshift+0x68>
 800508a:	3304      	adds	r3, #4
 800508c:	1b1a      	subs	r2, r3, r4
 800508e:	42a3      	cmp	r3, r4
 8005090:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005094:	bf08      	it	eq
 8005096:	2300      	moveq	r3, #0
 8005098:	6102      	str	r2, [r0, #16]
 800509a:	bf08      	it	eq
 800509c:	6143      	streq	r3, [r0, #20]
 800509e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80050a2:	f8dc c000 	ldr.w	ip, [ip]
 80050a6:	fa0c fc08 	lsl.w	ip, ip, r8
 80050aa:	ea4c 0707 	orr.w	r7, ip, r7
 80050ae:	f849 7b04 	str.w	r7, [r9], #4
 80050b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80050b6:	40cf      	lsrs	r7, r1
 80050b8:	e7da      	b.n	8005070 <rshift+0x4c>
 80050ba:	f851 cb04 	ldr.w	ip, [r1], #4
 80050be:	f847 cf04 	str.w	ip, [r7, #4]!
 80050c2:	e7c3      	b.n	800504c <rshift+0x28>
 80050c4:	4623      	mov	r3, r4
 80050c6:	e7e1      	b.n	800508c <rshift+0x68>

080050c8 <__hexdig_fun>:
 80050c8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80050cc:	2b09      	cmp	r3, #9
 80050ce:	d802      	bhi.n	80050d6 <__hexdig_fun+0xe>
 80050d0:	3820      	subs	r0, #32
 80050d2:	b2c0      	uxtb	r0, r0
 80050d4:	4770      	bx	lr
 80050d6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80050da:	2b05      	cmp	r3, #5
 80050dc:	d801      	bhi.n	80050e2 <__hexdig_fun+0x1a>
 80050de:	3847      	subs	r0, #71	; 0x47
 80050e0:	e7f7      	b.n	80050d2 <__hexdig_fun+0xa>
 80050e2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80050e6:	2b05      	cmp	r3, #5
 80050e8:	d801      	bhi.n	80050ee <__hexdig_fun+0x26>
 80050ea:	3827      	subs	r0, #39	; 0x27
 80050ec:	e7f1      	b.n	80050d2 <__hexdig_fun+0xa>
 80050ee:	2000      	movs	r0, #0
 80050f0:	4770      	bx	lr
	...

080050f4 <__gethex>:
 80050f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f8:	ed2d 8b02 	vpush	{d8}
 80050fc:	b089      	sub	sp, #36	; 0x24
 80050fe:	ee08 0a10 	vmov	s16, r0
 8005102:	9304      	str	r3, [sp, #16]
 8005104:	4bb4      	ldr	r3, [pc, #720]	; (80053d8 <__gethex+0x2e4>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	9301      	str	r3, [sp, #4]
 800510a:	4618      	mov	r0, r3
 800510c:	468b      	mov	fp, r1
 800510e:	4690      	mov	r8, r2
 8005110:	f7fb f836 	bl	8000180 <strlen>
 8005114:	9b01      	ldr	r3, [sp, #4]
 8005116:	f8db 2000 	ldr.w	r2, [fp]
 800511a:	4403      	add	r3, r0
 800511c:	4682      	mov	sl, r0
 800511e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005122:	9305      	str	r3, [sp, #20]
 8005124:	1c93      	adds	r3, r2, #2
 8005126:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800512a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800512e:	32fe      	adds	r2, #254	; 0xfe
 8005130:	18d1      	adds	r1, r2, r3
 8005132:	461f      	mov	r7, r3
 8005134:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005138:	9100      	str	r1, [sp, #0]
 800513a:	2830      	cmp	r0, #48	; 0x30
 800513c:	d0f8      	beq.n	8005130 <__gethex+0x3c>
 800513e:	f7ff ffc3 	bl	80050c8 <__hexdig_fun>
 8005142:	4604      	mov	r4, r0
 8005144:	2800      	cmp	r0, #0
 8005146:	d13a      	bne.n	80051be <__gethex+0xca>
 8005148:	9901      	ldr	r1, [sp, #4]
 800514a:	4652      	mov	r2, sl
 800514c:	4638      	mov	r0, r7
 800514e:	f001 fa23 	bl	8006598 <strncmp>
 8005152:	4605      	mov	r5, r0
 8005154:	2800      	cmp	r0, #0
 8005156:	d168      	bne.n	800522a <__gethex+0x136>
 8005158:	f817 000a 	ldrb.w	r0, [r7, sl]
 800515c:	eb07 060a 	add.w	r6, r7, sl
 8005160:	f7ff ffb2 	bl	80050c8 <__hexdig_fun>
 8005164:	2800      	cmp	r0, #0
 8005166:	d062      	beq.n	800522e <__gethex+0x13a>
 8005168:	4633      	mov	r3, r6
 800516a:	7818      	ldrb	r0, [r3, #0]
 800516c:	2830      	cmp	r0, #48	; 0x30
 800516e:	461f      	mov	r7, r3
 8005170:	f103 0301 	add.w	r3, r3, #1
 8005174:	d0f9      	beq.n	800516a <__gethex+0x76>
 8005176:	f7ff ffa7 	bl	80050c8 <__hexdig_fun>
 800517a:	2301      	movs	r3, #1
 800517c:	fab0 f480 	clz	r4, r0
 8005180:	0964      	lsrs	r4, r4, #5
 8005182:	4635      	mov	r5, r6
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	463a      	mov	r2, r7
 8005188:	4616      	mov	r6, r2
 800518a:	3201      	adds	r2, #1
 800518c:	7830      	ldrb	r0, [r6, #0]
 800518e:	f7ff ff9b 	bl	80050c8 <__hexdig_fun>
 8005192:	2800      	cmp	r0, #0
 8005194:	d1f8      	bne.n	8005188 <__gethex+0x94>
 8005196:	9901      	ldr	r1, [sp, #4]
 8005198:	4652      	mov	r2, sl
 800519a:	4630      	mov	r0, r6
 800519c:	f001 f9fc 	bl	8006598 <strncmp>
 80051a0:	b980      	cbnz	r0, 80051c4 <__gethex+0xd0>
 80051a2:	b94d      	cbnz	r5, 80051b8 <__gethex+0xc4>
 80051a4:	eb06 050a 	add.w	r5, r6, sl
 80051a8:	462a      	mov	r2, r5
 80051aa:	4616      	mov	r6, r2
 80051ac:	3201      	adds	r2, #1
 80051ae:	7830      	ldrb	r0, [r6, #0]
 80051b0:	f7ff ff8a 	bl	80050c8 <__hexdig_fun>
 80051b4:	2800      	cmp	r0, #0
 80051b6:	d1f8      	bne.n	80051aa <__gethex+0xb6>
 80051b8:	1bad      	subs	r5, r5, r6
 80051ba:	00ad      	lsls	r5, r5, #2
 80051bc:	e004      	b.n	80051c8 <__gethex+0xd4>
 80051be:	2400      	movs	r4, #0
 80051c0:	4625      	mov	r5, r4
 80051c2:	e7e0      	b.n	8005186 <__gethex+0x92>
 80051c4:	2d00      	cmp	r5, #0
 80051c6:	d1f7      	bne.n	80051b8 <__gethex+0xc4>
 80051c8:	7833      	ldrb	r3, [r6, #0]
 80051ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80051ce:	2b50      	cmp	r3, #80	; 0x50
 80051d0:	d13b      	bne.n	800524a <__gethex+0x156>
 80051d2:	7873      	ldrb	r3, [r6, #1]
 80051d4:	2b2b      	cmp	r3, #43	; 0x2b
 80051d6:	d02c      	beq.n	8005232 <__gethex+0x13e>
 80051d8:	2b2d      	cmp	r3, #45	; 0x2d
 80051da:	d02e      	beq.n	800523a <__gethex+0x146>
 80051dc:	1c71      	adds	r1, r6, #1
 80051de:	f04f 0900 	mov.w	r9, #0
 80051e2:	7808      	ldrb	r0, [r1, #0]
 80051e4:	f7ff ff70 	bl	80050c8 <__hexdig_fun>
 80051e8:	1e43      	subs	r3, r0, #1
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b18      	cmp	r3, #24
 80051ee:	d82c      	bhi.n	800524a <__gethex+0x156>
 80051f0:	f1a0 0210 	sub.w	r2, r0, #16
 80051f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80051f8:	f7ff ff66 	bl	80050c8 <__hexdig_fun>
 80051fc:	1e43      	subs	r3, r0, #1
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b18      	cmp	r3, #24
 8005202:	d91d      	bls.n	8005240 <__gethex+0x14c>
 8005204:	f1b9 0f00 	cmp.w	r9, #0
 8005208:	d000      	beq.n	800520c <__gethex+0x118>
 800520a:	4252      	negs	r2, r2
 800520c:	4415      	add	r5, r2
 800520e:	f8cb 1000 	str.w	r1, [fp]
 8005212:	b1e4      	cbz	r4, 800524e <__gethex+0x15a>
 8005214:	9b00      	ldr	r3, [sp, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	bf14      	ite	ne
 800521a:	2700      	movne	r7, #0
 800521c:	2706      	moveq	r7, #6
 800521e:	4638      	mov	r0, r7
 8005220:	b009      	add	sp, #36	; 0x24
 8005222:	ecbd 8b02 	vpop	{d8}
 8005226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800522a:	463e      	mov	r6, r7
 800522c:	4625      	mov	r5, r4
 800522e:	2401      	movs	r4, #1
 8005230:	e7ca      	b.n	80051c8 <__gethex+0xd4>
 8005232:	f04f 0900 	mov.w	r9, #0
 8005236:	1cb1      	adds	r1, r6, #2
 8005238:	e7d3      	b.n	80051e2 <__gethex+0xee>
 800523a:	f04f 0901 	mov.w	r9, #1
 800523e:	e7fa      	b.n	8005236 <__gethex+0x142>
 8005240:	230a      	movs	r3, #10
 8005242:	fb03 0202 	mla	r2, r3, r2, r0
 8005246:	3a10      	subs	r2, #16
 8005248:	e7d4      	b.n	80051f4 <__gethex+0x100>
 800524a:	4631      	mov	r1, r6
 800524c:	e7df      	b.n	800520e <__gethex+0x11a>
 800524e:	1bf3      	subs	r3, r6, r7
 8005250:	3b01      	subs	r3, #1
 8005252:	4621      	mov	r1, r4
 8005254:	2b07      	cmp	r3, #7
 8005256:	dc0b      	bgt.n	8005270 <__gethex+0x17c>
 8005258:	ee18 0a10 	vmov	r0, s16
 800525c:	f000 fa70 	bl	8005740 <_Balloc>
 8005260:	4604      	mov	r4, r0
 8005262:	b940      	cbnz	r0, 8005276 <__gethex+0x182>
 8005264:	4b5d      	ldr	r3, [pc, #372]	; (80053dc <__gethex+0x2e8>)
 8005266:	4602      	mov	r2, r0
 8005268:	21de      	movs	r1, #222	; 0xde
 800526a:	485d      	ldr	r0, [pc, #372]	; (80053e0 <__gethex+0x2ec>)
 800526c:	f001 f9b6 	bl	80065dc <__assert_func>
 8005270:	3101      	adds	r1, #1
 8005272:	105b      	asrs	r3, r3, #1
 8005274:	e7ee      	b.n	8005254 <__gethex+0x160>
 8005276:	f100 0914 	add.w	r9, r0, #20
 800527a:	f04f 0b00 	mov.w	fp, #0
 800527e:	f1ca 0301 	rsb	r3, sl, #1
 8005282:	f8cd 9008 	str.w	r9, [sp, #8]
 8005286:	f8cd b000 	str.w	fp, [sp]
 800528a:	9306      	str	r3, [sp, #24]
 800528c:	42b7      	cmp	r7, r6
 800528e:	d340      	bcc.n	8005312 <__gethex+0x21e>
 8005290:	9802      	ldr	r0, [sp, #8]
 8005292:	9b00      	ldr	r3, [sp, #0]
 8005294:	f840 3b04 	str.w	r3, [r0], #4
 8005298:	eba0 0009 	sub.w	r0, r0, r9
 800529c:	1080      	asrs	r0, r0, #2
 800529e:	0146      	lsls	r6, r0, #5
 80052a0:	6120      	str	r0, [r4, #16]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f000 fb3e 	bl	8005924 <__hi0bits>
 80052a8:	1a30      	subs	r0, r6, r0
 80052aa:	f8d8 6000 	ldr.w	r6, [r8]
 80052ae:	42b0      	cmp	r0, r6
 80052b0:	dd63      	ble.n	800537a <__gethex+0x286>
 80052b2:	1b87      	subs	r7, r0, r6
 80052b4:	4639      	mov	r1, r7
 80052b6:	4620      	mov	r0, r4
 80052b8:	f000 fee2 	bl	8006080 <__any_on>
 80052bc:	4682      	mov	sl, r0
 80052be:	b1a8      	cbz	r0, 80052ec <__gethex+0x1f8>
 80052c0:	1e7b      	subs	r3, r7, #1
 80052c2:	1159      	asrs	r1, r3, #5
 80052c4:	f003 021f 	and.w	r2, r3, #31
 80052c8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80052cc:	f04f 0a01 	mov.w	sl, #1
 80052d0:	fa0a f202 	lsl.w	r2, sl, r2
 80052d4:	420a      	tst	r2, r1
 80052d6:	d009      	beq.n	80052ec <__gethex+0x1f8>
 80052d8:	4553      	cmp	r3, sl
 80052da:	dd05      	ble.n	80052e8 <__gethex+0x1f4>
 80052dc:	1eb9      	subs	r1, r7, #2
 80052de:	4620      	mov	r0, r4
 80052e0:	f000 fece 	bl	8006080 <__any_on>
 80052e4:	2800      	cmp	r0, #0
 80052e6:	d145      	bne.n	8005374 <__gethex+0x280>
 80052e8:	f04f 0a02 	mov.w	sl, #2
 80052ec:	4639      	mov	r1, r7
 80052ee:	4620      	mov	r0, r4
 80052f0:	f7ff fe98 	bl	8005024 <rshift>
 80052f4:	443d      	add	r5, r7
 80052f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80052fa:	42ab      	cmp	r3, r5
 80052fc:	da4c      	bge.n	8005398 <__gethex+0x2a4>
 80052fe:	ee18 0a10 	vmov	r0, s16
 8005302:	4621      	mov	r1, r4
 8005304:	f000 fa5c 	bl	80057c0 <_Bfree>
 8005308:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800530a:	2300      	movs	r3, #0
 800530c:	6013      	str	r3, [r2, #0]
 800530e:	27a3      	movs	r7, #163	; 0xa3
 8005310:	e785      	b.n	800521e <__gethex+0x12a>
 8005312:	1e73      	subs	r3, r6, #1
 8005314:	9a05      	ldr	r2, [sp, #20]
 8005316:	9303      	str	r3, [sp, #12]
 8005318:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800531c:	4293      	cmp	r3, r2
 800531e:	d019      	beq.n	8005354 <__gethex+0x260>
 8005320:	f1bb 0f20 	cmp.w	fp, #32
 8005324:	d107      	bne.n	8005336 <__gethex+0x242>
 8005326:	9b02      	ldr	r3, [sp, #8]
 8005328:	9a00      	ldr	r2, [sp, #0]
 800532a:	f843 2b04 	str.w	r2, [r3], #4
 800532e:	9302      	str	r3, [sp, #8]
 8005330:	2300      	movs	r3, #0
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	469b      	mov	fp, r3
 8005336:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800533a:	f7ff fec5 	bl	80050c8 <__hexdig_fun>
 800533e:	9b00      	ldr	r3, [sp, #0]
 8005340:	f000 000f 	and.w	r0, r0, #15
 8005344:	fa00 f00b 	lsl.w	r0, r0, fp
 8005348:	4303      	orrs	r3, r0
 800534a:	9300      	str	r3, [sp, #0]
 800534c:	f10b 0b04 	add.w	fp, fp, #4
 8005350:	9b03      	ldr	r3, [sp, #12]
 8005352:	e00d      	b.n	8005370 <__gethex+0x27c>
 8005354:	9b03      	ldr	r3, [sp, #12]
 8005356:	9a06      	ldr	r2, [sp, #24]
 8005358:	4413      	add	r3, r2
 800535a:	42bb      	cmp	r3, r7
 800535c:	d3e0      	bcc.n	8005320 <__gethex+0x22c>
 800535e:	4618      	mov	r0, r3
 8005360:	9901      	ldr	r1, [sp, #4]
 8005362:	9307      	str	r3, [sp, #28]
 8005364:	4652      	mov	r2, sl
 8005366:	f001 f917 	bl	8006598 <strncmp>
 800536a:	9b07      	ldr	r3, [sp, #28]
 800536c:	2800      	cmp	r0, #0
 800536e:	d1d7      	bne.n	8005320 <__gethex+0x22c>
 8005370:	461e      	mov	r6, r3
 8005372:	e78b      	b.n	800528c <__gethex+0x198>
 8005374:	f04f 0a03 	mov.w	sl, #3
 8005378:	e7b8      	b.n	80052ec <__gethex+0x1f8>
 800537a:	da0a      	bge.n	8005392 <__gethex+0x29e>
 800537c:	1a37      	subs	r7, r6, r0
 800537e:	4621      	mov	r1, r4
 8005380:	ee18 0a10 	vmov	r0, s16
 8005384:	463a      	mov	r2, r7
 8005386:	f000 fc37 	bl	8005bf8 <__lshift>
 800538a:	1bed      	subs	r5, r5, r7
 800538c:	4604      	mov	r4, r0
 800538e:	f100 0914 	add.w	r9, r0, #20
 8005392:	f04f 0a00 	mov.w	sl, #0
 8005396:	e7ae      	b.n	80052f6 <__gethex+0x202>
 8005398:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800539c:	42a8      	cmp	r0, r5
 800539e:	dd72      	ble.n	8005486 <__gethex+0x392>
 80053a0:	1b45      	subs	r5, r0, r5
 80053a2:	42ae      	cmp	r6, r5
 80053a4:	dc36      	bgt.n	8005414 <__gethex+0x320>
 80053a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d02a      	beq.n	8005404 <__gethex+0x310>
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	d02c      	beq.n	800540c <__gethex+0x318>
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d11c      	bne.n	80053f0 <__gethex+0x2fc>
 80053b6:	42ae      	cmp	r6, r5
 80053b8:	d11a      	bne.n	80053f0 <__gethex+0x2fc>
 80053ba:	2e01      	cmp	r6, #1
 80053bc:	d112      	bne.n	80053e4 <__gethex+0x2f0>
 80053be:	9a04      	ldr	r2, [sp, #16]
 80053c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80053c4:	6013      	str	r3, [r2, #0]
 80053c6:	2301      	movs	r3, #1
 80053c8:	6123      	str	r3, [r4, #16]
 80053ca:	f8c9 3000 	str.w	r3, [r9]
 80053ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80053d0:	2762      	movs	r7, #98	; 0x62
 80053d2:	601c      	str	r4, [r3, #0]
 80053d4:	e723      	b.n	800521e <__gethex+0x12a>
 80053d6:	bf00      	nop
 80053d8:	08008da0 	.word	0x08008da0
 80053dc:	08008d28 	.word	0x08008d28
 80053e0:	08008d39 	.word	0x08008d39
 80053e4:	1e71      	subs	r1, r6, #1
 80053e6:	4620      	mov	r0, r4
 80053e8:	f000 fe4a 	bl	8006080 <__any_on>
 80053ec:	2800      	cmp	r0, #0
 80053ee:	d1e6      	bne.n	80053be <__gethex+0x2ca>
 80053f0:	ee18 0a10 	vmov	r0, s16
 80053f4:	4621      	mov	r1, r4
 80053f6:	f000 f9e3 	bl	80057c0 <_Bfree>
 80053fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80053fc:	2300      	movs	r3, #0
 80053fe:	6013      	str	r3, [r2, #0]
 8005400:	2750      	movs	r7, #80	; 0x50
 8005402:	e70c      	b.n	800521e <__gethex+0x12a>
 8005404:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1f2      	bne.n	80053f0 <__gethex+0x2fc>
 800540a:	e7d8      	b.n	80053be <__gethex+0x2ca>
 800540c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1d5      	bne.n	80053be <__gethex+0x2ca>
 8005412:	e7ed      	b.n	80053f0 <__gethex+0x2fc>
 8005414:	1e6f      	subs	r7, r5, #1
 8005416:	f1ba 0f00 	cmp.w	sl, #0
 800541a:	d131      	bne.n	8005480 <__gethex+0x38c>
 800541c:	b127      	cbz	r7, 8005428 <__gethex+0x334>
 800541e:	4639      	mov	r1, r7
 8005420:	4620      	mov	r0, r4
 8005422:	f000 fe2d 	bl	8006080 <__any_on>
 8005426:	4682      	mov	sl, r0
 8005428:	117b      	asrs	r3, r7, #5
 800542a:	2101      	movs	r1, #1
 800542c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005430:	f007 071f 	and.w	r7, r7, #31
 8005434:	fa01 f707 	lsl.w	r7, r1, r7
 8005438:	421f      	tst	r7, r3
 800543a:	4629      	mov	r1, r5
 800543c:	4620      	mov	r0, r4
 800543e:	bf18      	it	ne
 8005440:	f04a 0a02 	orrne.w	sl, sl, #2
 8005444:	1b76      	subs	r6, r6, r5
 8005446:	f7ff fded 	bl	8005024 <rshift>
 800544a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800544e:	2702      	movs	r7, #2
 8005450:	f1ba 0f00 	cmp.w	sl, #0
 8005454:	d048      	beq.n	80054e8 <__gethex+0x3f4>
 8005456:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800545a:	2b02      	cmp	r3, #2
 800545c:	d015      	beq.n	800548a <__gethex+0x396>
 800545e:	2b03      	cmp	r3, #3
 8005460:	d017      	beq.n	8005492 <__gethex+0x39e>
 8005462:	2b01      	cmp	r3, #1
 8005464:	d109      	bne.n	800547a <__gethex+0x386>
 8005466:	f01a 0f02 	tst.w	sl, #2
 800546a:	d006      	beq.n	800547a <__gethex+0x386>
 800546c:	f8d9 0000 	ldr.w	r0, [r9]
 8005470:	ea4a 0a00 	orr.w	sl, sl, r0
 8005474:	f01a 0f01 	tst.w	sl, #1
 8005478:	d10e      	bne.n	8005498 <__gethex+0x3a4>
 800547a:	f047 0710 	orr.w	r7, r7, #16
 800547e:	e033      	b.n	80054e8 <__gethex+0x3f4>
 8005480:	f04f 0a01 	mov.w	sl, #1
 8005484:	e7d0      	b.n	8005428 <__gethex+0x334>
 8005486:	2701      	movs	r7, #1
 8005488:	e7e2      	b.n	8005450 <__gethex+0x35c>
 800548a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800548c:	f1c3 0301 	rsb	r3, r3, #1
 8005490:	9315      	str	r3, [sp, #84]	; 0x54
 8005492:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0f0      	beq.n	800547a <__gethex+0x386>
 8005498:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800549c:	f104 0314 	add.w	r3, r4, #20
 80054a0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80054a4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80054a8:	f04f 0c00 	mov.w	ip, #0
 80054ac:	4618      	mov	r0, r3
 80054ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80054b2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80054b6:	d01c      	beq.n	80054f2 <__gethex+0x3fe>
 80054b8:	3201      	adds	r2, #1
 80054ba:	6002      	str	r2, [r0, #0]
 80054bc:	2f02      	cmp	r7, #2
 80054be:	f104 0314 	add.w	r3, r4, #20
 80054c2:	d13f      	bne.n	8005544 <__gethex+0x450>
 80054c4:	f8d8 2000 	ldr.w	r2, [r8]
 80054c8:	3a01      	subs	r2, #1
 80054ca:	42b2      	cmp	r2, r6
 80054cc:	d10a      	bne.n	80054e4 <__gethex+0x3f0>
 80054ce:	1171      	asrs	r1, r6, #5
 80054d0:	2201      	movs	r2, #1
 80054d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80054d6:	f006 061f 	and.w	r6, r6, #31
 80054da:	fa02 f606 	lsl.w	r6, r2, r6
 80054de:	421e      	tst	r6, r3
 80054e0:	bf18      	it	ne
 80054e2:	4617      	movne	r7, r2
 80054e4:	f047 0720 	orr.w	r7, r7, #32
 80054e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80054ea:	601c      	str	r4, [r3, #0]
 80054ec:	9b04      	ldr	r3, [sp, #16]
 80054ee:	601d      	str	r5, [r3, #0]
 80054f0:	e695      	b.n	800521e <__gethex+0x12a>
 80054f2:	4299      	cmp	r1, r3
 80054f4:	f843 cc04 	str.w	ip, [r3, #-4]
 80054f8:	d8d8      	bhi.n	80054ac <__gethex+0x3b8>
 80054fa:	68a3      	ldr	r3, [r4, #8]
 80054fc:	459b      	cmp	fp, r3
 80054fe:	db19      	blt.n	8005534 <__gethex+0x440>
 8005500:	6861      	ldr	r1, [r4, #4]
 8005502:	ee18 0a10 	vmov	r0, s16
 8005506:	3101      	adds	r1, #1
 8005508:	f000 f91a 	bl	8005740 <_Balloc>
 800550c:	4681      	mov	r9, r0
 800550e:	b918      	cbnz	r0, 8005518 <__gethex+0x424>
 8005510:	4b1a      	ldr	r3, [pc, #104]	; (800557c <__gethex+0x488>)
 8005512:	4602      	mov	r2, r0
 8005514:	2184      	movs	r1, #132	; 0x84
 8005516:	e6a8      	b.n	800526a <__gethex+0x176>
 8005518:	6922      	ldr	r2, [r4, #16]
 800551a:	3202      	adds	r2, #2
 800551c:	f104 010c 	add.w	r1, r4, #12
 8005520:	0092      	lsls	r2, r2, #2
 8005522:	300c      	adds	r0, #12
 8005524:	f7fd f9a2 	bl	800286c <memcpy>
 8005528:	4621      	mov	r1, r4
 800552a:	ee18 0a10 	vmov	r0, s16
 800552e:	f000 f947 	bl	80057c0 <_Bfree>
 8005532:	464c      	mov	r4, r9
 8005534:	6923      	ldr	r3, [r4, #16]
 8005536:	1c5a      	adds	r2, r3, #1
 8005538:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800553c:	6122      	str	r2, [r4, #16]
 800553e:	2201      	movs	r2, #1
 8005540:	615a      	str	r2, [r3, #20]
 8005542:	e7bb      	b.n	80054bc <__gethex+0x3c8>
 8005544:	6922      	ldr	r2, [r4, #16]
 8005546:	455a      	cmp	r2, fp
 8005548:	dd0b      	ble.n	8005562 <__gethex+0x46e>
 800554a:	2101      	movs	r1, #1
 800554c:	4620      	mov	r0, r4
 800554e:	f7ff fd69 	bl	8005024 <rshift>
 8005552:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005556:	3501      	adds	r5, #1
 8005558:	42ab      	cmp	r3, r5
 800555a:	f6ff aed0 	blt.w	80052fe <__gethex+0x20a>
 800555e:	2701      	movs	r7, #1
 8005560:	e7c0      	b.n	80054e4 <__gethex+0x3f0>
 8005562:	f016 061f 	ands.w	r6, r6, #31
 8005566:	d0fa      	beq.n	800555e <__gethex+0x46a>
 8005568:	4453      	add	r3, sl
 800556a:	f1c6 0620 	rsb	r6, r6, #32
 800556e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005572:	f000 f9d7 	bl	8005924 <__hi0bits>
 8005576:	42b0      	cmp	r0, r6
 8005578:	dbe7      	blt.n	800554a <__gethex+0x456>
 800557a:	e7f0      	b.n	800555e <__gethex+0x46a>
 800557c:	08008d28 	.word	0x08008d28

08005580 <L_shift>:
 8005580:	f1c2 0208 	rsb	r2, r2, #8
 8005584:	0092      	lsls	r2, r2, #2
 8005586:	b570      	push	{r4, r5, r6, lr}
 8005588:	f1c2 0620 	rsb	r6, r2, #32
 800558c:	6843      	ldr	r3, [r0, #4]
 800558e:	6804      	ldr	r4, [r0, #0]
 8005590:	fa03 f506 	lsl.w	r5, r3, r6
 8005594:	432c      	orrs	r4, r5
 8005596:	40d3      	lsrs	r3, r2
 8005598:	6004      	str	r4, [r0, #0]
 800559a:	f840 3f04 	str.w	r3, [r0, #4]!
 800559e:	4288      	cmp	r0, r1
 80055a0:	d3f4      	bcc.n	800558c <L_shift+0xc>
 80055a2:	bd70      	pop	{r4, r5, r6, pc}

080055a4 <__match>:
 80055a4:	b530      	push	{r4, r5, lr}
 80055a6:	6803      	ldr	r3, [r0, #0]
 80055a8:	3301      	adds	r3, #1
 80055aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055ae:	b914      	cbnz	r4, 80055b6 <__match+0x12>
 80055b0:	6003      	str	r3, [r0, #0]
 80055b2:	2001      	movs	r0, #1
 80055b4:	bd30      	pop	{r4, r5, pc}
 80055b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80055be:	2d19      	cmp	r5, #25
 80055c0:	bf98      	it	ls
 80055c2:	3220      	addls	r2, #32
 80055c4:	42a2      	cmp	r2, r4
 80055c6:	d0f0      	beq.n	80055aa <__match+0x6>
 80055c8:	2000      	movs	r0, #0
 80055ca:	e7f3      	b.n	80055b4 <__match+0x10>

080055cc <__hexnan>:
 80055cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d0:	680b      	ldr	r3, [r1, #0]
 80055d2:	115e      	asrs	r6, r3, #5
 80055d4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80055d8:	f013 031f 	ands.w	r3, r3, #31
 80055dc:	b087      	sub	sp, #28
 80055de:	bf18      	it	ne
 80055e0:	3604      	addne	r6, #4
 80055e2:	2500      	movs	r5, #0
 80055e4:	1f37      	subs	r7, r6, #4
 80055e6:	4690      	mov	r8, r2
 80055e8:	6802      	ldr	r2, [r0, #0]
 80055ea:	9301      	str	r3, [sp, #4]
 80055ec:	4682      	mov	sl, r0
 80055ee:	f846 5c04 	str.w	r5, [r6, #-4]
 80055f2:	46b9      	mov	r9, r7
 80055f4:	463c      	mov	r4, r7
 80055f6:	9502      	str	r5, [sp, #8]
 80055f8:	46ab      	mov	fp, r5
 80055fa:	7851      	ldrb	r1, [r2, #1]
 80055fc:	1c53      	adds	r3, r2, #1
 80055fe:	9303      	str	r3, [sp, #12]
 8005600:	b341      	cbz	r1, 8005654 <__hexnan+0x88>
 8005602:	4608      	mov	r0, r1
 8005604:	9205      	str	r2, [sp, #20]
 8005606:	9104      	str	r1, [sp, #16]
 8005608:	f7ff fd5e 	bl	80050c8 <__hexdig_fun>
 800560c:	2800      	cmp	r0, #0
 800560e:	d14f      	bne.n	80056b0 <__hexnan+0xe4>
 8005610:	9904      	ldr	r1, [sp, #16]
 8005612:	9a05      	ldr	r2, [sp, #20]
 8005614:	2920      	cmp	r1, #32
 8005616:	d818      	bhi.n	800564a <__hexnan+0x7e>
 8005618:	9b02      	ldr	r3, [sp, #8]
 800561a:	459b      	cmp	fp, r3
 800561c:	dd13      	ble.n	8005646 <__hexnan+0x7a>
 800561e:	454c      	cmp	r4, r9
 8005620:	d206      	bcs.n	8005630 <__hexnan+0x64>
 8005622:	2d07      	cmp	r5, #7
 8005624:	dc04      	bgt.n	8005630 <__hexnan+0x64>
 8005626:	462a      	mov	r2, r5
 8005628:	4649      	mov	r1, r9
 800562a:	4620      	mov	r0, r4
 800562c:	f7ff ffa8 	bl	8005580 <L_shift>
 8005630:	4544      	cmp	r4, r8
 8005632:	d950      	bls.n	80056d6 <__hexnan+0x10a>
 8005634:	2300      	movs	r3, #0
 8005636:	f1a4 0904 	sub.w	r9, r4, #4
 800563a:	f844 3c04 	str.w	r3, [r4, #-4]
 800563e:	f8cd b008 	str.w	fp, [sp, #8]
 8005642:	464c      	mov	r4, r9
 8005644:	461d      	mov	r5, r3
 8005646:	9a03      	ldr	r2, [sp, #12]
 8005648:	e7d7      	b.n	80055fa <__hexnan+0x2e>
 800564a:	2929      	cmp	r1, #41	; 0x29
 800564c:	d156      	bne.n	80056fc <__hexnan+0x130>
 800564e:	3202      	adds	r2, #2
 8005650:	f8ca 2000 	str.w	r2, [sl]
 8005654:	f1bb 0f00 	cmp.w	fp, #0
 8005658:	d050      	beq.n	80056fc <__hexnan+0x130>
 800565a:	454c      	cmp	r4, r9
 800565c:	d206      	bcs.n	800566c <__hexnan+0xa0>
 800565e:	2d07      	cmp	r5, #7
 8005660:	dc04      	bgt.n	800566c <__hexnan+0xa0>
 8005662:	462a      	mov	r2, r5
 8005664:	4649      	mov	r1, r9
 8005666:	4620      	mov	r0, r4
 8005668:	f7ff ff8a 	bl	8005580 <L_shift>
 800566c:	4544      	cmp	r4, r8
 800566e:	d934      	bls.n	80056da <__hexnan+0x10e>
 8005670:	f1a8 0204 	sub.w	r2, r8, #4
 8005674:	4623      	mov	r3, r4
 8005676:	f853 1b04 	ldr.w	r1, [r3], #4
 800567a:	f842 1f04 	str.w	r1, [r2, #4]!
 800567e:	429f      	cmp	r7, r3
 8005680:	d2f9      	bcs.n	8005676 <__hexnan+0xaa>
 8005682:	1b3b      	subs	r3, r7, r4
 8005684:	f023 0303 	bic.w	r3, r3, #3
 8005688:	3304      	adds	r3, #4
 800568a:	3401      	adds	r4, #1
 800568c:	3e03      	subs	r6, #3
 800568e:	42b4      	cmp	r4, r6
 8005690:	bf88      	it	hi
 8005692:	2304      	movhi	r3, #4
 8005694:	4443      	add	r3, r8
 8005696:	2200      	movs	r2, #0
 8005698:	f843 2b04 	str.w	r2, [r3], #4
 800569c:	429f      	cmp	r7, r3
 800569e:	d2fb      	bcs.n	8005698 <__hexnan+0xcc>
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	b91b      	cbnz	r3, 80056ac <__hexnan+0xe0>
 80056a4:	4547      	cmp	r7, r8
 80056a6:	d127      	bne.n	80056f8 <__hexnan+0x12c>
 80056a8:	2301      	movs	r3, #1
 80056aa:	603b      	str	r3, [r7, #0]
 80056ac:	2005      	movs	r0, #5
 80056ae:	e026      	b.n	80056fe <__hexnan+0x132>
 80056b0:	3501      	adds	r5, #1
 80056b2:	2d08      	cmp	r5, #8
 80056b4:	f10b 0b01 	add.w	fp, fp, #1
 80056b8:	dd06      	ble.n	80056c8 <__hexnan+0xfc>
 80056ba:	4544      	cmp	r4, r8
 80056bc:	d9c3      	bls.n	8005646 <__hexnan+0x7a>
 80056be:	2300      	movs	r3, #0
 80056c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80056c4:	2501      	movs	r5, #1
 80056c6:	3c04      	subs	r4, #4
 80056c8:	6822      	ldr	r2, [r4, #0]
 80056ca:	f000 000f 	and.w	r0, r0, #15
 80056ce:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80056d2:	6022      	str	r2, [r4, #0]
 80056d4:	e7b7      	b.n	8005646 <__hexnan+0x7a>
 80056d6:	2508      	movs	r5, #8
 80056d8:	e7b5      	b.n	8005646 <__hexnan+0x7a>
 80056da:	9b01      	ldr	r3, [sp, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0df      	beq.n	80056a0 <__hexnan+0xd4>
 80056e0:	f04f 32ff 	mov.w	r2, #4294967295
 80056e4:	f1c3 0320 	rsb	r3, r3, #32
 80056e8:	fa22 f303 	lsr.w	r3, r2, r3
 80056ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80056f0:	401a      	ands	r2, r3
 80056f2:	f846 2c04 	str.w	r2, [r6, #-4]
 80056f6:	e7d3      	b.n	80056a0 <__hexnan+0xd4>
 80056f8:	3f04      	subs	r7, #4
 80056fa:	e7d1      	b.n	80056a0 <__hexnan+0xd4>
 80056fc:	2004      	movs	r0, #4
 80056fe:	b007      	add	sp, #28
 8005700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005704 <_localeconv_r>:
 8005704:	4800      	ldr	r0, [pc, #0]	; (8005708 <_localeconv_r+0x4>)
 8005706:	4770      	bx	lr
 8005708:	20000168 	.word	0x20000168

0800570c <malloc>:
 800570c:	4b02      	ldr	r3, [pc, #8]	; (8005718 <malloc+0xc>)
 800570e:	4601      	mov	r1, r0
 8005710:	6818      	ldr	r0, [r3, #0]
 8005712:	f000 bd59 	b.w	80061c8 <_malloc_r>
 8005716:	bf00      	nop
 8005718:	20000010 	.word	0x20000010

0800571c <__ascii_mbtowc>:
 800571c:	b082      	sub	sp, #8
 800571e:	b901      	cbnz	r1, 8005722 <__ascii_mbtowc+0x6>
 8005720:	a901      	add	r1, sp, #4
 8005722:	b142      	cbz	r2, 8005736 <__ascii_mbtowc+0x1a>
 8005724:	b14b      	cbz	r3, 800573a <__ascii_mbtowc+0x1e>
 8005726:	7813      	ldrb	r3, [r2, #0]
 8005728:	600b      	str	r3, [r1, #0]
 800572a:	7812      	ldrb	r2, [r2, #0]
 800572c:	1e10      	subs	r0, r2, #0
 800572e:	bf18      	it	ne
 8005730:	2001      	movne	r0, #1
 8005732:	b002      	add	sp, #8
 8005734:	4770      	bx	lr
 8005736:	4610      	mov	r0, r2
 8005738:	e7fb      	b.n	8005732 <__ascii_mbtowc+0x16>
 800573a:	f06f 0001 	mvn.w	r0, #1
 800573e:	e7f8      	b.n	8005732 <__ascii_mbtowc+0x16>

08005740 <_Balloc>:
 8005740:	b570      	push	{r4, r5, r6, lr}
 8005742:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005744:	4604      	mov	r4, r0
 8005746:	460d      	mov	r5, r1
 8005748:	b976      	cbnz	r6, 8005768 <_Balloc+0x28>
 800574a:	2010      	movs	r0, #16
 800574c:	f7ff ffde 	bl	800570c <malloc>
 8005750:	4602      	mov	r2, r0
 8005752:	6260      	str	r0, [r4, #36]	; 0x24
 8005754:	b920      	cbnz	r0, 8005760 <_Balloc+0x20>
 8005756:	4b18      	ldr	r3, [pc, #96]	; (80057b8 <_Balloc+0x78>)
 8005758:	4818      	ldr	r0, [pc, #96]	; (80057bc <_Balloc+0x7c>)
 800575a:	2166      	movs	r1, #102	; 0x66
 800575c:	f000 ff3e 	bl	80065dc <__assert_func>
 8005760:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005764:	6006      	str	r6, [r0, #0]
 8005766:	60c6      	str	r6, [r0, #12]
 8005768:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800576a:	68f3      	ldr	r3, [r6, #12]
 800576c:	b183      	cbz	r3, 8005790 <_Balloc+0x50>
 800576e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005776:	b9b8      	cbnz	r0, 80057a8 <_Balloc+0x68>
 8005778:	2101      	movs	r1, #1
 800577a:	fa01 f605 	lsl.w	r6, r1, r5
 800577e:	1d72      	adds	r2, r6, #5
 8005780:	0092      	lsls	r2, r2, #2
 8005782:	4620      	mov	r0, r4
 8005784:	f000 fc9d 	bl	80060c2 <_calloc_r>
 8005788:	b160      	cbz	r0, 80057a4 <_Balloc+0x64>
 800578a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800578e:	e00e      	b.n	80057ae <_Balloc+0x6e>
 8005790:	2221      	movs	r2, #33	; 0x21
 8005792:	2104      	movs	r1, #4
 8005794:	4620      	mov	r0, r4
 8005796:	f000 fc94 	bl	80060c2 <_calloc_r>
 800579a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800579c:	60f0      	str	r0, [r6, #12]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1e4      	bne.n	800576e <_Balloc+0x2e>
 80057a4:	2000      	movs	r0, #0
 80057a6:	bd70      	pop	{r4, r5, r6, pc}
 80057a8:	6802      	ldr	r2, [r0, #0]
 80057aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80057ae:	2300      	movs	r3, #0
 80057b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80057b4:	e7f7      	b.n	80057a6 <_Balloc+0x66>
 80057b6:	bf00      	nop
 80057b8:	08008cb6 	.word	0x08008cb6
 80057bc:	08008db4 	.word	0x08008db4

080057c0 <_Bfree>:
 80057c0:	b570      	push	{r4, r5, r6, lr}
 80057c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80057c4:	4605      	mov	r5, r0
 80057c6:	460c      	mov	r4, r1
 80057c8:	b976      	cbnz	r6, 80057e8 <_Bfree+0x28>
 80057ca:	2010      	movs	r0, #16
 80057cc:	f7ff ff9e 	bl	800570c <malloc>
 80057d0:	4602      	mov	r2, r0
 80057d2:	6268      	str	r0, [r5, #36]	; 0x24
 80057d4:	b920      	cbnz	r0, 80057e0 <_Bfree+0x20>
 80057d6:	4b09      	ldr	r3, [pc, #36]	; (80057fc <_Bfree+0x3c>)
 80057d8:	4809      	ldr	r0, [pc, #36]	; (8005800 <_Bfree+0x40>)
 80057da:	218a      	movs	r1, #138	; 0x8a
 80057dc:	f000 fefe 	bl	80065dc <__assert_func>
 80057e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80057e4:	6006      	str	r6, [r0, #0]
 80057e6:	60c6      	str	r6, [r0, #12]
 80057e8:	b13c      	cbz	r4, 80057fa <_Bfree+0x3a>
 80057ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80057ec:	6862      	ldr	r2, [r4, #4]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80057f4:	6021      	str	r1, [r4, #0]
 80057f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80057fa:	bd70      	pop	{r4, r5, r6, pc}
 80057fc:	08008cb6 	.word	0x08008cb6
 8005800:	08008db4 	.word	0x08008db4

08005804 <__multadd>:
 8005804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005808:	690d      	ldr	r5, [r1, #16]
 800580a:	4607      	mov	r7, r0
 800580c:	460c      	mov	r4, r1
 800580e:	461e      	mov	r6, r3
 8005810:	f101 0c14 	add.w	ip, r1, #20
 8005814:	2000      	movs	r0, #0
 8005816:	f8dc 3000 	ldr.w	r3, [ip]
 800581a:	b299      	uxth	r1, r3
 800581c:	fb02 6101 	mla	r1, r2, r1, r6
 8005820:	0c1e      	lsrs	r6, r3, #16
 8005822:	0c0b      	lsrs	r3, r1, #16
 8005824:	fb02 3306 	mla	r3, r2, r6, r3
 8005828:	b289      	uxth	r1, r1
 800582a:	3001      	adds	r0, #1
 800582c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005830:	4285      	cmp	r5, r0
 8005832:	f84c 1b04 	str.w	r1, [ip], #4
 8005836:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800583a:	dcec      	bgt.n	8005816 <__multadd+0x12>
 800583c:	b30e      	cbz	r6, 8005882 <__multadd+0x7e>
 800583e:	68a3      	ldr	r3, [r4, #8]
 8005840:	42ab      	cmp	r3, r5
 8005842:	dc19      	bgt.n	8005878 <__multadd+0x74>
 8005844:	6861      	ldr	r1, [r4, #4]
 8005846:	4638      	mov	r0, r7
 8005848:	3101      	adds	r1, #1
 800584a:	f7ff ff79 	bl	8005740 <_Balloc>
 800584e:	4680      	mov	r8, r0
 8005850:	b928      	cbnz	r0, 800585e <__multadd+0x5a>
 8005852:	4602      	mov	r2, r0
 8005854:	4b0c      	ldr	r3, [pc, #48]	; (8005888 <__multadd+0x84>)
 8005856:	480d      	ldr	r0, [pc, #52]	; (800588c <__multadd+0x88>)
 8005858:	21b5      	movs	r1, #181	; 0xb5
 800585a:	f000 febf 	bl	80065dc <__assert_func>
 800585e:	6922      	ldr	r2, [r4, #16]
 8005860:	3202      	adds	r2, #2
 8005862:	f104 010c 	add.w	r1, r4, #12
 8005866:	0092      	lsls	r2, r2, #2
 8005868:	300c      	adds	r0, #12
 800586a:	f7fc ffff 	bl	800286c <memcpy>
 800586e:	4621      	mov	r1, r4
 8005870:	4638      	mov	r0, r7
 8005872:	f7ff ffa5 	bl	80057c0 <_Bfree>
 8005876:	4644      	mov	r4, r8
 8005878:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800587c:	3501      	adds	r5, #1
 800587e:	615e      	str	r6, [r3, #20]
 8005880:	6125      	str	r5, [r4, #16]
 8005882:	4620      	mov	r0, r4
 8005884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005888:	08008d28 	.word	0x08008d28
 800588c:	08008db4 	.word	0x08008db4

08005890 <__s2b>:
 8005890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005894:	460c      	mov	r4, r1
 8005896:	4615      	mov	r5, r2
 8005898:	461f      	mov	r7, r3
 800589a:	2209      	movs	r2, #9
 800589c:	3308      	adds	r3, #8
 800589e:	4606      	mov	r6, r0
 80058a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80058a4:	2100      	movs	r1, #0
 80058a6:	2201      	movs	r2, #1
 80058a8:	429a      	cmp	r2, r3
 80058aa:	db09      	blt.n	80058c0 <__s2b+0x30>
 80058ac:	4630      	mov	r0, r6
 80058ae:	f7ff ff47 	bl	8005740 <_Balloc>
 80058b2:	b940      	cbnz	r0, 80058c6 <__s2b+0x36>
 80058b4:	4602      	mov	r2, r0
 80058b6:	4b19      	ldr	r3, [pc, #100]	; (800591c <__s2b+0x8c>)
 80058b8:	4819      	ldr	r0, [pc, #100]	; (8005920 <__s2b+0x90>)
 80058ba:	21ce      	movs	r1, #206	; 0xce
 80058bc:	f000 fe8e 	bl	80065dc <__assert_func>
 80058c0:	0052      	lsls	r2, r2, #1
 80058c2:	3101      	adds	r1, #1
 80058c4:	e7f0      	b.n	80058a8 <__s2b+0x18>
 80058c6:	9b08      	ldr	r3, [sp, #32]
 80058c8:	6143      	str	r3, [r0, #20]
 80058ca:	2d09      	cmp	r5, #9
 80058cc:	f04f 0301 	mov.w	r3, #1
 80058d0:	6103      	str	r3, [r0, #16]
 80058d2:	dd16      	ble.n	8005902 <__s2b+0x72>
 80058d4:	f104 0909 	add.w	r9, r4, #9
 80058d8:	46c8      	mov	r8, r9
 80058da:	442c      	add	r4, r5
 80058dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80058e0:	4601      	mov	r1, r0
 80058e2:	3b30      	subs	r3, #48	; 0x30
 80058e4:	220a      	movs	r2, #10
 80058e6:	4630      	mov	r0, r6
 80058e8:	f7ff ff8c 	bl	8005804 <__multadd>
 80058ec:	45a0      	cmp	r8, r4
 80058ee:	d1f5      	bne.n	80058dc <__s2b+0x4c>
 80058f0:	f1a5 0408 	sub.w	r4, r5, #8
 80058f4:	444c      	add	r4, r9
 80058f6:	1b2d      	subs	r5, r5, r4
 80058f8:	1963      	adds	r3, r4, r5
 80058fa:	42bb      	cmp	r3, r7
 80058fc:	db04      	blt.n	8005908 <__s2b+0x78>
 80058fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005902:	340a      	adds	r4, #10
 8005904:	2509      	movs	r5, #9
 8005906:	e7f6      	b.n	80058f6 <__s2b+0x66>
 8005908:	f814 3b01 	ldrb.w	r3, [r4], #1
 800590c:	4601      	mov	r1, r0
 800590e:	3b30      	subs	r3, #48	; 0x30
 8005910:	220a      	movs	r2, #10
 8005912:	4630      	mov	r0, r6
 8005914:	f7ff ff76 	bl	8005804 <__multadd>
 8005918:	e7ee      	b.n	80058f8 <__s2b+0x68>
 800591a:	bf00      	nop
 800591c:	08008d28 	.word	0x08008d28
 8005920:	08008db4 	.word	0x08008db4

08005924 <__hi0bits>:
 8005924:	0c03      	lsrs	r3, r0, #16
 8005926:	041b      	lsls	r3, r3, #16
 8005928:	b9d3      	cbnz	r3, 8005960 <__hi0bits+0x3c>
 800592a:	0400      	lsls	r0, r0, #16
 800592c:	2310      	movs	r3, #16
 800592e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005932:	bf04      	itt	eq
 8005934:	0200      	lsleq	r0, r0, #8
 8005936:	3308      	addeq	r3, #8
 8005938:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800593c:	bf04      	itt	eq
 800593e:	0100      	lsleq	r0, r0, #4
 8005940:	3304      	addeq	r3, #4
 8005942:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005946:	bf04      	itt	eq
 8005948:	0080      	lsleq	r0, r0, #2
 800594a:	3302      	addeq	r3, #2
 800594c:	2800      	cmp	r0, #0
 800594e:	db05      	blt.n	800595c <__hi0bits+0x38>
 8005950:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005954:	f103 0301 	add.w	r3, r3, #1
 8005958:	bf08      	it	eq
 800595a:	2320      	moveq	r3, #32
 800595c:	4618      	mov	r0, r3
 800595e:	4770      	bx	lr
 8005960:	2300      	movs	r3, #0
 8005962:	e7e4      	b.n	800592e <__hi0bits+0xa>

08005964 <__lo0bits>:
 8005964:	6803      	ldr	r3, [r0, #0]
 8005966:	f013 0207 	ands.w	r2, r3, #7
 800596a:	4601      	mov	r1, r0
 800596c:	d00b      	beq.n	8005986 <__lo0bits+0x22>
 800596e:	07da      	lsls	r2, r3, #31
 8005970:	d423      	bmi.n	80059ba <__lo0bits+0x56>
 8005972:	0798      	lsls	r0, r3, #30
 8005974:	bf49      	itett	mi
 8005976:	085b      	lsrmi	r3, r3, #1
 8005978:	089b      	lsrpl	r3, r3, #2
 800597a:	2001      	movmi	r0, #1
 800597c:	600b      	strmi	r3, [r1, #0]
 800597e:	bf5c      	itt	pl
 8005980:	600b      	strpl	r3, [r1, #0]
 8005982:	2002      	movpl	r0, #2
 8005984:	4770      	bx	lr
 8005986:	b298      	uxth	r0, r3
 8005988:	b9a8      	cbnz	r0, 80059b6 <__lo0bits+0x52>
 800598a:	0c1b      	lsrs	r3, r3, #16
 800598c:	2010      	movs	r0, #16
 800598e:	b2da      	uxtb	r2, r3
 8005990:	b90a      	cbnz	r2, 8005996 <__lo0bits+0x32>
 8005992:	3008      	adds	r0, #8
 8005994:	0a1b      	lsrs	r3, r3, #8
 8005996:	071a      	lsls	r2, r3, #28
 8005998:	bf04      	itt	eq
 800599a:	091b      	lsreq	r3, r3, #4
 800599c:	3004      	addeq	r0, #4
 800599e:	079a      	lsls	r2, r3, #30
 80059a0:	bf04      	itt	eq
 80059a2:	089b      	lsreq	r3, r3, #2
 80059a4:	3002      	addeq	r0, #2
 80059a6:	07da      	lsls	r2, r3, #31
 80059a8:	d403      	bmi.n	80059b2 <__lo0bits+0x4e>
 80059aa:	085b      	lsrs	r3, r3, #1
 80059ac:	f100 0001 	add.w	r0, r0, #1
 80059b0:	d005      	beq.n	80059be <__lo0bits+0x5a>
 80059b2:	600b      	str	r3, [r1, #0]
 80059b4:	4770      	bx	lr
 80059b6:	4610      	mov	r0, r2
 80059b8:	e7e9      	b.n	800598e <__lo0bits+0x2a>
 80059ba:	2000      	movs	r0, #0
 80059bc:	4770      	bx	lr
 80059be:	2020      	movs	r0, #32
 80059c0:	4770      	bx	lr
	...

080059c4 <__i2b>:
 80059c4:	b510      	push	{r4, lr}
 80059c6:	460c      	mov	r4, r1
 80059c8:	2101      	movs	r1, #1
 80059ca:	f7ff feb9 	bl	8005740 <_Balloc>
 80059ce:	4602      	mov	r2, r0
 80059d0:	b928      	cbnz	r0, 80059de <__i2b+0x1a>
 80059d2:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <__i2b+0x24>)
 80059d4:	4805      	ldr	r0, [pc, #20]	; (80059ec <__i2b+0x28>)
 80059d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80059da:	f000 fdff 	bl	80065dc <__assert_func>
 80059de:	2301      	movs	r3, #1
 80059e0:	6144      	str	r4, [r0, #20]
 80059e2:	6103      	str	r3, [r0, #16]
 80059e4:	bd10      	pop	{r4, pc}
 80059e6:	bf00      	nop
 80059e8:	08008d28 	.word	0x08008d28
 80059ec:	08008db4 	.word	0x08008db4

080059f0 <__multiply>:
 80059f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f4:	4691      	mov	r9, r2
 80059f6:	690a      	ldr	r2, [r1, #16]
 80059f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	bfb8      	it	lt
 8005a00:	460b      	movlt	r3, r1
 8005a02:	460c      	mov	r4, r1
 8005a04:	bfbc      	itt	lt
 8005a06:	464c      	movlt	r4, r9
 8005a08:	4699      	movlt	r9, r3
 8005a0a:	6927      	ldr	r7, [r4, #16]
 8005a0c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005a10:	68a3      	ldr	r3, [r4, #8]
 8005a12:	6861      	ldr	r1, [r4, #4]
 8005a14:	eb07 060a 	add.w	r6, r7, sl
 8005a18:	42b3      	cmp	r3, r6
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	bfb8      	it	lt
 8005a1e:	3101      	addlt	r1, #1
 8005a20:	f7ff fe8e 	bl	8005740 <_Balloc>
 8005a24:	b930      	cbnz	r0, 8005a34 <__multiply+0x44>
 8005a26:	4602      	mov	r2, r0
 8005a28:	4b44      	ldr	r3, [pc, #272]	; (8005b3c <__multiply+0x14c>)
 8005a2a:	4845      	ldr	r0, [pc, #276]	; (8005b40 <__multiply+0x150>)
 8005a2c:	f240 115d 	movw	r1, #349	; 0x15d
 8005a30:	f000 fdd4 	bl	80065dc <__assert_func>
 8005a34:	f100 0514 	add.w	r5, r0, #20
 8005a38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005a3c:	462b      	mov	r3, r5
 8005a3e:	2200      	movs	r2, #0
 8005a40:	4543      	cmp	r3, r8
 8005a42:	d321      	bcc.n	8005a88 <__multiply+0x98>
 8005a44:	f104 0314 	add.w	r3, r4, #20
 8005a48:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005a4c:	f109 0314 	add.w	r3, r9, #20
 8005a50:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005a54:	9202      	str	r2, [sp, #8]
 8005a56:	1b3a      	subs	r2, r7, r4
 8005a58:	3a15      	subs	r2, #21
 8005a5a:	f022 0203 	bic.w	r2, r2, #3
 8005a5e:	3204      	adds	r2, #4
 8005a60:	f104 0115 	add.w	r1, r4, #21
 8005a64:	428f      	cmp	r7, r1
 8005a66:	bf38      	it	cc
 8005a68:	2204      	movcc	r2, #4
 8005a6a:	9201      	str	r2, [sp, #4]
 8005a6c:	9a02      	ldr	r2, [sp, #8]
 8005a6e:	9303      	str	r3, [sp, #12]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d80c      	bhi.n	8005a8e <__multiply+0x9e>
 8005a74:	2e00      	cmp	r6, #0
 8005a76:	dd03      	ble.n	8005a80 <__multiply+0x90>
 8005a78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d05a      	beq.n	8005b36 <__multiply+0x146>
 8005a80:	6106      	str	r6, [r0, #16]
 8005a82:	b005      	add	sp, #20
 8005a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a88:	f843 2b04 	str.w	r2, [r3], #4
 8005a8c:	e7d8      	b.n	8005a40 <__multiply+0x50>
 8005a8e:	f8b3 a000 	ldrh.w	sl, [r3]
 8005a92:	f1ba 0f00 	cmp.w	sl, #0
 8005a96:	d024      	beq.n	8005ae2 <__multiply+0xf2>
 8005a98:	f104 0e14 	add.w	lr, r4, #20
 8005a9c:	46a9      	mov	r9, r5
 8005a9e:	f04f 0c00 	mov.w	ip, #0
 8005aa2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005aa6:	f8d9 1000 	ldr.w	r1, [r9]
 8005aaa:	fa1f fb82 	uxth.w	fp, r2
 8005aae:	b289      	uxth	r1, r1
 8005ab0:	fb0a 110b 	mla	r1, sl, fp, r1
 8005ab4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005ab8:	f8d9 2000 	ldr.w	r2, [r9]
 8005abc:	4461      	add	r1, ip
 8005abe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005ac2:	fb0a c20b 	mla	r2, sl, fp, ip
 8005ac6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005aca:	b289      	uxth	r1, r1
 8005acc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005ad0:	4577      	cmp	r7, lr
 8005ad2:	f849 1b04 	str.w	r1, [r9], #4
 8005ad6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005ada:	d8e2      	bhi.n	8005aa2 <__multiply+0xb2>
 8005adc:	9a01      	ldr	r2, [sp, #4]
 8005ade:	f845 c002 	str.w	ip, [r5, r2]
 8005ae2:	9a03      	ldr	r2, [sp, #12]
 8005ae4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005ae8:	3304      	adds	r3, #4
 8005aea:	f1b9 0f00 	cmp.w	r9, #0
 8005aee:	d020      	beq.n	8005b32 <__multiply+0x142>
 8005af0:	6829      	ldr	r1, [r5, #0]
 8005af2:	f104 0c14 	add.w	ip, r4, #20
 8005af6:	46ae      	mov	lr, r5
 8005af8:	f04f 0a00 	mov.w	sl, #0
 8005afc:	f8bc b000 	ldrh.w	fp, [ip]
 8005b00:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005b04:	fb09 220b 	mla	r2, r9, fp, r2
 8005b08:	4492      	add	sl, r2
 8005b0a:	b289      	uxth	r1, r1
 8005b0c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005b10:	f84e 1b04 	str.w	r1, [lr], #4
 8005b14:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005b18:	f8be 1000 	ldrh.w	r1, [lr]
 8005b1c:	0c12      	lsrs	r2, r2, #16
 8005b1e:	fb09 1102 	mla	r1, r9, r2, r1
 8005b22:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005b26:	4567      	cmp	r7, ip
 8005b28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005b2c:	d8e6      	bhi.n	8005afc <__multiply+0x10c>
 8005b2e:	9a01      	ldr	r2, [sp, #4]
 8005b30:	50a9      	str	r1, [r5, r2]
 8005b32:	3504      	adds	r5, #4
 8005b34:	e79a      	b.n	8005a6c <__multiply+0x7c>
 8005b36:	3e01      	subs	r6, #1
 8005b38:	e79c      	b.n	8005a74 <__multiply+0x84>
 8005b3a:	bf00      	nop
 8005b3c:	08008d28 	.word	0x08008d28
 8005b40:	08008db4 	.word	0x08008db4

08005b44 <__pow5mult>:
 8005b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b48:	4615      	mov	r5, r2
 8005b4a:	f012 0203 	ands.w	r2, r2, #3
 8005b4e:	4606      	mov	r6, r0
 8005b50:	460f      	mov	r7, r1
 8005b52:	d007      	beq.n	8005b64 <__pow5mult+0x20>
 8005b54:	4c25      	ldr	r4, [pc, #148]	; (8005bec <__pow5mult+0xa8>)
 8005b56:	3a01      	subs	r2, #1
 8005b58:	2300      	movs	r3, #0
 8005b5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005b5e:	f7ff fe51 	bl	8005804 <__multadd>
 8005b62:	4607      	mov	r7, r0
 8005b64:	10ad      	asrs	r5, r5, #2
 8005b66:	d03d      	beq.n	8005be4 <__pow5mult+0xa0>
 8005b68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005b6a:	b97c      	cbnz	r4, 8005b8c <__pow5mult+0x48>
 8005b6c:	2010      	movs	r0, #16
 8005b6e:	f7ff fdcd 	bl	800570c <malloc>
 8005b72:	4602      	mov	r2, r0
 8005b74:	6270      	str	r0, [r6, #36]	; 0x24
 8005b76:	b928      	cbnz	r0, 8005b84 <__pow5mult+0x40>
 8005b78:	4b1d      	ldr	r3, [pc, #116]	; (8005bf0 <__pow5mult+0xac>)
 8005b7a:	481e      	ldr	r0, [pc, #120]	; (8005bf4 <__pow5mult+0xb0>)
 8005b7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005b80:	f000 fd2c 	bl	80065dc <__assert_func>
 8005b84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005b88:	6004      	str	r4, [r0, #0]
 8005b8a:	60c4      	str	r4, [r0, #12]
 8005b8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005b90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005b94:	b94c      	cbnz	r4, 8005baa <__pow5mult+0x66>
 8005b96:	f240 2171 	movw	r1, #625	; 0x271
 8005b9a:	4630      	mov	r0, r6
 8005b9c:	f7ff ff12 	bl	80059c4 <__i2b>
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	f8c8 0008 	str.w	r0, [r8, #8]
 8005ba6:	4604      	mov	r4, r0
 8005ba8:	6003      	str	r3, [r0, #0]
 8005baa:	f04f 0900 	mov.w	r9, #0
 8005bae:	07eb      	lsls	r3, r5, #31
 8005bb0:	d50a      	bpl.n	8005bc8 <__pow5mult+0x84>
 8005bb2:	4639      	mov	r1, r7
 8005bb4:	4622      	mov	r2, r4
 8005bb6:	4630      	mov	r0, r6
 8005bb8:	f7ff ff1a 	bl	80059f0 <__multiply>
 8005bbc:	4639      	mov	r1, r7
 8005bbe:	4680      	mov	r8, r0
 8005bc0:	4630      	mov	r0, r6
 8005bc2:	f7ff fdfd 	bl	80057c0 <_Bfree>
 8005bc6:	4647      	mov	r7, r8
 8005bc8:	106d      	asrs	r5, r5, #1
 8005bca:	d00b      	beq.n	8005be4 <__pow5mult+0xa0>
 8005bcc:	6820      	ldr	r0, [r4, #0]
 8005bce:	b938      	cbnz	r0, 8005be0 <__pow5mult+0x9c>
 8005bd0:	4622      	mov	r2, r4
 8005bd2:	4621      	mov	r1, r4
 8005bd4:	4630      	mov	r0, r6
 8005bd6:	f7ff ff0b 	bl	80059f0 <__multiply>
 8005bda:	6020      	str	r0, [r4, #0]
 8005bdc:	f8c0 9000 	str.w	r9, [r0]
 8005be0:	4604      	mov	r4, r0
 8005be2:	e7e4      	b.n	8005bae <__pow5mult+0x6a>
 8005be4:	4638      	mov	r0, r7
 8005be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bea:	bf00      	nop
 8005bec:	08008f00 	.word	0x08008f00
 8005bf0:	08008cb6 	.word	0x08008cb6
 8005bf4:	08008db4 	.word	0x08008db4

08005bf8 <__lshift>:
 8005bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bfc:	460c      	mov	r4, r1
 8005bfe:	6849      	ldr	r1, [r1, #4]
 8005c00:	6923      	ldr	r3, [r4, #16]
 8005c02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005c06:	68a3      	ldr	r3, [r4, #8]
 8005c08:	4607      	mov	r7, r0
 8005c0a:	4691      	mov	r9, r2
 8005c0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005c10:	f108 0601 	add.w	r6, r8, #1
 8005c14:	42b3      	cmp	r3, r6
 8005c16:	db0b      	blt.n	8005c30 <__lshift+0x38>
 8005c18:	4638      	mov	r0, r7
 8005c1a:	f7ff fd91 	bl	8005740 <_Balloc>
 8005c1e:	4605      	mov	r5, r0
 8005c20:	b948      	cbnz	r0, 8005c36 <__lshift+0x3e>
 8005c22:	4602      	mov	r2, r0
 8005c24:	4b2a      	ldr	r3, [pc, #168]	; (8005cd0 <__lshift+0xd8>)
 8005c26:	482b      	ldr	r0, [pc, #172]	; (8005cd4 <__lshift+0xdc>)
 8005c28:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005c2c:	f000 fcd6 	bl	80065dc <__assert_func>
 8005c30:	3101      	adds	r1, #1
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	e7ee      	b.n	8005c14 <__lshift+0x1c>
 8005c36:	2300      	movs	r3, #0
 8005c38:	f100 0114 	add.w	r1, r0, #20
 8005c3c:	f100 0210 	add.w	r2, r0, #16
 8005c40:	4618      	mov	r0, r3
 8005c42:	4553      	cmp	r3, sl
 8005c44:	db37      	blt.n	8005cb6 <__lshift+0xbe>
 8005c46:	6920      	ldr	r0, [r4, #16]
 8005c48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005c4c:	f104 0314 	add.w	r3, r4, #20
 8005c50:	f019 091f 	ands.w	r9, r9, #31
 8005c54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005c58:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005c5c:	d02f      	beq.n	8005cbe <__lshift+0xc6>
 8005c5e:	f1c9 0e20 	rsb	lr, r9, #32
 8005c62:	468a      	mov	sl, r1
 8005c64:	f04f 0c00 	mov.w	ip, #0
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	fa02 f209 	lsl.w	r2, r2, r9
 8005c6e:	ea42 020c 	orr.w	r2, r2, ip
 8005c72:	f84a 2b04 	str.w	r2, [sl], #4
 8005c76:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c7a:	4298      	cmp	r0, r3
 8005c7c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005c80:	d8f2      	bhi.n	8005c68 <__lshift+0x70>
 8005c82:	1b03      	subs	r3, r0, r4
 8005c84:	3b15      	subs	r3, #21
 8005c86:	f023 0303 	bic.w	r3, r3, #3
 8005c8a:	3304      	adds	r3, #4
 8005c8c:	f104 0215 	add.w	r2, r4, #21
 8005c90:	4290      	cmp	r0, r2
 8005c92:	bf38      	it	cc
 8005c94:	2304      	movcc	r3, #4
 8005c96:	f841 c003 	str.w	ip, [r1, r3]
 8005c9a:	f1bc 0f00 	cmp.w	ip, #0
 8005c9e:	d001      	beq.n	8005ca4 <__lshift+0xac>
 8005ca0:	f108 0602 	add.w	r6, r8, #2
 8005ca4:	3e01      	subs	r6, #1
 8005ca6:	4638      	mov	r0, r7
 8005ca8:	612e      	str	r6, [r5, #16]
 8005caa:	4621      	mov	r1, r4
 8005cac:	f7ff fd88 	bl	80057c0 <_Bfree>
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cb6:	f842 0f04 	str.w	r0, [r2, #4]!
 8005cba:	3301      	adds	r3, #1
 8005cbc:	e7c1      	b.n	8005c42 <__lshift+0x4a>
 8005cbe:	3904      	subs	r1, #4
 8005cc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cc4:	f841 2f04 	str.w	r2, [r1, #4]!
 8005cc8:	4298      	cmp	r0, r3
 8005cca:	d8f9      	bhi.n	8005cc0 <__lshift+0xc8>
 8005ccc:	e7ea      	b.n	8005ca4 <__lshift+0xac>
 8005cce:	bf00      	nop
 8005cd0:	08008d28 	.word	0x08008d28
 8005cd4:	08008db4 	.word	0x08008db4

08005cd8 <__mcmp>:
 8005cd8:	b530      	push	{r4, r5, lr}
 8005cda:	6902      	ldr	r2, [r0, #16]
 8005cdc:	690c      	ldr	r4, [r1, #16]
 8005cde:	1b12      	subs	r2, r2, r4
 8005ce0:	d10e      	bne.n	8005d00 <__mcmp+0x28>
 8005ce2:	f100 0314 	add.w	r3, r0, #20
 8005ce6:	3114      	adds	r1, #20
 8005ce8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005cec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005cf0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005cf4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005cf8:	42a5      	cmp	r5, r4
 8005cfa:	d003      	beq.n	8005d04 <__mcmp+0x2c>
 8005cfc:	d305      	bcc.n	8005d0a <__mcmp+0x32>
 8005cfe:	2201      	movs	r2, #1
 8005d00:	4610      	mov	r0, r2
 8005d02:	bd30      	pop	{r4, r5, pc}
 8005d04:	4283      	cmp	r3, r0
 8005d06:	d3f3      	bcc.n	8005cf0 <__mcmp+0x18>
 8005d08:	e7fa      	b.n	8005d00 <__mcmp+0x28>
 8005d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d0e:	e7f7      	b.n	8005d00 <__mcmp+0x28>

08005d10 <__mdiff>:
 8005d10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d14:	460c      	mov	r4, r1
 8005d16:	4606      	mov	r6, r0
 8005d18:	4611      	mov	r1, r2
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	4690      	mov	r8, r2
 8005d1e:	f7ff ffdb 	bl	8005cd8 <__mcmp>
 8005d22:	1e05      	subs	r5, r0, #0
 8005d24:	d110      	bne.n	8005d48 <__mdiff+0x38>
 8005d26:	4629      	mov	r1, r5
 8005d28:	4630      	mov	r0, r6
 8005d2a:	f7ff fd09 	bl	8005740 <_Balloc>
 8005d2e:	b930      	cbnz	r0, 8005d3e <__mdiff+0x2e>
 8005d30:	4b3a      	ldr	r3, [pc, #232]	; (8005e1c <__mdiff+0x10c>)
 8005d32:	4602      	mov	r2, r0
 8005d34:	f240 2132 	movw	r1, #562	; 0x232
 8005d38:	4839      	ldr	r0, [pc, #228]	; (8005e20 <__mdiff+0x110>)
 8005d3a:	f000 fc4f 	bl	80065dc <__assert_func>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005d44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d48:	bfa4      	itt	ge
 8005d4a:	4643      	movge	r3, r8
 8005d4c:	46a0      	movge	r8, r4
 8005d4e:	4630      	mov	r0, r6
 8005d50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005d54:	bfa6      	itte	ge
 8005d56:	461c      	movge	r4, r3
 8005d58:	2500      	movge	r5, #0
 8005d5a:	2501      	movlt	r5, #1
 8005d5c:	f7ff fcf0 	bl	8005740 <_Balloc>
 8005d60:	b920      	cbnz	r0, 8005d6c <__mdiff+0x5c>
 8005d62:	4b2e      	ldr	r3, [pc, #184]	; (8005e1c <__mdiff+0x10c>)
 8005d64:	4602      	mov	r2, r0
 8005d66:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005d6a:	e7e5      	b.n	8005d38 <__mdiff+0x28>
 8005d6c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005d70:	6926      	ldr	r6, [r4, #16]
 8005d72:	60c5      	str	r5, [r0, #12]
 8005d74:	f104 0914 	add.w	r9, r4, #20
 8005d78:	f108 0514 	add.w	r5, r8, #20
 8005d7c:	f100 0e14 	add.w	lr, r0, #20
 8005d80:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005d84:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005d88:	f108 0210 	add.w	r2, r8, #16
 8005d8c:	46f2      	mov	sl, lr
 8005d8e:	2100      	movs	r1, #0
 8005d90:	f859 3b04 	ldr.w	r3, [r9], #4
 8005d94:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005d98:	fa1f f883 	uxth.w	r8, r3
 8005d9c:	fa11 f18b 	uxtah	r1, r1, fp
 8005da0:	0c1b      	lsrs	r3, r3, #16
 8005da2:	eba1 0808 	sub.w	r8, r1, r8
 8005da6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005daa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005dae:	fa1f f888 	uxth.w	r8, r8
 8005db2:	1419      	asrs	r1, r3, #16
 8005db4:	454e      	cmp	r6, r9
 8005db6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005dba:	f84a 3b04 	str.w	r3, [sl], #4
 8005dbe:	d8e7      	bhi.n	8005d90 <__mdiff+0x80>
 8005dc0:	1b33      	subs	r3, r6, r4
 8005dc2:	3b15      	subs	r3, #21
 8005dc4:	f023 0303 	bic.w	r3, r3, #3
 8005dc8:	3304      	adds	r3, #4
 8005dca:	3415      	adds	r4, #21
 8005dcc:	42a6      	cmp	r6, r4
 8005dce:	bf38      	it	cc
 8005dd0:	2304      	movcc	r3, #4
 8005dd2:	441d      	add	r5, r3
 8005dd4:	4473      	add	r3, lr
 8005dd6:	469e      	mov	lr, r3
 8005dd8:	462e      	mov	r6, r5
 8005dda:	4566      	cmp	r6, ip
 8005ddc:	d30e      	bcc.n	8005dfc <__mdiff+0xec>
 8005dde:	f10c 0203 	add.w	r2, ip, #3
 8005de2:	1b52      	subs	r2, r2, r5
 8005de4:	f022 0203 	bic.w	r2, r2, #3
 8005de8:	3d03      	subs	r5, #3
 8005dea:	45ac      	cmp	ip, r5
 8005dec:	bf38      	it	cc
 8005dee:	2200      	movcc	r2, #0
 8005df0:	441a      	add	r2, r3
 8005df2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005df6:	b17b      	cbz	r3, 8005e18 <__mdiff+0x108>
 8005df8:	6107      	str	r7, [r0, #16]
 8005dfa:	e7a3      	b.n	8005d44 <__mdiff+0x34>
 8005dfc:	f856 8b04 	ldr.w	r8, [r6], #4
 8005e00:	fa11 f288 	uxtah	r2, r1, r8
 8005e04:	1414      	asrs	r4, r2, #16
 8005e06:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005e0a:	b292      	uxth	r2, r2
 8005e0c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005e10:	f84e 2b04 	str.w	r2, [lr], #4
 8005e14:	1421      	asrs	r1, r4, #16
 8005e16:	e7e0      	b.n	8005dda <__mdiff+0xca>
 8005e18:	3f01      	subs	r7, #1
 8005e1a:	e7ea      	b.n	8005df2 <__mdiff+0xe2>
 8005e1c:	08008d28 	.word	0x08008d28
 8005e20:	08008db4 	.word	0x08008db4

08005e24 <__ulp>:
 8005e24:	b082      	sub	sp, #8
 8005e26:	ed8d 0b00 	vstr	d0, [sp]
 8005e2a:	9b01      	ldr	r3, [sp, #4]
 8005e2c:	4912      	ldr	r1, [pc, #72]	; (8005e78 <__ulp+0x54>)
 8005e2e:	4019      	ands	r1, r3
 8005e30:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8005e34:	2900      	cmp	r1, #0
 8005e36:	dd05      	ble.n	8005e44 <__ulp+0x20>
 8005e38:	2200      	movs	r2, #0
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	ec43 2b10 	vmov	d0, r2, r3
 8005e40:	b002      	add	sp, #8
 8005e42:	4770      	bx	lr
 8005e44:	4249      	negs	r1, r1
 8005e46:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8005e4a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8005e4e:	f04f 0200 	mov.w	r2, #0
 8005e52:	f04f 0300 	mov.w	r3, #0
 8005e56:	da04      	bge.n	8005e62 <__ulp+0x3e>
 8005e58:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8005e5c:	fa41 f300 	asr.w	r3, r1, r0
 8005e60:	e7ec      	b.n	8005e3c <__ulp+0x18>
 8005e62:	f1a0 0114 	sub.w	r1, r0, #20
 8005e66:	291e      	cmp	r1, #30
 8005e68:	bfda      	itte	le
 8005e6a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8005e6e:	fa20 f101 	lsrle.w	r1, r0, r1
 8005e72:	2101      	movgt	r1, #1
 8005e74:	460a      	mov	r2, r1
 8005e76:	e7e1      	b.n	8005e3c <__ulp+0x18>
 8005e78:	7ff00000 	.word	0x7ff00000

08005e7c <__b2d>:
 8005e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7e:	6905      	ldr	r5, [r0, #16]
 8005e80:	f100 0714 	add.w	r7, r0, #20
 8005e84:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8005e88:	1f2e      	subs	r6, r5, #4
 8005e8a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f7ff fd48 	bl	8005924 <__hi0bits>
 8005e94:	f1c0 0320 	rsb	r3, r0, #32
 8005e98:	280a      	cmp	r0, #10
 8005e9a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8005f18 <__b2d+0x9c>
 8005e9e:	600b      	str	r3, [r1, #0]
 8005ea0:	dc14      	bgt.n	8005ecc <__b2d+0x50>
 8005ea2:	f1c0 0e0b 	rsb	lr, r0, #11
 8005ea6:	fa24 f10e 	lsr.w	r1, r4, lr
 8005eaa:	42b7      	cmp	r7, r6
 8005eac:	ea41 030c 	orr.w	r3, r1, ip
 8005eb0:	bf34      	ite	cc
 8005eb2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8005eb6:	2100      	movcs	r1, #0
 8005eb8:	3015      	adds	r0, #21
 8005eba:	fa04 f000 	lsl.w	r0, r4, r0
 8005ebe:	fa21 f10e 	lsr.w	r1, r1, lr
 8005ec2:	ea40 0201 	orr.w	r2, r0, r1
 8005ec6:	ec43 2b10 	vmov	d0, r2, r3
 8005eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ecc:	42b7      	cmp	r7, r6
 8005ece:	bf3a      	itte	cc
 8005ed0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8005ed4:	f1a5 0608 	subcc.w	r6, r5, #8
 8005ed8:	2100      	movcs	r1, #0
 8005eda:	380b      	subs	r0, #11
 8005edc:	d017      	beq.n	8005f0e <__b2d+0x92>
 8005ede:	f1c0 0c20 	rsb	ip, r0, #32
 8005ee2:	fa04 f500 	lsl.w	r5, r4, r0
 8005ee6:	42be      	cmp	r6, r7
 8005ee8:	fa21 f40c 	lsr.w	r4, r1, ip
 8005eec:	ea45 0504 	orr.w	r5, r5, r4
 8005ef0:	bf8c      	ite	hi
 8005ef2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8005ef6:	2400      	movls	r4, #0
 8005ef8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8005efc:	fa01 f000 	lsl.w	r0, r1, r0
 8005f00:	fa24 f40c 	lsr.w	r4, r4, ip
 8005f04:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005f08:	ea40 0204 	orr.w	r2, r0, r4
 8005f0c:	e7db      	b.n	8005ec6 <__b2d+0x4a>
 8005f0e:	ea44 030c 	orr.w	r3, r4, ip
 8005f12:	460a      	mov	r2, r1
 8005f14:	e7d7      	b.n	8005ec6 <__b2d+0x4a>
 8005f16:	bf00      	nop
 8005f18:	3ff00000 	.word	0x3ff00000

08005f1c <__d2b>:
 8005f1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005f20:	4689      	mov	r9, r1
 8005f22:	2101      	movs	r1, #1
 8005f24:	ec57 6b10 	vmov	r6, r7, d0
 8005f28:	4690      	mov	r8, r2
 8005f2a:	f7ff fc09 	bl	8005740 <_Balloc>
 8005f2e:	4604      	mov	r4, r0
 8005f30:	b930      	cbnz	r0, 8005f40 <__d2b+0x24>
 8005f32:	4602      	mov	r2, r0
 8005f34:	4b25      	ldr	r3, [pc, #148]	; (8005fcc <__d2b+0xb0>)
 8005f36:	4826      	ldr	r0, [pc, #152]	; (8005fd0 <__d2b+0xb4>)
 8005f38:	f240 310a 	movw	r1, #778	; 0x30a
 8005f3c:	f000 fb4e 	bl	80065dc <__assert_func>
 8005f40:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005f44:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005f48:	bb35      	cbnz	r5, 8005f98 <__d2b+0x7c>
 8005f4a:	2e00      	cmp	r6, #0
 8005f4c:	9301      	str	r3, [sp, #4]
 8005f4e:	d028      	beq.n	8005fa2 <__d2b+0x86>
 8005f50:	4668      	mov	r0, sp
 8005f52:	9600      	str	r6, [sp, #0]
 8005f54:	f7ff fd06 	bl	8005964 <__lo0bits>
 8005f58:	9900      	ldr	r1, [sp, #0]
 8005f5a:	b300      	cbz	r0, 8005f9e <__d2b+0x82>
 8005f5c:	9a01      	ldr	r2, [sp, #4]
 8005f5e:	f1c0 0320 	rsb	r3, r0, #32
 8005f62:	fa02 f303 	lsl.w	r3, r2, r3
 8005f66:	430b      	orrs	r3, r1
 8005f68:	40c2      	lsrs	r2, r0
 8005f6a:	6163      	str	r3, [r4, #20]
 8005f6c:	9201      	str	r2, [sp, #4]
 8005f6e:	9b01      	ldr	r3, [sp, #4]
 8005f70:	61a3      	str	r3, [r4, #24]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	bf14      	ite	ne
 8005f76:	2202      	movne	r2, #2
 8005f78:	2201      	moveq	r2, #1
 8005f7a:	6122      	str	r2, [r4, #16]
 8005f7c:	b1d5      	cbz	r5, 8005fb4 <__d2b+0x98>
 8005f7e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005f82:	4405      	add	r5, r0
 8005f84:	f8c9 5000 	str.w	r5, [r9]
 8005f88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005f8c:	f8c8 0000 	str.w	r0, [r8]
 8005f90:	4620      	mov	r0, r4
 8005f92:	b003      	add	sp, #12
 8005f94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f9c:	e7d5      	b.n	8005f4a <__d2b+0x2e>
 8005f9e:	6161      	str	r1, [r4, #20]
 8005fa0:	e7e5      	b.n	8005f6e <__d2b+0x52>
 8005fa2:	a801      	add	r0, sp, #4
 8005fa4:	f7ff fcde 	bl	8005964 <__lo0bits>
 8005fa8:	9b01      	ldr	r3, [sp, #4]
 8005faa:	6163      	str	r3, [r4, #20]
 8005fac:	2201      	movs	r2, #1
 8005fae:	6122      	str	r2, [r4, #16]
 8005fb0:	3020      	adds	r0, #32
 8005fb2:	e7e3      	b.n	8005f7c <__d2b+0x60>
 8005fb4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005fb8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005fbc:	f8c9 0000 	str.w	r0, [r9]
 8005fc0:	6918      	ldr	r0, [r3, #16]
 8005fc2:	f7ff fcaf 	bl	8005924 <__hi0bits>
 8005fc6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005fca:	e7df      	b.n	8005f8c <__d2b+0x70>
 8005fcc:	08008d28 	.word	0x08008d28
 8005fd0:	08008db4 	.word	0x08008db4

08005fd4 <__ratio>:
 8005fd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd8:	4688      	mov	r8, r1
 8005fda:	4669      	mov	r1, sp
 8005fdc:	4681      	mov	r9, r0
 8005fde:	f7ff ff4d 	bl	8005e7c <__b2d>
 8005fe2:	a901      	add	r1, sp, #4
 8005fe4:	4640      	mov	r0, r8
 8005fe6:	ec55 4b10 	vmov	r4, r5, d0
 8005fea:	f7ff ff47 	bl	8005e7c <__b2d>
 8005fee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005ff2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8005ff6:	eba3 0c02 	sub.w	ip, r3, r2
 8005ffa:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005ffe:	1a9b      	subs	r3, r3, r2
 8006000:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006004:	ec51 0b10 	vmov	r0, r1, d0
 8006008:	2b00      	cmp	r3, #0
 800600a:	bfd6      	itet	le
 800600c:	460a      	movle	r2, r1
 800600e:	462a      	movgt	r2, r5
 8006010:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006014:	468b      	mov	fp, r1
 8006016:	462f      	mov	r7, r5
 8006018:	bfd4      	ite	le
 800601a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800601e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006022:	4620      	mov	r0, r4
 8006024:	ee10 2a10 	vmov	r2, s0
 8006028:	465b      	mov	r3, fp
 800602a:	4639      	mov	r1, r7
 800602c:	f7fa fbe6 	bl	80007fc <__aeabi_ddiv>
 8006030:	ec41 0b10 	vmov	d0, r0, r1
 8006034:	b003      	add	sp, #12
 8006036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800603a <__copybits>:
 800603a:	3901      	subs	r1, #1
 800603c:	b570      	push	{r4, r5, r6, lr}
 800603e:	1149      	asrs	r1, r1, #5
 8006040:	6914      	ldr	r4, [r2, #16]
 8006042:	3101      	adds	r1, #1
 8006044:	f102 0314 	add.w	r3, r2, #20
 8006048:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800604c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006050:	1f05      	subs	r5, r0, #4
 8006052:	42a3      	cmp	r3, r4
 8006054:	d30c      	bcc.n	8006070 <__copybits+0x36>
 8006056:	1aa3      	subs	r3, r4, r2
 8006058:	3b11      	subs	r3, #17
 800605a:	f023 0303 	bic.w	r3, r3, #3
 800605e:	3211      	adds	r2, #17
 8006060:	42a2      	cmp	r2, r4
 8006062:	bf88      	it	hi
 8006064:	2300      	movhi	r3, #0
 8006066:	4418      	add	r0, r3
 8006068:	2300      	movs	r3, #0
 800606a:	4288      	cmp	r0, r1
 800606c:	d305      	bcc.n	800607a <__copybits+0x40>
 800606e:	bd70      	pop	{r4, r5, r6, pc}
 8006070:	f853 6b04 	ldr.w	r6, [r3], #4
 8006074:	f845 6f04 	str.w	r6, [r5, #4]!
 8006078:	e7eb      	b.n	8006052 <__copybits+0x18>
 800607a:	f840 3b04 	str.w	r3, [r0], #4
 800607e:	e7f4      	b.n	800606a <__copybits+0x30>

08006080 <__any_on>:
 8006080:	f100 0214 	add.w	r2, r0, #20
 8006084:	6900      	ldr	r0, [r0, #16]
 8006086:	114b      	asrs	r3, r1, #5
 8006088:	4298      	cmp	r0, r3
 800608a:	b510      	push	{r4, lr}
 800608c:	db11      	blt.n	80060b2 <__any_on+0x32>
 800608e:	dd0a      	ble.n	80060a6 <__any_on+0x26>
 8006090:	f011 011f 	ands.w	r1, r1, #31
 8006094:	d007      	beq.n	80060a6 <__any_on+0x26>
 8006096:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800609a:	fa24 f001 	lsr.w	r0, r4, r1
 800609e:	fa00 f101 	lsl.w	r1, r0, r1
 80060a2:	428c      	cmp	r4, r1
 80060a4:	d10b      	bne.n	80060be <__any_on+0x3e>
 80060a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d803      	bhi.n	80060b6 <__any_on+0x36>
 80060ae:	2000      	movs	r0, #0
 80060b0:	bd10      	pop	{r4, pc}
 80060b2:	4603      	mov	r3, r0
 80060b4:	e7f7      	b.n	80060a6 <__any_on+0x26>
 80060b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80060ba:	2900      	cmp	r1, #0
 80060bc:	d0f5      	beq.n	80060aa <__any_on+0x2a>
 80060be:	2001      	movs	r0, #1
 80060c0:	e7f6      	b.n	80060b0 <__any_on+0x30>

080060c2 <_calloc_r>:
 80060c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060c4:	fba1 2402 	umull	r2, r4, r1, r2
 80060c8:	b94c      	cbnz	r4, 80060de <_calloc_r+0x1c>
 80060ca:	4611      	mov	r1, r2
 80060cc:	9201      	str	r2, [sp, #4]
 80060ce:	f000 f87b 	bl	80061c8 <_malloc_r>
 80060d2:	9a01      	ldr	r2, [sp, #4]
 80060d4:	4605      	mov	r5, r0
 80060d6:	b930      	cbnz	r0, 80060e6 <_calloc_r+0x24>
 80060d8:	4628      	mov	r0, r5
 80060da:	b003      	add	sp, #12
 80060dc:	bd30      	pop	{r4, r5, pc}
 80060de:	220c      	movs	r2, #12
 80060e0:	6002      	str	r2, [r0, #0]
 80060e2:	2500      	movs	r5, #0
 80060e4:	e7f8      	b.n	80060d8 <_calloc_r+0x16>
 80060e6:	4621      	mov	r1, r4
 80060e8:	f7fc fbce 	bl	8002888 <memset>
 80060ec:	e7f4      	b.n	80060d8 <_calloc_r+0x16>
	...

080060f0 <_free_r>:
 80060f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060f2:	2900      	cmp	r1, #0
 80060f4:	d044      	beq.n	8006180 <_free_r+0x90>
 80060f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060fa:	9001      	str	r0, [sp, #4]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f1a1 0404 	sub.w	r4, r1, #4
 8006102:	bfb8      	it	lt
 8006104:	18e4      	addlt	r4, r4, r3
 8006106:	f000 fab3 	bl	8006670 <__malloc_lock>
 800610a:	4a1e      	ldr	r2, [pc, #120]	; (8006184 <_free_r+0x94>)
 800610c:	9801      	ldr	r0, [sp, #4]
 800610e:	6813      	ldr	r3, [r2, #0]
 8006110:	b933      	cbnz	r3, 8006120 <_free_r+0x30>
 8006112:	6063      	str	r3, [r4, #4]
 8006114:	6014      	str	r4, [r2, #0]
 8006116:	b003      	add	sp, #12
 8006118:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800611c:	f000 baae 	b.w	800667c <__malloc_unlock>
 8006120:	42a3      	cmp	r3, r4
 8006122:	d908      	bls.n	8006136 <_free_r+0x46>
 8006124:	6825      	ldr	r5, [r4, #0]
 8006126:	1961      	adds	r1, r4, r5
 8006128:	428b      	cmp	r3, r1
 800612a:	bf01      	itttt	eq
 800612c:	6819      	ldreq	r1, [r3, #0]
 800612e:	685b      	ldreq	r3, [r3, #4]
 8006130:	1949      	addeq	r1, r1, r5
 8006132:	6021      	streq	r1, [r4, #0]
 8006134:	e7ed      	b.n	8006112 <_free_r+0x22>
 8006136:	461a      	mov	r2, r3
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	b10b      	cbz	r3, 8006140 <_free_r+0x50>
 800613c:	42a3      	cmp	r3, r4
 800613e:	d9fa      	bls.n	8006136 <_free_r+0x46>
 8006140:	6811      	ldr	r1, [r2, #0]
 8006142:	1855      	adds	r5, r2, r1
 8006144:	42a5      	cmp	r5, r4
 8006146:	d10b      	bne.n	8006160 <_free_r+0x70>
 8006148:	6824      	ldr	r4, [r4, #0]
 800614a:	4421      	add	r1, r4
 800614c:	1854      	adds	r4, r2, r1
 800614e:	42a3      	cmp	r3, r4
 8006150:	6011      	str	r1, [r2, #0]
 8006152:	d1e0      	bne.n	8006116 <_free_r+0x26>
 8006154:	681c      	ldr	r4, [r3, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	6053      	str	r3, [r2, #4]
 800615a:	4421      	add	r1, r4
 800615c:	6011      	str	r1, [r2, #0]
 800615e:	e7da      	b.n	8006116 <_free_r+0x26>
 8006160:	d902      	bls.n	8006168 <_free_r+0x78>
 8006162:	230c      	movs	r3, #12
 8006164:	6003      	str	r3, [r0, #0]
 8006166:	e7d6      	b.n	8006116 <_free_r+0x26>
 8006168:	6825      	ldr	r5, [r4, #0]
 800616a:	1961      	adds	r1, r4, r5
 800616c:	428b      	cmp	r3, r1
 800616e:	bf04      	itt	eq
 8006170:	6819      	ldreq	r1, [r3, #0]
 8006172:	685b      	ldreq	r3, [r3, #4]
 8006174:	6063      	str	r3, [r4, #4]
 8006176:	bf04      	itt	eq
 8006178:	1949      	addeq	r1, r1, r5
 800617a:	6021      	streq	r1, [r4, #0]
 800617c:	6054      	str	r4, [r2, #4]
 800617e:	e7ca      	b.n	8006116 <_free_r+0x26>
 8006180:	b003      	add	sp, #12
 8006182:	bd30      	pop	{r4, r5, pc}
 8006184:	20000394 	.word	0x20000394

08006188 <sbrk_aligned>:
 8006188:	b570      	push	{r4, r5, r6, lr}
 800618a:	4e0e      	ldr	r6, [pc, #56]	; (80061c4 <sbrk_aligned+0x3c>)
 800618c:	460c      	mov	r4, r1
 800618e:	6831      	ldr	r1, [r6, #0]
 8006190:	4605      	mov	r5, r0
 8006192:	b911      	cbnz	r1, 800619a <sbrk_aligned+0x12>
 8006194:	f000 f9f0 	bl	8006578 <_sbrk_r>
 8006198:	6030      	str	r0, [r6, #0]
 800619a:	4621      	mov	r1, r4
 800619c:	4628      	mov	r0, r5
 800619e:	f000 f9eb 	bl	8006578 <_sbrk_r>
 80061a2:	1c43      	adds	r3, r0, #1
 80061a4:	d00a      	beq.n	80061bc <sbrk_aligned+0x34>
 80061a6:	1cc4      	adds	r4, r0, #3
 80061a8:	f024 0403 	bic.w	r4, r4, #3
 80061ac:	42a0      	cmp	r0, r4
 80061ae:	d007      	beq.n	80061c0 <sbrk_aligned+0x38>
 80061b0:	1a21      	subs	r1, r4, r0
 80061b2:	4628      	mov	r0, r5
 80061b4:	f000 f9e0 	bl	8006578 <_sbrk_r>
 80061b8:	3001      	adds	r0, #1
 80061ba:	d101      	bne.n	80061c0 <sbrk_aligned+0x38>
 80061bc:	f04f 34ff 	mov.w	r4, #4294967295
 80061c0:	4620      	mov	r0, r4
 80061c2:	bd70      	pop	{r4, r5, r6, pc}
 80061c4:	20000398 	.word	0x20000398

080061c8 <_malloc_r>:
 80061c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061cc:	1ccd      	adds	r5, r1, #3
 80061ce:	f025 0503 	bic.w	r5, r5, #3
 80061d2:	3508      	adds	r5, #8
 80061d4:	2d0c      	cmp	r5, #12
 80061d6:	bf38      	it	cc
 80061d8:	250c      	movcc	r5, #12
 80061da:	2d00      	cmp	r5, #0
 80061dc:	4607      	mov	r7, r0
 80061de:	db01      	blt.n	80061e4 <_malloc_r+0x1c>
 80061e0:	42a9      	cmp	r1, r5
 80061e2:	d905      	bls.n	80061f0 <_malloc_r+0x28>
 80061e4:	230c      	movs	r3, #12
 80061e6:	603b      	str	r3, [r7, #0]
 80061e8:	2600      	movs	r6, #0
 80061ea:	4630      	mov	r0, r6
 80061ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061f0:	4e2e      	ldr	r6, [pc, #184]	; (80062ac <_malloc_r+0xe4>)
 80061f2:	f000 fa3d 	bl	8006670 <__malloc_lock>
 80061f6:	6833      	ldr	r3, [r6, #0]
 80061f8:	461c      	mov	r4, r3
 80061fa:	bb34      	cbnz	r4, 800624a <_malloc_r+0x82>
 80061fc:	4629      	mov	r1, r5
 80061fe:	4638      	mov	r0, r7
 8006200:	f7ff ffc2 	bl	8006188 <sbrk_aligned>
 8006204:	1c43      	adds	r3, r0, #1
 8006206:	4604      	mov	r4, r0
 8006208:	d14d      	bne.n	80062a6 <_malloc_r+0xde>
 800620a:	6834      	ldr	r4, [r6, #0]
 800620c:	4626      	mov	r6, r4
 800620e:	2e00      	cmp	r6, #0
 8006210:	d140      	bne.n	8006294 <_malloc_r+0xcc>
 8006212:	6823      	ldr	r3, [r4, #0]
 8006214:	4631      	mov	r1, r6
 8006216:	4638      	mov	r0, r7
 8006218:	eb04 0803 	add.w	r8, r4, r3
 800621c:	f000 f9ac 	bl	8006578 <_sbrk_r>
 8006220:	4580      	cmp	r8, r0
 8006222:	d13a      	bne.n	800629a <_malloc_r+0xd2>
 8006224:	6821      	ldr	r1, [r4, #0]
 8006226:	3503      	adds	r5, #3
 8006228:	1a6d      	subs	r5, r5, r1
 800622a:	f025 0503 	bic.w	r5, r5, #3
 800622e:	3508      	adds	r5, #8
 8006230:	2d0c      	cmp	r5, #12
 8006232:	bf38      	it	cc
 8006234:	250c      	movcc	r5, #12
 8006236:	4629      	mov	r1, r5
 8006238:	4638      	mov	r0, r7
 800623a:	f7ff ffa5 	bl	8006188 <sbrk_aligned>
 800623e:	3001      	adds	r0, #1
 8006240:	d02b      	beq.n	800629a <_malloc_r+0xd2>
 8006242:	6823      	ldr	r3, [r4, #0]
 8006244:	442b      	add	r3, r5
 8006246:	6023      	str	r3, [r4, #0]
 8006248:	e00e      	b.n	8006268 <_malloc_r+0xa0>
 800624a:	6822      	ldr	r2, [r4, #0]
 800624c:	1b52      	subs	r2, r2, r5
 800624e:	d41e      	bmi.n	800628e <_malloc_r+0xc6>
 8006250:	2a0b      	cmp	r2, #11
 8006252:	d916      	bls.n	8006282 <_malloc_r+0xba>
 8006254:	1961      	adds	r1, r4, r5
 8006256:	42a3      	cmp	r3, r4
 8006258:	6025      	str	r5, [r4, #0]
 800625a:	bf18      	it	ne
 800625c:	6059      	strne	r1, [r3, #4]
 800625e:	6863      	ldr	r3, [r4, #4]
 8006260:	bf08      	it	eq
 8006262:	6031      	streq	r1, [r6, #0]
 8006264:	5162      	str	r2, [r4, r5]
 8006266:	604b      	str	r3, [r1, #4]
 8006268:	4638      	mov	r0, r7
 800626a:	f104 060b 	add.w	r6, r4, #11
 800626e:	f000 fa05 	bl	800667c <__malloc_unlock>
 8006272:	f026 0607 	bic.w	r6, r6, #7
 8006276:	1d23      	adds	r3, r4, #4
 8006278:	1af2      	subs	r2, r6, r3
 800627a:	d0b6      	beq.n	80061ea <_malloc_r+0x22>
 800627c:	1b9b      	subs	r3, r3, r6
 800627e:	50a3      	str	r3, [r4, r2]
 8006280:	e7b3      	b.n	80061ea <_malloc_r+0x22>
 8006282:	6862      	ldr	r2, [r4, #4]
 8006284:	42a3      	cmp	r3, r4
 8006286:	bf0c      	ite	eq
 8006288:	6032      	streq	r2, [r6, #0]
 800628a:	605a      	strne	r2, [r3, #4]
 800628c:	e7ec      	b.n	8006268 <_malloc_r+0xa0>
 800628e:	4623      	mov	r3, r4
 8006290:	6864      	ldr	r4, [r4, #4]
 8006292:	e7b2      	b.n	80061fa <_malloc_r+0x32>
 8006294:	4634      	mov	r4, r6
 8006296:	6876      	ldr	r6, [r6, #4]
 8006298:	e7b9      	b.n	800620e <_malloc_r+0x46>
 800629a:	230c      	movs	r3, #12
 800629c:	603b      	str	r3, [r7, #0]
 800629e:	4638      	mov	r0, r7
 80062a0:	f000 f9ec 	bl	800667c <__malloc_unlock>
 80062a4:	e7a1      	b.n	80061ea <_malloc_r+0x22>
 80062a6:	6025      	str	r5, [r4, #0]
 80062a8:	e7de      	b.n	8006268 <_malloc_r+0xa0>
 80062aa:	bf00      	nop
 80062ac:	20000394 	.word	0x20000394

080062b0 <__ssputs_r>:
 80062b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062b4:	688e      	ldr	r6, [r1, #8]
 80062b6:	429e      	cmp	r6, r3
 80062b8:	4682      	mov	sl, r0
 80062ba:	460c      	mov	r4, r1
 80062bc:	4690      	mov	r8, r2
 80062be:	461f      	mov	r7, r3
 80062c0:	d838      	bhi.n	8006334 <__ssputs_r+0x84>
 80062c2:	898a      	ldrh	r2, [r1, #12]
 80062c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80062c8:	d032      	beq.n	8006330 <__ssputs_r+0x80>
 80062ca:	6825      	ldr	r5, [r4, #0]
 80062cc:	6909      	ldr	r1, [r1, #16]
 80062ce:	eba5 0901 	sub.w	r9, r5, r1
 80062d2:	6965      	ldr	r5, [r4, #20]
 80062d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80062d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80062dc:	3301      	adds	r3, #1
 80062de:	444b      	add	r3, r9
 80062e0:	106d      	asrs	r5, r5, #1
 80062e2:	429d      	cmp	r5, r3
 80062e4:	bf38      	it	cc
 80062e6:	461d      	movcc	r5, r3
 80062e8:	0553      	lsls	r3, r2, #21
 80062ea:	d531      	bpl.n	8006350 <__ssputs_r+0xa0>
 80062ec:	4629      	mov	r1, r5
 80062ee:	f7ff ff6b 	bl	80061c8 <_malloc_r>
 80062f2:	4606      	mov	r6, r0
 80062f4:	b950      	cbnz	r0, 800630c <__ssputs_r+0x5c>
 80062f6:	230c      	movs	r3, #12
 80062f8:	f8ca 3000 	str.w	r3, [sl]
 80062fc:	89a3      	ldrh	r3, [r4, #12]
 80062fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006302:	81a3      	strh	r3, [r4, #12]
 8006304:	f04f 30ff 	mov.w	r0, #4294967295
 8006308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800630c:	6921      	ldr	r1, [r4, #16]
 800630e:	464a      	mov	r2, r9
 8006310:	f7fc faac 	bl	800286c <memcpy>
 8006314:	89a3      	ldrh	r3, [r4, #12]
 8006316:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800631a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800631e:	81a3      	strh	r3, [r4, #12]
 8006320:	6126      	str	r6, [r4, #16]
 8006322:	6165      	str	r5, [r4, #20]
 8006324:	444e      	add	r6, r9
 8006326:	eba5 0509 	sub.w	r5, r5, r9
 800632a:	6026      	str	r6, [r4, #0]
 800632c:	60a5      	str	r5, [r4, #8]
 800632e:	463e      	mov	r6, r7
 8006330:	42be      	cmp	r6, r7
 8006332:	d900      	bls.n	8006336 <__ssputs_r+0x86>
 8006334:	463e      	mov	r6, r7
 8006336:	6820      	ldr	r0, [r4, #0]
 8006338:	4632      	mov	r2, r6
 800633a:	4641      	mov	r1, r8
 800633c:	f000 f97e 	bl	800663c <memmove>
 8006340:	68a3      	ldr	r3, [r4, #8]
 8006342:	1b9b      	subs	r3, r3, r6
 8006344:	60a3      	str	r3, [r4, #8]
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	4433      	add	r3, r6
 800634a:	6023      	str	r3, [r4, #0]
 800634c:	2000      	movs	r0, #0
 800634e:	e7db      	b.n	8006308 <__ssputs_r+0x58>
 8006350:	462a      	mov	r2, r5
 8006352:	f000 f999 	bl	8006688 <_realloc_r>
 8006356:	4606      	mov	r6, r0
 8006358:	2800      	cmp	r0, #0
 800635a:	d1e1      	bne.n	8006320 <__ssputs_r+0x70>
 800635c:	6921      	ldr	r1, [r4, #16]
 800635e:	4650      	mov	r0, sl
 8006360:	f7ff fec6 	bl	80060f0 <_free_r>
 8006364:	e7c7      	b.n	80062f6 <__ssputs_r+0x46>
	...

08006368 <_svfiprintf_r>:
 8006368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800636c:	4698      	mov	r8, r3
 800636e:	898b      	ldrh	r3, [r1, #12]
 8006370:	061b      	lsls	r3, r3, #24
 8006372:	b09d      	sub	sp, #116	; 0x74
 8006374:	4607      	mov	r7, r0
 8006376:	460d      	mov	r5, r1
 8006378:	4614      	mov	r4, r2
 800637a:	d50e      	bpl.n	800639a <_svfiprintf_r+0x32>
 800637c:	690b      	ldr	r3, [r1, #16]
 800637e:	b963      	cbnz	r3, 800639a <_svfiprintf_r+0x32>
 8006380:	2140      	movs	r1, #64	; 0x40
 8006382:	f7ff ff21 	bl	80061c8 <_malloc_r>
 8006386:	6028      	str	r0, [r5, #0]
 8006388:	6128      	str	r0, [r5, #16]
 800638a:	b920      	cbnz	r0, 8006396 <_svfiprintf_r+0x2e>
 800638c:	230c      	movs	r3, #12
 800638e:	603b      	str	r3, [r7, #0]
 8006390:	f04f 30ff 	mov.w	r0, #4294967295
 8006394:	e0d1      	b.n	800653a <_svfiprintf_r+0x1d2>
 8006396:	2340      	movs	r3, #64	; 0x40
 8006398:	616b      	str	r3, [r5, #20]
 800639a:	2300      	movs	r3, #0
 800639c:	9309      	str	r3, [sp, #36]	; 0x24
 800639e:	2320      	movs	r3, #32
 80063a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80063a8:	2330      	movs	r3, #48	; 0x30
 80063aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006554 <_svfiprintf_r+0x1ec>
 80063ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063b2:	f04f 0901 	mov.w	r9, #1
 80063b6:	4623      	mov	r3, r4
 80063b8:	469a      	mov	sl, r3
 80063ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063be:	b10a      	cbz	r2, 80063c4 <_svfiprintf_r+0x5c>
 80063c0:	2a25      	cmp	r2, #37	; 0x25
 80063c2:	d1f9      	bne.n	80063b8 <_svfiprintf_r+0x50>
 80063c4:	ebba 0b04 	subs.w	fp, sl, r4
 80063c8:	d00b      	beq.n	80063e2 <_svfiprintf_r+0x7a>
 80063ca:	465b      	mov	r3, fp
 80063cc:	4622      	mov	r2, r4
 80063ce:	4629      	mov	r1, r5
 80063d0:	4638      	mov	r0, r7
 80063d2:	f7ff ff6d 	bl	80062b0 <__ssputs_r>
 80063d6:	3001      	adds	r0, #1
 80063d8:	f000 80aa 	beq.w	8006530 <_svfiprintf_r+0x1c8>
 80063dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063de:	445a      	add	r2, fp
 80063e0:	9209      	str	r2, [sp, #36]	; 0x24
 80063e2:	f89a 3000 	ldrb.w	r3, [sl]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f000 80a2 	beq.w	8006530 <_svfiprintf_r+0x1c8>
 80063ec:	2300      	movs	r3, #0
 80063ee:	f04f 32ff 	mov.w	r2, #4294967295
 80063f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063f6:	f10a 0a01 	add.w	sl, sl, #1
 80063fa:	9304      	str	r3, [sp, #16]
 80063fc:	9307      	str	r3, [sp, #28]
 80063fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006402:	931a      	str	r3, [sp, #104]	; 0x68
 8006404:	4654      	mov	r4, sl
 8006406:	2205      	movs	r2, #5
 8006408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800640c:	4851      	ldr	r0, [pc, #324]	; (8006554 <_svfiprintf_r+0x1ec>)
 800640e:	f7f9 febf 	bl	8000190 <memchr>
 8006412:	9a04      	ldr	r2, [sp, #16]
 8006414:	b9d8      	cbnz	r0, 800644e <_svfiprintf_r+0xe6>
 8006416:	06d0      	lsls	r0, r2, #27
 8006418:	bf44      	itt	mi
 800641a:	2320      	movmi	r3, #32
 800641c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006420:	0711      	lsls	r1, r2, #28
 8006422:	bf44      	itt	mi
 8006424:	232b      	movmi	r3, #43	; 0x2b
 8006426:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800642a:	f89a 3000 	ldrb.w	r3, [sl]
 800642e:	2b2a      	cmp	r3, #42	; 0x2a
 8006430:	d015      	beq.n	800645e <_svfiprintf_r+0xf6>
 8006432:	9a07      	ldr	r2, [sp, #28]
 8006434:	4654      	mov	r4, sl
 8006436:	2000      	movs	r0, #0
 8006438:	f04f 0c0a 	mov.w	ip, #10
 800643c:	4621      	mov	r1, r4
 800643e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006442:	3b30      	subs	r3, #48	; 0x30
 8006444:	2b09      	cmp	r3, #9
 8006446:	d94e      	bls.n	80064e6 <_svfiprintf_r+0x17e>
 8006448:	b1b0      	cbz	r0, 8006478 <_svfiprintf_r+0x110>
 800644a:	9207      	str	r2, [sp, #28]
 800644c:	e014      	b.n	8006478 <_svfiprintf_r+0x110>
 800644e:	eba0 0308 	sub.w	r3, r0, r8
 8006452:	fa09 f303 	lsl.w	r3, r9, r3
 8006456:	4313      	orrs	r3, r2
 8006458:	9304      	str	r3, [sp, #16]
 800645a:	46a2      	mov	sl, r4
 800645c:	e7d2      	b.n	8006404 <_svfiprintf_r+0x9c>
 800645e:	9b03      	ldr	r3, [sp, #12]
 8006460:	1d19      	adds	r1, r3, #4
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	9103      	str	r1, [sp, #12]
 8006466:	2b00      	cmp	r3, #0
 8006468:	bfbb      	ittet	lt
 800646a:	425b      	neglt	r3, r3
 800646c:	f042 0202 	orrlt.w	r2, r2, #2
 8006470:	9307      	strge	r3, [sp, #28]
 8006472:	9307      	strlt	r3, [sp, #28]
 8006474:	bfb8      	it	lt
 8006476:	9204      	strlt	r2, [sp, #16]
 8006478:	7823      	ldrb	r3, [r4, #0]
 800647a:	2b2e      	cmp	r3, #46	; 0x2e
 800647c:	d10c      	bne.n	8006498 <_svfiprintf_r+0x130>
 800647e:	7863      	ldrb	r3, [r4, #1]
 8006480:	2b2a      	cmp	r3, #42	; 0x2a
 8006482:	d135      	bne.n	80064f0 <_svfiprintf_r+0x188>
 8006484:	9b03      	ldr	r3, [sp, #12]
 8006486:	1d1a      	adds	r2, r3, #4
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	9203      	str	r2, [sp, #12]
 800648c:	2b00      	cmp	r3, #0
 800648e:	bfb8      	it	lt
 8006490:	f04f 33ff 	movlt.w	r3, #4294967295
 8006494:	3402      	adds	r4, #2
 8006496:	9305      	str	r3, [sp, #20]
 8006498:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006564 <_svfiprintf_r+0x1fc>
 800649c:	7821      	ldrb	r1, [r4, #0]
 800649e:	2203      	movs	r2, #3
 80064a0:	4650      	mov	r0, sl
 80064a2:	f7f9 fe75 	bl	8000190 <memchr>
 80064a6:	b140      	cbz	r0, 80064ba <_svfiprintf_r+0x152>
 80064a8:	2340      	movs	r3, #64	; 0x40
 80064aa:	eba0 000a 	sub.w	r0, r0, sl
 80064ae:	fa03 f000 	lsl.w	r0, r3, r0
 80064b2:	9b04      	ldr	r3, [sp, #16]
 80064b4:	4303      	orrs	r3, r0
 80064b6:	3401      	adds	r4, #1
 80064b8:	9304      	str	r3, [sp, #16]
 80064ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064be:	4826      	ldr	r0, [pc, #152]	; (8006558 <_svfiprintf_r+0x1f0>)
 80064c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064c4:	2206      	movs	r2, #6
 80064c6:	f7f9 fe63 	bl	8000190 <memchr>
 80064ca:	2800      	cmp	r0, #0
 80064cc:	d038      	beq.n	8006540 <_svfiprintf_r+0x1d8>
 80064ce:	4b23      	ldr	r3, [pc, #140]	; (800655c <_svfiprintf_r+0x1f4>)
 80064d0:	bb1b      	cbnz	r3, 800651a <_svfiprintf_r+0x1b2>
 80064d2:	9b03      	ldr	r3, [sp, #12]
 80064d4:	3307      	adds	r3, #7
 80064d6:	f023 0307 	bic.w	r3, r3, #7
 80064da:	3308      	adds	r3, #8
 80064dc:	9303      	str	r3, [sp, #12]
 80064de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064e0:	4433      	add	r3, r6
 80064e2:	9309      	str	r3, [sp, #36]	; 0x24
 80064e4:	e767      	b.n	80063b6 <_svfiprintf_r+0x4e>
 80064e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80064ea:	460c      	mov	r4, r1
 80064ec:	2001      	movs	r0, #1
 80064ee:	e7a5      	b.n	800643c <_svfiprintf_r+0xd4>
 80064f0:	2300      	movs	r3, #0
 80064f2:	3401      	adds	r4, #1
 80064f4:	9305      	str	r3, [sp, #20]
 80064f6:	4619      	mov	r1, r3
 80064f8:	f04f 0c0a 	mov.w	ip, #10
 80064fc:	4620      	mov	r0, r4
 80064fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006502:	3a30      	subs	r2, #48	; 0x30
 8006504:	2a09      	cmp	r2, #9
 8006506:	d903      	bls.n	8006510 <_svfiprintf_r+0x1a8>
 8006508:	2b00      	cmp	r3, #0
 800650a:	d0c5      	beq.n	8006498 <_svfiprintf_r+0x130>
 800650c:	9105      	str	r1, [sp, #20]
 800650e:	e7c3      	b.n	8006498 <_svfiprintf_r+0x130>
 8006510:	fb0c 2101 	mla	r1, ip, r1, r2
 8006514:	4604      	mov	r4, r0
 8006516:	2301      	movs	r3, #1
 8006518:	e7f0      	b.n	80064fc <_svfiprintf_r+0x194>
 800651a:	ab03      	add	r3, sp, #12
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	462a      	mov	r2, r5
 8006520:	4b0f      	ldr	r3, [pc, #60]	; (8006560 <_svfiprintf_r+0x1f8>)
 8006522:	a904      	add	r1, sp, #16
 8006524:	4638      	mov	r0, r7
 8006526:	f7fc fa57 	bl	80029d8 <_printf_float>
 800652a:	1c42      	adds	r2, r0, #1
 800652c:	4606      	mov	r6, r0
 800652e:	d1d6      	bne.n	80064de <_svfiprintf_r+0x176>
 8006530:	89ab      	ldrh	r3, [r5, #12]
 8006532:	065b      	lsls	r3, r3, #25
 8006534:	f53f af2c 	bmi.w	8006390 <_svfiprintf_r+0x28>
 8006538:	9809      	ldr	r0, [sp, #36]	; 0x24
 800653a:	b01d      	add	sp, #116	; 0x74
 800653c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006540:	ab03      	add	r3, sp, #12
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	462a      	mov	r2, r5
 8006546:	4b06      	ldr	r3, [pc, #24]	; (8006560 <_svfiprintf_r+0x1f8>)
 8006548:	a904      	add	r1, sp, #16
 800654a:	4638      	mov	r0, r7
 800654c:	f7fc fce8 	bl	8002f20 <_printf_i>
 8006550:	e7eb      	b.n	800652a <_svfiprintf_r+0x1c2>
 8006552:	bf00      	nop
 8006554:	08008f0c 	.word	0x08008f0c
 8006558:	08008f16 	.word	0x08008f16
 800655c:	080029d9 	.word	0x080029d9
 8006560:	080062b1 	.word	0x080062b1
 8006564:	08008f12 	.word	0x08008f12

08006568 <nan>:
 8006568:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006570 <nan+0x8>
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	00000000 	.word	0x00000000
 8006574:	7ff80000 	.word	0x7ff80000

08006578 <_sbrk_r>:
 8006578:	b538      	push	{r3, r4, r5, lr}
 800657a:	4d06      	ldr	r5, [pc, #24]	; (8006594 <_sbrk_r+0x1c>)
 800657c:	2300      	movs	r3, #0
 800657e:	4604      	mov	r4, r0
 8006580:	4608      	mov	r0, r1
 8006582:	602b      	str	r3, [r5, #0]
 8006584:	f7fa ffaa 	bl	80014dc <_sbrk>
 8006588:	1c43      	adds	r3, r0, #1
 800658a:	d102      	bne.n	8006592 <_sbrk_r+0x1a>
 800658c:	682b      	ldr	r3, [r5, #0]
 800658e:	b103      	cbz	r3, 8006592 <_sbrk_r+0x1a>
 8006590:	6023      	str	r3, [r4, #0]
 8006592:	bd38      	pop	{r3, r4, r5, pc}
 8006594:	2000039c 	.word	0x2000039c

08006598 <strncmp>:
 8006598:	b510      	push	{r4, lr}
 800659a:	b17a      	cbz	r2, 80065bc <strncmp+0x24>
 800659c:	4603      	mov	r3, r0
 800659e:	3901      	subs	r1, #1
 80065a0:	1884      	adds	r4, r0, r2
 80065a2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80065a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80065aa:	4290      	cmp	r0, r2
 80065ac:	d101      	bne.n	80065b2 <strncmp+0x1a>
 80065ae:	42a3      	cmp	r3, r4
 80065b0:	d101      	bne.n	80065b6 <strncmp+0x1e>
 80065b2:	1a80      	subs	r0, r0, r2
 80065b4:	bd10      	pop	{r4, pc}
 80065b6:	2800      	cmp	r0, #0
 80065b8:	d1f3      	bne.n	80065a2 <strncmp+0xa>
 80065ba:	e7fa      	b.n	80065b2 <strncmp+0x1a>
 80065bc:	4610      	mov	r0, r2
 80065be:	e7f9      	b.n	80065b4 <strncmp+0x1c>

080065c0 <__ascii_wctomb>:
 80065c0:	b149      	cbz	r1, 80065d6 <__ascii_wctomb+0x16>
 80065c2:	2aff      	cmp	r2, #255	; 0xff
 80065c4:	bf85      	ittet	hi
 80065c6:	238a      	movhi	r3, #138	; 0x8a
 80065c8:	6003      	strhi	r3, [r0, #0]
 80065ca:	700a      	strbls	r2, [r1, #0]
 80065cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80065d0:	bf98      	it	ls
 80065d2:	2001      	movls	r0, #1
 80065d4:	4770      	bx	lr
 80065d6:	4608      	mov	r0, r1
 80065d8:	4770      	bx	lr
	...

080065dc <__assert_func>:
 80065dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80065de:	4614      	mov	r4, r2
 80065e0:	461a      	mov	r2, r3
 80065e2:	4b09      	ldr	r3, [pc, #36]	; (8006608 <__assert_func+0x2c>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4605      	mov	r5, r0
 80065e8:	68d8      	ldr	r0, [r3, #12]
 80065ea:	b14c      	cbz	r4, 8006600 <__assert_func+0x24>
 80065ec:	4b07      	ldr	r3, [pc, #28]	; (800660c <__assert_func+0x30>)
 80065ee:	9100      	str	r1, [sp, #0]
 80065f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80065f4:	4906      	ldr	r1, [pc, #24]	; (8006610 <__assert_func+0x34>)
 80065f6:	462b      	mov	r3, r5
 80065f8:	f000 f80e 	bl	8006618 <fiprintf>
 80065fc:	f000 fa8c 	bl	8006b18 <abort>
 8006600:	4b04      	ldr	r3, [pc, #16]	; (8006614 <__assert_func+0x38>)
 8006602:	461c      	mov	r4, r3
 8006604:	e7f3      	b.n	80065ee <__assert_func+0x12>
 8006606:	bf00      	nop
 8006608:	20000010 	.word	0x20000010
 800660c:	08008f1d 	.word	0x08008f1d
 8006610:	08008f2a 	.word	0x08008f2a
 8006614:	08008f58 	.word	0x08008f58

08006618 <fiprintf>:
 8006618:	b40e      	push	{r1, r2, r3}
 800661a:	b503      	push	{r0, r1, lr}
 800661c:	4601      	mov	r1, r0
 800661e:	ab03      	add	r3, sp, #12
 8006620:	4805      	ldr	r0, [pc, #20]	; (8006638 <fiprintf+0x20>)
 8006622:	f853 2b04 	ldr.w	r2, [r3], #4
 8006626:	6800      	ldr	r0, [r0, #0]
 8006628:	9301      	str	r3, [sp, #4]
 800662a:	f000 f885 	bl	8006738 <_vfiprintf_r>
 800662e:	b002      	add	sp, #8
 8006630:	f85d eb04 	ldr.w	lr, [sp], #4
 8006634:	b003      	add	sp, #12
 8006636:	4770      	bx	lr
 8006638:	20000010 	.word	0x20000010

0800663c <memmove>:
 800663c:	4288      	cmp	r0, r1
 800663e:	b510      	push	{r4, lr}
 8006640:	eb01 0402 	add.w	r4, r1, r2
 8006644:	d902      	bls.n	800664c <memmove+0x10>
 8006646:	4284      	cmp	r4, r0
 8006648:	4623      	mov	r3, r4
 800664a:	d807      	bhi.n	800665c <memmove+0x20>
 800664c:	1e43      	subs	r3, r0, #1
 800664e:	42a1      	cmp	r1, r4
 8006650:	d008      	beq.n	8006664 <memmove+0x28>
 8006652:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006656:	f803 2f01 	strb.w	r2, [r3, #1]!
 800665a:	e7f8      	b.n	800664e <memmove+0x12>
 800665c:	4402      	add	r2, r0
 800665e:	4601      	mov	r1, r0
 8006660:	428a      	cmp	r2, r1
 8006662:	d100      	bne.n	8006666 <memmove+0x2a>
 8006664:	bd10      	pop	{r4, pc}
 8006666:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800666a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800666e:	e7f7      	b.n	8006660 <memmove+0x24>

08006670 <__malloc_lock>:
 8006670:	4801      	ldr	r0, [pc, #4]	; (8006678 <__malloc_lock+0x8>)
 8006672:	f000 bc11 	b.w	8006e98 <__retarget_lock_acquire_recursive>
 8006676:	bf00      	nop
 8006678:	200003a0 	.word	0x200003a0

0800667c <__malloc_unlock>:
 800667c:	4801      	ldr	r0, [pc, #4]	; (8006684 <__malloc_unlock+0x8>)
 800667e:	f000 bc0c 	b.w	8006e9a <__retarget_lock_release_recursive>
 8006682:	bf00      	nop
 8006684:	200003a0 	.word	0x200003a0

08006688 <_realloc_r>:
 8006688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800668c:	4680      	mov	r8, r0
 800668e:	4614      	mov	r4, r2
 8006690:	460e      	mov	r6, r1
 8006692:	b921      	cbnz	r1, 800669e <_realloc_r+0x16>
 8006694:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006698:	4611      	mov	r1, r2
 800669a:	f7ff bd95 	b.w	80061c8 <_malloc_r>
 800669e:	b92a      	cbnz	r2, 80066ac <_realloc_r+0x24>
 80066a0:	f7ff fd26 	bl	80060f0 <_free_r>
 80066a4:	4625      	mov	r5, r4
 80066a6:	4628      	mov	r0, r5
 80066a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066ac:	f000 fc5c 	bl	8006f68 <_malloc_usable_size_r>
 80066b0:	4284      	cmp	r4, r0
 80066b2:	4607      	mov	r7, r0
 80066b4:	d802      	bhi.n	80066bc <_realloc_r+0x34>
 80066b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80066ba:	d812      	bhi.n	80066e2 <_realloc_r+0x5a>
 80066bc:	4621      	mov	r1, r4
 80066be:	4640      	mov	r0, r8
 80066c0:	f7ff fd82 	bl	80061c8 <_malloc_r>
 80066c4:	4605      	mov	r5, r0
 80066c6:	2800      	cmp	r0, #0
 80066c8:	d0ed      	beq.n	80066a6 <_realloc_r+0x1e>
 80066ca:	42bc      	cmp	r4, r7
 80066cc:	4622      	mov	r2, r4
 80066ce:	4631      	mov	r1, r6
 80066d0:	bf28      	it	cs
 80066d2:	463a      	movcs	r2, r7
 80066d4:	f7fc f8ca 	bl	800286c <memcpy>
 80066d8:	4631      	mov	r1, r6
 80066da:	4640      	mov	r0, r8
 80066dc:	f7ff fd08 	bl	80060f0 <_free_r>
 80066e0:	e7e1      	b.n	80066a6 <_realloc_r+0x1e>
 80066e2:	4635      	mov	r5, r6
 80066e4:	e7df      	b.n	80066a6 <_realloc_r+0x1e>

080066e6 <__sfputc_r>:
 80066e6:	6893      	ldr	r3, [r2, #8]
 80066e8:	3b01      	subs	r3, #1
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	b410      	push	{r4}
 80066ee:	6093      	str	r3, [r2, #8]
 80066f0:	da08      	bge.n	8006704 <__sfputc_r+0x1e>
 80066f2:	6994      	ldr	r4, [r2, #24]
 80066f4:	42a3      	cmp	r3, r4
 80066f6:	db01      	blt.n	80066fc <__sfputc_r+0x16>
 80066f8:	290a      	cmp	r1, #10
 80066fa:	d103      	bne.n	8006704 <__sfputc_r+0x1e>
 80066fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006700:	f000 b94a 	b.w	8006998 <__swbuf_r>
 8006704:	6813      	ldr	r3, [r2, #0]
 8006706:	1c58      	adds	r0, r3, #1
 8006708:	6010      	str	r0, [r2, #0]
 800670a:	7019      	strb	r1, [r3, #0]
 800670c:	4608      	mov	r0, r1
 800670e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006712:	4770      	bx	lr

08006714 <__sfputs_r>:
 8006714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006716:	4606      	mov	r6, r0
 8006718:	460f      	mov	r7, r1
 800671a:	4614      	mov	r4, r2
 800671c:	18d5      	adds	r5, r2, r3
 800671e:	42ac      	cmp	r4, r5
 8006720:	d101      	bne.n	8006726 <__sfputs_r+0x12>
 8006722:	2000      	movs	r0, #0
 8006724:	e007      	b.n	8006736 <__sfputs_r+0x22>
 8006726:	f814 1b01 	ldrb.w	r1, [r4], #1
 800672a:	463a      	mov	r2, r7
 800672c:	4630      	mov	r0, r6
 800672e:	f7ff ffda 	bl	80066e6 <__sfputc_r>
 8006732:	1c43      	adds	r3, r0, #1
 8006734:	d1f3      	bne.n	800671e <__sfputs_r+0xa>
 8006736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006738 <_vfiprintf_r>:
 8006738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800673c:	460d      	mov	r5, r1
 800673e:	b09d      	sub	sp, #116	; 0x74
 8006740:	4614      	mov	r4, r2
 8006742:	4698      	mov	r8, r3
 8006744:	4606      	mov	r6, r0
 8006746:	b118      	cbz	r0, 8006750 <_vfiprintf_r+0x18>
 8006748:	6983      	ldr	r3, [r0, #24]
 800674a:	b90b      	cbnz	r3, 8006750 <_vfiprintf_r+0x18>
 800674c:	f000 fb06 	bl	8006d5c <__sinit>
 8006750:	4b89      	ldr	r3, [pc, #548]	; (8006978 <_vfiprintf_r+0x240>)
 8006752:	429d      	cmp	r5, r3
 8006754:	d11b      	bne.n	800678e <_vfiprintf_r+0x56>
 8006756:	6875      	ldr	r5, [r6, #4]
 8006758:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800675a:	07d9      	lsls	r1, r3, #31
 800675c:	d405      	bmi.n	800676a <_vfiprintf_r+0x32>
 800675e:	89ab      	ldrh	r3, [r5, #12]
 8006760:	059a      	lsls	r2, r3, #22
 8006762:	d402      	bmi.n	800676a <_vfiprintf_r+0x32>
 8006764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006766:	f000 fb97 	bl	8006e98 <__retarget_lock_acquire_recursive>
 800676a:	89ab      	ldrh	r3, [r5, #12]
 800676c:	071b      	lsls	r3, r3, #28
 800676e:	d501      	bpl.n	8006774 <_vfiprintf_r+0x3c>
 8006770:	692b      	ldr	r3, [r5, #16]
 8006772:	b9eb      	cbnz	r3, 80067b0 <_vfiprintf_r+0x78>
 8006774:	4629      	mov	r1, r5
 8006776:	4630      	mov	r0, r6
 8006778:	f000 f960 	bl	8006a3c <__swsetup_r>
 800677c:	b1c0      	cbz	r0, 80067b0 <_vfiprintf_r+0x78>
 800677e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006780:	07dc      	lsls	r4, r3, #31
 8006782:	d50e      	bpl.n	80067a2 <_vfiprintf_r+0x6a>
 8006784:	f04f 30ff 	mov.w	r0, #4294967295
 8006788:	b01d      	add	sp, #116	; 0x74
 800678a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800678e:	4b7b      	ldr	r3, [pc, #492]	; (800697c <_vfiprintf_r+0x244>)
 8006790:	429d      	cmp	r5, r3
 8006792:	d101      	bne.n	8006798 <_vfiprintf_r+0x60>
 8006794:	68b5      	ldr	r5, [r6, #8]
 8006796:	e7df      	b.n	8006758 <_vfiprintf_r+0x20>
 8006798:	4b79      	ldr	r3, [pc, #484]	; (8006980 <_vfiprintf_r+0x248>)
 800679a:	429d      	cmp	r5, r3
 800679c:	bf08      	it	eq
 800679e:	68f5      	ldreq	r5, [r6, #12]
 80067a0:	e7da      	b.n	8006758 <_vfiprintf_r+0x20>
 80067a2:	89ab      	ldrh	r3, [r5, #12]
 80067a4:	0598      	lsls	r0, r3, #22
 80067a6:	d4ed      	bmi.n	8006784 <_vfiprintf_r+0x4c>
 80067a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067aa:	f000 fb76 	bl	8006e9a <__retarget_lock_release_recursive>
 80067ae:	e7e9      	b.n	8006784 <_vfiprintf_r+0x4c>
 80067b0:	2300      	movs	r3, #0
 80067b2:	9309      	str	r3, [sp, #36]	; 0x24
 80067b4:	2320      	movs	r3, #32
 80067b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80067be:	2330      	movs	r3, #48	; 0x30
 80067c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006984 <_vfiprintf_r+0x24c>
 80067c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067c8:	f04f 0901 	mov.w	r9, #1
 80067cc:	4623      	mov	r3, r4
 80067ce:	469a      	mov	sl, r3
 80067d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067d4:	b10a      	cbz	r2, 80067da <_vfiprintf_r+0xa2>
 80067d6:	2a25      	cmp	r2, #37	; 0x25
 80067d8:	d1f9      	bne.n	80067ce <_vfiprintf_r+0x96>
 80067da:	ebba 0b04 	subs.w	fp, sl, r4
 80067de:	d00b      	beq.n	80067f8 <_vfiprintf_r+0xc0>
 80067e0:	465b      	mov	r3, fp
 80067e2:	4622      	mov	r2, r4
 80067e4:	4629      	mov	r1, r5
 80067e6:	4630      	mov	r0, r6
 80067e8:	f7ff ff94 	bl	8006714 <__sfputs_r>
 80067ec:	3001      	adds	r0, #1
 80067ee:	f000 80aa 	beq.w	8006946 <_vfiprintf_r+0x20e>
 80067f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067f4:	445a      	add	r2, fp
 80067f6:	9209      	str	r2, [sp, #36]	; 0x24
 80067f8:	f89a 3000 	ldrb.w	r3, [sl]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f000 80a2 	beq.w	8006946 <_vfiprintf_r+0x20e>
 8006802:	2300      	movs	r3, #0
 8006804:	f04f 32ff 	mov.w	r2, #4294967295
 8006808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800680c:	f10a 0a01 	add.w	sl, sl, #1
 8006810:	9304      	str	r3, [sp, #16]
 8006812:	9307      	str	r3, [sp, #28]
 8006814:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006818:	931a      	str	r3, [sp, #104]	; 0x68
 800681a:	4654      	mov	r4, sl
 800681c:	2205      	movs	r2, #5
 800681e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006822:	4858      	ldr	r0, [pc, #352]	; (8006984 <_vfiprintf_r+0x24c>)
 8006824:	f7f9 fcb4 	bl	8000190 <memchr>
 8006828:	9a04      	ldr	r2, [sp, #16]
 800682a:	b9d8      	cbnz	r0, 8006864 <_vfiprintf_r+0x12c>
 800682c:	06d1      	lsls	r1, r2, #27
 800682e:	bf44      	itt	mi
 8006830:	2320      	movmi	r3, #32
 8006832:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006836:	0713      	lsls	r3, r2, #28
 8006838:	bf44      	itt	mi
 800683a:	232b      	movmi	r3, #43	; 0x2b
 800683c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006840:	f89a 3000 	ldrb.w	r3, [sl]
 8006844:	2b2a      	cmp	r3, #42	; 0x2a
 8006846:	d015      	beq.n	8006874 <_vfiprintf_r+0x13c>
 8006848:	9a07      	ldr	r2, [sp, #28]
 800684a:	4654      	mov	r4, sl
 800684c:	2000      	movs	r0, #0
 800684e:	f04f 0c0a 	mov.w	ip, #10
 8006852:	4621      	mov	r1, r4
 8006854:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006858:	3b30      	subs	r3, #48	; 0x30
 800685a:	2b09      	cmp	r3, #9
 800685c:	d94e      	bls.n	80068fc <_vfiprintf_r+0x1c4>
 800685e:	b1b0      	cbz	r0, 800688e <_vfiprintf_r+0x156>
 8006860:	9207      	str	r2, [sp, #28]
 8006862:	e014      	b.n	800688e <_vfiprintf_r+0x156>
 8006864:	eba0 0308 	sub.w	r3, r0, r8
 8006868:	fa09 f303 	lsl.w	r3, r9, r3
 800686c:	4313      	orrs	r3, r2
 800686e:	9304      	str	r3, [sp, #16]
 8006870:	46a2      	mov	sl, r4
 8006872:	e7d2      	b.n	800681a <_vfiprintf_r+0xe2>
 8006874:	9b03      	ldr	r3, [sp, #12]
 8006876:	1d19      	adds	r1, r3, #4
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	9103      	str	r1, [sp, #12]
 800687c:	2b00      	cmp	r3, #0
 800687e:	bfbb      	ittet	lt
 8006880:	425b      	neglt	r3, r3
 8006882:	f042 0202 	orrlt.w	r2, r2, #2
 8006886:	9307      	strge	r3, [sp, #28]
 8006888:	9307      	strlt	r3, [sp, #28]
 800688a:	bfb8      	it	lt
 800688c:	9204      	strlt	r2, [sp, #16]
 800688e:	7823      	ldrb	r3, [r4, #0]
 8006890:	2b2e      	cmp	r3, #46	; 0x2e
 8006892:	d10c      	bne.n	80068ae <_vfiprintf_r+0x176>
 8006894:	7863      	ldrb	r3, [r4, #1]
 8006896:	2b2a      	cmp	r3, #42	; 0x2a
 8006898:	d135      	bne.n	8006906 <_vfiprintf_r+0x1ce>
 800689a:	9b03      	ldr	r3, [sp, #12]
 800689c:	1d1a      	adds	r2, r3, #4
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	9203      	str	r2, [sp, #12]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	bfb8      	it	lt
 80068a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80068aa:	3402      	adds	r4, #2
 80068ac:	9305      	str	r3, [sp, #20]
 80068ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006994 <_vfiprintf_r+0x25c>
 80068b2:	7821      	ldrb	r1, [r4, #0]
 80068b4:	2203      	movs	r2, #3
 80068b6:	4650      	mov	r0, sl
 80068b8:	f7f9 fc6a 	bl	8000190 <memchr>
 80068bc:	b140      	cbz	r0, 80068d0 <_vfiprintf_r+0x198>
 80068be:	2340      	movs	r3, #64	; 0x40
 80068c0:	eba0 000a 	sub.w	r0, r0, sl
 80068c4:	fa03 f000 	lsl.w	r0, r3, r0
 80068c8:	9b04      	ldr	r3, [sp, #16]
 80068ca:	4303      	orrs	r3, r0
 80068cc:	3401      	adds	r4, #1
 80068ce:	9304      	str	r3, [sp, #16]
 80068d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068d4:	482c      	ldr	r0, [pc, #176]	; (8006988 <_vfiprintf_r+0x250>)
 80068d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068da:	2206      	movs	r2, #6
 80068dc:	f7f9 fc58 	bl	8000190 <memchr>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	d03f      	beq.n	8006964 <_vfiprintf_r+0x22c>
 80068e4:	4b29      	ldr	r3, [pc, #164]	; (800698c <_vfiprintf_r+0x254>)
 80068e6:	bb1b      	cbnz	r3, 8006930 <_vfiprintf_r+0x1f8>
 80068e8:	9b03      	ldr	r3, [sp, #12]
 80068ea:	3307      	adds	r3, #7
 80068ec:	f023 0307 	bic.w	r3, r3, #7
 80068f0:	3308      	adds	r3, #8
 80068f2:	9303      	str	r3, [sp, #12]
 80068f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068f6:	443b      	add	r3, r7
 80068f8:	9309      	str	r3, [sp, #36]	; 0x24
 80068fa:	e767      	b.n	80067cc <_vfiprintf_r+0x94>
 80068fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006900:	460c      	mov	r4, r1
 8006902:	2001      	movs	r0, #1
 8006904:	e7a5      	b.n	8006852 <_vfiprintf_r+0x11a>
 8006906:	2300      	movs	r3, #0
 8006908:	3401      	adds	r4, #1
 800690a:	9305      	str	r3, [sp, #20]
 800690c:	4619      	mov	r1, r3
 800690e:	f04f 0c0a 	mov.w	ip, #10
 8006912:	4620      	mov	r0, r4
 8006914:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006918:	3a30      	subs	r2, #48	; 0x30
 800691a:	2a09      	cmp	r2, #9
 800691c:	d903      	bls.n	8006926 <_vfiprintf_r+0x1ee>
 800691e:	2b00      	cmp	r3, #0
 8006920:	d0c5      	beq.n	80068ae <_vfiprintf_r+0x176>
 8006922:	9105      	str	r1, [sp, #20]
 8006924:	e7c3      	b.n	80068ae <_vfiprintf_r+0x176>
 8006926:	fb0c 2101 	mla	r1, ip, r1, r2
 800692a:	4604      	mov	r4, r0
 800692c:	2301      	movs	r3, #1
 800692e:	e7f0      	b.n	8006912 <_vfiprintf_r+0x1da>
 8006930:	ab03      	add	r3, sp, #12
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	462a      	mov	r2, r5
 8006936:	4b16      	ldr	r3, [pc, #88]	; (8006990 <_vfiprintf_r+0x258>)
 8006938:	a904      	add	r1, sp, #16
 800693a:	4630      	mov	r0, r6
 800693c:	f7fc f84c 	bl	80029d8 <_printf_float>
 8006940:	4607      	mov	r7, r0
 8006942:	1c78      	adds	r0, r7, #1
 8006944:	d1d6      	bne.n	80068f4 <_vfiprintf_r+0x1bc>
 8006946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006948:	07d9      	lsls	r1, r3, #31
 800694a:	d405      	bmi.n	8006958 <_vfiprintf_r+0x220>
 800694c:	89ab      	ldrh	r3, [r5, #12]
 800694e:	059a      	lsls	r2, r3, #22
 8006950:	d402      	bmi.n	8006958 <_vfiprintf_r+0x220>
 8006952:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006954:	f000 faa1 	bl	8006e9a <__retarget_lock_release_recursive>
 8006958:	89ab      	ldrh	r3, [r5, #12]
 800695a:	065b      	lsls	r3, r3, #25
 800695c:	f53f af12 	bmi.w	8006784 <_vfiprintf_r+0x4c>
 8006960:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006962:	e711      	b.n	8006788 <_vfiprintf_r+0x50>
 8006964:	ab03      	add	r3, sp, #12
 8006966:	9300      	str	r3, [sp, #0]
 8006968:	462a      	mov	r2, r5
 800696a:	4b09      	ldr	r3, [pc, #36]	; (8006990 <_vfiprintf_r+0x258>)
 800696c:	a904      	add	r1, sp, #16
 800696e:	4630      	mov	r0, r6
 8006970:	f7fc fad6 	bl	8002f20 <_printf_i>
 8006974:	e7e4      	b.n	8006940 <_vfiprintf_r+0x208>
 8006976:	bf00      	nop
 8006978:	08008f7c 	.word	0x08008f7c
 800697c:	08008f9c 	.word	0x08008f9c
 8006980:	08008f5c 	.word	0x08008f5c
 8006984:	08008f0c 	.word	0x08008f0c
 8006988:	08008f16 	.word	0x08008f16
 800698c:	080029d9 	.word	0x080029d9
 8006990:	08006715 	.word	0x08006715
 8006994:	08008f12 	.word	0x08008f12

08006998 <__swbuf_r>:
 8006998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800699a:	460e      	mov	r6, r1
 800699c:	4614      	mov	r4, r2
 800699e:	4605      	mov	r5, r0
 80069a0:	b118      	cbz	r0, 80069aa <__swbuf_r+0x12>
 80069a2:	6983      	ldr	r3, [r0, #24]
 80069a4:	b90b      	cbnz	r3, 80069aa <__swbuf_r+0x12>
 80069a6:	f000 f9d9 	bl	8006d5c <__sinit>
 80069aa:	4b21      	ldr	r3, [pc, #132]	; (8006a30 <__swbuf_r+0x98>)
 80069ac:	429c      	cmp	r4, r3
 80069ae:	d12b      	bne.n	8006a08 <__swbuf_r+0x70>
 80069b0:	686c      	ldr	r4, [r5, #4]
 80069b2:	69a3      	ldr	r3, [r4, #24]
 80069b4:	60a3      	str	r3, [r4, #8]
 80069b6:	89a3      	ldrh	r3, [r4, #12]
 80069b8:	071a      	lsls	r2, r3, #28
 80069ba:	d52f      	bpl.n	8006a1c <__swbuf_r+0x84>
 80069bc:	6923      	ldr	r3, [r4, #16]
 80069be:	b36b      	cbz	r3, 8006a1c <__swbuf_r+0x84>
 80069c0:	6923      	ldr	r3, [r4, #16]
 80069c2:	6820      	ldr	r0, [r4, #0]
 80069c4:	1ac0      	subs	r0, r0, r3
 80069c6:	6963      	ldr	r3, [r4, #20]
 80069c8:	b2f6      	uxtb	r6, r6
 80069ca:	4283      	cmp	r3, r0
 80069cc:	4637      	mov	r7, r6
 80069ce:	dc04      	bgt.n	80069da <__swbuf_r+0x42>
 80069d0:	4621      	mov	r1, r4
 80069d2:	4628      	mov	r0, r5
 80069d4:	f000 f92e 	bl	8006c34 <_fflush_r>
 80069d8:	bb30      	cbnz	r0, 8006a28 <__swbuf_r+0x90>
 80069da:	68a3      	ldr	r3, [r4, #8]
 80069dc:	3b01      	subs	r3, #1
 80069de:	60a3      	str	r3, [r4, #8]
 80069e0:	6823      	ldr	r3, [r4, #0]
 80069e2:	1c5a      	adds	r2, r3, #1
 80069e4:	6022      	str	r2, [r4, #0]
 80069e6:	701e      	strb	r6, [r3, #0]
 80069e8:	6963      	ldr	r3, [r4, #20]
 80069ea:	3001      	adds	r0, #1
 80069ec:	4283      	cmp	r3, r0
 80069ee:	d004      	beq.n	80069fa <__swbuf_r+0x62>
 80069f0:	89a3      	ldrh	r3, [r4, #12]
 80069f2:	07db      	lsls	r3, r3, #31
 80069f4:	d506      	bpl.n	8006a04 <__swbuf_r+0x6c>
 80069f6:	2e0a      	cmp	r6, #10
 80069f8:	d104      	bne.n	8006a04 <__swbuf_r+0x6c>
 80069fa:	4621      	mov	r1, r4
 80069fc:	4628      	mov	r0, r5
 80069fe:	f000 f919 	bl	8006c34 <_fflush_r>
 8006a02:	b988      	cbnz	r0, 8006a28 <__swbuf_r+0x90>
 8006a04:	4638      	mov	r0, r7
 8006a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a08:	4b0a      	ldr	r3, [pc, #40]	; (8006a34 <__swbuf_r+0x9c>)
 8006a0a:	429c      	cmp	r4, r3
 8006a0c:	d101      	bne.n	8006a12 <__swbuf_r+0x7a>
 8006a0e:	68ac      	ldr	r4, [r5, #8]
 8006a10:	e7cf      	b.n	80069b2 <__swbuf_r+0x1a>
 8006a12:	4b09      	ldr	r3, [pc, #36]	; (8006a38 <__swbuf_r+0xa0>)
 8006a14:	429c      	cmp	r4, r3
 8006a16:	bf08      	it	eq
 8006a18:	68ec      	ldreq	r4, [r5, #12]
 8006a1a:	e7ca      	b.n	80069b2 <__swbuf_r+0x1a>
 8006a1c:	4621      	mov	r1, r4
 8006a1e:	4628      	mov	r0, r5
 8006a20:	f000 f80c 	bl	8006a3c <__swsetup_r>
 8006a24:	2800      	cmp	r0, #0
 8006a26:	d0cb      	beq.n	80069c0 <__swbuf_r+0x28>
 8006a28:	f04f 37ff 	mov.w	r7, #4294967295
 8006a2c:	e7ea      	b.n	8006a04 <__swbuf_r+0x6c>
 8006a2e:	bf00      	nop
 8006a30:	08008f7c 	.word	0x08008f7c
 8006a34:	08008f9c 	.word	0x08008f9c
 8006a38:	08008f5c 	.word	0x08008f5c

08006a3c <__swsetup_r>:
 8006a3c:	4b32      	ldr	r3, [pc, #200]	; (8006b08 <__swsetup_r+0xcc>)
 8006a3e:	b570      	push	{r4, r5, r6, lr}
 8006a40:	681d      	ldr	r5, [r3, #0]
 8006a42:	4606      	mov	r6, r0
 8006a44:	460c      	mov	r4, r1
 8006a46:	b125      	cbz	r5, 8006a52 <__swsetup_r+0x16>
 8006a48:	69ab      	ldr	r3, [r5, #24]
 8006a4a:	b913      	cbnz	r3, 8006a52 <__swsetup_r+0x16>
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	f000 f985 	bl	8006d5c <__sinit>
 8006a52:	4b2e      	ldr	r3, [pc, #184]	; (8006b0c <__swsetup_r+0xd0>)
 8006a54:	429c      	cmp	r4, r3
 8006a56:	d10f      	bne.n	8006a78 <__swsetup_r+0x3c>
 8006a58:	686c      	ldr	r4, [r5, #4]
 8006a5a:	89a3      	ldrh	r3, [r4, #12]
 8006a5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a60:	0719      	lsls	r1, r3, #28
 8006a62:	d42c      	bmi.n	8006abe <__swsetup_r+0x82>
 8006a64:	06dd      	lsls	r5, r3, #27
 8006a66:	d411      	bmi.n	8006a8c <__swsetup_r+0x50>
 8006a68:	2309      	movs	r3, #9
 8006a6a:	6033      	str	r3, [r6, #0]
 8006a6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a70:	81a3      	strh	r3, [r4, #12]
 8006a72:	f04f 30ff 	mov.w	r0, #4294967295
 8006a76:	e03e      	b.n	8006af6 <__swsetup_r+0xba>
 8006a78:	4b25      	ldr	r3, [pc, #148]	; (8006b10 <__swsetup_r+0xd4>)
 8006a7a:	429c      	cmp	r4, r3
 8006a7c:	d101      	bne.n	8006a82 <__swsetup_r+0x46>
 8006a7e:	68ac      	ldr	r4, [r5, #8]
 8006a80:	e7eb      	b.n	8006a5a <__swsetup_r+0x1e>
 8006a82:	4b24      	ldr	r3, [pc, #144]	; (8006b14 <__swsetup_r+0xd8>)
 8006a84:	429c      	cmp	r4, r3
 8006a86:	bf08      	it	eq
 8006a88:	68ec      	ldreq	r4, [r5, #12]
 8006a8a:	e7e6      	b.n	8006a5a <__swsetup_r+0x1e>
 8006a8c:	0758      	lsls	r0, r3, #29
 8006a8e:	d512      	bpl.n	8006ab6 <__swsetup_r+0x7a>
 8006a90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a92:	b141      	cbz	r1, 8006aa6 <__swsetup_r+0x6a>
 8006a94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a98:	4299      	cmp	r1, r3
 8006a9a:	d002      	beq.n	8006aa2 <__swsetup_r+0x66>
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	f7ff fb27 	bl	80060f0 <_free_r>
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	6363      	str	r3, [r4, #52]	; 0x34
 8006aa6:	89a3      	ldrh	r3, [r4, #12]
 8006aa8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006aac:	81a3      	strh	r3, [r4, #12]
 8006aae:	2300      	movs	r3, #0
 8006ab0:	6063      	str	r3, [r4, #4]
 8006ab2:	6923      	ldr	r3, [r4, #16]
 8006ab4:	6023      	str	r3, [r4, #0]
 8006ab6:	89a3      	ldrh	r3, [r4, #12]
 8006ab8:	f043 0308 	orr.w	r3, r3, #8
 8006abc:	81a3      	strh	r3, [r4, #12]
 8006abe:	6923      	ldr	r3, [r4, #16]
 8006ac0:	b94b      	cbnz	r3, 8006ad6 <__swsetup_r+0x9a>
 8006ac2:	89a3      	ldrh	r3, [r4, #12]
 8006ac4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006acc:	d003      	beq.n	8006ad6 <__swsetup_r+0x9a>
 8006ace:	4621      	mov	r1, r4
 8006ad0:	4630      	mov	r0, r6
 8006ad2:	f000 fa09 	bl	8006ee8 <__smakebuf_r>
 8006ad6:	89a0      	ldrh	r0, [r4, #12]
 8006ad8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006adc:	f010 0301 	ands.w	r3, r0, #1
 8006ae0:	d00a      	beq.n	8006af8 <__swsetup_r+0xbc>
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	60a3      	str	r3, [r4, #8]
 8006ae6:	6963      	ldr	r3, [r4, #20]
 8006ae8:	425b      	negs	r3, r3
 8006aea:	61a3      	str	r3, [r4, #24]
 8006aec:	6923      	ldr	r3, [r4, #16]
 8006aee:	b943      	cbnz	r3, 8006b02 <__swsetup_r+0xc6>
 8006af0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006af4:	d1ba      	bne.n	8006a6c <__swsetup_r+0x30>
 8006af6:	bd70      	pop	{r4, r5, r6, pc}
 8006af8:	0781      	lsls	r1, r0, #30
 8006afa:	bf58      	it	pl
 8006afc:	6963      	ldrpl	r3, [r4, #20]
 8006afe:	60a3      	str	r3, [r4, #8]
 8006b00:	e7f4      	b.n	8006aec <__swsetup_r+0xb0>
 8006b02:	2000      	movs	r0, #0
 8006b04:	e7f7      	b.n	8006af6 <__swsetup_r+0xba>
 8006b06:	bf00      	nop
 8006b08:	20000010 	.word	0x20000010
 8006b0c:	08008f7c 	.word	0x08008f7c
 8006b10:	08008f9c 	.word	0x08008f9c
 8006b14:	08008f5c 	.word	0x08008f5c

08006b18 <abort>:
 8006b18:	b508      	push	{r3, lr}
 8006b1a:	2006      	movs	r0, #6
 8006b1c:	f000 fa54 	bl	8006fc8 <raise>
 8006b20:	2001      	movs	r0, #1
 8006b22:	f7fa fcab 	bl	800147c <_exit>
	...

08006b28 <__sflush_r>:
 8006b28:	898a      	ldrh	r2, [r1, #12]
 8006b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b2e:	4605      	mov	r5, r0
 8006b30:	0710      	lsls	r0, r2, #28
 8006b32:	460c      	mov	r4, r1
 8006b34:	d458      	bmi.n	8006be8 <__sflush_r+0xc0>
 8006b36:	684b      	ldr	r3, [r1, #4]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	dc05      	bgt.n	8006b48 <__sflush_r+0x20>
 8006b3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	dc02      	bgt.n	8006b48 <__sflush_r+0x20>
 8006b42:	2000      	movs	r0, #0
 8006b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b4a:	2e00      	cmp	r6, #0
 8006b4c:	d0f9      	beq.n	8006b42 <__sflush_r+0x1a>
 8006b4e:	2300      	movs	r3, #0
 8006b50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b54:	682f      	ldr	r7, [r5, #0]
 8006b56:	602b      	str	r3, [r5, #0]
 8006b58:	d032      	beq.n	8006bc0 <__sflush_r+0x98>
 8006b5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b5c:	89a3      	ldrh	r3, [r4, #12]
 8006b5e:	075a      	lsls	r2, r3, #29
 8006b60:	d505      	bpl.n	8006b6e <__sflush_r+0x46>
 8006b62:	6863      	ldr	r3, [r4, #4]
 8006b64:	1ac0      	subs	r0, r0, r3
 8006b66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b68:	b10b      	cbz	r3, 8006b6e <__sflush_r+0x46>
 8006b6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b6c:	1ac0      	subs	r0, r0, r3
 8006b6e:	2300      	movs	r3, #0
 8006b70:	4602      	mov	r2, r0
 8006b72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b74:	6a21      	ldr	r1, [r4, #32]
 8006b76:	4628      	mov	r0, r5
 8006b78:	47b0      	blx	r6
 8006b7a:	1c43      	adds	r3, r0, #1
 8006b7c:	89a3      	ldrh	r3, [r4, #12]
 8006b7e:	d106      	bne.n	8006b8e <__sflush_r+0x66>
 8006b80:	6829      	ldr	r1, [r5, #0]
 8006b82:	291d      	cmp	r1, #29
 8006b84:	d82c      	bhi.n	8006be0 <__sflush_r+0xb8>
 8006b86:	4a2a      	ldr	r2, [pc, #168]	; (8006c30 <__sflush_r+0x108>)
 8006b88:	40ca      	lsrs	r2, r1
 8006b8a:	07d6      	lsls	r6, r2, #31
 8006b8c:	d528      	bpl.n	8006be0 <__sflush_r+0xb8>
 8006b8e:	2200      	movs	r2, #0
 8006b90:	6062      	str	r2, [r4, #4]
 8006b92:	04d9      	lsls	r1, r3, #19
 8006b94:	6922      	ldr	r2, [r4, #16]
 8006b96:	6022      	str	r2, [r4, #0]
 8006b98:	d504      	bpl.n	8006ba4 <__sflush_r+0x7c>
 8006b9a:	1c42      	adds	r2, r0, #1
 8006b9c:	d101      	bne.n	8006ba2 <__sflush_r+0x7a>
 8006b9e:	682b      	ldr	r3, [r5, #0]
 8006ba0:	b903      	cbnz	r3, 8006ba4 <__sflush_r+0x7c>
 8006ba2:	6560      	str	r0, [r4, #84]	; 0x54
 8006ba4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ba6:	602f      	str	r7, [r5, #0]
 8006ba8:	2900      	cmp	r1, #0
 8006baa:	d0ca      	beq.n	8006b42 <__sflush_r+0x1a>
 8006bac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bb0:	4299      	cmp	r1, r3
 8006bb2:	d002      	beq.n	8006bba <__sflush_r+0x92>
 8006bb4:	4628      	mov	r0, r5
 8006bb6:	f7ff fa9b 	bl	80060f0 <_free_r>
 8006bba:	2000      	movs	r0, #0
 8006bbc:	6360      	str	r0, [r4, #52]	; 0x34
 8006bbe:	e7c1      	b.n	8006b44 <__sflush_r+0x1c>
 8006bc0:	6a21      	ldr	r1, [r4, #32]
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	47b0      	blx	r6
 8006bc8:	1c41      	adds	r1, r0, #1
 8006bca:	d1c7      	bne.n	8006b5c <__sflush_r+0x34>
 8006bcc:	682b      	ldr	r3, [r5, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d0c4      	beq.n	8006b5c <__sflush_r+0x34>
 8006bd2:	2b1d      	cmp	r3, #29
 8006bd4:	d001      	beq.n	8006bda <__sflush_r+0xb2>
 8006bd6:	2b16      	cmp	r3, #22
 8006bd8:	d101      	bne.n	8006bde <__sflush_r+0xb6>
 8006bda:	602f      	str	r7, [r5, #0]
 8006bdc:	e7b1      	b.n	8006b42 <__sflush_r+0x1a>
 8006bde:	89a3      	ldrh	r3, [r4, #12]
 8006be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006be4:	81a3      	strh	r3, [r4, #12]
 8006be6:	e7ad      	b.n	8006b44 <__sflush_r+0x1c>
 8006be8:	690f      	ldr	r7, [r1, #16]
 8006bea:	2f00      	cmp	r7, #0
 8006bec:	d0a9      	beq.n	8006b42 <__sflush_r+0x1a>
 8006bee:	0793      	lsls	r3, r2, #30
 8006bf0:	680e      	ldr	r6, [r1, #0]
 8006bf2:	bf08      	it	eq
 8006bf4:	694b      	ldreq	r3, [r1, #20]
 8006bf6:	600f      	str	r7, [r1, #0]
 8006bf8:	bf18      	it	ne
 8006bfa:	2300      	movne	r3, #0
 8006bfc:	eba6 0807 	sub.w	r8, r6, r7
 8006c00:	608b      	str	r3, [r1, #8]
 8006c02:	f1b8 0f00 	cmp.w	r8, #0
 8006c06:	dd9c      	ble.n	8006b42 <__sflush_r+0x1a>
 8006c08:	6a21      	ldr	r1, [r4, #32]
 8006c0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c0c:	4643      	mov	r3, r8
 8006c0e:	463a      	mov	r2, r7
 8006c10:	4628      	mov	r0, r5
 8006c12:	47b0      	blx	r6
 8006c14:	2800      	cmp	r0, #0
 8006c16:	dc06      	bgt.n	8006c26 <__sflush_r+0xfe>
 8006c18:	89a3      	ldrh	r3, [r4, #12]
 8006c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c1e:	81a3      	strh	r3, [r4, #12]
 8006c20:	f04f 30ff 	mov.w	r0, #4294967295
 8006c24:	e78e      	b.n	8006b44 <__sflush_r+0x1c>
 8006c26:	4407      	add	r7, r0
 8006c28:	eba8 0800 	sub.w	r8, r8, r0
 8006c2c:	e7e9      	b.n	8006c02 <__sflush_r+0xda>
 8006c2e:	bf00      	nop
 8006c30:	20400001 	.word	0x20400001

08006c34 <_fflush_r>:
 8006c34:	b538      	push	{r3, r4, r5, lr}
 8006c36:	690b      	ldr	r3, [r1, #16]
 8006c38:	4605      	mov	r5, r0
 8006c3a:	460c      	mov	r4, r1
 8006c3c:	b913      	cbnz	r3, 8006c44 <_fflush_r+0x10>
 8006c3e:	2500      	movs	r5, #0
 8006c40:	4628      	mov	r0, r5
 8006c42:	bd38      	pop	{r3, r4, r5, pc}
 8006c44:	b118      	cbz	r0, 8006c4e <_fflush_r+0x1a>
 8006c46:	6983      	ldr	r3, [r0, #24]
 8006c48:	b90b      	cbnz	r3, 8006c4e <_fflush_r+0x1a>
 8006c4a:	f000 f887 	bl	8006d5c <__sinit>
 8006c4e:	4b14      	ldr	r3, [pc, #80]	; (8006ca0 <_fflush_r+0x6c>)
 8006c50:	429c      	cmp	r4, r3
 8006c52:	d11b      	bne.n	8006c8c <_fflush_r+0x58>
 8006c54:	686c      	ldr	r4, [r5, #4]
 8006c56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d0ef      	beq.n	8006c3e <_fflush_r+0xa>
 8006c5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c60:	07d0      	lsls	r0, r2, #31
 8006c62:	d404      	bmi.n	8006c6e <_fflush_r+0x3a>
 8006c64:	0599      	lsls	r1, r3, #22
 8006c66:	d402      	bmi.n	8006c6e <_fflush_r+0x3a>
 8006c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c6a:	f000 f915 	bl	8006e98 <__retarget_lock_acquire_recursive>
 8006c6e:	4628      	mov	r0, r5
 8006c70:	4621      	mov	r1, r4
 8006c72:	f7ff ff59 	bl	8006b28 <__sflush_r>
 8006c76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c78:	07da      	lsls	r2, r3, #31
 8006c7a:	4605      	mov	r5, r0
 8006c7c:	d4e0      	bmi.n	8006c40 <_fflush_r+0xc>
 8006c7e:	89a3      	ldrh	r3, [r4, #12]
 8006c80:	059b      	lsls	r3, r3, #22
 8006c82:	d4dd      	bmi.n	8006c40 <_fflush_r+0xc>
 8006c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c86:	f000 f908 	bl	8006e9a <__retarget_lock_release_recursive>
 8006c8a:	e7d9      	b.n	8006c40 <_fflush_r+0xc>
 8006c8c:	4b05      	ldr	r3, [pc, #20]	; (8006ca4 <_fflush_r+0x70>)
 8006c8e:	429c      	cmp	r4, r3
 8006c90:	d101      	bne.n	8006c96 <_fflush_r+0x62>
 8006c92:	68ac      	ldr	r4, [r5, #8]
 8006c94:	e7df      	b.n	8006c56 <_fflush_r+0x22>
 8006c96:	4b04      	ldr	r3, [pc, #16]	; (8006ca8 <_fflush_r+0x74>)
 8006c98:	429c      	cmp	r4, r3
 8006c9a:	bf08      	it	eq
 8006c9c:	68ec      	ldreq	r4, [r5, #12]
 8006c9e:	e7da      	b.n	8006c56 <_fflush_r+0x22>
 8006ca0:	08008f7c 	.word	0x08008f7c
 8006ca4:	08008f9c 	.word	0x08008f9c
 8006ca8:	08008f5c 	.word	0x08008f5c

08006cac <std>:
 8006cac:	2300      	movs	r3, #0
 8006cae:	b510      	push	{r4, lr}
 8006cb0:	4604      	mov	r4, r0
 8006cb2:	e9c0 3300 	strd	r3, r3, [r0]
 8006cb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cba:	6083      	str	r3, [r0, #8]
 8006cbc:	8181      	strh	r1, [r0, #12]
 8006cbe:	6643      	str	r3, [r0, #100]	; 0x64
 8006cc0:	81c2      	strh	r2, [r0, #14]
 8006cc2:	6183      	str	r3, [r0, #24]
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	2208      	movs	r2, #8
 8006cc8:	305c      	adds	r0, #92	; 0x5c
 8006cca:	f7fb fddd 	bl	8002888 <memset>
 8006cce:	4b05      	ldr	r3, [pc, #20]	; (8006ce4 <std+0x38>)
 8006cd0:	6263      	str	r3, [r4, #36]	; 0x24
 8006cd2:	4b05      	ldr	r3, [pc, #20]	; (8006ce8 <std+0x3c>)
 8006cd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006cd6:	4b05      	ldr	r3, [pc, #20]	; (8006cec <std+0x40>)
 8006cd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006cda:	4b05      	ldr	r3, [pc, #20]	; (8006cf0 <std+0x44>)
 8006cdc:	6224      	str	r4, [r4, #32]
 8006cde:	6323      	str	r3, [r4, #48]	; 0x30
 8006ce0:	bd10      	pop	{r4, pc}
 8006ce2:	bf00      	nop
 8006ce4:	08007001 	.word	0x08007001
 8006ce8:	08007023 	.word	0x08007023
 8006cec:	0800705b 	.word	0x0800705b
 8006cf0:	0800707f 	.word	0x0800707f

08006cf4 <_cleanup_r>:
 8006cf4:	4901      	ldr	r1, [pc, #4]	; (8006cfc <_cleanup_r+0x8>)
 8006cf6:	f000 b8af 	b.w	8006e58 <_fwalk_reent>
 8006cfa:	bf00      	nop
 8006cfc:	08006c35 	.word	0x08006c35

08006d00 <__sfmoreglue>:
 8006d00:	b570      	push	{r4, r5, r6, lr}
 8006d02:	2268      	movs	r2, #104	; 0x68
 8006d04:	1e4d      	subs	r5, r1, #1
 8006d06:	4355      	muls	r5, r2
 8006d08:	460e      	mov	r6, r1
 8006d0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d0e:	f7ff fa5b 	bl	80061c8 <_malloc_r>
 8006d12:	4604      	mov	r4, r0
 8006d14:	b140      	cbz	r0, 8006d28 <__sfmoreglue+0x28>
 8006d16:	2100      	movs	r1, #0
 8006d18:	e9c0 1600 	strd	r1, r6, [r0]
 8006d1c:	300c      	adds	r0, #12
 8006d1e:	60a0      	str	r0, [r4, #8]
 8006d20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d24:	f7fb fdb0 	bl	8002888 <memset>
 8006d28:	4620      	mov	r0, r4
 8006d2a:	bd70      	pop	{r4, r5, r6, pc}

08006d2c <__sfp_lock_acquire>:
 8006d2c:	4801      	ldr	r0, [pc, #4]	; (8006d34 <__sfp_lock_acquire+0x8>)
 8006d2e:	f000 b8b3 	b.w	8006e98 <__retarget_lock_acquire_recursive>
 8006d32:	bf00      	nop
 8006d34:	200003a1 	.word	0x200003a1

08006d38 <__sfp_lock_release>:
 8006d38:	4801      	ldr	r0, [pc, #4]	; (8006d40 <__sfp_lock_release+0x8>)
 8006d3a:	f000 b8ae 	b.w	8006e9a <__retarget_lock_release_recursive>
 8006d3e:	bf00      	nop
 8006d40:	200003a1 	.word	0x200003a1

08006d44 <__sinit_lock_acquire>:
 8006d44:	4801      	ldr	r0, [pc, #4]	; (8006d4c <__sinit_lock_acquire+0x8>)
 8006d46:	f000 b8a7 	b.w	8006e98 <__retarget_lock_acquire_recursive>
 8006d4a:	bf00      	nop
 8006d4c:	200003a2 	.word	0x200003a2

08006d50 <__sinit_lock_release>:
 8006d50:	4801      	ldr	r0, [pc, #4]	; (8006d58 <__sinit_lock_release+0x8>)
 8006d52:	f000 b8a2 	b.w	8006e9a <__retarget_lock_release_recursive>
 8006d56:	bf00      	nop
 8006d58:	200003a2 	.word	0x200003a2

08006d5c <__sinit>:
 8006d5c:	b510      	push	{r4, lr}
 8006d5e:	4604      	mov	r4, r0
 8006d60:	f7ff fff0 	bl	8006d44 <__sinit_lock_acquire>
 8006d64:	69a3      	ldr	r3, [r4, #24]
 8006d66:	b11b      	cbz	r3, 8006d70 <__sinit+0x14>
 8006d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d6c:	f7ff bff0 	b.w	8006d50 <__sinit_lock_release>
 8006d70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d74:	6523      	str	r3, [r4, #80]	; 0x50
 8006d76:	4b13      	ldr	r3, [pc, #76]	; (8006dc4 <__sinit+0x68>)
 8006d78:	4a13      	ldr	r2, [pc, #76]	; (8006dc8 <__sinit+0x6c>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d7e:	42a3      	cmp	r3, r4
 8006d80:	bf04      	itt	eq
 8006d82:	2301      	moveq	r3, #1
 8006d84:	61a3      	streq	r3, [r4, #24]
 8006d86:	4620      	mov	r0, r4
 8006d88:	f000 f820 	bl	8006dcc <__sfp>
 8006d8c:	6060      	str	r0, [r4, #4]
 8006d8e:	4620      	mov	r0, r4
 8006d90:	f000 f81c 	bl	8006dcc <__sfp>
 8006d94:	60a0      	str	r0, [r4, #8]
 8006d96:	4620      	mov	r0, r4
 8006d98:	f000 f818 	bl	8006dcc <__sfp>
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	60e0      	str	r0, [r4, #12]
 8006da0:	2104      	movs	r1, #4
 8006da2:	6860      	ldr	r0, [r4, #4]
 8006da4:	f7ff ff82 	bl	8006cac <std>
 8006da8:	68a0      	ldr	r0, [r4, #8]
 8006daa:	2201      	movs	r2, #1
 8006dac:	2109      	movs	r1, #9
 8006dae:	f7ff ff7d 	bl	8006cac <std>
 8006db2:	68e0      	ldr	r0, [r4, #12]
 8006db4:	2202      	movs	r2, #2
 8006db6:	2112      	movs	r1, #18
 8006db8:	f7ff ff78 	bl	8006cac <std>
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	61a3      	str	r3, [r4, #24]
 8006dc0:	e7d2      	b.n	8006d68 <__sinit+0xc>
 8006dc2:	bf00      	nop
 8006dc4:	08008b14 	.word	0x08008b14
 8006dc8:	08006cf5 	.word	0x08006cf5

08006dcc <__sfp>:
 8006dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dce:	4607      	mov	r7, r0
 8006dd0:	f7ff ffac 	bl	8006d2c <__sfp_lock_acquire>
 8006dd4:	4b1e      	ldr	r3, [pc, #120]	; (8006e50 <__sfp+0x84>)
 8006dd6:	681e      	ldr	r6, [r3, #0]
 8006dd8:	69b3      	ldr	r3, [r6, #24]
 8006dda:	b913      	cbnz	r3, 8006de2 <__sfp+0x16>
 8006ddc:	4630      	mov	r0, r6
 8006dde:	f7ff ffbd 	bl	8006d5c <__sinit>
 8006de2:	3648      	adds	r6, #72	; 0x48
 8006de4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006de8:	3b01      	subs	r3, #1
 8006dea:	d503      	bpl.n	8006df4 <__sfp+0x28>
 8006dec:	6833      	ldr	r3, [r6, #0]
 8006dee:	b30b      	cbz	r3, 8006e34 <__sfp+0x68>
 8006df0:	6836      	ldr	r6, [r6, #0]
 8006df2:	e7f7      	b.n	8006de4 <__sfp+0x18>
 8006df4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006df8:	b9d5      	cbnz	r5, 8006e30 <__sfp+0x64>
 8006dfa:	4b16      	ldr	r3, [pc, #88]	; (8006e54 <__sfp+0x88>)
 8006dfc:	60e3      	str	r3, [r4, #12]
 8006dfe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e02:	6665      	str	r5, [r4, #100]	; 0x64
 8006e04:	f000 f847 	bl	8006e96 <__retarget_lock_init_recursive>
 8006e08:	f7ff ff96 	bl	8006d38 <__sfp_lock_release>
 8006e0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e14:	6025      	str	r5, [r4, #0]
 8006e16:	61a5      	str	r5, [r4, #24]
 8006e18:	2208      	movs	r2, #8
 8006e1a:	4629      	mov	r1, r5
 8006e1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e20:	f7fb fd32 	bl	8002888 <memset>
 8006e24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e30:	3468      	adds	r4, #104	; 0x68
 8006e32:	e7d9      	b.n	8006de8 <__sfp+0x1c>
 8006e34:	2104      	movs	r1, #4
 8006e36:	4638      	mov	r0, r7
 8006e38:	f7ff ff62 	bl	8006d00 <__sfmoreglue>
 8006e3c:	4604      	mov	r4, r0
 8006e3e:	6030      	str	r0, [r6, #0]
 8006e40:	2800      	cmp	r0, #0
 8006e42:	d1d5      	bne.n	8006df0 <__sfp+0x24>
 8006e44:	f7ff ff78 	bl	8006d38 <__sfp_lock_release>
 8006e48:	230c      	movs	r3, #12
 8006e4a:	603b      	str	r3, [r7, #0]
 8006e4c:	e7ee      	b.n	8006e2c <__sfp+0x60>
 8006e4e:	bf00      	nop
 8006e50:	08008b14 	.word	0x08008b14
 8006e54:	ffff0001 	.word	0xffff0001

08006e58 <_fwalk_reent>:
 8006e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e5c:	4606      	mov	r6, r0
 8006e5e:	4688      	mov	r8, r1
 8006e60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e64:	2700      	movs	r7, #0
 8006e66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e6a:	f1b9 0901 	subs.w	r9, r9, #1
 8006e6e:	d505      	bpl.n	8006e7c <_fwalk_reent+0x24>
 8006e70:	6824      	ldr	r4, [r4, #0]
 8006e72:	2c00      	cmp	r4, #0
 8006e74:	d1f7      	bne.n	8006e66 <_fwalk_reent+0xe>
 8006e76:	4638      	mov	r0, r7
 8006e78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e7c:	89ab      	ldrh	r3, [r5, #12]
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d907      	bls.n	8006e92 <_fwalk_reent+0x3a>
 8006e82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e86:	3301      	adds	r3, #1
 8006e88:	d003      	beq.n	8006e92 <_fwalk_reent+0x3a>
 8006e8a:	4629      	mov	r1, r5
 8006e8c:	4630      	mov	r0, r6
 8006e8e:	47c0      	blx	r8
 8006e90:	4307      	orrs	r7, r0
 8006e92:	3568      	adds	r5, #104	; 0x68
 8006e94:	e7e9      	b.n	8006e6a <_fwalk_reent+0x12>

08006e96 <__retarget_lock_init_recursive>:
 8006e96:	4770      	bx	lr

08006e98 <__retarget_lock_acquire_recursive>:
 8006e98:	4770      	bx	lr

08006e9a <__retarget_lock_release_recursive>:
 8006e9a:	4770      	bx	lr

08006e9c <__swhatbuf_r>:
 8006e9c:	b570      	push	{r4, r5, r6, lr}
 8006e9e:	460e      	mov	r6, r1
 8006ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ea4:	2900      	cmp	r1, #0
 8006ea6:	b096      	sub	sp, #88	; 0x58
 8006ea8:	4614      	mov	r4, r2
 8006eaa:	461d      	mov	r5, r3
 8006eac:	da08      	bge.n	8006ec0 <__swhatbuf_r+0x24>
 8006eae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	602a      	str	r2, [r5, #0]
 8006eb6:	061a      	lsls	r2, r3, #24
 8006eb8:	d410      	bmi.n	8006edc <__swhatbuf_r+0x40>
 8006eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ebe:	e00e      	b.n	8006ede <__swhatbuf_r+0x42>
 8006ec0:	466a      	mov	r2, sp
 8006ec2:	f000 f903 	bl	80070cc <_fstat_r>
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	dbf1      	blt.n	8006eae <__swhatbuf_r+0x12>
 8006eca:	9a01      	ldr	r2, [sp, #4]
 8006ecc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ed0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ed4:	425a      	negs	r2, r3
 8006ed6:	415a      	adcs	r2, r3
 8006ed8:	602a      	str	r2, [r5, #0]
 8006eda:	e7ee      	b.n	8006eba <__swhatbuf_r+0x1e>
 8006edc:	2340      	movs	r3, #64	; 0x40
 8006ede:	2000      	movs	r0, #0
 8006ee0:	6023      	str	r3, [r4, #0]
 8006ee2:	b016      	add	sp, #88	; 0x58
 8006ee4:	bd70      	pop	{r4, r5, r6, pc}
	...

08006ee8 <__smakebuf_r>:
 8006ee8:	898b      	ldrh	r3, [r1, #12]
 8006eea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006eec:	079d      	lsls	r5, r3, #30
 8006eee:	4606      	mov	r6, r0
 8006ef0:	460c      	mov	r4, r1
 8006ef2:	d507      	bpl.n	8006f04 <__smakebuf_r+0x1c>
 8006ef4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ef8:	6023      	str	r3, [r4, #0]
 8006efa:	6123      	str	r3, [r4, #16]
 8006efc:	2301      	movs	r3, #1
 8006efe:	6163      	str	r3, [r4, #20]
 8006f00:	b002      	add	sp, #8
 8006f02:	bd70      	pop	{r4, r5, r6, pc}
 8006f04:	ab01      	add	r3, sp, #4
 8006f06:	466a      	mov	r2, sp
 8006f08:	f7ff ffc8 	bl	8006e9c <__swhatbuf_r>
 8006f0c:	9900      	ldr	r1, [sp, #0]
 8006f0e:	4605      	mov	r5, r0
 8006f10:	4630      	mov	r0, r6
 8006f12:	f7ff f959 	bl	80061c8 <_malloc_r>
 8006f16:	b948      	cbnz	r0, 8006f2c <__smakebuf_r+0x44>
 8006f18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f1c:	059a      	lsls	r2, r3, #22
 8006f1e:	d4ef      	bmi.n	8006f00 <__smakebuf_r+0x18>
 8006f20:	f023 0303 	bic.w	r3, r3, #3
 8006f24:	f043 0302 	orr.w	r3, r3, #2
 8006f28:	81a3      	strh	r3, [r4, #12]
 8006f2a:	e7e3      	b.n	8006ef4 <__smakebuf_r+0xc>
 8006f2c:	4b0d      	ldr	r3, [pc, #52]	; (8006f64 <__smakebuf_r+0x7c>)
 8006f2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f30:	89a3      	ldrh	r3, [r4, #12]
 8006f32:	6020      	str	r0, [r4, #0]
 8006f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f38:	81a3      	strh	r3, [r4, #12]
 8006f3a:	9b00      	ldr	r3, [sp, #0]
 8006f3c:	6163      	str	r3, [r4, #20]
 8006f3e:	9b01      	ldr	r3, [sp, #4]
 8006f40:	6120      	str	r0, [r4, #16]
 8006f42:	b15b      	cbz	r3, 8006f5c <__smakebuf_r+0x74>
 8006f44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f48:	4630      	mov	r0, r6
 8006f4a:	f000 f8d1 	bl	80070f0 <_isatty_r>
 8006f4e:	b128      	cbz	r0, 8006f5c <__smakebuf_r+0x74>
 8006f50:	89a3      	ldrh	r3, [r4, #12]
 8006f52:	f023 0303 	bic.w	r3, r3, #3
 8006f56:	f043 0301 	orr.w	r3, r3, #1
 8006f5a:	81a3      	strh	r3, [r4, #12]
 8006f5c:	89a0      	ldrh	r0, [r4, #12]
 8006f5e:	4305      	orrs	r5, r0
 8006f60:	81a5      	strh	r5, [r4, #12]
 8006f62:	e7cd      	b.n	8006f00 <__smakebuf_r+0x18>
 8006f64:	08006cf5 	.word	0x08006cf5

08006f68 <_malloc_usable_size_r>:
 8006f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f6c:	1f18      	subs	r0, r3, #4
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	bfbc      	itt	lt
 8006f72:	580b      	ldrlt	r3, [r1, r0]
 8006f74:	18c0      	addlt	r0, r0, r3
 8006f76:	4770      	bx	lr

08006f78 <_raise_r>:
 8006f78:	291f      	cmp	r1, #31
 8006f7a:	b538      	push	{r3, r4, r5, lr}
 8006f7c:	4604      	mov	r4, r0
 8006f7e:	460d      	mov	r5, r1
 8006f80:	d904      	bls.n	8006f8c <_raise_r+0x14>
 8006f82:	2316      	movs	r3, #22
 8006f84:	6003      	str	r3, [r0, #0]
 8006f86:	f04f 30ff 	mov.w	r0, #4294967295
 8006f8a:	bd38      	pop	{r3, r4, r5, pc}
 8006f8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006f8e:	b112      	cbz	r2, 8006f96 <_raise_r+0x1e>
 8006f90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f94:	b94b      	cbnz	r3, 8006faa <_raise_r+0x32>
 8006f96:	4620      	mov	r0, r4
 8006f98:	f000 f830 	bl	8006ffc <_getpid_r>
 8006f9c:	462a      	mov	r2, r5
 8006f9e:	4601      	mov	r1, r0
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fa6:	f000 b817 	b.w	8006fd8 <_kill_r>
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d00a      	beq.n	8006fc4 <_raise_r+0x4c>
 8006fae:	1c59      	adds	r1, r3, #1
 8006fb0:	d103      	bne.n	8006fba <_raise_r+0x42>
 8006fb2:	2316      	movs	r3, #22
 8006fb4:	6003      	str	r3, [r0, #0]
 8006fb6:	2001      	movs	r0, #1
 8006fb8:	e7e7      	b.n	8006f8a <_raise_r+0x12>
 8006fba:	2400      	movs	r4, #0
 8006fbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	4798      	blx	r3
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	e7e0      	b.n	8006f8a <_raise_r+0x12>

08006fc8 <raise>:
 8006fc8:	4b02      	ldr	r3, [pc, #8]	; (8006fd4 <raise+0xc>)
 8006fca:	4601      	mov	r1, r0
 8006fcc:	6818      	ldr	r0, [r3, #0]
 8006fce:	f7ff bfd3 	b.w	8006f78 <_raise_r>
 8006fd2:	bf00      	nop
 8006fd4:	20000010 	.word	0x20000010

08006fd8 <_kill_r>:
 8006fd8:	b538      	push	{r3, r4, r5, lr}
 8006fda:	4d07      	ldr	r5, [pc, #28]	; (8006ff8 <_kill_r+0x20>)
 8006fdc:	2300      	movs	r3, #0
 8006fde:	4604      	mov	r4, r0
 8006fe0:	4608      	mov	r0, r1
 8006fe2:	4611      	mov	r1, r2
 8006fe4:	602b      	str	r3, [r5, #0]
 8006fe6:	f7fa fa41 	bl	800146c <_kill>
 8006fea:	1c43      	adds	r3, r0, #1
 8006fec:	d102      	bne.n	8006ff4 <_kill_r+0x1c>
 8006fee:	682b      	ldr	r3, [r5, #0]
 8006ff0:	b103      	cbz	r3, 8006ff4 <_kill_r+0x1c>
 8006ff2:	6023      	str	r3, [r4, #0]
 8006ff4:	bd38      	pop	{r3, r4, r5, pc}
 8006ff6:	bf00      	nop
 8006ff8:	2000039c 	.word	0x2000039c

08006ffc <_getpid_r>:
 8006ffc:	f7fa ba34 	b.w	8001468 <_getpid>

08007000 <__sread>:
 8007000:	b510      	push	{r4, lr}
 8007002:	460c      	mov	r4, r1
 8007004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007008:	f000 f894 	bl	8007134 <_read_r>
 800700c:	2800      	cmp	r0, #0
 800700e:	bfab      	itete	ge
 8007010:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007012:	89a3      	ldrhlt	r3, [r4, #12]
 8007014:	181b      	addge	r3, r3, r0
 8007016:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800701a:	bfac      	ite	ge
 800701c:	6563      	strge	r3, [r4, #84]	; 0x54
 800701e:	81a3      	strhlt	r3, [r4, #12]
 8007020:	bd10      	pop	{r4, pc}

08007022 <__swrite>:
 8007022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007026:	461f      	mov	r7, r3
 8007028:	898b      	ldrh	r3, [r1, #12]
 800702a:	05db      	lsls	r3, r3, #23
 800702c:	4605      	mov	r5, r0
 800702e:	460c      	mov	r4, r1
 8007030:	4616      	mov	r6, r2
 8007032:	d505      	bpl.n	8007040 <__swrite+0x1e>
 8007034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007038:	2302      	movs	r3, #2
 800703a:	2200      	movs	r2, #0
 800703c:	f000 f868 	bl	8007110 <_lseek_r>
 8007040:	89a3      	ldrh	r3, [r4, #12]
 8007042:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007046:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800704a:	81a3      	strh	r3, [r4, #12]
 800704c:	4632      	mov	r2, r6
 800704e:	463b      	mov	r3, r7
 8007050:	4628      	mov	r0, r5
 8007052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007056:	f000 b817 	b.w	8007088 <_write_r>

0800705a <__sseek>:
 800705a:	b510      	push	{r4, lr}
 800705c:	460c      	mov	r4, r1
 800705e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007062:	f000 f855 	bl	8007110 <_lseek_r>
 8007066:	1c43      	adds	r3, r0, #1
 8007068:	89a3      	ldrh	r3, [r4, #12]
 800706a:	bf15      	itete	ne
 800706c:	6560      	strne	r0, [r4, #84]	; 0x54
 800706e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007072:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007076:	81a3      	strheq	r3, [r4, #12]
 8007078:	bf18      	it	ne
 800707a:	81a3      	strhne	r3, [r4, #12]
 800707c:	bd10      	pop	{r4, pc}

0800707e <__sclose>:
 800707e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007082:	f000 b813 	b.w	80070ac <_close_r>
	...

08007088 <_write_r>:
 8007088:	b538      	push	{r3, r4, r5, lr}
 800708a:	4d07      	ldr	r5, [pc, #28]	; (80070a8 <_write_r+0x20>)
 800708c:	4604      	mov	r4, r0
 800708e:	4608      	mov	r0, r1
 8007090:	4611      	mov	r1, r2
 8007092:	2200      	movs	r2, #0
 8007094:	602a      	str	r2, [r5, #0]
 8007096:	461a      	mov	r2, r3
 8007098:	f7fa fa04 	bl	80014a4 <_write>
 800709c:	1c43      	adds	r3, r0, #1
 800709e:	d102      	bne.n	80070a6 <_write_r+0x1e>
 80070a0:	682b      	ldr	r3, [r5, #0]
 80070a2:	b103      	cbz	r3, 80070a6 <_write_r+0x1e>
 80070a4:	6023      	str	r3, [r4, #0]
 80070a6:	bd38      	pop	{r3, r4, r5, pc}
 80070a8:	2000039c 	.word	0x2000039c

080070ac <_close_r>:
 80070ac:	b538      	push	{r3, r4, r5, lr}
 80070ae:	4d06      	ldr	r5, [pc, #24]	; (80070c8 <_close_r+0x1c>)
 80070b0:	2300      	movs	r3, #0
 80070b2:	4604      	mov	r4, r0
 80070b4:	4608      	mov	r0, r1
 80070b6:	602b      	str	r3, [r5, #0]
 80070b8:	f7fa fa02 	bl	80014c0 <_close>
 80070bc:	1c43      	adds	r3, r0, #1
 80070be:	d102      	bne.n	80070c6 <_close_r+0x1a>
 80070c0:	682b      	ldr	r3, [r5, #0]
 80070c2:	b103      	cbz	r3, 80070c6 <_close_r+0x1a>
 80070c4:	6023      	str	r3, [r4, #0]
 80070c6:	bd38      	pop	{r3, r4, r5, pc}
 80070c8:	2000039c 	.word	0x2000039c

080070cc <_fstat_r>:
 80070cc:	b538      	push	{r3, r4, r5, lr}
 80070ce:	4d07      	ldr	r5, [pc, #28]	; (80070ec <_fstat_r+0x20>)
 80070d0:	2300      	movs	r3, #0
 80070d2:	4604      	mov	r4, r0
 80070d4:	4608      	mov	r0, r1
 80070d6:	4611      	mov	r1, r2
 80070d8:	602b      	str	r3, [r5, #0]
 80070da:	f7fa f9f5 	bl	80014c8 <_fstat>
 80070de:	1c43      	adds	r3, r0, #1
 80070e0:	d102      	bne.n	80070e8 <_fstat_r+0x1c>
 80070e2:	682b      	ldr	r3, [r5, #0]
 80070e4:	b103      	cbz	r3, 80070e8 <_fstat_r+0x1c>
 80070e6:	6023      	str	r3, [r4, #0]
 80070e8:	bd38      	pop	{r3, r4, r5, pc}
 80070ea:	bf00      	nop
 80070ec:	2000039c 	.word	0x2000039c

080070f0 <_isatty_r>:
 80070f0:	b538      	push	{r3, r4, r5, lr}
 80070f2:	4d06      	ldr	r5, [pc, #24]	; (800710c <_isatty_r+0x1c>)
 80070f4:	2300      	movs	r3, #0
 80070f6:	4604      	mov	r4, r0
 80070f8:	4608      	mov	r0, r1
 80070fa:	602b      	str	r3, [r5, #0]
 80070fc:	f7fa f9ea 	bl	80014d4 <_isatty>
 8007100:	1c43      	adds	r3, r0, #1
 8007102:	d102      	bne.n	800710a <_isatty_r+0x1a>
 8007104:	682b      	ldr	r3, [r5, #0]
 8007106:	b103      	cbz	r3, 800710a <_isatty_r+0x1a>
 8007108:	6023      	str	r3, [r4, #0]
 800710a:	bd38      	pop	{r3, r4, r5, pc}
 800710c:	2000039c 	.word	0x2000039c

08007110 <_lseek_r>:
 8007110:	b538      	push	{r3, r4, r5, lr}
 8007112:	4d07      	ldr	r5, [pc, #28]	; (8007130 <_lseek_r+0x20>)
 8007114:	4604      	mov	r4, r0
 8007116:	4608      	mov	r0, r1
 8007118:	4611      	mov	r1, r2
 800711a:	2200      	movs	r2, #0
 800711c:	602a      	str	r2, [r5, #0]
 800711e:	461a      	mov	r2, r3
 8007120:	f7fa f9da 	bl	80014d8 <_lseek>
 8007124:	1c43      	adds	r3, r0, #1
 8007126:	d102      	bne.n	800712e <_lseek_r+0x1e>
 8007128:	682b      	ldr	r3, [r5, #0]
 800712a:	b103      	cbz	r3, 800712e <_lseek_r+0x1e>
 800712c:	6023      	str	r3, [r4, #0]
 800712e:	bd38      	pop	{r3, r4, r5, pc}
 8007130:	2000039c 	.word	0x2000039c

08007134 <_read_r>:
 8007134:	b538      	push	{r3, r4, r5, lr}
 8007136:	4d07      	ldr	r5, [pc, #28]	; (8007154 <_read_r+0x20>)
 8007138:	4604      	mov	r4, r0
 800713a:	4608      	mov	r0, r1
 800713c:	4611      	mov	r1, r2
 800713e:	2200      	movs	r2, #0
 8007140:	602a      	str	r2, [r5, #0]
 8007142:	461a      	mov	r2, r3
 8007144:	f7fa f9a0 	bl	8001488 <_read>
 8007148:	1c43      	adds	r3, r0, #1
 800714a:	d102      	bne.n	8007152 <_read_r+0x1e>
 800714c:	682b      	ldr	r3, [r5, #0]
 800714e:	b103      	cbz	r3, 8007152 <_read_r+0x1e>
 8007150:	6023      	str	r3, [r4, #0]
 8007152:	bd38      	pop	{r3, r4, r5, pc}
 8007154:	2000039c 	.word	0x2000039c

08007158 <_init>:
 8007158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800715a:	bf00      	nop
 800715c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800715e:	bc08      	pop	{r3}
 8007160:	469e      	mov	lr, r3
 8007162:	4770      	bx	lr

08007164 <_fini>:
 8007164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007166:	bf00      	nop
 8007168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800716a:	bc08      	pop	{r3}
 800716c:	469e      	mov	lr, r3
 800716e:	4770      	bx	lr
