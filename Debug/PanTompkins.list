
PanTompkins.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000123c0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000654  08012500  08012500  00022500  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08012b54  08012b54  00022b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08012b58  08012b58  00022b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000002e0  20000004  08012b5c  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00005450  200002e4  08012e3c  000302e4  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20005734  08012e3c  00035734  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000302e4  2**0
                  CONTENTS, READONLY
  9 .debug_info   00031e26  00000000  00000000  00030314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004c67  00000000  00000000  0006213a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002620  00000000  00000000  00066da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00002408  00000000  00000000  000693c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00025970  00000000  00000000  0006b7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000305ad  00000000  00000000  00091140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000e8209  00000000  00000000  000c16ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001a98f6  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000bb48  00000000  00000000  001a9948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002e4 	.word	0x200002e4
 800015c:	00000000 	.word	0x00000000
 8000160:	080124e8 	.word	0x080124e8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002e8 	.word	0x200002e8
 800017c:	080124e8 	.word	0x080124e8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_d2lz>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460d      	mov	r5, r1
 8000c42:	f7ff ff23 	bl	8000a8c <__aeabi_dcmplt>
 8000c46:	b928      	cbnz	r0, 8000c54 <__aeabi_d2lz+0x1c>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c50:	f000 b80a 	b.w	8000c68 <__aeabi_d2ulz>
 8000c54:	4620      	mov	r0, r4
 8000c56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5a:	f000 f805 	bl	8000c68 <__aeabi_d2ulz>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2ulz>:
 8000c68:	b5d0      	push	{r4, r6, r7, lr}
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__aeabi_d2ulz+0x34>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	f7ff fc99 	bl	80005a8 <__aeabi_dmul>
 8000c76:	f7ff ff6f 	bl	8000b58 <__aeabi_d2uiz>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	f7ff fc1a 	bl	80004b4 <__aeabi_ui2d>
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <__aeabi_d2ulz+0x38>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f7ff fc90 	bl	80005a8 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	4639      	mov	r1, r7
 8000c90:	f7ff fad2 	bl	8000238 <__aeabi_dsub>
 8000c94:	f7ff ff60 	bl	8000b58 <__aeabi_d2uiz>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c9c:	3df00000 	.word	0x3df00000
 8000ca0:	41f00000 	.word	0x41f00000

08000ca4 <arm_biquad_cascade_df1_f32>:
void arm_biquad_cascade_df1_f32(
  const arm_biquad_casd_df1_inst_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b097      	sub	sp, #92	; 0x5c
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
 8000cb0:	603b      	str	r3, [r7, #0]
  const float32_t *pIn = pSrc;                         /* Source pointer */
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	657b      	str	r3, [r7, #84]	; 0x54
        float32_t *pOut = pDst;                        /* Destination pointer */
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	653b      	str	r3, [r7, #80]	; 0x50
        float32_t *pState = S->pState;                 /* pState pointer */
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t acc;                                 /* Accumulator */
        float32_t b0, b1, b2, a1, a2;                  /* Filter coefficients */
        float32_t Xn1, Xn2, Yn1, Yn2;                  /* Filter pState variables */
        float32_t Xn;                                  /* Temporary input */
        uint32_t sample, stage = S->numStages;         /* Loop counters */
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	633b      	str	r3, [r7, #48]	; 0x30

  do
  {
    /* Reading the coefficients */
    b0 = *pCoeffs++;
 8000ccc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cce:	1d1a      	adds	r2, r3, #4
 8000cd0:	64ba      	str	r2, [r7, #72]	; 0x48
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    b1 = *pCoeffs++;
 8000cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cd8:	1d1a      	adds	r2, r3, #4
 8000cda:	64ba      	str	r2, [r7, #72]	; 0x48
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
    b2 = *pCoeffs++;
 8000ce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ce2:	1d1a      	adds	r2, r3, #4
 8000ce4:	64ba      	str	r2, [r7, #72]	; 0x48
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
    a1 = *pCoeffs++;
 8000cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cec:	1d1a      	adds	r2, r3, #4
 8000cee:	64ba      	str	r2, [r7, #72]	; 0x48
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	623b      	str	r3, [r7, #32]
    a2 = *pCoeffs++;
 8000cf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cf6:	1d1a      	adds	r2, r3, #4
 8000cf8:	64ba      	str	r2, [r7, #72]	; 0x48
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	61fb      	str	r3, [r7, #28]

    /* Reading the pState values */
    Xn1 = pState[0];
 8000cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	647b      	str	r3, [r7, #68]	; 0x44
    Xn2 = pState[1];
 8000d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	643b      	str	r3, [r7, #64]	; 0x40
    Yn1 = pState[2];
 8000d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    Yn2 = pState[3];
 8000d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	63bb      	str	r3, [r7, #56]	; 0x38
    sample = blockSize & 0x3U;

#else

    /* Initialize blkCnt with number of samples */
    sample = blockSize;
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	637b      	str	r3, [r7, #52]	; 0x34

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (sample > 0U)
 8000d1a:	e03c      	b.n	8000d96 <arm_biquad_cascade_df1_f32+0xf2>
    {
      /* Read the input */
      Xn = *pIn++;
 8000d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d1e:	1d1a      	adds	r2, r3, #4
 8000d20:	657a      	str	r2, [r7, #84]	; 0x54
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	61bb      	str	r3, [r7, #24]

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      acc = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 8000d26:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000d2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d32:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8000d36:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000d3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d42:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8000d46:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000d4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d52:	edd7 6a08 	vldr	s13, [r7, #32]
 8000d56:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000d5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d62:	edd7 6a07 	vldr	s13, [r7, #28]
 8000d66:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000d6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d72:	edc7 7a05 	vstr	s15, [r7, #20]

      /* Store output in destination buffer. */
      *pOut++ = acc;
 8000d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d78:	1d1a      	adds	r2, r3, #4
 8000d7a:	653a      	str	r2, [r7, #80]	; 0x50
 8000d7c:	697a      	ldr	r2, [r7, #20]
 8000d7e:	601a      	str	r2, [r3, #0]
      /* The states should be updated as: */
      /* Xn2 = Xn1 */
      /* Xn1 = Xn  */
      /* Yn2 = Yn1 */
      /* Yn1 = acc */
      Xn2 = Xn1;
 8000d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d82:	643b      	str	r3, [r7, #64]	; 0x40
      Xn1 = Xn;
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	647b      	str	r3, [r7, #68]	; 0x44
      Yn2 = Yn1;
 8000d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d8a:	63bb      	str	r3, [r7, #56]	; 0x38
      Yn1 = acc;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	63fb      	str	r3, [r7, #60]	; 0x3c

      /* decrement loop counter */
      sample--;
 8000d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d92:	3b01      	subs	r3, #1
 8000d94:	637b      	str	r3, [r7, #52]	; 0x34
    while (sample > 0U)
 8000d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d1bf      	bne.n	8000d1c <arm_biquad_cascade_df1_f32+0x78>
    }

    /* Store the updated state variables back into the pState array */
    *pState++ = Xn1;
 8000d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d9e:	1d1a      	adds	r2, r3, #4
 8000da0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000da2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000da4:	601a      	str	r2, [r3, #0]
    *pState++ = Xn2;
 8000da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000da8:	1d1a      	adds	r2, r3, #4
 8000daa:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000dac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000dae:	601a      	str	r2, [r3, #0]
    *pState++ = Yn1;
 8000db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000db2:	1d1a      	adds	r2, r3, #4
 8000db4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000db6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000db8:	601a      	str	r2, [r3, #0]
    *pState++ = Yn2;
 8000dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dbc:	1d1a      	adds	r2, r3, #4
 8000dbe:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000dc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000dc2:	601a      	str	r2, [r3, #0]

    /* The first stage goes from the input buffer to the output buffer. */
    /* Subsequent numStages occur in-place in the output buffer */
    pIn = pDst;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	657b      	str	r3, [r7, #84]	; 0x54

    /* Reset output pointer */
    pOut = pDst;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	653b      	str	r3, [r7, #80]	; 0x50

    /* decrement loop counter */
    stage--;
 8000dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	633b      	str	r3, [r7, #48]	; 0x30

  } while (stage > 0U);
 8000dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f47f af79 	bne.w	8000ccc <arm_biquad_cascade_df1_f32+0x28>

}
 8000dda:	bf00      	nop
 8000ddc:	bf00      	nop
 8000dde:	375c      	adds	r7, #92	; 0x5c
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <arm_biquad_cascade_df1_init_f32>:
void arm_biquad_cascade_df1_init_f32(
        arm_biquad_casd_df1_inst_f32 * S,
        uint8_t numStages,
  const float32_t * pCoeffs,
        float32_t * pState)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	460b      	mov	r3, r1
 8000df6:	72fb      	strb	r3, [r7, #11]
  /* Assign filter stages */
  S->numStages = numStages;
 8000df8:	7afa      	ldrb	r2, [r7, #11]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	601a      	str	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	609a      	str	r2, [r3, #8]

  /* Clear state buffer and size is always 4 * numStages */
  memset(pState, 0, (4U * (uint32_t) numStages) * sizeof(float32_t));
 8000e04:	7afb      	ldrb	r3, [r7, #11]
 8000e06:	011b      	lsls	r3, r3, #4
 8000e08:	461a      	mov	r2, r3
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	6838      	ldr	r0, [r7, #0]
 8000e0e:	f00c fef7 	bl	800dc00 <memset>

  /* Assign state pointer */
  S->pState = pState;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	683a      	ldr	r2, [r7, #0]
 8000e16:	605a      	str	r2, [r3, #4]
}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <arm_fir_f32>:
void arm_fir_f32(
  const arm_fir_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b08f      	sub	sp, #60	; 0x3c
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
 8000e2c:	603b      	str	r3, [r7, #0]
        float32_t *pState = S->pState;                 /* State pointer */
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	637b      	str	r3, [r7, #52]	; 0x34
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	617b      	str	r3, [r7, #20]
        float32_t *pStateCurnt;                        /* Points to the current sample of the state */
        float32_t *px;                                 /* Temporary pointer for state buffer */
  const float32_t *pb;                                 /* Temporary pointer for coefficient buffer */
        float32_t acc0;                                /* Accumulator */
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	881b      	ldrh	r3, [r3, #0]
 8000e3e:	613b      	str	r3, [r7, #16]
        float32_t c0;                                           /* Temporary variable to hold coefficient value */
#endif

  /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
  /* pStateCurnt points to the location where the new input data should be written */
  pStateCurnt = &(S->pState[(numTaps - 1U)]);
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	685a      	ldr	r2, [r3, #4]
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	4413      	add	r3, r2
 8000e50:	633b      	str	r3, [r7, #48]	; 0x30
  blkCnt = blockSize % 0x8U;

#else

  /* Initialize blkCnt with number of taps */
  blkCnt = blockSize;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8000e56:	e034      	b.n	8000ec2 <arm_fir_f32+0xa2>
  {
    /* Copy one sample at a time into state buffer */
    *pStateCurnt++ = *pSrc++;
 8000e58:	68ba      	ldr	r2, [r7, #8]
 8000e5a:	1d13      	adds	r3, r2, #4
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e60:	1d19      	adds	r1, r3, #4
 8000e62:	6339      	str	r1, [r7, #48]	; 0x30
 8000e64:	6812      	ldr	r2, [r2, #0]
 8000e66:	601a      	str	r2, [r3, #0]

    /* Set the accumulator to zero */
    acc0 = 0.0f;
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Initialize state pointer */
    px = pState;
 8000e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e70:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Initialize Coefficient pointer */
    pb = pCoeffs;
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	62bb      	str	r3, [r7, #40]	; 0x28

    i = numTaps;
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	623b      	str	r3, [r7, #32]

    /* Perform the multiply-accumulates */
    while (i > 0U)
 8000e7a:	e014      	b.n	8000ea6 <arm_fir_f32+0x86>
    {
      /* acc =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-numTaps-3] +...+ b[0] * x[0] */
      acc0 += *px++ * *pb++;
 8000e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e7e:	1d1a      	adds	r2, r3, #4
 8000e80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000e82:	ed93 7a00 	vldr	s14, [r3]
 8000e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e88:	1d1a      	adds	r2, r3, #4
 8000e8a:	62ba      	str	r2, [r7, #40]	; 0x28
 8000e8c:	edd3 7a00 	vldr	s15, [r3]
 8000e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e94:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000e98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e9c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

      i--;
 8000ea0:	6a3b      	ldr	r3, [r7, #32]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	623b      	str	r3, [r7, #32]
    while (i > 0U)
 8000ea6:	6a3b      	ldr	r3, [r7, #32]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1e7      	bne.n	8000e7c <arm_fir_f32+0x5c>
    }

    /* Store result in destination buffer. */
    *pDst++ = acc0;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	1d1a      	adds	r2, r3, #4
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eb4:	601a      	str	r2, [r3, #0]

    /* Advance state pointer by 1 for the next sample */
    pState = pState + 1U;
 8000eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eb8:	3304      	adds	r3, #4
 8000eba:	637b      	str	r3, [r7, #52]	; 0x34

    /* Decrement loop counter */
    blkCnt--;
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1c7      	bne.n	8000e58 <arm_fir_f32+0x38>
  /* Processing is complete.
     Now copy the last numTaps - 1 samples to the start of the state buffer.
     This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCurnt = S->pState;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	633b      	str	r3, [r7, #48]	; 0x30
  tapCnt = (numTaps - 1U) % 0x4U;

#else

  /* Initialize tapCnt with number of taps */
  tapCnt = (numTaps - 1U);
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy remaining data */
  while (tapCnt > 0U)
 8000ed4:	e00a      	b.n	8000eec <arm_fir_f32+0xcc>
  {
    *pStateCurnt++ = *pState++;
 8000ed6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ed8:	1d13      	adds	r3, r2, #4
 8000eda:	637b      	str	r3, [r7, #52]	; 0x34
 8000edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ede:	1d19      	adds	r1, r3, #4
 8000ee0:	6339      	str	r1, [r7, #48]	; 0x30
 8000ee2:	6812      	ldr	r2, [r2, #0]
 8000ee4:	601a      	str	r2, [r3, #0]

    /* Decrement loop counter */
    tapCnt--;
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	61fb      	str	r3, [r7, #28]
  while (tapCnt > 0U)
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1f1      	bne.n	8000ed6 <arm_fir_f32+0xb6>
  }

}
 8000ef2:	bf00      	nop
 8000ef4:	bf00      	nop
 8000ef6:	373c      	adds	r7, #60	; 0x3c
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <arm_fir_init_f32>:
        arm_fir_instance_f32 * S,
        uint16_t numTaps,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	817b      	strh	r3, [r7, #10]
  /* Assign filter taps */
  S->numTaps = numTaps;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	897a      	ldrh	r2, [r7, #10]
 8000f14:	801a      	strh	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	609a      	str	r2, [r3, #8]

  /* Clear state buffer. The size is always (blockSize + numTaps - 1) */
#if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  memset(pState, 0, (numTaps + (blockSize - 1U) + blockSize) * sizeof(float32_t));
#else
  memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 8000f1c:	897a      	ldrh	r2, [r7, #10]
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	4413      	add	r3, r2
 8000f22:	3b01      	subs	r3, #1
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	461a      	mov	r2, r3
 8000f28:	2100      	movs	r1, #0
 8000f2a:	6838      	ldr	r0, [r7, #0]
 8000f2c:	f00c fe68 	bl	800dc00 <memset>
#endif
  /* Assign state pointer */
  S->pState = pState;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	683a      	ldr	r2, [r7, #0]
 8000f34:	605a      	str	r2, [r3, #4]
}
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <arm_mean_f32>:
#else
void arm_mean_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b087      	sub	sp, #28
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	60f8      	str	r0, [r7, #12]
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 8000f4a:	f04f 0300 	mov.w	r3, #0
 8000f4e:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8000f54:	e00d      	b.n	8000f72 <arm_mean_f32+0x34>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	1d1a      	adds	r2, r3, #4
 8000f5a:	60fa      	str	r2, [r7, #12]
 8000f5c:	edd3 7a00 	vldr	s15, [r3]
 8000f60:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f68:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1ee      	bne.n	8000f56 <arm_mean_f32+0x18>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store result to destination */
  *pResult = (sum / blockSize);
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	ee07 3a90 	vmov	s15, r3
 8000f7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f82:	edd7 6a04 	vldr	s13, [r7, #16]
 8000f86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	edc3 7a00 	vstr	s15, [r3]
}
 8000f90:	bf00      	nop
 8000f92:	371c      	adds	r7, #28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <PT_init>:
	and filter Buffers.

 *******************************************************************************/

void PT_init( void )
{
 8000f9c:	b590      	push	{r4, r7, lr}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
	/**************************************************
	Initialize Pan_Tompkins structure.
	**************************************************/

	memset(&PT_data, 0, sizeof(PT_data));
 8000fa2:	22ea      	movs	r2, #234	; 0xea
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	487d      	ldr	r0, [pc, #500]	; (800119c <PT_init+0x200>)
 8000fa8:	f00c fe2a 	bl	800dc00 <memset>

	PT_dptr->PT_state		= START_UP;
 8000fac:	4b7b      	ldr	r3, [pc, #492]	; (800119c <PT_init+0x200>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	80da      	strh	r2, [r3, #6]

	PT_dptr->Recent_RR_M = PT_dptr->RR_M =  PT1000MS;
 8000fb2:	4b7a      	ldr	r3, [pc, #488]	; (800119c <PT_init+0x200>)
 8000fb4:	22c8      	movs	r2, #200	; 0xc8
 8000fb6:	849a      	strh	r2, [r3, #36]	; 0x24
 8000fb8:	4a78      	ldr	r2, [pc, #480]	; (800119c <PT_init+0x200>)
 8000fba:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8000fbe:	8113      	strh	r3, [r2, #8]

	PT_dptr->RR_Low_L		= RR92PERCENT;
 8000fc0:	4b76      	ldr	r3, [pc, #472]	; (800119c <PT_init+0x200>)
 8000fc2:	22b8      	movs	r2, #184	; 0xb8
 8000fc4:	84da      	strh	r2, [r3, #38]	; 0x26
	PT_dptr->RR_High_L		= RR116PERCENT;
 8000fc6:	4b75      	ldr	r3, [pc, #468]	; (800119c <PT_init+0x200>)
 8000fc8:	22e8      	movs	r2, #232	; 0xe8
 8000fca:	851a      	strh	r2, [r3, #40]	; 0x28
	PT_dptr->RR_Missed_L	= RR166PERCENT;
 8000fcc:	4b73      	ldr	r3, [pc, #460]	; (800119c <PT_init+0x200>)
 8000fce:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8000fd2:	855a      	strh	r2, [r3, #42]	; 0x2a

	PT_dptr->LP_pointer		= 0;
 8000fd4:	4b71      	ldr	r3, [pc, #452]	; (800119c <PT_init+0x200>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	801a      	strh	r2, [r3, #0]
	PT_dptr->HP_pointer		= 0;
 8000fda:	4b70      	ldr	r3, [pc, #448]	; (800119c <PT_init+0x200>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	805a      	strh	r2, [r3, #2]
	PT_dptr->MVA_pointer	= 0;
 8000fe0:	4b6e      	ldr	r3, [pc, #440]	; (800119c <PT_init+0x200>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	809a      	strh	r2, [r3, #4]

	PT_dptr->HR_State = REGULAR_HR;
 8000fe6:	4b6d      	ldr	r3, [pc, #436]	; (800119c <PT_init+0x200>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	859a      	strh	r2, [r3, #44]	; 0x2c
	/**************************************************
	Initialize filter buffers
	**************************************************/
	int8_t idex;

	for (idex = 0; idex < LP_BUFFER_SIZE; idex++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	e00d      	b.n	800100e <PT_init+0x72>
		PT_dptr->LP_buf[idex]		= 0;							//  LP filter buffer
 8000ff2:	4a6a      	ldr	r2, [pc, #424]	; (800119c <PT_init+0x200>)
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	3314      	adds	r3, #20
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	4413      	add	r3, r2
 8000ffe:	2200      	movs	r2, #0
 8001000:	80da      	strh	r2, [r3, #6]
	for (idex = 0; idex < LP_BUFFER_SIZE; idex++)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	3301      	adds	r3, #1
 800100a:	b2db      	uxtb	r3, r3
 800100c:	71fb      	strb	r3, [r7, #7]
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	2b0b      	cmp	r3, #11
 8001014:	dded      	ble.n	8000ff2 <PT_init+0x56>
	for (idex = 0; idex < HP_BUFFER_SIZE; idex++)
 8001016:	2300      	movs	r3, #0
 8001018:	71fb      	strb	r3, [r7, #7]
 800101a:	e00d      	b.n	8001038 <PT_init+0x9c>
		PT_dptr->HP_buf[idex]		= 0;							//  HP filter buffer
 800101c:	4a5f      	ldr	r2, [pc, #380]	; (800119c <PT_init+0x200>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	3320      	adds	r3, #32
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	4413      	add	r3, r2
 8001028:	2200      	movs	r2, #0
 800102a:	80da      	strh	r2, [r3, #6]
	for (idex = 0; idex < HP_BUFFER_SIZE; idex++)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	3301      	adds	r3, #1
 8001034:	b2db      	uxtb	r3, r3
 8001036:	71fb      	strb	r3, [r7, #7]
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	2b1f      	cmp	r3, #31
 800103e:	dded      	ble.n	800101c <PT_init+0x80>
	for (idex = 0; idex < DR_BUFFER_SIZE; idex++)
 8001040:	2300      	movs	r3, #0
 8001042:	71fb      	strb	r3, [r7, #7]
 8001044:	e00d      	b.n	8001062 <PT_init+0xc6>
		PT_dptr->DR_buf[idex]		= 0;							//  DR filter buffer
 8001046:	4a55      	ldr	r2, [pc, #340]	; (800119c <PT_init+0x200>)
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	3340      	adds	r3, #64	; 0x40
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	4413      	add	r3, r2
 8001052:	2200      	movs	r2, #0
 8001054:	80da      	strh	r2, [r3, #6]
	for (idex = 0; idex < DR_BUFFER_SIZE; idex++)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	3301      	adds	r3, #1
 800105e:	b2db      	uxtb	r3, r3
 8001060:	71fb      	strb	r3, [r7, #7]
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	2b03      	cmp	r3, #3
 8001068:	dded      	ble.n	8001046 <PT_init+0xaa>
	for (idex = 0; idex < MVA_BUFFER_SIZE; idex++)
 800106a:	2300      	movs	r3, #0
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	e00d      	b.n	800108c <PT_init+0xf0>
		PT_dptr->MVA_buf[idex]		= 0;							//  MVA filter buffer
 8001070:	4a4a      	ldr	r2, [pc, #296]	; (800119c <PT_init+0x200>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	3344      	adds	r3, #68	; 0x44
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	4413      	add	r3, r2
 800107c:	2200      	movs	r2, #0
 800107e:	80da      	strh	r2, [r3, #6]
	for (idex = 0; idex < MVA_BUFFER_SIZE; idex++)
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	3301      	adds	r3, #1
 8001088:	b2db      	uxtb	r3, r3
 800108a:	71fb      	strb	r3, [r7, #7]
 800108c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001090:	2b1d      	cmp	r3, #29
 8001092:	dded      	ble.n	8001070 <PT_init+0xd4>
	for (idex = 0; idex < RR_BUFFER_SIZE; idex++) {
 8001094:	2300      	movs	r3, #0
 8001096:	71fb      	strb	r3, [r7, #7]
 8001098:	e01c      	b.n	80010d4 <PT_init+0x138>
		PT_dptr->RR_AVRG1_buf[idex] = 
			PT_dptr->RR_AVRG2_buf[idex] = PT1000MS;					//  Normal	and extreme RR buffers
 800109a:	4940      	ldr	r1, [pc, #256]	; (800119c <PT_init+0x200>)
 800109c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80010a0:	f102 036c 	add.w	r3, r2, #108	; 0x6c
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	440b      	add	r3, r1
 80010a8:	20c8      	movs	r0, #200	; 0xc8
 80010aa:	8058      	strh	r0, [r3, #2]
		PT_dptr->RR_AVRG1_buf[idex] = 
 80010ac:	4c3b      	ldr	r4, [pc, #236]	; (800119c <PT_init+0x200>)
 80010ae:	f997 0007 	ldrsb.w	r0, [r7, #7]
			PT_dptr->RR_AVRG2_buf[idex] = PT1000MS;					//  Normal	and extreme RR buffers
 80010b2:	f102 036c 	add.w	r3, r2, #108	; 0x6c
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	440b      	add	r3, r1
 80010ba:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
		PT_dptr->RR_AVRG1_buf[idex] = 
 80010be:	f100 0364 	add.w	r3, r0, #100	; 0x64
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	4423      	add	r3, r4
 80010c6:	805a      	strh	r2, [r3, #2]
	for (idex = 0; idex < RR_BUFFER_SIZE; idex++) {
 80010c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	3301      	adds	r3, #1
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	2b07      	cmp	r3, #7
 80010da:	ddde      	ble.n	800109a <PT_init+0xfe>
	}

	/**************************************************
	Initialize all static variables 
	**************************************************/
	Prev_val = Prev_Prev_val = 0;									// Place holders for peak detector in Integrated Sig
 80010dc:	4b30      	ldr	r3, [pc, #192]	; (80011a0 <PT_init+0x204>)
 80010de:	2200      	movs	r2, #0
 80010e0:	801a      	strh	r2, [r3, #0]
 80010e2:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <PT_init+0x204>)
 80010e4:	881a      	ldrh	r2, [r3, #0]
 80010e6:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <PT_init+0x208>)
 80010e8:	801a      	strh	r2, [r3, #0]
	Prev_valBP = Prev_Prev_valBP = Best_PeakBP = 0;					// Place holders for peak detector in BP signal
 80010ea:	4b2f      	ldr	r3, [pc, #188]	; (80011a8 <PT_init+0x20c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	801a      	strh	r2, [r3, #0]
 80010f0:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <PT_init+0x20c>)
 80010f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010f6:	4b2d      	ldr	r3, [pc, #180]	; (80011ac <PT_init+0x210>)
 80010f8:	801a      	strh	r2, [r3, #0]
 80010fa:	4b2c      	ldr	r3, [pc, #176]	; (80011ac <PT_init+0x210>)
 80010fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001100:	4b2b      	ldr	r3, [pc, #172]	; (80011b0 <PT_init+0x214>)
 8001102:	801a      	strh	r2, [r3, #0]
	Prev_valDR = Prev_Prev_valDR = Best_PeakDR = Old_PeakDR = 0;	// Place holders for peak detector in Derivative signal (Used for T-wave discrimination)
 8001104:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <PT_init+0x218>)
 8001106:	2200      	movs	r2, #0
 8001108:	801a      	strh	r2, [r3, #0]
 800110a:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <PT_init+0x218>)
 800110c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001110:	4b29      	ldr	r3, [pc, #164]	; (80011b8 <PT_init+0x21c>)
 8001112:	801a      	strh	r2, [r3, #0]
 8001114:	4b28      	ldr	r3, [pc, #160]	; (80011b8 <PT_init+0x21c>)
 8001116:	f9b3 2000 	ldrsh.w	r2, [r3]
 800111a:	4b28      	ldr	r3, [pc, #160]	; (80011bc <PT_init+0x220>)
 800111c:	801a      	strh	r2, [r3, #0]
 800111e:	4b27      	ldr	r3, [pc, #156]	; (80011bc <PT_init+0x220>)
 8001120:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001124:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <PT_init+0x224>)
 8001126:	801a      	strh	r2, [r3, #0]
	Count_SinceRR = 0;												// Nr of samples since last qrs peak
 8001128:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <PT_init+0x228>)
 800112a:	2200      	movs	r2, #0
 800112c:	801a      	strh	r2, [r3, #0]
	RR1_p = RR2_p = 0;												// Pointers to RR average 1 and 2 resepectively
 800112e:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <PT_init+0x22c>)
 8001130:	2200      	movs	r2, #0
 8001132:	801a      	strh	r2, [r3, #0]
 8001134:	4b24      	ldr	r3, [pc, #144]	; (80011c8 <PT_init+0x22c>)
 8001136:	f9b3 2000 	ldrsh.w	r2, [r3]
 800113a:	4b24      	ldr	r3, [pc, #144]	; (80011cc <PT_init+0x230>)
 800113c:	801a      	strh	r2, [r3, #0]
	MV_sum = 0;														// sum for moving average filter
 800113e:	4b24      	ldr	r3, [pc, #144]	; (80011d0 <PT_init+0x234>)
 8001140:	2200      	movs	r2, #0
 8001142:	801a      	strh	r2, [r3, #0]
	RR1_sum = RR2_sum = PT1000MS << 3;								// Sum of RR1 and RR2 buffers
 8001144:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <PT_init+0x238>)
 8001146:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800114a:	801a      	strh	r2, [r3, #0]
 800114c:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <PT_init+0x238>)
 800114e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001152:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <PT_init+0x23c>)
 8001154:	801a      	strh	r2, [r3, #0]
	BlankTimeCnt = 0;												// Counter for blank-time.
 8001156:	4b21      	ldr	r3, [pc, #132]	; (80011dc <PT_init+0x240>)
 8001158:	2200      	movs	r2, #0
 800115a:	801a      	strh	r2, [r3, #0]
	SBcntI = 0;														// For searchback index in Integ Signal
 800115c:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <PT_init+0x244>)
 800115e:	2200      	movs	r2, #0
 8001160:	801a      	strh	r2, [r3, #0]
	SB_peakI = 0;													// For searchback in Integ sig
 8001162:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <PT_init+0x248>)
 8001164:	2200      	movs	r2, #0
 8001166:	801a      	strh	r2, [r3, #0]
	SB_peakBP = SB_peakDR = 0;										// For searchback peak holders in BP and slope signal
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <PT_init+0x24c>)
 800116a:	2200      	movs	r2, #0
 800116c:	801a      	strh	r2, [r3, #0]
 800116e:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <PT_init+0x24c>)
 8001170:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001174:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <PT_init+0x250>)
 8001176:	801a      	strh	r2, [r3, #0]
	st_mx_pk = 0;													// Used in learning phase 1 to estimate thresholds
 8001178:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <PT_init+0x254>)
 800117a:	2200      	movs	r2, #0
 800117c:	801a      	strh	r2, [r3, #0]
	y_h = 0;														// recusrively used in HP filter
 800117e:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <PT_init+0x258>)
 8001180:	2200      	movs	r2, #0
 8001182:	801a      	strh	r2, [r3, #0]

#if (FILTER_FORM == 2)
	LP_y_new = LP_y_old = 0;										// Parameters for DirectForm || LP filter
 8001184:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <PT_init+0x25c>)
 8001186:	2200      	movs	r2, #0
 8001188:	801a      	strh	r2, [r3, #0]
 800118a:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <PT_init+0x25c>)
 800118c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001190:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <PT_init+0x260>)
 8001192:	801a      	strh	r2, [r3, #0]
#endif
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bd90      	pop	{r4, r7, pc}
 800119c:	20000300 	.word	0x20000300
 80011a0:	20000418 	.word	0x20000418
 80011a4:	20000416 	.word	0x20000416
 80011a8:	200003ee 	.word	0x200003ee
 80011ac:	200003ec 	.word	0x200003ec
 80011b0:	200003ea 	.word	0x200003ea
 80011b4:	200003f6 	.word	0x200003f6
 80011b8:	200003f4 	.word	0x200003f4
 80011bc:	200003f2 	.word	0x200003f2
 80011c0:	200003f0 	.word	0x200003f0
 80011c4:	200003f8 	.word	0x200003f8
 80011c8:	200003fc 	.word	0x200003fc
 80011cc:	200003fa 	.word	0x200003fa
 80011d0:	2000040e 	.word	0x2000040e
 80011d4:	20000400 	.word	0x20000400
 80011d8:	200003fe 	.word	0x200003fe
 80011dc:	20000402 	.word	0x20000402
 80011e0:	20000404 	.word	0x20000404
 80011e4:	2000041a 	.word	0x2000041a
 80011e8:	20000408 	.word	0x20000408
 80011ec:	20000406 	.word	0x20000406
 80011f0:	20000412 	.word	0x20000412
 80011f4:	2000040a 	.word	0x2000040a
 80011f8:	2000041e 	.word	0x2000041e
 80011fc:	2000041c 	.word	0x2000041c

08001200 <PT_StateMachine>:
	peak delay to the current sample.

 **********************************************************************************/

int16_t PT_StateMachine(int16_t datum)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	80fb      	strh	r3, [r7, #6]
	int16_t BeatDelay = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	81fb      	strh	r3, [r7, #14]

	uint16_t PEAKI ;

	// ------- Preprocessing filtering and Peak detection --------- //
	LPFilter(&datum);										// LowPass filtering
 800120e:	1dbb      	adds	r3, r7, #6
 8001210:	4618      	mov	r0, r3
 8001212:	f000 fa55 	bl	80016c0 <LPFilter>
	HPFilter();												// HighPass filtering
 8001216:	f000 fad9 	bl	80017cc <HPFilter>

	PeakDtcBP(PT_dptr->HPF_val);							// Store BP signal highest peak
 800121a:	4b80      	ldr	r3, [pc, #512]	; (800141c <PT_StateMachine+0x21c>)
 800121c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001220:	4618      	mov	r0, r3
 8001222:	f000 fcbf 	bl	8001ba4 <PeakDtcBP>
	
	DerivFilter();
 8001226:	f000 fb61 	bl	80018ec <DerivFilter>
	PeakDtcDR(PT_dptr->DRF_val);							// Store the highest slope for T wave discrimination
 800122a:	4b7c      	ldr	r3, [pc, #496]	; (800141c <PT_StateMachine+0x21c>)
 800122c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001230:	4618      	mov	r0, r3
 8001232:	f000 fc79 	bl	8001b28 <PeakDtcDR>

	SQRFilter();											//Squaring
 8001236:	f000 fb9f 	bl	8001978 <SQRFilter>

	MVAFilter();
 800123a:	f000 fbd9 	bl	80019f0 <MVAFilter>
	PEAKI = PeakDtcI();
 800123e:	f000 fc47 	bl	8001ad0 <PeakDtcI>
 8001242:	4603      	mov	r3, r0
 8001244:	b29b      	uxth	r3, r3
 8001246:	81bb      	strh	r3, [r7, #12]

	// ---- Integrated Peak detection checks and blankTime ---- //
	if (!PEAKI && BlankTimeCnt)								// No beat, decrement BlankTime
 8001248:	89bb      	ldrh	r3, [r7, #12]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d116      	bne.n	800127c <PT_StateMachine+0x7c>
 800124e:	4b74      	ldr	r3, [pc, #464]	; (8001420 <PT_StateMachine+0x220>)
 8001250:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d011      	beq.n	800127c <PT_StateMachine+0x7c>
	{
		if (--BlankTimeCnt == 0)							// If blanktime over place the oldest peak
 8001258:	4b71      	ldr	r3, [pc, #452]	; (8001420 <PT_StateMachine+0x220>)
 800125a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800125e:	b29b      	uxth	r3, r3
 8001260:	3b01      	subs	r3, #1
 8001262:	b29b      	uxth	r3, r3
 8001264:	b21a      	sxth	r2, r3
 8001266:	4b6e      	ldr	r3, [pc, #440]	; (8001420 <PT_StateMachine+0x220>)
 8001268:	801a      	strh	r2, [r3, #0]
 800126a:	4b6d      	ldr	r3, [pc, #436]	; (8001420 <PT_StateMachine+0x220>)
 800126c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d139      	bne.n	80012e8 <PT_StateMachine+0xe8>
			PEAKI = PEAKI_temp;
 8001274:	4b6b      	ldr	r3, [pc, #428]	; (8001424 <PT_StateMachine+0x224>)
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	81bb      	strh	r3, [r7, #12]
		if (--BlankTimeCnt == 0)							// If blanktime over place the oldest peak
 800127a:	e035      	b.n	80012e8 <PT_StateMachine+0xe8>
	}
	else if (PEAKI && !BlankTimeCnt)						// If no peak for peak for last 200msec, save the current peak
 800127c:	89bb      	ldrh	r3, [r7, #12]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00d      	beq.n	800129e <PT_StateMachine+0x9e>
 8001282:	4b67      	ldr	r3, [pc, #412]	; (8001420 <PT_StateMachine+0x220>)
 8001284:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d108      	bne.n	800129e <PT_StateMachine+0x9e>
	{
		BlankTimeCnt = PT200MS;
 800128c:	4b64      	ldr	r3, [pc, #400]	; (8001420 <PT_StateMachine+0x220>)
 800128e:	2228      	movs	r2, #40	; 0x28
 8001290:	801a      	strh	r2, [r3, #0]
		PEAKI_temp   = PEAKI;
 8001292:	89ba      	ldrh	r2, [r7, #12]
 8001294:	4b63      	ldr	r3, [pc, #396]	; (8001424 <PT_StateMachine+0x224>)
 8001296:	801a      	strh	r2, [r3, #0]
		PEAKI = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	81bb      	strh	r3, [r7, #12]
 800129c:	e024      	b.n	80012e8 <PT_StateMachine+0xe8>
	}
	else if(PEAKI)											// If a bigger peak comes along, store it
 800129e:	89bb      	ldrh	r3, [r7, #12]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d021      	beq.n	80012e8 <PT_StateMachine+0xe8>
	{
		if (PEAKI > PEAKI_temp)
 80012a4:	89ba      	ldrh	r2, [r7, #12]
 80012a6:	4b5f      	ldr	r3, [pc, #380]	; (8001424 <PT_StateMachine+0x224>)
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d908      	bls.n	80012c0 <PT_StateMachine+0xc0>
		{
			BlankTimeCnt = PT200MS;
 80012ae:	4b5c      	ldr	r3, [pc, #368]	; (8001420 <PT_StateMachine+0x220>)
 80012b0:	2228      	movs	r2, #40	; 0x28
 80012b2:	801a      	strh	r2, [r3, #0]
			PEAKI_temp = PEAKI;
 80012b4:	89ba      	ldrh	r2, [r7, #12]
 80012b6:	4b5b      	ldr	r3, [pc, #364]	; (8001424 <PT_StateMachine+0x224>)
 80012b8:	801a      	strh	r2, [r3, #0]
			PEAKI = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	81bb      	strh	r3, [r7, #12]
 80012be:	e013      	b.n	80012e8 <PT_StateMachine+0xe8>
		}
		else if (--BlankTimeCnt == 0)
 80012c0:	4b57      	ldr	r3, [pc, #348]	; (8001420 <PT_StateMachine+0x220>)
 80012c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	3b01      	subs	r3, #1
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	b21a      	sxth	r2, r3
 80012ce:	4b54      	ldr	r3, [pc, #336]	; (8001420 <PT_StateMachine+0x220>)
 80012d0:	801a      	strh	r2, [r3, #0]
 80012d2:	4b53      	ldr	r3, [pc, #332]	; (8001420 <PT_StateMachine+0x220>)
 80012d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d103      	bne.n	80012e4 <PT_StateMachine+0xe4>
			PEAKI = PEAKI_temp;
 80012dc:	4b51      	ldr	r3, [pc, #324]	; (8001424 <PT_StateMachine+0x224>)
 80012de:	881b      	ldrh	r3, [r3, #0]
 80012e0:	81bb      	strh	r3, [r7, #12]
 80012e2:	e001      	b.n	80012e8 <PT_StateMachine+0xe8>
		else
			PEAKI = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	81bb      	strh	r3, [r7, #12]
	}

	// -- Run Different Phases of the Algo -> Learning Ph1, 2 and decision --//
	++Count_SinceRR;
 80012e8:	4b4f      	ldr	r3, [pc, #316]	; (8001428 <PT_StateMachine+0x228>)
 80012ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	3301      	adds	r3, #1
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	b21a      	sxth	r2, r3
 80012f6:	4b4c      	ldr	r3, [pc, #304]	; (8001428 <PT_StateMachine+0x228>)
 80012f8:	801a      	strh	r2, [r3, #0]
	if (PT_dptr->PT_state == START_UP || PT_dptr->PT_state == LEARN_PH_1)		
 80012fa:	4b48      	ldr	r3, [pc, #288]	; (800141c <PT_StateMachine+0x21c>)
 80012fc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d004      	beq.n	800130e <PT_StateMachine+0x10e>
 8001304:	4b45      	ldr	r3, [pc, #276]	; (800141c <PT_StateMachine+0x21c>)
 8001306:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d10a      	bne.n	8001324 <PT_StateMachine+0x124>
	{ 
		if (PEAKI > 0)
 800130e:	89bb      	ldrh	r3, [r7, #12]
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 80c2 	beq.w	800149a <PT_StateMachine+0x29a>
			LearningPhase1(&PEAKI, &Best_PeakBP);
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	4944      	ldr	r1, [pc, #272]	; (800142c <PT_StateMachine+0x22c>)
 800131c:	4618      	mov	r0, r3
 800131e:	f000 f933 	bl	8001588 <LearningPhase1>
		if (PEAKI > 0)
 8001322:	e0ba      	b.n	800149a <PT_StateMachine+0x29a>
	}
	// ---- Once learning Phase 1 done, start storing beats ---- //
	else										
	{
		// ---- Is the peak taller than ThI1 and ThF1? ---- //
		if (PEAKI > PT_dptr->ThI1 && Best_PeakBP > PT_dptr->ThF1)
 8001324:	4b3d      	ldr	r3, [pc, #244]	; (800141c <PT_StateMachine+0x21c>)
 8001326:	8a9a      	ldrh	r2, [r3, #20]
 8001328:	89bb      	ldrh	r3, [r7, #12]
 800132a:	429a      	cmp	r2, r3
 800132c:	f080 808c 	bcs.w	8001448 <PT_StateMachine+0x248>
 8001330:	4b3a      	ldr	r3, [pc, #232]	; (800141c <PT_StateMachine+0x21c>)
 8001332:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8001336:	4b3d      	ldr	r3, [pc, #244]	; (800142c <PT_StateMachine+0x22c>)
 8001338:	f9b3 3000 	ldrsh.w	r3, [r3]
 800133c:	429a      	cmp	r2, r3
 800133e:	f280 8083 	bge.w	8001448 <PT_StateMachine+0x248>
		{

			// ---- Initiated phase 2 ---- //
			if (PT_dptr->PT_state == LEARN_PH_2)
 8001342:	4b36      	ldr	r3, [pc, #216]	; (800141c <PT_StateMachine+0x21c>)
 8001344:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001348:	2b02      	cmp	r3, #2
 800134a:	d11d      	bne.n	8001388 <PT_StateMachine+0x188>
			{
				// ----- Update Integ & BP Th ------ //
				UpdateThI(&PEAKI, 0);
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f000 fd78 	bl	8001e48 <UpdateThI>
				UpdateThF(&Best_PeakBP, 0);
 8001358:	2100      	movs	r1, #0
 800135a:	4834      	ldr	r0, [pc, #208]	; (800142c <PT_StateMachine+0x22c>)
 800135c:	f000 fdc4 	bl	8001ee8 <UpdateThF>

				// --- First RR interval --- //
				BeatDelay = GENERAL_DELAY + PT200MS;
 8001360:	234e      	movs	r3, #78	; 0x4e
 8001362:	81fb      	strh	r3, [r7, #14]
				Count_SinceRR = 0;
 8001364:	4b30      	ldr	r3, [pc, #192]	; (8001428 <PT_StateMachine+0x228>)
 8001366:	2200      	movs	r2, #0
 8001368:	801a      	strh	r2, [r3, #0]
				Old_PeakDR = Best_PeakDR;
 800136a:	4b31      	ldr	r3, [pc, #196]	; (8001430 <PT_StateMachine+0x230>)
 800136c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001370:	4b30      	ldr	r3, [pc, #192]	; (8001434 <PT_StateMachine+0x234>)
 8001372:	801a      	strh	r2, [r3, #0]
				Best_PeakDR = 0;
 8001374:	4b2e      	ldr	r3, [pc, #184]	; (8001430 <PT_StateMachine+0x230>)
 8001376:	2200      	movs	r2, #0
 8001378:	801a      	strh	r2, [r3, #0]
				Best_PeakBP = 0;
 800137a:	4b2c      	ldr	r3, [pc, #176]	; (800142c <PT_StateMachine+0x22c>)
 800137c:	2200      	movs	r2, #0
 800137e:	801a      	strh	r2, [r3, #0]

				// --- Now we can compute RR intervals --- //
				PT_dptr->PT_state = DETECTING;
 8001380:	4b26      	ldr	r3, [pc, #152]	; (800141c <PT_StateMachine+0x21c>)
 8001382:	2203      	movs	r2, #3
 8001384:	80da      	strh	r2, [r3, #6]
			if (PT_dptr->PT_state == LEARN_PH_2)
 8001386:	e088      	b.n	800149a <PT_StateMachine+0x29a>
			}
			// ------ Learning phases are done! -------- //
			else
			{
			// --- T-Wave Test if RR < 360msec, is current slope lower 0.5prev_slope then noise --- //
				if (Count_SinceRR < PT360MS && (Best_PeakDR < (Old_PeakDR >> 2)))
 8001388:	4b27      	ldr	r3, [pc, #156]	; (8001428 <PT_StateMachine+0x228>)
 800138a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800138e:	2b47      	cmp	r3, #71	; 0x47
 8001390:	dc14      	bgt.n	80013bc <PT_StateMachine+0x1bc>
 8001392:	4b28      	ldr	r3, [pc, #160]	; (8001434 <PT_StateMachine+0x234>)
 8001394:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001398:	109b      	asrs	r3, r3, #2
 800139a:	b21a      	sxth	r2, r3
 800139c:	4b24      	ldr	r3, [pc, #144]	; (8001430 <PT_StateMachine+0x230>)
 800139e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	dd0a      	ble.n	80013bc <PT_StateMachine+0x1bc>
				{
					// ----- Update Integ & BP Th ------ //
					UpdateThI(&PEAKI, 1);
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	2101      	movs	r1, #1
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 fd4b 	bl	8001e48 <UpdateThI>
					UpdateThF(&Best_PeakBP, 1);
 80013b2:	2101      	movs	r1, #1
 80013b4:	481d      	ldr	r0, [pc, #116]	; (800142c <PT_StateMachine+0x22c>)
 80013b6:	f000 fd97 	bl	8001ee8 <UpdateThF>
			if (PT_dptr->PT_state == LEARN_PH_2)
 80013ba:	e06e      	b.n	800149a <PT_StateMachine+0x29a>

				}
				else
				{
					// ----- Update Integ & BP Th && RR buffers ------ //
					UpdateThI(&PEAKI, 0);
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 fd40 	bl	8001e48 <UpdateThI>
					UpdateThF(&Best_PeakBP, 0);
 80013c8:	2100      	movs	r1, #0
 80013ca:	4818      	ldr	r0, [pc, #96]	; (800142c <PT_StateMachine+0x22c>)
 80013cc:	f000 fd8c 	bl	8001ee8 <UpdateThF>
					UpdateRR(Count_SinceRR);
 80013d0:	4b15      	ldr	r3, [pc, #84]	; (8001428 <PT_StateMachine+0x228>)
 80013d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 fc22 	bl	8001c20 <UpdateRR>

					// --- Reset parameters --- //
					BeatDelay = GENERAL_DELAY + PT200MS;
 80013dc:	234e      	movs	r3, #78	; 0x4e
 80013de:	81fb      	strh	r3, [r7, #14]
					Count_SinceRR = 0;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <PT_StateMachine+0x228>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	801a      	strh	r2, [r3, #0]
					Old_PeakDR = Best_PeakDR;									// Store the derivative for T-wave test
 80013e6:	4b12      	ldr	r3, [pc, #72]	; (8001430 <PT_StateMachine+0x230>)
 80013e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <PT_StateMachine+0x234>)
 80013ee:	801a      	strh	r2, [r3, #0]
					Best_PeakDR = Best_PeakBP = 0;
 80013f0:	4b0e      	ldr	r3, [pc, #56]	; (800142c <PT_StateMachine+0x22c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	801a      	strh	r2, [r3, #0]
 80013f6:	4b0d      	ldr	r3, [pc, #52]	; (800142c <PT_StateMachine+0x22c>)
 80013f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <PT_StateMachine+0x230>)
 80013fe:	801a      	strh	r2, [r3, #0]

					SBcntI = 0;
 8001400:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <PT_StateMachine+0x238>)
 8001402:	2200      	movs	r2, #0
 8001404:	801a      	strh	r2, [r3, #0]
					SB_peakBP = 0;
 8001406:	4b0d      	ldr	r3, [pc, #52]	; (800143c <PT_StateMachine+0x23c>)
 8001408:	2200      	movs	r2, #0
 800140a:	801a      	strh	r2, [r3, #0]
					SB_peakDR = 0;
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <PT_StateMachine+0x240>)
 800140e:	2200      	movs	r2, #0
 8001410:	801a      	strh	r2, [r3, #0]
					SB_peakI = 0;
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <PT_StateMachine+0x244>)
 8001414:	2200      	movs	r2, #0
 8001416:	801a      	strh	r2, [r3, #0]
			if (PT_dptr->PT_state == LEARN_PH_2)
 8001418:	e03f      	b.n	800149a <PT_StateMachine+0x29a>
 800141a:	bf00      	nop
 800141c:	20000300 	.word	0x20000300
 8001420:	20000402 	.word	0x20000402
 8001424:	20000410 	.word	0x20000410
 8001428:	200003f8 	.word	0x200003f8
 800142c:	200003ee 	.word	0x200003ee
 8001430:	200003f4 	.word	0x200003f4
 8001434:	200003f6 	.word	0x200003f6
 8001438:	20000404 	.word	0x20000404
 800143c:	20000406 	.word	0x20000406
 8001440:	20000408 	.word	0x20000408
 8001444:	2000041a 	.word	0x2000041a

				}
			}
		}
		// ------ If the peak is noise ------- //
		else if (PEAKI > 0)
 8001448:	89bb      	ldrh	r3, [r7, #12]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d025      	beq.n	800149a <PT_StateMachine+0x29a>
		{
			// ----- Update Integ & BP Th ------ //
			UpdateThI(&PEAKI, 1);
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	2101      	movs	r1, #1
 8001454:	4618      	mov	r0, r3
 8001456:	f000 fcf7 	bl	8001e48 <UpdateThI>
			UpdateThF(&Best_PeakBP, 1);
 800145a:	2101      	movs	r1, #1
 800145c:	4841      	ldr	r0, [pc, #260]	; (8001564 <PT_StateMachine+0x364>)
 800145e:	f000 fd43 	bl	8001ee8 <UpdateThF>

			// ----- Store the peak for searchback ------ //
			if (PEAKI > SB_peakI && Count_SinceRR >= PT360MS)
 8001462:	89ba      	ldrh	r2, [r7, #12]
 8001464:	4b40      	ldr	r3, [pc, #256]	; (8001568 <PT_StateMachine+0x368>)
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	429a      	cmp	r2, r3
 800146a:	d916      	bls.n	800149a <PT_StateMachine+0x29a>
 800146c:	4b3f      	ldr	r3, [pc, #252]	; (800156c <PT_StateMachine+0x36c>)
 800146e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001472:	2b47      	cmp	r3, #71	; 0x47
 8001474:	dd11      	ble.n	800149a <PT_StateMachine+0x29a>
			{
				SB_peakI = PEAKI;											// Store Integ Sig peak 
 8001476:	89ba      	ldrh	r2, [r7, #12]
 8001478:	4b3b      	ldr	r3, [pc, #236]	; (8001568 <PT_StateMachine+0x368>)
 800147a:	801a      	strh	r2, [r3, #0]
				SB_peakBP = Best_PeakBP;									// Store BP Sig peak
 800147c:	4b39      	ldr	r3, [pc, #228]	; (8001564 <PT_StateMachine+0x364>)
 800147e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001482:	4b3b      	ldr	r3, [pc, #236]	; (8001570 <PT_StateMachine+0x370>)
 8001484:	801a      	strh	r2, [r3, #0]
				SB_peakDR = Best_PeakDR;									// Derivative of SB point
 8001486:	4b3b      	ldr	r3, [pc, #236]	; (8001574 <PT_StateMachine+0x374>)
 8001488:	f9b3 2000 	ldrsh.w	r2, [r3]
 800148c:	4b3a      	ldr	r3, [pc, #232]	; (8001578 <PT_StateMachine+0x378>)
 800148e:	801a      	strh	r2, [r3, #0]
				SBcntI = Count_SinceRR;										// Store Indice
 8001490:	4b36      	ldr	r3, [pc, #216]	; (800156c <PT_StateMachine+0x36c>)
 8001492:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001496:	4b39      	ldr	r3, [pc, #228]	; (800157c <PT_StateMachine+0x37c>)
 8001498:	801a      	strh	r2, [r3, #0]
		}

	}

	// -- Do search-back if we have no beats in PT_dptr->RR_Missed_L -- //
	if (Count_SinceRR > PT_dptr->RR_Missed_L && SB_peakI > PT_dptr->ThI2 && PT_dptr->PT_state == DETECTING)
 800149a:	4b39      	ldr	r3, [pc, #228]	; (8001580 <PT_StateMachine+0x380>)
 800149c:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 80014a0:	4b32      	ldr	r3, [pc, #200]	; (800156c <PT_StateMachine+0x36c>)
 80014a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	da4d      	bge.n	8001546 <PT_StateMachine+0x346>
 80014aa:	4b35      	ldr	r3, [pc, #212]	; (8001580 <PT_StateMachine+0x380>)
 80014ac:	8b5a      	ldrh	r2, [r3, #26]
 80014ae:	4b2e      	ldr	r3, [pc, #184]	; (8001568 <PT_StateMachine+0x368>)
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d247      	bcs.n	8001546 <PT_StateMachine+0x346>
 80014b6:	4b32      	ldr	r3, [pc, #200]	; (8001580 <PT_StateMachine+0x380>)
 80014b8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80014bc:	2b03      	cmp	r3, #3
 80014be:	d142      	bne.n	8001546 <PT_StateMachine+0x346>
	{
		// ---- Checking the BP signal ---- //
		if (SB_peakBP > PT_dptr->ThF2)
 80014c0:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <PT_StateMachine+0x380>)
 80014c2:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 80014c6:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <PT_StateMachine+0x370>)
 80014c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	da3a      	bge.n	8001546 <PT_StateMachine+0x346>
		{
			// ----- Update Integ & BP Th && RR buffers ------ //
			UpdateThI(&SB_peakI, 0);
 80014d0:	2100      	movs	r1, #0
 80014d2:	4825      	ldr	r0, [pc, #148]	; (8001568 <PT_StateMachine+0x368>)
 80014d4:	f000 fcb8 	bl	8001e48 <UpdateThI>
			UpdateThF(&SB_peakBP, 0);
 80014d8:	2100      	movs	r1, #0
 80014da:	4825      	ldr	r0, [pc, #148]	; (8001570 <PT_StateMachine+0x370>)
 80014dc:	f000 fd04 	bl	8001ee8 <UpdateThF>
			UpdateRR(SBcntI);
 80014e0:	4b26      	ldr	r3, [pc, #152]	; (800157c <PT_StateMachine+0x37c>)
 80014e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 fb9a 	bl	8001c20 <UpdateRR>

			// --- Reset parameters --- //
			BeatDelay = Count_SinceRR = Count_SinceRR - SBcntI;
 80014ec:	4b1f      	ldr	r3, [pc, #124]	; (800156c <PT_StateMachine+0x36c>)
 80014ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	4b21      	ldr	r3, [pc, #132]	; (800157c <PT_StateMachine+0x37c>)
 80014f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	b29b      	uxth	r3, r3
 8001500:	b21a      	sxth	r2, r3
 8001502:	4b1a      	ldr	r3, [pc, #104]	; (800156c <PT_StateMachine+0x36c>)
 8001504:	801a      	strh	r2, [r3, #0]
 8001506:	4b19      	ldr	r3, [pc, #100]	; (800156c <PT_StateMachine+0x36c>)
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	81fb      	strh	r3, [r7, #14]
			BeatDelay += (GENERAL_DELAY + PT200MS);
 800150c:	89fb      	ldrh	r3, [r7, #14]
 800150e:	334e      	adds	r3, #78	; 0x4e
 8001510:	b29b      	uxth	r3, r3
 8001512:	81fb      	strh	r3, [r7, #14]
			Old_PeakDR = SB_peakDR;		// Store the derivative for T-wave test
 8001514:	4b18      	ldr	r3, [pc, #96]	; (8001578 <PT_StateMachine+0x378>)
 8001516:	f9b3 2000 	ldrsh.w	r2, [r3]
 800151a:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <PT_StateMachine+0x384>)
 800151c:	801a      	strh	r2, [r3, #0]
			Best_PeakDR = Best_PeakBP = 0;
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <PT_StateMachine+0x364>)
 8001520:	2200      	movs	r2, #0
 8001522:	801a      	strh	r2, [r3, #0]
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <PT_StateMachine+0x364>)
 8001526:	f9b3 2000 	ldrsh.w	r2, [r3]
 800152a:	4b12      	ldr	r3, [pc, #72]	; (8001574 <PT_StateMachine+0x374>)
 800152c:	801a      	strh	r2, [r3, #0]

			SBcntI = 0;
 800152e:	4b13      	ldr	r3, [pc, #76]	; (800157c <PT_StateMachine+0x37c>)
 8001530:	2200      	movs	r2, #0
 8001532:	801a      	strh	r2, [r3, #0]
			SB_peakBP = 0;
 8001534:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <PT_StateMachine+0x370>)
 8001536:	2200      	movs	r2, #0
 8001538:	801a      	strh	r2, [r3, #0]
			SB_peakDR = 0;
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <PT_StateMachine+0x378>)
 800153c:	2200      	movs	r2, #0
 800153e:	801a      	strh	r2, [r3, #0]
			SB_peakI = 0;
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <PT_StateMachine+0x368>)
 8001542:	2200      	movs	r2, #0
 8001544:	801a      	strh	r2, [r3, #0]
	}

	// ---- Emergency and Faulty Condition Reset ---- //
	// If algorithm doest not find a beat in 4sec, then it resets itself
	// and starts learning phases.
	if (Count_SinceRR > PT4000MS) {
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <PT_StateMachine+0x36c>)
 8001548:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001550:	dd01      	ble.n	8001556 <PT_StateMachine+0x356>
		PT_init();
 8001552:	f7ff fd23 	bl	8000f9c <PT_init>
	}

	return (BeatDelay);
 8001556:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
	
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200003ee 	.word	0x200003ee
 8001568:	2000041a 	.word	0x2000041a
 800156c:	200003f8 	.word	0x200003f8
 8001570:	20000406 	.word	0x20000406
 8001574:	200003f4 	.word	0x200003f4
 8001578:	20000408 	.word	0x20000408
 800157c:	20000404 	.word	0x20000404
 8001580:	20000300 	.word	0x20000300
 8001584:	200003f6 	.word	0x200003f6

08001588 <LearningPhase1>:
	peaks iteratively in both Integrated Signal and BP signal.

 **********************************************************************************/

void LearningPhase1(uint16_t *pkI, int16_t *pkBP)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
	//---- Recursively compute the average and max of peaks ------ //
	if (*pkI > st_mx_pk) st_mx_pk = *pkI;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	881a      	ldrh	r2, [r3, #0]
 8001596:	4b44      	ldr	r3, [pc, #272]	; (80016a8 <LearningPhase1+0x120>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d903      	bls.n	80015a6 <LearningPhase1+0x1e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	881a      	ldrh	r2, [r3, #0]
 80015a2:	4b41      	ldr	r3, [pc, #260]	; (80016a8 <LearningPhase1+0x120>)
 80015a4:	801a      	strh	r2, [r3, #0]

	// ---- If the very first time calling this function --- //
	if (PT_dptr->PT_state == START_UP) {
 80015a6:	4b41      	ldr	r3, [pc, #260]	; (80016ac <LearningPhase1+0x124>)
 80015a8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d10c      	bne.n	80015ca <LearningPhase1+0x42>
		PT_dptr->PT_state = LEARN_PH_1;
 80015b0:	4b3e      	ldr	r3, [pc, #248]	; (80016ac <LearningPhase1+0x124>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	80da      	strh	r2, [r3, #6]
		st_mean_pk = *pkI;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	881a      	ldrh	r2, [r3, #0]
 80015ba:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <LearningPhase1+0x128>)
 80015bc:	801a      	strh	r2, [r3, #0]
		st_mean_pkBP = *pkBP; 
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80015c4:	4b3b      	ldr	r3, [pc, #236]	; (80016b4 <LearningPhase1+0x12c>)
 80015c6:	801a      	strh	r2, [r3, #0]
		PT_dptr->NPKF = (st_mean_pkBP >> 3);
		PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
		PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;

	}
}
 80015c8:	e067      	b.n	800169a <LearningPhase1+0x112>
	else if(Count_SinceRR < PT2000MS){
 80015ca:	4b3b      	ldr	r3, [pc, #236]	; (80016b8 <LearningPhase1+0x130>)
 80015cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80015d4:	da16      	bge.n	8001604 <LearningPhase1+0x7c>
		st_mean_pk = (st_mean_pk + *pkI) >> 1;
 80015d6:	4b36      	ldr	r3, [pc, #216]	; (80016b0 <LearningPhase1+0x128>)
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	461a      	mov	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	4413      	add	r3, r2
 80015e2:	105b      	asrs	r3, r3, #1
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	4b32      	ldr	r3, [pc, #200]	; (80016b0 <LearningPhase1+0x128>)
 80015e8:	801a      	strh	r2, [r3, #0]
		st_mean_pkBP = (st_mean_pkBP + *pkBP) >> 1;
 80015ea:	4b32      	ldr	r3, [pc, #200]	; (80016b4 <LearningPhase1+0x12c>)
 80015ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f0:	461a      	mov	r2, r3
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f8:	4413      	add	r3, r2
 80015fa:	105b      	asrs	r3, r3, #1
 80015fc:	b21a      	sxth	r2, r3
 80015fe:	4b2d      	ldr	r3, [pc, #180]	; (80016b4 <LearningPhase1+0x12c>)
 8001600:	801a      	strh	r2, [r3, #0]
}
 8001602:	e04a      	b.n	800169a <LearningPhase1+0x112>
		PT_dptr->PT_state = LEARN_PH_2;
 8001604:	4b29      	ldr	r3, [pc, #164]	; (80016ac <LearningPhase1+0x124>)
 8001606:	2202      	movs	r2, #2
 8001608:	80da      	strh	r2, [r3, #6]
		PT_dptr->SPKI = (st_mx_pk >> 1);
 800160a:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <LearningPhase1+0x120>)
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	4a27      	ldr	r2, [pc, #156]	; (80016ac <LearningPhase1+0x124>)
 8001610:	085b      	lsrs	r3, r3, #1
 8001612:	b29b      	uxth	r3, r3
 8001614:	82d3      	strh	r3, [r2, #22]
		PT_dptr->NPKI = (st_mean_pk >> 3);
 8001616:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <LearningPhase1+0x128>)
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	4a24      	ldr	r2, [pc, #144]	; (80016ac <LearningPhase1+0x124>)
 800161c:	08db      	lsrs	r3, r3, #3
 800161e:	b29b      	uxth	r3, r3
 8001620:	8313      	strh	r3, [r2, #24]
		PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 8001622:	4b22      	ldr	r3, [pc, #136]	; (80016ac <LearningPhase1+0x124>)
 8001624:	8b1a      	ldrh	r2, [r3, #24]
 8001626:	4b21      	ldr	r3, [pc, #132]	; (80016ac <LearningPhase1+0x124>)
 8001628:	8adb      	ldrh	r3, [r3, #22]
 800162a:	4619      	mov	r1, r3
 800162c:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <LearningPhase1+0x124>)
 800162e:	8b1b      	ldrh	r3, [r3, #24]
 8001630:	1acb      	subs	r3, r1, r3
 8001632:	109b      	asrs	r3, r3, #2
 8001634:	b29b      	uxth	r3, r3
 8001636:	491d      	ldr	r1, [pc, #116]	; (80016ac <LearningPhase1+0x124>)
 8001638:	4413      	add	r3, r2
 800163a:	b29b      	uxth	r3, r3
 800163c:	828b      	strh	r3, [r1, #20]
		PT_dptr->ThI2 = PT_dptr->ThI1 >> 1;
 800163e:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <LearningPhase1+0x124>)
 8001640:	8a9b      	ldrh	r3, [r3, #20]
 8001642:	4a1a      	ldr	r2, [pc, #104]	; (80016ac <LearningPhase1+0x124>)
 8001644:	085b      	lsrs	r3, r3, #1
 8001646:	b29b      	uxth	r3, r3
 8001648:	8353      	strh	r3, [r2, #26]
		PT_dptr->SPKF = (Best_PeakBP >> 1);
 800164a:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <LearningPhase1+0x134>)
 800164c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001650:	4a16      	ldr	r2, [pc, #88]	; (80016ac <LearningPhase1+0x124>)
 8001652:	105b      	asrs	r3, r3, #1
 8001654:	b21b      	sxth	r3, r3
 8001656:	83d3      	strh	r3, [r2, #30]
		PT_dptr->NPKF = (st_mean_pkBP >> 3);
 8001658:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <LearningPhase1+0x12c>)
 800165a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165e:	4a13      	ldr	r2, [pc, #76]	; (80016ac <LearningPhase1+0x124>)
 8001660:	10db      	asrs	r3, r3, #3
 8001662:	b21b      	sxth	r3, r3
 8001664:	8413      	strh	r3, [r2, #32]
		PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <LearningPhase1+0x124>)
 8001668:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800166c:	b29a      	uxth	r2, r3
 800166e:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <LearningPhase1+0x124>)
 8001670:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001674:	4619      	mov	r1, r3
 8001676:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <LearningPhase1+0x124>)
 8001678:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800167c:	1acb      	subs	r3, r1, r3
 800167e:	109b      	asrs	r3, r3, #2
 8001680:	b29b      	uxth	r3, r3
 8001682:	4413      	add	r3, r2
 8001684:	b29a      	uxth	r2, r3
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <LearningPhase1+0x124>)
 8001688:	b212      	sxth	r2, r2
 800168a:	839a      	strh	r2, [r3, #28]
		PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;
 800168c:	4b07      	ldr	r3, [pc, #28]	; (80016ac <LearningPhase1+0x124>)
 800168e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001692:	4a06      	ldr	r2, [pc, #24]	; (80016ac <LearningPhase1+0x124>)
 8001694:	105b      	asrs	r3, r3, #1
 8001696:	b21b      	sxth	r3, r3
 8001698:	8453      	strh	r3, [r2, #34]	; 0x22
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	20000412 	.word	0x20000412
 80016ac:	20000300 	.word	0x20000300
 80016b0:	20000414 	.word	0x20000414
 80016b4:	2000040c 	.word	0x2000040c
 80016b8:	200003f8 	.word	0x200003f8
 80016bc:	200003ee 	.word	0x200003ee

080016c0 <LPFilter>:
	type employed by setting FILTER_FORM to 1 or 2. Delay of the filter is 5.

 **********************************************************************************/

void LPFilter(int16_t *val)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	// -- To avoid using modulo employ half-pointer -- //
	int16_t half_pointer, w;

	half_pointer = PT_dptr->LP_pointer - (LP_BUFFER_SIZE >> 1);
 80016c8:	4b3d      	ldr	r3, [pc, #244]	; (80017c0 <LPFilter+0x100>)
 80016ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	3b06      	subs	r3, #6
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	81fb      	strh	r3, [r7, #14]

	if (half_pointer < 0) 
 80016d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	da03      	bge.n	80016e6 <LPFilter+0x26>
		half_pointer += LP_BUFFER_SIZE;
 80016de:	89fb      	ldrh	r3, [r7, #14]
 80016e0:	330c      	adds	r3, #12
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	81fb      	strh	r3, [r7, #14]
#if (FILTER_FORM == 1)
		w = *val + (PT_dptr->LP_buf[1] << 1) - PT_dptr->LP_buf[0];
		*val = w - (PT_dptr->LP_buf[half_pointer] << 1) + PT_dptr->LP_buf[PT_dptr->LP_pointer];
		PT_dptr->LP_buf[PT_dptr->LP_pointer] = w;
#else
		w = (LP_y_old << 1) - LP_y_new + *val - (PT_dptr->LP_buf[half_pointer] << 1) + PT_dptr->LP_buf[PT_dptr->LP_pointer];
 80016e6:	4b37      	ldr	r3, [pc, #220]	; (80017c4 <LPFilter+0x104>)
 80016e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	4b35      	ldr	r3, [pc, #212]	; (80017c8 <LPFilter+0x108>)
 80016f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001704:	b29b      	uxth	r3, r3
 8001706:	4413      	add	r3, r2
 8001708:	b29a      	uxth	r2, r3
 800170a:	492d      	ldr	r1, [pc, #180]	; (80017c0 <LPFilter+0x100>)
 800170c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001710:	3314      	adds	r3, #20
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	440b      	add	r3, r1
 8001716:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800171a:	b29b      	uxth	r3, r3
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	b29b      	uxth	r3, r3
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	b29a      	uxth	r2, r3
 8001724:	4926      	ldr	r1, [pc, #152]	; (80017c0 <LPFilter+0x100>)
 8001726:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <LPFilter+0x100>)
 8001728:	f9b3 3000 	ldrsh.w	r3, [r3]
 800172c:	3314      	adds	r3, #20
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	440b      	add	r3, r1
 8001732:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001736:	b29b      	uxth	r3, r3
 8001738:	4413      	add	r3, r2
 800173a:	b29b      	uxth	r3, r3
 800173c:	81bb      	strh	r3, [r7, #12]
		LP_y_new = LP_y_old;
 800173e:	4b21      	ldr	r3, [pc, #132]	; (80017c4 <LPFilter+0x104>)
 8001740:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001744:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <LPFilter+0x108>)
 8001746:	801a      	strh	r2, [r3, #0]
		LP_y_old = w;
 8001748:	4a1e      	ldr	r2, [pc, #120]	; (80017c4 <LPFilter+0x104>)
 800174a:	89bb      	ldrh	r3, [r7, #12]
 800174c:	8013      	strh	r3, [r2, #0]
		PT_dptr->LP_buf[PT_dptr->LP_pointer] = *val;
 800174e:	4a1c      	ldr	r2, [pc, #112]	; (80017c0 <LPFilter+0x100>)
 8001750:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <LPFilter+0x100>)
 8001752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001756:	4618      	mov	r0, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800175e:	f100 0314 	add.w	r3, r0, #20
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	4413      	add	r3, r2
 8001766:	460a      	mov	r2, r1
 8001768:	80da      	strh	r2, [r3, #6]
#endif
		// --- Avoid signal overflow by gaining down ---- //
		if (w >= 0)
 800176a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	db06      	blt.n	8001780 <LPFilter+0xc0>
			PT_dptr->LPF_val = w >> 5;
 8001772:	4a13      	ldr	r2, [pc, #76]	; (80017c0 <LPFilter+0x100>)
 8001774:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001778:	115b      	asrs	r3, r3, #5
 800177a:	b21b      	sxth	r3, r3
 800177c:	8153      	strh	r3, [r2, #10]
 800177e:	e00a      	b.n	8001796 <LPFilter+0xd6>
		else
			PT_dptr->LPF_val = (w >> 5) | 0xF800;
 8001780:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001784:	115b      	asrs	r3, r3, #5
 8001786:	b21b      	sxth	r3, r3
 8001788:	4a0d      	ldr	r2, [pc, #52]	; (80017c0 <LPFilter+0x100>)
 800178a:	ea6f 5343 	mvn.w	r3, r3, lsl #21
 800178e:	ea6f 5353 	mvn.w	r3, r3, lsr #21
 8001792:	b21b      	sxth	r3, r3
 8001794:	8153      	strh	r3, [r2, #10]

		if (++PT_dptr->LP_pointer == LP_BUFFER_SIZE) 
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <LPFilter+0x100>)
 8001798:	f9b3 2000 	ldrsh.w	r2, [r3]
 800179c:	b292      	uxth	r2, r2
 800179e:	3201      	adds	r2, #1
 80017a0:	b292      	uxth	r2, r2
 80017a2:	b212      	sxth	r2, r2
 80017a4:	801a      	strh	r2, [r3, #0]
 80017a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017aa:	2b0c      	cmp	r3, #12
 80017ac:	d102      	bne.n	80017b4 <LPFilter+0xf4>
			PT_dptr->LP_pointer = 0;
 80017ae:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <LPFilter+0x100>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	801a      	strh	r2, [r3, #0]
}
 80017b4:	bf00      	nop
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	20000300 	.word	0x20000300
 80017c4:	2000041e 	.word	0x2000041e
 80017c8:	2000041c 	.word	0x2000041c

080017cc <HPFilter>:
function implements the filter both in Direct Form I and II. Select the
type employed by setting FILTER_FORM to 1 or 2. Delay 16 samples.

**********************************************************************************/
void HPFilter(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
	// -- To avoid using modulo employ half-pointer -- //
	int16_t half_pointer, h_prev_pointer;
	half_pointer = PT_dptr->HP_pointer - (HP_BUFFER_SIZE >> 1);
 80017d2:	4b44      	ldr	r3, [pc, #272]	; (80018e4 <HPFilter+0x118>)
 80017d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	3b10      	subs	r3, #16
 80017dc:	b29b      	uxth	r3, r3
 80017de:	80fb      	strh	r3, [r7, #6]

	if (half_pointer < 0)
 80017e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	da03      	bge.n	80017f0 <HPFilter+0x24>
		half_pointer += HP_BUFFER_SIZE;
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	3320      	adds	r3, #32
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	80fb      	strh	r3, [r7, #6]
	
	if (!half_pointer)
 80017f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d102      	bne.n	80017fe <HPFilter+0x32>
		h_prev_pointer = HP_BUFFER_SIZE - 1;
 80017f8:	231f      	movs	r3, #31
 80017fa:	80bb      	strh	r3, [r7, #4]
 80017fc:	e003      	b.n	8001806 <HPFilter+0x3a>
	else
		h_prev_pointer = half_pointer - 1;
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	3b01      	subs	r3, #1
 8001802:	b29b      	uxth	r3, r3
 8001804:	80bb      	strh	r3, [r7, #4]
#if (FILTER_FORM == 1)
	y_h = PT_dptr->LPF_val + PT_dptr->HP_buf[0];
	PT_dptr->LPF_val = ((PT_dptr->HP_buf[PT_dptr->HP_pointer] - y_h) >> 5) + PT_dptr->HP_buf[half_pointer] - PT_dptr->HP_buf[h_prev_pointer];
	PT_dptr->HP_buf[PT_dptr->HP_pointer] = y_h;
#else
	y_h += (PT_dptr->HP_buf[PT_dptr->HP_pointer] >> 5) - (PT_dptr->LPF_val >> 5) + PT_dptr->HP_buf[half_pointer] - PT_dptr->HP_buf[h_prev_pointer];
 8001806:	4a37      	ldr	r2, [pc, #220]	; (80018e4 <HPFilter+0x118>)
 8001808:	4b36      	ldr	r3, [pc, #216]	; (80018e4 <HPFilter+0x118>)
 800180a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800180e:	3320      	adds	r3, #32
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	4413      	add	r3, r2
 8001814:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001818:	115b      	asrs	r3, r3, #5
 800181a:	b21b      	sxth	r3, r3
 800181c:	b29a      	uxth	r2, r3
 800181e:	4b31      	ldr	r3, [pc, #196]	; (80018e4 <HPFilter+0x118>)
 8001820:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001824:	115b      	asrs	r3, r3, #5
 8001826:	b21b      	sxth	r3, r3
 8001828:	b29b      	uxth	r3, r3
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	b29a      	uxth	r2, r3
 800182e:	492d      	ldr	r1, [pc, #180]	; (80018e4 <HPFilter+0x118>)
 8001830:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001834:	3320      	adds	r3, #32
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	440b      	add	r3, r1
 800183a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800183e:	b29b      	uxth	r3, r3
 8001840:	4413      	add	r3, r2
 8001842:	b29a      	uxth	r2, r3
 8001844:	4927      	ldr	r1, [pc, #156]	; (80018e4 <HPFilter+0x118>)
 8001846:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800184a:	3320      	adds	r3, #32
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	440b      	add	r3, r1
 8001850:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001854:	b29b      	uxth	r3, r3
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	b29a      	uxth	r2, r3
 800185a:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <HPFilter+0x11c>)
 800185c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001860:	b29b      	uxth	r3, r3
 8001862:	4413      	add	r3, r2
 8001864:	b29b      	uxth	r3, r3
 8001866:	b21a      	sxth	r2, r3
 8001868:	4b1f      	ldr	r3, [pc, #124]	; (80018e8 <HPFilter+0x11c>)
 800186a:	801a      	strh	r2, [r3, #0]
	PT_dptr->HP_buf[PT_dptr->HP_pointer] = PT_dptr->LPF_val;
 800186c:	4b1d      	ldr	r3, [pc, #116]	; (80018e4 <HPFilter+0x118>)
 800186e:	4a1d      	ldr	r2, [pc, #116]	; (80018e4 <HPFilter+0x118>)
 8001870:	491c      	ldr	r1, [pc, #112]	; (80018e4 <HPFilter+0x118>)
 8001872:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8001876:	4608      	mov	r0, r1
 8001878:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800187c:	f100 0320 	add.w	r3, r0, #32
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	4413      	add	r3, r2
 8001884:	460a      	mov	r2, r1
 8001886:	80da      	strh	r2, [r3, #6]
	
#endif
	// ------- Again slightly gaining down --------- //
	if (y_h >= 0)
 8001888:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <HPFilter+0x11c>)
 800188a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800188e:	2b00      	cmp	r3, #0
 8001890:	db07      	blt.n	80018a2 <HPFilter+0xd6>
		PT_dptr->HPF_val = (y_h >> 1);
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <HPFilter+0x11c>)
 8001894:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001898:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <HPFilter+0x118>)
 800189a:	105b      	asrs	r3, r3, #1
 800189c:	b21b      	sxth	r3, r3
 800189e:	8193      	strh	r3, [r2, #12]
 80018a0:	e00b      	b.n	80018ba <HPFilter+0xee>
	else
		PT_dptr->HPF_val = (y_h >> 1) | 0xF800;
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <HPFilter+0x11c>)
 80018a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018a8:	105b      	asrs	r3, r3, #1
 80018aa:	b21b      	sxth	r3, r3
 80018ac:	4a0d      	ldr	r2, [pc, #52]	; (80018e4 <HPFilter+0x118>)
 80018ae:	ea6f 5343 	mvn.w	r3, r3, lsl #21
 80018b2:	ea6f 5353 	mvn.w	r3, r3, lsr #21
 80018b6:	b21b      	sxth	r3, r3
 80018b8:	8193      	strh	r3, [r2, #12]

	if (++PT_dptr->HP_pointer == HP_BUFFER_SIZE) PT_dptr->HP_pointer = 0;
 80018ba:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <HPFilter+0x118>)
 80018bc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80018c0:	b292      	uxth	r2, r2
 80018c2:	3201      	adds	r2, #1
 80018c4:	b292      	uxth	r2, r2
 80018c6:	b212      	sxth	r2, r2
 80018c8:	805a      	strh	r2, [r3, #2]
 80018ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018ce:	2b20      	cmp	r3, #32
 80018d0:	d102      	bne.n	80018d8 <HPFilter+0x10c>
 80018d2:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <HPFilter+0x118>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	805a      	strh	r2, [r3, #2]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	20000300 	.word	0x20000300
 80018e8:	2000040a 	.word	0x2000040a

080018ec <DerivFilter>:
y[n] = 1/8(2x[n] + x[n - 1] - x[n - 3] - 2x[n - 4]) . Delay 2 samples.

**********************************************************************************/

void DerivFilter(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
	// --- Since it is only a 5 point derivative filter we avoid using pointers and half pointers for further efficieny ---- //
	int16_t w;

	w = PT_dptr->DR_buf[0] - PT_dptr->DR_buf[2];
 80018f2:	4b20      	ldr	r3, [pc, #128]	; (8001974 <DerivFilter+0x88>)
 80018f4:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	; 0x86
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	4b1e      	ldr	r3, [pc, #120]	; (8001974 <DerivFilter+0x88>)
 80018fc:	f9b3 308a 	ldrsh.w	r3, [r3, #138]	; 0x8a
 8001900:	b29b      	uxth	r3, r3
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	b29b      	uxth	r3, r3
 8001906:	80fb      	strh	r3, [r7, #6]
	w += ((PT_dptr->HPF_val - PT_dptr->DR_buf[3]) << 1);
 8001908:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <DerivFilter+0x88>)
 800190a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800190e:	b29a      	uxth	r2, r3
 8001910:	4b18      	ldr	r3, [pc, #96]	; (8001974 <DerivFilter+0x88>)
 8001912:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8001916:	b29b      	uxth	r3, r3
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	b29b      	uxth	r3, r3
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	b29a      	uxth	r2, r3
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	4413      	add	r3, r2
 8001924:	b29b      	uxth	r3, r3
 8001926:	80fb      	strh	r3, [r7, #6]
	w >>= 3;
 8001928:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800192c:	10db      	asrs	r3, r3, #3
 800192e:	80fb      	strh	r3, [r7, #6]
	PT_dptr->DR_buf[3] = PT_dptr->DR_buf[2];
 8001930:	4a10      	ldr	r2, [pc, #64]	; (8001974 <DerivFilter+0x88>)
 8001932:	4b10      	ldr	r3, [pc, #64]	; (8001974 <DerivFilter+0x88>)
 8001934:	f9b2 208a 	ldrsh.w	r2, [r2, #138]	; 0x8a
 8001938:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	PT_dptr->DR_buf[2] = PT_dptr->DR_buf[1];
 800193c:	4a0d      	ldr	r2, [pc, #52]	; (8001974 <DerivFilter+0x88>)
 800193e:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <DerivFilter+0x88>)
 8001940:	f9b2 2088 	ldrsh.w	r2, [r2, #136]	; 0x88
 8001944:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	PT_dptr->DR_buf[1] = PT_dptr->DR_buf[0];
 8001948:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <DerivFilter+0x88>)
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <DerivFilter+0x88>)
 800194c:	f9b2 2086 	ldrsh.w	r2, [r2, #134]	; 0x86
 8001950:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	PT_dptr->DR_buf[0] = PT_dptr->HPF_val;
 8001954:	4a07      	ldr	r2, [pc, #28]	; (8001974 <DerivFilter+0x88>)
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <DerivFilter+0x88>)
 8001958:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800195c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	PT_dptr->DRF_val = w;
 8001960:	4a04      	ldr	r2, [pc, #16]	; (8001974 <DerivFilter+0x88>)
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	81d3      	strh	r3, [r2, #14]
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20000300 	.word	0x20000300

08001978 <SQRFilter>:
Description: Squares the signal based on Pan-Tompkins Eq. 10,
y[n] = x[n]^2. No delay.

**********************************************************************************/
void SQRFilter(void)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
	// ------------ Avoiding Overflow -------------- //
	uint16_t temp;
	if (PT_dptr->DRF_val > SQR_LIM_VAL || PT_dptr->DRF_val < (-SQR_LIM_VAL))
 800197e:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <SQRFilter+0x74>)
 8001980:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001988:	dc05      	bgt.n	8001996 <SQRFilter+0x1e>
 800198a:	4b18      	ldr	r3, [pc, #96]	; (80019ec <SQRFilter+0x74>)
 800198c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001990:	f513 7f80 	cmn.w	r3, #256	; 0x100
 8001994:	da04      	bge.n	80019a0 <SQRFilter+0x28>
		PT_dptr->SQF_val = UINT16_MAX;
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <SQRFilter+0x74>)
 8001998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800199c:	821a      	strh	r2, [r3, #16]
 800199e:	e015      	b.n	80019cc <SQRFilter+0x54>
	else
	{
		if (PT_dptr->DRF_val < 0)
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <SQRFilter+0x74>)
 80019a2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	da06      	bge.n	80019b8 <SQRFilter+0x40>
			temp = (uint16_t)(-PT_dptr->DRF_val);
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <SQRFilter+0x74>)
 80019ac:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	425b      	negs	r3, r3
 80019b4:	80fb      	strh	r3, [r7, #6]
 80019b6:	e003      	b.n	80019c0 <SQRFilter+0x48>
		else
			temp = (uint16_t)(PT_dptr->DRF_val);
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <SQRFilter+0x74>)
 80019ba:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80019be:	80fb      	strh	r3, [r7, #6]
		PT_dptr->SQF_val = temp*temp;
 80019c0:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <SQRFilter+0x74>)
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	fb13 f303 	smulbb	r3, r3, r3
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	8213      	strh	r3, [r2, #16]
	}

	if (PT_dptr->SQF_val > SQR_LIM_OUT)
 80019cc:	4b07      	ldr	r3, [pc, #28]	; (80019ec <SQRFilter+0x74>)
 80019ce:	8a1b      	ldrh	r3, [r3, #16]
 80019d0:	f247 5230 	movw	r2, #30000	; 0x7530
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d903      	bls.n	80019e0 <SQRFilter+0x68>
		PT_dptr->SQF_val = SQR_LIM_OUT;
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <SQRFilter+0x74>)
 80019da:	f247 5230 	movw	r2, #30000	; 0x7530
 80019de:	821a      	strh	r2, [r3, #16]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	20000300 	.word	0x20000300

080019f0 <MVAFilter>:
Description: Computes the rolling moving average of the input signal
based on Eq. 11 of Pan-Tompkins, y[n] = (1/N)[sum(x[1]+...+x[N])]. Delay 15 Samples.

**********************************************************************************/
void MVAFilter(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
	//---- The MV_sum can easily overflow so we limit the bound by uint16 precision ------ //
	if (MV_sum < (UINT16_MAX - PT_dptr->SQF_val))
 80019f4:	4b33      	ldr	r3, [pc, #204]	; (8001ac4 <MVAFilter+0xd4>)
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b33      	ldr	r3, [pc, #204]	; (8001ac8 <MVAFilter+0xd8>)
 80019fc:	8a1b      	ldrh	r3, [r3, #16]
 80019fe:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001a02:	33ff      	adds	r3, #255	; 0xff
 8001a04:	429a      	cmp	r2, r3
 8001a06:	da08      	bge.n	8001a1a <MVAFilter+0x2a>
		MV_sum += PT_dptr->SQF_val;
 8001a08:	4b2f      	ldr	r3, [pc, #188]	; (8001ac8 <MVAFilter+0xd8>)
 8001a0a:	8a1a      	ldrh	r2, [r3, #16]
 8001a0c:	4b2d      	ldr	r3, [pc, #180]	; (8001ac4 <MVAFilter+0xd4>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	4413      	add	r3, r2
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	4b2b      	ldr	r3, [pc, #172]	; (8001ac4 <MVAFilter+0xd4>)
 8001a16:	801a      	strh	r2, [r3, #0]
 8001a18:	e003      	b.n	8001a22 <MVAFilter+0x32>
	else
		MV_sum = UINT16_MAX;
 8001a1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ac4 <MVAFilter+0xd4>)
 8001a1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a20:	801a      	strh	r2, [r3, #0]

	if (MV_sum > PT_dptr->MVA_buf[PT_dptr->MVA_pointer])
 8001a22:	4a29      	ldr	r2, [pc, #164]	; (8001ac8 <MVAFilter+0xd8>)
 8001a24:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <MVAFilter+0xd8>)
 8001a26:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a2a:	3344      	adds	r3, #68	; 0x44
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4413      	add	r3, r2
 8001a30:	88da      	ldrh	r2, [r3, #6]
 8001a32:	4b24      	ldr	r3, [pc, #144]	; (8001ac4 <MVAFilter+0xd4>)
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d20e      	bcs.n	8001a58 <MVAFilter+0x68>
		MV_sum -= PT_dptr->MVA_buf[PT_dptr->MVA_pointer];
 8001a3a:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <MVAFilter+0xd4>)
 8001a3c:	881a      	ldrh	r2, [r3, #0]
 8001a3e:	4922      	ldr	r1, [pc, #136]	; (8001ac8 <MVAFilter+0xd8>)
 8001a40:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <MVAFilter+0xd8>)
 8001a42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a46:	3344      	adds	r3, #68	; 0x44
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	440b      	add	r3, r1
 8001a4c:	88db      	ldrh	r3, [r3, #6]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <MVAFilter+0xd4>)
 8001a54:	801a      	strh	r2, [r3, #0]
 8001a56:	e002      	b.n	8001a5e <MVAFilter+0x6e>
	else
		MV_sum = 0;
 8001a58:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <MVAFilter+0xd4>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	801a      	strh	r2, [r3, #0]

	PT_dptr->MVA_buf[PT_dptr->MVA_pointer] = PT_dptr->SQF_val;
 8001a5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <MVAFilter+0xd8>)
 8001a60:	4a19      	ldr	r2, [pc, #100]	; (8001ac8 <MVAFilter+0xd8>)
 8001a62:	4919      	ldr	r1, [pc, #100]	; (8001ac8 <MVAFilter+0xd8>)
 8001a64:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8001a68:	4608      	mov	r0, r1
 8001a6a:	8a19      	ldrh	r1, [r3, #16]
 8001a6c:	f100 0344 	add.w	r3, r0, #68	; 0x44
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4413      	add	r3, r2
 8001a74:	460a      	mov	r2, r1
 8001a76:	80da      	strh	r2, [r3, #6]

	PT_dptr->MVA_val = MV_sum/(uint16_t) MVA_BUFFER_SIZE;
 8001a78:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <MVAFilter+0xd4>)
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <MVAFilter+0xd8>)
 8001a7e:	4913      	ldr	r1, [pc, #76]	; (8001acc <MVAFilter+0xdc>)
 8001a80:	fba1 1303 	umull	r1, r3, r1, r3
 8001a84:	091b      	lsrs	r3, r3, #4
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	8253      	strh	r3, [r2, #18]

	if (PT_dptr->MVA_val > MVA_LIM_VAL)
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <MVAFilter+0xd8>)
 8001a8c:	8a5b      	ldrh	r3, [r3, #18]
 8001a8e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001a92:	d903      	bls.n	8001a9c <MVAFilter+0xac>
		PT_dptr->MVA_val = MVA_LIM_VAL;
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <MVAFilter+0xd8>)
 8001a96:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001a9a:	825a      	strh	r2, [r3, #18]

	if (++PT_dptr->MVA_pointer == MVA_BUFFER_SIZE) 
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <MVAFilter+0xd8>)
 8001a9e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001aa2:	b292      	uxth	r2, r2
 8001aa4:	3201      	adds	r2, #1
 8001aa6:	b292      	uxth	r2, r2
 8001aa8:	b212      	sxth	r2, r2
 8001aaa:	809a      	strh	r2, [r3, #4]
 8001aac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ab0:	2b1e      	cmp	r3, #30
 8001ab2:	d102      	bne.n	8001aba <MVAFilter+0xca>
		PT_dptr->MVA_pointer = 0;
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <MVAFilter+0xd8>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	809a      	strh	r2, [r3, #4]
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	2000040e 	.word	0x2000040e
 8001ac8:	20000300 	.word	0x20000300
 8001acc:	88888889 	.word	0x88888889

08001ad0 <PeakDtcI>:
If the signal changes sign the value of the peak is asssumed ot be a peak.
if x[n-1] <= x[n] > x[n+1], then x[n] is a peak.

**********************************************************************************/
int16_t PeakDtcI(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
	int16_t p;
	// ---------- Local maxima or not --------- //
	if (PT_dptr->MVA_val <= Prev_val && Prev_val > Prev_Prev_val) {
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <PeakDtcI+0x4c>)
 8001ad8:	8a5a      	ldrh	r2, [r3, #18]
 8001ada:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <PeakDtcI+0x50>)
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d809      	bhi.n	8001af6 <PeakDtcI+0x26>
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <PeakDtcI+0x50>)
 8001ae4:	881a      	ldrh	r2, [r3, #0]
 8001ae6:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <PeakDtcI+0x54>)
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d903      	bls.n	8001af6 <PeakDtcI+0x26>
		p = Prev_val;
 8001aee:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <PeakDtcI+0x50>)
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	80fb      	strh	r3, [r7, #6]
 8001af4:	e001      	b.n	8001afa <PeakDtcI+0x2a>
	}
	else {
		p = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	80fb      	strh	r3, [r7, #6]
	}
	Prev_Prev_val = Prev_val;
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <PeakDtcI+0x50>)
 8001afc:	881a      	ldrh	r2, [r3, #0]
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <PeakDtcI+0x54>)
 8001b00:	801a      	strh	r2, [r3, #0]
	Prev_val = PT_dptr->MVA_val;
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <PeakDtcI+0x4c>)
 8001b04:	8a5a      	ldrh	r2, [r3, #18]
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <PeakDtcI+0x50>)
 8001b08:	801a      	strh	r2, [r3, #0]

	return (p);
 8001b0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20000300 	.word	0x20000300
 8001b20:	20000416 	.word	0x20000416
 8001b24:	20000418 	.word	0x20000418

08001b28 <PeakDtcDR>:
For T-wave discrimination see T-wave identification of the paper.
if x[n-1] <= x[n] > x[n+1], then x[n] is a peak.

**********************************************************************************/
void PeakDtcDR(int16_t DR_sample)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	80fb      	strh	r3, [r7, #6]
	if (DR_sample < 0) DR_sample = -DR_sample;
 8001b32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	da03      	bge.n	8001b42 <PeakDtcDR+0x1a>
 8001b3a:	88fb      	ldrh	r3, [r7, #6]
 8001b3c:	425b      	negs	r3, r3
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	80fb      	strh	r3, [r7, #6]
	// ---------- Local maxima or not --------- //
	if (DR_sample <= Prev_valDR && Prev_valDR > Prev_Prev_valDR) {
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <PeakDtcDR+0x70>)
 8001b44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b48:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	dc14      	bgt.n	8001b7a <PeakDtcDR+0x52>
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <PeakDtcDR+0x70>)
 8001b52:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <PeakDtcDR+0x74>)
 8001b58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	dd0c      	ble.n	8001b7a <PeakDtcDR+0x52>
		//-- For T-wave discrimination store the highest slope -- //
		if (Prev_valDR > Best_PeakDR) Best_PeakDR = Prev_valDR;
 8001b60:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <PeakDtcDR+0x70>)
 8001b62:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <PeakDtcDR+0x78>)
 8001b68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	dd04      	ble.n	8001b7a <PeakDtcDR+0x52>
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <PeakDtcDR+0x70>)
 8001b72:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <PeakDtcDR+0x78>)
 8001b78:	801a      	strh	r2, [r3, #0]
	}
	Prev_Prev_valDR = Prev_valDR;
 8001b7a:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <PeakDtcDR+0x70>)
 8001b7c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <PeakDtcDR+0x74>)
 8001b82:	801a      	strh	r2, [r3, #0]
	Prev_valDR = DR_sample;
 8001b84:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <PeakDtcDR+0x70>)
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	8013      	strh	r3, [r2, #0]
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	200003f0 	.word	0x200003f0
 8001b9c:	200003f2 	.word	0x200003f2
 8001ba0:	200003f4 	.word	0x200003f4

08001ba4 <PeakDtcBP>:
against adaptive thresholds.
if x[n-1] <= x[n] > x[n+1], then x[n] is a peak.

**********************************************************************************/
void PeakDtcBP(int16_t DR_sample)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	80fb      	strh	r3, [r7, #6]
	if (DR_sample < 0) DR_sample = -DR_sample;
 8001bae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	da03      	bge.n	8001bbe <PeakDtcBP+0x1a>
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	425b      	negs	r3, r3
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	80fb      	strh	r3, [r7, #6]
	// ---------- Local maxima or not --------- //
	if (DR_sample <= Prev_valBP && Prev_valBP > Prev_Prev_valBP) {
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <PeakDtcBP+0x70>)
 8001bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	dc14      	bgt.n	8001bf6 <PeakDtcBP+0x52>
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <PeakDtcBP+0x70>)
 8001bce:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <PeakDtcBP+0x74>)
 8001bd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	dd0c      	ble.n	8001bf6 <PeakDtcBP+0x52>
		//-- For T-wave discrimination store the highest slope -- //
		if (Prev_valBP > Best_PeakBP) Best_PeakBP = Prev_valBP;
 8001bdc:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <PeakDtcBP+0x70>)
 8001bde:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001be2:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <PeakDtcBP+0x78>)
 8001be4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	dd04      	ble.n	8001bf6 <PeakDtcBP+0x52>
 8001bec:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <PeakDtcBP+0x70>)
 8001bee:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <PeakDtcBP+0x78>)
 8001bf4:	801a      	strh	r2, [r3, #0]
	}
	Prev_Prev_valBP = Prev_valBP;
 8001bf6:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <PeakDtcBP+0x70>)
 8001bf8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <PeakDtcBP+0x74>)
 8001bfe:	801a      	strh	r2, [r3, #0]
	Prev_valBP = DR_sample;
 8001c00:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <PeakDtcBP+0x70>)
 8001c02:	88fb      	ldrh	r3, [r7, #6]
 8001c04:	8013      	strh	r3, [r2, #0]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	200003ea 	.word	0x200003ea
 8001c18:	200003ec 	.word	0x200003ec
 8001c1c:	200003ee 	.word	0x200003ee

08001c20 <UpdateRR>:
RR_High_Lim		= 1.16*RR_M = ((116/100) * RR_M) = RR_M + (4/25)*RR_M
RR_Missed_Lim	= 1.66*RR_M = ((166/100) * RR_M) = RR_M + (33/50)*RR_M

**********************************************************************************/
void UpdateRR(int16_t qrs)
{   
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	80fb      	strh	r3, [r7, #6]
	// ---------- Update most 8 Recent RR mean Interval------------- //
	RR1_sum += qrs;
 8001c2a:	4b81      	ldr	r3, [pc, #516]	; (8001e30 <UpdateRR+0x210>)
 8001c2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	88fb      	ldrh	r3, [r7, #6]
 8001c34:	4413      	add	r3, r2
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	b21a      	sxth	r2, r3
 8001c3a:	4b7d      	ldr	r3, [pc, #500]	; (8001e30 <UpdateRR+0x210>)
 8001c3c:	801a      	strh	r2, [r3, #0]
	RR1_sum -= PT_dptr->RR_AVRG1_buf[RR1_p];
 8001c3e:	4b7c      	ldr	r3, [pc, #496]	; (8001e30 <UpdateRR+0x210>)
 8001c40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	497b      	ldr	r1, [pc, #492]	; (8001e34 <UpdateRR+0x214>)
 8001c48:	4b7b      	ldr	r3, [pc, #492]	; (8001e38 <UpdateRR+0x218>)
 8001c4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c4e:	3364      	adds	r3, #100	; 0x64
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	440b      	add	r3, r1
 8001c54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	b21a      	sxth	r2, r3
 8001c60:	4b73      	ldr	r3, [pc, #460]	; (8001e30 <UpdateRR+0x210>)
 8001c62:	801a      	strh	r2, [r3, #0]

	PT_dptr->RR_AVRG1_buf[RR1_p] = qrs;
 8001c64:	4a73      	ldr	r2, [pc, #460]	; (8001e34 <UpdateRR+0x214>)
 8001c66:	4b74      	ldr	r3, [pc, #464]	; (8001e38 <UpdateRR+0x218>)
 8001c68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c6c:	3364      	adds	r3, #100	; 0x64
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4413      	add	r3, r2
 8001c72:	88fa      	ldrh	r2, [r7, #6]
 8001c74:	805a      	strh	r2, [r3, #2]
	PT_dptr->Recent_RR_M = RR1_sum/RR_BUFFER_SIZE; 
 8001c76:	4b6e      	ldr	r3, [pc, #440]	; (8001e30 <UpdateRR+0x210>)
 8001c78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c7c:	4a6d      	ldr	r2, [pc, #436]	; (8001e34 <UpdateRR+0x214>)
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	da00      	bge.n	8001c84 <UpdateRR+0x64>
 8001c82:	3307      	adds	r3, #7
 8001c84:	10db      	asrs	r3, r3, #3
 8001c86:	b21b      	sxth	r3, r3
 8001c88:	8113      	strh	r3, [r2, #8]
	if (++RR1_p == RR_BUFFER_SIZE) 
 8001c8a:	4b6b      	ldr	r3, [pc, #428]	; (8001e38 <UpdateRR+0x218>)
 8001c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	3301      	adds	r3, #1
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	b21a      	sxth	r2, r3
 8001c98:	4b67      	ldr	r3, [pc, #412]	; (8001e38 <UpdateRR+0x218>)
 8001c9a:	801a      	strh	r2, [r3, #0]
 8001c9c:	4b66      	ldr	r3, [pc, #408]	; (8001e38 <UpdateRR+0x218>)
 8001c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	d102      	bne.n	8001cac <UpdateRR+0x8c>
		RR1_p = 0;
 8001ca6:	4b64      	ldr	r3, [pc, #400]	; (8001e38 <UpdateRR+0x218>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	801a      	strh	r2, [r3, #0]



	// ------ Update Selected Beat RR mean if qrs in range --------- //
	if (qrs >= PT_dptr->RR_Low_L && qrs <= PT_dptr->RR_High_L) {
 8001cac:	4b61      	ldr	r3, [pc, #388]	; (8001e34 <UpdateRR+0x214>)
 8001cae:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001cb2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	f2c0 808c 	blt.w	8001dd4 <UpdateRR+0x1b4>
 8001cbc:	4b5d      	ldr	r3, [pc, #372]	; (8001e34 <UpdateRR+0x214>)
 8001cbe:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001cc2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	f300 8084 	bgt.w	8001dd4 <UpdateRR+0x1b4>
		// ------ Update selective RR mean ----- //
		RR2_sum += qrs;
 8001ccc:	4b5b      	ldr	r3, [pc, #364]	; (8001e3c <UpdateRR+0x21c>)
 8001cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	b21a      	sxth	r2, r3
 8001cdc:	4b57      	ldr	r3, [pc, #348]	; (8001e3c <UpdateRR+0x21c>)
 8001cde:	801a      	strh	r2, [r3, #0]
		RR2_sum -= PT_dptr->RR_AVRG2_buf[RR2_p];
 8001ce0:	4b56      	ldr	r3, [pc, #344]	; (8001e3c <UpdateRR+0x21c>)
 8001ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	4952      	ldr	r1, [pc, #328]	; (8001e34 <UpdateRR+0x214>)
 8001cea:	4b55      	ldr	r3, [pc, #340]	; (8001e40 <UpdateRR+0x220>)
 8001cec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf0:	336c      	adds	r3, #108	; 0x6c
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	440b      	add	r3, r1
 8001cf6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	b21a      	sxth	r2, r3
 8001d02:	4b4e      	ldr	r3, [pc, #312]	; (8001e3c <UpdateRR+0x21c>)
 8001d04:	801a      	strh	r2, [r3, #0]

		PT_dptr->RR_AVRG2_buf[RR2_p] = qrs;
 8001d06:	4a4b      	ldr	r2, [pc, #300]	; (8001e34 <UpdateRR+0x214>)
 8001d08:	4b4d      	ldr	r3, [pc, #308]	; (8001e40 <UpdateRR+0x220>)
 8001d0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d0e:	336c      	adds	r3, #108	; 0x6c
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	88fa      	ldrh	r2, [r7, #6]
 8001d16:	805a      	strh	r2, [r3, #2]
		PT_dptr->RR_M = RR2_sum / RR_BUFFER_SIZE;
 8001d18:	4b48      	ldr	r3, [pc, #288]	; (8001e3c <UpdateRR+0x21c>)
 8001d1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d1e:	4a45      	ldr	r2, [pc, #276]	; (8001e34 <UpdateRR+0x214>)
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	da00      	bge.n	8001d26 <UpdateRR+0x106>
 8001d24:	3307      	adds	r3, #7
 8001d26:	10db      	asrs	r3, r3, #3
 8001d28:	b21b      	sxth	r3, r3
 8001d2a:	8493      	strh	r3, [r2, #36]	; 0x24
		if (++RR2_p == RR_BUFFER_SIZE) 
 8001d2c:	4b44      	ldr	r3, [pc, #272]	; (8001e40 <UpdateRR+0x220>)
 8001d2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	3301      	adds	r3, #1
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	b21a      	sxth	r2, r3
 8001d3a:	4b41      	ldr	r3, [pc, #260]	; (8001e40 <UpdateRR+0x220>)
 8001d3c:	801a      	strh	r2, [r3, #0]
 8001d3e:	4b40      	ldr	r3, [pc, #256]	; (8001e40 <UpdateRR+0x220>)
 8001d40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d102      	bne.n	8001d4e <UpdateRR+0x12e>
			RR2_p = 0;
 8001d48:	4b3d      	ldr	r3, [pc, #244]	; (8001e40 <UpdateRR+0x220>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	801a      	strh	r2, [r3, #0]

		// --------- Update Limits ------------ //
		PT_dptr->RR_Low_L = PT_dptr->Recent_RR_M - (PT_dptr->Recent_RR_M << 1) / 25;
 8001d4e:	4b39      	ldr	r3, [pc, #228]	; (8001e34 <UpdateRR+0x214>)
 8001d50:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	4b37      	ldr	r3, [pc, #220]	; (8001e34 <UpdateRR+0x214>)
 8001d58:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4939      	ldr	r1, [pc, #228]	; (8001e44 <UpdateRR+0x224>)
 8001d60:	fb81 0103 	smull	r0, r1, r1, r3
 8001d64:	10c9      	asrs	r1, r1, #3
 8001d66:	17db      	asrs	r3, r3, #31
 8001d68:	1a5b      	subs	r3, r3, r1
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	4413      	add	r3, r2
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	4b30      	ldr	r3, [pc, #192]	; (8001e34 <UpdateRR+0x214>)
 8001d72:	b212      	sxth	r2, r2
 8001d74:	84da      	strh	r2, [r3, #38]	; 0x26
		PT_dptr->RR_High_L = PT_dptr->Recent_RR_M + (PT_dptr->Recent_RR_M << 2) / 25;
 8001d76:	4b2f      	ldr	r3, [pc, #188]	; (8001e34 <UpdateRR+0x214>)
 8001d78:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	4b2d      	ldr	r3, [pc, #180]	; (8001e34 <UpdateRR+0x214>)
 8001d80:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	492f      	ldr	r1, [pc, #188]	; (8001e44 <UpdateRR+0x224>)
 8001d88:	fb81 0103 	smull	r0, r1, r1, r3
 8001d8c:	10c9      	asrs	r1, r1, #3
 8001d8e:	17db      	asrs	r3, r3, #31
 8001d90:	1acb      	subs	r3, r1, r3
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	4413      	add	r3, r2
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	4b26      	ldr	r3, [pc, #152]	; (8001e34 <UpdateRR+0x214>)
 8001d9a:	b212      	sxth	r2, r2
 8001d9c:	851a      	strh	r2, [r3, #40]	; 0x28
		PT_dptr->RR_Missed_L = PT_dptr->RR_M + (PT_dptr->RR_M * 33) / 50;
 8001d9e:	4b25      	ldr	r3, [pc, #148]	; (8001e34 <UpdateRR+0x214>)
 8001da0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	4b23      	ldr	r3, [pc, #140]	; (8001e34 <UpdateRR+0x214>)
 8001da8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001dac:	4619      	mov	r1, r3
 8001dae:	460b      	mov	r3, r1
 8001db0:	015b      	lsls	r3, r3, #5
 8001db2:	440b      	add	r3, r1
 8001db4:	4923      	ldr	r1, [pc, #140]	; (8001e44 <UpdateRR+0x224>)
 8001db6:	fb81 0103 	smull	r0, r1, r1, r3
 8001dba:	1109      	asrs	r1, r1, #4
 8001dbc:	17db      	asrs	r3, r3, #31
 8001dbe:	1acb      	subs	r3, r1, r3
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <UpdateRR+0x214>)
 8001dc8:	b212      	sxth	r2, r2
 8001dca:	855a      	strh	r2, [r3, #42]	; 0x2a
		PT_dptr->HR_State = REGULAR_HR;
 8001dcc:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <UpdateRR+0x214>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	859a      	strh	r2, [r3, #44]	; 0x2c
 8001dd2:	e027      	b.n	8001e24 <UpdateRR+0x204>
	}
	// -------- Irregular heart-rate ---------- //
	else {
		PT_dptr->RR_Missed_L = PT_dptr->Recent_RR_M + (PT_dptr->Recent_RR_M * 33) / 50;
 8001dd4:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <UpdateRR+0x214>)
 8001dd6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <UpdateRR+0x214>)
 8001dde:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001de2:	4619      	mov	r1, r3
 8001de4:	460b      	mov	r3, r1
 8001de6:	015b      	lsls	r3, r3, #5
 8001de8:	440b      	add	r3, r1
 8001dea:	4916      	ldr	r1, [pc, #88]	; (8001e44 <UpdateRR+0x224>)
 8001dec:	fb81 0103 	smull	r0, r1, r1, r3
 8001df0:	1109      	asrs	r1, r1, #4
 8001df2:	17db      	asrs	r3, r3, #31
 8001df4:	1acb      	subs	r3, r1, r3
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	4413      	add	r3, r2
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <UpdateRR+0x214>)
 8001dfe:	b212      	sxth	r2, r2
 8001e00:	855a      	strh	r2, [r3, #42]	; 0x2a
		PT_dptr->ThI1 >>= 1;
 8001e02:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <UpdateRR+0x214>)
 8001e04:	8a9b      	ldrh	r3, [r3, #20]
 8001e06:	4a0b      	ldr	r2, [pc, #44]	; (8001e34 <UpdateRR+0x214>)
 8001e08:	085b      	lsrs	r3, r3, #1
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	8293      	strh	r3, [r2, #20]
		PT_dptr->ThF1 >>= 1;
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <UpdateRR+0x214>)
 8001e10:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001e14:	4a07      	ldr	r2, [pc, #28]	; (8001e34 <UpdateRR+0x214>)
 8001e16:	105b      	asrs	r3, r3, #1
 8001e18:	b21b      	sxth	r3, r3
 8001e1a:	8393      	strh	r3, [r2, #28]
		PT_dptr->HR_State = IRREGULAR_HR;
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <UpdateRR+0x214>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	859a      	strh	r2, [r3, #44]	; 0x2c
	}
	
}
 8001e22:	bf00      	nop
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	200003fe 	.word	0x200003fe
 8001e34:	20000300 	.word	0x20000300
 8001e38:	200003fa 	.word	0x200003fa
 8001e3c:	20000400 	.word	0x20000400
 8001e40:	200003fc 	.word	0x200003fc
 8001e44:	51eb851f 	.word	0x51eb851f

08001e48 <UpdateThI>:
Description: This function recursively updates the adaptive noise and signal thresholds in
the Integrated signal. Implements Eq 12-16.

**********************************************************************************/
void UpdateThI( uint16_t *PEAKI, int8_t NOISE_F)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	70fb      	strb	r3, [r7, #3]
	// ------ Update Noise & Signal Estimate ------ //
	if (NOISE_F) {
 8001e54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d014      	beq.n	8001e86 <UpdateThI+0x3e>
		PT_dptr->NPKI -= PT_dptr->NPKI >> 3;
 8001e5c:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <UpdateThI+0x9c>)
 8001e5e:	8b1a      	ldrh	r2, [r3, #24]
 8001e60:	4b20      	ldr	r3, [pc, #128]	; (8001ee4 <UpdateThI+0x9c>)
 8001e62:	8b1b      	ldrh	r3, [r3, #24]
 8001e64:	08db      	lsrs	r3, r3, #3
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	491e      	ldr	r1, [pc, #120]	; (8001ee4 <UpdateThI+0x9c>)
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	830b      	strh	r3, [r1, #24]
		PT_dptr->NPKI += *PEAKI >> 3;
 8001e70:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <UpdateThI+0x9c>)
 8001e72:	8b1a      	ldrh	r2, [r3, #24]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	08db      	lsrs	r3, r3, #3
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	4919      	ldr	r1, [pc, #100]	; (8001ee4 <UpdateThI+0x9c>)
 8001e7e:	4413      	add	r3, r2
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	830b      	strh	r3, [r1, #24]
 8001e84:	e013      	b.n	8001eae <UpdateThI+0x66>
	}
	else {
		PT_dptr->SPKI -= PT_dptr->SPKI >> 3;
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <UpdateThI+0x9c>)
 8001e88:	8ada      	ldrh	r2, [r3, #22]
 8001e8a:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <UpdateThI+0x9c>)
 8001e8c:	8adb      	ldrh	r3, [r3, #22]
 8001e8e:	08db      	lsrs	r3, r3, #3
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	4914      	ldr	r1, [pc, #80]	; (8001ee4 <UpdateThI+0x9c>)
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	82cb      	strh	r3, [r1, #22]
		PT_dptr->SPKI += *PEAKI >> 3;
 8001e9a:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <UpdateThI+0x9c>)
 8001e9c:	8ada      	ldrh	r2, [r3, #22]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	08db      	lsrs	r3, r3, #3
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	490f      	ldr	r1, [pc, #60]	; (8001ee4 <UpdateThI+0x9c>)
 8001ea8:	4413      	add	r3, r2
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	82cb      	strh	r3, [r1, #22]
	}

	// --------- Update Thresholds ---------------- //
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <UpdateThI+0x9c>)
 8001eb0:	8b1a      	ldrh	r2, [r3, #24]
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <UpdateThI+0x9c>)
 8001eb4:	8adb      	ldrh	r3, [r3, #22]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <UpdateThI+0x9c>)
 8001eba:	8b1b      	ldrh	r3, [r3, #24]
 8001ebc:	1acb      	subs	r3, r1, r3
 8001ebe:	109b      	asrs	r3, r3, #2
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	4908      	ldr	r1, [pc, #32]	; (8001ee4 <UpdateThI+0x9c>)
 8001ec4:	4413      	add	r3, r2
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	828b      	strh	r3, [r1, #20]
	PT_dptr->ThI2 = PT_dptr->ThI1 >> 1;
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <UpdateThI+0x9c>)
 8001ecc:	8a9b      	ldrh	r3, [r3, #20]
 8001ece:	4a05      	ldr	r2, [pc, #20]	; (8001ee4 <UpdateThI+0x9c>)
 8001ed0:	085b      	lsrs	r3, r3, #1
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	8353      	strh	r3, [r2, #26]
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	20000300 	.word	0x20000300

08001ee8 <UpdateThF>:
Description: This function recursively updates the adaptive noise and signal thresholds in 
the BP signal. Implements Eq 17-21.

**********************************************************************************/
void UpdateThF(int16_t *PEAKF, int8_t NOISE_F)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	70fb      	strb	r3, [r7, #3]
	// ------ Update Noise & Signal Estimate ------ //
	if (NOISE_F) {
 8001ef4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d01e      	beq.n	8001f3a <UpdateThF+0x52>
		PT_dptr->NPKF -= PT_dptr->NPKF >> 3;
 8001efc:	4b2e      	ldr	r3, [pc, #184]	; (8001fb8 <UpdateThF+0xd0>)
 8001efe:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	4b2c      	ldr	r3, [pc, #176]	; (8001fb8 <UpdateThF+0xd0>)
 8001f06:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f0a:	10db      	asrs	r3, r3, #3
 8001f0c:	b21b      	sxth	r3, r3
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	4b28      	ldr	r3, [pc, #160]	; (8001fb8 <UpdateThF+0xd0>)
 8001f16:	b212      	sxth	r2, r2
 8001f18:	841a      	strh	r2, [r3, #32]
		PT_dptr->NPKF += *PEAKF >> 3;
 8001f1a:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <UpdateThF+0xd0>)
 8001f1c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f28:	10db      	asrs	r3, r3, #3
 8001f2a:	b21b      	sxth	r3, r3
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	4413      	add	r3, r2
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <UpdateThF+0xd0>)
 8001f34:	b212      	sxth	r2, r2
 8001f36:	841a      	strh	r2, [r3, #32]
 8001f38:	e01d      	b.n	8001f76 <UpdateThF+0x8e>
	}
	else {
		PT_dptr->SPKF -= PT_dptr->SPKF >> 3;
 8001f3a:	4b1f      	ldr	r3, [pc, #124]	; (8001fb8 <UpdateThF+0xd0>)
 8001f3c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <UpdateThF+0xd0>)
 8001f44:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001f48:	10db      	asrs	r3, r3, #3
 8001f4a:	b21b      	sxth	r3, r3
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <UpdateThF+0xd0>)
 8001f54:	b212      	sxth	r2, r2
 8001f56:	83da      	strh	r2, [r3, #30]
		PT_dptr->SPKF += *PEAKF >> 3;
 8001f58:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <UpdateThF+0xd0>)
 8001f5a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f66:	10db      	asrs	r3, r3, #3
 8001f68:	b21b      	sxth	r3, r3
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <UpdateThF+0xd0>)
 8001f72:	b212      	sxth	r2, r2
 8001f74:	83da      	strh	r2, [r3, #30]
	}

	// --------- Update Thresholds ---------------- //
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <UpdateThF+0xd0>)
 8001f78:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <UpdateThF+0xd0>)
 8001f80:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001f84:	4619      	mov	r1, r3
 8001f86:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <UpdateThF+0xd0>)
 8001f88:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f8c:	1acb      	subs	r3, r1, r3
 8001f8e:	109b      	asrs	r3, r3, #2
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	4413      	add	r3, r2
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <UpdateThF+0xd0>)
 8001f98:	b212      	sxth	r2, r2
 8001f9a:	839a      	strh	r2, [r3, #28]
	PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <UpdateThF+0xd0>)
 8001f9e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001fa2:	4a05      	ldr	r2, [pc, #20]	; (8001fb8 <UpdateThF+0xd0>)
 8001fa4:	105b      	asrs	r3, r3, #1
 8001fa6:	b21b      	sxth	r3, r3
 8001fa8:	8453      	strh	r3, [r2, #34]	; 0x22
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	20000300 	.word	0x20000300

08001fbc <PT_get_LPFilter_output>:
}



// ------Returns LP filter value ------ //
int16_t PT_get_LPFilter_output(void) {
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
	return (PT_dptr->LPF_val);
 8001fc0:	4b03      	ldr	r3, [pc, #12]	; (8001fd0 <PT_get_LPFilter_output+0x14>)
 8001fc2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	20000300 	.word	0x20000300

08001fd4 <PT_get_HPFilter_output>:

// ------Returns HP filter value ------ //
int16_t PT_get_HPFilter_output(void) {
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
	return (PT_dptr->HPF_val);
 8001fd8:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <PT_get_HPFilter_output+0x14>)
 8001fda:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	20000300 	.word	0x20000300

08001fec <PT_get_DRFilter_output>:

// ------Returns Dr filter value ------ //
int16_t PT_get_DRFilter_output(void) {
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
	return (PT_dptr->DRF_val);
 8001ff0:	4b03      	ldr	r3, [pc, #12]	; (8002000 <PT_get_DRFilter_output+0x14>)
 8001ff2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	20000300 	.word	0x20000300

08002004 <PT_get_MVFilter_output>:

// ------Returns MVA filter value ------ //
uint16_t PT_get_MVFilter_output(void) {
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
	return (PT_dptr->MVA_val);
 8002008:	4b03      	ldr	r3, [pc, #12]	; (8002018 <PT_get_MVFilter_output+0x14>)
 800200a:	8a5b      	ldrh	r3, [r3, #18]
}
 800200c:	4618      	mov	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	20000300 	.word	0x20000300

0800201c <PT_get_SQRFilter_output>:

// ------Returns SQR filter value ------ //
uint16_t PT_get_SQRFilter_output(void) {
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
	return (PT_dptr->SQF_val);
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <PT_get_SQRFilter_output+0x14>)
 8002022:	8a1b      	ldrh	r3, [r3, #16]
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	20000300 	.word	0x20000300

08002034 <PT_get_ThI1_output>:
	return (60 / (PT_dptr->RR_M / Fs));
}


// ------Returns the main threshold integrated signal Th value ------ //
uint16_t PT_get_ThI1_output(void) {
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
	return (PT_dptr->ThI1);
 8002038:	4b03      	ldr	r3, [pc, #12]	; (8002048 <PT_get_ThI1_output+0x14>)
 800203a:	8a9b      	ldrh	r3, [r3, #20]
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	20000300 	.word	0x20000300

0800204c <PT_get_ThF1_output>:

// ------Returns the main threshold BP signal Th value ------ //
int16_t PT_get_ThF1_output(void) {
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
	return (PT_dptr->ThF1);
 8002050:	4b03      	ldr	r3, [pc, #12]	; (8002060 <PT_get_ThF1_output+0x14>)
 8002052:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
}
 8002056:	4618      	mov	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	20000300 	.word	0x20000300

08002064 <putOnMovingAverageBuffer>:
int movingAverageBufferIndex = 0;
float32_t movingAverageBuffer[MovingAverageSampleCount];
float32_t meanValue;

void putOnMovingAverageBuffer (float32_t sample)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	ed87 0a01 	vstr	s0, [r7, #4]
	movingAverageBuffer[movingAverageBufferIndex] = sample;
 800206e:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <putOnMovingAverageBuffer+0x3c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a0c      	ldr	r2, [pc, #48]	; (80020a4 <putOnMovingAverageBuffer+0x40>)
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	601a      	str	r2, [r3, #0]
	movingAverageBufferIndex++;
 800207c:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <putOnMovingAverageBuffer+0x3c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	3301      	adds	r3, #1
 8002082:	4a07      	ldr	r2, [pc, #28]	; (80020a0 <putOnMovingAverageBuffer+0x3c>)
 8002084:	6013      	str	r3, [r2, #0]
	if (movingAverageBufferIndex==MovingAverageSampleCount)
 8002086:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <putOnMovingAverageBuffer+0x3c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2b36      	cmp	r3, #54	; 0x36
 800208c:	d102      	bne.n	8002094 <putOnMovingAverageBuffer+0x30>
	{
		movingAverageBufferIndex = 0;
 800208e:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <putOnMovingAverageBuffer+0x3c>)
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
	}
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	20000498 	.word	0x20000498
 80020a4:	2000049c 	.word	0x2000049c

080020a8 <arm_PT_init>:

void arm_PT_init()
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af02      	add	r7, sp, #8
	//Initiate filter function
	arm_fir_init_f32(&Derivative, NUM_DERIVATIVE_TAPS, (float32_t *)&firDerivativeCoefficients[0], &firStateF32[0], BLOCK_SIZE);
 80020ae:	2301      	movs	r3, #1
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <arm_PT_init+0x80>)
 80020b4:	4a1d      	ldr	r2, [pc, #116]	; (800212c <arm_PT_init+0x84>)
 80020b6:	2105      	movs	r1, #5
 80020b8:	481d      	ldr	r0, [pc, #116]	; (8002130 <arm_PT_init+0x88>)
 80020ba:	f7fe ff21 	bl	8000f00 <arm_fir_init_f32>
	arm_biquad_cascade_df1_init_f32 (&highPassFilter,1, (float32_t *)&iirHighPassFilterCoefficients[0], &highPassFilterStateF32[0]);
 80020be:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <arm_PT_init+0x8c>)
 80020c0:	4a1d      	ldr	r2, [pc, #116]	; (8002138 <arm_PT_init+0x90>)
 80020c2:	2101      	movs	r1, #1
 80020c4:	481d      	ldr	r0, [pc, #116]	; (800213c <arm_PT_init+0x94>)
 80020c6:	f7fe fe8f 	bl	8000de8 <arm_biquad_cascade_df1_init_f32>
	arm_biquad_cascade_df1_init_f32 (&lowPassFilter,1, (float32_t *)&iirLowPassFilterCoefficients[0], &lowPassFilterStateF32[0]);
 80020ca:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <arm_PT_init+0x98>)
 80020cc:	4a1d      	ldr	r2, [pc, #116]	; (8002144 <arm_PT_init+0x9c>)
 80020ce:	2101      	movs	r1, #1
 80020d0:	481d      	ldr	r0, [pc, #116]	; (8002148 <arm_PT_init+0xa0>)
 80020d2:	f7fe fe89 	bl	8000de8 <arm_biquad_cascade_df1_init_f32>
	//Reset buffors
	for (int i = 0; i<NUM_DERIVATIVE_TAPS_ARRAY_SIZE; i++)
 80020d6:	2300      	movs	r3, #0
 80020d8:	607b      	str	r3, [r7, #4]
 80020da:	e009      	b.n	80020f0 <arm_PT_init+0x48>
	{
		derivativeBuffer[i]=0;
 80020dc:	4a1b      	ldr	r2, [pc, #108]	; (800214c <arm_PT_init+0xa4>)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i<NUM_DERIVATIVE_TAPS_ARRAY_SIZE; i++)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3301      	adds	r3, #1
 80020ee:	607b      	str	r3, [r7, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	ddf2      	ble.n	80020dc <arm_PT_init+0x34>
	}
	movingAverageBufferIndex=0;
 80020f6:	4b16      	ldr	r3, [pc, #88]	; (8002150 <arm_PT_init+0xa8>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
	for (int i = 0; i<MovingAverageSampleCount; i++)
 80020fc:	2300      	movs	r3, #0
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	e009      	b.n	8002116 <arm_PT_init+0x6e>
	{
		movingAverageBuffer[i] = 0;
 8002102:	4a14      	ldr	r2, [pc, #80]	; (8002154 <arm_PT_init+0xac>)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i<MovingAverageSampleCount; i++)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	3301      	adds	r3, #1
 8002114:	603b      	str	r3, [r7, #0]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	2b35      	cmp	r3, #53	; 0x35
 800211a:	ddf2      	ble.n	8002102 <arm_PT_init+0x5a>
	}
}
 800211c:	bf00      	nop
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000420 	.word	0x20000420
 800212c:	080125f0 	.word	0x080125f0
 8002130:	20000434 	.word	0x20000434
 8002134:	20000454 	.word	0x20000454
 8002138:	08012604 	.word	0x08012604
 800213c:	20000464 	.word	0x20000464
 8002140:	20000474 	.word	0x20000474
 8002144:	08012618 	.word	0x08012618
 8002148:	20000484 	.word	0x20000484
 800214c:	20000440 	.word	0x20000440
 8002150:	20000498 	.word	0x20000498
 8002154:	2000049c 	.word	0x2000049c

08002158 <arm_PT_ST>:



int16_t arm_PT_ST(int16_t sample)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	80fb      	strh	r3, [r7, #6]
	float32_t newSample = (float)sample;
 8002162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002166:	ee07 3a90 	vmov	s15, r3
 800216a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800216e:	edc7 7a03 	vstr	s15, [r7, #12]
	//low pass filter operation
	arm_biquad_cascade_df1_f32 (&lowPassFilter, &newSample,&lowPassFilterResult,1);
 8002172:	f107 010c 	add.w	r1, r7, #12
 8002176:	2301      	movs	r3, #1
 8002178:	4a15      	ldr	r2, [pc, #84]	; (80021d0 <arm_PT_ST+0x78>)
 800217a:	4816      	ldr	r0, [pc, #88]	; (80021d4 <arm_PT_ST+0x7c>)
 800217c:	f7fe fd92 	bl	8000ca4 <arm_biquad_cascade_df1_f32>
	//high pass filter operation
	arm_biquad_cascade_df1_f32 (&highPassFilter, &lowPassFilterResult,&highPassFilterResult,1);
 8002180:	2301      	movs	r3, #1
 8002182:	4a15      	ldr	r2, [pc, #84]	; (80021d8 <arm_PT_ST+0x80>)
 8002184:	4912      	ldr	r1, [pc, #72]	; (80021d0 <arm_PT_ST+0x78>)
 8002186:	4815      	ldr	r0, [pc, #84]	; (80021dc <arm_PT_ST+0x84>)
 8002188:	f7fe fd8c 	bl	8000ca4 <arm_biquad_cascade_df1_f32>
	//Derivative with FIR filter
	//putOnMovingAverageBuffer(lowPassFilterResult);
	arm_fir_f32 (&Derivative,&lowPassFilterResult,&derivativeOutput[0],BLOCK_SIZE);
 800218c:	2301      	movs	r3, #1
 800218e:	4a14      	ldr	r2, [pc, #80]	; (80021e0 <arm_PT_ST+0x88>)
 8002190:	490f      	ldr	r1, [pc, #60]	; (80021d0 <arm_PT_ST+0x78>)
 8002192:	4814      	ldr	r0, [pc, #80]	; (80021e4 <arm_PT_ST+0x8c>)
 8002194:	f7fe fe44 	bl	8000e20 <arm_fir_f32>
	//Square the value
	squaredValue = derivativeOutput[0] * derivativeOutput[0];
 8002198:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <arm_PT_ST+0x88>)
 800219a:	ed93 7a00 	vldr	s14, [r3]
 800219e:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <arm_PT_ST+0x88>)
 80021a0:	edd3 7a00 	vldr	s15, [r3]
 80021a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a8:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <arm_PT_ST+0x90>)
 80021aa:	edc3 7a00 	vstr	s15, [r3]
	//Compute moving average
	putOnMovingAverageBuffer(squaredValue);
 80021ae:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <arm_PT_ST+0x90>)
 80021b0:	edd3 7a00 	vldr	s15, [r3]
 80021b4:	eeb0 0a67 	vmov.f32	s0, s15
 80021b8:	f7ff ff54 	bl	8002064 <putOnMovingAverageBuffer>
	arm_mean_f32 (&movingAverageBuffer[0], MovingAverageSampleCount, &meanValue);
 80021bc:	4a0b      	ldr	r2, [pc, #44]	; (80021ec <arm_PT_ST+0x94>)
 80021be:	2136      	movs	r1, #54	; 0x36
 80021c0:	480b      	ldr	r0, [pc, #44]	; (80021f0 <arm_PT_ST+0x98>)
 80021c2:	f7fe febc 	bl	8000f3e <arm_mean_f32>

	//TODO: Implement QRS detection
	return 0;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20000490 	.word	0x20000490
 80021d4:	20000484 	.word	0x20000484
 80021d8:	20000470 	.word	0x20000470
 80021dc:	20000464 	.word	0x20000464
 80021e0:	20000454 	.word	0x20000454
 80021e4:	20000434 	.word	0x20000434
 80021e8:	20000494 	.word	0x20000494
 80021ec:	20000574 	.word	0x20000574
 80021f0:	2000049c 	.word	0x2000049c

080021f4 <arm_get_LPFilter_output>:

float32_t arm_get_LPFilter_output()
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0

	return lowPassFilterResult;
 80021f8:	4b04      	ldr	r3, [pc, #16]	; (800220c <arm_get_LPFilter_output+0x18>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	ee07 3a90 	vmov	s15, r3
}
 8002200:	eeb0 0a67 	vmov.f32	s0, s15
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	20000490 	.word	0x20000490

08002210 <arm_get_HPFilter_output>:

float32_t arm_get_HPFilter_output()
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0

	return highPassFilterResult;
 8002214:	4b04      	ldr	r3, [pc, #16]	; (8002228 <arm_get_HPFilter_output+0x18>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	ee07 3a90 	vmov	s15, r3
}
 800221c:	eeb0 0a67 	vmov.f32	s0, s15
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	20000470 	.word	0x20000470

0800222c <arm_get_DRFilter_output>:

float32_t arm_get_DRFilter_output()
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0

	return derivativeOutput[0];
 8002230:	4b04      	ldr	r3, [pc, #16]	; (8002244 <arm_get_DRFilter_output+0x18>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	ee07 3a90 	vmov	s15, r3
}
 8002238:	eeb0 0a67 	vmov.f32	s0, s15
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	20000454 	.word	0x20000454

08002248 <arm_get_SQRFilter_output>:

float32_t arm_get_SQRFilter_output()
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0

	return squaredValue;
 800224c:	4b04      	ldr	r3, [pc, #16]	; (8002260 <arm_get_SQRFilter_output+0x18>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	ee07 3a90 	vmov	s15, r3
}
 8002254:	eeb0 0a67 	vmov.f32	s0, s15
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	20000494 	.word	0x20000494

08002264 <arm_get_MVFilter_output>:

float32_t arm_get_MVFilter_output()
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
	return meanValue;
 8002268:	4b04      	ldr	r3, [pc, #16]	; (800227c <arm_get_MVFilter_output+0x18>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	ee07 3a90 	vmov	s15, r3
}
 8002270:	eeb0 0a67 	vmov.f32	s0, s15
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	20000574 	.word	0x20000574

08002280 <arm_get_ThI1_output>:

float32_t arm_get_ThI1_output()
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0

	return 0;
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	ee07 3a90 	vmov	s15, r3
}
 800228c:	eeb0 0a67 	vmov.f32	s0, s15
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <arm_get_ThF1_output>:

float32_t arm_get_ThF1_output()
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0

	return 0;
 800229c:	f04f 0300 	mov.w	r3, #0
 80022a0:	ee07 3a90 	vmov	s15, r3
}
 80022a4:	eeb0 0a67 	vmov.f32	s0, s15
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <Rafael_init>:
	// qrs tells whether there was a detection or not.
	// regular tells whether the heart pace is regular or not.
	// prevRegular tells whether the heart beat was regular before the newest RR-interval was calculated.
	bool qrs, regular = true, prevRegular;
void Rafael_init()
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0


	// Initializing the RR averages
	for (i = 0; i < 8; i++)
 80022b4:	4b29      	ldr	r3, [pc, #164]	; (800235c <Rafael_init+0xac>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	e010      	b.n	80022de <Rafael_init+0x2e>
    {
        rr1[i] = 0;
 80022bc:	4b27      	ldr	r3, [pc, #156]	; (800235c <Rafael_init+0xac>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a27      	ldr	r2, [pc, #156]	; (8002360 <Rafael_init+0xb0>)
 80022c2:	2100      	movs	r1, #0
 80022c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        rr2[i] = 0;
 80022c8:	4b24      	ldr	r3, [pc, #144]	; (800235c <Rafael_init+0xac>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a25      	ldr	r2, [pc, #148]	; (8002364 <Rafael_init+0xb4>)
 80022ce:	2100      	movs	r1, #0
 80022d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < 8; i++)
 80022d4:	4b21      	ldr	r3, [pc, #132]	; (800235c <Rafael_init+0xac>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	3301      	adds	r3, #1
 80022da:	4a20      	ldr	r2, [pc, #128]	; (800235c <Rafael_init+0xac>)
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	4b1f      	ldr	r3, [pc, #124]	; (800235c <Rafael_init+0xac>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2b07      	cmp	r3, #7
 80022e4:	d9ea      	bls.n	80022bc <Rafael_init+0xc>
    }
	 rrlow = 0;
 80022e6:	4b20      	ldr	r3, [pc, #128]	; (8002368 <Rafael_init+0xb8>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
	 rrhigh = 0;
 80022ec:	4b1f      	ldr	r3, [pc, #124]	; (800236c <Rafael_init+0xbc>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
	 rrmiss = 0;
 80022f2:	4b1f      	ldr	r3, [pc, #124]	; (8002370 <Rafael_init+0xc0>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
	 regular = true;
 80022f8:	4b1e      	ldr	r3, [pc, #120]	; (8002374 <Rafael_init+0xc4>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]
	 sample = 0;
 80022fe:	4b1e      	ldr	r3, [pc, #120]	; (8002378 <Rafael_init+0xc8>)
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
	 lastQRS = 0;
 8002304:	4b1d      	ldr	r3, [pc, #116]	; (800237c <Rafael_init+0xcc>)
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
	 lastSlope = 0;
 800230a:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <Rafael_init+0xd0>)
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
	 currentSlope = 0;
 8002310:	4b1c      	ldr	r3, [pc, #112]	; (8002384 <Rafael_init+0xd4>)
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
	 peak_i = 0;
 8002316:	4b1c      	ldr	r3, [pc, #112]	; (8002388 <Rafael_init+0xd8>)
 8002318:	2200      	movs	r2, #0
 800231a:	801a      	strh	r2, [r3, #0]
	 peak_f = 0;
 800231c:	4b1b      	ldr	r3, [pc, #108]	; (800238c <Rafael_init+0xdc>)
 800231e:	2200      	movs	r2, #0
 8002320:	801a      	strh	r2, [r3, #0]
	 threshold_i1 = 0;
 8002322:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <Rafael_init+0xe0>)
 8002324:	2200      	movs	r2, #0
 8002326:	801a      	strh	r2, [r3, #0]
	 threshold_i2 = 0;
 8002328:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <Rafael_init+0xe4>)
 800232a:	2200      	movs	r2, #0
 800232c:	801a      	strh	r2, [r3, #0]
	 threshold_f1 = 0;
 800232e:	4b1a      	ldr	r3, [pc, #104]	; (8002398 <Rafael_init+0xe8>)
 8002330:	2200      	movs	r2, #0
 8002332:	801a      	strh	r2, [r3, #0]
	 threshold_f2 = 0;
 8002334:	4b19      	ldr	r3, [pc, #100]	; (800239c <Rafael_init+0xec>)
 8002336:	2200      	movs	r2, #0
 8002338:	801a      	strh	r2, [r3, #0]
	 spk_i = 0;
 800233a:	4b19      	ldr	r3, [pc, #100]	; (80023a0 <Rafael_init+0xf0>)
 800233c:	2200      	movs	r2, #0
 800233e:	801a      	strh	r2, [r3, #0]
	 spk_f = 0;
 8002340:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <Rafael_init+0xf4>)
 8002342:	2200      	movs	r2, #0
 8002344:	801a      	strh	r2, [r3, #0]
	 npk_i = 0;
 8002346:	4b18      	ldr	r3, [pc, #96]	; (80023a8 <Rafael_init+0xf8>)
 8002348:	2200      	movs	r2, #0
 800234a:	801a      	strh	r2, [r3, #0]
	 npk_f = 0;
 800234c:	4b17      	ldr	r3, [pc, #92]	; (80023ac <Rafael_init+0xfc>)
 800234e:	2200      	movs	r2, #0
 8002350:	801a      	strh	r2, [r3, #0]
}
 8002352:	bf00      	nop
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	20002b4c 	.word	0x20002b4c
 8002360:	20002af8 	.word	0x20002af8
 8002364:	20002b18 	.word	0x20002b18
 8002368:	20002b40 	.word	0x20002b40
 800236c:	20002b44 	.word	0x20002b44
 8002370:	20002b48 	.word	0x20002b48
 8002374:	20000004 	.word	0x20000004
 8002378:	20002b54 	.word	0x20002b54
 800237c:	20002b58 	.word	0x20002b58
 8002380:	20002b5c 	.word	0x20002b5c
 8002384:	20002b60 	.word	0x20002b60
 8002388:	20002b68 	.word	0x20002b68
 800238c:	20002b6a 	.word	0x20002b6a
 8002390:	20002b6c 	.word	0x20002b6c
 8002394:	20002b6e 	.word	0x20002b6e
 8002398:	20002b70 	.word	0x20002b70
 800239c:	20002b72 	.word	0x20002b72
 80023a0:	20002b74 	.word	0x20002b74
 80023a4:	20002b76 	.word	0x20002b76
 80023a8:	20002b78 	.word	0x20002b78
 80023ac:	20002b7a 	.word	0x20002b7a

080023b0 <Rafael_PanTompkins>:
    and updates the thresholds and averages until there are no more samples. More details both above and in
    shorter comments below.
*/
//UPDATe: I changed the way that it operates, now works like hooman650's implementation
int16_t Rafael_PanTompkins(dataType input)
{
 80023b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023b4:	b084      	sub	sp, #16
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	4603      	mov	r3, r0
 80023ba:	80fb      	strh	r3, [r7, #6]

		int16_t result = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	81fb      	strh	r3, [r7, #14]
        // Test if the buffers are full.
        // If they are, shift them, discarding the oldest sample and adding the new one at the end.
        // Else, just put the newest sample in the next free position.
        // Update 'current' so that the program knows where's the newest sample.
		if (sample >= BUFFSIZE)
 80023c0:	4b5f      	ldr	r3, [pc, #380]	; (8002540 <Rafael_PanTompkins+0x190>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80023c8:	d36b      	bcc.n	80024a2 <Rafael_PanTompkins+0xf2>
		{
			for (i = 0; i < BUFFSIZE - 1; i++)
 80023ca:	4b5e      	ldr	r3, [pc, #376]	; (8002544 <Rafael_PanTompkins+0x194>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	e05c      	b.n	800248c <Rafael_PanTompkins+0xdc>
			{
				RF_signal[i] =RF_signal[i+1];
 80023d2:	4b5c      	ldr	r3, [pc, #368]	; (8002544 <Rafael_PanTompkins+0x194>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	4b5a      	ldr	r3, [pc, #360]	; (8002544 <Rafael_PanTompkins+0x194>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	495a      	ldr	r1, [pc, #360]	; (8002548 <Rafael_PanTompkins+0x198>)
 80023de:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80023e2:	4a59      	ldr	r2, [pc, #356]	; (8002548 <Rafael_PanTompkins+0x198>)
 80023e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_dcblock[i] = RF_dcblock[i+1];
 80023e8:	4b56      	ldr	r3, [pc, #344]	; (8002544 <Rafael_PanTompkins+0x194>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	1c5a      	adds	r2, r3, #1
 80023ee:	4b55      	ldr	r3, [pc, #340]	; (8002544 <Rafael_PanTompkins+0x194>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4956      	ldr	r1, [pc, #344]	; (800254c <Rafael_PanTompkins+0x19c>)
 80023f4:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80023f8:	4a54      	ldr	r2, [pc, #336]	; (800254c <Rafael_PanTompkins+0x19c>)
 80023fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_lowpass[i] = RF_lowpass[i+1];
 80023fe:	4b51      	ldr	r3, [pc, #324]	; (8002544 <Rafael_PanTompkins+0x194>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	4b4f      	ldr	r3, [pc, #316]	; (8002544 <Rafael_PanTompkins+0x194>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4951      	ldr	r1, [pc, #324]	; (8002550 <Rafael_PanTompkins+0x1a0>)
 800240a:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800240e:	4a50      	ldr	r2, [pc, #320]	; (8002550 <Rafael_PanTompkins+0x1a0>)
 8002410:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_highpass[i] = RF_highpass[i+1];
 8002414:	4b4b      	ldr	r3, [pc, #300]	; (8002544 <Rafael_PanTompkins+0x194>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	4b4a      	ldr	r3, [pc, #296]	; (8002544 <Rafael_PanTompkins+0x194>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	494d      	ldr	r1, [pc, #308]	; (8002554 <Rafael_PanTompkins+0x1a4>)
 8002420:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002424:	4a4b      	ldr	r2, [pc, #300]	; (8002554 <Rafael_PanTompkins+0x1a4>)
 8002426:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_derivative[i] = RF_derivative[i+1];
 800242a:	4b46      	ldr	r3, [pc, #280]	; (8002544 <Rafael_PanTompkins+0x194>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	1c5a      	adds	r2, r3, #1
 8002430:	4b44      	ldr	r3, [pc, #272]	; (8002544 <Rafael_PanTompkins+0x194>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4948      	ldr	r1, [pc, #288]	; (8002558 <Rafael_PanTompkins+0x1a8>)
 8002436:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800243a:	4a47      	ldr	r2, [pc, #284]	; (8002558 <Rafael_PanTompkins+0x1a8>)
 800243c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_squared[i] = RF_squared[i+1];
 8002440:	4b40      	ldr	r3, [pc, #256]	; (8002544 <Rafael_PanTompkins+0x194>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	4b3f      	ldr	r3, [pc, #252]	; (8002544 <Rafael_PanTompkins+0x194>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4944      	ldr	r1, [pc, #272]	; (800255c <Rafael_PanTompkins+0x1ac>)
 800244c:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002450:	4a42      	ldr	r2, [pc, #264]	; (800255c <Rafael_PanTompkins+0x1ac>)
 8002452:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_integral[i] = RF_integral[i+1];
 8002456:	4b3b      	ldr	r3, [pc, #236]	; (8002544 <Rafael_PanTompkins+0x194>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	4b39      	ldr	r3, [pc, #228]	; (8002544 <Rafael_PanTompkins+0x194>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	493f      	ldr	r1, [pc, #252]	; (8002560 <Rafael_PanTompkins+0x1b0>)
 8002462:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002466:	4a3e      	ldr	r2, [pc, #248]	; (8002560 <Rafael_PanTompkins+0x1b0>)
 8002468:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_outputSignal[i] = RF_outputSignal[i+1];
 800246c:	4b35      	ldr	r3, [pc, #212]	; (8002544 <Rafael_PanTompkins+0x194>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	4b34      	ldr	r3, [pc, #208]	; (8002544 <Rafael_PanTompkins+0x194>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	493b      	ldr	r1, [pc, #236]	; (8002564 <Rafael_PanTompkins+0x1b4>)
 8002478:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800247c:	4a39      	ldr	r2, [pc, #228]	; (8002564 <Rafael_PanTompkins+0x1b4>)
 800247e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (i = 0; i < BUFFSIZE - 1; i++)
 8002482:	4b30      	ldr	r3, [pc, #192]	; (8002544 <Rafael_PanTompkins+0x194>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	3301      	adds	r3, #1
 8002488:	4a2e      	ldr	r2, [pc, #184]	; (8002544 <Rafael_PanTompkins+0x194>)
 800248a:	6013      	str	r3, [r2, #0]
 800248c:	4b2d      	ldr	r3, [pc, #180]	; (8002544 <Rafael_PanTompkins+0x194>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f240 2256 	movw	r2, #598	; 0x256
 8002494:	4293      	cmp	r3, r2
 8002496:	d99c      	bls.n	80023d2 <Rafael_PanTompkins+0x22>
			}
			current = BUFFSIZE - 1;
 8002498:	4b33      	ldr	r3, [pc, #204]	; (8002568 <Rafael_PanTompkins+0x1b8>)
 800249a:	f240 2257 	movw	r2, #599	; 0x257
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	e004      	b.n	80024ac <Rafael_PanTompkins+0xfc>
		}
		else
		{
			current = sample;
 80024a2:	4b27      	ldr	r3, [pc, #156]	; (8002540 <Rafael_PanTompkins+0x190>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	4b2f      	ldr	r3, [pc, #188]	; (8002568 <Rafael_PanTompkins+0x1b8>)
 80024aa:	601a      	str	r2, [r3, #0]
		}
		RF_signal[current] = input;
 80024ac:	4b2e      	ldr	r3, [pc, #184]	; (8002568 <Rafael_PanTompkins+0x1b8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4925      	ldr	r1, [pc, #148]	; (8002548 <Rafael_PanTompkins+0x198>)
 80024b2:	88fa      	ldrh	r2, [r7, #6]
 80024b4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

		// If no sample was read, stop processing!
		//if (signal[current] == NOSAMPLE)
		//	break;
		sample++; // Update sample counter
 80024b8:	4b21      	ldr	r3, [pc, #132]	; (8002540 <Rafael_PanTompkins+0x190>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	3301      	adds	r3, #1
 80024be:	4a20      	ldr	r2, [pc, #128]	; (8002540 <Rafael_PanTompkins+0x190>)
 80024c0:	6013      	str	r3, [r2, #0]

		// DC Block filter
		// This was not proposed on the original paper.
		// It is not necessary and can be removed if your sensor or database has no DC noise.
		if (current >= 1)
 80024c2:	4b29      	ldr	r3, [pc, #164]	; (8002568 <Rafael_PanTompkins+0x1b8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	dd50      	ble.n	800256c <Rafael_PanTompkins+0x1bc>
			RF_dcblock[current] = RF_signal[current] - RF_signal[current-1] + 0.995*RF_dcblock[current-1];
 80024ca:	4b27      	ldr	r3, [pc, #156]	; (8002568 <Rafael_PanTompkins+0x1b8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a1e      	ldr	r2, [pc, #120]	; (8002548 <Rafael_PanTompkins+0x198>)
 80024d0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80024d4:	4619      	mov	r1, r3
 80024d6:	4b24      	ldr	r3, [pc, #144]	; (8002568 <Rafael_PanTompkins+0x1b8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	3b01      	subs	r3, #1
 80024dc:	4a1a      	ldr	r2, [pc, #104]	; (8002548 <Rafael_PanTompkins+0x198>)
 80024de:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80024e2:	1acb      	subs	r3, r1, r3
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fd fff5 	bl	80004d4 <__aeabi_i2d>
 80024ea:	4604      	mov	r4, r0
 80024ec:	460d      	mov	r5, r1
 80024ee:	4b1e      	ldr	r3, [pc, #120]	; (8002568 <Rafael_PanTompkins+0x1b8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	4a15      	ldr	r2, [pc, #84]	; (800254c <Rafael_PanTompkins+0x19c>)
 80024f6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fd ffea 	bl	80004d4 <__aeabi_i2d>
 8002500:	a30d      	add	r3, pc, #52	; (adr r3, 8002538 <Rafael_PanTompkins+0x188>)
 8002502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002506:	f7fe f84f 	bl	80005a8 <__aeabi_dmul>
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	4620      	mov	r0, r4
 8002510:	4629      	mov	r1, r5
 8002512:	f7fd fe93 	bl	800023c <__adddf3>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	4913      	ldr	r1, [pc, #76]	; (8002568 <Rafael_PanTompkins+0x1b8>)
 800251c:	680c      	ldr	r4, [r1, #0]
 800251e:	4610      	mov	r0, r2
 8002520:	4619      	mov	r1, r3
 8002522:	f7fe faf1 	bl	8000b08 <__aeabi_d2iz>
 8002526:	4603      	mov	r3, r0
 8002528:	b21a      	sxth	r2, r3
 800252a:	4b08      	ldr	r3, [pc, #32]	; (800254c <Rafael_PanTompkins+0x19c>)
 800252c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8002530:	e022      	b.n	8002578 <Rafael_PanTompkins+0x1c8>
 8002532:	bf00      	nop
 8002534:	f3af 8000 	nop.w
 8002538:	3d70a3d7 	.word	0x3d70a3d7
 800253c:	3fefd70a 	.word	0x3fefd70a
 8002540:	20002b54 	.word	0x20002b54
 8002544:	20002b4c 	.word	0x20002b4c
 8002548:	20000578 	.word	0x20000578
 800254c:	20000a28 	.word	0x20000a28
 8002550:	20000ed8 	.word	0x20000ed8
 8002554:	20001388 	.word	0x20001388
 8002558:	20001838 	.word	0x20001838
 800255c:	20001ce8 	.word	0x20001ce8
 8002560:	20002198 	.word	0x20002198
 8002564:	20002648 	.word	0x20002648
 8002568:	20002b64 	.word	0x20002b64
		else
			RF_dcblock[current] = 0;
 800256c:	4b8a      	ldr	r3, [pc, #552]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a8a      	ldr	r2, [pc, #552]	; (800279c <Rafael_PanTompkins+0x3ec>)
 8002572:	2100      	movs	r1, #0
 8002574:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		// Low Pass filter
		// Implemented as proposed by the original paper.
		// y(nT) = 2y(nT - T) - y(nT - 2T) + x(nT) - 2x(nT - 6T) + x(nT - 12T)
		// Can be removed if your signal was previously filtered, or replaced by a different filter.
		RF_lowpass[current] = RF_dcblock[current];
 8002578:	4b87      	ldr	r3, [pc, #540]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b86      	ldr	r3, [pc, #536]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4986      	ldr	r1, [pc, #536]	; (800279c <Rafael_PanTompkins+0x3ec>)
 8002582:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002586:	4a86      	ldr	r2, [pc, #536]	; (80027a0 <Rafael_PanTompkins+0x3f0>)
 8002588:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 1)
 800258c:	4b82      	ldr	r3, [pc, #520]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	dd16      	ble.n	80025c2 <Rafael_PanTompkins+0x212>
			RF_lowpass[current] += 2*RF_lowpass[current-1];
 8002594:	4b80      	ldr	r3, [pc, #512]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a81      	ldr	r2, [pc, #516]	; (80027a0 <Rafael_PanTompkins+0x3f0>)
 800259a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800259e:	b29a      	uxth	r2, r3
 80025a0:	4b7d      	ldr	r3, [pc, #500]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	3b01      	subs	r3, #1
 80025a6:	497e      	ldr	r1, [pc, #504]	; (80027a0 <Rafael_PanTompkins+0x3f0>)
 80025a8:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	4413      	add	r3, r2
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	4b78      	ldr	r3, [pc, #480]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	b211      	sxth	r1, r2
 80025bc:	4a78      	ldr	r2, [pc, #480]	; (80027a0 <Rafael_PanTompkins+0x3f0>)
 80025be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 2)
 80025c2:	4b75      	ldr	r3, [pc, #468]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	dd14      	ble.n	80025f4 <Rafael_PanTompkins+0x244>
			RF_lowpass[current] -= RF_lowpass[current-2];
 80025ca:	4b73      	ldr	r3, [pc, #460]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a74      	ldr	r2, [pc, #464]	; (80027a0 <Rafael_PanTompkins+0x3f0>)
 80025d0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	4b70      	ldr	r3, [pc, #448]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	3b02      	subs	r3, #2
 80025dc:	4970      	ldr	r1, [pc, #448]	; (80027a0 <Rafael_PanTompkins+0x3f0>)
 80025de:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	4b6b      	ldr	r3, [pc, #428]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	b211      	sxth	r1, r2
 80025ee:	4a6c      	ldr	r2, [pc, #432]	; (80027a0 <Rafael_PanTompkins+0x3f0>)
 80025f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 6)
 80025f4:	4b68      	ldr	r3, [pc, #416]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b05      	cmp	r3, #5
 80025fa:	dd16      	ble.n	800262a <Rafael_PanTompkins+0x27a>
			RF_lowpass[current] -= 2*RF_dcblock[current-6];
 80025fc:	4b66      	ldr	r3, [pc, #408]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a67      	ldr	r2, [pc, #412]	; (80027a0 <Rafael_PanTompkins+0x3f0>)
 8002602:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002606:	b29a      	uxth	r2, r3
 8002608:	4b63      	ldr	r3, [pc, #396]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	3b06      	subs	r3, #6
 800260e:	4963      	ldr	r1, [pc, #396]	; (800279c <Rafael_PanTompkins+0x3ec>)
 8002610:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002614:	b29b      	uxth	r3, r3
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	b29b      	uxth	r3, r3
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	b29a      	uxth	r2, r3
 800261e:	4b5e      	ldr	r3, [pc, #376]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	b211      	sxth	r1, r2
 8002624:	4a5e      	ldr	r2, [pc, #376]	; (80027a0 <Rafael_PanTompkins+0x3f0>)
 8002626:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 12)
 800262a:	4b5b      	ldr	r3, [pc, #364]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b0b      	cmp	r3, #11
 8002630:	dd14      	ble.n	800265c <Rafael_PanTompkins+0x2ac>
			RF_lowpass[current] += RF_dcblock[current-12];
 8002632:	4b59      	ldr	r3, [pc, #356]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a5a      	ldr	r2, [pc, #360]	; (80027a0 <Rafael_PanTompkins+0x3f0>)
 8002638:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800263c:	b29a      	uxth	r2, r3
 800263e:	4b56      	ldr	r3, [pc, #344]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	3b0c      	subs	r3, #12
 8002644:	4955      	ldr	r1, [pc, #340]	; (800279c <Rafael_PanTompkins+0x3ec>)
 8002646:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800264a:	b29b      	uxth	r3, r3
 800264c:	4413      	add	r3, r2
 800264e:	b29a      	uxth	r2, r3
 8002650:	4b51      	ldr	r3, [pc, #324]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	b211      	sxth	r1, r2
 8002656:	4a52      	ldr	r2, [pc, #328]	; (80027a0 <Rafael_PanTompkins+0x3f0>)
 8002658:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		// High Pass filter
		// Implemented as proposed by the original paper.
		// y(nT) = 32x(nT - 16T) - [y(nT - T) + x(nT) - x(nT - 32T)]
		// Can be removed if your signal was previously filtered, or replaced by a different filter.
		RF_highpass[current] = -RF_lowpass[current];
 800265c:	4b4e      	ldr	r3, [pc, #312]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a4f      	ldr	r2, [pc, #316]	; (80027a0 <Rafael_PanTompkins+0x3f0>)
 8002662:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002666:	b29b      	uxth	r3, r3
 8002668:	425b      	negs	r3, r3
 800266a:	b29a      	uxth	r2, r3
 800266c:	4b4a      	ldr	r3, [pc, #296]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	b211      	sxth	r1, r2
 8002672:	4a4c      	ldr	r2, [pc, #304]	; (80027a4 <Rafael_PanTompkins+0x3f4>)
 8002674:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 1)
 8002678:	4b47      	ldr	r3, [pc, #284]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	dd14      	ble.n	80026aa <Rafael_PanTompkins+0x2fa>
			RF_highpass[current] -= RF_highpass[current-1];
 8002680:	4b45      	ldr	r3, [pc, #276]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a47      	ldr	r2, [pc, #284]	; (80027a4 <Rafael_PanTompkins+0x3f4>)
 8002686:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800268a:	b29a      	uxth	r2, r3
 800268c:	4b42      	ldr	r3, [pc, #264]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	3b01      	subs	r3, #1
 8002692:	4944      	ldr	r1, [pc, #272]	; (80027a4 <Rafael_PanTompkins+0x3f4>)
 8002694:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002698:	b29b      	uxth	r3, r3
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	b29a      	uxth	r2, r3
 800269e:	4b3e      	ldr	r3, [pc, #248]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	b211      	sxth	r1, r2
 80026a4:	4a3f      	ldr	r2, [pc, #252]	; (80027a4 <Rafael_PanTompkins+0x3f4>)
 80026a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 16)
 80026aa:	4b3b      	ldr	r3, [pc, #236]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2b0f      	cmp	r3, #15
 80026b0:	dd16      	ble.n	80026e0 <Rafael_PanTompkins+0x330>
			RF_highpass[current] += 32*RF_lowpass[current-16];
 80026b2:	4b39      	ldr	r3, [pc, #228]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a3b      	ldr	r2, [pc, #236]	; (80027a4 <Rafael_PanTompkins+0x3f4>)
 80026b8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80026bc:	b29a      	uxth	r2, r3
 80026be:	4b36      	ldr	r3, [pc, #216]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	3b10      	subs	r3, #16
 80026c4:	4936      	ldr	r1, [pc, #216]	; (80027a0 <Rafael_PanTompkins+0x3f0>)
 80026c6:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	015b      	lsls	r3, r3, #5
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	4413      	add	r3, r2
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	4b30      	ldr	r3, [pc, #192]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	b211      	sxth	r1, r2
 80026da:	4a32      	ldr	r2, [pc, #200]	; (80027a4 <Rafael_PanTompkins+0x3f4>)
 80026dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 32)
 80026e0:	4b2d      	ldr	r3, [pc, #180]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b1f      	cmp	r3, #31
 80026e6:	dd14      	ble.n	8002712 <Rafael_PanTompkins+0x362>
			RF_highpass[current] += RF_lowpass[current-32];
 80026e8:	4b2b      	ldr	r3, [pc, #172]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a2d      	ldr	r2, [pc, #180]	; (80027a4 <Rafael_PanTompkins+0x3f4>)
 80026ee:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	4b28      	ldr	r3, [pc, #160]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	3b20      	subs	r3, #32
 80026fa:	4929      	ldr	r1, [pc, #164]	; (80027a0 <Rafael_PanTompkins+0x3f0>)
 80026fc:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002700:	b29b      	uxth	r3, r3
 8002702:	4413      	add	r3, r2
 8002704:	b29a      	uxth	r2, r3
 8002706:	4b24      	ldr	r3, [pc, #144]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	b211      	sxth	r1, r2
 800270c:	4a25      	ldr	r2, [pc, #148]	; (80027a4 <Rafael_PanTompkins+0x3f4>)
 800270e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		// Derivative filter
		// This is an alternative implementation, the central difference method.
		// f'(a) = [f(a+h) - f(a-h)]/2h
		// The original formula used by Pan-Tompkins was:
		// y(nT) = (1/8T)[-x(nT - 2T) - 2x(nT - T) + 2x(nT + T) + x(nT + 2T)]
		RF_derivative[current] = RF_highpass[current];
 8002712:	4b21      	ldr	r3, [pc, #132]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	4b20      	ldr	r3, [pc, #128]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4922      	ldr	r1, [pc, #136]	; (80027a4 <Rafael_PanTompkins+0x3f4>)
 800271c:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002720:	4a21      	ldr	r2, [pc, #132]	; (80027a8 <Rafael_PanTompkins+0x3f8>)
 8002722:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current > 0)
 8002726:	4b1c      	ldr	r3, [pc, #112]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	dd14      	ble.n	8002758 <Rafael_PanTompkins+0x3a8>
			RF_derivative[current] -= RF_highpass[current-1];
 800272e:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a1d      	ldr	r2, [pc, #116]	; (80027a8 <Rafael_PanTompkins+0x3f8>)
 8002734:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002738:	b29a      	uxth	r2, r3
 800273a:	4b17      	ldr	r3, [pc, #92]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	3b01      	subs	r3, #1
 8002740:	4918      	ldr	r1, [pc, #96]	; (80027a4 <Rafael_PanTompkins+0x3f4>)
 8002742:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002746:	b29b      	uxth	r3, r3
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	b29a      	uxth	r2, r3
 800274c:	4b12      	ldr	r3, [pc, #72]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	b211      	sxth	r1, r2
 8002752:	4a15      	ldr	r2, [pc, #84]	; (80027a8 <Rafael_PanTompkins+0x3f8>)
 8002754:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		// This just squares the derivative, to get rid of negative values and emphasize high frequencies.
		// y(nT) = [x(nT)]^2.
		RF_squared[current] = RF_derivative[current]*RF_derivative[current];
 8002758:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a12      	ldr	r2, [pc, #72]	; (80027a8 <Rafael_PanTompkins+0x3f8>)
 800275e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002762:	b29a      	uxth	r2, r3
 8002764:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	490f      	ldr	r1, [pc, #60]	; (80027a8 <Rafael_PanTompkins+0x3f8>)
 800276a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800276e:	b29b      	uxth	r3, r3
 8002770:	fb12 f303 	smulbb	r3, r2, r3
 8002774:	b29a      	uxth	r2, r3
 8002776:	4b08      	ldr	r3, [pc, #32]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	b211      	sxth	r1, r2
 800277c:	4a0b      	ldr	r2, [pc, #44]	; (80027ac <Rafael_PanTompkins+0x3fc>)
 800277e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		// Moving-Window Integration
		// Implemented as proposed by the original paper.
		// y(nT) = (1/N)[x(nT - (N - 1)T) + x(nT - (N - 2)T) + ... x(nT)]
		// WINDOWSIZE, in samples, must be defined so that the window is ~150ms.

		RF_integral[current] = 0;
 8002782:	4b05      	ldr	r3, [pc, #20]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a0a      	ldr	r2, [pc, #40]	; (80027b0 <Rafael_PanTompkins+0x400>)
 8002788:	2100      	movs	r1, #0
 800278a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (i = 0; i < WINDOWSIZE; i++)
 800278e:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <Rafael_PanTompkins+0x404>)
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	e035      	b.n	8002802 <Rafael_PanTompkins+0x452>
 8002796:	bf00      	nop
 8002798:	20002b64 	.word	0x20002b64
 800279c:	20000a28 	.word	0x20000a28
 80027a0:	20000ed8 	.word	0x20000ed8
 80027a4:	20001388 	.word	0x20001388
 80027a8:	20001838 	.word	0x20001838
 80027ac:	20001ce8 	.word	0x20001ce8
 80027b0:	20002198 	.word	0x20002198
 80027b4:	20002b4c 	.word	0x20002b4c
		{
			if (current >= (dataType)i)
 80027b8:	4b5e      	ldr	r3, [pc, #376]	; (8002934 <Rafael_PanTompkins+0x584>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	b21b      	sxth	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	4b5d      	ldr	r3, [pc, #372]	; (8002938 <Rafael_PanTompkins+0x588>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	dc21      	bgt.n	800280c <Rafael_PanTompkins+0x45c>
				RF_integral[current] += RF_squared[current - i];
 80027c8:	4b5b      	ldr	r3, [pc, #364]	; (8002938 <Rafael_PanTompkins+0x588>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a5b      	ldr	r2, [pc, #364]	; (800293c <Rafael_PanTompkins+0x58c>)
 80027ce:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	4b58      	ldr	r3, [pc, #352]	; (8002938 <Rafael_PanTompkins+0x588>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4619      	mov	r1, r3
 80027da:	4b56      	ldr	r3, [pc, #344]	; (8002934 <Rafael_PanTompkins+0x584>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	1acb      	subs	r3, r1, r3
 80027e0:	4957      	ldr	r1, [pc, #348]	; (8002940 <Rafael_PanTompkins+0x590>)
 80027e2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	4413      	add	r3, r2
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	4b52      	ldr	r3, [pc, #328]	; (8002938 <Rafael_PanTompkins+0x588>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	b211      	sxth	r1, r2
 80027f2:	4a52      	ldr	r2, [pc, #328]	; (800293c <Rafael_PanTompkins+0x58c>)
 80027f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (i = 0; i < WINDOWSIZE; i++)
 80027f8:	4b4e      	ldr	r3, [pc, #312]	; (8002934 <Rafael_PanTompkins+0x584>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	3301      	adds	r3, #1
 80027fe:	4a4d      	ldr	r2, [pc, #308]	; (8002934 <Rafael_PanTompkins+0x584>)
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	4b4c      	ldr	r3, [pc, #304]	; (8002934 <Rafael_PanTompkins+0x584>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b13      	cmp	r3, #19
 8002808:	d9d6      	bls.n	80027b8 <Rafael_PanTompkins+0x408>
 800280a:	e000      	b.n	800280e <Rafael_PanTompkins+0x45e>
			else
				break;
 800280c:	bf00      	nop
		}
		RF_integral[current] /= (dataType)i;
 800280e:	4b4a      	ldr	r3, [pc, #296]	; (8002938 <Rafael_PanTompkins+0x588>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a4a      	ldr	r2, [pc, #296]	; (800293c <Rafael_PanTompkins+0x58c>)
 8002814:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002818:	461a      	mov	r2, r3
 800281a:	4b46      	ldr	r3, [pc, #280]	; (8002934 <Rafael_PanTompkins+0x584>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	b21b      	sxth	r3, r3
 8002820:	fb92 f2f3 	sdiv	r2, r2, r3
 8002824:	4b44      	ldr	r3, [pc, #272]	; (8002938 <Rafael_PanTompkins+0x588>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	b211      	sxth	r1, r2
 800282a:	4a44      	ldr	r2, [pc, #272]	; (800293c <Rafael_PanTompkins+0x58c>)
 800282c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		qrs = false;
 8002830:	4b44      	ldr	r3, [pc, #272]	; (8002944 <Rafael_PanTompkins+0x594>)
 8002832:	2200      	movs	r2, #0
 8002834:	701a      	strb	r2, [r3, #0]

		// If the current signal is above one of the thresholds (integral or filtered signal), it's a peak candidate.
        if (RF_integral[current] >= threshold_i1 || RF_highpass[current] >= threshold_f1)
 8002836:	4b40      	ldr	r3, [pc, #256]	; (8002938 <Rafael_PanTompkins+0x588>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a40      	ldr	r2, [pc, #256]	; (800293c <Rafael_PanTompkins+0x58c>)
 800283c:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002840:	4b41      	ldr	r3, [pc, #260]	; (8002948 <Rafael_PanTompkins+0x598>)
 8002842:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002846:	429a      	cmp	r2, r3
 8002848:	da09      	bge.n	800285e <Rafael_PanTompkins+0x4ae>
 800284a:	4b3b      	ldr	r3, [pc, #236]	; (8002938 <Rafael_PanTompkins+0x588>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a3f      	ldr	r2, [pc, #252]	; (800294c <Rafael_PanTompkins+0x59c>)
 8002850:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002854:	4b3e      	ldr	r3, [pc, #248]	; (8002950 <Rafael_PanTompkins+0x5a0>)
 8002856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800285a:	429a      	cmp	r2, r3
 800285c:	db0d      	blt.n	800287a <Rafael_PanTompkins+0x4ca>
        {
            peak_i = RF_integral[current];
 800285e:	4b36      	ldr	r3, [pc, #216]	; (8002938 <Rafael_PanTompkins+0x588>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a36      	ldr	r2, [pc, #216]	; (800293c <Rafael_PanTompkins+0x58c>)
 8002864:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002868:	4b3a      	ldr	r3, [pc, #232]	; (8002954 <Rafael_PanTompkins+0x5a4>)
 800286a:	801a      	strh	r2, [r3, #0]
            peak_f = RF_highpass[current];
 800286c:	4b32      	ldr	r3, [pc, #200]	; (8002938 <Rafael_PanTompkins+0x588>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a36      	ldr	r2, [pc, #216]	; (800294c <Rafael_PanTompkins+0x59c>)
 8002872:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002876:	4b38      	ldr	r3, [pc, #224]	; (8002958 <Rafael_PanTompkins+0x5a8>)
 8002878:	801a      	strh	r2, [r3, #0]
        }

		// If both the integral and the signal are above their thresholds, they're probably signal peaks.
		if ((RF_integral[current] >= threshold_i1) && (RF_highpass[current] >= threshold_f1))
 800287a:	4b2f      	ldr	r3, [pc, #188]	; (8002938 <Rafael_PanTompkins+0x588>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a2f      	ldr	r2, [pc, #188]	; (800293c <Rafael_PanTompkins+0x58c>)
 8002880:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002884:	4b30      	ldr	r3, [pc, #192]	; (8002948 <Rafael_PanTompkins+0x598>)
 8002886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800288a:	429a      	cmp	r2, r3
 800288c:	f2c0 837b 	blt.w	8002f86 <Rafael_PanTompkins+0xbd6>
 8002890:	4b29      	ldr	r3, [pc, #164]	; (8002938 <Rafael_PanTompkins+0x588>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a2d      	ldr	r2, [pc, #180]	; (800294c <Rafael_PanTompkins+0x59c>)
 8002896:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800289a:	4b2d      	ldr	r3, [pc, #180]	; (8002950 <Rafael_PanTompkins+0x5a0>)
 800289c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	f2c0 8370 	blt.w	8002f86 <Rafael_PanTompkins+0xbd6>
		{
			// There's a 200ms latency. If the new peak respects this condition, we can keep testing.
			if (sample > lastQRS + FS/5)
 80028a6:	4b2d      	ldr	r3, [pc, #180]	; (800295c <Rafael_PanTompkins+0x5ac>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80028ae:	4b2c      	ldr	r3, [pc, #176]	; (8002960 <Rafael_PanTompkins+0x5b0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	f080 827e 	bcs.w	8002db4 <Rafael_PanTompkins+0xa04>
			{
			    // If it respects the 200ms latency, but it doesn't respect the 360ms latency, we check the slope.
				if (sample <= lastQRS + (long unsigned int)(0.36*FS))
 80028b8:	4b28      	ldr	r3, [pc, #160]	; (800295c <Rafael_PanTompkins+0x5ac>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f103 0281 	add.w	r2, r3, #129	; 0x81
 80028c0:	4b27      	ldr	r3, [pc, #156]	; (8002960 <Rafael_PanTompkins+0x5b0>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	f0c0 812b 	bcc.w	8002b20 <Rafael_PanTompkins+0x770>
				{
				    // The squared slope is "M" shaped. So we have to check nearby samples to make sure we're really looking
				    // at its peak value, rather than a low one.
				    currentSlope = 0;
 80028ca:	4b26      	ldr	r3, [pc, #152]	; (8002964 <Rafael_PanTompkins+0x5b4>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
				    for (j = current - 10; j <= current; j++)
 80028d0:	4b19      	ldr	r3, [pc, #100]	; (8002938 <Rafael_PanTompkins+0x588>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	3b0a      	subs	r3, #10
 80028d6:	461a      	mov	r2, r3
 80028d8:	4b23      	ldr	r3, [pc, #140]	; (8002968 <Rafael_PanTompkins+0x5b8>)
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	e016      	b.n	800290c <Rafael_PanTompkins+0x55c>
                        if (RF_squared[j] > currentSlope)
 80028de:	4b22      	ldr	r3, [pc, #136]	; (8002968 <Rafael_PanTompkins+0x5b8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a17      	ldr	r2, [pc, #92]	; (8002940 <Rafael_PanTompkins+0x590>)
 80028e4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80028e8:	461a      	mov	r2, r3
 80028ea:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <Rafael_PanTompkins+0x5b4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d907      	bls.n	8002902 <Rafael_PanTompkins+0x552>
                            currentSlope = RF_squared[j];
 80028f2:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <Rafael_PanTompkins+0x5b8>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a12      	ldr	r2, [pc, #72]	; (8002940 <Rafael_PanTompkins+0x590>)
 80028f8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80028fc:	461a      	mov	r2, r3
 80028fe:	4b19      	ldr	r3, [pc, #100]	; (8002964 <Rafael_PanTompkins+0x5b4>)
 8002900:	601a      	str	r2, [r3, #0]
				    for (j = current - 10; j <= current; j++)
 8002902:	4b19      	ldr	r3, [pc, #100]	; (8002968 <Rafael_PanTompkins+0x5b8>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	3301      	adds	r3, #1
 8002908:	4a17      	ldr	r2, [pc, #92]	; (8002968 <Rafael_PanTompkins+0x5b8>)
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	4b16      	ldr	r3, [pc, #88]	; (8002968 <Rafael_PanTompkins+0x5b8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a09      	ldr	r2, [pc, #36]	; (8002938 <Rafael_PanTompkins+0x588>)
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	4293      	cmp	r3, r2
 8002916:	d9e2      	bls.n	80028de <Rafael_PanTompkins+0x52e>

				    if (currentSlope <= (dataType)(lastSlope/2))
 8002918:	4b14      	ldr	r3, [pc, #80]	; (800296c <Rafael_PanTompkins+0x5bc>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	085b      	lsrs	r3, r3, #1
 800291e:	b21b      	sxth	r3, r3
 8002920:	461a      	mov	r2, r3
 8002922:	4b10      	ldr	r3, [pc, #64]	; (8002964 <Rafael_PanTompkins+0x5b4>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d322      	bcc.n	8002970 <Rafael_PanTompkins+0x5c0>
                    {
                        qrs = false;
 800292a:	4b06      	ldr	r3, [pc, #24]	; (8002944 <Rafael_PanTompkins+0x594>)
 800292c:	2200      	movs	r2, #0
 800292e:	701a      	strb	r2, [r3, #0]
 8002930:	e329      	b.n	8002f86 <Rafael_PanTompkins+0xbd6>
 8002932:	bf00      	nop
 8002934:	20002b4c 	.word	0x20002b4c
 8002938:	20002b64 	.word	0x20002b64
 800293c:	20002198 	.word	0x20002198
 8002940:	20001ce8 	.word	0x20001ce8
 8002944:	20002b7c 	.word	0x20002b7c
 8002948:	20002b6c 	.word	0x20002b6c
 800294c:	20001388 	.word	0x20001388
 8002950:	20002b70 	.word	0x20002b70
 8002954:	20002b68 	.word	0x20002b68
 8002958:	20002b6a 	.word	0x20002b6a
 800295c:	20002b58 	.word	0x20002b58
 8002960:	20002b54 	.word	0x20002b54
 8002964:	20002b60 	.word	0x20002b60
 8002968:	20002b50 	.word	0x20002b50
 800296c:	20002b5c 	.word	0x20002b5c
                    }

                    else
                    {
                        spk_i = 0.125*peak_i + 0.875*spk_i;
 8002970:	4b70      	ldr	r3, [pc, #448]	; (8002b34 <Rafael_PanTompkins+0x784>)
 8002972:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002976:	4618      	mov	r0, r3
 8002978:	f7fd fdac 	bl	80004d4 <__aeabi_i2d>
 800297c:	f04f 0200 	mov.w	r2, #0
 8002980:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002984:	f7fd fe10 	bl	80005a8 <__aeabi_dmul>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4614      	mov	r4, r2
 800298e:	461d      	mov	r5, r3
 8002990:	4b69      	ldr	r3, [pc, #420]	; (8002b38 <Rafael_PanTompkins+0x788>)
 8002992:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002996:	4618      	mov	r0, r3
 8002998:	f7fd fd9c 	bl	80004d4 <__aeabi_i2d>
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	4b66      	ldr	r3, [pc, #408]	; (8002b3c <Rafael_PanTompkins+0x78c>)
 80029a2:	f7fd fe01 	bl	80005a8 <__aeabi_dmul>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4620      	mov	r0, r4
 80029ac:	4629      	mov	r1, r5
 80029ae:	f7fd fc45 	bl	800023c <__adddf3>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4610      	mov	r0, r2
 80029b8:	4619      	mov	r1, r3
 80029ba:	f7fe f8a5 	bl	8000b08 <__aeabi_d2iz>
 80029be:	4603      	mov	r3, r0
 80029c0:	b21a      	sxth	r2, r3
 80029c2:	4b5d      	ldr	r3, [pc, #372]	; (8002b38 <Rafael_PanTompkins+0x788>)
 80029c4:	801a      	strh	r2, [r3, #0]
                        threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 80029c6:	4b5e      	ldr	r3, [pc, #376]	; (8002b40 <Rafael_PanTompkins+0x790>)
 80029c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fd81 	bl	80004d4 <__aeabi_i2d>
 80029d2:	4604      	mov	r4, r0
 80029d4:	460d      	mov	r5, r1
 80029d6:	4b58      	ldr	r3, [pc, #352]	; (8002b38 <Rafael_PanTompkins+0x788>)
 80029d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029dc:	461a      	mov	r2, r3
 80029de:	4b58      	ldr	r3, [pc, #352]	; (8002b40 <Rafael_PanTompkins+0x790>)
 80029e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fd fd74 	bl	80004d4 <__aeabi_i2d>
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	4b54      	ldr	r3, [pc, #336]	; (8002b44 <Rafael_PanTompkins+0x794>)
 80029f2:	f7fd fdd9 	bl	80005a8 <__aeabi_dmul>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	4620      	mov	r0, r4
 80029fc:	4629      	mov	r1, r5
 80029fe:	f7fd fc1d 	bl	800023c <__adddf3>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4610      	mov	r0, r2
 8002a08:	4619      	mov	r1, r3
 8002a0a:	f7fe f87d 	bl	8000b08 <__aeabi_d2iz>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	b21a      	sxth	r2, r3
 8002a12:	4b4d      	ldr	r3, [pc, #308]	; (8002b48 <Rafael_PanTompkins+0x798>)
 8002a14:	801a      	strh	r2, [r3, #0]
                        threshold_i2 = 0.5*threshold_i1;
 8002a16:	4b4c      	ldr	r3, [pc, #304]	; (8002b48 <Rafael_PanTompkins+0x798>)
 8002a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fd fd59 	bl	80004d4 <__aeabi_i2d>
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	4b49      	ldr	r3, [pc, #292]	; (8002b4c <Rafael_PanTompkins+0x79c>)
 8002a28:	f7fd fdbe 	bl	80005a8 <__aeabi_dmul>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4610      	mov	r0, r2
 8002a32:	4619      	mov	r1, r3
 8002a34:	f7fe f868 	bl	8000b08 <__aeabi_d2iz>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	b21a      	sxth	r2, r3
 8002a3c:	4b44      	ldr	r3, [pc, #272]	; (8002b50 <Rafael_PanTompkins+0x7a0>)
 8002a3e:	801a      	strh	r2, [r3, #0]

                        spk_f = 0.125*peak_f + 0.875*spk_f;
 8002a40:	4b44      	ldr	r3, [pc, #272]	; (8002b54 <Rafael_PanTompkins+0x7a4>)
 8002a42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fd fd44 	bl	80004d4 <__aeabi_i2d>
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002a54:	f7fd fda8 	bl	80005a8 <__aeabi_dmul>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4614      	mov	r4, r2
 8002a5e:	461d      	mov	r5, r3
 8002a60:	4b3d      	ldr	r3, [pc, #244]	; (8002b58 <Rafael_PanTompkins+0x7a8>)
 8002a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fd fd34 	bl	80004d4 <__aeabi_i2d>
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	4b32      	ldr	r3, [pc, #200]	; (8002b3c <Rafael_PanTompkins+0x78c>)
 8002a72:	f7fd fd99 	bl	80005a8 <__aeabi_dmul>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	4629      	mov	r1, r5
 8002a7e:	f7fd fbdd 	bl	800023c <__adddf3>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4610      	mov	r0, r2
 8002a88:	4619      	mov	r1, r3
 8002a8a:	f7fe f83d 	bl	8000b08 <__aeabi_d2iz>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	b21a      	sxth	r2, r3
 8002a92:	4b31      	ldr	r3, [pc, #196]	; (8002b58 <Rafael_PanTompkins+0x7a8>)
 8002a94:	801a      	strh	r2, [r3, #0]
                        threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 8002a96:	4b31      	ldr	r3, [pc, #196]	; (8002b5c <Rafael_PanTompkins+0x7ac>)
 8002a98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fd fd19 	bl	80004d4 <__aeabi_i2d>
 8002aa2:	4604      	mov	r4, r0
 8002aa4:	460d      	mov	r5, r1
 8002aa6:	4b2c      	ldr	r3, [pc, #176]	; (8002b58 <Rafael_PanTompkins+0x7a8>)
 8002aa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aac:	461a      	mov	r2, r3
 8002aae:	4b2b      	ldr	r3, [pc, #172]	; (8002b5c <Rafael_PanTompkins+0x7ac>)
 8002ab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fd fd0c 	bl	80004d4 <__aeabi_i2d>
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	4b20      	ldr	r3, [pc, #128]	; (8002b44 <Rafael_PanTompkins+0x794>)
 8002ac2:	f7fd fd71 	bl	80005a8 <__aeabi_dmul>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4620      	mov	r0, r4
 8002acc:	4629      	mov	r1, r5
 8002ace:	f7fd fbb5 	bl	800023c <__adddf3>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	4619      	mov	r1, r3
 8002ada:	f7fe f815 	bl	8000b08 <__aeabi_d2iz>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	b21a      	sxth	r2, r3
 8002ae2:	4b1f      	ldr	r3, [pc, #124]	; (8002b60 <Rafael_PanTompkins+0x7b0>)
 8002ae4:	801a      	strh	r2, [r3, #0]
                        threshold_f2 = 0.5*threshold_f1;
 8002ae6:	4b1e      	ldr	r3, [pc, #120]	; (8002b60 <Rafael_PanTompkins+0x7b0>)
 8002ae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fd fcf1 	bl	80004d4 <__aeabi_i2d>
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <Rafael_PanTompkins+0x79c>)
 8002af8:	f7fd fd56 	bl	80005a8 <__aeabi_dmul>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4610      	mov	r0, r2
 8002b02:	4619      	mov	r1, r3
 8002b04:	f7fe f800 	bl	8000b08 <__aeabi_d2iz>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	b21a      	sxth	r2, r3
 8002b0c:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <Rafael_PanTompkins+0x7b4>)
 8002b0e:	801a      	strh	r2, [r3, #0]

                        lastSlope = currentSlope;
 8002b10:	4b15      	ldr	r3, [pc, #84]	; (8002b68 <Rafael_PanTompkins+0x7b8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a15      	ldr	r2, [pc, #84]	; (8002b6c <Rafael_PanTompkins+0x7bc>)
 8002b16:	6013      	str	r3, [r2, #0]
                        qrs = true;
 8002b18:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <Rafael_PanTompkins+0x7c0>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	e232      	b.n	8002f86 <Rafael_PanTompkins+0xbd6>
                    }
				}
				// If it was above both thresholds and respects both latency periods, it certainly is a R peak.
				else
				{
				    currentSlope = 0;
 8002b20:	4b11      	ldr	r3, [pc, #68]	; (8002b68 <Rafael_PanTompkins+0x7b8>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
                    for (j = current - 10; j <= current; j++)
 8002b26:	4b13      	ldr	r3, [pc, #76]	; (8002b74 <Rafael_PanTompkins+0x7c4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	3b0a      	subs	r3, #10
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <Rafael_PanTompkins+0x7c8>)
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	e03a      	b.n	8002baa <Rafael_PanTompkins+0x7fa>
 8002b34:	20002b68 	.word	0x20002b68
 8002b38:	20002b74 	.word	0x20002b74
 8002b3c:	3fec0000 	.word	0x3fec0000
 8002b40:	20002b78 	.word	0x20002b78
 8002b44:	3fd00000 	.word	0x3fd00000
 8002b48:	20002b6c 	.word	0x20002b6c
 8002b4c:	3fe00000 	.word	0x3fe00000
 8002b50:	20002b6e 	.word	0x20002b6e
 8002b54:	20002b6a 	.word	0x20002b6a
 8002b58:	20002b76 	.word	0x20002b76
 8002b5c:	20002b7a 	.word	0x20002b7a
 8002b60:	20002b70 	.word	0x20002b70
 8002b64:	20002b72 	.word	0x20002b72
 8002b68:	20002b60 	.word	0x20002b60
 8002b6c:	20002b5c 	.word	0x20002b5c
 8002b70:	20002b7c 	.word	0x20002b7c
 8002b74:	20002b64 	.word	0x20002b64
 8002b78:	20002b50 	.word	0x20002b50
                        if (RF_squared[j] > currentSlope)
 8002b7c:	4b7a      	ldr	r3, [pc, #488]	; (8002d68 <Rafael_PanTompkins+0x9b8>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a7a      	ldr	r2, [pc, #488]	; (8002d6c <Rafael_PanTompkins+0x9bc>)
 8002b82:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002b86:	461a      	mov	r2, r3
 8002b88:	4b79      	ldr	r3, [pc, #484]	; (8002d70 <Rafael_PanTompkins+0x9c0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d907      	bls.n	8002ba0 <Rafael_PanTompkins+0x7f0>
                            currentSlope = RF_squared[j];
 8002b90:	4b75      	ldr	r3, [pc, #468]	; (8002d68 <Rafael_PanTompkins+0x9b8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a75      	ldr	r2, [pc, #468]	; (8002d6c <Rafael_PanTompkins+0x9bc>)
 8002b96:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	4b74      	ldr	r3, [pc, #464]	; (8002d70 <Rafael_PanTompkins+0x9c0>)
 8002b9e:	601a      	str	r2, [r3, #0]
                    for (j = current - 10; j <= current; j++)
 8002ba0:	4b71      	ldr	r3, [pc, #452]	; (8002d68 <Rafael_PanTompkins+0x9b8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	4a70      	ldr	r2, [pc, #448]	; (8002d68 <Rafael_PanTompkins+0x9b8>)
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	4b6f      	ldr	r3, [pc, #444]	; (8002d68 <Rafael_PanTompkins+0x9b8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a71      	ldr	r2, [pc, #452]	; (8002d74 <Rafael_PanTompkins+0x9c4>)
 8002bb0:	6812      	ldr	r2, [r2, #0]
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d9e2      	bls.n	8002b7c <Rafael_PanTompkins+0x7cc>

                    spk_i = 0.125*peak_i + 0.875*spk_i;
 8002bb6:	4b70      	ldr	r3, [pc, #448]	; (8002d78 <Rafael_PanTompkins+0x9c8>)
 8002bb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fd fc89 	bl	80004d4 <__aeabi_i2d>
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002bca:	f7fd fced 	bl	80005a8 <__aeabi_dmul>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	4614      	mov	r4, r2
 8002bd4:	461d      	mov	r5, r3
 8002bd6:	4b69      	ldr	r3, [pc, #420]	; (8002d7c <Rafael_PanTompkins+0x9cc>)
 8002bd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7fd fc79 	bl	80004d4 <__aeabi_i2d>
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	4b66      	ldr	r3, [pc, #408]	; (8002d80 <Rafael_PanTompkins+0x9d0>)
 8002be8:	f7fd fcde 	bl	80005a8 <__aeabi_dmul>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	4629      	mov	r1, r5
 8002bf4:	f7fd fb22 	bl	800023c <__adddf3>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	4619      	mov	r1, r3
 8002c00:	f7fd ff82 	bl	8000b08 <__aeabi_d2iz>
 8002c04:	4603      	mov	r3, r0
 8002c06:	b21a      	sxth	r2, r3
 8002c08:	4b5c      	ldr	r3, [pc, #368]	; (8002d7c <Rafael_PanTompkins+0x9cc>)
 8002c0a:	801a      	strh	r2, [r3, #0]
                    threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8002c0c:	4b5d      	ldr	r3, [pc, #372]	; (8002d84 <Rafael_PanTompkins+0x9d4>)
 8002c0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fd fc5e 	bl	80004d4 <__aeabi_i2d>
 8002c18:	4604      	mov	r4, r0
 8002c1a:	460d      	mov	r5, r1
 8002c1c:	4b57      	ldr	r3, [pc, #348]	; (8002d7c <Rafael_PanTompkins+0x9cc>)
 8002c1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c22:	461a      	mov	r2, r3
 8002c24:	4b57      	ldr	r3, [pc, #348]	; (8002d84 <Rafael_PanTompkins+0x9d4>)
 8002c26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fd fc51 	bl	80004d4 <__aeabi_i2d>
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	4b54      	ldr	r3, [pc, #336]	; (8002d88 <Rafael_PanTompkins+0x9d8>)
 8002c38:	f7fd fcb6 	bl	80005a8 <__aeabi_dmul>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4620      	mov	r0, r4
 8002c42:	4629      	mov	r1, r5
 8002c44:	f7fd fafa 	bl	800023c <__adddf3>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4610      	mov	r0, r2
 8002c4e:	4619      	mov	r1, r3
 8002c50:	f7fd ff5a 	bl	8000b08 <__aeabi_d2iz>
 8002c54:	4603      	mov	r3, r0
 8002c56:	b21a      	sxth	r2, r3
 8002c58:	4b4c      	ldr	r3, [pc, #304]	; (8002d8c <Rafael_PanTompkins+0x9dc>)
 8002c5a:	801a      	strh	r2, [r3, #0]
                    threshold_i2 = 0.5*threshold_i1;
 8002c5c:	4b4b      	ldr	r3, [pc, #300]	; (8002d8c <Rafael_PanTompkins+0x9dc>)
 8002c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fd fc36 	bl	80004d4 <__aeabi_i2d>
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	4b48      	ldr	r3, [pc, #288]	; (8002d90 <Rafael_PanTompkins+0x9e0>)
 8002c6e:	f7fd fc9b 	bl	80005a8 <__aeabi_dmul>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4610      	mov	r0, r2
 8002c78:	4619      	mov	r1, r3
 8002c7a:	f7fd ff45 	bl	8000b08 <__aeabi_d2iz>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	b21a      	sxth	r2, r3
 8002c82:	4b44      	ldr	r3, [pc, #272]	; (8002d94 <Rafael_PanTompkins+0x9e4>)
 8002c84:	801a      	strh	r2, [r3, #0]

                    spk_f = 0.125*peak_f + 0.875*spk_f;
 8002c86:	4b44      	ldr	r3, [pc, #272]	; (8002d98 <Rafael_PanTompkins+0x9e8>)
 8002c88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fd fc21 	bl	80004d4 <__aeabi_i2d>
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002c9a:	f7fd fc85 	bl	80005a8 <__aeabi_dmul>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4614      	mov	r4, r2
 8002ca4:	461d      	mov	r5, r3
 8002ca6:	4b3d      	ldr	r3, [pc, #244]	; (8002d9c <Rafael_PanTompkins+0x9ec>)
 8002ca8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fd fc11 	bl	80004d4 <__aeabi_i2d>
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	4b32      	ldr	r3, [pc, #200]	; (8002d80 <Rafael_PanTompkins+0x9d0>)
 8002cb8:	f7fd fc76 	bl	80005a8 <__aeabi_dmul>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4620      	mov	r0, r4
 8002cc2:	4629      	mov	r1, r5
 8002cc4:	f7fd faba 	bl	800023c <__adddf3>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4610      	mov	r0, r2
 8002cce:	4619      	mov	r1, r3
 8002cd0:	f7fd ff1a 	bl	8000b08 <__aeabi_d2iz>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	b21a      	sxth	r2, r3
 8002cd8:	4b30      	ldr	r3, [pc, #192]	; (8002d9c <Rafael_PanTompkins+0x9ec>)
 8002cda:	801a      	strh	r2, [r3, #0]
                    threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 8002cdc:	4b30      	ldr	r3, [pc, #192]	; (8002da0 <Rafael_PanTompkins+0x9f0>)
 8002cde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fd fbf6 	bl	80004d4 <__aeabi_i2d>
 8002ce8:	4604      	mov	r4, r0
 8002cea:	460d      	mov	r5, r1
 8002cec:	4b2b      	ldr	r3, [pc, #172]	; (8002d9c <Rafael_PanTompkins+0x9ec>)
 8002cee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	4b2a      	ldr	r3, [pc, #168]	; (8002da0 <Rafael_PanTompkins+0x9f0>)
 8002cf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fd fbe9 	bl	80004d4 <__aeabi_i2d>
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	4b20      	ldr	r3, [pc, #128]	; (8002d88 <Rafael_PanTompkins+0x9d8>)
 8002d08:	f7fd fc4e 	bl	80005a8 <__aeabi_dmul>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	4620      	mov	r0, r4
 8002d12:	4629      	mov	r1, r5
 8002d14:	f7fd fa92 	bl	800023c <__adddf3>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	4619      	mov	r1, r3
 8002d20:	f7fd fef2 	bl	8000b08 <__aeabi_d2iz>
 8002d24:	4603      	mov	r3, r0
 8002d26:	b21a      	sxth	r2, r3
 8002d28:	4b1e      	ldr	r3, [pc, #120]	; (8002da4 <Rafael_PanTompkins+0x9f4>)
 8002d2a:	801a      	strh	r2, [r3, #0]
                    threshold_f2 = 0.5*threshold_f1;
 8002d2c:	4b1d      	ldr	r3, [pc, #116]	; (8002da4 <Rafael_PanTompkins+0x9f4>)
 8002d2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fd fbce 	bl	80004d4 <__aeabi_i2d>
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	4b14      	ldr	r3, [pc, #80]	; (8002d90 <Rafael_PanTompkins+0x9e0>)
 8002d3e:	f7fd fc33 	bl	80005a8 <__aeabi_dmul>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4610      	mov	r0, r2
 8002d48:	4619      	mov	r1, r3
 8002d4a:	f7fd fedd 	bl	8000b08 <__aeabi_d2iz>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	b21a      	sxth	r2, r3
 8002d52:	4b15      	ldr	r3, [pc, #84]	; (8002da8 <Rafael_PanTompkins+0x9f8>)
 8002d54:	801a      	strh	r2, [r3, #0]

                    lastSlope = currentSlope;
 8002d56:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <Rafael_PanTompkins+0x9c0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a14      	ldr	r2, [pc, #80]	; (8002dac <Rafael_PanTompkins+0x9fc>)
 8002d5c:	6013      	str	r3, [r2, #0]
                    qrs = true;
 8002d5e:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <Rafael_PanTompkins+0xa00>)
 8002d60:	2201      	movs	r2, #1
 8002d62:	701a      	strb	r2, [r3, #0]
 8002d64:	e10f      	b.n	8002f86 <Rafael_PanTompkins+0xbd6>
 8002d66:	bf00      	nop
 8002d68:	20002b50 	.word	0x20002b50
 8002d6c:	20001ce8 	.word	0x20001ce8
 8002d70:	20002b60 	.word	0x20002b60
 8002d74:	20002b64 	.word	0x20002b64
 8002d78:	20002b68 	.word	0x20002b68
 8002d7c:	20002b74 	.word	0x20002b74
 8002d80:	3fec0000 	.word	0x3fec0000
 8002d84:	20002b78 	.word	0x20002b78
 8002d88:	3fd00000 	.word	0x3fd00000
 8002d8c:	20002b6c 	.word	0x20002b6c
 8002d90:	3fe00000 	.word	0x3fe00000
 8002d94:	20002b6e 	.word	0x20002b6e
 8002d98:	20002b6a 	.word	0x20002b6a
 8002d9c:	20002b76 	.word	0x20002b76
 8002da0:	20002b7a 	.word	0x20002b7a
 8002da4:	20002b70 	.word	0x20002b70
 8002da8:	20002b72 	.word	0x20002b72
 8002dac:	20002b5c 	.word	0x20002b5c
 8002db0:	20002b7c 	.word	0x20002b7c
				}
			}
			// If the new peak doesn't respect the 200ms latency, it's noise. Update thresholds and move on to the next sample.
			else
            {
                peak_i = RF_integral[current];
 8002db4:	4ba7      	ldr	r3, [pc, #668]	; (8003054 <Rafael_PanTompkins+0xca4>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4aa7      	ldr	r2, [pc, #668]	; (8003058 <Rafael_PanTompkins+0xca8>)
 8002dba:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002dbe:	4ba7      	ldr	r3, [pc, #668]	; (800305c <Rafael_PanTompkins+0xcac>)
 8002dc0:	801a      	strh	r2, [r3, #0]
				npk_i = 0.125*peak_i + 0.875*npk_i;
 8002dc2:	4ba6      	ldr	r3, [pc, #664]	; (800305c <Rafael_PanTompkins+0xcac>)
 8002dc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fd fb83 	bl	80004d4 <__aeabi_i2d>
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002dd6:	f7fd fbe7 	bl	80005a8 <__aeabi_dmul>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4614      	mov	r4, r2
 8002de0:	461d      	mov	r5, r3
 8002de2:	4b9f      	ldr	r3, [pc, #636]	; (8003060 <Rafael_PanTompkins+0xcb0>)
 8002de4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fd fb73 	bl	80004d4 <__aeabi_i2d>
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	4b9c      	ldr	r3, [pc, #624]	; (8003064 <Rafael_PanTompkins+0xcb4>)
 8002df4:	f7fd fbd8 	bl	80005a8 <__aeabi_dmul>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4620      	mov	r0, r4
 8002dfe:	4629      	mov	r1, r5
 8002e00:	f7fd fa1c 	bl	800023c <__adddf3>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4610      	mov	r0, r2
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	f7fd fe7c 	bl	8000b08 <__aeabi_d2iz>
 8002e10:	4603      	mov	r3, r0
 8002e12:	b21a      	sxth	r2, r3
 8002e14:	4b92      	ldr	r3, [pc, #584]	; (8003060 <Rafael_PanTompkins+0xcb0>)
 8002e16:	801a      	strh	r2, [r3, #0]
				threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8002e18:	4b91      	ldr	r3, [pc, #580]	; (8003060 <Rafael_PanTompkins+0xcb0>)
 8002e1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fd fb58 	bl	80004d4 <__aeabi_i2d>
 8002e24:	4604      	mov	r4, r0
 8002e26:	460d      	mov	r5, r1
 8002e28:	4b8f      	ldr	r3, [pc, #572]	; (8003068 <Rafael_PanTompkins+0xcb8>)
 8002e2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	4b8b      	ldr	r3, [pc, #556]	; (8003060 <Rafael_PanTompkins+0xcb0>)
 8002e32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fd fb4b 	bl	80004d4 <__aeabi_i2d>
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	4b8a      	ldr	r3, [pc, #552]	; (800306c <Rafael_PanTompkins+0xcbc>)
 8002e44:	f7fd fbb0 	bl	80005a8 <__aeabi_dmul>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	4629      	mov	r1, r5
 8002e50:	f7fd f9f4 	bl	800023c <__adddf3>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	4610      	mov	r0, r2
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	f7fd fe54 	bl	8000b08 <__aeabi_d2iz>
 8002e60:	4603      	mov	r3, r0
 8002e62:	b21a      	sxth	r2, r3
 8002e64:	4b82      	ldr	r3, [pc, #520]	; (8003070 <Rafael_PanTompkins+0xcc0>)
 8002e66:	801a      	strh	r2, [r3, #0]
				threshold_i2 = 0.5*threshold_i1;
 8002e68:	4b81      	ldr	r3, [pc, #516]	; (8003070 <Rafael_PanTompkins+0xcc0>)
 8002e6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fd fb30 	bl	80004d4 <__aeabi_i2d>
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	4b7e      	ldr	r3, [pc, #504]	; (8003074 <Rafael_PanTompkins+0xcc4>)
 8002e7a:	f7fd fb95 	bl	80005a8 <__aeabi_dmul>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	4610      	mov	r0, r2
 8002e84:	4619      	mov	r1, r3
 8002e86:	f7fd fe3f 	bl	8000b08 <__aeabi_d2iz>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	b21a      	sxth	r2, r3
 8002e8e:	4b7a      	ldr	r3, [pc, #488]	; (8003078 <Rafael_PanTompkins+0xcc8>)
 8002e90:	801a      	strh	r2, [r3, #0]
				peak_f = RF_highpass[current];
 8002e92:	4b70      	ldr	r3, [pc, #448]	; (8003054 <Rafael_PanTompkins+0xca4>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a79      	ldr	r2, [pc, #484]	; (800307c <Rafael_PanTompkins+0xccc>)
 8002e98:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002e9c:	4b78      	ldr	r3, [pc, #480]	; (8003080 <Rafael_PanTompkins+0xcd0>)
 8002e9e:	801a      	strh	r2, [r3, #0]
				npk_f = 0.125*peak_f + 0.875*npk_f;
 8002ea0:	4b77      	ldr	r3, [pc, #476]	; (8003080 <Rafael_PanTompkins+0xcd0>)
 8002ea2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fd fb14 	bl	80004d4 <__aeabi_i2d>
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002eb4:	f7fd fb78 	bl	80005a8 <__aeabi_dmul>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4614      	mov	r4, r2
 8002ebe:	461d      	mov	r5, r3
 8002ec0:	4b70      	ldr	r3, [pc, #448]	; (8003084 <Rafael_PanTompkins+0xcd4>)
 8002ec2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fd fb04 	bl	80004d4 <__aeabi_i2d>
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	4b64      	ldr	r3, [pc, #400]	; (8003064 <Rafael_PanTompkins+0xcb4>)
 8002ed2:	f7fd fb69 	bl	80005a8 <__aeabi_dmul>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4620      	mov	r0, r4
 8002edc:	4629      	mov	r1, r5
 8002ede:	f7fd f9ad 	bl	800023c <__adddf3>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	4610      	mov	r0, r2
 8002ee8:	4619      	mov	r1, r3
 8002eea:	f7fd fe0d 	bl	8000b08 <__aeabi_d2iz>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	b21a      	sxth	r2, r3
 8002ef2:	4b64      	ldr	r3, [pc, #400]	; (8003084 <Rafael_PanTompkins+0xcd4>)
 8002ef4:	801a      	strh	r2, [r3, #0]
				threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 8002ef6:	4b63      	ldr	r3, [pc, #396]	; (8003084 <Rafael_PanTompkins+0xcd4>)
 8002ef8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fd fae9 	bl	80004d4 <__aeabi_i2d>
 8002f02:	4604      	mov	r4, r0
 8002f04:	460d      	mov	r5, r1
 8002f06:	4b60      	ldr	r3, [pc, #384]	; (8003088 <Rafael_PanTompkins+0xcd8>)
 8002f08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	4b5d      	ldr	r3, [pc, #372]	; (8003084 <Rafael_PanTompkins+0xcd4>)
 8002f10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fd fadc 	bl	80004d4 <__aeabi_i2d>
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	4b52      	ldr	r3, [pc, #328]	; (800306c <Rafael_PanTompkins+0xcbc>)
 8002f22:	f7fd fb41 	bl	80005a8 <__aeabi_dmul>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	4629      	mov	r1, r5
 8002f2e:	f7fd f985 	bl	800023c <__adddf3>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4610      	mov	r0, r2
 8002f38:	4619      	mov	r1, r3
 8002f3a:	f7fd fde5 	bl	8000b08 <__aeabi_d2iz>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	b21a      	sxth	r2, r3
 8002f42:	4b52      	ldr	r3, [pc, #328]	; (800308c <Rafael_PanTompkins+0xcdc>)
 8002f44:	801a      	strh	r2, [r3, #0]
                threshold_f2 = 0.5*threshold_f1;
 8002f46:	4b51      	ldr	r3, [pc, #324]	; (800308c <Rafael_PanTompkins+0xcdc>)
 8002f48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fd fac1 	bl	80004d4 <__aeabi_i2d>
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	4b47      	ldr	r3, [pc, #284]	; (8003074 <Rafael_PanTompkins+0xcc4>)
 8002f58:	f7fd fb26 	bl	80005a8 <__aeabi_dmul>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4610      	mov	r0, r2
 8002f62:	4619      	mov	r1, r3
 8002f64:	f7fd fdd0 	bl	8000b08 <__aeabi_d2iz>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	b21a      	sxth	r2, r3
 8002f6c:	4b48      	ldr	r3, [pc, #288]	; (8003090 <Rafael_PanTompkins+0xce0>)
 8002f6e:	801a      	strh	r2, [r3, #0]
                qrs = false;
 8002f70:	4b48      	ldr	r3, [pc, #288]	; (8003094 <Rafael_PanTompkins+0xce4>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	701a      	strb	r2, [r3, #0]
                RF_outputSignal[current] = qrs;
 8002f76:	4b47      	ldr	r3, [pc, #284]	; (8003094 <Rafael_PanTompkins+0xce4>)
 8002f78:	781a      	ldrb	r2, [r3, #0]
 8002f7a:	4b36      	ldr	r3, [pc, #216]	; (8003054 <Rafael_PanTompkins+0xca4>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	b211      	sxth	r1, r2
 8002f80:	4a45      	ldr	r2, [pc, #276]	; (8003098 <Rafael_PanTompkins+0xce8>)
 8002f82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }

		}

		// If a R-peak was detected, the RR-averages must be updated.
		if (qrs)
 8002f86:	4b43      	ldr	r3, [pc, #268]	; (8003094 <Rafael_PanTompkins+0xce4>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 8137 	beq.w	80031fe <Rafael_PanTompkins+0xe4e>
		{
			// Add the newest RR-interval to the buffer and get the new average.
			rravg1 = 0;
 8002f90:	4b42      	ldr	r3, [pc, #264]	; (800309c <Rafael_PanTompkins+0xcec>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
			for (i = 0; i < 7; i++)
 8002f96:	4b42      	ldr	r3, [pc, #264]	; (80030a0 <Rafael_PanTompkins+0xcf0>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	e019      	b.n	8002fd2 <Rafael_PanTompkins+0xc22>
			{
				rr1[i] = rr1[i+1];
 8002f9e:	4b40      	ldr	r3, [pc, #256]	; (80030a0 <Rafael_PanTompkins+0xcf0>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	4b3e      	ldr	r3, [pc, #248]	; (80030a0 <Rafael_PanTompkins+0xcf0>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	493e      	ldr	r1, [pc, #248]	; (80030a4 <Rafael_PanTompkins+0xcf4>)
 8002faa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002fae:	493d      	ldr	r1, [pc, #244]	; (80030a4 <Rafael_PanTompkins+0xcf4>)
 8002fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				rravg1 += rr1[i];
 8002fb4:	4b3a      	ldr	r3, [pc, #232]	; (80030a0 <Rafael_PanTompkins+0xcf0>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a3a      	ldr	r2, [pc, #232]	; (80030a4 <Rafael_PanTompkins+0xcf4>)
 8002fba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002fbe:	4b37      	ldr	r3, [pc, #220]	; (800309c <Rafael_PanTompkins+0xcec>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	4a35      	ldr	r2, [pc, #212]	; (800309c <Rafael_PanTompkins+0xcec>)
 8002fc6:	6013      	str	r3, [r2, #0]
			for (i = 0; i < 7; i++)
 8002fc8:	4b35      	ldr	r3, [pc, #212]	; (80030a0 <Rafael_PanTompkins+0xcf0>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	4a34      	ldr	r2, [pc, #208]	; (80030a0 <Rafael_PanTompkins+0xcf0>)
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	4b33      	ldr	r3, [pc, #204]	; (80030a0 <Rafael_PanTompkins+0xcf0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2b06      	cmp	r3, #6
 8002fd8:	d9e1      	bls.n	8002f9e <Rafael_PanTompkins+0xbee>
			}
			rr1[7] = sample - lastQRS;
 8002fda:	4b33      	ldr	r3, [pc, #204]	; (80030a8 <Rafael_PanTompkins+0xcf8>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	4b33      	ldr	r3, [pc, #204]	; (80030ac <Rafael_PanTompkins+0xcfc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4b2f      	ldr	r3, [pc, #188]	; (80030a4 <Rafael_PanTompkins+0xcf4>)
 8002fe8:	61da      	str	r2, [r3, #28]
			lastQRS = sample;
 8002fea:	4b2f      	ldr	r3, [pc, #188]	; (80030a8 <Rafael_PanTompkins+0xcf8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a2f      	ldr	r2, [pc, #188]	; (80030ac <Rafael_PanTompkins+0xcfc>)
 8002ff0:	6013      	str	r3, [r2, #0]
			rravg1 += rr1[7];
 8002ff2:	4b2c      	ldr	r3, [pc, #176]	; (80030a4 <Rafael_PanTompkins+0xcf4>)
 8002ff4:	69da      	ldr	r2, [r3, #28]
 8002ff6:	4b29      	ldr	r3, [pc, #164]	; (800309c <Rafael_PanTompkins+0xcec>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	4a27      	ldr	r2, [pc, #156]	; (800309c <Rafael_PanTompkins+0xcec>)
 8002ffe:	6013      	str	r3, [r2, #0]
			rravg1 *= 0.125;
 8003000:	4b26      	ldr	r3, [pc, #152]	; (800309c <Rafael_PanTompkins+0xcec>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f7fd fa65 	bl	80004d4 <__aeabi_i2d>
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003012:	f7fd fac9 	bl	80005a8 <__aeabi_dmul>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	4610      	mov	r0, r2
 800301c:	4619      	mov	r1, r3
 800301e:	f7fd fd73 	bl	8000b08 <__aeabi_d2iz>
 8003022:	4603      	mov	r3, r0
 8003024:	4a1d      	ldr	r2, [pc, #116]	; (800309c <Rafael_PanTompkins+0xcec>)
 8003026:	6013      	str	r3, [r2, #0]

			// If the newly-discovered RR-average is normal, add it to the "normal" buffer and get the new "normal" average.
			// Update the "normal" beat parameters.
			if ( (rr1[7] >= rrlow) && (rr1[7] <= rrhigh) )
 8003028:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <Rafael_PanTompkins+0xcf4>)
 800302a:	69da      	ldr	r2, [r3, #28]
 800302c:	4b20      	ldr	r3, [pc, #128]	; (80030b0 <Rafael_PanTompkins+0xd00>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	429a      	cmp	r2, r3
 8003032:	f2c0 80b9 	blt.w	80031a8 <Rafael_PanTompkins+0xdf8>
 8003036:	4b1b      	ldr	r3, [pc, #108]	; (80030a4 <Rafael_PanTompkins+0xcf4>)
 8003038:	69da      	ldr	r2, [r3, #28]
 800303a:	4b1e      	ldr	r3, [pc, #120]	; (80030b4 <Rafael_PanTompkins+0xd04>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	f300 80b2 	bgt.w	80031a8 <Rafael_PanTompkins+0xdf8>
			{
				rravg2 = 0;
 8003044:	4b1c      	ldr	r3, [pc, #112]	; (80030b8 <Rafael_PanTompkins+0xd08>)
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
				for (i = 0; i < 7; i++)
 800304a:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <Rafael_PanTompkins+0xcf0>)
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	e04e      	b.n	80030f0 <Rafael_PanTompkins+0xd40>
 8003052:	bf00      	nop
 8003054:	20002b64 	.word	0x20002b64
 8003058:	20002198 	.word	0x20002198
 800305c:	20002b68 	.word	0x20002b68
 8003060:	20002b78 	.word	0x20002b78
 8003064:	3fec0000 	.word	0x3fec0000
 8003068:	20002b74 	.word	0x20002b74
 800306c:	3fd00000 	.word	0x3fd00000
 8003070:	20002b6c 	.word	0x20002b6c
 8003074:	3fe00000 	.word	0x3fe00000
 8003078:	20002b6e 	.word	0x20002b6e
 800307c:	20001388 	.word	0x20001388
 8003080:	20002b6a 	.word	0x20002b6a
 8003084:	20002b7a 	.word	0x20002b7a
 8003088:	20002b76 	.word	0x20002b76
 800308c:	20002b70 	.word	0x20002b70
 8003090:	20002b72 	.word	0x20002b72
 8003094:	20002b7c 	.word	0x20002b7c
 8003098:	20002648 	.word	0x20002648
 800309c:	20002b38 	.word	0x20002b38
 80030a0:	20002b4c 	.word	0x20002b4c
 80030a4:	20002af8 	.word	0x20002af8
 80030a8:	20002b54 	.word	0x20002b54
 80030ac:	20002b58 	.word	0x20002b58
 80030b0:	20002b40 	.word	0x20002b40
 80030b4:	20002b44 	.word	0x20002b44
 80030b8:	20002b3c 	.word	0x20002b3c
				{
					rr2[i] = rr2[i+1];
 80030bc:	4ba2      	ldr	r3, [pc, #648]	; (8003348 <Rafael_PanTompkins+0xf98>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	4ba1      	ldr	r3, [pc, #644]	; (8003348 <Rafael_PanTompkins+0xf98>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	49a1      	ldr	r1, [pc, #644]	; (800334c <Rafael_PanTompkins+0xf9c>)
 80030c8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80030cc:	499f      	ldr	r1, [pc, #636]	; (800334c <Rafael_PanTompkins+0xf9c>)
 80030ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					rravg2 += rr2[i];
 80030d2:	4b9d      	ldr	r3, [pc, #628]	; (8003348 <Rafael_PanTompkins+0xf98>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a9d      	ldr	r2, [pc, #628]	; (800334c <Rafael_PanTompkins+0xf9c>)
 80030d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80030dc:	4b9c      	ldr	r3, [pc, #624]	; (8003350 <Rafael_PanTompkins+0xfa0>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4413      	add	r3, r2
 80030e2:	4a9b      	ldr	r2, [pc, #620]	; (8003350 <Rafael_PanTompkins+0xfa0>)
 80030e4:	6013      	str	r3, [r2, #0]
				for (i = 0; i < 7; i++)
 80030e6:	4b98      	ldr	r3, [pc, #608]	; (8003348 <Rafael_PanTompkins+0xf98>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	3301      	adds	r3, #1
 80030ec:	4a96      	ldr	r2, [pc, #600]	; (8003348 <Rafael_PanTompkins+0xf98>)
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	4b95      	ldr	r3, [pc, #596]	; (8003348 <Rafael_PanTompkins+0xf98>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2b06      	cmp	r3, #6
 80030f6:	d9e1      	bls.n	80030bc <Rafael_PanTompkins+0xd0c>
				}
				rr2[7] = rr1[7];
 80030f8:	4b96      	ldr	r3, [pc, #600]	; (8003354 <Rafael_PanTompkins+0xfa4>)
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	4a93      	ldr	r2, [pc, #588]	; (800334c <Rafael_PanTompkins+0xf9c>)
 80030fe:	61d3      	str	r3, [r2, #28]
				rravg2 += rr2[7];
 8003100:	4b92      	ldr	r3, [pc, #584]	; (800334c <Rafael_PanTompkins+0xf9c>)
 8003102:	69da      	ldr	r2, [r3, #28]
 8003104:	4b92      	ldr	r3, [pc, #584]	; (8003350 <Rafael_PanTompkins+0xfa0>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4413      	add	r3, r2
 800310a:	4a91      	ldr	r2, [pc, #580]	; (8003350 <Rafael_PanTompkins+0xfa0>)
 800310c:	6013      	str	r3, [r2, #0]
				rravg2 *= 0.125;
 800310e:	4b90      	ldr	r3, [pc, #576]	; (8003350 <Rafael_PanTompkins+0xfa0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7fd f9de 	bl	80004d4 <__aeabi_i2d>
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003120:	f7fd fa42 	bl	80005a8 <__aeabi_dmul>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4610      	mov	r0, r2
 800312a:	4619      	mov	r1, r3
 800312c:	f7fd fcec 	bl	8000b08 <__aeabi_d2iz>
 8003130:	4603      	mov	r3, r0
 8003132:	4a87      	ldr	r2, [pc, #540]	; (8003350 <Rafael_PanTompkins+0xfa0>)
 8003134:	6013      	str	r3, [r2, #0]
				rrlow = 0.92*rravg2;
 8003136:	4b86      	ldr	r3, [pc, #536]	; (8003350 <Rafael_PanTompkins+0xfa0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f7fd f9ca 	bl	80004d4 <__aeabi_i2d>
 8003140:	a379      	add	r3, pc, #484	; (adr r3, 8003328 <Rafael_PanTompkins+0xf78>)
 8003142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003146:	f7fd fa2f 	bl	80005a8 <__aeabi_dmul>
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4610      	mov	r0, r2
 8003150:	4619      	mov	r1, r3
 8003152:	f7fd fcd9 	bl	8000b08 <__aeabi_d2iz>
 8003156:	4603      	mov	r3, r0
 8003158:	4a7f      	ldr	r2, [pc, #508]	; (8003358 <Rafael_PanTompkins+0xfa8>)
 800315a:	6013      	str	r3, [r2, #0]
				rrhigh = 1.16*rravg2;
 800315c:	4b7c      	ldr	r3, [pc, #496]	; (8003350 <Rafael_PanTompkins+0xfa0>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f7fd f9b7 	bl	80004d4 <__aeabi_i2d>
 8003166:	a372      	add	r3, pc, #456	; (adr r3, 8003330 <Rafael_PanTompkins+0xf80>)
 8003168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316c:	f7fd fa1c 	bl	80005a8 <__aeabi_dmul>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4610      	mov	r0, r2
 8003176:	4619      	mov	r1, r3
 8003178:	f7fd fcc6 	bl	8000b08 <__aeabi_d2iz>
 800317c:	4603      	mov	r3, r0
 800317e:	4a77      	ldr	r2, [pc, #476]	; (800335c <Rafael_PanTompkins+0xfac>)
 8003180:	6013      	str	r3, [r2, #0]
				rrmiss = 1.66*rravg2;
 8003182:	4b73      	ldr	r3, [pc, #460]	; (8003350 <Rafael_PanTompkins+0xfa0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f7fd f9a4 	bl	80004d4 <__aeabi_i2d>
 800318c:	a36a      	add	r3, pc, #424	; (adr r3, 8003338 <Rafael_PanTompkins+0xf88>)
 800318e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003192:	f7fd fa09 	bl	80005a8 <__aeabi_dmul>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4610      	mov	r0, r2
 800319c:	4619      	mov	r1, r3
 800319e:	f7fd fcb3 	bl	8000b08 <__aeabi_d2iz>
 80031a2:	4603      	mov	r3, r0
 80031a4:	4a6e      	ldr	r2, [pc, #440]	; (8003360 <Rafael_PanTompkins+0xfb0>)
 80031a6:	6013      	str	r3, [r2, #0]
			}

			prevRegular = regular;
 80031a8:	4b6e      	ldr	r3, [pc, #440]	; (8003364 <Rafael_PanTompkins+0xfb4>)
 80031aa:	781a      	ldrb	r2, [r3, #0]
 80031ac:	4b6e      	ldr	r3, [pc, #440]	; (8003368 <Rafael_PanTompkins+0xfb8>)
 80031ae:	701a      	strb	r2, [r3, #0]
			if (rravg1 == rravg2)
 80031b0:	4b6e      	ldr	r3, [pc, #440]	; (800336c <Rafael_PanTompkins+0xfbc>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	4b66      	ldr	r3, [pc, #408]	; (8003350 <Rafael_PanTompkins+0xfa0>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d104      	bne.n	80031c6 <Rafael_PanTompkins+0xe16>
			{
				regular = true;
 80031bc:	4b69      	ldr	r3, [pc, #420]	; (8003364 <Rafael_PanTompkins+0xfb4>)
 80031be:	2201      	movs	r2, #1
 80031c0:	701a      	strb	r2, [r3, #0]
 80031c2:	f000 bc5d 	b.w	8003a80 <Rafael_PanTompkins+0x16d0>
			}
			// If the beat had been normal but turned odd, change the thresholds.
			else
			{
				regular = false;
 80031c6:	4b67      	ldr	r3, [pc, #412]	; (8003364 <Rafael_PanTompkins+0xfb4>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	701a      	strb	r2, [r3, #0]
				if (prevRegular)
 80031cc:	4b66      	ldr	r3, [pc, #408]	; (8003368 <Rafael_PanTompkins+0xfb8>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 8455 	beq.w	8003a80 <Rafael_PanTompkins+0x16d0>
				{
					threshold_i1 /= 2;
 80031d6:	4b66      	ldr	r3, [pc, #408]	; (8003370 <Rafael_PanTompkins+0xfc0>)
 80031d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031dc:	0fda      	lsrs	r2, r3, #31
 80031de:	4413      	add	r3, r2
 80031e0:	105b      	asrs	r3, r3, #1
 80031e2:	b21a      	sxth	r2, r3
 80031e4:	4b62      	ldr	r3, [pc, #392]	; (8003370 <Rafael_PanTompkins+0xfc0>)
 80031e6:	801a      	strh	r2, [r3, #0]
					threshold_f1 /= 2;
 80031e8:	4b62      	ldr	r3, [pc, #392]	; (8003374 <Rafael_PanTompkins+0xfc4>)
 80031ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031ee:	0fda      	lsrs	r2, r3, #31
 80031f0:	4413      	add	r3, r2
 80031f2:	105b      	asrs	r3, r3, #1
 80031f4:	b21a      	sxth	r2, r3
 80031f6:	4b5f      	ldr	r3, [pc, #380]	; (8003374 <Rafael_PanTompkins+0xfc4>)
 80031f8:	801a      	strh	r2, [r3, #0]
 80031fa:	f000 bc41 	b.w	8003a80 <Rafael_PanTompkins+0x16d0>
		// If no R-peak was detected, it's important to check how long it's been since the last detection.
		else
		{
		    // If no R-peak was detected for too long, use the lighter thresholds and do a back search.
			// However, the back search must respect the 200ms limit and the 360ms one (check the slope).
			if ((sample - lastQRS > (long unsigned int)rrmiss) && (sample > lastQRS + FS/5))
 80031fe:	4b5e      	ldr	r3, [pc, #376]	; (8003378 <Rafael_PanTompkins+0xfc8>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	4b5e      	ldr	r3, [pc, #376]	; (800337c <Rafael_PanTompkins+0xfcc>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	4a55      	ldr	r2, [pc, #340]	; (8003360 <Rafael_PanTompkins+0xfb0>)
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	4293      	cmp	r3, r2
 800320e:	f240 833f 	bls.w	8003890 <Rafael_PanTompkins+0x14e0>
 8003212:	4b5a      	ldr	r3, [pc, #360]	; (800337c <Rafael_PanTompkins+0xfcc>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800321a:	4b57      	ldr	r3, [pc, #348]	; (8003378 <Rafael_PanTompkins+0xfc8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	f080 8336 	bcs.w	8003890 <Rafael_PanTompkins+0x14e0>
			{
				for (i = current - (sample - lastQRS) + FS/5; i < (long unsigned int)current; i++)
 8003224:	4b55      	ldr	r3, [pc, #340]	; (800337c <Rafael_PanTompkins+0xfcc>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4b53      	ldr	r3, [pc, #332]	; (8003378 <Rafael_PanTompkins+0xfc8>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	4a54      	ldr	r2, [pc, #336]	; (8003380 <Rafael_PanTompkins+0xfd0>)
 8003230:	6812      	ldr	r2, [r2, #0]
 8003232:	4413      	add	r3, r2
 8003234:	3348      	adds	r3, #72	; 0x48
 8003236:	4a44      	ldr	r2, [pc, #272]	; (8003348 <Rafael_PanTompkins+0xf98>)
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	e2e0      	b.n	80037fe <Rafael_PanTompkins+0x144e>
				{
					if ( (RF_integral[i] > threshold_i2) && (RF_highpass[i] > threshold_f2))
 800323c:	4b42      	ldr	r3, [pc, #264]	; (8003348 <Rafael_PanTompkins+0xf98>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a50      	ldr	r2, [pc, #320]	; (8003384 <Rafael_PanTompkins+0xfd4>)
 8003242:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8003246:	4b50      	ldr	r3, [pc, #320]	; (8003388 <Rafael_PanTompkins+0xfd8>)
 8003248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800324c:	429a      	cmp	r2, r3
 800324e:	f340 82d1 	ble.w	80037f4 <Rafael_PanTompkins+0x1444>
 8003252:	4b3d      	ldr	r3, [pc, #244]	; (8003348 <Rafael_PanTompkins+0xf98>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a4d      	ldr	r2, [pc, #308]	; (800338c <Rafael_PanTompkins+0xfdc>)
 8003258:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800325c:	4b4c      	ldr	r3, [pc, #304]	; (8003390 <Rafael_PanTompkins+0xfe0>)
 800325e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003262:	429a      	cmp	r2, r3
 8003264:	f340 82c6 	ble.w	80037f4 <Rafael_PanTompkins+0x1444>
					{
					    currentSlope = 0;
 8003268:	4b4a      	ldr	r3, [pc, #296]	; (8003394 <Rafael_PanTompkins+0xfe4>)
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
                        for (j = i - 10; j <= i; j++)
 800326e:	4b36      	ldr	r3, [pc, #216]	; (8003348 <Rafael_PanTompkins+0xf98>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	3b0a      	subs	r3, #10
 8003274:	4a48      	ldr	r2, [pc, #288]	; (8003398 <Rafael_PanTompkins+0xfe8>)
 8003276:	6013      	str	r3, [r2, #0]
 8003278:	e016      	b.n	80032a8 <Rafael_PanTompkins+0xef8>
                            if (RF_squared[j] > currentSlope)
 800327a:	4b47      	ldr	r3, [pc, #284]	; (8003398 <Rafael_PanTompkins+0xfe8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a47      	ldr	r2, [pc, #284]	; (800339c <Rafael_PanTompkins+0xfec>)
 8003280:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003284:	461a      	mov	r2, r3
 8003286:	4b43      	ldr	r3, [pc, #268]	; (8003394 <Rafael_PanTompkins+0xfe4>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	429a      	cmp	r2, r3
 800328c:	d907      	bls.n	800329e <Rafael_PanTompkins+0xeee>
                                currentSlope = RF_squared[j];
 800328e:	4b42      	ldr	r3, [pc, #264]	; (8003398 <Rafael_PanTompkins+0xfe8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a42      	ldr	r2, [pc, #264]	; (800339c <Rafael_PanTompkins+0xfec>)
 8003294:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003298:	461a      	mov	r2, r3
 800329a:	4b3e      	ldr	r3, [pc, #248]	; (8003394 <Rafael_PanTompkins+0xfe4>)
 800329c:	601a      	str	r2, [r3, #0]
                        for (j = i - 10; j <= i; j++)
 800329e:	4b3e      	ldr	r3, [pc, #248]	; (8003398 <Rafael_PanTompkins+0xfe8>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	3301      	adds	r3, #1
 80032a4:	4a3c      	ldr	r2, [pc, #240]	; (8003398 <Rafael_PanTompkins+0xfe8>)
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	4b3b      	ldr	r3, [pc, #236]	; (8003398 <Rafael_PanTompkins+0xfe8>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	4b26      	ldr	r3, [pc, #152]	; (8003348 <Rafael_PanTompkins+0xf98>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d9e2      	bls.n	800327a <Rafael_PanTompkins+0xeca>

                        if ((currentSlope < (dataType)(lastSlope/2)) && (i + sample) < lastQRS + 0.36*lastQRS)
 80032b4:	4b3a      	ldr	r3, [pc, #232]	; (80033a0 <Rafael_PanTompkins+0xff0>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	085b      	lsrs	r3, r3, #1
 80032ba:	b21b      	sxth	r3, r3
 80032bc:	461a      	mov	r2, r3
 80032be:	4b35      	ldr	r3, [pc, #212]	; (8003394 <Rafael_PanTompkins+0xfe4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d970      	bls.n	80033a8 <Rafael_PanTompkins+0xff8>
 80032c6:	4b20      	ldr	r3, [pc, #128]	; (8003348 <Rafael_PanTompkins+0xf98>)
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	4b2b      	ldr	r3, [pc, #172]	; (8003378 <Rafael_PanTompkins+0xfc8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4413      	add	r3, r2
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fd f8ef 	bl	80004b4 <__aeabi_ui2d>
 80032d6:	4604      	mov	r4, r0
 80032d8:	460d      	mov	r5, r1
 80032da:	4b28      	ldr	r3, [pc, #160]	; (800337c <Rafael_PanTompkins+0xfcc>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fd f8e8 	bl	80004b4 <__aeabi_ui2d>
 80032e4:	4680      	mov	r8, r0
 80032e6:	4689      	mov	r9, r1
 80032e8:	4b24      	ldr	r3, [pc, #144]	; (800337c <Rafael_PanTompkins+0xfcc>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fd f8e1 	bl	80004b4 <__aeabi_ui2d>
 80032f2:	a313      	add	r3, pc, #76	; (adr r3, 8003340 <Rafael_PanTompkins+0xf90>)
 80032f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f8:	f7fd f956 	bl	80005a8 <__aeabi_dmul>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4640      	mov	r0, r8
 8003302:	4649      	mov	r1, r9
 8003304:	f7fc ff9a 	bl	800023c <__adddf3>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4620      	mov	r0, r4
 800330e:	4629      	mov	r1, r5
 8003310:	f7fd fbbc 	bl	8000a8c <__aeabi_dcmplt>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d046      	beq.n	80033a8 <Rafael_PanTompkins+0xff8>
                        {
                            qrs = false;
 800331a:	4b22      	ldr	r3, [pc, #136]	; (80033a4 <Rafael_PanTompkins+0xff4>)
 800331c:	2200      	movs	r2, #0
 800331e:	701a      	strb	r2, [r3, #0]
 8003320:	e268      	b.n	80037f4 <Rafael_PanTompkins+0x1444>
 8003322:	bf00      	nop
 8003324:	f3af 8000 	nop.w
 8003328:	d70a3d71 	.word	0xd70a3d71
 800332c:	3fed70a3 	.word	0x3fed70a3
 8003330:	28f5c28f 	.word	0x28f5c28f
 8003334:	3ff28f5c 	.word	0x3ff28f5c
 8003338:	28f5c28f 	.word	0x28f5c28f
 800333c:	3ffa8f5c 	.word	0x3ffa8f5c
 8003340:	70a3d70a 	.word	0x70a3d70a
 8003344:	3fd70a3d 	.word	0x3fd70a3d
 8003348:	20002b4c 	.word	0x20002b4c
 800334c:	20002b18 	.word	0x20002b18
 8003350:	20002b3c 	.word	0x20002b3c
 8003354:	20002af8 	.word	0x20002af8
 8003358:	20002b40 	.word	0x20002b40
 800335c:	20002b44 	.word	0x20002b44
 8003360:	20002b48 	.word	0x20002b48
 8003364:	20000004 	.word	0x20000004
 8003368:	20002b7d 	.word	0x20002b7d
 800336c:	20002b38 	.word	0x20002b38
 8003370:	20002b6c 	.word	0x20002b6c
 8003374:	20002b70 	.word	0x20002b70
 8003378:	20002b54 	.word	0x20002b54
 800337c:	20002b58 	.word	0x20002b58
 8003380:	20002b64 	.word	0x20002b64
 8003384:	20002198 	.word	0x20002198
 8003388:	20002b6e 	.word	0x20002b6e
 800338c:	20001388 	.word	0x20001388
 8003390:	20002b72 	.word	0x20002b72
 8003394:	20002b60 	.word	0x20002b60
 8003398:	20002b50 	.word	0x20002b50
 800339c:	20001ce8 	.word	0x20001ce8
 80033a0:	20002b5c 	.word	0x20002b5c
 80033a4:	20002b7c 	.word	0x20002b7c
                        }
                        else
                        {
                            peak_i = RF_integral[i];
 80033a8:	4ba7      	ldr	r3, [pc, #668]	; (8003648 <Rafael_PanTompkins+0x1298>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4aa7      	ldr	r2, [pc, #668]	; (800364c <Rafael_PanTompkins+0x129c>)
 80033ae:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80033b2:	4ba7      	ldr	r3, [pc, #668]	; (8003650 <Rafael_PanTompkins+0x12a0>)
 80033b4:	801a      	strh	r2, [r3, #0]
                            peak_f = RF_highpass[i];
 80033b6:	4ba4      	ldr	r3, [pc, #656]	; (8003648 <Rafael_PanTompkins+0x1298>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4aa6      	ldr	r2, [pc, #664]	; (8003654 <Rafael_PanTompkins+0x12a4>)
 80033bc:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80033c0:	4ba5      	ldr	r3, [pc, #660]	; (8003658 <Rafael_PanTompkins+0x12a8>)
 80033c2:	801a      	strh	r2, [r3, #0]
                            spk_i = 0.25*peak_i+ 0.75*spk_i;
 80033c4:	4ba2      	ldr	r3, [pc, #648]	; (8003650 <Rafael_PanTompkins+0x12a0>)
 80033c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fd f882 	bl	80004d4 <__aeabi_i2d>
 80033d0:	f04f 0200 	mov.w	r2, #0
 80033d4:	4ba1      	ldr	r3, [pc, #644]	; (800365c <Rafael_PanTompkins+0x12ac>)
 80033d6:	f7fd f8e7 	bl	80005a8 <__aeabi_dmul>
 80033da:	4602      	mov	r2, r0
 80033dc:	460b      	mov	r3, r1
 80033de:	4614      	mov	r4, r2
 80033e0:	461d      	mov	r5, r3
 80033e2:	4b9f      	ldr	r3, [pc, #636]	; (8003660 <Rafael_PanTompkins+0x12b0>)
 80033e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fd f873 	bl	80004d4 <__aeabi_i2d>
 80033ee:	f04f 0200 	mov.w	r2, #0
 80033f2:	4b9c      	ldr	r3, [pc, #624]	; (8003664 <Rafael_PanTompkins+0x12b4>)
 80033f4:	f7fd f8d8 	bl	80005a8 <__aeabi_dmul>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4620      	mov	r0, r4
 80033fe:	4629      	mov	r1, r5
 8003400:	f7fc ff1c 	bl	800023c <__adddf3>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4610      	mov	r0, r2
 800340a:	4619      	mov	r1, r3
 800340c:	f7fd fb7c 	bl	8000b08 <__aeabi_d2iz>
 8003410:	4603      	mov	r3, r0
 8003412:	b21a      	sxth	r2, r3
 8003414:	4b92      	ldr	r3, [pc, #584]	; (8003660 <Rafael_PanTompkins+0x12b0>)
 8003416:	801a      	strh	r2, [r3, #0]
                            spk_f = 0.25*peak_f + 0.75*spk_f;
 8003418:	4b8f      	ldr	r3, [pc, #572]	; (8003658 <Rafael_PanTompkins+0x12a8>)
 800341a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800341e:	4618      	mov	r0, r3
 8003420:	f7fd f858 	bl	80004d4 <__aeabi_i2d>
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	4b8c      	ldr	r3, [pc, #560]	; (800365c <Rafael_PanTompkins+0x12ac>)
 800342a:	f7fd f8bd 	bl	80005a8 <__aeabi_dmul>
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	4614      	mov	r4, r2
 8003434:	461d      	mov	r5, r3
 8003436:	4b8c      	ldr	r3, [pc, #560]	; (8003668 <Rafael_PanTompkins+0x12b8>)
 8003438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800343c:	4618      	mov	r0, r3
 800343e:	f7fd f849 	bl	80004d4 <__aeabi_i2d>
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	4b87      	ldr	r3, [pc, #540]	; (8003664 <Rafael_PanTompkins+0x12b4>)
 8003448:	f7fd f8ae 	bl	80005a8 <__aeabi_dmul>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4620      	mov	r0, r4
 8003452:	4629      	mov	r1, r5
 8003454:	f7fc fef2 	bl	800023c <__adddf3>
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	4610      	mov	r0, r2
 800345e:	4619      	mov	r1, r3
 8003460:	f7fd fb52 	bl	8000b08 <__aeabi_d2iz>
 8003464:	4603      	mov	r3, r0
 8003466:	b21a      	sxth	r2, r3
 8003468:	4b7f      	ldr	r3, [pc, #508]	; (8003668 <Rafael_PanTompkins+0x12b8>)
 800346a:	801a      	strh	r2, [r3, #0]
                            threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 800346c:	4b7f      	ldr	r3, [pc, #508]	; (800366c <Rafael_PanTompkins+0x12bc>)
 800346e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003472:	4618      	mov	r0, r3
 8003474:	f7fd f82e 	bl	80004d4 <__aeabi_i2d>
 8003478:	4604      	mov	r4, r0
 800347a:	460d      	mov	r5, r1
 800347c:	4b78      	ldr	r3, [pc, #480]	; (8003660 <Rafael_PanTompkins+0x12b0>)
 800347e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003482:	461a      	mov	r2, r3
 8003484:	4b79      	ldr	r3, [pc, #484]	; (800366c <Rafael_PanTompkins+0x12bc>)
 8003486:	f9b3 3000 	ldrsh.w	r3, [r3]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	4618      	mov	r0, r3
 800348e:	f7fd f821 	bl	80004d4 <__aeabi_i2d>
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	4b71      	ldr	r3, [pc, #452]	; (800365c <Rafael_PanTompkins+0x12ac>)
 8003498:	f7fd f886 	bl	80005a8 <__aeabi_dmul>
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
 80034a0:	4620      	mov	r0, r4
 80034a2:	4629      	mov	r1, r5
 80034a4:	f7fc feca 	bl	800023c <__adddf3>
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	4610      	mov	r0, r2
 80034ae:	4619      	mov	r1, r3
 80034b0:	f7fd fb2a 	bl	8000b08 <__aeabi_d2iz>
 80034b4:	4603      	mov	r3, r0
 80034b6:	b21a      	sxth	r2, r3
 80034b8:	4b6d      	ldr	r3, [pc, #436]	; (8003670 <Rafael_PanTompkins+0x12c0>)
 80034ba:	801a      	strh	r2, [r3, #0]
                            threshold_i2 = 0.5*threshold_i1;
 80034bc:	4b6c      	ldr	r3, [pc, #432]	; (8003670 <Rafael_PanTompkins+0x12c0>)
 80034be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fd f806 	bl	80004d4 <__aeabi_i2d>
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	4b69      	ldr	r3, [pc, #420]	; (8003674 <Rafael_PanTompkins+0x12c4>)
 80034ce:	f7fd f86b 	bl	80005a8 <__aeabi_dmul>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	4610      	mov	r0, r2
 80034d8:	4619      	mov	r1, r3
 80034da:	f7fd fb15 	bl	8000b08 <__aeabi_d2iz>
 80034de:	4603      	mov	r3, r0
 80034e0:	b21a      	sxth	r2, r3
 80034e2:	4b65      	ldr	r3, [pc, #404]	; (8003678 <Rafael_PanTompkins+0x12c8>)
 80034e4:	801a      	strh	r2, [r3, #0]
                            lastSlope = currentSlope;
 80034e6:	4b65      	ldr	r3, [pc, #404]	; (800367c <Rafael_PanTompkins+0x12cc>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a65      	ldr	r2, [pc, #404]	; (8003680 <Rafael_PanTompkins+0x12d0>)
 80034ec:	6013      	str	r3, [r2, #0]
                            threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 80034ee:	4b65      	ldr	r3, [pc, #404]	; (8003684 <Rafael_PanTompkins+0x12d4>)
 80034f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fc ffed 	bl	80004d4 <__aeabi_i2d>
 80034fa:	4604      	mov	r4, r0
 80034fc:	460d      	mov	r5, r1
 80034fe:	4b5a      	ldr	r3, [pc, #360]	; (8003668 <Rafael_PanTompkins+0x12b8>)
 8003500:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003504:	461a      	mov	r2, r3
 8003506:	4b5f      	ldr	r3, [pc, #380]	; (8003684 <Rafael_PanTompkins+0x12d4>)
 8003508:	f9b3 3000 	ldrsh.w	r3, [r3]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	4618      	mov	r0, r3
 8003510:	f7fc ffe0 	bl	80004d4 <__aeabi_i2d>
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	4b50      	ldr	r3, [pc, #320]	; (800365c <Rafael_PanTompkins+0x12ac>)
 800351a:	f7fd f845 	bl	80005a8 <__aeabi_dmul>
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4620      	mov	r0, r4
 8003524:	4629      	mov	r1, r5
 8003526:	f7fc fe89 	bl	800023c <__adddf3>
 800352a:	4602      	mov	r2, r0
 800352c:	460b      	mov	r3, r1
 800352e:	4610      	mov	r0, r2
 8003530:	4619      	mov	r1, r3
 8003532:	f7fd fae9 	bl	8000b08 <__aeabi_d2iz>
 8003536:	4603      	mov	r3, r0
 8003538:	b21a      	sxth	r2, r3
 800353a:	4b53      	ldr	r3, [pc, #332]	; (8003688 <Rafael_PanTompkins+0x12d8>)
 800353c:	801a      	strh	r2, [r3, #0]
                            threshold_f2 = 0.5*threshold_f1;
 800353e:	4b52      	ldr	r3, [pc, #328]	; (8003688 <Rafael_PanTompkins+0x12d8>)
 8003540:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003544:	4618      	mov	r0, r3
 8003546:	f7fc ffc5 	bl	80004d4 <__aeabi_i2d>
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	4b49      	ldr	r3, [pc, #292]	; (8003674 <Rafael_PanTompkins+0x12c4>)
 8003550:	f7fd f82a 	bl	80005a8 <__aeabi_dmul>
 8003554:	4602      	mov	r2, r0
 8003556:	460b      	mov	r3, r1
 8003558:	4610      	mov	r0, r2
 800355a:	4619      	mov	r1, r3
 800355c:	f7fd fad4 	bl	8000b08 <__aeabi_d2iz>
 8003560:	4603      	mov	r3, r0
 8003562:	b21a      	sxth	r2, r3
 8003564:	4b49      	ldr	r3, [pc, #292]	; (800368c <Rafael_PanTompkins+0x12dc>)
 8003566:	801a      	strh	r2, [r3, #0]
                            // If a signal peak was detected on the back search, the RR attributes must be updated.
                            // This is the same thing done when a peak is detected on the first try.
                            //RR Average 1
                            rravg1 = 0;
 8003568:	4b49      	ldr	r3, [pc, #292]	; (8003690 <Rafael_PanTompkins+0x12e0>)
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]
                            for (j = 0; j < 7; j++)
 800356e:	4b49      	ldr	r3, [pc, #292]	; (8003694 <Rafael_PanTompkins+0x12e4>)
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	e019      	b.n	80035aa <Rafael_PanTompkins+0x11fa>
                            {
                                rr1[j] = rr1[j+1];
 8003576:	4b47      	ldr	r3, [pc, #284]	; (8003694 <Rafael_PanTompkins+0x12e4>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	4b45      	ldr	r3, [pc, #276]	; (8003694 <Rafael_PanTompkins+0x12e4>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4945      	ldr	r1, [pc, #276]	; (8003698 <Rafael_PanTompkins+0x12e8>)
 8003582:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003586:	4944      	ldr	r1, [pc, #272]	; (8003698 <Rafael_PanTompkins+0x12e8>)
 8003588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                rravg1 += rr1[j];
 800358c:	4b41      	ldr	r3, [pc, #260]	; (8003694 <Rafael_PanTompkins+0x12e4>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a41      	ldr	r2, [pc, #260]	; (8003698 <Rafael_PanTompkins+0x12e8>)
 8003592:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003596:	4b3e      	ldr	r3, [pc, #248]	; (8003690 <Rafael_PanTompkins+0x12e0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4413      	add	r3, r2
 800359c:	4a3c      	ldr	r2, [pc, #240]	; (8003690 <Rafael_PanTompkins+0x12e0>)
 800359e:	6013      	str	r3, [r2, #0]
                            for (j = 0; j < 7; j++)
 80035a0:	4b3c      	ldr	r3, [pc, #240]	; (8003694 <Rafael_PanTompkins+0x12e4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	3301      	adds	r3, #1
 80035a6:	4a3b      	ldr	r2, [pc, #236]	; (8003694 <Rafael_PanTompkins+0x12e4>)
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	4b3a      	ldr	r3, [pc, #232]	; (8003694 <Rafael_PanTompkins+0x12e4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b06      	cmp	r3, #6
 80035b0:	d9e1      	bls.n	8003576 <Rafael_PanTompkins+0x11c6>
                            }
                            rr1[7] = sample - (current - i) - lastQRS;
 80035b2:	4b25      	ldr	r3, [pc, #148]	; (8003648 <Rafael_PanTompkins+0x1298>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a39      	ldr	r2, [pc, #228]	; (800369c <Rafael_PanTompkins+0x12ec>)
 80035b8:	6812      	ldr	r2, [r2, #0]
 80035ba:	1a9a      	subs	r2, r3, r2
 80035bc:	4b38      	ldr	r3, [pc, #224]	; (80036a0 <Rafael_PanTompkins+0x12f0>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	441a      	add	r2, r3
 80035c2:	4b38      	ldr	r3, [pc, #224]	; (80036a4 <Rafael_PanTompkins+0x12f4>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	461a      	mov	r2, r3
 80035ca:	4b33      	ldr	r3, [pc, #204]	; (8003698 <Rafael_PanTompkins+0x12e8>)
 80035cc:	61da      	str	r2, [r3, #28]
                            qrs = true;
 80035ce:	4b36      	ldr	r3, [pc, #216]	; (80036a8 <Rafael_PanTompkins+0x12f8>)
 80035d0:	2201      	movs	r2, #1
 80035d2:	701a      	strb	r2, [r3, #0]
                            lastQRS = sample - (current - i);
 80035d4:	4b1c      	ldr	r3, [pc, #112]	; (8003648 <Rafael_PanTompkins+0x1298>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a30      	ldr	r2, [pc, #192]	; (800369c <Rafael_PanTompkins+0x12ec>)
 80035da:	6812      	ldr	r2, [r2, #0]
 80035dc:	1a9a      	subs	r2, r3, r2
 80035de:	4b30      	ldr	r3, [pc, #192]	; (80036a0 <Rafael_PanTompkins+0x12f0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4413      	add	r3, r2
 80035e4:	4a2f      	ldr	r2, [pc, #188]	; (80036a4 <Rafael_PanTompkins+0x12f4>)
 80035e6:	6013      	str	r3, [r2, #0]
                            rravg1 += rr1[7];
 80035e8:	4b2b      	ldr	r3, [pc, #172]	; (8003698 <Rafael_PanTompkins+0x12e8>)
 80035ea:	69da      	ldr	r2, [r3, #28]
 80035ec:	4b28      	ldr	r3, [pc, #160]	; (8003690 <Rafael_PanTompkins+0x12e0>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4413      	add	r3, r2
 80035f2:	4a27      	ldr	r2, [pc, #156]	; (8003690 <Rafael_PanTompkins+0x12e0>)
 80035f4:	6013      	str	r3, [r2, #0]
                            rravg1 *= 0.125;
 80035f6:	4b26      	ldr	r3, [pc, #152]	; (8003690 <Rafael_PanTompkins+0x12e0>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fc ff6a 	bl	80004d4 <__aeabi_i2d>
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003608:	f7fc ffce 	bl	80005a8 <__aeabi_dmul>
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	4610      	mov	r0, r2
 8003612:	4619      	mov	r1, r3
 8003614:	f7fd fa78 	bl	8000b08 <__aeabi_d2iz>
 8003618:	4603      	mov	r3, r0
 800361a:	4a1d      	ldr	r2, [pc, #116]	; (8003690 <Rafael_PanTompkins+0x12e0>)
 800361c:	6013      	str	r3, [r2, #0]

                            //RR Average 2
                            if ( (rr1[7] >= rrlow) && (rr1[7] <= rrhigh) )
 800361e:	4b1e      	ldr	r3, [pc, #120]	; (8003698 <Rafael_PanTompkins+0x12e8>)
 8003620:	69da      	ldr	r2, [r3, #28]
 8003622:	4b22      	ldr	r3, [pc, #136]	; (80036ac <Rafael_PanTompkins+0x12fc>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	f2c0 80bc 	blt.w	80037a4 <Rafael_PanTompkins+0x13f4>
 800362c:	4b1a      	ldr	r3, [pc, #104]	; (8003698 <Rafael_PanTompkins+0x12e8>)
 800362e:	69da      	ldr	r2, [r3, #28]
 8003630:	4b1f      	ldr	r3, [pc, #124]	; (80036b0 <Rafael_PanTompkins+0x1300>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	429a      	cmp	r2, r3
 8003636:	f300 80b5 	bgt.w	80037a4 <Rafael_PanTompkins+0x13f4>
                            {
                                rravg2 = 0;
 800363a:	4b1e      	ldr	r3, [pc, #120]	; (80036b4 <Rafael_PanTompkins+0x1304>)
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]
                                for (i = 0; i < 7; i++)
 8003640:	4b01      	ldr	r3, [pc, #4]	; (8003648 <Rafael_PanTompkins+0x1298>)
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	e051      	b.n	80036ec <Rafael_PanTompkins+0x133c>
 8003648:	20002b4c 	.word	0x20002b4c
 800364c:	20002198 	.word	0x20002198
 8003650:	20002b68 	.word	0x20002b68
 8003654:	20001388 	.word	0x20001388
 8003658:	20002b6a 	.word	0x20002b6a
 800365c:	3fd00000 	.word	0x3fd00000
 8003660:	20002b74 	.word	0x20002b74
 8003664:	3fe80000 	.word	0x3fe80000
 8003668:	20002b76 	.word	0x20002b76
 800366c:	20002b78 	.word	0x20002b78
 8003670:	20002b6c 	.word	0x20002b6c
 8003674:	3fe00000 	.word	0x3fe00000
 8003678:	20002b6e 	.word	0x20002b6e
 800367c:	20002b60 	.word	0x20002b60
 8003680:	20002b5c 	.word	0x20002b5c
 8003684:	20002b7a 	.word	0x20002b7a
 8003688:	20002b70 	.word	0x20002b70
 800368c:	20002b72 	.word	0x20002b72
 8003690:	20002b38 	.word	0x20002b38
 8003694:	20002b50 	.word	0x20002b50
 8003698:	20002af8 	.word	0x20002af8
 800369c:	20002b64 	.word	0x20002b64
 80036a0:	20002b54 	.word	0x20002b54
 80036a4:	20002b58 	.word	0x20002b58
 80036a8:	20002b7c 	.word	0x20002b7c
 80036ac:	20002b40 	.word	0x20002b40
 80036b0:	20002b44 	.word	0x20002b44
 80036b4:	20002b3c 	.word	0x20002b3c
                                {
                                    rr2[i] = rr2[i+1];
 80036b8:	4b5b      	ldr	r3, [pc, #364]	; (8003828 <Rafael_PanTompkins+0x1478>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	4b5a      	ldr	r3, [pc, #360]	; (8003828 <Rafael_PanTompkins+0x1478>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	495a      	ldr	r1, [pc, #360]	; (800382c <Rafael_PanTompkins+0x147c>)
 80036c4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80036c8:	4958      	ldr	r1, [pc, #352]	; (800382c <Rafael_PanTompkins+0x147c>)
 80036ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                    rravg2 += rr2[i];
 80036ce:	4b56      	ldr	r3, [pc, #344]	; (8003828 <Rafael_PanTompkins+0x1478>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a56      	ldr	r2, [pc, #344]	; (800382c <Rafael_PanTompkins+0x147c>)
 80036d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80036d8:	4b55      	ldr	r3, [pc, #340]	; (8003830 <Rafael_PanTompkins+0x1480>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4413      	add	r3, r2
 80036de:	4a54      	ldr	r2, [pc, #336]	; (8003830 <Rafael_PanTompkins+0x1480>)
 80036e0:	6013      	str	r3, [r2, #0]
                                for (i = 0; i < 7; i++)
 80036e2:	4b51      	ldr	r3, [pc, #324]	; (8003828 <Rafael_PanTompkins+0x1478>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3301      	adds	r3, #1
 80036e8:	4a4f      	ldr	r2, [pc, #316]	; (8003828 <Rafael_PanTompkins+0x1478>)
 80036ea:	6013      	str	r3, [r2, #0]
 80036ec:	4b4e      	ldr	r3, [pc, #312]	; (8003828 <Rafael_PanTompkins+0x1478>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b06      	cmp	r3, #6
 80036f2:	d9e1      	bls.n	80036b8 <Rafael_PanTompkins+0x1308>
                                }
                                rr2[7] = rr1[7];
 80036f4:	4b4f      	ldr	r3, [pc, #316]	; (8003834 <Rafael_PanTompkins+0x1484>)
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	4a4c      	ldr	r2, [pc, #304]	; (800382c <Rafael_PanTompkins+0x147c>)
 80036fa:	61d3      	str	r3, [r2, #28]
                                rravg2 += rr2[7];
 80036fc:	4b4b      	ldr	r3, [pc, #300]	; (800382c <Rafael_PanTompkins+0x147c>)
 80036fe:	69da      	ldr	r2, [r3, #28]
 8003700:	4b4b      	ldr	r3, [pc, #300]	; (8003830 <Rafael_PanTompkins+0x1480>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4413      	add	r3, r2
 8003706:	4a4a      	ldr	r2, [pc, #296]	; (8003830 <Rafael_PanTompkins+0x1480>)
 8003708:	6013      	str	r3, [r2, #0]
                                rravg2 *= 0.125;
 800370a:	4b49      	ldr	r3, [pc, #292]	; (8003830 <Rafael_PanTompkins+0x1480>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f7fc fee0 	bl	80004d4 <__aeabi_i2d>
 8003714:	f04f 0200 	mov.w	r2, #0
 8003718:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800371c:	f7fc ff44 	bl	80005a8 <__aeabi_dmul>
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	4610      	mov	r0, r2
 8003726:	4619      	mov	r1, r3
 8003728:	f7fd f9ee 	bl	8000b08 <__aeabi_d2iz>
 800372c:	4603      	mov	r3, r0
 800372e:	4a40      	ldr	r2, [pc, #256]	; (8003830 <Rafael_PanTompkins+0x1480>)
 8003730:	6013      	str	r3, [r2, #0]
                                rrlow = 0.92*rravg2;
 8003732:	4b3f      	ldr	r3, [pc, #252]	; (8003830 <Rafael_PanTompkins+0x1480>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f7fc fecc 	bl	80004d4 <__aeabi_i2d>
 800373c:	a334      	add	r3, pc, #208	; (adr r3, 8003810 <Rafael_PanTompkins+0x1460>)
 800373e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003742:	f7fc ff31 	bl	80005a8 <__aeabi_dmul>
 8003746:	4602      	mov	r2, r0
 8003748:	460b      	mov	r3, r1
 800374a:	4610      	mov	r0, r2
 800374c:	4619      	mov	r1, r3
 800374e:	f7fd f9db 	bl	8000b08 <__aeabi_d2iz>
 8003752:	4603      	mov	r3, r0
 8003754:	4a38      	ldr	r2, [pc, #224]	; (8003838 <Rafael_PanTompkins+0x1488>)
 8003756:	6013      	str	r3, [r2, #0]
                                rrhigh = 1.16*rravg2;
 8003758:	4b35      	ldr	r3, [pc, #212]	; (8003830 <Rafael_PanTompkins+0x1480>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f7fc feb9 	bl	80004d4 <__aeabi_i2d>
 8003762:	a32d      	add	r3, pc, #180	; (adr r3, 8003818 <Rafael_PanTompkins+0x1468>)
 8003764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003768:	f7fc ff1e 	bl	80005a8 <__aeabi_dmul>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4610      	mov	r0, r2
 8003772:	4619      	mov	r1, r3
 8003774:	f7fd f9c8 	bl	8000b08 <__aeabi_d2iz>
 8003778:	4603      	mov	r3, r0
 800377a:	4a30      	ldr	r2, [pc, #192]	; (800383c <Rafael_PanTompkins+0x148c>)
 800377c:	6013      	str	r3, [r2, #0]
                                rrmiss = 1.66*rravg2;
 800377e:	4b2c      	ldr	r3, [pc, #176]	; (8003830 <Rafael_PanTompkins+0x1480>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f7fc fea6 	bl	80004d4 <__aeabi_i2d>
 8003788:	a325      	add	r3, pc, #148	; (adr r3, 8003820 <Rafael_PanTompkins+0x1470>)
 800378a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378e:	f7fc ff0b 	bl	80005a8 <__aeabi_dmul>
 8003792:	4602      	mov	r2, r0
 8003794:	460b      	mov	r3, r1
 8003796:	4610      	mov	r0, r2
 8003798:	4619      	mov	r1, r3
 800379a:	f7fd f9b5 	bl	8000b08 <__aeabi_d2iz>
 800379e:	4603      	mov	r3, r0
 80037a0:	4a27      	ldr	r2, [pc, #156]	; (8003840 <Rafael_PanTompkins+0x1490>)
 80037a2:	6013      	str	r3, [r2, #0]
                            }

                            prevRegular = regular;
 80037a4:	4b27      	ldr	r3, [pc, #156]	; (8003844 <Rafael_PanTompkins+0x1494>)
 80037a6:	781a      	ldrb	r2, [r3, #0]
 80037a8:	4b27      	ldr	r3, [pc, #156]	; (8003848 <Rafael_PanTompkins+0x1498>)
 80037aa:	701a      	strb	r2, [r3, #0]
                            if (rravg1 == rravg2)
 80037ac:	4b27      	ldr	r3, [pc, #156]	; (800384c <Rafael_PanTompkins+0x149c>)
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	4b1f      	ldr	r3, [pc, #124]	; (8003830 <Rafael_PanTompkins+0x1480>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d103      	bne.n	80037c0 <Rafael_PanTompkins+0x1410>
                            {
                                regular = true;
 80037b8:	4b22      	ldr	r3, [pc, #136]	; (8003844 <Rafael_PanTompkins+0x1494>)
 80037ba:	2201      	movs	r2, #1
 80037bc:	701a      	strb	r2, [r3, #0]
                                    threshold_i1 /= 2;
                                    threshold_f1 /= 2;
                                }
                            }

                            break;
 80037be:	e04d      	b.n	800385c <Rafael_PanTompkins+0x14ac>
                                regular = false;
 80037c0:	4b20      	ldr	r3, [pc, #128]	; (8003844 <Rafael_PanTompkins+0x1494>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	701a      	strb	r2, [r3, #0]
                                if (prevRegular)
 80037c6:	4b20      	ldr	r3, [pc, #128]	; (8003848 <Rafael_PanTompkins+0x1498>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d046      	beq.n	800385c <Rafael_PanTompkins+0x14ac>
                                    threshold_i1 /= 2;
 80037ce:	4b20      	ldr	r3, [pc, #128]	; (8003850 <Rafael_PanTompkins+0x14a0>)
 80037d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037d4:	0fda      	lsrs	r2, r3, #31
 80037d6:	4413      	add	r3, r2
 80037d8:	105b      	asrs	r3, r3, #1
 80037da:	b21a      	sxth	r2, r3
 80037dc:	4b1c      	ldr	r3, [pc, #112]	; (8003850 <Rafael_PanTompkins+0x14a0>)
 80037de:	801a      	strh	r2, [r3, #0]
                                    threshold_f1 /= 2;
 80037e0:	4b1c      	ldr	r3, [pc, #112]	; (8003854 <Rafael_PanTompkins+0x14a4>)
 80037e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037e6:	0fda      	lsrs	r2, r3, #31
 80037e8:	4413      	add	r3, r2
 80037ea:	105b      	asrs	r3, r3, #1
 80037ec:	b21a      	sxth	r2, r3
 80037ee:	4b19      	ldr	r3, [pc, #100]	; (8003854 <Rafael_PanTompkins+0x14a4>)
 80037f0:	801a      	strh	r2, [r3, #0]
                            break;
 80037f2:	e033      	b.n	800385c <Rafael_PanTompkins+0x14ac>
				for (i = current - (sample - lastQRS) + FS/5; i < (long unsigned int)current; i++)
 80037f4:	4b0c      	ldr	r3, [pc, #48]	; (8003828 <Rafael_PanTompkins+0x1478>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3301      	adds	r3, #1
 80037fa:	4a0b      	ldr	r2, [pc, #44]	; (8003828 <Rafael_PanTompkins+0x1478>)
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <Rafael_PanTompkins+0x1478>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a15      	ldr	r2, [pc, #84]	; (8003858 <Rafael_PanTompkins+0x14a8>)
 8003804:	6812      	ldr	r2, [r2, #0]
 8003806:	4293      	cmp	r3, r2
 8003808:	f4ff ad18 	bcc.w	800323c <Rafael_PanTompkins+0xe8c>
 800380c:	e027      	b.n	800385e <Rafael_PanTompkins+0x14ae>
 800380e:	bf00      	nop
 8003810:	d70a3d71 	.word	0xd70a3d71
 8003814:	3fed70a3 	.word	0x3fed70a3
 8003818:	28f5c28f 	.word	0x28f5c28f
 800381c:	3ff28f5c 	.word	0x3ff28f5c
 8003820:	28f5c28f 	.word	0x28f5c28f
 8003824:	3ffa8f5c 	.word	0x3ffa8f5c
 8003828:	20002b4c 	.word	0x20002b4c
 800382c:	20002b18 	.word	0x20002b18
 8003830:	20002b3c 	.word	0x20002b3c
 8003834:	20002af8 	.word	0x20002af8
 8003838:	20002b40 	.word	0x20002b40
 800383c:	20002b44 	.word	0x20002b44
 8003840:	20002b48 	.word	0x20002b48
 8003844:	20000004 	.word	0x20000004
 8003848:	20002b7d 	.word	0x20002b7d
 800384c:	20002b38 	.word	0x20002b38
 8003850:	20002b6c 	.word	0x20002b6c
 8003854:	20002b70 	.word	0x20002b70
 8003858:	20002b64 	.word	0x20002b64
                            break;
 800385c:	bf00      	nop
                        }
                    }
				}

				if (qrs)
 800385e:	4b8c      	ldr	r3, [pc, #560]	; (8003a90 <Rafael_PanTompkins+0x16e0>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d014      	beq.n	8003890 <Rafael_PanTompkins+0x14e0>
                {
					RF_outputSignal[current] = false;
 8003866:	4b8b      	ldr	r3, [pc, #556]	; (8003a94 <Rafael_PanTompkins+0x16e4>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a8b      	ldr	r2, [pc, #556]	; (8003a98 <Rafael_PanTompkins+0x16e8>)
 800386c:	2100      	movs	r1, #0
 800386e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					RF_outputSignal[i] = true;
 8003872:	4b8a      	ldr	r3, [pc, #552]	; (8003a9c <Rafael_PanTompkins+0x16ec>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a88      	ldr	r2, [pc, #544]	; (8003a98 <Rafael_PanTompkins+0x16e8>)
 8003878:	2101      	movs	r1, #1
 800387a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    result = (current - i);
 800387e:	4b85      	ldr	r3, [pc, #532]	; (8003a94 <Rafael_PanTompkins+0x16e4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	b29a      	uxth	r2, r3
 8003884:	4b85      	ldr	r3, [pc, #532]	; (8003a9c <Rafael_PanTompkins+0x16ec>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	b29b      	uxth	r3, r3
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	b29b      	uxth	r3, r3
 800388e:	81fb      	strh	r3, [r7, #14]
                }
			}

			// Definitely no signal peak was detected.
			if (!qrs)
 8003890:	4b7f      	ldr	r3, [pc, #508]	; (8003a90 <Rafael_PanTompkins+0x16e0>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	f040 80f3 	bne.w	8003a80 <Rafael_PanTompkins+0x16d0>
			{
				// If some kind of peak had been detected, then it's certainly a noise peak. Thresholds must be updated accordinly.
				if ((RF_integral[current] >= threshold_i1) || (RF_highpass[current] >= threshold_f1))
 800389a:	4b7e      	ldr	r3, [pc, #504]	; (8003a94 <Rafael_PanTompkins+0x16e4>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a80      	ldr	r2, [pc, #512]	; (8003aa0 <Rafael_PanTompkins+0x16f0>)
 80038a0:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80038a4:	4b7f      	ldr	r3, [pc, #508]	; (8003aa4 <Rafael_PanTompkins+0x16f4>)
 80038a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	da0a      	bge.n	80038c4 <Rafael_PanTompkins+0x1514>
 80038ae:	4b79      	ldr	r3, [pc, #484]	; (8003a94 <Rafael_PanTompkins+0x16e4>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a7d      	ldr	r2, [pc, #500]	; (8003aa8 <Rafael_PanTompkins+0x16f8>)
 80038b4:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80038b8:	4b7c      	ldr	r3, [pc, #496]	; (8003aac <Rafael_PanTompkins+0x16fc>)
 80038ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038be:	429a      	cmp	r2, r3
 80038c0:	f2c0 80de 	blt.w	8003a80 <Rafael_PanTompkins+0x16d0>
				{
					peak_i = RF_integral[current];
 80038c4:	4b73      	ldr	r3, [pc, #460]	; (8003a94 <Rafael_PanTompkins+0x16e4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a75      	ldr	r2, [pc, #468]	; (8003aa0 <Rafael_PanTompkins+0x16f0>)
 80038ca:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80038ce:	4b78      	ldr	r3, [pc, #480]	; (8003ab0 <Rafael_PanTompkins+0x1700>)
 80038d0:	801a      	strh	r2, [r3, #0]
					npk_i = 0.125*peak_i + 0.875*npk_i;
 80038d2:	4b77      	ldr	r3, [pc, #476]	; (8003ab0 <Rafael_PanTompkins+0x1700>)
 80038d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038d8:	4618      	mov	r0, r3
 80038da:	f7fc fdfb 	bl	80004d4 <__aeabi_i2d>
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80038e6:	f7fc fe5f 	bl	80005a8 <__aeabi_dmul>
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	4614      	mov	r4, r2
 80038f0:	461d      	mov	r5, r3
 80038f2:	4b70      	ldr	r3, [pc, #448]	; (8003ab4 <Rafael_PanTompkins+0x1704>)
 80038f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fc fdeb 	bl	80004d4 <__aeabi_i2d>
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	4b6d      	ldr	r3, [pc, #436]	; (8003ab8 <Rafael_PanTompkins+0x1708>)
 8003904:	f7fc fe50 	bl	80005a8 <__aeabi_dmul>
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	4620      	mov	r0, r4
 800390e:	4629      	mov	r1, r5
 8003910:	f7fc fc94 	bl	800023c <__adddf3>
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	4610      	mov	r0, r2
 800391a:	4619      	mov	r1, r3
 800391c:	f7fd f8f4 	bl	8000b08 <__aeabi_d2iz>
 8003920:	4603      	mov	r3, r0
 8003922:	b21a      	sxth	r2, r3
 8003924:	4b63      	ldr	r3, [pc, #396]	; (8003ab4 <Rafael_PanTompkins+0x1704>)
 8003926:	801a      	strh	r2, [r3, #0]
					threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8003928:	4b62      	ldr	r3, [pc, #392]	; (8003ab4 <Rafael_PanTompkins+0x1704>)
 800392a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800392e:	4618      	mov	r0, r3
 8003930:	f7fc fdd0 	bl	80004d4 <__aeabi_i2d>
 8003934:	4604      	mov	r4, r0
 8003936:	460d      	mov	r5, r1
 8003938:	4b60      	ldr	r3, [pc, #384]	; (8003abc <Rafael_PanTompkins+0x170c>)
 800393a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800393e:	461a      	mov	r2, r3
 8003940:	4b5c      	ldr	r3, [pc, #368]	; (8003ab4 <Rafael_PanTompkins+0x1704>)
 8003942:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	4618      	mov	r0, r3
 800394a:	f7fc fdc3 	bl	80004d4 <__aeabi_i2d>
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	4b5b      	ldr	r3, [pc, #364]	; (8003ac0 <Rafael_PanTompkins+0x1710>)
 8003954:	f7fc fe28 	bl	80005a8 <__aeabi_dmul>
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	4620      	mov	r0, r4
 800395e:	4629      	mov	r1, r5
 8003960:	f7fc fc6c 	bl	800023c <__adddf3>
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	4610      	mov	r0, r2
 800396a:	4619      	mov	r1, r3
 800396c:	f7fd f8cc 	bl	8000b08 <__aeabi_d2iz>
 8003970:	4603      	mov	r3, r0
 8003972:	b21a      	sxth	r2, r3
 8003974:	4b4b      	ldr	r3, [pc, #300]	; (8003aa4 <Rafael_PanTompkins+0x16f4>)
 8003976:	801a      	strh	r2, [r3, #0]
					threshold_i2 = 0.5*threshold_i1;
 8003978:	4b4a      	ldr	r3, [pc, #296]	; (8003aa4 <Rafael_PanTompkins+0x16f4>)
 800397a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800397e:	4618      	mov	r0, r3
 8003980:	f7fc fda8 	bl	80004d4 <__aeabi_i2d>
 8003984:	f04f 0200 	mov.w	r2, #0
 8003988:	4b4e      	ldr	r3, [pc, #312]	; (8003ac4 <Rafael_PanTompkins+0x1714>)
 800398a:	f7fc fe0d 	bl	80005a8 <__aeabi_dmul>
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	4610      	mov	r0, r2
 8003994:	4619      	mov	r1, r3
 8003996:	f7fd f8b7 	bl	8000b08 <__aeabi_d2iz>
 800399a:	4603      	mov	r3, r0
 800399c:	b21a      	sxth	r2, r3
 800399e:	4b4a      	ldr	r3, [pc, #296]	; (8003ac8 <Rafael_PanTompkins+0x1718>)
 80039a0:	801a      	strh	r2, [r3, #0]
					peak_f = RF_highpass[current];
 80039a2:	4b3c      	ldr	r3, [pc, #240]	; (8003a94 <Rafael_PanTompkins+0x16e4>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a40      	ldr	r2, [pc, #256]	; (8003aa8 <Rafael_PanTompkins+0x16f8>)
 80039a8:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80039ac:	4b47      	ldr	r3, [pc, #284]	; (8003acc <Rafael_PanTompkins+0x171c>)
 80039ae:	801a      	strh	r2, [r3, #0]
					npk_f = 0.125*peak_f + 0.875*npk_f;
 80039b0:	4b46      	ldr	r3, [pc, #280]	; (8003acc <Rafael_PanTompkins+0x171c>)
 80039b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fc fd8c 	bl	80004d4 <__aeabi_i2d>
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80039c4:	f7fc fdf0 	bl	80005a8 <__aeabi_dmul>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4614      	mov	r4, r2
 80039ce:	461d      	mov	r5, r3
 80039d0:	4b3f      	ldr	r3, [pc, #252]	; (8003ad0 <Rafael_PanTompkins+0x1720>)
 80039d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fc fd7c 	bl	80004d4 <__aeabi_i2d>
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	4b35      	ldr	r3, [pc, #212]	; (8003ab8 <Rafael_PanTompkins+0x1708>)
 80039e2:	f7fc fde1 	bl	80005a8 <__aeabi_dmul>
 80039e6:	4602      	mov	r2, r0
 80039e8:	460b      	mov	r3, r1
 80039ea:	4620      	mov	r0, r4
 80039ec:	4629      	mov	r1, r5
 80039ee:	f7fc fc25 	bl	800023c <__adddf3>
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	4610      	mov	r0, r2
 80039f8:	4619      	mov	r1, r3
 80039fa:	f7fd f885 	bl	8000b08 <__aeabi_d2iz>
 80039fe:	4603      	mov	r3, r0
 8003a00:	b21a      	sxth	r2, r3
 8003a02:	4b33      	ldr	r3, [pc, #204]	; (8003ad0 <Rafael_PanTompkins+0x1720>)
 8003a04:	801a      	strh	r2, [r3, #0]
					threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 8003a06:	4b32      	ldr	r3, [pc, #200]	; (8003ad0 <Rafael_PanTompkins+0x1720>)
 8003a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fc fd61 	bl	80004d4 <__aeabi_i2d>
 8003a12:	4604      	mov	r4, r0
 8003a14:	460d      	mov	r5, r1
 8003a16:	4b2f      	ldr	r3, [pc, #188]	; (8003ad4 <Rafael_PanTompkins+0x1724>)
 8003a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	4b2c      	ldr	r3, [pc, #176]	; (8003ad0 <Rafael_PanTompkins+0x1720>)
 8003a20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fc fd54 	bl	80004d4 <__aeabi_i2d>
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	4b23      	ldr	r3, [pc, #140]	; (8003ac0 <Rafael_PanTompkins+0x1710>)
 8003a32:	f7fc fdb9 	bl	80005a8 <__aeabi_dmul>
 8003a36:	4602      	mov	r2, r0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4620      	mov	r0, r4
 8003a3c:	4629      	mov	r1, r5
 8003a3e:	f7fc fbfd 	bl	800023c <__adddf3>
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	4610      	mov	r0, r2
 8003a48:	4619      	mov	r1, r3
 8003a4a:	f7fd f85d 	bl	8000b08 <__aeabi_d2iz>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	b21a      	sxth	r2, r3
 8003a52:	4b16      	ldr	r3, [pc, #88]	; (8003aac <Rafael_PanTompkins+0x16fc>)
 8003a54:	801a      	strh	r2, [r3, #0]
					threshold_f2 = 0.5*threshold_f1;
 8003a56:	4b15      	ldr	r3, [pc, #84]	; (8003aac <Rafael_PanTompkins+0x16fc>)
 8003a58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7fc fd39 	bl	80004d4 <__aeabi_i2d>
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	4b17      	ldr	r3, [pc, #92]	; (8003ac4 <Rafael_PanTompkins+0x1714>)
 8003a68:	f7fc fd9e 	bl	80005a8 <__aeabi_dmul>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	4610      	mov	r0, r2
 8003a72:	4619      	mov	r1, r3
 8003a74:	f7fd f848 	bl	8000b08 <__aeabi_d2iz>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	b21a      	sxth	r2, r3
 8003a7c:	4b16      	ldr	r3, [pc, #88]	; (8003ad8 <Rafael_PanTompkins+0x1728>)
 8003a7e:	801a      	strh	r2, [r3, #0]
		// However, it updates a few samples back from the buffer. The reason is that if we update the detection
		// for the current sample, we might miss a peak that could've been found later by backsearching using
		// lighter thresholds. The final waveform output does match the original signal, though.

		//My UPDATE: If peak was detected returns sample delay, else returns 0
		return result;
 8003a80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a8e:	bf00      	nop
 8003a90:	20002b7c 	.word	0x20002b7c
 8003a94:	20002b64 	.word	0x20002b64
 8003a98:	20002648 	.word	0x20002648
 8003a9c:	20002b4c 	.word	0x20002b4c
 8003aa0:	20002198 	.word	0x20002198
 8003aa4:	20002b6c 	.word	0x20002b6c
 8003aa8:	20001388 	.word	0x20001388
 8003aac:	20002b70 	.word	0x20002b70
 8003ab0:	20002b68 	.word	0x20002b68
 8003ab4:	20002b78 	.word	0x20002b78
 8003ab8:	3fec0000 	.word	0x3fec0000
 8003abc:	20002b74 	.word	0x20002b74
 8003ac0:	3fd00000 	.word	0x3fd00000
 8003ac4:	3fe00000 	.word	0x3fe00000
 8003ac8:	20002b6e 	.word	0x20002b6e
 8003acc:	20002b6a 	.word	0x20002b6a
 8003ad0:	20002b7a 	.word	0x20002b7a
 8003ad4:	20002b76 	.word	0x20002b76
 8003ad8:	20002b72 	.word	0x20002b72

08003adc <Rafael_get_LPFilter_output>:


int16_t Rafael_get_LPFilter_output()
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
	return RF_lowpass[BUFFSIZE];
 8003ae0:	4b03      	ldr	r3, [pc, #12]	; (8003af0 <Rafael_get_LPFilter_output+0x14>)
 8003ae2:	f9b3 34b0 	ldrsh.w	r3, [r3, #1200]	; 0x4b0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	20000ed8 	.word	0x20000ed8

08003af4 <Rafael_get_HPFilter_output>:
int16_t Rafael_get_HPFilter_output()
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
	return RF_highpass[BUFFSIZE];
 8003af8:	4b03      	ldr	r3, [pc, #12]	; (8003b08 <Rafael_get_HPFilter_output+0x14>)
 8003afa:	f9b3 34b0 	ldrsh.w	r3, [r3, #1200]	; 0x4b0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	20001388 	.word	0x20001388

08003b0c <Rafael_get_DRFilter_output>:
int16_t Rafael_get_DRFilter_output()
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
	return RF_derivative[BUFFSIZE];
 8003b10:	4b03      	ldr	r3, [pc, #12]	; (8003b20 <Rafael_get_DRFilter_output+0x14>)
 8003b12:	f9b3 34b0 	ldrsh.w	r3, [r3, #1200]	; 0x4b0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	20001838 	.word	0x20001838

08003b24 <Rafael_get_SQRFilter_output>:
int16_t Rafael_get_SQRFilter_output()
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
	return RF_squared[current];
 8003b28:	4b04      	ldr	r3, [pc, #16]	; (8003b3c <Rafael_get_SQRFilter_output+0x18>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a04      	ldr	r2, [pc, #16]	; (8003b40 <Rafael_get_SQRFilter_output+0x1c>)
 8003b2e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	20002b64 	.word	0x20002b64
 8003b40:	20001ce8 	.word	0x20001ce8

08003b44 <Rafael_get_MVFilter_output>:
int16_t Rafael_get_MVFilter_output()
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
	return RF_integral[current];
 8003b48:	4b04      	ldr	r3, [pc, #16]	; (8003b5c <Rafael_get_MVFilter_output+0x18>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a04      	ldr	r2, [pc, #16]	; (8003b60 <Rafael_get_MVFilter_output+0x1c>)
 8003b4e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	20002b64 	.word	0x20002b64
 8003b60:	20002198 	.word	0x20002198

08003b64 <Rafael_get_ThI1_output>:
int16_t Rafael_get_ThI1_output()
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
	return threshold_i1;
 8003b68:	4b03      	ldr	r3, [pc, #12]	; (8003b78 <Rafael_get_ThI1_output+0x14>)
 8003b6a:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	20002b6c 	.word	0x20002b6c

08003b7c <Rafael_get_ThF1_output>:
int16_t Rafael_get_ThF1_output()
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
	return threshold_f1;
 8003b80:	4b03      	ldr	r3, [pc, #12]	; (8003b90 <Rafael_get_ThF1_output+0x14>)
 8003b82:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	20002b70 	.word	0x20002b70

08003b94 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ba2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
}
 8003bba:	bf00      	nop
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
	...

08003bc8 <sendUSBData>:
uint8_t USBBuffer[2048];
uint8_t USBReciveBuffer[2048];
uint16_t USBBuffer_index = 0;

void sendUSBData (uint8_t* Buf, uint16_t Len)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	807b      	strh	r3, [r7, #2]
	memcpy(&USBBuffer[USBBuffer_index], Buf, Len);
 8003bd4:	4b13      	ldr	r3, [pc, #76]	; (8003c24 <sendUSBData+0x5c>)
 8003bd6:	881b      	ldrh	r3, [r3, #0]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	4b13      	ldr	r3, [pc, #76]	; (8003c28 <sendUSBData+0x60>)
 8003bdc:	4413      	add	r3, r2
 8003bde:	887a      	ldrh	r2, [r7, #2]
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f009 fffe 	bl	800dbe4 <memcpy>
	USBBuffer_index += Len;
 8003be8:	4b0e      	ldr	r3, [pc, #56]	; (8003c24 <sendUSBData+0x5c>)
 8003bea:	881a      	ldrh	r2, [r3, #0]
 8003bec:	887b      	ldrh	r3, [r7, #2]
 8003bee:	4413      	add	r3, r2
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <sendUSBData+0x5c>)
 8003bf4:	801a      	strh	r2, [r3, #0]
	if (USBBuffer_index>2000)
 8003bf6:	4b0b      	ldr	r3, [pc, #44]	; (8003c24 <sendUSBData+0x5c>)
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003bfe:	d90c      	bls.n	8003c1a <sendUSBData+0x52>
	{
		while (CDC_Transmit_FS(USBBuffer, USBBuffer_index)!= USBD_OK){};
 8003c00:	bf00      	nop
 8003c02:	4b08      	ldr	r3, [pc, #32]	; (8003c24 <sendUSBData+0x5c>)
 8003c04:	881b      	ldrh	r3, [r3, #0]
 8003c06:	4619      	mov	r1, r3
 8003c08:	4807      	ldr	r0, [pc, #28]	; (8003c28 <sendUSBData+0x60>)
 8003c0a:	f009 fb19 	bl	800d240 <CDC_Transmit_FS>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1f6      	bne.n	8003c02 <sendUSBData+0x3a>
		USBBuffer_index = 0;
 8003c14:	4b03      	ldr	r3, [pc, #12]	; (8003c24 <sendUSBData+0x5c>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	801a      	strh	r2, [r3, #0]
	}
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	20003d20 	.word	0x20003d20
 8003c28:	20002d20 	.word	0x20002d20

08003c2c <findStrEnd>:

uint16_t findStrEnd ()
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
	uint16_t end = 10;
 8003c32:	230a      	movs	r3, #10
 8003c34:	80fb      	strh	r3, [r7, #6]
	while (str[end]!='\0')
 8003c36:	e005      	b.n	8003c44 <findStrEnd+0x18>
	{
		end++;
 8003c38:	88fb      	ldrh	r3, [r7, #6]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	80fb      	strh	r3, [r7, #6]
		if (end == 250)
 8003c3e:	88fb      	ldrh	r3, [r7, #6]
 8003c40:	2bfa      	cmp	r3, #250	; 0xfa
 8003c42:	d005      	beq.n	8003c50 <findStrEnd+0x24>
	while (str[end]!='\0')
 8003c44:	88fb      	ldrh	r3, [r7, #6]
 8003c46:	4a06      	ldr	r2, [pc, #24]	; (8003c60 <findStrEnd+0x34>)
 8003c48:	5cd3      	ldrb	r3, [r2, r3]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f4      	bne.n	8003c38 <findStrEnd+0xc>
 8003c4e:	e000      	b.n	8003c52 <findStrEnd+0x26>
		{
			break;
 8003c50:	bf00      	nop
		}
	}
	return end;
 8003c52:	88fb      	ldrh	r3, [r7, #6]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	20002c24 	.word	0x20002c24

08003c64 <parseLine>:



void parseLine (uint8_t* Buf, uint32_t Len)
{//Function parse one line from serial port
 8003c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c68:	b0a3      	sub	sp, #140	; 0x8c
 8003c6a:	af0e      	add	r7, sp, #56	; 0x38
 8003c6c:	61f8      	str	r0, [r7, #28]
 8003c6e:	61b9      	str	r1, [r7, #24]
	//In line can be command or data
	if (Len>6)
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	2b06      	cmp	r3, #6
 8003c74:	d97f      	bls.n	8003d76 <parseLine+0x112>
	{//command mast be longer than 6 bytes
		if (Buf[0]==0x2B && Buf[1]==0x2B && Buf[2]==0x2B)
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	2b2b      	cmp	r3, #43	; 0x2b
 8003c7c:	d17b      	bne.n	8003d76 <parseLine+0x112>
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	3301      	adds	r3, #1
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	2b2b      	cmp	r3, #43	; 0x2b
 8003c86:	d176      	bne.n	8003d76 <parseLine+0x112>
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	3302      	adds	r3, #2
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b2b      	cmp	r3, #43	; 0x2b
 8003c90:	d171      	bne.n	8003d76 <parseLine+0x112>
		{//three ++ indicate command
			switch (Buf[3])
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	3303      	adds	r3, #3
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b41      	cmp	r3, #65	; 0x41
 8003c9a:	d002      	beq.n	8003ca2 <parseLine+0x3e>
 8003c9c:	2b42      	cmp	r3, #66	; 0x42
 8003c9e:	d014      	beq.n	8003cca <parseLine+0x66>
 8003ca0:	e057      	b.n	8003d52 <parseLine+0xee>
			{
			case changeDataFormat:
				applicationState.dataType = Buf[4];
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	791a      	ldrb	r2, [r3, #4]
 8003ca6:	4b95      	ldr	r3, [pc, #596]	; (8003efc <parseLine+0x298>)
 8003ca8:	701a      	strb	r2, [r3, #0]
				sprintf(str,"OK, done.   \r\n");
 8003caa:	4995      	ldr	r1, [pc, #596]	; (8003f00 <parseLine+0x29c>)
 8003cac:	4895      	ldr	r0, [pc, #596]	; (8003f04 <parseLine+0x2a0>)
 8003cae:	f00a fe2f 	bl	800e910 <siprintf>
				while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8003cb2:	bf00      	nop
 8003cb4:	f7ff ffba 	bl	8003c2c <findStrEnd>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4891      	ldr	r0, [pc, #580]	; (8003f04 <parseLine+0x2a0>)
 8003cbe:	f009 fabf 	bl	800d240 <CDC_Transmit_FS>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1f5      	bne.n	8003cb4 <parseLine+0x50>
				break;
 8003cc8:	e054      	b.n	8003d74 <parseLine+0x110>
			case changeSelectedAlgorithm:
				applicationState.selectedImplementation = Buf[4];
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	791a      	ldrb	r2, [r3, #4]
 8003cce:	4b8b      	ldr	r3, [pc, #556]	; (8003efc <parseLine+0x298>)
 8003cd0:	705a      	strb	r2, [r3, #1]
				if (applicationState.selectedImplementation == hoomam650)
 8003cd2:	4b8a      	ldr	r3, [pc, #552]	; (8003efc <parseLine+0x298>)
 8003cd4:	785b      	ldrb	r3, [r3, #1]
 8003cd6:	2b31      	cmp	r3, #49	; 0x31
 8003cd8:	d110      	bne.n	8003cfc <parseLine+0x98>
				{
					PT_init();
 8003cda:	f7fd f95f 	bl	8000f9c <PT_init>
					sprintf(str,"OK, done.   \r\n");
 8003cde:	4988      	ldr	r1, [pc, #544]	; (8003f00 <parseLine+0x29c>)
 8003ce0:	4888      	ldr	r0, [pc, #544]	; (8003f04 <parseLine+0x2a0>)
 8003ce2:	f00a fe15 	bl	800e910 <siprintf>
					while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8003ce6:	bf00      	nop
 8003ce8:	f7ff ffa0 	bl	8003c2c <findStrEnd>
 8003cec:	4603      	mov	r3, r0
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4884      	ldr	r0, [pc, #528]	; (8003f04 <parseLine+0x2a0>)
 8003cf2:	f009 faa5 	bl	800d240 <CDC_Transmit_FS>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1f5      	bne.n	8003ce8 <parseLine+0x84>
				}
				if (applicationState.selectedImplementation == rafalmmoreira)
 8003cfc:	4b7f      	ldr	r3, [pc, #508]	; (8003efc <parseLine+0x298>)
 8003cfe:	785b      	ldrb	r3, [r3, #1]
 8003d00:	2b32      	cmp	r3, #50	; 0x32
 8003d02:	d110      	bne.n	8003d26 <parseLine+0xc2>
				{
					Rafael_init();
 8003d04:	f7fe fad4 	bl	80022b0 <Rafael_init>
					sprintf(str,"OK, done.   \r\n");
 8003d08:	497d      	ldr	r1, [pc, #500]	; (8003f00 <parseLine+0x29c>)
 8003d0a:	487e      	ldr	r0, [pc, #504]	; (8003f04 <parseLine+0x2a0>)
 8003d0c:	f00a fe00 	bl	800e910 <siprintf>
					while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8003d10:	bf00      	nop
 8003d12:	f7ff ff8b 	bl	8003c2c <findStrEnd>
 8003d16:	4603      	mov	r3, r0
 8003d18:	4619      	mov	r1, r3
 8003d1a:	487a      	ldr	r0, [pc, #488]	; (8003f04 <parseLine+0x2a0>)
 8003d1c:	f009 fa90 	bl	800d240 <CDC_Transmit_FS>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1f5      	bne.n	8003d12 <parseLine+0xae>
				}
				if (applicationState.selectedImplementation == marower)
 8003d26:	4b75      	ldr	r3, [pc, #468]	; (8003efc <parseLine+0x298>)
 8003d28:	785b      	ldrb	r3, [r3, #1]
 8003d2a:	2b33      	cmp	r3, #51	; 0x33
 8003d2c:	d121      	bne.n	8003d72 <parseLine+0x10e>
				{
					arm_PT_init();
 8003d2e:	f7fe f9bb 	bl	80020a8 <arm_PT_init>
					sprintf(str,"OK, done.   \r\n");
 8003d32:	4973      	ldr	r1, [pc, #460]	; (8003f00 <parseLine+0x29c>)
 8003d34:	4873      	ldr	r0, [pc, #460]	; (8003f04 <parseLine+0x2a0>)
 8003d36:	f00a fdeb 	bl	800e910 <siprintf>
					while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8003d3a:	bf00      	nop
 8003d3c:	f7ff ff76 	bl	8003c2c <findStrEnd>
 8003d40:	4603      	mov	r3, r0
 8003d42:	4619      	mov	r1, r3
 8003d44:	486f      	ldr	r0, [pc, #444]	; (8003f04 <parseLine+0x2a0>)
 8003d46:	f009 fa7b 	bl	800d240 <CDC_Transmit_FS>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1f5      	bne.n	8003d3c <parseLine+0xd8>
				}
				break;
 8003d50:	e00f      	b.n	8003d72 <parseLine+0x10e>
			default:
				sprintf(str,"error...\r\n");
 8003d52:	496d      	ldr	r1, [pc, #436]	; (8003f08 <parseLine+0x2a4>)
 8003d54:	486b      	ldr	r0, [pc, #428]	; (8003f04 <parseLine+0x2a0>)
 8003d56:	f00a fddb 	bl	800e910 <siprintf>
				while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8003d5a:	bf00      	nop
 8003d5c:	f7ff ff66 	bl	8003c2c <findStrEnd>
 8003d60:	4603      	mov	r3, r0
 8003d62:	4619      	mov	r1, r3
 8003d64:	4867      	ldr	r0, [pc, #412]	; (8003f04 <parseLine+0x2a0>)
 8003d66:	f009 fa6b 	bl	800d240 <CDC_Transmit_FS>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1f5      	bne.n	8003d5c <parseLine+0xf8>
				break;
 8003d70:	e000      	b.n	8003d74 <parseLine+0x110>
				break;
 8003d72:	bf00      	nop
			}
			return;
 8003d74:	e139      	b.n	8003fea <parseLine+0x386>
		}
	}

	int16_t dataSample;
	switch (applicationState.dataType)
 8003d76:	4b61      	ldr	r3, [pc, #388]	; (8003efc <parseLine+0x298>)
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	2b31      	cmp	r3, #49	; 0x31
 8003d7c:	d00d      	beq.n	8003d9a <parseLine+0x136>
 8003d7e:	2b32      	cmp	r3, #50	; 0x32
 8003d80:	d112      	bne.n	8003da8 <parseLine+0x144>
	{//decode data
	case int16asBytes:
		dataSample = (Buf[0]<<8)|Buf[1];
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	021b      	lsls	r3, r3, #8
 8003d88:	b21a      	sxth	r2, r3
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	b21b      	sxth	r3, r3
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

		break;
 8003d98:	e016      	b.n	8003dc8 <parseLine+0x164>
	case intasString:
		dataSample = atoi (Buf);
 8003d9a:	69f8      	ldr	r0, [r7, #28]
 8003d9c:	f009 fef4 	bl	800db88 <atoi>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

		break;
 8003da6:	e00f      	b.n	8003dc8 <parseLine+0x164>
	default:
		sprintf(str,"error...\r\n");
 8003da8:	4957      	ldr	r1, [pc, #348]	; (8003f08 <parseLine+0x2a4>)
 8003daa:	4856      	ldr	r0, [pc, #344]	; (8003f04 <parseLine+0x2a0>)
 8003dac:	f00a fdb0 	bl	800e910 <siprintf>
		while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8003db0:	bf00      	nop
 8003db2:	f7ff ff3b 	bl	8003c2c <findStrEnd>
 8003db6:	4603      	mov	r3, r0
 8003db8:	4619      	mov	r1, r3
 8003dba:	4852      	ldr	r0, [pc, #328]	; (8003f04 <parseLine+0x2a0>)
 8003dbc:	f009 fa40 	bl	800d240 <CDC_Transmit_FS>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1f5      	bne.n	8003db2 <parseLine+0x14e>
		return;
 8003dc6:	e110      	b.n	8003fea <parseLine+0x386>
	float32_t s3_f32;
	float32_t s4_f32;
	float32_t s5_f32;
	float32_t ThI1_f32;
	float32_t ThF1_f32;
	switch (applicationState.selectedImplementation)
 8003dc8:	4b4c      	ldr	r3, [pc, #304]	; (8003efc <parseLine+0x298>)
 8003dca:	785b      	ldrb	r3, [r3, #1]
 8003dcc:	2b33      	cmp	r3, #51	; 0x33
 8003dce:	f000 80a1 	beq.w	8003f14 <parseLine+0x2b0>
 8003dd2:	2b33      	cmp	r3, #51	; 0x33
 8003dd4:	f300 8108 	bgt.w	8003fe8 <parseLine+0x384>
 8003dd8:	2b31      	cmp	r3, #49	; 0x31
 8003dda:	d002      	beq.n	8003de2 <parseLine+0x17e>
 8003ddc:	2b32      	cmp	r3, #50	; 0x32
 8003dde:	d046      	beq.n	8003e6e <parseLine+0x20a>
		ThF1_f32 = arm_get_ThF1_output();
		sprintf(str,"%d,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\r\n", delay, s1_f32, s2_f32, s3_f32, s4_f32, s5_f32, ThI1_f32, ThF1_f32);
		sendUSBData (str, findStrEnd());
		break;
	default:
		return;
 8003de0:	e102      	b.n	8003fe8 <parseLine+0x384>
		delay = PT_StateMachine (dataSample);
 8003de2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fd fa0a 	bl	8001200 <PT_StateMachine>
 8003dec:	4603      	mov	r3, r0
 8003dee:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		s1 = PT_get_LPFilter_output();
 8003df2:	f7fe f8e3 	bl	8001fbc <PT_get_LPFilter_output>
 8003df6:	4603      	mov	r3, r0
 8003df8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		s2 = PT_get_HPFilter_output();
 8003dfa:	f7fe f8eb 	bl	8001fd4 <PT_get_HPFilter_output>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	85bb      	strh	r3, [r7, #44]	; 0x2c
		s3 = PT_get_DRFilter_output();
 8003e02:	f7fe f8f3 	bl	8001fec <PT_get_DRFilter_output>
 8003e06:	4603      	mov	r3, r0
 8003e08:	857b      	strh	r3, [r7, #42]	; 0x2a
		s4 = PT_get_SQRFilter_output();
 8003e0a:	f7fe f907 	bl	800201c <PT_get_SQRFilter_output>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	853b      	strh	r3, [r7, #40]	; 0x28
		s5 = PT_get_MVFilter_output();
 8003e12:	f7fe f8f7 	bl	8002004 <PT_get_MVFilter_output>
 8003e16:	4603      	mov	r3, r0
 8003e18:	84fb      	strh	r3, [r7, #38]	; 0x26
		ThI1 = PT_get_ThI1_output();
 8003e1a:	f7fe f90b 	bl	8002034 <PT_get_ThI1_output>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	84bb      	strh	r3, [r7, #36]	; 0x24
		ThF1 = PT_get_ThF1_output();
 8003e22:	f7fe f913 	bl	800204c <PT_get_ThF1_output>
 8003e26:	4603      	mov	r3, r0
 8003e28:	847b      	strh	r3, [r7, #34]	; 0x22
		sprintf(str,"%d,%d,%d,%d,%u,%u,%u,%d\r\n", delay, s1, s2, s3, s4, s5, ThI1, ThF1);
 8003e2a:	f9b7 604c 	ldrsh.w	r6, [r7, #76]	; 0x4c
 8003e2e:	f9b7 c02e 	ldrsh.w	ip, [r7, #46]	; 0x2e
 8003e32:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003e36:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8003e3a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8003e3c:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8003e3e:	f9b7 4024 	ldrsh.w	r4, [r7, #36]	; 0x24
 8003e42:	f9b7 5022 	ldrsh.w	r5, [r7, #34]	; 0x22
 8003e46:	9505      	str	r5, [sp, #20]
 8003e48:	9404      	str	r4, [sp, #16]
 8003e4a:	9003      	str	r0, [sp, #12]
 8003e4c:	9102      	str	r1, [sp, #8]
 8003e4e:	9201      	str	r2, [sp, #4]
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	4663      	mov	r3, ip
 8003e54:	4632      	mov	r2, r6
 8003e56:	492d      	ldr	r1, [pc, #180]	; (8003f0c <parseLine+0x2a8>)
 8003e58:	482a      	ldr	r0, [pc, #168]	; (8003f04 <parseLine+0x2a0>)
 8003e5a:	f00a fd59 	bl	800e910 <siprintf>
		sendUSBData (str, findStrEnd());
 8003e5e:	f7ff fee5 	bl	8003c2c <findStrEnd>
 8003e62:	4603      	mov	r3, r0
 8003e64:	4619      	mov	r1, r3
 8003e66:	4827      	ldr	r0, [pc, #156]	; (8003f04 <parseLine+0x2a0>)
 8003e68:	f7ff feae 	bl	8003bc8 <sendUSBData>
		break;
 8003e6c:	e0bd      	b.n	8003fea <parseLine+0x386>
		delay = Rafael_PanTompkins(dataSample);
 8003e6e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7fe fa9c 	bl	80023b0 <Rafael_PanTompkins>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		s1 = Rafael_get_LPFilter_output();
 8003e7e:	f7ff fe2d 	bl	8003adc <Rafael_get_LPFilter_output>
 8003e82:	4603      	mov	r3, r0
 8003e84:	85fb      	strh	r3, [r7, #46]	; 0x2e
		s2 = Rafael_get_HPFilter_output();
 8003e86:	f7ff fe35 	bl	8003af4 <Rafael_get_HPFilter_output>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	85bb      	strh	r3, [r7, #44]	; 0x2c
		s3 = Rafael_get_DRFilter_output();
 8003e8e:	f7ff fe3d 	bl	8003b0c <Rafael_get_DRFilter_output>
 8003e92:	4603      	mov	r3, r0
 8003e94:	857b      	strh	r3, [r7, #42]	; 0x2a
		s4 = Rafael_get_SQRFilter_output();
 8003e96:	f7ff fe45 	bl	8003b24 <Rafael_get_SQRFilter_output>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	853b      	strh	r3, [r7, #40]	; 0x28
		s5 = Rafael_get_MVFilter_output();
 8003e9e:	f7ff fe51 	bl	8003b44 <Rafael_get_MVFilter_output>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	84fb      	strh	r3, [r7, #38]	; 0x26
		ThI1 = Rafael_get_ThI1_output();
 8003ea6:	f7ff fe5d 	bl	8003b64 <Rafael_get_ThI1_output>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	84bb      	strh	r3, [r7, #36]	; 0x24
		ThF1 = Rafael_get_ThF1_output();
 8003eae:	f7ff fe65 	bl	8003b7c <Rafael_get_ThF1_output>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	847b      	strh	r3, [r7, #34]	; 0x22
		sprintf(str,"%d,%d,%d,%d,%d,%d,%d,%d\r\n", delay, s1, s2, s3, s4, s5, ThI1, ThF1);
 8003eb6:	f9b7 604c 	ldrsh.w	r6, [r7, #76]	; 0x4c
 8003eba:	f9b7 c02e 	ldrsh.w	ip, [r7, #46]	; 0x2e
 8003ebe:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003ec2:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8003ec6:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8003ec8:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8003eca:	f9b7 4024 	ldrsh.w	r4, [r7, #36]	; 0x24
 8003ece:	f9b7 5022 	ldrsh.w	r5, [r7, #34]	; 0x22
 8003ed2:	9505      	str	r5, [sp, #20]
 8003ed4:	9404      	str	r4, [sp, #16]
 8003ed6:	9003      	str	r0, [sp, #12]
 8003ed8:	9102      	str	r1, [sp, #8]
 8003eda:	9201      	str	r2, [sp, #4]
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	4663      	mov	r3, ip
 8003ee0:	4632      	mov	r2, r6
 8003ee2:	490b      	ldr	r1, [pc, #44]	; (8003f10 <parseLine+0x2ac>)
 8003ee4:	4807      	ldr	r0, [pc, #28]	; (8003f04 <parseLine+0x2a0>)
 8003ee6:	f00a fd13 	bl	800e910 <siprintf>
		sendUSBData (str, findStrEnd());
 8003eea:	f7ff fe9f 	bl	8003c2c <findStrEnd>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4804      	ldr	r0, [pc, #16]	; (8003f04 <parseLine+0x2a0>)
 8003ef4:	f7ff fe68 	bl	8003bc8 <sendUSBData>
		break;
 8003ef8:	e077      	b.n	8003fea <parseLine+0x386>
 8003efa:	bf00      	nop
 8003efc:	20002c20 	.word	0x20002c20
 8003f00:	08012500 	.word	0x08012500
 8003f04:	20002c24 	.word	0x20002c24
 8003f08:	08012510 	.word	0x08012510
 8003f0c:	0801251c 	.word	0x0801251c
 8003f10:	08012538 	.word	0x08012538
		delay = arm_PT_ST(dataSample);
 8003f14:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7fe f91d 	bl	8002158 <arm_PT_ST>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		s1_f32 = arm_get_LPFilter_output();
 8003f24:	f7fe f966 	bl	80021f4 <arm_get_LPFilter_output>
 8003f28:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
		s2_f32 = arm_get_HPFilter_output();
 8003f2c:	f7fe f970 	bl	8002210 <arm_get_HPFilter_output>
 8003f30:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
		s3_f32 = arm_get_DRFilter_output();
 8003f34:	f7fe f97a 	bl	800222c <arm_get_DRFilter_output>
 8003f38:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
		s4_f32 = arm_get_SQRFilter_output();
 8003f3c:	f7fe f984 	bl	8002248 <arm_get_SQRFilter_output>
 8003f40:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
		s5_f32 = arm_get_MVFilter_output();
 8003f44:	f7fe f98e 	bl	8002264 <arm_get_MVFilter_output>
 8003f48:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
		ThI1_f32 = arm_get_ThI1_output();
 8003f4c:	f7fe f998 	bl	8002280 <arm_get_ThI1_output>
 8003f50:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
		ThF1_f32 = arm_get_ThF1_output();
 8003f54:	f7fe f9a0 	bl	8002298 <arm_get_ThF1_output>
 8003f58:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
		sprintf(str,"%d,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\r\n", delay, s1_f32, s2_f32, s3_f32, s4_f32, s5_f32, ThI1_f32, ThF1_f32);
 8003f5c:	f9b7 604c 	ldrsh.w	r6, [r7, #76]	; 0x4c
 8003f60:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003f62:	f7fc fac9 	bl	80004f8 <__aeabi_f2d>
 8003f66:	4680      	mov	r8, r0
 8003f68:	4689      	mov	r9, r1
 8003f6a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003f6c:	f7fc fac4 	bl	80004f8 <__aeabi_f2d>
 8003f70:	4682      	mov	sl, r0
 8003f72:	468b      	mov	fp, r1
 8003f74:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003f76:	f7fc fabf 	bl	80004f8 <__aeabi_f2d>
 8003f7a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003f7e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003f80:	f7fc faba 	bl	80004f8 <__aeabi_f2d>
 8003f84:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003f88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003f8a:	f7fc fab5 	bl	80004f8 <__aeabi_f2d>
 8003f8e:	e9c7 0100 	strd	r0, r1, [r7]
 8003f92:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003f94:	f7fc fab0 	bl	80004f8 <__aeabi_f2d>
 8003f98:	4604      	mov	r4, r0
 8003f9a:	460d      	mov	r5, r1
 8003f9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f9e:	f7fc faab 	bl	80004f8 <__aeabi_f2d>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8003faa:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8003fae:	ed97 7b00 	vldr	d7, [r7]
 8003fb2:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003fb6:	ed97 7b02 	vldr	d7, [r7, #8]
 8003fba:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003fbe:	ed97 7b04 	vldr	d7, [r7, #16]
 8003fc2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003fc6:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8003fca:	e9cd 8900 	strd	r8, r9, [sp]
 8003fce:	4632      	mov	r2, r6
 8003fd0:	4908      	ldr	r1, [pc, #32]	; (8003ff4 <parseLine+0x390>)
 8003fd2:	4809      	ldr	r0, [pc, #36]	; (8003ff8 <parseLine+0x394>)
 8003fd4:	f00a fc9c 	bl	800e910 <siprintf>
		sendUSBData (str, findStrEnd());
 8003fd8:	f7ff fe28 	bl	8003c2c <findStrEnd>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4805      	ldr	r0, [pc, #20]	; (8003ff8 <parseLine+0x394>)
 8003fe2:	f7ff fdf1 	bl	8003bc8 <sendUSBData>
		break;
 8003fe6:	e000      	b.n	8003fea <parseLine+0x386>
		return;
 8003fe8:	bf00      	nop
		break;
	}
}
 8003fea:	3754      	adds	r7, #84	; 0x54
 8003fec:	46bd      	mov	sp, r7
 8003fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ff2:	bf00      	nop
 8003ff4:	08012554 	.word	0x08012554
 8003ff8:	20002c24 	.word	0x20002c24

08003ffc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004002:	f000 fbcb 	bl	800479c <HAL_Init>

  /* USER CODE BEGIN Init */
  applicationState.dataType = int16asBytes;
 8004006:	4b2b      	ldr	r3, [pc, #172]	; (80040b4 <main+0xb8>)
 8004008:	2232      	movs	r2, #50	; 0x32
 800400a:	701a      	strb	r2, [r3, #0]
  applicationState.selectedImplementation = hoomam650;
 800400c:	4b29      	ldr	r3, [pc, #164]	; (80040b4 <main+0xb8>)
 800400e:	2231      	movs	r2, #49	; 0x31
 8004010:	705a      	strb	r2, [r3, #1]
  PT_init();
 8004012:	f7fc ffc3 	bl	8000f9c <PT_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004016:	f000 f859 	bl	80040cc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800401a:	f000 f8c3 	bl	80041a4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800401e:	f000 f945 	bl	80042ac <MX_GPIO_Init>
  MX_USB_Device_Init();
 8004022:	f009 f827 	bl	800d074 <MX_USB_Device_Init>
  MX_I2C1_Init();
 8004026:	f000 f8db 	bl	80041e0 <MX_I2C1_Init>
  MX_TIM16_Init();
 800402a:	f000 f919 	bl	8004260 <MX_TIM16_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  extern uint32_t byteInBuffer;
  extern uint8_t* bufferPointer;
  extern uint8_t bufferFlag;
  HAL_TIM_Base_Start_IT(&htim16);
 800402e:	4822      	ldr	r0, [pc, #136]	; (80040b8 <main+0xbc>)
 8004030:	f004 fb2a 	bl	8008688 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if ((byteInBuffer>0) && (bufferFlag == 1))
 8004034:	4b21      	ldr	r3, [pc, #132]	; (80040bc <main+0xc0>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0fb      	beq.n	8004034 <main+0x38>
 800403c:	4b20      	ldr	r3, [pc, #128]	; (80040c0 <main+0xc4>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d1f7      	bne.n	8004034 <main+0x38>
	 	  {
		  	  memcpy(&USBReciveBuffer[0],bufferPointer, byteInBuffer);
 8004044:	4b1f      	ldr	r3, [pc, #124]	; (80040c4 <main+0xc8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a1c      	ldr	r2, [pc, #112]	; (80040bc <main+0xc0>)
 800404a:	6812      	ldr	r2, [r2, #0]
 800404c:	4619      	mov	r1, r3
 800404e:	481e      	ldr	r0, [pc, #120]	; (80040c8 <main+0xcc>)
 8004050:	f009 fdc8 	bl	800dbe4 <memcpy>
		  	  uint32_t dataCount = byteInBuffer;
 8004054:	4b19      	ldr	r3, [pc, #100]	; (80040bc <main+0xc0>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	603b      	str	r3, [r7, #0]
		  	  byteInBuffer = 0;
 800405a:	4b18      	ldr	r3, [pc, #96]	; (80040bc <main+0xc0>)
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]
	 		  uint32_t count = 0;
 8004060:	2300      	movs	r3, #0
 8004062:	60fb      	str	r3, [r7, #12]
	 		  uint32_t i = 0;
 8004064:	2300      	movs	r3, #0
 8004066:	60bb      	str	r3, [r7, #8]
	 		  uint32_t index = 0;
 8004068:	2300      	movs	r3, #0
 800406a:	607b      	str	r3, [r7, #4]
	 		  do
	 		  {
	 			  i++;
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	3301      	adds	r3, #1
 8004070:	60bb      	str	r3, [r7, #8]
	 			  count++;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	3301      	adds	r3, #1
 8004076:	60fb      	str	r3, [r7, #12]
	 			  if (USBReciveBuffer[i]=='\n')
 8004078:	4a13      	ldr	r2, [pc, #76]	; (80040c8 <main+0xcc>)
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	4413      	add	r3, r2
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2b0a      	cmp	r3, #10
 8004082:	d112      	bne.n	80040aa <main+0xae>
	 			  {
	 				 count++;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	3301      	adds	r3, #1
 8004088:	60fb      	str	r3, [r7, #12]
	 				 parseLine (&USBReciveBuffer[index], count);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a0e      	ldr	r2, [pc, #56]	; (80040c8 <main+0xcc>)
 800408e:	4413      	add	r3, r2
 8004090:	68f9      	ldr	r1, [r7, #12]
 8004092:	4618      	mov	r0, r3
 8004094:	f7ff fde6 	bl	8003c64 <parseLine>
	 				 index += count;
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4413      	add	r3, r2
 800409e:	607b      	str	r3, [r7, #4]
	 				 i++;
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	3301      	adds	r3, #1
 80040a4:	60bb      	str	r3, [r7, #8]
	 				 count = 0;
 80040a6:	2300      	movs	r3, #0
 80040a8:	60fb      	str	r3, [r7, #12]
	 			  }
	 		  }while (i<dataCount);
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d3dc      	bcc.n	800406c <main+0x70>
	  if ((byteInBuffer>0) && (bufferFlag == 1))
 80040b2:	e7bf      	b.n	8004034 <main+0x38>
 80040b4:	20002c20 	.word	0x20002c20
 80040b8:	20002bd4 	.word	0x20002bd4
 80040bc:	2000500c 	.word	0x2000500c
 80040c0:	200000a4 	.word	0x200000a4
 80040c4:	200000a0 	.word	0x200000a0
 80040c8:	20003520 	.word	0x20003520

080040cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b09a      	sub	sp, #104	; 0x68
 80040d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040d2:	f107 0320 	add.w	r3, r7, #32
 80040d6:	2248      	movs	r2, #72	; 0x48
 80040d8:	2100      	movs	r1, #0
 80040da:	4618      	mov	r0, r3
 80040dc:	f009 fd90 	bl	800dc00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040e0:	1d3b      	adds	r3, r7, #4
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	605a      	str	r2, [r3, #4]
 80040e8:	609a      	str	r2, [r3, #8]
 80040ea:	60da      	str	r2, [r3, #12]
 80040ec:	611a      	str	r2, [r3, #16]
 80040ee:	615a      	str	r2, [r3, #20]
 80040f0:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80040f2:	4b2b      	ldr	r3, [pc, #172]	; (80041a0 <SystemClock_Config+0xd4>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040fa:	4a29      	ldr	r2, [pc, #164]	; (80041a0 <SystemClock_Config+0xd4>)
 80040fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	4b27      	ldr	r3, [pc, #156]	; (80041a0 <SystemClock_Config+0xd4>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800410e:	2326      	movs	r3, #38	; 0x26
 8004110:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8004112:	2300      	movs	r3, #0
 8004114:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004116:	f44f 7380 	mov.w	r3, #256	; 0x100
 800411a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800411c:	2301      	movs	r3, #1
 800411e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004120:	2340      	movs	r3, #64	; 0x40
 8004122:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8004124:	2300      	movs	r3, #0
 8004126:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004128:	2360      	movs	r3, #96	; 0x60
 800412a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800412c:	2302      	movs	r3, #2
 800412e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004130:	2301      	movs	r3, #1
 8004132:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004134:	2300      	movs	r3, #0
 8004136:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8004138:	2320      	movs	r3, #32
 800413a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800413c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004140:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004142:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004146:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004148:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800414c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800414e:	f107 0320 	add.w	r3, r7, #32
 8004152:	4618      	mov	r0, r3
 8004154:	f003 f81e 	bl	8007194 <HAL_RCC_OscConfig>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800415e:	f000 f8d3 	bl	8004308 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8004162:	236f      	movs	r3, #111	; 0x6f
 8004164:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004166:	2303      	movs	r3, #3
 8004168:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800416e:	2300      	movs	r3, #0
 8004170:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004172:	2300      	movs	r3, #0
 8004174:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8004176:	2380      	movs	r3, #128	; 0x80
 8004178:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800417a:	2300      	movs	r3, #0
 800417c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800417e:	1d3b      	adds	r3, r7, #4
 8004180:	2103      	movs	r1, #3
 8004182:	4618      	mov	r0, r3
 8004184:	f003 fb7a 	bl	800787c <HAL_RCC_ClockConfig>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800418e:	f000 f8bb 	bl	8004308 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8004192:	f004 f90b 	bl	80083ac <HAL_RCCEx_EnableMSIPLLMode>
}
 8004196:	bf00      	nop
 8004198:	3768      	adds	r7, #104	; 0x68
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	58000400 	.word	0x58000400

080041a4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b094      	sub	sp, #80	; 0x50
 80041a8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041aa:	463b      	mov	r3, r7
 80041ac:	2250      	movs	r2, #80	; 0x50
 80041ae:	2100      	movs	r1, #0
 80041b0:	4618      	mov	r0, r3
 80041b2:	f009 fd25 	bl	800dc00 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80041b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041ba:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80041bc:	2300      	movs	r3, #0
 80041be:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80041c0:	2310      	movs	r3, #16
 80041c2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041c4:	463b      	mov	r3, r7
 80041c6:	4618      	mov	r0, r3
 80041c8:	f003 ff7a 	bl	80080c0 <HAL_RCCEx_PeriphCLKConfig>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80041d2:	f000 f899 	bl	8004308 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80041d6:	bf00      	nop
 80041d8:	3750      	adds	r7, #80	; 0x50
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
	...

080041e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80041e4:	4b1b      	ldr	r3, [pc, #108]	; (8004254 <MX_I2C1_Init+0x74>)
 80041e6:	4a1c      	ldr	r2, [pc, #112]	; (8004258 <MX_I2C1_Init+0x78>)
 80041e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80041ea:	4b1a      	ldr	r3, [pc, #104]	; (8004254 <MX_I2C1_Init+0x74>)
 80041ec:	4a1b      	ldr	r2, [pc, #108]	; (800425c <MX_I2C1_Init+0x7c>)
 80041ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80041f0:	4b18      	ldr	r3, [pc, #96]	; (8004254 <MX_I2C1_Init+0x74>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80041f6:	4b17      	ldr	r3, [pc, #92]	; (8004254 <MX_I2C1_Init+0x74>)
 80041f8:	2201      	movs	r2, #1
 80041fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80041fc:	4b15      	ldr	r3, [pc, #84]	; (8004254 <MX_I2C1_Init+0x74>)
 80041fe:	2200      	movs	r2, #0
 8004200:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004202:	4b14      	ldr	r3, [pc, #80]	; (8004254 <MX_I2C1_Init+0x74>)
 8004204:	2200      	movs	r2, #0
 8004206:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004208:	4b12      	ldr	r3, [pc, #72]	; (8004254 <MX_I2C1_Init+0x74>)
 800420a:	2200      	movs	r2, #0
 800420c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800420e:	4b11      	ldr	r3, [pc, #68]	; (8004254 <MX_I2C1_Init+0x74>)
 8004210:	2200      	movs	r2, #0
 8004212:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004214:	4b0f      	ldr	r3, [pc, #60]	; (8004254 <MX_I2C1_Init+0x74>)
 8004216:	2200      	movs	r2, #0
 8004218:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800421a:	480e      	ldr	r0, [pc, #56]	; (8004254 <MX_I2C1_Init+0x74>)
 800421c:	f000 fdc4 	bl	8004da8 <HAL_I2C_Init>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004226:	f000 f86f 	bl	8004308 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800422a:	2100      	movs	r1, #0
 800422c:	4809      	ldr	r0, [pc, #36]	; (8004254 <MX_I2C1_Init+0x74>)
 800422e:	f000 fe4a 	bl	8004ec6 <HAL_I2CEx_ConfigAnalogFilter>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004238:	f000 f866 	bl	8004308 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800423c:	2100      	movs	r1, #0
 800423e:	4805      	ldr	r0, [pc, #20]	; (8004254 <MX_I2C1_Init+0x74>)
 8004240:	f000 fe8c 	bl	8004f5c <HAL_I2CEx_ConfigDigitalFilter>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800424a:	f000 f85d 	bl	8004308 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800424e:	bf00      	nop
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	20002b80 	.word	0x20002b80
 8004258:	40005400 	.word	0x40005400
 800425c:	10707dbc 	.word	0x10707dbc

08004260 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004264:	4b0f      	ldr	r3, [pc, #60]	; (80042a4 <MX_TIM16_Init+0x44>)
 8004266:	4a10      	ldr	r2, [pc, #64]	; (80042a8 <MX_TIM16_Init+0x48>)
 8004268:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 639;
 800426a:	4b0e      	ldr	r3, [pc, #56]	; (80042a4 <MX_TIM16_Init+0x44>)
 800426c:	f240 227f 	movw	r2, #639	; 0x27f
 8004270:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004272:	4b0c      	ldr	r3, [pc, #48]	; (80042a4 <MX_TIM16_Init+0x44>)
 8004274:	2200      	movs	r2, #0
 8004276:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 8004278:	4b0a      	ldr	r3, [pc, #40]	; (80042a4 <MX_TIM16_Init+0x44>)
 800427a:	2264      	movs	r2, #100	; 0x64
 800427c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800427e:	4b09      	ldr	r3, [pc, #36]	; (80042a4 <MX_TIM16_Init+0x44>)
 8004280:	2200      	movs	r2, #0
 8004282:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004284:	4b07      	ldr	r3, [pc, #28]	; (80042a4 <MX_TIM16_Init+0x44>)
 8004286:	2200      	movs	r2, #0
 8004288:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800428a:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <MX_TIM16_Init+0x44>)
 800428c:	2200      	movs	r2, #0
 800428e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004290:	4804      	ldr	r0, [pc, #16]	; (80042a4 <MX_TIM16_Init+0x44>)
 8004292:	f004 f9a2 	bl	80085da <HAL_TIM_Base_Init>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800429c:	f000 f834 	bl	8004308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80042a0:	bf00      	nop
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	20002bd4 	.word	0x20002bd4
 80042a8:	40014400 	.word	0x40014400

080042ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80042b0:	2002      	movs	r0, #2
 80042b2:	f7ff fc6f 	bl	8003b94 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80042b6:	2001      	movs	r0, #1
 80042b8:	f7ff fc6c 	bl	8003b94 <LL_AHB2_GRP1_EnableClock>

}
 80042bc:	bf00      	nop
 80042be:	bd80      	pop	{r7, pc}

080042c0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim16)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a0c      	ldr	r2, [pc, #48]	; (80042fc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d110      	bne.n	80042f2 <HAL_TIM_PeriodElapsedCallback+0x32>
  {
	  if (USBBuffer_index> 0)
 80042d0:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80042d2:	881b      	ldrh	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00c      	beq.n	80042f2 <HAL_TIM_PeriodElapsedCallback+0x32>
	  {
		  while (CDC_Transmit_FS(USBBuffer, USBBuffer_index)!= USBD_OK){};
 80042d8:	bf00      	nop
 80042da:	4b09      	ldr	r3, [pc, #36]	; (8004300 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	4619      	mov	r1, r3
 80042e0:	4808      	ldr	r0, [pc, #32]	; (8004304 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80042e2:	f008 ffad 	bl	800d240 <CDC_Transmit_FS>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1f6      	bne.n	80042da <HAL_TIM_PeriodElapsedCallback+0x1a>
		  USBBuffer_index = 0;
 80042ec:	4b04      	ldr	r3, [pc, #16]	; (8004300 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	801a      	strh	r2, [r3, #0]
	  }
  }
}
 80042f2:	bf00      	nop
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	20002bd4 	.word	0x20002bd4
 8004300:	20003d20 	.word	0x20003d20
 8004304:	20002d20 	.word	0x20002d20

08004308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800430c:	b672      	cpsid	i
}
 800430e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004310:	e7fe      	b.n	8004310 <Error_Handler+0x8>

08004312 <LL_AHB2_GRP1_EnableClock>:
{
 8004312:	b480      	push	{r7}
 8004314:	b085      	sub	sp, #20
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800431a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800431e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004320:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4313      	orrs	r3, r2
 8004328:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800432a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800432e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4013      	ands	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004336:	68fb      	ldr	r3, [r7, #12]
}
 8004338:	bf00      	nop
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800434c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004350:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004352:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4313      	orrs	r3, r2
 800435a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800435c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004360:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4013      	ands	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004368:	68fb      	ldr	r3, [r7, #12]
}
 800436a:	bf00      	nop
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004376:	b480      	push	{r7}
 8004378:	b085      	sub	sp, #20
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800437e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004382:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004384:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4313      	orrs	r3, r2
 800438c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800438e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004392:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4013      	ands	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800439a:	68fb      	ldr	r3, [r7, #12]
}
 800439c:	bf00      	nop
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043ac:	bf00      	nop
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
	...

080043b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b09c      	sub	sp, #112	; 0x70
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	605a      	str	r2, [r3, #4]
 80043ca:	609a      	str	r2, [r3, #8]
 80043cc:	60da      	str	r2, [r3, #12]
 80043ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80043d0:	f107 030c 	add.w	r3, r7, #12
 80043d4:	2250      	movs	r2, #80	; 0x50
 80043d6:	2100      	movs	r1, #0
 80043d8:	4618      	mov	r0, r3
 80043da:	f009 fc11 	bl	800dc00 <memset>
  if(hi2c->Instance==I2C1)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a17      	ldr	r2, [pc, #92]	; (8004440 <HAL_I2C_MspInit+0x88>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d126      	bne.n	8004436 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80043e8:	2304      	movs	r3, #4
 80043ea:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80043ec:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80043f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80043f2:	f107 030c 	add.w	r3, r7, #12
 80043f6:	4618      	mov	r0, r3
 80043f8:	f003 fe62 	bl	80080c0 <HAL_RCCEx_PeriphCLKConfig>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004402:	f7ff ff81 	bl	8004308 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004406:	2002      	movs	r0, #2
 8004408:	f7ff ff83 	bl	8004312 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800440c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004410:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004412:	2312      	movs	r3, #18
 8004414:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004416:	2300      	movs	r3, #0
 8004418:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800441a:	2300      	movs	r3, #0
 800441c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800441e:	2304      	movs	r3, #4
 8004420:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004422:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004426:	4619      	mov	r1, r3
 8004428:	4806      	ldr	r0, [pc, #24]	; (8004444 <HAL_I2C_MspInit+0x8c>)
 800442a:	f000 fb4d 	bl	8004ac8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800442e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004432:	f7ff ff87 	bl	8004344 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004436:	bf00      	nop
 8004438:	3770      	adds	r7, #112	; 0x70
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	40005400 	.word	0x40005400
 8004444:	48000400 	.word	0x48000400

08004448 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a09      	ldr	r2, [pc, #36]	; (800447c <HAL_TIM_Base_MspInit+0x34>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d10b      	bne.n	8004472 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800445a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800445e:	f7ff ff8a 	bl	8004376 <LL_APB2_GRP1_EnableClock>
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004462:	2200      	movs	r2, #0
 8004464:	2100      	movs	r1, #0
 8004466:	2019      	movs	r0, #25
 8004468:	f000 faf9 	bl	8004a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800446c:	2019      	movs	r0, #25
 800446e:	f000 fb10 	bl	8004a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8004472:	bf00      	nop
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40014400 	.word	0x40014400

08004480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004484:	e7fe      	b.n	8004484 <NMI_Handler+0x4>

08004486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004486:	b480      	push	{r7}
 8004488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800448a:	e7fe      	b.n	800448a <HardFault_Handler+0x4>

0800448c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004490:	e7fe      	b.n	8004490 <MemManage_Handler+0x4>

08004492 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004492:	b480      	push	{r7}
 8004494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004496:	e7fe      	b.n	8004496 <BusFault_Handler+0x4>

08004498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800449c:	e7fe      	b.n	800449c <UsageFault_Handler+0x4>

0800449e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800449e:	b480      	push	{r7}
 80044a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044a2:	bf00      	nop
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044b0:	bf00      	nop
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044ba:	b480      	push	{r7}
 80044bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044be:	bf00      	nop
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044cc:	f000 f9c0 	bl	8004850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044d0:	bf00      	nop
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80044d8:	4802      	ldr	r0, [pc, #8]	; (80044e4 <USB_LP_IRQHandler+0x10>)
 80044da:	f000 fe86 	bl	80051ea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80044de:	bf00      	nop
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	20005210 	.word	0x20005210

080044e8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80044ec:	4802      	ldr	r0, [pc, #8]	; (80044f8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80044ee:	f004 f919 	bl	8008724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80044f2:	bf00      	nop
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	20002bd4 	.word	0x20002bd4

080044fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
	return 1;
 8004500:	2301      	movs	r3, #1
}
 8004502:	4618      	mov	r0, r3
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <_kill>:

int _kill(int pid, int sig)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004516:	f009 fb3b 	bl	800db90 <__errno>
 800451a:	4603      	mov	r3, r0
 800451c:	2216      	movs	r2, #22
 800451e:	601a      	str	r2, [r3, #0]
	return -1;
 8004520:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004524:	4618      	mov	r0, r3
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <_exit>:

void _exit (int status)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004534:	f04f 31ff 	mov.w	r1, #4294967295
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f7ff ffe7 	bl	800450c <_kill>
	while (1) {}		/* Make sure we hang here */
 800453e:	e7fe      	b.n	800453e <_exit+0x12>

08004540 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800454c:	2300      	movs	r3, #0
 800454e:	617b      	str	r3, [r7, #20]
 8004550:	e00a      	b.n	8004568 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004552:	f3af 8000 	nop.w
 8004556:	4601      	mov	r1, r0
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	1c5a      	adds	r2, r3, #1
 800455c:	60ba      	str	r2, [r7, #8]
 800455e:	b2ca      	uxtb	r2, r1
 8004560:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	3301      	adds	r3, #1
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	429a      	cmp	r2, r3
 800456e:	dbf0      	blt.n	8004552 <_read+0x12>
	}

return len;
 8004570:	687b      	ldr	r3, [r7, #4]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3718      	adds	r7, #24
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b086      	sub	sp, #24
 800457e:	af00      	add	r7, sp, #0
 8004580:	60f8      	str	r0, [r7, #12]
 8004582:	60b9      	str	r1, [r7, #8]
 8004584:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004586:	2300      	movs	r3, #0
 8004588:	617b      	str	r3, [r7, #20]
 800458a:	e009      	b.n	80045a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	60ba      	str	r2, [r7, #8]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	3301      	adds	r3, #1
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	dbf1      	blt.n	800458c <_write+0x12>
	}
	return len;
 80045a8:	687b      	ldr	r3, [r7, #4]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <_close>:

int _close(int file)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b083      	sub	sp, #12
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
	return -1;
 80045ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045be:	4618      	mov	r0, r3
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
 80045d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80045da:	605a      	str	r2, [r3, #4]
	return 0;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <_isatty>:

int _isatty(int file)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
	return 1;
 80045f2:	2301      	movs	r3, #1
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
	return 0;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
	...

0800461c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004624:	4a14      	ldr	r2, [pc, #80]	; (8004678 <_sbrk+0x5c>)
 8004626:	4b15      	ldr	r3, [pc, #84]	; (800467c <_sbrk+0x60>)
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004630:	4b13      	ldr	r3, [pc, #76]	; (8004680 <_sbrk+0x64>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d102      	bne.n	800463e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004638:	4b11      	ldr	r3, [pc, #68]	; (8004680 <_sbrk+0x64>)
 800463a:	4a12      	ldr	r2, [pc, #72]	; (8004684 <_sbrk+0x68>)
 800463c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800463e:	4b10      	ldr	r3, [pc, #64]	; (8004680 <_sbrk+0x64>)
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4413      	add	r3, r2
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	429a      	cmp	r2, r3
 800464a:	d207      	bcs.n	800465c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800464c:	f009 faa0 	bl	800db90 <__errno>
 8004650:	4603      	mov	r3, r0
 8004652:	220c      	movs	r2, #12
 8004654:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004656:	f04f 33ff 	mov.w	r3, #4294967295
 800465a:	e009      	b.n	8004670 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800465c:	4b08      	ldr	r3, [pc, #32]	; (8004680 <_sbrk+0x64>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004662:	4b07      	ldr	r3, [pc, #28]	; (8004680 <_sbrk+0x64>)
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4413      	add	r3, r2
 800466a:	4a05      	ldr	r2, [pc, #20]	; (8004680 <_sbrk+0x64>)
 800466c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800466e:	68fb      	ldr	r3, [r7, #12]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	20030000 	.word	0x20030000
 800467c:	00000400 	.word	0x00000400
 8004680:	20003d24 	.word	0x20003d24
 8004684:	20005738 	.word	0x20005738

08004688 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800468c:	4b24      	ldr	r3, [pc, #144]	; (8004720 <SystemInit+0x98>)
 800468e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004692:	4a23      	ldr	r2, [pc, #140]	; (8004720 <SystemInit+0x98>)
 8004694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800469c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046a6:	f043 0301 	orr.w	r3, r3, #1
 80046aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80046ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046b0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80046b4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80046b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046c0:	4b18      	ldr	r3, [pc, #96]	; (8004724 <SystemInit+0x9c>)
 80046c2:	4013      	ands	r3, r2
 80046c4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80046c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046d2:	f023 0305 	bic.w	r3, r3, #5
 80046d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80046da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046e6:	f023 0301 	bic.w	r3, r3, #1
 80046ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80046ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046f2:	4a0d      	ldr	r2, [pc, #52]	; (8004728 <SystemInit+0xa0>)
 80046f4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80046f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046fa:	4a0b      	ldr	r2, [pc, #44]	; (8004728 <SystemInit+0xa0>)
 80046fc:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80046fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004708:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800470c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800470e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004712:	2200      	movs	r2, #0
 8004714:	619a      	str	r2, [r3, #24]
}
 8004716:	bf00      	nop
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	e000ed00 	.word	0xe000ed00
 8004724:	faf6fefb 	.word	0xfaf6fefb
 8004728:	22041000 	.word	0x22041000

0800472c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800472c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800472e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004730:	3304      	adds	r3, #4

08004732 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004732:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004734:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8004736:	d3f9      	bcc.n	800472c <CopyDataInit>
  bx lr
 8004738:	4770      	bx	lr

0800473a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800473a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800473c:	3004      	adds	r0, #4

0800473e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800473e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8004740:	d3fb      	bcc.n	800473a <FillZerobss>
  bx lr
 8004742:	4770      	bx	lr

08004744 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004744:	480c      	ldr	r0, [pc, #48]	; (8004778 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8004746:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004748:	f7ff ff9e 	bl	8004688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800474c:	480b      	ldr	r0, [pc, #44]	; (800477c <LoopForever+0x8>)
 800474e:	490c      	ldr	r1, [pc, #48]	; (8004780 <LoopForever+0xc>)
 8004750:	4a0c      	ldr	r2, [pc, #48]	; (8004784 <LoopForever+0x10>)
 8004752:	2300      	movs	r3, #0
 8004754:	f7ff ffed 	bl	8004732 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8004758:	480b      	ldr	r0, [pc, #44]	; (8004788 <LoopForever+0x14>)
 800475a:	490c      	ldr	r1, [pc, #48]	; (800478c <LoopForever+0x18>)
 800475c:	2300      	movs	r3, #0
 800475e:	f7ff ffee 	bl	800473e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004762:	480b      	ldr	r0, [pc, #44]	; (8004790 <LoopForever+0x1c>)
 8004764:	490b      	ldr	r1, [pc, #44]	; (8004794 <LoopForever+0x20>)
 8004766:	2300      	movs	r3, #0
 8004768:	f7ff ffe9 	bl	800473e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800476c:	f009 fa16 	bl	800db9c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8004770:	f7ff fc44 	bl	8003ffc <main>

08004774 <LoopForever>:

LoopForever:
  b LoopForever
 8004774:	e7fe      	b.n	8004774 <LoopForever>
 8004776:	0000      	.short	0x0000
  ldr   r0, =_estack
 8004778:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800477c:	20000004 	.word	0x20000004
 8004780:	200002e4 	.word	0x200002e4
 8004784:	08012b5c 	.word	0x08012b5c
  INIT_BSS _sbss, _ebss
 8004788:	200002e4 	.word	0x200002e4
 800478c:	20005734 	.word	0x20005734
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004790:	20030000 	.word	0x20030000
 8004794:	20030000 	.word	0x20030000

08004798 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004798:	e7fe      	b.n	8004798 <ADC1_IRQHandler>
	...

0800479c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047a6:	4b0c      	ldr	r3, [pc, #48]	; (80047d8 <HAL_Init+0x3c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a0b      	ldr	r2, [pc, #44]	; (80047d8 <HAL_Init+0x3c>)
 80047ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047b2:	2003      	movs	r0, #3
 80047b4:	f000 f948 	bl	8004a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80047b8:	200f      	movs	r0, #15
 80047ba:	f000 f80f 	bl	80047dc <HAL_InitTick>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d002      	beq.n	80047ca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	71fb      	strb	r3, [r7, #7]
 80047c8:	e001      	b.n	80047ce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80047ca:	f7ff fded 	bl	80043a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80047ce:	79fb      	ldrb	r3, [r7, #7]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	58004000 	.word	0x58004000

080047dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80047e8:	4b17      	ldr	r3, [pc, #92]	; (8004848 <HAL_InitTick+0x6c>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d024      	beq.n	800483a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80047f0:	f003 f9f2 	bl	8007bd8 <HAL_RCC_GetHCLKFreq>
 80047f4:	4602      	mov	r2, r0
 80047f6:	4b14      	ldr	r3, [pc, #80]	; (8004848 <HAL_InitTick+0x6c>)
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	4619      	mov	r1, r3
 80047fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004800:	fbb3 f3f1 	udiv	r3, r3, r1
 8004804:	fbb2 f3f3 	udiv	r3, r2, r3
 8004808:	4618      	mov	r0, r3
 800480a:	f000 f950 	bl	8004aae <HAL_SYSTICK_Config>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10f      	bne.n	8004834 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b0f      	cmp	r3, #15
 8004818:	d809      	bhi.n	800482e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800481a:	2200      	movs	r2, #0
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	f04f 30ff 	mov.w	r0, #4294967295
 8004822:	f000 f91c 	bl	8004a5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004826:	4a09      	ldr	r2, [pc, #36]	; (800484c <HAL_InitTick+0x70>)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	e007      	b.n	800483e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	73fb      	strb	r3, [r7, #15]
 8004832:	e004      	b.n	800483e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	73fb      	strb	r3, [r7, #15]
 8004838:	e001      	b.n	800483e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800483e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	20000010 	.word	0x20000010
 800484c:	2000000c 	.word	0x2000000c

08004850 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004854:	4b06      	ldr	r3, [pc, #24]	; (8004870 <HAL_IncTick+0x20>)
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	461a      	mov	r2, r3
 800485a:	4b06      	ldr	r3, [pc, #24]	; (8004874 <HAL_IncTick+0x24>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4413      	add	r3, r2
 8004860:	4a04      	ldr	r2, [pc, #16]	; (8004874 <HAL_IncTick+0x24>)
 8004862:	6013      	str	r3, [r2, #0]
}
 8004864:	bf00      	nop
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	20000010 	.word	0x20000010
 8004874:	20003d28 	.word	0x20003d28

08004878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  return uwTick;
 800487c:	4b03      	ldr	r3, [pc, #12]	; (800488c <HAL_GetTick+0x14>)
 800487e:	681b      	ldr	r3, [r3, #0]
}
 8004880:	4618      	mov	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	20003d28 	.word	0x20003d28

08004890 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004894:	4b03      	ldr	r3, [pc, #12]	; (80048a4 <HAL_GetTickPrio+0x14>)
 8004896:	681b      	ldr	r3, [r3, #0]
}
 8004898:	4618      	mov	r0, r3
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	2000000c 	.word	0x2000000c

080048a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048b8:	4b0c      	ldr	r3, [pc, #48]	; (80048ec <__NVIC_SetPriorityGrouping+0x44>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048c4:	4013      	ands	r3, r2
 80048c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048da:	4a04      	ldr	r2, [pc, #16]	; (80048ec <__NVIC_SetPriorityGrouping+0x44>)
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	60d3      	str	r3, [r2, #12]
}
 80048e0:	bf00      	nop
 80048e2:	3714      	adds	r7, #20
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	e000ed00 	.word	0xe000ed00

080048f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048f4:	4b04      	ldr	r3, [pc, #16]	; (8004908 <__NVIC_GetPriorityGrouping+0x18>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	0a1b      	lsrs	r3, r3, #8
 80048fa:	f003 0307 	and.w	r3, r3, #7
}
 80048fe:	4618      	mov	r0, r3
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	e000ed00 	.word	0xe000ed00

0800490c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	4603      	mov	r3, r0
 8004914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800491a:	2b00      	cmp	r3, #0
 800491c:	db0b      	blt.n	8004936 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800491e:	79fb      	ldrb	r3, [r7, #7]
 8004920:	f003 021f 	and.w	r2, r3, #31
 8004924:	4907      	ldr	r1, [pc, #28]	; (8004944 <__NVIC_EnableIRQ+0x38>)
 8004926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492a:	095b      	lsrs	r3, r3, #5
 800492c:	2001      	movs	r0, #1
 800492e:	fa00 f202 	lsl.w	r2, r0, r2
 8004932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	e000e100 	.word	0xe000e100

08004948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	4603      	mov	r3, r0
 8004950:	6039      	str	r1, [r7, #0]
 8004952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004958:	2b00      	cmp	r3, #0
 800495a:	db0a      	blt.n	8004972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	b2da      	uxtb	r2, r3
 8004960:	490c      	ldr	r1, [pc, #48]	; (8004994 <__NVIC_SetPriority+0x4c>)
 8004962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004966:	0112      	lsls	r2, r2, #4
 8004968:	b2d2      	uxtb	r2, r2
 800496a:	440b      	add	r3, r1
 800496c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004970:	e00a      	b.n	8004988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	b2da      	uxtb	r2, r3
 8004976:	4908      	ldr	r1, [pc, #32]	; (8004998 <__NVIC_SetPriority+0x50>)
 8004978:	79fb      	ldrb	r3, [r7, #7]
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	3b04      	subs	r3, #4
 8004980:	0112      	lsls	r2, r2, #4
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	440b      	add	r3, r1
 8004986:	761a      	strb	r2, [r3, #24]
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	e000e100 	.word	0xe000e100
 8004998:	e000ed00 	.word	0xe000ed00

0800499c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800499c:	b480      	push	{r7}
 800499e:	b089      	sub	sp, #36	; 0x24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f003 0307 	and.w	r3, r3, #7
 80049ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	f1c3 0307 	rsb	r3, r3, #7
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	bf28      	it	cs
 80049ba:	2304      	movcs	r3, #4
 80049bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	3304      	adds	r3, #4
 80049c2:	2b06      	cmp	r3, #6
 80049c4:	d902      	bls.n	80049cc <NVIC_EncodePriority+0x30>
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	3b03      	subs	r3, #3
 80049ca:	e000      	b.n	80049ce <NVIC_EncodePriority+0x32>
 80049cc:	2300      	movs	r3, #0
 80049ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049d0:	f04f 32ff 	mov.w	r2, #4294967295
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	fa02 f303 	lsl.w	r3, r2, r3
 80049da:	43da      	mvns	r2, r3
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	401a      	ands	r2, r3
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049e4:	f04f 31ff 	mov.w	r1, #4294967295
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	fa01 f303 	lsl.w	r3, r1, r3
 80049ee:	43d9      	mvns	r1, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049f4:	4313      	orrs	r3, r2
         );
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3724      	adds	r7, #36	; 0x24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
	...

08004a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a14:	d301      	bcc.n	8004a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a16:	2301      	movs	r3, #1
 8004a18:	e00f      	b.n	8004a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a1a:	4a0a      	ldr	r2, [pc, #40]	; (8004a44 <SysTick_Config+0x40>)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a22:	210f      	movs	r1, #15
 8004a24:	f04f 30ff 	mov.w	r0, #4294967295
 8004a28:	f7ff ff8e 	bl	8004948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a2c:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <SysTick_Config+0x40>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a32:	4b04      	ldr	r3, [pc, #16]	; (8004a44 <SysTick_Config+0x40>)
 8004a34:	2207      	movs	r2, #7
 8004a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	e000e010 	.word	0xe000e010

08004a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7ff ff29 	bl	80048a8 <__NVIC_SetPriorityGrouping>
}
 8004a56:	bf00      	nop
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b086      	sub	sp, #24
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	4603      	mov	r3, r0
 8004a66:	60b9      	str	r1, [r7, #8]
 8004a68:	607a      	str	r2, [r7, #4]
 8004a6a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a6c:	f7ff ff40 	bl	80048f0 <__NVIC_GetPriorityGrouping>
 8004a70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	68b9      	ldr	r1, [r7, #8]
 8004a76:	6978      	ldr	r0, [r7, #20]
 8004a78:	f7ff ff90 	bl	800499c <NVIC_EncodePriority>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a82:	4611      	mov	r1, r2
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7ff ff5f 	bl	8004948 <__NVIC_SetPriority>
}
 8004a8a:	bf00      	nop
 8004a8c:	3718      	adds	r7, #24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b082      	sub	sp, #8
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	4603      	mov	r3, r0
 8004a9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7ff ff33 	bl	800490c <__NVIC_EnableIRQ>
}
 8004aa6:	bf00      	nop
 8004aa8:	3708      	adds	r7, #8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b082      	sub	sp, #8
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7ff ffa4 	bl	8004a04 <SysTick_Config>
 8004abc:	4603      	mov	r3, r0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
	...

08004ac8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ad6:	e14c      	b.n	8004d72 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	2101      	movs	r1, #1
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f000 813e 	beq.w	8004d6c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f003 0303 	and.w	r3, r3, #3
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d005      	beq.n	8004b08 <HAL_GPIO_Init+0x40>
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f003 0303 	and.w	r3, r3, #3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d130      	bne.n	8004b6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	005b      	lsls	r3, r3, #1
 8004b12:	2203      	movs	r2, #3
 8004b14:	fa02 f303 	lsl.w	r3, r2, r3
 8004b18:	43db      	mvns	r3, r3
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	68da      	ldr	r2, [r3, #12]
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b3e:	2201      	movs	r2, #1
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	fa02 f303 	lsl.w	r3, r2, r3
 8004b46:	43db      	mvns	r3, r3
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	091b      	lsrs	r3, r3, #4
 8004b54:	f003 0201 	and.w	r2, r3, #1
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	2b03      	cmp	r3, #3
 8004b74:	d017      	beq.n	8004ba6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	2203      	movs	r2, #3
 8004b82:	fa02 f303 	lsl.w	r3, r2, r3
 8004b86:	43db      	mvns	r3, r3
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	689a      	ldr	r2, [r3, #8]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f003 0303 	and.w	r3, r3, #3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d123      	bne.n	8004bfa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	08da      	lsrs	r2, r3, #3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	3208      	adds	r2, #8
 8004bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	220f      	movs	r2, #15
 8004bca:	fa02 f303 	lsl.w	r3, r2, r3
 8004bce:	43db      	mvns	r3, r3
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	691a      	ldr	r2, [r3, #16]
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	fa02 f303 	lsl.w	r3, r2, r3
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	08da      	lsrs	r2, r3, #3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	3208      	adds	r2, #8
 8004bf4:	6939      	ldr	r1, [r7, #16]
 8004bf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	2203      	movs	r2, #3
 8004c06:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0a:	43db      	mvns	r3, r3
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f003 0203 	and.w	r2, r3, #3
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 8098 	beq.w	8004d6c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004c3c:	4a54      	ldr	r2, [pc, #336]	; (8004d90 <HAL_GPIO_Init+0x2c8>)
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	089b      	lsrs	r3, r3, #2
 8004c42:	3302      	adds	r3, #2
 8004c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f003 0303 	and.w	r3, r3, #3
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	220f      	movs	r2, #15
 8004c54:	fa02 f303 	lsl.w	r3, r2, r3
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004c66:	d019      	beq.n	8004c9c <HAL_GPIO_Init+0x1d4>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a4a      	ldr	r2, [pc, #296]	; (8004d94 <HAL_GPIO_Init+0x2cc>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d013      	beq.n	8004c98 <HAL_GPIO_Init+0x1d0>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a49      	ldr	r2, [pc, #292]	; (8004d98 <HAL_GPIO_Init+0x2d0>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d00d      	beq.n	8004c94 <HAL_GPIO_Init+0x1cc>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a48      	ldr	r2, [pc, #288]	; (8004d9c <HAL_GPIO_Init+0x2d4>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d007      	beq.n	8004c90 <HAL_GPIO_Init+0x1c8>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a47      	ldr	r2, [pc, #284]	; (8004da0 <HAL_GPIO_Init+0x2d8>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d101      	bne.n	8004c8c <HAL_GPIO_Init+0x1c4>
 8004c88:	2304      	movs	r3, #4
 8004c8a:	e008      	b.n	8004c9e <HAL_GPIO_Init+0x1d6>
 8004c8c:	2307      	movs	r3, #7
 8004c8e:	e006      	b.n	8004c9e <HAL_GPIO_Init+0x1d6>
 8004c90:	2303      	movs	r3, #3
 8004c92:	e004      	b.n	8004c9e <HAL_GPIO_Init+0x1d6>
 8004c94:	2302      	movs	r3, #2
 8004c96:	e002      	b.n	8004c9e <HAL_GPIO_Init+0x1d6>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e000      	b.n	8004c9e <HAL_GPIO_Init+0x1d6>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	f002 0203 	and.w	r2, r2, #3
 8004ca4:	0092      	lsls	r2, r2, #2
 8004ca6:	4093      	lsls	r3, r2
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004cae:	4938      	ldr	r1, [pc, #224]	; (8004d90 <HAL_GPIO_Init+0x2c8>)
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	089b      	lsrs	r3, r3, #2
 8004cb4:	3302      	adds	r3, #2
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004cbc:	4b39      	ldr	r3, [pc, #228]	; (8004da4 <HAL_GPIO_Init+0x2dc>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	43db      	mvns	r3, r3
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ce0:	4a30      	ldr	r2, [pc, #192]	; (8004da4 <HAL_GPIO_Init+0x2dc>)
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004ce6:	4b2f      	ldr	r3, [pc, #188]	; (8004da4 <HAL_GPIO_Init+0x2dc>)
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	43db      	mvns	r3, r3
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d0a:	4a26      	ldr	r2, [pc, #152]	; (8004da4 <HAL_GPIO_Init+0x2dc>)
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004d10:	4b24      	ldr	r3, [pc, #144]	; (8004da4 <HAL_GPIO_Init+0x2dc>)
 8004d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	43db      	mvns	r3, r3
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d36:	4a1b      	ldr	r2, [pc, #108]	; (8004da4 <HAL_GPIO_Init+0x2dc>)
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004d3e:	4b19      	ldr	r3, [pc, #100]	; (8004da4 <HAL_GPIO_Init+0x2dc>)
 8004d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	43db      	mvns	r3, r3
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d64:	4a0f      	ldr	r2, [pc, #60]	; (8004da4 <HAL_GPIO_Init+0x2dc>)
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	3301      	adds	r3, #1
 8004d70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	fa22 f303 	lsr.w	r3, r2, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f47f aeab 	bne.w	8004ad8 <HAL_GPIO_Init+0x10>
  }
}
 8004d82:	bf00      	nop
 8004d84:	bf00      	nop
 8004d86:	371c      	adds	r7, #28
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr
 8004d90:	40010000 	.word	0x40010000
 8004d94:	48000400 	.word	0x48000400
 8004d98:	48000800 	.word	0x48000800
 8004d9c:	48000c00 	.word	0x48000c00
 8004da0:	48001000 	.word	0x48001000
 8004da4:	58000800 	.word	0x58000800

08004da8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e081      	b.n	8004ebe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d106      	bne.n	8004dd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7ff faf2 	bl	80043b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2224      	movs	r2, #36	; 0x24
 8004dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 0201 	bic.w	r2, r2, #1
 8004dea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004df8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d107      	bne.n	8004e22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689a      	ldr	r2, [r3, #8]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e1e:	609a      	str	r2, [r3, #8]
 8004e20:	e006      	b.n	8004e30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004e2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d104      	bne.n	8004e42 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	6812      	ldr	r2, [r2, #0]
 8004e4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68da      	ldr	r2, [r3, #12]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691a      	ldr	r2, [r3, #16]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	69d9      	ldr	r1, [r3, #28]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a1a      	ldr	r2, [r3, #32]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f042 0201 	orr.w	r2, r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b20      	cmp	r3, #32
 8004eda:	d138      	bne.n	8004f4e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d101      	bne.n	8004eea <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	e032      	b.n	8004f50 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2224      	movs	r2, #36	; 0x24
 8004ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 0201 	bic.w	r2, r2, #1
 8004f08:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f18:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6819      	ldr	r1, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f042 0201 	orr.w	r2, r2, #1
 8004f38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	e000      	b.n	8004f50 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f4e:	2302      	movs	r3, #2
  }
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b20      	cmp	r3, #32
 8004f70:	d139      	bne.n	8004fe6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d101      	bne.n	8004f80 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	e033      	b.n	8004fe8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2224      	movs	r2, #36	; 0x24
 8004f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 0201 	bic.w	r2, r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004fae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	021b      	lsls	r3, r3, #8
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f042 0201 	orr.w	r2, r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	e000      	b.n	8004fe8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004fe6:	2302      	movs	r3, #2
  }
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ff6:	b08b      	sub	sp, #44	; 0x2c
 8004ff8:	af06      	add	r7, sp, #24
 8004ffa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e0cb      	b.n	800519e <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d106      	bne.n	8005020 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f008 fa8a 	bl	800d534 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2203      	movs	r2, #3
 8005024:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4618      	mov	r0, r3
 800502e:	f003 fd5a 	bl	8008ae6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005032:	2300      	movs	r3, #0
 8005034:	73fb      	strb	r3, [r7, #15]
 8005036:	e040      	b.n	80050ba <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005038:	7bfb      	ldrb	r3, [r7, #15]
 800503a:	6879      	ldr	r1, [r7, #4]
 800503c:	1c5a      	adds	r2, r3, #1
 800503e:	4613      	mov	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	00db      	lsls	r3, r3, #3
 8005046:	440b      	add	r3, r1
 8005048:	3301      	adds	r3, #1
 800504a:	2201      	movs	r2, #1
 800504c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800504e:	7bfb      	ldrb	r3, [r7, #15]
 8005050:	6879      	ldr	r1, [r7, #4]
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	4613      	mov	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	440b      	add	r3, r1
 800505e:	7bfa      	ldrb	r2, [r7, #15]
 8005060:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005062:	7bfb      	ldrb	r3, [r7, #15]
 8005064:	6879      	ldr	r1, [r7, #4]
 8005066:	1c5a      	adds	r2, r3, #1
 8005068:	4613      	mov	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	440b      	add	r3, r1
 8005072:	3303      	adds	r3, #3
 8005074:	2200      	movs	r2, #0
 8005076:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005078:	7bfa      	ldrb	r2, [r7, #15]
 800507a:	6879      	ldr	r1, [r7, #4]
 800507c:	4613      	mov	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	440b      	add	r3, r1
 8005086:	3338      	adds	r3, #56	; 0x38
 8005088:	2200      	movs	r2, #0
 800508a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800508c:	7bfa      	ldrb	r2, [r7, #15]
 800508e:	6879      	ldr	r1, [r7, #4]
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	440b      	add	r3, r1
 800509a:	333c      	adds	r3, #60	; 0x3c
 800509c:	2200      	movs	r2, #0
 800509e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80050a0:	7bfa      	ldrb	r2, [r7, #15]
 80050a2:	6879      	ldr	r1, [r7, #4]
 80050a4:	4613      	mov	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	440b      	add	r3, r1
 80050ae:	3340      	adds	r3, #64	; 0x40
 80050b0:	2200      	movs	r2, #0
 80050b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050b4:	7bfb      	ldrb	r3, [r7, #15]
 80050b6:	3301      	adds	r3, #1
 80050b8:	73fb      	strb	r3, [r7, #15]
 80050ba:	7bfa      	ldrb	r2, [r7, #15]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d3b9      	bcc.n	8005038 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050c4:	2300      	movs	r3, #0
 80050c6:	73fb      	strb	r3, [r7, #15]
 80050c8:	e044      	b.n	8005154 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80050ca:	7bfa      	ldrb	r2, [r7, #15]
 80050cc:	6879      	ldr	r1, [r7, #4]
 80050ce:	4613      	mov	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4413      	add	r3, r2
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	440b      	add	r3, r1
 80050d8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80050dc:	2200      	movs	r2, #0
 80050de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80050e0:	7bfa      	ldrb	r2, [r7, #15]
 80050e2:	6879      	ldr	r1, [r7, #4]
 80050e4:	4613      	mov	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	440b      	add	r3, r1
 80050ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80050f2:	7bfa      	ldrb	r2, [r7, #15]
 80050f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80050f6:	7bfa      	ldrb	r2, [r7, #15]
 80050f8:	6879      	ldr	r1, [r7, #4]
 80050fa:	4613      	mov	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	00db      	lsls	r3, r3, #3
 8005102:	440b      	add	r3, r1
 8005104:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005108:	2200      	movs	r2, #0
 800510a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800510c:	7bfa      	ldrb	r2, [r7, #15]
 800510e:	6879      	ldr	r1, [r7, #4]
 8005110:	4613      	mov	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	440b      	add	r3, r1
 800511a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005122:	7bfa      	ldrb	r2, [r7, #15]
 8005124:	6879      	ldr	r1, [r7, #4]
 8005126:	4613      	mov	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	440b      	add	r3, r1
 8005130:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005134:	2200      	movs	r2, #0
 8005136:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005138:	7bfa      	ldrb	r2, [r7, #15]
 800513a:	6879      	ldr	r1, [r7, #4]
 800513c:	4613      	mov	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	440b      	add	r3, r1
 8005146:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800514e:	7bfb      	ldrb	r3, [r7, #15]
 8005150:	3301      	adds	r3, #1
 8005152:	73fb      	strb	r3, [r7, #15]
 8005154:	7bfa      	ldrb	r2, [r7, #15]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	429a      	cmp	r2, r3
 800515c:	d3b5      	bcc.n	80050ca <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	603b      	str	r3, [r7, #0]
 8005164:	687e      	ldr	r6, [r7, #4]
 8005166:	466d      	mov	r5, sp
 8005168:	f106 0410 	add.w	r4, r6, #16
 800516c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800516e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005170:	6823      	ldr	r3, [r4, #0]
 8005172:	602b      	str	r3, [r5, #0]
 8005174:	1d33      	adds	r3, r6, #4
 8005176:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005178:	6838      	ldr	r0, [r7, #0]
 800517a:	f003 fccf 	bl	8008b1c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d102      	bne.n	800519c <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f001 fc45 	bl	8006a26 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080051a6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b082      	sub	sp, #8
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d101      	bne.n	80051bc <HAL_PCD_Start+0x16>
 80051b8:	2302      	movs	r3, #2
 80051ba:	e012      	b.n	80051e2 <HAL_PCD_Start+0x3c>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f003 fc75 	bl	8008ab8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f005 ff39 	bl	800b04a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b084      	sub	sp, #16
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f005 ff3e 	bl	800b078 <USB_ReadInterrupts>
 80051fc:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d003      	beq.n	8005210 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 fb05 	bl	8005818 <PCD_EP_ISR_Handler>

    return;
 800520e:	e110      	b.n	8005432 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005216:	2b00      	cmp	r3, #0
 8005218:	d013      	beq.n	8005242 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005222:	b29a      	uxth	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800522c:	b292      	uxth	r2, r2
 800522e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f008 fa31 	bl	800d69a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005238:	2100      	movs	r1, #0
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f8fc 	bl	8005438 <HAL_PCD_SetAddress>

    return;
 8005240:	e0f7      	b.n	8005432 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00c      	beq.n	8005266 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005254:	b29a      	uxth	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800525e:	b292      	uxth	r2, r2
 8005260:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005264:	e0e5      	b.n	8005432 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00c      	beq.n	800528a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005278:	b29a      	uxth	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005282:	b292      	uxth	r2, r2
 8005284:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005288:	e0d3      	b.n	8005432 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d034      	beq.n	80052fe <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800529c:	b29a      	uxth	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f022 0204 	bic.w	r2, r2, #4
 80052a6:	b292      	uxth	r2, r2
 80052a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 0208 	bic.w	r2, r2, #8
 80052be:	b292      	uxth	r2, r2
 80052c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d107      	bne.n	80052de <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80052d6:	2100      	movs	r1, #0
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f008 fbd5 	bl	800da88 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f008 fa14 	bl	800d70c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052f6:	b292      	uxth	r2, r2
 80052f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80052fc:	e099      	b.n	8005432 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005304:	2b00      	cmp	r3, #0
 8005306:	d027      	beq.n	8005358 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005310:	b29a      	uxth	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0208 	orr.w	r2, r2, #8
 800531a:	b292      	uxth	r2, r2
 800531c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005328:	b29a      	uxth	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005332:	b292      	uxth	r2, r2
 8005334:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005340:	b29a      	uxth	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 0204 	orr.w	r2, r2, #4
 800534a:	b292      	uxth	r2, r2
 800534c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f008 f9c1 	bl	800d6d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005356:	e06c      	b.n	8005432 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800535e:	2b00      	cmp	r3, #0
 8005360:	d040      	beq.n	80053e4 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800536a:	b29a      	uxth	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005374:	b292      	uxth	r2, r2
 8005376:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d12b      	bne.n	80053dc <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800538c:	b29a      	uxth	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0204 	orr.w	r2, r2, #4
 8005396:	b292      	uxth	r2, r2
 8005398:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0208 	orr.w	r2, r2, #8
 80053ae:	b292      	uxth	r2, r2
 80053b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	089b      	lsrs	r3, r3, #2
 80053c8:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80053d2:	2101      	movs	r1, #1
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f008 fb57 	bl	800da88 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80053da:	e02a      	b.n	8005432 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f008 f97b 	bl	800d6d8 <HAL_PCD_SuspendCallback>
    return;
 80053e2:	e026      	b.n	8005432 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00f      	beq.n	800540e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005400:	b292      	uxth	r2, r2
 8005402:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f008 f939 	bl	800d67e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800540c:	e011      	b.n	8005432 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00c      	beq.n	8005432 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005420:	b29a      	uxth	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800542a:	b292      	uxth	r2, r2
 800542c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005430:	bf00      	nop
  }
}
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	460b      	mov	r3, r1
 8005442:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800544a:	2b01      	cmp	r3, #1
 800544c:	d101      	bne.n	8005452 <HAL_PCD_SetAddress+0x1a>
 800544e:	2302      	movs	r3, #2
 8005450:	e013      	b.n	800547a <HAL_PCD_SetAddress+0x42>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	78fa      	ldrb	r2, [r7, #3]
 800545e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	78fa      	ldrb	r2, [r7, #3]
 8005468:	4611      	mov	r1, r2
 800546a:	4618      	mov	r0, r3
 800546c:	f005 fdd9 	bl	800b022 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b084      	sub	sp, #16
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
 800548a:	4608      	mov	r0, r1
 800548c:	4611      	mov	r1, r2
 800548e:	461a      	mov	r2, r3
 8005490:	4603      	mov	r3, r0
 8005492:	70fb      	strb	r3, [r7, #3]
 8005494:	460b      	mov	r3, r1
 8005496:	803b      	strh	r3, [r7, #0]
 8005498:	4613      	mov	r3, r2
 800549a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800549c:	2300      	movs	r3, #0
 800549e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80054a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	da0e      	bge.n	80054c6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054a8:	78fb      	ldrb	r3, [r7, #3]
 80054aa:	f003 0307 	and.w	r3, r3, #7
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	4613      	mov	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	00db      	lsls	r3, r3, #3
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	4413      	add	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2201      	movs	r2, #1
 80054c2:	705a      	strb	r2, [r3, #1]
 80054c4:	e00e      	b.n	80054e4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054c6:	78fb      	ldrb	r3, [r7, #3]
 80054c8:	f003 0207 	and.w	r2, r3, #7
 80054cc:	4613      	mov	r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	00db      	lsls	r3, r3, #3
 80054d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	4413      	add	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80054e4:	78fb      	ldrb	r3, [r7, #3]
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80054f0:	883a      	ldrh	r2, [r7, #0]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	78ba      	ldrb	r2, [r7, #2]
 80054fa:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80054fc:	78bb      	ldrb	r3, [r7, #2]
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d102      	bne.n	8005508 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800550e:	2b01      	cmp	r3, #1
 8005510:	d101      	bne.n	8005516 <HAL_PCD_EP_Open+0x94>
 8005512:	2302      	movs	r3, #2
 8005514:	e00e      	b.n	8005534 <HAL_PCD_EP_Open+0xb2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68f9      	ldr	r1, [r7, #12]
 8005524:	4618      	mov	r0, r3
 8005526:	f003 fb1b 	bl	8008b60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005532:	7afb      	ldrb	r3, [r7, #11]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	460b      	mov	r3, r1
 8005546:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005548:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800554c:	2b00      	cmp	r3, #0
 800554e:	da0e      	bge.n	800556e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005550:	78fb      	ldrb	r3, [r7, #3]
 8005552:	f003 0307 	and.w	r3, r3, #7
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	4613      	mov	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	00db      	lsls	r3, r3, #3
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	4413      	add	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2201      	movs	r2, #1
 800556a:	705a      	strb	r2, [r3, #1]
 800556c:	e00e      	b.n	800558c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800556e:	78fb      	ldrb	r3, [r7, #3]
 8005570:	f003 0207 	and.w	r2, r3, #7
 8005574:	4613      	mov	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	4413      	add	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800558c:	78fb      	ldrb	r3, [r7, #3]
 800558e:	f003 0307 	and.w	r3, r3, #7
 8005592:	b2da      	uxtb	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d101      	bne.n	80055a6 <HAL_PCD_EP_Close+0x6a>
 80055a2:	2302      	movs	r3, #2
 80055a4:	e00e      	b.n	80055c4 <HAL_PCD_EP_Close+0x88>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68f9      	ldr	r1, [r7, #12]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f003 fe97 	bl	80092e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	607a      	str	r2, [r7, #4]
 80055d6:	603b      	str	r3, [r7, #0]
 80055d8:	460b      	mov	r3, r1
 80055da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055dc:	7afb      	ldrb	r3, [r7, #11]
 80055de:	f003 0207 	and.w	r2, r3, #7
 80055e2:	4613      	mov	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	00db      	lsls	r3, r3, #3
 80055ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	4413      	add	r3, r2
 80055f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	2200      	movs	r2, #0
 8005604:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	2200      	movs	r2, #0
 800560a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800560c:	7afb      	ldrb	r3, [r7, #11]
 800560e:	f003 0307 	and.w	r3, r3, #7
 8005612:	b2da      	uxtb	r2, r3
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6979      	ldr	r1, [r7, #20]
 800561e:	4618      	mov	r0, r3
 8005620:	f004 f84f 	bl	80096c2 <USB_EPStartXfer>

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3718      	adds	r7, #24
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	460b      	mov	r3, r1
 8005638:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800563a:	78fb      	ldrb	r3, [r7, #3]
 800563c:	f003 0207 	and.w	r2, r3, #7
 8005640:	6879      	ldr	r1, [r7, #4]
 8005642:	4613      	mov	r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	00db      	lsls	r3, r3, #3
 800564a:	440b      	add	r3, r1
 800564c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005650:	681b      	ldr	r3, [r3, #0]
}
 8005652:	4618      	mov	r0, r3
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b086      	sub	sp, #24
 8005662:	af00      	add	r7, sp, #0
 8005664:	60f8      	str	r0, [r7, #12]
 8005666:	607a      	str	r2, [r7, #4]
 8005668:	603b      	str	r3, [r7, #0]
 800566a:	460b      	mov	r3, r1
 800566c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800566e:	7afb      	ldrb	r3, [r7, #11]
 8005670:	f003 0307 	and.w	r3, r3, #7
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	4613      	mov	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4413      	add	r3, r2
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	4413      	add	r3, r2
 8005682:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2200      	movs	r2, #0
 80056a2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2201      	movs	r2, #1
 80056a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056aa:	7afb      	ldrb	r3, [r7, #11]
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6979      	ldr	r1, [r7, #20]
 80056bc:	4618      	mov	r0, r3
 80056be:	f004 f800 	bl	80096c2 <USB_EPStartXfer>

  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3718      	adds	r7, #24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	460b      	mov	r3, r1
 80056d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80056d8:	78fb      	ldrb	r3, [r7, #3]
 80056da:	f003 0207 	and.w	r2, r3, #7
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d901      	bls.n	80056ea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e03e      	b.n	8005768 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80056ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	da0e      	bge.n	8005710 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056f2:	78fb      	ldrb	r3, [r7, #3]
 80056f4:	f003 0307 	and.w	r3, r3, #7
 80056f8:	1c5a      	adds	r2, r3, #1
 80056fa:	4613      	mov	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	4413      	add	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2201      	movs	r2, #1
 800570c:	705a      	strb	r2, [r3, #1]
 800570e:	e00c      	b.n	800572a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005710:	78fa      	ldrb	r2, [r7, #3]
 8005712:	4613      	mov	r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4413      	add	r3, r2
 8005718:	00db      	lsls	r3, r3, #3
 800571a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	4413      	add	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2201      	movs	r2, #1
 800572e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005730:	78fb      	ldrb	r3, [r7, #3]
 8005732:	f003 0307 	and.w	r3, r3, #7
 8005736:	b2da      	uxtb	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005742:	2b01      	cmp	r3, #1
 8005744:	d101      	bne.n	800574a <HAL_PCD_EP_SetStall+0x7e>
 8005746:	2302      	movs	r3, #2
 8005748:	e00e      	b.n	8005768 <HAL_PCD_EP_SetStall+0x9c>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68f9      	ldr	r1, [r7, #12]
 8005758:	4618      	mov	r0, r3
 800575a:	f005 fb63 	bl	800ae24 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	460b      	mov	r3, r1
 800577a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800577c:	78fb      	ldrb	r3, [r7, #3]
 800577e:	f003 020f 	and.w	r2, r3, #15
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	429a      	cmp	r2, r3
 8005788:	d901      	bls.n	800578e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e040      	b.n	8005810 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800578e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005792:	2b00      	cmp	r3, #0
 8005794:	da0e      	bge.n	80057b4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005796:	78fb      	ldrb	r3, [r7, #3]
 8005798:	f003 0307 	and.w	r3, r3, #7
 800579c:	1c5a      	adds	r2, r3, #1
 800579e:	4613      	mov	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	00db      	lsls	r3, r3, #3
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	4413      	add	r3, r2
 80057aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2201      	movs	r2, #1
 80057b0:	705a      	strb	r2, [r3, #1]
 80057b2:	e00e      	b.n	80057d2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057b4:	78fb      	ldrb	r3, [r7, #3]
 80057b6:	f003 0207 	and.w	r2, r3, #7
 80057ba:	4613      	mov	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4413      	add	r3, r2
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	4413      	add	r3, r2
 80057ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057d8:	78fb      	ldrb	r3, [r7, #3]
 80057da:	f003 0307 	and.w	r3, r3, #7
 80057de:	b2da      	uxtb	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d101      	bne.n	80057f2 <HAL_PCD_EP_ClrStall+0x82>
 80057ee:	2302      	movs	r3, #2
 80057f0:	e00e      	b.n	8005810 <HAL_PCD_EP_ClrStall+0xa0>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68f9      	ldr	r1, [r7, #12]
 8005800:	4618      	mov	r0, r3
 8005802:	f005 fb60 	bl	800aec6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b096      	sub	sp, #88	; 0x58
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005820:	e3b1      	b.n	8005f86 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800582a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800582e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005832:	b2db      	uxtb	r3, r3
 8005834:	f003 030f 	and.w	r3, r3, #15
 8005838:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800583c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005840:	2b00      	cmp	r3, #0
 8005842:	f040 8173 	bne.w	8005b2c <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005846:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800584a:	f003 0310 	and.w	r3, r3, #16
 800584e:	2b00      	cmp	r3, #0
 8005850:	d150      	bne.n	80058f4 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	881b      	ldrh	r3, [r3, #0]
 8005858:	b29b      	uxth	r3, r3
 800585a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800585e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005862:	81fb      	strh	r3, [r7, #14]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	89fb      	ldrh	r3, [r7, #14]
 800586a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800586e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005872:	b29b      	uxth	r3, r3
 8005874:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	3328      	adds	r3, #40	; 0x28
 800587a:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005884:	b29b      	uxth	r3, r3
 8005886:	461a      	mov	r2, r3
 8005888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	00db      	lsls	r3, r3, #3
 800588e:	4413      	add	r3, r2
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	6812      	ldr	r2, [r2, #0]
 8005894:	4413      	add	r3, r2
 8005896:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800589a:	881b      	ldrh	r3, [r3, #0]
 800589c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80058a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058a2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80058a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058a6:	695a      	ldr	r2, [r3, #20]
 80058a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058aa:	69db      	ldr	r3, [r3, #28]
 80058ac:	441a      	add	r2, r3
 80058ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058b0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80058b2:	2100      	movs	r1, #0
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f007 fec8 	bl	800d64a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 835f 	beq.w	8005f86 <PCD_EP_ISR_Handler+0x76e>
 80058c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f040 835a 	bne.w	8005f86 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	b292      	uxth	r2, r2
 80058e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80058f2:	e348      	b.n	8005f86 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80058fa:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005906:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800590a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800590e:	2b00      	cmp	r3, #0
 8005910:	d032      	beq.n	8005978 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800591a:	b29b      	uxth	r3, r3
 800591c:	461a      	mov	r2, r3
 800591e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	4413      	add	r3, r2
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	6812      	ldr	r2, [r2, #0]
 800592a:	4413      	add	r3, r2
 800592c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005930:	881b      	ldrh	r3, [r3, #0]
 8005932:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005938:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6818      	ldr	r0, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005946:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800594a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800594c:	b29b      	uxth	r3, r3
 800594e:	f005 fbe5 	bl	800b11c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	b29a      	uxth	r2, r3
 800595a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800595e:	4013      	ands	r3, r2
 8005960:	823b      	strh	r3, [r7, #16]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	8a3a      	ldrh	r2, [r7, #16]
 8005968:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800596c:	b292      	uxth	r2, r2
 800596e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f007 fe3d 	bl	800d5f0 <HAL_PCD_SetupStageCallback>
 8005976:	e306      	b.n	8005f86 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005978:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800597c:	2b00      	cmp	r3, #0
 800597e:	f280 8302 	bge.w	8005f86 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	881b      	ldrh	r3, [r3, #0]
 8005988:	b29a      	uxth	r2, r3
 800598a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800598e:	4013      	ands	r3, r2
 8005990:	83fb      	strh	r3, [r7, #30]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	8bfa      	ldrh	r2, [r7, #30]
 8005998:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800599c:	b292      	uxth	r2, r2
 800599e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	461a      	mov	r2, r3
 80059ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	4413      	add	r3, r2
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	6812      	ldr	r2, [r2, #0]
 80059b8:	4413      	add	r3, r2
 80059ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80059c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059c6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80059c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059ca:	69db      	ldr	r3, [r3, #28]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d019      	beq.n	8005a04 <PCD_EP_ISR_Handler+0x1ec>
 80059d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d015      	beq.n	8005a04 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6818      	ldr	r0, [r3, #0]
 80059dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059de:	6959      	ldr	r1, [r3, #20]
 80059e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059e2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80059e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059e6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	f005 fb97 	bl	800b11c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80059ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059f0:	695a      	ldr	r2, [r3, #20]
 80059f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	441a      	add	r2, r3
 80059f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059fa:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80059fc:	2100      	movs	r1, #0
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f007 fe08 	bl	800d614 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005a0e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005a12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f040 82b5 	bne.w	8005f86 <PCD_EP_ISR_Handler+0x76e>
 8005a1c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005a20:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005a24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a28:	f000 82ad 	beq.w	8005f86 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	61bb      	str	r3, [r7, #24]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	4413      	add	r3, r2
 8005a42:	61bb      	str	r3, [r7, #24]
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	881b      	ldrh	r3, [r3, #0]
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	801a      	strh	r2, [r3, #0]
 8005a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	2b3e      	cmp	r3, #62	; 0x3e
 8005a62:	d91d      	bls.n	8005aa0 <PCD_EP_ISR_Handler+0x288>
 8005a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	095b      	lsrs	r3, r3, #5
 8005a6a:	647b      	str	r3, [r7, #68]	; 0x44
 8005a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	f003 031f 	and.w	r3, r3, #31
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d102      	bne.n	8005a7e <PCD_EP_ISR_Handler+0x266>
 8005a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	647b      	str	r3, [r7, #68]	; 0x44
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	029b      	lsls	r3, r3, #10
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	801a      	strh	r2, [r3, #0]
 8005a9e:	e026      	b.n	8005aee <PCD_EP_ISR_Handler+0x2d6>
 8005aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10a      	bne.n	8005abe <PCD_EP_ISR_Handler+0x2a6>
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	881b      	ldrh	r3, [r3, #0]
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ab2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	801a      	strh	r2, [r3, #0]
 8005abc:	e017      	b.n	8005aee <PCD_EP_ISR_Handler+0x2d6>
 8005abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	085b      	lsrs	r3, r3, #1
 8005ac4:	647b      	str	r3, [r7, #68]	; 0x44
 8005ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d002      	beq.n	8005ad8 <PCD_EP_ISR_Handler+0x2c0>
 8005ad2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	881b      	ldrh	r3, [r3, #0]
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	029b      	lsls	r3, r3, #10
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	881b      	ldrh	r3, [r3, #0]
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005afe:	827b      	strh	r3, [r7, #18]
 8005b00:	8a7b      	ldrh	r3, [r7, #18]
 8005b02:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b06:	827b      	strh	r3, [r7, #18]
 8005b08:	8a7b      	ldrh	r3, [r7, #18]
 8005b0a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b0e:	827b      	strh	r3, [r7, #18]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	8a7b      	ldrh	r3, [r7, #18]
 8005b16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	8013      	strh	r3, [r2, #0]
 8005b2a:	e22c      	b.n	8005f86 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	461a      	mov	r2, r3
 8005b32:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	881b      	ldrh	r3, [r3, #0]
 8005b3c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005b40:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f280 80f6 	bge.w	8005d36 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005b60:	4013      	ands	r3, r2
 8005b62:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005b78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b7c:	b292      	uxth	r2, r2
 8005b7e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005b80:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8005b84:	4613      	mov	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	4413      	add	r3, r2
 8005b94:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b98:	7b1b      	ldrb	r3, [r3, #12]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d123      	bne.n	8005be6 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	461a      	mov	r2, r3
 8005baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	00db      	lsls	r3, r3, #3
 8005bb0:	4413      	add	r3, r2
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	6812      	ldr	r2, [r2, #0]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005bbc:	881b      	ldrh	r3, [r3, #0]
 8005bbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bc2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8005bc6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f000 808e 	beq.w	8005cec <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6818      	ldr	r0, [r3, #0]
 8005bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bd6:	6959      	ldr	r1, [r3, #20]
 8005bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bda:	88da      	ldrh	r2, [r3, #6]
 8005bdc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005be0:	f005 fa9c 	bl	800b11c <USB_ReadPMA>
 8005be4:	e082      	b.n	8005cec <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005be8:	78db      	ldrb	r3, [r3, #3]
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d10a      	bne.n	8005c04 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005bee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f9d3 	bl	8005fa2 <HAL_PCD_EP_DB_Receive>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8005c02:	e073      	b.n	8005cec <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	461a      	mov	r2, r3
 8005c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	881b      	ldrh	r3, [r3, #0]
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c1e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	461a      	mov	r2, r3
 8005c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	441a      	add	r2, r3
 8005c30:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005c34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d022      	beq.n	8005ca8 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	00db      	lsls	r3, r3, #3
 8005c74:	4413      	add	r3, r2
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	6812      	ldr	r2, [r2, #0]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c86:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8005c8a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d02c      	beq.n	8005cec <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6818      	ldr	r0, [r3, #0]
 8005c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c98:	6959      	ldr	r1, [r3, #20]
 8005c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c9c:	891a      	ldrh	r2, [r3, #8]
 8005c9e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005ca2:	f005 fa3b 	bl	800b11c <USB_ReadPMA>
 8005ca6:	e021      	b.n	8005cec <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	00db      	lsls	r3, r3, #3
 8005cba:	4413      	add	r3, r2
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	6812      	ldr	r2, [r2, #0]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005cc6:	881b      	ldrh	r3, [r3, #0]
 8005cc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ccc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8005cd0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d009      	beq.n	8005cec <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6818      	ldr	r0, [r3, #0]
 8005cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cde:	6959      	ldr	r1, [r3, #20]
 8005ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ce2:	895a      	ldrh	r2, [r3, #10]
 8005ce4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005ce8:	f005 fa18 	bl	800b11c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cee:	69da      	ldr	r2, [r3, #28]
 8005cf0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005cf4:	441a      	add	r2, r3
 8005cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cf8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cfc:	695a      	ldr	r2, [r3, #20]
 8005cfe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005d02:	441a      	add	r2, r3
 8005d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d06:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d005      	beq.n	8005d1c <PCD_EP_ISR_Handler+0x504>
 8005d10:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8005d14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d206      	bcs.n	8005d2a <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	4619      	mov	r1, r3
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f007 fc76 	bl	800d614 <HAL_PCD_DataOutStageCallback>
 8005d28:	e005      	b.n	8005d36 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d30:	4618      	mov	r0, r3
 8005d32:	f003 fcc6 	bl	80096c2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005d36:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 8121 	beq.w	8005f86 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8005d44:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005d48:	1c5a      	adds	r2, r3, #1
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4413      	add	r3, r2
 8005d50:	00db      	lsls	r3, r3, #3
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	4413      	add	r3, r2
 8005d56:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	881b      	ldrh	r3, [r3, #0]
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d72:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	441a      	add	r2, r3
 8005d84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005d94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d96:	78db      	ldrb	r3, [r3, #3]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	f040 80a2 	bne.w	8005ee2 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8005d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005da0:	2200      	movs	r2, #0
 8005da2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005da6:	7b1b      	ldrb	r3, [r3, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f000 8093 	beq.w	8005ed4 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005dae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d046      	beq.n	8005e48 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005dba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dbc:	785b      	ldrb	r3, [r3, #1]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d126      	bne.n	8005e10 <PCD_EP_ISR_Handler+0x5f8>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd6:	4413      	add	r3, r2
 8005dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8005dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	00da      	lsls	r2, r3, #3
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	4413      	add	r3, r2
 8005de4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005de8:	623b      	str	r3, [r7, #32]
 8005dea:	6a3b      	ldr	r3, [r7, #32]
 8005dec:	881b      	ldrh	r3, [r3, #0]
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	801a      	strh	r2, [r3, #0]
 8005dfa:	6a3b      	ldr	r3, [r7, #32]
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	801a      	strh	r2, [r3, #0]
 8005e0e:	e061      	b.n	8005ed4 <PCD_EP_ISR_Handler+0x6bc>
 8005e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e12:	785b      	ldrb	r3, [r3, #1]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d15d      	bne.n	8005ed4 <PCD_EP_ISR_Handler+0x6bc>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	461a      	mov	r2, r3
 8005e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2c:	4413      	add	r3, r2
 8005e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	00da      	lsls	r2, r3, #3
 8005e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e38:	4413      	add	r3, r2
 8005e3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e42:	2200      	movs	r2, #0
 8005e44:	801a      	strh	r2, [r3, #0]
 8005e46:	e045      	b.n	8005ed4 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e50:	785b      	ldrb	r3, [r3, #1]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d126      	bne.n	8005ea4 <PCD_EP_ISR_Handler+0x68c>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	461a      	mov	r2, r3
 8005e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6a:	4413      	add	r3, r2
 8005e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	00da      	lsls	r2, r3, #3
 8005e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e76:	4413      	add	r3, r2
 8005e78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e7c:	633b      	str	r3, [r7, #48]	; 0x30
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8c:	801a      	strh	r2, [r3, #0]
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e90:	881b      	ldrh	r3, [r3, #0]
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea0:	801a      	strh	r2, [r3, #0]
 8005ea2:	e017      	b.n	8005ed4 <PCD_EP_ISR_Handler+0x6bc>
 8005ea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ea6:	785b      	ldrb	r3, [r3, #1]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d113      	bne.n	8005ed4 <PCD_EP_ISR_Handler+0x6bc>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eba:	4413      	add	r3, r2
 8005ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	00da      	lsls	r2, r3, #3
 8005ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ecc:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005ed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	4619      	mov	r1, r3
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f007 fbb5 	bl	800d64a <HAL_PCD_DataInStageCallback>
 8005ee0:	e051      	b.n	8005f86 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005ee2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d144      	bne.n	8005f78 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	461a      	mov	r2, r3
 8005efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	00db      	lsls	r3, r3, #3
 8005f00:	4413      	add	r3, r2
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	6812      	ldr	r2, [r2, #0]
 8005f06:	4413      	add	r3, r2
 8005f08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f0c:	881b      	ldrh	r3, [r3, #0]
 8005f0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f12:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8005f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f18:	699a      	ldr	r2, [r3, #24]
 8005f1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d907      	bls.n	8005f32 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8005f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f24:	699a      	ldr	r2, [r3, #24]
 8005f26:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005f2a:	1ad2      	subs	r2, r2, r3
 8005f2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f2e:	619a      	str	r2, [r3, #24]
 8005f30:	e002      	b.n	8005f38 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8005f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f34:	2200      	movs	r2, #0
 8005f36:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d106      	bne.n	8005f4e <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	4619      	mov	r1, r3
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f007 fb7f 	bl	800d64a <HAL_PCD_DataInStageCallback>
 8005f4c:	e01b      	b.n	8005f86 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f50:	695a      	ldr	r2, [r3, #20]
 8005f52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005f56:	441a      	add	r2, r3
 8005f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f5a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f5e:	69da      	ldr	r2, [r3, #28]
 8005f60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005f64:	441a      	add	r2, r3
 8005f66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f68:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f70:	4618      	mov	r0, r3
 8005f72:	f003 fba6 	bl	80096c2 <USB_EPStartXfer>
 8005f76:	e006      	b.n	8005f86 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005f78:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 f917 	bl	80061b4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	b21b      	sxth	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f6ff ac45 	blt.w	8005822 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3758      	adds	r7, #88	; 0x58
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b088      	sub	sp, #32
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	60f8      	str	r0, [r7, #12]
 8005faa:	60b9      	str	r1, [r7, #8]
 8005fac:	4613      	mov	r3, r2
 8005fae:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005fb0:	88fb      	ldrh	r3, [r7, #6]
 8005fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d07c      	beq.n	80060b4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	4413      	add	r3, r2
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	6812      	ldr	r2, [r2, #0]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005fd8:	881b      	ldrh	r3, [r3, #0]
 8005fda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fde:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	699a      	ldr	r2, [r3, #24]
 8005fe4:	8b7b      	ldrh	r3, [r7, #26]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d306      	bcc.n	8005ff8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	699a      	ldr	r2, [r3, #24]
 8005fee:	8b7b      	ldrh	r3, [r7, #26]
 8005ff0:	1ad2      	subs	r2, r2, r3
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	619a      	str	r2, [r3, #24]
 8005ff6:	e002      	b.n	8005ffe <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d123      	bne.n	800604e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	461a      	mov	r2, r3
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	b29b      	uxth	r3, r3
 8006018:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800601c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006020:	833b      	strh	r3, [r7, #24]
 8006022:	8b3b      	ldrh	r3, [r7, #24]
 8006024:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006028:	833b      	strh	r3, [r7, #24]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	461a      	mov	r2, r3
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	441a      	add	r2, r3
 8006038:	8b3b      	ldrh	r3, [r7, #24]
 800603a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800603e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800604a:	b29b      	uxth	r3, r3
 800604c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800604e:	88fb      	ldrh	r3, [r7, #6]
 8006050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006054:	2b00      	cmp	r3, #0
 8006056:	d01f      	beq.n	8006098 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	461a      	mov	r2, r3
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	881b      	ldrh	r3, [r3, #0]
 8006068:	b29b      	uxth	r3, r3
 800606a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800606e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006072:	82fb      	strh	r3, [r7, #22]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	461a      	mov	r2, r3
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	441a      	add	r2, r3
 8006082:	8afb      	ldrh	r3, [r7, #22]
 8006084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800608c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006090:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006094:	b29b      	uxth	r3, r3
 8006096:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006098:	8b7b      	ldrh	r3, [r7, #26]
 800609a:	2b00      	cmp	r3, #0
 800609c:	f000 8085 	beq.w	80061aa <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6818      	ldr	r0, [r3, #0]
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	6959      	ldr	r1, [r3, #20]
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	891a      	ldrh	r2, [r3, #8]
 80060ac:	8b7b      	ldrh	r3, [r7, #26]
 80060ae:	f005 f835 	bl	800b11c <USB_ReadPMA>
 80060b2:	e07a      	b.n	80061aa <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060bc:	b29b      	uxth	r3, r3
 80060be:	461a      	mov	r2, r3
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	00db      	lsls	r3, r3, #3
 80060c6:	4413      	add	r3, r2
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	6812      	ldr	r2, [r2, #0]
 80060cc:	4413      	add	r3, r2
 80060ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060d2:	881b      	ldrh	r3, [r3, #0]
 80060d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060d8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	699a      	ldr	r2, [r3, #24]
 80060de:	8b7b      	ldrh	r3, [r7, #26]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d306      	bcc.n	80060f2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	699a      	ldr	r2, [r3, #24]
 80060e8:	8b7b      	ldrh	r3, [r7, #26]
 80060ea:	1ad2      	subs	r2, r2, r3
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	619a      	str	r2, [r3, #24]
 80060f0:	e002      	b.n	80060f8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	2200      	movs	r2, #0
 80060f6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d123      	bne.n	8006148 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	461a      	mov	r2, r3
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	b29b      	uxth	r3, r3
 8006112:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800611a:	83fb      	strh	r3, [r7, #30]
 800611c:	8bfb      	ldrh	r3, [r7, #30]
 800611e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006122:	83fb      	strh	r3, [r7, #30]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	461a      	mov	r2, r3
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	441a      	add	r2, r3
 8006132:	8bfb      	ldrh	r3, [r7, #30]
 8006134:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006138:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800613c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006144:	b29b      	uxth	r3, r3
 8006146:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006148:	88fb      	ldrh	r3, [r7, #6]
 800614a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614e:	2b00      	cmp	r3, #0
 8006150:	d11f      	bne.n	8006192 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	461a      	mov	r2, r3
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	881b      	ldrh	r3, [r3, #0]
 8006162:	b29b      	uxth	r3, r3
 8006164:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800616c:	83bb      	strh	r3, [r7, #28]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	461a      	mov	r2, r3
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	441a      	add	r2, r3
 800617c:	8bbb      	ldrh	r3, [r7, #28]
 800617e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006182:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800618a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800618e:	b29b      	uxth	r3, r3
 8006190:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006192:	8b7b      	ldrh	r3, [r7, #26]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d008      	beq.n	80061aa <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6818      	ldr	r0, [r3, #0]
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	6959      	ldr	r1, [r3, #20]
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	895a      	ldrh	r2, [r3, #10]
 80061a4:	8b7b      	ldrh	r3, [r7, #26]
 80061a6:	f004 ffb9 	bl	800b11c <USB_ReadPMA>
    }
  }

  return count;
 80061aa:	8b7b      	ldrh	r3, [r7, #26]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3720      	adds	r7, #32
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b0a4      	sub	sp, #144	; 0x90
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	4613      	mov	r3, r2
 80061c0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80061c2:	88fb      	ldrh	r3, [r7, #6]
 80061c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 81db 	beq.w	8006584 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	461a      	mov	r2, r3
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	00db      	lsls	r3, r3, #3
 80061e0:	4413      	add	r3, r2
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	6812      	ldr	r2, [r2, #0]
 80061e6:	4413      	add	r3, r2
 80061e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061ec:	881b      	ldrh	r3, [r3, #0]
 80061ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061f2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	699a      	ldr	r2, [r3, #24]
 80061fa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80061fe:	429a      	cmp	r2, r3
 8006200:	d907      	bls.n	8006212 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	699a      	ldr	r2, [r3, #24]
 8006206:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800620a:	1ad2      	subs	r2, r2, r3
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	619a      	str	r2, [r3, #24]
 8006210:	e002      	b.n	8006218 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	2200      	movs	r2, #0
 8006216:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	2b00      	cmp	r3, #0
 800621e:	f040 80b9 	bne.w	8006394 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	785b      	ldrb	r3, [r3, #1]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d126      	bne.n	8006278 <HAL_PCD_EP_DB_Transmit+0xc4>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006238:	b29b      	uxth	r3, r3
 800623a:	461a      	mov	r2, r3
 800623c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623e:	4413      	add	r3, r2
 8006240:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	00da      	lsls	r2, r3, #3
 8006248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624a:	4413      	add	r3, r2
 800624c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006250:	62bb      	str	r3, [r7, #40]	; 0x28
 8006252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006254:	881b      	ldrh	r3, [r3, #0]
 8006256:	b29b      	uxth	r3, r3
 8006258:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800625c:	b29a      	uxth	r2, r3
 800625e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006260:	801a      	strh	r2, [r3, #0]
 8006262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006264:	881b      	ldrh	r3, [r3, #0]
 8006266:	b29b      	uxth	r3, r3
 8006268:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800626c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006270:	b29a      	uxth	r2, r3
 8006272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006274:	801a      	strh	r2, [r3, #0]
 8006276:	e01a      	b.n	80062ae <HAL_PCD_EP_DB_Transmit+0xfa>
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	785b      	ldrb	r3, [r3, #1]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d116      	bne.n	80062ae <HAL_PCD_EP_DB_Transmit+0xfa>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	637b      	str	r3, [r7, #52]	; 0x34
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800628e:	b29b      	uxth	r3, r3
 8006290:	461a      	mov	r2, r3
 8006292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006294:	4413      	add	r3, r2
 8006296:	637b      	str	r3, [r7, #52]	; 0x34
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	00da      	lsls	r2, r3, #3
 800629e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a0:	4413      	add	r3, r2
 80062a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80062a6:	633b      	str	r3, [r7, #48]	; 0x30
 80062a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062aa:	2200      	movs	r2, #0
 80062ac:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	627b      	str	r3, [r7, #36]	; 0x24
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	785b      	ldrb	r3, [r3, #1]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d126      	bne.n	800630a <HAL_PCD_EP_DB_Transmit+0x156>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	61fb      	str	r3, [r7, #28]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	461a      	mov	r2, r3
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	4413      	add	r3, r2
 80062d2:	61fb      	str	r3, [r7, #28]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	00da      	lsls	r2, r3, #3
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	4413      	add	r3, r2
 80062de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80062e2:	61bb      	str	r3, [r7, #24]
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	801a      	strh	r2, [r3, #0]
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	881b      	ldrh	r3, [r3, #0]
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006302:	b29a      	uxth	r2, r3
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	801a      	strh	r2, [r3, #0]
 8006308:	e017      	b.n	800633a <HAL_PCD_EP_DB_Transmit+0x186>
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	785b      	ldrb	r3, [r3, #1]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d113      	bne.n	800633a <HAL_PCD_EP_DB_Transmit+0x186>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800631a:	b29b      	uxth	r3, r3
 800631c:	461a      	mov	r2, r3
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	4413      	add	r3, r2
 8006322:	627b      	str	r3, [r7, #36]	; 0x24
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	00da      	lsls	r2, r3, #3
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	4413      	add	r3, r2
 800632e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006332:	623b      	str	r3, [r7, #32]
 8006334:	6a3b      	ldr	r3, [r7, #32]
 8006336:	2200      	movs	r2, #0
 8006338:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	4619      	mov	r1, r3
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f007 f982 	bl	800d64a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006346:	88fb      	ldrh	r3, [r7, #6]
 8006348:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800634c:	2b00      	cmp	r3, #0
 800634e:	f000 82fa 	beq.w	8006946 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	461a      	mov	r2, r3
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4413      	add	r3, r2
 8006360:	881b      	ldrh	r3, [r3, #0]
 8006362:	b29b      	uxth	r3, r3
 8006364:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800636c:	82fb      	strh	r3, [r7, #22]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	461a      	mov	r2, r3
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	441a      	add	r2, r3
 800637c:	8afb      	ldrh	r3, [r7, #22]
 800637e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006382:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006386:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800638a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800638e:	b29b      	uxth	r3, r3
 8006390:	8013      	strh	r3, [r2, #0]
 8006392:	e2d8      	b.n	8006946 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006394:	88fb      	ldrh	r3, [r7, #6]
 8006396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d021      	beq.n	80063e2 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	461a      	mov	r2, r3
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	461a      	mov	r2, r3
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	441a      	add	r2, r3
 80063ca:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80063ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063de:	b29b      	uxth	r3, r3
 80063e0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	f040 82ac 	bne.w	8006946 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	695a      	ldr	r2, [r3, #20]
 80063f2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80063f6:	441a      	add	r2, r3
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	69da      	ldr	r2, [r3, #28]
 8006400:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006404:	441a      	add	r2, r3
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	6a1a      	ldr	r2, [r3, #32]
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	429a      	cmp	r2, r3
 8006414:	d30b      	bcc.n	800642e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	6a1a      	ldr	r2, [r3, #32]
 8006422:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006426:	1ad2      	subs	r2, r2, r3
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	621a      	str	r2, [r3, #32]
 800642c:	e017      	b.n	800645e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d108      	bne.n	8006448 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8006436:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800643a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006446:	e00a      	b.n	800645e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	2200      	movs	r2, #0
 800645c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	785b      	ldrb	r3, [r3, #1]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d165      	bne.n	8006532 <HAL_PCD_EP_DB_Transmit+0x37e>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006474:	b29b      	uxth	r3, r3
 8006476:	461a      	mov	r2, r3
 8006478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800647a:	4413      	add	r3, r2
 800647c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	00da      	lsls	r2, r3, #3
 8006484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006486:	4413      	add	r3, r2
 8006488:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800648c:	63bb      	str	r3, [r7, #56]	; 0x38
 800648e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006490:	881b      	ldrh	r3, [r3, #0]
 8006492:	b29b      	uxth	r3, r3
 8006494:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006498:	b29a      	uxth	r2, r3
 800649a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649c:	801a      	strh	r2, [r3, #0]
 800649e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064a2:	2b3e      	cmp	r3, #62	; 0x3e
 80064a4:	d91d      	bls.n	80064e2 <HAL_PCD_EP_DB_Transmit+0x32e>
 80064a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064aa:	095b      	lsrs	r3, r3, #5
 80064ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80064ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064b2:	f003 031f 	and.w	r3, r3, #31
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d102      	bne.n	80064c0 <HAL_PCD_EP_DB_Transmit+0x30c>
 80064ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064bc:	3b01      	subs	r3, #1
 80064be:	64bb      	str	r3, [r7, #72]	; 0x48
 80064c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	029b      	lsls	r3, r3, #10
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	4313      	orrs	r3, r2
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064da:	b29a      	uxth	r2, r3
 80064dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064de:	801a      	strh	r2, [r3, #0]
 80064e0:	e044      	b.n	800656c <HAL_PCD_EP_DB_Transmit+0x3b8>
 80064e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10a      	bne.n	8006500 <HAL_PCD_EP_DB_Transmit+0x34c>
 80064ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ec:	881b      	ldrh	r3, [r3, #0]
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fc:	801a      	strh	r2, [r3, #0]
 80064fe:	e035      	b.n	800656c <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006500:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006504:	085b      	lsrs	r3, r3, #1
 8006506:	64bb      	str	r3, [r7, #72]	; 0x48
 8006508:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <HAL_PCD_EP_DB_Transmit+0x366>
 8006514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006516:	3301      	adds	r3, #1
 8006518:	64bb      	str	r3, [r7, #72]	; 0x48
 800651a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651c:	881b      	ldrh	r3, [r3, #0]
 800651e:	b29a      	uxth	r2, r3
 8006520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006522:	b29b      	uxth	r3, r3
 8006524:	029b      	lsls	r3, r3, #10
 8006526:	b29b      	uxth	r3, r3
 8006528:	4313      	orrs	r3, r2
 800652a:	b29a      	uxth	r2, r3
 800652c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800652e:	801a      	strh	r2, [r3, #0]
 8006530:	e01c      	b.n	800656c <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	785b      	ldrb	r3, [r3, #1]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d118      	bne.n	800656c <HAL_PCD_EP_DB_Transmit+0x3b8>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	647b      	str	r3, [r7, #68]	; 0x44
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006548:	b29b      	uxth	r3, r3
 800654a:	461a      	mov	r2, r3
 800654c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800654e:	4413      	add	r3, r2
 8006550:	647b      	str	r3, [r7, #68]	; 0x44
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	00da      	lsls	r2, r3, #3
 8006558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800655a:	4413      	add	r3, r2
 800655c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006560:	643b      	str	r3, [r7, #64]	; 0x40
 8006562:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006566:	b29a      	uxth	r2, r3
 8006568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800656a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6818      	ldr	r0, [r3, #0]
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	6959      	ldr	r1, [r3, #20]
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	891a      	ldrh	r2, [r3, #8]
 8006578:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800657c:	b29b      	uxth	r3, r3
 800657e:	f004 fd8b 	bl	800b098 <USB_WritePMA>
 8006582:	e1e0      	b.n	8006946 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800658c:	b29b      	uxth	r3, r3
 800658e:	461a      	mov	r2, r3
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	00db      	lsls	r3, r3, #3
 8006596:	4413      	add	r3, r2
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	6812      	ldr	r2, [r2, #0]
 800659c:	4413      	add	r3, r2
 800659e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065a2:	881b      	ldrh	r3, [r3, #0]
 80065a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065a8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	699a      	ldr	r2, [r3, #24]
 80065b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d307      	bcc.n	80065c8 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	699a      	ldr	r2, [r3, #24]
 80065bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80065c0:	1ad2      	subs	r2, r2, r3
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	619a      	str	r2, [r3, #24]
 80065c6:	e002      	b.n	80065ce <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	2200      	movs	r2, #0
 80065cc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f040 80c0 	bne.w	8006758 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	785b      	ldrb	r3, [r3, #1]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d126      	bne.n	800662e <HAL_PCD_EP_DB_Transmit+0x47a>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	461a      	mov	r2, r3
 80065f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80065f4:	4413      	add	r3, r2
 80065f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	00da      	lsls	r2, r3, #3
 80065fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006600:	4413      	add	r3, r2
 8006602:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006606:	67bb      	str	r3, [r7, #120]	; 0x78
 8006608:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800660a:	881b      	ldrh	r3, [r3, #0]
 800660c:	b29b      	uxth	r3, r3
 800660e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006612:	b29a      	uxth	r2, r3
 8006614:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006616:	801a      	strh	r2, [r3, #0]
 8006618:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800661a:	881b      	ldrh	r3, [r3, #0]
 800661c:	b29b      	uxth	r3, r3
 800661e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006626:	b29a      	uxth	r2, r3
 8006628:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800662a:	801a      	strh	r2, [r3, #0]
 800662c:	e01a      	b.n	8006664 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	785b      	ldrb	r3, [r3, #1]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d116      	bne.n	8006664 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	667b      	str	r3, [r7, #100]	; 0x64
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006644:	b29b      	uxth	r3, r3
 8006646:	461a      	mov	r2, r3
 8006648:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800664a:	4413      	add	r3, r2
 800664c:	667b      	str	r3, [r7, #100]	; 0x64
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	00da      	lsls	r2, r3, #3
 8006654:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006656:	4413      	add	r3, r2
 8006658:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800665c:	663b      	str	r3, [r7, #96]	; 0x60
 800665e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006660:	2200      	movs	r2, #0
 8006662:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	677b      	str	r3, [r7, #116]	; 0x74
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	785b      	ldrb	r3, [r3, #1]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d12b      	bne.n	80066ca <HAL_PCD_EP_DB_Transmit+0x516>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006680:	b29b      	uxth	r3, r3
 8006682:	461a      	mov	r2, r3
 8006684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006686:	4413      	add	r3, r2
 8006688:	66fb      	str	r3, [r7, #108]	; 0x6c
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	00da      	lsls	r2, r3, #3
 8006690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006692:	4413      	add	r3, r2
 8006694:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006698:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800669c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80066ae:	801a      	strh	r2, [r3, #0]
 80066b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80066b4:	881b      	ldrh	r3, [r3, #0]
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80066c6:	801a      	strh	r2, [r3, #0]
 80066c8:	e017      	b.n	80066fa <HAL_PCD_EP_DB_Transmit+0x546>
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	785b      	ldrb	r3, [r3, #1]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d113      	bne.n	80066fa <HAL_PCD_EP_DB_Transmit+0x546>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066da:	b29b      	uxth	r3, r3
 80066dc:	461a      	mov	r2, r3
 80066de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066e0:	4413      	add	r3, r2
 80066e2:	677b      	str	r3, [r7, #116]	; 0x74
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	00da      	lsls	r2, r3, #3
 80066ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066ec:	4413      	add	r3, r2
 80066ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80066f2:	673b      	str	r3, [r7, #112]	; 0x70
 80066f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066f6:	2200      	movs	r2, #0
 80066f8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	4619      	mov	r1, r3
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f006 ffa2 	bl	800d64a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006706:	88fb      	ldrh	r3, [r7, #6]
 8006708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800670c:	2b00      	cmp	r3, #0
 800670e:	f040 811a 	bne.w	8006946 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	461a      	mov	r2, r3
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4413      	add	r3, r2
 8006720:	881b      	ldrh	r3, [r3, #0]
 8006722:	b29b      	uxth	r3, r3
 8006724:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800672c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	461a      	mov	r2, r3
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	441a      	add	r2, r3
 800673e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8006742:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006746:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800674a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800674e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006752:	b29b      	uxth	r3, r3
 8006754:	8013      	strh	r3, [r2, #0]
 8006756:	e0f6      	b.n	8006946 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006758:	88fb      	ldrh	r3, [r7, #6]
 800675a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d121      	bne.n	80067a6 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	461a      	mov	r2, r3
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	4413      	add	r3, r2
 8006770:	881b      	ldrh	r3, [r3, #0]
 8006772:	b29b      	uxth	r3, r3
 8006774:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	461a      	mov	r2, r3
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	441a      	add	r2, r3
 800678e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006792:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006796:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800679a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800679e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	f040 80ca 	bne.w	8006946 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	695a      	ldr	r2, [r3, #20]
 80067b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80067ba:	441a      	add	r2, r3
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	69da      	ldr	r2, [r3, #28]
 80067c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80067c8:	441a      	add	r2, r3
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	6a1a      	ldr	r2, [r3, #32]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d30b      	bcc.n	80067f2 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	6a1a      	ldr	r2, [r3, #32]
 80067e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067ea:	1ad2      	subs	r2, r2, r3
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	621a      	str	r2, [r3, #32]
 80067f0:	e017      	b.n	8006822 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d108      	bne.n	800680c <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80067fa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80067fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800680a:	e00a      	b.n	8006822 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	2200      	movs	r2, #0
 8006818:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	657b      	str	r3, [r7, #84]	; 0x54
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	785b      	ldrb	r3, [r3, #1]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d165      	bne.n	80068fc <HAL_PCD_EP_DB_Transmit+0x748>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800683e:	b29b      	uxth	r3, r3
 8006840:	461a      	mov	r2, r3
 8006842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006844:	4413      	add	r3, r2
 8006846:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	00da      	lsls	r2, r3, #3
 800684e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006850:	4413      	add	r3, r2
 8006852:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006856:	65bb      	str	r3, [r7, #88]	; 0x58
 8006858:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800685a:	881b      	ldrh	r3, [r3, #0]
 800685c:	b29b      	uxth	r3, r3
 800685e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006862:	b29a      	uxth	r2, r3
 8006864:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006866:	801a      	strh	r2, [r3, #0]
 8006868:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800686c:	2b3e      	cmp	r3, #62	; 0x3e
 800686e:	d91d      	bls.n	80068ac <HAL_PCD_EP_DB_Transmit+0x6f8>
 8006870:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006874:	095b      	lsrs	r3, r3, #5
 8006876:	66bb      	str	r3, [r7, #104]	; 0x68
 8006878:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800687c:	f003 031f 	and.w	r3, r3, #31
 8006880:	2b00      	cmp	r3, #0
 8006882:	d102      	bne.n	800688a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006884:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006886:	3b01      	subs	r3, #1
 8006888:	66bb      	str	r3, [r7, #104]	; 0x68
 800688a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	b29a      	uxth	r2, r3
 8006890:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006892:	b29b      	uxth	r3, r3
 8006894:	029b      	lsls	r3, r3, #10
 8006896:	b29b      	uxth	r3, r3
 8006898:	4313      	orrs	r3, r2
 800689a:	b29b      	uxth	r3, r3
 800689c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068a8:	801a      	strh	r2, [r3, #0]
 80068aa:	e041      	b.n	8006930 <HAL_PCD_EP_DB_Transmit+0x77c>
 80068ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10a      	bne.n	80068ca <HAL_PCD_EP_DB_Transmit+0x716>
 80068b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068b6:	881b      	ldrh	r3, [r3, #0]
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068c6:	801a      	strh	r2, [r3, #0]
 80068c8:	e032      	b.n	8006930 <HAL_PCD_EP_DB_Transmit+0x77c>
 80068ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068ce:	085b      	lsrs	r3, r3, #1
 80068d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80068d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <HAL_PCD_EP_DB_Transmit+0x730>
 80068de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068e0:	3301      	adds	r3, #1
 80068e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80068e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068e6:	881b      	ldrh	r3, [r3, #0]
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	029b      	lsls	r3, r3, #10
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	4313      	orrs	r3, r2
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068f8:	801a      	strh	r2, [r3, #0]
 80068fa:	e019      	b.n	8006930 <HAL_PCD_EP_DB_Transmit+0x77c>
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	785b      	ldrb	r3, [r3, #1]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d115      	bne.n	8006930 <HAL_PCD_EP_DB_Transmit+0x77c>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800690c:	b29b      	uxth	r3, r3
 800690e:	461a      	mov	r2, r3
 8006910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006912:	4413      	add	r3, r2
 8006914:	657b      	str	r3, [r7, #84]	; 0x54
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	00da      	lsls	r2, r3, #3
 800691c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800691e:	4413      	add	r3, r2
 8006920:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006924:	653b      	str	r3, [r7, #80]	; 0x50
 8006926:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800692a:	b29a      	uxth	r2, r3
 800692c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800692e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6818      	ldr	r0, [r3, #0]
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	6959      	ldr	r1, [r3, #20]
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	895a      	ldrh	r2, [r3, #10]
 800693c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006940:	b29b      	uxth	r3, r3
 8006942:	f004 fba9 	bl	800b098 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	461a      	mov	r2, r3
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	b29b      	uxth	r3, r3
 8006958:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800695c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006960:	82bb      	strh	r3, [r7, #20]
 8006962:	8abb      	ldrh	r3, [r7, #20]
 8006964:	f083 0310 	eor.w	r3, r3, #16
 8006968:	82bb      	strh	r3, [r7, #20]
 800696a:	8abb      	ldrh	r3, [r7, #20]
 800696c:	f083 0320 	eor.w	r3, r3, #32
 8006970:	82bb      	strh	r3, [r7, #20]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	461a      	mov	r2, r3
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	441a      	add	r2, r3
 8006980:	8abb      	ldrh	r3, [r7, #20]
 8006982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800698a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800698e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006992:	b29b      	uxth	r3, r3
 8006994:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3790      	adds	r7, #144	; 0x90
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	607b      	str	r3, [r7, #4]
 80069aa:	460b      	mov	r3, r1
 80069ac:	817b      	strh	r3, [r7, #10]
 80069ae:	4613      	mov	r3, r2
 80069b0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80069b2:	897b      	ldrh	r3, [r7, #10]
 80069b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00b      	beq.n	80069d6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069be:	897b      	ldrh	r3, [r7, #10]
 80069c0:	f003 0307 	and.w	r3, r3, #7
 80069c4:	1c5a      	adds	r2, r3, #1
 80069c6:	4613      	mov	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4413      	add	r3, r2
 80069cc:	00db      	lsls	r3, r3, #3
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	4413      	add	r3, r2
 80069d2:	617b      	str	r3, [r7, #20]
 80069d4:	e009      	b.n	80069ea <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80069d6:	897a      	ldrh	r2, [r7, #10]
 80069d8:	4613      	mov	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	00db      	lsls	r3, r3, #3
 80069e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	4413      	add	r3, r2
 80069e8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80069ea:	893b      	ldrh	r3, [r7, #8]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d107      	bne.n	8006a00 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	2200      	movs	r2, #0
 80069f4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	80da      	strh	r2, [r3, #6]
 80069fe:	e00b      	b.n	8006a18 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	2201      	movs	r2, #1
 8006a04:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	0c1b      	lsrs	r3, r3, #16
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	371c      	adds	r7, #28
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr

08006a26 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b085      	sub	sp, #20
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	f043 0301 	orr.w	r3, r3, #1
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	f043 0302 	orr.w	r3, r3, #2
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
	...

08006a7c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a80:	4b05      	ldr	r3, [pc, #20]	; (8006a98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a04      	ldr	r2, [pc, #16]	; (8006a98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a8a:	6013      	str	r3, [r2, #0]
}
 8006a8c:	bf00      	nop
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	58000400 	.word	0x58000400

08006a9c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006aa0:	4b04      	ldr	r3, [pc, #16]	; (8006ab4 <HAL_PWREx_GetVoltageRange+0x18>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	58000400 	.word	0x58000400

08006ab8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006abc:	4b05      	ldr	r3, [pc, #20]	; (8006ad4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	4a04      	ldr	r2, [pc, #16]	; (8006ad4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ac6:	6053      	str	r3, [r2, #4]
}
 8006ac8:	bf00      	nop
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	58000400 	.word	0x58000400

08006ad8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ae6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aea:	d101      	bne.n	8006af0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006aec:	2301      	movs	r3, #1
 8006aee:	e000      	b.n	8006af2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8006afc:	b480      	push	{r7}
 8006afe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b0e:	6013      	str	r3, [r2, #0]
}
 8006b10:	bf00      	nop
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr

08006b1a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b2c:	6013      	str	r3, [r2, #0]
}
 8006b2e:	bf00      	nop
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b4a:	d101      	bne.n	8006b50 <LL_RCC_HSE_IsReady+0x18>
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e000      	b.n	8006b52 <LL_RCC_HSE_IsReady+0x1a>
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b6e:	6013      	str	r3, [r2, #0]
}
 8006b70:	bf00      	nop
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b8c:	6013      	str	r3, [r2, #0]
}
 8006b8e:	bf00      	nop
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006baa:	d101      	bne.n	8006bb0 <LL_RCC_HSI_IsReady+0x18>
 8006bac:	2301      	movs	r3, #1
 8006bae:	e000      	b.n	8006bb2 <LL_RCC_HSI_IsReady+0x1a>
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	061b      	lsls	r3, r3, #24
 8006bd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	604b      	str	r3, [r1, #4]
}
 8006bda:	bf00      	nop
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8006be6:	b480      	push	{r7}
 8006be8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bf6:	f043 0301 	orr.w	r3, r3, #1
 8006bfa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8006bfe:	bf00      	nop
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c18:	f023 0301 	bic.w	r3, r3, #1
 8006c1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8006c20:	bf00      	nop
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8006c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d101      	bne.n	8006c42 <LL_RCC_HSI48_IsReady+0x18>
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e000      	b.n	8006c44 <LL_RCC_HSI48_IsReady+0x1a>
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c5e:	f043 0301 	orr.w	r3, r3, #1
 8006c62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006c66:	bf00      	nop
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8006c70:	b480      	push	{r7}
 8006c72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c80:	f023 0301 	bic.w	r3, r3, #1
 8006c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006c88:	bf00      	nop
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8006c92:	b480      	push	{r7}
 8006c94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ca2:	f043 0304 	orr.w	r3, r3, #4
 8006ca6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006caa:	bf00      	nop
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006cc4:	f023 0304 	bic.w	r3, r3, #4
 8006cc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006ccc:	bf00      	nop
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ce2:	f003 0302 	and.w	r3, r3, #2
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d101      	bne.n	8006cee <LL_RCC_LSE_IsReady+0x18>
 8006cea:	2301      	movs	r3, #1
 8006cec:	e000      	b.n	8006cf0 <LL_RCC_LSE_IsReady+0x1a>
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d0a:	f043 0301 	orr.w	r3, r3, #1
 8006d0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006d12:	bf00      	nop
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d2c:	f023 0301 	bic.w	r3, r3, #1
 8006d30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006d34:	bf00      	nop
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8006d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d4a:	f003 0302 	and.w	r3, r3, #2
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d101      	bne.n	8006d56 <LL_RCC_LSI1_IsReady+0x18>
 8006d52:	2301      	movs	r3, #1
 8006d54:	e000      	b.n	8006d58 <LL_RCC_LSI1_IsReady+0x1a>
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8006d62:	b480      	push	{r7}
 8006d64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d72:	f043 0304 	orr.w	r3, r3, #4
 8006d76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006d7a:	bf00      	nop
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8006d84:	b480      	push	{r7}
 8006d86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d94:	f023 0304 	bic.w	r3, r3, #4
 8006d98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006d9c:	bf00      	nop
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8006da6:	b480      	push	{r7}
 8006da8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8006daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006db2:	f003 0308 	and.w	r3, r3, #8
 8006db6:	2b08      	cmp	r3, #8
 8006db8:	d101      	bne.n	8006dbe <LL_RCC_LSI2_IsReady+0x18>
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e000      	b.n	8006dc0 <LL_RCC_LSI2_IsReady+0x1a>
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b083      	sub	sp, #12
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8006dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dda:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	021b      	lsls	r3, r3, #8
 8006de2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006de6:	4313      	orrs	r3, r2
 8006de8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e06:	f043 0301 	orr.w	r3, r3, #1
 8006e0a:	6013      	str	r3, [r2, #0]
}
 8006e0c:	bf00      	nop
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8006e16:	b480      	push	{r7}
 8006e18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e24:	f023 0301 	bic.w	r3, r3, #1
 8006e28:	6013      	str	r3, [r2, #0]
}
 8006e2a:	bf00      	nop
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8006e34:	b480      	push	{r7}
 8006e36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 0302 	and.w	r3, r3, #2
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d101      	bne.n	8006e4a <LL_RCC_MSI_IsReady+0x16>
 8006e46:	2301      	movs	r3, #1
 8006e48:	e000      	b.n	8006e4c <LL_RCC_MSI_IsReady+0x18>
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b083      	sub	sp, #12
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8006e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	600b      	str	r3, [r1, #0]
}
 8006e72:	bf00      	nop
 8006e74:	370c      	adds	r7, #12
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr

08006e7e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b083      	sub	sp, #12
 8006e82:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e8e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2bb0      	cmp	r3, #176	; 0xb0
 8006e94:	d901      	bls.n	8006e9a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8006e96:	23b0      	movs	r3, #176	; 0xb0
 8006e98:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8006e9a:	687b      	ldr	r3, [r7, #4]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	021b      	lsls	r3, r3, #8
 8006ebe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	604b      	str	r3, [r1, #4]
}
 8006ec6:	bf00      	nop
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b083      	sub	sp, #12
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f023 0203 	bic.w	r2, r3, #3
 8006ee4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	608b      	str	r3, [r1, #8]
}
 8006eee:	bf00      	nop
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr

08006efa <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8006efa:	b480      	push	{r7}
 8006efc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f003 030c 	and.w	r3, r3, #12
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8006f12:	b480      	push	{r7}
 8006f14:	b083      	sub	sp, #12
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	608b      	str	r3, [r1, #8]
}
 8006f2e:	bf00      	nop
 8006f30:	370c      	adds	r7, #12
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr

08006f3a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b083      	sub	sp, #12
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f46:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006f4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006f5a:	bf00      	nop
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8006f66:	b480      	push	{r7}
 8006f68:	b083      	sub	sp, #12
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f72:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006f76:	f023 020f 	bic.w	r2, r3, #15
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	091b      	lsrs	r3, r3, #4
 8006f7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f82:	4313      	orrs	r3, r2
 8006f84:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006fa6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	608b      	str	r3, [r1, #8]
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006fce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	608b      	str	r3, [r1, #8]
}
 8006fd8:	bf00      	nop
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8007000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007004:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007008:	011b      	lsls	r3, r3, #4
 800700a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800700e:	4618      	mov	r0, r3
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8007018:	b480      	push	{r7}
 800701a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800701c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800702a:	6013      	str	r3, [r2, #0]
}
 800702c:	bf00      	nop
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8007036:	b480      	push	{r7}
 8007038:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800703a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007044:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007048:	6013      	str	r3, [r2, #0]
}
 800704a:	bf00      	nop
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8007054:	b480      	push	{r7}
 8007056:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8007058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007062:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007066:	d101      	bne.n	800706c <LL_RCC_PLL_IsReady+0x18>
 8007068:	2301      	movs	r3, #1
 800706a:	e000      	b.n	800706e <LL_RCC_PLL_IsReady+0x1a>
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007078:	b480      	push	{r7}
 800707a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800707c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	0a1b      	lsrs	r3, r3, #8
 8007084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8007088:	4618      	mov	r0, r3
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8007092:	b480      	push	{r7}
 8007094:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80070aa:	b480      	push	{r7}
 80070ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80070ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80070c2:	b480      	push	{r7}
 80070c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80070c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	f003 0303 	and.w	r3, r3, #3
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80070da:	b480      	push	{r7}
 80070dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80070de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070ec:	d101      	bne.n	80070f2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80070ee:	2301      	movs	r3, #1
 80070f0:	e000      	b.n	80070f4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80070fe:	b480      	push	{r7}
 8007100:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8007102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007106:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800710a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800710e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007112:	d101      	bne.n	8007118 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8007114:	2301      	movs	r3, #1
 8007116:	e000      	b.n	800711a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8007124:	b480      	push	{r7}
 8007126:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8007128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800712c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007138:	d101      	bne.n	800713e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800713a:	2301      	movs	r3, #1
 800713c:	e000      	b.n	8007140 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800714a:	b480      	push	{r7}
 800714c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800714e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007158:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800715c:	d101      	bne.n	8007162 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800715e:	2301      	movs	r3, #1
 8007160:	e000      	b.n	8007164 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800716e:	b480      	push	{r7}
 8007170:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8007172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800717c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007180:	d101      	bne.n	8007186 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8007182:	2301      	movs	r3, #1
 8007184:	e000      	b.n	8007188 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
	...

08007194 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007194:	b590      	push	{r4, r7, lr}
 8007196:	b08d      	sub	sp, #52	; 0x34
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e363      	b.n	800786e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0320 	and.w	r3, r3, #32
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f000 808d 	beq.w	80072ce <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071b4:	f7ff fea1 	bl	8006efa <LL_RCC_GetSysClkSource>
 80071b8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80071ba:	f7ff ff82 	bl	80070c2 <LL_RCC_PLL_GetMainSource>
 80071be:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80071c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d005      	beq.n	80071d2 <HAL_RCC_OscConfig+0x3e>
 80071c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c8:	2b0c      	cmp	r3, #12
 80071ca:	d147      	bne.n	800725c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80071cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d144      	bne.n	800725c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	69db      	ldr	r3, [r3, #28]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d101      	bne.n	80071de <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e347      	b.n	800786e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80071e2:	f7ff fe4c 	bl	8006e7e <LL_RCC_MSI_GetRange>
 80071e6:	4603      	mov	r3, r0
 80071e8:	429c      	cmp	r4, r3
 80071ea:	d914      	bls.n	8007216 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f0:	4618      	mov	r0, r3
 80071f2:	f000 fd05 	bl	8007c00 <RCC_SetFlashLatencyFromMSIRange>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d001      	beq.n	8007200 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e336      	b.n	800786e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007204:	4618      	mov	r0, r3
 8007206:	f7ff fe26 	bl	8006e56 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	4618      	mov	r0, r3
 8007210:	f7ff fe4a 	bl	8006ea8 <LL_RCC_MSI_SetCalibTrimming>
 8007214:	e013      	b.n	800723e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721a:	4618      	mov	r0, r3
 800721c:	f7ff fe1b 	bl	8006e56 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a1b      	ldr	r3, [r3, #32]
 8007224:	4618      	mov	r0, r3
 8007226:	f7ff fe3f 	bl	8006ea8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722e:	4618      	mov	r0, r3
 8007230:	f000 fce6 	bl	8007c00 <RCC_SetFlashLatencyFromMSIRange>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d001      	beq.n	800723e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e317      	b.n	800786e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800723e:	f000 fccb 	bl	8007bd8 <HAL_RCC_GetHCLKFreq>
 8007242:	4603      	mov	r3, r0
 8007244:	4aa4      	ldr	r2, [pc, #656]	; (80074d8 <HAL_RCC_OscConfig+0x344>)
 8007246:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007248:	4ba4      	ldr	r3, [pc, #656]	; (80074dc <HAL_RCC_OscConfig+0x348>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4618      	mov	r0, r3
 800724e:	f7fd fac5 	bl	80047dc <HAL_InitTick>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d039      	beq.n	80072cc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e308      	b.n	800786e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	69db      	ldr	r3, [r3, #28]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d01e      	beq.n	80072a2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007264:	f7ff fdc8 	bl	8006df8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007268:	f7fd fb06 	bl	8004878 <HAL_GetTick>
 800726c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800726e:	e008      	b.n	8007282 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007270:	f7fd fb02 	bl	8004878 <HAL_GetTick>
 8007274:	4602      	mov	r2, r0
 8007276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	2b02      	cmp	r3, #2
 800727c:	d901      	bls.n	8007282 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e2f5      	b.n	800786e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8007282:	f7ff fdd7 	bl	8006e34 <LL_RCC_MSI_IsReady>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d0f1      	beq.n	8007270 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007290:	4618      	mov	r0, r3
 8007292:	f7ff fde0 	bl	8006e56 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	4618      	mov	r0, r3
 800729c:	f7ff fe04 	bl	8006ea8 <LL_RCC_MSI_SetCalibTrimming>
 80072a0:	e015      	b.n	80072ce <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80072a2:	f7ff fdb8 	bl	8006e16 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80072a6:	f7fd fae7 	bl	8004878 <HAL_GetTick>
 80072aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80072ac:	e008      	b.n	80072c0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80072ae:	f7fd fae3 	bl	8004878 <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d901      	bls.n	80072c0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80072bc:	2303      	movs	r3, #3
 80072be:	e2d6      	b.n	800786e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80072c0:	f7ff fdb8 	bl	8006e34 <LL_RCC_MSI_IsReady>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1f1      	bne.n	80072ae <HAL_RCC_OscConfig+0x11a>
 80072ca:	e000      	b.n	80072ce <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80072cc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d047      	beq.n	800736a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072da:	f7ff fe0e 	bl	8006efa <LL_RCC_GetSysClkSource>
 80072de:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80072e0:	f7ff feef 	bl	80070c2 <LL_RCC_PLL_GetMainSource>
 80072e4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80072e6:	6a3b      	ldr	r3, [r7, #32]
 80072e8:	2b08      	cmp	r3, #8
 80072ea:	d005      	beq.n	80072f8 <HAL_RCC_OscConfig+0x164>
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	2b0c      	cmp	r3, #12
 80072f0:	d108      	bne.n	8007304 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	2b03      	cmp	r3, #3
 80072f6:	d105      	bne.n	8007304 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d134      	bne.n	800736a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e2b4      	b.n	800786e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800730c:	d102      	bne.n	8007314 <HAL_RCC_OscConfig+0x180>
 800730e:	f7ff fbf5 	bl	8006afc <LL_RCC_HSE_Enable>
 8007312:	e001      	b.n	8007318 <HAL_RCC_OscConfig+0x184>
 8007314:	f7ff fc01 	bl	8006b1a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d012      	beq.n	8007346 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007320:	f7fd faaa 	bl	8004878 <HAL_GetTick>
 8007324:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8007326:	e008      	b.n	800733a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007328:	f7fd faa6 	bl	8004878 <HAL_GetTick>
 800732c:	4602      	mov	r2, r0
 800732e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	2b64      	cmp	r3, #100	; 0x64
 8007334:	d901      	bls.n	800733a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007336:	2303      	movs	r3, #3
 8007338:	e299      	b.n	800786e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800733a:	f7ff fbfd 	bl	8006b38 <LL_RCC_HSE_IsReady>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d0f1      	beq.n	8007328 <HAL_RCC_OscConfig+0x194>
 8007344:	e011      	b.n	800736a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007346:	f7fd fa97 	bl	8004878 <HAL_GetTick>
 800734a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800734c:	e008      	b.n	8007360 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800734e:	f7fd fa93 	bl	8004878 <HAL_GetTick>
 8007352:	4602      	mov	r2, r0
 8007354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	2b64      	cmp	r3, #100	; 0x64
 800735a:	d901      	bls.n	8007360 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800735c:	2303      	movs	r3, #3
 800735e:	e286      	b.n	800786e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8007360:	f7ff fbea 	bl	8006b38 <LL_RCC_HSE_IsReady>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1f1      	bne.n	800734e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 0302 	and.w	r3, r3, #2
 8007372:	2b00      	cmp	r3, #0
 8007374:	d04c      	beq.n	8007410 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007376:	f7ff fdc0 	bl	8006efa <LL_RCC_GetSysClkSource>
 800737a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800737c:	f7ff fea1 	bl	80070c2 <LL_RCC_PLL_GetMainSource>
 8007380:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	2b04      	cmp	r3, #4
 8007386:	d005      	beq.n	8007394 <HAL_RCC_OscConfig+0x200>
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	2b0c      	cmp	r3, #12
 800738c:	d10e      	bne.n	80073ac <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	2b02      	cmp	r3, #2
 8007392:	d10b      	bne.n	80073ac <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d101      	bne.n	80073a0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e266      	b.n	800786e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7ff fc09 	bl	8006bbc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80073aa:	e031      	b.n	8007410 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d019      	beq.n	80073e8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80073b4:	f7ff fbd2 	bl	8006b5c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073b8:	f7fd fa5e 	bl	8004878 <HAL_GetTick>
 80073bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80073be:	e008      	b.n	80073d2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073c0:	f7fd fa5a 	bl	8004878 <HAL_GetTick>
 80073c4:	4602      	mov	r2, r0
 80073c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d901      	bls.n	80073d2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e24d      	b.n	800786e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80073d2:	f7ff fbe1 	bl	8006b98 <LL_RCC_HSI_IsReady>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d0f1      	beq.n	80073c0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7ff fbeb 	bl	8006bbc <LL_RCC_HSI_SetCalibTrimming>
 80073e6:	e013      	b.n	8007410 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073e8:	f7ff fbc7 	bl	8006b7a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ec:	f7fd fa44 	bl	8004878 <HAL_GetTick>
 80073f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80073f2:	e008      	b.n	8007406 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073f4:	f7fd fa40 	bl	8004878 <HAL_GetTick>
 80073f8:	4602      	mov	r2, r0
 80073fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d901      	bls.n	8007406 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e233      	b.n	800786e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8007406:	f7ff fbc7 	bl	8006b98 <LL_RCC_HSI_IsReady>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1f1      	bne.n	80073f4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 0308 	and.w	r3, r3, #8
 8007418:	2b00      	cmp	r3, #0
 800741a:	d106      	bne.n	800742a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 80a3 	beq.w	8007570 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d076      	beq.n	8007520 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 0310 	and.w	r3, r3, #16
 800743a:	2b00      	cmp	r3, #0
 800743c:	d046      	beq.n	80074cc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800743e:	f7ff fc7e 	bl	8006d3e <LL_RCC_LSI1_IsReady>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d113      	bne.n	8007470 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8007448:	f7ff fc57 	bl	8006cfa <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800744c:	f7fd fa14 	bl	8004878 <HAL_GetTick>
 8007450:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007452:	e008      	b.n	8007466 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007454:	f7fd fa10 	bl	8004878 <HAL_GetTick>
 8007458:	4602      	mov	r2, r0
 800745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	2b02      	cmp	r3, #2
 8007460:	d901      	bls.n	8007466 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e203      	b.n	800786e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007466:	f7ff fc6a 	bl	8006d3e <LL_RCC_LSI1_IsReady>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d0f1      	beq.n	8007454 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8007470:	f7ff fc77 	bl	8006d62 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007474:	f7fd fa00 	bl	8004878 <HAL_GetTick>
 8007478:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800747a:	e008      	b.n	800748e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800747c:	f7fd f9fc 	bl	8004878 <HAL_GetTick>
 8007480:	4602      	mov	r2, r0
 8007482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	2b03      	cmp	r3, #3
 8007488:	d901      	bls.n	800748e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e1ef      	b.n	800786e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800748e:	f7ff fc8a 	bl	8006da6 <LL_RCC_LSI2_IsReady>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d0f1      	beq.n	800747c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	4618      	mov	r0, r3
 800749e:	f7ff fc94 	bl	8006dca <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80074a2:	f7ff fc3b 	bl	8006d1c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074a6:	f7fd f9e7 	bl	8004878 <HAL_GetTick>
 80074aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80074ac:	e008      	b.n	80074c0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80074ae:	f7fd f9e3 	bl	8004878 <HAL_GetTick>
 80074b2:	4602      	mov	r2, r0
 80074b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	d901      	bls.n	80074c0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80074bc:	2303      	movs	r3, #3
 80074be:	e1d6      	b.n	800786e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80074c0:	f7ff fc3d 	bl	8006d3e <LL_RCC_LSI1_IsReady>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d1f1      	bne.n	80074ae <HAL_RCC_OscConfig+0x31a>
 80074ca:	e051      	b.n	8007570 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80074cc:	f7ff fc15 	bl	8006cfa <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074d0:	f7fd f9d2 	bl	8004878 <HAL_GetTick>
 80074d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80074d6:	e00c      	b.n	80074f2 <HAL_RCC_OscConfig+0x35e>
 80074d8:	20000008 	.word	0x20000008
 80074dc:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80074e0:	f7fd f9ca 	bl	8004878 <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d901      	bls.n	80074f2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e1bd      	b.n	800786e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80074f2:	f7ff fc24 	bl	8006d3e <LL_RCC_LSI1_IsReady>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d0f1      	beq.n	80074e0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80074fc:	f7ff fc42 	bl	8006d84 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007500:	e008      	b.n	8007514 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007502:	f7fd f9b9 	bl	8004878 <HAL_GetTick>
 8007506:	4602      	mov	r2, r0
 8007508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	2b03      	cmp	r3, #3
 800750e:	d901      	bls.n	8007514 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8007510:	2303      	movs	r3, #3
 8007512:	e1ac      	b.n	800786e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007514:	f7ff fc47 	bl	8006da6 <LL_RCC_LSI2_IsReady>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1f1      	bne.n	8007502 <HAL_RCC_OscConfig+0x36e>
 800751e:	e027      	b.n	8007570 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8007520:	f7ff fc30 	bl	8006d84 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007524:	f7fd f9a8 	bl	8004878 <HAL_GetTick>
 8007528:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800752a:	e008      	b.n	800753e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800752c:	f7fd f9a4 	bl	8004878 <HAL_GetTick>
 8007530:	4602      	mov	r2, r0
 8007532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	2b03      	cmp	r3, #3
 8007538:	d901      	bls.n	800753e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	e197      	b.n	800786e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800753e:	f7ff fc32 	bl	8006da6 <LL_RCC_LSI2_IsReady>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1f1      	bne.n	800752c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8007548:	f7ff fbe8 	bl	8006d1c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800754c:	f7fd f994 	bl	8004878 <HAL_GetTick>
 8007550:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007552:	e008      	b.n	8007566 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007554:	f7fd f990 	bl	8004878 <HAL_GetTick>
 8007558:	4602      	mov	r2, r0
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	2b02      	cmp	r3, #2
 8007560:	d901      	bls.n	8007566 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e183      	b.n	800786e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007566:	f7ff fbea 	bl	8006d3e <LL_RCC_LSI1_IsReady>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1f1      	bne.n	8007554 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0304 	and.w	r3, r3, #4
 8007578:	2b00      	cmp	r3, #0
 800757a:	d05b      	beq.n	8007634 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800757c:	4ba7      	ldr	r3, [pc, #668]	; (800781c <HAL_RCC_OscConfig+0x688>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007584:	2b00      	cmp	r3, #0
 8007586:	d114      	bne.n	80075b2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007588:	f7ff fa78 	bl	8006a7c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800758c:	f7fd f974 	bl	8004878 <HAL_GetTick>
 8007590:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007592:	e008      	b.n	80075a6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007594:	f7fd f970 	bl	8004878 <HAL_GetTick>
 8007598:	4602      	mov	r2, r0
 800759a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	2b02      	cmp	r3, #2
 80075a0:	d901      	bls.n	80075a6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e163      	b.n	800786e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80075a6:	4b9d      	ldr	r3, [pc, #628]	; (800781c <HAL_RCC_OscConfig+0x688>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d0f0      	beq.n	8007594 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d102      	bne.n	80075c0 <HAL_RCC_OscConfig+0x42c>
 80075ba:	f7ff fb48 	bl	8006c4e <LL_RCC_LSE_Enable>
 80075be:	e00c      	b.n	80075da <HAL_RCC_OscConfig+0x446>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	2b05      	cmp	r3, #5
 80075c6:	d104      	bne.n	80075d2 <HAL_RCC_OscConfig+0x43e>
 80075c8:	f7ff fb63 	bl	8006c92 <LL_RCC_LSE_EnableBypass>
 80075cc:	f7ff fb3f 	bl	8006c4e <LL_RCC_LSE_Enable>
 80075d0:	e003      	b.n	80075da <HAL_RCC_OscConfig+0x446>
 80075d2:	f7ff fb4d 	bl	8006c70 <LL_RCC_LSE_Disable>
 80075d6:	f7ff fb6d 	bl	8006cb4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d014      	beq.n	800760c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075e2:	f7fd f949 	bl	8004878 <HAL_GetTick>
 80075e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80075e8:	e00a      	b.n	8007600 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075ea:	f7fd f945 	bl	8004878 <HAL_GetTick>
 80075ee:	4602      	mov	r2, r0
 80075f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d901      	bls.n	8007600 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e136      	b.n	800786e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007600:	f7ff fb69 	bl	8006cd6 <LL_RCC_LSE_IsReady>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d0ef      	beq.n	80075ea <HAL_RCC_OscConfig+0x456>
 800760a:	e013      	b.n	8007634 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800760c:	f7fd f934 	bl	8004878 <HAL_GetTick>
 8007610:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007612:	e00a      	b.n	800762a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007614:	f7fd f930 	bl	8004878 <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007622:	4293      	cmp	r3, r2
 8007624:	d901      	bls.n	800762a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e121      	b.n	800786e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800762a:	f7ff fb54 	bl	8006cd6 <LL_RCC_LSE_IsReady>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1ef      	bne.n	8007614 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800763c:	2b00      	cmp	r3, #0
 800763e:	d02c      	beq.n	800769a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007644:	2b00      	cmp	r3, #0
 8007646:	d014      	beq.n	8007672 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007648:	f7ff facd 	bl	8006be6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800764c:	f7fd f914 	bl	8004878 <HAL_GetTick>
 8007650:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007652:	e008      	b.n	8007666 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007654:	f7fd f910 	bl	8004878 <HAL_GetTick>
 8007658:	4602      	mov	r2, r0
 800765a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	2b02      	cmp	r3, #2
 8007660:	d901      	bls.n	8007666 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e103      	b.n	800786e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007666:	f7ff fae0 	bl	8006c2a <LL_RCC_HSI48_IsReady>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d0f1      	beq.n	8007654 <HAL_RCC_OscConfig+0x4c0>
 8007670:	e013      	b.n	800769a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007672:	f7ff fac9 	bl	8006c08 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007676:	f7fd f8ff 	bl	8004878 <HAL_GetTick>
 800767a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800767c:	e008      	b.n	8007690 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800767e:	f7fd f8fb 	bl	8004878 <HAL_GetTick>
 8007682:	4602      	mov	r2, r0
 8007684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007686:	1ad3      	subs	r3, r2, r3
 8007688:	2b02      	cmp	r3, #2
 800768a:	d901      	bls.n	8007690 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	e0ee      	b.n	800786e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007690:	f7ff facb 	bl	8006c2a <LL_RCC_HSI48_IsReady>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1f1      	bne.n	800767e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f000 80e4 	beq.w	800786c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076a4:	f7ff fc29 	bl	8006efa <LL_RCC_GetSysClkSource>
 80076a8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80076aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	f040 80b4 	bne.w	8007824 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f003 0203 	and.w	r2, r3, #3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d123      	bne.n	8007712 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d11c      	bne.n	8007712 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	0a1b      	lsrs	r3, r3, #8
 80076dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d114      	bne.n	8007712 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d10d      	bne.n	8007712 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007700:	429a      	cmp	r2, r3
 8007702:	d106      	bne.n	8007712 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800770e:	429a      	cmp	r2, r3
 8007710:	d05d      	beq.n	80077ce <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	2b0c      	cmp	r3, #12
 8007716:	d058      	beq.n	80077ca <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d001      	beq.n	800772a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e0a1      	b.n	800786e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800772a:	f7ff fc84 	bl	8007036 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800772e:	f7fd f8a3 	bl	8004878 <HAL_GetTick>
 8007732:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007734:	e008      	b.n	8007748 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007736:	f7fd f89f 	bl	8004878 <HAL_GetTick>
 800773a:	4602      	mov	r2, r0
 800773c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	2b02      	cmp	r3, #2
 8007742:	d901      	bls.n	8007748 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e092      	b.n	800786e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1ef      	bne.n	8007736 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800775a:	68da      	ldr	r2, [r3, #12]
 800775c:	4b30      	ldr	r3, [pc, #192]	; (8007820 <HAL_RCC_OscConfig+0x68c>)
 800775e:	4013      	ands	r3, r2
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007768:	4311      	orrs	r1, r2
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800776e:	0212      	lsls	r2, r2, #8
 8007770:	4311      	orrs	r1, r2
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007776:	4311      	orrs	r1, r2
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800777c:	4311      	orrs	r1, r2
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007782:	430a      	orrs	r2, r1
 8007784:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007788:	4313      	orrs	r3, r2
 800778a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800778c:	f7ff fc44 	bl	8007018 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800779a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800779e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80077a0:	f7fd f86a 	bl	8004878 <HAL_GetTick>
 80077a4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077a6:	e008      	b.n	80077ba <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077a8:	f7fd f866 	bl	8004878 <HAL_GetTick>
 80077ac:	4602      	mov	r2, r0
 80077ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d901      	bls.n	80077ba <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	e059      	b.n	800786e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d0ef      	beq.n	80077a8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80077c8:	e050      	b.n	800786c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e04f      	b.n	800786e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d147      	bne.n	800786c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80077dc:	f7ff fc1c 	bl	8007018 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80077e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80077f0:	f7fd f842 	bl	8004878 <HAL_GetTick>
 80077f4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077f6:	e008      	b.n	800780a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077f8:	f7fd f83e 	bl	8004878 <HAL_GetTick>
 80077fc:	4602      	mov	r2, r0
 80077fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	2b02      	cmp	r3, #2
 8007804:	d901      	bls.n	800780a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8007806:	2303      	movs	r3, #3
 8007808:	e031      	b.n	800786e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800780a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d0ef      	beq.n	80077f8 <HAL_RCC_OscConfig+0x664>
 8007818:	e028      	b.n	800786c <HAL_RCC_OscConfig+0x6d8>
 800781a:	bf00      	nop
 800781c:	58000400 	.word	0x58000400
 8007820:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	2b0c      	cmp	r3, #12
 8007828:	d01e      	beq.n	8007868 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800782a:	f7ff fc04 	bl	8007036 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800782e:	f7fd f823 	bl	8004878 <HAL_GetTick>
 8007832:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007834:	e008      	b.n	8007848 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007836:	f7fd f81f 	bl	8004878 <HAL_GetTick>
 800783a:	4602      	mov	r2, r0
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	2b02      	cmp	r3, #2
 8007842:	d901      	bls.n	8007848 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e012      	b.n	800786e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1ef      	bne.n	8007836 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8007856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800785a:	68da      	ldr	r2, [r3, #12]
 800785c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007860:	4b05      	ldr	r3, [pc, #20]	; (8007878 <HAL_RCC_OscConfig+0x6e4>)
 8007862:	4013      	ands	r3, r2
 8007864:	60cb      	str	r3, [r1, #12]
 8007866:	e001      	b.n	800786c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	e000      	b.n	800786e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3734      	adds	r7, #52	; 0x34
 8007872:	46bd      	mov	sp, r7
 8007874:	bd90      	pop	{r4, r7, pc}
 8007876:	bf00      	nop
 8007878:	eefefffc 	.word	0xeefefffc

0800787c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d101      	bne.n	8007890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	e12d      	b.n	8007aec <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007890:	4b98      	ldr	r3, [pc, #608]	; (8007af4 <HAL_RCC_ClockConfig+0x278>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0307 	and.w	r3, r3, #7
 8007898:	683a      	ldr	r2, [r7, #0]
 800789a:	429a      	cmp	r2, r3
 800789c:	d91b      	bls.n	80078d6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800789e:	4b95      	ldr	r3, [pc, #596]	; (8007af4 <HAL_RCC_ClockConfig+0x278>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f023 0207 	bic.w	r2, r3, #7
 80078a6:	4993      	ldr	r1, [pc, #588]	; (8007af4 <HAL_RCC_ClockConfig+0x278>)
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078ae:	f7fc ffe3 	bl	8004878 <HAL_GetTick>
 80078b2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078b4:	e008      	b.n	80078c8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80078b6:	f7fc ffdf 	bl	8004878 <HAL_GetTick>
 80078ba:	4602      	mov	r2, r0
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d901      	bls.n	80078c8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e111      	b.n	8007aec <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078c8:	4b8a      	ldr	r3, [pc, #552]	; (8007af4 <HAL_RCC_ClockConfig+0x278>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 0307 	and.w	r3, r3, #7
 80078d0:	683a      	ldr	r2, [r7, #0]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d1ef      	bne.n	80078b6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 0302 	and.w	r3, r3, #2
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d016      	beq.n	8007910 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7ff fb13 	bl	8006f12 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80078ec:	f7fc ffc4 	bl	8004878 <HAL_GetTick>
 80078f0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80078f2:	e008      	b.n	8007906 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80078f4:	f7fc ffc0 	bl	8004878 <HAL_GetTick>
 80078f8:	4602      	mov	r2, r0
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d901      	bls.n	8007906 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e0f2      	b.n	8007aec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007906:	f7ff fbe8 	bl	80070da <LL_RCC_IsActiveFlag_HPRE>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d0f1      	beq.n	80078f4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0320 	and.w	r3, r3, #32
 8007918:	2b00      	cmp	r3, #0
 800791a:	d016      	beq.n	800794a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	695b      	ldr	r3, [r3, #20]
 8007920:	4618      	mov	r0, r3
 8007922:	f7ff fb0a 	bl	8006f3a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007926:	f7fc ffa7 	bl	8004878 <HAL_GetTick>
 800792a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800792c:	e008      	b.n	8007940 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800792e:	f7fc ffa3 	bl	8004878 <HAL_GetTick>
 8007932:	4602      	mov	r2, r0
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	2b02      	cmp	r3, #2
 800793a:	d901      	bls.n	8007940 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e0d5      	b.n	8007aec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007940:	f7ff fbdd 	bl	80070fe <LL_RCC_IsActiveFlag_C2HPRE>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d0f1      	beq.n	800792e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007952:	2b00      	cmp	r3, #0
 8007954:	d016      	beq.n	8007984 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	699b      	ldr	r3, [r3, #24]
 800795a:	4618      	mov	r0, r3
 800795c:	f7ff fb03 	bl	8006f66 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007960:	f7fc ff8a 	bl	8004878 <HAL_GetTick>
 8007964:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007966:	e008      	b.n	800797a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007968:	f7fc ff86 	bl	8004878 <HAL_GetTick>
 800796c:	4602      	mov	r2, r0
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	2b02      	cmp	r3, #2
 8007974:	d901      	bls.n	800797a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8007976:	2303      	movs	r3, #3
 8007978:	e0b8      	b.n	8007aec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800797a:	f7ff fbd3 	bl	8007124 <LL_RCC_IsActiveFlag_SHDHPRE>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d0f1      	beq.n	8007968 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 0304 	and.w	r3, r3, #4
 800798c:	2b00      	cmp	r3, #0
 800798e:	d016      	beq.n	80079be <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	4618      	mov	r0, r3
 8007996:	f7ff fafd 	bl	8006f94 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800799a:	f7fc ff6d 	bl	8004878 <HAL_GetTick>
 800799e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80079a0:	e008      	b.n	80079b4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80079a2:	f7fc ff69 	bl	8004878 <HAL_GetTick>
 80079a6:	4602      	mov	r2, r0
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d901      	bls.n	80079b4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80079b0:	2303      	movs	r3, #3
 80079b2:	e09b      	b.n	8007aec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80079b4:	f7ff fbc9 	bl	800714a <LL_RCC_IsActiveFlag_PPRE1>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d0f1      	beq.n	80079a2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 0308 	and.w	r3, r3, #8
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d017      	beq.n	80079fa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	00db      	lsls	r3, r3, #3
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7ff faf3 	bl	8006fbc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80079d6:	f7fc ff4f 	bl	8004878 <HAL_GetTick>
 80079da:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80079dc:	e008      	b.n	80079f0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80079de:	f7fc ff4b 	bl	8004878 <HAL_GetTick>
 80079e2:	4602      	mov	r2, r0
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d901      	bls.n	80079f0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e07d      	b.n	8007aec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80079f0:	f7ff fbbd 	bl	800716e <LL_RCC_IsActiveFlag_PPRE2>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d0f1      	beq.n	80079de <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0301 	and.w	r3, r3, #1
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d043      	beq.n	8007a8e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	d106      	bne.n	8007a1c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007a0e:	f7ff f893 	bl	8006b38 <LL_RCC_HSE_IsReady>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d11e      	bne.n	8007a56 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e067      	b.n	8007aec <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	2b03      	cmp	r3, #3
 8007a22:	d106      	bne.n	8007a32 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007a24:	f7ff fb16 	bl	8007054 <LL_RCC_PLL_IsReady>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d113      	bne.n	8007a56 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e05c      	b.n	8007aec <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d106      	bne.n	8007a48 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007a3a:	f7ff f9fb 	bl	8006e34 <LL_RCC_MSI_IsReady>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d108      	bne.n	8007a56 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	e051      	b.n	8007aec <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007a48:	f7ff f8a6 	bl	8006b98 <LL_RCC_HSI_IsReady>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d101      	bne.n	8007a56 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e04a      	b.n	8007aec <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7ff fa39 	bl	8006ed2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a60:	f7fc ff0a 	bl	8004878 <HAL_GetTick>
 8007a64:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a66:	e00a      	b.n	8007a7e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a68:	f7fc ff06 	bl	8004878 <HAL_GetTick>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d901      	bls.n	8007a7e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	e036      	b.n	8007aec <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a7e:	f7ff fa3c 	bl	8006efa <LL_RCC_GetSysClkSource>
 8007a82:	4602      	mov	r2, r0
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d1ec      	bne.n	8007a68 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007a8e:	4b19      	ldr	r3, [pc, #100]	; (8007af4 <HAL_RCC_ClockConfig+0x278>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0307 	and.w	r3, r3, #7
 8007a96:	683a      	ldr	r2, [r7, #0]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d21b      	bcs.n	8007ad4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a9c:	4b15      	ldr	r3, [pc, #84]	; (8007af4 <HAL_RCC_ClockConfig+0x278>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f023 0207 	bic.w	r2, r3, #7
 8007aa4:	4913      	ldr	r1, [pc, #76]	; (8007af4 <HAL_RCC_ClockConfig+0x278>)
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007aac:	f7fc fee4 	bl	8004878 <HAL_GetTick>
 8007ab0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ab2:	e008      	b.n	8007ac6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007ab4:	f7fc fee0 	bl	8004878 <HAL_GetTick>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d901      	bls.n	8007ac6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	e012      	b.n	8007aec <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ac6:	4b0b      	ldr	r3, [pc, #44]	; (8007af4 <HAL_RCC_ClockConfig+0x278>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f003 0307 	and.w	r3, r3, #7
 8007ace:	683a      	ldr	r2, [r7, #0]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d1ef      	bne.n	8007ab4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007ad4:	f000 f880 	bl	8007bd8 <HAL_RCC_GetHCLKFreq>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	4a07      	ldr	r2, [pc, #28]	; (8007af8 <HAL_RCC_ClockConfig+0x27c>)
 8007adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8007ade:	f7fc fed7 	bl	8004890 <HAL_GetTickPrio>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7fc fe79 	bl	80047dc <HAL_InitTick>
 8007aea:	4603      	mov	r3, r0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	58004000 	.word	0x58004000
 8007af8:	20000008 	.word	0x20000008

08007afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007afc:	b590      	push	{r4, r7, lr}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b02:	f7ff f9fa 	bl	8006efa <LL_RCC_GetSysClkSource>
 8007b06:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d10a      	bne.n	8007b24 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007b0e:	f7ff f9b6 	bl	8006e7e <LL_RCC_MSI_GetRange>
 8007b12:	4603      	mov	r3, r0
 8007b14:	091b      	lsrs	r3, r3, #4
 8007b16:	f003 030f 	and.w	r3, r3, #15
 8007b1a:	4a2b      	ldr	r2, [pc, #172]	; (8007bc8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b20:	60fb      	str	r3, [r7, #12]
 8007b22:	e04b      	b.n	8007bbc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2b04      	cmp	r3, #4
 8007b28:	d102      	bne.n	8007b30 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007b2a:	4b28      	ldr	r3, [pc, #160]	; (8007bcc <HAL_RCC_GetSysClockFreq+0xd0>)
 8007b2c:	60fb      	str	r3, [r7, #12]
 8007b2e:	e045      	b.n	8007bbc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2b08      	cmp	r3, #8
 8007b34:	d10a      	bne.n	8007b4c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007b36:	f7fe ffcf 	bl	8006ad8 <LL_RCC_HSE_IsEnabledDiv2>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d102      	bne.n	8007b46 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007b40:	4b23      	ldr	r3, [pc, #140]	; (8007bd0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007b42:	60fb      	str	r3, [r7, #12]
 8007b44:	e03a      	b.n	8007bbc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007b46:	4b23      	ldr	r3, [pc, #140]	; (8007bd4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8007b48:	60fb      	str	r3, [r7, #12]
 8007b4a:	e037      	b.n	8007bbc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007b4c:	f7ff fab9 	bl	80070c2 <LL_RCC_PLL_GetMainSource>
 8007b50:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d003      	beq.n	8007b60 <HAL_RCC_GetSysClockFreq+0x64>
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	2b03      	cmp	r3, #3
 8007b5c:	d003      	beq.n	8007b66 <HAL_RCC_GetSysClockFreq+0x6a>
 8007b5e:	e00d      	b.n	8007b7c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007b60:	4b1a      	ldr	r3, [pc, #104]	; (8007bcc <HAL_RCC_GetSysClockFreq+0xd0>)
 8007b62:	60bb      	str	r3, [r7, #8]
        break;
 8007b64:	e015      	b.n	8007b92 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007b66:	f7fe ffb7 	bl	8006ad8 <LL_RCC_HSE_IsEnabledDiv2>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d102      	bne.n	8007b76 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007b70:	4b17      	ldr	r3, [pc, #92]	; (8007bd0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007b72:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007b74:	e00d      	b.n	8007b92 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8007b76:	4b17      	ldr	r3, [pc, #92]	; (8007bd4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8007b78:	60bb      	str	r3, [r7, #8]
        break;
 8007b7a:	e00a      	b.n	8007b92 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007b7c:	f7ff f97f 	bl	8006e7e <LL_RCC_MSI_GetRange>
 8007b80:	4603      	mov	r3, r0
 8007b82:	091b      	lsrs	r3, r3, #4
 8007b84:	f003 030f 	and.w	r3, r3, #15
 8007b88:	4a0f      	ldr	r2, [pc, #60]	; (8007bc8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b8e:	60bb      	str	r3, [r7, #8]
        break;
 8007b90:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8007b92:	f7ff fa71 	bl	8007078 <LL_RCC_PLL_GetN>
 8007b96:	4602      	mov	r2, r0
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	fb03 f402 	mul.w	r4, r3, r2
 8007b9e:	f7ff fa84 	bl	80070aa <LL_RCC_PLL_GetDivider>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	091b      	lsrs	r3, r3, #4
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	fbb4 f4f3 	udiv	r4, r4, r3
 8007bac:	f7ff fa71 	bl	8007092 <LL_RCC_PLL_GetR>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	0f5b      	lsrs	r3, r3, #29
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	fbb4 f3f3 	udiv	r3, r4, r3
 8007bba:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3714      	adds	r7, #20
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd90      	pop	{r4, r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	0801266c 	.word	0x0801266c
 8007bcc:	00f42400 	.word	0x00f42400
 8007bd0:	003d0900 	.word	0x003d0900
 8007bd4:	007a1200 	.word	0x007a1200

08007bd8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007bd8:	b598      	push	{r3, r4, r7, lr}
 8007bda:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007bdc:	f7ff ff8e 	bl	8007afc <HAL_RCC_GetSysClockFreq>
 8007be0:	4604      	mov	r4, r0
 8007be2:	f7ff f9ff 	bl	8006fe4 <LL_RCC_GetAHBPrescaler>
 8007be6:	4603      	mov	r3, r0
 8007be8:	091b      	lsrs	r3, r3, #4
 8007bea:	f003 030f 	and.w	r3, r3, #15
 8007bee:	4a03      	ldr	r2, [pc, #12]	; (8007bfc <HAL_RCC_GetHCLKFreq+0x24>)
 8007bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bf4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	bd98      	pop	{r3, r4, r7, pc}
 8007bfc:	0801262c 	.word	0x0801262c

08007c00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007c00:	b590      	push	{r4, r7, lr}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2bb0      	cmp	r3, #176	; 0xb0
 8007c0c:	d903      	bls.n	8007c16 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8007c0e:	4b15      	ldr	r3, [pc, #84]	; (8007c64 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c12:	60fb      	str	r3, [r7, #12]
 8007c14:	e007      	b.n	8007c26 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	091b      	lsrs	r3, r3, #4
 8007c1a:	f003 030f 	and.w	r3, r3, #15
 8007c1e:	4a11      	ldr	r2, [pc, #68]	; (8007c64 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c24:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8007c26:	f7ff f9e9 	bl	8006ffc <LL_RCC_GetAHB4Prescaler>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	091b      	lsrs	r3, r3, #4
 8007c2e:	f003 030f 	and.w	r3, r3, #15
 8007c32:	4a0d      	ldr	r2, [pc, #52]	; (8007c68 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8007c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c3e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	4a0a      	ldr	r2, [pc, #40]	; (8007c6c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8007c44:	fba2 2303 	umull	r2, r3, r2, r3
 8007c48:	0c9c      	lsrs	r4, r3, #18
 8007c4a:	f7fe ff27 	bl	8006a9c <HAL_PWREx_GetVoltageRange>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	4619      	mov	r1, r3
 8007c52:	4620      	mov	r0, r4
 8007c54:	f000 f80c 	bl	8007c70 <RCC_SetFlashLatency>
 8007c58:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3714      	adds	r7, #20
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd90      	pop	{r4, r7, pc}
 8007c62:	bf00      	nop
 8007c64:	0801266c 	.word	0x0801266c
 8007c68:	0801262c 	.word	0x0801262c
 8007c6c:	431bde83 	.word	0x431bde83

08007c70 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007c70:	b590      	push	{r4, r7, lr}
 8007c72:	b093      	sub	sp, #76	; 0x4c
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8007c7a:	4b37      	ldr	r3, [pc, #220]	; (8007d58 <RCC_SetFlashLatency+0xe8>)
 8007c7c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8007c80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007c82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8007c86:	4a35      	ldr	r2, [pc, #212]	; (8007d5c <RCC_SetFlashLatency+0xec>)
 8007c88:	f107 031c 	add.w	r3, r7, #28
 8007c8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8007c8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8007c92:	4b33      	ldr	r3, [pc, #204]	; (8007d60 <RCC_SetFlashLatency+0xf0>)
 8007c94:	f107 040c 	add.w	r4, r7, #12
 8007c98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007c9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ca8:	d11a      	bne.n	8007ce0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007caa:	2300      	movs	r3, #0
 8007cac:	643b      	str	r3, [r7, #64]	; 0x40
 8007cae:	e013      	b.n	8007cd8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	3348      	adds	r3, #72	; 0x48
 8007cb6:	443b      	add	r3, r7
 8007cb8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d807      	bhi.n	8007cd2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007cc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	3348      	adds	r3, #72	; 0x48
 8007cc8:	443b      	add	r3, r7
 8007cca:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007cce:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007cd0:	e020      	b.n	8007d14 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	643b      	str	r3, [r7, #64]	; 0x40
 8007cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cda:	2b03      	cmp	r3, #3
 8007cdc:	d9e8      	bls.n	8007cb0 <RCC_SetFlashLatency+0x40>
 8007cde:	e019      	b.n	8007d14 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ce4:	e013      	b.n	8007d0e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	3348      	adds	r3, #72	; 0x48
 8007cec:	443b      	add	r3, r7
 8007cee:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d807      	bhi.n	8007d08 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	3348      	adds	r3, #72	; 0x48
 8007cfe:	443b      	add	r3, r7
 8007d00:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007d04:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007d06:	e005      	b.n	8007d14 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d9e8      	bls.n	8007ce6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8007d14:	4b13      	ldr	r3, [pc, #76]	; (8007d64 <RCC_SetFlashLatency+0xf4>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f023 0207 	bic.w	r2, r3, #7
 8007d1c:	4911      	ldr	r1, [pc, #68]	; (8007d64 <RCC_SetFlashLatency+0xf4>)
 8007d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d20:	4313      	orrs	r3, r2
 8007d22:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007d24:	f7fc fda8 	bl	8004878 <HAL_GetTick>
 8007d28:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007d2a:	e008      	b.n	8007d3e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007d2c:	f7fc fda4 	bl	8004878 <HAL_GetTick>
 8007d30:	4602      	mov	r2, r0
 8007d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d34:	1ad3      	subs	r3, r2, r3
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d901      	bls.n	8007d3e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	e007      	b.n	8007d4e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007d3e:	4b09      	ldr	r3, [pc, #36]	; (8007d64 <RCC_SetFlashLatency+0xf4>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0307 	and.w	r3, r3, #7
 8007d46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d1ef      	bne.n	8007d2c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	374c      	adds	r7, #76	; 0x4c
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd90      	pop	{r4, r7, pc}
 8007d56:	bf00      	nop
 8007d58:	0801257c 	.word	0x0801257c
 8007d5c:	0801258c 	.word	0x0801258c
 8007d60:	08012598 	.word	0x08012598
 8007d64:	58004000 	.word	0x58004000

08007d68 <LL_RCC_LSE_IsEnabled>:
{
 8007d68:	b480      	push	{r7}
 8007d6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d74:	f003 0301 	and.w	r3, r3, #1
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d101      	bne.n	8007d80 <LL_RCC_LSE_IsEnabled+0x18>
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e000      	b.n	8007d82 <LL_RCC_LSE_IsEnabled+0x1a>
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <LL_RCC_LSE_IsReady>:
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d98:	f003 0302 	and.w	r3, r3, #2
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d101      	bne.n	8007da4 <LL_RCC_LSE_IsReady+0x18>
 8007da0:	2301      	movs	r3, #1
 8007da2:	e000      	b.n	8007da6 <LL_RCC_LSE_IsReady+0x1a>
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <LL_RCC_MSI_EnablePLLMode>:
{
 8007db0:	b480      	push	{r7}
 8007db2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8007db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007dbe:	f043 0304 	orr.w	r3, r3, #4
 8007dc2:	6013      	str	r3, [r2, #0]
}
 8007dc4:	bf00      	nop
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr

08007dce <LL_RCC_SetRFWKPClockSource>:
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b083      	sub	sp, #12
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8007dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007dde:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007de2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8007dee:	bf00      	nop
 8007df0:	370c      	adds	r7, #12
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <LL_RCC_SetSMPSClockSource>:
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b083      	sub	sp, #12
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8007e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e08:	f023 0203 	bic.w	r2, r3, #3
 8007e0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007e16:	bf00      	nop
 8007e18:	370c      	adds	r7, #12
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <LL_RCC_SetSMPSPrescaler>:
{
 8007e22:	b480      	push	{r7}
 8007e24:	b083      	sub	sp, #12
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8007e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007e34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007e3e:	bf00      	nop
 8007e40:	370c      	adds	r7, #12
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <LL_RCC_SetUSARTClockSource>:
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b083      	sub	sp, #12
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8007e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e5a:	f023 0203 	bic.w	r2, r3, #3
 8007e5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007e6a:	bf00      	nop
 8007e6c:	370c      	adds	r7, #12
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr

08007e76 <LL_RCC_SetLPUARTClockSource>:
{
 8007e76:	b480      	push	{r7}
 8007e78:	b083      	sub	sp, #12
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007e8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007e96:	bf00      	nop
 8007e98:	370c      	adds	r7, #12
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr

08007ea2 <LL_RCC_SetI2CClockSource>:
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b083      	sub	sp, #12
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	091b      	lsrs	r3, r3, #4
 8007eb6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007eba:	43db      	mvns	r3, r3
 8007ebc:	401a      	ands	r2, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	011b      	lsls	r3, r3, #4
 8007ec2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007ec6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <LL_RCC_SetLPTIMClockSource>:
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ee8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	0c1b      	lsrs	r3, r3, #16
 8007ef0:	041b      	lsls	r3, r3, #16
 8007ef2:	43db      	mvns	r3, r3
 8007ef4:	401a      	ands	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	041b      	lsls	r3, r3, #16
 8007efa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007efe:	4313      	orrs	r3, r2
 8007f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <LL_RCC_SetSAIClockSource>:
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8007f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007f24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <LL_RCC_SetRNGClockSource>:
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f4c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007f50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <LL_RCC_SetCLK48ClockSource>:
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8007f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f78:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007f7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007f88:	bf00      	nop
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <LL_RCC_SetUSBClockSource>:
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f7ff ffe3 	bl	8007f68 <LL_RCC_SetCLK48ClockSource>
}
 8007fa2:	bf00      	nop
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <LL_RCC_SetADCClockSource>:
{
 8007faa:	b480      	push	{r7}
 8007fac:	b083      	sub	sp, #12
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007fbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007fca:	bf00      	nop
 8007fcc:	370c      	adds	r7, #12
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr

08007fd6 <LL_RCC_SetRTCClockSource>:
{
 8007fd6:	b480      	push	{r7}
 8007fd8:	b083      	sub	sp, #12
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fe6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007fea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007ff6:	bf00      	nop
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr

08008002 <LL_RCC_GetRTCClockSource>:
{
 8008002:	b480      	push	{r7}
 8008004:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8008006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800800a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800800e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8008012:	4618      	mov	r0, r3
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <LL_RCC_ForceBackupDomainReset>:
{
 800801c:	b480      	push	{r7}
 800801e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008028:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800802c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008034:	bf00      	nop
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <LL_RCC_ReleaseBackupDomainReset>:
{
 800803e:	b480      	push	{r7}
 8008040:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800804a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800804e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008052:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008056:	bf00      	nop
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <LL_RCC_PLLSAI1_Enable>:
{
 8008060:	b480      	push	{r7}
 8008062:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800806e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008072:	6013      	str	r3, [r2, #0]
}
 8008074:	bf00      	nop
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <LL_RCC_PLLSAI1_Disable>:
{
 800807e:	b480      	push	{r7}
 8008080:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800808c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008090:	6013      	str	r3, [r2, #0]
}
 8008092:	bf00      	nop
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <LL_RCC_PLLSAI1_IsReady>:
{
 800809c:	b480      	push	{r7}
 800809e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80080a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080ae:	d101      	bne.n	80080b4 <LL_RCC_PLLSAI1_IsReady+0x18>
 80080b0:	2301      	movs	r3, #1
 80080b2:	e000      	b.n	80080b6 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b088      	sub	sp, #32
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80080c8:	2300      	movs	r3, #0
 80080ca:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80080cc:	2300      	movs	r3, #0
 80080ce:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d034      	beq.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80080e4:	d021      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80080e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80080ea:	d81b      	bhi.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80080ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080f0:	d01d      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80080f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080f6:	d815      	bhi.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00b      	beq.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80080fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008100:	d110      	bne.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8008102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800810c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008110:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8008112:	e00d      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	3304      	adds	r3, #4
 8008118:	4618      	mov	r0, r3
 800811a:	f000 f94d 	bl	80083b8 <RCCEx_PLLSAI1_ConfigNP>
 800811e:	4603      	mov	r3, r0
 8008120:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008122:	e005      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8008124:	2301      	movs	r3, #1
 8008126:	77fb      	strb	r3, [r7, #31]
        break;
 8008128:	e002      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800812a:	bf00      	nop
 800812c:	e000      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800812e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008130:	7ffb      	ldrb	r3, [r7, #31]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d105      	bne.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800813a:	4618      	mov	r0, r3
 800813c:	f7ff fee8 	bl	8007f10 <LL_RCC_SetSAIClockSource>
 8008140:	e001      	b.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008142:	7ffb      	ldrb	r3, [r7, #31]
 8008144:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800814e:	2b00      	cmp	r3, #0
 8008150:	d046      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8008152:	f7ff ff56 	bl	8008002 <LL_RCC_GetRTCClockSource>
 8008156:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815c:	69ba      	ldr	r2, [r7, #24]
 800815e:	429a      	cmp	r2, r3
 8008160:	d03c      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008162:	f7fe fc8b 	bl	8006a7c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d105      	bne.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008170:	4618      	mov	r0, r3
 8008172:	f7ff ff30 	bl	8007fd6 <LL_RCC_SetRTCClockSource>
 8008176:	e02e      	b.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8008178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800817c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008180:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8008182:	f7ff ff4b 	bl	800801c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8008186:	f7ff ff5a 	bl	800803e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008194:	4313      	orrs	r3, r2
 8008196:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8008198:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80081a2:	f7ff fde1 	bl	8007d68 <LL_RCC_LSE_IsEnabled>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d114      	bne.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80081ac:	f7fc fb64 	bl	8004878 <HAL_GetTick>
 80081b0:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80081b2:	e00b      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081b4:	f7fc fb60 	bl	8004878 <HAL_GetTick>
 80081b8:	4602      	mov	r2, r0
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	1ad3      	subs	r3, r2, r3
 80081be:	f241 3288 	movw	r2, #5000	; 0x1388
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d902      	bls.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80081c6:	2303      	movs	r3, #3
 80081c8:	77fb      	strb	r3, [r7, #31]
              break;
 80081ca:	e004      	b.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80081cc:	f7ff fdde 	bl	8007d8c <LL_RCC_LSE_IsReady>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d1ee      	bne.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80081d6:	7ffb      	ldrb	r3, [r7, #31]
 80081d8:	77bb      	strb	r3, [r7, #30]
 80081da:	e001      	b.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081dc:	7ffb      	ldrb	r3, [r7, #31]
 80081de:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0301 	and.w	r3, r3, #1
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d004      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7ff fe2a 	bl	8007e4a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 0302 	and.w	r3, r3, #2
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d004      	beq.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	69db      	ldr	r3, [r3, #28]
 8008206:	4618      	mov	r0, r3
 8008208:	f7ff fe35 	bl	8007e76 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 0310 	and.w	r3, r3, #16
 8008214:	2b00      	cmp	r3, #0
 8008216:	d004      	beq.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800821c:	4618      	mov	r0, r3
 800821e:	f7ff fe5d 	bl	8007edc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f003 0320 	and.w	r3, r3, #32
 800822a:	2b00      	cmp	r3, #0
 800822c:	d004      	beq.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008232:	4618      	mov	r0, r3
 8008234:	f7ff fe52 	bl	8007edc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 0304 	and.w	r3, r3, #4
 8008240:	2b00      	cmp	r3, #0
 8008242:	d004      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6a1b      	ldr	r3, [r3, #32]
 8008248:	4618      	mov	r0, r3
 800824a:	f7ff fe2a 	bl	8007ea2 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 0308 	and.w	r3, r3, #8
 8008256:	2b00      	cmp	r3, #0
 8008258:	d004      	beq.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825e:	4618      	mov	r0, r3
 8008260:	f7ff fe1f 	bl	8007ea2 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800826c:	2b00      	cmp	r3, #0
 800826e:	d022      	beq.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008274:	4618      	mov	r0, r3
 8008276:	f7ff fe8d 	bl	8007f94 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800827e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008282:	d107      	bne.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8008284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800828e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008292:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008298:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800829c:	d10b      	bne.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	3304      	adds	r3, #4
 80082a2:	4618      	mov	r0, r3
 80082a4:	f000 f8e3 	bl	800846e <RCCEx_PLLSAI1_ConfigNQ>
 80082a8:	4603      	mov	r3, r0
 80082aa:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80082ac:	7ffb      	ldrb	r3, [r7, #31]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d001      	beq.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80082b2:	7ffb      	ldrb	r3, [r7, #31]
 80082b4:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d02b      	beq.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082ca:	d008      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082d4:	d003      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d105      	bne.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7ff fe2a 	bl	8007f3c <LL_RCC_SetRNGClockSource>
 80082e8:	e00a      	b.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082f2:	60fb      	str	r3, [r7, #12]
 80082f4:	2000      	movs	r0, #0
 80082f6:	f7ff fe21 	bl	8007f3c <LL_RCC_SetRNGClockSource>
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f7ff fe34 	bl	8007f68 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008304:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8008308:	d107      	bne.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800830a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008314:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008318:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008322:	2b00      	cmp	r3, #0
 8008324:	d022      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800832a:	4618      	mov	r0, r3
 800832c:	f7ff fe3d 	bl	8007faa <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008334:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008338:	d107      	bne.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800833a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008348:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800834e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008352:	d10b      	bne.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	3304      	adds	r3, #4
 8008358:	4618      	mov	r0, r3
 800835a:	f000 f8e3 	bl	8008524 <RCCEx_PLLSAI1_ConfigNR>
 800835e:	4603      	mov	r3, r0
 8008360:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008362:	7ffb      	ldrb	r3, [r7, #31]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d001      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8008368:	7ffb      	ldrb	r3, [r7, #31]
 800836a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008374:	2b00      	cmp	r3, #0
 8008376:	d004      	beq.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800837c:	4618      	mov	r0, r3
 800837e:	f7ff fd26 	bl	8007dce <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800838a:	2b00      	cmp	r3, #0
 800838c:	d009      	beq.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008392:	4618      	mov	r0, r3
 8008394:	f7ff fd45 	bl	8007e22 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800839c:	4618      	mov	r0, r3
 800839e:	f7ff fd2c 	bl	8007dfa <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80083a2:	7fbb      	ldrb	r3, [r7, #30]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3720      	adds	r7, #32
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80083b0:	f7ff fcfe 	bl	8007db0 <LL_RCC_MSI_EnablePLLMode>
}
 80083b4:	bf00      	nop
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80083c0:	2300      	movs	r3, #0
 80083c2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80083c4:	f7ff fe5b 	bl	800807e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80083c8:	f7fc fa56 	bl	8004878 <HAL_GetTick>
 80083cc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80083ce:	e009      	b.n	80083e4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80083d0:	f7fc fa52 	bl	8004878 <HAL_GetTick>
 80083d4:	4602      	mov	r2, r0
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	2b02      	cmp	r3, #2
 80083dc:	d902      	bls.n	80083e4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80083de:	2303      	movs	r3, #3
 80083e0:	73fb      	strb	r3, [r7, #15]
      break;
 80083e2:	e004      	b.n	80083ee <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80083e4:	f7ff fe5a 	bl	800809c <LL_RCC_PLLSAI1_IsReady>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1f0      	bne.n	80083d0 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80083ee:	7bfb      	ldrb	r3, [r7, #15]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d137      	bne.n	8008464 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80083f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	021b      	lsls	r3, r3, #8
 8008404:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008408:	4313      	orrs	r3, r2
 800840a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800840c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800841e:	4313      	orrs	r3, r2
 8008420:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008422:	f7ff fe1d 	bl	8008060 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008426:	f7fc fa27 	bl	8004878 <HAL_GetTick>
 800842a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800842c:	e009      	b.n	8008442 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800842e:	f7fc fa23 	bl	8004878 <HAL_GetTick>
 8008432:	4602      	mov	r2, r0
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	1ad3      	subs	r3, r2, r3
 8008438:	2b02      	cmp	r3, #2
 800843a:	d902      	bls.n	8008442 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800843c:	2303      	movs	r3, #3
 800843e:	73fb      	strb	r3, [r7, #15]
        break;
 8008440:	e004      	b.n	800844c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008442:	f7ff fe2b 	bl	800809c <LL_RCC_PLLSAI1_IsReady>
 8008446:	4603      	mov	r3, r0
 8008448:	2b01      	cmp	r3, #1
 800844a:	d1f0      	bne.n	800842e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800844c:	7bfb      	ldrb	r3, [r7, #15]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d108      	bne.n	8008464 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008456:	691a      	ldr	r2, [r3, #16]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	691b      	ldr	r3, [r3, #16]
 800845c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008460:	4313      	orrs	r3, r2
 8008462:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008464:	7bfb      	ldrb	r3, [r7, #15]
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b084      	sub	sp, #16
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008476:	2300      	movs	r3, #0
 8008478:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800847a:	f7ff fe00 	bl	800807e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800847e:	f7fc f9fb 	bl	8004878 <HAL_GetTick>
 8008482:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008484:	e009      	b.n	800849a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008486:	f7fc f9f7 	bl	8004878 <HAL_GetTick>
 800848a:	4602      	mov	r2, r0
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	2b02      	cmp	r3, #2
 8008492:	d902      	bls.n	800849a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8008494:	2303      	movs	r3, #3
 8008496:	73fb      	strb	r3, [r7, #15]
      break;
 8008498:	e004      	b.n	80084a4 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800849a:	f7ff fdff 	bl	800809c <LL_RCC_PLLSAI1_IsReady>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d1f0      	bne.n	8008486 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80084a4:	7bfb      	ldrb	r3, [r7, #15]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d137      	bne.n	800851a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80084aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	021b      	lsls	r3, r3, #8
 80084ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80084be:	4313      	orrs	r3, r2
 80084c0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80084c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80084d4:	4313      	orrs	r3, r2
 80084d6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80084d8:	f7ff fdc2 	bl	8008060 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084dc:	f7fc f9cc 	bl	8004878 <HAL_GetTick>
 80084e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80084e2:	e009      	b.n	80084f8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80084e4:	f7fc f9c8 	bl	8004878 <HAL_GetTick>
 80084e8:	4602      	mov	r2, r0
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d902      	bls.n	80084f8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	73fb      	strb	r3, [r7, #15]
        break;
 80084f6:	e004      	b.n	8008502 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80084f8:	f7ff fdd0 	bl	800809c <LL_RCC_PLLSAI1_IsReady>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d1f0      	bne.n	80084e4 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8008502:	7bfb      	ldrb	r3, [r7, #15]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d108      	bne.n	800851a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800850c:	691a      	ldr	r2, [r3, #16]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008516:	4313      	orrs	r3, r2
 8008518:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800851a:	7bfb      	ldrb	r3, [r7, #15]
}
 800851c:	4618      	mov	r0, r3
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800852c:	2300      	movs	r3, #0
 800852e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008530:	f7ff fda5 	bl	800807e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008534:	f7fc f9a0 	bl	8004878 <HAL_GetTick>
 8008538:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800853a:	e009      	b.n	8008550 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800853c:	f7fc f99c 	bl	8004878 <HAL_GetTick>
 8008540:	4602      	mov	r2, r0
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	1ad3      	subs	r3, r2, r3
 8008546:	2b02      	cmp	r3, #2
 8008548:	d902      	bls.n	8008550 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800854a:	2303      	movs	r3, #3
 800854c:	73fb      	strb	r3, [r7, #15]
      break;
 800854e:	e004      	b.n	800855a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008550:	f7ff fda4 	bl	800809c <LL_RCC_PLLSAI1_IsReady>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1f0      	bne.n	800853c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800855a:	7bfb      	ldrb	r3, [r7, #15]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d137      	bne.n	80085d0 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	021b      	lsls	r3, r3, #8
 8008570:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008574:	4313      	orrs	r3, r2
 8008576:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8008578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800857c:	691b      	ldr	r3, [r3, #16]
 800857e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800858a:	4313      	orrs	r3, r2
 800858c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800858e:	f7ff fd67 	bl	8008060 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008592:	f7fc f971 	bl	8004878 <HAL_GetTick>
 8008596:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008598:	e009      	b.n	80085ae <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800859a:	f7fc f96d 	bl	8004878 <HAL_GetTick>
 800859e:	4602      	mov	r2, r0
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	2b02      	cmp	r3, #2
 80085a6:	d902      	bls.n	80085ae <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80085a8:	2303      	movs	r3, #3
 80085aa:	73fb      	strb	r3, [r7, #15]
        break;
 80085ac:	e004      	b.n	80085b8 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80085ae:	f7ff fd75 	bl	800809c <LL_RCC_PLLSAI1_IsReady>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d1f0      	bne.n	800859a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80085b8:	7bfb      	ldrb	r3, [r7, #15]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d108      	bne.n	80085d0 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80085be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085c2:	691a      	ldr	r2, [r3, #16]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80085cc:	4313      	orrs	r3, r2
 80085ce:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80085d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3710      	adds	r7, #16
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b082      	sub	sp, #8
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d101      	bne.n	80085ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	e049      	b.n	8008680 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d106      	bne.n	8008606 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f7fb ff21 	bl	8004448 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2202      	movs	r2, #2
 800860a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	3304      	adds	r3, #4
 8008616:	4619      	mov	r1, r3
 8008618:	4610      	mov	r0, r2
 800861a:	f000 f9cb 	bl	80089b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2201      	movs	r2, #1
 800862a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2201      	movs	r2, #1
 8008632:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2201      	movs	r2, #1
 800863a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2201      	movs	r2, #1
 8008642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2201      	movs	r2, #1
 800864a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2201      	movs	r2, #1
 8008652:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2201      	movs	r2, #1
 800865a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2201      	movs	r2, #1
 8008662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2201      	movs	r2, #1
 800866a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2201      	movs	r2, #1
 8008672:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2201      	movs	r2, #1
 800867a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008696:	b2db      	uxtb	r3, r3
 8008698:	2b01      	cmp	r3, #1
 800869a:	d001      	beq.n	80086a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	e036      	b.n	800870e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2202      	movs	r2, #2
 80086a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	68da      	ldr	r2, [r3, #12]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f042 0201 	orr.w	r2, r2, #1
 80086b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a17      	ldr	r2, [pc, #92]	; (800871c <HAL_TIM_Base_Start_IT+0x94>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d004      	beq.n	80086cc <HAL_TIM_Base_Start_IT+0x44>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086ca:	d115      	bne.n	80086f8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	689a      	ldr	r2, [r3, #8]
 80086d2:	4b13      	ldr	r3, [pc, #76]	; (8008720 <HAL_TIM_Base_Start_IT+0x98>)
 80086d4:	4013      	ands	r3, r2
 80086d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2b06      	cmp	r3, #6
 80086dc:	d015      	beq.n	800870a <HAL_TIM_Base_Start_IT+0x82>
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086e4:	d011      	beq.n	800870a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f042 0201 	orr.w	r2, r2, #1
 80086f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086f6:	e008      	b.n	800870a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f042 0201 	orr.w	r2, r2, #1
 8008706:	601a      	str	r2, [r3, #0]
 8008708:	e000      	b.n	800870c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800870a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	3714      	adds	r7, #20
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop
 800871c:	40012c00 	.word	0x40012c00
 8008720:	00010007 	.word	0x00010007

08008724 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	f003 0302 	and.w	r3, r3, #2
 8008736:	2b02      	cmp	r3, #2
 8008738:	d122      	bne.n	8008780 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	f003 0302 	and.w	r3, r3, #2
 8008744:	2b02      	cmp	r3, #2
 8008746:	d11b      	bne.n	8008780 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f06f 0202 	mvn.w	r2, #2
 8008750:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	f003 0303 	and.w	r3, r3, #3
 8008762:	2b00      	cmp	r3, #0
 8008764:	d003      	beq.n	800876e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f905 	bl	8008976 <HAL_TIM_IC_CaptureCallback>
 800876c:	e005      	b.n	800877a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f8f7 	bl	8008962 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 f908 	bl	800898a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	f003 0304 	and.w	r3, r3, #4
 800878a:	2b04      	cmp	r3, #4
 800878c:	d122      	bne.n	80087d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	f003 0304 	and.w	r3, r3, #4
 8008798:	2b04      	cmp	r3, #4
 800879a:	d11b      	bne.n	80087d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f06f 0204 	mvn.w	r2, #4
 80087a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2202      	movs	r2, #2
 80087aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	699b      	ldr	r3, [r3, #24]
 80087b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d003      	beq.n	80087c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f8db 	bl	8008976 <HAL_TIM_IC_CaptureCallback>
 80087c0:	e005      	b.n	80087ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f8cd 	bl	8008962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 f8de 	bl	800898a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	f003 0308 	and.w	r3, r3, #8
 80087de:	2b08      	cmp	r3, #8
 80087e0:	d122      	bne.n	8008828 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	f003 0308 	and.w	r3, r3, #8
 80087ec:	2b08      	cmp	r3, #8
 80087ee:	d11b      	bne.n	8008828 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f06f 0208 	mvn.w	r2, #8
 80087f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2204      	movs	r2, #4
 80087fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	69db      	ldr	r3, [r3, #28]
 8008806:	f003 0303 	and.w	r3, r3, #3
 800880a:	2b00      	cmp	r3, #0
 800880c:	d003      	beq.n	8008816 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 f8b1 	bl	8008976 <HAL_TIM_IC_CaptureCallback>
 8008814:	e005      	b.n	8008822 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f8a3 	bl	8008962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 f8b4 	bl	800898a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	691b      	ldr	r3, [r3, #16]
 800882e:	f003 0310 	and.w	r3, r3, #16
 8008832:	2b10      	cmp	r3, #16
 8008834:	d122      	bne.n	800887c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	f003 0310 	and.w	r3, r3, #16
 8008840:	2b10      	cmp	r3, #16
 8008842:	d11b      	bne.n	800887c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f06f 0210 	mvn.w	r2, #16
 800884c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2208      	movs	r2, #8
 8008852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	69db      	ldr	r3, [r3, #28]
 800885a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800885e:	2b00      	cmp	r3, #0
 8008860:	d003      	beq.n	800886a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f887 	bl	8008976 <HAL_TIM_IC_CaptureCallback>
 8008868:	e005      	b.n	8008876 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f879 	bl	8008962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f88a 	bl	800898a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	2b01      	cmp	r3, #1
 8008888:	d10e      	bne.n	80088a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	f003 0301 	and.w	r3, r3, #1
 8008894:	2b01      	cmp	r3, #1
 8008896:	d107      	bne.n	80088a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f06f 0201 	mvn.w	r2, #1
 80088a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f7fb fd0c 	bl	80042c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088b2:	2b80      	cmp	r3, #128	; 0x80
 80088b4:	d10e      	bne.n	80088d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088c0:	2b80      	cmp	r3, #128	; 0x80
 80088c2:	d107      	bne.n	80088d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80088cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 f8de 	bl	8008a90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088e2:	d10e      	bne.n	8008902 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ee:	2b80      	cmp	r3, #128	; 0x80
 80088f0:	d107      	bne.n	8008902 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80088fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 f8d1 	bl	8008aa4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800890c:	2b40      	cmp	r3, #64	; 0x40
 800890e:	d10e      	bne.n	800892e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800891a:	2b40      	cmp	r3, #64	; 0x40
 800891c:	d107      	bne.n	800892e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 f838 	bl	800899e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	f003 0320 	and.w	r3, r3, #32
 8008938:	2b20      	cmp	r3, #32
 800893a:	d10e      	bne.n	800895a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	f003 0320 	and.w	r3, r3, #32
 8008946:	2b20      	cmp	r3, #32
 8008948:	d107      	bne.n	800895a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f06f 0220 	mvn.w	r2, #32
 8008952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 f891 	bl	8008a7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800895a:	bf00      	nop
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008962:	b480      	push	{r7}
 8008964:	b083      	sub	sp, #12
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800896a:	bf00      	nop
 800896c:	370c      	adds	r7, #12
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008976:	b480      	push	{r7}
 8008978:	b083      	sub	sp, #12
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800897e:	bf00      	nop
 8008980:	370c      	adds	r7, #12
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr

0800898a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800898a:	b480      	push	{r7}
 800898c:	b083      	sub	sp, #12
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008992:	bf00      	nop
 8008994:	370c      	adds	r7, #12
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr

0800899e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800899e:	b480      	push	{r7}
 80089a0:	b083      	sub	sp, #12
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80089a6:	bf00      	nop
 80089a8:	370c      	adds	r7, #12
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr
	...

080089b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	4a2a      	ldr	r2, [pc, #168]	; (8008a70 <TIM_Base_SetConfig+0xbc>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d003      	beq.n	80089d4 <TIM_Base_SetConfig+0x20>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089d2:	d108      	bne.n	80089e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4a21      	ldr	r2, [pc, #132]	; (8008a70 <TIM_Base_SetConfig+0xbc>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d00b      	beq.n	8008a06 <TIM_Base_SetConfig+0x52>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089f4:	d007      	beq.n	8008a06 <TIM_Base_SetConfig+0x52>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a1e      	ldr	r2, [pc, #120]	; (8008a74 <TIM_Base_SetConfig+0xc0>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d003      	beq.n	8008a06 <TIM_Base_SetConfig+0x52>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a1d      	ldr	r2, [pc, #116]	; (8008a78 <TIM_Base_SetConfig+0xc4>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d108      	bne.n	8008a18 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	695b      	ldr	r3, [r3, #20]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	689a      	ldr	r2, [r3, #8]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a0c      	ldr	r2, [pc, #48]	; (8008a70 <TIM_Base_SetConfig+0xbc>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d007      	beq.n	8008a54 <TIM_Base_SetConfig+0xa0>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a0b      	ldr	r2, [pc, #44]	; (8008a74 <TIM_Base_SetConfig+0xc0>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d003      	beq.n	8008a54 <TIM_Base_SetConfig+0xa0>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	4a0a      	ldr	r2, [pc, #40]	; (8008a78 <TIM_Base_SetConfig+0xc4>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d103      	bne.n	8008a5c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	691a      	ldr	r2, [r3, #16]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	615a      	str	r2, [r3, #20]
}
 8008a62:	bf00      	nop
 8008a64:	3714      	adds	r7, #20
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	40012c00 	.word	0x40012c00
 8008a74:	40014400 	.word	0x40014400
 8008a78:	40014800 	.word	0x40014800

08008a7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a84:	bf00      	nop
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a98:	bf00      	nop
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr

08008aa4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008aac:	bf00      	nop
 8008aae:	370c      	adds	r7, #12
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b085      	sub	sp, #20
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008ac8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008acc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	b29a      	uxth	r2, r3
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3714      	adds	r7, #20
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr

08008ae6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008ae6:	b480      	push	{r7}
 8008ae8:	b085      	sub	sp, #20
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008aee:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008af2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	43db      	mvns	r3, r3
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	4013      	ands	r3, r2
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3714      	adds	r7, #20
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008b1c:	b084      	sub	sp, #16
 8008b1e:	b480      	push	{r7}
 8008b20:	b083      	sub	sp, #12
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
 8008b26:	f107 0014 	add.w	r0, r7, #20
 8008b2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2201      	movs	r2, #1
 8008b32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	b004      	add	sp, #16
 8008b5c:	4770      	bx	lr
	...

08008b60 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b09d      	sub	sp, #116	; 0x74
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	4413      	add	r3, r2
 8008b7a:	881b      	ldrh	r3, [r3, #0]
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b86:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	78db      	ldrb	r3, [r3, #3]
 8008b8e:	2b03      	cmp	r3, #3
 8008b90:	d81f      	bhi.n	8008bd2 <USB_ActivateEndpoint+0x72>
 8008b92:	a201      	add	r2, pc, #4	; (adr r2, 8008b98 <USB_ActivateEndpoint+0x38>)
 8008b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b98:	08008ba9 	.word	0x08008ba9
 8008b9c:	08008bc5 	.word	0x08008bc5
 8008ba0:	08008bdb 	.word	0x08008bdb
 8008ba4:	08008bb7 	.word	0x08008bb7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008ba8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008bac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008bb0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008bb4:	e012      	b.n	8008bdc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008bb6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008bba:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008bbe:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008bc2:	e00b      	b.n	8008bdc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008bc4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008bc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008bcc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008bd0:	e004      	b.n	8008bdc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8008bd8:	e000      	b.n	8008bdc <USB_ActivateEndpoint+0x7c>
      break;
 8008bda:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	441a      	add	r2, r3
 8008be6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008bea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	4413      	add	r3, r2
 8008c08:	881b      	ldrh	r3, [r3, #0]
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	b21b      	sxth	r3, r3
 8008c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c16:	b21a      	sxth	r2, r3
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	b21b      	sxth	r3, r3
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	b21b      	sxth	r3, r3
 8008c22:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	441a      	add	r2, r3
 8008c30:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008c34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	7b1b      	ldrb	r3, [r3, #12]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	f040 8178 	bne.w	8008f42 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	785b      	ldrb	r3, [r3, #1]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f000 8084 	beq.w	8008d64 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	61bb      	str	r3, [r7, #24]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	461a      	mov	r2, r3
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	61bb      	str	r3, [r7, #24]
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	00da      	lsls	r2, r3, #3
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	4413      	add	r3, r2
 8008c7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c7e:	617b      	str	r3, [r7, #20]
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	88db      	ldrh	r3, [r3, #6]
 8008c84:	085b      	lsrs	r3, r3, #1
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	005b      	lsls	r3, r3, #1
 8008c8a:	b29a      	uxth	r2, r3
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	4413      	add	r3, r2
 8008c9a:	881b      	ldrh	r3, [r3, #0]
 8008c9c:	827b      	strh	r3, [r7, #18]
 8008c9e:	8a7b      	ldrh	r3, [r7, #18]
 8008ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d01b      	beq.n	8008ce0 <USB_ActivateEndpoint+0x180>
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	4413      	add	r3, r2
 8008cb2:	881b      	ldrh	r3, [r3, #0]
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cbe:	823b      	strh	r3, [r7, #16]
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	441a      	add	r2, r3
 8008cca:	8a3b      	ldrh	r3, [r7, #16]
 8008ccc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	78db      	ldrb	r3, [r3, #3]
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d020      	beq.n	8008d2a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	4413      	add	r3, r2
 8008cf2:	881b      	ldrh	r3, [r3, #0]
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cfe:	81bb      	strh	r3, [r7, #12]
 8008d00:	89bb      	ldrh	r3, [r7, #12]
 8008d02:	f083 0320 	eor.w	r3, r3, #32
 8008d06:	81bb      	strh	r3, [r7, #12]
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	441a      	add	r2, r3
 8008d12:	89bb      	ldrh	r3, [r7, #12]
 8008d14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	8013      	strh	r3, [r2, #0]
 8008d28:	e2d5      	b.n	80092d6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	4413      	add	r3, r2
 8008d34:	881b      	ldrh	r3, [r3, #0]
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d40:	81fb      	strh	r3, [r7, #14]
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	441a      	add	r2, r3
 8008d4c:	89fb      	ldrh	r3, [r7, #14]
 8008d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	8013      	strh	r3, [r2, #0]
 8008d62:	e2b8      	b.n	80092d6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	633b      	str	r3, [r7, #48]	; 0x30
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	461a      	mov	r2, r3
 8008d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d74:	4413      	add	r3, r2
 8008d76:	633b      	str	r3, [r7, #48]	; 0x30
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	00da      	lsls	r2, r3, #3
 8008d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d80:	4413      	add	r3, r2
 8008d82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	88db      	ldrh	r3, [r3, #6]
 8008d8c:	085b      	lsrs	r3, r3, #1
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	005b      	lsls	r3, r3, #1
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d96:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	461a      	mov	r2, r3
 8008da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da8:	4413      	add	r3, r2
 8008daa:	62bb      	str	r3, [r7, #40]	; 0x28
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	00da      	lsls	r2, r3, #3
 8008db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db4:	4413      	add	r3, r2
 8008db6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008dba:	627b      	str	r3, [r7, #36]	; 0x24
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbe:	881b      	ldrh	r3, [r3, #0]
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008dc6:	b29a      	uxth	r2, r3
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dca:	801a      	strh	r2, [r3, #0]
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	2b3e      	cmp	r3, #62	; 0x3e
 8008dd2:	d91d      	bls.n	8008e10 <USB_ActivateEndpoint+0x2b0>
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	095b      	lsrs	r3, r3, #5
 8008dda:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	691b      	ldr	r3, [r3, #16]
 8008de0:	f003 031f 	and.w	r3, r3, #31
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d102      	bne.n	8008dee <USB_ActivateEndpoint+0x28e>
 8008de8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008dea:	3b01      	subs	r3, #1
 8008dec:	66bb      	str	r3, [r7, #104]	; 0x68
 8008dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df0:	881b      	ldrh	r3, [r3, #0]
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	029b      	lsls	r3, r3, #10
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e08:	b29a      	uxth	r2, r3
 8008e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0c:	801a      	strh	r2, [r3, #0]
 8008e0e:	e026      	b.n	8008e5e <USB_ActivateEndpoint+0x2fe>
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	691b      	ldr	r3, [r3, #16]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d10a      	bne.n	8008e2e <USB_ActivateEndpoint+0x2ce>
 8008e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1a:	881b      	ldrh	r3, [r3, #0]
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e26:	b29a      	uxth	r2, r3
 8008e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2a:	801a      	strh	r2, [r3, #0]
 8008e2c:	e017      	b.n	8008e5e <USB_ActivateEndpoint+0x2fe>
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	085b      	lsrs	r3, r3, #1
 8008e34:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	f003 0301 	and.w	r3, r3, #1
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d002      	beq.n	8008e48 <USB_ActivateEndpoint+0x2e8>
 8008e42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e44:	3301      	adds	r3, #1
 8008e46:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4a:	881b      	ldrh	r3, [r3, #0]
 8008e4c:	b29a      	uxth	r2, r3
 8008e4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	029b      	lsls	r3, r3, #10
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	4313      	orrs	r3, r2
 8008e58:	b29a      	uxth	r2, r3
 8008e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	4413      	add	r3, r2
 8008e68:	881b      	ldrh	r3, [r3, #0]
 8008e6a:	847b      	strh	r3, [r7, #34]	; 0x22
 8008e6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d01b      	beq.n	8008eae <USB_ActivateEndpoint+0x34e>
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	4413      	add	r3, r2
 8008e80:	881b      	ldrh	r3, [r3, #0]
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e8c:	843b      	strh	r3, [r7, #32]
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	441a      	add	r2, r3
 8008e98:	8c3b      	ldrh	r3, [r7, #32]
 8008e9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ea2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d124      	bne.n	8008f00 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4413      	add	r3, r2
 8008ec0:	881b      	ldrh	r3, [r3, #0]
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ecc:	83bb      	strh	r3, [r7, #28]
 8008ece:	8bbb      	ldrh	r3, [r7, #28]
 8008ed0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008ed4:	83bb      	strh	r3, [r7, #28]
 8008ed6:	8bbb      	ldrh	r3, [r7, #28]
 8008ed8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008edc:	83bb      	strh	r3, [r7, #28]
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	441a      	add	r2, r3
 8008ee8:	8bbb      	ldrh	r3, [r7, #28]
 8008eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	8013      	strh	r3, [r2, #0]
 8008efe:	e1ea      	b.n	80092d6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	4413      	add	r3, r2
 8008f0a:	881b      	ldrh	r3, [r3, #0]
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f16:	83fb      	strh	r3, [r7, #30]
 8008f18:	8bfb      	ldrh	r3, [r7, #30]
 8008f1a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008f1e:	83fb      	strh	r3, [r7, #30]
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	441a      	add	r2, r3
 8008f2a:	8bfb      	ldrh	r3, [r7, #30]
 8008f2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	8013      	strh	r3, [r2, #0]
 8008f40:	e1c9      	b.n	80092d6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	78db      	ldrb	r3, [r3, #3]
 8008f46:	2b02      	cmp	r3, #2
 8008f48:	d11e      	bne.n	8008f88 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	4413      	add	r3, r2
 8008f54:	881b      	ldrh	r3, [r3, #0]
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f60:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	441a      	add	r2, r3
 8008f6e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f7a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	8013      	strh	r3, [r2, #0]
 8008f86:	e01d      	b.n	8008fc4 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	4413      	add	r3, r2
 8008f92:	881b      	ldrh	r3, [r3, #0]
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f9e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	441a      	add	r2, r3
 8008fac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008fb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fd4:	4413      	add	r3, r2
 8008fd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	00da      	lsls	r2, r3, #3
 8008fde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fe0:	4413      	add	r3, r2
 8008fe2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fe6:	65bb      	str	r3, [r7, #88]	; 0x58
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	891b      	ldrh	r3, [r3, #8]
 8008fec:	085b      	lsrs	r3, r3, #1
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	005b      	lsls	r3, r3, #1
 8008ff2:	b29a      	uxth	r2, r3
 8008ff4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ff6:	801a      	strh	r2, [r3, #0]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	657b      	str	r3, [r7, #84]	; 0x54
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009002:	b29b      	uxth	r3, r3
 8009004:	461a      	mov	r2, r3
 8009006:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009008:	4413      	add	r3, r2
 800900a:	657b      	str	r3, [r7, #84]	; 0x54
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	00da      	lsls	r2, r3, #3
 8009012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009014:	4413      	add	r3, r2
 8009016:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800901a:	653b      	str	r3, [r7, #80]	; 0x50
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	895b      	ldrh	r3, [r3, #10]
 8009020:	085b      	lsrs	r3, r3, #1
 8009022:	b29b      	uxth	r3, r3
 8009024:	005b      	lsls	r3, r3, #1
 8009026:	b29a      	uxth	r2, r3
 8009028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800902a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	785b      	ldrb	r3, [r3, #1]
 8009030:	2b00      	cmp	r3, #0
 8009032:	f040 8093 	bne.w	800915c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	4413      	add	r3, r2
 8009040:	881b      	ldrh	r3, [r3, #0]
 8009042:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009046:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800904a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800904e:	2b00      	cmp	r3, #0
 8009050:	d01b      	beq.n	800908a <USB_ActivateEndpoint+0x52a>
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	4413      	add	r3, r2
 800905c:	881b      	ldrh	r3, [r3, #0]
 800905e:	b29b      	uxth	r3, r3
 8009060:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009068:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	441a      	add	r2, r3
 8009074:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800907a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800907e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009086:	b29b      	uxth	r3, r3
 8009088:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	4413      	add	r3, r2
 8009094:	881b      	ldrh	r3, [r3, #0]
 8009096:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009098:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800909a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d01b      	beq.n	80090da <USB_ActivateEndpoint+0x57a>
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	4413      	add	r3, r2
 80090ac:	881b      	ldrh	r3, [r3, #0]
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090b8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	441a      	add	r2, r3
 80090c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80090c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4413      	add	r3, r2
 80090e4:	881b      	ldrh	r3, [r3, #0]
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090f0:	873b      	strh	r3, [r7, #56]	; 0x38
 80090f2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80090f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80090f8:	873b      	strh	r3, [r7, #56]	; 0x38
 80090fa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80090fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009100:	873b      	strh	r3, [r7, #56]	; 0x38
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	441a      	add	r2, r3
 800910c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800910e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009112:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800911a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800911e:	b29b      	uxth	r3, r3
 8009120:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	4413      	add	r3, r2
 800912c:	881b      	ldrh	r3, [r3, #0]
 800912e:	b29b      	uxth	r3, r3
 8009130:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009134:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009138:	86fb      	strh	r3, [r7, #54]	; 0x36
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	441a      	add	r2, r3
 8009144:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009146:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800914a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800914e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009156:	b29b      	uxth	r3, r3
 8009158:	8013      	strh	r3, [r2, #0]
 800915a:	e0bc      	b.n	80092d6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	4413      	add	r3, r2
 8009166:	881b      	ldrh	r3, [r3, #0]
 8009168:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800916c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009174:	2b00      	cmp	r3, #0
 8009176:	d01d      	beq.n	80091b4 <USB_ActivateEndpoint+0x654>
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	4413      	add	r3, r2
 8009182:	881b      	ldrh	r3, [r3, #0]
 8009184:	b29b      	uxth	r3, r3
 8009186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800918a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800918e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	441a      	add	r2, r3
 800919c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80091a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80091ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	4413      	add	r3, r2
 80091be:	881b      	ldrh	r3, [r3, #0]
 80091c0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80091c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80091c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d01d      	beq.n	800920c <USB_ActivateEndpoint+0x6ac>
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	4413      	add	r3, r2
 80091da:	881b      	ldrh	r3, [r3, #0]
 80091dc:	b29b      	uxth	r3, r3
 80091de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091e6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	441a      	add	r2, r3
 80091f4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80091f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009200:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009204:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009208:	b29b      	uxth	r3, r3
 800920a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	78db      	ldrb	r3, [r3, #3]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d024      	beq.n	800925e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	4413      	add	r3, r2
 800921e:	881b      	ldrh	r3, [r3, #0]
 8009220:	b29b      	uxth	r3, r3
 8009222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800922a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800922e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009232:	f083 0320 	eor.w	r3, r3, #32
 8009236:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	441a      	add	r2, r3
 8009244:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800924c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009258:	b29b      	uxth	r3, r3
 800925a:	8013      	strh	r3, [r2, #0]
 800925c:	e01d      	b.n	800929a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	4413      	add	r3, r2
 8009268:	881b      	ldrh	r3, [r3, #0]
 800926a:	b29b      	uxth	r3, r3
 800926c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009270:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009274:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	441a      	add	r2, r3
 8009282:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800928a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800928e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009296:	b29b      	uxth	r3, r3
 8009298:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	4413      	add	r3, r2
 80092a4:	881b      	ldrh	r3, [r3, #0]
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	441a      	add	r2, r3
 80092be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80092c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80092d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3774      	adds	r7, #116	; 0x74
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop

080092e8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b08d      	sub	sp, #52	; 0x34
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	7b1b      	ldrb	r3, [r3, #12]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	f040 808e 	bne.w	8009418 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	785b      	ldrb	r3, [r3, #1]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d044      	beq.n	800938e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	4413      	add	r3, r2
 800930e:	881b      	ldrh	r3, [r3, #0]
 8009310:	81bb      	strh	r3, [r7, #12]
 8009312:	89bb      	ldrh	r3, [r7, #12]
 8009314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009318:	2b00      	cmp	r3, #0
 800931a:	d01b      	beq.n	8009354 <USB_DeactivateEndpoint+0x6c>
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	4413      	add	r3, r2
 8009326:	881b      	ldrh	r3, [r3, #0]
 8009328:	b29b      	uxth	r3, r3
 800932a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800932e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009332:	817b      	strh	r3, [r7, #10]
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	441a      	add	r2, r3
 800933e:	897b      	ldrh	r3, [r7, #10]
 8009340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009344:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800934c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009350:	b29b      	uxth	r3, r3
 8009352:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	4413      	add	r3, r2
 800935e:	881b      	ldrh	r3, [r3, #0]
 8009360:	b29b      	uxth	r3, r3
 8009362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009366:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800936a:	813b      	strh	r3, [r7, #8]
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	441a      	add	r2, r3
 8009376:	893b      	ldrh	r3, [r7, #8]
 8009378:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800937c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009388:	b29b      	uxth	r3, r3
 800938a:	8013      	strh	r3, [r2, #0]
 800938c:	e192      	b.n	80096b4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	4413      	add	r3, r2
 8009398:	881b      	ldrh	r3, [r3, #0]
 800939a:	827b      	strh	r3, [r7, #18]
 800939c:	8a7b      	ldrh	r3, [r7, #18]
 800939e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d01b      	beq.n	80093de <USB_DeactivateEndpoint+0xf6>
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	4413      	add	r3, r2
 80093b0:	881b      	ldrh	r3, [r3, #0]
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093bc:	823b      	strh	r3, [r7, #16]
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	441a      	add	r2, r3
 80093c8:	8a3b      	ldrh	r3, [r7, #16]
 80093ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80093d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093da:	b29b      	uxth	r3, r3
 80093dc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	4413      	add	r3, r2
 80093e8:	881b      	ldrh	r3, [r3, #0]
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80093f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093f4:	81fb      	strh	r3, [r7, #14]
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	441a      	add	r2, r3
 8009400:	89fb      	ldrh	r3, [r7, #14]
 8009402:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009406:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800940a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800940e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009412:	b29b      	uxth	r3, r3
 8009414:	8013      	strh	r3, [r2, #0]
 8009416:	e14d      	b.n	80096b4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	785b      	ldrb	r3, [r3, #1]
 800941c:	2b00      	cmp	r3, #0
 800941e:	f040 80a5 	bne.w	800956c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	4413      	add	r3, r2
 800942c:	881b      	ldrh	r3, [r3, #0]
 800942e:	843b      	strh	r3, [r7, #32]
 8009430:	8c3b      	ldrh	r3, [r7, #32]
 8009432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009436:	2b00      	cmp	r3, #0
 8009438:	d01b      	beq.n	8009472 <USB_DeactivateEndpoint+0x18a>
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	4413      	add	r3, r2
 8009444:	881b      	ldrh	r3, [r3, #0]
 8009446:	b29b      	uxth	r3, r3
 8009448:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800944c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009450:	83fb      	strh	r3, [r7, #30]
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	441a      	add	r2, r3
 800945c:	8bfb      	ldrh	r3, [r7, #30]
 800945e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009466:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800946a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800946e:	b29b      	uxth	r3, r3
 8009470:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	4413      	add	r3, r2
 800947c:	881b      	ldrh	r3, [r3, #0]
 800947e:	83bb      	strh	r3, [r7, #28]
 8009480:	8bbb      	ldrh	r3, [r7, #28]
 8009482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009486:	2b00      	cmp	r3, #0
 8009488:	d01b      	beq.n	80094c2 <USB_DeactivateEndpoint+0x1da>
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	4413      	add	r3, r2
 8009494:	881b      	ldrh	r3, [r3, #0]
 8009496:	b29b      	uxth	r3, r3
 8009498:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800949c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094a0:	837b      	strh	r3, [r7, #26]
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	441a      	add	r2, r3
 80094ac:	8b7b      	ldrh	r3, [r7, #26]
 80094ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80094be:	b29b      	uxth	r3, r3
 80094c0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	4413      	add	r3, r2
 80094cc:	881b      	ldrh	r3, [r3, #0]
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094d8:	833b      	strh	r3, [r7, #24]
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	441a      	add	r2, r3
 80094e4:	8b3b      	ldrh	r3, [r7, #24]
 80094e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	4413      	add	r3, r2
 8009504:	881b      	ldrh	r3, [r3, #0]
 8009506:	b29b      	uxth	r3, r3
 8009508:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800950c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009510:	82fb      	strh	r3, [r7, #22]
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	441a      	add	r2, r3
 800951c:	8afb      	ldrh	r3, [r7, #22]
 800951e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800952a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800952e:	b29b      	uxth	r3, r3
 8009530:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	4413      	add	r3, r2
 800953c:	881b      	ldrh	r3, [r3, #0]
 800953e:	b29b      	uxth	r3, r3
 8009540:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009544:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009548:	82bb      	strh	r3, [r7, #20]
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	441a      	add	r2, r3
 8009554:	8abb      	ldrh	r3, [r7, #20]
 8009556:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800955a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800955e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009566:	b29b      	uxth	r3, r3
 8009568:	8013      	strh	r3, [r2, #0]
 800956a:	e0a3      	b.n	80096b4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	4413      	add	r3, r2
 8009576:	881b      	ldrh	r3, [r3, #0]
 8009578:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800957a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800957c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009580:	2b00      	cmp	r3, #0
 8009582:	d01b      	beq.n	80095bc <USB_DeactivateEndpoint+0x2d4>
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	4413      	add	r3, r2
 800958e:	881b      	ldrh	r3, [r3, #0]
 8009590:	b29b      	uxth	r3, r3
 8009592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800959a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	441a      	add	r2, r3
 80095a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80095a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80095b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	4413      	add	r3, r2
 80095c6:	881b      	ldrh	r3, [r3, #0]
 80095c8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80095ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80095cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d01b      	beq.n	800960c <USB_DeactivateEndpoint+0x324>
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	4413      	add	r3, r2
 80095de:	881b      	ldrh	r3, [r3, #0]
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095ea:	853b      	strh	r3, [r7, #40]	; 0x28
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	441a      	add	r2, r3
 80095f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80095f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009604:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009608:	b29b      	uxth	r3, r3
 800960a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	4413      	add	r3, r2
 8009616:	881b      	ldrh	r3, [r3, #0]
 8009618:	b29b      	uxth	r3, r3
 800961a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800961e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009622:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	441a      	add	r2, r3
 800962e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009630:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009634:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009638:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800963c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009640:	b29b      	uxth	r3, r3
 8009642:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	4413      	add	r3, r2
 800964e:	881b      	ldrh	r3, [r3, #0]
 8009650:	b29b      	uxth	r3, r3
 8009652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009656:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800965a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	441a      	add	r2, r3
 8009666:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009668:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800966c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009670:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009678:	b29b      	uxth	r3, r3
 800967a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	4413      	add	r3, r2
 8009686:	881b      	ldrh	r3, [r3, #0]
 8009688:	b29b      	uxth	r3, r3
 800968a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800968e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009692:	847b      	strh	r3, [r7, #34]	; 0x22
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	441a      	add	r2, r3
 800969e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80096a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3734      	adds	r7, #52	; 0x34
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr

080096c2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b0c2      	sub	sp, #264	; 0x108
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096d0:	6018      	str	r0, [r3, #0]
 80096d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096da:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80096dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	785b      	ldrb	r3, [r3, #1]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	f040 86b7 	bne.w	800a45c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80096ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	699a      	ldr	r2, [r3, #24]
 80096fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	691b      	ldr	r3, [r3, #16]
 8009706:	429a      	cmp	r2, r3
 8009708:	d908      	bls.n	800971c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800970a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800970e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800971a:	e007      	b.n	800972c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800971c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009720:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	699b      	ldr	r3, [r3, #24]
 8009728:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800972c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009730:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	7b1b      	ldrb	r3, [r3, #12]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d13a      	bne.n	80097b2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800973c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	6959      	ldr	r1, [r3, #20]
 8009748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800974c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	88da      	ldrh	r2, [r3, #6]
 8009754:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009758:	b29b      	uxth	r3, r3
 800975a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800975e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009762:	6800      	ldr	r0, [r0, #0]
 8009764:	f001 fc98 	bl	800b098 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800976c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	613b      	str	r3, [r7, #16]
 8009774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009778:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009782:	b29b      	uxth	r3, r3
 8009784:	461a      	mov	r2, r3
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	4413      	add	r3, r2
 800978a:	613b      	str	r3, [r7, #16]
 800978c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	00da      	lsls	r2, r3, #3
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	4413      	add	r3, r2
 800979e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80097a2:	60fb      	str	r3, [r7, #12]
 80097a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097a8:	b29a      	uxth	r2, r3
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	801a      	strh	r2, [r3, #0]
 80097ae:	f000 be1f 	b.w	800a3f0 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80097b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	78db      	ldrb	r3, [r3, #3]
 80097be:	2b02      	cmp	r3, #2
 80097c0:	f040 8462 	bne.w	800a088 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80097c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	6a1a      	ldr	r2, [r3, #32]
 80097d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	691b      	ldr	r3, [r3, #16]
 80097dc:	429a      	cmp	r2, r3
 80097de:	f240 83df 	bls.w	8009fa0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80097e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	4413      	add	r3, r2
 80097fc:	881b      	ldrh	r3, [r3, #0]
 80097fe:	b29b      	uxth	r3, r3
 8009800:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009808:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800980c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009810:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800981a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	441a      	add	r2, r3
 8009826:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800982a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800982e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009832:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800983a:	b29b      	uxth	r3, r3
 800983c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800983e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	6a1a      	ldr	r2, [r3, #32]
 800984a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800984e:	1ad2      	subs	r2, r2, r3
 8009850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009854:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800985c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009860:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800986a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	4413      	add	r3, r2
 8009876:	881b      	ldrh	r3, [r3, #0]
 8009878:	b29b      	uxth	r3, r3
 800987a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800987e:	2b00      	cmp	r3, #0
 8009880:	f000 81c7 	beq.w	8009c12 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009888:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	633b      	str	r3, [r7, #48]	; 0x30
 8009890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	785b      	ldrb	r3, [r3, #1]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d177      	bne.n	8009990 <USB_EPStartXfer+0x2ce>
 80098a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80098ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	461a      	mov	r2, r3
 80098be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c0:	4413      	add	r3, r2
 80098c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80098c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	00da      	lsls	r2, r3, #3
 80098d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d4:	4413      	add	r3, r2
 80098d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80098da:	627b      	str	r3, [r7, #36]	; 0x24
 80098dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098de:	881b      	ldrh	r3, [r3, #0]
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098e6:	b29a      	uxth	r2, r3
 80098e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ea:	801a      	strh	r2, [r3, #0]
 80098ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098f0:	2b3e      	cmp	r3, #62	; 0x3e
 80098f2:	d921      	bls.n	8009938 <USB_EPStartXfer+0x276>
 80098f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098f8:	095b      	lsrs	r3, r3, #5
 80098fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80098fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009902:	f003 031f 	and.w	r3, r3, #31
 8009906:	2b00      	cmp	r3, #0
 8009908:	d104      	bne.n	8009914 <USB_EPStartXfer+0x252>
 800990a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800990e:	3b01      	subs	r3, #1
 8009910:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009916:	881b      	ldrh	r3, [r3, #0]
 8009918:	b29a      	uxth	r2, r3
 800991a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800991e:	b29b      	uxth	r3, r3
 8009920:	029b      	lsls	r3, r3, #10
 8009922:	b29b      	uxth	r3, r3
 8009924:	4313      	orrs	r3, r2
 8009926:	b29b      	uxth	r3, r3
 8009928:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800992c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009930:	b29a      	uxth	r2, r3
 8009932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009934:	801a      	strh	r2, [r3, #0]
 8009936:	e050      	b.n	80099da <USB_EPStartXfer+0x318>
 8009938:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800993c:	2b00      	cmp	r3, #0
 800993e:	d10a      	bne.n	8009956 <USB_EPStartXfer+0x294>
 8009940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009942:	881b      	ldrh	r3, [r3, #0]
 8009944:	b29b      	uxth	r3, r3
 8009946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800994a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800994e:	b29a      	uxth	r2, r3
 8009950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009952:	801a      	strh	r2, [r3, #0]
 8009954:	e041      	b.n	80099da <USB_EPStartXfer+0x318>
 8009956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800995a:	085b      	lsrs	r3, r3, #1
 800995c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009964:	f003 0301 	and.w	r3, r3, #1
 8009968:	2b00      	cmp	r3, #0
 800996a:	d004      	beq.n	8009976 <USB_EPStartXfer+0x2b4>
 800996c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009970:	3301      	adds	r3, #1
 8009972:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009978:	881b      	ldrh	r3, [r3, #0]
 800997a:	b29a      	uxth	r2, r3
 800997c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009980:	b29b      	uxth	r3, r3
 8009982:	029b      	lsls	r3, r3, #10
 8009984:	b29b      	uxth	r3, r3
 8009986:	4313      	orrs	r3, r2
 8009988:	b29a      	uxth	r2, r3
 800998a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998c:	801a      	strh	r2, [r3, #0]
 800998e:	e024      	b.n	80099da <USB_EPStartXfer+0x318>
 8009990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009994:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	785b      	ldrb	r3, [r3, #1]
 800999c:	2b01      	cmp	r3, #1
 800999e:	d11c      	bne.n	80099da <USB_EPStartXfer+0x318>
 80099a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	461a      	mov	r2, r3
 80099b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b4:	4413      	add	r3, r2
 80099b6:	633b      	str	r3, [r7, #48]	; 0x30
 80099b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	00da      	lsls	r2, r3, #3
 80099c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c8:	4413      	add	r3, r2
 80099ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80099ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099d4:	b29a      	uxth	r2, r3
 80099d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80099da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	895b      	ldrh	r3, [r3, #10]
 80099e6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80099ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	6959      	ldr	r1, [r3, #20]
 80099f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009a00:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009a04:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009a08:	6800      	ldr	r0, [r0, #0]
 8009a0a:	f001 fb45 	bl	800b098 <USB_WritePMA>
            ep->xfer_buff += len;
 8009a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	695a      	ldr	r2, [r3, #20]
 8009a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a1e:	441a      	add	r2, r3
 8009a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009a2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	6a1a      	ldr	r2, [r3, #32]
 8009a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	691b      	ldr	r3, [r3, #16]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d90f      	bls.n	8009a68 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8009a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	6a1a      	ldr	r2, [r3, #32]
 8009a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a58:	1ad2      	subs	r2, r2, r3
 8009a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	621a      	str	r2, [r3, #32]
 8009a66:	e00e      	b.n	8009a86 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	6a1b      	ldr	r3, [r3, #32]
 8009a74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009a78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2200      	movs	r2, #0
 8009a84:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	785b      	ldrb	r3, [r3, #1]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d177      	bne.n	8009b86 <USB_EPStartXfer+0x4c4>
 8009a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	61bb      	str	r3, [r7, #24]
 8009aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	61bb      	str	r3, [r7, #24]
 8009aba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009abe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	00da      	lsls	r2, r3, #3
 8009ac8:	69bb      	ldr	r3, [r7, #24]
 8009aca:	4413      	add	r3, r2
 8009acc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009ad0:	617b      	str	r3, [r7, #20]
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	881b      	ldrh	r3, [r3, #0]
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009adc:	b29a      	uxth	r2, r3
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	801a      	strh	r2, [r3, #0]
 8009ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ae6:	2b3e      	cmp	r3, #62	; 0x3e
 8009ae8:	d921      	bls.n	8009b2e <USB_EPStartXfer+0x46c>
 8009aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009aee:	095b      	lsrs	r3, r3, #5
 8009af0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009af8:	f003 031f 	and.w	r3, r3, #31
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d104      	bne.n	8009b0a <USB_EPStartXfer+0x448>
 8009b00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b04:	3b01      	subs	r3, #1
 8009b06:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	881b      	ldrh	r3, [r3, #0]
 8009b0e:	b29a      	uxth	r2, r3
 8009b10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	029b      	lsls	r3, r3, #10
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b26:	b29a      	uxth	r2, r3
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	801a      	strh	r2, [r3, #0]
 8009b2c:	e056      	b.n	8009bdc <USB_EPStartXfer+0x51a>
 8009b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d10a      	bne.n	8009b4c <USB_EPStartXfer+0x48a>
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	881b      	ldrh	r3, [r3, #0]
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b44:	b29a      	uxth	r2, r3
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	801a      	strh	r2, [r3, #0]
 8009b4a:	e047      	b.n	8009bdc <USB_EPStartXfer+0x51a>
 8009b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b50:	085b      	lsrs	r3, r3, #1
 8009b52:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b5a:	f003 0301 	and.w	r3, r3, #1
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d004      	beq.n	8009b6c <USB_EPStartXfer+0x4aa>
 8009b62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b66:	3301      	adds	r3, #1
 8009b68:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	881b      	ldrh	r3, [r3, #0]
 8009b70:	b29a      	uxth	r2, r3
 8009b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	029b      	lsls	r3, r3, #10
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	b29a      	uxth	r2, r3
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	801a      	strh	r2, [r3, #0]
 8009b84:	e02a      	b.n	8009bdc <USB_EPStartXfer+0x51a>
 8009b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	785b      	ldrb	r3, [r3, #1]
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d122      	bne.n	8009bdc <USB_EPStartXfer+0x51a>
 8009b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	623b      	str	r3, [r7, #32]
 8009ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ba6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	6a3b      	ldr	r3, [r7, #32]
 8009bb6:	4413      	add	r3, r2
 8009bb8:	623b      	str	r3, [r7, #32]
 8009bba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	00da      	lsls	r2, r3, #3
 8009bc8:	6a3b      	ldr	r3, [r7, #32]
 8009bca:	4413      	add	r3, r2
 8009bcc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009bd0:	61fb      	str	r3, [r7, #28]
 8009bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bd6:	b29a      	uxth	r2, r3
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009bdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009be0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	891b      	ldrh	r3, [r3, #8]
 8009be8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009bec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	6959      	ldr	r1, [r3, #20]
 8009bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009c02:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009c06:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009c0a:	6800      	ldr	r0, [r0, #0]
 8009c0c:	f001 fa44 	bl	800b098 <USB_WritePMA>
 8009c10:	e3ee      	b.n	800a3f0 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009c12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	785b      	ldrb	r3, [r3, #1]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d177      	bne.n	8009d12 <USB_EPStartXfer+0x650>
 8009c22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	461a      	mov	r2, r3
 8009c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c42:	4413      	add	r3, r2
 8009c44:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	00da      	lsls	r2, r3, #3
 8009c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c56:	4413      	add	r3, r2
 8009c58:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009c5c:	647b      	str	r3, [r7, #68]	; 0x44
 8009c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c60:	881b      	ldrh	r3, [r3, #0]
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c68:	b29a      	uxth	r2, r3
 8009c6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c6c:	801a      	strh	r2, [r3, #0]
 8009c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c72:	2b3e      	cmp	r3, #62	; 0x3e
 8009c74:	d921      	bls.n	8009cba <USB_EPStartXfer+0x5f8>
 8009c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c7a:	095b      	lsrs	r3, r3, #5
 8009c7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c84:	f003 031f 	and.w	r3, r3, #31
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d104      	bne.n	8009c96 <USB_EPStartXfer+0x5d4>
 8009c8c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009c90:	3b01      	subs	r3, #1
 8009c92:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009c96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c98:	881b      	ldrh	r3, [r3, #0]
 8009c9a:	b29a      	uxth	r2, r3
 8009c9c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	029b      	lsls	r3, r3, #10
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cb2:	b29a      	uxth	r2, r3
 8009cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cb6:	801a      	strh	r2, [r3, #0]
 8009cb8:	e056      	b.n	8009d68 <USB_EPStartXfer+0x6a6>
 8009cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d10a      	bne.n	8009cd8 <USB_EPStartXfer+0x616>
 8009cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cc4:	881b      	ldrh	r3, [r3, #0]
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ccc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cd0:	b29a      	uxth	r2, r3
 8009cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cd4:	801a      	strh	r2, [r3, #0]
 8009cd6:	e047      	b.n	8009d68 <USB_EPStartXfer+0x6a6>
 8009cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cdc:	085b      	lsrs	r3, r3, #1
 8009cde:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ce6:	f003 0301 	and.w	r3, r3, #1
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d004      	beq.n	8009cf8 <USB_EPStartXfer+0x636>
 8009cee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cfa:	881b      	ldrh	r3, [r3, #0]
 8009cfc:	b29a      	uxth	r2, r3
 8009cfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	029b      	lsls	r3, r3, #10
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	b29a      	uxth	r2, r3
 8009d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d0e:	801a      	strh	r2, [r3, #0]
 8009d10:	e02a      	b.n	8009d68 <USB_EPStartXfer+0x6a6>
 8009d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	785b      	ldrb	r3, [r3, #1]
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d122      	bne.n	8009d68 <USB_EPStartXfer+0x6a6>
 8009d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	653b      	str	r3, [r7, #80]	; 0x50
 8009d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	461a      	mov	r2, r3
 8009d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d42:	4413      	add	r3, r2
 8009d44:	653b      	str	r3, [r7, #80]	; 0x50
 8009d46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	00da      	lsls	r2, r3, #3
 8009d54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d56:	4413      	add	r3, r2
 8009d58:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d62:	b29a      	uxth	r2, r3
 8009d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d66:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	891b      	ldrh	r3, [r3, #8]
 8009d74:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	6959      	ldr	r1, [r3, #20]
 8009d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009d8e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009d92:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009d96:	6800      	ldr	r0, [r0, #0]
 8009d98:	f001 f97e 	bl	800b098 <USB_WritePMA>
            ep->xfer_buff += len;
 8009d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009da0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	695a      	ldr	r2, [r3, #20]
 8009da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dac:	441a      	add	r2, r3
 8009dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	6a1a      	ldr	r2, [r3, #32]
 8009dc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	691b      	ldr	r3, [r3, #16]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d90f      	bls.n	8009df6 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8009dd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	6a1a      	ldr	r2, [r3, #32]
 8009de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009de6:	1ad2      	subs	r2, r2, r3
 8009de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	621a      	str	r2, [r3, #32]
 8009df4:	e00e      	b.n	8009e14 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8009df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	6a1b      	ldr	r3, [r3, #32]
 8009e02:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2200      	movs	r2, #0
 8009e12:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	643b      	str	r3, [r7, #64]	; 0x40
 8009e20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	785b      	ldrb	r3, [r3, #1]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d177      	bne.n	8009f20 <USB_EPStartXfer+0x85e>
 8009e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e50:	4413      	add	r3, r2
 8009e52:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	00da      	lsls	r2, r3, #3
 8009e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e64:	4413      	add	r3, r2
 8009e66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009e6a:	637b      	str	r3, [r7, #52]	; 0x34
 8009e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e6e:	881b      	ldrh	r3, [r3, #0]
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e76:	b29a      	uxth	r2, r3
 8009e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e7a:	801a      	strh	r2, [r3, #0]
 8009e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e80:	2b3e      	cmp	r3, #62	; 0x3e
 8009e82:	d921      	bls.n	8009ec8 <USB_EPStartXfer+0x806>
 8009e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e88:	095b      	lsrs	r3, r3, #5
 8009e8a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e92:	f003 031f 	and.w	r3, r3, #31
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d104      	bne.n	8009ea4 <USB_EPStartXfer+0x7e2>
 8009e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e9e:	3b01      	subs	r3, #1
 8009ea0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ea6:	881b      	ldrh	r3, [r3, #0]
 8009ea8:	b29a      	uxth	r2, r3
 8009eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	029b      	lsls	r3, r3, #10
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ebc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ec0:	b29a      	uxth	r2, r3
 8009ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ec4:	801a      	strh	r2, [r3, #0]
 8009ec6:	e050      	b.n	8009f6a <USB_EPStartXfer+0x8a8>
 8009ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d10a      	bne.n	8009ee6 <USB_EPStartXfer+0x824>
 8009ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ed2:	881b      	ldrh	r3, [r3, #0]
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009eda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ede:	b29a      	uxth	r2, r3
 8009ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ee2:	801a      	strh	r2, [r3, #0]
 8009ee4:	e041      	b.n	8009f6a <USB_EPStartXfer+0x8a8>
 8009ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009eea:	085b      	lsrs	r3, r3, #1
 8009eec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ef4:	f003 0301 	and.w	r3, r3, #1
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d004      	beq.n	8009f06 <USB_EPStartXfer+0x844>
 8009efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f00:	3301      	adds	r3, #1
 8009f02:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f08:	881b      	ldrh	r3, [r3, #0]
 8009f0a:	b29a      	uxth	r2, r3
 8009f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	029b      	lsls	r3, r3, #10
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	4313      	orrs	r3, r2
 8009f18:	b29a      	uxth	r2, r3
 8009f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f1c:	801a      	strh	r2, [r3, #0]
 8009f1e:	e024      	b.n	8009f6a <USB_EPStartXfer+0x8a8>
 8009f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	785b      	ldrb	r3, [r3, #1]
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d11c      	bne.n	8009f6a <USB_EPStartXfer+0x8a8>
 8009f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f3e:	b29b      	uxth	r3, r3
 8009f40:	461a      	mov	r2, r3
 8009f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f44:	4413      	add	r3, r2
 8009f46:	643b      	str	r3, [r7, #64]	; 0x40
 8009f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	00da      	lsls	r2, r3, #3
 8009f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f58:	4413      	add	r3, r2
 8009f5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f64:	b29a      	uxth	r2, r3
 8009f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f68:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	895b      	ldrh	r3, [r3, #10]
 8009f76:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	6959      	ldr	r1, [r3, #20]
 8009f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009f90:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009f94:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009f98:	6800      	ldr	r0, [r0, #0]
 8009f9a:	f001 f87d 	bl	800b098 <USB_WritePMA>
 8009f9e:	e227      	b.n	800a3f0 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	6a1b      	ldr	r3, [r3, #32]
 8009fac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	4413      	add	r3, r2
 8009fca:	881b      	ldrh	r3, [r3, #0]
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fd6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	441a      	add	r2, r3
 8009ff4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009ff8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ffc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a000:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a008:	b29b      	uxth	r3, r3
 800a00a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a00c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a010:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a01c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a026:	b29b      	uxth	r3, r3
 800a028:	461a      	mov	r2, r3
 800a02a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a02c:	4413      	add	r3, r2
 800a02e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	00da      	lsls	r2, r3, #3
 800a03e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a040:	4413      	add	r3, r2
 800a042:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a046:	65bb      	str	r3, [r7, #88]	; 0x58
 800a048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a04c:	b29a      	uxth	r2, r3
 800a04e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a050:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a056:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	891b      	ldrh	r3, [r3, #8]
 800a05e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	6959      	ldr	r1, [r3, #20]
 800a06e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a072:	b29b      	uxth	r3, r3
 800a074:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a078:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a07c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a080:	6800      	ldr	r0, [r0, #0]
 800a082:	f001 f809 	bl	800b098 <USB_WritePMA>
 800a086:	e1b3      	b.n	800a3f0 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a08c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	6a1a      	ldr	r2, [r3, #32]
 800a094:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a098:	1ad2      	subs	r2, r2, r3
 800a09a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a09e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a0a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	4413      	add	r3, r2
 800a0c0:	881b      	ldrh	r3, [r3, #0]
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	f000 80c6 	beq.w	800a25a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a0ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	673b      	str	r3, [r7, #112]	; 0x70
 800a0da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	785b      	ldrb	r3, [r3, #1]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d177      	bne.n	800a1da <USB_EPStartXfer+0xb18>
 800a0ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	66bb      	str	r3, [r7, #104]	; 0x68
 800a0f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a104:	b29b      	uxth	r3, r3
 800a106:	461a      	mov	r2, r3
 800a108:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a10a:	4413      	add	r3, r2
 800a10c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a10e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a112:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	00da      	lsls	r2, r3, #3
 800a11c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a11e:	4413      	add	r3, r2
 800a120:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a124:	667b      	str	r3, [r7, #100]	; 0x64
 800a126:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a128:	881b      	ldrh	r3, [r3, #0]
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a130:	b29a      	uxth	r2, r3
 800a132:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a134:	801a      	strh	r2, [r3, #0]
 800a136:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a13a:	2b3e      	cmp	r3, #62	; 0x3e
 800a13c:	d921      	bls.n	800a182 <USB_EPStartXfer+0xac0>
 800a13e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a142:	095b      	lsrs	r3, r3, #5
 800a144:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a14c:	f003 031f 	and.w	r3, r3, #31
 800a150:	2b00      	cmp	r3, #0
 800a152:	d104      	bne.n	800a15e <USB_EPStartXfer+0xa9c>
 800a154:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a158:	3b01      	subs	r3, #1
 800a15a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a15e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a160:	881b      	ldrh	r3, [r3, #0]
 800a162:	b29a      	uxth	r2, r3
 800a164:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a168:	b29b      	uxth	r3, r3
 800a16a:	029b      	lsls	r3, r3, #10
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	4313      	orrs	r3, r2
 800a170:	b29b      	uxth	r3, r3
 800a172:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a176:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a17a:	b29a      	uxth	r2, r3
 800a17c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a17e:	801a      	strh	r2, [r3, #0]
 800a180:	e050      	b.n	800a224 <USB_EPStartXfer+0xb62>
 800a182:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a186:	2b00      	cmp	r3, #0
 800a188:	d10a      	bne.n	800a1a0 <USB_EPStartXfer+0xade>
 800a18a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a18c:	881b      	ldrh	r3, [r3, #0]
 800a18e:	b29b      	uxth	r3, r3
 800a190:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a194:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a198:	b29a      	uxth	r2, r3
 800a19a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a19c:	801a      	strh	r2, [r3, #0]
 800a19e:	e041      	b.n	800a224 <USB_EPStartXfer+0xb62>
 800a1a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1a4:	085b      	lsrs	r3, r3, #1
 800a1a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a1aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1ae:	f003 0301 	and.w	r3, r3, #1
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d004      	beq.n	800a1c0 <USB_EPStartXfer+0xafe>
 800a1b6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a1c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1c2:	881b      	ldrh	r3, [r3, #0]
 800a1c4:	b29a      	uxth	r2, r3
 800a1c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	029b      	lsls	r3, r3, #10
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	b29a      	uxth	r2, r3
 800a1d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1d6:	801a      	strh	r2, [r3, #0]
 800a1d8:	e024      	b.n	800a224 <USB_EPStartXfer+0xb62>
 800a1da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	785b      	ldrb	r3, [r3, #1]
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	d11c      	bne.n	800a224 <USB_EPStartXfer+0xb62>
 800a1ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a1fe:	4413      	add	r3, r2
 800a200:	673b      	str	r3, [r7, #112]	; 0x70
 800a202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a206:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	00da      	lsls	r2, r3, #3
 800a210:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a212:	4413      	add	r3, r2
 800a214:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a218:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a21a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a21e:	b29a      	uxth	r2, r3
 800a220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a222:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	895b      	ldrh	r3, [r3, #10]
 800a230:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	6959      	ldr	r1, [r3, #20]
 800a240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a244:	b29b      	uxth	r3, r3
 800a246:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a24a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a24e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a252:	6800      	ldr	r0, [r0, #0]
 800a254:	f000 ff20 	bl	800b098 <USB_WritePMA>
 800a258:	e0ca      	b.n	800a3f0 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a25a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a25e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	785b      	ldrb	r3, [r3, #1]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d177      	bne.n	800a35a <USB_EPStartXfer+0xc98>
 800a26a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a26e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a27a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a284:	b29b      	uxth	r3, r3
 800a286:	461a      	mov	r2, r3
 800a288:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a28a:	4413      	add	r3, r2
 800a28c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a28e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	00da      	lsls	r2, r3, #3
 800a29c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a29e:	4413      	add	r3, r2
 800a2a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a2a4:	67bb      	str	r3, [r7, #120]	; 0x78
 800a2a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2a8:	881b      	ldrh	r3, [r3, #0]
 800a2aa:	b29b      	uxth	r3, r3
 800a2ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2b0:	b29a      	uxth	r2, r3
 800a2b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2b4:	801a      	strh	r2, [r3, #0]
 800a2b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2ba:	2b3e      	cmp	r3, #62	; 0x3e
 800a2bc:	d921      	bls.n	800a302 <USB_EPStartXfer+0xc40>
 800a2be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2c2:	095b      	lsrs	r3, r3, #5
 800a2c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a2c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2cc:	f003 031f 	and.w	r3, r3, #31
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d104      	bne.n	800a2de <USB_EPStartXfer+0xc1c>
 800a2d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a2d8:	3b01      	subs	r3, #1
 800a2da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a2de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2e0:	881b      	ldrh	r3, [r3, #0]
 800a2e2:	b29a      	uxth	r2, r3
 800a2e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	029b      	lsls	r3, r3, #10
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2fa:	b29a      	uxth	r2, r3
 800a2fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2fe:	801a      	strh	r2, [r3, #0]
 800a300:	e05c      	b.n	800a3bc <USB_EPStartXfer+0xcfa>
 800a302:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a306:	2b00      	cmp	r3, #0
 800a308:	d10a      	bne.n	800a320 <USB_EPStartXfer+0xc5e>
 800a30a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a30c:	881b      	ldrh	r3, [r3, #0]
 800a30e:	b29b      	uxth	r3, r3
 800a310:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a314:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a318:	b29a      	uxth	r2, r3
 800a31a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a31c:	801a      	strh	r2, [r3, #0]
 800a31e:	e04d      	b.n	800a3bc <USB_EPStartXfer+0xcfa>
 800a320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a324:	085b      	lsrs	r3, r3, #1
 800a326:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a32a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a32e:	f003 0301 	and.w	r3, r3, #1
 800a332:	2b00      	cmp	r3, #0
 800a334:	d004      	beq.n	800a340 <USB_EPStartXfer+0xc7e>
 800a336:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a33a:	3301      	adds	r3, #1
 800a33c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a340:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a342:	881b      	ldrh	r3, [r3, #0]
 800a344:	b29a      	uxth	r2, r3
 800a346:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	029b      	lsls	r3, r3, #10
 800a34e:	b29b      	uxth	r3, r3
 800a350:	4313      	orrs	r3, r2
 800a352:	b29a      	uxth	r2, r3
 800a354:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a356:	801a      	strh	r2, [r3, #0]
 800a358:	e030      	b.n	800a3bc <USB_EPStartXfer+0xcfa>
 800a35a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a35e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	785b      	ldrb	r3, [r3, #1]
 800a366:	2b01      	cmp	r3, #1
 800a368:	d128      	bne.n	800a3bc <USB_EPStartXfer+0xcfa>
 800a36a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a36e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a37c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a386:	b29b      	uxth	r3, r3
 800a388:	461a      	mov	r2, r3
 800a38a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a38e:	4413      	add	r3, r2
 800a390:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	00da      	lsls	r2, r3, #3
 800a3a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a3a6:	4413      	add	r3, r2
 800a3a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a3ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a3b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3b4:	b29a      	uxth	r2, r3
 800a3b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a3ba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a3bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	891b      	ldrh	r3, [r3, #8]
 800a3c8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a3cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	6959      	ldr	r1, [r3, #20]
 800a3d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a3e2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a3e6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a3ea:	6800      	ldr	r0, [r0, #0]
 800a3ec:	f000 fe54 	bl	800b098 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a3f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	009b      	lsls	r3, r3, #2
 800a408:	4413      	add	r3, r2
 800a40a:	881b      	ldrh	r3, [r3, #0]
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a416:	817b      	strh	r3, [r7, #10]
 800a418:	897b      	ldrh	r3, [r7, #10]
 800a41a:	f083 0310 	eor.w	r3, r3, #16
 800a41e:	817b      	strh	r3, [r7, #10]
 800a420:	897b      	ldrh	r3, [r7, #10]
 800a422:	f083 0320 	eor.w	r3, r3, #32
 800a426:	817b      	strh	r3, [r7, #10]
 800a428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a42c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	441a      	add	r2, r3
 800a442:	897b      	ldrh	r3, [r7, #10]
 800a444:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a448:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a44c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a454:	b29b      	uxth	r3, r3
 800a456:	8013      	strh	r3, [r2, #0]
 800a458:	f000 bcde 	b.w	800ae18 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a45c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	7b1b      	ldrb	r3, [r3, #12]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	f040 80bb 	bne.w	800a5e4 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a46e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	699a      	ldr	r2, [r3, #24]
 800a47a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a47e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	691b      	ldr	r3, [r3, #16]
 800a486:	429a      	cmp	r2, r3
 800a488:	d917      	bls.n	800a4ba <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800a48a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a48e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	691b      	ldr	r3, [r3, #16]
 800a496:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800a49a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a49e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	699a      	ldr	r2, [r3, #24]
 800a4a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4aa:	1ad2      	subs	r2, r2, r3
 800a4ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	619a      	str	r2, [r3, #24]
 800a4b8:	e00e      	b.n	800a4d8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800a4ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	699b      	ldr	r3, [r3, #24]
 800a4c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800a4ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a4d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a4e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a4fc:	4413      	add	r3, r2
 800a4fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a506:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	00da      	lsls	r2, r3, #3
 800a510:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a514:	4413      	add	r3, r2
 800a516:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a51a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a51e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a522:	881b      	ldrh	r3, [r3, #0]
 800a524:	b29b      	uxth	r3, r3
 800a526:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a52a:	b29a      	uxth	r2, r3
 800a52c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a530:	801a      	strh	r2, [r3, #0]
 800a532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a536:	2b3e      	cmp	r3, #62	; 0x3e
 800a538:	d924      	bls.n	800a584 <USB_EPStartXfer+0xec2>
 800a53a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a53e:	095b      	lsrs	r3, r3, #5
 800a540:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a548:	f003 031f 	and.w	r3, r3, #31
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d104      	bne.n	800a55a <USB_EPStartXfer+0xe98>
 800a550:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a554:	3b01      	subs	r3, #1
 800a556:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a55a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a55e:	881b      	ldrh	r3, [r3, #0]
 800a560:	b29a      	uxth	r2, r3
 800a562:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a566:	b29b      	uxth	r3, r3
 800a568:	029b      	lsls	r3, r3, #10
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	4313      	orrs	r3, r2
 800a56e:	b29b      	uxth	r3, r3
 800a570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a578:	b29a      	uxth	r2, r3
 800a57a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a57e:	801a      	strh	r2, [r3, #0]
 800a580:	f000 bc10 	b.w	800ada4 <USB_EPStartXfer+0x16e2>
 800a584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d10c      	bne.n	800a5a6 <USB_EPStartXfer+0xee4>
 800a58c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a590:	881b      	ldrh	r3, [r3, #0]
 800a592:	b29b      	uxth	r3, r3
 800a594:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a598:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a59c:	b29a      	uxth	r2, r3
 800a59e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5a2:	801a      	strh	r2, [r3, #0]
 800a5a4:	e3fe      	b.n	800ada4 <USB_EPStartXfer+0x16e2>
 800a5a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5aa:	085b      	lsrs	r3, r3, #1
 800a5ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a5b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5b4:	f003 0301 	and.w	r3, r3, #1
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d004      	beq.n	800a5c6 <USB_EPStartXfer+0xf04>
 800a5bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a5c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5ca:	881b      	ldrh	r3, [r3, #0]
 800a5cc:	b29a      	uxth	r2, r3
 800a5ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	029b      	lsls	r3, r3, #10
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	b29a      	uxth	r2, r3
 800a5dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5e0:	801a      	strh	r2, [r3, #0]
 800a5e2:	e3df      	b.n	800ada4 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a5e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	78db      	ldrb	r3, [r3, #3]
 800a5f0:	2b02      	cmp	r3, #2
 800a5f2:	f040 8218 	bne.w	800aa26 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a5f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	785b      	ldrb	r3, [r3, #1]
 800a602:	2b00      	cmp	r3, #0
 800a604:	f040 809d 	bne.w	800a742 <USB_EPStartXfer+0x1080>
 800a608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a60c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a61a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a624:	b29b      	uxth	r3, r3
 800a626:	461a      	mov	r2, r3
 800a628:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a62c:	4413      	add	r3, r2
 800a62e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a636:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	00da      	lsls	r2, r3, #3
 800a640:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a644:	4413      	add	r3, r2
 800a646:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a64a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a64e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a652:	881b      	ldrh	r3, [r3, #0]
 800a654:	b29b      	uxth	r3, r3
 800a656:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a65a:	b29a      	uxth	r2, r3
 800a65c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a660:	801a      	strh	r2, [r3, #0]
 800a662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a666:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	691b      	ldr	r3, [r3, #16]
 800a66e:	2b3e      	cmp	r3, #62	; 0x3e
 800a670:	d92b      	bls.n	800a6ca <USB_EPStartXfer+0x1008>
 800a672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a676:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	691b      	ldr	r3, [r3, #16]
 800a67e:	095b      	lsrs	r3, r3, #5
 800a680:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	691b      	ldr	r3, [r3, #16]
 800a690:	f003 031f 	and.w	r3, r3, #31
 800a694:	2b00      	cmp	r3, #0
 800a696:	d104      	bne.n	800a6a2 <USB_EPStartXfer+0xfe0>
 800a698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a69c:	3b01      	subs	r3, #1
 800a69e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a6a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a6a6:	881b      	ldrh	r3, [r3, #0]
 800a6a8:	b29a      	uxth	r2, r3
 800a6aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	029b      	lsls	r3, r3, #10
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6c0:	b29a      	uxth	r2, r3
 800a6c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a6c6:	801a      	strh	r2, [r3, #0]
 800a6c8:	e070      	b.n	800a7ac <USB_EPStartXfer+0x10ea>
 800a6ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	691b      	ldr	r3, [r3, #16]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d10c      	bne.n	800a6f4 <USB_EPStartXfer+0x1032>
 800a6da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a6de:	881b      	ldrh	r3, [r3, #0]
 800a6e0:	b29b      	uxth	r3, r3
 800a6e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6ea:	b29a      	uxth	r2, r3
 800a6ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a6f0:	801a      	strh	r2, [r3, #0]
 800a6f2:	e05b      	b.n	800a7ac <USB_EPStartXfer+0x10ea>
 800a6f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	691b      	ldr	r3, [r3, #16]
 800a700:	085b      	lsrs	r3, r3, #1
 800a702:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a70a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	691b      	ldr	r3, [r3, #16]
 800a712:	f003 0301 	and.w	r3, r3, #1
 800a716:	2b00      	cmp	r3, #0
 800a718:	d004      	beq.n	800a724 <USB_EPStartXfer+0x1062>
 800a71a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a71e:	3301      	adds	r3, #1
 800a720:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a724:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a728:	881b      	ldrh	r3, [r3, #0]
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a730:	b29b      	uxth	r3, r3
 800a732:	029b      	lsls	r3, r3, #10
 800a734:	b29b      	uxth	r3, r3
 800a736:	4313      	orrs	r3, r2
 800a738:	b29a      	uxth	r2, r3
 800a73a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a73e:	801a      	strh	r2, [r3, #0]
 800a740:	e034      	b.n	800a7ac <USB_EPStartXfer+0x10ea>
 800a742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	785b      	ldrb	r3, [r3, #1]
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d12c      	bne.n	800a7ac <USB_EPStartXfer+0x10ea>
 800a752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a756:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a764:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a76e:	b29b      	uxth	r3, r3
 800a770:	461a      	mov	r2, r3
 800a772:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a776:	4413      	add	r3, r2
 800a778:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a77c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	00da      	lsls	r2, r3, #3
 800a78a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a78e:	4413      	add	r3, r2
 800a790:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a794:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a79c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	691b      	ldr	r3, [r3, #16]
 800a7a4:	b29a      	uxth	r2, r3
 800a7a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a7aa:	801a      	strh	r2, [r3, #0]
 800a7ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a7ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	785b      	ldrb	r3, [r3, #1]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	f040 809d 	bne.w	800a906 <USB_EPStartXfer+0x1244>
 800a7cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a7da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7e8:	b29b      	uxth	r3, r3
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a7f0:	4413      	add	r3, r2
 800a7f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a7f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	00da      	lsls	r2, r3, #3
 800a804:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a808:	4413      	add	r3, r2
 800a80a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a80e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a812:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a816:	881b      	ldrh	r3, [r3, #0]
 800a818:	b29b      	uxth	r3, r3
 800a81a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a81e:	b29a      	uxth	r2, r3
 800a820:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a824:	801a      	strh	r2, [r3, #0]
 800a826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a82a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	2b3e      	cmp	r3, #62	; 0x3e
 800a834:	d92b      	bls.n	800a88e <USB_EPStartXfer+0x11cc>
 800a836:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a83a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	691b      	ldr	r3, [r3, #16]
 800a842:	095b      	lsrs	r3, r3, #5
 800a844:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a84c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	691b      	ldr	r3, [r3, #16]
 800a854:	f003 031f 	and.w	r3, r3, #31
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d104      	bne.n	800a866 <USB_EPStartXfer+0x11a4>
 800a85c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a860:	3b01      	subs	r3, #1
 800a862:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a866:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a86a:	881b      	ldrh	r3, [r3, #0]
 800a86c:	b29a      	uxth	r2, r3
 800a86e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a872:	b29b      	uxth	r3, r3
 800a874:	029b      	lsls	r3, r3, #10
 800a876:	b29b      	uxth	r3, r3
 800a878:	4313      	orrs	r3, r2
 800a87a:	b29b      	uxth	r3, r3
 800a87c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a880:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a884:	b29a      	uxth	r2, r3
 800a886:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a88a:	801a      	strh	r2, [r3, #0]
 800a88c:	e069      	b.n	800a962 <USB_EPStartXfer+0x12a0>
 800a88e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	691b      	ldr	r3, [r3, #16]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d10c      	bne.n	800a8b8 <USB_EPStartXfer+0x11f6>
 800a89e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a8a2:	881b      	ldrh	r3, [r3, #0]
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8ae:	b29a      	uxth	r2, r3
 800a8b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a8b4:	801a      	strh	r2, [r3, #0]
 800a8b6:	e054      	b.n	800a962 <USB_EPStartXfer+0x12a0>
 800a8b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	691b      	ldr	r3, [r3, #16]
 800a8c4:	085b      	lsrs	r3, r3, #1
 800a8c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a8ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	691b      	ldr	r3, [r3, #16]
 800a8d6:	f003 0301 	and.w	r3, r3, #1
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d004      	beq.n	800a8e8 <USB_EPStartXfer+0x1226>
 800a8de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a8e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a8ec:	881b      	ldrh	r3, [r3, #0]
 800a8ee:	b29a      	uxth	r2, r3
 800a8f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	029b      	lsls	r3, r3, #10
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	b29a      	uxth	r2, r3
 800a8fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a902:	801a      	strh	r2, [r3, #0]
 800a904:	e02d      	b.n	800a962 <USB_EPStartXfer+0x12a0>
 800a906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a90a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	785b      	ldrb	r3, [r3, #1]
 800a912:	2b01      	cmp	r3, #1
 800a914:	d125      	bne.n	800a962 <USB_EPStartXfer+0x12a0>
 800a916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a91a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a924:	b29b      	uxth	r3, r3
 800a926:	461a      	mov	r2, r3
 800a928:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a92c:	4413      	add	r3, r2
 800a92e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a936:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	00da      	lsls	r2, r3, #3
 800a940:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a944:	4413      	add	r3, r2
 800a946:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a94a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a94e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a952:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	691b      	ldr	r3, [r3, #16]
 800a95a:	b29a      	uxth	r2, r3
 800a95c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a960:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	69db      	ldr	r3, [r3, #28]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	f000 8218 	beq.w	800ada4 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a978:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a97c:	681a      	ldr	r2, [r3, #0]
 800a97e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a982:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	009b      	lsls	r3, r3, #2
 800a98c:	4413      	add	r3, r2
 800a98e:	881b      	ldrh	r3, [r3, #0]
 800a990:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a994:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d005      	beq.n	800a9ac <USB_EPStartXfer+0x12ea>
 800a9a0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a9a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d10d      	bne.n	800a9c8 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a9ac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a9b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	f040 81f5 	bne.w	800ada4 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a9ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a9be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	f040 81ee 	bne.w	800ada4 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a9c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	4413      	add	r3, r2
 800a9e2:	881b      	ldrh	r3, [r3, #0]
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9ee:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800a9f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	009b      	lsls	r3, r3, #2
 800aa0a:	441a      	add	r2, r3
 800aa0c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800aa10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aa20:	b29b      	uxth	r3, r3
 800aa22:	8013      	strh	r3, [r2, #0]
 800aa24:	e1be      	b.n	800ada4 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800aa26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	78db      	ldrb	r3, [r3, #3]
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	f040 81b4 	bne.w	800ada0 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800aa38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	699a      	ldr	r2, [r3, #24]
 800aa44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	691b      	ldr	r3, [r3, #16]
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d917      	bls.n	800aa84 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800aa54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	691b      	ldr	r3, [r3, #16]
 800aa60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800aa64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	699a      	ldr	r2, [r3, #24]
 800aa70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa74:	1ad2      	subs	r2, r2, r3
 800aa76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	619a      	str	r2, [r3, #24]
 800aa82:	e00e      	b.n	800aaa2 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800aa84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	699b      	ldr	r3, [r3, #24]
 800aa90:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800aa94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800aaa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	785b      	ldrb	r3, [r3, #1]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	f040 8085 	bne.w	800abbe <USB_EPStartXfer+0x14fc>
 800aab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aab8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aac6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	461a      	mov	r2, r3
 800aad4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800aad8:	4413      	add	r3, r2
 800aada:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aae2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	00da      	lsls	r2, r3, #3
 800aaec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800aaf0:	4413      	add	r3, r2
 800aaf2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aaf6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aafa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aafe:	881b      	ldrh	r3, [r3, #0]
 800ab00:	b29b      	uxth	r3, r3
 800ab02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab06:	b29a      	uxth	r2, r3
 800ab08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab0c:	801a      	strh	r2, [r3, #0]
 800ab0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab12:	2b3e      	cmp	r3, #62	; 0x3e
 800ab14:	d923      	bls.n	800ab5e <USB_EPStartXfer+0x149c>
 800ab16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab1a:	095b      	lsrs	r3, r3, #5
 800ab1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ab20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab24:	f003 031f 	and.w	r3, r3, #31
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d104      	bne.n	800ab36 <USB_EPStartXfer+0x1474>
 800ab2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab30:	3b01      	subs	r3, #1
 800ab32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ab36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab3a:	881b      	ldrh	r3, [r3, #0]
 800ab3c:	b29a      	uxth	r2, r3
 800ab3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	029b      	lsls	r3, r3, #10
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab54:	b29a      	uxth	r2, r3
 800ab56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab5a:	801a      	strh	r2, [r3, #0]
 800ab5c:	e060      	b.n	800ac20 <USB_EPStartXfer+0x155e>
 800ab5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d10c      	bne.n	800ab80 <USB_EPStartXfer+0x14be>
 800ab66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab6a:	881b      	ldrh	r3, [r3, #0]
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab76:	b29a      	uxth	r2, r3
 800ab78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab7c:	801a      	strh	r2, [r3, #0]
 800ab7e:	e04f      	b.n	800ac20 <USB_EPStartXfer+0x155e>
 800ab80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab84:	085b      	lsrs	r3, r3, #1
 800ab86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ab8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab8e:	f003 0301 	and.w	r3, r3, #1
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d004      	beq.n	800aba0 <USB_EPStartXfer+0x14de>
 800ab96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800aba0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aba4:	881b      	ldrh	r3, [r3, #0]
 800aba6:	b29a      	uxth	r2, r3
 800aba8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800abac:	b29b      	uxth	r3, r3
 800abae:	029b      	lsls	r3, r3, #10
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	4313      	orrs	r3, r2
 800abb4:	b29a      	uxth	r2, r3
 800abb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800abba:	801a      	strh	r2, [r3, #0]
 800abbc:	e030      	b.n	800ac20 <USB_EPStartXfer+0x155e>
 800abbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	785b      	ldrb	r3, [r3, #1]
 800abca:	2b01      	cmp	r3, #1
 800abcc:	d128      	bne.n	800ac20 <USB_EPStartXfer+0x155e>
 800abce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800abdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abe0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abea:	b29b      	uxth	r3, r3
 800abec:	461a      	mov	r2, r3
 800abee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800abf2:	4413      	add	r3, r2
 800abf4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800abf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	00da      	lsls	r2, r3, #3
 800ac06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ac0a:	4413      	add	r3, r2
 800ac0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ac10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ac14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac18:	b29a      	uxth	r2, r3
 800ac1a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ac1e:	801a      	strh	r2, [r3, #0]
 800ac20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ac2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	785b      	ldrb	r3, [r3, #1]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	f040 8085 	bne.w	800ad4a <USB_EPStartXfer+0x1688>
 800ac40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ac4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	461a      	mov	r2, r3
 800ac60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ac64:	4413      	add	r3, r2
 800ac66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ac6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	00da      	lsls	r2, r3, #3
 800ac78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ac7c:	4413      	add	r3, r2
 800ac7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ac82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ac86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ac8a:	881b      	ldrh	r3, [r3, #0]
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac92:	b29a      	uxth	r2, r3
 800ac94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ac98:	801a      	strh	r2, [r3, #0]
 800ac9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac9e:	2b3e      	cmp	r3, #62	; 0x3e
 800aca0:	d923      	bls.n	800acea <USB_EPStartXfer+0x1628>
 800aca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aca6:	095b      	lsrs	r3, r3, #5
 800aca8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800acac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acb0:	f003 031f 	and.w	r3, r3, #31
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d104      	bne.n	800acc2 <USB_EPStartXfer+0x1600>
 800acb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800acbc:	3b01      	subs	r3, #1
 800acbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800acc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800acc6:	881b      	ldrh	r3, [r3, #0]
 800acc8:	b29a      	uxth	r2, r3
 800acca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800acce:	b29b      	uxth	r3, r3
 800acd0:	029b      	lsls	r3, r3, #10
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	4313      	orrs	r3, r2
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ace0:	b29a      	uxth	r2, r3
 800ace2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ace6:	801a      	strh	r2, [r3, #0]
 800ace8:	e05c      	b.n	800ada4 <USB_EPStartXfer+0x16e2>
 800acea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d10c      	bne.n	800ad0c <USB_EPStartXfer+0x164a>
 800acf2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800acf6:	881b      	ldrh	r3, [r3, #0]
 800acf8:	b29b      	uxth	r3, r3
 800acfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad02:	b29a      	uxth	r2, r3
 800ad04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ad08:	801a      	strh	r2, [r3, #0]
 800ad0a:	e04b      	b.n	800ada4 <USB_EPStartXfer+0x16e2>
 800ad0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad10:	085b      	lsrs	r3, r3, #1
 800ad12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ad16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad1a:	f003 0301 	and.w	r3, r3, #1
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d004      	beq.n	800ad2c <USB_EPStartXfer+0x166a>
 800ad22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ad26:	3301      	adds	r3, #1
 800ad28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ad2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ad30:	881b      	ldrh	r3, [r3, #0]
 800ad32:	b29a      	uxth	r2, r3
 800ad34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	029b      	lsls	r3, r3, #10
 800ad3c:	b29b      	uxth	r3, r3
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	b29a      	uxth	r2, r3
 800ad42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ad46:	801a      	strh	r2, [r3, #0]
 800ad48:	e02c      	b.n	800ada4 <USB_EPStartXfer+0x16e2>
 800ad4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	785b      	ldrb	r3, [r3, #1]
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	d124      	bne.n	800ada4 <USB_EPStartXfer+0x16e2>
 800ad5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ad70:	4413      	add	r3, r2
 800ad72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ad76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	00da      	lsls	r2, r3, #3
 800ad84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ad88:	4413      	add	r3, r2
 800ad8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ad8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ad92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad96:	b29a      	uxth	r2, r3
 800ad98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ad9c:	801a      	strh	r2, [r3, #0]
 800ad9e:	e001      	b.n	800ada4 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800ada0:	2301      	movs	r3, #1
 800ada2:	e03a      	b.n	800ae1a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ada4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ada8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	009b      	lsls	r3, r3, #2
 800adbc:	4413      	add	r3, r2
 800adbe:	881b      	ldrh	r3, [r3, #0]
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800adc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adca:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800adce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800add2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800add6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800adda:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800adde:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ade2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ade6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adee:	681a      	ldr	r2, [r3, #0]
 800adf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	441a      	add	r2, r3
 800ae00:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ae04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ae18:	2300      	movs	r3, #0
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b085      	sub	sp, #20
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	785b      	ldrb	r3, [r3, #1]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d020      	beq.n	800ae78 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	4413      	add	r3, r2
 800ae40:	881b      	ldrh	r3, [r3, #0]
 800ae42:	b29b      	uxth	r3, r3
 800ae44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae4c:	81bb      	strh	r3, [r7, #12]
 800ae4e:	89bb      	ldrh	r3, [r7, #12]
 800ae50:	f083 0310 	eor.w	r3, r3, #16
 800ae54:	81bb      	strh	r3, [r7, #12]
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	009b      	lsls	r3, r3, #2
 800ae5e:	441a      	add	r2, r3
 800ae60:	89bb      	ldrh	r3, [r7, #12]
 800ae62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	8013      	strh	r3, [r2, #0]
 800ae76:	e01f      	b.n	800aeb8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ae78:	687a      	ldr	r2, [r7, #4]
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	009b      	lsls	r3, r3, #2
 800ae80:	4413      	add	r3, r2
 800ae82:	881b      	ldrh	r3, [r3, #0]
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae8e:	81fb      	strh	r3, [r7, #14]
 800ae90:	89fb      	ldrh	r3, [r7, #14]
 800ae92:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ae96:	81fb      	strh	r3, [r7, #14]
 800ae98:	687a      	ldr	r2, [r7, #4]
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	781b      	ldrb	r3, [r3, #0]
 800ae9e:	009b      	lsls	r3, r3, #2
 800aea0:	441a      	add	r2, r3
 800aea2:	89fb      	ldrh	r3, [r7, #14]
 800aea4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aea8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aeac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aeb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aeb4:	b29b      	uxth	r3, r3
 800aeb6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aeb8:	2300      	movs	r3, #0
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3714      	adds	r7, #20
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr

0800aec6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aec6:	b480      	push	{r7}
 800aec8:	b087      	sub	sp, #28
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
 800aece:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	7b1b      	ldrb	r3, [r3, #12]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	f040 809d 	bne.w	800b014 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	785b      	ldrb	r3, [r3, #1]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d04c      	beq.n	800af7c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	009b      	lsls	r3, r3, #2
 800aeea:	4413      	add	r3, r2
 800aeec:	881b      	ldrh	r3, [r3, #0]
 800aeee:	823b      	strh	r3, [r7, #16]
 800aef0:	8a3b      	ldrh	r3, [r7, #16]
 800aef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d01b      	beq.n	800af32 <USB_EPClearStall+0x6c>
 800aefa:	687a      	ldr	r2, [r7, #4]
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	009b      	lsls	r3, r3, #2
 800af02:	4413      	add	r3, r2
 800af04:	881b      	ldrh	r3, [r3, #0]
 800af06:	b29b      	uxth	r3, r3
 800af08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af10:	81fb      	strh	r3, [r7, #14]
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	009b      	lsls	r3, r3, #2
 800af1a:	441a      	add	r2, r3
 800af1c:	89fb      	ldrh	r3, [r7, #14]
 800af1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800af2e:	b29b      	uxth	r3, r3
 800af30:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	78db      	ldrb	r3, [r3, #3]
 800af36:	2b01      	cmp	r3, #1
 800af38:	d06c      	beq.n	800b014 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	4413      	add	r3, r2
 800af44:	881b      	ldrh	r3, [r3, #0]
 800af46:	b29b      	uxth	r3, r3
 800af48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af50:	81bb      	strh	r3, [r7, #12]
 800af52:	89bb      	ldrh	r3, [r7, #12]
 800af54:	f083 0320 	eor.w	r3, r3, #32
 800af58:	81bb      	strh	r3, [r7, #12]
 800af5a:	687a      	ldr	r2, [r7, #4]
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	009b      	lsls	r3, r3, #2
 800af62:	441a      	add	r2, r3
 800af64:	89bb      	ldrh	r3, [r7, #12]
 800af66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af76:	b29b      	uxth	r3, r3
 800af78:	8013      	strh	r3, [r2, #0]
 800af7a:	e04b      	b.n	800b014 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	009b      	lsls	r3, r3, #2
 800af84:	4413      	add	r3, r2
 800af86:	881b      	ldrh	r3, [r3, #0]
 800af88:	82fb      	strh	r3, [r7, #22]
 800af8a:	8afb      	ldrh	r3, [r7, #22]
 800af8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af90:	2b00      	cmp	r3, #0
 800af92:	d01b      	beq.n	800afcc <USB_EPClearStall+0x106>
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	781b      	ldrb	r3, [r3, #0]
 800af9a:	009b      	lsls	r3, r3, #2
 800af9c:	4413      	add	r3, r2
 800af9e:	881b      	ldrh	r3, [r3, #0]
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afaa:	82bb      	strh	r3, [r7, #20]
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	009b      	lsls	r3, r3, #2
 800afb4:	441a      	add	r2, r3
 800afb6:	8abb      	ldrh	r3, [r7, #20]
 800afb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800afc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afc8:	b29b      	uxth	r3, r3
 800afca:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	009b      	lsls	r3, r3, #2
 800afd4:	4413      	add	r3, r2
 800afd6:	881b      	ldrh	r3, [r3, #0]
 800afd8:	b29b      	uxth	r3, r3
 800afda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800afde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afe2:	827b      	strh	r3, [r7, #18]
 800afe4:	8a7b      	ldrh	r3, [r7, #18]
 800afe6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800afea:	827b      	strh	r3, [r7, #18]
 800afec:	8a7b      	ldrh	r3, [r7, #18]
 800afee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aff2:	827b      	strh	r3, [r7, #18]
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	781b      	ldrb	r3, [r3, #0]
 800affa:	009b      	lsls	r3, r3, #2
 800affc:	441a      	add	r2, r3
 800affe:	8a7b      	ldrh	r3, [r7, #18]
 800b000:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b004:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b00c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b010:	b29b      	uxth	r3, r3
 800b012:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b014:	2300      	movs	r3, #0
}
 800b016:	4618      	mov	r0, r3
 800b018:	371c      	adds	r7, #28
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr

0800b022 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b022:	b480      	push	{r7}
 800b024:	b083      	sub	sp, #12
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
 800b02a:	460b      	mov	r3, r1
 800b02c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b02e:	78fb      	ldrb	r3, [r7, #3]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d103      	bne.n	800b03c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2280      	movs	r2, #128	; 0x80
 800b038:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b03c:	2300      	movs	r3, #0
}
 800b03e:	4618      	mov	r0, r3
 800b040:	370c      	adds	r7, #12
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr

0800b04a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b04a:	b480      	push	{r7}
 800b04c:	b083      	sub	sp, #12
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b058:	b29b      	uxth	r3, r3
 800b05a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b05e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b062:	b29a      	uxth	r2, r3
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b06a:	2300      	movs	r3, #0
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	370c      	adds	r7, #12
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800b078:	b480      	push	{r7}
 800b07a:	b085      	sub	sp, #20
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b086:	b29b      	uxth	r3, r3
 800b088:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b08a:	68fb      	ldr	r3, [r7, #12]
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3714      	adds	r7, #20
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b098:	b480      	push	{r7}
 800b09a:	b08b      	sub	sp, #44	; 0x2c
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	4611      	mov	r1, r2
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	80fb      	strh	r3, [r7, #6]
 800b0aa:	4613      	mov	r3, r2
 800b0ac:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b0ae:	88bb      	ldrh	r3, [r7, #4]
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	085b      	lsrs	r3, r3, #1
 800b0b4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b0be:	88fa      	ldrh	r2, [r7, #6]
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	4413      	add	r3, r2
 800b0c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b0c8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b0ca:	69bb      	ldr	r3, [r7, #24]
 800b0cc:	627b      	str	r3, [r7, #36]	; 0x24
 800b0ce:	e01b      	b.n	800b108 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800b0d0:	69fb      	ldr	r3, [r7, #28]
 800b0d2:	781b      	ldrb	r3, [r3, #0]
 800b0d4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b0d6:	69fb      	ldr	r3, [r7, #28]
 800b0d8:	3301      	adds	r3, #1
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	021b      	lsls	r3, r3, #8
 800b0de:	b21a      	sxth	r2, r3
 800b0e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	b21b      	sxth	r3, r3
 800b0e8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b0ea:	6a3b      	ldr	r3, [r7, #32]
 800b0ec:	8a7a      	ldrh	r2, [r7, #18]
 800b0ee:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b0f0:	6a3b      	ldr	r3, [r7, #32]
 800b0f2:	3302      	adds	r3, #2
 800b0f4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b0f6:	69fb      	ldr	r3, [r7, #28]
 800b0f8:	3301      	adds	r3, #1
 800b0fa:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b0fc:	69fb      	ldr	r3, [r7, #28]
 800b0fe:	3301      	adds	r3, #1
 800b100:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b104:	3b01      	subs	r3, #1
 800b106:	627b      	str	r3, [r7, #36]	; 0x24
 800b108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d1e0      	bne.n	800b0d0 <USB_WritePMA+0x38>
  }
}
 800b10e:	bf00      	nop
 800b110:	bf00      	nop
 800b112:	372c      	adds	r7, #44	; 0x2c
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr

0800b11c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b08b      	sub	sp, #44	; 0x2c
 800b120:	af00      	add	r7, sp, #0
 800b122:	60f8      	str	r0, [r7, #12]
 800b124:	60b9      	str	r1, [r7, #8]
 800b126:	4611      	mov	r1, r2
 800b128:	461a      	mov	r2, r3
 800b12a:	460b      	mov	r3, r1
 800b12c:	80fb      	strh	r3, [r7, #6]
 800b12e:	4613      	mov	r3, r2
 800b130:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b132:	88bb      	ldrh	r3, [r7, #4]
 800b134:	085b      	lsrs	r3, r3, #1
 800b136:	b29b      	uxth	r3, r3
 800b138:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b142:	88fa      	ldrh	r2, [r7, #6]
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	4413      	add	r3, r2
 800b148:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b14c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b14e:	69bb      	ldr	r3, [r7, #24]
 800b150:	627b      	str	r3, [r7, #36]	; 0x24
 800b152:	e018      	b.n	800b186 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b154:	6a3b      	ldr	r3, [r7, #32]
 800b156:	881b      	ldrh	r3, [r3, #0]
 800b158:	b29b      	uxth	r3, r3
 800b15a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b15c:	6a3b      	ldr	r3, [r7, #32]
 800b15e:	3302      	adds	r3, #2
 800b160:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	b2da      	uxtb	r2, r3
 800b166:	69fb      	ldr	r3, [r7, #28]
 800b168:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b16a:	69fb      	ldr	r3, [r7, #28]
 800b16c:	3301      	adds	r3, #1
 800b16e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	0a1b      	lsrs	r3, r3, #8
 800b174:	b2da      	uxtb	r2, r3
 800b176:	69fb      	ldr	r3, [r7, #28]
 800b178:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b17a:	69fb      	ldr	r3, [r7, #28]
 800b17c:	3301      	adds	r3, #1
 800b17e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b182:	3b01      	subs	r3, #1
 800b184:	627b      	str	r3, [r7, #36]	; 0x24
 800b186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d1e3      	bne.n	800b154 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b18c:	88bb      	ldrh	r3, [r7, #4]
 800b18e:	f003 0301 	and.w	r3, r3, #1
 800b192:	b29b      	uxth	r3, r3
 800b194:	2b00      	cmp	r3, #0
 800b196:	d007      	beq.n	800b1a8 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800b198:	6a3b      	ldr	r3, [r7, #32]
 800b19a:	881b      	ldrh	r3, [r3, #0]
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	b2da      	uxtb	r2, r3
 800b1a4:	69fb      	ldr	r3, [r7, #28]
 800b1a6:	701a      	strb	r2, [r3, #0]
  }
}
 800b1a8:	bf00      	nop
 800b1aa:	372c      	adds	r7, #44	; 0x2c
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	460b      	mov	r3, r1
 800b1be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b1c0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b1c4:	f002 fc96 	bl	800daf4 <USBD_static_malloc>
 800b1c8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d109      	bne.n	800b1e4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	32b0      	adds	r2, #176	; 0xb0
 800b1da:	2100      	movs	r1, #0
 800b1dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b1e0:	2302      	movs	r3, #2
 800b1e2:	e0d4      	b.n	800b38e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b1e4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b1e8:	2100      	movs	r1, #0
 800b1ea:	68f8      	ldr	r0, [r7, #12]
 800b1ec:	f002 fd08 	bl	800dc00 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	32b0      	adds	r2, #176	; 0xb0
 800b1fa:	68f9      	ldr	r1, [r7, #12]
 800b1fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	32b0      	adds	r2, #176	; 0xb0
 800b20a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	7c1b      	ldrb	r3, [r3, #16]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d138      	bne.n	800b28e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b21c:	4b5e      	ldr	r3, [pc, #376]	; (800b398 <USBD_CDC_Init+0x1e4>)
 800b21e:	7819      	ldrb	r1, [r3, #0]
 800b220:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b224:	2202      	movs	r2, #2
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f002 fb09 	bl	800d83e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b22c:	4b5a      	ldr	r3, [pc, #360]	; (800b398 <USBD_CDC_Init+0x1e4>)
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	f003 020f 	and.w	r2, r3, #15
 800b234:	6879      	ldr	r1, [r7, #4]
 800b236:	4613      	mov	r3, r2
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	4413      	add	r3, r2
 800b23c:	009b      	lsls	r3, r3, #2
 800b23e:	440b      	add	r3, r1
 800b240:	3324      	adds	r3, #36	; 0x24
 800b242:	2201      	movs	r2, #1
 800b244:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b246:	4b55      	ldr	r3, [pc, #340]	; (800b39c <USBD_CDC_Init+0x1e8>)
 800b248:	7819      	ldrb	r1, [r3, #0]
 800b24a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b24e:	2202      	movs	r2, #2
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f002 faf4 	bl	800d83e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b256:	4b51      	ldr	r3, [pc, #324]	; (800b39c <USBD_CDC_Init+0x1e8>)
 800b258:	781b      	ldrb	r3, [r3, #0]
 800b25a:	f003 020f 	and.w	r2, r3, #15
 800b25e:	6879      	ldr	r1, [r7, #4]
 800b260:	4613      	mov	r3, r2
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	4413      	add	r3, r2
 800b266:	009b      	lsls	r3, r3, #2
 800b268:	440b      	add	r3, r1
 800b26a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b26e:	2201      	movs	r2, #1
 800b270:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b272:	4b4b      	ldr	r3, [pc, #300]	; (800b3a0 <USBD_CDC_Init+0x1ec>)
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	f003 020f 	and.w	r2, r3, #15
 800b27a:	6879      	ldr	r1, [r7, #4]
 800b27c:	4613      	mov	r3, r2
 800b27e:	009b      	lsls	r3, r3, #2
 800b280:	4413      	add	r3, r2
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	440b      	add	r3, r1
 800b286:	3326      	adds	r3, #38	; 0x26
 800b288:	2210      	movs	r2, #16
 800b28a:	801a      	strh	r2, [r3, #0]
 800b28c:	e035      	b.n	800b2fa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b28e:	4b42      	ldr	r3, [pc, #264]	; (800b398 <USBD_CDC_Init+0x1e4>)
 800b290:	7819      	ldrb	r1, [r3, #0]
 800b292:	2340      	movs	r3, #64	; 0x40
 800b294:	2202      	movs	r2, #2
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f002 fad1 	bl	800d83e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b29c:	4b3e      	ldr	r3, [pc, #248]	; (800b398 <USBD_CDC_Init+0x1e4>)
 800b29e:	781b      	ldrb	r3, [r3, #0]
 800b2a0:	f003 020f 	and.w	r2, r3, #15
 800b2a4:	6879      	ldr	r1, [r7, #4]
 800b2a6:	4613      	mov	r3, r2
 800b2a8:	009b      	lsls	r3, r3, #2
 800b2aa:	4413      	add	r3, r2
 800b2ac:	009b      	lsls	r3, r3, #2
 800b2ae:	440b      	add	r3, r1
 800b2b0:	3324      	adds	r3, #36	; 0x24
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b2b6:	4b39      	ldr	r3, [pc, #228]	; (800b39c <USBD_CDC_Init+0x1e8>)
 800b2b8:	7819      	ldrb	r1, [r3, #0]
 800b2ba:	2340      	movs	r3, #64	; 0x40
 800b2bc:	2202      	movs	r2, #2
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f002 fabd 	bl	800d83e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b2c4:	4b35      	ldr	r3, [pc, #212]	; (800b39c <USBD_CDC_Init+0x1e8>)
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	f003 020f 	and.w	r2, r3, #15
 800b2cc:	6879      	ldr	r1, [r7, #4]
 800b2ce:	4613      	mov	r3, r2
 800b2d0:	009b      	lsls	r3, r3, #2
 800b2d2:	4413      	add	r3, r2
 800b2d4:	009b      	lsls	r3, r3, #2
 800b2d6:	440b      	add	r3, r1
 800b2d8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b2dc:	2201      	movs	r2, #1
 800b2de:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b2e0:	4b2f      	ldr	r3, [pc, #188]	; (800b3a0 <USBD_CDC_Init+0x1ec>)
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	f003 020f 	and.w	r2, r3, #15
 800b2e8:	6879      	ldr	r1, [r7, #4]
 800b2ea:	4613      	mov	r3, r2
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	4413      	add	r3, r2
 800b2f0:	009b      	lsls	r3, r3, #2
 800b2f2:	440b      	add	r3, r1
 800b2f4:	3326      	adds	r3, #38	; 0x26
 800b2f6:	2210      	movs	r2, #16
 800b2f8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b2fa:	4b29      	ldr	r3, [pc, #164]	; (800b3a0 <USBD_CDC_Init+0x1ec>)
 800b2fc:	7819      	ldrb	r1, [r3, #0]
 800b2fe:	2308      	movs	r3, #8
 800b300:	2203      	movs	r2, #3
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f002 fa9b 	bl	800d83e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b308:	4b25      	ldr	r3, [pc, #148]	; (800b3a0 <USBD_CDC_Init+0x1ec>)
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	f003 020f 	and.w	r2, r3, #15
 800b310:	6879      	ldr	r1, [r7, #4]
 800b312:	4613      	mov	r3, r2
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	4413      	add	r3, r2
 800b318:	009b      	lsls	r3, r3, #2
 800b31a:	440b      	add	r3, r1
 800b31c:	3324      	adds	r3, #36	; 0x24
 800b31e:	2201      	movs	r2, #1
 800b320:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	2200      	movs	r2, #0
 800b326:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	33b0      	adds	r3, #176	; 0xb0
 800b334:	009b      	lsls	r3, r3, #2
 800b336:	4413      	add	r3, r2
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2200      	movs	r2, #0
 800b342:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2200      	movs	r2, #0
 800b34a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b354:	2b00      	cmp	r3, #0
 800b356:	d101      	bne.n	800b35c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b358:	2302      	movs	r3, #2
 800b35a:	e018      	b.n	800b38e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	7c1b      	ldrb	r3, [r3, #16]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d10a      	bne.n	800b37a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b364:	4b0d      	ldr	r3, [pc, #52]	; (800b39c <USBD_CDC_Init+0x1e8>)
 800b366:	7819      	ldrb	r1, [r3, #0]
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b36e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f002 fb53 	bl	800da1e <USBD_LL_PrepareReceive>
 800b378:	e008      	b.n	800b38c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b37a:	4b08      	ldr	r3, [pc, #32]	; (800b39c <USBD_CDC_Init+0x1e8>)
 800b37c:	7819      	ldrb	r1, [r3, #0]
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b384:	2340      	movs	r3, #64	; 0x40
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f002 fb49 	bl	800da1e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b38c:	2300      	movs	r3, #0
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3710      	adds	r7, #16
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	2000009b 	.word	0x2000009b
 800b39c:	2000009c 	.word	0x2000009c
 800b3a0:	2000009d 	.word	0x2000009d

0800b3a4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b082      	sub	sp, #8
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b3b0:	4b3a      	ldr	r3, [pc, #232]	; (800b49c <USBD_CDC_DeInit+0xf8>)
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f002 fa67 	bl	800d88a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b3bc:	4b37      	ldr	r3, [pc, #220]	; (800b49c <USBD_CDC_DeInit+0xf8>)
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	f003 020f 	and.w	r2, r3, #15
 800b3c4:	6879      	ldr	r1, [r7, #4]
 800b3c6:	4613      	mov	r3, r2
 800b3c8:	009b      	lsls	r3, r3, #2
 800b3ca:	4413      	add	r3, r2
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	440b      	add	r3, r1
 800b3d0:	3324      	adds	r3, #36	; 0x24
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b3d6:	4b32      	ldr	r3, [pc, #200]	; (800b4a0 <USBD_CDC_DeInit+0xfc>)
 800b3d8:	781b      	ldrb	r3, [r3, #0]
 800b3da:	4619      	mov	r1, r3
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f002 fa54 	bl	800d88a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b3e2:	4b2f      	ldr	r3, [pc, #188]	; (800b4a0 <USBD_CDC_DeInit+0xfc>)
 800b3e4:	781b      	ldrb	r3, [r3, #0]
 800b3e6:	f003 020f 	and.w	r2, r3, #15
 800b3ea:	6879      	ldr	r1, [r7, #4]
 800b3ec:	4613      	mov	r3, r2
 800b3ee:	009b      	lsls	r3, r3, #2
 800b3f0:	4413      	add	r3, r2
 800b3f2:	009b      	lsls	r3, r3, #2
 800b3f4:	440b      	add	r3, r1
 800b3f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b3fe:	4b29      	ldr	r3, [pc, #164]	; (800b4a4 <USBD_CDC_DeInit+0x100>)
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	4619      	mov	r1, r3
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f002 fa40 	bl	800d88a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b40a:	4b26      	ldr	r3, [pc, #152]	; (800b4a4 <USBD_CDC_DeInit+0x100>)
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	f003 020f 	and.w	r2, r3, #15
 800b412:	6879      	ldr	r1, [r7, #4]
 800b414:	4613      	mov	r3, r2
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	4413      	add	r3, r2
 800b41a:	009b      	lsls	r3, r3, #2
 800b41c:	440b      	add	r3, r1
 800b41e:	3324      	adds	r3, #36	; 0x24
 800b420:	2200      	movs	r2, #0
 800b422:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b424:	4b1f      	ldr	r3, [pc, #124]	; (800b4a4 <USBD_CDC_DeInit+0x100>)
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	f003 020f 	and.w	r2, r3, #15
 800b42c:	6879      	ldr	r1, [r7, #4]
 800b42e:	4613      	mov	r3, r2
 800b430:	009b      	lsls	r3, r3, #2
 800b432:	4413      	add	r3, r2
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	440b      	add	r3, r1
 800b438:	3326      	adds	r3, #38	; 0x26
 800b43a:	2200      	movs	r2, #0
 800b43c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	32b0      	adds	r2, #176	; 0xb0
 800b448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d01f      	beq.n	800b490 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	33b0      	adds	r3, #176	; 0xb0
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	4413      	add	r3, r2
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	32b0      	adds	r2, #176	; 0xb0
 800b46e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b472:	4618      	mov	r0, r3
 800b474:	f002 fb4c 	bl	800db10 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	32b0      	adds	r2, #176	; 0xb0
 800b482:	2100      	movs	r1, #0
 800b484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2200      	movs	r2, #0
 800b48c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b490:	2300      	movs	r3, #0
}
 800b492:	4618      	mov	r0, r3
 800b494:	3708      	adds	r7, #8
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop
 800b49c:	2000009b 	.word	0x2000009b
 800b4a0:	2000009c 	.word	0x2000009c
 800b4a4:	2000009d 	.word	0x2000009d

0800b4a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b086      	sub	sp, #24
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	32b0      	adds	r2, #176	; 0xb0
 800b4bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4c0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d101      	bne.n	800b4d8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b4d4:	2303      	movs	r3, #3
 800b4d6:	e0bf      	b.n	800b658 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d050      	beq.n	800b586 <USBD_CDC_Setup+0xde>
 800b4e4:	2b20      	cmp	r3, #32
 800b4e6:	f040 80af 	bne.w	800b648 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	88db      	ldrh	r3, [r3, #6]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d03a      	beq.n	800b568 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	781b      	ldrb	r3, [r3, #0]
 800b4f6:	b25b      	sxtb	r3, r3
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	da1b      	bge.n	800b534 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	33b0      	adds	r3, #176	; 0xb0
 800b506:	009b      	lsls	r3, r3, #2
 800b508:	4413      	add	r3, r2
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	689b      	ldr	r3, [r3, #8]
 800b50e:	683a      	ldr	r2, [r7, #0]
 800b510:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b512:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b514:	683a      	ldr	r2, [r7, #0]
 800b516:	88d2      	ldrh	r2, [r2, #6]
 800b518:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	88db      	ldrh	r3, [r3, #6]
 800b51e:	2b07      	cmp	r3, #7
 800b520:	bf28      	it	cs
 800b522:	2307      	movcs	r3, #7
 800b524:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	89fa      	ldrh	r2, [r7, #14]
 800b52a:	4619      	mov	r1, r3
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f001 fd21 	bl	800cf74 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b532:	e090      	b.n	800b656 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	785a      	ldrb	r2, [r3, #1]
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	88db      	ldrh	r3, [r3, #6]
 800b542:	2b3f      	cmp	r3, #63	; 0x3f
 800b544:	d803      	bhi.n	800b54e <USBD_CDC_Setup+0xa6>
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	88db      	ldrh	r3, [r3, #6]
 800b54a:	b2da      	uxtb	r2, r3
 800b54c:	e000      	b.n	800b550 <USBD_CDC_Setup+0xa8>
 800b54e:	2240      	movs	r2, #64	; 0x40
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b556:	6939      	ldr	r1, [r7, #16]
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b55e:	461a      	mov	r2, r3
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f001 fd33 	bl	800cfcc <USBD_CtlPrepareRx>
      break;
 800b566:	e076      	b.n	800b656 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b56e:	687a      	ldr	r2, [r7, #4]
 800b570:	33b0      	adds	r3, #176	; 0xb0
 800b572:	009b      	lsls	r3, r3, #2
 800b574:	4413      	add	r3, r2
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	689b      	ldr	r3, [r3, #8]
 800b57a:	683a      	ldr	r2, [r7, #0]
 800b57c:	7850      	ldrb	r0, [r2, #1]
 800b57e:	2200      	movs	r2, #0
 800b580:	6839      	ldr	r1, [r7, #0]
 800b582:	4798      	blx	r3
      break;
 800b584:	e067      	b.n	800b656 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	785b      	ldrb	r3, [r3, #1]
 800b58a:	2b0b      	cmp	r3, #11
 800b58c:	d851      	bhi.n	800b632 <USBD_CDC_Setup+0x18a>
 800b58e:	a201      	add	r2, pc, #4	; (adr r2, 800b594 <USBD_CDC_Setup+0xec>)
 800b590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b594:	0800b5c5 	.word	0x0800b5c5
 800b598:	0800b641 	.word	0x0800b641
 800b59c:	0800b633 	.word	0x0800b633
 800b5a0:	0800b633 	.word	0x0800b633
 800b5a4:	0800b633 	.word	0x0800b633
 800b5a8:	0800b633 	.word	0x0800b633
 800b5ac:	0800b633 	.word	0x0800b633
 800b5b0:	0800b633 	.word	0x0800b633
 800b5b4:	0800b633 	.word	0x0800b633
 800b5b8:	0800b633 	.word	0x0800b633
 800b5bc:	0800b5ef 	.word	0x0800b5ef
 800b5c0:	0800b619 	.word	0x0800b619
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5ca:	b2db      	uxtb	r3, r3
 800b5cc:	2b03      	cmp	r3, #3
 800b5ce:	d107      	bne.n	800b5e0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b5d0:	f107 030a 	add.w	r3, r7, #10
 800b5d4:	2202      	movs	r2, #2
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f001 fccb 	bl	800cf74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b5de:	e032      	b.n	800b646 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b5e0:	6839      	ldr	r1, [r7, #0]
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f001 fc55 	bl	800ce92 <USBD_CtlError>
            ret = USBD_FAIL;
 800b5e8:	2303      	movs	r3, #3
 800b5ea:	75fb      	strb	r3, [r7, #23]
          break;
 800b5ec:	e02b      	b.n	800b646 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5f4:	b2db      	uxtb	r3, r3
 800b5f6:	2b03      	cmp	r3, #3
 800b5f8:	d107      	bne.n	800b60a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b5fa:	f107 030d 	add.w	r3, r7, #13
 800b5fe:	2201      	movs	r2, #1
 800b600:	4619      	mov	r1, r3
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f001 fcb6 	bl	800cf74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b608:	e01d      	b.n	800b646 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b60a:	6839      	ldr	r1, [r7, #0]
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f001 fc40 	bl	800ce92 <USBD_CtlError>
            ret = USBD_FAIL;
 800b612:	2303      	movs	r3, #3
 800b614:	75fb      	strb	r3, [r7, #23]
          break;
 800b616:	e016      	b.n	800b646 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	2b03      	cmp	r3, #3
 800b622:	d00f      	beq.n	800b644 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b624:	6839      	ldr	r1, [r7, #0]
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f001 fc33 	bl	800ce92 <USBD_CtlError>
            ret = USBD_FAIL;
 800b62c:	2303      	movs	r3, #3
 800b62e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b630:	e008      	b.n	800b644 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b632:	6839      	ldr	r1, [r7, #0]
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f001 fc2c 	bl	800ce92 <USBD_CtlError>
          ret = USBD_FAIL;
 800b63a:	2303      	movs	r3, #3
 800b63c:	75fb      	strb	r3, [r7, #23]
          break;
 800b63e:	e002      	b.n	800b646 <USBD_CDC_Setup+0x19e>
          break;
 800b640:	bf00      	nop
 800b642:	e008      	b.n	800b656 <USBD_CDC_Setup+0x1ae>
          break;
 800b644:	bf00      	nop
      }
      break;
 800b646:	e006      	b.n	800b656 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b648:	6839      	ldr	r1, [r7, #0]
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f001 fc21 	bl	800ce92 <USBD_CtlError>
      ret = USBD_FAIL;
 800b650:	2303      	movs	r3, #3
 800b652:	75fb      	strb	r3, [r7, #23]
      break;
 800b654:	bf00      	nop
  }

  return (uint8_t)ret;
 800b656:	7dfb      	ldrb	r3, [r7, #23]
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3718      	adds	r7, #24
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	460b      	mov	r3, r1
 800b66a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b672:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	32b0      	adds	r2, #176	; 0xb0
 800b67e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d101      	bne.n	800b68a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b686:	2303      	movs	r3, #3
 800b688:	e065      	b.n	800b756 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	32b0      	adds	r2, #176	; 0xb0
 800b694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b698:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b69a:	78fb      	ldrb	r3, [r7, #3]
 800b69c:	f003 020f 	and.w	r2, r3, #15
 800b6a0:	6879      	ldr	r1, [r7, #4]
 800b6a2:	4613      	mov	r3, r2
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	4413      	add	r3, r2
 800b6a8:	009b      	lsls	r3, r3, #2
 800b6aa:	440b      	add	r3, r1
 800b6ac:	3318      	adds	r3, #24
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d02f      	beq.n	800b714 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b6b4:	78fb      	ldrb	r3, [r7, #3]
 800b6b6:	f003 020f 	and.w	r2, r3, #15
 800b6ba:	6879      	ldr	r1, [r7, #4]
 800b6bc:	4613      	mov	r3, r2
 800b6be:	009b      	lsls	r3, r3, #2
 800b6c0:	4413      	add	r3, r2
 800b6c2:	009b      	lsls	r3, r3, #2
 800b6c4:	440b      	add	r3, r1
 800b6c6:	3318      	adds	r3, #24
 800b6c8:	681a      	ldr	r2, [r3, #0]
 800b6ca:	78fb      	ldrb	r3, [r7, #3]
 800b6cc:	f003 010f 	and.w	r1, r3, #15
 800b6d0:	68f8      	ldr	r0, [r7, #12]
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	440b      	add	r3, r1
 800b6d8:	00db      	lsls	r3, r3, #3
 800b6da:	4403      	add	r3, r0
 800b6dc:	3338      	adds	r3, #56	; 0x38
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	fbb2 f1f3 	udiv	r1, r2, r3
 800b6e4:	fb01 f303 	mul.w	r3, r1, r3
 800b6e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d112      	bne.n	800b714 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b6ee:	78fb      	ldrb	r3, [r7, #3]
 800b6f0:	f003 020f 	and.w	r2, r3, #15
 800b6f4:	6879      	ldr	r1, [r7, #4]
 800b6f6:	4613      	mov	r3, r2
 800b6f8:	009b      	lsls	r3, r3, #2
 800b6fa:	4413      	add	r3, r2
 800b6fc:	009b      	lsls	r3, r3, #2
 800b6fe:	440b      	add	r3, r1
 800b700:	3318      	adds	r3, #24
 800b702:	2200      	movs	r2, #0
 800b704:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b706:	78f9      	ldrb	r1, [r7, #3]
 800b708:	2300      	movs	r3, #0
 800b70a:	2200      	movs	r2, #0
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f002 f965 	bl	800d9dc <USBD_LL_Transmit>
 800b712:	e01f      	b.n	800b754 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	2200      	movs	r2, #0
 800b718:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	33b0      	adds	r3, #176	; 0xb0
 800b726:	009b      	lsls	r3, r3, #2
 800b728:	4413      	add	r3, r2
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	691b      	ldr	r3, [r3, #16]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d010      	beq.n	800b754 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b738:	687a      	ldr	r2, [r7, #4]
 800b73a:	33b0      	adds	r3, #176	; 0xb0
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	4413      	add	r3, r2
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	691b      	ldr	r3, [r3, #16]
 800b744:	68ba      	ldr	r2, [r7, #8]
 800b746:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b74a:	68ba      	ldr	r2, [r7, #8]
 800b74c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b750:	78fa      	ldrb	r2, [r7, #3]
 800b752:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b754:	2300      	movs	r3, #0
}
 800b756:	4618      	mov	r0, r3
 800b758:	3710      	adds	r7, #16
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}

0800b75e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b75e:	b580      	push	{r7, lr}
 800b760:	b084      	sub	sp, #16
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
 800b766:	460b      	mov	r3, r1
 800b768:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	32b0      	adds	r2, #176	; 0xb0
 800b774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b778:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	32b0      	adds	r2, #176	; 0xb0
 800b784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d101      	bne.n	800b790 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b78c:	2303      	movs	r3, #3
 800b78e:	e01a      	b.n	800b7c6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b790:	78fb      	ldrb	r3, [r7, #3]
 800b792:	4619      	mov	r1, r3
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f002 f963 	bl	800da60 <USBD_LL_GetRxDataSize>
 800b79a:	4602      	mov	r2, r0
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b7a8:	687a      	ldr	r2, [r7, #4]
 800b7aa:	33b0      	adds	r3, #176	; 0xb0
 800b7ac:	009b      	lsls	r3, r3, #2
 800b7ae:	4413      	add	r3, r2
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	68db      	ldr	r3, [r3, #12]
 800b7b4:	68fa      	ldr	r2, [r7, #12]
 800b7b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b7ba:	68fa      	ldr	r2, [r7, #12]
 800b7bc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b7c0:	4611      	mov	r1, r2
 800b7c2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b7c4:	2300      	movs	r3, #0
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3710      	adds	r7, #16
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}

0800b7ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b7ce:	b580      	push	{r7, lr}
 800b7d0:	b084      	sub	sp, #16
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	32b0      	adds	r2, #176	; 0xb0
 800b7e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d101      	bne.n	800b7f0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b7ec:	2303      	movs	r3, #3
 800b7ee:	e025      	b.n	800b83c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	33b0      	adds	r3, #176	; 0xb0
 800b7fa:	009b      	lsls	r3, r3, #2
 800b7fc:	4413      	add	r3, r2
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d01a      	beq.n	800b83a <USBD_CDC_EP0_RxReady+0x6c>
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b80a:	2bff      	cmp	r3, #255	; 0xff
 800b80c:	d015      	beq.n	800b83a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b814:	687a      	ldr	r2, [r7, #4]
 800b816:	33b0      	adds	r3, #176	; 0xb0
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	4413      	add	r3, r2
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	68fa      	ldr	r2, [r7, #12]
 800b822:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b826:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b828:	68fa      	ldr	r2, [r7, #12]
 800b82a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b82e:	b292      	uxth	r2, r2
 800b830:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	22ff      	movs	r2, #255	; 0xff
 800b836:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b83a:	2300      	movs	r3, #0
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3710      	adds	r7, #16
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}

0800b844 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b086      	sub	sp, #24
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b84c:	2182      	movs	r1, #130	; 0x82
 800b84e:	4818      	ldr	r0, [pc, #96]	; (800b8b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b850:	f000 fcbd 	bl	800c1ce <USBD_GetEpDesc>
 800b854:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b856:	2101      	movs	r1, #1
 800b858:	4815      	ldr	r0, [pc, #84]	; (800b8b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b85a:	f000 fcb8 	bl	800c1ce <USBD_GetEpDesc>
 800b85e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b860:	2181      	movs	r1, #129	; 0x81
 800b862:	4813      	ldr	r0, [pc, #76]	; (800b8b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b864:	f000 fcb3 	bl	800c1ce <USBD_GetEpDesc>
 800b868:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d002      	beq.n	800b876 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	2210      	movs	r2, #16
 800b874:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d006      	beq.n	800b88a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	2200      	movs	r2, #0
 800b880:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b884:	711a      	strb	r2, [r3, #4]
 800b886:	2200      	movs	r2, #0
 800b888:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d006      	beq.n	800b89e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2200      	movs	r2, #0
 800b894:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b898:	711a      	strb	r2, [r3, #4]
 800b89a:	2200      	movs	r2, #0
 800b89c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2243      	movs	r2, #67	; 0x43
 800b8a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b8a4:	4b02      	ldr	r3, [pc, #8]	; (800b8b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3718      	adds	r7, #24
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	20000058 	.word	0x20000058

0800b8b4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b086      	sub	sp, #24
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b8bc:	2182      	movs	r1, #130	; 0x82
 800b8be:	4818      	ldr	r0, [pc, #96]	; (800b920 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b8c0:	f000 fc85 	bl	800c1ce <USBD_GetEpDesc>
 800b8c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b8c6:	2101      	movs	r1, #1
 800b8c8:	4815      	ldr	r0, [pc, #84]	; (800b920 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b8ca:	f000 fc80 	bl	800c1ce <USBD_GetEpDesc>
 800b8ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b8d0:	2181      	movs	r1, #129	; 0x81
 800b8d2:	4813      	ldr	r0, [pc, #76]	; (800b920 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b8d4:	f000 fc7b 	bl	800c1ce <USBD_GetEpDesc>
 800b8d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d002      	beq.n	800b8e6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	2210      	movs	r2, #16
 800b8e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d006      	beq.n	800b8fa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	711a      	strb	r2, [r3, #4]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	f042 0202 	orr.w	r2, r2, #2
 800b8f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d006      	beq.n	800b90e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	2200      	movs	r2, #0
 800b904:	711a      	strb	r2, [r3, #4]
 800b906:	2200      	movs	r2, #0
 800b908:	f042 0202 	orr.w	r2, r2, #2
 800b90c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2243      	movs	r2, #67	; 0x43
 800b912:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b914:	4b02      	ldr	r3, [pc, #8]	; (800b920 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b916:	4618      	mov	r0, r3
 800b918:	3718      	adds	r7, #24
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}
 800b91e:	bf00      	nop
 800b920:	20000058 	.word	0x20000058

0800b924 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b086      	sub	sp, #24
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b92c:	2182      	movs	r1, #130	; 0x82
 800b92e:	4818      	ldr	r0, [pc, #96]	; (800b990 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b930:	f000 fc4d 	bl	800c1ce <USBD_GetEpDesc>
 800b934:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b936:	2101      	movs	r1, #1
 800b938:	4815      	ldr	r0, [pc, #84]	; (800b990 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b93a:	f000 fc48 	bl	800c1ce <USBD_GetEpDesc>
 800b93e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b940:	2181      	movs	r1, #129	; 0x81
 800b942:	4813      	ldr	r0, [pc, #76]	; (800b990 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b944:	f000 fc43 	bl	800c1ce <USBD_GetEpDesc>
 800b948:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d002      	beq.n	800b956 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	2210      	movs	r2, #16
 800b954:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d006      	beq.n	800b96a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	2200      	movs	r2, #0
 800b960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b964:	711a      	strb	r2, [r3, #4]
 800b966:	2200      	movs	r2, #0
 800b968:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d006      	beq.n	800b97e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2200      	movs	r2, #0
 800b974:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b978:	711a      	strb	r2, [r3, #4]
 800b97a:	2200      	movs	r2, #0
 800b97c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2243      	movs	r2, #67	; 0x43
 800b982:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b984:	4b02      	ldr	r3, [pc, #8]	; (800b990 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b986:	4618      	mov	r0, r3
 800b988:	3718      	adds	r7, #24
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	20000058 	.word	0x20000058

0800b994 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b994:	b480      	push	{r7}
 800b996:	b083      	sub	sp, #12
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	220a      	movs	r2, #10
 800b9a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b9a2:	4b03      	ldr	r3, [pc, #12]	; (800b9b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	370c      	adds	r7, #12
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr
 800b9b0:	20000014 	.word	0x20000014

0800b9b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d101      	bne.n	800b9c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b9c4:	2303      	movs	r3, #3
 800b9c6:	e009      	b.n	800b9dc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	33b0      	adds	r3, #176	; 0xb0
 800b9d2:	009b      	lsls	r3, r3, #2
 800b9d4:	4413      	add	r3, r2
 800b9d6:	683a      	ldr	r2, [r7, #0]
 800b9d8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b9da:	2300      	movs	r3, #0
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	370c      	adds	r7, #12
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr

0800b9e8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b087      	sub	sp, #28
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	60f8      	str	r0, [r7, #12]
 800b9f0:	60b9      	str	r1, [r7, #8]
 800b9f2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	32b0      	adds	r2, #176	; 0xb0
 800b9fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba02:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d101      	bne.n	800ba0e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ba0a:	2303      	movs	r3, #3
 800ba0c:	e008      	b.n	800ba20 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	68ba      	ldr	r2, [r7, #8]
 800ba12:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	687a      	ldr	r2, [r7, #4]
 800ba1a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ba1e:	2300      	movs	r3, #0
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	371c      	adds	r7, #28
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr

0800ba2c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b085      	sub	sp, #20
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	32b0      	adds	r2, #176	; 0xb0
 800ba40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba44:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d101      	bne.n	800ba50 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ba4c:	2303      	movs	r3, #3
 800ba4e:	e004      	b.n	800ba5a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	683a      	ldr	r2, [r7, #0]
 800ba54:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ba58:	2300      	movs	r3, #0
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3714      	adds	r7, #20
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba64:	4770      	bx	lr
	...

0800ba68 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b084      	sub	sp, #16
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	32b0      	adds	r2, #176	; 0xb0
 800ba7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba7e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800ba80:	2301      	movs	r3, #1
 800ba82:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d101      	bne.n	800ba8e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ba8a:	2303      	movs	r3, #3
 800ba8c:	e025      	b.n	800bada <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d11f      	bne.n	800bad8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800baa0:	4b10      	ldr	r3, [pc, #64]	; (800bae4 <USBD_CDC_TransmitPacket+0x7c>)
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	f003 020f 	and.w	r2, r3, #15
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	4613      	mov	r3, r2
 800bab2:	009b      	lsls	r3, r3, #2
 800bab4:	4413      	add	r3, r2
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	4403      	add	r3, r0
 800baba:	3318      	adds	r3, #24
 800babc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800babe:	4b09      	ldr	r3, [pc, #36]	; (800bae4 <USBD_CDC_TransmitPacket+0x7c>)
 800bac0:	7819      	ldrb	r1, [r3, #0]
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f001 ff84 	bl	800d9dc <USBD_LL_Transmit>

    ret = USBD_OK;
 800bad4:	2300      	movs	r3, #0
 800bad6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bad8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bada:	4618      	mov	r0, r3
 800badc:	3710      	adds	r7, #16
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	bf00      	nop
 800bae4:	2000009b 	.word	0x2000009b

0800bae8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	32b0      	adds	r2, #176	; 0xb0
 800bafa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bafe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	32b0      	adds	r2, #176	; 0xb0
 800bb0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d101      	bne.n	800bb16 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800bb12:	2303      	movs	r3, #3
 800bb14:	e018      	b.n	800bb48 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	7c1b      	ldrb	r3, [r3, #16]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d10a      	bne.n	800bb34 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bb1e:	4b0c      	ldr	r3, [pc, #48]	; (800bb50 <USBD_CDC_ReceivePacket+0x68>)
 800bb20:	7819      	ldrb	r1, [r3, #0]
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bb28:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f001 ff76 	bl	800da1e <USBD_LL_PrepareReceive>
 800bb32:	e008      	b.n	800bb46 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bb34:	4b06      	ldr	r3, [pc, #24]	; (800bb50 <USBD_CDC_ReceivePacket+0x68>)
 800bb36:	7819      	ldrb	r1, [r3, #0]
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bb3e:	2340      	movs	r3, #64	; 0x40
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f001 ff6c 	bl	800da1e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bb46:	2300      	movs	r3, #0
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3710      	adds	r7, #16
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	2000009c 	.word	0x2000009c

0800bb54 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b086      	sub	sp, #24
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	60f8      	str	r0, [r7, #12]
 800bb5c:	60b9      	str	r1, [r7, #8]
 800bb5e:	4613      	mov	r3, r2
 800bb60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d101      	bne.n	800bb6c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bb68:	2303      	movs	r3, #3
 800bb6a:	e01f      	b.n	800bbac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2200      	movs	r2, #0
 800bb78:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d003      	beq.n	800bb92 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	68ba      	ldr	r2, [r7, #8]
 800bb8e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2201      	movs	r2, #1
 800bb96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	79fa      	ldrb	r2, [r7, #7]
 800bb9e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bba0:	68f8      	ldr	r0, [r7, #12]
 800bba2:	f001 fdcf 	bl	800d744 <USBD_LL_Init>
 800bba6:	4603      	mov	r3, r0
 800bba8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bbaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3718      	adds	r7, #24
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b084      	sub	sp, #16
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d101      	bne.n	800bbcc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bbc8:	2303      	movs	r3, #3
 800bbca:	e025      	b.n	800bc18 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	683a      	ldr	r2, [r7, #0]
 800bbd0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	32ae      	adds	r2, #174	; 0xae
 800bbde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d00f      	beq.n	800bc08 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	32ae      	adds	r2, #174	; 0xae
 800bbf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf8:	f107 020e 	add.w	r2, r7, #14
 800bbfc:	4610      	mov	r0, r2
 800bbfe:	4798      	blx	r3
 800bc00:	4602      	mov	r2, r0
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bc0e:	1c5a      	adds	r2, r3, #1
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800bc16:	2300      	movs	r3, #0
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3710      	adds	r7, #16
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b082      	sub	sp, #8
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f001 fded 	bl	800d808 <USBD_LL_Start>
 800bc2e:	4603      	mov	r3, r0
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3708      	adds	r7, #8
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b083      	sub	sp, #12
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bc40:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	370c      	adds	r7, #12
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr

0800bc4e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc4e:	b580      	push	{r7, lr}
 800bc50:	b084      	sub	sp, #16
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
 800bc56:	460b      	mov	r3, r1
 800bc58:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d009      	beq.n	800bc7c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	78fa      	ldrb	r2, [r7, #3]
 800bc72:	4611      	mov	r1, r2
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	4798      	blx	r3
 800bc78:	4603      	mov	r3, r0
 800bc7a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bc7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3710      	adds	r7, #16
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}

0800bc86 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc86:	b580      	push	{r7, lr}
 800bc88:	b084      	sub	sp, #16
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
 800bc8e:	460b      	mov	r3, r1
 800bc90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc92:	2300      	movs	r3, #0
 800bc94:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	78fa      	ldrb	r2, [r7, #3]
 800bca0:	4611      	mov	r1, r2
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	4798      	blx	r3
 800bca6:	4603      	mov	r3, r0
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d001      	beq.n	800bcb0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bcac:	2303      	movs	r3, #3
 800bcae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bcb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3710      	adds	r7, #16
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}

0800bcba <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bcba:	b580      	push	{r7, lr}
 800bcbc:	b084      	sub	sp, #16
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	6078      	str	r0, [r7, #4]
 800bcc2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bcca:	6839      	ldr	r1, [r7, #0]
 800bccc:	4618      	mov	r0, r3
 800bcce:	f001 f8a6 	bl	800ce1e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bce0:	461a      	mov	r2, r3
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bcee:	f003 031f 	and.w	r3, r3, #31
 800bcf2:	2b02      	cmp	r3, #2
 800bcf4:	d01a      	beq.n	800bd2c <USBD_LL_SetupStage+0x72>
 800bcf6:	2b02      	cmp	r3, #2
 800bcf8:	d822      	bhi.n	800bd40 <USBD_LL_SetupStage+0x86>
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d002      	beq.n	800bd04 <USBD_LL_SetupStage+0x4a>
 800bcfe:	2b01      	cmp	r3, #1
 800bd00:	d00a      	beq.n	800bd18 <USBD_LL_SetupStage+0x5e>
 800bd02:	e01d      	b.n	800bd40 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bd0a:	4619      	mov	r1, r3
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f000 fad3 	bl	800c2b8 <USBD_StdDevReq>
 800bd12:	4603      	mov	r3, r0
 800bd14:	73fb      	strb	r3, [r7, #15]
      break;
 800bd16:	e020      	b.n	800bd5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bd1e:	4619      	mov	r1, r3
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f000 fb3b 	bl	800c39c <USBD_StdItfReq>
 800bd26:	4603      	mov	r3, r0
 800bd28:	73fb      	strb	r3, [r7, #15]
      break;
 800bd2a:	e016      	b.n	800bd5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bd32:	4619      	mov	r1, r3
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f000 fb9d 	bl	800c474 <USBD_StdEPReq>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	73fb      	strb	r3, [r7, #15]
      break;
 800bd3e:	e00c      	b.n	800bd5a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bd46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bd4a:	b2db      	uxtb	r3, r3
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f001 fdba 	bl	800d8c8 <USBD_LL_StallEP>
 800bd54:	4603      	mov	r3, r0
 800bd56:	73fb      	strb	r3, [r7, #15]
      break;
 800bd58:	bf00      	nop
  }

  return ret;
 800bd5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3710      	adds	r7, #16
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b086      	sub	sp, #24
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	60f8      	str	r0, [r7, #12]
 800bd6c:	460b      	mov	r3, r1
 800bd6e:	607a      	str	r2, [r7, #4]
 800bd70:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bd72:	2300      	movs	r3, #0
 800bd74:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800bd76:	7afb      	ldrb	r3, [r7, #11]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d16e      	bne.n	800be5a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bd82:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bd8a:	2b03      	cmp	r3, #3
 800bd8c:	f040 8098 	bne.w	800bec0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	689a      	ldr	r2, [r3, #8]
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d913      	bls.n	800bdc4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	689a      	ldr	r2, [r3, #8]
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	68db      	ldr	r3, [r3, #12]
 800bda4:	1ad2      	subs	r2, r2, r3
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	68da      	ldr	r2, [r3, #12]
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	689b      	ldr	r3, [r3, #8]
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	bf28      	it	cs
 800bdb6:	4613      	movcs	r3, r2
 800bdb8:	461a      	mov	r2, r3
 800bdba:	6879      	ldr	r1, [r7, #4]
 800bdbc:	68f8      	ldr	r0, [r7, #12]
 800bdbe:	f001 f922 	bl	800d006 <USBD_CtlContinueRx>
 800bdc2:	e07d      	b.n	800bec0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bdca:	f003 031f 	and.w	r3, r3, #31
 800bdce:	2b02      	cmp	r3, #2
 800bdd0:	d014      	beq.n	800bdfc <USBD_LL_DataOutStage+0x98>
 800bdd2:	2b02      	cmp	r3, #2
 800bdd4:	d81d      	bhi.n	800be12 <USBD_LL_DataOutStage+0xae>
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d002      	beq.n	800bde0 <USBD_LL_DataOutStage+0x7c>
 800bdda:	2b01      	cmp	r3, #1
 800bddc:	d003      	beq.n	800bde6 <USBD_LL_DataOutStage+0x82>
 800bdde:	e018      	b.n	800be12 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bde0:	2300      	movs	r3, #0
 800bde2:	75bb      	strb	r3, [r7, #22]
            break;
 800bde4:	e018      	b.n	800be18 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bdec:	b2db      	uxtb	r3, r3
 800bdee:	4619      	mov	r1, r3
 800bdf0:	68f8      	ldr	r0, [r7, #12]
 800bdf2:	f000 f9d2 	bl	800c19a <USBD_CoreFindIF>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	75bb      	strb	r3, [r7, #22]
            break;
 800bdfa:	e00d      	b.n	800be18 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800be02:	b2db      	uxtb	r3, r3
 800be04:	4619      	mov	r1, r3
 800be06:	68f8      	ldr	r0, [r7, #12]
 800be08:	f000 f9d4 	bl	800c1b4 <USBD_CoreFindEP>
 800be0c:	4603      	mov	r3, r0
 800be0e:	75bb      	strb	r3, [r7, #22]
            break;
 800be10:	e002      	b.n	800be18 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800be12:	2300      	movs	r3, #0
 800be14:	75bb      	strb	r3, [r7, #22]
            break;
 800be16:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800be18:	7dbb      	ldrb	r3, [r7, #22]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d119      	bne.n	800be52 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be24:	b2db      	uxtb	r3, r3
 800be26:	2b03      	cmp	r3, #3
 800be28:	d113      	bne.n	800be52 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800be2a:	7dba      	ldrb	r2, [r7, #22]
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	32ae      	adds	r2, #174	; 0xae
 800be30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be34:	691b      	ldr	r3, [r3, #16]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d00b      	beq.n	800be52 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800be3a:	7dba      	ldrb	r2, [r7, #22]
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800be42:	7dba      	ldrb	r2, [r7, #22]
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	32ae      	adds	r2, #174	; 0xae
 800be48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be4c:	691b      	ldr	r3, [r3, #16]
 800be4e:	68f8      	ldr	r0, [r7, #12]
 800be50:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800be52:	68f8      	ldr	r0, [r7, #12]
 800be54:	f001 f8e8 	bl	800d028 <USBD_CtlSendStatus>
 800be58:	e032      	b.n	800bec0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800be5a:	7afb      	ldrb	r3, [r7, #11]
 800be5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be60:	b2db      	uxtb	r3, r3
 800be62:	4619      	mov	r1, r3
 800be64:	68f8      	ldr	r0, [r7, #12]
 800be66:	f000 f9a5 	bl	800c1b4 <USBD_CoreFindEP>
 800be6a:	4603      	mov	r3, r0
 800be6c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be6e:	7dbb      	ldrb	r3, [r7, #22]
 800be70:	2bff      	cmp	r3, #255	; 0xff
 800be72:	d025      	beq.n	800bec0 <USBD_LL_DataOutStage+0x15c>
 800be74:	7dbb      	ldrb	r3, [r7, #22]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d122      	bne.n	800bec0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be80:	b2db      	uxtb	r3, r3
 800be82:	2b03      	cmp	r3, #3
 800be84:	d117      	bne.n	800beb6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800be86:	7dba      	ldrb	r2, [r7, #22]
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	32ae      	adds	r2, #174	; 0xae
 800be8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be90:	699b      	ldr	r3, [r3, #24]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d00f      	beq.n	800beb6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800be96:	7dba      	ldrb	r2, [r7, #22]
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800be9e:	7dba      	ldrb	r2, [r7, #22]
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	32ae      	adds	r2, #174	; 0xae
 800bea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bea8:	699b      	ldr	r3, [r3, #24]
 800beaa:	7afa      	ldrb	r2, [r7, #11]
 800beac:	4611      	mov	r1, r2
 800beae:	68f8      	ldr	r0, [r7, #12]
 800beb0:	4798      	blx	r3
 800beb2:	4603      	mov	r3, r0
 800beb4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800beb6:	7dfb      	ldrb	r3, [r7, #23]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d001      	beq.n	800bec0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bebc:	7dfb      	ldrb	r3, [r7, #23]
 800bebe:	e000      	b.n	800bec2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bec0:	2300      	movs	r3, #0
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3718      	adds	r7, #24
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}

0800beca <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800beca:	b580      	push	{r7, lr}
 800becc:	b086      	sub	sp, #24
 800bece:	af00      	add	r7, sp, #0
 800bed0:	60f8      	str	r0, [r7, #12]
 800bed2:	460b      	mov	r3, r1
 800bed4:	607a      	str	r2, [r7, #4]
 800bed6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bed8:	7afb      	ldrb	r3, [r7, #11]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d16f      	bne.n	800bfbe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	3314      	adds	r3, #20
 800bee2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800beea:	2b02      	cmp	r3, #2
 800beec:	d15a      	bne.n	800bfa4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	689a      	ldr	r2, [r3, #8]
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	68db      	ldr	r3, [r3, #12]
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d914      	bls.n	800bf24 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	689a      	ldr	r2, [r3, #8]
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	68db      	ldr	r3, [r3, #12]
 800bf02:	1ad2      	subs	r2, r2, r3
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	689b      	ldr	r3, [r3, #8]
 800bf0c:	461a      	mov	r2, r3
 800bf0e:	6879      	ldr	r1, [r7, #4]
 800bf10:	68f8      	ldr	r0, [r7, #12]
 800bf12:	f001 f84a 	bl	800cfaa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf16:	2300      	movs	r3, #0
 800bf18:	2200      	movs	r2, #0
 800bf1a:	2100      	movs	r1, #0
 800bf1c:	68f8      	ldr	r0, [r7, #12]
 800bf1e:	f001 fd7e 	bl	800da1e <USBD_LL_PrepareReceive>
 800bf22:	e03f      	b.n	800bfa4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	68da      	ldr	r2, [r3, #12]
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	689b      	ldr	r3, [r3, #8]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d11c      	bne.n	800bf6a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	685a      	ldr	r2, [r3, #4]
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	d316      	bcc.n	800bf6a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	685a      	ldr	r2, [r3, #4]
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d20f      	bcs.n	800bf6a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	2100      	movs	r1, #0
 800bf4e:	68f8      	ldr	r0, [r7, #12]
 800bf50:	f001 f82b 	bl	800cfaa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2200      	movs	r2, #0
 800bf58:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	2200      	movs	r2, #0
 800bf60:	2100      	movs	r1, #0
 800bf62:	68f8      	ldr	r0, [r7, #12]
 800bf64:	f001 fd5b 	bl	800da1e <USBD_LL_PrepareReceive>
 800bf68:	e01c      	b.n	800bfa4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf70:	b2db      	uxtb	r3, r3
 800bf72:	2b03      	cmp	r3, #3
 800bf74:	d10f      	bne.n	800bf96 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf7c:	68db      	ldr	r3, [r3, #12]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d009      	beq.n	800bf96 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2200      	movs	r2, #0
 800bf86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf90:	68db      	ldr	r3, [r3, #12]
 800bf92:	68f8      	ldr	r0, [r7, #12]
 800bf94:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf96:	2180      	movs	r1, #128	; 0x80
 800bf98:	68f8      	ldr	r0, [r7, #12]
 800bf9a:	f001 fc95 	bl	800d8c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bf9e:	68f8      	ldr	r0, [r7, #12]
 800bfa0:	f001 f855 	bl	800d04e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d03a      	beq.n	800c024 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bfae:	68f8      	ldr	r0, [r7, #12]
 800bfb0:	f7ff fe42 	bl	800bc38 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bfbc:	e032      	b.n	800c024 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bfbe:	7afb      	ldrb	r3, [r7, #11]
 800bfc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bfc4:	b2db      	uxtb	r3, r3
 800bfc6:	4619      	mov	r1, r3
 800bfc8:	68f8      	ldr	r0, [r7, #12]
 800bfca:	f000 f8f3 	bl	800c1b4 <USBD_CoreFindEP>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bfd2:	7dfb      	ldrb	r3, [r7, #23]
 800bfd4:	2bff      	cmp	r3, #255	; 0xff
 800bfd6:	d025      	beq.n	800c024 <USBD_LL_DataInStage+0x15a>
 800bfd8:	7dfb      	ldrb	r3, [r7, #23]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d122      	bne.n	800c024 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfe4:	b2db      	uxtb	r3, r3
 800bfe6:	2b03      	cmp	r3, #3
 800bfe8:	d11c      	bne.n	800c024 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bfea:	7dfa      	ldrb	r2, [r7, #23]
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	32ae      	adds	r2, #174	; 0xae
 800bff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bff4:	695b      	ldr	r3, [r3, #20]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d014      	beq.n	800c024 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bffa:	7dfa      	ldrb	r2, [r7, #23]
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c002:	7dfa      	ldrb	r2, [r7, #23]
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	32ae      	adds	r2, #174	; 0xae
 800c008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c00c:	695b      	ldr	r3, [r3, #20]
 800c00e:	7afa      	ldrb	r2, [r7, #11]
 800c010:	4611      	mov	r1, r2
 800c012:	68f8      	ldr	r0, [r7, #12]
 800c014:	4798      	blx	r3
 800c016:	4603      	mov	r3, r0
 800c018:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c01a:	7dbb      	ldrb	r3, [r7, #22]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d001      	beq.n	800c024 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c020:	7dbb      	ldrb	r3, [r7, #22]
 800c022:	e000      	b.n	800c026 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c024:	2300      	movs	r3, #0
}
 800c026:	4618      	mov	r0, r3
 800c028:	3718      	adds	r7, #24
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}

0800c02e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c02e:	b580      	push	{r7, lr}
 800c030:	b084      	sub	sp, #16
 800c032:	af00      	add	r7, sp, #0
 800c034:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c036:	2300      	movs	r3, #0
 800c038:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2201      	movs	r2, #1
 800c03e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2200      	movs	r2, #0
 800c04e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2200      	movs	r2, #0
 800c054:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2200      	movs	r2, #0
 800c05c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c066:	2b00      	cmp	r3, #0
 800c068:	d014      	beq.n	800c094 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c070:	685b      	ldr	r3, [r3, #4]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d00e      	beq.n	800c094 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	687a      	ldr	r2, [r7, #4]
 800c080:	6852      	ldr	r2, [r2, #4]
 800c082:	b2d2      	uxtb	r2, r2
 800c084:	4611      	mov	r1, r2
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	4798      	blx	r3
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d001      	beq.n	800c094 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c090:	2303      	movs	r3, #3
 800c092:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c094:	2340      	movs	r3, #64	; 0x40
 800c096:	2200      	movs	r2, #0
 800c098:	2100      	movs	r1, #0
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f001 fbcf 	bl	800d83e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2240      	movs	r2, #64	; 0x40
 800c0ac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c0b0:	2340      	movs	r3, #64	; 0x40
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	2180      	movs	r1, #128	; 0x80
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f001 fbc1 	bl	800d83e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2201      	movs	r2, #1
 800c0c0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2240      	movs	r2, #64	; 0x40
 800c0c6:	621a      	str	r2, [r3, #32]

  return ret;
 800c0c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3710      	adds	r7, #16
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}

0800c0d2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c0d2:	b480      	push	{r7}
 800c0d4:	b083      	sub	sp, #12
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	6078      	str	r0, [r7, #4]
 800c0da:	460b      	mov	r3, r1
 800c0dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	78fa      	ldrb	r2, [r7, #3]
 800c0e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c0e4:	2300      	movs	r3, #0
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	370c      	adds	r7, #12
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f0:	4770      	bx	lr

0800c0f2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c0f2:	b480      	push	{r7}
 800c0f4:	b083      	sub	sp, #12
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c100:	b2db      	uxtb	r3, r3
 800c102:	2b04      	cmp	r3, #4
 800c104:	d006      	beq.n	800c114 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c10c:	b2da      	uxtb	r2, r3
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2204      	movs	r2, #4
 800c118:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c11c:	2300      	movs	r3, #0
}
 800c11e:	4618      	mov	r0, r3
 800c120:	370c      	adds	r7, #12
 800c122:	46bd      	mov	sp, r7
 800c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c128:	4770      	bx	lr

0800c12a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c12a:	b480      	push	{r7}
 800c12c:	b083      	sub	sp, #12
 800c12e:	af00      	add	r7, sp, #0
 800c130:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c138:	b2db      	uxtb	r3, r3
 800c13a:	2b04      	cmp	r3, #4
 800c13c:	d106      	bne.n	800c14c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c144:	b2da      	uxtb	r2, r3
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c14c:	2300      	movs	r3, #0
}
 800c14e:	4618      	mov	r0, r3
 800c150:	370c      	adds	r7, #12
 800c152:	46bd      	mov	sp, r7
 800c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c158:	4770      	bx	lr

0800c15a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b082      	sub	sp, #8
 800c15e:	af00      	add	r7, sp, #0
 800c160:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	2b03      	cmp	r3, #3
 800c16c:	d110      	bne.n	800c190 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c174:	2b00      	cmp	r3, #0
 800c176:	d00b      	beq.n	800c190 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c17e:	69db      	ldr	r3, [r3, #28]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d005      	beq.n	800c190 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c18a:	69db      	ldr	r3, [r3, #28]
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c190:	2300      	movs	r3, #0
}
 800c192:	4618      	mov	r0, r3
 800c194:	3708      	adds	r7, #8
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}

0800c19a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c19a:	b480      	push	{r7}
 800c19c:	b083      	sub	sp, #12
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c1a6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	370c      	adds	r7, #12
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b2:	4770      	bx	lr

0800c1b4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b083      	sub	sp, #12
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	460b      	mov	r3, r1
 800c1be:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c1c0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	370c      	adds	r7, #12
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr

0800c1ce <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c1ce:	b580      	push	{r7, lr}
 800c1d0:	b086      	sub	sp, #24
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	6078      	str	r0, [r7, #4]
 800c1d6:	460b      	mov	r3, r1
 800c1d8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	885b      	ldrh	r3, [r3, #2]
 800c1ea:	b29a      	uxth	r2, r3
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	781b      	ldrb	r3, [r3, #0]
 800c1f0:	b29b      	uxth	r3, r3
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d920      	bls.n	800c238 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	781b      	ldrb	r3, [r3, #0]
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c1fe:	e013      	b.n	800c228 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c200:	f107 030a 	add.w	r3, r7, #10
 800c204:	4619      	mov	r1, r3
 800c206:	6978      	ldr	r0, [r7, #20]
 800c208:	f000 f81b 	bl	800c242 <USBD_GetNextDesc>
 800c20c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	785b      	ldrb	r3, [r3, #1]
 800c212:	2b05      	cmp	r3, #5
 800c214:	d108      	bne.n	800c228 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	789b      	ldrb	r3, [r3, #2]
 800c21e:	78fa      	ldrb	r2, [r7, #3]
 800c220:	429a      	cmp	r2, r3
 800c222:	d008      	beq.n	800c236 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c224:	2300      	movs	r3, #0
 800c226:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	885b      	ldrh	r3, [r3, #2]
 800c22c:	b29a      	uxth	r2, r3
 800c22e:	897b      	ldrh	r3, [r7, #10]
 800c230:	429a      	cmp	r2, r3
 800c232:	d8e5      	bhi.n	800c200 <USBD_GetEpDesc+0x32>
 800c234:	e000      	b.n	800c238 <USBD_GetEpDesc+0x6a>
          break;
 800c236:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c238:	693b      	ldr	r3, [r7, #16]
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3718      	adds	r7, #24
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}

0800c242 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c242:	b480      	push	{r7}
 800c244:	b085      	sub	sp, #20
 800c246:	af00      	add	r7, sp, #0
 800c248:	6078      	str	r0, [r7, #4]
 800c24a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	881a      	ldrh	r2, [r3, #0]
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	b29b      	uxth	r3, r3
 800c25a:	4413      	add	r3, r2
 800c25c:	b29a      	uxth	r2, r3
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	461a      	mov	r2, r3
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	4413      	add	r3, r2
 800c26c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c26e:	68fb      	ldr	r3, [r7, #12]
}
 800c270:	4618      	mov	r0, r3
 800c272:	3714      	adds	r7, #20
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr

0800c27c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c27c:	b480      	push	{r7}
 800c27e:	b087      	sub	sp, #28
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	3301      	adds	r3, #1
 800c292:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c29a:	8a3b      	ldrh	r3, [r7, #16]
 800c29c:	021b      	lsls	r3, r3, #8
 800c29e:	b21a      	sxth	r2, r3
 800c2a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c2a4:	4313      	orrs	r3, r2
 800c2a6:	b21b      	sxth	r3, r3
 800c2a8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c2aa:	89fb      	ldrh	r3, [r7, #14]
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	371c      	adds	r7, #28
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b6:	4770      	bx	lr

0800c2b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b084      	sub	sp, #16
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c2ce:	2b40      	cmp	r3, #64	; 0x40
 800c2d0:	d005      	beq.n	800c2de <USBD_StdDevReq+0x26>
 800c2d2:	2b40      	cmp	r3, #64	; 0x40
 800c2d4:	d857      	bhi.n	800c386 <USBD_StdDevReq+0xce>
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d00f      	beq.n	800c2fa <USBD_StdDevReq+0x42>
 800c2da:	2b20      	cmp	r3, #32
 800c2dc:	d153      	bne.n	800c386 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	32ae      	adds	r2, #174	; 0xae
 800c2e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2ec:	689b      	ldr	r3, [r3, #8]
 800c2ee:	6839      	ldr	r1, [r7, #0]
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	4798      	blx	r3
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	73fb      	strb	r3, [r7, #15]
      break;
 800c2f8:	e04a      	b.n	800c390 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	785b      	ldrb	r3, [r3, #1]
 800c2fe:	2b09      	cmp	r3, #9
 800c300:	d83b      	bhi.n	800c37a <USBD_StdDevReq+0xc2>
 800c302:	a201      	add	r2, pc, #4	; (adr r2, 800c308 <USBD_StdDevReq+0x50>)
 800c304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c308:	0800c35d 	.word	0x0800c35d
 800c30c:	0800c371 	.word	0x0800c371
 800c310:	0800c37b 	.word	0x0800c37b
 800c314:	0800c367 	.word	0x0800c367
 800c318:	0800c37b 	.word	0x0800c37b
 800c31c:	0800c33b 	.word	0x0800c33b
 800c320:	0800c331 	.word	0x0800c331
 800c324:	0800c37b 	.word	0x0800c37b
 800c328:	0800c353 	.word	0x0800c353
 800c32c:	0800c345 	.word	0x0800c345
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c330:	6839      	ldr	r1, [r7, #0]
 800c332:	6878      	ldr	r0, [r7, #4]
 800c334:	f000 fa3c 	bl	800c7b0 <USBD_GetDescriptor>
          break;
 800c338:	e024      	b.n	800c384 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c33a:	6839      	ldr	r1, [r7, #0]
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f000 fbcb 	bl	800cad8 <USBD_SetAddress>
          break;
 800c342:	e01f      	b.n	800c384 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c344:	6839      	ldr	r1, [r7, #0]
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 fc0a 	bl	800cb60 <USBD_SetConfig>
 800c34c:	4603      	mov	r3, r0
 800c34e:	73fb      	strb	r3, [r7, #15]
          break;
 800c350:	e018      	b.n	800c384 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c352:	6839      	ldr	r1, [r7, #0]
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f000 fcad 	bl	800ccb4 <USBD_GetConfig>
          break;
 800c35a:	e013      	b.n	800c384 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c35c:	6839      	ldr	r1, [r7, #0]
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f000 fcde 	bl	800cd20 <USBD_GetStatus>
          break;
 800c364:	e00e      	b.n	800c384 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c366:	6839      	ldr	r1, [r7, #0]
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f000 fd0d 	bl	800cd88 <USBD_SetFeature>
          break;
 800c36e:	e009      	b.n	800c384 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c370:	6839      	ldr	r1, [r7, #0]
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f000 fd31 	bl	800cdda <USBD_ClrFeature>
          break;
 800c378:	e004      	b.n	800c384 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c37a:	6839      	ldr	r1, [r7, #0]
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f000 fd88 	bl	800ce92 <USBD_CtlError>
          break;
 800c382:	bf00      	nop
      }
      break;
 800c384:	e004      	b.n	800c390 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c386:	6839      	ldr	r1, [r7, #0]
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f000 fd82 	bl	800ce92 <USBD_CtlError>
      break;
 800c38e:	bf00      	nop
  }

  return ret;
 800c390:	7bfb      	ldrb	r3, [r7, #15]
}
 800c392:	4618      	mov	r0, r3
 800c394:	3710      	adds	r7, #16
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}
 800c39a:	bf00      	nop

0800c39c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b084      	sub	sp, #16
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c3b2:	2b40      	cmp	r3, #64	; 0x40
 800c3b4:	d005      	beq.n	800c3c2 <USBD_StdItfReq+0x26>
 800c3b6:	2b40      	cmp	r3, #64	; 0x40
 800c3b8:	d852      	bhi.n	800c460 <USBD_StdItfReq+0xc4>
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d001      	beq.n	800c3c2 <USBD_StdItfReq+0x26>
 800c3be:	2b20      	cmp	r3, #32
 800c3c0:	d14e      	bne.n	800c460 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3c8:	b2db      	uxtb	r3, r3
 800c3ca:	3b01      	subs	r3, #1
 800c3cc:	2b02      	cmp	r3, #2
 800c3ce:	d840      	bhi.n	800c452 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	889b      	ldrh	r3, [r3, #4]
 800c3d4:	b2db      	uxtb	r3, r3
 800c3d6:	2b01      	cmp	r3, #1
 800c3d8:	d836      	bhi.n	800c448 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	889b      	ldrh	r3, [r3, #4]
 800c3de:	b2db      	uxtb	r3, r3
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f7ff fed9 	bl	800c19a <USBD_CoreFindIF>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c3ec:	7bbb      	ldrb	r3, [r7, #14]
 800c3ee:	2bff      	cmp	r3, #255	; 0xff
 800c3f0:	d01d      	beq.n	800c42e <USBD_StdItfReq+0x92>
 800c3f2:	7bbb      	ldrb	r3, [r7, #14]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d11a      	bne.n	800c42e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c3f8:	7bba      	ldrb	r2, [r7, #14]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	32ae      	adds	r2, #174	; 0xae
 800c3fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c402:	689b      	ldr	r3, [r3, #8]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d00f      	beq.n	800c428 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c408:	7bba      	ldrb	r2, [r7, #14]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c410:	7bba      	ldrb	r2, [r7, #14]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	32ae      	adds	r2, #174	; 0xae
 800c416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c41a:	689b      	ldr	r3, [r3, #8]
 800c41c:	6839      	ldr	r1, [r7, #0]
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	4798      	blx	r3
 800c422:	4603      	mov	r3, r0
 800c424:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c426:	e004      	b.n	800c432 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c428:	2303      	movs	r3, #3
 800c42a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c42c:	e001      	b.n	800c432 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c42e:	2303      	movs	r3, #3
 800c430:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	88db      	ldrh	r3, [r3, #6]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d110      	bne.n	800c45c <USBD_StdItfReq+0xc0>
 800c43a:	7bfb      	ldrb	r3, [r7, #15]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d10d      	bne.n	800c45c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f000 fdf1 	bl	800d028 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c446:	e009      	b.n	800c45c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c448:	6839      	ldr	r1, [r7, #0]
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f000 fd21 	bl	800ce92 <USBD_CtlError>
          break;
 800c450:	e004      	b.n	800c45c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c452:	6839      	ldr	r1, [r7, #0]
 800c454:	6878      	ldr	r0, [r7, #4]
 800c456:	f000 fd1c 	bl	800ce92 <USBD_CtlError>
          break;
 800c45a:	e000      	b.n	800c45e <USBD_StdItfReq+0xc2>
          break;
 800c45c:	bf00      	nop
      }
      break;
 800c45e:	e004      	b.n	800c46a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c460:	6839      	ldr	r1, [r7, #0]
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f000 fd15 	bl	800ce92 <USBD_CtlError>
      break;
 800c468:	bf00      	nop
  }

  return ret;
 800c46a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	3710      	adds	r7, #16
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}

0800c474 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b084      	sub	sp, #16
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c47e:	2300      	movs	r3, #0
 800c480:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	889b      	ldrh	r3, [r3, #4]
 800c486:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	781b      	ldrb	r3, [r3, #0]
 800c48c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c490:	2b40      	cmp	r3, #64	; 0x40
 800c492:	d007      	beq.n	800c4a4 <USBD_StdEPReq+0x30>
 800c494:	2b40      	cmp	r3, #64	; 0x40
 800c496:	f200 817f 	bhi.w	800c798 <USBD_StdEPReq+0x324>
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d02a      	beq.n	800c4f4 <USBD_StdEPReq+0x80>
 800c49e:	2b20      	cmp	r3, #32
 800c4a0:	f040 817a 	bne.w	800c798 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c4a4:	7bbb      	ldrb	r3, [r7, #14]
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f7ff fe83 	bl	800c1b4 <USBD_CoreFindEP>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c4b2:	7b7b      	ldrb	r3, [r7, #13]
 800c4b4:	2bff      	cmp	r3, #255	; 0xff
 800c4b6:	f000 8174 	beq.w	800c7a2 <USBD_StdEPReq+0x32e>
 800c4ba:	7b7b      	ldrb	r3, [r7, #13]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	f040 8170 	bne.w	800c7a2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c4c2:	7b7a      	ldrb	r2, [r7, #13]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c4ca:	7b7a      	ldrb	r2, [r7, #13]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	32ae      	adds	r2, #174	; 0xae
 800c4d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4d4:	689b      	ldr	r3, [r3, #8]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	f000 8163 	beq.w	800c7a2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c4dc:	7b7a      	ldrb	r2, [r7, #13]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	32ae      	adds	r2, #174	; 0xae
 800c4e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4e6:	689b      	ldr	r3, [r3, #8]
 800c4e8:	6839      	ldr	r1, [r7, #0]
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	4798      	blx	r3
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c4f2:	e156      	b.n	800c7a2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	785b      	ldrb	r3, [r3, #1]
 800c4f8:	2b03      	cmp	r3, #3
 800c4fa:	d008      	beq.n	800c50e <USBD_StdEPReq+0x9a>
 800c4fc:	2b03      	cmp	r3, #3
 800c4fe:	f300 8145 	bgt.w	800c78c <USBD_StdEPReq+0x318>
 800c502:	2b00      	cmp	r3, #0
 800c504:	f000 809b 	beq.w	800c63e <USBD_StdEPReq+0x1ca>
 800c508:	2b01      	cmp	r3, #1
 800c50a:	d03c      	beq.n	800c586 <USBD_StdEPReq+0x112>
 800c50c:	e13e      	b.n	800c78c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c514:	b2db      	uxtb	r3, r3
 800c516:	2b02      	cmp	r3, #2
 800c518:	d002      	beq.n	800c520 <USBD_StdEPReq+0xac>
 800c51a:	2b03      	cmp	r3, #3
 800c51c:	d016      	beq.n	800c54c <USBD_StdEPReq+0xd8>
 800c51e:	e02c      	b.n	800c57a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c520:	7bbb      	ldrb	r3, [r7, #14]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d00d      	beq.n	800c542 <USBD_StdEPReq+0xce>
 800c526:	7bbb      	ldrb	r3, [r7, #14]
 800c528:	2b80      	cmp	r3, #128	; 0x80
 800c52a:	d00a      	beq.n	800c542 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c52c:	7bbb      	ldrb	r3, [r7, #14]
 800c52e:	4619      	mov	r1, r3
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f001 f9c9 	bl	800d8c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c536:	2180      	movs	r1, #128	; 0x80
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f001 f9c5 	bl	800d8c8 <USBD_LL_StallEP>
 800c53e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c540:	e020      	b.n	800c584 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c542:	6839      	ldr	r1, [r7, #0]
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f000 fca4 	bl	800ce92 <USBD_CtlError>
              break;
 800c54a:	e01b      	b.n	800c584 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	885b      	ldrh	r3, [r3, #2]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d10e      	bne.n	800c572 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c554:	7bbb      	ldrb	r3, [r7, #14]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d00b      	beq.n	800c572 <USBD_StdEPReq+0xfe>
 800c55a:	7bbb      	ldrb	r3, [r7, #14]
 800c55c:	2b80      	cmp	r3, #128	; 0x80
 800c55e:	d008      	beq.n	800c572 <USBD_StdEPReq+0xfe>
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	88db      	ldrh	r3, [r3, #6]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d104      	bne.n	800c572 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c568:	7bbb      	ldrb	r3, [r7, #14]
 800c56a:	4619      	mov	r1, r3
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f001 f9ab 	bl	800d8c8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f000 fd58 	bl	800d028 <USBD_CtlSendStatus>

              break;
 800c578:	e004      	b.n	800c584 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c57a:	6839      	ldr	r1, [r7, #0]
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f000 fc88 	bl	800ce92 <USBD_CtlError>
              break;
 800c582:	bf00      	nop
          }
          break;
 800c584:	e107      	b.n	800c796 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c58c:	b2db      	uxtb	r3, r3
 800c58e:	2b02      	cmp	r3, #2
 800c590:	d002      	beq.n	800c598 <USBD_StdEPReq+0x124>
 800c592:	2b03      	cmp	r3, #3
 800c594:	d016      	beq.n	800c5c4 <USBD_StdEPReq+0x150>
 800c596:	e04b      	b.n	800c630 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c598:	7bbb      	ldrb	r3, [r7, #14]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d00d      	beq.n	800c5ba <USBD_StdEPReq+0x146>
 800c59e:	7bbb      	ldrb	r3, [r7, #14]
 800c5a0:	2b80      	cmp	r3, #128	; 0x80
 800c5a2:	d00a      	beq.n	800c5ba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c5a4:	7bbb      	ldrb	r3, [r7, #14]
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f001 f98d 	bl	800d8c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c5ae:	2180      	movs	r1, #128	; 0x80
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f001 f989 	bl	800d8c8 <USBD_LL_StallEP>
 800c5b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c5b8:	e040      	b.n	800c63c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c5ba:	6839      	ldr	r1, [r7, #0]
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f000 fc68 	bl	800ce92 <USBD_CtlError>
              break;
 800c5c2:	e03b      	b.n	800c63c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	885b      	ldrh	r3, [r3, #2]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d136      	bne.n	800c63a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c5cc:	7bbb      	ldrb	r3, [r7, #14]
 800c5ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d004      	beq.n	800c5e0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c5d6:	7bbb      	ldrb	r3, [r7, #14]
 800c5d8:	4619      	mov	r1, r3
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f001 f993 	bl	800d906 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f000 fd21 	bl	800d028 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c5e6:	7bbb      	ldrb	r3, [r7, #14]
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f7ff fde2 	bl	800c1b4 <USBD_CoreFindEP>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c5f4:	7b7b      	ldrb	r3, [r7, #13]
 800c5f6:	2bff      	cmp	r3, #255	; 0xff
 800c5f8:	d01f      	beq.n	800c63a <USBD_StdEPReq+0x1c6>
 800c5fa:	7b7b      	ldrb	r3, [r7, #13]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d11c      	bne.n	800c63a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c600:	7b7a      	ldrb	r2, [r7, #13]
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c608:	7b7a      	ldrb	r2, [r7, #13]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	32ae      	adds	r2, #174	; 0xae
 800c60e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c612:	689b      	ldr	r3, [r3, #8]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d010      	beq.n	800c63a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c618:	7b7a      	ldrb	r2, [r7, #13]
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	32ae      	adds	r2, #174	; 0xae
 800c61e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	6839      	ldr	r1, [r7, #0]
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	4798      	blx	r3
 800c62a:	4603      	mov	r3, r0
 800c62c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c62e:	e004      	b.n	800c63a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c630:	6839      	ldr	r1, [r7, #0]
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f000 fc2d 	bl	800ce92 <USBD_CtlError>
              break;
 800c638:	e000      	b.n	800c63c <USBD_StdEPReq+0x1c8>
              break;
 800c63a:	bf00      	nop
          }
          break;
 800c63c:	e0ab      	b.n	800c796 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c644:	b2db      	uxtb	r3, r3
 800c646:	2b02      	cmp	r3, #2
 800c648:	d002      	beq.n	800c650 <USBD_StdEPReq+0x1dc>
 800c64a:	2b03      	cmp	r3, #3
 800c64c:	d032      	beq.n	800c6b4 <USBD_StdEPReq+0x240>
 800c64e:	e097      	b.n	800c780 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c650:	7bbb      	ldrb	r3, [r7, #14]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d007      	beq.n	800c666 <USBD_StdEPReq+0x1f2>
 800c656:	7bbb      	ldrb	r3, [r7, #14]
 800c658:	2b80      	cmp	r3, #128	; 0x80
 800c65a:	d004      	beq.n	800c666 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c65c:	6839      	ldr	r1, [r7, #0]
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f000 fc17 	bl	800ce92 <USBD_CtlError>
                break;
 800c664:	e091      	b.n	800c78a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c666:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	da0b      	bge.n	800c686 <USBD_StdEPReq+0x212>
 800c66e:	7bbb      	ldrb	r3, [r7, #14]
 800c670:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c674:	4613      	mov	r3, r2
 800c676:	009b      	lsls	r3, r3, #2
 800c678:	4413      	add	r3, r2
 800c67a:	009b      	lsls	r3, r3, #2
 800c67c:	3310      	adds	r3, #16
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	4413      	add	r3, r2
 800c682:	3304      	adds	r3, #4
 800c684:	e00b      	b.n	800c69e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c686:	7bbb      	ldrb	r3, [r7, #14]
 800c688:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c68c:	4613      	mov	r3, r2
 800c68e:	009b      	lsls	r3, r3, #2
 800c690:	4413      	add	r3, r2
 800c692:	009b      	lsls	r3, r3, #2
 800c694:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c698:	687a      	ldr	r2, [r7, #4]
 800c69a:	4413      	add	r3, r2
 800c69c:	3304      	adds	r3, #4
 800c69e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	2202      	movs	r2, #2
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f000 fc61 	bl	800cf74 <USBD_CtlSendData>
              break;
 800c6b2:	e06a      	b.n	800c78a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c6b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	da11      	bge.n	800c6e0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c6bc:	7bbb      	ldrb	r3, [r7, #14]
 800c6be:	f003 020f 	and.w	r2, r3, #15
 800c6c2:	6879      	ldr	r1, [r7, #4]
 800c6c4:	4613      	mov	r3, r2
 800c6c6:	009b      	lsls	r3, r3, #2
 800c6c8:	4413      	add	r3, r2
 800c6ca:	009b      	lsls	r3, r3, #2
 800c6cc:	440b      	add	r3, r1
 800c6ce:	3324      	adds	r3, #36	; 0x24
 800c6d0:	881b      	ldrh	r3, [r3, #0]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d117      	bne.n	800c706 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c6d6:	6839      	ldr	r1, [r7, #0]
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f000 fbda 	bl	800ce92 <USBD_CtlError>
                  break;
 800c6de:	e054      	b.n	800c78a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c6e0:	7bbb      	ldrb	r3, [r7, #14]
 800c6e2:	f003 020f 	and.w	r2, r3, #15
 800c6e6:	6879      	ldr	r1, [r7, #4]
 800c6e8:	4613      	mov	r3, r2
 800c6ea:	009b      	lsls	r3, r3, #2
 800c6ec:	4413      	add	r3, r2
 800c6ee:	009b      	lsls	r3, r3, #2
 800c6f0:	440b      	add	r3, r1
 800c6f2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c6f6:	881b      	ldrh	r3, [r3, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d104      	bne.n	800c706 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c6fc:	6839      	ldr	r1, [r7, #0]
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f000 fbc7 	bl	800ce92 <USBD_CtlError>
                  break;
 800c704:	e041      	b.n	800c78a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c706:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	da0b      	bge.n	800c726 <USBD_StdEPReq+0x2b2>
 800c70e:	7bbb      	ldrb	r3, [r7, #14]
 800c710:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c714:	4613      	mov	r3, r2
 800c716:	009b      	lsls	r3, r3, #2
 800c718:	4413      	add	r3, r2
 800c71a:	009b      	lsls	r3, r3, #2
 800c71c:	3310      	adds	r3, #16
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	4413      	add	r3, r2
 800c722:	3304      	adds	r3, #4
 800c724:	e00b      	b.n	800c73e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c726:	7bbb      	ldrb	r3, [r7, #14]
 800c728:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c72c:	4613      	mov	r3, r2
 800c72e:	009b      	lsls	r3, r3, #2
 800c730:	4413      	add	r3, r2
 800c732:	009b      	lsls	r3, r3, #2
 800c734:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c738:	687a      	ldr	r2, [r7, #4]
 800c73a:	4413      	add	r3, r2
 800c73c:	3304      	adds	r3, #4
 800c73e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c740:	7bbb      	ldrb	r3, [r7, #14]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d002      	beq.n	800c74c <USBD_StdEPReq+0x2d8>
 800c746:	7bbb      	ldrb	r3, [r7, #14]
 800c748:	2b80      	cmp	r3, #128	; 0x80
 800c74a:	d103      	bne.n	800c754 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	2200      	movs	r2, #0
 800c750:	601a      	str	r2, [r3, #0]
 800c752:	e00e      	b.n	800c772 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c754:	7bbb      	ldrb	r3, [r7, #14]
 800c756:	4619      	mov	r1, r3
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f001 f8f3 	bl	800d944 <USBD_LL_IsStallEP>
 800c75e:	4603      	mov	r3, r0
 800c760:	2b00      	cmp	r3, #0
 800c762:	d003      	beq.n	800c76c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	2201      	movs	r2, #1
 800c768:	601a      	str	r2, [r3, #0]
 800c76a:	e002      	b.n	800c772 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	2200      	movs	r2, #0
 800c770:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	2202      	movs	r2, #2
 800c776:	4619      	mov	r1, r3
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f000 fbfb 	bl	800cf74 <USBD_CtlSendData>
              break;
 800c77e:	e004      	b.n	800c78a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c780:	6839      	ldr	r1, [r7, #0]
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f000 fb85 	bl	800ce92 <USBD_CtlError>
              break;
 800c788:	bf00      	nop
          }
          break;
 800c78a:	e004      	b.n	800c796 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c78c:	6839      	ldr	r1, [r7, #0]
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 fb7f 	bl	800ce92 <USBD_CtlError>
          break;
 800c794:	bf00      	nop
      }
      break;
 800c796:	e005      	b.n	800c7a4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c798:	6839      	ldr	r1, [r7, #0]
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f000 fb79 	bl	800ce92 <USBD_CtlError>
      break;
 800c7a0:	e000      	b.n	800c7a4 <USBD_StdEPReq+0x330>
      break;
 800c7a2:	bf00      	nop
  }

  return ret;
 800c7a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3710      	adds	r7, #16
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
	...

0800c7b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b084      	sub	sp, #16
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	885b      	ldrh	r3, [r3, #2]
 800c7ca:	0a1b      	lsrs	r3, r3, #8
 800c7cc:	b29b      	uxth	r3, r3
 800c7ce:	3b01      	subs	r3, #1
 800c7d0:	2b0e      	cmp	r3, #14
 800c7d2:	f200 8152 	bhi.w	800ca7a <USBD_GetDescriptor+0x2ca>
 800c7d6:	a201      	add	r2, pc, #4	; (adr r2, 800c7dc <USBD_GetDescriptor+0x2c>)
 800c7d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7dc:	0800c84d 	.word	0x0800c84d
 800c7e0:	0800c865 	.word	0x0800c865
 800c7e4:	0800c8a5 	.word	0x0800c8a5
 800c7e8:	0800ca7b 	.word	0x0800ca7b
 800c7ec:	0800ca7b 	.word	0x0800ca7b
 800c7f0:	0800ca1b 	.word	0x0800ca1b
 800c7f4:	0800ca47 	.word	0x0800ca47
 800c7f8:	0800ca7b 	.word	0x0800ca7b
 800c7fc:	0800ca7b 	.word	0x0800ca7b
 800c800:	0800ca7b 	.word	0x0800ca7b
 800c804:	0800ca7b 	.word	0x0800ca7b
 800c808:	0800ca7b 	.word	0x0800ca7b
 800c80c:	0800ca7b 	.word	0x0800ca7b
 800c810:	0800ca7b 	.word	0x0800ca7b
 800c814:	0800c819 	.word	0x0800c819
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c81e:	69db      	ldr	r3, [r3, #28]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d00b      	beq.n	800c83c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c82a:	69db      	ldr	r3, [r3, #28]
 800c82c:	687a      	ldr	r2, [r7, #4]
 800c82e:	7c12      	ldrb	r2, [r2, #16]
 800c830:	f107 0108 	add.w	r1, r7, #8
 800c834:	4610      	mov	r0, r2
 800c836:	4798      	blx	r3
 800c838:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c83a:	e126      	b.n	800ca8a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c83c:	6839      	ldr	r1, [r7, #0]
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f000 fb27 	bl	800ce92 <USBD_CtlError>
        err++;
 800c844:	7afb      	ldrb	r3, [r7, #11]
 800c846:	3301      	adds	r3, #1
 800c848:	72fb      	strb	r3, [r7, #11]
      break;
 800c84a:	e11e      	b.n	800ca8a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	687a      	ldr	r2, [r7, #4]
 800c856:	7c12      	ldrb	r2, [r2, #16]
 800c858:	f107 0108 	add.w	r1, r7, #8
 800c85c:	4610      	mov	r0, r2
 800c85e:	4798      	blx	r3
 800c860:	60f8      	str	r0, [r7, #12]
      break;
 800c862:	e112      	b.n	800ca8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	7c1b      	ldrb	r3, [r3, #16]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d10d      	bne.n	800c888 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c874:	f107 0208 	add.w	r2, r7, #8
 800c878:	4610      	mov	r0, r2
 800c87a:	4798      	blx	r3
 800c87c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	3301      	adds	r3, #1
 800c882:	2202      	movs	r2, #2
 800c884:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c886:	e100      	b.n	800ca8a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c890:	f107 0208 	add.w	r2, r7, #8
 800c894:	4610      	mov	r0, r2
 800c896:	4798      	blx	r3
 800c898:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	3301      	adds	r3, #1
 800c89e:	2202      	movs	r2, #2
 800c8a0:	701a      	strb	r2, [r3, #0]
      break;
 800c8a2:	e0f2      	b.n	800ca8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	885b      	ldrh	r3, [r3, #2]
 800c8a8:	b2db      	uxtb	r3, r3
 800c8aa:	2b05      	cmp	r3, #5
 800c8ac:	f200 80ac 	bhi.w	800ca08 <USBD_GetDescriptor+0x258>
 800c8b0:	a201      	add	r2, pc, #4	; (adr r2, 800c8b8 <USBD_GetDescriptor+0x108>)
 800c8b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8b6:	bf00      	nop
 800c8b8:	0800c8d1 	.word	0x0800c8d1
 800c8bc:	0800c905 	.word	0x0800c905
 800c8c0:	0800c939 	.word	0x0800c939
 800c8c4:	0800c96d 	.word	0x0800c96d
 800c8c8:	0800c9a1 	.word	0x0800c9a1
 800c8cc:	0800c9d5 	.word	0x0800c9d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8d6:	685b      	ldr	r3, [r3, #4]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d00b      	beq.n	800c8f4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8e2:	685b      	ldr	r3, [r3, #4]
 800c8e4:	687a      	ldr	r2, [r7, #4]
 800c8e6:	7c12      	ldrb	r2, [r2, #16]
 800c8e8:	f107 0108 	add.w	r1, r7, #8
 800c8ec:	4610      	mov	r0, r2
 800c8ee:	4798      	blx	r3
 800c8f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8f2:	e091      	b.n	800ca18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c8f4:	6839      	ldr	r1, [r7, #0]
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f000 facb 	bl	800ce92 <USBD_CtlError>
            err++;
 800c8fc:	7afb      	ldrb	r3, [r7, #11]
 800c8fe:	3301      	adds	r3, #1
 800c900:	72fb      	strb	r3, [r7, #11]
          break;
 800c902:	e089      	b.n	800ca18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c90a:	689b      	ldr	r3, [r3, #8]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d00b      	beq.n	800c928 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c916:	689b      	ldr	r3, [r3, #8]
 800c918:	687a      	ldr	r2, [r7, #4]
 800c91a:	7c12      	ldrb	r2, [r2, #16]
 800c91c:	f107 0108 	add.w	r1, r7, #8
 800c920:	4610      	mov	r0, r2
 800c922:	4798      	blx	r3
 800c924:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c926:	e077      	b.n	800ca18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c928:	6839      	ldr	r1, [r7, #0]
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f000 fab1 	bl	800ce92 <USBD_CtlError>
            err++;
 800c930:	7afb      	ldrb	r3, [r7, #11]
 800c932:	3301      	adds	r3, #1
 800c934:	72fb      	strb	r3, [r7, #11]
          break;
 800c936:	e06f      	b.n	800ca18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c93e:	68db      	ldr	r3, [r3, #12]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d00b      	beq.n	800c95c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c94a:	68db      	ldr	r3, [r3, #12]
 800c94c:	687a      	ldr	r2, [r7, #4]
 800c94e:	7c12      	ldrb	r2, [r2, #16]
 800c950:	f107 0108 	add.w	r1, r7, #8
 800c954:	4610      	mov	r0, r2
 800c956:	4798      	blx	r3
 800c958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c95a:	e05d      	b.n	800ca18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c95c:	6839      	ldr	r1, [r7, #0]
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f000 fa97 	bl	800ce92 <USBD_CtlError>
            err++;
 800c964:	7afb      	ldrb	r3, [r7, #11]
 800c966:	3301      	adds	r3, #1
 800c968:	72fb      	strb	r3, [r7, #11]
          break;
 800c96a:	e055      	b.n	800ca18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c972:	691b      	ldr	r3, [r3, #16]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d00b      	beq.n	800c990 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c97e:	691b      	ldr	r3, [r3, #16]
 800c980:	687a      	ldr	r2, [r7, #4]
 800c982:	7c12      	ldrb	r2, [r2, #16]
 800c984:	f107 0108 	add.w	r1, r7, #8
 800c988:	4610      	mov	r0, r2
 800c98a:	4798      	blx	r3
 800c98c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c98e:	e043      	b.n	800ca18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c990:	6839      	ldr	r1, [r7, #0]
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f000 fa7d 	bl	800ce92 <USBD_CtlError>
            err++;
 800c998:	7afb      	ldrb	r3, [r7, #11]
 800c99a:	3301      	adds	r3, #1
 800c99c:	72fb      	strb	r3, [r7, #11]
          break;
 800c99e:	e03b      	b.n	800ca18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9a6:	695b      	ldr	r3, [r3, #20]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d00b      	beq.n	800c9c4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9b2:	695b      	ldr	r3, [r3, #20]
 800c9b4:	687a      	ldr	r2, [r7, #4]
 800c9b6:	7c12      	ldrb	r2, [r2, #16]
 800c9b8:	f107 0108 	add.w	r1, r7, #8
 800c9bc:	4610      	mov	r0, r2
 800c9be:	4798      	blx	r3
 800c9c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c9c2:	e029      	b.n	800ca18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c9c4:	6839      	ldr	r1, [r7, #0]
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f000 fa63 	bl	800ce92 <USBD_CtlError>
            err++;
 800c9cc:	7afb      	ldrb	r3, [r7, #11]
 800c9ce:	3301      	adds	r3, #1
 800c9d0:	72fb      	strb	r3, [r7, #11]
          break;
 800c9d2:	e021      	b.n	800ca18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9da:	699b      	ldr	r3, [r3, #24]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d00b      	beq.n	800c9f8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9e6:	699b      	ldr	r3, [r3, #24]
 800c9e8:	687a      	ldr	r2, [r7, #4]
 800c9ea:	7c12      	ldrb	r2, [r2, #16]
 800c9ec:	f107 0108 	add.w	r1, r7, #8
 800c9f0:	4610      	mov	r0, r2
 800c9f2:	4798      	blx	r3
 800c9f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c9f6:	e00f      	b.n	800ca18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c9f8:	6839      	ldr	r1, [r7, #0]
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f000 fa49 	bl	800ce92 <USBD_CtlError>
            err++;
 800ca00:	7afb      	ldrb	r3, [r7, #11]
 800ca02:	3301      	adds	r3, #1
 800ca04:	72fb      	strb	r3, [r7, #11]
          break;
 800ca06:	e007      	b.n	800ca18 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ca08:	6839      	ldr	r1, [r7, #0]
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f000 fa41 	bl	800ce92 <USBD_CtlError>
          err++;
 800ca10:	7afb      	ldrb	r3, [r7, #11]
 800ca12:	3301      	adds	r3, #1
 800ca14:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ca16:	bf00      	nop
      }
      break;
 800ca18:	e037      	b.n	800ca8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	7c1b      	ldrb	r3, [r3, #16]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d109      	bne.n	800ca36 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca2a:	f107 0208 	add.w	r2, r7, #8
 800ca2e:	4610      	mov	r0, r2
 800ca30:	4798      	blx	r3
 800ca32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ca34:	e029      	b.n	800ca8a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ca36:	6839      	ldr	r1, [r7, #0]
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f000 fa2a 	bl	800ce92 <USBD_CtlError>
        err++;
 800ca3e:	7afb      	ldrb	r3, [r7, #11]
 800ca40:	3301      	adds	r3, #1
 800ca42:	72fb      	strb	r3, [r7, #11]
      break;
 800ca44:	e021      	b.n	800ca8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	7c1b      	ldrb	r3, [r3, #16]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d10d      	bne.n	800ca6a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca56:	f107 0208 	add.w	r2, r7, #8
 800ca5a:	4610      	mov	r0, r2
 800ca5c:	4798      	blx	r3
 800ca5e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	3301      	adds	r3, #1
 800ca64:	2207      	movs	r2, #7
 800ca66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ca68:	e00f      	b.n	800ca8a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ca6a:	6839      	ldr	r1, [r7, #0]
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f000 fa10 	bl	800ce92 <USBD_CtlError>
        err++;
 800ca72:	7afb      	ldrb	r3, [r7, #11]
 800ca74:	3301      	adds	r3, #1
 800ca76:	72fb      	strb	r3, [r7, #11]
      break;
 800ca78:	e007      	b.n	800ca8a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ca7a:	6839      	ldr	r1, [r7, #0]
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f000 fa08 	bl	800ce92 <USBD_CtlError>
      err++;
 800ca82:	7afb      	ldrb	r3, [r7, #11]
 800ca84:	3301      	adds	r3, #1
 800ca86:	72fb      	strb	r3, [r7, #11]
      break;
 800ca88:	bf00      	nop
  }

  if (err != 0U)
 800ca8a:	7afb      	ldrb	r3, [r7, #11]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d11e      	bne.n	800cace <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	88db      	ldrh	r3, [r3, #6]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d016      	beq.n	800cac6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ca98:	893b      	ldrh	r3, [r7, #8]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d00e      	beq.n	800cabc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	88da      	ldrh	r2, [r3, #6]
 800caa2:	893b      	ldrh	r3, [r7, #8]
 800caa4:	4293      	cmp	r3, r2
 800caa6:	bf28      	it	cs
 800caa8:	4613      	movcs	r3, r2
 800caaa:	b29b      	uxth	r3, r3
 800caac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800caae:	893b      	ldrh	r3, [r7, #8]
 800cab0:	461a      	mov	r2, r3
 800cab2:	68f9      	ldr	r1, [r7, #12]
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f000 fa5d 	bl	800cf74 <USBD_CtlSendData>
 800caba:	e009      	b.n	800cad0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cabc:	6839      	ldr	r1, [r7, #0]
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f000 f9e7 	bl	800ce92 <USBD_CtlError>
 800cac4:	e004      	b.n	800cad0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f000 faae 	bl	800d028 <USBD_CtlSendStatus>
 800cacc:	e000      	b.n	800cad0 <USBD_GetDescriptor+0x320>
    return;
 800cace:	bf00      	nop
  }
}
 800cad0:	3710      	adds	r7, #16
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}
 800cad6:	bf00      	nop

0800cad8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b084      	sub	sp, #16
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	889b      	ldrh	r3, [r3, #4]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d131      	bne.n	800cb4e <USBD_SetAddress+0x76>
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	88db      	ldrh	r3, [r3, #6]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d12d      	bne.n	800cb4e <USBD_SetAddress+0x76>
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	885b      	ldrh	r3, [r3, #2]
 800caf6:	2b7f      	cmp	r3, #127	; 0x7f
 800caf8:	d829      	bhi.n	800cb4e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	885b      	ldrh	r3, [r3, #2]
 800cafe:	b2db      	uxtb	r3, r3
 800cb00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb04:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb0c:	b2db      	uxtb	r3, r3
 800cb0e:	2b03      	cmp	r3, #3
 800cb10:	d104      	bne.n	800cb1c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cb12:	6839      	ldr	r1, [r7, #0]
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f000 f9bc 	bl	800ce92 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb1a:	e01d      	b.n	800cb58 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	7bfa      	ldrb	r2, [r7, #15]
 800cb20:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cb24:	7bfb      	ldrb	r3, [r7, #15]
 800cb26:	4619      	mov	r1, r3
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f000 ff38 	bl	800d99e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f000 fa7a 	bl	800d028 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cb34:	7bfb      	ldrb	r3, [r7, #15]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d004      	beq.n	800cb44 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2202      	movs	r2, #2
 800cb3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb42:	e009      	b.n	800cb58 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2201      	movs	r2, #1
 800cb48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb4c:	e004      	b.n	800cb58 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cb4e:	6839      	ldr	r1, [r7, #0]
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f000 f99e 	bl	800ce92 <USBD_CtlError>
  }
}
 800cb56:	bf00      	nop
 800cb58:	bf00      	nop
 800cb5a:	3710      	adds	r7, #16
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}

0800cb60 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b084      	sub	sp, #16
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
 800cb68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	885b      	ldrh	r3, [r3, #2]
 800cb72:	b2da      	uxtb	r2, r3
 800cb74:	4b4e      	ldr	r3, [pc, #312]	; (800ccb0 <USBD_SetConfig+0x150>)
 800cb76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cb78:	4b4d      	ldr	r3, [pc, #308]	; (800ccb0 <USBD_SetConfig+0x150>)
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	2b01      	cmp	r3, #1
 800cb7e:	d905      	bls.n	800cb8c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cb80:	6839      	ldr	r1, [r7, #0]
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f000 f985 	bl	800ce92 <USBD_CtlError>
    return USBD_FAIL;
 800cb88:	2303      	movs	r3, #3
 800cb8a:	e08c      	b.n	800cca6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb92:	b2db      	uxtb	r3, r3
 800cb94:	2b02      	cmp	r3, #2
 800cb96:	d002      	beq.n	800cb9e <USBD_SetConfig+0x3e>
 800cb98:	2b03      	cmp	r3, #3
 800cb9a:	d029      	beq.n	800cbf0 <USBD_SetConfig+0x90>
 800cb9c:	e075      	b.n	800cc8a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cb9e:	4b44      	ldr	r3, [pc, #272]	; (800ccb0 <USBD_SetConfig+0x150>)
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d020      	beq.n	800cbe8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800cba6:	4b42      	ldr	r3, [pc, #264]	; (800ccb0 <USBD_SetConfig+0x150>)
 800cba8:	781b      	ldrb	r3, [r3, #0]
 800cbaa:	461a      	mov	r2, r3
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cbb0:	4b3f      	ldr	r3, [pc, #252]	; (800ccb0 <USBD_SetConfig+0x150>)
 800cbb2:	781b      	ldrb	r3, [r3, #0]
 800cbb4:	4619      	mov	r1, r3
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f7ff f849 	bl	800bc4e <USBD_SetClassConfig>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cbc0:	7bfb      	ldrb	r3, [r7, #15]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d008      	beq.n	800cbd8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cbc6:	6839      	ldr	r1, [r7, #0]
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f000 f962 	bl	800ce92 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2202      	movs	r2, #2
 800cbd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cbd6:	e065      	b.n	800cca4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f000 fa25 	bl	800d028 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2203      	movs	r2, #3
 800cbe2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cbe6:	e05d      	b.n	800cca4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f000 fa1d 	bl	800d028 <USBD_CtlSendStatus>
      break;
 800cbee:	e059      	b.n	800cca4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cbf0:	4b2f      	ldr	r3, [pc, #188]	; (800ccb0 <USBD_SetConfig+0x150>)
 800cbf2:	781b      	ldrb	r3, [r3, #0]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d112      	bne.n	800cc1e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2202      	movs	r2, #2
 800cbfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cc00:	4b2b      	ldr	r3, [pc, #172]	; (800ccb0 <USBD_SetConfig+0x150>)
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	461a      	mov	r2, r3
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cc0a:	4b29      	ldr	r3, [pc, #164]	; (800ccb0 <USBD_SetConfig+0x150>)
 800cc0c:	781b      	ldrb	r3, [r3, #0]
 800cc0e:	4619      	mov	r1, r3
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f7ff f838 	bl	800bc86 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f000 fa06 	bl	800d028 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cc1c:	e042      	b.n	800cca4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cc1e:	4b24      	ldr	r3, [pc, #144]	; (800ccb0 <USBD_SetConfig+0x150>)
 800cc20:	781b      	ldrb	r3, [r3, #0]
 800cc22:	461a      	mov	r2, r3
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	685b      	ldr	r3, [r3, #4]
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d02a      	beq.n	800cc82 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	685b      	ldr	r3, [r3, #4]
 800cc30:	b2db      	uxtb	r3, r3
 800cc32:	4619      	mov	r1, r3
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f7ff f826 	bl	800bc86 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cc3a:	4b1d      	ldr	r3, [pc, #116]	; (800ccb0 <USBD_SetConfig+0x150>)
 800cc3c:	781b      	ldrb	r3, [r3, #0]
 800cc3e:	461a      	mov	r2, r3
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cc44:	4b1a      	ldr	r3, [pc, #104]	; (800ccb0 <USBD_SetConfig+0x150>)
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	4619      	mov	r1, r3
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f7fe ffff 	bl	800bc4e <USBD_SetClassConfig>
 800cc50:	4603      	mov	r3, r0
 800cc52:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cc54:	7bfb      	ldrb	r3, [r7, #15]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d00f      	beq.n	800cc7a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cc5a:	6839      	ldr	r1, [r7, #0]
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f000 f918 	bl	800ce92 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	685b      	ldr	r3, [r3, #4]
 800cc66:	b2db      	uxtb	r3, r3
 800cc68:	4619      	mov	r1, r3
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f7ff f80b 	bl	800bc86 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2202      	movs	r2, #2
 800cc74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cc78:	e014      	b.n	800cca4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f000 f9d4 	bl	800d028 <USBD_CtlSendStatus>
      break;
 800cc80:	e010      	b.n	800cca4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f000 f9d0 	bl	800d028 <USBD_CtlSendStatus>
      break;
 800cc88:	e00c      	b.n	800cca4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cc8a:	6839      	ldr	r1, [r7, #0]
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f000 f900 	bl	800ce92 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cc92:	4b07      	ldr	r3, [pc, #28]	; (800ccb0 <USBD_SetConfig+0x150>)
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	4619      	mov	r1, r3
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f7fe fff4 	bl	800bc86 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cc9e:	2303      	movs	r3, #3
 800cca0:	73fb      	strb	r3, [r7, #15]
      break;
 800cca2:	bf00      	nop
  }

  return ret;
 800cca4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	3710      	adds	r7, #16
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
 800ccae:	bf00      	nop
 800ccb0:	20003d2c 	.word	0x20003d2c

0800ccb4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	88db      	ldrh	r3, [r3, #6]
 800ccc2:	2b01      	cmp	r3, #1
 800ccc4:	d004      	beq.n	800ccd0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ccc6:	6839      	ldr	r1, [r7, #0]
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f000 f8e2 	bl	800ce92 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ccce:	e023      	b.n	800cd18 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccd6:	b2db      	uxtb	r3, r3
 800ccd8:	2b02      	cmp	r3, #2
 800ccda:	dc02      	bgt.n	800cce2 <USBD_GetConfig+0x2e>
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	dc03      	bgt.n	800cce8 <USBD_GetConfig+0x34>
 800cce0:	e015      	b.n	800cd0e <USBD_GetConfig+0x5a>
 800cce2:	2b03      	cmp	r3, #3
 800cce4:	d00b      	beq.n	800ccfe <USBD_GetConfig+0x4a>
 800cce6:	e012      	b.n	800cd0e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2200      	movs	r2, #0
 800ccec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	3308      	adds	r3, #8
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f000 f93c 	bl	800cf74 <USBD_CtlSendData>
        break;
 800ccfc:	e00c      	b.n	800cd18 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	3304      	adds	r3, #4
 800cd02:	2201      	movs	r2, #1
 800cd04:	4619      	mov	r1, r3
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f000 f934 	bl	800cf74 <USBD_CtlSendData>
        break;
 800cd0c:	e004      	b.n	800cd18 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cd0e:	6839      	ldr	r1, [r7, #0]
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f000 f8be 	bl	800ce92 <USBD_CtlError>
        break;
 800cd16:	bf00      	nop
}
 800cd18:	bf00      	nop
 800cd1a:	3708      	adds	r7, #8
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b082      	sub	sp, #8
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd30:	b2db      	uxtb	r3, r3
 800cd32:	3b01      	subs	r3, #1
 800cd34:	2b02      	cmp	r3, #2
 800cd36:	d81e      	bhi.n	800cd76 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	88db      	ldrh	r3, [r3, #6]
 800cd3c:	2b02      	cmp	r3, #2
 800cd3e:	d004      	beq.n	800cd4a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cd40:	6839      	ldr	r1, [r7, #0]
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f000 f8a5 	bl	800ce92 <USBD_CtlError>
        break;
 800cd48:	e01a      	b.n	800cd80 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2201      	movs	r2, #1
 800cd4e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d005      	beq.n	800cd66 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	68db      	ldr	r3, [r3, #12]
 800cd5e:	f043 0202 	orr.w	r2, r3, #2
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	330c      	adds	r3, #12
 800cd6a:	2202      	movs	r2, #2
 800cd6c:	4619      	mov	r1, r3
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f000 f900 	bl	800cf74 <USBD_CtlSendData>
      break;
 800cd74:	e004      	b.n	800cd80 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cd76:	6839      	ldr	r1, [r7, #0]
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f000 f88a 	bl	800ce92 <USBD_CtlError>
      break;
 800cd7e:	bf00      	nop
  }
}
 800cd80:	bf00      	nop
 800cd82:	3708      	adds	r7, #8
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
 800cd90:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	885b      	ldrh	r3, [r3, #2]
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	d107      	bne.n	800cdaa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2201      	movs	r2, #1
 800cd9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f000 f940 	bl	800d028 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cda8:	e013      	b.n	800cdd2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	885b      	ldrh	r3, [r3, #2]
 800cdae:	2b02      	cmp	r3, #2
 800cdb0:	d10b      	bne.n	800cdca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	889b      	ldrh	r3, [r3, #4]
 800cdb6:	0a1b      	lsrs	r3, r3, #8
 800cdb8:	b29b      	uxth	r3, r3
 800cdba:	b2da      	uxtb	r2, r3
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f000 f930 	bl	800d028 <USBD_CtlSendStatus>
}
 800cdc8:	e003      	b.n	800cdd2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cdca:	6839      	ldr	r1, [r7, #0]
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f000 f860 	bl	800ce92 <USBD_CtlError>
}
 800cdd2:	bf00      	nop
 800cdd4:	3708      	adds	r7, #8
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}

0800cdda <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdda:	b580      	push	{r7, lr}
 800cddc:	b082      	sub	sp, #8
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	6078      	str	r0, [r7, #4]
 800cde2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdea:	b2db      	uxtb	r3, r3
 800cdec:	3b01      	subs	r3, #1
 800cdee:	2b02      	cmp	r3, #2
 800cdf0:	d80b      	bhi.n	800ce0a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	885b      	ldrh	r3, [r3, #2]
 800cdf6:	2b01      	cmp	r3, #1
 800cdf8:	d10c      	bne.n	800ce14 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f000 f910 	bl	800d028 <USBD_CtlSendStatus>
      }
      break;
 800ce08:	e004      	b.n	800ce14 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ce0a:	6839      	ldr	r1, [r7, #0]
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f000 f840 	bl	800ce92 <USBD_CtlError>
      break;
 800ce12:	e000      	b.n	800ce16 <USBD_ClrFeature+0x3c>
      break;
 800ce14:	bf00      	nop
  }
}
 800ce16:	bf00      	nop
 800ce18:	3708      	adds	r7, #8
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}

0800ce1e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ce1e:	b580      	push	{r7, lr}
 800ce20:	b084      	sub	sp, #16
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	6078      	str	r0, [r7, #4]
 800ce26:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	781a      	ldrb	r2, [r3, #0]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	3301      	adds	r3, #1
 800ce38:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	781a      	ldrb	r2, [r3, #0]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	3301      	adds	r3, #1
 800ce46:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ce48:	68f8      	ldr	r0, [r7, #12]
 800ce4a:	f7ff fa17 	bl	800c27c <SWAPBYTE>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	461a      	mov	r2, r3
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	3301      	adds	r3, #1
 800ce5a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	3301      	adds	r3, #1
 800ce60:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ce62:	68f8      	ldr	r0, [r7, #12]
 800ce64:	f7ff fa0a 	bl	800c27c <SWAPBYTE>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	3301      	adds	r3, #1
 800ce74:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	3301      	adds	r3, #1
 800ce7a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ce7c:	68f8      	ldr	r0, [r7, #12]
 800ce7e:	f7ff f9fd 	bl	800c27c <SWAPBYTE>
 800ce82:	4603      	mov	r3, r0
 800ce84:	461a      	mov	r2, r3
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	80da      	strh	r2, [r3, #6]
}
 800ce8a:	bf00      	nop
 800ce8c:	3710      	adds	r7, #16
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}

0800ce92 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce92:	b580      	push	{r7, lr}
 800ce94:	b082      	sub	sp, #8
 800ce96:	af00      	add	r7, sp, #0
 800ce98:	6078      	str	r0, [r7, #4]
 800ce9a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce9c:	2180      	movs	r1, #128	; 0x80
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f000 fd12 	bl	800d8c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cea4:	2100      	movs	r1, #0
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f000 fd0e 	bl	800d8c8 <USBD_LL_StallEP>
}
 800ceac:	bf00      	nop
 800ceae:	3708      	adds	r7, #8
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b086      	sub	sp, #24
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	60f8      	str	r0, [r7, #12]
 800cebc:	60b9      	str	r1, [r7, #8]
 800cebe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cec0:	2300      	movs	r3, #0
 800cec2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d036      	beq.n	800cf38 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cece:	6938      	ldr	r0, [r7, #16]
 800ced0:	f000 f836 	bl	800cf40 <USBD_GetLen>
 800ced4:	4603      	mov	r3, r0
 800ced6:	3301      	adds	r3, #1
 800ced8:	b29b      	uxth	r3, r3
 800ceda:	005b      	lsls	r3, r3, #1
 800cedc:	b29a      	uxth	r2, r3
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cee2:	7dfb      	ldrb	r3, [r7, #23]
 800cee4:	68ba      	ldr	r2, [r7, #8]
 800cee6:	4413      	add	r3, r2
 800cee8:	687a      	ldr	r2, [r7, #4]
 800ceea:	7812      	ldrb	r2, [r2, #0]
 800ceec:	701a      	strb	r2, [r3, #0]
  idx++;
 800ceee:	7dfb      	ldrb	r3, [r7, #23]
 800cef0:	3301      	adds	r3, #1
 800cef2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cef4:	7dfb      	ldrb	r3, [r7, #23]
 800cef6:	68ba      	ldr	r2, [r7, #8]
 800cef8:	4413      	add	r3, r2
 800cefa:	2203      	movs	r2, #3
 800cefc:	701a      	strb	r2, [r3, #0]
  idx++;
 800cefe:	7dfb      	ldrb	r3, [r7, #23]
 800cf00:	3301      	adds	r3, #1
 800cf02:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cf04:	e013      	b.n	800cf2e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cf06:	7dfb      	ldrb	r3, [r7, #23]
 800cf08:	68ba      	ldr	r2, [r7, #8]
 800cf0a:	4413      	add	r3, r2
 800cf0c:	693a      	ldr	r2, [r7, #16]
 800cf0e:	7812      	ldrb	r2, [r2, #0]
 800cf10:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	3301      	adds	r3, #1
 800cf16:	613b      	str	r3, [r7, #16]
    idx++;
 800cf18:	7dfb      	ldrb	r3, [r7, #23]
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cf1e:	7dfb      	ldrb	r3, [r7, #23]
 800cf20:	68ba      	ldr	r2, [r7, #8]
 800cf22:	4413      	add	r3, r2
 800cf24:	2200      	movs	r2, #0
 800cf26:	701a      	strb	r2, [r3, #0]
    idx++;
 800cf28:	7dfb      	ldrb	r3, [r7, #23]
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d1e7      	bne.n	800cf06 <USBD_GetString+0x52>
 800cf36:	e000      	b.n	800cf3a <USBD_GetString+0x86>
    return;
 800cf38:	bf00      	nop
  }
}
 800cf3a:	3718      	adds	r7, #24
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}

0800cf40 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cf40:	b480      	push	{r7}
 800cf42:	b085      	sub	sp, #20
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cf50:	e005      	b.n	800cf5e <USBD_GetLen+0x1e>
  {
    len++;
 800cf52:	7bfb      	ldrb	r3, [r7, #15]
 800cf54:	3301      	adds	r3, #1
 800cf56:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	3301      	adds	r3, #1
 800cf5c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	781b      	ldrb	r3, [r3, #0]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d1f5      	bne.n	800cf52 <USBD_GetLen+0x12>
  }

  return len;
 800cf66:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3714      	adds	r7, #20
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf72:	4770      	bx	lr

0800cf74 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b084      	sub	sp, #16
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	60f8      	str	r0, [r7, #12]
 800cf7c:	60b9      	str	r1, [r7, #8]
 800cf7e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	2202      	movs	r2, #2
 800cf84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	687a      	ldr	r2, [r7, #4]
 800cf8c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	687a      	ldr	r2, [r7, #4]
 800cf92:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	68ba      	ldr	r2, [r7, #8]
 800cf98:	2100      	movs	r1, #0
 800cf9a:	68f8      	ldr	r0, [r7, #12]
 800cf9c:	f000 fd1e 	bl	800d9dc <USBD_LL_Transmit>

  return USBD_OK;
 800cfa0:	2300      	movs	r3, #0
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3710      	adds	r7, #16
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}

0800cfaa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cfaa:	b580      	push	{r7, lr}
 800cfac:	b084      	sub	sp, #16
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	60f8      	str	r0, [r7, #12]
 800cfb2:	60b9      	str	r1, [r7, #8]
 800cfb4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	68ba      	ldr	r2, [r7, #8]
 800cfba:	2100      	movs	r1, #0
 800cfbc:	68f8      	ldr	r0, [r7, #12]
 800cfbe:	f000 fd0d 	bl	800d9dc <USBD_LL_Transmit>

  return USBD_OK;
 800cfc2:	2300      	movs	r3, #0
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3710      	adds	r7, #16
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}

0800cfcc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b084      	sub	sp, #16
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	60b9      	str	r1, [r7, #8]
 800cfd6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	2203      	movs	r2, #3
 800cfdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	687a      	ldr	r2, [r7, #4]
 800cfe4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	687a      	ldr	r2, [r7, #4]
 800cfec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	68ba      	ldr	r2, [r7, #8]
 800cff4:	2100      	movs	r1, #0
 800cff6:	68f8      	ldr	r0, [r7, #12]
 800cff8:	f000 fd11 	bl	800da1e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cffc:	2300      	movs	r3, #0
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3710      	adds	r7, #16
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}

0800d006 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d006:	b580      	push	{r7, lr}
 800d008:	b084      	sub	sp, #16
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	60f8      	str	r0, [r7, #12]
 800d00e:	60b9      	str	r1, [r7, #8]
 800d010:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	68ba      	ldr	r2, [r7, #8]
 800d016:	2100      	movs	r1, #0
 800d018:	68f8      	ldr	r0, [r7, #12]
 800d01a:	f000 fd00 	bl	800da1e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d01e:	2300      	movs	r3, #0
}
 800d020:	4618      	mov	r0, r3
 800d022:	3710      	adds	r7, #16
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}

0800d028 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b082      	sub	sp, #8
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2204      	movs	r2, #4
 800d034:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d038:	2300      	movs	r3, #0
 800d03a:	2200      	movs	r2, #0
 800d03c:	2100      	movs	r1, #0
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f000 fccc 	bl	800d9dc <USBD_LL_Transmit>

  return USBD_OK;
 800d044:	2300      	movs	r3, #0
}
 800d046:	4618      	mov	r0, r3
 800d048:	3708      	adds	r7, #8
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}

0800d04e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d04e:	b580      	push	{r7, lr}
 800d050:	b082      	sub	sp, #8
 800d052:	af00      	add	r7, sp, #0
 800d054:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2205      	movs	r2, #5
 800d05a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d05e:	2300      	movs	r3, #0
 800d060:	2200      	movs	r2, #0
 800d062:	2100      	movs	r1, #0
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f000 fcda 	bl	800da1e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d06a:	2300      	movs	r3, #0
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3708      	adds	r7, #8
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}

0800d074 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800d078:	2200      	movs	r2, #0
 800d07a:	4912      	ldr	r1, [pc, #72]	; (800d0c4 <MX_USB_Device_Init+0x50>)
 800d07c:	4812      	ldr	r0, [pc, #72]	; (800d0c8 <MX_USB_Device_Init+0x54>)
 800d07e:	f7fe fd69 	bl	800bb54 <USBD_Init>
 800d082:	4603      	mov	r3, r0
 800d084:	2b00      	cmp	r3, #0
 800d086:	d001      	beq.n	800d08c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800d088:	f7f7 f93e 	bl	8004308 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800d08c:	490f      	ldr	r1, [pc, #60]	; (800d0cc <MX_USB_Device_Init+0x58>)
 800d08e:	480e      	ldr	r0, [pc, #56]	; (800d0c8 <MX_USB_Device_Init+0x54>)
 800d090:	f7fe fd90 	bl	800bbb4 <USBD_RegisterClass>
 800d094:	4603      	mov	r3, r0
 800d096:	2b00      	cmp	r3, #0
 800d098:	d001      	beq.n	800d09e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800d09a:	f7f7 f935 	bl	8004308 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800d09e:	490c      	ldr	r1, [pc, #48]	; (800d0d0 <MX_USB_Device_Init+0x5c>)
 800d0a0:	4809      	ldr	r0, [pc, #36]	; (800d0c8 <MX_USB_Device_Init+0x54>)
 800d0a2:	f7fe fc87 	bl	800b9b4 <USBD_CDC_RegisterInterface>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d001      	beq.n	800d0b0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800d0ac:	f7f7 f92c 	bl	8004308 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800d0b0:	4805      	ldr	r0, [pc, #20]	; (800d0c8 <MX_USB_Device_Init+0x54>)
 800d0b2:	f7fe fdb5 	bl	800bc20 <USBD_Start>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d001      	beq.n	800d0c0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800d0bc:	f7f7 f924 	bl	8004308 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800d0c0:	bf00      	nop
 800d0c2:	bd80      	pop	{r7, pc}
 800d0c4:	200000bc 	.word	0x200000bc
 800d0c8:	20003d30 	.word	0x20003d30
 800d0cc:	20000020 	.word	0x20000020
 800d0d0:	200000a8 	.word	0x200000a8

0800d0d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d0d8:	2200      	movs	r2, #0
 800d0da:	4905      	ldr	r1, [pc, #20]	; (800d0f0 <CDC_Init_FS+0x1c>)
 800d0dc:	4805      	ldr	r0, [pc, #20]	; (800d0f4 <CDC_Init_FS+0x20>)
 800d0de:	f7fe fc83 	bl	800b9e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d0e2:	4905      	ldr	r1, [pc, #20]	; (800d0f8 <CDC_Init_FS+0x24>)
 800d0e4:	4803      	ldr	r0, [pc, #12]	; (800d0f4 <CDC_Init_FS+0x20>)
 800d0e6:	f7fe fca1 	bl	800ba2c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d0ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	bd80      	pop	{r7, pc}
 800d0f0:	2000480c 	.word	0x2000480c
 800d0f4:	20003d30 	.word	0x20003d30
 800d0f8:	2000400c 	.word	0x2000400c

0800d0fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d100:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d102:	4618      	mov	r0, r3
 800d104:	46bd      	mov	sp, r7
 800d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10a:	4770      	bx	lr

0800d10c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d10c:	b480      	push	{r7}
 800d10e:	b083      	sub	sp, #12
 800d110:	af00      	add	r7, sp, #0
 800d112:	4603      	mov	r3, r0
 800d114:	6039      	str	r1, [r7, #0]
 800d116:	71fb      	strb	r3, [r7, #7]
 800d118:	4613      	mov	r3, r2
 800d11a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d11c:	79fb      	ldrb	r3, [r7, #7]
 800d11e:	2b23      	cmp	r3, #35	; 0x23
 800d120:	d84a      	bhi.n	800d1b8 <CDC_Control_FS+0xac>
 800d122:	a201      	add	r2, pc, #4	; (adr r2, 800d128 <CDC_Control_FS+0x1c>)
 800d124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d128:	0800d1b9 	.word	0x0800d1b9
 800d12c:	0800d1b9 	.word	0x0800d1b9
 800d130:	0800d1b9 	.word	0x0800d1b9
 800d134:	0800d1b9 	.word	0x0800d1b9
 800d138:	0800d1b9 	.word	0x0800d1b9
 800d13c:	0800d1b9 	.word	0x0800d1b9
 800d140:	0800d1b9 	.word	0x0800d1b9
 800d144:	0800d1b9 	.word	0x0800d1b9
 800d148:	0800d1b9 	.word	0x0800d1b9
 800d14c:	0800d1b9 	.word	0x0800d1b9
 800d150:	0800d1b9 	.word	0x0800d1b9
 800d154:	0800d1b9 	.word	0x0800d1b9
 800d158:	0800d1b9 	.word	0x0800d1b9
 800d15c:	0800d1b9 	.word	0x0800d1b9
 800d160:	0800d1b9 	.word	0x0800d1b9
 800d164:	0800d1b9 	.word	0x0800d1b9
 800d168:	0800d1b9 	.word	0x0800d1b9
 800d16c:	0800d1b9 	.word	0x0800d1b9
 800d170:	0800d1b9 	.word	0x0800d1b9
 800d174:	0800d1b9 	.word	0x0800d1b9
 800d178:	0800d1b9 	.word	0x0800d1b9
 800d17c:	0800d1b9 	.word	0x0800d1b9
 800d180:	0800d1b9 	.word	0x0800d1b9
 800d184:	0800d1b9 	.word	0x0800d1b9
 800d188:	0800d1b9 	.word	0x0800d1b9
 800d18c:	0800d1b9 	.word	0x0800d1b9
 800d190:	0800d1b9 	.word	0x0800d1b9
 800d194:	0800d1b9 	.word	0x0800d1b9
 800d198:	0800d1b9 	.word	0x0800d1b9
 800d19c:	0800d1b9 	.word	0x0800d1b9
 800d1a0:	0800d1b9 	.word	0x0800d1b9
 800d1a4:	0800d1b9 	.word	0x0800d1b9
 800d1a8:	0800d1b9 	.word	0x0800d1b9
 800d1ac:	0800d1b9 	.word	0x0800d1b9
 800d1b0:	0800d1b9 	.word	0x0800d1b9
 800d1b4:	0800d1b9 	.word	0x0800d1b9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d1b8:	bf00      	nop
  }

  return (USBD_OK);
 800d1ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	370c      	adds	r7, #12
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr

0800d1c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b082      	sub	sp, #8
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	bufferFlag = 0;
 800d1d2:	4b17      	ldr	r3, [pc, #92]	; (800d230 <CDC_Receive_FS+0x68>)
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	701a      	strb	r2, [r3, #0]
  if (byteInBuffer>2047)
 800d1d8:	4b16      	ldr	r3, [pc, #88]	; (800d234 <CDC_Receive_FS+0x6c>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d1e0:	d302      	bcc.n	800d1e8 <CDC_Receive_FS+0x20>
  {//This is a error data loss...
	  byteInBuffer = 0;
 800d1e2:	4b14      	ldr	r3, [pc, #80]	; (800d234 <CDC_Receive_FS+0x6c>)
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	601a      	str	r2, [r3, #0]
  }
  memcpy(&UserTxBufferFS[byteInBuffer],&Buf[0], *Len);
 800d1e8:	4b12      	ldr	r3, [pc, #72]	; (800d234 <CDC_Receive_FS+0x6c>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4a12      	ldr	r2, [pc, #72]	; (800d238 <CDC_Receive_FS+0x70>)
 800d1ee:	1898      	adds	r0, r3, r2
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	461a      	mov	r2, r3
 800d1f6:	6879      	ldr	r1, [r7, #4]
 800d1f8:	f000 fcf4 	bl	800dbe4 <memcpy>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[byteInBuffer]);
 800d1fc:	4b0d      	ldr	r3, [pc, #52]	; (800d234 <CDC_Receive_FS+0x6c>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	687a      	ldr	r2, [r7, #4]
 800d202:	4413      	add	r3, r2
 800d204:	4619      	mov	r1, r3
 800d206:	480d      	ldr	r0, [pc, #52]	; (800d23c <CDC_Receive_FS+0x74>)
 800d208:	f7fe fc10 	bl	800ba2c <USBD_CDC_SetRxBuffer>


  byteInBuffer += *Len;
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	681a      	ldr	r2, [r3, #0]
 800d210:	4b08      	ldr	r3, [pc, #32]	; (800d234 <CDC_Receive_FS+0x6c>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	4413      	add	r3, r2
 800d216:	4a07      	ldr	r2, [pc, #28]	; (800d234 <CDC_Receive_FS+0x6c>)
 800d218:	6013      	str	r3, [r2, #0]
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d21a:	4808      	ldr	r0, [pc, #32]	; (800d23c <CDC_Receive_FS+0x74>)
 800d21c:	f7fe fc64 	bl	800bae8 <USBD_CDC_ReceivePacket>
	bufferFlag = 1;
 800d220:	4b03      	ldr	r3, [pc, #12]	; (800d230 <CDC_Receive_FS+0x68>)
 800d222:	2201      	movs	r2, #1
 800d224:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800d226:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d228:	4618      	mov	r0, r3
 800d22a:	3708      	adds	r7, #8
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}
 800d230:	200000a4 	.word	0x200000a4
 800d234:	2000500c 	.word	0x2000500c
 800d238:	2000480c 	.word	0x2000480c
 800d23c:	20003d30 	.word	0x20003d30

0800d240 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b084      	sub	sp, #16
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	460b      	mov	r3, r1
 800d24a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d24c:	2300      	movs	r3, #0
 800d24e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d250:	4b0d      	ldr	r3, [pc, #52]	; (800d288 <CDC_Transmit_FS+0x48>)
 800d252:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d256:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d001      	beq.n	800d266 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d262:	2301      	movs	r3, #1
 800d264:	e00b      	b.n	800d27e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d266:	887b      	ldrh	r3, [r7, #2]
 800d268:	461a      	mov	r2, r3
 800d26a:	6879      	ldr	r1, [r7, #4]
 800d26c:	4806      	ldr	r0, [pc, #24]	; (800d288 <CDC_Transmit_FS+0x48>)
 800d26e:	f7fe fbbb 	bl	800b9e8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d272:	4805      	ldr	r0, [pc, #20]	; (800d288 <CDC_Transmit_FS+0x48>)
 800d274:	f7fe fbf8 	bl	800ba68 <USBD_CDC_TransmitPacket>
 800d278:	4603      	mov	r3, r0
 800d27a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d27c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d27e:	4618      	mov	r0, r3
 800d280:	3710      	adds	r7, #16
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}
 800d286:	bf00      	nop
 800d288:	20003d30 	.word	0x20003d30

0800d28c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d28c:	b480      	push	{r7}
 800d28e:	b087      	sub	sp, #28
 800d290:	af00      	add	r7, sp, #0
 800d292:	60f8      	str	r0, [r7, #12]
 800d294:	60b9      	str	r1, [r7, #8]
 800d296:	4613      	mov	r3, r2
 800d298:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d29a:	2300      	movs	r3, #0
 800d29c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d29e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	371c      	adds	r7, #28
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ac:	4770      	bx	lr
	...

0800d2b0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b083      	sub	sp, #12
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	6039      	str	r1, [r7, #0]
 800d2ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	2212      	movs	r2, #18
 800d2c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800d2c2:	4b03      	ldr	r3, [pc, #12]	; (800d2d0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	370c      	adds	r7, #12
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ce:	4770      	bx	lr
 800d2d0:	200000dc 	.word	0x200000dc

0800d2d4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b083      	sub	sp, #12
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	4603      	mov	r3, r0
 800d2dc:	6039      	str	r1, [r7, #0]
 800d2de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	2204      	movs	r2, #4
 800d2e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d2e6:	4b03      	ldr	r3, [pc, #12]	; (800d2f4 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	370c      	adds	r7, #12
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f2:	4770      	bx	lr
 800d2f4:	200000f0 	.word	0x200000f0

0800d2f8 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	4603      	mov	r3, r0
 800d300:	6039      	str	r1, [r7, #0]
 800d302:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d304:	79fb      	ldrb	r3, [r7, #7]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d105      	bne.n	800d316 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d30a:	683a      	ldr	r2, [r7, #0]
 800d30c:	4907      	ldr	r1, [pc, #28]	; (800d32c <USBD_CDC_ProductStrDescriptor+0x34>)
 800d30e:	4808      	ldr	r0, [pc, #32]	; (800d330 <USBD_CDC_ProductStrDescriptor+0x38>)
 800d310:	f7ff fdd0 	bl	800ceb4 <USBD_GetString>
 800d314:	e004      	b.n	800d320 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d316:	683a      	ldr	r2, [r7, #0]
 800d318:	4904      	ldr	r1, [pc, #16]	; (800d32c <USBD_CDC_ProductStrDescriptor+0x34>)
 800d31a:	4805      	ldr	r0, [pc, #20]	; (800d330 <USBD_CDC_ProductStrDescriptor+0x38>)
 800d31c:	f7ff fdca 	bl	800ceb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d320:	4b02      	ldr	r3, [pc, #8]	; (800d32c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800d322:	4618      	mov	r0, r3
 800d324:	3708      	adds	r7, #8
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}
 800d32a:	bf00      	nop
 800d32c:	20005010 	.word	0x20005010
 800d330:	080125a8 	.word	0x080125a8

0800d334 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b082      	sub	sp, #8
 800d338:	af00      	add	r7, sp, #0
 800d33a:	4603      	mov	r3, r0
 800d33c:	6039      	str	r1, [r7, #0]
 800d33e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d340:	683a      	ldr	r2, [r7, #0]
 800d342:	4904      	ldr	r1, [pc, #16]	; (800d354 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800d344:	4804      	ldr	r0, [pc, #16]	; (800d358 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800d346:	f7ff fdb5 	bl	800ceb4 <USBD_GetString>
  return USBD_StrDesc;
 800d34a:	4b02      	ldr	r3, [pc, #8]	; (800d354 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3708      	adds	r7, #8
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}
 800d354:	20005010 	.word	0x20005010
 800d358:	080125c0 	.word	0x080125c0

0800d35c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b082      	sub	sp, #8
 800d360:	af00      	add	r7, sp, #0
 800d362:	4603      	mov	r3, r0
 800d364:	6039      	str	r1, [r7, #0]
 800d366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	221a      	movs	r2, #26
 800d36c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d36e:	f000 f843 	bl	800d3f8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800d372:	4b02      	ldr	r3, [pc, #8]	; (800d37c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800d374:	4618      	mov	r0, r3
 800d376:	3708      	adds	r7, #8
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	200000f4 	.word	0x200000f4

0800d380 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b082      	sub	sp, #8
 800d384:	af00      	add	r7, sp, #0
 800d386:	4603      	mov	r3, r0
 800d388:	6039      	str	r1, [r7, #0]
 800d38a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d38c:	79fb      	ldrb	r3, [r7, #7]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d105      	bne.n	800d39e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d392:	683a      	ldr	r2, [r7, #0]
 800d394:	4907      	ldr	r1, [pc, #28]	; (800d3b4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d396:	4808      	ldr	r0, [pc, #32]	; (800d3b8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d398:	f7ff fd8c 	bl	800ceb4 <USBD_GetString>
 800d39c:	e004      	b.n	800d3a8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d39e:	683a      	ldr	r2, [r7, #0]
 800d3a0:	4904      	ldr	r1, [pc, #16]	; (800d3b4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d3a2:	4805      	ldr	r0, [pc, #20]	; (800d3b8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d3a4:	f7ff fd86 	bl	800ceb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d3a8:	4b02      	ldr	r3, [pc, #8]	; (800d3b4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	3708      	adds	r7, #8
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}
 800d3b2:	bf00      	nop
 800d3b4:	20005010 	.word	0x20005010
 800d3b8:	080125d4 	.word	0x080125d4

0800d3bc <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b082      	sub	sp, #8
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	6039      	str	r1, [r7, #0]
 800d3c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d3c8:	79fb      	ldrb	r3, [r7, #7]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d105      	bne.n	800d3da <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d3ce:	683a      	ldr	r2, [r7, #0]
 800d3d0:	4907      	ldr	r1, [pc, #28]	; (800d3f0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d3d2:	4808      	ldr	r0, [pc, #32]	; (800d3f4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d3d4:	f7ff fd6e 	bl	800ceb4 <USBD_GetString>
 800d3d8:	e004      	b.n	800d3e4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d3da:	683a      	ldr	r2, [r7, #0]
 800d3dc:	4904      	ldr	r1, [pc, #16]	; (800d3f0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d3de:	4805      	ldr	r0, [pc, #20]	; (800d3f4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d3e0:	f7ff fd68 	bl	800ceb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d3e4:	4b02      	ldr	r3, [pc, #8]	; (800d3f0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3708      	adds	r7, #8
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
 800d3ee:	bf00      	nop
 800d3f0:	20005010 	.word	0x20005010
 800d3f4:	080125e0 	.word	0x080125e0

0800d3f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b084      	sub	sp, #16
 800d3fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d3fe:	4b0f      	ldr	r3, [pc, #60]	; (800d43c <Get_SerialNum+0x44>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d404:	4b0e      	ldr	r3, [pc, #56]	; (800d440 <Get_SerialNum+0x48>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d40a:	4b0e      	ldr	r3, [pc, #56]	; (800d444 <Get_SerialNum+0x4c>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d410:	68fa      	ldr	r2, [r7, #12]
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	4413      	add	r3, r2
 800d416:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d009      	beq.n	800d432 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d41e:	2208      	movs	r2, #8
 800d420:	4909      	ldr	r1, [pc, #36]	; (800d448 <Get_SerialNum+0x50>)
 800d422:	68f8      	ldr	r0, [r7, #12]
 800d424:	f000 f814 	bl	800d450 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d428:	2204      	movs	r2, #4
 800d42a:	4908      	ldr	r1, [pc, #32]	; (800d44c <Get_SerialNum+0x54>)
 800d42c:	68b8      	ldr	r0, [r7, #8]
 800d42e:	f000 f80f 	bl	800d450 <IntToUnicode>
  }
}
 800d432:	bf00      	nop
 800d434:	3710      	adds	r7, #16
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
 800d43a:	bf00      	nop
 800d43c:	1fff7590 	.word	0x1fff7590
 800d440:	1fff7594 	.word	0x1fff7594
 800d444:	1fff7598 	.word	0x1fff7598
 800d448:	200000f6 	.word	0x200000f6
 800d44c:	20000106 	.word	0x20000106

0800d450 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d450:	b480      	push	{r7}
 800d452:	b087      	sub	sp, #28
 800d454:	af00      	add	r7, sp, #0
 800d456:	60f8      	str	r0, [r7, #12]
 800d458:	60b9      	str	r1, [r7, #8]
 800d45a:	4613      	mov	r3, r2
 800d45c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d45e:	2300      	movs	r3, #0
 800d460:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d462:	2300      	movs	r3, #0
 800d464:	75fb      	strb	r3, [r7, #23]
 800d466:	e027      	b.n	800d4b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	0f1b      	lsrs	r3, r3, #28
 800d46c:	2b09      	cmp	r3, #9
 800d46e:	d80b      	bhi.n	800d488 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	0f1b      	lsrs	r3, r3, #28
 800d474:	b2da      	uxtb	r2, r3
 800d476:	7dfb      	ldrb	r3, [r7, #23]
 800d478:	005b      	lsls	r3, r3, #1
 800d47a:	4619      	mov	r1, r3
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	440b      	add	r3, r1
 800d480:	3230      	adds	r2, #48	; 0x30
 800d482:	b2d2      	uxtb	r2, r2
 800d484:	701a      	strb	r2, [r3, #0]
 800d486:	e00a      	b.n	800d49e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	0f1b      	lsrs	r3, r3, #28
 800d48c:	b2da      	uxtb	r2, r3
 800d48e:	7dfb      	ldrb	r3, [r7, #23]
 800d490:	005b      	lsls	r3, r3, #1
 800d492:	4619      	mov	r1, r3
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	440b      	add	r3, r1
 800d498:	3237      	adds	r2, #55	; 0x37
 800d49a:	b2d2      	uxtb	r2, r2
 800d49c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	011b      	lsls	r3, r3, #4
 800d4a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d4a4:	7dfb      	ldrb	r3, [r7, #23]
 800d4a6:	005b      	lsls	r3, r3, #1
 800d4a8:	3301      	adds	r3, #1
 800d4aa:	68ba      	ldr	r2, [r7, #8]
 800d4ac:	4413      	add	r3, r2
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d4b2:	7dfb      	ldrb	r3, [r7, #23]
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	75fb      	strb	r3, [r7, #23]
 800d4b8:	7dfa      	ldrb	r2, [r7, #23]
 800d4ba:	79fb      	ldrb	r3, [r7, #7]
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d3d3      	bcc.n	800d468 <IntToUnicode+0x18>
  }
}
 800d4c0:	bf00      	nop
 800d4c2:	bf00      	nop
 800d4c4:	371c      	adds	r7, #28
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4cc:	4770      	bx	lr

0800d4ce <LL_AHB2_GRP1_EnableClock>:
{
 800d4ce:	b480      	push	{r7}
 800d4d0:	b085      	sub	sp, #20
 800d4d2:	af00      	add	r7, sp, #0
 800d4d4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800d4d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d4da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d4dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	4313      	orrs	r3, r2
 800d4e4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800d4e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d4ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	4013      	ands	r3, r2
 800d4f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
}
 800d4f4:	bf00      	nop
 800d4f6:	3714      	adds	r7, #20
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr

0800d500 <LL_APB1_GRP1_EnableClock>:
{
 800d500:	b480      	push	{r7}
 800d502:	b085      	sub	sp, #20
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800d508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d50c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d50e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	4313      	orrs	r3, r2
 800d516:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800d518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d51c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	4013      	ands	r3, r2
 800d522:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d524:	68fb      	ldr	r3, [r7, #12]
}
 800d526:	bf00      	nop
 800d528:	3714      	adds	r7, #20
 800d52a:	46bd      	mov	sp, r7
 800d52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d530:	4770      	bx	lr
	...

0800d534 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b09c      	sub	sp, #112	; 0x70
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d53c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d540:	2200      	movs	r2, #0
 800d542:	601a      	str	r2, [r3, #0]
 800d544:	605a      	str	r2, [r3, #4]
 800d546:	609a      	str	r2, [r3, #8]
 800d548:	60da      	str	r2, [r3, #12]
 800d54a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d54c:	f107 030c 	add.w	r3, r7, #12
 800d550:	2250      	movs	r2, #80	; 0x50
 800d552:	2100      	movs	r1, #0
 800d554:	4618      	mov	r0, r3
 800d556:	f000 fb53 	bl	800dc00 <memset>
  if(pcdHandle->Instance==USB)
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	4a23      	ldr	r2, [pc, #140]	; (800d5ec <HAL_PCD_MspInit+0xb8>)
 800d560:	4293      	cmp	r3, r2
 800d562:	d13e      	bne.n	800d5e2 <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d564:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d568:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800d56a:	2318      	movs	r3, #24
 800d56c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800d56e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d572:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800d574:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d578:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800d57a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800d57e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800d580:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d584:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800d586:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d58a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d58c:	f107 030c 	add.w	r3, r7, #12
 800d590:	4618      	mov	r0, r3
 800d592:	f7fa fd95 	bl	80080c0 <HAL_RCCEx_PeriphCLKConfig>
 800d596:	4603      	mov	r3, r0
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d001      	beq.n	800d5a0 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800d59c:	f7f6 feb4 	bl	8004308 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d5a0:	2001      	movs	r0, #1
 800d5a2:	f7ff ff94 	bl	800d4ce <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d5a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d5aa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5ac:	2302      	movs	r3, #2
 800d5ae:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800d5b8:	230a      	movs	r3, #10
 800d5ba:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d5bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d5c0:	4619      	mov	r1, r3
 800d5c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d5c6:	f7f7 fa7f 	bl	8004ac8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d5ca:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800d5ce:	f7ff ff97 	bl	800d500 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	2100      	movs	r1, #0
 800d5d6:	2014      	movs	r0, #20
 800d5d8:	f7f7 fa41 	bl	8004a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800d5dc:	2014      	movs	r0, #20
 800d5de:	f7f7 fa58 	bl	8004a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d5e2:	bf00      	nop
 800d5e4:	3770      	adds	r7, #112	; 0x70
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	bf00      	nop
 800d5ec:	40006800 	.word	0x40006800

0800d5f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b082      	sub	sp, #8
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d604:	4619      	mov	r1, r3
 800d606:	4610      	mov	r0, r2
 800d608:	f7fe fb57 	bl	800bcba <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800d60c:	bf00      	nop
 800d60e:	3708      	adds	r7, #8
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}

0800d614 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b082      	sub	sp, #8
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	460b      	mov	r3, r1
 800d61e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800d626:	78fa      	ldrb	r2, [r7, #3]
 800d628:	6879      	ldr	r1, [r7, #4]
 800d62a:	4613      	mov	r3, r2
 800d62c:	009b      	lsls	r3, r3, #2
 800d62e:	4413      	add	r3, r2
 800d630:	00db      	lsls	r3, r3, #3
 800d632:	440b      	add	r3, r1
 800d634:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d638:	681a      	ldr	r2, [r3, #0]
 800d63a:	78fb      	ldrb	r3, [r7, #3]
 800d63c:	4619      	mov	r1, r3
 800d63e:	f7fe fb91 	bl	800bd64 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800d642:	bf00      	nop
 800d644:	3708      	adds	r7, #8
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}

0800d64a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d64a:	b580      	push	{r7, lr}
 800d64c:	b082      	sub	sp, #8
 800d64e:	af00      	add	r7, sp, #0
 800d650:	6078      	str	r0, [r7, #4]
 800d652:	460b      	mov	r3, r1
 800d654:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800d65c:	78fa      	ldrb	r2, [r7, #3]
 800d65e:	6879      	ldr	r1, [r7, #4]
 800d660:	4613      	mov	r3, r2
 800d662:	009b      	lsls	r3, r3, #2
 800d664:	4413      	add	r3, r2
 800d666:	00db      	lsls	r3, r3, #3
 800d668:	440b      	add	r3, r1
 800d66a:	333c      	adds	r3, #60	; 0x3c
 800d66c:	681a      	ldr	r2, [r3, #0]
 800d66e:	78fb      	ldrb	r3, [r7, #3]
 800d670:	4619      	mov	r1, r3
 800d672:	f7fe fc2a 	bl	800beca <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800d676:	bf00      	nop
 800d678:	3708      	adds	r7, #8
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}

0800d67e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d67e:	b580      	push	{r7, lr}
 800d680:	b082      	sub	sp, #8
 800d682:	af00      	add	r7, sp, #0
 800d684:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d68c:	4618      	mov	r0, r3
 800d68e:	f7fe fd64 	bl	800c15a <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800d692:	bf00      	nop
 800d694:	3708      	adds	r7, #8
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}

0800d69a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d69a:	b580      	push	{r7, lr}
 800d69c:	b084      	sub	sp, #16
 800d69e:	af00      	add	r7, sp, #0
 800d6a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	689b      	ldr	r3, [r3, #8]
 800d6aa:	2b02      	cmp	r3, #2
 800d6ac:	d001      	beq.n	800d6b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d6ae:	f7f6 fe2b 	bl	8004308 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d6b8:	7bfa      	ldrb	r2, [r7, #15]
 800d6ba:	4611      	mov	r1, r2
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7fe fd08 	bl	800c0d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f7fe fcb0 	bl	800c02e <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800d6ce:	bf00      	nop
 800d6d0:	3710      	adds	r7, #16
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}
	...

0800d6d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b082      	sub	sp, #8
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f7fe fd03 	bl	800c0f2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	699b      	ldr	r3, [r3, #24]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d005      	beq.n	800d700 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d6f4:	4b04      	ldr	r3, [pc, #16]	; (800d708 <HAL_PCD_SuspendCallback+0x30>)
 800d6f6:	691b      	ldr	r3, [r3, #16]
 800d6f8:	4a03      	ldr	r2, [pc, #12]	; (800d708 <HAL_PCD_SuspendCallback+0x30>)
 800d6fa:	f043 0306 	orr.w	r3, r3, #6
 800d6fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800d700:	bf00      	nop
 800d702:	3708      	adds	r7, #8
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}
 800d708:	e000ed00 	.word	0xe000ed00

0800d70c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b082      	sub	sp, #8
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	699b      	ldr	r3, [r3, #24]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d007      	beq.n	800d72c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d71c:	4b08      	ldr	r3, [pc, #32]	; (800d740 <HAL_PCD_ResumeCallback+0x34>)
 800d71e:	691b      	ldr	r3, [r3, #16]
 800d720:	4a07      	ldr	r2, [pc, #28]	; (800d740 <HAL_PCD_ResumeCallback+0x34>)
 800d722:	f023 0306 	bic.w	r3, r3, #6
 800d726:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d728:	f000 f9fc 	bl	800db24 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d732:	4618      	mov	r0, r3
 800d734:	f7fe fcf9 	bl	800c12a <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800d738:	bf00      	nop
 800d73a:	3708      	adds	r7, #8
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}
 800d740:	e000ed00 	.word	0xe000ed00

0800d744 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b082      	sub	sp, #8
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800d74c:	4a2c      	ldr	r2, [pc, #176]	; (800d800 <USBD_LL_Init+0xbc>)
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	4a2a      	ldr	r2, [pc, #168]	; (800d800 <USBD_LL_Init+0xbc>)
 800d758:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800d75c:	f7f9 f9ac 	bl	8006ab8 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800d760:	4b27      	ldr	r3, [pc, #156]	; (800d800 <USBD_LL_Init+0xbc>)
 800d762:	4a28      	ldr	r2, [pc, #160]	; (800d804 <USBD_LL_Init+0xc0>)
 800d764:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d766:	4b26      	ldr	r3, [pc, #152]	; (800d800 <USBD_LL_Init+0xbc>)
 800d768:	2208      	movs	r2, #8
 800d76a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d76c:	4b24      	ldr	r3, [pc, #144]	; (800d800 <USBD_LL_Init+0xbc>)
 800d76e:	2202      	movs	r2, #2
 800d770:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d772:	4b23      	ldr	r3, [pc, #140]	; (800d800 <USBD_LL_Init+0xbc>)
 800d774:	2202      	movs	r2, #2
 800d776:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d778:	4b21      	ldr	r3, [pc, #132]	; (800d800 <USBD_LL_Init+0xbc>)
 800d77a:	2200      	movs	r2, #0
 800d77c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d77e:	4b20      	ldr	r3, [pc, #128]	; (800d800 <USBD_LL_Init+0xbc>)
 800d780:	2200      	movs	r2, #0
 800d782:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d784:	4b1e      	ldr	r3, [pc, #120]	; (800d800 <USBD_LL_Init+0xbc>)
 800d786:	2200      	movs	r2, #0
 800d788:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d78a:	4b1d      	ldr	r3, [pc, #116]	; (800d800 <USBD_LL_Init+0xbc>)
 800d78c:	2200      	movs	r2, #0
 800d78e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d790:	481b      	ldr	r0, [pc, #108]	; (800d800 <USBD_LL_Init+0xbc>)
 800d792:	f7f7 fc2f 	bl	8004ff4 <HAL_PCD_Init>
 800d796:	4603      	mov	r3, r0
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d001      	beq.n	800d7a0 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800d79c:	f7f6 fdb4 	bl	8004308 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d7a6:	2318      	movs	r3, #24
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	2100      	movs	r1, #0
 800d7ac:	f7f9 f8f8 	bl	80069a0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d7b6:	2358      	movs	r3, #88	; 0x58
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	2180      	movs	r1, #128	; 0x80
 800d7bc:	f7f9 f8f0 	bl	80069a0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d7c6:	23c0      	movs	r3, #192	; 0xc0
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	2181      	movs	r1, #129	; 0x81
 800d7cc:	f7f9 f8e8 	bl	80069a0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d7d6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d7da:	2200      	movs	r2, #0
 800d7dc:	2101      	movs	r1, #1
 800d7de:	f7f9 f8df 	bl	80069a0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d7e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	2182      	movs	r1, #130	; 0x82
 800d7f0:	f7f9 f8d6 	bl	80069a0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d7f4:	2300      	movs	r3, #0
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3708      	adds	r7, #8
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}
 800d7fe:	bf00      	nop
 800d800:	20005210 	.word	0x20005210
 800d804:	40006800 	.word	0x40006800

0800d808 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b084      	sub	sp, #16
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d810:	2300      	movs	r3, #0
 800d812:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d814:	2300      	movs	r3, #0
 800d816:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d81e:	4618      	mov	r0, r3
 800d820:	f7f7 fcc1 	bl	80051a6 <HAL_PCD_Start>
 800d824:	4603      	mov	r3, r0
 800d826:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d828:	7bfb      	ldrb	r3, [r7, #15]
 800d82a:	4618      	mov	r0, r3
 800d82c:	f000 f980 	bl	800db30 <USBD_Get_USB_Status>
 800d830:	4603      	mov	r3, r0
 800d832:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d834:	7bbb      	ldrb	r3, [r7, #14]
}
 800d836:	4618      	mov	r0, r3
 800d838:	3710      	adds	r7, #16
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}

0800d83e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d83e:	b580      	push	{r7, lr}
 800d840:	b084      	sub	sp, #16
 800d842:	af00      	add	r7, sp, #0
 800d844:	6078      	str	r0, [r7, #4]
 800d846:	4608      	mov	r0, r1
 800d848:	4611      	mov	r1, r2
 800d84a:	461a      	mov	r2, r3
 800d84c:	4603      	mov	r3, r0
 800d84e:	70fb      	strb	r3, [r7, #3]
 800d850:	460b      	mov	r3, r1
 800d852:	70bb      	strb	r3, [r7, #2]
 800d854:	4613      	mov	r3, r2
 800d856:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d858:	2300      	movs	r3, #0
 800d85a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d85c:	2300      	movs	r3, #0
 800d85e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d866:	78bb      	ldrb	r3, [r7, #2]
 800d868:	883a      	ldrh	r2, [r7, #0]
 800d86a:	78f9      	ldrb	r1, [r7, #3]
 800d86c:	f7f7 fe09 	bl	8005482 <HAL_PCD_EP_Open>
 800d870:	4603      	mov	r3, r0
 800d872:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d874:	7bfb      	ldrb	r3, [r7, #15]
 800d876:	4618      	mov	r0, r3
 800d878:	f000 f95a 	bl	800db30 <USBD_Get_USB_Status>
 800d87c:	4603      	mov	r3, r0
 800d87e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d880:	7bbb      	ldrb	r3, [r7, #14]
}
 800d882:	4618      	mov	r0, r3
 800d884:	3710      	adds	r7, #16
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}

0800d88a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d88a:	b580      	push	{r7, lr}
 800d88c:	b084      	sub	sp, #16
 800d88e:	af00      	add	r7, sp, #0
 800d890:	6078      	str	r0, [r7, #4]
 800d892:	460b      	mov	r3, r1
 800d894:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d896:	2300      	movs	r3, #0
 800d898:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d89a:	2300      	movs	r3, #0
 800d89c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d8a4:	78fa      	ldrb	r2, [r7, #3]
 800d8a6:	4611      	mov	r1, r2
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f7f7 fe47 	bl	800553c <HAL_PCD_EP_Close>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8b2:	7bfb      	ldrb	r3, [r7, #15]
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f000 f93b 	bl	800db30 <USBD_Get_USB_Status>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8be:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	3710      	adds	r7, #16
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}

0800d8c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b084      	sub	sp, #16
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
 800d8d0:	460b      	mov	r3, r1
 800d8d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d8e2:	78fa      	ldrb	r2, [r7, #3]
 800d8e4:	4611      	mov	r1, r2
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f7f7 fef0 	bl	80056cc <HAL_PCD_EP_SetStall>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8f0:	7bfb      	ldrb	r3, [r7, #15]
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f000 f91c 	bl	800db30 <USBD_Get_USB_Status>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	3710      	adds	r7, #16
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}

0800d906 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d906:	b580      	push	{r7, lr}
 800d908:	b084      	sub	sp, #16
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	6078      	str	r0, [r7, #4]
 800d90e:	460b      	mov	r3, r1
 800d910:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d912:	2300      	movs	r3, #0
 800d914:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d916:	2300      	movs	r3, #0
 800d918:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d920:	78fa      	ldrb	r2, [r7, #3]
 800d922:	4611      	mov	r1, r2
 800d924:	4618      	mov	r0, r3
 800d926:	f7f7 ff23 	bl	8005770 <HAL_PCD_EP_ClrStall>
 800d92a:	4603      	mov	r3, r0
 800d92c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d92e:	7bfb      	ldrb	r3, [r7, #15]
 800d930:	4618      	mov	r0, r3
 800d932:	f000 f8fd 	bl	800db30 <USBD_Get_USB_Status>
 800d936:	4603      	mov	r3, r0
 800d938:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d93a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3710      	adds	r7, #16
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d944:	b480      	push	{r7}
 800d946:	b085      	sub	sp, #20
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	460b      	mov	r3, r1
 800d94e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d956:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d958:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	da0c      	bge.n	800d97a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d960:	78fb      	ldrb	r3, [r7, #3]
 800d962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d966:	68f9      	ldr	r1, [r7, #12]
 800d968:	1c5a      	adds	r2, r3, #1
 800d96a:	4613      	mov	r3, r2
 800d96c:	009b      	lsls	r3, r3, #2
 800d96e:	4413      	add	r3, r2
 800d970:	00db      	lsls	r3, r3, #3
 800d972:	440b      	add	r3, r1
 800d974:	3302      	adds	r3, #2
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	e00b      	b.n	800d992 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d97a:	78fb      	ldrb	r3, [r7, #3]
 800d97c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d980:	68f9      	ldr	r1, [r7, #12]
 800d982:	4613      	mov	r3, r2
 800d984:	009b      	lsls	r3, r3, #2
 800d986:	4413      	add	r3, r2
 800d988:	00db      	lsls	r3, r3, #3
 800d98a:	440b      	add	r3, r1
 800d98c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800d990:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d992:	4618      	mov	r0, r3
 800d994:	3714      	adds	r7, #20
 800d996:	46bd      	mov	sp, r7
 800d998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99c:	4770      	bx	lr

0800d99e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d99e:	b580      	push	{r7, lr}
 800d9a0:	b084      	sub	sp, #16
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	6078      	str	r0, [r7, #4]
 800d9a6:	460b      	mov	r3, r1
 800d9a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d9b8:	78fa      	ldrb	r2, [r7, #3]
 800d9ba:	4611      	mov	r1, r2
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f7f7 fd3b 	bl	8005438 <HAL_PCD_SetAddress>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9c6:	7bfb      	ldrb	r3, [r7, #15]
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f000 f8b1 	bl	800db30 <USBD_Get_USB_Status>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3710      	adds	r7, #16
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}

0800d9dc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b086      	sub	sp, #24
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	60f8      	str	r0, [r7, #12]
 800d9e4:	607a      	str	r2, [r7, #4]
 800d9e6:	603b      	str	r3, [r7, #0]
 800d9e8:	460b      	mov	r3, r1
 800d9ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d9fa:	7af9      	ldrb	r1, [r7, #11]
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	687a      	ldr	r2, [r7, #4]
 800da00:	f7f7 fe2d 	bl	800565e <HAL_PCD_EP_Transmit>
 800da04:	4603      	mov	r3, r0
 800da06:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da08:	7dfb      	ldrb	r3, [r7, #23]
 800da0a:	4618      	mov	r0, r3
 800da0c:	f000 f890 	bl	800db30 <USBD_Get_USB_Status>
 800da10:	4603      	mov	r3, r0
 800da12:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da14:	7dbb      	ldrb	r3, [r7, #22]
}
 800da16:	4618      	mov	r0, r3
 800da18:	3718      	adds	r7, #24
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}

0800da1e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800da1e:	b580      	push	{r7, lr}
 800da20:	b086      	sub	sp, #24
 800da22:	af00      	add	r7, sp, #0
 800da24:	60f8      	str	r0, [r7, #12]
 800da26:	607a      	str	r2, [r7, #4]
 800da28:	603b      	str	r3, [r7, #0]
 800da2a:	460b      	mov	r3, r1
 800da2c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da2e:	2300      	movs	r3, #0
 800da30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da32:	2300      	movs	r3, #0
 800da34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800da3c:	7af9      	ldrb	r1, [r7, #11]
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	687a      	ldr	r2, [r7, #4]
 800da42:	f7f7 fdc3 	bl	80055cc <HAL_PCD_EP_Receive>
 800da46:	4603      	mov	r3, r0
 800da48:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da4a:	7dfb      	ldrb	r3, [r7, #23]
 800da4c:	4618      	mov	r0, r3
 800da4e:	f000 f86f 	bl	800db30 <USBD_Get_USB_Status>
 800da52:	4603      	mov	r3, r0
 800da54:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da56:	7dbb      	ldrb	r3, [r7, #22]
}
 800da58:	4618      	mov	r0, r3
 800da5a:	3718      	adds	r7, #24
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}

0800da60 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b082      	sub	sp, #8
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
 800da68:	460b      	mov	r3, r1
 800da6a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800da72:	78fa      	ldrb	r2, [r7, #3]
 800da74:	4611      	mov	r1, r2
 800da76:	4618      	mov	r0, r3
 800da78:	f7f7 fdd9 	bl	800562e <HAL_PCD_EP_GetRxCount>
 800da7c:	4603      	mov	r3, r0
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3708      	adds	r7, #8
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
	...

0800da88 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b082      	sub	sp, #8
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	460b      	mov	r3, r1
 800da92:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800da94:	78fb      	ldrb	r3, [r7, #3]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d002      	beq.n	800daa0 <HAL_PCDEx_LPM_Callback+0x18>
 800da9a:	2b01      	cmp	r3, #1
 800da9c:	d013      	beq.n	800dac6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800da9e:	e023      	b.n	800dae8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	699b      	ldr	r3, [r3, #24]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d007      	beq.n	800dab8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800daa8:	f000 f83c 	bl	800db24 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800daac:	4b10      	ldr	r3, [pc, #64]	; (800daf0 <HAL_PCDEx_LPM_Callback+0x68>)
 800daae:	691b      	ldr	r3, [r3, #16]
 800dab0:	4a0f      	ldr	r2, [pc, #60]	; (800daf0 <HAL_PCDEx_LPM_Callback+0x68>)
 800dab2:	f023 0306 	bic.w	r3, r3, #6
 800dab6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800dabe:	4618      	mov	r0, r3
 800dac0:	f7fe fb33 	bl	800c12a <USBD_LL_Resume>
    break;
 800dac4:	e010      	b.n	800dae8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800dacc:	4618      	mov	r0, r3
 800dace:	f7fe fb10 	bl	800c0f2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	699b      	ldr	r3, [r3, #24]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d005      	beq.n	800dae6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dada:	4b05      	ldr	r3, [pc, #20]	; (800daf0 <HAL_PCDEx_LPM_Callback+0x68>)
 800dadc:	691b      	ldr	r3, [r3, #16]
 800dade:	4a04      	ldr	r2, [pc, #16]	; (800daf0 <HAL_PCDEx_LPM_Callback+0x68>)
 800dae0:	f043 0306 	orr.w	r3, r3, #6
 800dae4:	6113      	str	r3, [r2, #16]
    break;
 800dae6:	bf00      	nop
}
 800dae8:	bf00      	nop
 800daea:	3708      	adds	r7, #8
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}
 800daf0:	e000ed00 	.word	0xe000ed00

0800daf4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800daf4:	b480      	push	{r7}
 800daf6:	b083      	sub	sp, #12
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dafc:	4b03      	ldr	r3, [pc, #12]	; (800db0c <USBD_static_malloc+0x18>)
}
 800dafe:	4618      	mov	r0, r3
 800db00:	370c      	adds	r7, #12
 800db02:	46bd      	mov	sp, r7
 800db04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db08:	4770      	bx	lr
 800db0a:	bf00      	nop
 800db0c:	20005504 	.word	0x20005504

0800db10 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800db10:	b480      	push	{r7}
 800db12:	b083      	sub	sp, #12
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800db18:	bf00      	nop
 800db1a:	370c      	adds	r7, #12
 800db1c:	46bd      	mov	sp, r7
 800db1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db22:	4770      	bx	lr

0800db24 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800db28:	f7f6 fad0 	bl	80040cc <SystemClock_Config>
}
 800db2c:	bf00      	nop
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800db30:	b480      	push	{r7}
 800db32:	b085      	sub	sp, #20
 800db34:	af00      	add	r7, sp, #0
 800db36:	4603      	mov	r3, r0
 800db38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db3a:	2300      	movs	r3, #0
 800db3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800db3e:	79fb      	ldrb	r3, [r7, #7]
 800db40:	2b03      	cmp	r3, #3
 800db42:	d817      	bhi.n	800db74 <USBD_Get_USB_Status+0x44>
 800db44:	a201      	add	r2, pc, #4	; (adr r2, 800db4c <USBD_Get_USB_Status+0x1c>)
 800db46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db4a:	bf00      	nop
 800db4c:	0800db5d 	.word	0x0800db5d
 800db50:	0800db63 	.word	0x0800db63
 800db54:	0800db69 	.word	0x0800db69
 800db58:	0800db6f 	.word	0x0800db6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800db5c:	2300      	movs	r3, #0
 800db5e:	73fb      	strb	r3, [r7, #15]
    break;
 800db60:	e00b      	b.n	800db7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800db62:	2303      	movs	r3, #3
 800db64:	73fb      	strb	r3, [r7, #15]
    break;
 800db66:	e008      	b.n	800db7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800db68:	2301      	movs	r3, #1
 800db6a:	73fb      	strb	r3, [r7, #15]
    break;
 800db6c:	e005      	b.n	800db7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800db6e:	2303      	movs	r3, #3
 800db70:	73fb      	strb	r3, [r7, #15]
    break;
 800db72:	e002      	b.n	800db7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800db74:	2303      	movs	r3, #3
 800db76:	73fb      	strb	r3, [r7, #15]
    break;
 800db78:	bf00      	nop
  }
  return usb_status;
 800db7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800db7c:	4618      	mov	r0, r3
 800db7e:	3714      	adds	r7, #20
 800db80:	46bd      	mov	sp, r7
 800db82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db86:	4770      	bx	lr

0800db88 <atoi>:
 800db88:	220a      	movs	r2, #10
 800db8a:	2100      	movs	r1, #0
 800db8c:	f001 bd8c 	b.w	800f6a8 <strtol>

0800db90 <__errno>:
 800db90:	4b01      	ldr	r3, [pc, #4]	; (800db98 <__errno+0x8>)
 800db92:	6818      	ldr	r0, [r3, #0]
 800db94:	4770      	bx	lr
 800db96:	bf00      	nop
 800db98:	20000110 	.word	0x20000110

0800db9c <__libc_init_array>:
 800db9c:	b570      	push	{r4, r5, r6, lr}
 800db9e:	4d0d      	ldr	r5, [pc, #52]	; (800dbd4 <__libc_init_array+0x38>)
 800dba0:	4c0d      	ldr	r4, [pc, #52]	; (800dbd8 <__libc_init_array+0x3c>)
 800dba2:	1b64      	subs	r4, r4, r5
 800dba4:	10a4      	asrs	r4, r4, #2
 800dba6:	2600      	movs	r6, #0
 800dba8:	42a6      	cmp	r6, r4
 800dbaa:	d109      	bne.n	800dbc0 <__libc_init_array+0x24>
 800dbac:	4d0b      	ldr	r5, [pc, #44]	; (800dbdc <__libc_init_array+0x40>)
 800dbae:	4c0c      	ldr	r4, [pc, #48]	; (800dbe0 <__libc_init_array+0x44>)
 800dbb0:	f004 fc9a 	bl	80124e8 <_init>
 800dbb4:	1b64      	subs	r4, r4, r5
 800dbb6:	10a4      	asrs	r4, r4, #2
 800dbb8:	2600      	movs	r6, #0
 800dbba:	42a6      	cmp	r6, r4
 800dbbc:	d105      	bne.n	800dbca <__libc_init_array+0x2e>
 800dbbe:	bd70      	pop	{r4, r5, r6, pc}
 800dbc0:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbc4:	4798      	blx	r3
 800dbc6:	3601      	adds	r6, #1
 800dbc8:	e7ee      	b.n	800dba8 <__libc_init_array+0xc>
 800dbca:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbce:	4798      	blx	r3
 800dbd0:	3601      	adds	r6, #1
 800dbd2:	e7f2      	b.n	800dbba <__libc_init_array+0x1e>
 800dbd4:	08012b54 	.word	0x08012b54
 800dbd8:	08012b54 	.word	0x08012b54
 800dbdc:	08012b54 	.word	0x08012b54
 800dbe0:	08012b58 	.word	0x08012b58

0800dbe4 <memcpy>:
 800dbe4:	440a      	add	r2, r1
 800dbe6:	4291      	cmp	r1, r2
 800dbe8:	f100 33ff 	add.w	r3, r0, #4294967295
 800dbec:	d100      	bne.n	800dbf0 <memcpy+0xc>
 800dbee:	4770      	bx	lr
 800dbf0:	b510      	push	{r4, lr}
 800dbf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dbfa:	4291      	cmp	r1, r2
 800dbfc:	d1f9      	bne.n	800dbf2 <memcpy+0xe>
 800dbfe:	bd10      	pop	{r4, pc}

0800dc00 <memset>:
 800dc00:	4402      	add	r2, r0
 800dc02:	4603      	mov	r3, r0
 800dc04:	4293      	cmp	r3, r2
 800dc06:	d100      	bne.n	800dc0a <memset+0xa>
 800dc08:	4770      	bx	lr
 800dc0a:	f803 1b01 	strb.w	r1, [r3], #1
 800dc0e:	e7f9      	b.n	800dc04 <memset+0x4>

0800dc10 <__cvt>:
 800dc10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc14:	ec55 4b10 	vmov	r4, r5, d0
 800dc18:	2d00      	cmp	r5, #0
 800dc1a:	460e      	mov	r6, r1
 800dc1c:	4619      	mov	r1, r3
 800dc1e:	462b      	mov	r3, r5
 800dc20:	bfbb      	ittet	lt
 800dc22:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800dc26:	461d      	movlt	r5, r3
 800dc28:	2300      	movge	r3, #0
 800dc2a:	232d      	movlt	r3, #45	; 0x2d
 800dc2c:	700b      	strb	r3, [r1, #0]
 800dc2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc30:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800dc34:	4691      	mov	r9, r2
 800dc36:	f023 0820 	bic.w	r8, r3, #32
 800dc3a:	bfbc      	itt	lt
 800dc3c:	4622      	movlt	r2, r4
 800dc3e:	4614      	movlt	r4, r2
 800dc40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dc44:	d005      	beq.n	800dc52 <__cvt+0x42>
 800dc46:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800dc4a:	d100      	bne.n	800dc4e <__cvt+0x3e>
 800dc4c:	3601      	adds	r6, #1
 800dc4e:	2102      	movs	r1, #2
 800dc50:	e000      	b.n	800dc54 <__cvt+0x44>
 800dc52:	2103      	movs	r1, #3
 800dc54:	ab03      	add	r3, sp, #12
 800dc56:	9301      	str	r3, [sp, #4]
 800dc58:	ab02      	add	r3, sp, #8
 800dc5a:	9300      	str	r3, [sp, #0]
 800dc5c:	ec45 4b10 	vmov	d0, r4, r5
 800dc60:	4653      	mov	r3, sl
 800dc62:	4632      	mov	r2, r6
 800dc64:	f001 fdb8 	bl	800f7d8 <_dtoa_r>
 800dc68:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800dc6c:	4607      	mov	r7, r0
 800dc6e:	d102      	bne.n	800dc76 <__cvt+0x66>
 800dc70:	f019 0f01 	tst.w	r9, #1
 800dc74:	d022      	beq.n	800dcbc <__cvt+0xac>
 800dc76:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dc7a:	eb07 0906 	add.w	r9, r7, r6
 800dc7e:	d110      	bne.n	800dca2 <__cvt+0x92>
 800dc80:	783b      	ldrb	r3, [r7, #0]
 800dc82:	2b30      	cmp	r3, #48	; 0x30
 800dc84:	d10a      	bne.n	800dc9c <__cvt+0x8c>
 800dc86:	2200      	movs	r2, #0
 800dc88:	2300      	movs	r3, #0
 800dc8a:	4620      	mov	r0, r4
 800dc8c:	4629      	mov	r1, r5
 800dc8e:	f7f2 fef3 	bl	8000a78 <__aeabi_dcmpeq>
 800dc92:	b918      	cbnz	r0, 800dc9c <__cvt+0x8c>
 800dc94:	f1c6 0601 	rsb	r6, r6, #1
 800dc98:	f8ca 6000 	str.w	r6, [sl]
 800dc9c:	f8da 3000 	ldr.w	r3, [sl]
 800dca0:	4499      	add	r9, r3
 800dca2:	2200      	movs	r2, #0
 800dca4:	2300      	movs	r3, #0
 800dca6:	4620      	mov	r0, r4
 800dca8:	4629      	mov	r1, r5
 800dcaa:	f7f2 fee5 	bl	8000a78 <__aeabi_dcmpeq>
 800dcae:	b108      	cbz	r0, 800dcb4 <__cvt+0xa4>
 800dcb0:	f8cd 900c 	str.w	r9, [sp, #12]
 800dcb4:	2230      	movs	r2, #48	; 0x30
 800dcb6:	9b03      	ldr	r3, [sp, #12]
 800dcb8:	454b      	cmp	r3, r9
 800dcba:	d307      	bcc.n	800dccc <__cvt+0xbc>
 800dcbc:	9b03      	ldr	r3, [sp, #12]
 800dcbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dcc0:	1bdb      	subs	r3, r3, r7
 800dcc2:	4638      	mov	r0, r7
 800dcc4:	6013      	str	r3, [r2, #0]
 800dcc6:	b004      	add	sp, #16
 800dcc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dccc:	1c59      	adds	r1, r3, #1
 800dcce:	9103      	str	r1, [sp, #12]
 800dcd0:	701a      	strb	r2, [r3, #0]
 800dcd2:	e7f0      	b.n	800dcb6 <__cvt+0xa6>

0800dcd4 <__exponent>:
 800dcd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	2900      	cmp	r1, #0
 800dcda:	bfb8      	it	lt
 800dcdc:	4249      	neglt	r1, r1
 800dcde:	f803 2b02 	strb.w	r2, [r3], #2
 800dce2:	bfb4      	ite	lt
 800dce4:	222d      	movlt	r2, #45	; 0x2d
 800dce6:	222b      	movge	r2, #43	; 0x2b
 800dce8:	2909      	cmp	r1, #9
 800dcea:	7042      	strb	r2, [r0, #1]
 800dcec:	dd2a      	ble.n	800dd44 <__exponent+0x70>
 800dcee:	f10d 0407 	add.w	r4, sp, #7
 800dcf2:	46a4      	mov	ip, r4
 800dcf4:	270a      	movs	r7, #10
 800dcf6:	46a6      	mov	lr, r4
 800dcf8:	460a      	mov	r2, r1
 800dcfa:	fb91 f6f7 	sdiv	r6, r1, r7
 800dcfe:	fb07 1516 	mls	r5, r7, r6, r1
 800dd02:	3530      	adds	r5, #48	; 0x30
 800dd04:	2a63      	cmp	r2, #99	; 0x63
 800dd06:	f104 34ff 	add.w	r4, r4, #4294967295
 800dd0a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800dd0e:	4631      	mov	r1, r6
 800dd10:	dcf1      	bgt.n	800dcf6 <__exponent+0x22>
 800dd12:	3130      	adds	r1, #48	; 0x30
 800dd14:	f1ae 0502 	sub.w	r5, lr, #2
 800dd18:	f804 1c01 	strb.w	r1, [r4, #-1]
 800dd1c:	1c44      	adds	r4, r0, #1
 800dd1e:	4629      	mov	r1, r5
 800dd20:	4561      	cmp	r1, ip
 800dd22:	d30a      	bcc.n	800dd3a <__exponent+0x66>
 800dd24:	f10d 0209 	add.w	r2, sp, #9
 800dd28:	eba2 020e 	sub.w	r2, r2, lr
 800dd2c:	4565      	cmp	r5, ip
 800dd2e:	bf88      	it	hi
 800dd30:	2200      	movhi	r2, #0
 800dd32:	4413      	add	r3, r2
 800dd34:	1a18      	subs	r0, r3, r0
 800dd36:	b003      	add	sp, #12
 800dd38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd3e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800dd42:	e7ed      	b.n	800dd20 <__exponent+0x4c>
 800dd44:	2330      	movs	r3, #48	; 0x30
 800dd46:	3130      	adds	r1, #48	; 0x30
 800dd48:	7083      	strb	r3, [r0, #2]
 800dd4a:	70c1      	strb	r1, [r0, #3]
 800dd4c:	1d03      	adds	r3, r0, #4
 800dd4e:	e7f1      	b.n	800dd34 <__exponent+0x60>

0800dd50 <_printf_float>:
 800dd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd54:	ed2d 8b02 	vpush	{d8}
 800dd58:	b08d      	sub	sp, #52	; 0x34
 800dd5a:	460c      	mov	r4, r1
 800dd5c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800dd60:	4616      	mov	r6, r2
 800dd62:	461f      	mov	r7, r3
 800dd64:	4605      	mov	r5, r0
 800dd66:	f002 fe95 	bl	8010a94 <_localeconv_r>
 800dd6a:	f8d0 a000 	ldr.w	sl, [r0]
 800dd6e:	4650      	mov	r0, sl
 800dd70:	f7f2 fa06 	bl	8000180 <strlen>
 800dd74:	2300      	movs	r3, #0
 800dd76:	930a      	str	r3, [sp, #40]	; 0x28
 800dd78:	6823      	ldr	r3, [r4, #0]
 800dd7a:	9305      	str	r3, [sp, #20]
 800dd7c:	f8d8 3000 	ldr.w	r3, [r8]
 800dd80:	f894 b018 	ldrb.w	fp, [r4, #24]
 800dd84:	3307      	adds	r3, #7
 800dd86:	f023 0307 	bic.w	r3, r3, #7
 800dd8a:	f103 0208 	add.w	r2, r3, #8
 800dd8e:	f8c8 2000 	str.w	r2, [r8]
 800dd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd96:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800dd9a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800dd9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dda2:	9307      	str	r3, [sp, #28]
 800dda4:	f8cd 8018 	str.w	r8, [sp, #24]
 800dda8:	ee08 0a10 	vmov	s16, r0
 800ddac:	4b9f      	ldr	r3, [pc, #636]	; (800e02c <_printf_float+0x2dc>)
 800ddae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ddb2:	f04f 32ff 	mov.w	r2, #4294967295
 800ddb6:	f7f2 fe91 	bl	8000adc <__aeabi_dcmpun>
 800ddba:	bb88      	cbnz	r0, 800de20 <_printf_float+0xd0>
 800ddbc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ddc0:	4b9a      	ldr	r3, [pc, #616]	; (800e02c <_printf_float+0x2dc>)
 800ddc2:	f04f 32ff 	mov.w	r2, #4294967295
 800ddc6:	f7f2 fe6b 	bl	8000aa0 <__aeabi_dcmple>
 800ddca:	bb48      	cbnz	r0, 800de20 <_printf_float+0xd0>
 800ddcc:	2200      	movs	r2, #0
 800ddce:	2300      	movs	r3, #0
 800ddd0:	4640      	mov	r0, r8
 800ddd2:	4649      	mov	r1, r9
 800ddd4:	f7f2 fe5a 	bl	8000a8c <__aeabi_dcmplt>
 800ddd8:	b110      	cbz	r0, 800dde0 <_printf_float+0x90>
 800ddda:	232d      	movs	r3, #45	; 0x2d
 800dddc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dde0:	4b93      	ldr	r3, [pc, #588]	; (800e030 <_printf_float+0x2e0>)
 800dde2:	4894      	ldr	r0, [pc, #592]	; (800e034 <_printf_float+0x2e4>)
 800dde4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800dde8:	bf94      	ite	ls
 800ddea:	4698      	movls	r8, r3
 800ddec:	4680      	movhi	r8, r0
 800ddee:	2303      	movs	r3, #3
 800ddf0:	6123      	str	r3, [r4, #16]
 800ddf2:	9b05      	ldr	r3, [sp, #20]
 800ddf4:	f023 0204 	bic.w	r2, r3, #4
 800ddf8:	6022      	str	r2, [r4, #0]
 800ddfa:	f04f 0900 	mov.w	r9, #0
 800ddfe:	9700      	str	r7, [sp, #0]
 800de00:	4633      	mov	r3, r6
 800de02:	aa0b      	add	r2, sp, #44	; 0x2c
 800de04:	4621      	mov	r1, r4
 800de06:	4628      	mov	r0, r5
 800de08:	f000 f9d8 	bl	800e1bc <_printf_common>
 800de0c:	3001      	adds	r0, #1
 800de0e:	f040 8090 	bne.w	800df32 <_printf_float+0x1e2>
 800de12:	f04f 30ff 	mov.w	r0, #4294967295
 800de16:	b00d      	add	sp, #52	; 0x34
 800de18:	ecbd 8b02 	vpop	{d8}
 800de1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de20:	4642      	mov	r2, r8
 800de22:	464b      	mov	r3, r9
 800de24:	4640      	mov	r0, r8
 800de26:	4649      	mov	r1, r9
 800de28:	f7f2 fe58 	bl	8000adc <__aeabi_dcmpun>
 800de2c:	b140      	cbz	r0, 800de40 <_printf_float+0xf0>
 800de2e:	464b      	mov	r3, r9
 800de30:	2b00      	cmp	r3, #0
 800de32:	bfbc      	itt	lt
 800de34:	232d      	movlt	r3, #45	; 0x2d
 800de36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800de3a:	487f      	ldr	r0, [pc, #508]	; (800e038 <_printf_float+0x2e8>)
 800de3c:	4b7f      	ldr	r3, [pc, #508]	; (800e03c <_printf_float+0x2ec>)
 800de3e:	e7d1      	b.n	800dde4 <_printf_float+0x94>
 800de40:	6863      	ldr	r3, [r4, #4]
 800de42:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800de46:	9206      	str	r2, [sp, #24]
 800de48:	1c5a      	adds	r2, r3, #1
 800de4a:	d13f      	bne.n	800decc <_printf_float+0x17c>
 800de4c:	2306      	movs	r3, #6
 800de4e:	6063      	str	r3, [r4, #4]
 800de50:	9b05      	ldr	r3, [sp, #20]
 800de52:	6861      	ldr	r1, [r4, #4]
 800de54:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800de58:	2300      	movs	r3, #0
 800de5a:	9303      	str	r3, [sp, #12]
 800de5c:	ab0a      	add	r3, sp, #40	; 0x28
 800de5e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800de62:	ab09      	add	r3, sp, #36	; 0x24
 800de64:	ec49 8b10 	vmov	d0, r8, r9
 800de68:	9300      	str	r3, [sp, #0]
 800de6a:	6022      	str	r2, [r4, #0]
 800de6c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800de70:	4628      	mov	r0, r5
 800de72:	f7ff fecd 	bl	800dc10 <__cvt>
 800de76:	9b06      	ldr	r3, [sp, #24]
 800de78:	9909      	ldr	r1, [sp, #36]	; 0x24
 800de7a:	2b47      	cmp	r3, #71	; 0x47
 800de7c:	4680      	mov	r8, r0
 800de7e:	d108      	bne.n	800de92 <_printf_float+0x142>
 800de80:	1cc8      	adds	r0, r1, #3
 800de82:	db02      	blt.n	800de8a <_printf_float+0x13a>
 800de84:	6863      	ldr	r3, [r4, #4]
 800de86:	4299      	cmp	r1, r3
 800de88:	dd41      	ble.n	800df0e <_printf_float+0x1be>
 800de8a:	f1ab 0b02 	sub.w	fp, fp, #2
 800de8e:	fa5f fb8b 	uxtb.w	fp, fp
 800de92:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800de96:	d820      	bhi.n	800deda <_printf_float+0x18a>
 800de98:	3901      	subs	r1, #1
 800de9a:	465a      	mov	r2, fp
 800de9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dea0:	9109      	str	r1, [sp, #36]	; 0x24
 800dea2:	f7ff ff17 	bl	800dcd4 <__exponent>
 800dea6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dea8:	1813      	adds	r3, r2, r0
 800deaa:	2a01      	cmp	r2, #1
 800deac:	4681      	mov	r9, r0
 800deae:	6123      	str	r3, [r4, #16]
 800deb0:	dc02      	bgt.n	800deb8 <_printf_float+0x168>
 800deb2:	6822      	ldr	r2, [r4, #0]
 800deb4:	07d2      	lsls	r2, r2, #31
 800deb6:	d501      	bpl.n	800debc <_printf_float+0x16c>
 800deb8:	3301      	adds	r3, #1
 800deba:	6123      	str	r3, [r4, #16]
 800debc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d09c      	beq.n	800ddfe <_printf_float+0xae>
 800dec4:	232d      	movs	r3, #45	; 0x2d
 800dec6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800deca:	e798      	b.n	800ddfe <_printf_float+0xae>
 800decc:	9a06      	ldr	r2, [sp, #24]
 800dece:	2a47      	cmp	r2, #71	; 0x47
 800ded0:	d1be      	bne.n	800de50 <_printf_float+0x100>
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d1bc      	bne.n	800de50 <_printf_float+0x100>
 800ded6:	2301      	movs	r3, #1
 800ded8:	e7b9      	b.n	800de4e <_printf_float+0xfe>
 800deda:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800dede:	d118      	bne.n	800df12 <_printf_float+0x1c2>
 800dee0:	2900      	cmp	r1, #0
 800dee2:	6863      	ldr	r3, [r4, #4]
 800dee4:	dd0b      	ble.n	800defe <_printf_float+0x1ae>
 800dee6:	6121      	str	r1, [r4, #16]
 800dee8:	b913      	cbnz	r3, 800def0 <_printf_float+0x1a0>
 800deea:	6822      	ldr	r2, [r4, #0]
 800deec:	07d0      	lsls	r0, r2, #31
 800deee:	d502      	bpl.n	800def6 <_printf_float+0x1a6>
 800def0:	3301      	adds	r3, #1
 800def2:	440b      	add	r3, r1
 800def4:	6123      	str	r3, [r4, #16]
 800def6:	65a1      	str	r1, [r4, #88]	; 0x58
 800def8:	f04f 0900 	mov.w	r9, #0
 800defc:	e7de      	b.n	800debc <_printf_float+0x16c>
 800defe:	b913      	cbnz	r3, 800df06 <_printf_float+0x1b6>
 800df00:	6822      	ldr	r2, [r4, #0]
 800df02:	07d2      	lsls	r2, r2, #31
 800df04:	d501      	bpl.n	800df0a <_printf_float+0x1ba>
 800df06:	3302      	adds	r3, #2
 800df08:	e7f4      	b.n	800def4 <_printf_float+0x1a4>
 800df0a:	2301      	movs	r3, #1
 800df0c:	e7f2      	b.n	800def4 <_printf_float+0x1a4>
 800df0e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800df12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df14:	4299      	cmp	r1, r3
 800df16:	db05      	blt.n	800df24 <_printf_float+0x1d4>
 800df18:	6823      	ldr	r3, [r4, #0]
 800df1a:	6121      	str	r1, [r4, #16]
 800df1c:	07d8      	lsls	r0, r3, #31
 800df1e:	d5ea      	bpl.n	800def6 <_printf_float+0x1a6>
 800df20:	1c4b      	adds	r3, r1, #1
 800df22:	e7e7      	b.n	800def4 <_printf_float+0x1a4>
 800df24:	2900      	cmp	r1, #0
 800df26:	bfd4      	ite	le
 800df28:	f1c1 0202 	rsble	r2, r1, #2
 800df2c:	2201      	movgt	r2, #1
 800df2e:	4413      	add	r3, r2
 800df30:	e7e0      	b.n	800def4 <_printf_float+0x1a4>
 800df32:	6823      	ldr	r3, [r4, #0]
 800df34:	055a      	lsls	r2, r3, #21
 800df36:	d407      	bmi.n	800df48 <_printf_float+0x1f8>
 800df38:	6923      	ldr	r3, [r4, #16]
 800df3a:	4642      	mov	r2, r8
 800df3c:	4631      	mov	r1, r6
 800df3e:	4628      	mov	r0, r5
 800df40:	47b8      	blx	r7
 800df42:	3001      	adds	r0, #1
 800df44:	d12c      	bne.n	800dfa0 <_printf_float+0x250>
 800df46:	e764      	b.n	800de12 <_printf_float+0xc2>
 800df48:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800df4c:	f240 80e0 	bls.w	800e110 <_printf_float+0x3c0>
 800df50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800df54:	2200      	movs	r2, #0
 800df56:	2300      	movs	r3, #0
 800df58:	f7f2 fd8e 	bl	8000a78 <__aeabi_dcmpeq>
 800df5c:	2800      	cmp	r0, #0
 800df5e:	d034      	beq.n	800dfca <_printf_float+0x27a>
 800df60:	4a37      	ldr	r2, [pc, #220]	; (800e040 <_printf_float+0x2f0>)
 800df62:	2301      	movs	r3, #1
 800df64:	4631      	mov	r1, r6
 800df66:	4628      	mov	r0, r5
 800df68:	47b8      	blx	r7
 800df6a:	3001      	adds	r0, #1
 800df6c:	f43f af51 	beq.w	800de12 <_printf_float+0xc2>
 800df70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df74:	429a      	cmp	r2, r3
 800df76:	db02      	blt.n	800df7e <_printf_float+0x22e>
 800df78:	6823      	ldr	r3, [r4, #0]
 800df7a:	07d8      	lsls	r0, r3, #31
 800df7c:	d510      	bpl.n	800dfa0 <_printf_float+0x250>
 800df7e:	ee18 3a10 	vmov	r3, s16
 800df82:	4652      	mov	r2, sl
 800df84:	4631      	mov	r1, r6
 800df86:	4628      	mov	r0, r5
 800df88:	47b8      	blx	r7
 800df8a:	3001      	adds	r0, #1
 800df8c:	f43f af41 	beq.w	800de12 <_printf_float+0xc2>
 800df90:	f04f 0800 	mov.w	r8, #0
 800df94:	f104 091a 	add.w	r9, r4, #26
 800df98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df9a:	3b01      	subs	r3, #1
 800df9c:	4543      	cmp	r3, r8
 800df9e:	dc09      	bgt.n	800dfb4 <_printf_float+0x264>
 800dfa0:	6823      	ldr	r3, [r4, #0]
 800dfa2:	079b      	lsls	r3, r3, #30
 800dfa4:	f100 8105 	bmi.w	800e1b2 <_printf_float+0x462>
 800dfa8:	68e0      	ldr	r0, [r4, #12]
 800dfaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dfac:	4298      	cmp	r0, r3
 800dfae:	bfb8      	it	lt
 800dfb0:	4618      	movlt	r0, r3
 800dfb2:	e730      	b.n	800de16 <_printf_float+0xc6>
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	464a      	mov	r2, r9
 800dfb8:	4631      	mov	r1, r6
 800dfba:	4628      	mov	r0, r5
 800dfbc:	47b8      	blx	r7
 800dfbe:	3001      	adds	r0, #1
 800dfc0:	f43f af27 	beq.w	800de12 <_printf_float+0xc2>
 800dfc4:	f108 0801 	add.w	r8, r8, #1
 800dfc8:	e7e6      	b.n	800df98 <_printf_float+0x248>
 800dfca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	dc39      	bgt.n	800e044 <_printf_float+0x2f4>
 800dfd0:	4a1b      	ldr	r2, [pc, #108]	; (800e040 <_printf_float+0x2f0>)
 800dfd2:	2301      	movs	r3, #1
 800dfd4:	4631      	mov	r1, r6
 800dfd6:	4628      	mov	r0, r5
 800dfd8:	47b8      	blx	r7
 800dfda:	3001      	adds	r0, #1
 800dfdc:	f43f af19 	beq.w	800de12 <_printf_float+0xc2>
 800dfe0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dfe4:	4313      	orrs	r3, r2
 800dfe6:	d102      	bne.n	800dfee <_printf_float+0x29e>
 800dfe8:	6823      	ldr	r3, [r4, #0]
 800dfea:	07d9      	lsls	r1, r3, #31
 800dfec:	d5d8      	bpl.n	800dfa0 <_printf_float+0x250>
 800dfee:	ee18 3a10 	vmov	r3, s16
 800dff2:	4652      	mov	r2, sl
 800dff4:	4631      	mov	r1, r6
 800dff6:	4628      	mov	r0, r5
 800dff8:	47b8      	blx	r7
 800dffa:	3001      	adds	r0, #1
 800dffc:	f43f af09 	beq.w	800de12 <_printf_float+0xc2>
 800e000:	f04f 0900 	mov.w	r9, #0
 800e004:	f104 0a1a 	add.w	sl, r4, #26
 800e008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e00a:	425b      	negs	r3, r3
 800e00c:	454b      	cmp	r3, r9
 800e00e:	dc01      	bgt.n	800e014 <_printf_float+0x2c4>
 800e010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e012:	e792      	b.n	800df3a <_printf_float+0x1ea>
 800e014:	2301      	movs	r3, #1
 800e016:	4652      	mov	r2, sl
 800e018:	4631      	mov	r1, r6
 800e01a:	4628      	mov	r0, r5
 800e01c:	47b8      	blx	r7
 800e01e:	3001      	adds	r0, #1
 800e020:	f43f aef7 	beq.w	800de12 <_printf_float+0xc2>
 800e024:	f109 0901 	add.w	r9, r9, #1
 800e028:	e7ee      	b.n	800e008 <_printf_float+0x2b8>
 800e02a:	bf00      	nop
 800e02c:	7fefffff 	.word	0x7fefffff
 800e030:	080126b0 	.word	0x080126b0
 800e034:	080126b4 	.word	0x080126b4
 800e038:	080126bc 	.word	0x080126bc
 800e03c:	080126b8 	.word	0x080126b8
 800e040:	080126c0 	.word	0x080126c0
 800e044:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e046:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e048:	429a      	cmp	r2, r3
 800e04a:	bfa8      	it	ge
 800e04c:	461a      	movge	r2, r3
 800e04e:	2a00      	cmp	r2, #0
 800e050:	4691      	mov	r9, r2
 800e052:	dc37      	bgt.n	800e0c4 <_printf_float+0x374>
 800e054:	f04f 0b00 	mov.w	fp, #0
 800e058:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e05c:	f104 021a 	add.w	r2, r4, #26
 800e060:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e062:	9305      	str	r3, [sp, #20]
 800e064:	eba3 0309 	sub.w	r3, r3, r9
 800e068:	455b      	cmp	r3, fp
 800e06a:	dc33      	bgt.n	800e0d4 <_printf_float+0x384>
 800e06c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e070:	429a      	cmp	r2, r3
 800e072:	db3b      	blt.n	800e0ec <_printf_float+0x39c>
 800e074:	6823      	ldr	r3, [r4, #0]
 800e076:	07da      	lsls	r2, r3, #31
 800e078:	d438      	bmi.n	800e0ec <_printf_float+0x39c>
 800e07a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e07c:	9a05      	ldr	r2, [sp, #20]
 800e07e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e080:	1a9a      	subs	r2, r3, r2
 800e082:	eba3 0901 	sub.w	r9, r3, r1
 800e086:	4591      	cmp	r9, r2
 800e088:	bfa8      	it	ge
 800e08a:	4691      	movge	r9, r2
 800e08c:	f1b9 0f00 	cmp.w	r9, #0
 800e090:	dc35      	bgt.n	800e0fe <_printf_float+0x3ae>
 800e092:	f04f 0800 	mov.w	r8, #0
 800e096:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e09a:	f104 0a1a 	add.w	sl, r4, #26
 800e09e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e0a2:	1a9b      	subs	r3, r3, r2
 800e0a4:	eba3 0309 	sub.w	r3, r3, r9
 800e0a8:	4543      	cmp	r3, r8
 800e0aa:	f77f af79 	ble.w	800dfa0 <_printf_float+0x250>
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	4652      	mov	r2, sl
 800e0b2:	4631      	mov	r1, r6
 800e0b4:	4628      	mov	r0, r5
 800e0b6:	47b8      	blx	r7
 800e0b8:	3001      	adds	r0, #1
 800e0ba:	f43f aeaa 	beq.w	800de12 <_printf_float+0xc2>
 800e0be:	f108 0801 	add.w	r8, r8, #1
 800e0c2:	e7ec      	b.n	800e09e <_printf_float+0x34e>
 800e0c4:	4613      	mov	r3, r2
 800e0c6:	4631      	mov	r1, r6
 800e0c8:	4642      	mov	r2, r8
 800e0ca:	4628      	mov	r0, r5
 800e0cc:	47b8      	blx	r7
 800e0ce:	3001      	adds	r0, #1
 800e0d0:	d1c0      	bne.n	800e054 <_printf_float+0x304>
 800e0d2:	e69e      	b.n	800de12 <_printf_float+0xc2>
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	4631      	mov	r1, r6
 800e0d8:	4628      	mov	r0, r5
 800e0da:	9205      	str	r2, [sp, #20]
 800e0dc:	47b8      	blx	r7
 800e0de:	3001      	adds	r0, #1
 800e0e0:	f43f ae97 	beq.w	800de12 <_printf_float+0xc2>
 800e0e4:	9a05      	ldr	r2, [sp, #20]
 800e0e6:	f10b 0b01 	add.w	fp, fp, #1
 800e0ea:	e7b9      	b.n	800e060 <_printf_float+0x310>
 800e0ec:	ee18 3a10 	vmov	r3, s16
 800e0f0:	4652      	mov	r2, sl
 800e0f2:	4631      	mov	r1, r6
 800e0f4:	4628      	mov	r0, r5
 800e0f6:	47b8      	blx	r7
 800e0f8:	3001      	adds	r0, #1
 800e0fa:	d1be      	bne.n	800e07a <_printf_float+0x32a>
 800e0fc:	e689      	b.n	800de12 <_printf_float+0xc2>
 800e0fe:	9a05      	ldr	r2, [sp, #20]
 800e100:	464b      	mov	r3, r9
 800e102:	4442      	add	r2, r8
 800e104:	4631      	mov	r1, r6
 800e106:	4628      	mov	r0, r5
 800e108:	47b8      	blx	r7
 800e10a:	3001      	adds	r0, #1
 800e10c:	d1c1      	bne.n	800e092 <_printf_float+0x342>
 800e10e:	e680      	b.n	800de12 <_printf_float+0xc2>
 800e110:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e112:	2a01      	cmp	r2, #1
 800e114:	dc01      	bgt.n	800e11a <_printf_float+0x3ca>
 800e116:	07db      	lsls	r3, r3, #31
 800e118:	d538      	bpl.n	800e18c <_printf_float+0x43c>
 800e11a:	2301      	movs	r3, #1
 800e11c:	4642      	mov	r2, r8
 800e11e:	4631      	mov	r1, r6
 800e120:	4628      	mov	r0, r5
 800e122:	47b8      	blx	r7
 800e124:	3001      	adds	r0, #1
 800e126:	f43f ae74 	beq.w	800de12 <_printf_float+0xc2>
 800e12a:	ee18 3a10 	vmov	r3, s16
 800e12e:	4652      	mov	r2, sl
 800e130:	4631      	mov	r1, r6
 800e132:	4628      	mov	r0, r5
 800e134:	47b8      	blx	r7
 800e136:	3001      	adds	r0, #1
 800e138:	f43f ae6b 	beq.w	800de12 <_printf_float+0xc2>
 800e13c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e140:	2200      	movs	r2, #0
 800e142:	2300      	movs	r3, #0
 800e144:	f7f2 fc98 	bl	8000a78 <__aeabi_dcmpeq>
 800e148:	b9d8      	cbnz	r0, 800e182 <_printf_float+0x432>
 800e14a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e14c:	f108 0201 	add.w	r2, r8, #1
 800e150:	3b01      	subs	r3, #1
 800e152:	4631      	mov	r1, r6
 800e154:	4628      	mov	r0, r5
 800e156:	47b8      	blx	r7
 800e158:	3001      	adds	r0, #1
 800e15a:	d10e      	bne.n	800e17a <_printf_float+0x42a>
 800e15c:	e659      	b.n	800de12 <_printf_float+0xc2>
 800e15e:	2301      	movs	r3, #1
 800e160:	4652      	mov	r2, sl
 800e162:	4631      	mov	r1, r6
 800e164:	4628      	mov	r0, r5
 800e166:	47b8      	blx	r7
 800e168:	3001      	adds	r0, #1
 800e16a:	f43f ae52 	beq.w	800de12 <_printf_float+0xc2>
 800e16e:	f108 0801 	add.w	r8, r8, #1
 800e172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e174:	3b01      	subs	r3, #1
 800e176:	4543      	cmp	r3, r8
 800e178:	dcf1      	bgt.n	800e15e <_printf_float+0x40e>
 800e17a:	464b      	mov	r3, r9
 800e17c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e180:	e6dc      	b.n	800df3c <_printf_float+0x1ec>
 800e182:	f04f 0800 	mov.w	r8, #0
 800e186:	f104 0a1a 	add.w	sl, r4, #26
 800e18a:	e7f2      	b.n	800e172 <_printf_float+0x422>
 800e18c:	2301      	movs	r3, #1
 800e18e:	4642      	mov	r2, r8
 800e190:	e7df      	b.n	800e152 <_printf_float+0x402>
 800e192:	2301      	movs	r3, #1
 800e194:	464a      	mov	r2, r9
 800e196:	4631      	mov	r1, r6
 800e198:	4628      	mov	r0, r5
 800e19a:	47b8      	blx	r7
 800e19c:	3001      	adds	r0, #1
 800e19e:	f43f ae38 	beq.w	800de12 <_printf_float+0xc2>
 800e1a2:	f108 0801 	add.w	r8, r8, #1
 800e1a6:	68e3      	ldr	r3, [r4, #12]
 800e1a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e1aa:	1a5b      	subs	r3, r3, r1
 800e1ac:	4543      	cmp	r3, r8
 800e1ae:	dcf0      	bgt.n	800e192 <_printf_float+0x442>
 800e1b0:	e6fa      	b.n	800dfa8 <_printf_float+0x258>
 800e1b2:	f04f 0800 	mov.w	r8, #0
 800e1b6:	f104 0919 	add.w	r9, r4, #25
 800e1ba:	e7f4      	b.n	800e1a6 <_printf_float+0x456>

0800e1bc <_printf_common>:
 800e1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1c0:	4616      	mov	r6, r2
 800e1c2:	4699      	mov	r9, r3
 800e1c4:	688a      	ldr	r2, [r1, #8]
 800e1c6:	690b      	ldr	r3, [r1, #16]
 800e1c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e1cc:	4293      	cmp	r3, r2
 800e1ce:	bfb8      	it	lt
 800e1d0:	4613      	movlt	r3, r2
 800e1d2:	6033      	str	r3, [r6, #0]
 800e1d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e1d8:	4607      	mov	r7, r0
 800e1da:	460c      	mov	r4, r1
 800e1dc:	b10a      	cbz	r2, 800e1e2 <_printf_common+0x26>
 800e1de:	3301      	adds	r3, #1
 800e1e0:	6033      	str	r3, [r6, #0]
 800e1e2:	6823      	ldr	r3, [r4, #0]
 800e1e4:	0699      	lsls	r1, r3, #26
 800e1e6:	bf42      	ittt	mi
 800e1e8:	6833      	ldrmi	r3, [r6, #0]
 800e1ea:	3302      	addmi	r3, #2
 800e1ec:	6033      	strmi	r3, [r6, #0]
 800e1ee:	6825      	ldr	r5, [r4, #0]
 800e1f0:	f015 0506 	ands.w	r5, r5, #6
 800e1f4:	d106      	bne.n	800e204 <_printf_common+0x48>
 800e1f6:	f104 0a19 	add.w	sl, r4, #25
 800e1fa:	68e3      	ldr	r3, [r4, #12]
 800e1fc:	6832      	ldr	r2, [r6, #0]
 800e1fe:	1a9b      	subs	r3, r3, r2
 800e200:	42ab      	cmp	r3, r5
 800e202:	dc26      	bgt.n	800e252 <_printf_common+0x96>
 800e204:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e208:	1e13      	subs	r3, r2, #0
 800e20a:	6822      	ldr	r2, [r4, #0]
 800e20c:	bf18      	it	ne
 800e20e:	2301      	movne	r3, #1
 800e210:	0692      	lsls	r2, r2, #26
 800e212:	d42b      	bmi.n	800e26c <_printf_common+0xb0>
 800e214:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e218:	4649      	mov	r1, r9
 800e21a:	4638      	mov	r0, r7
 800e21c:	47c0      	blx	r8
 800e21e:	3001      	adds	r0, #1
 800e220:	d01e      	beq.n	800e260 <_printf_common+0xa4>
 800e222:	6823      	ldr	r3, [r4, #0]
 800e224:	68e5      	ldr	r5, [r4, #12]
 800e226:	6832      	ldr	r2, [r6, #0]
 800e228:	f003 0306 	and.w	r3, r3, #6
 800e22c:	2b04      	cmp	r3, #4
 800e22e:	bf08      	it	eq
 800e230:	1aad      	subeq	r5, r5, r2
 800e232:	68a3      	ldr	r3, [r4, #8]
 800e234:	6922      	ldr	r2, [r4, #16]
 800e236:	bf0c      	ite	eq
 800e238:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e23c:	2500      	movne	r5, #0
 800e23e:	4293      	cmp	r3, r2
 800e240:	bfc4      	itt	gt
 800e242:	1a9b      	subgt	r3, r3, r2
 800e244:	18ed      	addgt	r5, r5, r3
 800e246:	2600      	movs	r6, #0
 800e248:	341a      	adds	r4, #26
 800e24a:	42b5      	cmp	r5, r6
 800e24c:	d11a      	bne.n	800e284 <_printf_common+0xc8>
 800e24e:	2000      	movs	r0, #0
 800e250:	e008      	b.n	800e264 <_printf_common+0xa8>
 800e252:	2301      	movs	r3, #1
 800e254:	4652      	mov	r2, sl
 800e256:	4649      	mov	r1, r9
 800e258:	4638      	mov	r0, r7
 800e25a:	47c0      	blx	r8
 800e25c:	3001      	adds	r0, #1
 800e25e:	d103      	bne.n	800e268 <_printf_common+0xac>
 800e260:	f04f 30ff 	mov.w	r0, #4294967295
 800e264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e268:	3501      	adds	r5, #1
 800e26a:	e7c6      	b.n	800e1fa <_printf_common+0x3e>
 800e26c:	18e1      	adds	r1, r4, r3
 800e26e:	1c5a      	adds	r2, r3, #1
 800e270:	2030      	movs	r0, #48	; 0x30
 800e272:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e276:	4422      	add	r2, r4
 800e278:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e27c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e280:	3302      	adds	r3, #2
 800e282:	e7c7      	b.n	800e214 <_printf_common+0x58>
 800e284:	2301      	movs	r3, #1
 800e286:	4622      	mov	r2, r4
 800e288:	4649      	mov	r1, r9
 800e28a:	4638      	mov	r0, r7
 800e28c:	47c0      	blx	r8
 800e28e:	3001      	adds	r0, #1
 800e290:	d0e6      	beq.n	800e260 <_printf_common+0xa4>
 800e292:	3601      	adds	r6, #1
 800e294:	e7d9      	b.n	800e24a <_printf_common+0x8e>
	...

0800e298 <_printf_i>:
 800e298:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e29c:	7e0f      	ldrb	r7, [r1, #24]
 800e29e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e2a0:	2f78      	cmp	r7, #120	; 0x78
 800e2a2:	4691      	mov	r9, r2
 800e2a4:	4680      	mov	r8, r0
 800e2a6:	460c      	mov	r4, r1
 800e2a8:	469a      	mov	sl, r3
 800e2aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e2ae:	d807      	bhi.n	800e2c0 <_printf_i+0x28>
 800e2b0:	2f62      	cmp	r7, #98	; 0x62
 800e2b2:	d80a      	bhi.n	800e2ca <_printf_i+0x32>
 800e2b4:	2f00      	cmp	r7, #0
 800e2b6:	f000 80d8 	beq.w	800e46a <_printf_i+0x1d2>
 800e2ba:	2f58      	cmp	r7, #88	; 0x58
 800e2bc:	f000 80a3 	beq.w	800e406 <_printf_i+0x16e>
 800e2c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e2c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e2c8:	e03a      	b.n	800e340 <_printf_i+0xa8>
 800e2ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e2ce:	2b15      	cmp	r3, #21
 800e2d0:	d8f6      	bhi.n	800e2c0 <_printf_i+0x28>
 800e2d2:	a101      	add	r1, pc, #4	; (adr r1, 800e2d8 <_printf_i+0x40>)
 800e2d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e2d8:	0800e331 	.word	0x0800e331
 800e2dc:	0800e345 	.word	0x0800e345
 800e2e0:	0800e2c1 	.word	0x0800e2c1
 800e2e4:	0800e2c1 	.word	0x0800e2c1
 800e2e8:	0800e2c1 	.word	0x0800e2c1
 800e2ec:	0800e2c1 	.word	0x0800e2c1
 800e2f0:	0800e345 	.word	0x0800e345
 800e2f4:	0800e2c1 	.word	0x0800e2c1
 800e2f8:	0800e2c1 	.word	0x0800e2c1
 800e2fc:	0800e2c1 	.word	0x0800e2c1
 800e300:	0800e2c1 	.word	0x0800e2c1
 800e304:	0800e451 	.word	0x0800e451
 800e308:	0800e375 	.word	0x0800e375
 800e30c:	0800e433 	.word	0x0800e433
 800e310:	0800e2c1 	.word	0x0800e2c1
 800e314:	0800e2c1 	.word	0x0800e2c1
 800e318:	0800e473 	.word	0x0800e473
 800e31c:	0800e2c1 	.word	0x0800e2c1
 800e320:	0800e375 	.word	0x0800e375
 800e324:	0800e2c1 	.word	0x0800e2c1
 800e328:	0800e2c1 	.word	0x0800e2c1
 800e32c:	0800e43b 	.word	0x0800e43b
 800e330:	682b      	ldr	r3, [r5, #0]
 800e332:	1d1a      	adds	r2, r3, #4
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	602a      	str	r2, [r5, #0]
 800e338:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e33c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e340:	2301      	movs	r3, #1
 800e342:	e0a3      	b.n	800e48c <_printf_i+0x1f4>
 800e344:	6820      	ldr	r0, [r4, #0]
 800e346:	6829      	ldr	r1, [r5, #0]
 800e348:	0606      	lsls	r6, r0, #24
 800e34a:	f101 0304 	add.w	r3, r1, #4
 800e34e:	d50a      	bpl.n	800e366 <_printf_i+0xce>
 800e350:	680e      	ldr	r6, [r1, #0]
 800e352:	602b      	str	r3, [r5, #0]
 800e354:	2e00      	cmp	r6, #0
 800e356:	da03      	bge.n	800e360 <_printf_i+0xc8>
 800e358:	232d      	movs	r3, #45	; 0x2d
 800e35a:	4276      	negs	r6, r6
 800e35c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e360:	485e      	ldr	r0, [pc, #376]	; (800e4dc <_printf_i+0x244>)
 800e362:	230a      	movs	r3, #10
 800e364:	e019      	b.n	800e39a <_printf_i+0x102>
 800e366:	680e      	ldr	r6, [r1, #0]
 800e368:	602b      	str	r3, [r5, #0]
 800e36a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e36e:	bf18      	it	ne
 800e370:	b236      	sxthne	r6, r6
 800e372:	e7ef      	b.n	800e354 <_printf_i+0xbc>
 800e374:	682b      	ldr	r3, [r5, #0]
 800e376:	6820      	ldr	r0, [r4, #0]
 800e378:	1d19      	adds	r1, r3, #4
 800e37a:	6029      	str	r1, [r5, #0]
 800e37c:	0601      	lsls	r1, r0, #24
 800e37e:	d501      	bpl.n	800e384 <_printf_i+0xec>
 800e380:	681e      	ldr	r6, [r3, #0]
 800e382:	e002      	b.n	800e38a <_printf_i+0xf2>
 800e384:	0646      	lsls	r6, r0, #25
 800e386:	d5fb      	bpl.n	800e380 <_printf_i+0xe8>
 800e388:	881e      	ldrh	r6, [r3, #0]
 800e38a:	4854      	ldr	r0, [pc, #336]	; (800e4dc <_printf_i+0x244>)
 800e38c:	2f6f      	cmp	r7, #111	; 0x6f
 800e38e:	bf0c      	ite	eq
 800e390:	2308      	moveq	r3, #8
 800e392:	230a      	movne	r3, #10
 800e394:	2100      	movs	r1, #0
 800e396:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e39a:	6865      	ldr	r5, [r4, #4]
 800e39c:	60a5      	str	r5, [r4, #8]
 800e39e:	2d00      	cmp	r5, #0
 800e3a0:	bfa2      	ittt	ge
 800e3a2:	6821      	ldrge	r1, [r4, #0]
 800e3a4:	f021 0104 	bicge.w	r1, r1, #4
 800e3a8:	6021      	strge	r1, [r4, #0]
 800e3aa:	b90e      	cbnz	r6, 800e3b0 <_printf_i+0x118>
 800e3ac:	2d00      	cmp	r5, #0
 800e3ae:	d04d      	beq.n	800e44c <_printf_i+0x1b4>
 800e3b0:	4615      	mov	r5, r2
 800e3b2:	fbb6 f1f3 	udiv	r1, r6, r3
 800e3b6:	fb03 6711 	mls	r7, r3, r1, r6
 800e3ba:	5dc7      	ldrb	r7, [r0, r7]
 800e3bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e3c0:	4637      	mov	r7, r6
 800e3c2:	42bb      	cmp	r3, r7
 800e3c4:	460e      	mov	r6, r1
 800e3c6:	d9f4      	bls.n	800e3b2 <_printf_i+0x11a>
 800e3c8:	2b08      	cmp	r3, #8
 800e3ca:	d10b      	bne.n	800e3e4 <_printf_i+0x14c>
 800e3cc:	6823      	ldr	r3, [r4, #0]
 800e3ce:	07de      	lsls	r6, r3, #31
 800e3d0:	d508      	bpl.n	800e3e4 <_printf_i+0x14c>
 800e3d2:	6923      	ldr	r3, [r4, #16]
 800e3d4:	6861      	ldr	r1, [r4, #4]
 800e3d6:	4299      	cmp	r1, r3
 800e3d8:	bfde      	ittt	le
 800e3da:	2330      	movle	r3, #48	; 0x30
 800e3dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e3e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e3e4:	1b52      	subs	r2, r2, r5
 800e3e6:	6122      	str	r2, [r4, #16]
 800e3e8:	f8cd a000 	str.w	sl, [sp]
 800e3ec:	464b      	mov	r3, r9
 800e3ee:	aa03      	add	r2, sp, #12
 800e3f0:	4621      	mov	r1, r4
 800e3f2:	4640      	mov	r0, r8
 800e3f4:	f7ff fee2 	bl	800e1bc <_printf_common>
 800e3f8:	3001      	adds	r0, #1
 800e3fa:	d14c      	bne.n	800e496 <_printf_i+0x1fe>
 800e3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e400:	b004      	add	sp, #16
 800e402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e406:	4835      	ldr	r0, [pc, #212]	; (800e4dc <_printf_i+0x244>)
 800e408:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e40c:	6829      	ldr	r1, [r5, #0]
 800e40e:	6823      	ldr	r3, [r4, #0]
 800e410:	f851 6b04 	ldr.w	r6, [r1], #4
 800e414:	6029      	str	r1, [r5, #0]
 800e416:	061d      	lsls	r5, r3, #24
 800e418:	d514      	bpl.n	800e444 <_printf_i+0x1ac>
 800e41a:	07df      	lsls	r7, r3, #31
 800e41c:	bf44      	itt	mi
 800e41e:	f043 0320 	orrmi.w	r3, r3, #32
 800e422:	6023      	strmi	r3, [r4, #0]
 800e424:	b91e      	cbnz	r6, 800e42e <_printf_i+0x196>
 800e426:	6823      	ldr	r3, [r4, #0]
 800e428:	f023 0320 	bic.w	r3, r3, #32
 800e42c:	6023      	str	r3, [r4, #0]
 800e42e:	2310      	movs	r3, #16
 800e430:	e7b0      	b.n	800e394 <_printf_i+0xfc>
 800e432:	6823      	ldr	r3, [r4, #0]
 800e434:	f043 0320 	orr.w	r3, r3, #32
 800e438:	6023      	str	r3, [r4, #0]
 800e43a:	2378      	movs	r3, #120	; 0x78
 800e43c:	4828      	ldr	r0, [pc, #160]	; (800e4e0 <_printf_i+0x248>)
 800e43e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e442:	e7e3      	b.n	800e40c <_printf_i+0x174>
 800e444:	0659      	lsls	r1, r3, #25
 800e446:	bf48      	it	mi
 800e448:	b2b6      	uxthmi	r6, r6
 800e44a:	e7e6      	b.n	800e41a <_printf_i+0x182>
 800e44c:	4615      	mov	r5, r2
 800e44e:	e7bb      	b.n	800e3c8 <_printf_i+0x130>
 800e450:	682b      	ldr	r3, [r5, #0]
 800e452:	6826      	ldr	r6, [r4, #0]
 800e454:	6961      	ldr	r1, [r4, #20]
 800e456:	1d18      	adds	r0, r3, #4
 800e458:	6028      	str	r0, [r5, #0]
 800e45a:	0635      	lsls	r5, r6, #24
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	d501      	bpl.n	800e464 <_printf_i+0x1cc>
 800e460:	6019      	str	r1, [r3, #0]
 800e462:	e002      	b.n	800e46a <_printf_i+0x1d2>
 800e464:	0670      	lsls	r0, r6, #25
 800e466:	d5fb      	bpl.n	800e460 <_printf_i+0x1c8>
 800e468:	8019      	strh	r1, [r3, #0]
 800e46a:	2300      	movs	r3, #0
 800e46c:	6123      	str	r3, [r4, #16]
 800e46e:	4615      	mov	r5, r2
 800e470:	e7ba      	b.n	800e3e8 <_printf_i+0x150>
 800e472:	682b      	ldr	r3, [r5, #0]
 800e474:	1d1a      	adds	r2, r3, #4
 800e476:	602a      	str	r2, [r5, #0]
 800e478:	681d      	ldr	r5, [r3, #0]
 800e47a:	6862      	ldr	r2, [r4, #4]
 800e47c:	2100      	movs	r1, #0
 800e47e:	4628      	mov	r0, r5
 800e480:	f7f1 fe86 	bl	8000190 <memchr>
 800e484:	b108      	cbz	r0, 800e48a <_printf_i+0x1f2>
 800e486:	1b40      	subs	r0, r0, r5
 800e488:	6060      	str	r0, [r4, #4]
 800e48a:	6863      	ldr	r3, [r4, #4]
 800e48c:	6123      	str	r3, [r4, #16]
 800e48e:	2300      	movs	r3, #0
 800e490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e494:	e7a8      	b.n	800e3e8 <_printf_i+0x150>
 800e496:	6923      	ldr	r3, [r4, #16]
 800e498:	462a      	mov	r2, r5
 800e49a:	4649      	mov	r1, r9
 800e49c:	4640      	mov	r0, r8
 800e49e:	47d0      	blx	sl
 800e4a0:	3001      	adds	r0, #1
 800e4a2:	d0ab      	beq.n	800e3fc <_printf_i+0x164>
 800e4a4:	6823      	ldr	r3, [r4, #0]
 800e4a6:	079b      	lsls	r3, r3, #30
 800e4a8:	d413      	bmi.n	800e4d2 <_printf_i+0x23a>
 800e4aa:	68e0      	ldr	r0, [r4, #12]
 800e4ac:	9b03      	ldr	r3, [sp, #12]
 800e4ae:	4298      	cmp	r0, r3
 800e4b0:	bfb8      	it	lt
 800e4b2:	4618      	movlt	r0, r3
 800e4b4:	e7a4      	b.n	800e400 <_printf_i+0x168>
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	4632      	mov	r2, r6
 800e4ba:	4649      	mov	r1, r9
 800e4bc:	4640      	mov	r0, r8
 800e4be:	47d0      	blx	sl
 800e4c0:	3001      	adds	r0, #1
 800e4c2:	d09b      	beq.n	800e3fc <_printf_i+0x164>
 800e4c4:	3501      	adds	r5, #1
 800e4c6:	68e3      	ldr	r3, [r4, #12]
 800e4c8:	9903      	ldr	r1, [sp, #12]
 800e4ca:	1a5b      	subs	r3, r3, r1
 800e4cc:	42ab      	cmp	r3, r5
 800e4ce:	dcf2      	bgt.n	800e4b6 <_printf_i+0x21e>
 800e4d0:	e7eb      	b.n	800e4aa <_printf_i+0x212>
 800e4d2:	2500      	movs	r5, #0
 800e4d4:	f104 0619 	add.w	r6, r4, #25
 800e4d8:	e7f5      	b.n	800e4c6 <_printf_i+0x22e>
 800e4da:	bf00      	nop
 800e4dc:	080126c2 	.word	0x080126c2
 800e4e0:	080126d3 	.word	0x080126d3

0800e4e4 <_scanf_float>:
 800e4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4e8:	b087      	sub	sp, #28
 800e4ea:	4617      	mov	r7, r2
 800e4ec:	9303      	str	r3, [sp, #12]
 800e4ee:	688b      	ldr	r3, [r1, #8]
 800e4f0:	1e5a      	subs	r2, r3, #1
 800e4f2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e4f6:	bf83      	ittte	hi
 800e4f8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e4fc:	195b      	addhi	r3, r3, r5
 800e4fe:	9302      	strhi	r3, [sp, #8]
 800e500:	2300      	movls	r3, #0
 800e502:	bf86      	itte	hi
 800e504:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e508:	608b      	strhi	r3, [r1, #8]
 800e50a:	9302      	strls	r3, [sp, #8]
 800e50c:	680b      	ldr	r3, [r1, #0]
 800e50e:	468b      	mov	fp, r1
 800e510:	2500      	movs	r5, #0
 800e512:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e516:	f84b 3b1c 	str.w	r3, [fp], #28
 800e51a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e51e:	4680      	mov	r8, r0
 800e520:	460c      	mov	r4, r1
 800e522:	465e      	mov	r6, fp
 800e524:	46aa      	mov	sl, r5
 800e526:	46a9      	mov	r9, r5
 800e528:	9501      	str	r5, [sp, #4]
 800e52a:	68a2      	ldr	r2, [r4, #8]
 800e52c:	b152      	cbz	r2, 800e544 <_scanf_float+0x60>
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	781b      	ldrb	r3, [r3, #0]
 800e532:	2b4e      	cmp	r3, #78	; 0x4e
 800e534:	d864      	bhi.n	800e600 <_scanf_float+0x11c>
 800e536:	2b40      	cmp	r3, #64	; 0x40
 800e538:	d83c      	bhi.n	800e5b4 <_scanf_float+0xd0>
 800e53a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e53e:	b2c8      	uxtb	r0, r1
 800e540:	280e      	cmp	r0, #14
 800e542:	d93a      	bls.n	800e5ba <_scanf_float+0xd6>
 800e544:	f1b9 0f00 	cmp.w	r9, #0
 800e548:	d003      	beq.n	800e552 <_scanf_float+0x6e>
 800e54a:	6823      	ldr	r3, [r4, #0]
 800e54c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e550:	6023      	str	r3, [r4, #0]
 800e552:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e556:	f1ba 0f01 	cmp.w	sl, #1
 800e55a:	f200 8113 	bhi.w	800e784 <_scanf_float+0x2a0>
 800e55e:	455e      	cmp	r6, fp
 800e560:	f200 8105 	bhi.w	800e76e <_scanf_float+0x28a>
 800e564:	2501      	movs	r5, #1
 800e566:	4628      	mov	r0, r5
 800e568:	b007      	add	sp, #28
 800e56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e56e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e572:	2a0d      	cmp	r2, #13
 800e574:	d8e6      	bhi.n	800e544 <_scanf_float+0x60>
 800e576:	a101      	add	r1, pc, #4	; (adr r1, 800e57c <_scanf_float+0x98>)
 800e578:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e57c:	0800e6bb 	.word	0x0800e6bb
 800e580:	0800e545 	.word	0x0800e545
 800e584:	0800e545 	.word	0x0800e545
 800e588:	0800e545 	.word	0x0800e545
 800e58c:	0800e71b 	.word	0x0800e71b
 800e590:	0800e6f3 	.word	0x0800e6f3
 800e594:	0800e545 	.word	0x0800e545
 800e598:	0800e545 	.word	0x0800e545
 800e59c:	0800e6c9 	.word	0x0800e6c9
 800e5a0:	0800e545 	.word	0x0800e545
 800e5a4:	0800e545 	.word	0x0800e545
 800e5a8:	0800e545 	.word	0x0800e545
 800e5ac:	0800e545 	.word	0x0800e545
 800e5b0:	0800e681 	.word	0x0800e681
 800e5b4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800e5b8:	e7db      	b.n	800e572 <_scanf_float+0x8e>
 800e5ba:	290e      	cmp	r1, #14
 800e5bc:	d8c2      	bhi.n	800e544 <_scanf_float+0x60>
 800e5be:	a001      	add	r0, pc, #4	; (adr r0, 800e5c4 <_scanf_float+0xe0>)
 800e5c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e5c4:	0800e673 	.word	0x0800e673
 800e5c8:	0800e545 	.word	0x0800e545
 800e5cc:	0800e673 	.word	0x0800e673
 800e5d0:	0800e707 	.word	0x0800e707
 800e5d4:	0800e545 	.word	0x0800e545
 800e5d8:	0800e621 	.word	0x0800e621
 800e5dc:	0800e65d 	.word	0x0800e65d
 800e5e0:	0800e65d 	.word	0x0800e65d
 800e5e4:	0800e65d 	.word	0x0800e65d
 800e5e8:	0800e65d 	.word	0x0800e65d
 800e5ec:	0800e65d 	.word	0x0800e65d
 800e5f0:	0800e65d 	.word	0x0800e65d
 800e5f4:	0800e65d 	.word	0x0800e65d
 800e5f8:	0800e65d 	.word	0x0800e65d
 800e5fc:	0800e65d 	.word	0x0800e65d
 800e600:	2b6e      	cmp	r3, #110	; 0x6e
 800e602:	d809      	bhi.n	800e618 <_scanf_float+0x134>
 800e604:	2b60      	cmp	r3, #96	; 0x60
 800e606:	d8b2      	bhi.n	800e56e <_scanf_float+0x8a>
 800e608:	2b54      	cmp	r3, #84	; 0x54
 800e60a:	d077      	beq.n	800e6fc <_scanf_float+0x218>
 800e60c:	2b59      	cmp	r3, #89	; 0x59
 800e60e:	d199      	bne.n	800e544 <_scanf_float+0x60>
 800e610:	2d07      	cmp	r5, #7
 800e612:	d197      	bne.n	800e544 <_scanf_float+0x60>
 800e614:	2508      	movs	r5, #8
 800e616:	e029      	b.n	800e66c <_scanf_float+0x188>
 800e618:	2b74      	cmp	r3, #116	; 0x74
 800e61a:	d06f      	beq.n	800e6fc <_scanf_float+0x218>
 800e61c:	2b79      	cmp	r3, #121	; 0x79
 800e61e:	e7f6      	b.n	800e60e <_scanf_float+0x12a>
 800e620:	6821      	ldr	r1, [r4, #0]
 800e622:	05c8      	lsls	r0, r1, #23
 800e624:	d51a      	bpl.n	800e65c <_scanf_float+0x178>
 800e626:	9b02      	ldr	r3, [sp, #8]
 800e628:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e62c:	6021      	str	r1, [r4, #0]
 800e62e:	f109 0901 	add.w	r9, r9, #1
 800e632:	b11b      	cbz	r3, 800e63c <_scanf_float+0x158>
 800e634:	3b01      	subs	r3, #1
 800e636:	3201      	adds	r2, #1
 800e638:	9302      	str	r3, [sp, #8]
 800e63a:	60a2      	str	r2, [r4, #8]
 800e63c:	68a3      	ldr	r3, [r4, #8]
 800e63e:	3b01      	subs	r3, #1
 800e640:	60a3      	str	r3, [r4, #8]
 800e642:	6923      	ldr	r3, [r4, #16]
 800e644:	3301      	adds	r3, #1
 800e646:	6123      	str	r3, [r4, #16]
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	3b01      	subs	r3, #1
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	607b      	str	r3, [r7, #4]
 800e650:	f340 8084 	ble.w	800e75c <_scanf_float+0x278>
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	3301      	adds	r3, #1
 800e658:	603b      	str	r3, [r7, #0]
 800e65a:	e766      	b.n	800e52a <_scanf_float+0x46>
 800e65c:	eb1a 0f05 	cmn.w	sl, r5
 800e660:	f47f af70 	bne.w	800e544 <_scanf_float+0x60>
 800e664:	6822      	ldr	r2, [r4, #0]
 800e666:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e66a:	6022      	str	r2, [r4, #0]
 800e66c:	f806 3b01 	strb.w	r3, [r6], #1
 800e670:	e7e4      	b.n	800e63c <_scanf_float+0x158>
 800e672:	6822      	ldr	r2, [r4, #0]
 800e674:	0610      	lsls	r0, r2, #24
 800e676:	f57f af65 	bpl.w	800e544 <_scanf_float+0x60>
 800e67a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e67e:	e7f4      	b.n	800e66a <_scanf_float+0x186>
 800e680:	f1ba 0f00 	cmp.w	sl, #0
 800e684:	d10e      	bne.n	800e6a4 <_scanf_float+0x1c0>
 800e686:	f1b9 0f00 	cmp.w	r9, #0
 800e68a:	d10e      	bne.n	800e6aa <_scanf_float+0x1c6>
 800e68c:	6822      	ldr	r2, [r4, #0]
 800e68e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e692:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e696:	d108      	bne.n	800e6aa <_scanf_float+0x1c6>
 800e698:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e69c:	6022      	str	r2, [r4, #0]
 800e69e:	f04f 0a01 	mov.w	sl, #1
 800e6a2:	e7e3      	b.n	800e66c <_scanf_float+0x188>
 800e6a4:	f1ba 0f02 	cmp.w	sl, #2
 800e6a8:	d055      	beq.n	800e756 <_scanf_float+0x272>
 800e6aa:	2d01      	cmp	r5, #1
 800e6ac:	d002      	beq.n	800e6b4 <_scanf_float+0x1d0>
 800e6ae:	2d04      	cmp	r5, #4
 800e6b0:	f47f af48 	bne.w	800e544 <_scanf_float+0x60>
 800e6b4:	3501      	adds	r5, #1
 800e6b6:	b2ed      	uxtb	r5, r5
 800e6b8:	e7d8      	b.n	800e66c <_scanf_float+0x188>
 800e6ba:	f1ba 0f01 	cmp.w	sl, #1
 800e6be:	f47f af41 	bne.w	800e544 <_scanf_float+0x60>
 800e6c2:	f04f 0a02 	mov.w	sl, #2
 800e6c6:	e7d1      	b.n	800e66c <_scanf_float+0x188>
 800e6c8:	b97d      	cbnz	r5, 800e6ea <_scanf_float+0x206>
 800e6ca:	f1b9 0f00 	cmp.w	r9, #0
 800e6ce:	f47f af3c 	bne.w	800e54a <_scanf_float+0x66>
 800e6d2:	6822      	ldr	r2, [r4, #0]
 800e6d4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e6d8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e6dc:	f47f af39 	bne.w	800e552 <_scanf_float+0x6e>
 800e6e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e6e4:	6022      	str	r2, [r4, #0]
 800e6e6:	2501      	movs	r5, #1
 800e6e8:	e7c0      	b.n	800e66c <_scanf_float+0x188>
 800e6ea:	2d03      	cmp	r5, #3
 800e6ec:	d0e2      	beq.n	800e6b4 <_scanf_float+0x1d0>
 800e6ee:	2d05      	cmp	r5, #5
 800e6f0:	e7de      	b.n	800e6b0 <_scanf_float+0x1cc>
 800e6f2:	2d02      	cmp	r5, #2
 800e6f4:	f47f af26 	bne.w	800e544 <_scanf_float+0x60>
 800e6f8:	2503      	movs	r5, #3
 800e6fa:	e7b7      	b.n	800e66c <_scanf_float+0x188>
 800e6fc:	2d06      	cmp	r5, #6
 800e6fe:	f47f af21 	bne.w	800e544 <_scanf_float+0x60>
 800e702:	2507      	movs	r5, #7
 800e704:	e7b2      	b.n	800e66c <_scanf_float+0x188>
 800e706:	6822      	ldr	r2, [r4, #0]
 800e708:	0591      	lsls	r1, r2, #22
 800e70a:	f57f af1b 	bpl.w	800e544 <_scanf_float+0x60>
 800e70e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e712:	6022      	str	r2, [r4, #0]
 800e714:	f8cd 9004 	str.w	r9, [sp, #4]
 800e718:	e7a8      	b.n	800e66c <_scanf_float+0x188>
 800e71a:	6822      	ldr	r2, [r4, #0]
 800e71c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e720:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e724:	d006      	beq.n	800e734 <_scanf_float+0x250>
 800e726:	0550      	lsls	r0, r2, #21
 800e728:	f57f af0c 	bpl.w	800e544 <_scanf_float+0x60>
 800e72c:	f1b9 0f00 	cmp.w	r9, #0
 800e730:	f43f af0f 	beq.w	800e552 <_scanf_float+0x6e>
 800e734:	0591      	lsls	r1, r2, #22
 800e736:	bf58      	it	pl
 800e738:	9901      	ldrpl	r1, [sp, #4]
 800e73a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e73e:	bf58      	it	pl
 800e740:	eba9 0101 	subpl.w	r1, r9, r1
 800e744:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e748:	bf58      	it	pl
 800e74a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e74e:	6022      	str	r2, [r4, #0]
 800e750:	f04f 0900 	mov.w	r9, #0
 800e754:	e78a      	b.n	800e66c <_scanf_float+0x188>
 800e756:	f04f 0a03 	mov.w	sl, #3
 800e75a:	e787      	b.n	800e66c <_scanf_float+0x188>
 800e75c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e760:	4639      	mov	r1, r7
 800e762:	4640      	mov	r0, r8
 800e764:	4798      	blx	r3
 800e766:	2800      	cmp	r0, #0
 800e768:	f43f aedf 	beq.w	800e52a <_scanf_float+0x46>
 800e76c:	e6ea      	b.n	800e544 <_scanf_float+0x60>
 800e76e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e772:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e776:	463a      	mov	r2, r7
 800e778:	4640      	mov	r0, r8
 800e77a:	4798      	blx	r3
 800e77c:	6923      	ldr	r3, [r4, #16]
 800e77e:	3b01      	subs	r3, #1
 800e780:	6123      	str	r3, [r4, #16]
 800e782:	e6ec      	b.n	800e55e <_scanf_float+0x7a>
 800e784:	1e6b      	subs	r3, r5, #1
 800e786:	2b06      	cmp	r3, #6
 800e788:	d825      	bhi.n	800e7d6 <_scanf_float+0x2f2>
 800e78a:	2d02      	cmp	r5, #2
 800e78c:	d836      	bhi.n	800e7fc <_scanf_float+0x318>
 800e78e:	455e      	cmp	r6, fp
 800e790:	f67f aee8 	bls.w	800e564 <_scanf_float+0x80>
 800e794:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e798:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e79c:	463a      	mov	r2, r7
 800e79e:	4640      	mov	r0, r8
 800e7a0:	4798      	blx	r3
 800e7a2:	6923      	ldr	r3, [r4, #16]
 800e7a4:	3b01      	subs	r3, #1
 800e7a6:	6123      	str	r3, [r4, #16]
 800e7a8:	e7f1      	b.n	800e78e <_scanf_float+0x2aa>
 800e7aa:	9802      	ldr	r0, [sp, #8]
 800e7ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e7b0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e7b4:	9002      	str	r0, [sp, #8]
 800e7b6:	463a      	mov	r2, r7
 800e7b8:	4640      	mov	r0, r8
 800e7ba:	4798      	blx	r3
 800e7bc:	6923      	ldr	r3, [r4, #16]
 800e7be:	3b01      	subs	r3, #1
 800e7c0:	6123      	str	r3, [r4, #16]
 800e7c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e7c6:	fa5f fa8a 	uxtb.w	sl, sl
 800e7ca:	f1ba 0f02 	cmp.w	sl, #2
 800e7ce:	d1ec      	bne.n	800e7aa <_scanf_float+0x2c6>
 800e7d0:	3d03      	subs	r5, #3
 800e7d2:	b2ed      	uxtb	r5, r5
 800e7d4:	1b76      	subs	r6, r6, r5
 800e7d6:	6823      	ldr	r3, [r4, #0]
 800e7d8:	05da      	lsls	r2, r3, #23
 800e7da:	d52f      	bpl.n	800e83c <_scanf_float+0x358>
 800e7dc:	055b      	lsls	r3, r3, #21
 800e7de:	d510      	bpl.n	800e802 <_scanf_float+0x31e>
 800e7e0:	455e      	cmp	r6, fp
 800e7e2:	f67f aebf 	bls.w	800e564 <_scanf_float+0x80>
 800e7e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e7ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e7ee:	463a      	mov	r2, r7
 800e7f0:	4640      	mov	r0, r8
 800e7f2:	4798      	blx	r3
 800e7f4:	6923      	ldr	r3, [r4, #16]
 800e7f6:	3b01      	subs	r3, #1
 800e7f8:	6123      	str	r3, [r4, #16]
 800e7fa:	e7f1      	b.n	800e7e0 <_scanf_float+0x2fc>
 800e7fc:	46aa      	mov	sl, r5
 800e7fe:	9602      	str	r6, [sp, #8]
 800e800:	e7df      	b.n	800e7c2 <_scanf_float+0x2de>
 800e802:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e806:	6923      	ldr	r3, [r4, #16]
 800e808:	2965      	cmp	r1, #101	; 0x65
 800e80a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e80e:	f106 35ff 	add.w	r5, r6, #4294967295
 800e812:	6123      	str	r3, [r4, #16]
 800e814:	d00c      	beq.n	800e830 <_scanf_float+0x34c>
 800e816:	2945      	cmp	r1, #69	; 0x45
 800e818:	d00a      	beq.n	800e830 <_scanf_float+0x34c>
 800e81a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e81e:	463a      	mov	r2, r7
 800e820:	4640      	mov	r0, r8
 800e822:	4798      	blx	r3
 800e824:	6923      	ldr	r3, [r4, #16]
 800e826:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e82a:	3b01      	subs	r3, #1
 800e82c:	1eb5      	subs	r5, r6, #2
 800e82e:	6123      	str	r3, [r4, #16]
 800e830:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e834:	463a      	mov	r2, r7
 800e836:	4640      	mov	r0, r8
 800e838:	4798      	blx	r3
 800e83a:	462e      	mov	r6, r5
 800e83c:	6825      	ldr	r5, [r4, #0]
 800e83e:	f015 0510 	ands.w	r5, r5, #16
 800e842:	d159      	bne.n	800e8f8 <_scanf_float+0x414>
 800e844:	7035      	strb	r5, [r6, #0]
 800e846:	6823      	ldr	r3, [r4, #0]
 800e848:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e84c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e850:	d11b      	bne.n	800e88a <_scanf_float+0x3a6>
 800e852:	9b01      	ldr	r3, [sp, #4]
 800e854:	454b      	cmp	r3, r9
 800e856:	eba3 0209 	sub.w	r2, r3, r9
 800e85a:	d123      	bne.n	800e8a4 <_scanf_float+0x3c0>
 800e85c:	2200      	movs	r2, #0
 800e85e:	4659      	mov	r1, fp
 800e860:	4640      	mov	r0, r8
 800e862:	f000 fe97 	bl	800f594 <_strtod_r>
 800e866:	6822      	ldr	r2, [r4, #0]
 800e868:	9b03      	ldr	r3, [sp, #12]
 800e86a:	f012 0f02 	tst.w	r2, #2
 800e86e:	ec57 6b10 	vmov	r6, r7, d0
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	d021      	beq.n	800e8ba <_scanf_float+0x3d6>
 800e876:	9903      	ldr	r1, [sp, #12]
 800e878:	1d1a      	adds	r2, r3, #4
 800e87a:	600a      	str	r2, [r1, #0]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	e9c3 6700 	strd	r6, r7, [r3]
 800e882:	68e3      	ldr	r3, [r4, #12]
 800e884:	3301      	adds	r3, #1
 800e886:	60e3      	str	r3, [r4, #12]
 800e888:	e66d      	b.n	800e566 <_scanf_float+0x82>
 800e88a:	9b04      	ldr	r3, [sp, #16]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d0e5      	beq.n	800e85c <_scanf_float+0x378>
 800e890:	9905      	ldr	r1, [sp, #20]
 800e892:	230a      	movs	r3, #10
 800e894:	462a      	mov	r2, r5
 800e896:	3101      	adds	r1, #1
 800e898:	4640      	mov	r0, r8
 800e89a:	f000 ff03 	bl	800f6a4 <_strtol_r>
 800e89e:	9b04      	ldr	r3, [sp, #16]
 800e8a0:	9e05      	ldr	r6, [sp, #20]
 800e8a2:	1ac2      	subs	r2, r0, r3
 800e8a4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e8a8:	429e      	cmp	r6, r3
 800e8aa:	bf28      	it	cs
 800e8ac:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e8b0:	4912      	ldr	r1, [pc, #72]	; (800e8fc <_scanf_float+0x418>)
 800e8b2:	4630      	mov	r0, r6
 800e8b4:	f000 f82c 	bl	800e910 <siprintf>
 800e8b8:	e7d0      	b.n	800e85c <_scanf_float+0x378>
 800e8ba:	9903      	ldr	r1, [sp, #12]
 800e8bc:	f012 0f04 	tst.w	r2, #4
 800e8c0:	f103 0204 	add.w	r2, r3, #4
 800e8c4:	600a      	str	r2, [r1, #0]
 800e8c6:	d1d9      	bne.n	800e87c <_scanf_float+0x398>
 800e8c8:	f8d3 8000 	ldr.w	r8, [r3]
 800e8cc:	ee10 2a10 	vmov	r2, s0
 800e8d0:	ee10 0a10 	vmov	r0, s0
 800e8d4:	463b      	mov	r3, r7
 800e8d6:	4639      	mov	r1, r7
 800e8d8:	f7f2 f900 	bl	8000adc <__aeabi_dcmpun>
 800e8dc:	b128      	cbz	r0, 800e8ea <_scanf_float+0x406>
 800e8de:	4808      	ldr	r0, [pc, #32]	; (800e900 <_scanf_float+0x41c>)
 800e8e0:	f000 f810 	bl	800e904 <nanf>
 800e8e4:	ed88 0a00 	vstr	s0, [r8]
 800e8e8:	e7cb      	b.n	800e882 <_scanf_float+0x39e>
 800e8ea:	4630      	mov	r0, r6
 800e8ec:	4639      	mov	r1, r7
 800e8ee:	f7f2 f953 	bl	8000b98 <__aeabi_d2f>
 800e8f2:	f8c8 0000 	str.w	r0, [r8]
 800e8f6:	e7c4      	b.n	800e882 <_scanf_float+0x39e>
 800e8f8:	2500      	movs	r5, #0
 800e8fa:	e634      	b.n	800e566 <_scanf_float+0x82>
 800e8fc:	080126e4 	.word	0x080126e4
 800e900:	08012af0 	.word	0x08012af0

0800e904 <nanf>:
 800e904:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e90c <nanf+0x8>
 800e908:	4770      	bx	lr
 800e90a:	bf00      	nop
 800e90c:	7fc00000 	.word	0x7fc00000

0800e910 <siprintf>:
 800e910:	b40e      	push	{r1, r2, r3}
 800e912:	b500      	push	{lr}
 800e914:	b09c      	sub	sp, #112	; 0x70
 800e916:	ab1d      	add	r3, sp, #116	; 0x74
 800e918:	9002      	str	r0, [sp, #8]
 800e91a:	9006      	str	r0, [sp, #24]
 800e91c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e920:	4809      	ldr	r0, [pc, #36]	; (800e948 <siprintf+0x38>)
 800e922:	9107      	str	r1, [sp, #28]
 800e924:	9104      	str	r1, [sp, #16]
 800e926:	4909      	ldr	r1, [pc, #36]	; (800e94c <siprintf+0x3c>)
 800e928:	f853 2b04 	ldr.w	r2, [r3], #4
 800e92c:	9105      	str	r1, [sp, #20]
 800e92e:	6800      	ldr	r0, [r0, #0]
 800e930:	9301      	str	r3, [sp, #4]
 800e932:	a902      	add	r1, sp, #8
 800e934:	f002 fee0 	bl	80116f8 <_svfiprintf_r>
 800e938:	9b02      	ldr	r3, [sp, #8]
 800e93a:	2200      	movs	r2, #0
 800e93c:	701a      	strb	r2, [r3, #0]
 800e93e:	b01c      	add	sp, #112	; 0x70
 800e940:	f85d eb04 	ldr.w	lr, [sp], #4
 800e944:	b003      	add	sp, #12
 800e946:	4770      	bx	lr
 800e948:	20000110 	.word	0x20000110
 800e94c:	ffff0208 	.word	0xffff0208

0800e950 <sulp>:
 800e950:	b570      	push	{r4, r5, r6, lr}
 800e952:	4604      	mov	r4, r0
 800e954:	460d      	mov	r5, r1
 800e956:	ec45 4b10 	vmov	d0, r4, r5
 800e95a:	4616      	mov	r6, r2
 800e95c:	f002 fc2a 	bl	80111b4 <__ulp>
 800e960:	ec51 0b10 	vmov	r0, r1, d0
 800e964:	b17e      	cbz	r6, 800e986 <sulp+0x36>
 800e966:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e96a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e96e:	2b00      	cmp	r3, #0
 800e970:	dd09      	ble.n	800e986 <sulp+0x36>
 800e972:	051b      	lsls	r3, r3, #20
 800e974:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e978:	2400      	movs	r4, #0
 800e97a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e97e:	4622      	mov	r2, r4
 800e980:	462b      	mov	r3, r5
 800e982:	f7f1 fe11 	bl	80005a8 <__aeabi_dmul>
 800e986:	bd70      	pop	{r4, r5, r6, pc}

0800e988 <_strtod_l>:
 800e988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e98c:	ed2d 8b02 	vpush	{d8}
 800e990:	b09d      	sub	sp, #116	; 0x74
 800e992:	461f      	mov	r7, r3
 800e994:	2300      	movs	r3, #0
 800e996:	9318      	str	r3, [sp, #96]	; 0x60
 800e998:	4ba2      	ldr	r3, [pc, #648]	; (800ec24 <_strtod_l+0x29c>)
 800e99a:	9213      	str	r2, [sp, #76]	; 0x4c
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	9305      	str	r3, [sp, #20]
 800e9a0:	4604      	mov	r4, r0
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	4688      	mov	r8, r1
 800e9a6:	f7f1 fbeb 	bl	8000180 <strlen>
 800e9aa:	f04f 0a00 	mov.w	sl, #0
 800e9ae:	4605      	mov	r5, r0
 800e9b0:	f04f 0b00 	mov.w	fp, #0
 800e9b4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e9b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e9ba:	781a      	ldrb	r2, [r3, #0]
 800e9bc:	2a2b      	cmp	r2, #43	; 0x2b
 800e9be:	d04e      	beq.n	800ea5e <_strtod_l+0xd6>
 800e9c0:	d83b      	bhi.n	800ea3a <_strtod_l+0xb2>
 800e9c2:	2a0d      	cmp	r2, #13
 800e9c4:	d834      	bhi.n	800ea30 <_strtod_l+0xa8>
 800e9c6:	2a08      	cmp	r2, #8
 800e9c8:	d834      	bhi.n	800ea34 <_strtod_l+0xac>
 800e9ca:	2a00      	cmp	r2, #0
 800e9cc:	d03e      	beq.n	800ea4c <_strtod_l+0xc4>
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	930a      	str	r3, [sp, #40]	; 0x28
 800e9d2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800e9d4:	7833      	ldrb	r3, [r6, #0]
 800e9d6:	2b30      	cmp	r3, #48	; 0x30
 800e9d8:	f040 80b0 	bne.w	800eb3c <_strtod_l+0x1b4>
 800e9dc:	7873      	ldrb	r3, [r6, #1]
 800e9de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e9e2:	2b58      	cmp	r3, #88	; 0x58
 800e9e4:	d168      	bne.n	800eab8 <_strtod_l+0x130>
 800e9e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9e8:	9301      	str	r3, [sp, #4]
 800e9ea:	ab18      	add	r3, sp, #96	; 0x60
 800e9ec:	9702      	str	r7, [sp, #8]
 800e9ee:	9300      	str	r3, [sp, #0]
 800e9f0:	4a8d      	ldr	r2, [pc, #564]	; (800ec28 <_strtod_l+0x2a0>)
 800e9f2:	ab19      	add	r3, sp, #100	; 0x64
 800e9f4:	a917      	add	r1, sp, #92	; 0x5c
 800e9f6:	4620      	mov	r0, r4
 800e9f8:	f001 fd44 	bl	8010484 <__gethex>
 800e9fc:	f010 0707 	ands.w	r7, r0, #7
 800ea00:	4605      	mov	r5, r0
 800ea02:	d005      	beq.n	800ea10 <_strtod_l+0x88>
 800ea04:	2f06      	cmp	r7, #6
 800ea06:	d12c      	bne.n	800ea62 <_strtod_l+0xda>
 800ea08:	3601      	adds	r6, #1
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	9617      	str	r6, [sp, #92]	; 0x5c
 800ea0e:	930a      	str	r3, [sp, #40]	; 0x28
 800ea10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	f040 8590 	bne.w	800f538 <_strtod_l+0xbb0>
 800ea18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea1a:	b1eb      	cbz	r3, 800ea58 <_strtod_l+0xd0>
 800ea1c:	4652      	mov	r2, sl
 800ea1e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ea22:	ec43 2b10 	vmov	d0, r2, r3
 800ea26:	b01d      	add	sp, #116	; 0x74
 800ea28:	ecbd 8b02 	vpop	{d8}
 800ea2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea30:	2a20      	cmp	r2, #32
 800ea32:	d1cc      	bne.n	800e9ce <_strtod_l+0x46>
 800ea34:	3301      	adds	r3, #1
 800ea36:	9317      	str	r3, [sp, #92]	; 0x5c
 800ea38:	e7be      	b.n	800e9b8 <_strtod_l+0x30>
 800ea3a:	2a2d      	cmp	r2, #45	; 0x2d
 800ea3c:	d1c7      	bne.n	800e9ce <_strtod_l+0x46>
 800ea3e:	2201      	movs	r2, #1
 800ea40:	920a      	str	r2, [sp, #40]	; 0x28
 800ea42:	1c5a      	adds	r2, r3, #1
 800ea44:	9217      	str	r2, [sp, #92]	; 0x5c
 800ea46:	785b      	ldrb	r3, [r3, #1]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d1c2      	bne.n	800e9d2 <_strtod_l+0x4a>
 800ea4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ea4e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	f040 856e 	bne.w	800f534 <_strtod_l+0xbac>
 800ea58:	4652      	mov	r2, sl
 800ea5a:	465b      	mov	r3, fp
 800ea5c:	e7e1      	b.n	800ea22 <_strtod_l+0x9a>
 800ea5e:	2200      	movs	r2, #0
 800ea60:	e7ee      	b.n	800ea40 <_strtod_l+0xb8>
 800ea62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ea64:	b13a      	cbz	r2, 800ea76 <_strtod_l+0xee>
 800ea66:	2135      	movs	r1, #53	; 0x35
 800ea68:	a81a      	add	r0, sp, #104	; 0x68
 800ea6a:	f002 fcae 	bl	80113ca <__copybits>
 800ea6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ea70:	4620      	mov	r0, r4
 800ea72:	f002 f86d 	bl	8010b50 <_Bfree>
 800ea76:	3f01      	subs	r7, #1
 800ea78:	2f04      	cmp	r7, #4
 800ea7a:	d806      	bhi.n	800ea8a <_strtod_l+0x102>
 800ea7c:	e8df f007 	tbb	[pc, r7]
 800ea80:	1714030a 	.word	0x1714030a
 800ea84:	0a          	.byte	0x0a
 800ea85:	00          	.byte	0x00
 800ea86:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800ea8a:	0728      	lsls	r0, r5, #28
 800ea8c:	d5c0      	bpl.n	800ea10 <_strtod_l+0x88>
 800ea8e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ea92:	e7bd      	b.n	800ea10 <_strtod_l+0x88>
 800ea94:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800ea98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ea9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ea9e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800eaa2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800eaa6:	e7f0      	b.n	800ea8a <_strtod_l+0x102>
 800eaa8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800ec2c <_strtod_l+0x2a4>
 800eaac:	e7ed      	b.n	800ea8a <_strtod_l+0x102>
 800eaae:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800eab2:	f04f 3aff 	mov.w	sl, #4294967295
 800eab6:	e7e8      	b.n	800ea8a <_strtod_l+0x102>
 800eab8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eaba:	1c5a      	adds	r2, r3, #1
 800eabc:	9217      	str	r2, [sp, #92]	; 0x5c
 800eabe:	785b      	ldrb	r3, [r3, #1]
 800eac0:	2b30      	cmp	r3, #48	; 0x30
 800eac2:	d0f9      	beq.n	800eab8 <_strtod_l+0x130>
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d0a3      	beq.n	800ea10 <_strtod_l+0x88>
 800eac8:	2301      	movs	r3, #1
 800eaca:	f04f 0900 	mov.w	r9, #0
 800eace:	9304      	str	r3, [sp, #16]
 800ead0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ead2:	9308      	str	r3, [sp, #32]
 800ead4:	f8cd 901c 	str.w	r9, [sp, #28]
 800ead8:	464f      	mov	r7, r9
 800eada:	220a      	movs	r2, #10
 800eadc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800eade:	7806      	ldrb	r6, [r0, #0]
 800eae0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800eae4:	b2d9      	uxtb	r1, r3
 800eae6:	2909      	cmp	r1, #9
 800eae8:	d92a      	bls.n	800eb40 <_strtod_l+0x1b8>
 800eaea:	9905      	ldr	r1, [sp, #20]
 800eaec:	462a      	mov	r2, r5
 800eaee:	f002 ff1b 	bl	8011928 <strncmp>
 800eaf2:	b398      	cbz	r0, 800eb5c <_strtod_l+0x1d4>
 800eaf4:	2000      	movs	r0, #0
 800eaf6:	4632      	mov	r2, r6
 800eaf8:	463d      	mov	r5, r7
 800eafa:	9005      	str	r0, [sp, #20]
 800eafc:	4603      	mov	r3, r0
 800eafe:	2a65      	cmp	r2, #101	; 0x65
 800eb00:	d001      	beq.n	800eb06 <_strtod_l+0x17e>
 800eb02:	2a45      	cmp	r2, #69	; 0x45
 800eb04:	d118      	bne.n	800eb38 <_strtod_l+0x1b0>
 800eb06:	b91d      	cbnz	r5, 800eb10 <_strtod_l+0x188>
 800eb08:	9a04      	ldr	r2, [sp, #16]
 800eb0a:	4302      	orrs	r2, r0
 800eb0c:	d09e      	beq.n	800ea4c <_strtod_l+0xc4>
 800eb0e:	2500      	movs	r5, #0
 800eb10:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800eb14:	f108 0201 	add.w	r2, r8, #1
 800eb18:	9217      	str	r2, [sp, #92]	; 0x5c
 800eb1a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800eb1e:	2a2b      	cmp	r2, #43	; 0x2b
 800eb20:	d075      	beq.n	800ec0e <_strtod_l+0x286>
 800eb22:	2a2d      	cmp	r2, #45	; 0x2d
 800eb24:	d07b      	beq.n	800ec1e <_strtod_l+0x296>
 800eb26:	f04f 0c00 	mov.w	ip, #0
 800eb2a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800eb2e:	2909      	cmp	r1, #9
 800eb30:	f240 8082 	bls.w	800ec38 <_strtod_l+0x2b0>
 800eb34:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800eb38:	2600      	movs	r6, #0
 800eb3a:	e09d      	b.n	800ec78 <_strtod_l+0x2f0>
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	e7c4      	b.n	800eaca <_strtod_l+0x142>
 800eb40:	2f08      	cmp	r7, #8
 800eb42:	bfd8      	it	le
 800eb44:	9907      	ldrle	r1, [sp, #28]
 800eb46:	f100 0001 	add.w	r0, r0, #1
 800eb4a:	bfda      	itte	le
 800eb4c:	fb02 3301 	mlale	r3, r2, r1, r3
 800eb50:	9307      	strle	r3, [sp, #28]
 800eb52:	fb02 3909 	mlagt	r9, r2, r9, r3
 800eb56:	3701      	adds	r7, #1
 800eb58:	9017      	str	r0, [sp, #92]	; 0x5c
 800eb5a:	e7bf      	b.n	800eadc <_strtod_l+0x154>
 800eb5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eb5e:	195a      	adds	r2, r3, r5
 800eb60:	9217      	str	r2, [sp, #92]	; 0x5c
 800eb62:	5d5a      	ldrb	r2, [r3, r5]
 800eb64:	2f00      	cmp	r7, #0
 800eb66:	d037      	beq.n	800ebd8 <_strtod_l+0x250>
 800eb68:	9005      	str	r0, [sp, #20]
 800eb6a:	463d      	mov	r5, r7
 800eb6c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800eb70:	2b09      	cmp	r3, #9
 800eb72:	d912      	bls.n	800eb9a <_strtod_l+0x212>
 800eb74:	2301      	movs	r3, #1
 800eb76:	e7c2      	b.n	800eafe <_strtod_l+0x176>
 800eb78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eb7a:	1c5a      	adds	r2, r3, #1
 800eb7c:	9217      	str	r2, [sp, #92]	; 0x5c
 800eb7e:	785a      	ldrb	r2, [r3, #1]
 800eb80:	3001      	adds	r0, #1
 800eb82:	2a30      	cmp	r2, #48	; 0x30
 800eb84:	d0f8      	beq.n	800eb78 <_strtod_l+0x1f0>
 800eb86:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800eb8a:	2b08      	cmp	r3, #8
 800eb8c:	f200 84d9 	bhi.w	800f542 <_strtod_l+0xbba>
 800eb90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eb92:	9005      	str	r0, [sp, #20]
 800eb94:	2000      	movs	r0, #0
 800eb96:	9308      	str	r3, [sp, #32]
 800eb98:	4605      	mov	r5, r0
 800eb9a:	3a30      	subs	r2, #48	; 0x30
 800eb9c:	f100 0301 	add.w	r3, r0, #1
 800eba0:	d014      	beq.n	800ebcc <_strtod_l+0x244>
 800eba2:	9905      	ldr	r1, [sp, #20]
 800eba4:	4419      	add	r1, r3
 800eba6:	9105      	str	r1, [sp, #20]
 800eba8:	462b      	mov	r3, r5
 800ebaa:	eb00 0e05 	add.w	lr, r0, r5
 800ebae:	210a      	movs	r1, #10
 800ebb0:	4573      	cmp	r3, lr
 800ebb2:	d113      	bne.n	800ebdc <_strtod_l+0x254>
 800ebb4:	182b      	adds	r3, r5, r0
 800ebb6:	2b08      	cmp	r3, #8
 800ebb8:	f105 0501 	add.w	r5, r5, #1
 800ebbc:	4405      	add	r5, r0
 800ebbe:	dc1c      	bgt.n	800ebfa <_strtod_l+0x272>
 800ebc0:	9907      	ldr	r1, [sp, #28]
 800ebc2:	230a      	movs	r3, #10
 800ebc4:	fb03 2301 	mla	r3, r3, r1, r2
 800ebc8:	9307      	str	r3, [sp, #28]
 800ebca:	2300      	movs	r3, #0
 800ebcc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ebce:	1c51      	adds	r1, r2, #1
 800ebd0:	9117      	str	r1, [sp, #92]	; 0x5c
 800ebd2:	7852      	ldrb	r2, [r2, #1]
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	e7c9      	b.n	800eb6c <_strtod_l+0x1e4>
 800ebd8:	4638      	mov	r0, r7
 800ebda:	e7d2      	b.n	800eb82 <_strtod_l+0x1fa>
 800ebdc:	2b08      	cmp	r3, #8
 800ebde:	dc04      	bgt.n	800ebea <_strtod_l+0x262>
 800ebe0:	9e07      	ldr	r6, [sp, #28]
 800ebe2:	434e      	muls	r6, r1
 800ebe4:	9607      	str	r6, [sp, #28]
 800ebe6:	3301      	adds	r3, #1
 800ebe8:	e7e2      	b.n	800ebb0 <_strtod_l+0x228>
 800ebea:	f103 0c01 	add.w	ip, r3, #1
 800ebee:	f1bc 0f10 	cmp.w	ip, #16
 800ebf2:	bfd8      	it	le
 800ebf4:	fb01 f909 	mulle.w	r9, r1, r9
 800ebf8:	e7f5      	b.n	800ebe6 <_strtod_l+0x25e>
 800ebfa:	2d10      	cmp	r5, #16
 800ebfc:	bfdc      	itt	le
 800ebfe:	230a      	movle	r3, #10
 800ec00:	fb03 2909 	mlale	r9, r3, r9, r2
 800ec04:	e7e1      	b.n	800ebca <_strtod_l+0x242>
 800ec06:	2300      	movs	r3, #0
 800ec08:	9305      	str	r3, [sp, #20]
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	e77c      	b.n	800eb08 <_strtod_l+0x180>
 800ec0e:	f04f 0c00 	mov.w	ip, #0
 800ec12:	f108 0202 	add.w	r2, r8, #2
 800ec16:	9217      	str	r2, [sp, #92]	; 0x5c
 800ec18:	f898 2002 	ldrb.w	r2, [r8, #2]
 800ec1c:	e785      	b.n	800eb2a <_strtod_l+0x1a2>
 800ec1e:	f04f 0c01 	mov.w	ip, #1
 800ec22:	e7f6      	b.n	800ec12 <_strtod_l+0x28a>
 800ec24:	08012938 	.word	0x08012938
 800ec28:	080126ec 	.word	0x080126ec
 800ec2c:	7ff00000 	.word	0x7ff00000
 800ec30:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ec32:	1c51      	adds	r1, r2, #1
 800ec34:	9117      	str	r1, [sp, #92]	; 0x5c
 800ec36:	7852      	ldrb	r2, [r2, #1]
 800ec38:	2a30      	cmp	r2, #48	; 0x30
 800ec3a:	d0f9      	beq.n	800ec30 <_strtod_l+0x2a8>
 800ec3c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ec40:	2908      	cmp	r1, #8
 800ec42:	f63f af79 	bhi.w	800eb38 <_strtod_l+0x1b0>
 800ec46:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ec4a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ec4c:	9206      	str	r2, [sp, #24]
 800ec4e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ec50:	1c51      	adds	r1, r2, #1
 800ec52:	9117      	str	r1, [sp, #92]	; 0x5c
 800ec54:	7852      	ldrb	r2, [r2, #1]
 800ec56:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800ec5a:	2e09      	cmp	r6, #9
 800ec5c:	d937      	bls.n	800ecce <_strtod_l+0x346>
 800ec5e:	9e06      	ldr	r6, [sp, #24]
 800ec60:	1b89      	subs	r1, r1, r6
 800ec62:	2908      	cmp	r1, #8
 800ec64:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ec68:	dc02      	bgt.n	800ec70 <_strtod_l+0x2e8>
 800ec6a:	4576      	cmp	r6, lr
 800ec6c:	bfa8      	it	ge
 800ec6e:	4676      	movge	r6, lr
 800ec70:	f1bc 0f00 	cmp.w	ip, #0
 800ec74:	d000      	beq.n	800ec78 <_strtod_l+0x2f0>
 800ec76:	4276      	negs	r6, r6
 800ec78:	2d00      	cmp	r5, #0
 800ec7a:	d14d      	bne.n	800ed18 <_strtod_l+0x390>
 800ec7c:	9904      	ldr	r1, [sp, #16]
 800ec7e:	4301      	orrs	r1, r0
 800ec80:	f47f aec6 	bne.w	800ea10 <_strtod_l+0x88>
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	f47f aee1 	bne.w	800ea4c <_strtod_l+0xc4>
 800ec8a:	2a69      	cmp	r2, #105	; 0x69
 800ec8c:	d027      	beq.n	800ecde <_strtod_l+0x356>
 800ec8e:	dc24      	bgt.n	800ecda <_strtod_l+0x352>
 800ec90:	2a49      	cmp	r2, #73	; 0x49
 800ec92:	d024      	beq.n	800ecde <_strtod_l+0x356>
 800ec94:	2a4e      	cmp	r2, #78	; 0x4e
 800ec96:	f47f aed9 	bne.w	800ea4c <_strtod_l+0xc4>
 800ec9a:	499f      	ldr	r1, [pc, #636]	; (800ef18 <_strtod_l+0x590>)
 800ec9c:	a817      	add	r0, sp, #92	; 0x5c
 800ec9e:	f001 fe49 	bl	8010934 <__match>
 800eca2:	2800      	cmp	r0, #0
 800eca4:	f43f aed2 	beq.w	800ea4c <_strtod_l+0xc4>
 800eca8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ecaa:	781b      	ldrb	r3, [r3, #0]
 800ecac:	2b28      	cmp	r3, #40	; 0x28
 800ecae:	d12d      	bne.n	800ed0c <_strtod_l+0x384>
 800ecb0:	499a      	ldr	r1, [pc, #616]	; (800ef1c <_strtod_l+0x594>)
 800ecb2:	aa1a      	add	r2, sp, #104	; 0x68
 800ecb4:	a817      	add	r0, sp, #92	; 0x5c
 800ecb6:	f001 fe51 	bl	801095c <__hexnan>
 800ecba:	2805      	cmp	r0, #5
 800ecbc:	d126      	bne.n	800ed0c <_strtod_l+0x384>
 800ecbe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ecc0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800ecc4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ecc8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800eccc:	e6a0      	b.n	800ea10 <_strtod_l+0x88>
 800ecce:	210a      	movs	r1, #10
 800ecd0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800ecd4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ecd8:	e7b9      	b.n	800ec4e <_strtod_l+0x2c6>
 800ecda:	2a6e      	cmp	r2, #110	; 0x6e
 800ecdc:	e7db      	b.n	800ec96 <_strtod_l+0x30e>
 800ecde:	4990      	ldr	r1, [pc, #576]	; (800ef20 <_strtod_l+0x598>)
 800ece0:	a817      	add	r0, sp, #92	; 0x5c
 800ece2:	f001 fe27 	bl	8010934 <__match>
 800ece6:	2800      	cmp	r0, #0
 800ece8:	f43f aeb0 	beq.w	800ea4c <_strtod_l+0xc4>
 800ecec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ecee:	498d      	ldr	r1, [pc, #564]	; (800ef24 <_strtod_l+0x59c>)
 800ecf0:	3b01      	subs	r3, #1
 800ecf2:	a817      	add	r0, sp, #92	; 0x5c
 800ecf4:	9317      	str	r3, [sp, #92]	; 0x5c
 800ecf6:	f001 fe1d 	bl	8010934 <__match>
 800ecfa:	b910      	cbnz	r0, 800ed02 <_strtod_l+0x37a>
 800ecfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ecfe:	3301      	adds	r3, #1
 800ed00:	9317      	str	r3, [sp, #92]	; 0x5c
 800ed02:	f8df b230 	ldr.w	fp, [pc, #560]	; 800ef34 <_strtod_l+0x5ac>
 800ed06:	f04f 0a00 	mov.w	sl, #0
 800ed0a:	e681      	b.n	800ea10 <_strtod_l+0x88>
 800ed0c:	4886      	ldr	r0, [pc, #536]	; (800ef28 <_strtod_l+0x5a0>)
 800ed0e:	f002 fdf3 	bl	80118f8 <nan>
 800ed12:	ec5b ab10 	vmov	sl, fp, d0
 800ed16:	e67b      	b.n	800ea10 <_strtod_l+0x88>
 800ed18:	9b05      	ldr	r3, [sp, #20]
 800ed1a:	9807      	ldr	r0, [sp, #28]
 800ed1c:	1af3      	subs	r3, r6, r3
 800ed1e:	2f00      	cmp	r7, #0
 800ed20:	bf08      	it	eq
 800ed22:	462f      	moveq	r7, r5
 800ed24:	2d10      	cmp	r5, #16
 800ed26:	9306      	str	r3, [sp, #24]
 800ed28:	46a8      	mov	r8, r5
 800ed2a:	bfa8      	it	ge
 800ed2c:	f04f 0810 	movge.w	r8, #16
 800ed30:	f7f1 fbc0 	bl	80004b4 <__aeabi_ui2d>
 800ed34:	2d09      	cmp	r5, #9
 800ed36:	4682      	mov	sl, r0
 800ed38:	468b      	mov	fp, r1
 800ed3a:	dd13      	ble.n	800ed64 <_strtod_l+0x3dc>
 800ed3c:	4b7b      	ldr	r3, [pc, #492]	; (800ef2c <_strtod_l+0x5a4>)
 800ed3e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ed42:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ed46:	f7f1 fc2f 	bl	80005a8 <__aeabi_dmul>
 800ed4a:	4682      	mov	sl, r0
 800ed4c:	4648      	mov	r0, r9
 800ed4e:	468b      	mov	fp, r1
 800ed50:	f7f1 fbb0 	bl	80004b4 <__aeabi_ui2d>
 800ed54:	4602      	mov	r2, r0
 800ed56:	460b      	mov	r3, r1
 800ed58:	4650      	mov	r0, sl
 800ed5a:	4659      	mov	r1, fp
 800ed5c:	f7f1 fa6e 	bl	800023c <__adddf3>
 800ed60:	4682      	mov	sl, r0
 800ed62:	468b      	mov	fp, r1
 800ed64:	2d0f      	cmp	r5, #15
 800ed66:	dc38      	bgt.n	800edda <_strtod_l+0x452>
 800ed68:	9b06      	ldr	r3, [sp, #24]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	f43f ae50 	beq.w	800ea10 <_strtod_l+0x88>
 800ed70:	dd24      	ble.n	800edbc <_strtod_l+0x434>
 800ed72:	2b16      	cmp	r3, #22
 800ed74:	dc0b      	bgt.n	800ed8e <_strtod_l+0x406>
 800ed76:	496d      	ldr	r1, [pc, #436]	; (800ef2c <_strtod_l+0x5a4>)
 800ed78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ed7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed80:	4652      	mov	r2, sl
 800ed82:	465b      	mov	r3, fp
 800ed84:	f7f1 fc10 	bl	80005a8 <__aeabi_dmul>
 800ed88:	4682      	mov	sl, r0
 800ed8a:	468b      	mov	fp, r1
 800ed8c:	e640      	b.n	800ea10 <_strtod_l+0x88>
 800ed8e:	9a06      	ldr	r2, [sp, #24]
 800ed90:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ed94:	4293      	cmp	r3, r2
 800ed96:	db20      	blt.n	800edda <_strtod_l+0x452>
 800ed98:	4c64      	ldr	r4, [pc, #400]	; (800ef2c <_strtod_l+0x5a4>)
 800ed9a:	f1c5 050f 	rsb	r5, r5, #15
 800ed9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800eda2:	4652      	mov	r2, sl
 800eda4:	465b      	mov	r3, fp
 800eda6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800edaa:	f7f1 fbfd 	bl	80005a8 <__aeabi_dmul>
 800edae:	9b06      	ldr	r3, [sp, #24]
 800edb0:	1b5d      	subs	r5, r3, r5
 800edb2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800edb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800edba:	e7e3      	b.n	800ed84 <_strtod_l+0x3fc>
 800edbc:	9b06      	ldr	r3, [sp, #24]
 800edbe:	3316      	adds	r3, #22
 800edc0:	db0b      	blt.n	800edda <_strtod_l+0x452>
 800edc2:	9b05      	ldr	r3, [sp, #20]
 800edc4:	1b9e      	subs	r6, r3, r6
 800edc6:	4b59      	ldr	r3, [pc, #356]	; (800ef2c <_strtod_l+0x5a4>)
 800edc8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800edcc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800edd0:	4650      	mov	r0, sl
 800edd2:	4659      	mov	r1, fp
 800edd4:	f7f1 fd12 	bl	80007fc <__aeabi_ddiv>
 800edd8:	e7d6      	b.n	800ed88 <_strtod_l+0x400>
 800edda:	9b06      	ldr	r3, [sp, #24]
 800eddc:	eba5 0808 	sub.w	r8, r5, r8
 800ede0:	4498      	add	r8, r3
 800ede2:	f1b8 0f00 	cmp.w	r8, #0
 800ede6:	dd74      	ble.n	800eed2 <_strtod_l+0x54a>
 800ede8:	f018 030f 	ands.w	r3, r8, #15
 800edec:	d00a      	beq.n	800ee04 <_strtod_l+0x47c>
 800edee:	494f      	ldr	r1, [pc, #316]	; (800ef2c <_strtod_l+0x5a4>)
 800edf0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800edf4:	4652      	mov	r2, sl
 800edf6:	465b      	mov	r3, fp
 800edf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800edfc:	f7f1 fbd4 	bl	80005a8 <__aeabi_dmul>
 800ee00:	4682      	mov	sl, r0
 800ee02:	468b      	mov	fp, r1
 800ee04:	f038 080f 	bics.w	r8, r8, #15
 800ee08:	d04f      	beq.n	800eeaa <_strtod_l+0x522>
 800ee0a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ee0e:	dd22      	ble.n	800ee56 <_strtod_l+0x4ce>
 800ee10:	2500      	movs	r5, #0
 800ee12:	462e      	mov	r6, r5
 800ee14:	9507      	str	r5, [sp, #28]
 800ee16:	9505      	str	r5, [sp, #20]
 800ee18:	2322      	movs	r3, #34	; 0x22
 800ee1a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800ef34 <_strtod_l+0x5ac>
 800ee1e:	6023      	str	r3, [r4, #0]
 800ee20:	f04f 0a00 	mov.w	sl, #0
 800ee24:	9b07      	ldr	r3, [sp, #28]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	f43f adf2 	beq.w	800ea10 <_strtod_l+0x88>
 800ee2c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ee2e:	4620      	mov	r0, r4
 800ee30:	f001 fe8e 	bl	8010b50 <_Bfree>
 800ee34:	9905      	ldr	r1, [sp, #20]
 800ee36:	4620      	mov	r0, r4
 800ee38:	f001 fe8a 	bl	8010b50 <_Bfree>
 800ee3c:	4631      	mov	r1, r6
 800ee3e:	4620      	mov	r0, r4
 800ee40:	f001 fe86 	bl	8010b50 <_Bfree>
 800ee44:	9907      	ldr	r1, [sp, #28]
 800ee46:	4620      	mov	r0, r4
 800ee48:	f001 fe82 	bl	8010b50 <_Bfree>
 800ee4c:	4629      	mov	r1, r5
 800ee4e:	4620      	mov	r0, r4
 800ee50:	f001 fe7e 	bl	8010b50 <_Bfree>
 800ee54:	e5dc      	b.n	800ea10 <_strtod_l+0x88>
 800ee56:	4b36      	ldr	r3, [pc, #216]	; (800ef30 <_strtod_l+0x5a8>)
 800ee58:	9304      	str	r3, [sp, #16]
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ee60:	4650      	mov	r0, sl
 800ee62:	4659      	mov	r1, fp
 800ee64:	4699      	mov	r9, r3
 800ee66:	f1b8 0f01 	cmp.w	r8, #1
 800ee6a:	dc21      	bgt.n	800eeb0 <_strtod_l+0x528>
 800ee6c:	b10b      	cbz	r3, 800ee72 <_strtod_l+0x4ea>
 800ee6e:	4682      	mov	sl, r0
 800ee70:	468b      	mov	fp, r1
 800ee72:	4b2f      	ldr	r3, [pc, #188]	; (800ef30 <_strtod_l+0x5a8>)
 800ee74:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ee78:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ee7c:	4652      	mov	r2, sl
 800ee7e:	465b      	mov	r3, fp
 800ee80:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ee84:	f7f1 fb90 	bl	80005a8 <__aeabi_dmul>
 800ee88:	4b2a      	ldr	r3, [pc, #168]	; (800ef34 <_strtod_l+0x5ac>)
 800ee8a:	460a      	mov	r2, r1
 800ee8c:	400b      	ands	r3, r1
 800ee8e:	492a      	ldr	r1, [pc, #168]	; (800ef38 <_strtod_l+0x5b0>)
 800ee90:	428b      	cmp	r3, r1
 800ee92:	4682      	mov	sl, r0
 800ee94:	d8bc      	bhi.n	800ee10 <_strtod_l+0x488>
 800ee96:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ee9a:	428b      	cmp	r3, r1
 800ee9c:	bf86      	itte	hi
 800ee9e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ef3c <_strtod_l+0x5b4>
 800eea2:	f04f 3aff 	movhi.w	sl, #4294967295
 800eea6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800eeaa:	2300      	movs	r3, #0
 800eeac:	9304      	str	r3, [sp, #16]
 800eeae:	e084      	b.n	800efba <_strtod_l+0x632>
 800eeb0:	f018 0f01 	tst.w	r8, #1
 800eeb4:	d005      	beq.n	800eec2 <_strtod_l+0x53a>
 800eeb6:	9b04      	ldr	r3, [sp, #16]
 800eeb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eebc:	f7f1 fb74 	bl	80005a8 <__aeabi_dmul>
 800eec0:	2301      	movs	r3, #1
 800eec2:	9a04      	ldr	r2, [sp, #16]
 800eec4:	3208      	adds	r2, #8
 800eec6:	f109 0901 	add.w	r9, r9, #1
 800eeca:	ea4f 0868 	mov.w	r8, r8, asr #1
 800eece:	9204      	str	r2, [sp, #16]
 800eed0:	e7c9      	b.n	800ee66 <_strtod_l+0x4de>
 800eed2:	d0ea      	beq.n	800eeaa <_strtod_l+0x522>
 800eed4:	f1c8 0800 	rsb	r8, r8, #0
 800eed8:	f018 020f 	ands.w	r2, r8, #15
 800eedc:	d00a      	beq.n	800eef4 <_strtod_l+0x56c>
 800eede:	4b13      	ldr	r3, [pc, #76]	; (800ef2c <_strtod_l+0x5a4>)
 800eee0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eee4:	4650      	mov	r0, sl
 800eee6:	4659      	mov	r1, fp
 800eee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeec:	f7f1 fc86 	bl	80007fc <__aeabi_ddiv>
 800eef0:	4682      	mov	sl, r0
 800eef2:	468b      	mov	fp, r1
 800eef4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800eef8:	d0d7      	beq.n	800eeaa <_strtod_l+0x522>
 800eefa:	f1b8 0f1f 	cmp.w	r8, #31
 800eefe:	dd1f      	ble.n	800ef40 <_strtod_l+0x5b8>
 800ef00:	2500      	movs	r5, #0
 800ef02:	462e      	mov	r6, r5
 800ef04:	9507      	str	r5, [sp, #28]
 800ef06:	9505      	str	r5, [sp, #20]
 800ef08:	2322      	movs	r3, #34	; 0x22
 800ef0a:	f04f 0a00 	mov.w	sl, #0
 800ef0e:	f04f 0b00 	mov.w	fp, #0
 800ef12:	6023      	str	r3, [r4, #0]
 800ef14:	e786      	b.n	800ee24 <_strtod_l+0x49c>
 800ef16:	bf00      	nop
 800ef18:	080126bd 	.word	0x080126bd
 800ef1c:	08012700 	.word	0x08012700
 800ef20:	080126b5 	.word	0x080126b5
 800ef24:	08012844 	.word	0x08012844
 800ef28:	08012af0 	.word	0x08012af0
 800ef2c:	080129d0 	.word	0x080129d0
 800ef30:	080129a8 	.word	0x080129a8
 800ef34:	7ff00000 	.word	0x7ff00000
 800ef38:	7ca00000 	.word	0x7ca00000
 800ef3c:	7fefffff 	.word	0x7fefffff
 800ef40:	f018 0310 	ands.w	r3, r8, #16
 800ef44:	bf18      	it	ne
 800ef46:	236a      	movne	r3, #106	; 0x6a
 800ef48:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800f2f8 <_strtod_l+0x970>
 800ef4c:	9304      	str	r3, [sp, #16]
 800ef4e:	4650      	mov	r0, sl
 800ef50:	4659      	mov	r1, fp
 800ef52:	2300      	movs	r3, #0
 800ef54:	f018 0f01 	tst.w	r8, #1
 800ef58:	d004      	beq.n	800ef64 <_strtod_l+0x5dc>
 800ef5a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ef5e:	f7f1 fb23 	bl	80005a8 <__aeabi_dmul>
 800ef62:	2301      	movs	r3, #1
 800ef64:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ef68:	f109 0908 	add.w	r9, r9, #8
 800ef6c:	d1f2      	bne.n	800ef54 <_strtod_l+0x5cc>
 800ef6e:	b10b      	cbz	r3, 800ef74 <_strtod_l+0x5ec>
 800ef70:	4682      	mov	sl, r0
 800ef72:	468b      	mov	fp, r1
 800ef74:	9b04      	ldr	r3, [sp, #16]
 800ef76:	b1c3      	cbz	r3, 800efaa <_strtod_l+0x622>
 800ef78:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ef7c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	4659      	mov	r1, fp
 800ef84:	dd11      	ble.n	800efaa <_strtod_l+0x622>
 800ef86:	2b1f      	cmp	r3, #31
 800ef88:	f340 8124 	ble.w	800f1d4 <_strtod_l+0x84c>
 800ef8c:	2b34      	cmp	r3, #52	; 0x34
 800ef8e:	bfde      	ittt	le
 800ef90:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ef94:	f04f 33ff 	movle.w	r3, #4294967295
 800ef98:	fa03 f202 	lslle.w	r2, r3, r2
 800ef9c:	f04f 0a00 	mov.w	sl, #0
 800efa0:	bfcc      	ite	gt
 800efa2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800efa6:	ea02 0b01 	andle.w	fp, r2, r1
 800efaa:	2200      	movs	r2, #0
 800efac:	2300      	movs	r3, #0
 800efae:	4650      	mov	r0, sl
 800efb0:	4659      	mov	r1, fp
 800efb2:	f7f1 fd61 	bl	8000a78 <__aeabi_dcmpeq>
 800efb6:	2800      	cmp	r0, #0
 800efb8:	d1a2      	bne.n	800ef00 <_strtod_l+0x578>
 800efba:	9b07      	ldr	r3, [sp, #28]
 800efbc:	9300      	str	r3, [sp, #0]
 800efbe:	9908      	ldr	r1, [sp, #32]
 800efc0:	462b      	mov	r3, r5
 800efc2:	463a      	mov	r2, r7
 800efc4:	4620      	mov	r0, r4
 800efc6:	f001 fe2b 	bl	8010c20 <__s2b>
 800efca:	9007      	str	r0, [sp, #28]
 800efcc:	2800      	cmp	r0, #0
 800efce:	f43f af1f 	beq.w	800ee10 <_strtod_l+0x488>
 800efd2:	9b05      	ldr	r3, [sp, #20]
 800efd4:	1b9e      	subs	r6, r3, r6
 800efd6:	9b06      	ldr	r3, [sp, #24]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	bfb4      	ite	lt
 800efdc:	4633      	movlt	r3, r6
 800efde:	2300      	movge	r3, #0
 800efe0:	930c      	str	r3, [sp, #48]	; 0x30
 800efe2:	9b06      	ldr	r3, [sp, #24]
 800efe4:	2500      	movs	r5, #0
 800efe6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800efea:	9312      	str	r3, [sp, #72]	; 0x48
 800efec:	462e      	mov	r6, r5
 800efee:	9b07      	ldr	r3, [sp, #28]
 800eff0:	4620      	mov	r0, r4
 800eff2:	6859      	ldr	r1, [r3, #4]
 800eff4:	f001 fd6c 	bl	8010ad0 <_Balloc>
 800eff8:	9005      	str	r0, [sp, #20]
 800effa:	2800      	cmp	r0, #0
 800effc:	f43f af0c 	beq.w	800ee18 <_strtod_l+0x490>
 800f000:	9b07      	ldr	r3, [sp, #28]
 800f002:	691a      	ldr	r2, [r3, #16]
 800f004:	3202      	adds	r2, #2
 800f006:	f103 010c 	add.w	r1, r3, #12
 800f00a:	0092      	lsls	r2, r2, #2
 800f00c:	300c      	adds	r0, #12
 800f00e:	f7fe fde9 	bl	800dbe4 <memcpy>
 800f012:	ec4b ab10 	vmov	d0, sl, fp
 800f016:	aa1a      	add	r2, sp, #104	; 0x68
 800f018:	a919      	add	r1, sp, #100	; 0x64
 800f01a:	4620      	mov	r0, r4
 800f01c:	f002 f946 	bl	80112ac <__d2b>
 800f020:	ec4b ab18 	vmov	d8, sl, fp
 800f024:	9018      	str	r0, [sp, #96]	; 0x60
 800f026:	2800      	cmp	r0, #0
 800f028:	f43f aef6 	beq.w	800ee18 <_strtod_l+0x490>
 800f02c:	2101      	movs	r1, #1
 800f02e:	4620      	mov	r0, r4
 800f030:	f001 fe90 	bl	8010d54 <__i2b>
 800f034:	4606      	mov	r6, r0
 800f036:	2800      	cmp	r0, #0
 800f038:	f43f aeee 	beq.w	800ee18 <_strtod_l+0x490>
 800f03c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f03e:	9904      	ldr	r1, [sp, #16]
 800f040:	2b00      	cmp	r3, #0
 800f042:	bfab      	itete	ge
 800f044:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800f046:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800f048:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800f04a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800f04e:	bfac      	ite	ge
 800f050:	eb03 0902 	addge.w	r9, r3, r2
 800f054:	1ad7      	sublt	r7, r2, r3
 800f056:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f058:	eba3 0801 	sub.w	r8, r3, r1
 800f05c:	4490      	add	r8, r2
 800f05e:	4ba1      	ldr	r3, [pc, #644]	; (800f2e4 <_strtod_l+0x95c>)
 800f060:	f108 38ff 	add.w	r8, r8, #4294967295
 800f064:	4598      	cmp	r8, r3
 800f066:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f06a:	f280 80c7 	bge.w	800f1fc <_strtod_l+0x874>
 800f06e:	eba3 0308 	sub.w	r3, r3, r8
 800f072:	2b1f      	cmp	r3, #31
 800f074:	eba2 0203 	sub.w	r2, r2, r3
 800f078:	f04f 0101 	mov.w	r1, #1
 800f07c:	f300 80b1 	bgt.w	800f1e2 <_strtod_l+0x85a>
 800f080:	fa01 f303 	lsl.w	r3, r1, r3
 800f084:	930d      	str	r3, [sp, #52]	; 0x34
 800f086:	2300      	movs	r3, #0
 800f088:	9308      	str	r3, [sp, #32]
 800f08a:	eb09 0802 	add.w	r8, r9, r2
 800f08e:	9b04      	ldr	r3, [sp, #16]
 800f090:	45c1      	cmp	r9, r8
 800f092:	4417      	add	r7, r2
 800f094:	441f      	add	r7, r3
 800f096:	464b      	mov	r3, r9
 800f098:	bfa8      	it	ge
 800f09a:	4643      	movge	r3, r8
 800f09c:	42bb      	cmp	r3, r7
 800f09e:	bfa8      	it	ge
 800f0a0:	463b      	movge	r3, r7
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	bfc2      	ittt	gt
 800f0a6:	eba8 0803 	subgt.w	r8, r8, r3
 800f0aa:	1aff      	subgt	r7, r7, r3
 800f0ac:	eba9 0903 	subgt.w	r9, r9, r3
 800f0b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	dd17      	ble.n	800f0e6 <_strtod_l+0x75e>
 800f0b6:	4631      	mov	r1, r6
 800f0b8:	461a      	mov	r2, r3
 800f0ba:	4620      	mov	r0, r4
 800f0bc:	f001 ff0a 	bl	8010ed4 <__pow5mult>
 800f0c0:	4606      	mov	r6, r0
 800f0c2:	2800      	cmp	r0, #0
 800f0c4:	f43f aea8 	beq.w	800ee18 <_strtod_l+0x490>
 800f0c8:	4601      	mov	r1, r0
 800f0ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f0cc:	4620      	mov	r0, r4
 800f0ce:	f001 fe57 	bl	8010d80 <__multiply>
 800f0d2:	900b      	str	r0, [sp, #44]	; 0x2c
 800f0d4:	2800      	cmp	r0, #0
 800f0d6:	f43f ae9f 	beq.w	800ee18 <_strtod_l+0x490>
 800f0da:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f0dc:	4620      	mov	r0, r4
 800f0de:	f001 fd37 	bl	8010b50 <_Bfree>
 800f0e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f0e4:	9318      	str	r3, [sp, #96]	; 0x60
 800f0e6:	f1b8 0f00 	cmp.w	r8, #0
 800f0ea:	f300 808c 	bgt.w	800f206 <_strtod_l+0x87e>
 800f0ee:	9b06      	ldr	r3, [sp, #24]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	dd08      	ble.n	800f106 <_strtod_l+0x77e>
 800f0f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f0f6:	9905      	ldr	r1, [sp, #20]
 800f0f8:	4620      	mov	r0, r4
 800f0fa:	f001 feeb 	bl	8010ed4 <__pow5mult>
 800f0fe:	9005      	str	r0, [sp, #20]
 800f100:	2800      	cmp	r0, #0
 800f102:	f43f ae89 	beq.w	800ee18 <_strtod_l+0x490>
 800f106:	2f00      	cmp	r7, #0
 800f108:	dd08      	ble.n	800f11c <_strtod_l+0x794>
 800f10a:	9905      	ldr	r1, [sp, #20]
 800f10c:	463a      	mov	r2, r7
 800f10e:	4620      	mov	r0, r4
 800f110:	f001 ff3a 	bl	8010f88 <__lshift>
 800f114:	9005      	str	r0, [sp, #20]
 800f116:	2800      	cmp	r0, #0
 800f118:	f43f ae7e 	beq.w	800ee18 <_strtod_l+0x490>
 800f11c:	f1b9 0f00 	cmp.w	r9, #0
 800f120:	dd08      	ble.n	800f134 <_strtod_l+0x7ac>
 800f122:	4631      	mov	r1, r6
 800f124:	464a      	mov	r2, r9
 800f126:	4620      	mov	r0, r4
 800f128:	f001 ff2e 	bl	8010f88 <__lshift>
 800f12c:	4606      	mov	r6, r0
 800f12e:	2800      	cmp	r0, #0
 800f130:	f43f ae72 	beq.w	800ee18 <_strtod_l+0x490>
 800f134:	9a05      	ldr	r2, [sp, #20]
 800f136:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f138:	4620      	mov	r0, r4
 800f13a:	f001 ffb1 	bl	80110a0 <__mdiff>
 800f13e:	4605      	mov	r5, r0
 800f140:	2800      	cmp	r0, #0
 800f142:	f43f ae69 	beq.w	800ee18 <_strtod_l+0x490>
 800f146:	68c3      	ldr	r3, [r0, #12]
 800f148:	930b      	str	r3, [sp, #44]	; 0x2c
 800f14a:	2300      	movs	r3, #0
 800f14c:	60c3      	str	r3, [r0, #12]
 800f14e:	4631      	mov	r1, r6
 800f150:	f001 ff8a 	bl	8011068 <__mcmp>
 800f154:	2800      	cmp	r0, #0
 800f156:	da60      	bge.n	800f21a <_strtod_l+0x892>
 800f158:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f15a:	ea53 030a 	orrs.w	r3, r3, sl
 800f15e:	f040 8082 	bne.w	800f266 <_strtod_l+0x8de>
 800f162:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f166:	2b00      	cmp	r3, #0
 800f168:	d17d      	bne.n	800f266 <_strtod_l+0x8de>
 800f16a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f16e:	0d1b      	lsrs	r3, r3, #20
 800f170:	051b      	lsls	r3, r3, #20
 800f172:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f176:	d976      	bls.n	800f266 <_strtod_l+0x8de>
 800f178:	696b      	ldr	r3, [r5, #20]
 800f17a:	b913      	cbnz	r3, 800f182 <_strtod_l+0x7fa>
 800f17c:	692b      	ldr	r3, [r5, #16]
 800f17e:	2b01      	cmp	r3, #1
 800f180:	dd71      	ble.n	800f266 <_strtod_l+0x8de>
 800f182:	4629      	mov	r1, r5
 800f184:	2201      	movs	r2, #1
 800f186:	4620      	mov	r0, r4
 800f188:	f001 fefe 	bl	8010f88 <__lshift>
 800f18c:	4631      	mov	r1, r6
 800f18e:	4605      	mov	r5, r0
 800f190:	f001 ff6a 	bl	8011068 <__mcmp>
 800f194:	2800      	cmp	r0, #0
 800f196:	dd66      	ble.n	800f266 <_strtod_l+0x8de>
 800f198:	9904      	ldr	r1, [sp, #16]
 800f19a:	4a53      	ldr	r2, [pc, #332]	; (800f2e8 <_strtod_l+0x960>)
 800f19c:	465b      	mov	r3, fp
 800f19e:	2900      	cmp	r1, #0
 800f1a0:	f000 8081 	beq.w	800f2a6 <_strtod_l+0x91e>
 800f1a4:	ea02 010b 	and.w	r1, r2, fp
 800f1a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f1ac:	dc7b      	bgt.n	800f2a6 <_strtod_l+0x91e>
 800f1ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f1b2:	f77f aea9 	ble.w	800ef08 <_strtod_l+0x580>
 800f1b6:	4b4d      	ldr	r3, [pc, #308]	; (800f2ec <_strtod_l+0x964>)
 800f1b8:	4650      	mov	r0, sl
 800f1ba:	4659      	mov	r1, fp
 800f1bc:	2200      	movs	r2, #0
 800f1be:	f7f1 f9f3 	bl	80005a8 <__aeabi_dmul>
 800f1c2:	460b      	mov	r3, r1
 800f1c4:	4303      	orrs	r3, r0
 800f1c6:	bf08      	it	eq
 800f1c8:	2322      	moveq	r3, #34	; 0x22
 800f1ca:	4682      	mov	sl, r0
 800f1cc:	468b      	mov	fp, r1
 800f1ce:	bf08      	it	eq
 800f1d0:	6023      	streq	r3, [r4, #0]
 800f1d2:	e62b      	b.n	800ee2c <_strtod_l+0x4a4>
 800f1d4:	f04f 32ff 	mov.w	r2, #4294967295
 800f1d8:	fa02 f303 	lsl.w	r3, r2, r3
 800f1dc:	ea03 0a0a 	and.w	sl, r3, sl
 800f1e0:	e6e3      	b.n	800efaa <_strtod_l+0x622>
 800f1e2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800f1e6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800f1ea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800f1ee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800f1f2:	fa01 f308 	lsl.w	r3, r1, r8
 800f1f6:	9308      	str	r3, [sp, #32]
 800f1f8:	910d      	str	r1, [sp, #52]	; 0x34
 800f1fa:	e746      	b.n	800f08a <_strtod_l+0x702>
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	9308      	str	r3, [sp, #32]
 800f200:	2301      	movs	r3, #1
 800f202:	930d      	str	r3, [sp, #52]	; 0x34
 800f204:	e741      	b.n	800f08a <_strtod_l+0x702>
 800f206:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f208:	4642      	mov	r2, r8
 800f20a:	4620      	mov	r0, r4
 800f20c:	f001 febc 	bl	8010f88 <__lshift>
 800f210:	9018      	str	r0, [sp, #96]	; 0x60
 800f212:	2800      	cmp	r0, #0
 800f214:	f47f af6b 	bne.w	800f0ee <_strtod_l+0x766>
 800f218:	e5fe      	b.n	800ee18 <_strtod_l+0x490>
 800f21a:	465f      	mov	r7, fp
 800f21c:	d16e      	bne.n	800f2fc <_strtod_l+0x974>
 800f21e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f220:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f224:	b342      	cbz	r2, 800f278 <_strtod_l+0x8f0>
 800f226:	4a32      	ldr	r2, [pc, #200]	; (800f2f0 <_strtod_l+0x968>)
 800f228:	4293      	cmp	r3, r2
 800f22a:	d128      	bne.n	800f27e <_strtod_l+0x8f6>
 800f22c:	9b04      	ldr	r3, [sp, #16]
 800f22e:	4651      	mov	r1, sl
 800f230:	b1eb      	cbz	r3, 800f26e <_strtod_l+0x8e6>
 800f232:	4b2d      	ldr	r3, [pc, #180]	; (800f2e8 <_strtod_l+0x960>)
 800f234:	403b      	ands	r3, r7
 800f236:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f23a:	f04f 32ff 	mov.w	r2, #4294967295
 800f23e:	d819      	bhi.n	800f274 <_strtod_l+0x8ec>
 800f240:	0d1b      	lsrs	r3, r3, #20
 800f242:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f246:	fa02 f303 	lsl.w	r3, r2, r3
 800f24a:	4299      	cmp	r1, r3
 800f24c:	d117      	bne.n	800f27e <_strtod_l+0x8f6>
 800f24e:	4b29      	ldr	r3, [pc, #164]	; (800f2f4 <_strtod_l+0x96c>)
 800f250:	429f      	cmp	r7, r3
 800f252:	d102      	bne.n	800f25a <_strtod_l+0x8d2>
 800f254:	3101      	adds	r1, #1
 800f256:	f43f addf 	beq.w	800ee18 <_strtod_l+0x490>
 800f25a:	4b23      	ldr	r3, [pc, #140]	; (800f2e8 <_strtod_l+0x960>)
 800f25c:	403b      	ands	r3, r7
 800f25e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f262:	f04f 0a00 	mov.w	sl, #0
 800f266:	9b04      	ldr	r3, [sp, #16]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d1a4      	bne.n	800f1b6 <_strtod_l+0x82e>
 800f26c:	e5de      	b.n	800ee2c <_strtod_l+0x4a4>
 800f26e:	f04f 33ff 	mov.w	r3, #4294967295
 800f272:	e7ea      	b.n	800f24a <_strtod_l+0x8c2>
 800f274:	4613      	mov	r3, r2
 800f276:	e7e8      	b.n	800f24a <_strtod_l+0x8c2>
 800f278:	ea53 030a 	orrs.w	r3, r3, sl
 800f27c:	d08c      	beq.n	800f198 <_strtod_l+0x810>
 800f27e:	9b08      	ldr	r3, [sp, #32]
 800f280:	b1db      	cbz	r3, 800f2ba <_strtod_l+0x932>
 800f282:	423b      	tst	r3, r7
 800f284:	d0ef      	beq.n	800f266 <_strtod_l+0x8de>
 800f286:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f288:	9a04      	ldr	r2, [sp, #16]
 800f28a:	4650      	mov	r0, sl
 800f28c:	4659      	mov	r1, fp
 800f28e:	b1c3      	cbz	r3, 800f2c2 <_strtod_l+0x93a>
 800f290:	f7ff fb5e 	bl	800e950 <sulp>
 800f294:	4602      	mov	r2, r0
 800f296:	460b      	mov	r3, r1
 800f298:	ec51 0b18 	vmov	r0, r1, d8
 800f29c:	f7f0 ffce 	bl	800023c <__adddf3>
 800f2a0:	4682      	mov	sl, r0
 800f2a2:	468b      	mov	fp, r1
 800f2a4:	e7df      	b.n	800f266 <_strtod_l+0x8de>
 800f2a6:	4013      	ands	r3, r2
 800f2a8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f2ac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f2b0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f2b4:	f04f 3aff 	mov.w	sl, #4294967295
 800f2b8:	e7d5      	b.n	800f266 <_strtod_l+0x8de>
 800f2ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f2bc:	ea13 0f0a 	tst.w	r3, sl
 800f2c0:	e7e0      	b.n	800f284 <_strtod_l+0x8fc>
 800f2c2:	f7ff fb45 	bl	800e950 <sulp>
 800f2c6:	4602      	mov	r2, r0
 800f2c8:	460b      	mov	r3, r1
 800f2ca:	ec51 0b18 	vmov	r0, r1, d8
 800f2ce:	f7f0 ffb3 	bl	8000238 <__aeabi_dsub>
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	4682      	mov	sl, r0
 800f2d8:	468b      	mov	fp, r1
 800f2da:	f7f1 fbcd 	bl	8000a78 <__aeabi_dcmpeq>
 800f2de:	2800      	cmp	r0, #0
 800f2e0:	d0c1      	beq.n	800f266 <_strtod_l+0x8de>
 800f2e2:	e611      	b.n	800ef08 <_strtod_l+0x580>
 800f2e4:	fffffc02 	.word	0xfffffc02
 800f2e8:	7ff00000 	.word	0x7ff00000
 800f2ec:	39500000 	.word	0x39500000
 800f2f0:	000fffff 	.word	0x000fffff
 800f2f4:	7fefffff 	.word	0x7fefffff
 800f2f8:	08012718 	.word	0x08012718
 800f2fc:	4631      	mov	r1, r6
 800f2fe:	4628      	mov	r0, r5
 800f300:	f002 f830 	bl	8011364 <__ratio>
 800f304:	ec59 8b10 	vmov	r8, r9, d0
 800f308:	ee10 0a10 	vmov	r0, s0
 800f30c:	2200      	movs	r2, #0
 800f30e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f312:	4649      	mov	r1, r9
 800f314:	f7f1 fbc4 	bl	8000aa0 <__aeabi_dcmple>
 800f318:	2800      	cmp	r0, #0
 800f31a:	d07a      	beq.n	800f412 <_strtod_l+0xa8a>
 800f31c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d04a      	beq.n	800f3b8 <_strtod_l+0xa30>
 800f322:	4b95      	ldr	r3, [pc, #596]	; (800f578 <_strtod_l+0xbf0>)
 800f324:	2200      	movs	r2, #0
 800f326:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f32a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f578 <_strtod_l+0xbf0>
 800f32e:	f04f 0800 	mov.w	r8, #0
 800f332:	4b92      	ldr	r3, [pc, #584]	; (800f57c <_strtod_l+0xbf4>)
 800f334:	403b      	ands	r3, r7
 800f336:	930d      	str	r3, [sp, #52]	; 0x34
 800f338:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f33a:	4b91      	ldr	r3, [pc, #580]	; (800f580 <_strtod_l+0xbf8>)
 800f33c:	429a      	cmp	r2, r3
 800f33e:	f040 80b0 	bne.w	800f4a2 <_strtod_l+0xb1a>
 800f342:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f346:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800f34a:	ec4b ab10 	vmov	d0, sl, fp
 800f34e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f352:	f001 ff2f 	bl	80111b4 <__ulp>
 800f356:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f35a:	ec53 2b10 	vmov	r2, r3, d0
 800f35e:	f7f1 f923 	bl	80005a8 <__aeabi_dmul>
 800f362:	4652      	mov	r2, sl
 800f364:	465b      	mov	r3, fp
 800f366:	f7f0 ff69 	bl	800023c <__adddf3>
 800f36a:	460b      	mov	r3, r1
 800f36c:	4983      	ldr	r1, [pc, #524]	; (800f57c <_strtod_l+0xbf4>)
 800f36e:	4a85      	ldr	r2, [pc, #532]	; (800f584 <_strtod_l+0xbfc>)
 800f370:	4019      	ands	r1, r3
 800f372:	4291      	cmp	r1, r2
 800f374:	4682      	mov	sl, r0
 800f376:	d960      	bls.n	800f43a <_strtod_l+0xab2>
 800f378:	ee18 3a90 	vmov	r3, s17
 800f37c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f380:	4293      	cmp	r3, r2
 800f382:	d104      	bne.n	800f38e <_strtod_l+0xa06>
 800f384:	ee18 3a10 	vmov	r3, s16
 800f388:	3301      	adds	r3, #1
 800f38a:	f43f ad45 	beq.w	800ee18 <_strtod_l+0x490>
 800f38e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800f590 <_strtod_l+0xc08>
 800f392:	f04f 3aff 	mov.w	sl, #4294967295
 800f396:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f398:	4620      	mov	r0, r4
 800f39a:	f001 fbd9 	bl	8010b50 <_Bfree>
 800f39e:	9905      	ldr	r1, [sp, #20]
 800f3a0:	4620      	mov	r0, r4
 800f3a2:	f001 fbd5 	bl	8010b50 <_Bfree>
 800f3a6:	4631      	mov	r1, r6
 800f3a8:	4620      	mov	r0, r4
 800f3aa:	f001 fbd1 	bl	8010b50 <_Bfree>
 800f3ae:	4629      	mov	r1, r5
 800f3b0:	4620      	mov	r0, r4
 800f3b2:	f001 fbcd 	bl	8010b50 <_Bfree>
 800f3b6:	e61a      	b.n	800efee <_strtod_l+0x666>
 800f3b8:	f1ba 0f00 	cmp.w	sl, #0
 800f3bc:	d11b      	bne.n	800f3f6 <_strtod_l+0xa6e>
 800f3be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f3c2:	b9f3      	cbnz	r3, 800f402 <_strtod_l+0xa7a>
 800f3c4:	4b6c      	ldr	r3, [pc, #432]	; (800f578 <_strtod_l+0xbf0>)
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	4640      	mov	r0, r8
 800f3ca:	4649      	mov	r1, r9
 800f3cc:	f7f1 fb5e 	bl	8000a8c <__aeabi_dcmplt>
 800f3d0:	b9d0      	cbnz	r0, 800f408 <_strtod_l+0xa80>
 800f3d2:	4640      	mov	r0, r8
 800f3d4:	4649      	mov	r1, r9
 800f3d6:	4b6c      	ldr	r3, [pc, #432]	; (800f588 <_strtod_l+0xc00>)
 800f3d8:	2200      	movs	r2, #0
 800f3da:	f7f1 f8e5 	bl	80005a8 <__aeabi_dmul>
 800f3de:	4680      	mov	r8, r0
 800f3e0:	4689      	mov	r9, r1
 800f3e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f3e6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800f3ea:	9315      	str	r3, [sp, #84]	; 0x54
 800f3ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f3f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f3f4:	e79d      	b.n	800f332 <_strtod_l+0x9aa>
 800f3f6:	f1ba 0f01 	cmp.w	sl, #1
 800f3fa:	d102      	bne.n	800f402 <_strtod_l+0xa7a>
 800f3fc:	2f00      	cmp	r7, #0
 800f3fe:	f43f ad83 	beq.w	800ef08 <_strtod_l+0x580>
 800f402:	4b62      	ldr	r3, [pc, #392]	; (800f58c <_strtod_l+0xc04>)
 800f404:	2200      	movs	r2, #0
 800f406:	e78e      	b.n	800f326 <_strtod_l+0x99e>
 800f408:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800f588 <_strtod_l+0xc00>
 800f40c:	f04f 0800 	mov.w	r8, #0
 800f410:	e7e7      	b.n	800f3e2 <_strtod_l+0xa5a>
 800f412:	4b5d      	ldr	r3, [pc, #372]	; (800f588 <_strtod_l+0xc00>)
 800f414:	4640      	mov	r0, r8
 800f416:	4649      	mov	r1, r9
 800f418:	2200      	movs	r2, #0
 800f41a:	f7f1 f8c5 	bl	80005a8 <__aeabi_dmul>
 800f41e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f420:	4680      	mov	r8, r0
 800f422:	4689      	mov	r9, r1
 800f424:	b933      	cbnz	r3, 800f434 <_strtod_l+0xaac>
 800f426:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f42a:	900e      	str	r0, [sp, #56]	; 0x38
 800f42c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f42e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800f432:	e7dd      	b.n	800f3f0 <_strtod_l+0xa68>
 800f434:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800f438:	e7f9      	b.n	800f42e <_strtod_l+0xaa6>
 800f43a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f43e:	9b04      	ldr	r3, [sp, #16]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d1a8      	bne.n	800f396 <_strtod_l+0xa0e>
 800f444:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f448:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f44a:	0d1b      	lsrs	r3, r3, #20
 800f44c:	051b      	lsls	r3, r3, #20
 800f44e:	429a      	cmp	r2, r3
 800f450:	d1a1      	bne.n	800f396 <_strtod_l+0xa0e>
 800f452:	4640      	mov	r0, r8
 800f454:	4649      	mov	r1, r9
 800f456:	f7f1 fbef 	bl	8000c38 <__aeabi_d2lz>
 800f45a:	f7f1 f877 	bl	800054c <__aeabi_l2d>
 800f45e:	4602      	mov	r2, r0
 800f460:	460b      	mov	r3, r1
 800f462:	4640      	mov	r0, r8
 800f464:	4649      	mov	r1, r9
 800f466:	f7f0 fee7 	bl	8000238 <__aeabi_dsub>
 800f46a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f46c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f470:	ea43 030a 	orr.w	r3, r3, sl
 800f474:	4313      	orrs	r3, r2
 800f476:	4680      	mov	r8, r0
 800f478:	4689      	mov	r9, r1
 800f47a:	d055      	beq.n	800f528 <_strtod_l+0xba0>
 800f47c:	a336      	add	r3, pc, #216	; (adr r3, 800f558 <_strtod_l+0xbd0>)
 800f47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f482:	f7f1 fb03 	bl	8000a8c <__aeabi_dcmplt>
 800f486:	2800      	cmp	r0, #0
 800f488:	f47f acd0 	bne.w	800ee2c <_strtod_l+0x4a4>
 800f48c:	a334      	add	r3, pc, #208	; (adr r3, 800f560 <_strtod_l+0xbd8>)
 800f48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f492:	4640      	mov	r0, r8
 800f494:	4649      	mov	r1, r9
 800f496:	f7f1 fb17 	bl	8000ac8 <__aeabi_dcmpgt>
 800f49a:	2800      	cmp	r0, #0
 800f49c:	f43f af7b 	beq.w	800f396 <_strtod_l+0xa0e>
 800f4a0:	e4c4      	b.n	800ee2c <_strtod_l+0x4a4>
 800f4a2:	9b04      	ldr	r3, [sp, #16]
 800f4a4:	b333      	cbz	r3, 800f4f4 <_strtod_l+0xb6c>
 800f4a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f4a8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f4ac:	d822      	bhi.n	800f4f4 <_strtod_l+0xb6c>
 800f4ae:	a32e      	add	r3, pc, #184	; (adr r3, 800f568 <_strtod_l+0xbe0>)
 800f4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b4:	4640      	mov	r0, r8
 800f4b6:	4649      	mov	r1, r9
 800f4b8:	f7f1 faf2 	bl	8000aa0 <__aeabi_dcmple>
 800f4bc:	b1a0      	cbz	r0, 800f4e8 <_strtod_l+0xb60>
 800f4be:	4649      	mov	r1, r9
 800f4c0:	4640      	mov	r0, r8
 800f4c2:	f7f1 fb49 	bl	8000b58 <__aeabi_d2uiz>
 800f4c6:	2801      	cmp	r0, #1
 800f4c8:	bf38      	it	cc
 800f4ca:	2001      	movcc	r0, #1
 800f4cc:	f7f0 fff2 	bl	80004b4 <__aeabi_ui2d>
 800f4d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4d2:	4680      	mov	r8, r0
 800f4d4:	4689      	mov	r9, r1
 800f4d6:	bb23      	cbnz	r3, 800f522 <_strtod_l+0xb9a>
 800f4d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f4dc:	9010      	str	r0, [sp, #64]	; 0x40
 800f4de:	9311      	str	r3, [sp, #68]	; 0x44
 800f4e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f4e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f4e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f4ec:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f4f0:	1a9b      	subs	r3, r3, r2
 800f4f2:	9309      	str	r3, [sp, #36]	; 0x24
 800f4f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f4f8:	eeb0 0a48 	vmov.f32	s0, s16
 800f4fc:	eef0 0a68 	vmov.f32	s1, s17
 800f500:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f504:	f001 fe56 	bl	80111b4 <__ulp>
 800f508:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f50c:	ec53 2b10 	vmov	r2, r3, d0
 800f510:	f7f1 f84a 	bl	80005a8 <__aeabi_dmul>
 800f514:	ec53 2b18 	vmov	r2, r3, d8
 800f518:	f7f0 fe90 	bl	800023c <__adddf3>
 800f51c:	4682      	mov	sl, r0
 800f51e:	468b      	mov	fp, r1
 800f520:	e78d      	b.n	800f43e <_strtod_l+0xab6>
 800f522:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800f526:	e7db      	b.n	800f4e0 <_strtod_l+0xb58>
 800f528:	a311      	add	r3, pc, #68	; (adr r3, 800f570 <_strtod_l+0xbe8>)
 800f52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f52e:	f7f1 faad 	bl	8000a8c <__aeabi_dcmplt>
 800f532:	e7b2      	b.n	800f49a <_strtod_l+0xb12>
 800f534:	2300      	movs	r3, #0
 800f536:	930a      	str	r3, [sp, #40]	; 0x28
 800f538:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f53a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f53c:	6013      	str	r3, [r2, #0]
 800f53e:	f7ff ba6b 	b.w	800ea18 <_strtod_l+0x90>
 800f542:	2a65      	cmp	r2, #101	; 0x65
 800f544:	f43f ab5f 	beq.w	800ec06 <_strtod_l+0x27e>
 800f548:	2a45      	cmp	r2, #69	; 0x45
 800f54a:	f43f ab5c 	beq.w	800ec06 <_strtod_l+0x27e>
 800f54e:	2301      	movs	r3, #1
 800f550:	f7ff bb94 	b.w	800ec7c <_strtod_l+0x2f4>
 800f554:	f3af 8000 	nop.w
 800f558:	94a03595 	.word	0x94a03595
 800f55c:	3fdfffff 	.word	0x3fdfffff
 800f560:	35afe535 	.word	0x35afe535
 800f564:	3fe00000 	.word	0x3fe00000
 800f568:	ffc00000 	.word	0xffc00000
 800f56c:	41dfffff 	.word	0x41dfffff
 800f570:	94a03595 	.word	0x94a03595
 800f574:	3fcfffff 	.word	0x3fcfffff
 800f578:	3ff00000 	.word	0x3ff00000
 800f57c:	7ff00000 	.word	0x7ff00000
 800f580:	7fe00000 	.word	0x7fe00000
 800f584:	7c9fffff 	.word	0x7c9fffff
 800f588:	3fe00000 	.word	0x3fe00000
 800f58c:	bff00000 	.word	0xbff00000
 800f590:	7fefffff 	.word	0x7fefffff

0800f594 <_strtod_r>:
 800f594:	4b01      	ldr	r3, [pc, #4]	; (800f59c <_strtod_r+0x8>)
 800f596:	f7ff b9f7 	b.w	800e988 <_strtod_l>
 800f59a:	bf00      	nop
 800f59c:	20000178 	.word	0x20000178

0800f5a0 <_strtol_l.constprop.0>:
 800f5a0:	2b01      	cmp	r3, #1
 800f5a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5a6:	d001      	beq.n	800f5ac <_strtol_l.constprop.0+0xc>
 800f5a8:	2b24      	cmp	r3, #36	; 0x24
 800f5aa:	d906      	bls.n	800f5ba <_strtol_l.constprop.0+0x1a>
 800f5ac:	f7fe faf0 	bl	800db90 <__errno>
 800f5b0:	2316      	movs	r3, #22
 800f5b2:	6003      	str	r3, [r0, #0]
 800f5b4:	2000      	movs	r0, #0
 800f5b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f6a0 <_strtol_l.constprop.0+0x100>
 800f5be:	460d      	mov	r5, r1
 800f5c0:	462e      	mov	r6, r5
 800f5c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f5c6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800f5ca:	f017 0708 	ands.w	r7, r7, #8
 800f5ce:	d1f7      	bne.n	800f5c0 <_strtol_l.constprop.0+0x20>
 800f5d0:	2c2d      	cmp	r4, #45	; 0x2d
 800f5d2:	d132      	bne.n	800f63a <_strtol_l.constprop.0+0x9a>
 800f5d4:	782c      	ldrb	r4, [r5, #0]
 800f5d6:	2701      	movs	r7, #1
 800f5d8:	1cb5      	adds	r5, r6, #2
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d05b      	beq.n	800f696 <_strtol_l.constprop.0+0xf6>
 800f5de:	2b10      	cmp	r3, #16
 800f5e0:	d109      	bne.n	800f5f6 <_strtol_l.constprop.0+0x56>
 800f5e2:	2c30      	cmp	r4, #48	; 0x30
 800f5e4:	d107      	bne.n	800f5f6 <_strtol_l.constprop.0+0x56>
 800f5e6:	782c      	ldrb	r4, [r5, #0]
 800f5e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f5ec:	2c58      	cmp	r4, #88	; 0x58
 800f5ee:	d14d      	bne.n	800f68c <_strtol_l.constprop.0+0xec>
 800f5f0:	786c      	ldrb	r4, [r5, #1]
 800f5f2:	2310      	movs	r3, #16
 800f5f4:	3502      	adds	r5, #2
 800f5f6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f5fa:	f108 38ff 	add.w	r8, r8, #4294967295
 800f5fe:	f04f 0c00 	mov.w	ip, #0
 800f602:	fbb8 f9f3 	udiv	r9, r8, r3
 800f606:	4666      	mov	r6, ip
 800f608:	fb03 8a19 	mls	sl, r3, r9, r8
 800f60c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800f610:	f1be 0f09 	cmp.w	lr, #9
 800f614:	d816      	bhi.n	800f644 <_strtol_l.constprop.0+0xa4>
 800f616:	4674      	mov	r4, lr
 800f618:	42a3      	cmp	r3, r4
 800f61a:	dd24      	ble.n	800f666 <_strtol_l.constprop.0+0xc6>
 800f61c:	f1bc 0f00 	cmp.w	ip, #0
 800f620:	db1e      	blt.n	800f660 <_strtol_l.constprop.0+0xc0>
 800f622:	45b1      	cmp	r9, r6
 800f624:	d31c      	bcc.n	800f660 <_strtol_l.constprop.0+0xc0>
 800f626:	d101      	bne.n	800f62c <_strtol_l.constprop.0+0x8c>
 800f628:	45a2      	cmp	sl, r4
 800f62a:	db19      	blt.n	800f660 <_strtol_l.constprop.0+0xc0>
 800f62c:	fb06 4603 	mla	r6, r6, r3, r4
 800f630:	f04f 0c01 	mov.w	ip, #1
 800f634:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f638:	e7e8      	b.n	800f60c <_strtol_l.constprop.0+0x6c>
 800f63a:	2c2b      	cmp	r4, #43	; 0x2b
 800f63c:	bf04      	itt	eq
 800f63e:	782c      	ldrbeq	r4, [r5, #0]
 800f640:	1cb5      	addeq	r5, r6, #2
 800f642:	e7ca      	b.n	800f5da <_strtol_l.constprop.0+0x3a>
 800f644:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800f648:	f1be 0f19 	cmp.w	lr, #25
 800f64c:	d801      	bhi.n	800f652 <_strtol_l.constprop.0+0xb2>
 800f64e:	3c37      	subs	r4, #55	; 0x37
 800f650:	e7e2      	b.n	800f618 <_strtol_l.constprop.0+0x78>
 800f652:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800f656:	f1be 0f19 	cmp.w	lr, #25
 800f65a:	d804      	bhi.n	800f666 <_strtol_l.constprop.0+0xc6>
 800f65c:	3c57      	subs	r4, #87	; 0x57
 800f65e:	e7db      	b.n	800f618 <_strtol_l.constprop.0+0x78>
 800f660:	f04f 3cff 	mov.w	ip, #4294967295
 800f664:	e7e6      	b.n	800f634 <_strtol_l.constprop.0+0x94>
 800f666:	f1bc 0f00 	cmp.w	ip, #0
 800f66a:	da05      	bge.n	800f678 <_strtol_l.constprop.0+0xd8>
 800f66c:	2322      	movs	r3, #34	; 0x22
 800f66e:	6003      	str	r3, [r0, #0]
 800f670:	4646      	mov	r6, r8
 800f672:	b942      	cbnz	r2, 800f686 <_strtol_l.constprop.0+0xe6>
 800f674:	4630      	mov	r0, r6
 800f676:	e79e      	b.n	800f5b6 <_strtol_l.constprop.0+0x16>
 800f678:	b107      	cbz	r7, 800f67c <_strtol_l.constprop.0+0xdc>
 800f67a:	4276      	negs	r6, r6
 800f67c:	2a00      	cmp	r2, #0
 800f67e:	d0f9      	beq.n	800f674 <_strtol_l.constprop.0+0xd4>
 800f680:	f1bc 0f00 	cmp.w	ip, #0
 800f684:	d000      	beq.n	800f688 <_strtol_l.constprop.0+0xe8>
 800f686:	1e69      	subs	r1, r5, #1
 800f688:	6011      	str	r1, [r2, #0]
 800f68a:	e7f3      	b.n	800f674 <_strtol_l.constprop.0+0xd4>
 800f68c:	2430      	movs	r4, #48	; 0x30
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d1b1      	bne.n	800f5f6 <_strtol_l.constprop.0+0x56>
 800f692:	2308      	movs	r3, #8
 800f694:	e7af      	b.n	800f5f6 <_strtol_l.constprop.0+0x56>
 800f696:	2c30      	cmp	r4, #48	; 0x30
 800f698:	d0a5      	beq.n	800f5e6 <_strtol_l.constprop.0+0x46>
 800f69a:	230a      	movs	r3, #10
 800f69c:	e7ab      	b.n	800f5f6 <_strtol_l.constprop.0+0x56>
 800f69e:	bf00      	nop
 800f6a0:	08012741 	.word	0x08012741

0800f6a4 <_strtol_r>:
 800f6a4:	f7ff bf7c 	b.w	800f5a0 <_strtol_l.constprop.0>

0800f6a8 <strtol>:
 800f6a8:	4613      	mov	r3, r2
 800f6aa:	460a      	mov	r2, r1
 800f6ac:	4601      	mov	r1, r0
 800f6ae:	4802      	ldr	r0, [pc, #8]	; (800f6b8 <strtol+0x10>)
 800f6b0:	6800      	ldr	r0, [r0, #0]
 800f6b2:	f7ff bf75 	b.w	800f5a0 <_strtol_l.constprop.0>
 800f6b6:	bf00      	nop
 800f6b8:	20000110 	.word	0x20000110

0800f6bc <quorem>:
 800f6bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6c0:	6903      	ldr	r3, [r0, #16]
 800f6c2:	690c      	ldr	r4, [r1, #16]
 800f6c4:	42a3      	cmp	r3, r4
 800f6c6:	4607      	mov	r7, r0
 800f6c8:	f2c0 8081 	blt.w	800f7ce <quorem+0x112>
 800f6cc:	3c01      	subs	r4, #1
 800f6ce:	f101 0814 	add.w	r8, r1, #20
 800f6d2:	f100 0514 	add.w	r5, r0, #20
 800f6d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f6da:	9301      	str	r3, [sp, #4]
 800f6dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f6e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f6e4:	3301      	adds	r3, #1
 800f6e6:	429a      	cmp	r2, r3
 800f6e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f6ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f6f0:	fbb2 f6f3 	udiv	r6, r2, r3
 800f6f4:	d331      	bcc.n	800f75a <quorem+0x9e>
 800f6f6:	f04f 0e00 	mov.w	lr, #0
 800f6fa:	4640      	mov	r0, r8
 800f6fc:	46ac      	mov	ip, r5
 800f6fe:	46f2      	mov	sl, lr
 800f700:	f850 2b04 	ldr.w	r2, [r0], #4
 800f704:	b293      	uxth	r3, r2
 800f706:	fb06 e303 	mla	r3, r6, r3, lr
 800f70a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f70e:	b29b      	uxth	r3, r3
 800f710:	ebaa 0303 	sub.w	r3, sl, r3
 800f714:	f8dc a000 	ldr.w	sl, [ip]
 800f718:	0c12      	lsrs	r2, r2, #16
 800f71a:	fa13 f38a 	uxtah	r3, r3, sl
 800f71e:	fb06 e202 	mla	r2, r6, r2, lr
 800f722:	9300      	str	r3, [sp, #0]
 800f724:	9b00      	ldr	r3, [sp, #0]
 800f726:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f72a:	b292      	uxth	r2, r2
 800f72c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f730:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f734:	f8bd 3000 	ldrh.w	r3, [sp]
 800f738:	4581      	cmp	r9, r0
 800f73a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f73e:	f84c 3b04 	str.w	r3, [ip], #4
 800f742:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f746:	d2db      	bcs.n	800f700 <quorem+0x44>
 800f748:	f855 300b 	ldr.w	r3, [r5, fp]
 800f74c:	b92b      	cbnz	r3, 800f75a <quorem+0x9e>
 800f74e:	9b01      	ldr	r3, [sp, #4]
 800f750:	3b04      	subs	r3, #4
 800f752:	429d      	cmp	r5, r3
 800f754:	461a      	mov	r2, r3
 800f756:	d32e      	bcc.n	800f7b6 <quorem+0xfa>
 800f758:	613c      	str	r4, [r7, #16]
 800f75a:	4638      	mov	r0, r7
 800f75c:	f001 fc84 	bl	8011068 <__mcmp>
 800f760:	2800      	cmp	r0, #0
 800f762:	db24      	blt.n	800f7ae <quorem+0xf2>
 800f764:	3601      	adds	r6, #1
 800f766:	4628      	mov	r0, r5
 800f768:	f04f 0c00 	mov.w	ip, #0
 800f76c:	f858 2b04 	ldr.w	r2, [r8], #4
 800f770:	f8d0 e000 	ldr.w	lr, [r0]
 800f774:	b293      	uxth	r3, r2
 800f776:	ebac 0303 	sub.w	r3, ip, r3
 800f77a:	0c12      	lsrs	r2, r2, #16
 800f77c:	fa13 f38e 	uxtah	r3, r3, lr
 800f780:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f784:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f788:	b29b      	uxth	r3, r3
 800f78a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f78e:	45c1      	cmp	r9, r8
 800f790:	f840 3b04 	str.w	r3, [r0], #4
 800f794:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f798:	d2e8      	bcs.n	800f76c <quorem+0xb0>
 800f79a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f79e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f7a2:	b922      	cbnz	r2, 800f7ae <quorem+0xf2>
 800f7a4:	3b04      	subs	r3, #4
 800f7a6:	429d      	cmp	r5, r3
 800f7a8:	461a      	mov	r2, r3
 800f7aa:	d30a      	bcc.n	800f7c2 <quorem+0x106>
 800f7ac:	613c      	str	r4, [r7, #16]
 800f7ae:	4630      	mov	r0, r6
 800f7b0:	b003      	add	sp, #12
 800f7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7b6:	6812      	ldr	r2, [r2, #0]
 800f7b8:	3b04      	subs	r3, #4
 800f7ba:	2a00      	cmp	r2, #0
 800f7bc:	d1cc      	bne.n	800f758 <quorem+0x9c>
 800f7be:	3c01      	subs	r4, #1
 800f7c0:	e7c7      	b.n	800f752 <quorem+0x96>
 800f7c2:	6812      	ldr	r2, [r2, #0]
 800f7c4:	3b04      	subs	r3, #4
 800f7c6:	2a00      	cmp	r2, #0
 800f7c8:	d1f0      	bne.n	800f7ac <quorem+0xf0>
 800f7ca:	3c01      	subs	r4, #1
 800f7cc:	e7eb      	b.n	800f7a6 <quorem+0xea>
 800f7ce:	2000      	movs	r0, #0
 800f7d0:	e7ee      	b.n	800f7b0 <quorem+0xf4>
 800f7d2:	0000      	movs	r0, r0
 800f7d4:	0000      	movs	r0, r0
	...

0800f7d8 <_dtoa_r>:
 800f7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7dc:	ed2d 8b04 	vpush	{d8-d9}
 800f7e0:	ec57 6b10 	vmov	r6, r7, d0
 800f7e4:	b093      	sub	sp, #76	; 0x4c
 800f7e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f7e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f7ec:	9106      	str	r1, [sp, #24]
 800f7ee:	ee10 aa10 	vmov	sl, s0
 800f7f2:	4604      	mov	r4, r0
 800f7f4:	9209      	str	r2, [sp, #36]	; 0x24
 800f7f6:	930c      	str	r3, [sp, #48]	; 0x30
 800f7f8:	46bb      	mov	fp, r7
 800f7fa:	b975      	cbnz	r5, 800f81a <_dtoa_r+0x42>
 800f7fc:	2010      	movs	r0, #16
 800f7fe:	f001 f94d 	bl	8010a9c <malloc>
 800f802:	4602      	mov	r2, r0
 800f804:	6260      	str	r0, [r4, #36]	; 0x24
 800f806:	b920      	cbnz	r0, 800f812 <_dtoa_r+0x3a>
 800f808:	4ba7      	ldr	r3, [pc, #668]	; (800faa8 <_dtoa_r+0x2d0>)
 800f80a:	21ea      	movs	r1, #234	; 0xea
 800f80c:	48a7      	ldr	r0, [pc, #668]	; (800faac <_dtoa_r+0x2d4>)
 800f80e:	f002 f8ad 	bl	801196c <__assert_func>
 800f812:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f816:	6005      	str	r5, [r0, #0]
 800f818:	60c5      	str	r5, [r0, #12]
 800f81a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f81c:	6819      	ldr	r1, [r3, #0]
 800f81e:	b151      	cbz	r1, 800f836 <_dtoa_r+0x5e>
 800f820:	685a      	ldr	r2, [r3, #4]
 800f822:	604a      	str	r2, [r1, #4]
 800f824:	2301      	movs	r3, #1
 800f826:	4093      	lsls	r3, r2
 800f828:	608b      	str	r3, [r1, #8]
 800f82a:	4620      	mov	r0, r4
 800f82c:	f001 f990 	bl	8010b50 <_Bfree>
 800f830:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f832:	2200      	movs	r2, #0
 800f834:	601a      	str	r2, [r3, #0]
 800f836:	1e3b      	subs	r3, r7, #0
 800f838:	bfaa      	itet	ge
 800f83a:	2300      	movge	r3, #0
 800f83c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800f840:	f8c8 3000 	strge.w	r3, [r8]
 800f844:	4b9a      	ldr	r3, [pc, #616]	; (800fab0 <_dtoa_r+0x2d8>)
 800f846:	bfbc      	itt	lt
 800f848:	2201      	movlt	r2, #1
 800f84a:	f8c8 2000 	strlt.w	r2, [r8]
 800f84e:	ea33 030b 	bics.w	r3, r3, fp
 800f852:	d11b      	bne.n	800f88c <_dtoa_r+0xb4>
 800f854:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f856:	f242 730f 	movw	r3, #9999	; 0x270f
 800f85a:	6013      	str	r3, [r2, #0]
 800f85c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f860:	4333      	orrs	r3, r6
 800f862:	f000 8592 	beq.w	801038a <_dtoa_r+0xbb2>
 800f866:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f868:	b963      	cbnz	r3, 800f884 <_dtoa_r+0xac>
 800f86a:	4b92      	ldr	r3, [pc, #584]	; (800fab4 <_dtoa_r+0x2dc>)
 800f86c:	e022      	b.n	800f8b4 <_dtoa_r+0xdc>
 800f86e:	4b92      	ldr	r3, [pc, #584]	; (800fab8 <_dtoa_r+0x2e0>)
 800f870:	9301      	str	r3, [sp, #4]
 800f872:	3308      	adds	r3, #8
 800f874:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f876:	6013      	str	r3, [r2, #0]
 800f878:	9801      	ldr	r0, [sp, #4]
 800f87a:	b013      	add	sp, #76	; 0x4c
 800f87c:	ecbd 8b04 	vpop	{d8-d9}
 800f880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f884:	4b8b      	ldr	r3, [pc, #556]	; (800fab4 <_dtoa_r+0x2dc>)
 800f886:	9301      	str	r3, [sp, #4]
 800f888:	3303      	adds	r3, #3
 800f88a:	e7f3      	b.n	800f874 <_dtoa_r+0x9c>
 800f88c:	2200      	movs	r2, #0
 800f88e:	2300      	movs	r3, #0
 800f890:	4650      	mov	r0, sl
 800f892:	4659      	mov	r1, fp
 800f894:	f7f1 f8f0 	bl	8000a78 <__aeabi_dcmpeq>
 800f898:	ec4b ab19 	vmov	d9, sl, fp
 800f89c:	4680      	mov	r8, r0
 800f89e:	b158      	cbz	r0, 800f8b8 <_dtoa_r+0xe0>
 800f8a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f8a2:	2301      	movs	r3, #1
 800f8a4:	6013      	str	r3, [r2, #0]
 800f8a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	f000 856b 	beq.w	8010384 <_dtoa_r+0xbac>
 800f8ae:	4883      	ldr	r0, [pc, #524]	; (800fabc <_dtoa_r+0x2e4>)
 800f8b0:	6018      	str	r0, [r3, #0]
 800f8b2:	1e43      	subs	r3, r0, #1
 800f8b4:	9301      	str	r3, [sp, #4]
 800f8b6:	e7df      	b.n	800f878 <_dtoa_r+0xa0>
 800f8b8:	ec4b ab10 	vmov	d0, sl, fp
 800f8bc:	aa10      	add	r2, sp, #64	; 0x40
 800f8be:	a911      	add	r1, sp, #68	; 0x44
 800f8c0:	4620      	mov	r0, r4
 800f8c2:	f001 fcf3 	bl	80112ac <__d2b>
 800f8c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800f8ca:	ee08 0a10 	vmov	s16, r0
 800f8ce:	2d00      	cmp	r5, #0
 800f8d0:	f000 8084 	beq.w	800f9dc <_dtoa_r+0x204>
 800f8d4:	ee19 3a90 	vmov	r3, s19
 800f8d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f8dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f8e0:	4656      	mov	r6, sl
 800f8e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f8e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f8ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f8ee:	4b74      	ldr	r3, [pc, #464]	; (800fac0 <_dtoa_r+0x2e8>)
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	4630      	mov	r0, r6
 800f8f4:	4639      	mov	r1, r7
 800f8f6:	f7f0 fc9f 	bl	8000238 <__aeabi_dsub>
 800f8fa:	a365      	add	r3, pc, #404	; (adr r3, 800fa90 <_dtoa_r+0x2b8>)
 800f8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f900:	f7f0 fe52 	bl	80005a8 <__aeabi_dmul>
 800f904:	a364      	add	r3, pc, #400	; (adr r3, 800fa98 <_dtoa_r+0x2c0>)
 800f906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f90a:	f7f0 fc97 	bl	800023c <__adddf3>
 800f90e:	4606      	mov	r6, r0
 800f910:	4628      	mov	r0, r5
 800f912:	460f      	mov	r7, r1
 800f914:	f7f0 fdde 	bl	80004d4 <__aeabi_i2d>
 800f918:	a361      	add	r3, pc, #388	; (adr r3, 800faa0 <_dtoa_r+0x2c8>)
 800f91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f91e:	f7f0 fe43 	bl	80005a8 <__aeabi_dmul>
 800f922:	4602      	mov	r2, r0
 800f924:	460b      	mov	r3, r1
 800f926:	4630      	mov	r0, r6
 800f928:	4639      	mov	r1, r7
 800f92a:	f7f0 fc87 	bl	800023c <__adddf3>
 800f92e:	4606      	mov	r6, r0
 800f930:	460f      	mov	r7, r1
 800f932:	f7f1 f8e9 	bl	8000b08 <__aeabi_d2iz>
 800f936:	2200      	movs	r2, #0
 800f938:	9000      	str	r0, [sp, #0]
 800f93a:	2300      	movs	r3, #0
 800f93c:	4630      	mov	r0, r6
 800f93e:	4639      	mov	r1, r7
 800f940:	f7f1 f8a4 	bl	8000a8c <__aeabi_dcmplt>
 800f944:	b150      	cbz	r0, 800f95c <_dtoa_r+0x184>
 800f946:	9800      	ldr	r0, [sp, #0]
 800f948:	f7f0 fdc4 	bl	80004d4 <__aeabi_i2d>
 800f94c:	4632      	mov	r2, r6
 800f94e:	463b      	mov	r3, r7
 800f950:	f7f1 f892 	bl	8000a78 <__aeabi_dcmpeq>
 800f954:	b910      	cbnz	r0, 800f95c <_dtoa_r+0x184>
 800f956:	9b00      	ldr	r3, [sp, #0]
 800f958:	3b01      	subs	r3, #1
 800f95a:	9300      	str	r3, [sp, #0]
 800f95c:	9b00      	ldr	r3, [sp, #0]
 800f95e:	2b16      	cmp	r3, #22
 800f960:	d85a      	bhi.n	800fa18 <_dtoa_r+0x240>
 800f962:	9a00      	ldr	r2, [sp, #0]
 800f964:	4b57      	ldr	r3, [pc, #348]	; (800fac4 <_dtoa_r+0x2ec>)
 800f966:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f96e:	ec51 0b19 	vmov	r0, r1, d9
 800f972:	f7f1 f88b 	bl	8000a8c <__aeabi_dcmplt>
 800f976:	2800      	cmp	r0, #0
 800f978:	d050      	beq.n	800fa1c <_dtoa_r+0x244>
 800f97a:	9b00      	ldr	r3, [sp, #0]
 800f97c:	3b01      	subs	r3, #1
 800f97e:	9300      	str	r3, [sp, #0]
 800f980:	2300      	movs	r3, #0
 800f982:	930b      	str	r3, [sp, #44]	; 0x2c
 800f984:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f986:	1b5d      	subs	r5, r3, r5
 800f988:	1e6b      	subs	r3, r5, #1
 800f98a:	9305      	str	r3, [sp, #20]
 800f98c:	bf45      	ittet	mi
 800f98e:	f1c5 0301 	rsbmi	r3, r5, #1
 800f992:	9304      	strmi	r3, [sp, #16]
 800f994:	2300      	movpl	r3, #0
 800f996:	2300      	movmi	r3, #0
 800f998:	bf4c      	ite	mi
 800f99a:	9305      	strmi	r3, [sp, #20]
 800f99c:	9304      	strpl	r3, [sp, #16]
 800f99e:	9b00      	ldr	r3, [sp, #0]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	db3d      	blt.n	800fa20 <_dtoa_r+0x248>
 800f9a4:	9b05      	ldr	r3, [sp, #20]
 800f9a6:	9a00      	ldr	r2, [sp, #0]
 800f9a8:	920a      	str	r2, [sp, #40]	; 0x28
 800f9aa:	4413      	add	r3, r2
 800f9ac:	9305      	str	r3, [sp, #20]
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	9307      	str	r3, [sp, #28]
 800f9b2:	9b06      	ldr	r3, [sp, #24]
 800f9b4:	2b09      	cmp	r3, #9
 800f9b6:	f200 8089 	bhi.w	800facc <_dtoa_r+0x2f4>
 800f9ba:	2b05      	cmp	r3, #5
 800f9bc:	bfc4      	itt	gt
 800f9be:	3b04      	subgt	r3, #4
 800f9c0:	9306      	strgt	r3, [sp, #24]
 800f9c2:	9b06      	ldr	r3, [sp, #24]
 800f9c4:	f1a3 0302 	sub.w	r3, r3, #2
 800f9c8:	bfcc      	ite	gt
 800f9ca:	2500      	movgt	r5, #0
 800f9cc:	2501      	movle	r5, #1
 800f9ce:	2b03      	cmp	r3, #3
 800f9d0:	f200 8087 	bhi.w	800fae2 <_dtoa_r+0x30a>
 800f9d4:	e8df f003 	tbb	[pc, r3]
 800f9d8:	59383a2d 	.word	0x59383a2d
 800f9dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f9e0:	441d      	add	r5, r3
 800f9e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f9e6:	2b20      	cmp	r3, #32
 800f9e8:	bfc1      	itttt	gt
 800f9ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f9ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f9f2:	fa0b f303 	lslgt.w	r3, fp, r3
 800f9f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f9fa:	bfda      	itte	le
 800f9fc:	f1c3 0320 	rsble	r3, r3, #32
 800fa00:	fa06 f003 	lslle.w	r0, r6, r3
 800fa04:	4318      	orrgt	r0, r3
 800fa06:	f7f0 fd55 	bl	80004b4 <__aeabi_ui2d>
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	4606      	mov	r6, r0
 800fa0e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fa12:	3d01      	subs	r5, #1
 800fa14:	930e      	str	r3, [sp, #56]	; 0x38
 800fa16:	e76a      	b.n	800f8ee <_dtoa_r+0x116>
 800fa18:	2301      	movs	r3, #1
 800fa1a:	e7b2      	b.n	800f982 <_dtoa_r+0x1aa>
 800fa1c:	900b      	str	r0, [sp, #44]	; 0x2c
 800fa1e:	e7b1      	b.n	800f984 <_dtoa_r+0x1ac>
 800fa20:	9b04      	ldr	r3, [sp, #16]
 800fa22:	9a00      	ldr	r2, [sp, #0]
 800fa24:	1a9b      	subs	r3, r3, r2
 800fa26:	9304      	str	r3, [sp, #16]
 800fa28:	4253      	negs	r3, r2
 800fa2a:	9307      	str	r3, [sp, #28]
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	930a      	str	r3, [sp, #40]	; 0x28
 800fa30:	e7bf      	b.n	800f9b2 <_dtoa_r+0x1da>
 800fa32:	2300      	movs	r3, #0
 800fa34:	9308      	str	r3, [sp, #32]
 800fa36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	dc55      	bgt.n	800fae8 <_dtoa_r+0x310>
 800fa3c:	2301      	movs	r3, #1
 800fa3e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fa42:	461a      	mov	r2, r3
 800fa44:	9209      	str	r2, [sp, #36]	; 0x24
 800fa46:	e00c      	b.n	800fa62 <_dtoa_r+0x28a>
 800fa48:	2301      	movs	r3, #1
 800fa4a:	e7f3      	b.n	800fa34 <_dtoa_r+0x25c>
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa50:	9308      	str	r3, [sp, #32]
 800fa52:	9b00      	ldr	r3, [sp, #0]
 800fa54:	4413      	add	r3, r2
 800fa56:	9302      	str	r3, [sp, #8]
 800fa58:	3301      	adds	r3, #1
 800fa5a:	2b01      	cmp	r3, #1
 800fa5c:	9303      	str	r3, [sp, #12]
 800fa5e:	bfb8      	it	lt
 800fa60:	2301      	movlt	r3, #1
 800fa62:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fa64:	2200      	movs	r2, #0
 800fa66:	6042      	str	r2, [r0, #4]
 800fa68:	2204      	movs	r2, #4
 800fa6a:	f102 0614 	add.w	r6, r2, #20
 800fa6e:	429e      	cmp	r6, r3
 800fa70:	6841      	ldr	r1, [r0, #4]
 800fa72:	d93d      	bls.n	800faf0 <_dtoa_r+0x318>
 800fa74:	4620      	mov	r0, r4
 800fa76:	f001 f82b 	bl	8010ad0 <_Balloc>
 800fa7a:	9001      	str	r0, [sp, #4]
 800fa7c:	2800      	cmp	r0, #0
 800fa7e:	d13b      	bne.n	800faf8 <_dtoa_r+0x320>
 800fa80:	4b11      	ldr	r3, [pc, #68]	; (800fac8 <_dtoa_r+0x2f0>)
 800fa82:	4602      	mov	r2, r0
 800fa84:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fa88:	e6c0      	b.n	800f80c <_dtoa_r+0x34>
 800fa8a:	2301      	movs	r3, #1
 800fa8c:	e7df      	b.n	800fa4e <_dtoa_r+0x276>
 800fa8e:	bf00      	nop
 800fa90:	636f4361 	.word	0x636f4361
 800fa94:	3fd287a7 	.word	0x3fd287a7
 800fa98:	8b60c8b3 	.word	0x8b60c8b3
 800fa9c:	3fc68a28 	.word	0x3fc68a28
 800faa0:	509f79fb 	.word	0x509f79fb
 800faa4:	3fd34413 	.word	0x3fd34413
 800faa8:	0801284e 	.word	0x0801284e
 800faac:	08012865 	.word	0x08012865
 800fab0:	7ff00000 	.word	0x7ff00000
 800fab4:	0801284a 	.word	0x0801284a
 800fab8:	08012841 	.word	0x08012841
 800fabc:	080126c1 	.word	0x080126c1
 800fac0:	3ff80000 	.word	0x3ff80000
 800fac4:	080129d0 	.word	0x080129d0
 800fac8:	080128c0 	.word	0x080128c0
 800facc:	2501      	movs	r5, #1
 800face:	2300      	movs	r3, #0
 800fad0:	9306      	str	r3, [sp, #24]
 800fad2:	9508      	str	r5, [sp, #32]
 800fad4:	f04f 33ff 	mov.w	r3, #4294967295
 800fad8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fadc:	2200      	movs	r2, #0
 800fade:	2312      	movs	r3, #18
 800fae0:	e7b0      	b.n	800fa44 <_dtoa_r+0x26c>
 800fae2:	2301      	movs	r3, #1
 800fae4:	9308      	str	r3, [sp, #32]
 800fae6:	e7f5      	b.n	800fad4 <_dtoa_r+0x2fc>
 800fae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800faea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800faee:	e7b8      	b.n	800fa62 <_dtoa_r+0x28a>
 800faf0:	3101      	adds	r1, #1
 800faf2:	6041      	str	r1, [r0, #4]
 800faf4:	0052      	lsls	r2, r2, #1
 800faf6:	e7b8      	b.n	800fa6a <_dtoa_r+0x292>
 800faf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fafa:	9a01      	ldr	r2, [sp, #4]
 800fafc:	601a      	str	r2, [r3, #0]
 800fafe:	9b03      	ldr	r3, [sp, #12]
 800fb00:	2b0e      	cmp	r3, #14
 800fb02:	f200 809d 	bhi.w	800fc40 <_dtoa_r+0x468>
 800fb06:	2d00      	cmp	r5, #0
 800fb08:	f000 809a 	beq.w	800fc40 <_dtoa_r+0x468>
 800fb0c:	9b00      	ldr	r3, [sp, #0]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	dd32      	ble.n	800fb78 <_dtoa_r+0x3a0>
 800fb12:	4ab7      	ldr	r2, [pc, #732]	; (800fdf0 <_dtoa_r+0x618>)
 800fb14:	f003 030f 	and.w	r3, r3, #15
 800fb18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fb1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fb20:	9b00      	ldr	r3, [sp, #0]
 800fb22:	05d8      	lsls	r0, r3, #23
 800fb24:	ea4f 1723 	mov.w	r7, r3, asr #4
 800fb28:	d516      	bpl.n	800fb58 <_dtoa_r+0x380>
 800fb2a:	4bb2      	ldr	r3, [pc, #712]	; (800fdf4 <_dtoa_r+0x61c>)
 800fb2c:	ec51 0b19 	vmov	r0, r1, d9
 800fb30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fb34:	f7f0 fe62 	bl	80007fc <__aeabi_ddiv>
 800fb38:	f007 070f 	and.w	r7, r7, #15
 800fb3c:	4682      	mov	sl, r0
 800fb3e:	468b      	mov	fp, r1
 800fb40:	2503      	movs	r5, #3
 800fb42:	4eac      	ldr	r6, [pc, #688]	; (800fdf4 <_dtoa_r+0x61c>)
 800fb44:	b957      	cbnz	r7, 800fb5c <_dtoa_r+0x384>
 800fb46:	4642      	mov	r2, r8
 800fb48:	464b      	mov	r3, r9
 800fb4a:	4650      	mov	r0, sl
 800fb4c:	4659      	mov	r1, fp
 800fb4e:	f7f0 fe55 	bl	80007fc <__aeabi_ddiv>
 800fb52:	4682      	mov	sl, r0
 800fb54:	468b      	mov	fp, r1
 800fb56:	e028      	b.n	800fbaa <_dtoa_r+0x3d2>
 800fb58:	2502      	movs	r5, #2
 800fb5a:	e7f2      	b.n	800fb42 <_dtoa_r+0x36a>
 800fb5c:	07f9      	lsls	r1, r7, #31
 800fb5e:	d508      	bpl.n	800fb72 <_dtoa_r+0x39a>
 800fb60:	4640      	mov	r0, r8
 800fb62:	4649      	mov	r1, r9
 800fb64:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fb68:	f7f0 fd1e 	bl	80005a8 <__aeabi_dmul>
 800fb6c:	3501      	adds	r5, #1
 800fb6e:	4680      	mov	r8, r0
 800fb70:	4689      	mov	r9, r1
 800fb72:	107f      	asrs	r7, r7, #1
 800fb74:	3608      	adds	r6, #8
 800fb76:	e7e5      	b.n	800fb44 <_dtoa_r+0x36c>
 800fb78:	f000 809b 	beq.w	800fcb2 <_dtoa_r+0x4da>
 800fb7c:	9b00      	ldr	r3, [sp, #0]
 800fb7e:	4f9d      	ldr	r7, [pc, #628]	; (800fdf4 <_dtoa_r+0x61c>)
 800fb80:	425e      	negs	r6, r3
 800fb82:	4b9b      	ldr	r3, [pc, #620]	; (800fdf0 <_dtoa_r+0x618>)
 800fb84:	f006 020f 	and.w	r2, r6, #15
 800fb88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb90:	ec51 0b19 	vmov	r0, r1, d9
 800fb94:	f7f0 fd08 	bl	80005a8 <__aeabi_dmul>
 800fb98:	1136      	asrs	r6, r6, #4
 800fb9a:	4682      	mov	sl, r0
 800fb9c:	468b      	mov	fp, r1
 800fb9e:	2300      	movs	r3, #0
 800fba0:	2502      	movs	r5, #2
 800fba2:	2e00      	cmp	r6, #0
 800fba4:	d17a      	bne.n	800fc9c <_dtoa_r+0x4c4>
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d1d3      	bne.n	800fb52 <_dtoa_r+0x37a>
 800fbaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	f000 8082 	beq.w	800fcb6 <_dtoa_r+0x4de>
 800fbb2:	4b91      	ldr	r3, [pc, #580]	; (800fdf8 <_dtoa_r+0x620>)
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	4650      	mov	r0, sl
 800fbb8:	4659      	mov	r1, fp
 800fbba:	f7f0 ff67 	bl	8000a8c <__aeabi_dcmplt>
 800fbbe:	2800      	cmp	r0, #0
 800fbc0:	d079      	beq.n	800fcb6 <_dtoa_r+0x4de>
 800fbc2:	9b03      	ldr	r3, [sp, #12]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d076      	beq.n	800fcb6 <_dtoa_r+0x4de>
 800fbc8:	9b02      	ldr	r3, [sp, #8]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	dd36      	ble.n	800fc3c <_dtoa_r+0x464>
 800fbce:	9b00      	ldr	r3, [sp, #0]
 800fbd0:	4650      	mov	r0, sl
 800fbd2:	4659      	mov	r1, fp
 800fbd4:	1e5f      	subs	r7, r3, #1
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	4b88      	ldr	r3, [pc, #544]	; (800fdfc <_dtoa_r+0x624>)
 800fbda:	f7f0 fce5 	bl	80005a8 <__aeabi_dmul>
 800fbde:	9e02      	ldr	r6, [sp, #8]
 800fbe0:	4682      	mov	sl, r0
 800fbe2:	468b      	mov	fp, r1
 800fbe4:	3501      	adds	r5, #1
 800fbe6:	4628      	mov	r0, r5
 800fbe8:	f7f0 fc74 	bl	80004d4 <__aeabi_i2d>
 800fbec:	4652      	mov	r2, sl
 800fbee:	465b      	mov	r3, fp
 800fbf0:	f7f0 fcda 	bl	80005a8 <__aeabi_dmul>
 800fbf4:	4b82      	ldr	r3, [pc, #520]	; (800fe00 <_dtoa_r+0x628>)
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	f7f0 fb20 	bl	800023c <__adddf3>
 800fbfc:	46d0      	mov	r8, sl
 800fbfe:	46d9      	mov	r9, fp
 800fc00:	4682      	mov	sl, r0
 800fc02:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800fc06:	2e00      	cmp	r6, #0
 800fc08:	d158      	bne.n	800fcbc <_dtoa_r+0x4e4>
 800fc0a:	4b7e      	ldr	r3, [pc, #504]	; (800fe04 <_dtoa_r+0x62c>)
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	4640      	mov	r0, r8
 800fc10:	4649      	mov	r1, r9
 800fc12:	f7f0 fb11 	bl	8000238 <__aeabi_dsub>
 800fc16:	4652      	mov	r2, sl
 800fc18:	465b      	mov	r3, fp
 800fc1a:	4680      	mov	r8, r0
 800fc1c:	4689      	mov	r9, r1
 800fc1e:	f7f0 ff53 	bl	8000ac8 <__aeabi_dcmpgt>
 800fc22:	2800      	cmp	r0, #0
 800fc24:	f040 8295 	bne.w	8010152 <_dtoa_r+0x97a>
 800fc28:	4652      	mov	r2, sl
 800fc2a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fc2e:	4640      	mov	r0, r8
 800fc30:	4649      	mov	r1, r9
 800fc32:	f7f0 ff2b 	bl	8000a8c <__aeabi_dcmplt>
 800fc36:	2800      	cmp	r0, #0
 800fc38:	f040 8289 	bne.w	801014e <_dtoa_r+0x976>
 800fc3c:	ec5b ab19 	vmov	sl, fp, d9
 800fc40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	f2c0 8148 	blt.w	800fed8 <_dtoa_r+0x700>
 800fc48:	9a00      	ldr	r2, [sp, #0]
 800fc4a:	2a0e      	cmp	r2, #14
 800fc4c:	f300 8144 	bgt.w	800fed8 <_dtoa_r+0x700>
 800fc50:	4b67      	ldr	r3, [pc, #412]	; (800fdf0 <_dtoa_r+0x618>)
 800fc52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fc56:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fc5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	f280 80d5 	bge.w	800fe0c <_dtoa_r+0x634>
 800fc62:	9b03      	ldr	r3, [sp, #12]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	f300 80d1 	bgt.w	800fe0c <_dtoa_r+0x634>
 800fc6a:	f040 826f 	bne.w	801014c <_dtoa_r+0x974>
 800fc6e:	4b65      	ldr	r3, [pc, #404]	; (800fe04 <_dtoa_r+0x62c>)
 800fc70:	2200      	movs	r2, #0
 800fc72:	4640      	mov	r0, r8
 800fc74:	4649      	mov	r1, r9
 800fc76:	f7f0 fc97 	bl	80005a8 <__aeabi_dmul>
 800fc7a:	4652      	mov	r2, sl
 800fc7c:	465b      	mov	r3, fp
 800fc7e:	f7f0 ff19 	bl	8000ab4 <__aeabi_dcmpge>
 800fc82:	9e03      	ldr	r6, [sp, #12]
 800fc84:	4637      	mov	r7, r6
 800fc86:	2800      	cmp	r0, #0
 800fc88:	f040 8245 	bne.w	8010116 <_dtoa_r+0x93e>
 800fc8c:	9d01      	ldr	r5, [sp, #4]
 800fc8e:	2331      	movs	r3, #49	; 0x31
 800fc90:	f805 3b01 	strb.w	r3, [r5], #1
 800fc94:	9b00      	ldr	r3, [sp, #0]
 800fc96:	3301      	adds	r3, #1
 800fc98:	9300      	str	r3, [sp, #0]
 800fc9a:	e240      	b.n	801011e <_dtoa_r+0x946>
 800fc9c:	07f2      	lsls	r2, r6, #31
 800fc9e:	d505      	bpl.n	800fcac <_dtoa_r+0x4d4>
 800fca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fca4:	f7f0 fc80 	bl	80005a8 <__aeabi_dmul>
 800fca8:	3501      	adds	r5, #1
 800fcaa:	2301      	movs	r3, #1
 800fcac:	1076      	asrs	r6, r6, #1
 800fcae:	3708      	adds	r7, #8
 800fcb0:	e777      	b.n	800fba2 <_dtoa_r+0x3ca>
 800fcb2:	2502      	movs	r5, #2
 800fcb4:	e779      	b.n	800fbaa <_dtoa_r+0x3d2>
 800fcb6:	9f00      	ldr	r7, [sp, #0]
 800fcb8:	9e03      	ldr	r6, [sp, #12]
 800fcba:	e794      	b.n	800fbe6 <_dtoa_r+0x40e>
 800fcbc:	9901      	ldr	r1, [sp, #4]
 800fcbe:	4b4c      	ldr	r3, [pc, #304]	; (800fdf0 <_dtoa_r+0x618>)
 800fcc0:	4431      	add	r1, r6
 800fcc2:	910d      	str	r1, [sp, #52]	; 0x34
 800fcc4:	9908      	ldr	r1, [sp, #32]
 800fcc6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fcca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fcce:	2900      	cmp	r1, #0
 800fcd0:	d043      	beq.n	800fd5a <_dtoa_r+0x582>
 800fcd2:	494d      	ldr	r1, [pc, #308]	; (800fe08 <_dtoa_r+0x630>)
 800fcd4:	2000      	movs	r0, #0
 800fcd6:	f7f0 fd91 	bl	80007fc <__aeabi_ddiv>
 800fcda:	4652      	mov	r2, sl
 800fcdc:	465b      	mov	r3, fp
 800fcde:	f7f0 faab 	bl	8000238 <__aeabi_dsub>
 800fce2:	9d01      	ldr	r5, [sp, #4]
 800fce4:	4682      	mov	sl, r0
 800fce6:	468b      	mov	fp, r1
 800fce8:	4649      	mov	r1, r9
 800fcea:	4640      	mov	r0, r8
 800fcec:	f7f0 ff0c 	bl	8000b08 <__aeabi_d2iz>
 800fcf0:	4606      	mov	r6, r0
 800fcf2:	f7f0 fbef 	bl	80004d4 <__aeabi_i2d>
 800fcf6:	4602      	mov	r2, r0
 800fcf8:	460b      	mov	r3, r1
 800fcfa:	4640      	mov	r0, r8
 800fcfc:	4649      	mov	r1, r9
 800fcfe:	f7f0 fa9b 	bl	8000238 <__aeabi_dsub>
 800fd02:	3630      	adds	r6, #48	; 0x30
 800fd04:	f805 6b01 	strb.w	r6, [r5], #1
 800fd08:	4652      	mov	r2, sl
 800fd0a:	465b      	mov	r3, fp
 800fd0c:	4680      	mov	r8, r0
 800fd0e:	4689      	mov	r9, r1
 800fd10:	f7f0 febc 	bl	8000a8c <__aeabi_dcmplt>
 800fd14:	2800      	cmp	r0, #0
 800fd16:	d163      	bne.n	800fde0 <_dtoa_r+0x608>
 800fd18:	4642      	mov	r2, r8
 800fd1a:	464b      	mov	r3, r9
 800fd1c:	4936      	ldr	r1, [pc, #216]	; (800fdf8 <_dtoa_r+0x620>)
 800fd1e:	2000      	movs	r0, #0
 800fd20:	f7f0 fa8a 	bl	8000238 <__aeabi_dsub>
 800fd24:	4652      	mov	r2, sl
 800fd26:	465b      	mov	r3, fp
 800fd28:	f7f0 feb0 	bl	8000a8c <__aeabi_dcmplt>
 800fd2c:	2800      	cmp	r0, #0
 800fd2e:	f040 80b5 	bne.w	800fe9c <_dtoa_r+0x6c4>
 800fd32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd34:	429d      	cmp	r5, r3
 800fd36:	d081      	beq.n	800fc3c <_dtoa_r+0x464>
 800fd38:	4b30      	ldr	r3, [pc, #192]	; (800fdfc <_dtoa_r+0x624>)
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	4650      	mov	r0, sl
 800fd3e:	4659      	mov	r1, fp
 800fd40:	f7f0 fc32 	bl	80005a8 <__aeabi_dmul>
 800fd44:	4b2d      	ldr	r3, [pc, #180]	; (800fdfc <_dtoa_r+0x624>)
 800fd46:	4682      	mov	sl, r0
 800fd48:	468b      	mov	fp, r1
 800fd4a:	4640      	mov	r0, r8
 800fd4c:	4649      	mov	r1, r9
 800fd4e:	2200      	movs	r2, #0
 800fd50:	f7f0 fc2a 	bl	80005a8 <__aeabi_dmul>
 800fd54:	4680      	mov	r8, r0
 800fd56:	4689      	mov	r9, r1
 800fd58:	e7c6      	b.n	800fce8 <_dtoa_r+0x510>
 800fd5a:	4650      	mov	r0, sl
 800fd5c:	4659      	mov	r1, fp
 800fd5e:	f7f0 fc23 	bl	80005a8 <__aeabi_dmul>
 800fd62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd64:	9d01      	ldr	r5, [sp, #4]
 800fd66:	930f      	str	r3, [sp, #60]	; 0x3c
 800fd68:	4682      	mov	sl, r0
 800fd6a:	468b      	mov	fp, r1
 800fd6c:	4649      	mov	r1, r9
 800fd6e:	4640      	mov	r0, r8
 800fd70:	f7f0 feca 	bl	8000b08 <__aeabi_d2iz>
 800fd74:	4606      	mov	r6, r0
 800fd76:	f7f0 fbad 	bl	80004d4 <__aeabi_i2d>
 800fd7a:	3630      	adds	r6, #48	; 0x30
 800fd7c:	4602      	mov	r2, r0
 800fd7e:	460b      	mov	r3, r1
 800fd80:	4640      	mov	r0, r8
 800fd82:	4649      	mov	r1, r9
 800fd84:	f7f0 fa58 	bl	8000238 <__aeabi_dsub>
 800fd88:	f805 6b01 	strb.w	r6, [r5], #1
 800fd8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd8e:	429d      	cmp	r5, r3
 800fd90:	4680      	mov	r8, r0
 800fd92:	4689      	mov	r9, r1
 800fd94:	f04f 0200 	mov.w	r2, #0
 800fd98:	d124      	bne.n	800fde4 <_dtoa_r+0x60c>
 800fd9a:	4b1b      	ldr	r3, [pc, #108]	; (800fe08 <_dtoa_r+0x630>)
 800fd9c:	4650      	mov	r0, sl
 800fd9e:	4659      	mov	r1, fp
 800fda0:	f7f0 fa4c 	bl	800023c <__adddf3>
 800fda4:	4602      	mov	r2, r0
 800fda6:	460b      	mov	r3, r1
 800fda8:	4640      	mov	r0, r8
 800fdaa:	4649      	mov	r1, r9
 800fdac:	f7f0 fe8c 	bl	8000ac8 <__aeabi_dcmpgt>
 800fdb0:	2800      	cmp	r0, #0
 800fdb2:	d173      	bne.n	800fe9c <_dtoa_r+0x6c4>
 800fdb4:	4652      	mov	r2, sl
 800fdb6:	465b      	mov	r3, fp
 800fdb8:	4913      	ldr	r1, [pc, #76]	; (800fe08 <_dtoa_r+0x630>)
 800fdba:	2000      	movs	r0, #0
 800fdbc:	f7f0 fa3c 	bl	8000238 <__aeabi_dsub>
 800fdc0:	4602      	mov	r2, r0
 800fdc2:	460b      	mov	r3, r1
 800fdc4:	4640      	mov	r0, r8
 800fdc6:	4649      	mov	r1, r9
 800fdc8:	f7f0 fe60 	bl	8000a8c <__aeabi_dcmplt>
 800fdcc:	2800      	cmp	r0, #0
 800fdce:	f43f af35 	beq.w	800fc3c <_dtoa_r+0x464>
 800fdd2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fdd4:	1e6b      	subs	r3, r5, #1
 800fdd6:	930f      	str	r3, [sp, #60]	; 0x3c
 800fdd8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fddc:	2b30      	cmp	r3, #48	; 0x30
 800fdde:	d0f8      	beq.n	800fdd2 <_dtoa_r+0x5fa>
 800fde0:	9700      	str	r7, [sp, #0]
 800fde2:	e049      	b.n	800fe78 <_dtoa_r+0x6a0>
 800fde4:	4b05      	ldr	r3, [pc, #20]	; (800fdfc <_dtoa_r+0x624>)
 800fde6:	f7f0 fbdf 	bl	80005a8 <__aeabi_dmul>
 800fdea:	4680      	mov	r8, r0
 800fdec:	4689      	mov	r9, r1
 800fdee:	e7bd      	b.n	800fd6c <_dtoa_r+0x594>
 800fdf0:	080129d0 	.word	0x080129d0
 800fdf4:	080129a8 	.word	0x080129a8
 800fdf8:	3ff00000 	.word	0x3ff00000
 800fdfc:	40240000 	.word	0x40240000
 800fe00:	401c0000 	.word	0x401c0000
 800fe04:	40140000 	.word	0x40140000
 800fe08:	3fe00000 	.word	0x3fe00000
 800fe0c:	9d01      	ldr	r5, [sp, #4]
 800fe0e:	4656      	mov	r6, sl
 800fe10:	465f      	mov	r7, fp
 800fe12:	4642      	mov	r2, r8
 800fe14:	464b      	mov	r3, r9
 800fe16:	4630      	mov	r0, r6
 800fe18:	4639      	mov	r1, r7
 800fe1a:	f7f0 fcef 	bl	80007fc <__aeabi_ddiv>
 800fe1e:	f7f0 fe73 	bl	8000b08 <__aeabi_d2iz>
 800fe22:	4682      	mov	sl, r0
 800fe24:	f7f0 fb56 	bl	80004d4 <__aeabi_i2d>
 800fe28:	4642      	mov	r2, r8
 800fe2a:	464b      	mov	r3, r9
 800fe2c:	f7f0 fbbc 	bl	80005a8 <__aeabi_dmul>
 800fe30:	4602      	mov	r2, r0
 800fe32:	460b      	mov	r3, r1
 800fe34:	4630      	mov	r0, r6
 800fe36:	4639      	mov	r1, r7
 800fe38:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800fe3c:	f7f0 f9fc 	bl	8000238 <__aeabi_dsub>
 800fe40:	f805 6b01 	strb.w	r6, [r5], #1
 800fe44:	9e01      	ldr	r6, [sp, #4]
 800fe46:	9f03      	ldr	r7, [sp, #12]
 800fe48:	1bae      	subs	r6, r5, r6
 800fe4a:	42b7      	cmp	r7, r6
 800fe4c:	4602      	mov	r2, r0
 800fe4e:	460b      	mov	r3, r1
 800fe50:	d135      	bne.n	800febe <_dtoa_r+0x6e6>
 800fe52:	f7f0 f9f3 	bl	800023c <__adddf3>
 800fe56:	4642      	mov	r2, r8
 800fe58:	464b      	mov	r3, r9
 800fe5a:	4606      	mov	r6, r0
 800fe5c:	460f      	mov	r7, r1
 800fe5e:	f7f0 fe33 	bl	8000ac8 <__aeabi_dcmpgt>
 800fe62:	b9d0      	cbnz	r0, 800fe9a <_dtoa_r+0x6c2>
 800fe64:	4642      	mov	r2, r8
 800fe66:	464b      	mov	r3, r9
 800fe68:	4630      	mov	r0, r6
 800fe6a:	4639      	mov	r1, r7
 800fe6c:	f7f0 fe04 	bl	8000a78 <__aeabi_dcmpeq>
 800fe70:	b110      	cbz	r0, 800fe78 <_dtoa_r+0x6a0>
 800fe72:	f01a 0f01 	tst.w	sl, #1
 800fe76:	d110      	bne.n	800fe9a <_dtoa_r+0x6c2>
 800fe78:	4620      	mov	r0, r4
 800fe7a:	ee18 1a10 	vmov	r1, s16
 800fe7e:	f000 fe67 	bl	8010b50 <_Bfree>
 800fe82:	2300      	movs	r3, #0
 800fe84:	9800      	ldr	r0, [sp, #0]
 800fe86:	702b      	strb	r3, [r5, #0]
 800fe88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fe8a:	3001      	adds	r0, #1
 800fe8c:	6018      	str	r0, [r3, #0]
 800fe8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	f43f acf1 	beq.w	800f878 <_dtoa_r+0xa0>
 800fe96:	601d      	str	r5, [r3, #0]
 800fe98:	e4ee      	b.n	800f878 <_dtoa_r+0xa0>
 800fe9a:	9f00      	ldr	r7, [sp, #0]
 800fe9c:	462b      	mov	r3, r5
 800fe9e:	461d      	mov	r5, r3
 800fea0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fea4:	2a39      	cmp	r2, #57	; 0x39
 800fea6:	d106      	bne.n	800feb6 <_dtoa_r+0x6de>
 800fea8:	9a01      	ldr	r2, [sp, #4]
 800feaa:	429a      	cmp	r2, r3
 800feac:	d1f7      	bne.n	800fe9e <_dtoa_r+0x6c6>
 800feae:	9901      	ldr	r1, [sp, #4]
 800feb0:	2230      	movs	r2, #48	; 0x30
 800feb2:	3701      	adds	r7, #1
 800feb4:	700a      	strb	r2, [r1, #0]
 800feb6:	781a      	ldrb	r2, [r3, #0]
 800feb8:	3201      	adds	r2, #1
 800feba:	701a      	strb	r2, [r3, #0]
 800febc:	e790      	b.n	800fde0 <_dtoa_r+0x608>
 800febe:	4ba6      	ldr	r3, [pc, #664]	; (8010158 <_dtoa_r+0x980>)
 800fec0:	2200      	movs	r2, #0
 800fec2:	f7f0 fb71 	bl	80005a8 <__aeabi_dmul>
 800fec6:	2200      	movs	r2, #0
 800fec8:	2300      	movs	r3, #0
 800feca:	4606      	mov	r6, r0
 800fecc:	460f      	mov	r7, r1
 800fece:	f7f0 fdd3 	bl	8000a78 <__aeabi_dcmpeq>
 800fed2:	2800      	cmp	r0, #0
 800fed4:	d09d      	beq.n	800fe12 <_dtoa_r+0x63a>
 800fed6:	e7cf      	b.n	800fe78 <_dtoa_r+0x6a0>
 800fed8:	9a08      	ldr	r2, [sp, #32]
 800feda:	2a00      	cmp	r2, #0
 800fedc:	f000 80d7 	beq.w	801008e <_dtoa_r+0x8b6>
 800fee0:	9a06      	ldr	r2, [sp, #24]
 800fee2:	2a01      	cmp	r2, #1
 800fee4:	f300 80ba 	bgt.w	801005c <_dtoa_r+0x884>
 800fee8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800feea:	2a00      	cmp	r2, #0
 800feec:	f000 80b2 	beq.w	8010054 <_dtoa_r+0x87c>
 800fef0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fef4:	9e07      	ldr	r6, [sp, #28]
 800fef6:	9d04      	ldr	r5, [sp, #16]
 800fef8:	9a04      	ldr	r2, [sp, #16]
 800fefa:	441a      	add	r2, r3
 800fefc:	9204      	str	r2, [sp, #16]
 800fefe:	9a05      	ldr	r2, [sp, #20]
 800ff00:	2101      	movs	r1, #1
 800ff02:	441a      	add	r2, r3
 800ff04:	4620      	mov	r0, r4
 800ff06:	9205      	str	r2, [sp, #20]
 800ff08:	f000 ff24 	bl	8010d54 <__i2b>
 800ff0c:	4607      	mov	r7, r0
 800ff0e:	2d00      	cmp	r5, #0
 800ff10:	dd0c      	ble.n	800ff2c <_dtoa_r+0x754>
 800ff12:	9b05      	ldr	r3, [sp, #20]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	dd09      	ble.n	800ff2c <_dtoa_r+0x754>
 800ff18:	42ab      	cmp	r3, r5
 800ff1a:	9a04      	ldr	r2, [sp, #16]
 800ff1c:	bfa8      	it	ge
 800ff1e:	462b      	movge	r3, r5
 800ff20:	1ad2      	subs	r2, r2, r3
 800ff22:	9204      	str	r2, [sp, #16]
 800ff24:	9a05      	ldr	r2, [sp, #20]
 800ff26:	1aed      	subs	r5, r5, r3
 800ff28:	1ad3      	subs	r3, r2, r3
 800ff2a:	9305      	str	r3, [sp, #20]
 800ff2c:	9b07      	ldr	r3, [sp, #28]
 800ff2e:	b31b      	cbz	r3, 800ff78 <_dtoa_r+0x7a0>
 800ff30:	9b08      	ldr	r3, [sp, #32]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	f000 80af 	beq.w	8010096 <_dtoa_r+0x8be>
 800ff38:	2e00      	cmp	r6, #0
 800ff3a:	dd13      	ble.n	800ff64 <_dtoa_r+0x78c>
 800ff3c:	4639      	mov	r1, r7
 800ff3e:	4632      	mov	r2, r6
 800ff40:	4620      	mov	r0, r4
 800ff42:	f000 ffc7 	bl	8010ed4 <__pow5mult>
 800ff46:	ee18 2a10 	vmov	r2, s16
 800ff4a:	4601      	mov	r1, r0
 800ff4c:	4607      	mov	r7, r0
 800ff4e:	4620      	mov	r0, r4
 800ff50:	f000 ff16 	bl	8010d80 <__multiply>
 800ff54:	ee18 1a10 	vmov	r1, s16
 800ff58:	4680      	mov	r8, r0
 800ff5a:	4620      	mov	r0, r4
 800ff5c:	f000 fdf8 	bl	8010b50 <_Bfree>
 800ff60:	ee08 8a10 	vmov	s16, r8
 800ff64:	9b07      	ldr	r3, [sp, #28]
 800ff66:	1b9a      	subs	r2, r3, r6
 800ff68:	d006      	beq.n	800ff78 <_dtoa_r+0x7a0>
 800ff6a:	ee18 1a10 	vmov	r1, s16
 800ff6e:	4620      	mov	r0, r4
 800ff70:	f000 ffb0 	bl	8010ed4 <__pow5mult>
 800ff74:	ee08 0a10 	vmov	s16, r0
 800ff78:	2101      	movs	r1, #1
 800ff7a:	4620      	mov	r0, r4
 800ff7c:	f000 feea 	bl	8010d54 <__i2b>
 800ff80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	4606      	mov	r6, r0
 800ff86:	f340 8088 	ble.w	801009a <_dtoa_r+0x8c2>
 800ff8a:	461a      	mov	r2, r3
 800ff8c:	4601      	mov	r1, r0
 800ff8e:	4620      	mov	r0, r4
 800ff90:	f000 ffa0 	bl	8010ed4 <__pow5mult>
 800ff94:	9b06      	ldr	r3, [sp, #24]
 800ff96:	2b01      	cmp	r3, #1
 800ff98:	4606      	mov	r6, r0
 800ff9a:	f340 8081 	ble.w	80100a0 <_dtoa_r+0x8c8>
 800ff9e:	f04f 0800 	mov.w	r8, #0
 800ffa2:	6933      	ldr	r3, [r6, #16]
 800ffa4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ffa8:	6918      	ldr	r0, [r3, #16]
 800ffaa:	f000 fe83 	bl	8010cb4 <__hi0bits>
 800ffae:	f1c0 0020 	rsb	r0, r0, #32
 800ffb2:	9b05      	ldr	r3, [sp, #20]
 800ffb4:	4418      	add	r0, r3
 800ffb6:	f010 001f 	ands.w	r0, r0, #31
 800ffba:	f000 8092 	beq.w	80100e2 <_dtoa_r+0x90a>
 800ffbe:	f1c0 0320 	rsb	r3, r0, #32
 800ffc2:	2b04      	cmp	r3, #4
 800ffc4:	f340 808a 	ble.w	80100dc <_dtoa_r+0x904>
 800ffc8:	f1c0 001c 	rsb	r0, r0, #28
 800ffcc:	9b04      	ldr	r3, [sp, #16]
 800ffce:	4403      	add	r3, r0
 800ffd0:	9304      	str	r3, [sp, #16]
 800ffd2:	9b05      	ldr	r3, [sp, #20]
 800ffd4:	4403      	add	r3, r0
 800ffd6:	4405      	add	r5, r0
 800ffd8:	9305      	str	r3, [sp, #20]
 800ffda:	9b04      	ldr	r3, [sp, #16]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	dd07      	ble.n	800fff0 <_dtoa_r+0x818>
 800ffe0:	ee18 1a10 	vmov	r1, s16
 800ffe4:	461a      	mov	r2, r3
 800ffe6:	4620      	mov	r0, r4
 800ffe8:	f000 ffce 	bl	8010f88 <__lshift>
 800ffec:	ee08 0a10 	vmov	s16, r0
 800fff0:	9b05      	ldr	r3, [sp, #20]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	dd05      	ble.n	8010002 <_dtoa_r+0x82a>
 800fff6:	4631      	mov	r1, r6
 800fff8:	461a      	mov	r2, r3
 800fffa:	4620      	mov	r0, r4
 800fffc:	f000 ffc4 	bl	8010f88 <__lshift>
 8010000:	4606      	mov	r6, r0
 8010002:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010004:	2b00      	cmp	r3, #0
 8010006:	d06e      	beq.n	80100e6 <_dtoa_r+0x90e>
 8010008:	ee18 0a10 	vmov	r0, s16
 801000c:	4631      	mov	r1, r6
 801000e:	f001 f82b 	bl	8011068 <__mcmp>
 8010012:	2800      	cmp	r0, #0
 8010014:	da67      	bge.n	80100e6 <_dtoa_r+0x90e>
 8010016:	9b00      	ldr	r3, [sp, #0]
 8010018:	3b01      	subs	r3, #1
 801001a:	ee18 1a10 	vmov	r1, s16
 801001e:	9300      	str	r3, [sp, #0]
 8010020:	220a      	movs	r2, #10
 8010022:	2300      	movs	r3, #0
 8010024:	4620      	mov	r0, r4
 8010026:	f000 fdb5 	bl	8010b94 <__multadd>
 801002a:	9b08      	ldr	r3, [sp, #32]
 801002c:	ee08 0a10 	vmov	s16, r0
 8010030:	2b00      	cmp	r3, #0
 8010032:	f000 81b1 	beq.w	8010398 <_dtoa_r+0xbc0>
 8010036:	2300      	movs	r3, #0
 8010038:	4639      	mov	r1, r7
 801003a:	220a      	movs	r2, #10
 801003c:	4620      	mov	r0, r4
 801003e:	f000 fda9 	bl	8010b94 <__multadd>
 8010042:	9b02      	ldr	r3, [sp, #8]
 8010044:	2b00      	cmp	r3, #0
 8010046:	4607      	mov	r7, r0
 8010048:	f300 808e 	bgt.w	8010168 <_dtoa_r+0x990>
 801004c:	9b06      	ldr	r3, [sp, #24]
 801004e:	2b02      	cmp	r3, #2
 8010050:	dc51      	bgt.n	80100f6 <_dtoa_r+0x91e>
 8010052:	e089      	b.n	8010168 <_dtoa_r+0x990>
 8010054:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010056:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801005a:	e74b      	b.n	800fef4 <_dtoa_r+0x71c>
 801005c:	9b03      	ldr	r3, [sp, #12]
 801005e:	1e5e      	subs	r6, r3, #1
 8010060:	9b07      	ldr	r3, [sp, #28]
 8010062:	42b3      	cmp	r3, r6
 8010064:	bfbf      	itttt	lt
 8010066:	9b07      	ldrlt	r3, [sp, #28]
 8010068:	9607      	strlt	r6, [sp, #28]
 801006a:	1af2      	sublt	r2, r6, r3
 801006c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801006e:	bfb6      	itet	lt
 8010070:	189b      	addlt	r3, r3, r2
 8010072:	1b9e      	subge	r6, r3, r6
 8010074:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010076:	9b03      	ldr	r3, [sp, #12]
 8010078:	bfb8      	it	lt
 801007a:	2600      	movlt	r6, #0
 801007c:	2b00      	cmp	r3, #0
 801007e:	bfb7      	itett	lt
 8010080:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010084:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010088:	1a9d      	sublt	r5, r3, r2
 801008a:	2300      	movlt	r3, #0
 801008c:	e734      	b.n	800fef8 <_dtoa_r+0x720>
 801008e:	9e07      	ldr	r6, [sp, #28]
 8010090:	9d04      	ldr	r5, [sp, #16]
 8010092:	9f08      	ldr	r7, [sp, #32]
 8010094:	e73b      	b.n	800ff0e <_dtoa_r+0x736>
 8010096:	9a07      	ldr	r2, [sp, #28]
 8010098:	e767      	b.n	800ff6a <_dtoa_r+0x792>
 801009a:	9b06      	ldr	r3, [sp, #24]
 801009c:	2b01      	cmp	r3, #1
 801009e:	dc18      	bgt.n	80100d2 <_dtoa_r+0x8fa>
 80100a0:	f1ba 0f00 	cmp.w	sl, #0
 80100a4:	d115      	bne.n	80100d2 <_dtoa_r+0x8fa>
 80100a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80100aa:	b993      	cbnz	r3, 80100d2 <_dtoa_r+0x8fa>
 80100ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80100b0:	0d1b      	lsrs	r3, r3, #20
 80100b2:	051b      	lsls	r3, r3, #20
 80100b4:	b183      	cbz	r3, 80100d8 <_dtoa_r+0x900>
 80100b6:	9b04      	ldr	r3, [sp, #16]
 80100b8:	3301      	adds	r3, #1
 80100ba:	9304      	str	r3, [sp, #16]
 80100bc:	9b05      	ldr	r3, [sp, #20]
 80100be:	3301      	adds	r3, #1
 80100c0:	9305      	str	r3, [sp, #20]
 80100c2:	f04f 0801 	mov.w	r8, #1
 80100c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	f47f af6a 	bne.w	800ffa2 <_dtoa_r+0x7ca>
 80100ce:	2001      	movs	r0, #1
 80100d0:	e76f      	b.n	800ffb2 <_dtoa_r+0x7da>
 80100d2:	f04f 0800 	mov.w	r8, #0
 80100d6:	e7f6      	b.n	80100c6 <_dtoa_r+0x8ee>
 80100d8:	4698      	mov	r8, r3
 80100da:	e7f4      	b.n	80100c6 <_dtoa_r+0x8ee>
 80100dc:	f43f af7d 	beq.w	800ffda <_dtoa_r+0x802>
 80100e0:	4618      	mov	r0, r3
 80100e2:	301c      	adds	r0, #28
 80100e4:	e772      	b.n	800ffcc <_dtoa_r+0x7f4>
 80100e6:	9b03      	ldr	r3, [sp, #12]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	dc37      	bgt.n	801015c <_dtoa_r+0x984>
 80100ec:	9b06      	ldr	r3, [sp, #24]
 80100ee:	2b02      	cmp	r3, #2
 80100f0:	dd34      	ble.n	801015c <_dtoa_r+0x984>
 80100f2:	9b03      	ldr	r3, [sp, #12]
 80100f4:	9302      	str	r3, [sp, #8]
 80100f6:	9b02      	ldr	r3, [sp, #8]
 80100f8:	b96b      	cbnz	r3, 8010116 <_dtoa_r+0x93e>
 80100fa:	4631      	mov	r1, r6
 80100fc:	2205      	movs	r2, #5
 80100fe:	4620      	mov	r0, r4
 8010100:	f000 fd48 	bl	8010b94 <__multadd>
 8010104:	4601      	mov	r1, r0
 8010106:	4606      	mov	r6, r0
 8010108:	ee18 0a10 	vmov	r0, s16
 801010c:	f000 ffac 	bl	8011068 <__mcmp>
 8010110:	2800      	cmp	r0, #0
 8010112:	f73f adbb 	bgt.w	800fc8c <_dtoa_r+0x4b4>
 8010116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010118:	9d01      	ldr	r5, [sp, #4]
 801011a:	43db      	mvns	r3, r3
 801011c:	9300      	str	r3, [sp, #0]
 801011e:	f04f 0800 	mov.w	r8, #0
 8010122:	4631      	mov	r1, r6
 8010124:	4620      	mov	r0, r4
 8010126:	f000 fd13 	bl	8010b50 <_Bfree>
 801012a:	2f00      	cmp	r7, #0
 801012c:	f43f aea4 	beq.w	800fe78 <_dtoa_r+0x6a0>
 8010130:	f1b8 0f00 	cmp.w	r8, #0
 8010134:	d005      	beq.n	8010142 <_dtoa_r+0x96a>
 8010136:	45b8      	cmp	r8, r7
 8010138:	d003      	beq.n	8010142 <_dtoa_r+0x96a>
 801013a:	4641      	mov	r1, r8
 801013c:	4620      	mov	r0, r4
 801013e:	f000 fd07 	bl	8010b50 <_Bfree>
 8010142:	4639      	mov	r1, r7
 8010144:	4620      	mov	r0, r4
 8010146:	f000 fd03 	bl	8010b50 <_Bfree>
 801014a:	e695      	b.n	800fe78 <_dtoa_r+0x6a0>
 801014c:	2600      	movs	r6, #0
 801014e:	4637      	mov	r7, r6
 8010150:	e7e1      	b.n	8010116 <_dtoa_r+0x93e>
 8010152:	9700      	str	r7, [sp, #0]
 8010154:	4637      	mov	r7, r6
 8010156:	e599      	b.n	800fc8c <_dtoa_r+0x4b4>
 8010158:	40240000 	.word	0x40240000
 801015c:	9b08      	ldr	r3, [sp, #32]
 801015e:	2b00      	cmp	r3, #0
 8010160:	f000 80ca 	beq.w	80102f8 <_dtoa_r+0xb20>
 8010164:	9b03      	ldr	r3, [sp, #12]
 8010166:	9302      	str	r3, [sp, #8]
 8010168:	2d00      	cmp	r5, #0
 801016a:	dd05      	ble.n	8010178 <_dtoa_r+0x9a0>
 801016c:	4639      	mov	r1, r7
 801016e:	462a      	mov	r2, r5
 8010170:	4620      	mov	r0, r4
 8010172:	f000 ff09 	bl	8010f88 <__lshift>
 8010176:	4607      	mov	r7, r0
 8010178:	f1b8 0f00 	cmp.w	r8, #0
 801017c:	d05b      	beq.n	8010236 <_dtoa_r+0xa5e>
 801017e:	6879      	ldr	r1, [r7, #4]
 8010180:	4620      	mov	r0, r4
 8010182:	f000 fca5 	bl	8010ad0 <_Balloc>
 8010186:	4605      	mov	r5, r0
 8010188:	b928      	cbnz	r0, 8010196 <_dtoa_r+0x9be>
 801018a:	4b87      	ldr	r3, [pc, #540]	; (80103a8 <_dtoa_r+0xbd0>)
 801018c:	4602      	mov	r2, r0
 801018e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010192:	f7ff bb3b 	b.w	800f80c <_dtoa_r+0x34>
 8010196:	693a      	ldr	r2, [r7, #16]
 8010198:	3202      	adds	r2, #2
 801019a:	0092      	lsls	r2, r2, #2
 801019c:	f107 010c 	add.w	r1, r7, #12
 80101a0:	300c      	adds	r0, #12
 80101a2:	f7fd fd1f 	bl	800dbe4 <memcpy>
 80101a6:	2201      	movs	r2, #1
 80101a8:	4629      	mov	r1, r5
 80101aa:	4620      	mov	r0, r4
 80101ac:	f000 feec 	bl	8010f88 <__lshift>
 80101b0:	9b01      	ldr	r3, [sp, #4]
 80101b2:	f103 0901 	add.w	r9, r3, #1
 80101b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80101ba:	4413      	add	r3, r2
 80101bc:	9305      	str	r3, [sp, #20]
 80101be:	f00a 0301 	and.w	r3, sl, #1
 80101c2:	46b8      	mov	r8, r7
 80101c4:	9304      	str	r3, [sp, #16]
 80101c6:	4607      	mov	r7, r0
 80101c8:	4631      	mov	r1, r6
 80101ca:	ee18 0a10 	vmov	r0, s16
 80101ce:	f7ff fa75 	bl	800f6bc <quorem>
 80101d2:	4641      	mov	r1, r8
 80101d4:	9002      	str	r0, [sp, #8]
 80101d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80101da:	ee18 0a10 	vmov	r0, s16
 80101de:	f000 ff43 	bl	8011068 <__mcmp>
 80101e2:	463a      	mov	r2, r7
 80101e4:	9003      	str	r0, [sp, #12]
 80101e6:	4631      	mov	r1, r6
 80101e8:	4620      	mov	r0, r4
 80101ea:	f000 ff59 	bl	80110a0 <__mdiff>
 80101ee:	68c2      	ldr	r2, [r0, #12]
 80101f0:	f109 3bff 	add.w	fp, r9, #4294967295
 80101f4:	4605      	mov	r5, r0
 80101f6:	bb02      	cbnz	r2, 801023a <_dtoa_r+0xa62>
 80101f8:	4601      	mov	r1, r0
 80101fa:	ee18 0a10 	vmov	r0, s16
 80101fe:	f000 ff33 	bl	8011068 <__mcmp>
 8010202:	4602      	mov	r2, r0
 8010204:	4629      	mov	r1, r5
 8010206:	4620      	mov	r0, r4
 8010208:	9207      	str	r2, [sp, #28]
 801020a:	f000 fca1 	bl	8010b50 <_Bfree>
 801020e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010212:	ea43 0102 	orr.w	r1, r3, r2
 8010216:	9b04      	ldr	r3, [sp, #16]
 8010218:	430b      	orrs	r3, r1
 801021a:	464d      	mov	r5, r9
 801021c:	d10f      	bne.n	801023e <_dtoa_r+0xa66>
 801021e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010222:	d02a      	beq.n	801027a <_dtoa_r+0xaa2>
 8010224:	9b03      	ldr	r3, [sp, #12]
 8010226:	2b00      	cmp	r3, #0
 8010228:	dd02      	ble.n	8010230 <_dtoa_r+0xa58>
 801022a:	9b02      	ldr	r3, [sp, #8]
 801022c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010230:	f88b a000 	strb.w	sl, [fp]
 8010234:	e775      	b.n	8010122 <_dtoa_r+0x94a>
 8010236:	4638      	mov	r0, r7
 8010238:	e7ba      	b.n	80101b0 <_dtoa_r+0x9d8>
 801023a:	2201      	movs	r2, #1
 801023c:	e7e2      	b.n	8010204 <_dtoa_r+0xa2c>
 801023e:	9b03      	ldr	r3, [sp, #12]
 8010240:	2b00      	cmp	r3, #0
 8010242:	db04      	blt.n	801024e <_dtoa_r+0xa76>
 8010244:	9906      	ldr	r1, [sp, #24]
 8010246:	430b      	orrs	r3, r1
 8010248:	9904      	ldr	r1, [sp, #16]
 801024a:	430b      	orrs	r3, r1
 801024c:	d122      	bne.n	8010294 <_dtoa_r+0xabc>
 801024e:	2a00      	cmp	r2, #0
 8010250:	ddee      	ble.n	8010230 <_dtoa_r+0xa58>
 8010252:	ee18 1a10 	vmov	r1, s16
 8010256:	2201      	movs	r2, #1
 8010258:	4620      	mov	r0, r4
 801025a:	f000 fe95 	bl	8010f88 <__lshift>
 801025e:	4631      	mov	r1, r6
 8010260:	ee08 0a10 	vmov	s16, r0
 8010264:	f000 ff00 	bl	8011068 <__mcmp>
 8010268:	2800      	cmp	r0, #0
 801026a:	dc03      	bgt.n	8010274 <_dtoa_r+0xa9c>
 801026c:	d1e0      	bne.n	8010230 <_dtoa_r+0xa58>
 801026e:	f01a 0f01 	tst.w	sl, #1
 8010272:	d0dd      	beq.n	8010230 <_dtoa_r+0xa58>
 8010274:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010278:	d1d7      	bne.n	801022a <_dtoa_r+0xa52>
 801027a:	2339      	movs	r3, #57	; 0x39
 801027c:	f88b 3000 	strb.w	r3, [fp]
 8010280:	462b      	mov	r3, r5
 8010282:	461d      	mov	r5, r3
 8010284:	3b01      	subs	r3, #1
 8010286:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801028a:	2a39      	cmp	r2, #57	; 0x39
 801028c:	d071      	beq.n	8010372 <_dtoa_r+0xb9a>
 801028e:	3201      	adds	r2, #1
 8010290:	701a      	strb	r2, [r3, #0]
 8010292:	e746      	b.n	8010122 <_dtoa_r+0x94a>
 8010294:	2a00      	cmp	r2, #0
 8010296:	dd07      	ble.n	80102a8 <_dtoa_r+0xad0>
 8010298:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801029c:	d0ed      	beq.n	801027a <_dtoa_r+0xaa2>
 801029e:	f10a 0301 	add.w	r3, sl, #1
 80102a2:	f88b 3000 	strb.w	r3, [fp]
 80102a6:	e73c      	b.n	8010122 <_dtoa_r+0x94a>
 80102a8:	9b05      	ldr	r3, [sp, #20]
 80102aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80102ae:	4599      	cmp	r9, r3
 80102b0:	d047      	beq.n	8010342 <_dtoa_r+0xb6a>
 80102b2:	ee18 1a10 	vmov	r1, s16
 80102b6:	2300      	movs	r3, #0
 80102b8:	220a      	movs	r2, #10
 80102ba:	4620      	mov	r0, r4
 80102bc:	f000 fc6a 	bl	8010b94 <__multadd>
 80102c0:	45b8      	cmp	r8, r7
 80102c2:	ee08 0a10 	vmov	s16, r0
 80102c6:	f04f 0300 	mov.w	r3, #0
 80102ca:	f04f 020a 	mov.w	r2, #10
 80102ce:	4641      	mov	r1, r8
 80102d0:	4620      	mov	r0, r4
 80102d2:	d106      	bne.n	80102e2 <_dtoa_r+0xb0a>
 80102d4:	f000 fc5e 	bl	8010b94 <__multadd>
 80102d8:	4680      	mov	r8, r0
 80102da:	4607      	mov	r7, r0
 80102dc:	f109 0901 	add.w	r9, r9, #1
 80102e0:	e772      	b.n	80101c8 <_dtoa_r+0x9f0>
 80102e2:	f000 fc57 	bl	8010b94 <__multadd>
 80102e6:	4639      	mov	r1, r7
 80102e8:	4680      	mov	r8, r0
 80102ea:	2300      	movs	r3, #0
 80102ec:	220a      	movs	r2, #10
 80102ee:	4620      	mov	r0, r4
 80102f0:	f000 fc50 	bl	8010b94 <__multadd>
 80102f4:	4607      	mov	r7, r0
 80102f6:	e7f1      	b.n	80102dc <_dtoa_r+0xb04>
 80102f8:	9b03      	ldr	r3, [sp, #12]
 80102fa:	9302      	str	r3, [sp, #8]
 80102fc:	9d01      	ldr	r5, [sp, #4]
 80102fe:	ee18 0a10 	vmov	r0, s16
 8010302:	4631      	mov	r1, r6
 8010304:	f7ff f9da 	bl	800f6bc <quorem>
 8010308:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801030c:	9b01      	ldr	r3, [sp, #4]
 801030e:	f805 ab01 	strb.w	sl, [r5], #1
 8010312:	1aea      	subs	r2, r5, r3
 8010314:	9b02      	ldr	r3, [sp, #8]
 8010316:	4293      	cmp	r3, r2
 8010318:	dd09      	ble.n	801032e <_dtoa_r+0xb56>
 801031a:	ee18 1a10 	vmov	r1, s16
 801031e:	2300      	movs	r3, #0
 8010320:	220a      	movs	r2, #10
 8010322:	4620      	mov	r0, r4
 8010324:	f000 fc36 	bl	8010b94 <__multadd>
 8010328:	ee08 0a10 	vmov	s16, r0
 801032c:	e7e7      	b.n	80102fe <_dtoa_r+0xb26>
 801032e:	9b02      	ldr	r3, [sp, #8]
 8010330:	2b00      	cmp	r3, #0
 8010332:	bfc8      	it	gt
 8010334:	461d      	movgt	r5, r3
 8010336:	9b01      	ldr	r3, [sp, #4]
 8010338:	bfd8      	it	le
 801033a:	2501      	movle	r5, #1
 801033c:	441d      	add	r5, r3
 801033e:	f04f 0800 	mov.w	r8, #0
 8010342:	ee18 1a10 	vmov	r1, s16
 8010346:	2201      	movs	r2, #1
 8010348:	4620      	mov	r0, r4
 801034a:	f000 fe1d 	bl	8010f88 <__lshift>
 801034e:	4631      	mov	r1, r6
 8010350:	ee08 0a10 	vmov	s16, r0
 8010354:	f000 fe88 	bl	8011068 <__mcmp>
 8010358:	2800      	cmp	r0, #0
 801035a:	dc91      	bgt.n	8010280 <_dtoa_r+0xaa8>
 801035c:	d102      	bne.n	8010364 <_dtoa_r+0xb8c>
 801035e:	f01a 0f01 	tst.w	sl, #1
 8010362:	d18d      	bne.n	8010280 <_dtoa_r+0xaa8>
 8010364:	462b      	mov	r3, r5
 8010366:	461d      	mov	r5, r3
 8010368:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801036c:	2a30      	cmp	r2, #48	; 0x30
 801036e:	d0fa      	beq.n	8010366 <_dtoa_r+0xb8e>
 8010370:	e6d7      	b.n	8010122 <_dtoa_r+0x94a>
 8010372:	9a01      	ldr	r2, [sp, #4]
 8010374:	429a      	cmp	r2, r3
 8010376:	d184      	bne.n	8010282 <_dtoa_r+0xaaa>
 8010378:	9b00      	ldr	r3, [sp, #0]
 801037a:	3301      	adds	r3, #1
 801037c:	9300      	str	r3, [sp, #0]
 801037e:	2331      	movs	r3, #49	; 0x31
 8010380:	7013      	strb	r3, [r2, #0]
 8010382:	e6ce      	b.n	8010122 <_dtoa_r+0x94a>
 8010384:	4b09      	ldr	r3, [pc, #36]	; (80103ac <_dtoa_r+0xbd4>)
 8010386:	f7ff ba95 	b.w	800f8b4 <_dtoa_r+0xdc>
 801038a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801038c:	2b00      	cmp	r3, #0
 801038e:	f47f aa6e 	bne.w	800f86e <_dtoa_r+0x96>
 8010392:	4b07      	ldr	r3, [pc, #28]	; (80103b0 <_dtoa_r+0xbd8>)
 8010394:	f7ff ba8e 	b.w	800f8b4 <_dtoa_r+0xdc>
 8010398:	9b02      	ldr	r3, [sp, #8]
 801039a:	2b00      	cmp	r3, #0
 801039c:	dcae      	bgt.n	80102fc <_dtoa_r+0xb24>
 801039e:	9b06      	ldr	r3, [sp, #24]
 80103a0:	2b02      	cmp	r3, #2
 80103a2:	f73f aea8 	bgt.w	80100f6 <_dtoa_r+0x91e>
 80103a6:	e7a9      	b.n	80102fc <_dtoa_r+0xb24>
 80103a8:	080128c0 	.word	0x080128c0
 80103ac:	080126c0 	.word	0x080126c0
 80103b0:	08012841 	.word	0x08012841

080103b4 <rshift>:
 80103b4:	6903      	ldr	r3, [r0, #16]
 80103b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80103ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80103be:	ea4f 1261 	mov.w	r2, r1, asr #5
 80103c2:	f100 0414 	add.w	r4, r0, #20
 80103c6:	dd45      	ble.n	8010454 <rshift+0xa0>
 80103c8:	f011 011f 	ands.w	r1, r1, #31
 80103cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80103d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80103d4:	d10c      	bne.n	80103f0 <rshift+0x3c>
 80103d6:	f100 0710 	add.w	r7, r0, #16
 80103da:	4629      	mov	r1, r5
 80103dc:	42b1      	cmp	r1, r6
 80103de:	d334      	bcc.n	801044a <rshift+0x96>
 80103e0:	1a9b      	subs	r3, r3, r2
 80103e2:	009b      	lsls	r3, r3, #2
 80103e4:	1eea      	subs	r2, r5, #3
 80103e6:	4296      	cmp	r6, r2
 80103e8:	bf38      	it	cc
 80103ea:	2300      	movcc	r3, #0
 80103ec:	4423      	add	r3, r4
 80103ee:	e015      	b.n	801041c <rshift+0x68>
 80103f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80103f4:	f1c1 0820 	rsb	r8, r1, #32
 80103f8:	40cf      	lsrs	r7, r1
 80103fa:	f105 0e04 	add.w	lr, r5, #4
 80103fe:	46a1      	mov	r9, r4
 8010400:	4576      	cmp	r6, lr
 8010402:	46f4      	mov	ip, lr
 8010404:	d815      	bhi.n	8010432 <rshift+0x7e>
 8010406:	1a9a      	subs	r2, r3, r2
 8010408:	0092      	lsls	r2, r2, #2
 801040a:	3a04      	subs	r2, #4
 801040c:	3501      	adds	r5, #1
 801040e:	42ae      	cmp	r6, r5
 8010410:	bf38      	it	cc
 8010412:	2200      	movcc	r2, #0
 8010414:	18a3      	adds	r3, r4, r2
 8010416:	50a7      	str	r7, [r4, r2]
 8010418:	b107      	cbz	r7, 801041c <rshift+0x68>
 801041a:	3304      	adds	r3, #4
 801041c:	1b1a      	subs	r2, r3, r4
 801041e:	42a3      	cmp	r3, r4
 8010420:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010424:	bf08      	it	eq
 8010426:	2300      	moveq	r3, #0
 8010428:	6102      	str	r2, [r0, #16]
 801042a:	bf08      	it	eq
 801042c:	6143      	streq	r3, [r0, #20]
 801042e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010432:	f8dc c000 	ldr.w	ip, [ip]
 8010436:	fa0c fc08 	lsl.w	ip, ip, r8
 801043a:	ea4c 0707 	orr.w	r7, ip, r7
 801043e:	f849 7b04 	str.w	r7, [r9], #4
 8010442:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010446:	40cf      	lsrs	r7, r1
 8010448:	e7da      	b.n	8010400 <rshift+0x4c>
 801044a:	f851 cb04 	ldr.w	ip, [r1], #4
 801044e:	f847 cf04 	str.w	ip, [r7, #4]!
 8010452:	e7c3      	b.n	80103dc <rshift+0x28>
 8010454:	4623      	mov	r3, r4
 8010456:	e7e1      	b.n	801041c <rshift+0x68>

08010458 <__hexdig_fun>:
 8010458:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801045c:	2b09      	cmp	r3, #9
 801045e:	d802      	bhi.n	8010466 <__hexdig_fun+0xe>
 8010460:	3820      	subs	r0, #32
 8010462:	b2c0      	uxtb	r0, r0
 8010464:	4770      	bx	lr
 8010466:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801046a:	2b05      	cmp	r3, #5
 801046c:	d801      	bhi.n	8010472 <__hexdig_fun+0x1a>
 801046e:	3847      	subs	r0, #71	; 0x47
 8010470:	e7f7      	b.n	8010462 <__hexdig_fun+0xa>
 8010472:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010476:	2b05      	cmp	r3, #5
 8010478:	d801      	bhi.n	801047e <__hexdig_fun+0x26>
 801047a:	3827      	subs	r0, #39	; 0x27
 801047c:	e7f1      	b.n	8010462 <__hexdig_fun+0xa>
 801047e:	2000      	movs	r0, #0
 8010480:	4770      	bx	lr
	...

08010484 <__gethex>:
 8010484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010488:	ed2d 8b02 	vpush	{d8}
 801048c:	b089      	sub	sp, #36	; 0x24
 801048e:	ee08 0a10 	vmov	s16, r0
 8010492:	9304      	str	r3, [sp, #16]
 8010494:	4bb4      	ldr	r3, [pc, #720]	; (8010768 <__gethex+0x2e4>)
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	9301      	str	r3, [sp, #4]
 801049a:	4618      	mov	r0, r3
 801049c:	468b      	mov	fp, r1
 801049e:	4690      	mov	r8, r2
 80104a0:	f7ef fe6e 	bl	8000180 <strlen>
 80104a4:	9b01      	ldr	r3, [sp, #4]
 80104a6:	f8db 2000 	ldr.w	r2, [fp]
 80104aa:	4403      	add	r3, r0
 80104ac:	4682      	mov	sl, r0
 80104ae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80104b2:	9305      	str	r3, [sp, #20]
 80104b4:	1c93      	adds	r3, r2, #2
 80104b6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80104ba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80104be:	32fe      	adds	r2, #254	; 0xfe
 80104c0:	18d1      	adds	r1, r2, r3
 80104c2:	461f      	mov	r7, r3
 80104c4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80104c8:	9100      	str	r1, [sp, #0]
 80104ca:	2830      	cmp	r0, #48	; 0x30
 80104cc:	d0f8      	beq.n	80104c0 <__gethex+0x3c>
 80104ce:	f7ff ffc3 	bl	8010458 <__hexdig_fun>
 80104d2:	4604      	mov	r4, r0
 80104d4:	2800      	cmp	r0, #0
 80104d6:	d13a      	bne.n	801054e <__gethex+0xca>
 80104d8:	9901      	ldr	r1, [sp, #4]
 80104da:	4652      	mov	r2, sl
 80104dc:	4638      	mov	r0, r7
 80104de:	f001 fa23 	bl	8011928 <strncmp>
 80104e2:	4605      	mov	r5, r0
 80104e4:	2800      	cmp	r0, #0
 80104e6:	d168      	bne.n	80105ba <__gethex+0x136>
 80104e8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80104ec:	eb07 060a 	add.w	r6, r7, sl
 80104f0:	f7ff ffb2 	bl	8010458 <__hexdig_fun>
 80104f4:	2800      	cmp	r0, #0
 80104f6:	d062      	beq.n	80105be <__gethex+0x13a>
 80104f8:	4633      	mov	r3, r6
 80104fa:	7818      	ldrb	r0, [r3, #0]
 80104fc:	2830      	cmp	r0, #48	; 0x30
 80104fe:	461f      	mov	r7, r3
 8010500:	f103 0301 	add.w	r3, r3, #1
 8010504:	d0f9      	beq.n	80104fa <__gethex+0x76>
 8010506:	f7ff ffa7 	bl	8010458 <__hexdig_fun>
 801050a:	2301      	movs	r3, #1
 801050c:	fab0 f480 	clz	r4, r0
 8010510:	0964      	lsrs	r4, r4, #5
 8010512:	4635      	mov	r5, r6
 8010514:	9300      	str	r3, [sp, #0]
 8010516:	463a      	mov	r2, r7
 8010518:	4616      	mov	r6, r2
 801051a:	3201      	adds	r2, #1
 801051c:	7830      	ldrb	r0, [r6, #0]
 801051e:	f7ff ff9b 	bl	8010458 <__hexdig_fun>
 8010522:	2800      	cmp	r0, #0
 8010524:	d1f8      	bne.n	8010518 <__gethex+0x94>
 8010526:	9901      	ldr	r1, [sp, #4]
 8010528:	4652      	mov	r2, sl
 801052a:	4630      	mov	r0, r6
 801052c:	f001 f9fc 	bl	8011928 <strncmp>
 8010530:	b980      	cbnz	r0, 8010554 <__gethex+0xd0>
 8010532:	b94d      	cbnz	r5, 8010548 <__gethex+0xc4>
 8010534:	eb06 050a 	add.w	r5, r6, sl
 8010538:	462a      	mov	r2, r5
 801053a:	4616      	mov	r6, r2
 801053c:	3201      	adds	r2, #1
 801053e:	7830      	ldrb	r0, [r6, #0]
 8010540:	f7ff ff8a 	bl	8010458 <__hexdig_fun>
 8010544:	2800      	cmp	r0, #0
 8010546:	d1f8      	bne.n	801053a <__gethex+0xb6>
 8010548:	1bad      	subs	r5, r5, r6
 801054a:	00ad      	lsls	r5, r5, #2
 801054c:	e004      	b.n	8010558 <__gethex+0xd4>
 801054e:	2400      	movs	r4, #0
 8010550:	4625      	mov	r5, r4
 8010552:	e7e0      	b.n	8010516 <__gethex+0x92>
 8010554:	2d00      	cmp	r5, #0
 8010556:	d1f7      	bne.n	8010548 <__gethex+0xc4>
 8010558:	7833      	ldrb	r3, [r6, #0]
 801055a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801055e:	2b50      	cmp	r3, #80	; 0x50
 8010560:	d13b      	bne.n	80105da <__gethex+0x156>
 8010562:	7873      	ldrb	r3, [r6, #1]
 8010564:	2b2b      	cmp	r3, #43	; 0x2b
 8010566:	d02c      	beq.n	80105c2 <__gethex+0x13e>
 8010568:	2b2d      	cmp	r3, #45	; 0x2d
 801056a:	d02e      	beq.n	80105ca <__gethex+0x146>
 801056c:	1c71      	adds	r1, r6, #1
 801056e:	f04f 0900 	mov.w	r9, #0
 8010572:	7808      	ldrb	r0, [r1, #0]
 8010574:	f7ff ff70 	bl	8010458 <__hexdig_fun>
 8010578:	1e43      	subs	r3, r0, #1
 801057a:	b2db      	uxtb	r3, r3
 801057c:	2b18      	cmp	r3, #24
 801057e:	d82c      	bhi.n	80105da <__gethex+0x156>
 8010580:	f1a0 0210 	sub.w	r2, r0, #16
 8010584:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010588:	f7ff ff66 	bl	8010458 <__hexdig_fun>
 801058c:	1e43      	subs	r3, r0, #1
 801058e:	b2db      	uxtb	r3, r3
 8010590:	2b18      	cmp	r3, #24
 8010592:	d91d      	bls.n	80105d0 <__gethex+0x14c>
 8010594:	f1b9 0f00 	cmp.w	r9, #0
 8010598:	d000      	beq.n	801059c <__gethex+0x118>
 801059a:	4252      	negs	r2, r2
 801059c:	4415      	add	r5, r2
 801059e:	f8cb 1000 	str.w	r1, [fp]
 80105a2:	b1e4      	cbz	r4, 80105de <__gethex+0x15a>
 80105a4:	9b00      	ldr	r3, [sp, #0]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	bf14      	ite	ne
 80105aa:	2700      	movne	r7, #0
 80105ac:	2706      	moveq	r7, #6
 80105ae:	4638      	mov	r0, r7
 80105b0:	b009      	add	sp, #36	; 0x24
 80105b2:	ecbd 8b02 	vpop	{d8}
 80105b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105ba:	463e      	mov	r6, r7
 80105bc:	4625      	mov	r5, r4
 80105be:	2401      	movs	r4, #1
 80105c0:	e7ca      	b.n	8010558 <__gethex+0xd4>
 80105c2:	f04f 0900 	mov.w	r9, #0
 80105c6:	1cb1      	adds	r1, r6, #2
 80105c8:	e7d3      	b.n	8010572 <__gethex+0xee>
 80105ca:	f04f 0901 	mov.w	r9, #1
 80105ce:	e7fa      	b.n	80105c6 <__gethex+0x142>
 80105d0:	230a      	movs	r3, #10
 80105d2:	fb03 0202 	mla	r2, r3, r2, r0
 80105d6:	3a10      	subs	r2, #16
 80105d8:	e7d4      	b.n	8010584 <__gethex+0x100>
 80105da:	4631      	mov	r1, r6
 80105dc:	e7df      	b.n	801059e <__gethex+0x11a>
 80105de:	1bf3      	subs	r3, r6, r7
 80105e0:	3b01      	subs	r3, #1
 80105e2:	4621      	mov	r1, r4
 80105e4:	2b07      	cmp	r3, #7
 80105e6:	dc0b      	bgt.n	8010600 <__gethex+0x17c>
 80105e8:	ee18 0a10 	vmov	r0, s16
 80105ec:	f000 fa70 	bl	8010ad0 <_Balloc>
 80105f0:	4604      	mov	r4, r0
 80105f2:	b940      	cbnz	r0, 8010606 <__gethex+0x182>
 80105f4:	4b5d      	ldr	r3, [pc, #372]	; (801076c <__gethex+0x2e8>)
 80105f6:	4602      	mov	r2, r0
 80105f8:	21de      	movs	r1, #222	; 0xde
 80105fa:	485d      	ldr	r0, [pc, #372]	; (8010770 <__gethex+0x2ec>)
 80105fc:	f001 f9b6 	bl	801196c <__assert_func>
 8010600:	3101      	adds	r1, #1
 8010602:	105b      	asrs	r3, r3, #1
 8010604:	e7ee      	b.n	80105e4 <__gethex+0x160>
 8010606:	f100 0914 	add.w	r9, r0, #20
 801060a:	f04f 0b00 	mov.w	fp, #0
 801060e:	f1ca 0301 	rsb	r3, sl, #1
 8010612:	f8cd 9008 	str.w	r9, [sp, #8]
 8010616:	f8cd b000 	str.w	fp, [sp]
 801061a:	9306      	str	r3, [sp, #24]
 801061c:	42b7      	cmp	r7, r6
 801061e:	d340      	bcc.n	80106a2 <__gethex+0x21e>
 8010620:	9802      	ldr	r0, [sp, #8]
 8010622:	9b00      	ldr	r3, [sp, #0]
 8010624:	f840 3b04 	str.w	r3, [r0], #4
 8010628:	eba0 0009 	sub.w	r0, r0, r9
 801062c:	1080      	asrs	r0, r0, #2
 801062e:	0146      	lsls	r6, r0, #5
 8010630:	6120      	str	r0, [r4, #16]
 8010632:	4618      	mov	r0, r3
 8010634:	f000 fb3e 	bl	8010cb4 <__hi0bits>
 8010638:	1a30      	subs	r0, r6, r0
 801063a:	f8d8 6000 	ldr.w	r6, [r8]
 801063e:	42b0      	cmp	r0, r6
 8010640:	dd63      	ble.n	801070a <__gethex+0x286>
 8010642:	1b87      	subs	r7, r0, r6
 8010644:	4639      	mov	r1, r7
 8010646:	4620      	mov	r0, r4
 8010648:	f000 fee2 	bl	8011410 <__any_on>
 801064c:	4682      	mov	sl, r0
 801064e:	b1a8      	cbz	r0, 801067c <__gethex+0x1f8>
 8010650:	1e7b      	subs	r3, r7, #1
 8010652:	1159      	asrs	r1, r3, #5
 8010654:	f003 021f 	and.w	r2, r3, #31
 8010658:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801065c:	f04f 0a01 	mov.w	sl, #1
 8010660:	fa0a f202 	lsl.w	r2, sl, r2
 8010664:	420a      	tst	r2, r1
 8010666:	d009      	beq.n	801067c <__gethex+0x1f8>
 8010668:	4553      	cmp	r3, sl
 801066a:	dd05      	ble.n	8010678 <__gethex+0x1f4>
 801066c:	1eb9      	subs	r1, r7, #2
 801066e:	4620      	mov	r0, r4
 8010670:	f000 fece 	bl	8011410 <__any_on>
 8010674:	2800      	cmp	r0, #0
 8010676:	d145      	bne.n	8010704 <__gethex+0x280>
 8010678:	f04f 0a02 	mov.w	sl, #2
 801067c:	4639      	mov	r1, r7
 801067e:	4620      	mov	r0, r4
 8010680:	f7ff fe98 	bl	80103b4 <rshift>
 8010684:	443d      	add	r5, r7
 8010686:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801068a:	42ab      	cmp	r3, r5
 801068c:	da4c      	bge.n	8010728 <__gethex+0x2a4>
 801068e:	ee18 0a10 	vmov	r0, s16
 8010692:	4621      	mov	r1, r4
 8010694:	f000 fa5c 	bl	8010b50 <_Bfree>
 8010698:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801069a:	2300      	movs	r3, #0
 801069c:	6013      	str	r3, [r2, #0]
 801069e:	27a3      	movs	r7, #163	; 0xa3
 80106a0:	e785      	b.n	80105ae <__gethex+0x12a>
 80106a2:	1e73      	subs	r3, r6, #1
 80106a4:	9a05      	ldr	r2, [sp, #20]
 80106a6:	9303      	str	r3, [sp, #12]
 80106a8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80106ac:	4293      	cmp	r3, r2
 80106ae:	d019      	beq.n	80106e4 <__gethex+0x260>
 80106b0:	f1bb 0f20 	cmp.w	fp, #32
 80106b4:	d107      	bne.n	80106c6 <__gethex+0x242>
 80106b6:	9b02      	ldr	r3, [sp, #8]
 80106b8:	9a00      	ldr	r2, [sp, #0]
 80106ba:	f843 2b04 	str.w	r2, [r3], #4
 80106be:	9302      	str	r3, [sp, #8]
 80106c0:	2300      	movs	r3, #0
 80106c2:	9300      	str	r3, [sp, #0]
 80106c4:	469b      	mov	fp, r3
 80106c6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80106ca:	f7ff fec5 	bl	8010458 <__hexdig_fun>
 80106ce:	9b00      	ldr	r3, [sp, #0]
 80106d0:	f000 000f 	and.w	r0, r0, #15
 80106d4:	fa00 f00b 	lsl.w	r0, r0, fp
 80106d8:	4303      	orrs	r3, r0
 80106da:	9300      	str	r3, [sp, #0]
 80106dc:	f10b 0b04 	add.w	fp, fp, #4
 80106e0:	9b03      	ldr	r3, [sp, #12]
 80106e2:	e00d      	b.n	8010700 <__gethex+0x27c>
 80106e4:	9b03      	ldr	r3, [sp, #12]
 80106e6:	9a06      	ldr	r2, [sp, #24]
 80106e8:	4413      	add	r3, r2
 80106ea:	42bb      	cmp	r3, r7
 80106ec:	d3e0      	bcc.n	80106b0 <__gethex+0x22c>
 80106ee:	4618      	mov	r0, r3
 80106f0:	9901      	ldr	r1, [sp, #4]
 80106f2:	9307      	str	r3, [sp, #28]
 80106f4:	4652      	mov	r2, sl
 80106f6:	f001 f917 	bl	8011928 <strncmp>
 80106fa:	9b07      	ldr	r3, [sp, #28]
 80106fc:	2800      	cmp	r0, #0
 80106fe:	d1d7      	bne.n	80106b0 <__gethex+0x22c>
 8010700:	461e      	mov	r6, r3
 8010702:	e78b      	b.n	801061c <__gethex+0x198>
 8010704:	f04f 0a03 	mov.w	sl, #3
 8010708:	e7b8      	b.n	801067c <__gethex+0x1f8>
 801070a:	da0a      	bge.n	8010722 <__gethex+0x29e>
 801070c:	1a37      	subs	r7, r6, r0
 801070e:	4621      	mov	r1, r4
 8010710:	ee18 0a10 	vmov	r0, s16
 8010714:	463a      	mov	r2, r7
 8010716:	f000 fc37 	bl	8010f88 <__lshift>
 801071a:	1bed      	subs	r5, r5, r7
 801071c:	4604      	mov	r4, r0
 801071e:	f100 0914 	add.w	r9, r0, #20
 8010722:	f04f 0a00 	mov.w	sl, #0
 8010726:	e7ae      	b.n	8010686 <__gethex+0x202>
 8010728:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801072c:	42a8      	cmp	r0, r5
 801072e:	dd72      	ble.n	8010816 <__gethex+0x392>
 8010730:	1b45      	subs	r5, r0, r5
 8010732:	42ae      	cmp	r6, r5
 8010734:	dc36      	bgt.n	80107a4 <__gethex+0x320>
 8010736:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801073a:	2b02      	cmp	r3, #2
 801073c:	d02a      	beq.n	8010794 <__gethex+0x310>
 801073e:	2b03      	cmp	r3, #3
 8010740:	d02c      	beq.n	801079c <__gethex+0x318>
 8010742:	2b01      	cmp	r3, #1
 8010744:	d11c      	bne.n	8010780 <__gethex+0x2fc>
 8010746:	42ae      	cmp	r6, r5
 8010748:	d11a      	bne.n	8010780 <__gethex+0x2fc>
 801074a:	2e01      	cmp	r6, #1
 801074c:	d112      	bne.n	8010774 <__gethex+0x2f0>
 801074e:	9a04      	ldr	r2, [sp, #16]
 8010750:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010754:	6013      	str	r3, [r2, #0]
 8010756:	2301      	movs	r3, #1
 8010758:	6123      	str	r3, [r4, #16]
 801075a:	f8c9 3000 	str.w	r3, [r9]
 801075e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010760:	2762      	movs	r7, #98	; 0x62
 8010762:	601c      	str	r4, [r3, #0]
 8010764:	e723      	b.n	80105ae <__gethex+0x12a>
 8010766:	bf00      	nop
 8010768:	08012938 	.word	0x08012938
 801076c:	080128c0 	.word	0x080128c0
 8010770:	080128d1 	.word	0x080128d1
 8010774:	1e71      	subs	r1, r6, #1
 8010776:	4620      	mov	r0, r4
 8010778:	f000 fe4a 	bl	8011410 <__any_on>
 801077c:	2800      	cmp	r0, #0
 801077e:	d1e6      	bne.n	801074e <__gethex+0x2ca>
 8010780:	ee18 0a10 	vmov	r0, s16
 8010784:	4621      	mov	r1, r4
 8010786:	f000 f9e3 	bl	8010b50 <_Bfree>
 801078a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801078c:	2300      	movs	r3, #0
 801078e:	6013      	str	r3, [r2, #0]
 8010790:	2750      	movs	r7, #80	; 0x50
 8010792:	e70c      	b.n	80105ae <__gethex+0x12a>
 8010794:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010796:	2b00      	cmp	r3, #0
 8010798:	d1f2      	bne.n	8010780 <__gethex+0x2fc>
 801079a:	e7d8      	b.n	801074e <__gethex+0x2ca>
 801079c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d1d5      	bne.n	801074e <__gethex+0x2ca>
 80107a2:	e7ed      	b.n	8010780 <__gethex+0x2fc>
 80107a4:	1e6f      	subs	r7, r5, #1
 80107a6:	f1ba 0f00 	cmp.w	sl, #0
 80107aa:	d131      	bne.n	8010810 <__gethex+0x38c>
 80107ac:	b127      	cbz	r7, 80107b8 <__gethex+0x334>
 80107ae:	4639      	mov	r1, r7
 80107b0:	4620      	mov	r0, r4
 80107b2:	f000 fe2d 	bl	8011410 <__any_on>
 80107b6:	4682      	mov	sl, r0
 80107b8:	117b      	asrs	r3, r7, #5
 80107ba:	2101      	movs	r1, #1
 80107bc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80107c0:	f007 071f 	and.w	r7, r7, #31
 80107c4:	fa01 f707 	lsl.w	r7, r1, r7
 80107c8:	421f      	tst	r7, r3
 80107ca:	4629      	mov	r1, r5
 80107cc:	4620      	mov	r0, r4
 80107ce:	bf18      	it	ne
 80107d0:	f04a 0a02 	orrne.w	sl, sl, #2
 80107d4:	1b76      	subs	r6, r6, r5
 80107d6:	f7ff fded 	bl	80103b4 <rshift>
 80107da:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80107de:	2702      	movs	r7, #2
 80107e0:	f1ba 0f00 	cmp.w	sl, #0
 80107e4:	d048      	beq.n	8010878 <__gethex+0x3f4>
 80107e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80107ea:	2b02      	cmp	r3, #2
 80107ec:	d015      	beq.n	801081a <__gethex+0x396>
 80107ee:	2b03      	cmp	r3, #3
 80107f0:	d017      	beq.n	8010822 <__gethex+0x39e>
 80107f2:	2b01      	cmp	r3, #1
 80107f4:	d109      	bne.n	801080a <__gethex+0x386>
 80107f6:	f01a 0f02 	tst.w	sl, #2
 80107fa:	d006      	beq.n	801080a <__gethex+0x386>
 80107fc:	f8d9 0000 	ldr.w	r0, [r9]
 8010800:	ea4a 0a00 	orr.w	sl, sl, r0
 8010804:	f01a 0f01 	tst.w	sl, #1
 8010808:	d10e      	bne.n	8010828 <__gethex+0x3a4>
 801080a:	f047 0710 	orr.w	r7, r7, #16
 801080e:	e033      	b.n	8010878 <__gethex+0x3f4>
 8010810:	f04f 0a01 	mov.w	sl, #1
 8010814:	e7d0      	b.n	80107b8 <__gethex+0x334>
 8010816:	2701      	movs	r7, #1
 8010818:	e7e2      	b.n	80107e0 <__gethex+0x35c>
 801081a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801081c:	f1c3 0301 	rsb	r3, r3, #1
 8010820:	9315      	str	r3, [sp, #84]	; 0x54
 8010822:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010824:	2b00      	cmp	r3, #0
 8010826:	d0f0      	beq.n	801080a <__gethex+0x386>
 8010828:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801082c:	f104 0314 	add.w	r3, r4, #20
 8010830:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010834:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010838:	f04f 0c00 	mov.w	ip, #0
 801083c:	4618      	mov	r0, r3
 801083e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010842:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010846:	d01c      	beq.n	8010882 <__gethex+0x3fe>
 8010848:	3201      	adds	r2, #1
 801084a:	6002      	str	r2, [r0, #0]
 801084c:	2f02      	cmp	r7, #2
 801084e:	f104 0314 	add.w	r3, r4, #20
 8010852:	d13f      	bne.n	80108d4 <__gethex+0x450>
 8010854:	f8d8 2000 	ldr.w	r2, [r8]
 8010858:	3a01      	subs	r2, #1
 801085a:	42b2      	cmp	r2, r6
 801085c:	d10a      	bne.n	8010874 <__gethex+0x3f0>
 801085e:	1171      	asrs	r1, r6, #5
 8010860:	2201      	movs	r2, #1
 8010862:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010866:	f006 061f 	and.w	r6, r6, #31
 801086a:	fa02 f606 	lsl.w	r6, r2, r6
 801086e:	421e      	tst	r6, r3
 8010870:	bf18      	it	ne
 8010872:	4617      	movne	r7, r2
 8010874:	f047 0720 	orr.w	r7, r7, #32
 8010878:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801087a:	601c      	str	r4, [r3, #0]
 801087c:	9b04      	ldr	r3, [sp, #16]
 801087e:	601d      	str	r5, [r3, #0]
 8010880:	e695      	b.n	80105ae <__gethex+0x12a>
 8010882:	4299      	cmp	r1, r3
 8010884:	f843 cc04 	str.w	ip, [r3, #-4]
 8010888:	d8d8      	bhi.n	801083c <__gethex+0x3b8>
 801088a:	68a3      	ldr	r3, [r4, #8]
 801088c:	459b      	cmp	fp, r3
 801088e:	db19      	blt.n	80108c4 <__gethex+0x440>
 8010890:	6861      	ldr	r1, [r4, #4]
 8010892:	ee18 0a10 	vmov	r0, s16
 8010896:	3101      	adds	r1, #1
 8010898:	f000 f91a 	bl	8010ad0 <_Balloc>
 801089c:	4681      	mov	r9, r0
 801089e:	b918      	cbnz	r0, 80108a8 <__gethex+0x424>
 80108a0:	4b1a      	ldr	r3, [pc, #104]	; (801090c <__gethex+0x488>)
 80108a2:	4602      	mov	r2, r0
 80108a4:	2184      	movs	r1, #132	; 0x84
 80108a6:	e6a8      	b.n	80105fa <__gethex+0x176>
 80108a8:	6922      	ldr	r2, [r4, #16]
 80108aa:	3202      	adds	r2, #2
 80108ac:	f104 010c 	add.w	r1, r4, #12
 80108b0:	0092      	lsls	r2, r2, #2
 80108b2:	300c      	adds	r0, #12
 80108b4:	f7fd f996 	bl	800dbe4 <memcpy>
 80108b8:	4621      	mov	r1, r4
 80108ba:	ee18 0a10 	vmov	r0, s16
 80108be:	f000 f947 	bl	8010b50 <_Bfree>
 80108c2:	464c      	mov	r4, r9
 80108c4:	6923      	ldr	r3, [r4, #16]
 80108c6:	1c5a      	adds	r2, r3, #1
 80108c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80108cc:	6122      	str	r2, [r4, #16]
 80108ce:	2201      	movs	r2, #1
 80108d0:	615a      	str	r2, [r3, #20]
 80108d2:	e7bb      	b.n	801084c <__gethex+0x3c8>
 80108d4:	6922      	ldr	r2, [r4, #16]
 80108d6:	455a      	cmp	r2, fp
 80108d8:	dd0b      	ble.n	80108f2 <__gethex+0x46e>
 80108da:	2101      	movs	r1, #1
 80108dc:	4620      	mov	r0, r4
 80108de:	f7ff fd69 	bl	80103b4 <rshift>
 80108e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80108e6:	3501      	adds	r5, #1
 80108e8:	42ab      	cmp	r3, r5
 80108ea:	f6ff aed0 	blt.w	801068e <__gethex+0x20a>
 80108ee:	2701      	movs	r7, #1
 80108f0:	e7c0      	b.n	8010874 <__gethex+0x3f0>
 80108f2:	f016 061f 	ands.w	r6, r6, #31
 80108f6:	d0fa      	beq.n	80108ee <__gethex+0x46a>
 80108f8:	4453      	add	r3, sl
 80108fa:	f1c6 0620 	rsb	r6, r6, #32
 80108fe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010902:	f000 f9d7 	bl	8010cb4 <__hi0bits>
 8010906:	42b0      	cmp	r0, r6
 8010908:	dbe7      	blt.n	80108da <__gethex+0x456>
 801090a:	e7f0      	b.n	80108ee <__gethex+0x46a>
 801090c:	080128c0 	.word	0x080128c0

08010910 <L_shift>:
 8010910:	f1c2 0208 	rsb	r2, r2, #8
 8010914:	0092      	lsls	r2, r2, #2
 8010916:	b570      	push	{r4, r5, r6, lr}
 8010918:	f1c2 0620 	rsb	r6, r2, #32
 801091c:	6843      	ldr	r3, [r0, #4]
 801091e:	6804      	ldr	r4, [r0, #0]
 8010920:	fa03 f506 	lsl.w	r5, r3, r6
 8010924:	432c      	orrs	r4, r5
 8010926:	40d3      	lsrs	r3, r2
 8010928:	6004      	str	r4, [r0, #0]
 801092a:	f840 3f04 	str.w	r3, [r0, #4]!
 801092e:	4288      	cmp	r0, r1
 8010930:	d3f4      	bcc.n	801091c <L_shift+0xc>
 8010932:	bd70      	pop	{r4, r5, r6, pc}

08010934 <__match>:
 8010934:	b530      	push	{r4, r5, lr}
 8010936:	6803      	ldr	r3, [r0, #0]
 8010938:	3301      	adds	r3, #1
 801093a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801093e:	b914      	cbnz	r4, 8010946 <__match+0x12>
 8010940:	6003      	str	r3, [r0, #0]
 8010942:	2001      	movs	r0, #1
 8010944:	bd30      	pop	{r4, r5, pc}
 8010946:	f813 2b01 	ldrb.w	r2, [r3], #1
 801094a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801094e:	2d19      	cmp	r5, #25
 8010950:	bf98      	it	ls
 8010952:	3220      	addls	r2, #32
 8010954:	42a2      	cmp	r2, r4
 8010956:	d0f0      	beq.n	801093a <__match+0x6>
 8010958:	2000      	movs	r0, #0
 801095a:	e7f3      	b.n	8010944 <__match+0x10>

0801095c <__hexnan>:
 801095c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010960:	680b      	ldr	r3, [r1, #0]
 8010962:	115e      	asrs	r6, r3, #5
 8010964:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010968:	f013 031f 	ands.w	r3, r3, #31
 801096c:	b087      	sub	sp, #28
 801096e:	bf18      	it	ne
 8010970:	3604      	addne	r6, #4
 8010972:	2500      	movs	r5, #0
 8010974:	1f37      	subs	r7, r6, #4
 8010976:	4690      	mov	r8, r2
 8010978:	6802      	ldr	r2, [r0, #0]
 801097a:	9301      	str	r3, [sp, #4]
 801097c:	4682      	mov	sl, r0
 801097e:	f846 5c04 	str.w	r5, [r6, #-4]
 8010982:	46b9      	mov	r9, r7
 8010984:	463c      	mov	r4, r7
 8010986:	9502      	str	r5, [sp, #8]
 8010988:	46ab      	mov	fp, r5
 801098a:	7851      	ldrb	r1, [r2, #1]
 801098c:	1c53      	adds	r3, r2, #1
 801098e:	9303      	str	r3, [sp, #12]
 8010990:	b341      	cbz	r1, 80109e4 <__hexnan+0x88>
 8010992:	4608      	mov	r0, r1
 8010994:	9205      	str	r2, [sp, #20]
 8010996:	9104      	str	r1, [sp, #16]
 8010998:	f7ff fd5e 	bl	8010458 <__hexdig_fun>
 801099c:	2800      	cmp	r0, #0
 801099e:	d14f      	bne.n	8010a40 <__hexnan+0xe4>
 80109a0:	9904      	ldr	r1, [sp, #16]
 80109a2:	9a05      	ldr	r2, [sp, #20]
 80109a4:	2920      	cmp	r1, #32
 80109a6:	d818      	bhi.n	80109da <__hexnan+0x7e>
 80109a8:	9b02      	ldr	r3, [sp, #8]
 80109aa:	459b      	cmp	fp, r3
 80109ac:	dd13      	ble.n	80109d6 <__hexnan+0x7a>
 80109ae:	454c      	cmp	r4, r9
 80109b0:	d206      	bcs.n	80109c0 <__hexnan+0x64>
 80109b2:	2d07      	cmp	r5, #7
 80109b4:	dc04      	bgt.n	80109c0 <__hexnan+0x64>
 80109b6:	462a      	mov	r2, r5
 80109b8:	4649      	mov	r1, r9
 80109ba:	4620      	mov	r0, r4
 80109bc:	f7ff ffa8 	bl	8010910 <L_shift>
 80109c0:	4544      	cmp	r4, r8
 80109c2:	d950      	bls.n	8010a66 <__hexnan+0x10a>
 80109c4:	2300      	movs	r3, #0
 80109c6:	f1a4 0904 	sub.w	r9, r4, #4
 80109ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80109ce:	f8cd b008 	str.w	fp, [sp, #8]
 80109d2:	464c      	mov	r4, r9
 80109d4:	461d      	mov	r5, r3
 80109d6:	9a03      	ldr	r2, [sp, #12]
 80109d8:	e7d7      	b.n	801098a <__hexnan+0x2e>
 80109da:	2929      	cmp	r1, #41	; 0x29
 80109dc:	d156      	bne.n	8010a8c <__hexnan+0x130>
 80109de:	3202      	adds	r2, #2
 80109e0:	f8ca 2000 	str.w	r2, [sl]
 80109e4:	f1bb 0f00 	cmp.w	fp, #0
 80109e8:	d050      	beq.n	8010a8c <__hexnan+0x130>
 80109ea:	454c      	cmp	r4, r9
 80109ec:	d206      	bcs.n	80109fc <__hexnan+0xa0>
 80109ee:	2d07      	cmp	r5, #7
 80109f0:	dc04      	bgt.n	80109fc <__hexnan+0xa0>
 80109f2:	462a      	mov	r2, r5
 80109f4:	4649      	mov	r1, r9
 80109f6:	4620      	mov	r0, r4
 80109f8:	f7ff ff8a 	bl	8010910 <L_shift>
 80109fc:	4544      	cmp	r4, r8
 80109fe:	d934      	bls.n	8010a6a <__hexnan+0x10e>
 8010a00:	f1a8 0204 	sub.w	r2, r8, #4
 8010a04:	4623      	mov	r3, r4
 8010a06:	f853 1b04 	ldr.w	r1, [r3], #4
 8010a0a:	f842 1f04 	str.w	r1, [r2, #4]!
 8010a0e:	429f      	cmp	r7, r3
 8010a10:	d2f9      	bcs.n	8010a06 <__hexnan+0xaa>
 8010a12:	1b3b      	subs	r3, r7, r4
 8010a14:	f023 0303 	bic.w	r3, r3, #3
 8010a18:	3304      	adds	r3, #4
 8010a1a:	3401      	adds	r4, #1
 8010a1c:	3e03      	subs	r6, #3
 8010a1e:	42b4      	cmp	r4, r6
 8010a20:	bf88      	it	hi
 8010a22:	2304      	movhi	r3, #4
 8010a24:	4443      	add	r3, r8
 8010a26:	2200      	movs	r2, #0
 8010a28:	f843 2b04 	str.w	r2, [r3], #4
 8010a2c:	429f      	cmp	r7, r3
 8010a2e:	d2fb      	bcs.n	8010a28 <__hexnan+0xcc>
 8010a30:	683b      	ldr	r3, [r7, #0]
 8010a32:	b91b      	cbnz	r3, 8010a3c <__hexnan+0xe0>
 8010a34:	4547      	cmp	r7, r8
 8010a36:	d127      	bne.n	8010a88 <__hexnan+0x12c>
 8010a38:	2301      	movs	r3, #1
 8010a3a:	603b      	str	r3, [r7, #0]
 8010a3c:	2005      	movs	r0, #5
 8010a3e:	e026      	b.n	8010a8e <__hexnan+0x132>
 8010a40:	3501      	adds	r5, #1
 8010a42:	2d08      	cmp	r5, #8
 8010a44:	f10b 0b01 	add.w	fp, fp, #1
 8010a48:	dd06      	ble.n	8010a58 <__hexnan+0xfc>
 8010a4a:	4544      	cmp	r4, r8
 8010a4c:	d9c3      	bls.n	80109d6 <__hexnan+0x7a>
 8010a4e:	2300      	movs	r3, #0
 8010a50:	f844 3c04 	str.w	r3, [r4, #-4]
 8010a54:	2501      	movs	r5, #1
 8010a56:	3c04      	subs	r4, #4
 8010a58:	6822      	ldr	r2, [r4, #0]
 8010a5a:	f000 000f 	and.w	r0, r0, #15
 8010a5e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010a62:	6022      	str	r2, [r4, #0]
 8010a64:	e7b7      	b.n	80109d6 <__hexnan+0x7a>
 8010a66:	2508      	movs	r5, #8
 8010a68:	e7b5      	b.n	80109d6 <__hexnan+0x7a>
 8010a6a:	9b01      	ldr	r3, [sp, #4]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d0df      	beq.n	8010a30 <__hexnan+0xd4>
 8010a70:	f04f 32ff 	mov.w	r2, #4294967295
 8010a74:	f1c3 0320 	rsb	r3, r3, #32
 8010a78:	fa22 f303 	lsr.w	r3, r2, r3
 8010a7c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010a80:	401a      	ands	r2, r3
 8010a82:	f846 2c04 	str.w	r2, [r6, #-4]
 8010a86:	e7d3      	b.n	8010a30 <__hexnan+0xd4>
 8010a88:	3f04      	subs	r7, #4
 8010a8a:	e7d1      	b.n	8010a30 <__hexnan+0xd4>
 8010a8c:	2004      	movs	r0, #4
 8010a8e:	b007      	add	sp, #28
 8010a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010a94 <_localeconv_r>:
 8010a94:	4800      	ldr	r0, [pc, #0]	; (8010a98 <_localeconv_r+0x4>)
 8010a96:	4770      	bx	lr
 8010a98:	20000268 	.word	0x20000268

08010a9c <malloc>:
 8010a9c:	4b02      	ldr	r3, [pc, #8]	; (8010aa8 <malloc+0xc>)
 8010a9e:	4601      	mov	r1, r0
 8010aa0:	6818      	ldr	r0, [r3, #0]
 8010aa2:	f000 bd59 	b.w	8011558 <_malloc_r>
 8010aa6:	bf00      	nop
 8010aa8:	20000110 	.word	0x20000110

08010aac <__ascii_mbtowc>:
 8010aac:	b082      	sub	sp, #8
 8010aae:	b901      	cbnz	r1, 8010ab2 <__ascii_mbtowc+0x6>
 8010ab0:	a901      	add	r1, sp, #4
 8010ab2:	b142      	cbz	r2, 8010ac6 <__ascii_mbtowc+0x1a>
 8010ab4:	b14b      	cbz	r3, 8010aca <__ascii_mbtowc+0x1e>
 8010ab6:	7813      	ldrb	r3, [r2, #0]
 8010ab8:	600b      	str	r3, [r1, #0]
 8010aba:	7812      	ldrb	r2, [r2, #0]
 8010abc:	1e10      	subs	r0, r2, #0
 8010abe:	bf18      	it	ne
 8010ac0:	2001      	movne	r0, #1
 8010ac2:	b002      	add	sp, #8
 8010ac4:	4770      	bx	lr
 8010ac6:	4610      	mov	r0, r2
 8010ac8:	e7fb      	b.n	8010ac2 <__ascii_mbtowc+0x16>
 8010aca:	f06f 0001 	mvn.w	r0, #1
 8010ace:	e7f8      	b.n	8010ac2 <__ascii_mbtowc+0x16>

08010ad0 <_Balloc>:
 8010ad0:	b570      	push	{r4, r5, r6, lr}
 8010ad2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010ad4:	4604      	mov	r4, r0
 8010ad6:	460d      	mov	r5, r1
 8010ad8:	b976      	cbnz	r6, 8010af8 <_Balloc+0x28>
 8010ada:	2010      	movs	r0, #16
 8010adc:	f7ff ffde 	bl	8010a9c <malloc>
 8010ae0:	4602      	mov	r2, r0
 8010ae2:	6260      	str	r0, [r4, #36]	; 0x24
 8010ae4:	b920      	cbnz	r0, 8010af0 <_Balloc+0x20>
 8010ae6:	4b18      	ldr	r3, [pc, #96]	; (8010b48 <_Balloc+0x78>)
 8010ae8:	4818      	ldr	r0, [pc, #96]	; (8010b4c <_Balloc+0x7c>)
 8010aea:	2166      	movs	r1, #102	; 0x66
 8010aec:	f000 ff3e 	bl	801196c <__assert_func>
 8010af0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010af4:	6006      	str	r6, [r0, #0]
 8010af6:	60c6      	str	r6, [r0, #12]
 8010af8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010afa:	68f3      	ldr	r3, [r6, #12]
 8010afc:	b183      	cbz	r3, 8010b20 <_Balloc+0x50>
 8010afe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b00:	68db      	ldr	r3, [r3, #12]
 8010b02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010b06:	b9b8      	cbnz	r0, 8010b38 <_Balloc+0x68>
 8010b08:	2101      	movs	r1, #1
 8010b0a:	fa01 f605 	lsl.w	r6, r1, r5
 8010b0e:	1d72      	adds	r2, r6, #5
 8010b10:	0092      	lsls	r2, r2, #2
 8010b12:	4620      	mov	r0, r4
 8010b14:	f000 fc9d 	bl	8011452 <_calloc_r>
 8010b18:	b160      	cbz	r0, 8010b34 <_Balloc+0x64>
 8010b1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010b1e:	e00e      	b.n	8010b3e <_Balloc+0x6e>
 8010b20:	2221      	movs	r2, #33	; 0x21
 8010b22:	2104      	movs	r1, #4
 8010b24:	4620      	mov	r0, r4
 8010b26:	f000 fc94 	bl	8011452 <_calloc_r>
 8010b2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b2c:	60f0      	str	r0, [r6, #12]
 8010b2e:	68db      	ldr	r3, [r3, #12]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d1e4      	bne.n	8010afe <_Balloc+0x2e>
 8010b34:	2000      	movs	r0, #0
 8010b36:	bd70      	pop	{r4, r5, r6, pc}
 8010b38:	6802      	ldr	r2, [r0, #0]
 8010b3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010b3e:	2300      	movs	r3, #0
 8010b40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010b44:	e7f7      	b.n	8010b36 <_Balloc+0x66>
 8010b46:	bf00      	nop
 8010b48:	0801284e 	.word	0x0801284e
 8010b4c:	0801294c 	.word	0x0801294c

08010b50 <_Bfree>:
 8010b50:	b570      	push	{r4, r5, r6, lr}
 8010b52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010b54:	4605      	mov	r5, r0
 8010b56:	460c      	mov	r4, r1
 8010b58:	b976      	cbnz	r6, 8010b78 <_Bfree+0x28>
 8010b5a:	2010      	movs	r0, #16
 8010b5c:	f7ff ff9e 	bl	8010a9c <malloc>
 8010b60:	4602      	mov	r2, r0
 8010b62:	6268      	str	r0, [r5, #36]	; 0x24
 8010b64:	b920      	cbnz	r0, 8010b70 <_Bfree+0x20>
 8010b66:	4b09      	ldr	r3, [pc, #36]	; (8010b8c <_Bfree+0x3c>)
 8010b68:	4809      	ldr	r0, [pc, #36]	; (8010b90 <_Bfree+0x40>)
 8010b6a:	218a      	movs	r1, #138	; 0x8a
 8010b6c:	f000 fefe 	bl	801196c <__assert_func>
 8010b70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010b74:	6006      	str	r6, [r0, #0]
 8010b76:	60c6      	str	r6, [r0, #12]
 8010b78:	b13c      	cbz	r4, 8010b8a <_Bfree+0x3a>
 8010b7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010b7c:	6862      	ldr	r2, [r4, #4]
 8010b7e:	68db      	ldr	r3, [r3, #12]
 8010b80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010b84:	6021      	str	r1, [r4, #0]
 8010b86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010b8a:	bd70      	pop	{r4, r5, r6, pc}
 8010b8c:	0801284e 	.word	0x0801284e
 8010b90:	0801294c 	.word	0x0801294c

08010b94 <__multadd>:
 8010b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b98:	690d      	ldr	r5, [r1, #16]
 8010b9a:	4607      	mov	r7, r0
 8010b9c:	460c      	mov	r4, r1
 8010b9e:	461e      	mov	r6, r3
 8010ba0:	f101 0c14 	add.w	ip, r1, #20
 8010ba4:	2000      	movs	r0, #0
 8010ba6:	f8dc 3000 	ldr.w	r3, [ip]
 8010baa:	b299      	uxth	r1, r3
 8010bac:	fb02 6101 	mla	r1, r2, r1, r6
 8010bb0:	0c1e      	lsrs	r6, r3, #16
 8010bb2:	0c0b      	lsrs	r3, r1, #16
 8010bb4:	fb02 3306 	mla	r3, r2, r6, r3
 8010bb8:	b289      	uxth	r1, r1
 8010bba:	3001      	adds	r0, #1
 8010bbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010bc0:	4285      	cmp	r5, r0
 8010bc2:	f84c 1b04 	str.w	r1, [ip], #4
 8010bc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010bca:	dcec      	bgt.n	8010ba6 <__multadd+0x12>
 8010bcc:	b30e      	cbz	r6, 8010c12 <__multadd+0x7e>
 8010bce:	68a3      	ldr	r3, [r4, #8]
 8010bd0:	42ab      	cmp	r3, r5
 8010bd2:	dc19      	bgt.n	8010c08 <__multadd+0x74>
 8010bd4:	6861      	ldr	r1, [r4, #4]
 8010bd6:	4638      	mov	r0, r7
 8010bd8:	3101      	adds	r1, #1
 8010bda:	f7ff ff79 	bl	8010ad0 <_Balloc>
 8010bde:	4680      	mov	r8, r0
 8010be0:	b928      	cbnz	r0, 8010bee <__multadd+0x5a>
 8010be2:	4602      	mov	r2, r0
 8010be4:	4b0c      	ldr	r3, [pc, #48]	; (8010c18 <__multadd+0x84>)
 8010be6:	480d      	ldr	r0, [pc, #52]	; (8010c1c <__multadd+0x88>)
 8010be8:	21b5      	movs	r1, #181	; 0xb5
 8010bea:	f000 febf 	bl	801196c <__assert_func>
 8010bee:	6922      	ldr	r2, [r4, #16]
 8010bf0:	3202      	adds	r2, #2
 8010bf2:	f104 010c 	add.w	r1, r4, #12
 8010bf6:	0092      	lsls	r2, r2, #2
 8010bf8:	300c      	adds	r0, #12
 8010bfa:	f7fc fff3 	bl	800dbe4 <memcpy>
 8010bfe:	4621      	mov	r1, r4
 8010c00:	4638      	mov	r0, r7
 8010c02:	f7ff ffa5 	bl	8010b50 <_Bfree>
 8010c06:	4644      	mov	r4, r8
 8010c08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010c0c:	3501      	adds	r5, #1
 8010c0e:	615e      	str	r6, [r3, #20]
 8010c10:	6125      	str	r5, [r4, #16]
 8010c12:	4620      	mov	r0, r4
 8010c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c18:	080128c0 	.word	0x080128c0
 8010c1c:	0801294c 	.word	0x0801294c

08010c20 <__s2b>:
 8010c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c24:	460c      	mov	r4, r1
 8010c26:	4615      	mov	r5, r2
 8010c28:	461f      	mov	r7, r3
 8010c2a:	2209      	movs	r2, #9
 8010c2c:	3308      	adds	r3, #8
 8010c2e:	4606      	mov	r6, r0
 8010c30:	fb93 f3f2 	sdiv	r3, r3, r2
 8010c34:	2100      	movs	r1, #0
 8010c36:	2201      	movs	r2, #1
 8010c38:	429a      	cmp	r2, r3
 8010c3a:	db09      	blt.n	8010c50 <__s2b+0x30>
 8010c3c:	4630      	mov	r0, r6
 8010c3e:	f7ff ff47 	bl	8010ad0 <_Balloc>
 8010c42:	b940      	cbnz	r0, 8010c56 <__s2b+0x36>
 8010c44:	4602      	mov	r2, r0
 8010c46:	4b19      	ldr	r3, [pc, #100]	; (8010cac <__s2b+0x8c>)
 8010c48:	4819      	ldr	r0, [pc, #100]	; (8010cb0 <__s2b+0x90>)
 8010c4a:	21ce      	movs	r1, #206	; 0xce
 8010c4c:	f000 fe8e 	bl	801196c <__assert_func>
 8010c50:	0052      	lsls	r2, r2, #1
 8010c52:	3101      	adds	r1, #1
 8010c54:	e7f0      	b.n	8010c38 <__s2b+0x18>
 8010c56:	9b08      	ldr	r3, [sp, #32]
 8010c58:	6143      	str	r3, [r0, #20]
 8010c5a:	2d09      	cmp	r5, #9
 8010c5c:	f04f 0301 	mov.w	r3, #1
 8010c60:	6103      	str	r3, [r0, #16]
 8010c62:	dd16      	ble.n	8010c92 <__s2b+0x72>
 8010c64:	f104 0909 	add.w	r9, r4, #9
 8010c68:	46c8      	mov	r8, r9
 8010c6a:	442c      	add	r4, r5
 8010c6c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010c70:	4601      	mov	r1, r0
 8010c72:	3b30      	subs	r3, #48	; 0x30
 8010c74:	220a      	movs	r2, #10
 8010c76:	4630      	mov	r0, r6
 8010c78:	f7ff ff8c 	bl	8010b94 <__multadd>
 8010c7c:	45a0      	cmp	r8, r4
 8010c7e:	d1f5      	bne.n	8010c6c <__s2b+0x4c>
 8010c80:	f1a5 0408 	sub.w	r4, r5, #8
 8010c84:	444c      	add	r4, r9
 8010c86:	1b2d      	subs	r5, r5, r4
 8010c88:	1963      	adds	r3, r4, r5
 8010c8a:	42bb      	cmp	r3, r7
 8010c8c:	db04      	blt.n	8010c98 <__s2b+0x78>
 8010c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c92:	340a      	adds	r4, #10
 8010c94:	2509      	movs	r5, #9
 8010c96:	e7f6      	b.n	8010c86 <__s2b+0x66>
 8010c98:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010c9c:	4601      	mov	r1, r0
 8010c9e:	3b30      	subs	r3, #48	; 0x30
 8010ca0:	220a      	movs	r2, #10
 8010ca2:	4630      	mov	r0, r6
 8010ca4:	f7ff ff76 	bl	8010b94 <__multadd>
 8010ca8:	e7ee      	b.n	8010c88 <__s2b+0x68>
 8010caa:	bf00      	nop
 8010cac:	080128c0 	.word	0x080128c0
 8010cb0:	0801294c 	.word	0x0801294c

08010cb4 <__hi0bits>:
 8010cb4:	0c03      	lsrs	r3, r0, #16
 8010cb6:	041b      	lsls	r3, r3, #16
 8010cb8:	b9d3      	cbnz	r3, 8010cf0 <__hi0bits+0x3c>
 8010cba:	0400      	lsls	r0, r0, #16
 8010cbc:	2310      	movs	r3, #16
 8010cbe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010cc2:	bf04      	itt	eq
 8010cc4:	0200      	lsleq	r0, r0, #8
 8010cc6:	3308      	addeq	r3, #8
 8010cc8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010ccc:	bf04      	itt	eq
 8010cce:	0100      	lsleq	r0, r0, #4
 8010cd0:	3304      	addeq	r3, #4
 8010cd2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010cd6:	bf04      	itt	eq
 8010cd8:	0080      	lsleq	r0, r0, #2
 8010cda:	3302      	addeq	r3, #2
 8010cdc:	2800      	cmp	r0, #0
 8010cde:	db05      	blt.n	8010cec <__hi0bits+0x38>
 8010ce0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010ce4:	f103 0301 	add.w	r3, r3, #1
 8010ce8:	bf08      	it	eq
 8010cea:	2320      	moveq	r3, #32
 8010cec:	4618      	mov	r0, r3
 8010cee:	4770      	bx	lr
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	e7e4      	b.n	8010cbe <__hi0bits+0xa>

08010cf4 <__lo0bits>:
 8010cf4:	6803      	ldr	r3, [r0, #0]
 8010cf6:	f013 0207 	ands.w	r2, r3, #7
 8010cfa:	4601      	mov	r1, r0
 8010cfc:	d00b      	beq.n	8010d16 <__lo0bits+0x22>
 8010cfe:	07da      	lsls	r2, r3, #31
 8010d00:	d423      	bmi.n	8010d4a <__lo0bits+0x56>
 8010d02:	0798      	lsls	r0, r3, #30
 8010d04:	bf49      	itett	mi
 8010d06:	085b      	lsrmi	r3, r3, #1
 8010d08:	089b      	lsrpl	r3, r3, #2
 8010d0a:	2001      	movmi	r0, #1
 8010d0c:	600b      	strmi	r3, [r1, #0]
 8010d0e:	bf5c      	itt	pl
 8010d10:	600b      	strpl	r3, [r1, #0]
 8010d12:	2002      	movpl	r0, #2
 8010d14:	4770      	bx	lr
 8010d16:	b298      	uxth	r0, r3
 8010d18:	b9a8      	cbnz	r0, 8010d46 <__lo0bits+0x52>
 8010d1a:	0c1b      	lsrs	r3, r3, #16
 8010d1c:	2010      	movs	r0, #16
 8010d1e:	b2da      	uxtb	r2, r3
 8010d20:	b90a      	cbnz	r2, 8010d26 <__lo0bits+0x32>
 8010d22:	3008      	adds	r0, #8
 8010d24:	0a1b      	lsrs	r3, r3, #8
 8010d26:	071a      	lsls	r2, r3, #28
 8010d28:	bf04      	itt	eq
 8010d2a:	091b      	lsreq	r3, r3, #4
 8010d2c:	3004      	addeq	r0, #4
 8010d2e:	079a      	lsls	r2, r3, #30
 8010d30:	bf04      	itt	eq
 8010d32:	089b      	lsreq	r3, r3, #2
 8010d34:	3002      	addeq	r0, #2
 8010d36:	07da      	lsls	r2, r3, #31
 8010d38:	d403      	bmi.n	8010d42 <__lo0bits+0x4e>
 8010d3a:	085b      	lsrs	r3, r3, #1
 8010d3c:	f100 0001 	add.w	r0, r0, #1
 8010d40:	d005      	beq.n	8010d4e <__lo0bits+0x5a>
 8010d42:	600b      	str	r3, [r1, #0]
 8010d44:	4770      	bx	lr
 8010d46:	4610      	mov	r0, r2
 8010d48:	e7e9      	b.n	8010d1e <__lo0bits+0x2a>
 8010d4a:	2000      	movs	r0, #0
 8010d4c:	4770      	bx	lr
 8010d4e:	2020      	movs	r0, #32
 8010d50:	4770      	bx	lr
	...

08010d54 <__i2b>:
 8010d54:	b510      	push	{r4, lr}
 8010d56:	460c      	mov	r4, r1
 8010d58:	2101      	movs	r1, #1
 8010d5a:	f7ff feb9 	bl	8010ad0 <_Balloc>
 8010d5e:	4602      	mov	r2, r0
 8010d60:	b928      	cbnz	r0, 8010d6e <__i2b+0x1a>
 8010d62:	4b05      	ldr	r3, [pc, #20]	; (8010d78 <__i2b+0x24>)
 8010d64:	4805      	ldr	r0, [pc, #20]	; (8010d7c <__i2b+0x28>)
 8010d66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010d6a:	f000 fdff 	bl	801196c <__assert_func>
 8010d6e:	2301      	movs	r3, #1
 8010d70:	6144      	str	r4, [r0, #20]
 8010d72:	6103      	str	r3, [r0, #16]
 8010d74:	bd10      	pop	{r4, pc}
 8010d76:	bf00      	nop
 8010d78:	080128c0 	.word	0x080128c0
 8010d7c:	0801294c 	.word	0x0801294c

08010d80 <__multiply>:
 8010d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d84:	4691      	mov	r9, r2
 8010d86:	690a      	ldr	r2, [r1, #16]
 8010d88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010d8c:	429a      	cmp	r2, r3
 8010d8e:	bfb8      	it	lt
 8010d90:	460b      	movlt	r3, r1
 8010d92:	460c      	mov	r4, r1
 8010d94:	bfbc      	itt	lt
 8010d96:	464c      	movlt	r4, r9
 8010d98:	4699      	movlt	r9, r3
 8010d9a:	6927      	ldr	r7, [r4, #16]
 8010d9c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010da0:	68a3      	ldr	r3, [r4, #8]
 8010da2:	6861      	ldr	r1, [r4, #4]
 8010da4:	eb07 060a 	add.w	r6, r7, sl
 8010da8:	42b3      	cmp	r3, r6
 8010daa:	b085      	sub	sp, #20
 8010dac:	bfb8      	it	lt
 8010dae:	3101      	addlt	r1, #1
 8010db0:	f7ff fe8e 	bl	8010ad0 <_Balloc>
 8010db4:	b930      	cbnz	r0, 8010dc4 <__multiply+0x44>
 8010db6:	4602      	mov	r2, r0
 8010db8:	4b44      	ldr	r3, [pc, #272]	; (8010ecc <__multiply+0x14c>)
 8010dba:	4845      	ldr	r0, [pc, #276]	; (8010ed0 <__multiply+0x150>)
 8010dbc:	f240 115d 	movw	r1, #349	; 0x15d
 8010dc0:	f000 fdd4 	bl	801196c <__assert_func>
 8010dc4:	f100 0514 	add.w	r5, r0, #20
 8010dc8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010dcc:	462b      	mov	r3, r5
 8010dce:	2200      	movs	r2, #0
 8010dd0:	4543      	cmp	r3, r8
 8010dd2:	d321      	bcc.n	8010e18 <__multiply+0x98>
 8010dd4:	f104 0314 	add.w	r3, r4, #20
 8010dd8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010ddc:	f109 0314 	add.w	r3, r9, #20
 8010de0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010de4:	9202      	str	r2, [sp, #8]
 8010de6:	1b3a      	subs	r2, r7, r4
 8010de8:	3a15      	subs	r2, #21
 8010dea:	f022 0203 	bic.w	r2, r2, #3
 8010dee:	3204      	adds	r2, #4
 8010df0:	f104 0115 	add.w	r1, r4, #21
 8010df4:	428f      	cmp	r7, r1
 8010df6:	bf38      	it	cc
 8010df8:	2204      	movcc	r2, #4
 8010dfa:	9201      	str	r2, [sp, #4]
 8010dfc:	9a02      	ldr	r2, [sp, #8]
 8010dfe:	9303      	str	r3, [sp, #12]
 8010e00:	429a      	cmp	r2, r3
 8010e02:	d80c      	bhi.n	8010e1e <__multiply+0x9e>
 8010e04:	2e00      	cmp	r6, #0
 8010e06:	dd03      	ble.n	8010e10 <__multiply+0x90>
 8010e08:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d05a      	beq.n	8010ec6 <__multiply+0x146>
 8010e10:	6106      	str	r6, [r0, #16]
 8010e12:	b005      	add	sp, #20
 8010e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e18:	f843 2b04 	str.w	r2, [r3], #4
 8010e1c:	e7d8      	b.n	8010dd0 <__multiply+0x50>
 8010e1e:	f8b3 a000 	ldrh.w	sl, [r3]
 8010e22:	f1ba 0f00 	cmp.w	sl, #0
 8010e26:	d024      	beq.n	8010e72 <__multiply+0xf2>
 8010e28:	f104 0e14 	add.w	lr, r4, #20
 8010e2c:	46a9      	mov	r9, r5
 8010e2e:	f04f 0c00 	mov.w	ip, #0
 8010e32:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010e36:	f8d9 1000 	ldr.w	r1, [r9]
 8010e3a:	fa1f fb82 	uxth.w	fp, r2
 8010e3e:	b289      	uxth	r1, r1
 8010e40:	fb0a 110b 	mla	r1, sl, fp, r1
 8010e44:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010e48:	f8d9 2000 	ldr.w	r2, [r9]
 8010e4c:	4461      	add	r1, ip
 8010e4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010e52:	fb0a c20b 	mla	r2, sl, fp, ip
 8010e56:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010e5a:	b289      	uxth	r1, r1
 8010e5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010e60:	4577      	cmp	r7, lr
 8010e62:	f849 1b04 	str.w	r1, [r9], #4
 8010e66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010e6a:	d8e2      	bhi.n	8010e32 <__multiply+0xb2>
 8010e6c:	9a01      	ldr	r2, [sp, #4]
 8010e6e:	f845 c002 	str.w	ip, [r5, r2]
 8010e72:	9a03      	ldr	r2, [sp, #12]
 8010e74:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010e78:	3304      	adds	r3, #4
 8010e7a:	f1b9 0f00 	cmp.w	r9, #0
 8010e7e:	d020      	beq.n	8010ec2 <__multiply+0x142>
 8010e80:	6829      	ldr	r1, [r5, #0]
 8010e82:	f104 0c14 	add.w	ip, r4, #20
 8010e86:	46ae      	mov	lr, r5
 8010e88:	f04f 0a00 	mov.w	sl, #0
 8010e8c:	f8bc b000 	ldrh.w	fp, [ip]
 8010e90:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010e94:	fb09 220b 	mla	r2, r9, fp, r2
 8010e98:	4492      	add	sl, r2
 8010e9a:	b289      	uxth	r1, r1
 8010e9c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010ea0:	f84e 1b04 	str.w	r1, [lr], #4
 8010ea4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010ea8:	f8be 1000 	ldrh.w	r1, [lr]
 8010eac:	0c12      	lsrs	r2, r2, #16
 8010eae:	fb09 1102 	mla	r1, r9, r2, r1
 8010eb2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010eb6:	4567      	cmp	r7, ip
 8010eb8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010ebc:	d8e6      	bhi.n	8010e8c <__multiply+0x10c>
 8010ebe:	9a01      	ldr	r2, [sp, #4]
 8010ec0:	50a9      	str	r1, [r5, r2]
 8010ec2:	3504      	adds	r5, #4
 8010ec4:	e79a      	b.n	8010dfc <__multiply+0x7c>
 8010ec6:	3e01      	subs	r6, #1
 8010ec8:	e79c      	b.n	8010e04 <__multiply+0x84>
 8010eca:	bf00      	nop
 8010ecc:	080128c0 	.word	0x080128c0
 8010ed0:	0801294c 	.word	0x0801294c

08010ed4 <__pow5mult>:
 8010ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ed8:	4615      	mov	r5, r2
 8010eda:	f012 0203 	ands.w	r2, r2, #3
 8010ede:	4606      	mov	r6, r0
 8010ee0:	460f      	mov	r7, r1
 8010ee2:	d007      	beq.n	8010ef4 <__pow5mult+0x20>
 8010ee4:	4c25      	ldr	r4, [pc, #148]	; (8010f7c <__pow5mult+0xa8>)
 8010ee6:	3a01      	subs	r2, #1
 8010ee8:	2300      	movs	r3, #0
 8010eea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010eee:	f7ff fe51 	bl	8010b94 <__multadd>
 8010ef2:	4607      	mov	r7, r0
 8010ef4:	10ad      	asrs	r5, r5, #2
 8010ef6:	d03d      	beq.n	8010f74 <__pow5mult+0xa0>
 8010ef8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010efa:	b97c      	cbnz	r4, 8010f1c <__pow5mult+0x48>
 8010efc:	2010      	movs	r0, #16
 8010efe:	f7ff fdcd 	bl	8010a9c <malloc>
 8010f02:	4602      	mov	r2, r0
 8010f04:	6270      	str	r0, [r6, #36]	; 0x24
 8010f06:	b928      	cbnz	r0, 8010f14 <__pow5mult+0x40>
 8010f08:	4b1d      	ldr	r3, [pc, #116]	; (8010f80 <__pow5mult+0xac>)
 8010f0a:	481e      	ldr	r0, [pc, #120]	; (8010f84 <__pow5mult+0xb0>)
 8010f0c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010f10:	f000 fd2c 	bl	801196c <__assert_func>
 8010f14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010f18:	6004      	str	r4, [r0, #0]
 8010f1a:	60c4      	str	r4, [r0, #12]
 8010f1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010f20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010f24:	b94c      	cbnz	r4, 8010f3a <__pow5mult+0x66>
 8010f26:	f240 2171 	movw	r1, #625	; 0x271
 8010f2a:	4630      	mov	r0, r6
 8010f2c:	f7ff ff12 	bl	8010d54 <__i2b>
 8010f30:	2300      	movs	r3, #0
 8010f32:	f8c8 0008 	str.w	r0, [r8, #8]
 8010f36:	4604      	mov	r4, r0
 8010f38:	6003      	str	r3, [r0, #0]
 8010f3a:	f04f 0900 	mov.w	r9, #0
 8010f3e:	07eb      	lsls	r3, r5, #31
 8010f40:	d50a      	bpl.n	8010f58 <__pow5mult+0x84>
 8010f42:	4639      	mov	r1, r7
 8010f44:	4622      	mov	r2, r4
 8010f46:	4630      	mov	r0, r6
 8010f48:	f7ff ff1a 	bl	8010d80 <__multiply>
 8010f4c:	4639      	mov	r1, r7
 8010f4e:	4680      	mov	r8, r0
 8010f50:	4630      	mov	r0, r6
 8010f52:	f7ff fdfd 	bl	8010b50 <_Bfree>
 8010f56:	4647      	mov	r7, r8
 8010f58:	106d      	asrs	r5, r5, #1
 8010f5a:	d00b      	beq.n	8010f74 <__pow5mult+0xa0>
 8010f5c:	6820      	ldr	r0, [r4, #0]
 8010f5e:	b938      	cbnz	r0, 8010f70 <__pow5mult+0x9c>
 8010f60:	4622      	mov	r2, r4
 8010f62:	4621      	mov	r1, r4
 8010f64:	4630      	mov	r0, r6
 8010f66:	f7ff ff0b 	bl	8010d80 <__multiply>
 8010f6a:	6020      	str	r0, [r4, #0]
 8010f6c:	f8c0 9000 	str.w	r9, [r0]
 8010f70:	4604      	mov	r4, r0
 8010f72:	e7e4      	b.n	8010f3e <__pow5mult+0x6a>
 8010f74:	4638      	mov	r0, r7
 8010f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f7a:	bf00      	nop
 8010f7c:	08012a98 	.word	0x08012a98
 8010f80:	0801284e 	.word	0x0801284e
 8010f84:	0801294c 	.word	0x0801294c

08010f88 <__lshift>:
 8010f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f8c:	460c      	mov	r4, r1
 8010f8e:	6849      	ldr	r1, [r1, #4]
 8010f90:	6923      	ldr	r3, [r4, #16]
 8010f92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010f96:	68a3      	ldr	r3, [r4, #8]
 8010f98:	4607      	mov	r7, r0
 8010f9a:	4691      	mov	r9, r2
 8010f9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010fa0:	f108 0601 	add.w	r6, r8, #1
 8010fa4:	42b3      	cmp	r3, r6
 8010fa6:	db0b      	blt.n	8010fc0 <__lshift+0x38>
 8010fa8:	4638      	mov	r0, r7
 8010faa:	f7ff fd91 	bl	8010ad0 <_Balloc>
 8010fae:	4605      	mov	r5, r0
 8010fb0:	b948      	cbnz	r0, 8010fc6 <__lshift+0x3e>
 8010fb2:	4602      	mov	r2, r0
 8010fb4:	4b2a      	ldr	r3, [pc, #168]	; (8011060 <__lshift+0xd8>)
 8010fb6:	482b      	ldr	r0, [pc, #172]	; (8011064 <__lshift+0xdc>)
 8010fb8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010fbc:	f000 fcd6 	bl	801196c <__assert_func>
 8010fc0:	3101      	adds	r1, #1
 8010fc2:	005b      	lsls	r3, r3, #1
 8010fc4:	e7ee      	b.n	8010fa4 <__lshift+0x1c>
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	f100 0114 	add.w	r1, r0, #20
 8010fcc:	f100 0210 	add.w	r2, r0, #16
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	4553      	cmp	r3, sl
 8010fd4:	db37      	blt.n	8011046 <__lshift+0xbe>
 8010fd6:	6920      	ldr	r0, [r4, #16]
 8010fd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010fdc:	f104 0314 	add.w	r3, r4, #20
 8010fe0:	f019 091f 	ands.w	r9, r9, #31
 8010fe4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010fe8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010fec:	d02f      	beq.n	801104e <__lshift+0xc6>
 8010fee:	f1c9 0e20 	rsb	lr, r9, #32
 8010ff2:	468a      	mov	sl, r1
 8010ff4:	f04f 0c00 	mov.w	ip, #0
 8010ff8:	681a      	ldr	r2, [r3, #0]
 8010ffa:	fa02 f209 	lsl.w	r2, r2, r9
 8010ffe:	ea42 020c 	orr.w	r2, r2, ip
 8011002:	f84a 2b04 	str.w	r2, [sl], #4
 8011006:	f853 2b04 	ldr.w	r2, [r3], #4
 801100a:	4298      	cmp	r0, r3
 801100c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011010:	d8f2      	bhi.n	8010ff8 <__lshift+0x70>
 8011012:	1b03      	subs	r3, r0, r4
 8011014:	3b15      	subs	r3, #21
 8011016:	f023 0303 	bic.w	r3, r3, #3
 801101a:	3304      	adds	r3, #4
 801101c:	f104 0215 	add.w	r2, r4, #21
 8011020:	4290      	cmp	r0, r2
 8011022:	bf38      	it	cc
 8011024:	2304      	movcc	r3, #4
 8011026:	f841 c003 	str.w	ip, [r1, r3]
 801102a:	f1bc 0f00 	cmp.w	ip, #0
 801102e:	d001      	beq.n	8011034 <__lshift+0xac>
 8011030:	f108 0602 	add.w	r6, r8, #2
 8011034:	3e01      	subs	r6, #1
 8011036:	4638      	mov	r0, r7
 8011038:	612e      	str	r6, [r5, #16]
 801103a:	4621      	mov	r1, r4
 801103c:	f7ff fd88 	bl	8010b50 <_Bfree>
 8011040:	4628      	mov	r0, r5
 8011042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011046:	f842 0f04 	str.w	r0, [r2, #4]!
 801104a:	3301      	adds	r3, #1
 801104c:	e7c1      	b.n	8010fd2 <__lshift+0x4a>
 801104e:	3904      	subs	r1, #4
 8011050:	f853 2b04 	ldr.w	r2, [r3], #4
 8011054:	f841 2f04 	str.w	r2, [r1, #4]!
 8011058:	4298      	cmp	r0, r3
 801105a:	d8f9      	bhi.n	8011050 <__lshift+0xc8>
 801105c:	e7ea      	b.n	8011034 <__lshift+0xac>
 801105e:	bf00      	nop
 8011060:	080128c0 	.word	0x080128c0
 8011064:	0801294c 	.word	0x0801294c

08011068 <__mcmp>:
 8011068:	b530      	push	{r4, r5, lr}
 801106a:	6902      	ldr	r2, [r0, #16]
 801106c:	690c      	ldr	r4, [r1, #16]
 801106e:	1b12      	subs	r2, r2, r4
 8011070:	d10e      	bne.n	8011090 <__mcmp+0x28>
 8011072:	f100 0314 	add.w	r3, r0, #20
 8011076:	3114      	adds	r1, #20
 8011078:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801107c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011080:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011084:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011088:	42a5      	cmp	r5, r4
 801108a:	d003      	beq.n	8011094 <__mcmp+0x2c>
 801108c:	d305      	bcc.n	801109a <__mcmp+0x32>
 801108e:	2201      	movs	r2, #1
 8011090:	4610      	mov	r0, r2
 8011092:	bd30      	pop	{r4, r5, pc}
 8011094:	4283      	cmp	r3, r0
 8011096:	d3f3      	bcc.n	8011080 <__mcmp+0x18>
 8011098:	e7fa      	b.n	8011090 <__mcmp+0x28>
 801109a:	f04f 32ff 	mov.w	r2, #4294967295
 801109e:	e7f7      	b.n	8011090 <__mcmp+0x28>

080110a0 <__mdiff>:
 80110a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110a4:	460c      	mov	r4, r1
 80110a6:	4606      	mov	r6, r0
 80110a8:	4611      	mov	r1, r2
 80110aa:	4620      	mov	r0, r4
 80110ac:	4690      	mov	r8, r2
 80110ae:	f7ff ffdb 	bl	8011068 <__mcmp>
 80110b2:	1e05      	subs	r5, r0, #0
 80110b4:	d110      	bne.n	80110d8 <__mdiff+0x38>
 80110b6:	4629      	mov	r1, r5
 80110b8:	4630      	mov	r0, r6
 80110ba:	f7ff fd09 	bl	8010ad0 <_Balloc>
 80110be:	b930      	cbnz	r0, 80110ce <__mdiff+0x2e>
 80110c0:	4b3a      	ldr	r3, [pc, #232]	; (80111ac <__mdiff+0x10c>)
 80110c2:	4602      	mov	r2, r0
 80110c4:	f240 2132 	movw	r1, #562	; 0x232
 80110c8:	4839      	ldr	r0, [pc, #228]	; (80111b0 <__mdiff+0x110>)
 80110ca:	f000 fc4f 	bl	801196c <__assert_func>
 80110ce:	2301      	movs	r3, #1
 80110d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80110d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110d8:	bfa4      	itt	ge
 80110da:	4643      	movge	r3, r8
 80110dc:	46a0      	movge	r8, r4
 80110de:	4630      	mov	r0, r6
 80110e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80110e4:	bfa6      	itte	ge
 80110e6:	461c      	movge	r4, r3
 80110e8:	2500      	movge	r5, #0
 80110ea:	2501      	movlt	r5, #1
 80110ec:	f7ff fcf0 	bl	8010ad0 <_Balloc>
 80110f0:	b920      	cbnz	r0, 80110fc <__mdiff+0x5c>
 80110f2:	4b2e      	ldr	r3, [pc, #184]	; (80111ac <__mdiff+0x10c>)
 80110f4:	4602      	mov	r2, r0
 80110f6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80110fa:	e7e5      	b.n	80110c8 <__mdiff+0x28>
 80110fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011100:	6926      	ldr	r6, [r4, #16]
 8011102:	60c5      	str	r5, [r0, #12]
 8011104:	f104 0914 	add.w	r9, r4, #20
 8011108:	f108 0514 	add.w	r5, r8, #20
 801110c:	f100 0e14 	add.w	lr, r0, #20
 8011110:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011114:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011118:	f108 0210 	add.w	r2, r8, #16
 801111c:	46f2      	mov	sl, lr
 801111e:	2100      	movs	r1, #0
 8011120:	f859 3b04 	ldr.w	r3, [r9], #4
 8011124:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011128:	fa1f f883 	uxth.w	r8, r3
 801112c:	fa11 f18b 	uxtah	r1, r1, fp
 8011130:	0c1b      	lsrs	r3, r3, #16
 8011132:	eba1 0808 	sub.w	r8, r1, r8
 8011136:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801113a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801113e:	fa1f f888 	uxth.w	r8, r8
 8011142:	1419      	asrs	r1, r3, #16
 8011144:	454e      	cmp	r6, r9
 8011146:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801114a:	f84a 3b04 	str.w	r3, [sl], #4
 801114e:	d8e7      	bhi.n	8011120 <__mdiff+0x80>
 8011150:	1b33      	subs	r3, r6, r4
 8011152:	3b15      	subs	r3, #21
 8011154:	f023 0303 	bic.w	r3, r3, #3
 8011158:	3304      	adds	r3, #4
 801115a:	3415      	adds	r4, #21
 801115c:	42a6      	cmp	r6, r4
 801115e:	bf38      	it	cc
 8011160:	2304      	movcc	r3, #4
 8011162:	441d      	add	r5, r3
 8011164:	4473      	add	r3, lr
 8011166:	469e      	mov	lr, r3
 8011168:	462e      	mov	r6, r5
 801116a:	4566      	cmp	r6, ip
 801116c:	d30e      	bcc.n	801118c <__mdiff+0xec>
 801116e:	f10c 0203 	add.w	r2, ip, #3
 8011172:	1b52      	subs	r2, r2, r5
 8011174:	f022 0203 	bic.w	r2, r2, #3
 8011178:	3d03      	subs	r5, #3
 801117a:	45ac      	cmp	ip, r5
 801117c:	bf38      	it	cc
 801117e:	2200      	movcc	r2, #0
 8011180:	441a      	add	r2, r3
 8011182:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011186:	b17b      	cbz	r3, 80111a8 <__mdiff+0x108>
 8011188:	6107      	str	r7, [r0, #16]
 801118a:	e7a3      	b.n	80110d4 <__mdiff+0x34>
 801118c:	f856 8b04 	ldr.w	r8, [r6], #4
 8011190:	fa11 f288 	uxtah	r2, r1, r8
 8011194:	1414      	asrs	r4, r2, #16
 8011196:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801119a:	b292      	uxth	r2, r2
 801119c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80111a0:	f84e 2b04 	str.w	r2, [lr], #4
 80111a4:	1421      	asrs	r1, r4, #16
 80111a6:	e7e0      	b.n	801116a <__mdiff+0xca>
 80111a8:	3f01      	subs	r7, #1
 80111aa:	e7ea      	b.n	8011182 <__mdiff+0xe2>
 80111ac:	080128c0 	.word	0x080128c0
 80111b0:	0801294c 	.word	0x0801294c

080111b4 <__ulp>:
 80111b4:	b082      	sub	sp, #8
 80111b6:	ed8d 0b00 	vstr	d0, [sp]
 80111ba:	9b01      	ldr	r3, [sp, #4]
 80111bc:	4912      	ldr	r1, [pc, #72]	; (8011208 <__ulp+0x54>)
 80111be:	4019      	ands	r1, r3
 80111c0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80111c4:	2900      	cmp	r1, #0
 80111c6:	dd05      	ble.n	80111d4 <__ulp+0x20>
 80111c8:	2200      	movs	r2, #0
 80111ca:	460b      	mov	r3, r1
 80111cc:	ec43 2b10 	vmov	d0, r2, r3
 80111d0:	b002      	add	sp, #8
 80111d2:	4770      	bx	lr
 80111d4:	4249      	negs	r1, r1
 80111d6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80111da:	ea4f 5021 	mov.w	r0, r1, asr #20
 80111de:	f04f 0200 	mov.w	r2, #0
 80111e2:	f04f 0300 	mov.w	r3, #0
 80111e6:	da04      	bge.n	80111f2 <__ulp+0x3e>
 80111e8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80111ec:	fa41 f300 	asr.w	r3, r1, r0
 80111f0:	e7ec      	b.n	80111cc <__ulp+0x18>
 80111f2:	f1a0 0114 	sub.w	r1, r0, #20
 80111f6:	291e      	cmp	r1, #30
 80111f8:	bfda      	itte	le
 80111fa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80111fe:	fa20 f101 	lsrle.w	r1, r0, r1
 8011202:	2101      	movgt	r1, #1
 8011204:	460a      	mov	r2, r1
 8011206:	e7e1      	b.n	80111cc <__ulp+0x18>
 8011208:	7ff00000 	.word	0x7ff00000

0801120c <__b2d>:
 801120c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801120e:	6905      	ldr	r5, [r0, #16]
 8011210:	f100 0714 	add.w	r7, r0, #20
 8011214:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011218:	1f2e      	subs	r6, r5, #4
 801121a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801121e:	4620      	mov	r0, r4
 8011220:	f7ff fd48 	bl	8010cb4 <__hi0bits>
 8011224:	f1c0 0320 	rsb	r3, r0, #32
 8011228:	280a      	cmp	r0, #10
 801122a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80112a8 <__b2d+0x9c>
 801122e:	600b      	str	r3, [r1, #0]
 8011230:	dc14      	bgt.n	801125c <__b2d+0x50>
 8011232:	f1c0 0e0b 	rsb	lr, r0, #11
 8011236:	fa24 f10e 	lsr.w	r1, r4, lr
 801123a:	42b7      	cmp	r7, r6
 801123c:	ea41 030c 	orr.w	r3, r1, ip
 8011240:	bf34      	ite	cc
 8011242:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011246:	2100      	movcs	r1, #0
 8011248:	3015      	adds	r0, #21
 801124a:	fa04 f000 	lsl.w	r0, r4, r0
 801124e:	fa21 f10e 	lsr.w	r1, r1, lr
 8011252:	ea40 0201 	orr.w	r2, r0, r1
 8011256:	ec43 2b10 	vmov	d0, r2, r3
 801125a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801125c:	42b7      	cmp	r7, r6
 801125e:	bf3a      	itte	cc
 8011260:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011264:	f1a5 0608 	subcc.w	r6, r5, #8
 8011268:	2100      	movcs	r1, #0
 801126a:	380b      	subs	r0, #11
 801126c:	d017      	beq.n	801129e <__b2d+0x92>
 801126e:	f1c0 0c20 	rsb	ip, r0, #32
 8011272:	fa04 f500 	lsl.w	r5, r4, r0
 8011276:	42be      	cmp	r6, r7
 8011278:	fa21 f40c 	lsr.w	r4, r1, ip
 801127c:	ea45 0504 	orr.w	r5, r5, r4
 8011280:	bf8c      	ite	hi
 8011282:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011286:	2400      	movls	r4, #0
 8011288:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801128c:	fa01 f000 	lsl.w	r0, r1, r0
 8011290:	fa24 f40c 	lsr.w	r4, r4, ip
 8011294:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011298:	ea40 0204 	orr.w	r2, r0, r4
 801129c:	e7db      	b.n	8011256 <__b2d+0x4a>
 801129e:	ea44 030c 	orr.w	r3, r4, ip
 80112a2:	460a      	mov	r2, r1
 80112a4:	e7d7      	b.n	8011256 <__b2d+0x4a>
 80112a6:	bf00      	nop
 80112a8:	3ff00000 	.word	0x3ff00000

080112ac <__d2b>:
 80112ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80112b0:	4689      	mov	r9, r1
 80112b2:	2101      	movs	r1, #1
 80112b4:	ec57 6b10 	vmov	r6, r7, d0
 80112b8:	4690      	mov	r8, r2
 80112ba:	f7ff fc09 	bl	8010ad0 <_Balloc>
 80112be:	4604      	mov	r4, r0
 80112c0:	b930      	cbnz	r0, 80112d0 <__d2b+0x24>
 80112c2:	4602      	mov	r2, r0
 80112c4:	4b25      	ldr	r3, [pc, #148]	; (801135c <__d2b+0xb0>)
 80112c6:	4826      	ldr	r0, [pc, #152]	; (8011360 <__d2b+0xb4>)
 80112c8:	f240 310a 	movw	r1, #778	; 0x30a
 80112cc:	f000 fb4e 	bl	801196c <__assert_func>
 80112d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80112d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80112d8:	bb35      	cbnz	r5, 8011328 <__d2b+0x7c>
 80112da:	2e00      	cmp	r6, #0
 80112dc:	9301      	str	r3, [sp, #4]
 80112de:	d028      	beq.n	8011332 <__d2b+0x86>
 80112e0:	4668      	mov	r0, sp
 80112e2:	9600      	str	r6, [sp, #0]
 80112e4:	f7ff fd06 	bl	8010cf4 <__lo0bits>
 80112e8:	9900      	ldr	r1, [sp, #0]
 80112ea:	b300      	cbz	r0, 801132e <__d2b+0x82>
 80112ec:	9a01      	ldr	r2, [sp, #4]
 80112ee:	f1c0 0320 	rsb	r3, r0, #32
 80112f2:	fa02 f303 	lsl.w	r3, r2, r3
 80112f6:	430b      	orrs	r3, r1
 80112f8:	40c2      	lsrs	r2, r0
 80112fa:	6163      	str	r3, [r4, #20]
 80112fc:	9201      	str	r2, [sp, #4]
 80112fe:	9b01      	ldr	r3, [sp, #4]
 8011300:	61a3      	str	r3, [r4, #24]
 8011302:	2b00      	cmp	r3, #0
 8011304:	bf14      	ite	ne
 8011306:	2202      	movne	r2, #2
 8011308:	2201      	moveq	r2, #1
 801130a:	6122      	str	r2, [r4, #16]
 801130c:	b1d5      	cbz	r5, 8011344 <__d2b+0x98>
 801130e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011312:	4405      	add	r5, r0
 8011314:	f8c9 5000 	str.w	r5, [r9]
 8011318:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801131c:	f8c8 0000 	str.w	r0, [r8]
 8011320:	4620      	mov	r0, r4
 8011322:	b003      	add	sp, #12
 8011324:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011328:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801132c:	e7d5      	b.n	80112da <__d2b+0x2e>
 801132e:	6161      	str	r1, [r4, #20]
 8011330:	e7e5      	b.n	80112fe <__d2b+0x52>
 8011332:	a801      	add	r0, sp, #4
 8011334:	f7ff fcde 	bl	8010cf4 <__lo0bits>
 8011338:	9b01      	ldr	r3, [sp, #4]
 801133a:	6163      	str	r3, [r4, #20]
 801133c:	2201      	movs	r2, #1
 801133e:	6122      	str	r2, [r4, #16]
 8011340:	3020      	adds	r0, #32
 8011342:	e7e3      	b.n	801130c <__d2b+0x60>
 8011344:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011348:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801134c:	f8c9 0000 	str.w	r0, [r9]
 8011350:	6918      	ldr	r0, [r3, #16]
 8011352:	f7ff fcaf 	bl	8010cb4 <__hi0bits>
 8011356:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801135a:	e7df      	b.n	801131c <__d2b+0x70>
 801135c:	080128c0 	.word	0x080128c0
 8011360:	0801294c 	.word	0x0801294c

08011364 <__ratio>:
 8011364:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011368:	4688      	mov	r8, r1
 801136a:	4669      	mov	r1, sp
 801136c:	4681      	mov	r9, r0
 801136e:	f7ff ff4d 	bl	801120c <__b2d>
 8011372:	a901      	add	r1, sp, #4
 8011374:	4640      	mov	r0, r8
 8011376:	ec55 4b10 	vmov	r4, r5, d0
 801137a:	f7ff ff47 	bl	801120c <__b2d>
 801137e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011382:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011386:	eba3 0c02 	sub.w	ip, r3, r2
 801138a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801138e:	1a9b      	subs	r3, r3, r2
 8011390:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011394:	ec51 0b10 	vmov	r0, r1, d0
 8011398:	2b00      	cmp	r3, #0
 801139a:	bfd6      	itet	le
 801139c:	460a      	movle	r2, r1
 801139e:	462a      	movgt	r2, r5
 80113a0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80113a4:	468b      	mov	fp, r1
 80113a6:	462f      	mov	r7, r5
 80113a8:	bfd4      	ite	le
 80113aa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80113ae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80113b2:	4620      	mov	r0, r4
 80113b4:	ee10 2a10 	vmov	r2, s0
 80113b8:	465b      	mov	r3, fp
 80113ba:	4639      	mov	r1, r7
 80113bc:	f7ef fa1e 	bl	80007fc <__aeabi_ddiv>
 80113c0:	ec41 0b10 	vmov	d0, r0, r1
 80113c4:	b003      	add	sp, #12
 80113c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080113ca <__copybits>:
 80113ca:	3901      	subs	r1, #1
 80113cc:	b570      	push	{r4, r5, r6, lr}
 80113ce:	1149      	asrs	r1, r1, #5
 80113d0:	6914      	ldr	r4, [r2, #16]
 80113d2:	3101      	adds	r1, #1
 80113d4:	f102 0314 	add.w	r3, r2, #20
 80113d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80113dc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80113e0:	1f05      	subs	r5, r0, #4
 80113e2:	42a3      	cmp	r3, r4
 80113e4:	d30c      	bcc.n	8011400 <__copybits+0x36>
 80113e6:	1aa3      	subs	r3, r4, r2
 80113e8:	3b11      	subs	r3, #17
 80113ea:	f023 0303 	bic.w	r3, r3, #3
 80113ee:	3211      	adds	r2, #17
 80113f0:	42a2      	cmp	r2, r4
 80113f2:	bf88      	it	hi
 80113f4:	2300      	movhi	r3, #0
 80113f6:	4418      	add	r0, r3
 80113f8:	2300      	movs	r3, #0
 80113fa:	4288      	cmp	r0, r1
 80113fc:	d305      	bcc.n	801140a <__copybits+0x40>
 80113fe:	bd70      	pop	{r4, r5, r6, pc}
 8011400:	f853 6b04 	ldr.w	r6, [r3], #4
 8011404:	f845 6f04 	str.w	r6, [r5, #4]!
 8011408:	e7eb      	b.n	80113e2 <__copybits+0x18>
 801140a:	f840 3b04 	str.w	r3, [r0], #4
 801140e:	e7f4      	b.n	80113fa <__copybits+0x30>

08011410 <__any_on>:
 8011410:	f100 0214 	add.w	r2, r0, #20
 8011414:	6900      	ldr	r0, [r0, #16]
 8011416:	114b      	asrs	r3, r1, #5
 8011418:	4298      	cmp	r0, r3
 801141a:	b510      	push	{r4, lr}
 801141c:	db11      	blt.n	8011442 <__any_on+0x32>
 801141e:	dd0a      	ble.n	8011436 <__any_on+0x26>
 8011420:	f011 011f 	ands.w	r1, r1, #31
 8011424:	d007      	beq.n	8011436 <__any_on+0x26>
 8011426:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801142a:	fa24 f001 	lsr.w	r0, r4, r1
 801142e:	fa00 f101 	lsl.w	r1, r0, r1
 8011432:	428c      	cmp	r4, r1
 8011434:	d10b      	bne.n	801144e <__any_on+0x3e>
 8011436:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801143a:	4293      	cmp	r3, r2
 801143c:	d803      	bhi.n	8011446 <__any_on+0x36>
 801143e:	2000      	movs	r0, #0
 8011440:	bd10      	pop	{r4, pc}
 8011442:	4603      	mov	r3, r0
 8011444:	e7f7      	b.n	8011436 <__any_on+0x26>
 8011446:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801144a:	2900      	cmp	r1, #0
 801144c:	d0f5      	beq.n	801143a <__any_on+0x2a>
 801144e:	2001      	movs	r0, #1
 8011450:	e7f6      	b.n	8011440 <__any_on+0x30>

08011452 <_calloc_r>:
 8011452:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011454:	fba1 2402 	umull	r2, r4, r1, r2
 8011458:	b94c      	cbnz	r4, 801146e <_calloc_r+0x1c>
 801145a:	4611      	mov	r1, r2
 801145c:	9201      	str	r2, [sp, #4]
 801145e:	f000 f87b 	bl	8011558 <_malloc_r>
 8011462:	9a01      	ldr	r2, [sp, #4]
 8011464:	4605      	mov	r5, r0
 8011466:	b930      	cbnz	r0, 8011476 <_calloc_r+0x24>
 8011468:	4628      	mov	r0, r5
 801146a:	b003      	add	sp, #12
 801146c:	bd30      	pop	{r4, r5, pc}
 801146e:	220c      	movs	r2, #12
 8011470:	6002      	str	r2, [r0, #0]
 8011472:	2500      	movs	r5, #0
 8011474:	e7f8      	b.n	8011468 <_calloc_r+0x16>
 8011476:	4621      	mov	r1, r4
 8011478:	f7fc fbc2 	bl	800dc00 <memset>
 801147c:	e7f4      	b.n	8011468 <_calloc_r+0x16>
	...

08011480 <_free_r>:
 8011480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011482:	2900      	cmp	r1, #0
 8011484:	d044      	beq.n	8011510 <_free_r+0x90>
 8011486:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801148a:	9001      	str	r0, [sp, #4]
 801148c:	2b00      	cmp	r3, #0
 801148e:	f1a1 0404 	sub.w	r4, r1, #4
 8011492:	bfb8      	it	lt
 8011494:	18e4      	addlt	r4, r4, r3
 8011496:	f000 fab3 	bl	8011a00 <__malloc_lock>
 801149a:	4a1e      	ldr	r2, [pc, #120]	; (8011514 <_free_r+0x94>)
 801149c:	9801      	ldr	r0, [sp, #4]
 801149e:	6813      	ldr	r3, [r2, #0]
 80114a0:	b933      	cbnz	r3, 80114b0 <_free_r+0x30>
 80114a2:	6063      	str	r3, [r4, #4]
 80114a4:	6014      	str	r4, [r2, #0]
 80114a6:	b003      	add	sp, #12
 80114a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80114ac:	f000 baae 	b.w	8011a0c <__malloc_unlock>
 80114b0:	42a3      	cmp	r3, r4
 80114b2:	d908      	bls.n	80114c6 <_free_r+0x46>
 80114b4:	6825      	ldr	r5, [r4, #0]
 80114b6:	1961      	adds	r1, r4, r5
 80114b8:	428b      	cmp	r3, r1
 80114ba:	bf01      	itttt	eq
 80114bc:	6819      	ldreq	r1, [r3, #0]
 80114be:	685b      	ldreq	r3, [r3, #4]
 80114c0:	1949      	addeq	r1, r1, r5
 80114c2:	6021      	streq	r1, [r4, #0]
 80114c4:	e7ed      	b.n	80114a2 <_free_r+0x22>
 80114c6:	461a      	mov	r2, r3
 80114c8:	685b      	ldr	r3, [r3, #4]
 80114ca:	b10b      	cbz	r3, 80114d0 <_free_r+0x50>
 80114cc:	42a3      	cmp	r3, r4
 80114ce:	d9fa      	bls.n	80114c6 <_free_r+0x46>
 80114d0:	6811      	ldr	r1, [r2, #0]
 80114d2:	1855      	adds	r5, r2, r1
 80114d4:	42a5      	cmp	r5, r4
 80114d6:	d10b      	bne.n	80114f0 <_free_r+0x70>
 80114d8:	6824      	ldr	r4, [r4, #0]
 80114da:	4421      	add	r1, r4
 80114dc:	1854      	adds	r4, r2, r1
 80114de:	42a3      	cmp	r3, r4
 80114e0:	6011      	str	r1, [r2, #0]
 80114e2:	d1e0      	bne.n	80114a6 <_free_r+0x26>
 80114e4:	681c      	ldr	r4, [r3, #0]
 80114e6:	685b      	ldr	r3, [r3, #4]
 80114e8:	6053      	str	r3, [r2, #4]
 80114ea:	4421      	add	r1, r4
 80114ec:	6011      	str	r1, [r2, #0]
 80114ee:	e7da      	b.n	80114a6 <_free_r+0x26>
 80114f0:	d902      	bls.n	80114f8 <_free_r+0x78>
 80114f2:	230c      	movs	r3, #12
 80114f4:	6003      	str	r3, [r0, #0]
 80114f6:	e7d6      	b.n	80114a6 <_free_r+0x26>
 80114f8:	6825      	ldr	r5, [r4, #0]
 80114fa:	1961      	adds	r1, r4, r5
 80114fc:	428b      	cmp	r3, r1
 80114fe:	bf04      	itt	eq
 8011500:	6819      	ldreq	r1, [r3, #0]
 8011502:	685b      	ldreq	r3, [r3, #4]
 8011504:	6063      	str	r3, [r4, #4]
 8011506:	bf04      	itt	eq
 8011508:	1949      	addeq	r1, r1, r5
 801150a:	6021      	streq	r1, [r4, #0]
 801150c:	6054      	str	r4, [r2, #4]
 801150e:	e7ca      	b.n	80114a6 <_free_r+0x26>
 8011510:	b003      	add	sp, #12
 8011512:	bd30      	pop	{r4, r5, pc}
 8011514:	20005724 	.word	0x20005724

08011518 <sbrk_aligned>:
 8011518:	b570      	push	{r4, r5, r6, lr}
 801151a:	4e0e      	ldr	r6, [pc, #56]	; (8011554 <sbrk_aligned+0x3c>)
 801151c:	460c      	mov	r4, r1
 801151e:	6831      	ldr	r1, [r6, #0]
 8011520:	4605      	mov	r5, r0
 8011522:	b911      	cbnz	r1, 801152a <sbrk_aligned+0x12>
 8011524:	f000 f9f0 	bl	8011908 <_sbrk_r>
 8011528:	6030      	str	r0, [r6, #0]
 801152a:	4621      	mov	r1, r4
 801152c:	4628      	mov	r0, r5
 801152e:	f000 f9eb 	bl	8011908 <_sbrk_r>
 8011532:	1c43      	adds	r3, r0, #1
 8011534:	d00a      	beq.n	801154c <sbrk_aligned+0x34>
 8011536:	1cc4      	adds	r4, r0, #3
 8011538:	f024 0403 	bic.w	r4, r4, #3
 801153c:	42a0      	cmp	r0, r4
 801153e:	d007      	beq.n	8011550 <sbrk_aligned+0x38>
 8011540:	1a21      	subs	r1, r4, r0
 8011542:	4628      	mov	r0, r5
 8011544:	f000 f9e0 	bl	8011908 <_sbrk_r>
 8011548:	3001      	adds	r0, #1
 801154a:	d101      	bne.n	8011550 <sbrk_aligned+0x38>
 801154c:	f04f 34ff 	mov.w	r4, #4294967295
 8011550:	4620      	mov	r0, r4
 8011552:	bd70      	pop	{r4, r5, r6, pc}
 8011554:	20005728 	.word	0x20005728

08011558 <_malloc_r>:
 8011558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801155c:	1ccd      	adds	r5, r1, #3
 801155e:	f025 0503 	bic.w	r5, r5, #3
 8011562:	3508      	adds	r5, #8
 8011564:	2d0c      	cmp	r5, #12
 8011566:	bf38      	it	cc
 8011568:	250c      	movcc	r5, #12
 801156a:	2d00      	cmp	r5, #0
 801156c:	4607      	mov	r7, r0
 801156e:	db01      	blt.n	8011574 <_malloc_r+0x1c>
 8011570:	42a9      	cmp	r1, r5
 8011572:	d905      	bls.n	8011580 <_malloc_r+0x28>
 8011574:	230c      	movs	r3, #12
 8011576:	603b      	str	r3, [r7, #0]
 8011578:	2600      	movs	r6, #0
 801157a:	4630      	mov	r0, r6
 801157c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011580:	4e2e      	ldr	r6, [pc, #184]	; (801163c <_malloc_r+0xe4>)
 8011582:	f000 fa3d 	bl	8011a00 <__malloc_lock>
 8011586:	6833      	ldr	r3, [r6, #0]
 8011588:	461c      	mov	r4, r3
 801158a:	bb34      	cbnz	r4, 80115da <_malloc_r+0x82>
 801158c:	4629      	mov	r1, r5
 801158e:	4638      	mov	r0, r7
 8011590:	f7ff ffc2 	bl	8011518 <sbrk_aligned>
 8011594:	1c43      	adds	r3, r0, #1
 8011596:	4604      	mov	r4, r0
 8011598:	d14d      	bne.n	8011636 <_malloc_r+0xde>
 801159a:	6834      	ldr	r4, [r6, #0]
 801159c:	4626      	mov	r6, r4
 801159e:	2e00      	cmp	r6, #0
 80115a0:	d140      	bne.n	8011624 <_malloc_r+0xcc>
 80115a2:	6823      	ldr	r3, [r4, #0]
 80115a4:	4631      	mov	r1, r6
 80115a6:	4638      	mov	r0, r7
 80115a8:	eb04 0803 	add.w	r8, r4, r3
 80115ac:	f000 f9ac 	bl	8011908 <_sbrk_r>
 80115b0:	4580      	cmp	r8, r0
 80115b2:	d13a      	bne.n	801162a <_malloc_r+0xd2>
 80115b4:	6821      	ldr	r1, [r4, #0]
 80115b6:	3503      	adds	r5, #3
 80115b8:	1a6d      	subs	r5, r5, r1
 80115ba:	f025 0503 	bic.w	r5, r5, #3
 80115be:	3508      	adds	r5, #8
 80115c0:	2d0c      	cmp	r5, #12
 80115c2:	bf38      	it	cc
 80115c4:	250c      	movcc	r5, #12
 80115c6:	4629      	mov	r1, r5
 80115c8:	4638      	mov	r0, r7
 80115ca:	f7ff ffa5 	bl	8011518 <sbrk_aligned>
 80115ce:	3001      	adds	r0, #1
 80115d0:	d02b      	beq.n	801162a <_malloc_r+0xd2>
 80115d2:	6823      	ldr	r3, [r4, #0]
 80115d4:	442b      	add	r3, r5
 80115d6:	6023      	str	r3, [r4, #0]
 80115d8:	e00e      	b.n	80115f8 <_malloc_r+0xa0>
 80115da:	6822      	ldr	r2, [r4, #0]
 80115dc:	1b52      	subs	r2, r2, r5
 80115de:	d41e      	bmi.n	801161e <_malloc_r+0xc6>
 80115e0:	2a0b      	cmp	r2, #11
 80115e2:	d916      	bls.n	8011612 <_malloc_r+0xba>
 80115e4:	1961      	adds	r1, r4, r5
 80115e6:	42a3      	cmp	r3, r4
 80115e8:	6025      	str	r5, [r4, #0]
 80115ea:	bf18      	it	ne
 80115ec:	6059      	strne	r1, [r3, #4]
 80115ee:	6863      	ldr	r3, [r4, #4]
 80115f0:	bf08      	it	eq
 80115f2:	6031      	streq	r1, [r6, #0]
 80115f4:	5162      	str	r2, [r4, r5]
 80115f6:	604b      	str	r3, [r1, #4]
 80115f8:	4638      	mov	r0, r7
 80115fa:	f104 060b 	add.w	r6, r4, #11
 80115fe:	f000 fa05 	bl	8011a0c <__malloc_unlock>
 8011602:	f026 0607 	bic.w	r6, r6, #7
 8011606:	1d23      	adds	r3, r4, #4
 8011608:	1af2      	subs	r2, r6, r3
 801160a:	d0b6      	beq.n	801157a <_malloc_r+0x22>
 801160c:	1b9b      	subs	r3, r3, r6
 801160e:	50a3      	str	r3, [r4, r2]
 8011610:	e7b3      	b.n	801157a <_malloc_r+0x22>
 8011612:	6862      	ldr	r2, [r4, #4]
 8011614:	42a3      	cmp	r3, r4
 8011616:	bf0c      	ite	eq
 8011618:	6032      	streq	r2, [r6, #0]
 801161a:	605a      	strne	r2, [r3, #4]
 801161c:	e7ec      	b.n	80115f8 <_malloc_r+0xa0>
 801161e:	4623      	mov	r3, r4
 8011620:	6864      	ldr	r4, [r4, #4]
 8011622:	e7b2      	b.n	801158a <_malloc_r+0x32>
 8011624:	4634      	mov	r4, r6
 8011626:	6876      	ldr	r6, [r6, #4]
 8011628:	e7b9      	b.n	801159e <_malloc_r+0x46>
 801162a:	230c      	movs	r3, #12
 801162c:	603b      	str	r3, [r7, #0]
 801162e:	4638      	mov	r0, r7
 8011630:	f000 f9ec 	bl	8011a0c <__malloc_unlock>
 8011634:	e7a1      	b.n	801157a <_malloc_r+0x22>
 8011636:	6025      	str	r5, [r4, #0]
 8011638:	e7de      	b.n	80115f8 <_malloc_r+0xa0>
 801163a:	bf00      	nop
 801163c:	20005724 	.word	0x20005724

08011640 <__ssputs_r>:
 8011640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011644:	688e      	ldr	r6, [r1, #8]
 8011646:	429e      	cmp	r6, r3
 8011648:	4682      	mov	sl, r0
 801164a:	460c      	mov	r4, r1
 801164c:	4690      	mov	r8, r2
 801164e:	461f      	mov	r7, r3
 8011650:	d838      	bhi.n	80116c4 <__ssputs_r+0x84>
 8011652:	898a      	ldrh	r2, [r1, #12]
 8011654:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011658:	d032      	beq.n	80116c0 <__ssputs_r+0x80>
 801165a:	6825      	ldr	r5, [r4, #0]
 801165c:	6909      	ldr	r1, [r1, #16]
 801165e:	eba5 0901 	sub.w	r9, r5, r1
 8011662:	6965      	ldr	r5, [r4, #20]
 8011664:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011668:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801166c:	3301      	adds	r3, #1
 801166e:	444b      	add	r3, r9
 8011670:	106d      	asrs	r5, r5, #1
 8011672:	429d      	cmp	r5, r3
 8011674:	bf38      	it	cc
 8011676:	461d      	movcc	r5, r3
 8011678:	0553      	lsls	r3, r2, #21
 801167a:	d531      	bpl.n	80116e0 <__ssputs_r+0xa0>
 801167c:	4629      	mov	r1, r5
 801167e:	f7ff ff6b 	bl	8011558 <_malloc_r>
 8011682:	4606      	mov	r6, r0
 8011684:	b950      	cbnz	r0, 801169c <__ssputs_r+0x5c>
 8011686:	230c      	movs	r3, #12
 8011688:	f8ca 3000 	str.w	r3, [sl]
 801168c:	89a3      	ldrh	r3, [r4, #12]
 801168e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011692:	81a3      	strh	r3, [r4, #12]
 8011694:	f04f 30ff 	mov.w	r0, #4294967295
 8011698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801169c:	6921      	ldr	r1, [r4, #16]
 801169e:	464a      	mov	r2, r9
 80116a0:	f7fc faa0 	bl	800dbe4 <memcpy>
 80116a4:	89a3      	ldrh	r3, [r4, #12]
 80116a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80116aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116ae:	81a3      	strh	r3, [r4, #12]
 80116b0:	6126      	str	r6, [r4, #16]
 80116b2:	6165      	str	r5, [r4, #20]
 80116b4:	444e      	add	r6, r9
 80116b6:	eba5 0509 	sub.w	r5, r5, r9
 80116ba:	6026      	str	r6, [r4, #0]
 80116bc:	60a5      	str	r5, [r4, #8]
 80116be:	463e      	mov	r6, r7
 80116c0:	42be      	cmp	r6, r7
 80116c2:	d900      	bls.n	80116c6 <__ssputs_r+0x86>
 80116c4:	463e      	mov	r6, r7
 80116c6:	6820      	ldr	r0, [r4, #0]
 80116c8:	4632      	mov	r2, r6
 80116ca:	4641      	mov	r1, r8
 80116cc:	f000 f97e 	bl	80119cc <memmove>
 80116d0:	68a3      	ldr	r3, [r4, #8]
 80116d2:	1b9b      	subs	r3, r3, r6
 80116d4:	60a3      	str	r3, [r4, #8]
 80116d6:	6823      	ldr	r3, [r4, #0]
 80116d8:	4433      	add	r3, r6
 80116da:	6023      	str	r3, [r4, #0]
 80116dc:	2000      	movs	r0, #0
 80116de:	e7db      	b.n	8011698 <__ssputs_r+0x58>
 80116e0:	462a      	mov	r2, r5
 80116e2:	f000 f999 	bl	8011a18 <_realloc_r>
 80116e6:	4606      	mov	r6, r0
 80116e8:	2800      	cmp	r0, #0
 80116ea:	d1e1      	bne.n	80116b0 <__ssputs_r+0x70>
 80116ec:	6921      	ldr	r1, [r4, #16]
 80116ee:	4650      	mov	r0, sl
 80116f0:	f7ff fec6 	bl	8011480 <_free_r>
 80116f4:	e7c7      	b.n	8011686 <__ssputs_r+0x46>
	...

080116f8 <_svfiprintf_r>:
 80116f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116fc:	4698      	mov	r8, r3
 80116fe:	898b      	ldrh	r3, [r1, #12]
 8011700:	061b      	lsls	r3, r3, #24
 8011702:	b09d      	sub	sp, #116	; 0x74
 8011704:	4607      	mov	r7, r0
 8011706:	460d      	mov	r5, r1
 8011708:	4614      	mov	r4, r2
 801170a:	d50e      	bpl.n	801172a <_svfiprintf_r+0x32>
 801170c:	690b      	ldr	r3, [r1, #16]
 801170e:	b963      	cbnz	r3, 801172a <_svfiprintf_r+0x32>
 8011710:	2140      	movs	r1, #64	; 0x40
 8011712:	f7ff ff21 	bl	8011558 <_malloc_r>
 8011716:	6028      	str	r0, [r5, #0]
 8011718:	6128      	str	r0, [r5, #16]
 801171a:	b920      	cbnz	r0, 8011726 <_svfiprintf_r+0x2e>
 801171c:	230c      	movs	r3, #12
 801171e:	603b      	str	r3, [r7, #0]
 8011720:	f04f 30ff 	mov.w	r0, #4294967295
 8011724:	e0d1      	b.n	80118ca <_svfiprintf_r+0x1d2>
 8011726:	2340      	movs	r3, #64	; 0x40
 8011728:	616b      	str	r3, [r5, #20]
 801172a:	2300      	movs	r3, #0
 801172c:	9309      	str	r3, [sp, #36]	; 0x24
 801172e:	2320      	movs	r3, #32
 8011730:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011734:	f8cd 800c 	str.w	r8, [sp, #12]
 8011738:	2330      	movs	r3, #48	; 0x30
 801173a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80118e4 <_svfiprintf_r+0x1ec>
 801173e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011742:	f04f 0901 	mov.w	r9, #1
 8011746:	4623      	mov	r3, r4
 8011748:	469a      	mov	sl, r3
 801174a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801174e:	b10a      	cbz	r2, 8011754 <_svfiprintf_r+0x5c>
 8011750:	2a25      	cmp	r2, #37	; 0x25
 8011752:	d1f9      	bne.n	8011748 <_svfiprintf_r+0x50>
 8011754:	ebba 0b04 	subs.w	fp, sl, r4
 8011758:	d00b      	beq.n	8011772 <_svfiprintf_r+0x7a>
 801175a:	465b      	mov	r3, fp
 801175c:	4622      	mov	r2, r4
 801175e:	4629      	mov	r1, r5
 8011760:	4638      	mov	r0, r7
 8011762:	f7ff ff6d 	bl	8011640 <__ssputs_r>
 8011766:	3001      	adds	r0, #1
 8011768:	f000 80aa 	beq.w	80118c0 <_svfiprintf_r+0x1c8>
 801176c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801176e:	445a      	add	r2, fp
 8011770:	9209      	str	r2, [sp, #36]	; 0x24
 8011772:	f89a 3000 	ldrb.w	r3, [sl]
 8011776:	2b00      	cmp	r3, #0
 8011778:	f000 80a2 	beq.w	80118c0 <_svfiprintf_r+0x1c8>
 801177c:	2300      	movs	r3, #0
 801177e:	f04f 32ff 	mov.w	r2, #4294967295
 8011782:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011786:	f10a 0a01 	add.w	sl, sl, #1
 801178a:	9304      	str	r3, [sp, #16]
 801178c:	9307      	str	r3, [sp, #28]
 801178e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011792:	931a      	str	r3, [sp, #104]	; 0x68
 8011794:	4654      	mov	r4, sl
 8011796:	2205      	movs	r2, #5
 8011798:	f814 1b01 	ldrb.w	r1, [r4], #1
 801179c:	4851      	ldr	r0, [pc, #324]	; (80118e4 <_svfiprintf_r+0x1ec>)
 801179e:	f7ee fcf7 	bl	8000190 <memchr>
 80117a2:	9a04      	ldr	r2, [sp, #16]
 80117a4:	b9d8      	cbnz	r0, 80117de <_svfiprintf_r+0xe6>
 80117a6:	06d0      	lsls	r0, r2, #27
 80117a8:	bf44      	itt	mi
 80117aa:	2320      	movmi	r3, #32
 80117ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80117b0:	0711      	lsls	r1, r2, #28
 80117b2:	bf44      	itt	mi
 80117b4:	232b      	movmi	r3, #43	; 0x2b
 80117b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80117ba:	f89a 3000 	ldrb.w	r3, [sl]
 80117be:	2b2a      	cmp	r3, #42	; 0x2a
 80117c0:	d015      	beq.n	80117ee <_svfiprintf_r+0xf6>
 80117c2:	9a07      	ldr	r2, [sp, #28]
 80117c4:	4654      	mov	r4, sl
 80117c6:	2000      	movs	r0, #0
 80117c8:	f04f 0c0a 	mov.w	ip, #10
 80117cc:	4621      	mov	r1, r4
 80117ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80117d2:	3b30      	subs	r3, #48	; 0x30
 80117d4:	2b09      	cmp	r3, #9
 80117d6:	d94e      	bls.n	8011876 <_svfiprintf_r+0x17e>
 80117d8:	b1b0      	cbz	r0, 8011808 <_svfiprintf_r+0x110>
 80117da:	9207      	str	r2, [sp, #28]
 80117dc:	e014      	b.n	8011808 <_svfiprintf_r+0x110>
 80117de:	eba0 0308 	sub.w	r3, r0, r8
 80117e2:	fa09 f303 	lsl.w	r3, r9, r3
 80117e6:	4313      	orrs	r3, r2
 80117e8:	9304      	str	r3, [sp, #16]
 80117ea:	46a2      	mov	sl, r4
 80117ec:	e7d2      	b.n	8011794 <_svfiprintf_r+0x9c>
 80117ee:	9b03      	ldr	r3, [sp, #12]
 80117f0:	1d19      	adds	r1, r3, #4
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	9103      	str	r1, [sp, #12]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	bfbb      	ittet	lt
 80117fa:	425b      	neglt	r3, r3
 80117fc:	f042 0202 	orrlt.w	r2, r2, #2
 8011800:	9307      	strge	r3, [sp, #28]
 8011802:	9307      	strlt	r3, [sp, #28]
 8011804:	bfb8      	it	lt
 8011806:	9204      	strlt	r2, [sp, #16]
 8011808:	7823      	ldrb	r3, [r4, #0]
 801180a:	2b2e      	cmp	r3, #46	; 0x2e
 801180c:	d10c      	bne.n	8011828 <_svfiprintf_r+0x130>
 801180e:	7863      	ldrb	r3, [r4, #1]
 8011810:	2b2a      	cmp	r3, #42	; 0x2a
 8011812:	d135      	bne.n	8011880 <_svfiprintf_r+0x188>
 8011814:	9b03      	ldr	r3, [sp, #12]
 8011816:	1d1a      	adds	r2, r3, #4
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	9203      	str	r2, [sp, #12]
 801181c:	2b00      	cmp	r3, #0
 801181e:	bfb8      	it	lt
 8011820:	f04f 33ff 	movlt.w	r3, #4294967295
 8011824:	3402      	adds	r4, #2
 8011826:	9305      	str	r3, [sp, #20]
 8011828:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80118f4 <_svfiprintf_r+0x1fc>
 801182c:	7821      	ldrb	r1, [r4, #0]
 801182e:	2203      	movs	r2, #3
 8011830:	4650      	mov	r0, sl
 8011832:	f7ee fcad 	bl	8000190 <memchr>
 8011836:	b140      	cbz	r0, 801184a <_svfiprintf_r+0x152>
 8011838:	2340      	movs	r3, #64	; 0x40
 801183a:	eba0 000a 	sub.w	r0, r0, sl
 801183e:	fa03 f000 	lsl.w	r0, r3, r0
 8011842:	9b04      	ldr	r3, [sp, #16]
 8011844:	4303      	orrs	r3, r0
 8011846:	3401      	adds	r4, #1
 8011848:	9304      	str	r3, [sp, #16]
 801184a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801184e:	4826      	ldr	r0, [pc, #152]	; (80118e8 <_svfiprintf_r+0x1f0>)
 8011850:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011854:	2206      	movs	r2, #6
 8011856:	f7ee fc9b 	bl	8000190 <memchr>
 801185a:	2800      	cmp	r0, #0
 801185c:	d038      	beq.n	80118d0 <_svfiprintf_r+0x1d8>
 801185e:	4b23      	ldr	r3, [pc, #140]	; (80118ec <_svfiprintf_r+0x1f4>)
 8011860:	bb1b      	cbnz	r3, 80118aa <_svfiprintf_r+0x1b2>
 8011862:	9b03      	ldr	r3, [sp, #12]
 8011864:	3307      	adds	r3, #7
 8011866:	f023 0307 	bic.w	r3, r3, #7
 801186a:	3308      	adds	r3, #8
 801186c:	9303      	str	r3, [sp, #12]
 801186e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011870:	4433      	add	r3, r6
 8011872:	9309      	str	r3, [sp, #36]	; 0x24
 8011874:	e767      	b.n	8011746 <_svfiprintf_r+0x4e>
 8011876:	fb0c 3202 	mla	r2, ip, r2, r3
 801187a:	460c      	mov	r4, r1
 801187c:	2001      	movs	r0, #1
 801187e:	e7a5      	b.n	80117cc <_svfiprintf_r+0xd4>
 8011880:	2300      	movs	r3, #0
 8011882:	3401      	adds	r4, #1
 8011884:	9305      	str	r3, [sp, #20]
 8011886:	4619      	mov	r1, r3
 8011888:	f04f 0c0a 	mov.w	ip, #10
 801188c:	4620      	mov	r0, r4
 801188e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011892:	3a30      	subs	r2, #48	; 0x30
 8011894:	2a09      	cmp	r2, #9
 8011896:	d903      	bls.n	80118a0 <_svfiprintf_r+0x1a8>
 8011898:	2b00      	cmp	r3, #0
 801189a:	d0c5      	beq.n	8011828 <_svfiprintf_r+0x130>
 801189c:	9105      	str	r1, [sp, #20]
 801189e:	e7c3      	b.n	8011828 <_svfiprintf_r+0x130>
 80118a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80118a4:	4604      	mov	r4, r0
 80118a6:	2301      	movs	r3, #1
 80118a8:	e7f0      	b.n	801188c <_svfiprintf_r+0x194>
 80118aa:	ab03      	add	r3, sp, #12
 80118ac:	9300      	str	r3, [sp, #0]
 80118ae:	462a      	mov	r2, r5
 80118b0:	4b0f      	ldr	r3, [pc, #60]	; (80118f0 <_svfiprintf_r+0x1f8>)
 80118b2:	a904      	add	r1, sp, #16
 80118b4:	4638      	mov	r0, r7
 80118b6:	f7fc fa4b 	bl	800dd50 <_printf_float>
 80118ba:	1c42      	adds	r2, r0, #1
 80118bc:	4606      	mov	r6, r0
 80118be:	d1d6      	bne.n	801186e <_svfiprintf_r+0x176>
 80118c0:	89ab      	ldrh	r3, [r5, #12]
 80118c2:	065b      	lsls	r3, r3, #25
 80118c4:	f53f af2c 	bmi.w	8011720 <_svfiprintf_r+0x28>
 80118c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80118ca:	b01d      	add	sp, #116	; 0x74
 80118cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118d0:	ab03      	add	r3, sp, #12
 80118d2:	9300      	str	r3, [sp, #0]
 80118d4:	462a      	mov	r2, r5
 80118d6:	4b06      	ldr	r3, [pc, #24]	; (80118f0 <_svfiprintf_r+0x1f8>)
 80118d8:	a904      	add	r1, sp, #16
 80118da:	4638      	mov	r0, r7
 80118dc:	f7fc fcdc 	bl	800e298 <_printf_i>
 80118e0:	e7eb      	b.n	80118ba <_svfiprintf_r+0x1c2>
 80118e2:	bf00      	nop
 80118e4:	08012aa4 	.word	0x08012aa4
 80118e8:	08012aae 	.word	0x08012aae
 80118ec:	0800dd51 	.word	0x0800dd51
 80118f0:	08011641 	.word	0x08011641
 80118f4:	08012aaa 	.word	0x08012aaa

080118f8 <nan>:
 80118f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011900 <nan+0x8>
 80118fc:	4770      	bx	lr
 80118fe:	bf00      	nop
 8011900:	00000000 	.word	0x00000000
 8011904:	7ff80000 	.word	0x7ff80000

08011908 <_sbrk_r>:
 8011908:	b538      	push	{r3, r4, r5, lr}
 801190a:	4d06      	ldr	r5, [pc, #24]	; (8011924 <_sbrk_r+0x1c>)
 801190c:	2300      	movs	r3, #0
 801190e:	4604      	mov	r4, r0
 8011910:	4608      	mov	r0, r1
 8011912:	602b      	str	r3, [r5, #0]
 8011914:	f7f2 fe82 	bl	800461c <_sbrk>
 8011918:	1c43      	adds	r3, r0, #1
 801191a:	d102      	bne.n	8011922 <_sbrk_r+0x1a>
 801191c:	682b      	ldr	r3, [r5, #0]
 801191e:	b103      	cbz	r3, 8011922 <_sbrk_r+0x1a>
 8011920:	6023      	str	r3, [r4, #0]
 8011922:	bd38      	pop	{r3, r4, r5, pc}
 8011924:	2000572c 	.word	0x2000572c

08011928 <strncmp>:
 8011928:	b510      	push	{r4, lr}
 801192a:	b17a      	cbz	r2, 801194c <strncmp+0x24>
 801192c:	4603      	mov	r3, r0
 801192e:	3901      	subs	r1, #1
 8011930:	1884      	adds	r4, r0, r2
 8011932:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011936:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801193a:	4290      	cmp	r0, r2
 801193c:	d101      	bne.n	8011942 <strncmp+0x1a>
 801193e:	42a3      	cmp	r3, r4
 8011940:	d101      	bne.n	8011946 <strncmp+0x1e>
 8011942:	1a80      	subs	r0, r0, r2
 8011944:	bd10      	pop	{r4, pc}
 8011946:	2800      	cmp	r0, #0
 8011948:	d1f3      	bne.n	8011932 <strncmp+0xa>
 801194a:	e7fa      	b.n	8011942 <strncmp+0x1a>
 801194c:	4610      	mov	r0, r2
 801194e:	e7f9      	b.n	8011944 <strncmp+0x1c>

08011950 <__ascii_wctomb>:
 8011950:	b149      	cbz	r1, 8011966 <__ascii_wctomb+0x16>
 8011952:	2aff      	cmp	r2, #255	; 0xff
 8011954:	bf85      	ittet	hi
 8011956:	238a      	movhi	r3, #138	; 0x8a
 8011958:	6003      	strhi	r3, [r0, #0]
 801195a:	700a      	strbls	r2, [r1, #0]
 801195c:	f04f 30ff 	movhi.w	r0, #4294967295
 8011960:	bf98      	it	ls
 8011962:	2001      	movls	r0, #1
 8011964:	4770      	bx	lr
 8011966:	4608      	mov	r0, r1
 8011968:	4770      	bx	lr
	...

0801196c <__assert_func>:
 801196c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801196e:	4614      	mov	r4, r2
 8011970:	461a      	mov	r2, r3
 8011972:	4b09      	ldr	r3, [pc, #36]	; (8011998 <__assert_func+0x2c>)
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	4605      	mov	r5, r0
 8011978:	68d8      	ldr	r0, [r3, #12]
 801197a:	b14c      	cbz	r4, 8011990 <__assert_func+0x24>
 801197c:	4b07      	ldr	r3, [pc, #28]	; (801199c <__assert_func+0x30>)
 801197e:	9100      	str	r1, [sp, #0]
 8011980:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011984:	4906      	ldr	r1, [pc, #24]	; (80119a0 <__assert_func+0x34>)
 8011986:	462b      	mov	r3, r5
 8011988:	f000 f80e 	bl	80119a8 <fiprintf>
 801198c:	f000 fa8c 	bl	8011ea8 <abort>
 8011990:	4b04      	ldr	r3, [pc, #16]	; (80119a4 <__assert_func+0x38>)
 8011992:	461c      	mov	r4, r3
 8011994:	e7f3      	b.n	801197e <__assert_func+0x12>
 8011996:	bf00      	nop
 8011998:	20000110 	.word	0x20000110
 801199c:	08012ab5 	.word	0x08012ab5
 80119a0:	08012ac2 	.word	0x08012ac2
 80119a4:	08012af0 	.word	0x08012af0

080119a8 <fiprintf>:
 80119a8:	b40e      	push	{r1, r2, r3}
 80119aa:	b503      	push	{r0, r1, lr}
 80119ac:	4601      	mov	r1, r0
 80119ae:	ab03      	add	r3, sp, #12
 80119b0:	4805      	ldr	r0, [pc, #20]	; (80119c8 <fiprintf+0x20>)
 80119b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80119b6:	6800      	ldr	r0, [r0, #0]
 80119b8:	9301      	str	r3, [sp, #4]
 80119ba:	f000 f885 	bl	8011ac8 <_vfiprintf_r>
 80119be:	b002      	add	sp, #8
 80119c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80119c4:	b003      	add	sp, #12
 80119c6:	4770      	bx	lr
 80119c8:	20000110 	.word	0x20000110

080119cc <memmove>:
 80119cc:	4288      	cmp	r0, r1
 80119ce:	b510      	push	{r4, lr}
 80119d0:	eb01 0402 	add.w	r4, r1, r2
 80119d4:	d902      	bls.n	80119dc <memmove+0x10>
 80119d6:	4284      	cmp	r4, r0
 80119d8:	4623      	mov	r3, r4
 80119da:	d807      	bhi.n	80119ec <memmove+0x20>
 80119dc:	1e43      	subs	r3, r0, #1
 80119de:	42a1      	cmp	r1, r4
 80119e0:	d008      	beq.n	80119f4 <memmove+0x28>
 80119e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80119e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80119ea:	e7f8      	b.n	80119de <memmove+0x12>
 80119ec:	4402      	add	r2, r0
 80119ee:	4601      	mov	r1, r0
 80119f0:	428a      	cmp	r2, r1
 80119f2:	d100      	bne.n	80119f6 <memmove+0x2a>
 80119f4:	bd10      	pop	{r4, pc}
 80119f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80119fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80119fe:	e7f7      	b.n	80119f0 <memmove+0x24>

08011a00 <__malloc_lock>:
 8011a00:	4801      	ldr	r0, [pc, #4]	; (8011a08 <__malloc_lock+0x8>)
 8011a02:	f000 bc11 	b.w	8012228 <__retarget_lock_acquire_recursive>
 8011a06:	bf00      	nop
 8011a08:	20005730 	.word	0x20005730

08011a0c <__malloc_unlock>:
 8011a0c:	4801      	ldr	r0, [pc, #4]	; (8011a14 <__malloc_unlock+0x8>)
 8011a0e:	f000 bc0c 	b.w	801222a <__retarget_lock_release_recursive>
 8011a12:	bf00      	nop
 8011a14:	20005730 	.word	0x20005730

08011a18 <_realloc_r>:
 8011a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a1c:	4680      	mov	r8, r0
 8011a1e:	4614      	mov	r4, r2
 8011a20:	460e      	mov	r6, r1
 8011a22:	b921      	cbnz	r1, 8011a2e <_realloc_r+0x16>
 8011a24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a28:	4611      	mov	r1, r2
 8011a2a:	f7ff bd95 	b.w	8011558 <_malloc_r>
 8011a2e:	b92a      	cbnz	r2, 8011a3c <_realloc_r+0x24>
 8011a30:	f7ff fd26 	bl	8011480 <_free_r>
 8011a34:	4625      	mov	r5, r4
 8011a36:	4628      	mov	r0, r5
 8011a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a3c:	f000 fc5c 	bl	80122f8 <_malloc_usable_size_r>
 8011a40:	4284      	cmp	r4, r0
 8011a42:	4607      	mov	r7, r0
 8011a44:	d802      	bhi.n	8011a4c <_realloc_r+0x34>
 8011a46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011a4a:	d812      	bhi.n	8011a72 <_realloc_r+0x5a>
 8011a4c:	4621      	mov	r1, r4
 8011a4e:	4640      	mov	r0, r8
 8011a50:	f7ff fd82 	bl	8011558 <_malloc_r>
 8011a54:	4605      	mov	r5, r0
 8011a56:	2800      	cmp	r0, #0
 8011a58:	d0ed      	beq.n	8011a36 <_realloc_r+0x1e>
 8011a5a:	42bc      	cmp	r4, r7
 8011a5c:	4622      	mov	r2, r4
 8011a5e:	4631      	mov	r1, r6
 8011a60:	bf28      	it	cs
 8011a62:	463a      	movcs	r2, r7
 8011a64:	f7fc f8be 	bl	800dbe4 <memcpy>
 8011a68:	4631      	mov	r1, r6
 8011a6a:	4640      	mov	r0, r8
 8011a6c:	f7ff fd08 	bl	8011480 <_free_r>
 8011a70:	e7e1      	b.n	8011a36 <_realloc_r+0x1e>
 8011a72:	4635      	mov	r5, r6
 8011a74:	e7df      	b.n	8011a36 <_realloc_r+0x1e>

08011a76 <__sfputc_r>:
 8011a76:	6893      	ldr	r3, [r2, #8]
 8011a78:	3b01      	subs	r3, #1
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	b410      	push	{r4}
 8011a7e:	6093      	str	r3, [r2, #8]
 8011a80:	da08      	bge.n	8011a94 <__sfputc_r+0x1e>
 8011a82:	6994      	ldr	r4, [r2, #24]
 8011a84:	42a3      	cmp	r3, r4
 8011a86:	db01      	blt.n	8011a8c <__sfputc_r+0x16>
 8011a88:	290a      	cmp	r1, #10
 8011a8a:	d103      	bne.n	8011a94 <__sfputc_r+0x1e>
 8011a8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a90:	f000 b94a 	b.w	8011d28 <__swbuf_r>
 8011a94:	6813      	ldr	r3, [r2, #0]
 8011a96:	1c58      	adds	r0, r3, #1
 8011a98:	6010      	str	r0, [r2, #0]
 8011a9a:	7019      	strb	r1, [r3, #0]
 8011a9c:	4608      	mov	r0, r1
 8011a9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011aa2:	4770      	bx	lr

08011aa4 <__sfputs_r>:
 8011aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aa6:	4606      	mov	r6, r0
 8011aa8:	460f      	mov	r7, r1
 8011aaa:	4614      	mov	r4, r2
 8011aac:	18d5      	adds	r5, r2, r3
 8011aae:	42ac      	cmp	r4, r5
 8011ab0:	d101      	bne.n	8011ab6 <__sfputs_r+0x12>
 8011ab2:	2000      	movs	r0, #0
 8011ab4:	e007      	b.n	8011ac6 <__sfputs_r+0x22>
 8011ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011aba:	463a      	mov	r2, r7
 8011abc:	4630      	mov	r0, r6
 8011abe:	f7ff ffda 	bl	8011a76 <__sfputc_r>
 8011ac2:	1c43      	adds	r3, r0, #1
 8011ac4:	d1f3      	bne.n	8011aae <__sfputs_r+0xa>
 8011ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011ac8 <_vfiprintf_r>:
 8011ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011acc:	460d      	mov	r5, r1
 8011ace:	b09d      	sub	sp, #116	; 0x74
 8011ad0:	4614      	mov	r4, r2
 8011ad2:	4698      	mov	r8, r3
 8011ad4:	4606      	mov	r6, r0
 8011ad6:	b118      	cbz	r0, 8011ae0 <_vfiprintf_r+0x18>
 8011ad8:	6983      	ldr	r3, [r0, #24]
 8011ada:	b90b      	cbnz	r3, 8011ae0 <_vfiprintf_r+0x18>
 8011adc:	f000 fb06 	bl	80120ec <__sinit>
 8011ae0:	4b89      	ldr	r3, [pc, #548]	; (8011d08 <_vfiprintf_r+0x240>)
 8011ae2:	429d      	cmp	r5, r3
 8011ae4:	d11b      	bne.n	8011b1e <_vfiprintf_r+0x56>
 8011ae6:	6875      	ldr	r5, [r6, #4]
 8011ae8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011aea:	07d9      	lsls	r1, r3, #31
 8011aec:	d405      	bmi.n	8011afa <_vfiprintf_r+0x32>
 8011aee:	89ab      	ldrh	r3, [r5, #12]
 8011af0:	059a      	lsls	r2, r3, #22
 8011af2:	d402      	bmi.n	8011afa <_vfiprintf_r+0x32>
 8011af4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011af6:	f000 fb97 	bl	8012228 <__retarget_lock_acquire_recursive>
 8011afa:	89ab      	ldrh	r3, [r5, #12]
 8011afc:	071b      	lsls	r3, r3, #28
 8011afe:	d501      	bpl.n	8011b04 <_vfiprintf_r+0x3c>
 8011b00:	692b      	ldr	r3, [r5, #16]
 8011b02:	b9eb      	cbnz	r3, 8011b40 <_vfiprintf_r+0x78>
 8011b04:	4629      	mov	r1, r5
 8011b06:	4630      	mov	r0, r6
 8011b08:	f000 f960 	bl	8011dcc <__swsetup_r>
 8011b0c:	b1c0      	cbz	r0, 8011b40 <_vfiprintf_r+0x78>
 8011b0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011b10:	07dc      	lsls	r4, r3, #31
 8011b12:	d50e      	bpl.n	8011b32 <_vfiprintf_r+0x6a>
 8011b14:	f04f 30ff 	mov.w	r0, #4294967295
 8011b18:	b01d      	add	sp, #116	; 0x74
 8011b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b1e:	4b7b      	ldr	r3, [pc, #492]	; (8011d0c <_vfiprintf_r+0x244>)
 8011b20:	429d      	cmp	r5, r3
 8011b22:	d101      	bne.n	8011b28 <_vfiprintf_r+0x60>
 8011b24:	68b5      	ldr	r5, [r6, #8]
 8011b26:	e7df      	b.n	8011ae8 <_vfiprintf_r+0x20>
 8011b28:	4b79      	ldr	r3, [pc, #484]	; (8011d10 <_vfiprintf_r+0x248>)
 8011b2a:	429d      	cmp	r5, r3
 8011b2c:	bf08      	it	eq
 8011b2e:	68f5      	ldreq	r5, [r6, #12]
 8011b30:	e7da      	b.n	8011ae8 <_vfiprintf_r+0x20>
 8011b32:	89ab      	ldrh	r3, [r5, #12]
 8011b34:	0598      	lsls	r0, r3, #22
 8011b36:	d4ed      	bmi.n	8011b14 <_vfiprintf_r+0x4c>
 8011b38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011b3a:	f000 fb76 	bl	801222a <__retarget_lock_release_recursive>
 8011b3e:	e7e9      	b.n	8011b14 <_vfiprintf_r+0x4c>
 8011b40:	2300      	movs	r3, #0
 8011b42:	9309      	str	r3, [sp, #36]	; 0x24
 8011b44:	2320      	movs	r3, #32
 8011b46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011b4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8011b4e:	2330      	movs	r3, #48	; 0x30
 8011b50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011d14 <_vfiprintf_r+0x24c>
 8011b54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011b58:	f04f 0901 	mov.w	r9, #1
 8011b5c:	4623      	mov	r3, r4
 8011b5e:	469a      	mov	sl, r3
 8011b60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b64:	b10a      	cbz	r2, 8011b6a <_vfiprintf_r+0xa2>
 8011b66:	2a25      	cmp	r2, #37	; 0x25
 8011b68:	d1f9      	bne.n	8011b5e <_vfiprintf_r+0x96>
 8011b6a:	ebba 0b04 	subs.w	fp, sl, r4
 8011b6e:	d00b      	beq.n	8011b88 <_vfiprintf_r+0xc0>
 8011b70:	465b      	mov	r3, fp
 8011b72:	4622      	mov	r2, r4
 8011b74:	4629      	mov	r1, r5
 8011b76:	4630      	mov	r0, r6
 8011b78:	f7ff ff94 	bl	8011aa4 <__sfputs_r>
 8011b7c:	3001      	adds	r0, #1
 8011b7e:	f000 80aa 	beq.w	8011cd6 <_vfiprintf_r+0x20e>
 8011b82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011b84:	445a      	add	r2, fp
 8011b86:	9209      	str	r2, [sp, #36]	; 0x24
 8011b88:	f89a 3000 	ldrb.w	r3, [sl]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	f000 80a2 	beq.w	8011cd6 <_vfiprintf_r+0x20e>
 8011b92:	2300      	movs	r3, #0
 8011b94:	f04f 32ff 	mov.w	r2, #4294967295
 8011b98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b9c:	f10a 0a01 	add.w	sl, sl, #1
 8011ba0:	9304      	str	r3, [sp, #16]
 8011ba2:	9307      	str	r3, [sp, #28]
 8011ba4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011ba8:	931a      	str	r3, [sp, #104]	; 0x68
 8011baa:	4654      	mov	r4, sl
 8011bac:	2205      	movs	r2, #5
 8011bae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bb2:	4858      	ldr	r0, [pc, #352]	; (8011d14 <_vfiprintf_r+0x24c>)
 8011bb4:	f7ee faec 	bl	8000190 <memchr>
 8011bb8:	9a04      	ldr	r2, [sp, #16]
 8011bba:	b9d8      	cbnz	r0, 8011bf4 <_vfiprintf_r+0x12c>
 8011bbc:	06d1      	lsls	r1, r2, #27
 8011bbe:	bf44      	itt	mi
 8011bc0:	2320      	movmi	r3, #32
 8011bc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011bc6:	0713      	lsls	r3, r2, #28
 8011bc8:	bf44      	itt	mi
 8011bca:	232b      	movmi	r3, #43	; 0x2b
 8011bcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011bd0:	f89a 3000 	ldrb.w	r3, [sl]
 8011bd4:	2b2a      	cmp	r3, #42	; 0x2a
 8011bd6:	d015      	beq.n	8011c04 <_vfiprintf_r+0x13c>
 8011bd8:	9a07      	ldr	r2, [sp, #28]
 8011bda:	4654      	mov	r4, sl
 8011bdc:	2000      	movs	r0, #0
 8011bde:	f04f 0c0a 	mov.w	ip, #10
 8011be2:	4621      	mov	r1, r4
 8011be4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011be8:	3b30      	subs	r3, #48	; 0x30
 8011bea:	2b09      	cmp	r3, #9
 8011bec:	d94e      	bls.n	8011c8c <_vfiprintf_r+0x1c4>
 8011bee:	b1b0      	cbz	r0, 8011c1e <_vfiprintf_r+0x156>
 8011bf0:	9207      	str	r2, [sp, #28]
 8011bf2:	e014      	b.n	8011c1e <_vfiprintf_r+0x156>
 8011bf4:	eba0 0308 	sub.w	r3, r0, r8
 8011bf8:	fa09 f303 	lsl.w	r3, r9, r3
 8011bfc:	4313      	orrs	r3, r2
 8011bfe:	9304      	str	r3, [sp, #16]
 8011c00:	46a2      	mov	sl, r4
 8011c02:	e7d2      	b.n	8011baa <_vfiprintf_r+0xe2>
 8011c04:	9b03      	ldr	r3, [sp, #12]
 8011c06:	1d19      	adds	r1, r3, #4
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	9103      	str	r1, [sp, #12]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	bfbb      	ittet	lt
 8011c10:	425b      	neglt	r3, r3
 8011c12:	f042 0202 	orrlt.w	r2, r2, #2
 8011c16:	9307      	strge	r3, [sp, #28]
 8011c18:	9307      	strlt	r3, [sp, #28]
 8011c1a:	bfb8      	it	lt
 8011c1c:	9204      	strlt	r2, [sp, #16]
 8011c1e:	7823      	ldrb	r3, [r4, #0]
 8011c20:	2b2e      	cmp	r3, #46	; 0x2e
 8011c22:	d10c      	bne.n	8011c3e <_vfiprintf_r+0x176>
 8011c24:	7863      	ldrb	r3, [r4, #1]
 8011c26:	2b2a      	cmp	r3, #42	; 0x2a
 8011c28:	d135      	bne.n	8011c96 <_vfiprintf_r+0x1ce>
 8011c2a:	9b03      	ldr	r3, [sp, #12]
 8011c2c:	1d1a      	adds	r2, r3, #4
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	9203      	str	r2, [sp, #12]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	bfb8      	it	lt
 8011c36:	f04f 33ff 	movlt.w	r3, #4294967295
 8011c3a:	3402      	adds	r4, #2
 8011c3c:	9305      	str	r3, [sp, #20]
 8011c3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011d24 <_vfiprintf_r+0x25c>
 8011c42:	7821      	ldrb	r1, [r4, #0]
 8011c44:	2203      	movs	r2, #3
 8011c46:	4650      	mov	r0, sl
 8011c48:	f7ee faa2 	bl	8000190 <memchr>
 8011c4c:	b140      	cbz	r0, 8011c60 <_vfiprintf_r+0x198>
 8011c4e:	2340      	movs	r3, #64	; 0x40
 8011c50:	eba0 000a 	sub.w	r0, r0, sl
 8011c54:	fa03 f000 	lsl.w	r0, r3, r0
 8011c58:	9b04      	ldr	r3, [sp, #16]
 8011c5a:	4303      	orrs	r3, r0
 8011c5c:	3401      	adds	r4, #1
 8011c5e:	9304      	str	r3, [sp, #16]
 8011c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c64:	482c      	ldr	r0, [pc, #176]	; (8011d18 <_vfiprintf_r+0x250>)
 8011c66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011c6a:	2206      	movs	r2, #6
 8011c6c:	f7ee fa90 	bl	8000190 <memchr>
 8011c70:	2800      	cmp	r0, #0
 8011c72:	d03f      	beq.n	8011cf4 <_vfiprintf_r+0x22c>
 8011c74:	4b29      	ldr	r3, [pc, #164]	; (8011d1c <_vfiprintf_r+0x254>)
 8011c76:	bb1b      	cbnz	r3, 8011cc0 <_vfiprintf_r+0x1f8>
 8011c78:	9b03      	ldr	r3, [sp, #12]
 8011c7a:	3307      	adds	r3, #7
 8011c7c:	f023 0307 	bic.w	r3, r3, #7
 8011c80:	3308      	adds	r3, #8
 8011c82:	9303      	str	r3, [sp, #12]
 8011c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c86:	443b      	add	r3, r7
 8011c88:	9309      	str	r3, [sp, #36]	; 0x24
 8011c8a:	e767      	b.n	8011b5c <_vfiprintf_r+0x94>
 8011c8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c90:	460c      	mov	r4, r1
 8011c92:	2001      	movs	r0, #1
 8011c94:	e7a5      	b.n	8011be2 <_vfiprintf_r+0x11a>
 8011c96:	2300      	movs	r3, #0
 8011c98:	3401      	adds	r4, #1
 8011c9a:	9305      	str	r3, [sp, #20]
 8011c9c:	4619      	mov	r1, r3
 8011c9e:	f04f 0c0a 	mov.w	ip, #10
 8011ca2:	4620      	mov	r0, r4
 8011ca4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ca8:	3a30      	subs	r2, #48	; 0x30
 8011caa:	2a09      	cmp	r2, #9
 8011cac:	d903      	bls.n	8011cb6 <_vfiprintf_r+0x1ee>
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d0c5      	beq.n	8011c3e <_vfiprintf_r+0x176>
 8011cb2:	9105      	str	r1, [sp, #20]
 8011cb4:	e7c3      	b.n	8011c3e <_vfiprintf_r+0x176>
 8011cb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8011cba:	4604      	mov	r4, r0
 8011cbc:	2301      	movs	r3, #1
 8011cbe:	e7f0      	b.n	8011ca2 <_vfiprintf_r+0x1da>
 8011cc0:	ab03      	add	r3, sp, #12
 8011cc2:	9300      	str	r3, [sp, #0]
 8011cc4:	462a      	mov	r2, r5
 8011cc6:	4b16      	ldr	r3, [pc, #88]	; (8011d20 <_vfiprintf_r+0x258>)
 8011cc8:	a904      	add	r1, sp, #16
 8011cca:	4630      	mov	r0, r6
 8011ccc:	f7fc f840 	bl	800dd50 <_printf_float>
 8011cd0:	4607      	mov	r7, r0
 8011cd2:	1c78      	adds	r0, r7, #1
 8011cd4:	d1d6      	bne.n	8011c84 <_vfiprintf_r+0x1bc>
 8011cd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011cd8:	07d9      	lsls	r1, r3, #31
 8011cda:	d405      	bmi.n	8011ce8 <_vfiprintf_r+0x220>
 8011cdc:	89ab      	ldrh	r3, [r5, #12]
 8011cde:	059a      	lsls	r2, r3, #22
 8011ce0:	d402      	bmi.n	8011ce8 <_vfiprintf_r+0x220>
 8011ce2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011ce4:	f000 faa1 	bl	801222a <__retarget_lock_release_recursive>
 8011ce8:	89ab      	ldrh	r3, [r5, #12]
 8011cea:	065b      	lsls	r3, r3, #25
 8011cec:	f53f af12 	bmi.w	8011b14 <_vfiprintf_r+0x4c>
 8011cf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011cf2:	e711      	b.n	8011b18 <_vfiprintf_r+0x50>
 8011cf4:	ab03      	add	r3, sp, #12
 8011cf6:	9300      	str	r3, [sp, #0]
 8011cf8:	462a      	mov	r2, r5
 8011cfa:	4b09      	ldr	r3, [pc, #36]	; (8011d20 <_vfiprintf_r+0x258>)
 8011cfc:	a904      	add	r1, sp, #16
 8011cfe:	4630      	mov	r0, r6
 8011d00:	f7fc faca 	bl	800e298 <_printf_i>
 8011d04:	e7e4      	b.n	8011cd0 <_vfiprintf_r+0x208>
 8011d06:	bf00      	nop
 8011d08:	08012b14 	.word	0x08012b14
 8011d0c:	08012b34 	.word	0x08012b34
 8011d10:	08012af4 	.word	0x08012af4
 8011d14:	08012aa4 	.word	0x08012aa4
 8011d18:	08012aae 	.word	0x08012aae
 8011d1c:	0800dd51 	.word	0x0800dd51
 8011d20:	08011aa5 	.word	0x08011aa5
 8011d24:	08012aaa 	.word	0x08012aaa

08011d28 <__swbuf_r>:
 8011d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d2a:	460e      	mov	r6, r1
 8011d2c:	4614      	mov	r4, r2
 8011d2e:	4605      	mov	r5, r0
 8011d30:	b118      	cbz	r0, 8011d3a <__swbuf_r+0x12>
 8011d32:	6983      	ldr	r3, [r0, #24]
 8011d34:	b90b      	cbnz	r3, 8011d3a <__swbuf_r+0x12>
 8011d36:	f000 f9d9 	bl	80120ec <__sinit>
 8011d3a:	4b21      	ldr	r3, [pc, #132]	; (8011dc0 <__swbuf_r+0x98>)
 8011d3c:	429c      	cmp	r4, r3
 8011d3e:	d12b      	bne.n	8011d98 <__swbuf_r+0x70>
 8011d40:	686c      	ldr	r4, [r5, #4]
 8011d42:	69a3      	ldr	r3, [r4, #24]
 8011d44:	60a3      	str	r3, [r4, #8]
 8011d46:	89a3      	ldrh	r3, [r4, #12]
 8011d48:	071a      	lsls	r2, r3, #28
 8011d4a:	d52f      	bpl.n	8011dac <__swbuf_r+0x84>
 8011d4c:	6923      	ldr	r3, [r4, #16]
 8011d4e:	b36b      	cbz	r3, 8011dac <__swbuf_r+0x84>
 8011d50:	6923      	ldr	r3, [r4, #16]
 8011d52:	6820      	ldr	r0, [r4, #0]
 8011d54:	1ac0      	subs	r0, r0, r3
 8011d56:	6963      	ldr	r3, [r4, #20]
 8011d58:	b2f6      	uxtb	r6, r6
 8011d5a:	4283      	cmp	r3, r0
 8011d5c:	4637      	mov	r7, r6
 8011d5e:	dc04      	bgt.n	8011d6a <__swbuf_r+0x42>
 8011d60:	4621      	mov	r1, r4
 8011d62:	4628      	mov	r0, r5
 8011d64:	f000 f92e 	bl	8011fc4 <_fflush_r>
 8011d68:	bb30      	cbnz	r0, 8011db8 <__swbuf_r+0x90>
 8011d6a:	68a3      	ldr	r3, [r4, #8]
 8011d6c:	3b01      	subs	r3, #1
 8011d6e:	60a3      	str	r3, [r4, #8]
 8011d70:	6823      	ldr	r3, [r4, #0]
 8011d72:	1c5a      	adds	r2, r3, #1
 8011d74:	6022      	str	r2, [r4, #0]
 8011d76:	701e      	strb	r6, [r3, #0]
 8011d78:	6963      	ldr	r3, [r4, #20]
 8011d7a:	3001      	adds	r0, #1
 8011d7c:	4283      	cmp	r3, r0
 8011d7e:	d004      	beq.n	8011d8a <__swbuf_r+0x62>
 8011d80:	89a3      	ldrh	r3, [r4, #12]
 8011d82:	07db      	lsls	r3, r3, #31
 8011d84:	d506      	bpl.n	8011d94 <__swbuf_r+0x6c>
 8011d86:	2e0a      	cmp	r6, #10
 8011d88:	d104      	bne.n	8011d94 <__swbuf_r+0x6c>
 8011d8a:	4621      	mov	r1, r4
 8011d8c:	4628      	mov	r0, r5
 8011d8e:	f000 f919 	bl	8011fc4 <_fflush_r>
 8011d92:	b988      	cbnz	r0, 8011db8 <__swbuf_r+0x90>
 8011d94:	4638      	mov	r0, r7
 8011d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d98:	4b0a      	ldr	r3, [pc, #40]	; (8011dc4 <__swbuf_r+0x9c>)
 8011d9a:	429c      	cmp	r4, r3
 8011d9c:	d101      	bne.n	8011da2 <__swbuf_r+0x7a>
 8011d9e:	68ac      	ldr	r4, [r5, #8]
 8011da0:	e7cf      	b.n	8011d42 <__swbuf_r+0x1a>
 8011da2:	4b09      	ldr	r3, [pc, #36]	; (8011dc8 <__swbuf_r+0xa0>)
 8011da4:	429c      	cmp	r4, r3
 8011da6:	bf08      	it	eq
 8011da8:	68ec      	ldreq	r4, [r5, #12]
 8011daa:	e7ca      	b.n	8011d42 <__swbuf_r+0x1a>
 8011dac:	4621      	mov	r1, r4
 8011dae:	4628      	mov	r0, r5
 8011db0:	f000 f80c 	bl	8011dcc <__swsetup_r>
 8011db4:	2800      	cmp	r0, #0
 8011db6:	d0cb      	beq.n	8011d50 <__swbuf_r+0x28>
 8011db8:	f04f 37ff 	mov.w	r7, #4294967295
 8011dbc:	e7ea      	b.n	8011d94 <__swbuf_r+0x6c>
 8011dbe:	bf00      	nop
 8011dc0:	08012b14 	.word	0x08012b14
 8011dc4:	08012b34 	.word	0x08012b34
 8011dc8:	08012af4 	.word	0x08012af4

08011dcc <__swsetup_r>:
 8011dcc:	4b32      	ldr	r3, [pc, #200]	; (8011e98 <__swsetup_r+0xcc>)
 8011dce:	b570      	push	{r4, r5, r6, lr}
 8011dd0:	681d      	ldr	r5, [r3, #0]
 8011dd2:	4606      	mov	r6, r0
 8011dd4:	460c      	mov	r4, r1
 8011dd6:	b125      	cbz	r5, 8011de2 <__swsetup_r+0x16>
 8011dd8:	69ab      	ldr	r3, [r5, #24]
 8011dda:	b913      	cbnz	r3, 8011de2 <__swsetup_r+0x16>
 8011ddc:	4628      	mov	r0, r5
 8011dde:	f000 f985 	bl	80120ec <__sinit>
 8011de2:	4b2e      	ldr	r3, [pc, #184]	; (8011e9c <__swsetup_r+0xd0>)
 8011de4:	429c      	cmp	r4, r3
 8011de6:	d10f      	bne.n	8011e08 <__swsetup_r+0x3c>
 8011de8:	686c      	ldr	r4, [r5, #4]
 8011dea:	89a3      	ldrh	r3, [r4, #12]
 8011dec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011df0:	0719      	lsls	r1, r3, #28
 8011df2:	d42c      	bmi.n	8011e4e <__swsetup_r+0x82>
 8011df4:	06dd      	lsls	r5, r3, #27
 8011df6:	d411      	bmi.n	8011e1c <__swsetup_r+0x50>
 8011df8:	2309      	movs	r3, #9
 8011dfa:	6033      	str	r3, [r6, #0]
 8011dfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011e00:	81a3      	strh	r3, [r4, #12]
 8011e02:	f04f 30ff 	mov.w	r0, #4294967295
 8011e06:	e03e      	b.n	8011e86 <__swsetup_r+0xba>
 8011e08:	4b25      	ldr	r3, [pc, #148]	; (8011ea0 <__swsetup_r+0xd4>)
 8011e0a:	429c      	cmp	r4, r3
 8011e0c:	d101      	bne.n	8011e12 <__swsetup_r+0x46>
 8011e0e:	68ac      	ldr	r4, [r5, #8]
 8011e10:	e7eb      	b.n	8011dea <__swsetup_r+0x1e>
 8011e12:	4b24      	ldr	r3, [pc, #144]	; (8011ea4 <__swsetup_r+0xd8>)
 8011e14:	429c      	cmp	r4, r3
 8011e16:	bf08      	it	eq
 8011e18:	68ec      	ldreq	r4, [r5, #12]
 8011e1a:	e7e6      	b.n	8011dea <__swsetup_r+0x1e>
 8011e1c:	0758      	lsls	r0, r3, #29
 8011e1e:	d512      	bpl.n	8011e46 <__swsetup_r+0x7a>
 8011e20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011e22:	b141      	cbz	r1, 8011e36 <__swsetup_r+0x6a>
 8011e24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011e28:	4299      	cmp	r1, r3
 8011e2a:	d002      	beq.n	8011e32 <__swsetup_r+0x66>
 8011e2c:	4630      	mov	r0, r6
 8011e2e:	f7ff fb27 	bl	8011480 <_free_r>
 8011e32:	2300      	movs	r3, #0
 8011e34:	6363      	str	r3, [r4, #52]	; 0x34
 8011e36:	89a3      	ldrh	r3, [r4, #12]
 8011e38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011e3c:	81a3      	strh	r3, [r4, #12]
 8011e3e:	2300      	movs	r3, #0
 8011e40:	6063      	str	r3, [r4, #4]
 8011e42:	6923      	ldr	r3, [r4, #16]
 8011e44:	6023      	str	r3, [r4, #0]
 8011e46:	89a3      	ldrh	r3, [r4, #12]
 8011e48:	f043 0308 	orr.w	r3, r3, #8
 8011e4c:	81a3      	strh	r3, [r4, #12]
 8011e4e:	6923      	ldr	r3, [r4, #16]
 8011e50:	b94b      	cbnz	r3, 8011e66 <__swsetup_r+0x9a>
 8011e52:	89a3      	ldrh	r3, [r4, #12]
 8011e54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011e5c:	d003      	beq.n	8011e66 <__swsetup_r+0x9a>
 8011e5e:	4621      	mov	r1, r4
 8011e60:	4630      	mov	r0, r6
 8011e62:	f000 fa09 	bl	8012278 <__smakebuf_r>
 8011e66:	89a0      	ldrh	r0, [r4, #12]
 8011e68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011e6c:	f010 0301 	ands.w	r3, r0, #1
 8011e70:	d00a      	beq.n	8011e88 <__swsetup_r+0xbc>
 8011e72:	2300      	movs	r3, #0
 8011e74:	60a3      	str	r3, [r4, #8]
 8011e76:	6963      	ldr	r3, [r4, #20]
 8011e78:	425b      	negs	r3, r3
 8011e7a:	61a3      	str	r3, [r4, #24]
 8011e7c:	6923      	ldr	r3, [r4, #16]
 8011e7e:	b943      	cbnz	r3, 8011e92 <__swsetup_r+0xc6>
 8011e80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011e84:	d1ba      	bne.n	8011dfc <__swsetup_r+0x30>
 8011e86:	bd70      	pop	{r4, r5, r6, pc}
 8011e88:	0781      	lsls	r1, r0, #30
 8011e8a:	bf58      	it	pl
 8011e8c:	6963      	ldrpl	r3, [r4, #20]
 8011e8e:	60a3      	str	r3, [r4, #8]
 8011e90:	e7f4      	b.n	8011e7c <__swsetup_r+0xb0>
 8011e92:	2000      	movs	r0, #0
 8011e94:	e7f7      	b.n	8011e86 <__swsetup_r+0xba>
 8011e96:	bf00      	nop
 8011e98:	20000110 	.word	0x20000110
 8011e9c:	08012b14 	.word	0x08012b14
 8011ea0:	08012b34 	.word	0x08012b34
 8011ea4:	08012af4 	.word	0x08012af4

08011ea8 <abort>:
 8011ea8:	b508      	push	{r3, lr}
 8011eaa:	2006      	movs	r0, #6
 8011eac:	f000 fa54 	bl	8012358 <raise>
 8011eb0:	2001      	movs	r0, #1
 8011eb2:	f7f2 fb3b 	bl	800452c <_exit>
	...

08011eb8 <__sflush_r>:
 8011eb8:	898a      	ldrh	r2, [r1, #12]
 8011eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ebe:	4605      	mov	r5, r0
 8011ec0:	0710      	lsls	r0, r2, #28
 8011ec2:	460c      	mov	r4, r1
 8011ec4:	d458      	bmi.n	8011f78 <__sflush_r+0xc0>
 8011ec6:	684b      	ldr	r3, [r1, #4]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	dc05      	bgt.n	8011ed8 <__sflush_r+0x20>
 8011ecc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	dc02      	bgt.n	8011ed8 <__sflush_r+0x20>
 8011ed2:	2000      	movs	r0, #0
 8011ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ed8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011eda:	2e00      	cmp	r6, #0
 8011edc:	d0f9      	beq.n	8011ed2 <__sflush_r+0x1a>
 8011ede:	2300      	movs	r3, #0
 8011ee0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011ee4:	682f      	ldr	r7, [r5, #0]
 8011ee6:	602b      	str	r3, [r5, #0]
 8011ee8:	d032      	beq.n	8011f50 <__sflush_r+0x98>
 8011eea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011eec:	89a3      	ldrh	r3, [r4, #12]
 8011eee:	075a      	lsls	r2, r3, #29
 8011ef0:	d505      	bpl.n	8011efe <__sflush_r+0x46>
 8011ef2:	6863      	ldr	r3, [r4, #4]
 8011ef4:	1ac0      	subs	r0, r0, r3
 8011ef6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011ef8:	b10b      	cbz	r3, 8011efe <__sflush_r+0x46>
 8011efa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011efc:	1ac0      	subs	r0, r0, r3
 8011efe:	2300      	movs	r3, #0
 8011f00:	4602      	mov	r2, r0
 8011f02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011f04:	6a21      	ldr	r1, [r4, #32]
 8011f06:	4628      	mov	r0, r5
 8011f08:	47b0      	blx	r6
 8011f0a:	1c43      	adds	r3, r0, #1
 8011f0c:	89a3      	ldrh	r3, [r4, #12]
 8011f0e:	d106      	bne.n	8011f1e <__sflush_r+0x66>
 8011f10:	6829      	ldr	r1, [r5, #0]
 8011f12:	291d      	cmp	r1, #29
 8011f14:	d82c      	bhi.n	8011f70 <__sflush_r+0xb8>
 8011f16:	4a2a      	ldr	r2, [pc, #168]	; (8011fc0 <__sflush_r+0x108>)
 8011f18:	40ca      	lsrs	r2, r1
 8011f1a:	07d6      	lsls	r6, r2, #31
 8011f1c:	d528      	bpl.n	8011f70 <__sflush_r+0xb8>
 8011f1e:	2200      	movs	r2, #0
 8011f20:	6062      	str	r2, [r4, #4]
 8011f22:	04d9      	lsls	r1, r3, #19
 8011f24:	6922      	ldr	r2, [r4, #16]
 8011f26:	6022      	str	r2, [r4, #0]
 8011f28:	d504      	bpl.n	8011f34 <__sflush_r+0x7c>
 8011f2a:	1c42      	adds	r2, r0, #1
 8011f2c:	d101      	bne.n	8011f32 <__sflush_r+0x7a>
 8011f2e:	682b      	ldr	r3, [r5, #0]
 8011f30:	b903      	cbnz	r3, 8011f34 <__sflush_r+0x7c>
 8011f32:	6560      	str	r0, [r4, #84]	; 0x54
 8011f34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011f36:	602f      	str	r7, [r5, #0]
 8011f38:	2900      	cmp	r1, #0
 8011f3a:	d0ca      	beq.n	8011ed2 <__sflush_r+0x1a>
 8011f3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011f40:	4299      	cmp	r1, r3
 8011f42:	d002      	beq.n	8011f4a <__sflush_r+0x92>
 8011f44:	4628      	mov	r0, r5
 8011f46:	f7ff fa9b 	bl	8011480 <_free_r>
 8011f4a:	2000      	movs	r0, #0
 8011f4c:	6360      	str	r0, [r4, #52]	; 0x34
 8011f4e:	e7c1      	b.n	8011ed4 <__sflush_r+0x1c>
 8011f50:	6a21      	ldr	r1, [r4, #32]
 8011f52:	2301      	movs	r3, #1
 8011f54:	4628      	mov	r0, r5
 8011f56:	47b0      	blx	r6
 8011f58:	1c41      	adds	r1, r0, #1
 8011f5a:	d1c7      	bne.n	8011eec <__sflush_r+0x34>
 8011f5c:	682b      	ldr	r3, [r5, #0]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d0c4      	beq.n	8011eec <__sflush_r+0x34>
 8011f62:	2b1d      	cmp	r3, #29
 8011f64:	d001      	beq.n	8011f6a <__sflush_r+0xb2>
 8011f66:	2b16      	cmp	r3, #22
 8011f68:	d101      	bne.n	8011f6e <__sflush_r+0xb6>
 8011f6a:	602f      	str	r7, [r5, #0]
 8011f6c:	e7b1      	b.n	8011ed2 <__sflush_r+0x1a>
 8011f6e:	89a3      	ldrh	r3, [r4, #12]
 8011f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f74:	81a3      	strh	r3, [r4, #12]
 8011f76:	e7ad      	b.n	8011ed4 <__sflush_r+0x1c>
 8011f78:	690f      	ldr	r7, [r1, #16]
 8011f7a:	2f00      	cmp	r7, #0
 8011f7c:	d0a9      	beq.n	8011ed2 <__sflush_r+0x1a>
 8011f7e:	0793      	lsls	r3, r2, #30
 8011f80:	680e      	ldr	r6, [r1, #0]
 8011f82:	bf08      	it	eq
 8011f84:	694b      	ldreq	r3, [r1, #20]
 8011f86:	600f      	str	r7, [r1, #0]
 8011f88:	bf18      	it	ne
 8011f8a:	2300      	movne	r3, #0
 8011f8c:	eba6 0807 	sub.w	r8, r6, r7
 8011f90:	608b      	str	r3, [r1, #8]
 8011f92:	f1b8 0f00 	cmp.w	r8, #0
 8011f96:	dd9c      	ble.n	8011ed2 <__sflush_r+0x1a>
 8011f98:	6a21      	ldr	r1, [r4, #32]
 8011f9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011f9c:	4643      	mov	r3, r8
 8011f9e:	463a      	mov	r2, r7
 8011fa0:	4628      	mov	r0, r5
 8011fa2:	47b0      	blx	r6
 8011fa4:	2800      	cmp	r0, #0
 8011fa6:	dc06      	bgt.n	8011fb6 <__sflush_r+0xfe>
 8011fa8:	89a3      	ldrh	r3, [r4, #12]
 8011faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011fae:	81a3      	strh	r3, [r4, #12]
 8011fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8011fb4:	e78e      	b.n	8011ed4 <__sflush_r+0x1c>
 8011fb6:	4407      	add	r7, r0
 8011fb8:	eba8 0800 	sub.w	r8, r8, r0
 8011fbc:	e7e9      	b.n	8011f92 <__sflush_r+0xda>
 8011fbe:	bf00      	nop
 8011fc0:	20400001 	.word	0x20400001

08011fc4 <_fflush_r>:
 8011fc4:	b538      	push	{r3, r4, r5, lr}
 8011fc6:	690b      	ldr	r3, [r1, #16]
 8011fc8:	4605      	mov	r5, r0
 8011fca:	460c      	mov	r4, r1
 8011fcc:	b913      	cbnz	r3, 8011fd4 <_fflush_r+0x10>
 8011fce:	2500      	movs	r5, #0
 8011fd0:	4628      	mov	r0, r5
 8011fd2:	bd38      	pop	{r3, r4, r5, pc}
 8011fd4:	b118      	cbz	r0, 8011fde <_fflush_r+0x1a>
 8011fd6:	6983      	ldr	r3, [r0, #24]
 8011fd8:	b90b      	cbnz	r3, 8011fde <_fflush_r+0x1a>
 8011fda:	f000 f887 	bl	80120ec <__sinit>
 8011fde:	4b14      	ldr	r3, [pc, #80]	; (8012030 <_fflush_r+0x6c>)
 8011fe0:	429c      	cmp	r4, r3
 8011fe2:	d11b      	bne.n	801201c <_fflush_r+0x58>
 8011fe4:	686c      	ldr	r4, [r5, #4]
 8011fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d0ef      	beq.n	8011fce <_fflush_r+0xa>
 8011fee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011ff0:	07d0      	lsls	r0, r2, #31
 8011ff2:	d404      	bmi.n	8011ffe <_fflush_r+0x3a>
 8011ff4:	0599      	lsls	r1, r3, #22
 8011ff6:	d402      	bmi.n	8011ffe <_fflush_r+0x3a>
 8011ff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ffa:	f000 f915 	bl	8012228 <__retarget_lock_acquire_recursive>
 8011ffe:	4628      	mov	r0, r5
 8012000:	4621      	mov	r1, r4
 8012002:	f7ff ff59 	bl	8011eb8 <__sflush_r>
 8012006:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012008:	07da      	lsls	r2, r3, #31
 801200a:	4605      	mov	r5, r0
 801200c:	d4e0      	bmi.n	8011fd0 <_fflush_r+0xc>
 801200e:	89a3      	ldrh	r3, [r4, #12]
 8012010:	059b      	lsls	r3, r3, #22
 8012012:	d4dd      	bmi.n	8011fd0 <_fflush_r+0xc>
 8012014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012016:	f000 f908 	bl	801222a <__retarget_lock_release_recursive>
 801201a:	e7d9      	b.n	8011fd0 <_fflush_r+0xc>
 801201c:	4b05      	ldr	r3, [pc, #20]	; (8012034 <_fflush_r+0x70>)
 801201e:	429c      	cmp	r4, r3
 8012020:	d101      	bne.n	8012026 <_fflush_r+0x62>
 8012022:	68ac      	ldr	r4, [r5, #8]
 8012024:	e7df      	b.n	8011fe6 <_fflush_r+0x22>
 8012026:	4b04      	ldr	r3, [pc, #16]	; (8012038 <_fflush_r+0x74>)
 8012028:	429c      	cmp	r4, r3
 801202a:	bf08      	it	eq
 801202c:	68ec      	ldreq	r4, [r5, #12]
 801202e:	e7da      	b.n	8011fe6 <_fflush_r+0x22>
 8012030:	08012b14 	.word	0x08012b14
 8012034:	08012b34 	.word	0x08012b34
 8012038:	08012af4 	.word	0x08012af4

0801203c <std>:
 801203c:	2300      	movs	r3, #0
 801203e:	b510      	push	{r4, lr}
 8012040:	4604      	mov	r4, r0
 8012042:	e9c0 3300 	strd	r3, r3, [r0]
 8012046:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801204a:	6083      	str	r3, [r0, #8]
 801204c:	8181      	strh	r1, [r0, #12]
 801204e:	6643      	str	r3, [r0, #100]	; 0x64
 8012050:	81c2      	strh	r2, [r0, #14]
 8012052:	6183      	str	r3, [r0, #24]
 8012054:	4619      	mov	r1, r3
 8012056:	2208      	movs	r2, #8
 8012058:	305c      	adds	r0, #92	; 0x5c
 801205a:	f7fb fdd1 	bl	800dc00 <memset>
 801205e:	4b05      	ldr	r3, [pc, #20]	; (8012074 <std+0x38>)
 8012060:	6263      	str	r3, [r4, #36]	; 0x24
 8012062:	4b05      	ldr	r3, [pc, #20]	; (8012078 <std+0x3c>)
 8012064:	62a3      	str	r3, [r4, #40]	; 0x28
 8012066:	4b05      	ldr	r3, [pc, #20]	; (801207c <std+0x40>)
 8012068:	62e3      	str	r3, [r4, #44]	; 0x2c
 801206a:	4b05      	ldr	r3, [pc, #20]	; (8012080 <std+0x44>)
 801206c:	6224      	str	r4, [r4, #32]
 801206e:	6323      	str	r3, [r4, #48]	; 0x30
 8012070:	bd10      	pop	{r4, pc}
 8012072:	bf00      	nop
 8012074:	08012391 	.word	0x08012391
 8012078:	080123b3 	.word	0x080123b3
 801207c:	080123eb 	.word	0x080123eb
 8012080:	0801240f 	.word	0x0801240f

08012084 <_cleanup_r>:
 8012084:	4901      	ldr	r1, [pc, #4]	; (801208c <_cleanup_r+0x8>)
 8012086:	f000 b8af 	b.w	80121e8 <_fwalk_reent>
 801208a:	bf00      	nop
 801208c:	08011fc5 	.word	0x08011fc5

08012090 <__sfmoreglue>:
 8012090:	b570      	push	{r4, r5, r6, lr}
 8012092:	2268      	movs	r2, #104	; 0x68
 8012094:	1e4d      	subs	r5, r1, #1
 8012096:	4355      	muls	r5, r2
 8012098:	460e      	mov	r6, r1
 801209a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801209e:	f7ff fa5b 	bl	8011558 <_malloc_r>
 80120a2:	4604      	mov	r4, r0
 80120a4:	b140      	cbz	r0, 80120b8 <__sfmoreglue+0x28>
 80120a6:	2100      	movs	r1, #0
 80120a8:	e9c0 1600 	strd	r1, r6, [r0]
 80120ac:	300c      	adds	r0, #12
 80120ae:	60a0      	str	r0, [r4, #8]
 80120b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80120b4:	f7fb fda4 	bl	800dc00 <memset>
 80120b8:	4620      	mov	r0, r4
 80120ba:	bd70      	pop	{r4, r5, r6, pc}

080120bc <__sfp_lock_acquire>:
 80120bc:	4801      	ldr	r0, [pc, #4]	; (80120c4 <__sfp_lock_acquire+0x8>)
 80120be:	f000 b8b3 	b.w	8012228 <__retarget_lock_acquire_recursive>
 80120c2:	bf00      	nop
 80120c4:	20005731 	.word	0x20005731

080120c8 <__sfp_lock_release>:
 80120c8:	4801      	ldr	r0, [pc, #4]	; (80120d0 <__sfp_lock_release+0x8>)
 80120ca:	f000 b8ae 	b.w	801222a <__retarget_lock_release_recursive>
 80120ce:	bf00      	nop
 80120d0:	20005731 	.word	0x20005731

080120d4 <__sinit_lock_acquire>:
 80120d4:	4801      	ldr	r0, [pc, #4]	; (80120dc <__sinit_lock_acquire+0x8>)
 80120d6:	f000 b8a7 	b.w	8012228 <__retarget_lock_acquire_recursive>
 80120da:	bf00      	nop
 80120dc:	20005732 	.word	0x20005732

080120e0 <__sinit_lock_release>:
 80120e0:	4801      	ldr	r0, [pc, #4]	; (80120e8 <__sinit_lock_release+0x8>)
 80120e2:	f000 b8a2 	b.w	801222a <__retarget_lock_release_recursive>
 80120e6:	bf00      	nop
 80120e8:	20005732 	.word	0x20005732

080120ec <__sinit>:
 80120ec:	b510      	push	{r4, lr}
 80120ee:	4604      	mov	r4, r0
 80120f0:	f7ff fff0 	bl	80120d4 <__sinit_lock_acquire>
 80120f4:	69a3      	ldr	r3, [r4, #24]
 80120f6:	b11b      	cbz	r3, 8012100 <__sinit+0x14>
 80120f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120fc:	f7ff bff0 	b.w	80120e0 <__sinit_lock_release>
 8012100:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012104:	6523      	str	r3, [r4, #80]	; 0x50
 8012106:	4b13      	ldr	r3, [pc, #76]	; (8012154 <__sinit+0x68>)
 8012108:	4a13      	ldr	r2, [pc, #76]	; (8012158 <__sinit+0x6c>)
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	62a2      	str	r2, [r4, #40]	; 0x28
 801210e:	42a3      	cmp	r3, r4
 8012110:	bf04      	itt	eq
 8012112:	2301      	moveq	r3, #1
 8012114:	61a3      	streq	r3, [r4, #24]
 8012116:	4620      	mov	r0, r4
 8012118:	f000 f820 	bl	801215c <__sfp>
 801211c:	6060      	str	r0, [r4, #4]
 801211e:	4620      	mov	r0, r4
 8012120:	f000 f81c 	bl	801215c <__sfp>
 8012124:	60a0      	str	r0, [r4, #8]
 8012126:	4620      	mov	r0, r4
 8012128:	f000 f818 	bl	801215c <__sfp>
 801212c:	2200      	movs	r2, #0
 801212e:	60e0      	str	r0, [r4, #12]
 8012130:	2104      	movs	r1, #4
 8012132:	6860      	ldr	r0, [r4, #4]
 8012134:	f7ff ff82 	bl	801203c <std>
 8012138:	68a0      	ldr	r0, [r4, #8]
 801213a:	2201      	movs	r2, #1
 801213c:	2109      	movs	r1, #9
 801213e:	f7ff ff7d 	bl	801203c <std>
 8012142:	68e0      	ldr	r0, [r4, #12]
 8012144:	2202      	movs	r2, #2
 8012146:	2112      	movs	r1, #18
 8012148:	f7ff ff78 	bl	801203c <std>
 801214c:	2301      	movs	r3, #1
 801214e:	61a3      	str	r3, [r4, #24]
 8012150:	e7d2      	b.n	80120f8 <__sinit+0xc>
 8012152:	bf00      	nop
 8012154:	080126ac 	.word	0x080126ac
 8012158:	08012085 	.word	0x08012085

0801215c <__sfp>:
 801215c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801215e:	4607      	mov	r7, r0
 8012160:	f7ff ffac 	bl	80120bc <__sfp_lock_acquire>
 8012164:	4b1e      	ldr	r3, [pc, #120]	; (80121e0 <__sfp+0x84>)
 8012166:	681e      	ldr	r6, [r3, #0]
 8012168:	69b3      	ldr	r3, [r6, #24]
 801216a:	b913      	cbnz	r3, 8012172 <__sfp+0x16>
 801216c:	4630      	mov	r0, r6
 801216e:	f7ff ffbd 	bl	80120ec <__sinit>
 8012172:	3648      	adds	r6, #72	; 0x48
 8012174:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012178:	3b01      	subs	r3, #1
 801217a:	d503      	bpl.n	8012184 <__sfp+0x28>
 801217c:	6833      	ldr	r3, [r6, #0]
 801217e:	b30b      	cbz	r3, 80121c4 <__sfp+0x68>
 8012180:	6836      	ldr	r6, [r6, #0]
 8012182:	e7f7      	b.n	8012174 <__sfp+0x18>
 8012184:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012188:	b9d5      	cbnz	r5, 80121c0 <__sfp+0x64>
 801218a:	4b16      	ldr	r3, [pc, #88]	; (80121e4 <__sfp+0x88>)
 801218c:	60e3      	str	r3, [r4, #12]
 801218e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012192:	6665      	str	r5, [r4, #100]	; 0x64
 8012194:	f000 f847 	bl	8012226 <__retarget_lock_init_recursive>
 8012198:	f7ff ff96 	bl	80120c8 <__sfp_lock_release>
 801219c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80121a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80121a4:	6025      	str	r5, [r4, #0]
 80121a6:	61a5      	str	r5, [r4, #24]
 80121a8:	2208      	movs	r2, #8
 80121aa:	4629      	mov	r1, r5
 80121ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80121b0:	f7fb fd26 	bl	800dc00 <memset>
 80121b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80121b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80121bc:	4620      	mov	r0, r4
 80121be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121c0:	3468      	adds	r4, #104	; 0x68
 80121c2:	e7d9      	b.n	8012178 <__sfp+0x1c>
 80121c4:	2104      	movs	r1, #4
 80121c6:	4638      	mov	r0, r7
 80121c8:	f7ff ff62 	bl	8012090 <__sfmoreglue>
 80121cc:	4604      	mov	r4, r0
 80121ce:	6030      	str	r0, [r6, #0]
 80121d0:	2800      	cmp	r0, #0
 80121d2:	d1d5      	bne.n	8012180 <__sfp+0x24>
 80121d4:	f7ff ff78 	bl	80120c8 <__sfp_lock_release>
 80121d8:	230c      	movs	r3, #12
 80121da:	603b      	str	r3, [r7, #0]
 80121dc:	e7ee      	b.n	80121bc <__sfp+0x60>
 80121de:	bf00      	nop
 80121e0:	080126ac 	.word	0x080126ac
 80121e4:	ffff0001 	.word	0xffff0001

080121e8 <_fwalk_reent>:
 80121e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121ec:	4606      	mov	r6, r0
 80121ee:	4688      	mov	r8, r1
 80121f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80121f4:	2700      	movs	r7, #0
 80121f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80121fa:	f1b9 0901 	subs.w	r9, r9, #1
 80121fe:	d505      	bpl.n	801220c <_fwalk_reent+0x24>
 8012200:	6824      	ldr	r4, [r4, #0]
 8012202:	2c00      	cmp	r4, #0
 8012204:	d1f7      	bne.n	80121f6 <_fwalk_reent+0xe>
 8012206:	4638      	mov	r0, r7
 8012208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801220c:	89ab      	ldrh	r3, [r5, #12]
 801220e:	2b01      	cmp	r3, #1
 8012210:	d907      	bls.n	8012222 <_fwalk_reent+0x3a>
 8012212:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012216:	3301      	adds	r3, #1
 8012218:	d003      	beq.n	8012222 <_fwalk_reent+0x3a>
 801221a:	4629      	mov	r1, r5
 801221c:	4630      	mov	r0, r6
 801221e:	47c0      	blx	r8
 8012220:	4307      	orrs	r7, r0
 8012222:	3568      	adds	r5, #104	; 0x68
 8012224:	e7e9      	b.n	80121fa <_fwalk_reent+0x12>

08012226 <__retarget_lock_init_recursive>:
 8012226:	4770      	bx	lr

08012228 <__retarget_lock_acquire_recursive>:
 8012228:	4770      	bx	lr

0801222a <__retarget_lock_release_recursive>:
 801222a:	4770      	bx	lr

0801222c <__swhatbuf_r>:
 801222c:	b570      	push	{r4, r5, r6, lr}
 801222e:	460e      	mov	r6, r1
 8012230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012234:	2900      	cmp	r1, #0
 8012236:	b096      	sub	sp, #88	; 0x58
 8012238:	4614      	mov	r4, r2
 801223a:	461d      	mov	r5, r3
 801223c:	da08      	bge.n	8012250 <__swhatbuf_r+0x24>
 801223e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012242:	2200      	movs	r2, #0
 8012244:	602a      	str	r2, [r5, #0]
 8012246:	061a      	lsls	r2, r3, #24
 8012248:	d410      	bmi.n	801226c <__swhatbuf_r+0x40>
 801224a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801224e:	e00e      	b.n	801226e <__swhatbuf_r+0x42>
 8012250:	466a      	mov	r2, sp
 8012252:	f000 f903 	bl	801245c <_fstat_r>
 8012256:	2800      	cmp	r0, #0
 8012258:	dbf1      	blt.n	801223e <__swhatbuf_r+0x12>
 801225a:	9a01      	ldr	r2, [sp, #4]
 801225c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012260:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012264:	425a      	negs	r2, r3
 8012266:	415a      	adcs	r2, r3
 8012268:	602a      	str	r2, [r5, #0]
 801226a:	e7ee      	b.n	801224a <__swhatbuf_r+0x1e>
 801226c:	2340      	movs	r3, #64	; 0x40
 801226e:	2000      	movs	r0, #0
 8012270:	6023      	str	r3, [r4, #0]
 8012272:	b016      	add	sp, #88	; 0x58
 8012274:	bd70      	pop	{r4, r5, r6, pc}
	...

08012278 <__smakebuf_r>:
 8012278:	898b      	ldrh	r3, [r1, #12]
 801227a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801227c:	079d      	lsls	r5, r3, #30
 801227e:	4606      	mov	r6, r0
 8012280:	460c      	mov	r4, r1
 8012282:	d507      	bpl.n	8012294 <__smakebuf_r+0x1c>
 8012284:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012288:	6023      	str	r3, [r4, #0]
 801228a:	6123      	str	r3, [r4, #16]
 801228c:	2301      	movs	r3, #1
 801228e:	6163      	str	r3, [r4, #20]
 8012290:	b002      	add	sp, #8
 8012292:	bd70      	pop	{r4, r5, r6, pc}
 8012294:	ab01      	add	r3, sp, #4
 8012296:	466a      	mov	r2, sp
 8012298:	f7ff ffc8 	bl	801222c <__swhatbuf_r>
 801229c:	9900      	ldr	r1, [sp, #0]
 801229e:	4605      	mov	r5, r0
 80122a0:	4630      	mov	r0, r6
 80122a2:	f7ff f959 	bl	8011558 <_malloc_r>
 80122a6:	b948      	cbnz	r0, 80122bc <__smakebuf_r+0x44>
 80122a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122ac:	059a      	lsls	r2, r3, #22
 80122ae:	d4ef      	bmi.n	8012290 <__smakebuf_r+0x18>
 80122b0:	f023 0303 	bic.w	r3, r3, #3
 80122b4:	f043 0302 	orr.w	r3, r3, #2
 80122b8:	81a3      	strh	r3, [r4, #12]
 80122ba:	e7e3      	b.n	8012284 <__smakebuf_r+0xc>
 80122bc:	4b0d      	ldr	r3, [pc, #52]	; (80122f4 <__smakebuf_r+0x7c>)
 80122be:	62b3      	str	r3, [r6, #40]	; 0x28
 80122c0:	89a3      	ldrh	r3, [r4, #12]
 80122c2:	6020      	str	r0, [r4, #0]
 80122c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122c8:	81a3      	strh	r3, [r4, #12]
 80122ca:	9b00      	ldr	r3, [sp, #0]
 80122cc:	6163      	str	r3, [r4, #20]
 80122ce:	9b01      	ldr	r3, [sp, #4]
 80122d0:	6120      	str	r0, [r4, #16]
 80122d2:	b15b      	cbz	r3, 80122ec <__smakebuf_r+0x74>
 80122d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80122d8:	4630      	mov	r0, r6
 80122da:	f000 f8d1 	bl	8012480 <_isatty_r>
 80122de:	b128      	cbz	r0, 80122ec <__smakebuf_r+0x74>
 80122e0:	89a3      	ldrh	r3, [r4, #12]
 80122e2:	f023 0303 	bic.w	r3, r3, #3
 80122e6:	f043 0301 	orr.w	r3, r3, #1
 80122ea:	81a3      	strh	r3, [r4, #12]
 80122ec:	89a0      	ldrh	r0, [r4, #12]
 80122ee:	4305      	orrs	r5, r0
 80122f0:	81a5      	strh	r5, [r4, #12]
 80122f2:	e7cd      	b.n	8012290 <__smakebuf_r+0x18>
 80122f4:	08012085 	.word	0x08012085

080122f8 <_malloc_usable_size_r>:
 80122f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80122fc:	1f18      	subs	r0, r3, #4
 80122fe:	2b00      	cmp	r3, #0
 8012300:	bfbc      	itt	lt
 8012302:	580b      	ldrlt	r3, [r1, r0]
 8012304:	18c0      	addlt	r0, r0, r3
 8012306:	4770      	bx	lr

08012308 <_raise_r>:
 8012308:	291f      	cmp	r1, #31
 801230a:	b538      	push	{r3, r4, r5, lr}
 801230c:	4604      	mov	r4, r0
 801230e:	460d      	mov	r5, r1
 8012310:	d904      	bls.n	801231c <_raise_r+0x14>
 8012312:	2316      	movs	r3, #22
 8012314:	6003      	str	r3, [r0, #0]
 8012316:	f04f 30ff 	mov.w	r0, #4294967295
 801231a:	bd38      	pop	{r3, r4, r5, pc}
 801231c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801231e:	b112      	cbz	r2, 8012326 <_raise_r+0x1e>
 8012320:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012324:	b94b      	cbnz	r3, 801233a <_raise_r+0x32>
 8012326:	4620      	mov	r0, r4
 8012328:	f000 f830 	bl	801238c <_getpid_r>
 801232c:	462a      	mov	r2, r5
 801232e:	4601      	mov	r1, r0
 8012330:	4620      	mov	r0, r4
 8012332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012336:	f000 b817 	b.w	8012368 <_kill_r>
 801233a:	2b01      	cmp	r3, #1
 801233c:	d00a      	beq.n	8012354 <_raise_r+0x4c>
 801233e:	1c59      	adds	r1, r3, #1
 8012340:	d103      	bne.n	801234a <_raise_r+0x42>
 8012342:	2316      	movs	r3, #22
 8012344:	6003      	str	r3, [r0, #0]
 8012346:	2001      	movs	r0, #1
 8012348:	e7e7      	b.n	801231a <_raise_r+0x12>
 801234a:	2400      	movs	r4, #0
 801234c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012350:	4628      	mov	r0, r5
 8012352:	4798      	blx	r3
 8012354:	2000      	movs	r0, #0
 8012356:	e7e0      	b.n	801231a <_raise_r+0x12>

08012358 <raise>:
 8012358:	4b02      	ldr	r3, [pc, #8]	; (8012364 <raise+0xc>)
 801235a:	4601      	mov	r1, r0
 801235c:	6818      	ldr	r0, [r3, #0]
 801235e:	f7ff bfd3 	b.w	8012308 <_raise_r>
 8012362:	bf00      	nop
 8012364:	20000110 	.word	0x20000110

08012368 <_kill_r>:
 8012368:	b538      	push	{r3, r4, r5, lr}
 801236a:	4d07      	ldr	r5, [pc, #28]	; (8012388 <_kill_r+0x20>)
 801236c:	2300      	movs	r3, #0
 801236e:	4604      	mov	r4, r0
 8012370:	4608      	mov	r0, r1
 8012372:	4611      	mov	r1, r2
 8012374:	602b      	str	r3, [r5, #0]
 8012376:	f7f2 f8c9 	bl	800450c <_kill>
 801237a:	1c43      	adds	r3, r0, #1
 801237c:	d102      	bne.n	8012384 <_kill_r+0x1c>
 801237e:	682b      	ldr	r3, [r5, #0]
 8012380:	b103      	cbz	r3, 8012384 <_kill_r+0x1c>
 8012382:	6023      	str	r3, [r4, #0]
 8012384:	bd38      	pop	{r3, r4, r5, pc}
 8012386:	bf00      	nop
 8012388:	2000572c 	.word	0x2000572c

0801238c <_getpid_r>:
 801238c:	f7f2 b8b6 	b.w	80044fc <_getpid>

08012390 <__sread>:
 8012390:	b510      	push	{r4, lr}
 8012392:	460c      	mov	r4, r1
 8012394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012398:	f000 f894 	bl	80124c4 <_read_r>
 801239c:	2800      	cmp	r0, #0
 801239e:	bfab      	itete	ge
 80123a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80123a2:	89a3      	ldrhlt	r3, [r4, #12]
 80123a4:	181b      	addge	r3, r3, r0
 80123a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80123aa:	bfac      	ite	ge
 80123ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80123ae:	81a3      	strhlt	r3, [r4, #12]
 80123b0:	bd10      	pop	{r4, pc}

080123b2 <__swrite>:
 80123b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123b6:	461f      	mov	r7, r3
 80123b8:	898b      	ldrh	r3, [r1, #12]
 80123ba:	05db      	lsls	r3, r3, #23
 80123bc:	4605      	mov	r5, r0
 80123be:	460c      	mov	r4, r1
 80123c0:	4616      	mov	r6, r2
 80123c2:	d505      	bpl.n	80123d0 <__swrite+0x1e>
 80123c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123c8:	2302      	movs	r3, #2
 80123ca:	2200      	movs	r2, #0
 80123cc:	f000 f868 	bl	80124a0 <_lseek_r>
 80123d0:	89a3      	ldrh	r3, [r4, #12]
 80123d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80123d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80123da:	81a3      	strh	r3, [r4, #12]
 80123dc:	4632      	mov	r2, r6
 80123de:	463b      	mov	r3, r7
 80123e0:	4628      	mov	r0, r5
 80123e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80123e6:	f000 b817 	b.w	8012418 <_write_r>

080123ea <__sseek>:
 80123ea:	b510      	push	{r4, lr}
 80123ec:	460c      	mov	r4, r1
 80123ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123f2:	f000 f855 	bl	80124a0 <_lseek_r>
 80123f6:	1c43      	adds	r3, r0, #1
 80123f8:	89a3      	ldrh	r3, [r4, #12]
 80123fa:	bf15      	itete	ne
 80123fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80123fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012402:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012406:	81a3      	strheq	r3, [r4, #12]
 8012408:	bf18      	it	ne
 801240a:	81a3      	strhne	r3, [r4, #12]
 801240c:	bd10      	pop	{r4, pc}

0801240e <__sclose>:
 801240e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012412:	f000 b813 	b.w	801243c <_close_r>
	...

08012418 <_write_r>:
 8012418:	b538      	push	{r3, r4, r5, lr}
 801241a:	4d07      	ldr	r5, [pc, #28]	; (8012438 <_write_r+0x20>)
 801241c:	4604      	mov	r4, r0
 801241e:	4608      	mov	r0, r1
 8012420:	4611      	mov	r1, r2
 8012422:	2200      	movs	r2, #0
 8012424:	602a      	str	r2, [r5, #0]
 8012426:	461a      	mov	r2, r3
 8012428:	f7f2 f8a7 	bl	800457a <_write>
 801242c:	1c43      	adds	r3, r0, #1
 801242e:	d102      	bne.n	8012436 <_write_r+0x1e>
 8012430:	682b      	ldr	r3, [r5, #0]
 8012432:	b103      	cbz	r3, 8012436 <_write_r+0x1e>
 8012434:	6023      	str	r3, [r4, #0]
 8012436:	bd38      	pop	{r3, r4, r5, pc}
 8012438:	2000572c 	.word	0x2000572c

0801243c <_close_r>:
 801243c:	b538      	push	{r3, r4, r5, lr}
 801243e:	4d06      	ldr	r5, [pc, #24]	; (8012458 <_close_r+0x1c>)
 8012440:	2300      	movs	r3, #0
 8012442:	4604      	mov	r4, r0
 8012444:	4608      	mov	r0, r1
 8012446:	602b      	str	r3, [r5, #0]
 8012448:	f7f2 f8b3 	bl	80045b2 <_close>
 801244c:	1c43      	adds	r3, r0, #1
 801244e:	d102      	bne.n	8012456 <_close_r+0x1a>
 8012450:	682b      	ldr	r3, [r5, #0]
 8012452:	b103      	cbz	r3, 8012456 <_close_r+0x1a>
 8012454:	6023      	str	r3, [r4, #0]
 8012456:	bd38      	pop	{r3, r4, r5, pc}
 8012458:	2000572c 	.word	0x2000572c

0801245c <_fstat_r>:
 801245c:	b538      	push	{r3, r4, r5, lr}
 801245e:	4d07      	ldr	r5, [pc, #28]	; (801247c <_fstat_r+0x20>)
 8012460:	2300      	movs	r3, #0
 8012462:	4604      	mov	r4, r0
 8012464:	4608      	mov	r0, r1
 8012466:	4611      	mov	r1, r2
 8012468:	602b      	str	r3, [r5, #0]
 801246a:	f7f2 f8ae 	bl	80045ca <_fstat>
 801246e:	1c43      	adds	r3, r0, #1
 8012470:	d102      	bne.n	8012478 <_fstat_r+0x1c>
 8012472:	682b      	ldr	r3, [r5, #0]
 8012474:	b103      	cbz	r3, 8012478 <_fstat_r+0x1c>
 8012476:	6023      	str	r3, [r4, #0]
 8012478:	bd38      	pop	{r3, r4, r5, pc}
 801247a:	bf00      	nop
 801247c:	2000572c 	.word	0x2000572c

08012480 <_isatty_r>:
 8012480:	b538      	push	{r3, r4, r5, lr}
 8012482:	4d06      	ldr	r5, [pc, #24]	; (801249c <_isatty_r+0x1c>)
 8012484:	2300      	movs	r3, #0
 8012486:	4604      	mov	r4, r0
 8012488:	4608      	mov	r0, r1
 801248a:	602b      	str	r3, [r5, #0]
 801248c:	f7f2 f8ad 	bl	80045ea <_isatty>
 8012490:	1c43      	adds	r3, r0, #1
 8012492:	d102      	bne.n	801249a <_isatty_r+0x1a>
 8012494:	682b      	ldr	r3, [r5, #0]
 8012496:	b103      	cbz	r3, 801249a <_isatty_r+0x1a>
 8012498:	6023      	str	r3, [r4, #0]
 801249a:	bd38      	pop	{r3, r4, r5, pc}
 801249c:	2000572c 	.word	0x2000572c

080124a0 <_lseek_r>:
 80124a0:	b538      	push	{r3, r4, r5, lr}
 80124a2:	4d07      	ldr	r5, [pc, #28]	; (80124c0 <_lseek_r+0x20>)
 80124a4:	4604      	mov	r4, r0
 80124a6:	4608      	mov	r0, r1
 80124a8:	4611      	mov	r1, r2
 80124aa:	2200      	movs	r2, #0
 80124ac:	602a      	str	r2, [r5, #0]
 80124ae:	461a      	mov	r2, r3
 80124b0:	f7f2 f8a6 	bl	8004600 <_lseek>
 80124b4:	1c43      	adds	r3, r0, #1
 80124b6:	d102      	bne.n	80124be <_lseek_r+0x1e>
 80124b8:	682b      	ldr	r3, [r5, #0]
 80124ba:	b103      	cbz	r3, 80124be <_lseek_r+0x1e>
 80124bc:	6023      	str	r3, [r4, #0]
 80124be:	bd38      	pop	{r3, r4, r5, pc}
 80124c0:	2000572c 	.word	0x2000572c

080124c4 <_read_r>:
 80124c4:	b538      	push	{r3, r4, r5, lr}
 80124c6:	4d07      	ldr	r5, [pc, #28]	; (80124e4 <_read_r+0x20>)
 80124c8:	4604      	mov	r4, r0
 80124ca:	4608      	mov	r0, r1
 80124cc:	4611      	mov	r1, r2
 80124ce:	2200      	movs	r2, #0
 80124d0:	602a      	str	r2, [r5, #0]
 80124d2:	461a      	mov	r2, r3
 80124d4:	f7f2 f834 	bl	8004540 <_read>
 80124d8:	1c43      	adds	r3, r0, #1
 80124da:	d102      	bne.n	80124e2 <_read_r+0x1e>
 80124dc:	682b      	ldr	r3, [r5, #0]
 80124de:	b103      	cbz	r3, 80124e2 <_read_r+0x1e>
 80124e0:	6023      	str	r3, [r4, #0]
 80124e2:	bd38      	pop	{r3, r4, r5, pc}
 80124e4:	2000572c 	.word	0x2000572c

080124e8 <_init>:
 80124e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124ea:	bf00      	nop
 80124ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124ee:	bc08      	pop	{r3}
 80124f0:	469e      	mov	lr, r3
 80124f2:	4770      	bx	lr

080124f4 <_fini>:
 80124f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124f6:	bf00      	nop
 80124f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124fa:	bc08      	pop	{r3}
 80124fc:	469e      	mov	lr, r3
 80124fe:	4770      	bx	lr
