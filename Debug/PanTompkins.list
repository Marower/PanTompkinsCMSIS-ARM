
PanTompkins.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000128d8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000654  08012a18  08012a18  00022a18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0801306c  0801306c  0002306c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08013070  08013070  00023070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000002e0  20000004  08013074  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00005474  200002e4  08013354  000302e4  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20005758  08013354  00035758  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000302e4  2**0
                  CONTENTS, READONLY
  9 .debug_info   00031eef  00000000  00000000  00030314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004c81  00000000  00000000  00062203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002620  00000000  00000000  00066e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00002408  00000000  00000000  000694a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002597c  00000000  00000000  0006b8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000306bb  00000000  00000000  0009122c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000e82c5  00000000  00000000  000c18e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001a9bac  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000bb50  00000000  00000000  001a9bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002e4 	.word	0x200002e4
 800015c:	00000000 	.word	0x00000000
 8000160:	08012a00 	.word	0x08012a00

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002e8 	.word	0x200002e8
 800017c:	08012a00 	.word	0x08012a00

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_d2lz>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460d      	mov	r5, r1
 8000c42:	f7ff ff23 	bl	8000a8c <__aeabi_dcmplt>
 8000c46:	b928      	cbnz	r0, 8000c54 <__aeabi_d2lz+0x1c>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c50:	f000 b80a 	b.w	8000c68 <__aeabi_d2ulz>
 8000c54:	4620      	mov	r0, r4
 8000c56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5a:	f000 f805 	bl	8000c68 <__aeabi_d2ulz>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2ulz>:
 8000c68:	b5d0      	push	{r4, r6, r7, lr}
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__aeabi_d2ulz+0x34>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	f7ff fc99 	bl	80005a8 <__aeabi_dmul>
 8000c76:	f7ff ff6f 	bl	8000b58 <__aeabi_d2uiz>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	f7ff fc1a 	bl	80004b4 <__aeabi_ui2d>
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <__aeabi_d2ulz+0x38>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f7ff fc90 	bl	80005a8 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	4639      	mov	r1, r7
 8000c90:	f7ff fad2 	bl	8000238 <__aeabi_dsub>
 8000c94:	f7ff ff60 	bl	8000b58 <__aeabi_d2uiz>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c9c:	3df00000 	.word	0x3df00000
 8000ca0:	41f00000 	.word	0x41f00000

08000ca4 <arm_biquad_cascade_df1_f32>:
void arm_biquad_cascade_df1_f32(
  const arm_biquad_casd_df1_inst_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b097      	sub	sp, #92	; 0x5c
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
 8000cb0:	603b      	str	r3, [r7, #0]
  const float32_t *pIn = pSrc;                         /* Source pointer */
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	657b      	str	r3, [r7, #84]	; 0x54
        float32_t *pOut = pDst;                        /* Destination pointer */
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	653b      	str	r3, [r7, #80]	; 0x50
        float32_t *pState = S->pState;                 /* pState pointer */
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t acc;                                 /* Accumulator */
        float32_t b0, b1, b2, a1, a2;                  /* Filter coefficients */
        float32_t Xn1, Xn2, Yn1, Yn2;                  /* Filter pState variables */
        float32_t Xn;                                  /* Temporary input */
        uint32_t sample, stage = S->numStages;         /* Loop counters */
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	633b      	str	r3, [r7, #48]	; 0x30

  do
  {
    /* Reading the coefficients */
    b0 = *pCoeffs++;
 8000ccc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cce:	1d1a      	adds	r2, r3, #4
 8000cd0:	64ba      	str	r2, [r7, #72]	; 0x48
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    b1 = *pCoeffs++;
 8000cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cd8:	1d1a      	adds	r2, r3, #4
 8000cda:	64ba      	str	r2, [r7, #72]	; 0x48
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
    b2 = *pCoeffs++;
 8000ce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ce2:	1d1a      	adds	r2, r3, #4
 8000ce4:	64ba      	str	r2, [r7, #72]	; 0x48
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
    a1 = *pCoeffs++;
 8000cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cec:	1d1a      	adds	r2, r3, #4
 8000cee:	64ba      	str	r2, [r7, #72]	; 0x48
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	623b      	str	r3, [r7, #32]
    a2 = *pCoeffs++;
 8000cf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cf6:	1d1a      	adds	r2, r3, #4
 8000cf8:	64ba      	str	r2, [r7, #72]	; 0x48
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	61fb      	str	r3, [r7, #28]

    /* Reading the pState values */
    Xn1 = pState[0];
 8000cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	647b      	str	r3, [r7, #68]	; 0x44
    Xn2 = pState[1];
 8000d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	643b      	str	r3, [r7, #64]	; 0x40
    Yn1 = pState[2];
 8000d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    Yn2 = pState[3];
 8000d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	63bb      	str	r3, [r7, #56]	; 0x38
    sample = blockSize & 0x3U;

#else

    /* Initialize blkCnt with number of samples */
    sample = blockSize;
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	637b      	str	r3, [r7, #52]	; 0x34

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (sample > 0U)
 8000d1a:	e03c      	b.n	8000d96 <arm_biquad_cascade_df1_f32+0xf2>
    {
      /* Read the input */
      Xn = *pIn++;
 8000d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d1e:	1d1a      	adds	r2, r3, #4
 8000d20:	657a      	str	r2, [r7, #84]	; 0x54
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	61bb      	str	r3, [r7, #24]

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      acc = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 8000d26:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000d2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d32:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8000d36:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000d3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d42:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8000d46:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000d4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d52:	edd7 6a08 	vldr	s13, [r7, #32]
 8000d56:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000d5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d62:	edd7 6a07 	vldr	s13, [r7, #28]
 8000d66:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000d6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d72:	edc7 7a05 	vstr	s15, [r7, #20]

      /* Store output in destination buffer. */
      *pOut++ = acc;
 8000d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d78:	1d1a      	adds	r2, r3, #4
 8000d7a:	653a      	str	r2, [r7, #80]	; 0x50
 8000d7c:	697a      	ldr	r2, [r7, #20]
 8000d7e:	601a      	str	r2, [r3, #0]
      /* The states should be updated as: */
      /* Xn2 = Xn1 */
      /* Xn1 = Xn  */
      /* Yn2 = Yn1 */
      /* Yn1 = acc */
      Xn2 = Xn1;
 8000d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d82:	643b      	str	r3, [r7, #64]	; 0x40
      Xn1 = Xn;
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	647b      	str	r3, [r7, #68]	; 0x44
      Yn2 = Yn1;
 8000d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d8a:	63bb      	str	r3, [r7, #56]	; 0x38
      Yn1 = acc;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	63fb      	str	r3, [r7, #60]	; 0x3c

      /* decrement loop counter */
      sample--;
 8000d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d92:	3b01      	subs	r3, #1
 8000d94:	637b      	str	r3, [r7, #52]	; 0x34
    while (sample > 0U)
 8000d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d1bf      	bne.n	8000d1c <arm_biquad_cascade_df1_f32+0x78>
    }

    /* Store the updated state variables back into the pState array */
    *pState++ = Xn1;
 8000d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d9e:	1d1a      	adds	r2, r3, #4
 8000da0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000da2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000da4:	601a      	str	r2, [r3, #0]
    *pState++ = Xn2;
 8000da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000da8:	1d1a      	adds	r2, r3, #4
 8000daa:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000dac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000dae:	601a      	str	r2, [r3, #0]
    *pState++ = Yn1;
 8000db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000db2:	1d1a      	adds	r2, r3, #4
 8000db4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000db6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000db8:	601a      	str	r2, [r3, #0]
    *pState++ = Yn2;
 8000dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dbc:	1d1a      	adds	r2, r3, #4
 8000dbe:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000dc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000dc2:	601a      	str	r2, [r3, #0]

    /* The first stage goes from the input buffer to the output buffer. */
    /* Subsequent numStages occur in-place in the output buffer */
    pIn = pDst;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	657b      	str	r3, [r7, #84]	; 0x54

    /* Reset output pointer */
    pOut = pDst;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	653b      	str	r3, [r7, #80]	; 0x50

    /* decrement loop counter */
    stage--;
 8000dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	633b      	str	r3, [r7, #48]	; 0x30

  } while (stage > 0U);
 8000dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f47f af79 	bne.w	8000ccc <arm_biquad_cascade_df1_f32+0x28>

}
 8000dda:	bf00      	nop
 8000ddc:	bf00      	nop
 8000dde:	375c      	adds	r7, #92	; 0x5c
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <arm_biquad_cascade_df1_init_f32>:
void arm_biquad_cascade_df1_init_f32(
        arm_biquad_casd_df1_inst_f32 * S,
        uint8_t numStages,
  const float32_t * pCoeffs,
        float32_t * pState)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	460b      	mov	r3, r1
 8000df6:	72fb      	strb	r3, [r7, #11]
  /* Assign filter stages */
  S->numStages = numStages;
 8000df8:	7afa      	ldrb	r2, [r7, #11]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	601a      	str	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	609a      	str	r2, [r3, #8]

  /* Clear state buffer and size is always 4 * numStages */
  memset(pState, 0, (4U * (uint32_t) numStages) * sizeof(float32_t));
 8000e04:	7afb      	ldrb	r3, [r7, #11]
 8000e06:	011b      	lsls	r3, r3, #4
 8000e08:	461a      	mov	r2, r3
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	6838      	ldr	r0, [r7, #0]
 8000e0e:	f00d f983 	bl	800e118 <memset>

  /* Assign state pointer */
  S->pState = pState;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	683a      	ldr	r2, [r7, #0]
 8000e16:	605a      	str	r2, [r3, #4]
}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <arm_fir_f32>:
void arm_fir_f32(
  const arm_fir_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b08f      	sub	sp, #60	; 0x3c
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
 8000e2c:	603b      	str	r3, [r7, #0]
        float32_t *pState = S->pState;                 /* State pointer */
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	637b      	str	r3, [r7, #52]	; 0x34
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	617b      	str	r3, [r7, #20]
        float32_t *pStateCurnt;                        /* Points to the current sample of the state */
        float32_t *px;                                 /* Temporary pointer for state buffer */
  const float32_t *pb;                                 /* Temporary pointer for coefficient buffer */
        float32_t acc0;                                /* Accumulator */
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	881b      	ldrh	r3, [r3, #0]
 8000e3e:	613b      	str	r3, [r7, #16]
        float32_t c0;                                           /* Temporary variable to hold coefficient value */
#endif

  /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
  /* pStateCurnt points to the location where the new input data should be written */
  pStateCurnt = &(S->pState[(numTaps - 1U)]);
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	685a      	ldr	r2, [r3, #4]
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	4413      	add	r3, r2
 8000e50:	633b      	str	r3, [r7, #48]	; 0x30
  blkCnt = blockSize % 0x8U;

#else

  /* Initialize blkCnt with number of taps */
  blkCnt = blockSize;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8000e56:	e034      	b.n	8000ec2 <arm_fir_f32+0xa2>
  {
    /* Copy one sample at a time into state buffer */
    *pStateCurnt++ = *pSrc++;
 8000e58:	68ba      	ldr	r2, [r7, #8]
 8000e5a:	1d13      	adds	r3, r2, #4
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e60:	1d19      	adds	r1, r3, #4
 8000e62:	6339      	str	r1, [r7, #48]	; 0x30
 8000e64:	6812      	ldr	r2, [r2, #0]
 8000e66:	601a      	str	r2, [r3, #0]

    /* Set the accumulator to zero */
    acc0 = 0.0f;
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Initialize state pointer */
    px = pState;
 8000e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e70:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Initialize Coefficient pointer */
    pb = pCoeffs;
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	62bb      	str	r3, [r7, #40]	; 0x28

    i = numTaps;
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	623b      	str	r3, [r7, #32]

    /* Perform the multiply-accumulates */
    while (i > 0U)
 8000e7a:	e014      	b.n	8000ea6 <arm_fir_f32+0x86>
    {
      /* acc =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-numTaps-3] +...+ b[0] * x[0] */
      acc0 += *px++ * *pb++;
 8000e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e7e:	1d1a      	adds	r2, r3, #4
 8000e80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000e82:	ed93 7a00 	vldr	s14, [r3]
 8000e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e88:	1d1a      	adds	r2, r3, #4
 8000e8a:	62ba      	str	r2, [r7, #40]	; 0x28
 8000e8c:	edd3 7a00 	vldr	s15, [r3]
 8000e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e94:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000e98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e9c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

      i--;
 8000ea0:	6a3b      	ldr	r3, [r7, #32]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	623b      	str	r3, [r7, #32]
    while (i > 0U)
 8000ea6:	6a3b      	ldr	r3, [r7, #32]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1e7      	bne.n	8000e7c <arm_fir_f32+0x5c>
    }

    /* Store result in destination buffer. */
    *pDst++ = acc0;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	1d1a      	adds	r2, r3, #4
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eb4:	601a      	str	r2, [r3, #0]

    /* Advance state pointer by 1 for the next sample */
    pState = pState + 1U;
 8000eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eb8:	3304      	adds	r3, #4
 8000eba:	637b      	str	r3, [r7, #52]	; 0x34

    /* Decrement loop counter */
    blkCnt--;
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1c7      	bne.n	8000e58 <arm_fir_f32+0x38>
  /* Processing is complete.
     Now copy the last numTaps - 1 samples to the start of the state buffer.
     This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCurnt = S->pState;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	633b      	str	r3, [r7, #48]	; 0x30
  tapCnt = (numTaps - 1U) % 0x4U;

#else

  /* Initialize tapCnt with number of taps */
  tapCnt = (numTaps - 1U);
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy remaining data */
  while (tapCnt > 0U)
 8000ed4:	e00a      	b.n	8000eec <arm_fir_f32+0xcc>
  {
    *pStateCurnt++ = *pState++;
 8000ed6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ed8:	1d13      	adds	r3, r2, #4
 8000eda:	637b      	str	r3, [r7, #52]	; 0x34
 8000edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ede:	1d19      	adds	r1, r3, #4
 8000ee0:	6339      	str	r1, [r7, #48]	; 0x30
 8000ee2:	6812      	ldr	r2, [r2, #0]
 8000ee4:	601a      	str	r2, [r3, #0]

    /* Decrement loop counter */
    tapCnt--;
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	61fb      	str	r3, [r7, #28]
  while (tapCnt > 0U)
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1f1      	bne.n	8000ed6 <arm_fir_f32+0xb6>
  }

}
 8000ef2:	bf00      	nop
 8000ef4:	bf00      	nop
 8000ef6:	373c      	adds	r7, #60	; 0x3c
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <arm_fir_init_f32>:
        arm_fir_instance_f32 * S,
        uint16_t numTaps,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	817b      	strh	r3, [r7, #10]
  /* Assign filter taps */
  S->numTaps = numTaps;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	897a      	ldrh	r2, [r7, #10]
 8000f14:	801a      	strh	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	609a      	str	r2, [r3, #8]

  /* Clear state buffer. The size is always (blockSize + numTaps - 1) */
#if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  memset(pState, 0, (numTaps + (blockSize - 1U) + blockSize) * sizeof(float32_t));
#else
  memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 8000f1c:	897a      	ldrh	r2, [r7, #10]
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	4413      	add	r3, r2
 8000f22:	3b01      	subs	r3, #1
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	461a      	mov	r2, r3
 8000f28:	2100      	movs	r1, #0
 8000f2a:	6838      	ldr	r0, [r7, #0]
 8000f2c:	f00d f8f4 	bl	800e118 <memset>
#endif
  /* Assign state pointer */
  S->pState = pState;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	683a      	ldr	r2, [r7, #0]
 8000f34:	605a      	str	r2, [r3, #4]
}
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <arm_mean_f32>:
#else
void arm_mean_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b087      	sub	sp, #28
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	60f8      	str	r0, [r7, #12]
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 8000f4a:	f04f 0300 	mov.w	r3, #0
 8000f4e:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8000f54:	e00d      	b.n	8000f72 <arm_mean_f32+0x34>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	1d1a      	adds	r2, r3, #4
 8000f5a:	60fa      	str	r2, [r7, #12]
 8000f5c:	edd3 7a00 	vldr	s15, [r3]
 8000f60:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f68:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1ee      	bne.n	8000f56 <arm_mean_f32+0x18>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store result to destination */
  *pResult = (sum / blockSize);
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	ee07 3a90 	vmov	s15, r3
 8000f7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f82:	edd7 6a04 	vldr	s13, [r7, #16]
 8000f86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	edc3 7a00 	vstr	s15, [r3]
}
 8000f90:	bf00      	nop
 8000f92:	371c      	adds	r7, #28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <PT_init>:
	and filter Buffers.

 *******************************************************************************/

void PT_init( void )
{
 8000f9c:	b590      	push	{r4, r7, lr}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
	/**************************************************
	Initialize Pan_Tompkins structure.
	**************************************************/

	memset(&PT_data, 0, sizeof(PT_data));
 8000fa2:	22ea      	movs	r2, #234	; 0xea
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	487d      	ldr	r0, [pc, #500]	; (800119c <PT_init+0x200>)
 8000fa8:	f00d f8b6 	bl	800e118 <memset>

	PT_dptr->PT_state		= START_UP;
 8000fac:	4b7b      	ldr	r3, [pc, #492]	; (800119c <PT_init+0x200>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	80da      	strh	r2, [r3, #6]

	PT_dptr->Recent_RR_M = PT_dptr->RR_M =  PT1000MS;
 8000fb2:	4b7a      	ldr	r3, [pc, #488]	; (800119c <PT_init+0x200>)
 8000fb4:	22c8      	movs	r2, #200	; 0xc8
 8000fb6:	849a      	strh	r2, [r3, #36]	; 0x24
 8000fb8:	4a78      	ldr	r2, [pc, #480]	; (800119c <PT_init+0x200>)
 8000fba:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8000fbe:	8113      	strh	r3, [r2, #8]

	PT_dptr->RR_Low_L		= RR92PERCENT;
 8000fc0:	4b76      	ldr	r3, [pc, #472]	; (800119c <PT_init+0x200>)
 8000fc2:	22b8      	movs	r2, #184	; 0xb8
 8000fc4:	84da      	strh	r2, [r3, #38]	; 0x26
	PT_dptr->RR_High_L		= RR116PERCENT;
 8000fc6:	4b75      	ldr	r3, [pc, #468]	; (800119c <PT_init+0x200>)
 8000fc8:	22e8      	movs	r2, #232	; 0xe8
 8000fca:	851a      	strh	r2, [r3, #40]	; 0x28
	PT_dptr->RR_Missed_L	= RR166PERCENT;
 8000fcc:	4b73      	ldr	r3, [pc, #460]	; (800119c <PT_init+0x200>)
 8000fce:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8000fd2:	855a      	strh	r2, [r3, #42]	; 0x2a

	PT_dptr->LP_pointer		= 0;
 8000fd4:	4b71      	ldr	r3, [pc, #452]	; (800119c <PT_init+0x200>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	801a      	strh	r2, [r3, #0]
	PT_dptr->HP_pointer		= 0;
 8000fda:	4b70      	ldr	r3, [pc, #448]	; (800119c <PT_init+0x200>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	805a      	strh	r2, [r3, #2]
	PT_dptr->MVA_pointer	= 0;
 8000fe0:	4b6e      	ldr	r3, [pc, #440]	; (800119c <PT_init+0x200>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	809a      	strh	r2, [r3, #4]

	PT_dptr->HR_State = REGULAR_HR;
 8000fe6:	4b6d      	ldr	r3, [pc, #436]	; (800119c <PT_init+0x200>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	859a      	strh	r2, [r3, #44]	; 0x2c
	/**************************************************
	Initialize filter buffers
	**************************************************/
	int8_t idex;

	for (idex = 0; idex < LP_BUFFER_SIZE; idex++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	e00d      	b.n	800100e <PT_init+0x72>
		PT_dptr->LP_buf[idex]		= 0;							//  LP filter buffer
 8000ff2:	4a6a      	ldr	r2, [pc, #424]	; (800119c <PT_init+0x200>)
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	3314      	adds	r3, #20
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	4413      	add	r3, r2
 8000ffe:	2200      	movs	r2, #0
 8001000:	80da      	strh	r2, [r3, #6]
	for (idex = 0; idex < LP_BUFFER_SIZE; idex++)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	3301      	adds	r3, #1
 800100a:	b2db      	uxtb	r3, r3
 800100c:	71fb      	strb	r3, [r7, #7]
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	2b0b      	cmp	r3, #11
 8001014:	dded      	ble.n	8000ff2 <PT_init+0x56>
	for (idex = 0; idex < HP_BUFFER_SIZE; idex++)
 8001016:	2300      	movs	r3, #0
 8001018:	71fb      	strb	r3, [r7, #7]
 800101a:	e00d      	b.n	8001038 <PT_init+0x9c>
		PT_dptr->HP_buf[idex]		= 0;							//  HP filter buffer
 800101c:	4a5f      	ldr	r2, [pc, #380]	; (800119c <PT_init+0x200>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	3320      	adds	r3, #32
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	4413      	add	r3, r2
 8001028:	2200      	movs	r2, #0
 800102a:	80da      	strh	r2, [r3, #6]
	for (idex = 0; idex < HP_BUFFER_SIZE; idex++)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	3301      	adds	r3, #1
 8001034:	b2db      	uxtb	r3, r3
 8001036:	71fb      	strb	r3, [r7, #7]
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	2b1f      	cmp	r3, #31
 800103e:	dded      	ble.n	800101c <PT_init+0x80>
	for (idex = 0; idex < DR_BUFFER_SIZE; idex++)
 8001040:	2300      	movs	r3, #0
 8001042:	71fb      	strb	r3, [r7, #7]
 8001044:	e00d      	b.n	8001062 <PT_init+0xc6>
		PT_dptr->DR_buf[idex]		= 0;							//  DR filter buffer
 8001046:	4a55      	ldr	r2, [pc, #340]	; (800119c <PT_init+0x200>)
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	3340      	adds	r3, #64	; 0x40
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	4413      	add	r3, r2
 8001052:	2200      	movs	r2, #0
 8001054:	80da      	strh	r2, [r3, #6]
	for (idex = 0; idex < DR_BUFFER_SIZE; idex++)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	3301      	adds	r3, #1
 800105e:	b2db      	uxtb	r3, r3
 8001060:	71fb      	strb	r3, [r7, #7]
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	2b03      	cmp	r3, #3
 8001068:	dded      	ble.n	8001046 <PT_init+0xaa>
	for (idex = 0; idex < MVA_BUFFER_SIZE; idex++)
 800106a:	2300      	movs	r3, #0
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	e00d      	b.n	800108c <PT_init+0xf0>
		PT_dptr->MVA_buf[idex]		= 0;							//  MVA filter buffer
 8001070:	4a4a      	ldr	r2, [pc, #296]	; (800119c <PT_init+0x200>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	3344      	adds	r3, #68	; 0x44
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	4413      	add	r3, r2
 800107c:	2200      	movs	r2, #0
 800107e:	80da      	strh	r2, [r3, #6]
	for (idex = 0; idex < MVA_BUFFER_SIZE; idex++)
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	3301      	adds	r3, #1
 8001088:	b2db      	uxtb	r3, r3
 800108a:	71fb      	strb	r3, [r7, #7]
 800108c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001090:	2b1d      	cmp	r3, #29
 8001092:	dded      	ble.n	8001070 <PT_init+0xd4>
	for (idex = 0; idex < RR_BUFFER_SIZE; idex++) {
 8001094:	2300      	movs	r3, #0
 8001096:	71fb      	strb	r3, [r7, #7]
 8001098:	e01c      	b.n	80010d4 <PT_init+0x138>
		PT_dptr->RR_AVRG1_buf[idex] = 
			PT_dptr->RR_AVRG2_buf[idex] = PT1000MS;					//  Normal	and extreme RR buffers
 800109a:	4940      	ldr	r1, [pc, #256]	; (800119c <PT_init+0x200>)
 800109c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80010a0:	f102 036c 	add.w	r3, r2, #108	; 0x6c
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	440b      	add	r3, r1
 80010a8:	20c8      	movs	r0, #200	; 0xc8
 80010aa:	8058      	strh	r0, [r3, #2]
		PT_dptr->RR_AVRG1_buf[idex] = 
 80010ac:	4c3b      	ldr	r4, [pc, #236]	; (800119c <PT_init+0x200>)
 80010ae:	f997 0007 	ldrsb.w	r0, [r7, #7]
			PT_dptr->RR_AVRG2_buf[idex] = PT1000MS;					//  Normal	and extreme RR buffers
 80010b2:	f102 036c 	add.w	r3, r2, #108	; 0x6c
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	440b      	add	r3, r1
 80010ba:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
		PT_dptr->RR_AVRG1_buf[idex] = 
 80010be:	f100 0364 	add.w	r3, r0, #100	; 0x64
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	4423      	add	r3, r4
 80010c6:	805a      	strh	r2, [r3, #2]
	for (idex = 0; idex < RR_BUFFER_SIZE; idex++) {
 80010c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	3301      	adds	r3, #1
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	2b07      	cmp	r3, #7
 80010da:	ddde      	ble.n	800109a <PT_init+0xfe>
	}

	/**************************************************
	Initialize all static variables 
	**************************************************/
	Prev_val = Prev_Prev_val = 0;									// Place holders for peak detector in Integrated Sig
 80010dc:	4b30      	ldr	r3, [pc, #192]	; (80011a0 <PT_init+0x204>)
 80010de:	2200      	movs	r2, #0
 80010e0:	801a      	strh	r2, [r3, #0]
 80010e2:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <PT_init+0x204>)
 80010e4:	881a      	ldrh	r2, [r3, #0]
 80010e6:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <PT_init+0x208>)
 80010e8:	801a      	strh	r2, [r3, #0]
	Prev_valBP = Prev_Prev_valBP = Best_PeakBP = 0;					// Place holders for peak detector in BP signal
 80010ea:	4b2f      	ldr	r3, [pc, #188]	; (80011a8 <PT_init+0x20c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	801a      	strh	r2, [r3, #0]
 80010f0:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <PT_init+0x20c>)
 80010f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010f6:	4b2d      	ldr	r3, [pc, #180]	; (80011ac <PT_init+0x210>)
 80010f8:	801a      	strh	r2, [r3, #0]
 80010fa:	4b2c      	ldr	r3, [pc, #176]	; (80011ac <PT_init+0x210>)
 80010fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001100:	4b2b      	ldr	r3, [pc, #172]	; (80011b0 <PT_init+0x214>)
 8001102:	801a      	strh	r2, [r3, #0]
	Prev_valDR = Prev_Prev_valDR = Best_PeakDR = Old_PeakDR = 0;	// Place holders for peak detector in Derivative signal (Used for T-wave discrimination)
 8001104:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <PT_init+0x218>)
 8001106:	2200      	movs	r2, #0
 8001108:	801a      	strh	r2, [r3, #0]
 800110a:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <PT_init+0x218>)
 800110c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001110:	4b29      	ldr	r3, [pc, #164]	; (80011b8 <PT_init+0x21c>)
 8001112:	801a      	strh	r2, [r3, #0]
 8001114:	4b28      	ldr	r3, [pc, #160]	; (80011b8 <PT_init+0x21c>)
 8001116:	f9b3 2000 	ldrsh.w	r2, [r3]
 800111a:	4b28      	ldr	r3, [pc, #160]	; (80011bc <PT_init+0x220>)
 800111c:	801a      	strh	r2, [r3, #0]
 800111e:	4b27      	ldr	r3, [pc, #156]	; (80011bc <PT_init+0x220>)
 8001120:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001124:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <PT_init+0x224>)
 8001126:	801a      	strh	r2, [r3, #0]
	Count_SinceRR = 0;												// Nr of samples since last qrs peak
 8001128:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <PT_init+0x228>)
 800112a:	2200      	movs	r2, #0
 800112c:	801a      	strh	r2, [r3, #0]
	RR1_p = RR2_p = 0;												// Pointers to RR average 1 and 2 resepectively
 800112e:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <PT_init+0x22c>)
 8001130:	2200      	movs	r2, #0
 8001132:	801a      	strh	r2, [r3, #0]
 8001134:	4b24      	ldr	r3, [pc, #144]	; (80011c8 <PT_init+0x22c>)
 8001136:	f9b3 2000 	ldrsh.w	r2, [r3]
 800113a:	4b24      	ldr	r3, [pc, #144]	; (80011cc <PT_init+0x230>)
 800113c:	801a      	strh	r2, [r3, #0]
	MV_sum = 0;														// sum for moving average filter
 800113e:	4b24      	ldr	r3, [pc, #144]	; (80011d0 <PT_init+0x234>)
 8001140:	2200      	movs	r2, #0
 8001142:	801a      	strh	r2, [r3, #0]
	RR1_sum = RR2_sum = PT1000MS << 3;								// Sum of RR1 and RR2 buffers
 8001144:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <PT_init+0x238>)
 8001146:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800114a:	801a      	strh	r2, [r3, #0]
 800114c:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <PT_init+0x238>)
 800114e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001152:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <PT_init+0x23c>)
 8001154:	801a      	strh	r2, [r3, #0]
	BlankTimeCnt = 0;												// Counter for blank-time.
 8001156:	4b21      	ldr	r3, [pc, #132]	; (80011dc <PT_init+0x240>)
 8001158:	2200      	movs	r2, #0
 800115a:	801a      	strh	r2, [r3, #0]
	SBcntI = 0;														// For searchback index in Integ Signal
 800115c:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <PT_init+0x244>)
 800115e:	2200      	movs	r2, #0
 8001160:	801a      	strh	r2, [r3, #0]
	SB_peakI = 0;													// For searchback in Integ sig
 8001162:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <PT_init+0x248>)
 8001164:	2200      	movs	r2, #0
 8001166:	801a      	strh	r2, [r3, #0]
	SB_peakBP = SB_peakDR = 0;										// For searchback peak holders in BP and slope signal
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <PT_init+0x24c>)
 800116a:	2200      	movs	r2, #0
 800116c:	801a      	strh	r2, [r3, #0]
 800116e:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <PT_init+0x24c>)
 8001170:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001174:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <PT_init+0x250>)
 8001176:	801a      	strh	r2, [r3, #0]
	st_mx_pk = 0;													// Used in learning phase 1 to estimate thresholds
 8001178:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <PT_init+0x254>)
 800117a:	2200      	movs	r2, #0
 800117c:	801a      	strh	r2, [r3, #0]
	y_h = 0;														// recusrively used in HP filter
 800117e:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <PT_init+0x258>)
 8001180:	2200      	movs	r2, #0
 8001182:	801a      	strh	r2, [r3, #0]

#if (FILTER_FORM == 2)
	LP_y_new = LP_y_old = 0;										// Parameters for DirectForm || LP filter
 8001184:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <PT_init+0x25c>)
 8001186:	2200      	movs	r2, #0
 8001188:	801a      	strh	r2, [r3, #0]
 800118a:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <PT_init+0x25c>)
 800118c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001190:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <PT_init+0x260>)
 8001192:	801a      	strh	r2, [r3, #0]
#endif
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bd90      	pop	{r4, r7, pc}
 800119c:	20000300 	.word	0x20000300
 80011a0:	20000418 	.word	0x20000418
 80011a4:	20000416 	.word	0x20000416
 80011a8:	200003ee 	.word	0x200003ee
 80011ac:	200003ec 	.word	0x200003ec
 80011b0:	200003ea 	.word	0x200003ea
 80011b4:	200003f6 	.word	0x200003f6
 80011b8:	200003f4 	.word	0x200003f4
 80011bc:	200003f2 	.word	0x200003f2
 80011c0:	200003f0 	.word	0x200003f0
 80011c4:	200003f8 	.word	0x200003f8
 80011c8:	200003fc 	.word	0x200003fc
 80011cc:	200003fa 	.word	0x200003fa
 80011d0:	2000040e 	.word	0x2000040e
 80011d4:	20000400 	.word	0x20000400
 80011d8:	200003fe 	.word	0x200003fe
 80011dc:	20000402 	.word	0x20000402
 80011e0:	20000404 	.word	0x20000404
 80011e4:	2000041a 	.word	0x2000041a
 80011e8:	20000408 	.word	0x20000408
 80011ec:	20000406 	.word	0x20000406
 80011f0:	20000412 	.word	0x20000412
 80011f4:	2000040a 	.word	0x2000040a
 80011f8:	2000041e 	.word	0x2000041e
 80011fc:	2000041c 	.word	0x2000041c

08001200 <PT_StateMachine>:
	peak delay to the current sample.

 **********************************************************************************/

int16_t PT_StateMachine(int16_t datum)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	80fb      	strh	r3, [r7, #6]
	int16_t BeatDelay = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	81fb      	strh	r3, [r7, #14]

	uint16_t PEAKI ;

	// ------- Preprocessing filtering and Peak detection --------- //
	LPFilter(&datum);										// LowPass filtering
 800120e:	1dbb      	adds	r3, r7, #6
 8001210:	4618      	mov	r0, r3
 8001212:	f000 fa55 	bl	80016c0 <LPFilter>
	HPFilter();												// HighPass filtering
 8001216:	f000 fad9 	bl	80017cc <HPFilter>

	PeakDtcBP(PT_dptr->HPF_val);							// Store BP signal highest peak
 800121a:	4b80      	ldr	r3, [pc, #512]	; (800141c <PT_StateMachine+0x21c>)
 800121c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001220:	4618      	mov	r0, r3
 8001222:	f000 fcbf 	bl	8001ba4 <PeakDtcBP>
	
	DerivFilter();
 8001226:	f000 fb61 	bl	80018ec <DerivFilter>
	PeakDtcDR(PT_dptr->DRF_val);							// Store the highest slope for T wave discrimination
 800122a:	4b7c      	ldr	r3, [pc, #496]	; (800141c <PT_StateMachine+0x21c>)
 800122c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001230:	4618      	mov	r0, r3
 8001232:	f000 fc79 	bl	8001b28 <PeakDtcDR>

	SQRFilter();											//Squaring
 8001236:	f000 fb9f 	bl	8001978 <SQRFilter>

	MVAFilter();
 800123a:	f000 fbd9 	bl	80019f0 <MVAFilter>
	PEAKI = PeakDtcI();
 800123e:	f000 fc47 	bl	8001ad0 <PeakDtcI>
 8001242:	4603      	mov	r3, r0
 8001244:	b29b      	uxth	r3, r3
 8001246:	81bb      	strh	r3, [r7, #12]

	// ---- Integrated Peak detection checks and blankTime ---- //
	if (!PEAKI && BlankTimeCnt)								// No beat, decrement BlankTime
 8001248:	89bb      	ldrh	r3, [r7, #12]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d116      	bne.n	800127c <PT_StateMachine+0x7c>
 800124e:	4b74      	ldr	r3, [pc, #464]	; (8001420 <PT_StateMachine+0x220>)
 8001250:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d011      	beq.n	800127c <PT_StateMachine+0x7c>
	{
		if (--BlankTimeCnt == 0)							// If blanktime over place the oldest peak
 8001258:	4b71      	ldr	r3, [pc, #452]	; (8001420 <PT_StateMachine+0x220>)
 800125a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800125e:	b29b      	uxth	r3, r3
 8001260:	3b01      	subs	r3, #1
 8001262:	b29b      	uxth	r3, r3
 8001264:	b21a      	sxth	r2, r3
 8001266:	4b6e      	ldr	r3, [pc, #440]	; (8001420 <PT_StateMachine+0x220>)
 8001268:	801a      	strh	r2, [r3, #0]
 800126a:	4b6d      	ldr	r3, [pc, #436]	; (8001420 <PT_StateMachine+0x220>)
 800126c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d139      	bne.n	80012e8 <PT_StateMachine+0xe8>
			PEAKI = PEAKI_temp;
 8001274:	4b6b      	ldr	r3, [pc, #428]	; (8001424 <PT_StateMachine+0x224>)
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	81bb      	strh	r3, [r7, #12]
		if (--BlankTimeCnt == 0)							// If blanktime over place the oldest peak
 800127a:	e035      	b.n	80012e8 <PT_StateMachine+0xe8>
	}
	else if (PEAKI && !BlankTimeCnt)						// If no peak for peak for last 200msec, save the current peak
 800127c:	89bb      	ldrh	r3, [r7, #12]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00d      	beq.n	800129e <PT_StateMachine+0x9e>
 8001282:	4b67      	ldr	r3, [pc, #412]	; (8001420 <PT_StateMachine+0x220>)
 8001284:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d108      	bne.n	800129e <PT_StateMachine+0x9e>
	{
		BlankTimeCnt = PT200MS;
 800128c:	4b64      	ldr	r3, [pc, #400]	; (8001420 <PT_StateMachine+0x220>)
 800128e:	2228      	movs	r2, #40	; 0x28
 8001290:	801a      	strh	r2, [r3, #0]
		PEAKI_temp   = PEAKI;
 8001292:	89ba      	ldrh	r2, [r7, #12]
 8001294:	4b63      	ldr	r3, [pc, #396]	; (8001424 <PT_StateMachine+0x224>)
 8001296:	801a      	strh	r2, [r3, #0]
		PEAKI = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	81bb      	strh	r3, [r7, #12]
 800129c:	e024      	b.n	80012e8 <PT_StateMachine+0xe8>
	}
	else if(PEAKI)											// If a bigger peak comes along, store it
 800129e:	89bb      	ldrh	r3, [r7, #12]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d021      	beq.n	80012e8 <PT_StateMachine+0xe8>
	{
		if (PEAKI > PEAKI_temp)
 80012a4:	89ba      	ldrh	r2, [r7, #12]
 80012a6:	4b5f      	ldr	r3, [pc, #380]	; (8001424 <PT_StateMachine+0x224>)
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d908      	bls.n	80012c0 <PT_StateMachine+0xc0>
		{
			BlankTimeCnt = PT200MS;
 80012ae:	4b5c      	ldr	r3, [pc, #368]	; (8001420 <PT_StateMachine+0x220>)
 80012b0:	2228      	movs	r2, #40	; 0x28
 80012b2:	801a      	strh	r2, [r3, #0]
			PEAKI_temp = PEAKI;
 80012b4:	89ba      	ldrh	r2, [r7, #12]
 80012b6:	4b5b      	ldr	r3, [pc, #364]	; (8001424 <PT_StateMachine+0x224>)
 80012b8:	801a      	strh	r2, [r3, #0]
			PEAKI = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	81bb      	strh	r3, [r7, #12]
 80012be:	e013      	b.n	80012e8 <PT_StateMachine+0xe8>
		}
		else if (--BlankTimeCnt == 0)
 80012c0:	4b57      	ldr	r3, [pc, #348]	; (8001420 <PT_StateMachine+0x220>)
 80012c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	3b01      	subs	r3, #1
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	b21a      	sxth	r2, r3
 80012ce:	4b54      	ldr	r3, [pc, #336]	; (8001420 <PT_StateMachine+0x220>)
 80012d0:	801a      	strh	r2, [r3, #0]
 80012d2:	4b53      	ldr	r3, [pc, #332]	; (8001420 <PT_StateMachine+0x220>)
 80012d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d103      	bne.n	80012e4 <PT_StateMachine+0xe4>
			PEAKI = PEAKI_temp;
 80012dc:	4b51      	ldr	r3, [pc, #324]	; (8001424 <PT_StateMachine+0x224>)
 80012de:	881b      	ldrh	r3, [r3, #0]
 80012e0:	81bb      	strh	r3, [r7, #12]
 80012e2:	e001      	b.n	80012e8 <PT_StateMachine+0xe8>
		else
			PEAKI = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	81bb      	strh	r3, [r7, #12]
	}

	// -- Run Different Phases of the Algo -> Learning Ph1, 2 and decision --//
	++Count_SinceRR;
 80012e8:	4b4f      	ldr	r3, [pc, #316]	; (8001428 <PT_StateMachine+0x228>)
 80012ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	3301      	adds	r3, #1
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	b21a      	sxth	r2, r3
 80012f6:	4b4c      	ldr	r3, [pc, #304]	; (8001428 <PT_StateMachine+0x228>)
 80012f8:	801a      	strh	r2, [r3, #0]
	if (PT_dptr->PT_state == START_UP || PT_dptr->PT_state == LEARN_PH_1)		
 80012fa:	4b48      	ldr	r3, [pc, #288]	; (800141c <PT_StateMachine+0x21c>)
 80012fc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d004      	beq.n	800130e <PT_StateMachine+0x10e>
 8001304:	4b45      	ldr	r3, [pc, #276]	; (800141c <PT_StateMachine+0x21c>)
 8001306:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d10a      	bne.n	8001324 <PT_StateMachine+0x124>
	{ 
		if (PEAKI > 0)
 800130e:	89bb      	ldrh	r3, [r7, #12]
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 80c2 	beq.w	800149a <PT_StateMachine+0x29a>
			LearningPhase1(&PEAKI, &Best_PeakBP);
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	4944      	ldr	r1, [pc, #272]	; (800142c <PT_StateMachine+0x22c>)
 800131c:	4618      	mov	r0, r3
 800131e:	f000 f933 	bl	8001588 <LearningPhase1>
		if (PEAKI > 0)
 8001322:	e0ba      	b.n	800149a <PT_StateMachine+0x29a>
	}
	// ---- Once learning Phase 1 done, start storing beats ---- //
	else										
	{
		// ---- Is the peak taller than ThI1 and ThF1? ---- //
		if (PEAKI > PT_dptr->ThI1 && Best_PeakBP > PT_dptr->ThF1)
 8001324:	4b3d      	ldr	r3, [pc, #244]	; (800141c <PT_StateMachine+0x21c>)
 8001326:	8a9a      	ldrh	r2, [r3, #20]
 8001328:	89bb      	ldrh	r3, [r7, #12]
 800132a:	429a      	cmp	r2, r3
 800132c:	f080 808c 	bcs.w	8001448 <PT_StateMachine+0x248>
 8001330:	4b3a      	ldr	r3, [pc, #232]	; (800141c <PT_StateMachine+0x21c>)
 8001332:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8001336:	4b3d      	ldr	r3, [pc, #244]	; (800142c <PT_StateMachine+0x22c>)
 8001338:	f9b3 3000 	ldrsh.w	r3, [r3]
 800133c:	429a      	cmp	r2, r3
 800133e:	f280 8083 	bge.w	8001448 <PT_StateMachine+0x248>
		{

			// ---- Initiated phase 2 ---- //
			if (PT_dptr->PT_state == LEARN_PH_2)
 8001342:	4b36      	ldr	r3, [pc, #216]	; (800141c <PT_StateMachine+0x21c>)
 8001344:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001348:	2b02      	cmp	r3, #2
 800134a:	d11d      	bne.n	8001388 <PT_StateMachine+0x188>
			{
				// ----- Update Integ & BP Th ------ //
				UpdateThI(&PEAKI, 0);
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f000 fd78 	bl	8001e48 <UpdateThI>
				UpdateThF(&Best_PeakBP, 0);
 8001358:	2100      	movs	r1, #0
 800135a:	4834      	ldr	r0, [pc, #208]	; (800142c <PT_StateMachine+0x22c>)
 800135c:	f000 fdc4 	bl	8001ee8 <UpdateThF>

				// --- First RR interval --- //
				BeatDelay = GENERAL_DELAY + PT200MS;
 8001360:	234e      	movs	r3, #78	; 0x4e
 8001362:	81fb      	strh	r3, [r7, #14]
				Count_SinceRR = 0;
 8001364:	4b30      	ldr	r3, [pc, #192]	; (8001428 <PT_StateMachine+0x228>)
 8001366:	2200      	movs	r2, #0
 8001368:	801a      	strh	r2, [r3, #0]
				Old_PeakDR = Best_PeakDR;
 800136a:	4b31      	ldr	r3, [pc, #196]	; (8001430 <PT_StateMachine+0x230>)
 800136c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001370:	4b30      	ldr	r3, [pc, #192]	; (8001434 <PT_StateMachine+0x234>)
 8001372:	801a      	strh	r2, [r3, #0]
				Best_PeakDR = 0;
 8001374:	4b2e      	ldr	r3, [pc, #184]	; (8001430 <PT_StateMachine+0x230>)
 8001376:	2200      	movs	r2, #0
 8001378:	801a      	strh	r2, [r3, #0]
				Best_PeakBP = 0;
 800137a:	4b2c      	ldr	r3, [pc, #176]	; (800142c <PT_StateMachine+0x22c>)
 800137c:	2200      	movs	r2, #0
 800137e:	801a      	strh	r2, [r3, #0]

				// --- Now we can compute RR intervals --- //
				PT_dptr->PT_state = DETECTING;
 8001380:	4b26      	ldr	r3, [pc, #152]	; (800141c <PT_StateMachine+0x21c>)
 8001382:	2203      	movs	r2, #3
 8001384:	80da      	strh	r2, [r3, #6]
			if (PT_dptr->PT_state == LEARN_PH_2)
 8001386:	e088      	b.n	800149a <PT_StateMachine+0x29a>
			}
			// ------ Learning phases are done! -------- //
			else
			{
			// --- T-Wave Test if RR < 360msec, is current slope lower 0.5prev_slope then noise --- //
				if (Count_SinceRR < PT360MS && (Best_PeakDR < (Old_PeakDR >> 2)))
 8001388:	4b27      	ldr	r3, [pc, #156]	; (8001428 <PT_StateMachine+0x228>)
 800138a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800138e:	2b47      	cmp	r3, #71	; 0x47
 8001390:	dc14      	bgt.n	80013bc <PT_StateMachine+0x1bc>
 8001392:	4b28      	ldr	r3, [pc, #160]	; (8001434 <PT_StateMachine+0x234>)
 8001394:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001398:	109b      	asrs	r3, r3, #2
 800139a:	b21a      	sxth	r2, r3
 800139c:	4b24      	ldr	r3, [pc, #144]	; (8001430 <PT_StateMachine+0x230>)
 800139e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	dd0a      	ble.n	80013bc <PT_StateMachine+0x1bc>
				{
					// ----- Update Integ & BP Th ------ //
					UpdateThI(&PEAKI, 1);
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	2101      	movs	r1, #1
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 fd4b 	bl	8001e48 <UpdateThI>
					UpdateThF(&Best_PeakBP, 1);
 80013b2:	2101      	movs	r1, #1
 80013b4:	481d      	ldr	r0, [pc, #116]	; (800142c <PT_StateMachine+0x22c>)
 80013b6:	f000 fd97 	bl	8001ee8 <UpdateThF>
			if (PT_dptr->PT_state == LEARN_PH_2)
 80013ba:	e06e      	b.n	800149a <PT_StateMachine+0x29a>

				}
				else
				{
					// ----- Update Integ & BP Th && RR buffers ------ //
					UpdateThI(&PEAKI, 0);
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 fd40 	bl	8001e48 <UpdateThI>
					UpdateThF(&Best_PeakBP, 0);
 80013c8:	2100      	movs	r1, #0
 80013ca:	4818      	ldr	r0, [pc, #96]	; (800142c <PT_StateMachine+0x22c>)
 80013cc:	f000 fd8c 	bl	8001ee8 <UpdateThF>
					UpdateRR(Count_SinceRR);
 80013d0:	4b15      	ldr	r3, [pc, #84]	; (8001428 <PT_StateMachine+0x228>)
 80013d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 fc22 	bl	8001c20 <UpdateRR>

					// --- Reset parameters --- //
					BeatDelay = GENERAL_DELAY + PT200MS;
 80013dc:	234e      	movs	r3, #78	; 0x4e
 80013de:	81fb      	strh	r3, [r7, #14]
					Count_SinceRR = 0;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <PT_StateMachine+0x228>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	801a      	strh	r2, [r3, #0]
					Old_PeakDR = Best_PeakDR;									// Store the derivative for T-wave test
 80013e6:	4b12      	ldr	r3, [pc, #72]	; (8001430 <PT_StateMachine+0x230>)
 80013e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <PT_StateMachine+0x234>)
 80013ee:	801a      	strh	r2, [r3, #0]
					Best_PeakDR = Best_PeakBP = 0;
 80013f0:	4b0e      	ldr	r3, [pc, #56]	; (800142c <PT_StateMachine+0x22c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	801a      	strh	r2, [r3, #0]
 80013f6:	4b0d      	ldr	r3, [pc, #52]	; (800142c <PT_StateMachine+0x22c>)
 80013f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <PT_StateMachine+0x230>)
 80013fe:	801a      	strh	r2, [r3, #0]

					SBcntI = 0;
 8001400:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <PT_StateMachine+0x238>)
 8001402:	2200      	movs	r2, #0
 8001404:	801a      	strh	r2, [r3, #0]
					SB_peakBP = 0;
 8001406:	4b0d      	ldr	r3, [pc, #52]	; (800143c <PT_StateMachine+0x23c>)
 8001408:	2200      	movs	r2, #0
 800140a:	801a      	strh	r2, [r3, #0]
					SB_peakDR = 0;
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <PT_StateMachine+0x240>)
 800140e:	2200      	movs	r2, #0
 8001410:	801a      	strh	r2, [r3, #0]
					SB_peakI = 0;
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <PT_StateMachine+0x244>)
 8001414:	2200      	movs	r2, #0
 8001416:	801a      	strh	r2, [r3, #0]
			if (PT_dptr->PT_state == LEARN_PH_2)
 8001418:	e03f      	b.n	800149a <PT_StateMachine+0x29a>
 800141a:	bf00      	nop
 800141c:	20000300 	.word	0x20000300
 8001420:	20000402 	.word	0x20000402
 8001424:	20000410 	.word	0x20000410
 8001428:	200003f8 	.word	0x200003f8
 800142c:	200003ee 	.word	0x200003ee
 8001430:	200003f4 	.word	0x200003f4
 8001434:	200003f6 	.word	0x200003f6
 8001438:	20000404 	.word	0x20000404
 800143c:	20000406 	.word	0x20000406
 8001440:	20000408 	.word	0x20000408
 8001444:	2000041a 	.word	0x2000041a

				}
			}
		}
		// ------ If the peak is noise ------- //
		else if (PEAKI > 0)
 8001448:	89bb      	ldrh	r3, [r7, #12]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d025      	beq.n	800149a <PT_StateMachine+0x29a>
		{
			// ----- Update Integ & BP Th ------ //
			UpdateThI(&PEAKI, 1);
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	2101      	movs	r1, #1
 8001454:	4618      	mov	r0, r3
 8001456:	f000 fcf7 	bl	8001e48 <UpdateThI>
			UpdateThF(&Best_PeakBP, 1);
 800145a:	2101      	movs	r1, #1
 800145c:	4841      	ldr	r0, [pc, #260]	; (8001564 <PT_StateMachine+0x364>)
 800145e:	f000 fd43 	bl	8001ee8 <UpdateThF>

			// ----- Store the peak for searchback ------ //
			if (PEAKI > SB_peakI && Count_SinceRR >= PT360MS)
 8001462:	89ba      	ldrh	r2, [r7, #12]
 8001464:	4b40      	ldr	r3, [pc, #256]	; (8001568 <PT_StateMachine+0x368>)
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	429a      	cmp	r2, r3
 800146a:	d916      	bls.n	800149a <PT_StateMachine+0x29a>
 800146c:	4b3f      	ldr	r3, [pc, #252]	; (800156c <PT_StateMachine+0x36c>)
 800146e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001472:	2b47      	cmp	r3, #71	; 0x47
 8001474:	dd11      	ble.n	800149a <PT_StateMachine+0x29a>
			{
				SB_peakI = PEAKI;											// Store Integ Sig peak 
 8001476:	89ba      	ldrh	r2, [r7, #12]
 8001478:	4b3b      	ldr	r3, [pc, #236]	; (8001568 <PT_StateMachine+0x368>)
 800147a:	801a      	strh	r2, [r3, #0]
				SB_peakBP = Best_PeakBP;									// Store BP Sig peak
 800147c:	4b39      	ldr	r3, [pc, #228]	; (8001564 <PT_StateMachine+0x364>)
 800147e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001482:	4b3b      	ldr	r3, [pc, #236]	; (8001570 <PT_StateMachine+0x370>)
 8001484:	801a      	strh	r2, [r3, #0]
				SB_peakDR = Best_PeakDR;									// Derivative of SB point
 8001486:	4b3b      	ldr	r3, [pc, #236]	; (8001574 <PT_StateMachine+0x374>)
 8001488:	f9b3 2000 	ldrsh.w	r2, [r3]
 800148c:	4b3a      	ldr	r3, [pc, #232]	; (8001578 <PT_StateMachine+0x378>)
 800148e:	801a      	strh	r2, [r3, #0]
				SBcntI = Count_SinceRR;										// Store Indice
 8001490:	4b36      	ldr	r3, [pc, #216]	; (800156c <PT_StateMachine+0x36c>)
 8001492:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001496:	4b39      	ldr	r3, [pc, #228]	; (800157c <PT_StateMachine+0x37c>)
 8001498:	801a      	strh	r2, [r3, #0]
		}

	}

	// -- Do search-back if we have no beats in PT_dptr->RR_Missed_L -- //
	if (Count_SinceRR > PT_dptr->RR_Missed_L && SB_peakI > PT_dptr->ThI2 && PT_dptr->PT_state == DETECTING)
 800149a:	4b39      	ldr	r3, [pc, #228]	; (8001580 <PT_StateMachine+0x380>)
 800149c:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 80014a0:	4b32      	ldr	r3, [pc, #200]	; (800156c <PT_StateMachine+0x36c>)
 80014a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	da4d      	bge.n	8001546 <PT_StateMachine+0x346>
 80014aa:	4b35      	ldr	r3, [pc, #212]	; (8001580 <PT_StateMachine+0x380>)
 80014ac:	8b5a      	ldrh	r2, [r3, #26]
 80014ae:	4b2e      	ldr	r3, [pc, #184]	; (8001568 <PT_StateMachine+0x368>)
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d247      	bcs.n	8001546 <PT_StateMachine+0x346>
 80014b6:	4b32      	ldr	r3, [pc, #200]	; (8001580 <PT_StateMachine+0x380>)
 80014b8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80014bc:	2b03      	cmp	r3, #3
 80014be:	d142      	bne.n	8001546 <PT_StateMachine+0x346>
	{
		// ---- Checking the BP signal ---- //
		if (SB_peakBP > PT_dptr->ThF2)
 80014c0:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <PT_StateMachine+0x380>)
 80014c2:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 80014c6:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <PT_StateMachine+0x370>)
 80014c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	da3a      	bge.n	8001546 <PT_StateMachine+0x346>
		{
			// ----- Update Integ & BP Th && RR buffers ------ //
			UpdateThI(&SB_peakI, 0);
 80014d0:	2100      	movs	r1, #0
 80014d2:	4825      	ldr	r0, [pc, #148]	; (8001568 <PT_StateMachine+0x368>)
 80014d4:	f000 fcb8 	bl	8001e48 <UpdateThI>
			UpdateThF(&SB_peakBP, 0);
 80014d8:	2100      	movs	r1, #0
 80014da:	4825      	ldr	r0, [pc, #148]	; (8001570 <PT_StateMachine+0x370>)
 80014dc:	f000 fd04 	bl	8001ee8 <UpdateThF>
			UpdateRR(SBcntI);
 80014e0:	4b26      	ldr	r3, [pc, #152]	; (800157c <PT_StateMachine+0x37c>)
 80014e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 fb9a 	bl	8001c20 <UpdateRR>

			// --- Reset parameters --- //
			BeatDelay = Count_SinceRR = Count_SinceRR - SBcntI;
 80014ec:	4b1f      	ldr	r3, [pc, #124]	; (800156c <PT_StateMachine+0x36c>)
 80014ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	4b21      	ldr	r3, [pc, #132]	; (800157c <PT_StateMachine+0x37c>)
 80014f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	b29b      	uxth	r3, r3
 8001500:	b21a      	sxth	r2, r3
 8001502:	4b1a      	ldr	r3, [pc, #104]	; (800156c <PT_StateMachine+0x36c>)
 8001504:	801a      	strh	r2, [r3, #0]
 8001506:	4b19      	ldr	r3, [pc, #100]	; (800156c <PT_StateMachine+0x36c>)
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	81fb      	strh	r3, [r7, #14]
			BeatDelay += (GENERAL_DELAY + PT200MS);
 800150c:	89fb      	ldrh	r3, [r7, #14]
 800150e:	334e      	adds	r3, #78	; 0x4e
 8001510:	b29b      	uxth	r3, r3
 8001512:	81fb      	strh	r3, [r7, #14]
			Old_PeakDR = SB_peakDR;		// Store the derivative for T-wave test
 8001514:	4b18      	ldr	r3, [pc, #96]	; (8001578 <PT_StateMachine+0x378>)
 8001516:	f9b3 2000 	ldrsh.w	r2, [r3]
 800151a:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <PT_StateMachine+0x384>)
 800151c:	801a      	strh	r2, [r3, #0]
			Best_PeakDR = Best_PeakBP = 0;
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <PT_StateMachine+0x364>)
 8001520:	2200      	movs	r2, #0
 8001522:	801a      	strh	r2, [r3, #0]
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <PT_StateMachine+0x364>)
 8001526:	f9b3 2000 	ldrsh.w	r2, [r3]
 800152a:	4b12      	ldr	r3, [pc, #72]	; (8001574 <PT_StateMachine+0x374>)
 800152c:	801a      	strh	r2, [r3, #0]

			SBcntI = 0;
 800152e:	4b13      	ldr	r3, [pc, #76]	; (800157c <PT_StateMachine+0x37c>)
 8001530:	2200      	movs	r2, #0
 8001532:	801a      	strh	r2, [r3, #0]
			SB_peakBP = 0;
 8001534:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <PT_StateMachine+0x370>)
 8001536:	2200      	movs	r2, #0
 8001538:	801a      	strh	r2, [r3, #0]
			SB_peakDR = 0;
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <PT_StateMachine+0x378>)
 800153c:	2200      	movs	r2, #0
 800153e:	801a      	strh	r2, [r3, #0]
			SB_peakI = 0;
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <PT_StateMachine+0x368>)
 8001542:	2200      	movs	r2, #0
 8001544:	801a      	strh	r2, [r3, #0]
	}

	// ---- Emergency and Faulty Condition Reset ---- //
	// If algorithm doest not find a beat in 4sec, then it resets itself
	// and starts learning phases.
	if (Count_SinceRR > PT4000MS) {
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <PT_StateMachine+0x36c>)
 8001548:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001550:	dd01      	ble.n	8001556 <PT_StateMachine+0x356>
		PT_init();
 8001552:	f7ff fd23 	bl	8000f9c <PT_init>
	}

	return (BeatDelay);
 8001556:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
	
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200003ee 	.word	0x200003ee
 8001568:	2000041a 	.word	0x2000041a
 800156c:	200003f8 	.word	0x200003f8
 8001570:	20000406 	.word	0x20000406
 8001574:	200003f4 	.word	0x200003f4
 8001578:	20000408 	.word	0x20000408
 800157c:	20000404 	.word	0x20000404
 8001580:	20000300 	.word	0x20000300
 8001584:	200003f6 	.word	0x200003f6

08001588 <LearningPhase1>:
	peaks iteratively in both Integrated Signal and BP signal.

 **********************************************************************************/

void LearningPhase1(uint16_t *pkI, int16_t *pkBP)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
	//---- Recursively compute the average and max of peaks ------ //
	if (*pkI > st_mx_pk) st_mx_pk = *pkI;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	881a      	ldrh	r2, [r3, #0]
 8001596:	4b44      	ldr	r3, [pc, #272]	; (80016a8 <LearningPhase1+0x120>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d903      	bls.n	80015a6 <LearningPhase1+0x1e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	881a      	ldrh	r2, [r3, #0]
 80015a2:	4b41      	ldr	r3, [pc, #260]	; (80016a8 <LearningPhase1+0x120>)
 80015a4:	801a      	strh	r2, [r3, #0]

	// ---- If the very first time calling this function --- //
	if (PT_dptr->PT_state == START_UP) {
 80015a6:	4b41      	ldr	r3, [pc, #260]	; (80016ac <LearningPhase1+0x124>)
 80015a8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d10c      	bne.n	80015ca <LearningPhase1+0x42>
		PT_dptr->PT_state = LEARN_PH_1;
 80015b0:	4b3e      	ldr	r3, [pc, #248]	; (80016ac <LearningPhase1+0x124>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	80da      	strh	r2, [r3, #6]
		st_mean_pk = *pkI;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	881a      	ldrh	r2, [r3, #0]
 80015ba:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <LearningPhase1+0x128>)
 80015bc:	801a      	strh	r2, [r3, #0]
		st_mean_pkBP = *pkBP; 
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80015c4:	4b3b      	ldr	r3, [pc, #236]	; (80016b4 <LearningPhase1+0x12c>)
 80015c6:	801a      	strh	r2, [r3, #0]
		PT_dptr->NPKF = (st_mean_pkBP >> 3);
		PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
		PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;

	}
}
 80015c8:	e067      	b.n	800169a <LearningPhase1+0x112>
	else if(Count_SinceRR < PT2000MS){
 80015ca:	4b3b      	ldr	r3, [pc, #236]	; (80016b8 <LearningPhase1+0x130>)
 80015cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80015d4:	da16      	bge.n	8001604 <LearningPhase1+0x7c>
		st_mean_pk = (st_mean_pk + *pkI) >> 1;
 80015d6:	4b36      	ldr	r3, [pc, #216]	; (80016b0 <LearningPhase1+0x128>)
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	461a      	mov	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	4413      	add	r3, r2
 80015e2:	105b      	asrs	r3, r3, #1
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	4b32      	ldr	r3, [pc, #200]	; (80016b0 <LearningPhase1+0x128>)
 80015e8:	801a      	strh	r2, [r3, #0]
		st_mean_pkBP = (st_mean_pkBP + *pkBP) >> 1;
 80015ea:	4b32      	ldr	r3, [pc, #200]	; (80016b4 <LearningPhase1+0x12c>)
 80015ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f0:	461a      	mov	r2, r3
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f8:	4413      	add	r3, r2
 80015fa:	105b      	asrs	r3, r3, #1
 80015fc:	b21a      	sxth	r2, r3
 80015fe:	4b2d      	ldr	r3, [pc, #180]	; (80016b4 <LearningPhase1+0x12c>)
 8001600:	801a      	strh	r2, [r3, #0]
}
 8001602:	e04a      	b.n	800169a <LearningPhase1+0x112>
		PT_dptr->PT_state = LEARN_PH_2;
 8001604:	4b29      	ldr	r3, [pc, #164]	; (80016ac <LearningPhase1+0x124>)
 8001606:	2202      	movs	r2, #2
 8001608:	80da      	strh	r2, [r3, #6]
		PT_dptr->SPKI = (st_mx_pk >> 1);
 800160a:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <LearningPhase1+0x120>)
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	4a27      	ldr	r2, [pc, #156]	; (80016ac <LearningPhase1+0x124>)
 8001610:	085b      	lsrs	r3, r3, #1
 8001612:	b29b      	uxth	r3, r3
 8001614:	82d3      	strh	r3, [r2, #22]
		PT_dptr->NPKI = (st_mean_pk >> 3);
 8001616:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <LearningPhase1+0x128>)
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	4a24      	ldr	r2, [pc, #144]	; (80016ac <LearningPhase1+0x124>)
 800161c:	08db      	lsrs	r3, r3, #3
 800161e:	b29b      	uxth	r3, r3
 8001620:	8313      	strh	r3, [r2, #24]
		PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 8001622:	4b22      	ldr	r3, [pc, #136]	; (80016ac <LearningPhase1+0x124>)
 8001624:	8b1a      	ldrh	r2, [r3, #24]
 8001626:	4b21      	ldr	r3, [pc, #132]	; (80016ac <LearningPhase1+0x124>)
 8001628:	8adb      	ldrh	r3, [r3, #22]
 800162a:	4619      	mov	r1, r3
 800162c:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <LearningPhase1+0x124>)
 800162e:	8b1b      	ldrh	r3, [r3, #24]
 8001630:	1acb      	subs	r3, r1, r3
 8001632:	109b      	asrs	r3, r3, #2
 8001634:	b29b      	uxth	r3, r3
 8001636:	491d      	ldr	r1, [pc, #116]	; (80016ac <LearningPhase1+0x124>)
 8001638:	4413      	add	r3, r2
 800163a:	b29b      	uxth	r3, r3
 800163c:	828b      	strh	r3, [r1, #20]
		PT_dptr->ThI2 = PT_dptr->ThI1 >> 1;
 800163e:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <LearningPhase1+0x124>)
 8001640:	8a9b      	ldrh	r3, [r3, #20]
 8001642:	4a1a      	ldr	r2, [pc, #104]	; (80016ac <LearningPhase1+0x124>)
 8001644:	085b      	lsrs	r3, r3, #1
 8001646:	b29b      	uxth	r3, r3
 8001648:	8353      	strh	r3, [r2, #26]
		PT_dptr->SPKF = (Best_PeakBP >> 1);
 800164a:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <LearningPhase1+0x134>)
 800164c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001650:	4a16      	ldr	r2, [pc, #88]	; (80016ac <LearningPhase1+0x124>)
 8001652:	105b      	asrs	r3, r3, #1
 8001654:	b21b      	sxth	r3, r3
 8001656:	83d3      	strh	r3, [r2, #30]
		PT_dptr->NPKF = (st_mean_pkBP >> 3);
 8001658:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <LearningPhase1+0x12c>)
 800165a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165e:	4a13      	ldr	r2, [pc, #76]	; (80016ac <LearningPhase1+0x124>)
 8001660:	10db      	asrs	r3, r3, #3
 8001662:	b21b      	sxth	r3, r3
 8001664:	8413      	strh	r3, [r2, #32]
		PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <LearningPhase1+0x124>)
 8001668:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800166c:	b29a      	uxth	r2, r3
 800166e:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <LearningPhase1+0x124>)
 8001670:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001674:	4619      	mov	r1, r3
 8001676:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <LearningPhase1+0x124>)
 8001678:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800167c:	1acb      	subs	r3, r1, r3
 800167e:	109b      	asrs	r3, r3, #2
 8001680:	b29b      	uxth	r3, r3
 8001682:	4413      	add	r3, r2
 8001684:	b29a      	uxth	r2, r3
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <LearningPhase1+0x124>)
 8001688:	b212      	sxth	r2, r2
 800168a:	839a      	strh	r2, [r3, #28]
		PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;
 800168c:	4b07      	ldr	r3, [pc, #28]	; (80016ac <LearningPhase1+0x124>)
 800168e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001692:	4a06      	ldr	r2, [pc, #24]	; (80016ac <LearningPhase1+0x124>)
 8001694:	105b      	asrs	r3, r3, #1
 8001696:	b21b      	sxth	r3, r3
 8001698:	8453      	strh	r3, [r2, #34]	; 0x22
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	20000412 	.word	0x20000412
 80016ac:	20000300 	.word	0x20000300
 80016b0:	20000414 	.word	0x20000414
 80016b4:	2000040c 	.word	0x2000040c
 80016b8:	200003f8 	.word	0x200003f8
 80016bc:	200003ee 	.word	0x200003ee

080016c0 <LPFilter>:
	type employed by setting FILTER_FORM to 1 or 2. Delay of the filter is 5.

 **********************************************************************************/

void LPFilter(int16_t *val)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	// -- To avoid using modulo employ half-pointer -- //
	int16_t half_pointer, w;

	half_pointer = PT_dptr->LP_pointer - (LP_BUFFER_SIZE >> 1);
 80016c8:	4b3d      	ldr	r3, [pc, #244]	; (80017c0 <LPFilter+0x100>)
 80016ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	3b06      	subs	r3, #6
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	81fb      	strh	r3, [r7, #14]

	if (half_pointer < 0) 
 80016d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	da03      	bge.n	80016e6 <LPFilter+0x26>
		half_pointer += LP_BUFFER_SIZE;
 80016de:	89fb      	ldrh	r3, [r7, #14]
 80016e0:	330c      	adds	r3, #12
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	81fb      	strh	r3, [r7, #14]
#if (FILTER_FORM == 1)
		w = *val + (PT_dptr->LP_buf[1] << 1) - PT_dptr->LP_buf[0];
		*val = w - (PT_dptr->LP_buf[half_pointer] << 1) + PT_dptr->LP_buf[PT_dptr->LP_pointer];
		PT_dptr->LP_buf[PT_dptr->LP_pointer] = w;
#else
		w = (LP_y_old << 1) - LP_y_new + *val - (PT_dptr->LP_buf[half_pointer] << 1) + PT_dptr->LP_buf[PT_dptr->LP_pointer];
 80016e6:	4b37      	ldr	r3, [pc, #220]	; (80017c4 <LPFilter+0x104>)
 80016e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	4b35      	ldr	r3, [pc, #212]	; (80017c8 <LPFilter+0x108>)
 80016f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001704:	b29b      	uxth	r3, r3
 8001706:	4413      	add	r3, r2
 8001708:	b29a      	uxth	r2, r3
 800170a:	492d      	ldr	r1, [pc, #180]	; (80017c0 <LPFilter+0x100>)
 800170c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001710:	3314      	adds	r3, #20
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	440b      	add	r3, r1
 8001716:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800171a:	b29b      	uxth	r3, r3
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	b29b      	uxth	r3, r3
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	b29a      	uxth	r2, r3
 8001724:	4926      	ldr	r1, [pc, #152]	; (80017c0 <LPFilter+0x100>)
 8001726:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <LPFilter+0x100>)
 8001728:	f9b3 3000 	ldrsh.w	r3, [r3]
 800172c:	3314      	adds	r3, #20
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	440b      	add	r3, r1
 8001732:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001736:	b29b      	uxth	r3, r3
 8001738:	4413      	add	r3, r2
 800173a:	b29b      	uxth	r3, r3
 800173c:	81bb      	strh	r3, [r7, #12]
		LP_y_new = LP_y_old;
 800173e:	4b21      	ldr	r3, [pc, #132]	; (80017c4 <LPFilter+0x104>)
 8001740:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001744:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <LPFilter+0x108>)
 8001746:	801a      	strh	r2, [r3, #0]
		LP_y_old = w;
 8001748:	4a1e      	ldr	r2, [pc, #120]	; (80017c4 <LPFilter+0x104>)
 800174a:	89bb      	ldrh	r3, [r7, #12]
 800174c:	8013      	strh	r3, [r2, #0]
		PT_dptr->LP_buf[PT_dptr->LP_pointer] = *val;
 800174e:	4a1c      	ldr	r2, [pc, #112]	; (80017c0 <LPFilter+0x100>)
 8001750:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <LPFilter+0x100>)
 8001752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001756:	4618      	mov	r0, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800175e:	f100 0314 	add.w	r3, r0, #20
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	4413      	add	r3, r2
 8001766:	460a      	mov	r2, r1
 8001768:	80da      	strh	r2, [r3, #6]
#endif
		// --- Avoid signal overflow by gaining down ---- //
		if (w >= 0)
 800176a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	db06      	blt.n	8001780 <LPFilter+0xc0>
			PT_dptr->LPF_val = w >> 5;
 8001772:	4a13      	ldr	r2, [pc, #76]	; (80017c0 <LPFilter+0x100>)
 8001774:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001778:	115b      	asrs	r3, r3, #5
 800177a:	b21b      	sxth	r3, r3
 800177c:	8153      	strh	r3, [r2, #10]
 800177e:	e00a      	b.n	8001796 <LPFilter+0xd6>
		else
			PT_dptr->LPF_val = (w >> 5) | 0xF800;
 8001780:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001784:	115b      	asrs	r3, r3, #5
 8001786:	b21b      	sxth	r3, r3
 8001788:	4a0d      	ldr	r2, [pc, #52]	; (80017c0 <LPFilter+0x100>)
 800178a:	ea6f 5343 	mvn.w	r3, r3, lsl #21
 800178e:	ea6f 5353 	mvn.w	r3, r3, lsr #21
 8001792:	b21b      	sxth	r3, r3
 8001794:	8153      	strh	r3, [r2, #10]

		if (++PT_dptr->LP_pointer == LP_BUFFER_SIZE) 
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <LPFilter+0x100>)
 8001798:	f9b3 2000 	ldrsh.w	r2, [r3]
 800179c:	b292      	uxth	r2, r2
 800179e:	3201      	adds	r2, #1
 80017a0:	b292      	uxth	r2, r2
 80017a2:	b212      	sxth	r2, r2
 80017a4:	801a      	strh	r2, [r3, #0]
 80017a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017aa:	2b0c      	cmp	r3, #12
 80017ac:	d102      	bne.n	80017b4 <LPFilter+0xf4>
			PT_dptr->LP_pointer = 0;
 80017ae:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <LPFilter+0x100>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	801a      	strh	r2, [r3, #0]
}
 80017b4:	bf00      	nop
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	20000300 	.word	0x20000300
 80017c4:	2000041e 	.word	0x2000041e
 80017c8:	2000041c 	.word	0x2000041c

080017cc <HPFilter>:
function implements the filter both in Direct Form I and II. Select the
type employed by setting FILTER_FORM to 1 or 2. Delay 16 samples.

**********************************************************************************/
void HPFilter(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
	// -- To avoid using modulo employ half-pointer -- //
	int16_t half_pointer, h_prev_pointer;
	half_pointer = PT_dptr->HP_pointer - (HP_BUFFER_SIZE >> 1);
 80017d2:	4b44      	ldr	r3, [pc, #272]	; (80018e4 <HPFilter+0x118>)
 80017d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	3b10      	subs	r3, #16
 80017dc:	b29b      	uxth	r3, r3
 80017de:	80fb      	strh	r3, [r7, #6]

	if (half_pointer < 0)
 80017e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	da03      	bge.n	80017f0 <HPFilter+0x24>
		half_pointer += HP_BUFFER_SIZE;
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	3320      	adds	r3, #32
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	80fb      	strh	r3, [r7, #6]
	
	if (!half_pointer)
 80017f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d102      	bne.n	80017fe <HPFilter+0x32>
		h_prev_pointer = HP_BUFFER_SIZE - 1;
 80017f8:	231f      	movs	r3, #31
 80017fa:	80bb      	strh	r3, [r7, #4]
 80017fc:	e003      	b.n	8001806 <HPFilter+0x3a>
	else
		h_prev_pointer = half_pointer - 1;
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	3b01      	subs	r3, #1
 8001802:	b29b      	uxth	r3, r3
 8001804:	80bb      	strh	r3, [r7, #4]
#if (FILTER_FORM == 1)
	y_h = PT_dptr->LPF_val + PT_dptr->HP_buf[0];
	PT_dptr->LPF_val = ((PT_dptr->HP_buf[PT_dptr->HP_pointer] - y_h) >> 5) + PT_dptr->HP_buf[half_pointer] - PT_dptr->HP_buf[h_prev_pointer];
	PT_dptr->HP_buf[PT_dptr->HP_pointer] = y_h;
#else
	y_h += (PT_dptr->HP_buf[PT_dptr->HP_pointer] >> 5) - (PT_dptr->LPF_val >> 5) + PT_dptr->HP_buf[half_pointer] - PT_dptr->HP_buf[h_prev_pointer];
 8001806:	4a37      	ldr	r2, [pc, #220]	; (80018e4 <HPFilter+0x118>)
 8001808:	4b36      	ldr	r3, [pc, #216]	; (80018e4 <HPFilter+0x118>)
 800180a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800180e:	3320      	adds	r3, #32
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	4413      	add	r3, r2
 8001814:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001818:	115b      	asrs	r3, r3, #5
 800181a:	b21b      	sxth	r3, r3
 800181c:	b29a      	uxth	r2, r3
 800181e:	4b31      	ldr	r3, [pc, #196]	; (80018e4 <HPFilter+0x118>)
 8001820:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001824:	115b      	asrs	r3, r3, #5
 8001826:	b21b      	sxth	r3, r3
 8001828:	b29b      	uxth	r3, r3
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	b29a      	uxth	r2, r3
 800182e:	492d      	ldr	r1, [pc, #180]	; (80018e4 <HPFilter+0x118>)
 8001830:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001834:	3320      	adds	r3, #32
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	440b      	add	r3, r1
 800183a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800183e:	b29b      	uxth	r3, r3
 8001840:	4413      	add	r3, r2
 8001842:	b29a      	uxth	r2, r3
 8001844:	4927      	ldr	r1, [pc, #156]	; (80018e4 <HPFilter+0x118>)
 8001846:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800184a:	3320      	adds	r3, #32
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	440b      	add	r3, r1
 8001850:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001854:	b29b      	uxth	r3, r3
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	b29a      	uxth	r2, r3
 800185a:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <HPFilter+0x11c>)
 800185c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001860:	b29b      	uxth	r3, r3
 8001862:	4413      	add	r3, r2
 8001864:	b29b      	uxth	r3, r3
 8001866:	b21a      	sxth	r2, r3
 8001868:	4b1f      	ldr	r3, [pc, #124]	; (80018e8 <HPFilter+0x11c>)
 800186a:	801a      	strh	r2, [r3, #0]
	PT_dptr->HP_buf[PT_dptr->HP_pointer] = PT_dptr->LPF_val;
 800186c:	4b1d      	ldr	r3, [pc, #116]	; (80018e4 <HPFilter+0x118>)
 800186e:	4a1d      	ldr	r2, [pc, #116]	; (80018e4 <HPFilter+0x118>)
 8001870:	491c      	ldr	r1, [pc, #112]	; (80018e4 <HPFilter+0x118>)
 8001872:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8001876:	4608      	mov	r0, r1
 8001878:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800187c:	f100 0320 	add.w	r3, r0, #32
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	4413      	add	r3, r2
 8001884:	460a      	mov	r2, r1
 8001886:	80da      	strh	r2, [r3, #6]
	
#endif
	// ------- Again slightly gaining down --------- //
	if (y_h >= 0)
 8001888:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <HPFilter+0x11c>)
 800188a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800188e:	2b00      	cmp	r3, #0
 8001890:	db07      	blt.n	80018a2 <HPFilter+0xd6>
		PT_dptr->HPF_val = (y_h >> 1);
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <HPFilter+0x11c>)
 8001894:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001898:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <HPFilter+0x118>)
 800189a:	105b      	asrs	r3, r3, #1
 800189c:	b21b      	sxth	r3, r3
 800189e:	8193      	strh	r3, [r2, #12]
 80018a0:	e00b      	b.n	80018ba <HPFilter+0xee>
	else
		PT_dptr->HPF_val = (y_h >> 1) | 0xF800;
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <HPFilter+0x11c>)
 80018a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018a8:	105b      	asrs	r3, r3, #1
 80018aa:	b21b      	sxth	r3, r3
 80018ac:	4a0d      	ldr	r2, [pc, #52]	; (80018e4 <HPFilter+0x118>)
 80018ae:	ea6f 5343 	mvn.w	r3, r3, lsl #21
 80018b2:	ea6f 5353 	mvn.w	r3, r3, lsr #21
 80018b6:	b21b      	sxth	r3, r3
 80018b8:	8193      	strh	r3, [r2, #12]

	if (++PT_dptr->HP_pointer == HP_BUFFER_SIZE) PT_dptr->HP_pointer = 0;
 80018ba:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <HPFilter+0x118>)
 80018bc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80018c0:	b292      	uxth	r2, r2
 80018c2:	3201      	adds	r2, #1
 80018c4:	b292      	uxth	r2, r2
 80018c6:	b212      	sxth	r2, r2
 80018c8:	805a      	strh	r2, [r3, #2]
 80018ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018ce:	2b20      	cmp	r3, #32
 80018d0:	d102      	bne.n	80018d8 <HPFilter+0x10c>
 80018d2:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <HPFilter+0x118>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	805a      	strh	r2, [r3, #2]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	20000300 	.word	0x20000300
 80018e8:	2000040a 	.word	0x2000040a

080018ec <DerivFilter>:
y[n] = 1/8(2x[n] + x[n - 1] - x[n - 3] - 2x[n - 4]) . Delay 2 samples.

**********************************************************************************/

void DerivFilter(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
	// --- Since it is only a 5 point derivative filter we avoid using pointers and half pointers for further efficieny ---- //
	int16_t w;

	w = PT_dptr->DR_buf[0] - PT_dptr->DR_buf[2];
 80018f2:	4b20      	ldr	r3, [pc, #128]	; (8001974 <DerivFilter+0x88>)
 80018f4:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	; 0x86
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	4b1e      	ldr	r3, [pc, #120]	; (8001974 <DerivFilter+0x88>)
 80018fc:	f9b3 308a 	ldrsh.w	r3, [r3, #138]	; 0x8a
 8001900:	b29b      	uxth	r3, r3
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	b29b      	uxth	r3, r3
 8001906:	80fb      	strh	r3, [r7, #6]
	w += ((PT_dptr->HPF_val - PT_dptr->DR_buf[3]) << 1);
 8001908:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <DerivFilter+0x88>)
 800190a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800190e:	b29a      	uxth	r2, r3
 8001910:	4b18      	ldr	r3, [pc, #96]	; (8001974 <DerivFilter+0x88>)
 8001912:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8001916:	b29b      	uxth	r3, r3
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	b29b      	uxth	r3, r3
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	b29a      	uxth	r2, r3
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	4413      	add	r3, r2
 8001924:	b29b      	uxth	r3, r3
 8001926:	80fb      	strh	r3, [r7, #6]
	w >>= 3;
 8001928:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800192c:	10db      	asrs	r3, r3, #3
 800192e:	80fb      	strh	r3, [r7, #6]
	PT_dptr->DR_buf[3] = PT_dptr->DR_buf[2];
 8001930:	4a10      	ldr	r2, [pc, #64]	; (8001974 <DerivFilter+0x88>)
 8001932:	4b10      	ldr	r3, [pc, #64]	; (8001974 <DerivFilter+0x88>)
 8001934:	f9b2 208a 	ldrsh.w	r2, [r2, #138]	; 0x8a
 8001938:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	PT_dptr->DR_buf[2] = PT_dptr->DR_buf[1];
 800193c:	4a0d      	ldr	r2, [pc, #52]	; (8001974 <DerivFilter+0x88>)
 800193e:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <DerivFilter+0x88>)
 8001940:	f9b2 2088 	ldrsh.w	r2, [r2, #136]	; 0x88
 8001944:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	PT_dptr->DR_buf[1] = PT_dptr->DR_buf[0];
 8001948:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <DerivFilter+0x88>)
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <DerivFilter+0x88>)
 800194c:	f9b2 2086 	ldrsh.w	r2, [r2, #134]	; 0x86
 8001950:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	PT_dptr->DR_buf[0] = PT_dptr->HPF_val;
 8001954:	4a07      	ldr	r2, [pc, #28]	; (8001974 <DerivFilter+0x88>)
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <DerivFilter+0x88>)
 8001958:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800195c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	PT_dptr->DRF_val = w;
 8001960:	4a04      	ldr	r2, [pc, #16]	; (8001974 <DerivFilter+0x88>)
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	81d3      	strh	r3, [r2, #14]
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20000300 	.word	0x20000300

08001978 <SQRFilter>:
Description: Squares the signal based on Pan-Tompkins Eq. 10,
y[n] = x[n]^2. No delay.

**********************************************************************************/
void SQRFilter(void)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
	// ------------ Avoiding Overflow -------------- //
	uint16_t temp;
	if (PT_dptr->DRF_val > SQR_LIM_VAL || PT_dptr->DRF_val < (-SQR_LIM_VAL))
 800197e:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <SQRFilter+0x74>)
 8001980:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001988:	dc05      	bgt.n	8001996 <SQRFilter+0x1e>
 800198a:	4b18      	ldr	r3, [pc, #96]	; (80019ec <SQRFilter+0x74>)
 800198c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001990:	f513 7f80 	cmn.w	r3, #256	; 0x100
 8001994:	da04      	bge.n	80019a0 <SQRFilter+0x28>
		PT_dptr->SQF_val = UINT16_MAX;
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <SQRFilter+0x74>)
 8001998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800199c:	821a      	strh	r2, [r3, #16]
 800199e:	e015      	b.n	80019cc <SQRFilter+0x54>
	else
	{
		if (PT_dptr->DRF_val < 0)
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <SQRFilter+0x74>)
 80019a2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	da06      	bge.n	80019b8 <SQRFilter+0x40>
			temp = (uint16_t)(-PT_dptr->DRF_val);
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <SQRFilter+0x74>)
 80019ac:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	425b      	negs	r3, r3
 80019b4:	80fb      	strh	r3, [r7, #6]
 80019b6:	e003      	b.n	80019c0 <SQRFilter+0x48>
		else
			temp = (uint16_t)(PT_dptr->DRF_val);
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <SQRFilter+0x74>)
 80019ba:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80019be:	80fb      	strh	r3, [r7, #6]
		PT_dptr->SQF_val = temp*temp;
 80019c0:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <SQRFilter+0x74>)
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	fb13 f303 	smulbb	r3, r3, r3
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	8213      	strh	r3, [r2, #16]
	}

	if (PT_dptr->SQF_val > SQR_LIM_OUT)
 80019cc:	4b07      	ldr	r3, [pc, #28]	; (80019ec <SQRFilter+0x74>)
 80019ce:	8a1b      	ldrh	r3, [r3, #16]
 80019d0:	f247 5230 	movw	r2, #30000	; 0x7530
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d903      	bls.n	80019e0 <SQRFilter+0x68>
		PT_dptr->SQF_val = SQR_LIM_OUT;
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <SQRFilter+0x74>)
 80019da:	f247 5230 	movw	r2, #30000	; 0x7530
 80019de:	821a      	strh	r2, [r3, #16]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	20000300 	.word	0x20000300

080019f0 <MVAFilter>:
Description: Computes the rolling moving average of the input signal
based on Eq. 11 of Pan-Tompkins, y[n] = (1/N)[sum(x[1]+...+x[N])]. Delay 15 Samples.

**********************************************************************************/
void MVAFilter(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
	//---- The MV_sum can easily overflow so we limit the bound by uint16 precision ------ //
	if (MV_sum < (UINT16_MAX - PT_dptr->SQF_val))
 80019f4:	4b33      	ldr	r3, [pc, #204]	; (8001ac4 <MVAFilter+0xd4>)
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b33      	ldr	r3, [pc, #204]	; (8001ac8 <MVAFilter+0xd8>)
 80019fc:	8a1b      	ldrh	r3, [r3, #16]
 80019fe:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001a02:	33ff      	adds	r3, #255	; 0xff
 8001a04:	429a      	cmp	r2, r3
 8001a06:	da08      	bge.n	8001a1a <MVAFilter+0x2a>
		MV_sum += PT_dptr->SQF_val;
 8001a08:	4b2f      	ldr	r3, [pc, #188]	; (8001ac8 <MVAFilter+0xd8>)
 8001a0a:	8a1a      	ldrh	r2, [r3, #16]
 8001a0c:	4b2d      	ldr	r3, [pc, #180]	; (8001ac4 <MVAFilter+0xd4>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	4413      	add	r3, r2
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	4b2b      	ldr	r3, [pc, #172]	; (8001ac4 <MVAFilter+0xd4>)
 8001a16:	801a      	strh	r2, [r3, #0]
 8001a18:	e003      	b.n	8001a22 <MVAFilter+0x32>
	else
		MV_sum = UINT16_MAX;
 8001a1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ac4 <MVAFilter+0xd4>)
 8001a1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a20:	801a      	strh	r2, [r3, #0]

	if (MV_sum > PT_dptr->MVA_buf[PT_dptr->MVA_pointer])
 8001a22:	4a29      	ldr	r2, [pc, #164]	; (8001ac8 <MVAFilter+0xd8>)
 8001a24:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <MVAFilter+0xd8>)
 8001a26:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a2a:	3344      	adds	r3, #68	; 0x44
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4413      	add	r3, r2
 8001a30:	88da      	ldrh	r2, [r3, #6]
 8001a32:	4b24      	ldr	r3, [pc, #144]	; (8001ac4 <MVAFilter+0xd4>)
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d20e      	bcs.n	8001a58 <MVAFilter+0x68>
		MV_sum -= PT_dptr->MVA_buf[PT_dptr->MVA_pointer];
 8001a3a:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <MVAFilter+0xd4>)
 8001a3c:	881a      	ldrh	r2, [r3, #0]
 8001a3e:	4922      	ldr	r1, [pc, #136]	; (8001ac8 <MVAFilter+0xd8>)
 8001a40:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <MVAFilter+0xd8>)
 8001a42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a46:	3344      	adds	r3, #68	; 0x44
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	440b      	add	r3, r1
 8001a4c:	88db      	ldrh	r3, [r3, #6]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <MVAFilter+0xd4>)
 8001a54:	801a      	strh	r2, [r3, #0]
 8001a56:	e002      	b.n	8001a5e <MVAFilter+0x6e>
	else
		MV_sum = 0;
 8001a58:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <MVAFilter+0xd4>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	801a      	strh	r2, [r3, #0]

	PT_dptr->MVA_buf[PT_dptr->MVA_pointer] = PT_dptr->SQF_val;
 8001a5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <MVAFilter+0xd8>)
 8001a60:	4a19      	ldr	r2, [pc, #100]	; (8001ac8 <MVAFilter+0xd8>)
 8001a62:	4919      	ldr	r1, [pc, #100]	; (8001ac8 <MVAFilter+0xd8>)
 8001a64:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8001a68:	4608      	mov	r0, r1
 8001a6a:	8a19      	ldrh	r1, [r3, #16]
 8001a6c:	f100 0344 	add.w	r3, r0, #68	; 0x44
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4413      	add	r3, r2
 8001a74:	460a      	mov	r2, r1
 8001a76:	80da      	strh	r2, [r3, #6]

	PT_dptr->MVA_val = MV_sum/(uint16_t) MVA_BUFFER_SIZE;
 8001a78:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <MVAFilter+0xd4>)
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <MVAFilter+0xd8>)
 8001a7e:	4913      	ldr	r1, [pc, #76]	; (8001acc <MVAFilter+0xdc>)
 8001a80:	fba1 1303 	umull	r1, r3, r1, r3
 8001a84:	091b      	lsrs	r3, r3, #4
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	8253      	strh	r3, [r2, #18]

	if (PT_dptr->MVA_val > MVA_LIM_VAL)
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <MVAFilter+0xd8>)
 8001a8c:	8a5b      	ldrh	r3, [r3, #18]
 8001a8e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001a92:	d903      	bls.n	8001a9c <MVAFilter+0xac>
		PT_dptr->MVA_val = MVA_LIM_VAL;
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <MVAFilter+0xd8>)
 8001a96:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001a9a:	825a      	strh	r2, [r3, #18]

	if (++PT_dptr->MVA_pointer == MVA_BUFFER_SIZE) 
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <MVAFilter+0xd8>)
 8001a9e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001aa2:	b292      	uxth	r2, r2
 8001aa4:	3201      	adds	r2, #1
 8001aa6:	b292      	uxth	r2, r2
 8001aa8:	b212      	sxth	r2, r2
 8001aaa:	809a      	strh	r2, [r3, #4]
 8001aac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ab0:	2b1e      	cmp	r3, #30
 8001ab2:	d102      	bne.n	8001aba <MVAFilter+0xca>
		PT_dptr->MVA_pointer = 0;
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <MVAFilter+0xd8>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	809a      	strh	r2, [r3, #4]
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	2000040e 	.word	0x2000040e
 8001ac8:	20000300 	.word	0x20000300
 8001acc:	88888889 	.word	0x88888889

08001ad0 <PeakDtcI>:
If the signal changes sign the value of the peak is asssumed ot be a peak.
if x[n-1] <= x[n] > x[n+1], then x[n] is a peak.

**********************************************************************************/
int16_t PeakDtcI(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
	int16_t p;
	// ---------- Local maxima or not --------- //
	if (PT_dptr->MVA_val <= Prev_val && Prev_val > Prev_Prev_val) {
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <PeakDtcI+0x4c>)
 8001ad8:	8a5a      	ldrh	r2, [r3, #18]
 8001ada:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <PeakDtcI+0x50>)
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d809      	bhi.n	8001af6 <PeakDtcI+0x26>
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <PeakDtcI+0x50>)
 8001ae4:	881a      	ldrh	r2, [r3, #0]
 8001ae6:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <PeakDtcI+0x54>)
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d903      	bls.n	8001af6 <PeakDtcI+0x26>
		p = Prev_val;
 8001aee:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <PeakDtcI+0x50>)
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	80fb      	strh	r3, [r7, #6]
 8001af4:	e001      	b.n	8001afa <PeakDtcI+0x2a>
	}
	else {
		p = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	80fb      	strh	r3, [r7, #6]
	}
	Prev_Prev_val = Prev_val;
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <PeakDtcI+0x50>)
 8001afc:	881a      	ldrh	r2, [r3, #0]
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <PeakDtcI+0x54>)
 8001b00:	801a      	strh	r2, [r3, #0]
	Prev_val = PT_dptr->MVA_val;
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <PeakDtcI+0x4c>)
 8001b04:	8a5a      	ldrh	r2, [r3, #18]
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <PeakDtcI+0x50>)
 8001b08:	801a      	strh	r2, [r3, #0]

	return (p);
 8001b0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20000300 	.word	0x20000300
 8001b20:	20000416 	.word	0x20000416
 8001b24:	20000418 	.word	0x20000418

08001b28 <PeakDtcDR>:
For T-wave discrimination see T-wave identification of the paper.
if x[n-1] <= x[n] > x[n+1], then x[n] is a peak.

**********************************************************************************/
void PeakDtcDR(int16_t DR_sample)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	80fb      	strh	r3, [r7, #6]
	if (DR_sample < 0) DR_sample = -DR_sample;
 8001b32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	da03      	bge.n	8001b42 <PeakDtcDR+0x1a>
 8001b3a:	88fb      	ldrh	r3, [r7, #6]
 8001b3c:	425b      	negs	r3, r3
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	80fb      	strh	r3, [r7, #6]
	// ---------- Local maxima or not --------- //
	if (DR_sample <= Prev_valDR && Prev_valDR > Prev_Prev_valDR) {
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <PeakDtcDR+0x70>)
 8001b44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b48:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	dc14      	bgt.n	8001b7a <PeakDtcDR+0x52>
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <PeakDtcDR+0x70>)
 8001b52:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <PeakDtcDR+0x74>)
 8001b58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	dd0c      	ble.n	8001b7a <PeakDtcDR+0x52>
		//-- For T-wave discrimination store the highest slope -- //
		if (Prev_valDR > Best_PeakDR) Best_PeakDR = Prev_valDR;
 8001b60:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <PeakDtcDR+0x70>)
 8001b62:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <PeakDtcDR+0x78>)
 8001b68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	dd04      	ble.n	8001b7a <PeakDtcDR+0x52>
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <PeakDtcDR+0x70>)
 8001b72:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <PeakDtcDR+0x78>)
 8001b78:	801a      	strh	r2, [r3, #0]
	}
	Prev_Prev_valDR = Prev_valDR;
 8001b7a:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <PeakDtcDR+0x70>)
 8001b7c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <PeakDtcDR+0x74>)
 8001b82:	801a      	strh	r2, [r3, #0]
	Prev_valDR = DR_sample;
 8001b84:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <PeakDtcDR+0x70>)
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	8013      	strh	r3, [r2, #0]
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	200003f0 	.word	0x200003f0
 8001b9c:	200003f2 	.word	0x200003f2
 8001ba0:	200003f4 	.word	0x200003f4

08001ba4 <PeakDtcBP>:
against adaptive thresholds.
if x[n-1] <= x[n] > x[n+1], then x[n] is a peak.

**********************************************************************************/
void PeakDtcBP(int16_t DR_sample)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	80fb      	strh	r3, [r7, #6]
	if (DR_sample < 0) DR_sample = -DR_sample;
 8001bae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	da03      	bge.n	8001bbe <PeakDtcBP+0x1a>
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	425b      	negs	r3, r3
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	80fb      	strh	r3, [r7, #6]
	// ---------- Local maxima or not --------- //
	if (DR_sample <= Prev_valBP && Prev_valBP > Prev_Prev_valBP) {
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <PeakDtcBP+0x70>)
 8001bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	dc14      	bgt.n	8001bf6 <PeakDtcBP+0x52>
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <PeakDtcBP+0x70>)
 8001bce:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <PeakDtcBP+0x74>)
 8001bd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	dd0c      	ble.n	8001bf6 <PeakDtcBP+0x52>
		//-- For T-wave discrimination store the highest slope -- //
		if (Prev_valBP > Best_PeakBP) Best_PeakBP = Prev_valBP;
 8001bdc:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <PeakDtcBP+0x70>)
 8001bde:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001be2:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <PeakDtcBP+0x78>)
 8001be4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	dd04      	ble.n	8001bf6 <PeakDtcBP+0x52>
 8001bec:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <PeakDtcBP+0x70>)
 8001bee:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <PeakDtcBP+0x78>)
 8001bf4:	801a      	strh	r2, [r3, #0]
	}
	Prev_Prev_valBP = Prev_valBP;
 8001bf6:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <PeakDtcBP+0x70>)
 8001bf8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <PeakDtcBP+0x74>)
 8001bfe:	801a      	strh	r2, [r3, #0]
	Prev_valBP = DR_sample;
 8001c00:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <PeakDtcBP+0x70>)
 8001c02:	88fb      	ldrh	r3, [r7, #6]
 8001c04:	8013      	strh	r3, [r2, #0]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	200003ea 	.word	0x200003ea
 8001c18:	200003ec 	.word	0x200003ec
 8001c1c:	200003ee 	.word	0x200003ee

08001c20 <UpdateRR>:
RR_High_Lim		= 1.16*RR_M = ((116/100) * RR_M) = RR_M + (4/25)*RR_M
RR_Missed_Lim	= 1.66*RR_M = ((166/100) * RR_M) = RR_M + (33/50)*RR_M

**********************************************************************************/
void UpdateRR(int16_t qrs)
{   
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	80fb      	strh	r3, [r7, #6]
	// ---------- Update most 8 Recent RR mean Interval------------- //
	RR1_sum += qrs;
 8001c2a:	4b81      	ldr	r3, [pc, #516]	; (8001e30 <UpdateRR+0x210>)
 8001c2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	88fb      	ldrh	r3, [r7, #6]
 8001c34:	4413      	add	r3, r2
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	b21a      	sxth	r2, r3
 8001c3a:	4b7d      	ldr	r3, [pc, #500]	; (8001e30 <UpdateRR+0x210>)
 8001c3c:	801a      	strh	r2, [r3, #0]
	RR1_sum -= PT_dptr->RR_AVRG1_buf[RR1_p];
 8001c3e:	4b7c      	ldr	r3, [pc, #496]	; (8001e30 <UpdateRR+0x210>)
 8001c40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	497b      	ldr	r1, [pc, #492]	; (8001e34 <UpdateRR+0x214>)
 8001c48:	4b7b      	ldr	r3, [pc, #492]	; (8001e38 <UpdateRR+0x218>)
 8001c4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c4e:	3364      	adds	r3, #100	; 0x64
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	440b      	add	r3, r1
 8001c54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	b21a      	sxth	r2, r3
 8001c60:	4b73      	ldr	r3, [pc, #460]	; (8001e30 <UpdateRR+0x210>)
 8001c62:	801a      	strh	r2, [r3, #0]

	PT_dptr->RR_AVRG1_buf[RR1_p] = qrs;
 8001c64:	4a73      	ldr	r2, [pc, #460]	; (8001e34 <UpdateRR+0x214>)
 8001c66:	4b74      	ldr	r3, [pc, #464]	; (8001e38 <UpdateRR+0x218>)
 8001c68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c6c:	3364      	adds	r3, #100	; 0x64
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4413      	add	r3, r2
 8001c72:	88fa      	ldrh	r2, [r7, #6]
 8001c74:	805a      	strh	r2, [r3, #2]
	PT_dptr->Recent_RR_M = RR1_sum/RR_BUFFER_SIZE; 
 8001c76:	4b6e      	ldr	r3, [pc, #440]	; (8001e30 <UpdateRR+0x210>)
 8001c78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c7c:	4a6d      	ldr	r2, [pc, #436]	; (8001e34 <UpdateRR+0x214>)
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	da00      	bge.n	8001c84 <UpdateRR+0x64>
 8001c82:	3307      	adds	r3, #7
 8001c84:	10db      	asrs	r3, r3, #3
 8001c86:	b21b      	sxth	r3, r3
 8001c88:	8113      	strh	r3, [r2, #8]
	if (++RR1_p == RR_BUFFER_SIZE) 
 8001c8a:	4b6b      	ldr	r3, [pc, #428]	; (8001e38 <UpdateRR+0x218>)
 8001c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	3301      	adds	r3, #1
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	b21a      	sxth	r2, r3
 8001c98:	4b67      	ldr	r3, [pc, #412]	; (8001e38 <UpdateRR+0x218>)
 8001c9a:	801a      	strh	r2, [r3, #0]
 8001c9c:	4b66      	ldr	r3, [pc, #408]	; (8001e38 <UpdateRR+0x218>)
 8001c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	d102      	bne.n	8001cac <UpdateRR+0x8c>
		RR1_p = 0;
 8001ca6:	4b64      	ldr	r3, [pc, #400]	; (8001e38 <UpdateRR+0x218>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	801a      	strh	r2, [r3, #0]



	// ------ Update Selected Beat RR mean if qrs in range --------- //
	if (qrs >= PT_dptr->RR_Low_L && qrs <= PT_dptr->RR_High_L) {
 8001cac:	4b61      	ldr	r3, [pc, #388]	; (8001e34 <UpdateRR+0x214>)
 8001cae:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001cb2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	f2c0 808c 	blt.w	8001dd4 <UpdateRR+0x1b4>
 8001cbc:	4b5d      	ldr	r3, [pc, #372]	; (8001e34 <UpdateRR+0x214>)
 8001cbe:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001cc2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	f300 8084 	bgt.w	8001dd4 <UpdateRR+0x1b4>
		// ------ Update selective RR mean ----- //
		RR2_sum += qrs;
 8001ccc:	4b5b      	ldr	r3, [pc, #364]	; (8001e3c <UpdateRR+0x21c>)
 8001cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	b21a      	sxth	r2, r3
 8001cdc:	4b57      	ldr	r3, [pc, #348]	; (8001e3c <UpdateRR+0x21c>)
 8001cde:	801a      	strh	r2, [r3, #0]
		RR2_sum -= PT_dptr->RR_AVRG2_buf[RR2_p];
 8001ce0:	4b56      	ldr	r3, [pc, #344]	; (8001e3c <UpdateRR+0x21c>)
 8001ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	4952      	ldr	r1, [pc, #328]	; (8001e34 <UpdateRR+0x214>)
 8001cea:	4b55      	ldr	r3, [pc, #340]	; (8001e40 <UpdateRR+0x220>)
 8001cec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf0:	336c      	adds	r3, #108	; 0x6c
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	440b      	add	r3, r1
 8001cf6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	b21a      	sxth	r2, r3
 8001d02:	4b4e      	ldr	r3, [pc, #312]	; (8001e3c <UpdateRR+0x21c>)
 8001d04:	801a      	strh	r2, [r3, #0]

		PT_dptr->RR_AVRG2_buf[RR2_p] = qrs;
 8001d06:	4a4b      	ldr	r2, [pc, #300]	; (8001e34 <UpdateRR+0x214>)
 8001d08:	4b4d      	ldr	r3, [pc, #308]	; (8001e40 <UpdateRR+0x220>)
 8001d0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d0e:	336c      	adds	r3, #108	; 0x6c
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	88fa      	ldrh	r2, [r7, #6]
 8001d16:	805a      	strh	r2, [r3, #2]
		PT_dptr->RR_M = RR2_sum / RR_BUFFER_SIZE;
 8001d18:	4b48      	ldr	r3, [pc, #288]	; (8001e3c <UpdateRR+0x21c>)
 8001d1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d1e:	4a45      	ldr	r2, [pc, #276]	; (8001e34 <UpdateRR+0x214>)
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	da00      	bge.n	8001d26 <UpdateRR+0x106>
 8001d24:	3307      	adds	r3, #7
 8001d26:	10db      	asrs	r3, r3, #3
 8001d28:	b21b      	sxth	r3, r3
 8001d2a:	8493      	strh	r3, [r2, #36]	; 0x24
		if (++RR2_p == RR_BUFFER_SIZE) 
 8001d2c:	4b44      	ldr	r3, [pc, #272]	; (8001e40 <UpdateRR+0x220>)
 8001d2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	3301      	adds	r3, #1
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	b21a      	sxth	r2, r3
 8001d3a:	4b41      	ldr	r3, [pc, #260]	; (8001e40 <UpdateRR+0x220>)
 8001d3c:	801a      	strh	r2, [r3, #0]
 8001d3e:	4b40      	ldr	r3, [pc, #256]	; (8001e40 <UpdateRR+0x220>)
 8001d40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d102      	bne.n	8001d4e <UpdateRR+0x12e>
			RR2_p = 0;
 8001d48:	4b3d      	ldr	r3, [pc, #244]	; (8001e40 <UpdateRR+0x220>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	801a      	strh	r2, [r3, #0]

		// --------- Update Limits ------------ //
		PT_dptr->RR_Low_L = PT_dptr->Recent_RR_M - (PT_dptr->Recent_RR_M << 1) / 25;
 8001d4e:	4b39      	ldr	r3, [pc, #228]	; (8001e34 <UpdateRR+0x214>)
 8001d50:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	4b37      	ldr	r3, [pc, #220]	; (8001e34 <UpdateRR+0x214>)
 8001d58:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4939      	ldr	r1, [pc, #228]	; (8001e44 <UpdateRR+0x224>)
 8001d60:	fb81 0103 	smull	r0, r1, r1, r3
 8001d64:	10c9      	asrs	r1, r1, #3
 8001d66:	17db      	asrs	r3, r3, #31
 8001d68:	1a5b      	subs	r3, r3, r1
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	4413      	add	r3, r2
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	4b30      	ldr	r3, [pc, #192]	; (8001e34 <UpdateRR+0x214>)
 8001d72:	b212      	sxth	r2, r2
 8001d74:	84da      	strh	r2, [r3, #38]	; 0x26
		PT_dptr->RR_High_L = PT_dptr->Recent_RR_M + (PT_dptr->Recent_RR_M << 2) / 25;
 8001d76:	4b2f      	ldr	r3, [pc, #188]	; (8001e34 <UpdateRR+0x214>)
 8001d78:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	4b2d      	ldr	r3, [pc, #180]	; (8001e34 <UpdateRR+0x214>)
 8001d80:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	492f      	ldr	r1, [pc, #188]	; (8001e44 <UpdateRR+0x224>)
 8001d88:	fb81 0103 	smull	r0, r1, r1, r3
 8001d8c:	10c9      	asrs	r1, r1, #3
 8001d8e:	17db      	asrs	r3, r3, #31
 8001d90:	1acb      	subs	r3, r1, r3
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	4413      	add	r3, r2
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	4b26      	ldr	r3, [pc, #152]	; (8001e34 <UpdateRR+0x214>)
 8001d9a:	b212      	sxth	r2, r2
 8001d9c:	851a      	strh	r2, [r3, #40]	; 0x28
		PT_dptr->RR_Missed_L = PT_dptr->RR_M + (PT_dptr->RR_M * 33) / 50;
 8001d9e:	4b25      	ldr	r3, [pc, #148]	; (8001e34 <UpdateRR+0x214>)
 8001da0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	4b23      	ldr	r3, [pc, #140]	; (8001e34 <UpdateRR+0x214>)
 8001da8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001dac:	4619      	mov	r1, r3
 8001dae:	460b      	mov	r3, r1
 8001db0:	015b      	lsls	r3, r3, #5
 8001db2:	440b      	add	r3, r1
 8001db4:	4923      	ldr	r1, [pc, #140]	; (8001e44 <UpdateRR+0x224>)
 8001db6:	fb81 0103 	smull	r0, r1, r1, r3
 8001dba:	1109      	asrs	r1, r1, #4
 8001dbc:	17db      	asrs	r3, r3, #31
 8001dbe:	1acb      	subs	r3, r1, r3
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <UpdateRR+0x214>)
 8001dc8:	b212      	sxth	r2, r2
 8001dca:	855a      	strh	r2, [r3, #42]	; 0x2a
		PT_dptr->HR_State = REGULAR_HR;
 8001dcc:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <UpdateRR+0x214>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	859a      	strh	r2, [r3, #44]	; 0x2c
 8001dd2:	e027      	b.n	8001e24 <UpdateRR+0x204>
	}
	// -------- Irregular heart-rate ---------- //
	else {
		PT_dptr->RR_Missed_L = PT_dptr->Recent_RR_M + (PT_dptr->Recent_RR_M * 33) / 50;
 8001dd4:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <UpdateRR+0x214>)
 8001dd6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <UpdateRR+0x214>)
 8001dde:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001de2:	4619      	mov	r1, r3
 8001de4:	460b      	mov	r3, r1
 8001de6:	015b      	lsls	r3, r3, #5
 8001de8:	440b      	add	r3, r1
 8001dea:	4916      	ldr	r1, [pc, #88]	; (8001e44 <UpdateRR+0x224>)
 8001dec:	fb81 0103 	smull	r0, r1, r1, r3
 8001df0:	1109      	asrs	r1, r1, #4
 8001df2:	17db      	asrs	r3, r3, #31
 8001df4:	1acb      	subs	r3, r1, r3
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	4413      	add	r3, r2
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <UpdateRR+0x214>)
 8001dfe:	b212      	sxth	r2, r2
 8001e00:	855a      	strh	r2, [r3, #42]	; 0x2a
		PT_dptr->ThI1 >>= 1;
 8001e02:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <UpdateRR+0x214>)
 8001e04:	8a9b      	ldrh	r3, [r3, #20]
 8001e06:	4a0b      	ldr	r2, [pc, #44]	; (8001e34 <UpdateRR+0x214>)
 8001e08:	085b      	lsrs	r3, r3, #1
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	8293      	strh	r3, [r2, #20]
		PT_dptr->ThF1 >>= 1;
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <UpdateRR+0x214>)
 8001e10:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001e14:	4a07      	ldr	r2, [pc, #28]	; (8001e34 <UpdateRR+0x214>)
 8001e16:	105b      	asrs	r3, r3, #1
 8001e18:	b21b      	sxth	r3, r3
 8001e1a:	8393      	strh	r3, [r2, #28]
		PT_dptr->HR_State = IRREGULAR_HR;
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <UpdateRR+0x214>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	859a      	strh	r2, [r3, #44]	; 0x2c
	}
	
}
 8001e22:	bf00      	nop
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	200003fe 	.word	0x200003fe
 8001e34:	20000300 	.word	0x20000300
 8001e38:	200003fa 	.word	0x200003fa
 8001e3c:	20000400 	.word	0x20000400
 8001e40:	200003fc 	.word	0x200003fc
 8001e44:	51eb851f 	.word	0x51eb851f

08001e48 <UpdateThI>:
Description: This function recursively updates the adaptive noise and signal thresholds in
the Integrated signal. Implements Eq 12-16.

**********************************************************************************/
void UpdateThI( uint16_t *PEAKI, int8_t NOISE_F)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	70fb      	strb	r3, [r7, #3]
	// ------ Update Noise & Signal Estimate ------ //
	if (NOISE_F) {
 8001e54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d014      	beq.n	8001e86 <UpdateThI+0x3e>
		PT_dptr->NPKI -= PT_dptr->NPKI >> 3;
 8001e5c:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <UpdateThI+0x9c>)
 8001e5e:	8b1a      	ldrh	r2, [r3, #24]
 8001e60:	4b20      	ldr	r3, [pc, #128]	; (8001ee4 <UpdateThI+0x9c>)
 8001e62:	8b1b      	ldrh	r3, [r3, #24]
 8001e64:	08db      	lsrs	r3, r3, #3
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	491e      	ldr	r1, [pc, #120]	; (8001ee4 <UpdateThI+0x9c>)
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	830b      	strh	r3, [r1, #24]
		PT_dptr->NPKI += *PEAKI >> 3;
 8001e70:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <UpdateThI+0x9c>)
 8001e72:	8b1a      	ldrh	r2, [r3, #24]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	08db      	lsrs	r3, r3, #3
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	4919      	ldr	r1, [pc, #100]	; (8001ee4 <UpdateThI+0x9c>)
 8001e7e:	4413      	add	r3, r2
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	830b      	strh	r3, [r1, #24]
 8001e84:	e013      	b.n	8001eae <UpdateThI+0x66>
	}
	else {
		PT_dptr->SPKI -= PT_dptr->SPKI >> 3;
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <UpdateThI+0x9c>)
 8001e88:	8ada      	ldrh	r2, [r3, #22]
 8001e8a:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <UpdateThI+0x9c>)
 8001e8c:	8adb      	ldrh	r3, [r3, #22]
 8001e8e:	08db      	lsrs	r3, r3, #3
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	4914      	ldr	r1, [pc, #80]	; (8001ee4 <UpdateThI+0x9c>)
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	82cb      	strh	r3, [r1, #22]
		PT_dptr->SPKI += *PEAKI >> 3;
 8001e9a:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <UpdateThI+0x9c>)
 8001e9c:	8ada      	ldrh	r2, [r3, #22]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	08db      	lsrs	r3, r3, #3
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	490f      	ldr	r1, [pc, #60]	; (8001ee4 <UpdateThI+0x9c>)
 8001ea8:	4413      	add	r3, r2
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	82cb      	strh	r3, [r1, #22]
	}

	// --------- Update Thresholds ---------------- //
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <UpdateThI+0x9c>)
 8001eb0:	8b1a      	ldrh	r2, [r3, #24]
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <UpdateThI+0x9c>)
 8001eb4:	8adb      	ldrh	r3, [r3, #22]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <UpdateThI+0x9c>)
 8001eba:	8b1b      	ldrh	r3, [r3, #24]
 8001ebc:	1acb      	subs	r3, r1, r3
 8001ebe:	109b      	asrs	r3, r3, #2
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	4908      	ldr	r1, [pc, #32]	; (8001ee4 <UpdateThI+0x9c>)
 8001ec4:	4413      	add	r3, r2
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	828b      	strh	r3, [r1, #20]
	PT_dptr->ThI2 = PT_dptr->ThI1 >> 1;
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <UpdateThI+0x9c>)
 8001ecc:	8a9b      	ldrh	r3, [r3, #20]
 8001ece:	4a05      	ldr	r2, [pc, #20]	; (8001ee4 <UpdateThI+0x9c>)
 8001ed0:	085b      	lsrs	r3, r3, #1
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	8353      	strh	r3, [r2, #26]
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	20000300 	.word	0x20000300

08001ee8 <UpdateThF>:
Description: This function recursively updates the adaptive noise and signal thresholds in 
the BP signal. Implements Eq 17-21.

**********************************************************************************/
void UpdateThF(int16_t *PEAKF, int8_t NOISE_F)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	70fb      	strb	r3, [r7, #3]
	// ------ Update Noise & Signal Estimate ------ //
	if (NOISE_F) {
 8001ef4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d01e      	beq.n	8001f3a <UpdateThF+0x52>
		PT_dptr->NPKF -= PT_dptr->NPKF >> 3;
 8001efc:	4b2e      	ldr	r3, [pc, #184]	; (8001fb8 <UpdateThF+0xd0>)
 8001efe:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	4b2c      	ldr	r3, [pc, #176]	; (8001fb8 <UpdateThF+0xd0>)
 8001f06:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f0a:	10db      	asrs	r3, r3, #3
 8001f0c:	b21b      	sxth	r3, r3
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	4b28      	ldr	r3, [pc, #160]	; (8001fb8 <UpdateThF+0xd0>)
 8001f16:	b212      	sxth	r2, r2
 8001f18:	841a      	strh	r2, [r3, #32]
		PT_dptr->NPKF += *PEAKF >> 3;
 8001f1a:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <UpdateThF+0xd0>)
 8001f1c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f28:	10db      	asrs	r3, r3, #3
 8001f2a:	b21b      	sxth	r3, r3
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	4413      	add	r3, r2
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <UpdateThF+0xd0>)
 8001f34:	b212      	sxth	r2, r2
 8001f36:	841a      	strh	r2, [r3, #32]
 8001f38:	e01d      	b.n	8001f76 <UpdateThF+0x8e>
	}
	else {
		PT_dptr->SPKF -= PT_dptr->SPKF >> 3;
 8001f3a:	4b1f      	ldr	r3, [pc, #124]	; (8001fb8 <UpdateThF+0xd0>)
 8001f3c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <UpdateThF+0xd0>)
 8001f44:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001f48:	10db      	asrs	r3, r3, #3
 8001f4a:	b21b      	sxth	r3, r3
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <UpdateThF+0xd0>)
 8001f54:	b212      	sxth	r2, r2
 8001f56:	83da      	strh	r2, [r3, #30]
		PT_dptr->SPKF += *PEAKF >> 3;
 8001f58:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <UpdateThF+0xd0>)
 8001f5a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f66:	10db      	asrs	r3, r3, #3
 8001f68:	b21b      	sxth	r3, r3
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <UpdateThF+0xd0>)
 8001f72:	b212      	sxth	r2, r2
 8001f74:	83da      	strh	r2, [r3, #30]
	}

	// --------- Update Thresholds ---------------- //
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <UpdateThF+0xd0>)
 8001f78:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <UpdateThF+0xd0>)
 8001f80:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001f84:	4619      	mov	r1, r3
 8001f86:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <UpdateThF+0xd0>)
 8001f88:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f8c:	1acb      	subs	r3, r1, r3
 8001f8e:	109b      	asrs	r3, r3, #2
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	4413      	add	r3, r2
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <UpdateThF+0xd0>)
 8001f98:	b212      	sxth	r2, r2
 8001f9a:	839a      	strh	r2, [r3, #28]
	PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <UpdateThF+0xd0>)
 8001f9e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001fa2:	4a05      	ldr	r2, [pc, #20]	; (8001fb8 <UpdateThF+0xd0>)
 8001fa4:	105b      	asrs	r3, r3, #1
 8001fa6:	b21b      	sxth	r3, r3
 8001fa8:	8453      	strh	r3, [r2, #34]	; 0x22
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	20000300 	.word	0x20000300

08001fbc <PT_get_LPFilter_output>:
}



// ------Returns LP filter value ------ //
int16_t PT_get_LPFilter_output(void) {
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
	return (PT_dptr->LPF_val);
 8001fc0:	4b03      	ldr	r3, [pc, #12]	; (8001fd0 <PT_get_LPFilter_output+0x14>)
 8001fc2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	20000300 	.word	0x20000300

08001fd4 <PT_get_HPFilter_output>:

// ------Returns HP filter value ------ //
int16_t PT_get_HPFilter_output(void) {
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
	return (PT_dptr->HPF_val);
 8001fd8:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <PT_get_HPFilter_output+0x14>)
 8001fda:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	20000300 	.word	0x20000300

08001fec <PT_get_DRFilter_output>:

// ------Returns Dr filter value ------ //
int16_t PT_get_DRFilter_output(void) {
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
	return (PT_dptr->DRF_val);
 8001ff0:	4b03      	ldr	r3, [pc, #12]	; (8002000 <PT_get_DRFilter_output+0x14>)
 8001ff2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	20000300 	.word	0x20000300

08002004 <PT_get_MVFilter_output>:

// ------Returns MVA filter value ------ //
uint16_t PT_get_MVFilter_output(void) {
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
	return (PT_dptr->MVA_val);
 8002008:	4b03      	ldr	r3, [pc, #12]	; (8002018 <PT_get_MVFilter_output+0x14>)
 800200a:	8a5b      	ldrh	r3, [r3, #18]
}
 800200c:	4618      	mov	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	20000300 	.word	0x20000300

0800201c <PT_get_SQRFilter_output>:

// ------Returns SQR filter value ------ //
uint16_t PT_get_SQRFilter_output(void) {
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
	return (PT_dptr->SQF_val);
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <PT_get_SQRFilter_output+0x14>)
 8002022:	8a1b      	ldrh	r3, [r3, #16]
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	20000300 	.word	0x20000300

08002034 <PT_get_ThI1_output>:
	return (60 / (PT_dptr->RR_M / Fs));
}


// ------Returns the main threshold integrated signal Th value ------ //
uint16_t PT_get_ThI1_output(void) {
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
	return (PT_dptr->ThI1);
 8002038:	4b03      	ldr	r3, [pc, #12]	; (8002048 <PT_get_ThI1_output+0x14>)
 800203a:	8a9b      	ldrh	r3, [r3, #20]
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	20000300 	.word	0x20000300

0800204c <PT_get_ThF1_output>:

// ------Returns the main threshold BP signal Th value ------ //
int16_t PT_get_ThF1_output(void) {
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
	return (PT_dptr->ThF1);
 8002050:	4b03      	ldr	r3, [pc, #12]	; (8002060 <PT_get_ThF1_output+0x14>)
 8002052:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
}
 8002056:	4618      	mov	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	20000300 	.word	0x20000300

08002064 <putOnMovingAverageBuffer>:
int movingAverageBufferIndex = 0;
float32_t movingAverageBuffer[MovingAverageSampleCount];
float32_t meanValue;

void putOnMovingAverageBuffer (float32_t sample)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	ed87 0a01 	vstr	s0, [r7, #4]
	movingAverageBuffer[movingAverageBufferIndex] = sample;
 800206e:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <putOnMovingAverageBuffer+0x3c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a0c      	ldr	r2, [pc, #48]	; (80020a4 <putOnMovingAverageBuffer+0x40>)
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	601a      	str	r2, [r3, #0]
	movingAverageBufferIndex++;
 800207c:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <putOnMovingAverageBuffer+0x3c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	3301      	adds	r3, #1
 8002082:	4a07      	ldr	r2, [pc, #28]	; (80020a0 <putOnMovingAverageBuffer+0x3c>)
 8002084:	6013      	str	r3, [r2, #0]
	if (movingAverageBufferIndex==MovingAverageSampleCount)
 8002086:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <putOnMovingAverageBuffer+0x3c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2b36      	cmp	r3, #54	; 0x36
 800208c:	d102      	bne.n	8002094 <putOnMovingAverageBuffer+0x30>
	{
		movingAverageBufferIndex = 0;
 800208e:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <putOnMovingAverageBuffer+0x3c>)
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
	}
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	20000498 	.word	0x20000498
 80020a4:	2000049c 	.word	0x2000049c

080020a8 <arm_PT_init>:

void arm_PT_init()
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af02      	add	r7, sp, #8
	//Initiate filter function
	arm_fir_init_f32(&Derivative, NUM_DERIVATIVE_TAPS, (float32_t *)&firDerivativeCoefficients[0], &firStateF32[0], BLOCK_SIZE);
 80020ae:	2301      	movs	r3, #1
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <arm_PT_init+0x80>)
 80020b4:	4a1d      	ldr	r2, [pc, #116]	; (800212c <arm_PT_init+0x84>)
 80020b6:	2105      	movs	r1, #5
 80020b8:	481d      	ldr	r0, [pc, #116]	; (8002130 <arm_PT_init+0x88>)
 80020ba:	f7fe ff21 	bl	8000f00 <arm_fir_init_f32>
	arm_biquad_cascade_df1_init_f32 (&highPassFilter,1, (float32_t *)&iirHighPassFilterCoefficients[0], &highPassFilterStateF32[0]);
 80020be:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <arm_PT_init+0x8c>)
 80020c0:	4a1d      	ldr	r2, [pc, #116]	; (8002138 <arm_PT_init+0x90>)
 80020c2:	2101      	movs	r1, #1
 80020c4:	481d      	ldr	r0, [pc, #116]	; (800213c <arm_PT_init+0x94>)
 80020c6:	f7fe fe8f 	bl	8000de8 <arm_biquad_cascade_df1_init_f32>
	arm_biquad_cascade_df1_init_f32 (&lowPassFilter,1, (float32_t *)&iirLowPassFilterCoefficients[0], &lowPassFilterStateF32[0]);
 80020ca:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <arm_PT_init+0x98>)
 80020cc:	4a1d      	ldr	r2, [pc, #116]	; (8002144 <arm_PT_init+0x9c>)
 80020ce:	2101      	movs	r1, #1
 80020d0:	481d      	ldr	r0, [pc, #116]	; (8002148 <arm_PT_init+0xa0>)
 80020d2:	f7fe fe89 	bl	8000de8 <arm_biquad_cascade_df1_init_f32>
	//Reset buffors
	for (int i = 0; i<NUM_DERIVATIVE_TAPS_ARRAY_SIZE; i++)
 80020d6:	2300      	movs	r3, #0
 80020d8:	607b      	str	r3, [r7, #4]
 80020da:	e009      	b.n	80020f0 <arm_PT_init+0x48>
	{
		derivativeBuffer[i]=0;
 80020dc:	4a1b      	ldr	r2, [pc, #108]	; (800214c <arm_PT_init+0xa4>)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i<NUM_DERIVATIVE_TAPS_ARRAY_SIZE; i++)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3301      	adds	r3, #1
 80020ee:	607b      	str	r3, [r7, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	ddf2      	ble.n	80020dc <arm_PT_init+0x34>
	}
	movingAverageBufferIndex=0;
 80020f6:	4b16      	ldr	r3, [pc, #88]	; (8002150 <arm_PT_init+0xa8>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
	for (int i = 0; i<MovingAverageSampleCount; i++)
 80020fc:	2300      	movs	r3, #0
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	e009      	b.n	8002116 <arm_PT_init+0x6e>
	{
		movingAverageBuffer[i] = 0;
 8002102:	4a14      	ldr	r2, [pc, #80]	; (8002154 <arm_PT_init+0xac>)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i<MovingAverageSampleCount; i++)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	3301      	adds	r3, #1
 8002114:	603b      	str	r3, [r7, #0]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	2b35      	cmp	r3, #53	; 0x35
 800211a:	ddf2      	ble.n	8002102 <arm_PT_init+0x5a>
	}
}
 800211c:	bf00      	nop
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000420 	.word	0x20000420
 800212c:	08012b08 	.word	0x08012b08
 8002130:	20000434 	.word	0x20000434
 8002134:	20000454 	.word	0x20000454
 8002138:	08012b1c 	.word	0x08012b1c
 800213c:	20000464 	.word	0x20000464
 8002140:	20000474 	.word	0x20000474
 8002144:	08012b30 	.word	0x08012b30
 8002148:	20000484 	.word	0x20000484
 800214c:	20000440 	.word	0x20000440
 8002150:	20000498 	.word	0x20000498
 8002154:	2000049c 	.word	0x2000049c

08002158 <arm_PT_ST>:

float previousMean = 0, TresholdI = 0, SignalLevelI = 0, NoiseLevelI = 0;
float previousSignalPeak = 0, TresholdF = 0, SignalLevelF = 0, NoiseLevelF = 0;
uint16_t peakTimeDelay = 0, latencyDelay = 0;
int16_t arm_PT_ST(int16_t sample)
{
 8002158:	b5b0      	push	{r4, r5, r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	80fb      	strh	r3, [r7, #6]
	float32_t newSample = (float)sample;
 8002162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002166:	ee07 3a90 	vmov	s15, r3
 800216a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800216e:	edc7 7a02 	vstr	s15, [r7, #8]
	//low pass filter operation
	arm_biquad_cascade_df1_f32 (&lowPassFilter, &newSample,&lowPassFilterResult,1);
 8002172:	f107 0108 	add.w	r1, r7, #8
 8002176:	2301      	movs	r3, #1
 8002178:	4a98      	ldr	r2, [pc, #608]	; (80023dc <arm_PT_ST+0x284>)
 800217a:	4899      	ldr	r0, [pc, #612]	; (80023e0 <arm_PT_ST+0x288>)
 800217c:	f7fe fd92 	bl	8000ca4 <arm_biquad_cascade_df1_f32>
	//high pass filter operation
	arm_biquad_cascade_df1_f32 (&highPassFilter, &lowPassFilterResult,&highPassFilterResult,1);
 8002180:	2301      	movs	r3, #1
 8002182:	4a98      	ldr	r2, [pc, #608]	; (80023e4 <arm_PT_ST+0x28c>)
 8002184:	4995      	ldr	r1, [pc, #596]	; (80023dc <arm_PT_ST+0x284>)
 8002186:	4898      	ldr	r0, [pc, #608]	; (80023e8 <arm_PT_ST+0x290>)
 8002188:	f7fe fd8c 	bl	8000ca4 <arm_biquad_cascade_df1_f32>
	//Derivative with FIR filter
	//putOnMovingAverageBuffer(lowPassFilterResult);

	//Store potential peak value (QRS can be also minimum or maximum)
	float potentialPeak = lowPassFilterResult*lowPassFilterResult;
 800218c:	4b93      	ldr	r3, [pc, #588]	; (80023dc <arm_PT_ST+0x284>)
 800218e:	ed93 7a00 	vldr	s14, [r3]
 8002192:	4b92      	ldr	r3, [pc, #584]	; (80023dc <arm_PT_ST+0x284>)
 8002194:	edd3 7a00 	vldr	s15, [r3]
 8002198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800219c:	edc7 7a03 	vstr	s15, [r7, #12]
	if (potentialPeak>previousSignalPeak)
 80021a0:	4b92      	ldr	r3, [pc, #584]	; (80023ec <arm_PT_ST+0x294>)
 80021a2:	edd3 7a00 	vldr	s15, [r3]
 80021a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80021aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b2:	dd05      	ble.n	80021c0 <arm_PT_ST+0x68>
	{//Store maximum of squared signal
		previousSignalPeak = potentialPeak;
 80021b4:	4a8d      	ldr	r2, [pc, #564]	; (80023ec <arm_PT_ST+0x294>)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6013      	str	r3, [r2, #0]
		peakTimeDelay = 0;
 80021ba:	4b8d      	ldr	r3, [pc, #564]	; (80023f0 <arm_PT_ST+0x298>)
 80021bc:	2200      	movs	r2, #0
 80021be:	801a      	strh	r2, [r3, #0]
	}
	peakTimeDelay++;
 80021c0:	4b8b      	ldr	r3, [pc, #556]	; (80023f0 <arm_PT_ST+0x298>)
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	3301      	adds	r3, #1
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	4b89      	ldr	r3, [pc, #548]	; (80023f0 <arm_PT_ST+0x298>)
 80021ca:	801a      	strh	r2, [r3, #0]
	if (latencyDelay < latencyTreshold)
 80021cc:	4b89      	ldr	r3, [pc, #548]	; (80023f4 <arm_PT_ST+0x29c>)
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 80021d4:	d206      	bcs.n	80021e4 <arm_PT_ST+0x8c>
	{
		latencyDelay++;
 80021d6:	4b87      	ldr	r3, [pc, #540]	; (80023f4 <arm_PT_ST+0x29c>)
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	3301      	adds	r3, #1
 80021dc:	b29a      	uxth	r2, r3
 80021de:	4b85      	ldr	r3, [pc, #532]	; (80023f4 <arm_PT_ST+0x29c>)
 80021e0:	801a      	strh	r2, [r3, #0]
 80021e2:	e004      	b.n	80021ee <arm_PT_ST+0x96>
	}
	else
	{//If peak wasn't find in given time restart
		latencyDelay = 0;
 80021e4:	4b83      	ldr	r3, [pc, #524]	; (80023f4 <arm_PT_ST+0x29c>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	801a      	strh	r2, [r3, #0]
		arm_PT_init();
 80021ea:	f7ff ff5d 	bl	80020a8 <arm_PT_init>
	}
	arm_fir_f32 (&Derivative,&lowPassFilterResult,&derivativeOutput[0],BLOCK_SIZE);
 80021ee:	2301      	movs	r3, #1
 80021f0:	4a81      	ldr	r2, [pc, #516]	; (80023f8 <arm_PT_ST+0x2a0>)
 80021f2:	497a      	ldr	r1, [pc, #488]	; (80023dc <arm_PT_ST+0x284>)
 80021f4:	4881      	ldr	r0, [pc, #516]	; (80023fc <arm_PT_ST+0x2a4>)
 80021f6:	f7fe fe13 	bl	8000e20 <arm_fir_f32>
	//Square the value
	squaredValue = derivativeOutput[0] * derivativeOutput[0];
 80021fa:	4b7f      	ldr	r3, [pc, #508]	; (80023f8 <arm_PT_ST+0x2a0>)
 80021fc:	ed93 7a00 	vldr	s14, [r3]
 8002200:	4b7d      	ldr	r3, [pc, #500]	; (80023f8 <arm_PT_ST+0x2a0>)
 8002202:	edd3 7a00 	vldr	s15, [r3]
 8002206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800220a:	4b7d      	ldr	r3, [pc, #500]	; (8002400 <arm_PT_ST+0x2a8>)
 800220c:	edc3 7a00 	vstr	s15, [r3]
	//Compute moving average
	putOnMovingAverageBuffer(squaredValue);
 8002210:	4b7b      	ldr	r3, [pc, #492]	; (8002400 <arm_PT_ST+0x2a8>)
 8002212:	edd3 7a00 	vldr	s15, [r3]
 8002216:	eeb0 0a67 	vmov.f32	s0, s15
 800221a:	f7ff ff23 	bl	8002064 <putOnMovingAverageBuffer>
	arm_mean_f32 (&movingAverageBuffer[0], MovingAverageSampleCount, &meanValue);
 800221e:	4a79      	ldr	r2, [pc, #484]	; (8002404 <arm_PT_ST+0x2ac>)
 8002220:	2136      	movs	r1, #54	; 0x36
 8002222:	4879      	ldr	r0, [pc, #484]	; (8002408 <arm_PT_ST+0x2b0>)
 8002224:	f7fe fe8b 	bl	8000f3e <arm_mean_f32>

	//Detection of maximum in moving average signal
	if (meanValue>previousMean)
 8002228:	4b76      	ldr	r3, [pc, #472]	; (8002404 <arm_PT_ST+0x2ac>)
 800222a:	ed93 7a00 	vldr	s14, [r3]
 800222e:	4b77      	ldr	r3, [pc, #476]	; (800240c <arm_PT_ST+0x2b4>)
 8002230:	edd3 7a00 	vldr	s15, [r3]
 8002234:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223c:	dd04      	ble.n	8002248 <arm_PT_ST+0xf0>
	{//This is not maximum
		previousMean = meanValue;
 800223e:	4b71      	ldr	r3, [pc, #452]	; (8002404 <arm_PT_ST+0x2ac>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a72      	ldr	r2, [pc, #456]	; (800240c <arm_PT_ST+0x2b4>)
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	e240      	b.n	80026ca <arm_PT_ST+0x572>
	}
	else
	{//Lets analysis maximum in integration signal
		if ((previousMean > TresholdI) && (latencyDelay > latencyDelayTreshold))
 8002248:	4b70      	ldr	r3, [pc, #448]	; (800240c <arm_PT_ST+0x2b4>)
 800224a:	ed93 7a00 	vldr	s14, [r3]
 800224e:	4b70      	ldr	r3, [pc, #448]	; (8002410 <arm_PT_ST+0x2b8>)
 8002250:	edd3 7a00 	vldr	s15, [r3]
 8002254:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800225c:	f340 818f 	ble.w	800257e <arm_PT_ST+0x426>
 8002260:	4b64      	ldr	r3, [pc, #400]	; (80023f4 <arm_PT_ST+0x29c>)
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	2b48      	cmp	r3, #72	; 0x48
 8002266:	f240 818a 	bls.w	800257e <arm_PT_ST+0x426>
		{//It's potential QRS
			if (previousSignalPeak>TresholdF)
 800226a:	4b60      	ldr	r3, [pc, #384]	; (80023ec <arm_PT_ST+0x294>)
 800226c:	ed93 7a00 	vldr	s14, [r3]
 8002270:	4b68      	ldr	r3, [pc, #416]	; (8002414 <arm_PT_ST+0x2bc>)
 8002272:	edd3 7a00 	vldr	s15, [r3]
 8002276:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800227a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227e:	f340 80d7 	ble.w	8002430 <arm_PT_ST+0x2d8>
			{//If peak is above threshold it's QRS
				SignalLevelF = 0.125*previousSignalPeak + 0.875*SignalLevelF;
 8002282:	4b5a      	ldr	r3, [pc, #360]	; (80023ec <arm_PT_ST+0x294>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe f936 	bl	80004f8 <__aeabi_f2d>
 800228c:	f04f 0200 	mov.w	r2, #0
 8002290:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002294:	f7fe f988 	bl	80005a8 <__aeabi_dmul>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	4614      	mov	r4, r2
 800229e:	461d      	mov	r5, r3
 80022a0:	4b5d      	ldr	r3, [pc, #372]	; (8002418 <arm_PT_ST+0x2c0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7fe f927 	bl	80004f8 <__aeabi_f2d>
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	4b5b      	ldr	r3, [pc, #364]	; (800241c <arm_PT_ST+0x2c4>)
 80022b0:	f7fe f97a 	bl	80005a8 <__aeabi_dmul>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4620      	mov	r0, r4
 80022ba:	4629      	mov	r1, r5
 80022bc:	f7fd ffbe 	bl	800023c <__adddf3>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4610      	mov	r0, r2
 80022c6:	4619      	mov	r1, r3
 80022c8:	f7fe fc66 	bl	8000b98 <__aeabi_d2f>
 80022cc:	4603      	mov	r3, r0
 80022ce:	4a52      	ldr	r2, [pc, #328]	; (8002418 <arm_PT_ST+0x2c0>)
 80022d0:	6013      	str	r3, [r2, #0]
				TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 80022d2:	4b53      	ldr	r3, [pc, #332]	; (8002420 <arm_PT_ST+0x2c8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe f90e 	bl	80004f8 <__aeabi_f2d>
 80022dc:	4604      	mov	r4, r0
 80022de:	460d      	mov	r5, r1
 80022e0:	4b4d      	ldr	r3, [pc, #308]	; (8002418 <arm_PT_ST+0x2c0>)
 80022e2:	ed93 7a00 	vldr	s14, [r3]
 80022e6:	4b4e      	ldr	r3, [pc, #312]	; (8002420 <arm_PT_ST+0x2c8>)
 80022e8:	edd3 7a00 	vldr	s15, [r3]
 80022ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f0:	ee17 0a90 	vmov	r0, s15
 80022f4:	f7fe f900 	bl	80004f8 <__aeabi_f2d>
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	4b49      	ldr	r3, [pc, #292]	; (8002424 <arm_PT_ST+0x2cc>)
 80022fe:	f7fe f953 	bl	80005a8 <__aeabi_dmul>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	4620      	mov	r0, r4
 8002308:	4629      	mov	r1, r5
 800230a:	f7fd ff97 	bl	800023c <__adddf3>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4610      	mov	r0, r2
 8002314:	4619      	mov	r1, r3
 8002316:	f7fe fc3f 	bl	8000b98 <__aeabi_d2f>
 800231a:	4603      	mov	r3, r0
 800231c:	4a3d      	ldr	r2, [pc, #244]	; (8002414 <arm_PT_ST+0x2bc>)
 800231e:	6013      	str	r3, [r2, #0]

				SignalLevelI = 0.125*meanValue + 0.875*SignalLevelI;
 8002320:	4b38      	ldr	r3, [pc, #224]	; (8002404 <arm_PT_ST+0x2ac>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe f8e7 	bl	80004f8 <__aeabi_f2d>
 800232a:	f04f 0200 	mov.w	r2, #0
 800232e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002332:	f7fe f939 	bl	80005a8 <__aeabi_dmul>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4614      	mov	r4, r2
 800233c:	461d      	mov	r5, r3
 800233e:	4b3a      	ldr	r3, [pc, #232]	; (8002428 <arm_PT_ST+0x2d0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f7fe f8d8 	bl	80004f8 <__aeabi_f2d>
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	4b33      	ldr	r3, [pc, #204]	; (800241c <arm_PT_ST+0x2c4>)
 800234e:	f7fe f92b 	bl	80005a8 <__aeabi_dmul>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4620      	mov	r0, r4
 8002358:	4629      	mov	r1, r5
 800235a:	f7fd ff6f 	bl	800023c <__adddf3>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4610      	mov	r0, r2
 8002364:	4619      	mov	r1, r3
 8002366:	f7fe fc17 	bl	8000b98 <__aeabi_d2f>
 800236a:	4603      	mov	r3, r0
 800236c:	4a2e      	ldr	r2, [pc, #184]	; (8002428 <arm_PT_ST+0x2d0>)
 800236e:	6013      	str	r3, [r2, #0]
				TresholdI = NoiseLevelI + 0.25 * (SignalLevelI - NoiseLevelI);
 8002370:	4b2e      	ldr	r3, [pc, #184]	; (800242c <arm_PT_ST+0x2d4>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f7fe f8bf 	bl	80004f8 <__aeabi_f2d>
 800237a:	4604      	mov	r4, r0
 800237c:	460d      	mov	r5, r1
 800237e:	4b2a      	ldr	r3, [pc, #168]	; (8002428 <arm_PT_ST+0x2d0>)
 8002380:	ed93 7a00 	vldr	s14, [r3]
 8002384:	4b29      	ldr	r3, [pc, #164]	; (800242c <arm_PT_ST+0x2d4>)
 8002386:	edd3 7a00 	vldr	s15, [r3]
 800238a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800238e:	ee17 0a90 	vmov	r0, s15
 8002392:	f7fe f8b1 	bl	80004f8 <__aeabi_f2d>
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	4b22      	ldr	r3, [pc, #136]	; (8002424 <arm_PT_ST+0x2cc>)
 800239c:	f7fe f904 	bl	80005a8 <__aeabi_dmul>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4620      	mov	r0, r4
 80023a6:	4629      	mov	r1, r5
 80023a8:	f7fd ff48 	bl	800023c <__adddf3>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4610      	mov	r0, r2
 80023b2:	4619      	mov	r1, r3
 80023b4:	f7fe fbf0 	bl	8000b98 <__aeabi_d2f>
 80023b8:	4603      	mov	r3, r0
 80023ba:	4a15      	ldr	r2, [pc, #84]	; (8002410 <arm_PT_ST+0x2b8>)
 80023bc:	6013      	str	r3, [r2, #0]
				previousSignalPeak = 0;
 80023be:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <arm_PT_ST+0x294>)
 80023c0:	f04f 0200 	mov.w	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
				previousMean = 0;
 80023c6:	4b11      	ldr	r3, [pc, #68]	; (800240c <arm_PT_ST+0x2b4>)
 80023c8:	f04f 0200 	mov.w	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
				latencyDelay = 0;
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <arm_PT_ST+0x29c>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	801a      	strh	r2, [r3, #0]
				return peakTimeDelay;
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <arm_PT_ST+0x298>)
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	b21b      	sxth	r3, r3
 80023da:	e177      	b.n	80026cc <arm_PT_ST+0x574>
 80023dc:	20000490 	.word	0x20000490
 80023e0:	20000484 	.word	0x20000484
 80023e4:	20000470 	.word	0x20000470
 80023e8:	20000464 	.word	0x20000464
 80023ec:	20000588 	.word	0x20000588
 80023f0:	20000598 	.word	0x20000598
 80023f4:	2000059a 	.word	0x2000059a
 80023f8:	20000454 	.word	0x20000454
 80023fc:	20000434 	.word	0x20000434
 8002400:	20000494 	.word	0x20000494
 8002404:	20000574 	.word	0x20000574
 8002408:	2000049c 	.word	0x2000049c
 800240c:	20000578 	.word	0x20000578
 8002410:	2000057c 	.word	0x2000057c
 8002414:	2000058c 	.word	0x2000058c
 8002418:	20000590 	.word	0x20000590
 800241c:	3fec0000 	.word	0x3fec0000
 8002420:	20000594 	.word	0x20000594
 8002424:	3fd00000 	.word	0x3fd00000
 8002428:	20000580 	.word	0x20000580
 800242c:	20000584 	.word	0x20000584

			}
			else
			{//It's noise peak
				NoiseLevelF = 0.125*previousSignalPeak + 0.875*NoiseLevelI;
 8002430:	4ba8      	ldr	r3, [pc, #672]	; (80026d4 <arm_PT_ST+0x57c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe f85f 	bl	80004f8 <__aeabi_f2d>
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002442:	f7fe f8b1 	bl	80005a8 <__aeabi_dmul>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	4614      	mov	r4, r2
 800244c:	461d      	mov	r5, r3
 800244e:	4ba2      	ldr	r3, [pc, #648]	; (80026d8 <arm_PT_ST+0x580>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe f850 	bl	80004f8 <__aeabi_f2d>
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	4b9f      	ldr	r3, [pc, #636]	; (80026dc <arm_PT_ST+0x584>)
 800245e:	f7fe f8a3 	bl	80005a8 <__aeabi_dmul>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4620      	mov	r0, r4
 8002468:	4629      	mov	r1, r5
 800246a:	f7fd fee7 	bl	800023c <__adddf3>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4610      	mov	r0, r2
 8002474:	4619      	mov	r1, r3
 8002476:	f7fe fb8f 	bl	8000b98 <__aeabi_d2f>
 800247a:	4603      	mov	r3, r0
 800247c:	4a98      	ldr	r2, [pc, #608]	; (80026e0 <arm_PT_ST+0x588>)
 800247e:	6013      	str	r3, [r2, #0]
				TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 8002480:	4b97      	ldr	r3, [pc, #604]	; (80026e0 <arm_PT_ST+0x588>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7fe f837 	bl	80004f8 <__aeabi_f2d>
 800248a:	4604      	mov	r4, r0
 800248c:	460d      	mov	r5, r1
 800248e:	4b95      	ldr	r3, [pc, #596]	; (80026e4 <arm_PT_ST+0x58c>)
 8002490:	ed93 7a00 	vldr	s14, [r3]
 8002494:	4b92      	ldr	r3, [pc, #584]	; (80026e0 <arm_PT_ST+0x588>)
 8002496:	edd3 7a00 	vldr	s15, [r3]
 800249a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800249e:	ee17 0a90 	vmov	r0, s15
 80024a2:	f7fe f829 	bl	80004f8 <__aeabi_f2d>
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	4b8f      	ldr	r3, [pc, #572]	; (80026e8 <arm_PT_ST+0x590>)
 80024ac:	f7fe f87c 	bl	80005a8 <__aeabi_dmul>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	4620      	mov	r0, r4
 80024b6:	4629      	mov	r1, r5
 80024b8:	f7fd fec0 	bl	800023c <__adddf3>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4610      	mov	r0, r2
 80024c2:	4619      	mov	r1, r3
 80024c4:	f7fe fb68 	bl	8000b98 <__aeabi_d2f>
 80024c8:	4603      	mov	r3, r0
 80024ca:	4a88      	ldr	r2, [pc, #544]	; (80026ec <arm_PT_ST+0x594>)
 80024cc:	6013      	str	r3, [r2, #0]

				NoiseLevelI = 0.125*meanValue + 0.875*NoiseLevelI;
 80024ce:	4b88      	ldr	r3, [pc, #544]	; (80026f0 <arm_PT_ST+0x598>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe f810 	bl	80004f8 <__aeabi_f2d>
 80024d8:	f04f 0200 	mov.w	r2, #0
 80024dc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80024e0:	f7fe f862 	bl	80005a8 <__aeabi_dmul>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4614      	mov	r4, r2
 80024ea:	461d      	mov	r5, r3
 80024ec:	4b7a      	ldr	r3, [pc, #488]	; (80026d8 <arm_PT_ST+0x580>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7fe f801 	bl	80004f8 <__aeabi_f2d>
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	4b78      	ldr	r3, [pc, #480]	; (80026dc <arm_PT_ST+0x584>)
 80024fc:	f7fe f854 	bl	80005a8 <__aeabi_dmul>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	4620      	mov	r0, r4
 8002506:	4629      	mov	r1, r5
 8002508:	f7fd fe98 	bl	800023c <__adddf3>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4610      	mov	r0, r2
 8002512:	4619      	mov	r1, r3
 8002514:	f7fe fb40 	bl	8000b98 <__aeabi_d2f>
 8002518:	4603      	mov	r3, r0
 800251a:	4a6f      	ldr	r2, [pc, #444]	; (80026d8 <arm_PT_ST+0x580>)
 800251c:	6013      	str	r3, [r2, #0]
				TresholdI = NoiseLevelI + 0.25 * (SignalLevelI - NoiseLevelI);
 800251e:	4b6e      	ldr	r3, [pc, #440]	; (80026d8 <arm_PT_ST+0x580>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7fd ffe8 	bl	80004f8 <__aeabi_f2d>
 8002528:	4604      	mov	r4, r0
 800252a:	460d      	mov	r5, r1
 800252c:	4b71      	ldr	r3, [pc, #452]	; (80026f4 <arm_PT_ST+0x59c>)
 800252e:	ed93 7a00 	vldr	s14, [r3]
 8002532:	4b69      	ldr	r3, [pc, #420]	; (80026d8 <arm_PT_ST+0x580>)
 8002534:	edd3 7a00 	vldr	s15, [r3]
 8002538:	ee77 7a67 	vsub.f32	s15, s14, s15
 800253c:	ee17 0a90 	vmov	r0, s15
 8002540:	f7fd ffda 	bl	80004f8 <__aeabi_f2d>
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	4b67      	ldr	r3, [pc, #412]	; (80026e8 <arm_PT_ST+0x590>)
 800254a:	f7fe f82d 	bl	80005a8 <__aeabi_dmul>
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	4620      	mov	r0, r4
 8002554:	4629      	mov	r1, r5
 8002556:	f7fd fe71 	bl	800023c <__adddf3>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	4610      	mov	r0, r2
 8002560:	4619      	mov	r1, r3
 8002562:	f7fe fb19 	bl	8000b98 <__aeabi_d2f>
 8002566:	4603      	mov	r3, r0
 8002568:	4a63      	ldr	r2, [pc, #396]	; (80026f8 <arm_PT_ST+0x5a0>)
 800256a:	6013      	str	r3, [r2, #0]

				previousSignalPeak = 0;
 800256c:	4b59      	ldr	r3, [pc, #356]	; (80026d4 <arm_PT_ST+0x57c>)
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
				previousMean = 0;
 8002574:	4b61      	ldr	r3, [pc, #388]	; (80026fc <arm_PT_ST+0x5a4>)
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
			if (previousSignalPeak>TresholdF)
 800257c:	e0a5      	b.n	80026ca <arm_PT_ST+0x572>
			}
		}
		else
		{//It's just noise
			NoiseLevelF = 0.125*previousSignalPeak + 0.875*NoiseLevelI;
 800257e:	4b55      	ldr	r3, [pc, #340]	; (80026d4 <arm_PT_ST+0x57c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7fd ffb8 	bl	80004f8 <__aeabi_f2d>
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002590:	f7fe f80a 	bl	80005a8 <__aeabi_dmul>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4614      	mov	r4, r2
 800259a:	461d      	mov	r5, r3
 800259c:	4b4e      	ldr	r3, [pc, #312]	; (80026d8 <arm_PT_ST+0x580>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fd ffa9 	bl	80004f8 <__aeabi_f2d>
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	4b4c      	ldr	r3, [pc, #304]	; (80026dc <arm_PT_ST+0x584>)
 80025ac:	f7fd fffc 	bl	80005a8 <__aeabi_dmul>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	4620      	mov	r0, r4
 80025b6:	4629      	mov	r1, r5
 80025b8:	f7fd fe40 	bl	800023c <__adddf3>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4610      	mov	r0, r2
 80025c2:	4619      	mov	r1, r3
 80025c4:	f7fe fae8 	bl	8000b98 <__aeabi_d2f>
 80025c8:	4603      	mov	r3, r0
 80025ca:	4a45      	ldr	r2, [pc, #276]	; (80026e0 <arm_PT_ST+0x588>)
 80025cc:	6013      	str	r3, [r2, #0]
			TresholdF = NoiseLevelF + 0.25 * (SignalLevelF - NoiseLevelF);
 80025ce:	4b44      	ldr	r3, [pc, #272]	; (80026e0 <arm_PT_ST+0x588>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fd ff90 	bl	80004f8 <__aeabi_f2d>
 80025d8:	4604      	mov	r4, r0
 80025da:	460d      	mov	r5, r1
 80025dc:	4b41      	ldr	r3, [pc, #260]	; (80026e4 <arm_PT_ST+0x58c>)
 80025de:	ed93 7a00 	vldr	s14, [r3]
 80025e2:	4b3f      	ldr	r3, [pc, #252]	; (80026e0 <arm_PT_ST+0x588>)
 80025e4:	edd3 7a00 	vldr	s15, [r3]
 80025e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025ec:	ee17 0a90 	vmov	r0, s15
 80025f0:	f7fd ff82 	bl	80004f8 <__aeabi_f2d>
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	4b3b      	ldr	r3, [pc, #236]	; (80026e8 <arm_PT_ST+0x590>)
 80025fa:	f7fd ffd5 	bl	80005a8 <__aeabi_dmul>
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	4620      	mov	r0, r4
 8002604:	4629      	mov	r1, r5
 8002606:	f7fd fe19 	bl	800023c <__adddf3>
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	4610      	mov	r0, r2
 8002610:	4619      	mov	r1, r3
 8002612:	f7fe fac1 	bl	8000b98 <__aeabi_d2f>
 8002616:	4603      	mov	r3, r0
 8002618:	4a34      	ldr	r2, [pc, #208]	; (80026ec <arm_PT_ST+0x594>)
 800261a:	6013      	str	r3, [r2, #0]

			NoiseLevelI = 0.125*meanValue + 0.875*NoiseLevelI;
 800261c:	4b34      	ldr	r3, [pc, #208]	; (80026f0 <arm_PT_ST+0x598>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f7fd ff69 	bl	80004f8 <__aeabi_f2d>
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800262e:	f7fd ffbb 	bl	80005a8 <__aeabi_dmul>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	4614      	mov	r4, r2
 8002638:	461d      	mov	r5, r3
 800263a:	4b27      	ldr	r3, [pc, #156]	; (80026d8 <arm_PT_ST+0x580>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7fd ff5a 	bl	80004f8 <__aeabi_f2d>
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	4b24      	ldr	r3, [pc, #144]	; (80026dc <arm_PT_ST+0x584>)
 800264a:	f7fd ffad 	bl	80005a8 <__aeabi_dmul>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4620      	mov	r0, r4
 8002654:	4629      	mov	r1, r5
 8002656:	f7fd fdf1 	bl	800023c <__adddf3>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4610      	mov	r0, r2
 8002660:	4619      	mov	r1, r3
 8002662:	f7fe fa99 	bl	8000b98 <__aeabi_d2f>
 8002666:	4603      	mov	r3, r0
 8002668:	4a1b      	ldr	r2, [pc, #108]	; (80026d8 <arm_PT_ST+0x580>)
 800266a:	6013      	str	r3, [r2, #0]
			TresholdI = NoiseLevelI + 0.25 * (SignalLevelI - NoiseLevelI);
 800266c:	4b1a      	ldr	r3, [pc, #104]	; (80026d8 <arm_PT_ST+0x580>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f7fd ff41 	bl	80004f8 <__aeabi_f2d>
 8002676:	4604      	mov	r4, r0
 8002678:	460d      	mov	r5, r1
 800267a:	4b1e      	ldr	r3, [pc, #120]	; (80026f4 <arm_PT_ST+0x59c>)
 800267c:	ed93 7a00 	vldr	s14, [r3]
 8002680:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <arm_PT_ST+0x580>)
 8002682:	edd3 7a00 	vldr	s15, [r3]
 8002686:	ee77 7a67 	vsub.f32	s15, s14, s15
 800268a:	ee17 0a90 	vmov	r0, s15
 800268e:	f7fd ff33 	bl	80004f8 <__aeabi_f2d>
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <arm_PT_ST+0x590>)
 8002698:	f7fd ff86 	bl	80005a8 <__aeabi_dmul>
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	4620      	mov	r0, r4
 80026a2:	4629      	mov	r1, r5
 80026a4:	f7fd fdca 	bl	800023c <__adddf3>
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4610      	mov	r0, r2
 80026ae:	4619      	mov	r1, r3
 80026b0:	f7fe fa72 	bl	8000b98 <__aeabi_d2f>
 80026b4:	4603      	mov	r3, r0
 80026b6:	4a10      	ldr	r2, [pc, #64]	; (80026f8 <arm_PT_ST+0x5a0>)
 80026b8:	6013      	str	r3, [r2, #0]

			previousSignalPeak = 0;
 80026ba:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <arm_PT_ST+0x57c>)
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
			previousMean = 0;
 80026c2:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <arm_PT_ST+0x5a4>)
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
		}
	}

	return 0;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bdb0      	pop	{r4, r5, r7, pc}
 80026d4:	20000588 	.word	0x20000588
 80026d8:	20000584 	.word	0x20000584
 80026dc:	3fec0000 	.word	0x3fec0000
 80026e0:	20000594 	.word	0x20000594
 80026e4:	20000590 	.word	0x20000590
 80026e8:	3fd00000 	.word	0x3fd00000
 80026ec:	2000058c 	.word	0x2000058c
 80026f0:	20000574 	.word	0x20000574
 80026f4:	20000580 	.word	0x20000580
 80026f8:	2000057c 	.word	0x2000057c
 80026fc:	20000578 	.word	0x20000578

08002700 <arm_get_LPFilter_output>:

float32_t arm_get_LPFilter_output()
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0

	return lowPassFilterResult;
 8002704:	4b04      	ldr	r3, [pc, #16]	; (8002718 <arm_get_LPFilter_output+0x18>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	ee07 3a90 	vmov	s15, r3
}
 800270c:	eeb0 0a67 	vmov.f32	s0, s15
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	20000490 	.word	0x20000490

0800271c <arm_get_HPFilter_output>:

float32_t arm_get_HPFilter_output()
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0

	return highPassFilterResult;
 8002720:	4b04      	ldr	r3, [pc, #16]	; (8002734 <arm_get_HPFilter_output+0x18>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	ee07 3a90 	vmov	s15, r3
}
 8002728:	eeb0 0a67 	vmov.f32	s0, s15
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	20000470 	.word	0x20000470

08002738 <arm_get_DRFilter_output>:

float32_t arm_get_DRFilter_output()
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0

	return derivativeOutput[0];
 800273c:	4b04      	ldr	r3, [pc, #16]	; (8002750 <arm_get_DRFilter_output+0x18>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	ee07 3a90 	vmov	s15, r3
}
 8002744:	eeb0 0a67 	vmov.f32	s0, s15
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	20000454 	.word	0x20000454

08002754 <arm_get_SQRFilter_output>:

float32_t arm_get_SQRFilter_output()
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0

	return squaredValue;
 8002758:	4b04      	ldr	r3, [pc, #16]	; (800276c <arm_get_SQRFilter_output+0x18>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	ee07 3a90 	vmov	s15, r3
}
 8002760:	eeb0 0a67 	vmov.f32	s0, s15
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	20000494 	.word	0x20000494

08002770 <arm_get_MVFilter_output>:

float32_t arm_get_MVFilter_output()
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
	return meanValue;
 8002774:	4b04      	ldr	r3, [pc, #16]	; (8002788 <arm_get_MVFilter_output+0x18>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	ee07 3a90 	vmov	s15, r3
}
 800277c:	eeb0 0a67 	vmov.f32	s0, s15
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	20000574 	.word	0x20000574

0800278c <arm_get_ThI1_output>:

float32_t arm_get_ThI1_output()
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0

	return TresholdI;
 8002790:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <arm_get_ThI1_output+0x18>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	ee07 3a90 	vmov	s15, r3
}
 8002798:	eeb0 0a67 	vmov.f32	s0, s15
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	2000057c 	.word	0x2000057c

080027a8 <arm_get_ThF1_output>:

float32_t arm_get_ThF1_output()
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0

	return TresholdF;
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <arm_get_ThF1_output+0x18>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	ee07 3a90 	vmov	s15, r3
}
 80027b4:	eeb0 0a67 	vmov.f32	s0, s15
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	2000058c 	.word	0x2000058c

080027c4 <Rafael_init>:
	// qrs tells whether there was a detection or not.
	// regular tells whether the heart pace is regular or not.
	// prevRegular tells whether the heart beat was regular before the newest RR-interval was calculated.
	bool qrs, regular = true, prevRegular;
void Rafael_init()
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0


	// Initializing the RR averages
	for (i = 0; i < 8; i++)
 80027c8:	4b29      	ldr	r3, [pc, #164]	; (8002870 <Rafael_init+0xac>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	e010      	b.n	80027f2 <Rafael_init+0x2e>
    {
        rr1[i] = 0;
 80027d0:	4b27      	ldr	r3, [pc, #156]	; (8002870 <Rafael_init+0xac>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a27      	ldr	r2, [pc, #156]	; (8002874 <Rafael_init+0xb0>)
 80027d6:	2100      	movs	r1, #0
 80027d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        rr2[i] = 0;
 80027dc:	4b24      	ldr	r3, [pc, #144]	; (8002870 <Rafael_init+0xac>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a25      	ldr	r2, [pc, #148]	; (8002878 <Rafael_init+0xb4>)
 80027e2:	2100      	movs	r1, #0
 80027e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < 8; i++)
 80027e8:	4b21      	ldr	r3, [pc, #132]	; (8002870 <Rafael_init+0xac>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	3301      	adds	r3, #1
 80027ee:	4a20      	ldr	r2, [pc, #128]	; (8002870 <Rafael_init+0xac>)
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	4b1f      	ldr	r3, [pc, #124]	; (8002870 <Rafael_init+0xac>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2b07      	cmp	r3, #7
 80027f8:	d9ea      	bls.n	80027d0 <Rafael_init+0xc>
    }
	 rrlow = 0;
 80027fa:	4b20      	ldr	r3, [pc, #128]	; (800287c <Rafael_init+0xb8>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
	 rrhigh = 0;
 8002800:	4b1f      	ldr	r3, [pc, #124]	; (8002880 <Rafael_init+0xbc>)
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
	 rrmiss = 0;
 8002806:	4b1f      	ldr	r3, [pc, #124]	; (8002884 <Rafael_init+0xc0>)
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
	 regular = true;
 800280c:	4b1e      	ldr	r3, [pc, #120]	; (8002888 <Rafael_init+0xc4>)
 800280e:	2201      	movs	r2, #1
 8002810:	701a      	strb	r2, [r3, #0]
	 sample = 0;
 8002812:	4b1e      	ldr	r3, [pc, #120]	; (800288c <Rafael_init+0xc8>)
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
	 lastQRS = 0;
 8002818:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <Rafael_init+0xcc>)
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
	 lastSlope = 0;
 800281e:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <Rafael_init+0xd0>)
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
	 currentSlope = 0;
 8002824:	4b1c      	ldr	r3, [pc, #112]	; (8002898 <Rafael_init+0xd4>)
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
	 peak_i = 0;
 800282a:	4b1c      	ldr	r3, [pc, #112]	; (800289c <Rafael_init+0xd8>)
 800282c:	2200      	movs	r2, #0
 800282e:	801a      	strh	r2, [r3, #0]
	 peak_f = 0;
 8002830:	4b1b      	ldr	r3, [pc, #108]	; (80028a0 <Rafael_init+0xdc>)
 8002832:	2200      	movs	r2, #0
 8002834:	801a      	strh	r2, [r3, #0]
	 threshold_i1 = 0;
 8002836:	4b1b      	ldr	r3, [pc, #108]	; (80028a4 <Rafael_init+0xe0>)
 8002838:	2200      	movs	r2, #0
 800283a:	801a      	strh	r2, [r3, #0]
	 threshold_i2 = 0;
 800283c:	4b1a      	ldr	r3, [pc, #104]	; (80028a8 <Rafael_init+0xe4>)
 800283e:	2200      	movs	r2, #0
 8002840:	801a      	strh	r2, [r3, #0]
	 threshold_f1 = 0;
 8002842:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <Rafael_init+0xe8>)
 8002844:	2200      	movs	r2, #0
 8002846:	801a      	strh	r2, [r3, #0]
	 threshold_f2 = 0;
 8002848:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <Rafael_init+0xec>)
 800284a:	2200      	movs	r2, #0
 800284c:	801a      	strh	r2, [r3, #0]
	 spk_i = 0;
 800284e:	4b19      	ldr	r3, [pc, #100]	; (80028b4 <Rafael_init+0xf0>)
 8002850:	2200      	movs	r2, #0
 8002852:	801a      	strh	r2, [r3, #0]
	 spk_f = 0;
 8002854:	4b18      	ldr	r3, [pc, #96]	; (80028b8 <Rafael_init+0xf4>)
 8002856:	2200      	movs	r2, #0
 8002858:	801a      	strh	r2, [r3, #0]
	 npk_i = 0;
 800285a:	4b18      	ldr	r3, [pc, #96]	; (80028bc <Rafael_init+0xf8>)
 800285c:	2200      	movs	r2, #0
 800285e:	801a      	strh	r2, [r3, #0]
	 npk_f = 0;
 8002860:	4b17      	ldr	r3, [pc, #92]	; (80028c0 <Rafael_init+0xfc>)
 8002862:	2200      	movs	r2, #0
 8002864:	801a      	strh	r2, [r3, #0]
}
 8002866:	bf00      	nop
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	20002b70 	.word	0x20002b70
 8002874:	20002b1c 	.word	0x20002b1c
 8002878:	20002b3c 	.word	0x20002b3c
 800287c:	20002b64 	.word	0x20002b64
 8002880:	20002b68 	.word	0x20002b68
 8002884:	20002b6c 	.word	0x20002b6c
 8002888:	20000004 	.word	0x20000004
 800288c:	20002b78 	.word	0x20002b78
 8002890:	20002b7c 	.word	0x20002b7c
 8002894:	20002b80 	.word	0x20002b80
 8002898:	20002b84 	.word	0x20002b84
 800289c:	20002b8c 	.word	0x20002b8c
 80028a0:	20002b8e 	.word	0x20002b8e
 80028a4:	20002b90 	.word	0x20002b90
 80028a8:	20002b92 	.word	0x20002b92
 80028ac:	20002b94 	.word	0x20002b94
 80028b0:	20002b96 	.word	0x20002b96
 80028b4:	20002b98 	.word	0x20002b98
 80028b8:	20002b9a 	.word	0x20002b9a
 80028bc:	20002b9c 	.word	0x20002b9c
 80028c0:	20002b9e 	.word	0x20002b9e
 80028c4:	00000000 	.word	0x00000000

080028c8 <Rafael_PanTompkins>:
    and updates the thresholds and averages until there are no more samples. More details both above and in
    shorter comments below.
*/
//UPDATe: I changed the way that it operates, now works like hooman650's implementation
int16_t Rafael_PanTompkins(dataType input)
{
 80028c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80028cc:	b084      	sub	sp, #16
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	4603      	mov	r3, r0
 80028d2:	80fb      	strh	r3, [r7, #6]

		int16_t result = 0;
 80028d4:	2300      	movs	r3, #0
 80028d6:	81fb      	strh	r3, [r7, #14]
        // Test if the buffers are full.
        // If they are, shift them, discarding the oldest sample and adding the new one at the end.
        // Else, just put the newest sample in the next free position.
        // Update 'current' so that the program knows where's the newest sample.
		if (sample >= BUFFSIZE)
 80028d8:	4b5f      	ldr	r3, [pc, #380]	; (8002a58 <Rafael_PanTompkins+0x190>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80028e0:	d36b      	bcc.n	80029ba <Rafael_PanTompkins+0xf2>
		{
			for (i = 0; i < BUFFSIZE - 1; i++)
 80028e2:	4b5e      	ldr	r3, [pc, #376]	; (8002a5c <Rafael_PanTompkins+0x194>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	e05c      	b.n	80029a4 <Rafael_PanTompkins+0xdc>
			{
				RF_signal[i] =RF_signal[i+1];
 80028ea:	4b5c      	ldr	r3, [pc, #368]	; (8002a5c <Rafael_PanTompkins+0x194>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	4b5a      	ldr	r3, [pc, #360]	; (8002a5c <Rafael_PanTompkins+0x194>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	495a      	ldr	r1, [pc, #360]	; (8002a60 <Rafael_PanTompkins+0x198>)
 80028f6:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80028fa:	4a59      	ldr	r2, [pc, #356]	; (8002a60 <Rafael_PanTompkins+0x198>)
 80028fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_dcblock[i] = RF_dcblock[i+1];
 8002900:	4b56      	ldr	r3, [pc, #344]	; (8002a5c <Rafael_PanTompkins+0x194>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	1c5a      	adds	r2, r3, #1
 8002906:	4b55      	ldr	r3, [pc, #340]	; (8002a5c <Rafael_PanTompkins+0x194>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4956      	ldr	r1, [pc, #344]	; (8002a64 <Rafael_PanTompkins+0x19c>)
 800290c:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002910:	4a54      	ldr	r2, [pc, #336]	; (8002a64 <Rafael_PanTompkins+0x19c>)
 8002912:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_lowpass[i] = RF_lowpass[i+1];
 8002916:	4b51      	ldr	r3, [pc, #324]	; (8002a5c <Rafael_PanTompkins+0x194>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	1c5a      	adds	r2, r3, #1
 800291c:	4b4f      	ldr	r3, [pc, #316]	; (8002a5c <Rafael_PanTompkins+0x194>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4951      	ldr	r1, [pc, #324]	; (8002a68 <Rafael_PanTompkins+0x1a0>)
 8002922:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002926:	4a50      	ldr	r2, [pc, #320]	; (8002a68 <Rafael_PanTompkins+0x1a0>)
 8002928:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_highpass[i] = RF_highpass[i+1];
 800292c:	4b4b      	ldr	r3, [pc, #300]	; (8002a5c <Rafael_PanTompkins+0x194>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	4b4a      	ldr	r3, [pc, #296]	; (8002a5c <Rafael_PanTompkins+0x194>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	494d      	ldr	r1, [pc, #308]	; (8002a6c <Rafael_PanTompkins+0x1a4>)
 8002938:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800293c:	4a4b      	ldr	r2, [pc, #300]	; (8002a6c <Rafael_PanTompkins+0x1a4>)
 800293e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_derivative[i] = RF_derivative[i+1];
 8002942:	4b46      	ldr	r3, [pc, #280]	; (8002a5c <Rafael_PanTompkins+0x194>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	4b44      	ldr	r3, [pc, #272]	; (8002a5c <Rafael_PanTompkins+0x194>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4948      	ldr	r1, [pc, #288]	; (8002a70 <Rafael_PanTompkins+0x1a8>)
 800294e:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002952:	4a47      	ldr	r2, [pc, #284]	; (8002a70 <Rafael_PanTompkins+0x1a8>)
 8002954:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_squared[i] = RF_squared[i+1];
 8002958:	4b40      	ldr	r3, [pc, #256]	; (8002a5c <Rafael_PanTompkins+0x194>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	4b3f      	ldr	r3, [pc, #252]	; (8002a5c <Rafael_PanTompkins+0x194>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4944      	ldr	r1, [pc, #272]	; (8002a74 <Rafael_PanTompkins+0x1ac>)
 8002964:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002968:	4a42      	ldr	r2, [pc, #264]	; (8002a74 <Rafael_PanTompkins+0x1ac>)
 800296a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_integral[i] = RF_integral[i+1];
 800296e:	4b3b      	ldr	r3, [pc, #236]	; (8002a5c <Rafael_PanTompkins+0x194>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	1c5a      	adds	r2, r3, #1
 8002974:	4b39      	ldr	r3, [pc, #228]	; (8002a5c <Rafael_PanTompkins+0x194>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	493f      	ldr	r1, [pc, #252]	; (8002a78 <Rafael_PanTompkins+0x1b0>)
 800297a:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800297e:	4a3e      	ldr	r2, [pc, #248]	; (8002a78 <Rafael_PanTompkins+0x1b0>)
 8002980:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_outputSignal[i] = RF_outputSignal[i+1];
 8002984:	4b35      	ldr	r3, [pc, #212]	; (8002a5c <Rafael_PanTompkins+0x194>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	4b34      	ldr	r3, [pc, #208]	; (8002a5c <Rafael_PanTompkins+0x194>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	493b      	ldr	r1, [pc, #236]	; (8002a7c <Rafael_PanTompkins+0x1b4>)
 8002990:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002994:	4a39      	ldr	r2, [pc, #228]	; (8002a7c <Rafael_PanTompkins+0x1b4>)
 8002996:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (i = 0; i < BUFFSIZE - 1; i++)
 800299a:	4b30      	ldr	r3, [pc, #192]	; (8002a5c <Rafael_PanTompkins+0x194>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	3301      	adds	r3, #1
 80029a0:	4a2e      	ldr	r2, [pc, #184]	; (8002a5c <Rafael_PanTompkins+0x194>)
 80029a2:	6013      	str	r3, [r2, #0]
 80029a4:	4b2d      	ldr	r3, [pc, #180]	; (8002a5c <Rafael_PanTompkins+0x194>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f240 2256 	movw	r2, #598	; 0x256
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d99c      	bls.n	80028ea <Rafael_PanTompkins+0x22>
			}
			current = BUFFSIZE - 1;
 80029b0:	4b33      	ldr	r3, [pc, #204]	; (8002a80 <Rafael_PanTompkins+0x1b8>)
 80029b2:	f240 2257 	movw	r2, #599	; 0x257
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	e004      	b.n	80029c4 <Rafael_PanTompkins+0xfc>
		}
		else
		{
			current = sample;
 80029ba:	4b27      	ldr	r3, [pc, #156]	; (8002a58 <Rafael_PanTompkins+0x190>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	4b2f      	ldr	r3, [pc, #188]	; (8002a80 <Rafael_PanTompkins+0x1b8>)
 80029c2:	601a      	str	r2, [r3, #0]
		}
		RF_signal[current] = input;
 80029c4:	4b2e      	ldr	r3, [pc, #184]	; (8002a80 <Rafael_PanTompkins+0x1b8>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4925      	ldr	r1, [pc, #148]	; (8002a60 <Rafael_PanTompkins+0x198>)
 80029ca:	88fa      	ldrh	r2, [r7, #6]
 80029cc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

		// If no sample was read, stop processing!
		//if (signal[current] == NOSAMPLE)
		//	break;
		sample++; // Update sample counter
 80029d0:	4b21      	ldr	r3, [pc, #132]	; (8002a58 <Rafael_PanTompkins+0x190>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	3301      	adds	r3, #1
 80029d6:	4a20      	ldr	r2, [pc, #128]	; (8002a58 <Rafael_PanTompkins+0x190>)
 80029d8:	6013      	str	r3, [r2, #0]

		// DC Block filter
		// This was not proposed on the original paper.
		// It is not necessary and can be removed if your sensor or database has no DC noise.
		if (current >= 1)
 80029da:	4b29      	ldr	r3, [pc, #164]	; (8002a80 <Rafael_PanTompkins+0x1b8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	dd50      	ble.n	8002a84 <Rafael_PanTompkins+0x1bc>
			RF_dcblock[current] = RF_signal[current] - RF_signal[current-1] + 0.995*RF_dcblock[current-1];
 80029e2:	4b27      	ldr	r3, [pc, #156]	; (8002a80 <Rafael_PanTompkins+0x1b8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a1e      	ldr	r2, [pc, #120]	; (8002a60 <Rafael_PanTompkins+0x198>)
 80029e8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80029ec:	4619      	mov	r1, r3
 80029ee:	4b24      	ldr	r3, [pc, #144]	; (8002a80 <Rafael_PanTompkins+0x1b8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	4a1a      	ldr	r2, [pc, #104]	; (8002a60 <Rafael_PanTompkins+0x198>)
 80029f6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80029fa:	1acb      	subs	r3, r1, r3
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fd fd69 	bl	80004d4 <__aeabi_i2d>
 8002a02:	4604      	mov	r4, r0
 8002a04:	460d      	mov	r5, r1
 8002a06:	4b1e      	ldr	r3, [pc, #120]	; (8002a80 <Rafael_PanTompkins+0x1b8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	4a15      	ldr	r2, [pc, #84]	; (8002a64 <Rafael_PanTompkins+0x19c>)
 8002a0e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fd fd5e 	bl	80004d4 <__aeabi_i2d>
 8002a18:	a30d      	add	r3, pc, #52	; (adr r3, 8002a50 <Rafael_PanTompkins+0x188>)
 8002a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1e:	f7fd fdc3 	bl	80005a8 <__aeabi_dmul>
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	4620      	mov	r0, r4
 8002a28:	4629      	mov	r1, r5
 8002a2a:	f7fd fc07 	bl	800023c <__adddf3>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4913      	ldr	r1, [pc, #76]	; (8002a80 <Rafael_PanTompkins+0x1b8>)
 8002a34:	680c      	ldr	r4, [r1, #0]
 8002a36:	4610      	mov	r0, r2
 8002a38:	4619      	mov	r1, r3
 8002a3a:	f7fe f865 	bl	8000b08 <__aeabi_d2iz>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	b21a      	sxth	r2, r3
 8002a42:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <Rafael_PanTompkins+0x19c>)
 8002a44:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8002a48:	e022      	b.n	8002a90 <Rafael_PanTompkins+0x1c8>
 8002a4a:	bf00      	nop
 8002a4c:	f3af 8000 	nop.w
 8002a50:	3d70a3d7 	.word	0x3d70a3d7
 8002a54:	3fefd70a 	.word	0x3fefd70a
 8002a58:	20002b78 	.word	0x20002b78
 8002a5c:	20002b70 	.word	0x20002b70
 8002a60:	2000059c 	.word	0x2000059c
 8002a64:	20000a4c 	.word	0x20000a4c
 8002a68:	20000efc 	.word	0x20000efc
 8002a6c:	200013ac 	.word	0x200013ac
 8002a70:	2000185c 	.word	0x2000185c
 8002a74:	20001d0c 	.word	0x20001d0c
 8002a78:	200021bc 	.word	0x200021bc
 8002a7c:	2000266c 	.word	0x2000266c
 8002a80:	20002b88 	.word	0x20002b88
		else
			RF_dcblock[current] = 0;
 8002a84:	4b8a      	ldr	r3, [pc, #552]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a8a      	ldr	r2, [pc, #552]	; (8002cb4 <Rafael_PanTompkins+0x3ec>)
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		// Low Pass filter
		// Implemented as proposed by the original paper.
		// y(nT) = 2y(nT - T) - y(nT - 2T) + x(nT) - 2x(nT - 6T) + x(nT - 12T)
		// Can be removed if your signal was previously filtered, or replaced by a different filter.
		RF_lowpass[current] = RF_dcblock[current];
 8002a90:	4b87      	ldr	r3, [pc, #540]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	4b86      	ldr	r3, [pc, #536]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4986      	ldr	r1, [pc, #536]	; (8002cb4 <Rafael_PanTompkins+0x3ec>)
 8002a9a:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002a9e:	4a86      	ldr	r2, [pc, #536]	; (8002cb8 <Rafael_PanTompkins+0x3f0>)
 8002aa0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 1)
 8002aa4:	4b82      	ldr	r3, [pc, #520]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	dd16      	ble.n	8002ada <Rafael_PanTompkins+0x212>
			RF_lowpass[current] += 2*RF_lowpass[current-1];
 8002aac:	4b80      	ldr	r3, [pc, #512]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a81      	ldr	r2, [pc, #516]	; (8002cb8 <Rafael_PanTompkins+0x3f0>)
 8002ab2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	4b7d      	ldr	r3, [pc, #500]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	3b01      	subs	r3, #1
 8002abe:	497e      	ldr	r1, [pc, #504]	; (8002cb8 <Rafael_PanTompkins+0x3f0>)
 8002ac0:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	4413      	add	r3, r2
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	4b78      	ldr	r3, [pc, #480]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	b211      	sxth	r1, r2
 8002ad4:	4a78      	ldr	r2, [pc, #480]	; (8002cb8 <Rafael_PanTompkins+0x3f0>)
 8002ad6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 2)
 8002ada:	4b75      	ldr	r3, [pc, #468]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	dd14      	ble.n	8002b0c <Rafael_PanTompkins+0x244>
			RF_lowpass[current] -= RF_lowpass[current-2];
 8002ae2:	4b73      	ldr	r3, [pc, #460]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a74      	ldr	r2, [pc, #464]	; (8002cb8 <Rafael_PanTompkins+0x3f0>)
 8002ae8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	4b70      	ldr	r3, [pc, #448]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	3b02      	subs	r3, #2
 8002af4:	4970      	ldr	r1, [pc, #448]	; (8002cb8 <Rafael_PanTompkins+0x3f0>)
 8002af6:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	4b6b      	ldr	r3, [pc, #428]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	b211      	sxth	r1, r2
 8002b06:	4a6c      	ldr	r2, [pc, #432]	; (8002cb8 <Rafael_PanTompkins+0x3f0>)
 8002b08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 6)
 8002b0c:	4b68      	ldr	r3, [pc, #416]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b05      	cmp	r3, #5
 8002b12:	dd16      	ble.n	8002b42 <Rafael_PanTompkins+0x27a>
			RF_lowpass[current] -= 2*RF_dcblock[current-6];
 8002b14:	4b66      	ldr	r3, [pc, #408]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a67      	ldr	r2, [pc, #412]	; (8002cb8 <Rafael_PanTompkins+0x3f0>)
 8002b1a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	4b63      	ldr	r3, [pc, #396]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	3b06      	subs	r3, #6
 8002b26:	4963      	ldr	r1, [pc, #396]	; (8002cb4 <Rafael_PanTompkins+0x3ec>)
 8002b28:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	4b5e      	ldr	r3, [pc, #376]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	b211      	sxth	r1, r2
 8002b3c:	4a5e      	ldr	r2, [pc, #376]	; (8002cb8 <Rafael_PanTompkins+0x3f0>)
 8002b3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 12)
 8002b42:	4b5b      	ldr	r3, [pc, #364]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2b0b      	cmp	r3, #11
 8002b48:	dd14      	ble.n	8002b74 <Rafael_PanTompkins+0x2ac>
			RF_lowpass[current] += RF_dcblock[current-12];
 8002b4a:	4b59      	ldr	r3, [pc, #356]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a5a      	ldr	r2, [pc, #360]	; (8002cb8 <Rafael_PanTompkins+0x3f0>)
 8002b50:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	4b56      	ldr	r3, [pc, #344]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	3b0c      	subs	r3, #12
 8002b5c:	4955      	ldr	r1, [pc, #340]	; (8002cb4 <Rafael_PanTompkins+0x3ec>)
 8002b5e:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	4413      	add	r3, r2
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	4b51      	ldr	r3, [pc, #324]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	b211      	sxth	r1, r2
 8002b6e:	4a52      	ldr	r2, [pc, #328]	; (8002cb8 <Rafael_PanTompkins+0x3f0>)
 8002b70:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		// High Pass filter
		// Implemented as proposed by the original paper.
		// y(nT) = 32x(nT - 16T) - [y(nT - T) + x(nT) - x(nT - 32T)]
		// Can be removed if your signal was previously filtered, or replaced by a different filter.
		RF_highpass[current] = -RF_lowpass[current];
 8002b74:	4b4e      	ldr	r3, [pc, #312]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a4f      	ldr	r2, [pc, #316]	; (8002cb8 <Rafael_PanTompkins+0x3f0>)
 8002b7a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	425b      	negs	r3, r3
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	4b4a      	ldr	r3, [pc, #296]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	b211      	sxth	r1, r2
 8002b8a:	4a4c      	ldr	r2, [pc, #304]	; (8002cbc <Rafael_PanTompkins+0x3f4>)
 8002b8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 1)
 8002b90:	4b47      	ldr	r3, [pc, #284]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	dd14      	ble.n	8002bc2 <Rafael_PanTompkins+0x2fa>
			RF_highpass[current] -= RF_highpass[current-1];
 8002b98:	4b45      	ldr	r3, [pc, #276]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a47      	ldr	r2, [pc, #284]	; (8002cbc <Rafael_PanTompkins+0x3f4>)
 8002b9e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	4b42      	ldr	r3, [pc, #264]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	4944      	ldr	r1, [pc, #272]	; (8002cbc <Rafael_PanTompkins+0x3f4>)
 8002bac:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	4b3e      	ldr	r3, [pc, #248]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	b211      	sxth	r1, r2
 8002bbc:	4a3f      	ldr	r2, [pc, #252]	; (8002cbc <Rafael_PanTompkins+0x3f4>)
 8002bbe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 16)
 8002bc2:	4b3b      	ldr	r3, [pc, #236]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2b0f      	cmp	r3, #15
 8002bc8:	dd16      	ble.n	8002bf8 <Rafael_PanTompkins+0x330>
			RF_highpass[current] += 32*RF_lowpass[current-16];
 8002bca:	4b39      	ldr	r3, [pc, #228]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a3b      	ldr	r2, [pc, #236]	; (8002cbc <Rafael_PanTompkins+0x3f4>)
 8002bd0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	4b36      	ldr	r3, [pc, #216]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	3b10      	subs	r3, #16
 8002bdc:	4936      	ldr	r1, [pc, #216]	; (8002cb8 <Rafael_PanTompkins+0x3f0>)
 8002bde:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	015b      	lsls	r3, r3, #5
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	4413      	add	r3, r2
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	4b30      	ldr	r3, [pc, #192]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	b211      	sxth	r1, r2
 8002bf2:	4a32      	ldr	r2, [pc, #200]	; (8002cbc <Rafael_PanTompkins+0x3f4>)
 8002bf4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 32)
 8002bf8:	4b2d      	ldr	r3, [pc, #180]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2b1f      	cmp	r3, #31
 8002bfe:	dd14      	ble.n	8002c2a <Rafael_PanTompkins+0x362>
			RF_highpass[current] += RF_lowpass[current-32];
 8002c00:	4b2b      	ldr	r3, [pc, #172]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a2d      	ldr	r2, [pc, #180]	; (8002cbc <Rafael_PanTompkins+0x3f4>)
 8002c06:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	4b28      	ldr	r3, [pc, #160]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	3b20      	subs	r3, #32
 8002c12:	4929      	ldr	r1, [pc, #164]	; (8002cb8 <Rafael_PanTompkins+0x3f0>)
 8002c14:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	4b24      	ldr	r3, [pc, #144]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	b211      	sxth	r1, r2
 8002c24:	4a25      	ldr	r2, [pc, #148]	; (8002cbc <Rafael_PanTompkins+0x3f4>)
 8002c26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		// Derivative filter
		// This is an alternative implementation, the central difference method.
		// f'(a) = [f(a+h) - f(a-h)]/2h
		// The original formula used by Pan-Tompkins was:
		// y(nT) = (1/8T)[-x(nT - 2T) - 2x(nT - T) + 2x(nT + T) + x(nT + 2T)]
		RF_derivative[current] = RF_highpass[current];
 8002c2a:	4b21      	ldr	r3, [pc, #132]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	4b20      	ldr	r3, [pc, #128]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4922      	ldr	r1, [pc, #136]	; (8002cbc <Rafael_PanTompkins+0x3f4>)
 8002c34:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002c38:	4a21      	ldr	r2, [pc, #132]	; (8002cc0 <Rafael_PanTompkins+0x3f8>)
 8002c3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current > 0)
 8002c3e:	4b1c      	ldr	r3, [pc, #112]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	dd14      	ble.n	8002c70 <Rafael_PanTompkins+0x3a8>
			RF_derivative[current] -= RF_highpass[current-1];
 8002c46:	4b1a      	ldr	r3, [pc, #104]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a1d      	ldr	r2, [pc, #116]	; (8002cc0 <Rafael_PanTompkins+0x3f8>)
 8002c4c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	4b17      	ldr	r3, [pc, #92]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	4918      	ldr	r1, [pc, #96]	; (8002cbc <Rafael_PanTompkins+0x3f4>)
 8002c5a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	4b12      	ldr	r3, [pc, #72]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	b211      	sxth	r1, r2
 8002c6a:	4a15      	ldr	r2, [pc, #84]	; (8002cc0 <Rafael_PanTompkins+0x3f8>)
 8002c6c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		// This just squares the derivative, to get rid of negative values and emphasize high frequencies.
		// y(nT) = [x(nT)]^2.
		RF_squared[current] = RF_derivative[current]*RF_derivative[current];
 8002c70:	4b0f      	ldr	r3, [pc, #60]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a12      	ldr	r2, [pc, #72]	; (8002cc0 <Rafael_PanTompkins+0x3f8>)
 8002c76:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	490f      	ldr	r1, [pc, #60]	; (8002cc0 <Rafael_PanTompkins+0x3f8>)
 8002c82:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	fb12 f303 	smulbb	r3, r2, r3
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	b211      	sxth	r1, r2
 8002c94:	4a0b      	ldr	r2, [pc, #44]	; (8002cc4 <Rafael_PanTompkins+0x3fc>)
 8002c96:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		// Moving-Window Integration
		// Implemented as proposed by the original paper.
		// y(nT) = (1/N)[x(nT - (N - 1)T) + x(nT - (N - 2)T) + ... x(nT)]
		// WINDOWSIZE, in samples, must be defined so that the window is ~150ms.

		RF_integral[current] = 0;
 8002c9a:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <Rafael_PanTompkins+0x3e8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a0a      	ldr	r2, [pc, #40]	; (8002cc8 <Rafael_PanTompkins+0x400>)
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (i = 0; i < WINDOWSIZE; i++)
 8002ca6:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <Rafael_PanTompkins+0x404>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	e035      	b.n	8002d1a <Rafael_PanTompkins+0x452>
 8002cae:	bf00      	nop
 8002cb0:	20002b88 	.word	0x20002b88
 8002cb4:	20000a4c 	.word	0x20000a4c
 8002cb8:	20000efc 	.word	0x20000efc
 8002cbc:	200013ac 	.word	0x200013ac
 8002cc0:	2000185c 	.word	0x2000185c
 8002cc4:	20001d0c 	.word	0x20001d0c
 8002cc8:	200021bc 	.word	0x200021bc
 8002ccc:	20002b70 	.word	0x20002b70
		{
			if (current >= (dataType)i)
 8002cd0:	4b5e      	ldr	r3, [pc, #376]	; (8002e4c <Rafael_PanTompkins+0x584>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	b21b      	sxth	r3, r3
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	4b5d      	ldr	r3, [pc, #372]	; (8002e50 <Rafael_PanTompkins+0x588>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	dc21      	bgt.n	8002d24 <Rafael_PanTompkins+0x45c>
				RF_integral[current] += RF_squared[current - i];
 8002ce0:	4b5b      	ldr	r3, [pc, #364]	; (8002e50 <Rafael_PanTompkins+0x588>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a5b      	ldr	r2, [pc, #364]	; (8002e54 <Rafael_PanTompkins+0x58c>)
 8002ce6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	4b58      	ldr	r3, [pc, #352]	; (8002e50 <Rafael_PanTompkins+0x588>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4b56      	ldr	r3, [pc, #344]	; (8002e4c <Rafael_PanTompkins+0x584>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	1acb      	subs	r3, r1, r3
 8002cf8:	4957      	ldr	r1, [pc, #348]	; (8002e58 <Rafael_PanTompkins+0x590>)
 8002cfa:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	4b52      	ldr	r3, [pc, #328]	; (8002e50 <Rafael_PanTompkins+0x588>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	b211      	sxth	r1, r2
 8002d0a:	4a52      	ldr	r2, [pc, #328]	; (8002e54 <Rafael_PanTompkins+0x58c>)
 8002d0c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (i = 0; i < WINDOWSIZE; i++)
 8002d10:	4b4e      	ldr	r3, [pc, #312]	; (8002e4c <Rafael_PanTompkins+0x584>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	3301      	adds	r3, #1
 8002d16:	4a4d      	ldr	r2, [pc, #308]	; (8002e4c <Rafael_PanTompkins+0x584>)
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	4b4c      	ldr	r3, [pc, #304]	; (8002e4c <Rafael_PanTompkins+0x584>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b13      	cmp	r3, #19
 8002d20:	d9d6      	bls.n	8002cd0 <Rafael_PanTompkins+0x408>
 8002d22:	e000      	b.n	8002d26 <Rafael_PanTompkins+0x45e>
			else
				break;
 8002d24:	bf00      	nop
		}
		RF_integral[current] /= (dataType)i;
 8002d26:	4b4a      	ldr	r3, [pc, #296]	; (8002e50 <Rafael_PanTompkins+0x588>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a4a      	ldr	r2, [pc, #296]	; (8002e54 <Rafael_PanTompkins+0x58c>)
 8002d2c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002d30:	461a      	mov	r2, r3
 8002d32:	4b46      	ldr	r3, [pc, #280]	; (8002e4c <Rafael_PanTompkins+0x584>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	b21b      	sxth	r3, r3
 8002d38:	fb92 f2f3 	sdiv	r2, r2, r3
 8002d3c:	4b44      	ldr	r3, [pc, #272]	; (8002e50 <Rafael_PanTompkins+0x588>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	b211      	sxth	r1, r2
 8002d42:	4a44      	ldr	r2, [pc, #272]	; (8002e54 <Rafael_PanTompkins+0x58c>)
 8002d44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		qrs = false;
 8002d48:	4b44      	ldr	r3, [pc, #272]	; (8002e5c <Rafael_PanTompkins+0x594>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	701a      	strb	r2, [r3, #0]

		// If the current signal is above one of the thresholds (integral or filtered signal), it's a peak candidate.
        if (RF_integral[current] >= threshold_i1 || RF_highpass[current] >= threshold_f1)
 8002d4e:	4b40      	ldr	r3, [pc, #256]	; (8002e50 <Rafael_PanTompkins+0x588>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a40      	ldr	r2, [pc, #256]	; (8002e54 <Rafael_PanTompkins+0x58c>)
 8002d54:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002d58:	4b41      	ldr	r3, [pc, #260]	; (8002e60 <Rafael_PanTompkins+0x598>)
 8002d5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	da09      	bge.n	8002d76 <Rafael_PanTompkins+0x4ae>
 8002d62:	4b3b      	ldr	r3, [pc, #236]	; (8002e50 <Rafael_PanTompkins+0x588>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a3f      	ldr	r2, [pc, #252]	; (8002e64 <Rafael_PanTompkins+0x59c>)
 8002d68:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002d6c:	4b3e      	ldr	r3, [pc, #248]	; (8002e68 <Rafael_PanTompkins+0x5a0>)
 8002d6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	db0d      	blt.n	8002d92 <Rafael_PanTompkins+0x4ca>
        {
            peak_i = RF_integral[current];
 8002d76:	4b36      	ldr	r3, [pc, #216]	; (8002e50 <Rafael_PanTompkins+0x588>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a36      	ldr	r2, [pc, #216]	; (8002e54 <Rafael_PanTompkins+0x58c>)
 8002d7c:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002d80:	4b3a      	ldr	r3, [pc, #232]	; (8002e6c <Rafael_PanTompkins+0x5a4>)
 8002d82:	801a      	strh	r2, [r3, #0]
            peak_f = RF_highpass[current];
 8002d84:	4b32      	ldr	r3, [pc, #200]	; (8002e50 <Rafael_PanTompkins+0x588>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a36      	ldr	r2, [pc, #216]	; (8002e64 <Rafael_PanTompkins+0x59c>)
 8002d8a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002d8e:	4b38      	ldr	r3, [pc, #224]	; (8002e70 <Rafael_PanTompkins+0x5a8>)
 8002d90:	801a      	strh	r2, [r3, #0]
        }

		// If both the integral and the signal are above their thresholds, they're probably signal peaks.
		if ((RF_integral[current] >= threshold_i1) && (RF_highpass[current] >= threshold_f1))
 8002d92:	4b2f      	ldr	r3, [pc, #188]	; (8002e50 <Rafael_PanTompkins+0x588>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a2f      	ldr	r2, [pc, #188]	; (8002e54 <Rafael_PanTompkins+0x58c>)
 8002d98:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002d9c:	4b30      	ldr	r3, [pc, #192]	; (8002e60 <Rafael_PanTompkins+0x598>)
 8002d9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	f2c0 837b 	blt.w	800349e <Rafael_PanTompkins+0xbd6>
 8002da8:	4b29      	ldr	r3, [pc, #164]	; (8002e50 <Rafael_PanTompkins+0x588>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a2d      	ldr	r2, [pc, #180]	; (8002e64 <Rafael_PanTompkins+0x59c>)
 8002dae:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002db2:	4b2d      	ldr	r3, [pc, #180]	; (8002e68 <Rafael_PanTompkins+0x5a0>)
 8002db4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	f2c0 8370 	blt.w	800349e <Rafael_PanTompkins+0xbd6>
		{
			// There's a 200ms latency. If the new peak respects this condition, we can keep testing.
			if (sample > lastQRS + FS/5)
 8002dbe:	4b2d      	ldr	r3, [pc, #180]	; (8002e74 <Rafael_PanTompkins+0x5ac>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002dc6:	4b2c      	ldr	r3, [pc, #176]	; (8002e78 <Rafael_PanTompkins+0x5b0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	f080 827e 	bcs.w	80032cc <Rafael_PanTompkins+0xa04>
			{
			    // If it respects the 200ms latency, but it doesn't respect the 360ms latency, we check the slope.
				if (sample <= lastQRS + (long unsigned int)(0.36*FS))
 8002dd0:	4b28      	ldr	r3, [pc, #160]	; (8002e74 <Rafael_PanTompkins+0x5ac>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f103 0281 	add.w	r2, r3, #129	; 0x81
 8002dd8:	4b27      	ldr	r3, [pc, #156]	; (8002e78 <Rafael_PanTompkins+0x5b0>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	f0c0 812b 	bcc.w	8003038 <Rafael_PanTompkins+0x770>
				{
				    // The squared slope is "M" shaped. So we have to check nearby samples to make sure we're really looking
				    // at its peak value, rather than a low one.
				    currentSlope = 0;
 8002de2:	4b26      	ldr	r3, [pc, #152]	; (8002e7c <Rafael_PanTompkins+0x5b4>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
				    for (j = current - 10; j <= current; j++)
 8002de8:	4b19      	ldr	r3, [pc, #100]	; (8002e50 <Rafael_PanTompkins+0x588>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	3b0a      	subs	r3, #10
 8002dee:	461a      	mov	r2, r3
 8002df0:	4b23      	ldr	r3, [pc, #140]	; (8002e80 <Rafael_PanTompkins+0x5b8>)
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	e016      	b.n	8002e24 <Rafael_PanTompkins+0x55c>
                        if (RF_squared[j] > currentSlope)
 8002df6:	4b22      	ldr	r3, [pc, #136]	; (8002e80 <Rafael_PanTompkins+0x5b8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a17      	ldr	r2, [pc, #92]	; (8002e58 <Rafael_PanTompkins+0x590>)
 8002dfc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002e00:	461a      	mov	r2, r3
 8002e02:	4b1e      	ldr	r3, [pc, #120]	; (8002e7c <Rafael_PanTompkins+0x5b4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d907      	bls.n	8002e1a <Rafael_PanTompkins+0x552>
                            currentSlope = RF_squared[j];
 8002e0a:	4b1d      	ldr	r3, [pc, #116]	; (8002e80 <Rafael_PanTompkins+0x5b8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a12      	ldr	r2, [pc, #72]	; (8002e58 <Rafael_PanTompkins+0x590>)
 8002e10:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002e14:	461a      	mov	r2, r3
 8002e16:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <Rafael_PanTompkins+0x5b4>)
 8002e18:	601a      	str	r2, [r3, #0]
				    for (j = current - 10; j <= current; j++)
 8002e1a:	4b19      	ldr	r3, [pc, #100]	; (8002e80 <Rafael_PanTompkins+0x5b8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	4a17      	ldr	r2, [pc, #92]	; (8002e80 <Rafael_PanTompkins+0x5b8>)
 8002e22:	6013      	str	r3, [r2, #0]
 8002e24:	4b16      	ldr	r3, [pc, #88]	; (8002e80 <Rafael_PanTompkins+0x5b8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a09      	ldr	r2, [pc, #36]	; (8002e50 <Rafael_PanTompkins+0x588>)
 8002e2a:	6812      	ldr	r2, [r2, #0]
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d9e2      	bls.n	8002df6 <Rafael_PanTompkins+0x52e>

				    if (currentSlope <= (dataType)(lastSlope/2))
 8002e30:	4b14      	ldr	r3, [pc, #80]	; (8002e84 <Rafael_PanTompkins+0x5bc>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	085b      	lsrs	r3, r3, #1
 8002e36:	b21b      	sxth	r3, r3
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <Rafael_PanTompkins+0x5b4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d322      	bcc.n	8002e88 <Rafael_PanTompkins+0x5c0>
                    {
                        qrs = false;
 8002e42:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <Rafael_PanTompkins+0x594>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	701a      	strb	r2, [r3, #0]
 8002e48:	e329      	b.n	800349e <Rafael_PanTompkins+0xbd6>
 8002e4a:	bf00      	nop
 8002e4c:	20002b70 	.word	0x20002b70
 8002e50:	20002b88 	.word	0x20002b88
 8002e54:	200021bc 	.word	0x200021bc
 8002e58:	20001d0c 	.word	0x20001d0c
 8002e5c:	20002ba0 	.word	0x20002ba0
 8002e60:	20002b90 	.word	0x20002b90
 8002e64:	200013ac 	.word	0x200013ac
 8002e68:	20002b94 	.word	0x20002b94
 8002e6c:	20002b8c 	.word	0x20002b8c
 8002e70:	20002b8e 	.word	0x20002b8e
 8002e74:	20002b7c 	.word	0x20002b7c
 8002e78:	20002b78 	.word	0x20002b78
 8002e7c:	20002b84 	.word	0x20002b84
 8002e80:	20002b74 	.word	0x20002b74
 8002e84:	20002b80 	.word	0x20002b80
                    }

                    else
                    {
                        spk_i = 0.125*peak_i + 0.875*spk_i;
 8002e88:	4b70      	ldr	r3, [pc, #448]	; (800304c <Rafael_PanTompkins+0x784>)
 8002e8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fd fb20 	bl	80004d4 <__aeabi_i2d>
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002e9c:	f7fd fb84 	bl	80005a8 <__aeabi_dmul>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	4614      	mov	r4, r2
 8002ea6:	461d      	mov	r5, r3
 8002ea8:	4b69      	ldr	r3, [pc, #420]	; (8003050 <Rafael_PanTompkins+0x788>)
 8002eaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fd fb10 	bl	80004d4 <__aeabi_i2d>
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	4b66      	ldr	r3, [pc, #408]	; (8003054 <Rafael_PanTompkins+0x78c>)
 8002eba:	f7fd fb75 	bl	80005a8 <__aeabi_dmul>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	4620      	mov	r0, r4
 8002ec4:	4629      	mov	r1, r5
 8002ec6:	f7fd f9b9 	bl	800023c <__adddf3>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4610      	mov	r0, r2
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	f7fd fe19 	bl	8000b08 <__aeabi_d2iz>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	b21a      	sxth	r2, r3
 8002eda:	4b5d      	ldr	r3, [pc, #372]	; (8003050 <Rafael_PanTompkins+0x788>)
 8002edc:	801a      	strh	r2, [r3, #0]
                        threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8002ede:	4b5e      	ldr	r3, [pc, #376]	; (8003058 <Rafael_PanTompkins+0x790>)
 8002ee0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fd faf5 	bl	80004d4 <__aeabi_i2d>
 8002eea:	4604      	mov	r4, r0
 8002eec:	460d      	mov	r5, r1
 8002eee:	4b58      	ldr	r3, [pc, #352]	; (8003050 <Rafael_PanTompkins+0x788>)
 8002ef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4b58      	ldr	r3, [pc, #352]	; (8003058 <Rafael_PanTompkins+0x790>)
 8002ef8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fd fae8 	bl	80004d4 <__aeabi_i2d>
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	4b54      	ldr	r3, [pc, #336]	; (800305c <Rafael_PanTompkins+0x794>)
 8002f0a:	f7fd fb4d 	bl	80005a8 <__aeabi_dmul>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4620      	mov	r0, r4
 8002f14:	4629      	mov	r1, r5
 8002f16:	f7fd f991 	bl	800023c <__adddf3>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4610      	mov	r0, r2
 8002f20:	4619      	mov	r1, r3
 8002f22:	f7fd fdf1 	bl	8000b08 <__aeabi_d2iz>
 8002f26:	4603      	mov	r3, r0
 8002f28:	b21a      	sxth	r2, r3
 8002f2a:	4b4d      	ldr	r3, [pc, #308]	; (8003060 <Rafael_PanTompkins+0x798>)
 8002f2c:	801a      	strh	r2, [r3, #0]
                        threshold_i2 = 0.5*threshold_i1;
 8002f2e:	4b4c      	ldr	r3, [pc, #304]	; (8003060 <Rafael_PanTompkins+0x798>)
 8002f30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fd facd 	bl	80004d4 <__aeabi_i2d>
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	4b49      	ldr	r3, [pc, #292]	; (8003064 <Rafael_PanTompkins+0x79c>)
 8002f40:	f7fd fb32 	bl	80005a8 <__aeabi_dmul>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4610      	mov	r0, r2
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	f7fd fddc 	bl	8000b08 <__aeabi_d2iz>
 8002f50:	4603      	mov	r3, r0
 8002f52:	b21a      	sxth	r2, r3
 8002f54:	4b44      	ldr	r3, [pc, #272]	; (8003068 <Rafael_PanTompkins+0x7a0>)
 8002f56:	801a      	strh	r2, [r3, #0]

                        spk_f = 0.125*peak_f + 0.875*spk_f;
 8002f58:	4b44      	ldr	r3, [pc, #272]	; (800306c <Rafael_PanTompkins+0x7a4>)
 8002f5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fd fab8 	bl	80004d4 <__aeabi_i2d>
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002f6c:	f7fd fb1c 	bl	80005a8 <__aeabi_dmul>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4614      	mov	r4, r2
 8002f76:	461d      	mov	r5, r3
 8002f78:	4b3d      	ldr	r3, [pc, #244]	; (8003070 <Rafael_PanTompkins+0x7a8>)
 8002f7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fd faa8 	bl	80004d4 <__aeabi_i2d>
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	4b32      	ldr	r3, [pc, #200]	; (8003054 <Rafael_PanTompkins+0x78c>)
 8002f8a:	f7fd fb0d 	bl	80005a8 <__aeabi_dmul>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	4620      	mov	r0, r4
 8002f94:	4629      	mov	r1, r5
 8002f96:	f7fd f951 	bl	800023c <__adddf3>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	f7fd fdb1 	bl	8000b08 <__aeabi_d2iz>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	b21a      	sxth	r2, r3
 8002faa:	4b31      	ldr	r3, [pc, #196]	; (8003070 <Rafael_PanTompkins+0x7a8>)
 8002fac:	801a      	strh	r2, [r3, #0]
                        threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 8002fae:	4b31      	ldr	r3, [pc, #196]	; (8003074 <Rafael_PanTompkins+0x7ac>)
 8002fb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fd fa8d 	bl	80004d4 <__aeabi_i2d>
 8002fba:	4604      	mov	r4, r0
 8002fbc:	460d      	mov	r5, r1
 8002fbe:	4b2c      	ldr	r3, [pc, #176]	; (8003070 <Rafael_PanTompkins+0x7a8>)
 8002fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4b2b      	ldr	r3, [pc, #172]	; (8003074 <Rafael_PanTompkins+0x7ac>)
 8002fc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fd fa80 	bl	80004d4 <__aeabi_i2d>
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	4b20      	ldr	r3, [pc, #128]	; (800305c <Rafael_PanTompkins+0x794>)
 8002fda:	f7fd fae5 	bl	80005a8 <__aeabi_dmul>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4620      	mov	r0, r4
 8002fe4:	4629      	mov	r1, r5
 8002fe6:	f7fd f929 	bl	800023c <__adddf3>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4610      	mov	r0, r2
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	f7fd fd89 	bl	8000b08 <__aeabi_d2iz>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	b21a      	sxth	r2, r3
 8002ffa:	4b1f      	ldr	r3, [pc, #124]	; (8003078 <Rafael_PanTompkins+0x7b0>)
 8002ffc:	801a      	strh	r2, [r3, #0]
                        threshold_f2 = 0.5*threshold_f1;
 8002ffe:	4b1e      	ldr	r3, [pc, #120]	; (8003078 <Rafael_PanTompkins+0x7b0>)
 8003000:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003004:	4618      	mov	r0, r3
 8003006:	f7fd fa65 	bl	80004d4 <__aeabi_i2d>
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	4b15      	ldr	r3, [pc, #84]	; (8003064 <Rafael_PanTompkins+0x79c>)
 8003010:	f7fd faca 	bl	80005a8 <__aeabi_dmul>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4610      	mov	r0, r2
 800301a:	4619      	mov	r1, r3
 800301c:	f7fd fd74 	bl	8000b08 <__aeabi_d2iz>
 8003020:	4603      	mov	r3, r0
 8003022:	b21a      	sxth	r2, r3
 8003024:	4b15      	ldr	r3, [pc, #84]	; (800307c <Rafael_PanTompkins+0x7b4>)
 8003026:	801a      	strh	r2, [r3, #0]

                        lastSlope = currentSlope;
 8003028:	4b15      	ldr	r3, [pc, #84]	; (8003080 <Rafael_PanTompkins+0x7b8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a15      	ldr	r2, [pc, #84]	; (8003084 <Rafael_PanTompkins+0x7bc>)
 800302e:	6013      	str	r3, [r2, #0]
                        qrs = true;
 8003030:	4b15      	ldr	r3, [pc, #84]	; (8003088 <Rafael_PanTompkins+0x7c0>)
 8003032:	2201      	movs	r2, #1
 8003034:	701a      	strb	r2, [r3, #0]
 8003036:	e232      	b.n	800349e <Rafael_PanTompkins+0xbd6>
                    }
				}
				// If it was above both thresholds and respects both latency periods, it certainly is a R peak.
				else
				{
				    currentSlope = 0;
 8003038:	4b11      	ldr	r3, [pc, #68]	; (8003080 <Rafael_PanTompkins+0x7b8>)
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
                    for (j = current - 10; j <= current; j++)
 800303e:	4b13      	ldr	r3, [pc, #76]	; (800308c <Rafael_PanTompkins+0x7c4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	3b0a      	subs	r3, #10
 8003044:	461a      	mov	r2, r3
 8003046:	4b12      	ldr	r3, [pc, #72]	; (8003090 <Rafael_PanTompkins+0x7c8>)
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	e03a      	b.n	80030c2 <Rafael_PanTompkins+0x7fa>
 800304c:	20002b8c 	.word	0x20002b8c
 8003050:	20002b98 	.word	0x20002b98
 8003054:	3fec0000 	.word	0x3fec0000
 8003058:	20002b9c 	.word	0x20002b9c
 800305c:	3fd00000 	.word	0x3fd00000
 8003060:	20002b90 	.word	0x20002b90
 8003064:	3fe00000 	.word	0x3fe00000
 8003068:	20002b92 	.word	0x20002b92
 800306c:	20002b8e 	.word	0x20002b8e
 8003070:	20002b9a 	.word	0x20002b9a
 8003074:	20002b9e 	.word	0x20002b9e
 8003078:	20002b94 	.word	0x20002b94
 800307c:	20002b96 	.word	0x20002b96
 8003080:	20002b84 	.word	0x20002b84
 8003084:	20002b80 	.word	0x20002b80
 8003088:	20002ba0 	.word	0x20002ba0
 800308c:	20002b88 	.word	0x20002b88
 8003090:	20002b74 	.word	0x20002b74
                        if (RF_squared[j] > currentSlope)
 8003094:	4b7a      	ldr	r3, [pc, #488]	; (8003280 <Rafael_PanTompkins+0x9b8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a7a      	ldr	r2, [pc, #488]	; (8003284 <Rafael_PanTompkins+0x9bc>)
 800309a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800309e:	461a      	mov	r2, r3
 80030a0:	4b79      	ldr	r3, [pc, #484]	; (8003288 <Rafael_PanTompkins+0x9c0>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d907      	bls.n	80030b8 <Rafael_PanTompkins+0x7f0>
                            currentSlope = RF_squared[j];
 80030a8:	4b75      	ldr	r3, [pc, #468]	; (8003280 <Rafael_PanTompkins+0x9b8>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a75      	ldr	r2, [pc, #468]	; (8003284 <Rafael_PanTompkins+0x9bc>)
 80030ae:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80030b2:	461a      	mov	r2, r3
 80030b4:	4b74      	ldr	r3, [pc, #464]	; (8003288 <Rafael_PanTompkins+0x9c0>)
 80030b6:	601a      	str	r2, [r3, #0]
                    for (j = current - 10; j <= current; j++)
 80030b8:	4b71      	ldr	r3, [pc, #452]	; (8003280 <Rafael_PanTompkins+0x9b8>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	3301      	adds	r3, #1
 80030be:	4a70      	ldr	r2, [pc, #448]	; (8003280 <Rafael_PanTompkins+0x9b8>)
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	4b6f      	ldr	r3, [pc, #444]	; (8003280 <Rafael_PanTompkins+0x9b8>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a71      	ldr	r2, [pc, #452]	; (800328c <Rafael_PanTompkins+0x9c4>)
 80030c8:	6812      	ldr	r2, [r2, #0]
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d9e2      	bls.n	8003094 <Rafael_PanTompkins+0x7cc>

                    spk_i = 0.125*peak_i + 0.875*spk_i;
 80030ce:	4b70      	ldr	r3, [pc, #448]	; (8003290 <Rafael_PanTompkins+0x9c8>)
 80030d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fd f9fd 	bl	80004d4 <__aeabi_i2d>
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80030e2:	f7fd fa61 	bl	80005a8 <__aeabi_dmul>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4614      	mov	r4, r2
 80030ec:	461d      	mov	r5, r3
 80030ee:	4b69      	ldr	r3, [pc, #420]	; (8003294 <Rafael_PanTompkins+0x9cc>)
 80030f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7fd f9ed 	bl	80004d4 <__aeabi_i2d>
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	4b66      	ldr	r3, [pc, #408]	; (8003298 <Rafael_PanTompkins+0x9d0>)
 8003100:	f7fd fa52 	bl	80005a8 <__aeabi_dmul>
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	4620      	mov	r0, r4
 800310a:	4629      	mov	r1, r5
 800310c:	f7fd f896 	bl	800023c <__adddf3>
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	4610      	mov	r0, r2
 8003116:	4619      	mov	r1, r3
 8003118:	f7fd fcf6 	bl	8000b08 <__aeabi_d2iz>
 800311c:	4603      	mov	r3, r0
 800311e:	b21a      	sxth	r2, r3
 8003120:	4b5c      	ldr	r3, [pc, #368]	; (8003294 <Rafael_PanTompkins+0x9cc>)
 8003122:	801a      	strh	r2, [r3, #0]
                    threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8003124:	4b5d      	ldr	r3, [pc, #372]	; (800329c <Rafael_PanTompkins+0x9d4>)
 8003126:	f9b3 3000 	ldrsh.w	r3, [r3]
 800312a:	4618      	mov	r0, r3
 800312c:	f7fd f9d2 	bl	80004d4 <__aeabi_i2d>
 8003130:	4604      	mov	r4, r0
 8003132:	460d      	mov	r5, r1
 8003134:	4b57      	ldr	r3, [pc, #348]	; (8003294 <Rafael_PanTompkins+0x9cc>)
 8003136:	f9b3 3000 	ldrsh.w	r3, [r3]
 800313a:	461a      	mov	r2, r3
 800313c:	4b57      	ldr	r3, [pc, #348]	; (800329c <Rafael_PanTompkins+0x9d4>)
 800313e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	4618      	mov	r0, r3
 8003146:	f7fd f9c5 	bl	80004d4 <__aeabi_i2d>
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	4b54      	ldr	r3, [pc, #336]	; (80032a0 <Rafael_PanTompkins+0x9d8>)
 8003150:	f7fd fa2a 	bl	80005a8 <__aeabi_dmul>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4620      	mov	r0, r4
 800315a:	4629      	mov	r1, r5
 800315c:	f7fd f86e 	bl	800023c <__adddf3>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4610      	mov	r0, r2
 8003166:	4619      	mov	r1, r3
 8003168:	f7fd fcce 	bl	8000b08 <__aeabi_d2iz>
 800316c:	4603      	mov	r3, r0
 800316e:	b21a      	sxth	r2, r3
 8003170:	4b4c      	ldr	r3, [pc, #304]	; (80032a4 <Rafael_PanTompkins+0x9dc>)
 8003172:	801a      	strh	r2, [r3, #0]
                    threshold_i2 = 0.5*threshold_i1;
 8003174:	4b4b      	ldr	r3, [pc, #300]	; (80032a4 <Rafael_PanTompkins+0x9dc>)
 8003176:	f9b3 3000 	ldrsh.w	r3, [r3]
 800317a:	4618      	mov	r0, r3
 800317c:	f7fd f9aa 	bl	80004d4 <__aeabi_i2d>
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	4b48      	ldr	r3, [pc, #288]	; (80032a8 <Rafael_PanTompkins+0x9e0>)
 8003186:	f7fd fa0f 	bl	80005a8 <__aeabi_dmul>
 800318a:	4602      	mov	r2, r0
 800318c:	460b      	mov	r3, r1
 800318e:	4610      	mov	r0, r2
 8003190:	4619      	mov	r1, r3
 8003192:	f7fd fcb9 	bl	8000b08 <__aeabi_d2iz>
 8003196:	4603      	mov	r3, r0
 8003198:	b21a      	sxth	r2, r3
 800319a:	4b44      	ldr	r3, [pc, #272]	; (80032ac <Rafael_PanTompkins+0x9e4>)
 800319c:	801a      	strh	r2, [r3, #0]

                    spk_f = 0.125*peak_f + 0.875*spk_f;
 800319e:	4b44      	ldr	r3, [pc, #272]	; (80032b0 <Rafael_PanTompkins+0x9e8>)
 80031a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fd f995 	bl	80004d4 <__aeabi_i2d>
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80031b2:	f7fd f9f9 	bl	80005a8 <__aeabi_dmul>
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	4614      	mov	r4, r2
 80031bc:	461d      	mov	r5, r3
 80031be:	4b3d      	ldr	r3, [pc, #244]	; (80032b4 <Rafael_PanTompkins+0x9ec>)
 80031c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fd f985 	bl	80004d4 <__aeabi_i2d>
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	4b32      	ldr	r3, [pc, #200]	; (8003298 <Rafael_PanTompkins+0x9d0>)
 80031d0:	f7fd f9ea 	bl	80005a8 <__aeabi_dmul>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4620      	mov	r0, r4
 80031da:	4629      	mov	r1, r5
 80031dc:	f7fd f82e 	bl	800023c <__adddf3>
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	4610      	mov	r0, r2
 80031e6:	4619      	mov	r1, r3
 80031e8:	f7fd fc8e 	bl	8000b08 <__aeabi_d2iz>
 80031ec:	4603      	mov	r3, r0
 80031ee:	b21a      	sxth	r2, r3
 80031f0:	4b30      	ldr	r3, [pc, #192]	; (80032b4 <Rafael_PanTompkins+0x9ec>)
 80031f2:	801a      	strh	r2, [r3, #0]
                    threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 80031f4:	4b30      	ldr	r3, [pc, #192]	; (80032b8 <Rafael_PanTompkins+0x9f0>)
 80031f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fd f96a 	bl	80004d4 <__aeabi_i2d>
 8003200:	4604      	mov	r4, r0
 8003202:	460d      	mov	r5, r1
 8003204:	4b2b      	ldr	r3, [pc, #172]	; (80032b4 <Rafael_PanTompkins+0x9ec>)
 8003206:	f9b3 3000 	ldrsh.w	r3, [r3]
 800320a:	461a      	mov	r2, r3
 800320c:	4b2a      	ldr	r3, [pc, #168]	; (80032b8 <Rafael_PanTompkins+0x9f0>)
 800320e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	4618      	mov	r0, r3
 8003216:	f7fd f95d 	bl	80004d4 <__aeabi_i2d>
 800321a:	f04f 0200 	mov.w	r2, #0
 800321e:	4b20      	ldr	r3, [pc, #128]	; (80032a0 <Rafael_PanTompkins+0x9d8>)
 8003220:	f7fd f9c2 	bl	80005a8 <__aeabi_dmul>
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	4620      	mov	r0, r4
 800322a:	4629      	mov	r1, r5
 800322c:	f7fd f806 	bl	800023c <__adddf3>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4610      	mov	r0, r2
 8003236:	4619      	mov	r1, r3
 8003238:	f7fd fc66 	bl	8000b08 <__aeabi_d2iz>
 800323c:	4603      	mov	r3, r0
 800323e:	b21a      	sxth	r2, r3
 8003240:	4b1e      	ldr	r3, [pc, #120]	; (80032bc <Rafael_PanTompkins+0x9f4>)
 8003242:	801a      	strh	r2, [r3, #0]
                    threshold_f2 = 0.5*threshold_f1;
 8003244:	4b1d      	ldr	r3, [pc, #116]	; (80032bc <Rafael_PanTompkins+0x9f4>)
 8003246:	f9b3 3000 	ldrsh.w	r3, [r3]
 800324a:	4618      	mov	r0, r3
 800324c:	f7fd f942 	bl	80004d4 <__aeabi_i2d>
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	4b14      	ldr	r3, [pc, #80]	; (80032a8 <Rafael_PanTompkins+0x9e0>)
 8003256:	f7fd f9a7 	bl	80005a8 <__aeabi_dmul>
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	4610      	mov	r0, r2
 8003260:	4619      	mov	r1, r3
 8003262:	f7fd fc51 	bl	8000b08 <__aeabi_d2iz>
 8003266:	4603      	mov	r3, r0
 8003268:	b21a      	sxth	r2, r3
 800326a:	4b15      	ldr	r3, [pc, #84]	; (80032c0 <Rafael_PanTompkins+0x9f8>)
 800326c:	801a      	strh	r2, [r3, #0]

                    lastSlope = currentSlope;
 800326e:	4b06      	ldr	r3, [pc, #24]	; (8003288 <Rafael_PanTompkins+0x9c0>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a14      	ldr	r2, [pc, #80]	; (80032c4 <Rafael_PanTompkins+0x9fc>)
 8003274:	6013      	str	r3, [r2, #0]
                    qrs = true;
 8003276:	4b14      	ldr	r3, [pc, #80]	; (80032c8 <Rafael_PanTompkins+0xa00>)
 8003278:	2201      	movs	r2, #1
 800327a:	701a      	strb	r2, [r3, #0]
 800327c:	e10f      	b.n	800349e <Rafael_PanTompkins+0xbd6>
 800327e:	bf00      	nop
 8003280:	20002b74 	.word	0x20002b74
 8003284:	20001d0c 	.word	0x20001d0c
 8003288:	20002b84 	.word	0x20002b84
 800328c:	20002b88 	.word	0x20002b88
 8003290:	20002b8c 	.word	0x20002b8c
 8003294:	20002b98 	.word	0x20002b98
 8003298:	3fec0000 	.word	0x3fec0000
 800329c:	20002b9c 	.word	0x20002b9c
 80032a0:	3fd00000 	.word	0x3fd00000
 80032a4:	20002b90 	.word	0x20002b90
 80032a8:	3fe00000 	.word	0x3fe00000
 80032ac:	20002b92 	.word	0x20002b92
 80032b0:	20002b8e 	.word	0x20002b8e
 80032b4:	20002b9a 	.word	0x20002b9a
 80032b8:	20002b9e 	.word	0x20002b9e
 80032bc:	20002b94 	.word	0x20002b94
 80032c0:	20002b96 	.word	0x20002b96
 80032c4:	20002b80 	.word	0x20002b80
 80032c8:	20002ba0 	.word	0x20002ba0
				}
			}
			// If the new peak doesn't respect the 200ms latency, it's noise. Update thresholds and move on to the next sample.
			else
            {
                peak_i = RF_integral[current];
 80032cc:	4ba7      	ldr	r3, [pc, #668]	; (800356c <Rafael_PanTompkins+0xca4>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4aa7      	ldr	r2, [pc, #668]	; (8003570 <Rafael_PanTompkins+0xca8>)
 80032d2:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80032d6:	4ba7      	ldr	r3, [pc, #668]	; (8003574 <Rafael_PanTompkins+0xcac>)
 80032d8:	801a      	strh	r2, [r3, #0]
				npk_i = 0.125*peak_i + 0.875*npk_i;
 80032da:	4ba6      	ldr	r3, [pc, #664]	; (8003574 <Rafael_PanTompkins+0xcac>)
 80032dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fd f8f7 	bl	80004d4 <__aeabi_i2d>
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80032ee:	f7fd f95b 	bl	80005a8 <__aeabi_dmul>
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	4614      	mov	r4, r2
 80032f8:	461d      	mov	r5, r3
 80032fa:	4b9f      	ldr	r3, [pc, #636]	; (8003578 <Rafael_PanTompkins+0xcb0>)
 80032fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003300:	4618      	mov	r0, r3
 8003302:	f7fd f8e7 	bl	80004d4 <__aeabi_i2d>
 8003306:	f04f 0200 	mov.w	r2, #0
 800330a:	4b9c      	ldr	r3, [pc, #624]	; (800357c <Rafael_PanTompkins+0xcb4>)
 800330c:	f7fd f94c 	bl	80005a8 <__aeabi_dmul>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4620      	mov	r0, r4
 8003316:	4629      	mov	r1, r5
 8003318:	f7fc ff90 	bl	800023c <__adddf3>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4610      	mov	r0, r2
 8003322:	4619      	mov	r1, r3
 8003324:	f7fd fbf0 	bl	8000b08 <__aeabi_d2iz>
 8003328:	4603      	mov	r3, r0
 800332a:	b21a      	sxth	r2, r3
 800332c:	4b92      	ldr	r3, [pc, #584]	; (8003578 <Rafael_PanTompkins+0xcb0>)
 800332e:	801a      	strh	r2, [r3, #0]
				threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8003330:	4b91      	ldr	r3, [pc, #580]	; (8003578 <Rafael_PanTompkins+0xcb0>)
 8003332:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003336:	4618      	mov	r0, r3
 8003338:	f7fd f8cc 	bl	80004d4 <__aeabi_i2d>
 800333c:	4604      	mov	r4, r0
 800333e:	460d      	mov	r5, r1
 8003340:	4b8f      	ldr	r3, [pc, #572]	; (8003580 <Rafael_PanTompkins+0xcb8>)
 8003342:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003346:	461a      	mov	r2, r3
 8003348:	4b8b      	ldr	r3, [pc, #556]	; (8003578 <Rafael_PanTompkins+0xcb0>)
 800334a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	4618      	mov	r0, r3
 8003352:	f7fd f8bf 	bl	80004d4 <__aeabi_i2d>
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	4b8a      	ldr	r3, [pc, #552]	; (8003584 <Rafael_PanTompkins+0xcbc>)
 800335c:	f7fd f924 	bl	80005a8 <__aeabi_dmul>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4620      	mov	r0, r4
 8003366:	4629      	mov	r1, r5
 8003368:	f7fc ff68 	bl	800023c <__adddf3>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4610      	mov	r0, r2
 8003372:	4619      	mov	r1, r3
 8003374:	f7fd fbc8 	bl	8000b08 <__aeabi_d2iz>
 8003378:	4603      	mov	r3, r0
 800337a:	b21a      	sxth	r2, r3
 800337c:	4b82      	ldr	r3, [pc, #520]	; (8003588 <Rafael_PanTompkins+0xcc0>)
 800337e:	801a      	strh	r2, [r3, #0]
				threshold_i2 = 0.5*threshold_i1;
 8003380:	4b81      	ldr	r3, [pc, #516]	; (8003588 <Rafael_PanTompkins+0xcc0>)
 8003382:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fd f8a4 	bl	80004d4 <__aeabi_i2d>
 800338c:	f04f 0200 	mov.w	r2, #0
 8003390:	4b7e      	ldr	r3, [pc, #504]	; (800358c <Rafael_PanTompkins+0xcc4>)
 8003392:	f7fd f909 	bl	80005a8 <__aeabi_dmul>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	4610      	mov	r0, r2
 800339c:	4619      	mov	r1, r3
 800339e:	f7fd fbb3 	bl	8000b08 <__aeabi_d2iz>
 80033a2:	4603      	mov	r3, r0
 80033a4:	b21a      	sxth	r2, r3
 80033a6:	4b7a      	ldr	r3, [pc, #488]	; (8003590 <Rafael_PanTompkins+0xcc8>)
 80033a8:	801a      	strh	r2, [r3, #0]
				peak_f = RF_highpass[current];
 80033aa:	4b70      	ldr	r3, [pc, #448]	; (800356c <Rafael_PanTompkins+0xca4>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a79      	ldr	r2, [pc, #484]	; (8003594 <Rafael_PanTompkins+0xccc>)
 80033b0:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80033b4:	4b78      	ldr	r3, [pc, #480]	; (8003598 <Rafael_PanTompkins+0xcd0>)
 80033b6:	801a      	strh	r2, [r3, #0]
				npk_f = 0.125*peak_f + 0.875*npk_f;
 80033b8:	4b77      	ldr	r3, [pc, #476]	; (8003598 <Rafael_PanTompkins+0xcd0>)
 80033ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fd f888 	bl	80004d4 <__aeabi_i2d>
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80033cc:	f7fd f8ec 	bl	80005a8 <__aeabi_dmul>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4614      	mov	r4, r2
 80033d6:	461d      	mov	r5, r3
 80033d8:	4b70      	ldr	r3, [pc, #448]	; (800359c <Rafael_PanTompkins+0xcd4>)
 80033da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fd f878 	bl	80004d4 <__aeabi_i2d>
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	4b64      	ldr	r3, [pc, #400]	; (800357c <Rafael_PanTompkins+0xcb4>)
 80033ea:	f7fd f8dd 	bl	80005a8 <__aeabi_dmul>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	4620      	mov	r0, r4
 80033f4:	4629      	mov	r1, r5
 80033f6:	f7fc ff21 	bl	800023c <__adddf3>
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	4610      	mov	r0, r2
 8003400:	4619      	mov	r1, r3
 8003402:	f7fd fb81 	bl	8000b08 <__aeabi_d2iz>
 8003406:	4603      	mov	r3, r0
 8003408:	b21a      	sxth	r2, r3
 800340a:	4b64      	ldr	r3, [pc, #400]	; (800359c <Rafael_PanTompkins+0xcd4>)
 800340c:	801a      	strh	r2, [r3, #0]
				threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 800340e:	4b63      	ldr	r3, [pc, #396]	; (800359c <Rafael_PanTompkins+0xcd4>)
 8003410:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003414:	4618      	mov	r0, r3
 8003416:	f7fd f85d 	bl	80004d4 <__aeabi_i2d>
 800341a:	4604      	mov	r4, r0
 800341c:	460d      	mov	r5, r1
 800341e:	4b60      	ldr	r3, [pc, #384]	; (80035a0 <Rafael_PanTompkins+0xcd8>)
 8003420:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003424:	461a      	mov	r2, r3
 8003426:	4b5d      	ldr	r3, [pc, #372]	; (800359c <Rafael_PanTompkins+0xcd4>)
 8003428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	4618      	mov	r0, r3
 8003430:	f7fd f850 	bl	80004d4 <__aeabi_i2d>
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	4b52      	ldr	r3, [pc, #328]	; (8003584 <Rafael_PanTompkins+0xcbc>)
 800343a:	f7fd f8b5 	bl	80005a8 <__aeabi_dmul>
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	4620      	mov	r0, r4
 8003444:	4629      	mov	r1, r5
 8003446:	f7fc fef9 	bl	800023c <__adddf3>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4610      	mov	r0, r2
 8003450:	4619      	mov	r1, r3
 8003452:	f7fd fb59 	bl	8000b08 <__aeabi_d2iz>
 8003456:	4603      	mov	r3, r0
 8003458:	b21a      	sxth	r2, r3
 800345a:	4b52      	ldr	r3, [pc, #328]	; (80035a4 <Rafael_PanTompkins+0xcdc>)
 800345c:	801a      	strh	r2, [r3, #0]
                threshold_f2 = 0.5*threshold_f1;
 800345e:	4b51      	ldr	r3, [pc, #324]	; (80035a4 <Rafael_PanTompkins+0xcdc>)
 8003460:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003464:	4618      	mov	r0, r3
 8003466:	f7fd f835 	bl	80004d4 <__aeabi_i2d>
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	4b47      	ldr	r3, [pc, #284]	; (800358c <Rafael_PanTompkins+0xcc4>)
 8003470:	f7fd f89a 	bl	80005a8 <__aeabi_dmul>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4610      	mov	r0, r2
 800347a:	4619      	mov	r1, r3
 800347c:	f7fd fb44 	bl	8000b08 <__aeabi_d2iz>
 8003480:	4603      	mov	r3, r0
 8003482:	b21a      	sxth	r2, r3
 8003484:	4b48      	ldr	r3, [pc, #288]	; (80035a8 <Rafael_PanTompkins+0xce0>)
 8003486:	801a      	strh	r2, [r3, #0]
                qrs = false;
 8003488:	4b48      	ldr	r3, [pc, #288]	; (80035ac <Rafael_PanTompkins+0xce4>)
 800348a:	2200      	movs	r2, #0
 800348c:	701a      	strb	r2, [r3, #0]
                RF_outputSignal[current] = qrs;
 800348e:	4b47      	ldr	r3, [pc, #284]	; (80035ac <Rafael_PanTompkins+0xce4>)
 8003490:	781a      	ldrb	r2, [r3, #0]
 8003492:	4b36      	ldr	r3, [pc, #216]	; (800356c <Rafael_PanTompkins+0xca4>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	b211      	sxth	r1, r2
 8003498:	4a45      	ldr	r2, [pc, #276]	; (80035b0 <Rafael_PanTompkins+0xce8>)
 800349a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }

		}

		// If a R-peak was detected, the RR-averages must be updated.
		if (qrs)
 800349e:	4b43      	ldr	r3, [pc, #268]	; (80035ac <Rafael_PanTompkins+0xce4>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 8137 	beq.w	8003716 <Rafael_PanTompkins+0xe4e>
		{
			// Add the newest RR-interval to the buffer and get the new average.
			rravg1 = 0;
 80034a8:	4b42      	ldr	r3, [pc, #264]	; (80035b4 <Rafael_PanTompkins+0xcec>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]
			for (i = 0; i < 7; i++)
 80034ae:	4b42      	ldr	r3, [pc, #264]	; (80035b8 <Rafael_PanTompkins+0xcf0>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	e019      	b.n	80034ea <Rafael_PanTompkins+0xc22>
			{
				rr1[i] = rr1[i+1];
 80034b6:	4b40      	ldr	r3, [pc, #256]	; (80035b8 <Rafael_PanTompkins+0xcf0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	4b3e      	ldr	r3, [pc, #248]	; (80035b8 <Rafael_PanTompkins+0xcf0>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	493e      	ldr	r1, [pc, #248]	; (80035bc <Rafael_PanTompkins+0xcf4>)
 80034c2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80034c6:	493d      	ldr	r1, [pc, #244]	; (80035bc <Rafael_PanTompkins+0xcf4>)
 80034c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				rravg1 += rr1[i];
 80034cc:	4b3a      	ldr	r3, [pc, #232]	; (80035b8 <Rafael_PanTompkins+0xcf0>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a3a      	ldr	r2, [pc, #232]	; (80035bc <Rafael_PanTompkins+0xcf4>)
 80034d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80034d6:	4b37      	ldr	r3, [pc, #220]	; (80035b4 <Rafael_PanTompkins+0xcec>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4413      	add	r3, r2
 80034dc:	4a35      	ldr	r2, [pc, #212]	; (80035b4 <Rafael_PanTompkins+0xcec>)
 80034de:	6013      	str	r3, [r2, #0]
			for (i = 0; i < 7; i++)
 80034e0:	4b35      	ldr	r3, [pc, #212]	; (80035b8 <Rafael_PanTompkins+0xcf0>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	3301      	adds	r3, #1
 80034e6:	4a34      	ldr	r2, [pc, #208]	; (80035b8 <Rafael_PanTompkins+0xcf0>)
 80034e8:	6013      	str	r3, [r2, #0]
 80034ea:	4b33      	ldr	r3, [pc, #204]	; (80035b8 <Rafael_PanTompkins+0xcf0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b06      	cmp	r3, #6
 80034f0:	d9e1      	bls.n	80034b6 <Rafael_PanTompkins+0xbee>
			}
			rr1[7] = sample - lastQRS;
 80034f2:	4b33      	ldr	r3, [pc, #204]	; (80035c0 <Rafael_PanTompkins+0xcf8>)
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	4b33      	ldr	r3, [pc, #204]	; (80035c4 <Rafael_PanTompkins+0xcfc>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	461a      	mov	r2, r3
 80034fe:	4b2f      	ldr	r3, [pc, #188]	; (80035bc <Rafael_PanTompkins+0xcf4>)
 8003500:	61da      	str	r2, [r3, #28]
			lastQRS = sample;
 8003502:	4b2f      	ldr	r3, [pc, #188]	; (80035c0 <Rafael_PanTompkins+0xcf8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a2f      	ldr	r2, [pc, #188]	; (80035c4 <Rafael_PanTompkins+0xcfc>)
 8003508:	6013      	str	r3, [r2, #0]
			rravg1 += rr1[7];
 800350a:	4b2c      	ldr	r3, [pc, #176]	; (80035bc <Rafael_PanTompkins+0xcf4>)
 800350c:	69da      	ldr	r2, [r3, #28]
 800350e:	4b29      	ldr	r3, [pc, #164]	; (80035b4 <Rafael_PanTompkins+0xcec>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4413      	add	r3, r2
 8003514:	4a27      	ldr	r2, [pc, #156]	; (80035b4 <Rafael_PanTompkins+0xcec>)
 8003516:	6013      	str	r3, [r2, #0]
			rravg1 *= 0.125;
 8003518:	4b26      	ldr	r3, [pc, #152]	; (80035b4 <Rafael_PanTompkins+0xcec>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f7fc ffd9 	bl	80004d4 <__aeabi_i2d>
 8003522:	f04f 0200 	mov.w	r2, #0
 8003526:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800352a:	f7fd f83d 	bl	80005a8 <__aeabi_dmul>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4610      	mov	r0, r2
 8003534:	4619      	mov	r1, r3
 8003536:	f7fd fae7 	bl	8000b08 <__aeabi_d2iz>
 800353a:	4603      	mov	r3, r0
 800353c:	4a1d      	ldr	r2, [pc, #116]	; (80035b4 <Rafael_PanTompkins+0xcec>)
 800353e:	6013      	str	r3, [r2, #0]

			// If the newly-discovered RR-average is normal, add it to the "normal" buffer and get the new "normal" average.
			// Update the "normal" beat parameters.
			if ( (rr1[7] >= rrlow) && (rr1[7] <= rrhigh) )
 8003540:	4b1e      	ldr	r3, [pc, #120]	; (80035bc <Rafael_PanTompkins+0xcf4>)
 8003542:	69da      	ldr	r2, [r3, #28]
 8003544:	4b20      	ldr	r3, [pc, #128]	; (80035c8 <Rafael_PanTompkins+0xd00>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	429a      	cmp	r2, r3
 800354a:	f2c0 80b9 	blt.w	80036c0 <Rafael_PanTompkins+0xdf8>
 800354e:	4b1b      	ldr	r3, [pc, #108]	; (80035bc <Rafael_PanTompkins+0xcf4>)
 8003550:	69da      	ldr	r2, [r3, #28]
 8003552:	4b1e      	ldr	r3, [pc, #120]	; (80035cc <Rafael_PanTompkins+0xd04>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	f300 80b2 	bgt.w	80036c0 <Rafael_PanTompkins+0xdf8>
			{
				rravg2 = 0;
 800355c:	4b1c      	ldr	r3, [pc, #112]	; (80035d0 <Rafael_PanTompkins+0xd08>)
 800355e:	2200      	movs	r2, #0
 8003560:	601a      	str	r2, [r3, #0]
				for (i = 0; i < 7; i++)
 8003562:	4b15      	ldr	r3, [pc, #84]	; (80035b8 <Rafael_PanTompkins+0xcf0>)
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	e04e      	b.n	8003608 <Rafael_PanTompkins+0xd40>
 800356a:	bf00      	nop
 800356c:	20002b88 	.word	0x20002b88
 8003570:	200021bc 	.word	0x200021bc
 8003574:	20002b8c 	.word	0x20002b8c
 8003578:	20002b9c 	.word	0x20002b9c
 800357c:	3fec0000 	.word	0x3fec0000
 8003580:	20002b98 	.word	0x20002b98
 8003584:	3fd00000 	.word	0x3fd00000
 8003588:	20002b90 	.word	0x20002b90
 800358c:	3fe00000 	.word	0x3fe00000
 8003590:	20002b92 	.word	0x20002b92
 8003594:	200013ac 	.word	0x200013ac
 8003598:	20002b8e 	.word	0x20002b8e
 800359c:	20002b9e 	.word	0x20002b9e
 80035a0:	20002b9a 	.word	0x20002b9a
 80035a4:	20002b94 	.word	0x20002b94
 80035a8:	20002b96 	.word	0x20002b96
 80035ac:	20002ba0 	.word	0x20002ba0
 80035b0:	2000266c 	.word	0x2000266c
 80035b4:	20002b5c 	.word	0x20002b5c
 80035b8:	20002b70 	.word	0x20002b70
 80035bc:	20002b1c 	.word	0x20002b1c
 80035c0:	20002b78 	.word	0x20002b78
 80035c4:	20002b7c 	.word	0x20002b7c
 80035c8:	20002b64 	.word	0x20002b64
 80035cc:	20002b68 	.word	0x20002b68
 80035d0:	20002b60 	.word	0x20002b60
				{
					rr2[i] = rr2[i+1];
 80035d4:	4ba2      	ldr	r3, [pc, #648]	; (8003860 <Rafael_PanTompkins+0xf98>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	4ba1      	ldr	r3, [pc, #644]	; (8003860 <Rafael_PanTompkins+0xf98>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	49a1      	ldr	r1, [pc, #644]	; (8003864 <Rafael_PanTompkins+0xf9c>)
 80035e0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80035e4:	499f      	ldr	r1, [pc, #636]	; (8003864 <Rafael_PanTompkins+0xf9c>)
 80035e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					rravg2 += rr2[i];
 80035ea:	4b9d      	ldr	r3, [pc, #628]	; (8003860 <Rafael_PanTompkins+0xf98>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a9d      	ldr	r2, [pc, #628]	; (8003864 <Rafael_PanTompkins+0xf9c>)
 80035f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80035f4:	4b9c      	ldr	r3, [pc, #624]	; (8003868 <Rafael_PanTompkins+0xfa0>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4413      	add	r3, r2
 80035fa:	4a9b      	ldr	r2, [pc, #620]	; (8003868 <Rafael_PanTompkins+0xfa0>)
 80035fc:	6013      	str	r3, [r2, #0]
				for (i = 0; i < 7; i++)
 80035fe:	4b98      	ldr	r3, [pc, #608]	; (8003860 <Rafael_PanTompkins+0xf98>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	3301      	adds	r3, #1
 8003604:	4a96      	ldr	r2, [pc, #600]	; (8003860 <Rafael_PanTompkins+0xf98>)
 8003606:	6013      	str	r3, [r2, #0]
 8003608:	4b95      	ldr	r3, [pc, #596]	; (8003860 <Rafael_PanTompkins+0xf98>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b06      	cmp	r3, #6
 800360e:	d9e1      	bls.n	80035d4 <Rafael_PanTompkins+0xd0c>
				}
				rr2[7] = rr1[7];
 8003610:	4b96      	ldr	r3, [pc, #600]	; (800386c <Rafael_PanTompkins+0xfa4>)
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	4a93      	ldr	r2, [pc, #588]	; (8003864 <Rafael_PanTompkins+0xf9c>)
 8003616:	61d3      	str	r3, [r2, #28]
				rravg2 += rr2[7];
 8003618:	4b92      	ldr	r3, [pc, #584]	; (8003864 <Rafael_PanTompkins+0xf9c>)
 800361a:	69da      	ldr	r2, [r3, #28]
 800361c:	4b92      	ldr	r3, [pc, #584]	; (8003868 <Rafael_PanTompkins+0xfa0>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4413      	add	r3, r2
 8003622:	4a91      	ldr	r2, [pc, #580]	; (8003868 <Rafael_PanTompkins+0xfa0>)
 8003624:	6013      	str	r3, [r2, #0]
				rravg2 *= 0.125;
 8003626:	4b90      	ldr	r3, [pc, #576]	; (8003868 <Rafael_PanTompkins+0xfa0>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f7fc ff52 	bl	80004d4 <__aeabi_i2d>
 8003630:	f04f 0200 	mov.w	r2, #0
 8003634:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003638:	f7fc ffb6 	bl	80005a8 <__aeabi_dmul>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4610      	mov	r0, r2
 8003642:	4619      	mov	r1, r3
 8003644:	f7fd fa60 	bl	8000b08 <__aeabi_d2iz>
 8003648:	4603      	mov	r3, r0
 800364a:	4a87      	ldr	r2, [pc, #540]	; (8003868 <Rafael_PanTompkins+0xfa0>)
 800364c:	6013      	str	r3, [r2, #0]
				rrlow = 0.92*rravg2;
 800364e:	4b86      	ldr	r3, [pc, #536]	; (8003868 <Rafael_PanTompkins+0xfa0>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f7fc ff3e 	bl	80004d4 <__aeabi_i2d>
 8003658:	a379      	add	r3, pc, #484	; (adr r3, 8003840 <Rafael_PanTompkins+0xf78>)
 800365a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365e:	f7fc ffa3 	bl	80005a8 <__aeabi_dmul>
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	4610      	mov	r0, r2
 8003668:	4619      	mov	r1, r3
 800366a:	f7fd fa4d 	bl	8000b08 <__aeabi_d2iz>
 800366e:	4603      	mov	r3, r0
 8003670:	4a7f      	ldr	r2, [pc, #508]	; (8003870 <Rafael_PanTompkins+0xfa8>)
 8003672:	6013      	str	r3, [r2, #0]
				rrhigh = 1.16*rravg2;
 8003674:	4b7c      	ldr	r3, [pc, #496]	; (8003868 <Rafael_PanTompkins+0xfa0>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f7fc ff2b 	bl	80004d4 <__aeabi_i2d>
 800367e:	a372      	add	r3, pc, #456	; (adr r3, 8003848 <Rafael_PanTompkins+0xf80>)
 8003680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003684:	f7fc ff90 	bl	80005a8 <__aeabi_dmul>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4610      	mov	r0, r2
 800368e:	4619      	mov	r1, r3
 8003690:	f7fd fa3a 	bl	8000b08 <__aeabi_d2iz>
 8003694:	4603      	mov	r3, r0
 8003696:	4a77      	ldr	r2, [pc, #476]	; (8003874 <Rafael_PanTompkins+0xfac>)
 8003698:	6013      	str	r3, [r2, #0]
				rrmiss = 1.66*rravg2;
 800369a:	4b73      	ldr	r3, [pc, #460]	; (8003868 <Rafael_PanTompkins+0xfa0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fc ff18 	bl	80004d4 <__aeabi_i2d>
 80036a4:	a36a      	add	r3, pc, #424	; (adr r3, 8003850 <Rafael_PanTompkins+0xf88>)
 80036a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036aa:	f7fc ff7d 	bl	80005a8 <__aeabi_dmul>
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
 80036b2:	4610      	mov	r0, r2
 80036b4:	4619      	mov	r1, r3
 80036b6:	f7fd fa27 	bl	8000b08 <__aeabi_d2iz>
 80036ba:	4603      	mov	r3, r0
 80036bc:	4a6e      	ldr	r2, [pc, #440]	; (8003878 <Rafael_PanTompkins+0xfb0>)
 80036be:	6013      	str	r3, [r2, #0]
			}

			prevRegular = regular;
 80036c0:	4b6e      	ldr	r3, [pc, #440]	; (800387c <Rafael_PanTompkins+0xfb4>)
 80036c2:	781a      	ldrb	r2, [r3, #0]
 80036c4:	4b6e      	ldr	r3, [pc, #440]	; (8003880 <Rafael_PanTompkins+0xfb8>)
 80036c6:	701a      	strb	r2, [r3, #0]
			if (rravg1 == rravg2)
 80036c8:	4b6e      	ldr	r3, [pc, #440]	; (8003884 <Rafael_PanTompkins+0xfbc>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	4b66      	ldr	r3, [pc, #408]	; (8003868 <Rafael_PanTompkins+0xfa0>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d104      	bne.n	80036de <Rafael_PanTompkins+0xe16>
			{
				regular = true;
 80036d4:	4b69      	ldr	r3, [pc, #420]	; (800387c <Rafael_PanTompkins+0xfb4>)
 80036d6:	2201      	movs	r2, #1
 80036d8:	701a      	strb	r2, [r3, #0]
 80036da:	f000 bc5d 	b.w	8003f98 <Rafael_PanTompkins+0x16d0>
			}
			// If the beat had been normal but turned odd, change the thresholds.
			else
			{
				regular = false;
 80036de:	4b67      	ldr	r3, [pc, #412]	; (800387c <Rafael_PanTompkins+0xfb4>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	701a      	strb	r2, [r3, #0]
				if (prevRegular)
 80036e4:	4b66      	ldr	r3, [pc, #408]	; (8003880 <Rafael_PanTompkins+0xfb8>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 8455 	beq.w	8003f98 <Rafael_PanTompkins+0x16d0>
				{
					threshold_i1 /= 2;
 80036ee:	4b66      	ldr	r3, [pc, #408]	; (8003888 <Rafael_PanTompkins+0xfc0>)
 80036f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036f4:	0fda      	lsrs	r2, r3, #31
 80036f6:	4413      	add	r3, r2
 80036f8:	105b      	asrs	r3, r3, #1
 80036fa:	b21a      	sxth	r2, r3
 80036fc:	4b62      	ldr	r3, [pc, #392]	; (8003888 <Rafael_PanTompkins+0xfc0>)
 80036fe:	801a      	strh	r2, [r3, #0]
					threshold_f1 /= 2;
 8003700:	4b62      	ldr	r3, [pc, #392]	; (800388c <Rafael_PanTompkins+0xfc4>)
 8003702:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003706:	0fda      	lsrs	r2, r3, #31
 8003708:	4413      	add	r3, r2
 800370a:	105b      	asrs	r3, r3, #1
 800370c:	b21a      	sxth	r2, r3
 800370e:	4b5f      	ldr	r3, [pc, #380]	; (800388c <Rafael_PanTompkins+0xfc4>)
 8003710:	801a      	strh	r2, [r3, #0]
 8003712:	f000 bc41 	b.w	8003f98 <Rafael_PanTompkins+0x16d0>
		// If no R-peak was detected, it's important to check how long it's been since the last detection.
		else
		{
		    // If no R-peak was detected for too long, use the lighter thresholds and do a back search.
			// However, the back search must respect the 200ms limit and the 360ms one (check the slope).
			if ((sample - lastQRS > (long unsigned int)rrmiss) && (sample > lastQRS + FS/5))
 8003716:	4b5e      	ldr	r3, [pc, #376]	; (8003890 <Rafael_PanTompkins+0xfc8>)
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	4b5e      	ldr	r3, [pc, #376]	; (8003894 <Rafael_PanTompkins+0xfcc>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	4a55      	ldr	r2, [pc, #340]	; (8003878 <Rafael_PanTompkins+0xfb0>)
 8003722:	6812      	ldr	r2, [r2, #0]
 8003724:	4293      	cmp	r3, r2
 8003726:	f240 833f 	bls.w	8003da8 <Rafael_PanTompkins+0x14e0>
 800372a:	4b5a      	ldr	r3, [pc, #360]	; (8003894 <Rafael_PanTompkins+0xfcc>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003732:	4b57      	ldr	r3, [pc, #348]	; (8003890 <Rafael_PanTompkins+0xfc8>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	429a      	cmp	r2, r3
 8003738:	f080 8336 	bcs.w	8003da8 <Rafael_PanTompkins+0x14e0>
			{
				for (i = current - (sample - lastQRS) + FS/5; i < (long unsigned int)current; i++)
 800373c:	4b55      	ldr	r3, [pc, #340]	; (8003894 <Rafael_PanTompkins+0xfcc>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	4b53      	ldr	r3, [pc, #332]	; (8003890 <Rafael_PanTompkins+0xfc8>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	4a54      	ldr	r2, [pc, #336]	; (8003898 <Rafael_PanTompkins+0xfd0>)
 8003748:	6812      	ldr	r2, [r2, #0]
 800374a:	4413      	add	r3, r2
 800374c:	3348      	adds	r3, #72	; 0x48
 800374e:	4a44      	ldr	r2, [pc, #272]	; (8003860 <Rafael_PanTompkins+0xf98>)
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	e2e0      	b.n	8003d16 <Rafael_PanTompkins+0x144e>
				{
					if ( (RF_integral[i] > threshold_i2) && (RF_highpass[i] > threshold_f2))
 8003754:	4b42      	ldr	r3, [pc, #264]	; (8003860 <Rafael_PanTompkins+0xf98>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a50      	ldr	r2, [pc, #320]	; (800389c <Rafael_PanTompkins+0xfd4>)
 800375a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800375e:	4b50      	ldr	r3, [pc, #320]	; (80038a0 <Rafael_PanTompkins+0xfd8>)
 8003760:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003764:	429a      	cmp	r2, r3
 8003766:	f340 82d1 	ble.w	8003d0c <Rafael_PanTompkins+0x1444>
 800376a:	4b3d      	ldr	r3, [pc, #244]	; (8003860 <Rafael_PanTompkins+0xf98>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a4d      	ldr	r2, [pc, #308]	; (80038a4 <Rafael_PanTompkins+0xfdc>)
 8003770:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8003774:	4b4c      	ldr	r3, [pc, #304]	; (80038a8 <Rafael_PanTompkins+0xfe0>)
 8003776:	f9b3 3000 	ldrsh.w	r3, [r3]
 800377a:	429a      	cmp	r2, r3
 800377c:	f340 82c6 	ble.w	8003d0c <Rafael_PanTompkins+0x1444>
					{
					    currentSlope = 0;
 8003780:	4b4a      	ldr	r3, [pc, #296]	; (80038ac <Rafael_PanTompkins+0xfe4>)
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
                        for (j = i - 10; j <= i; j++)
 8003786:	4b36      	ldr	r3, [pc, #216]	; (8003860 <Rafael_PanTompkins+0xf98>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	3b0a      	subs	r3, #10
 800378c:	4a48      	ldr	r2, [pc, #288]	; (80038b0 <Rafael_PanTompkins+0xfe8>)
 800378e:	6013      	str	r3, [r2, #0]
 8003790:	e016      	b.n	80037c0 <Rafael_PanTompkins+0xef8>
                            if (RF_squared[j] > currentSlope)
 8003792:	4b47      	ldr	r3, [pc, #284]	; (80038b0 <Rafael_PanTompkins+0xfe8>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a47      	ldr	r2, [pc, #284]	; (80038b4 <Rafael_PanTompkins+0xfec>)
 8003798:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800379c:	461a      	mov	r2, r3
 800379e:	4b43      	ldr	r3, [pc, #268]	; (80038ac <Rafael_PanTompkins+0xfe4>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d907      	bls.n	80037b6 <Rafael_PanTompkins+0xeee>
                                currentSlope = RF_squared[j];
 80037a6:	4b42      	ldr	r3, [pc, #264]	; (80038b0 <Rafael_PanTompkins+0xfe8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a42      	ldr	r2, [pc, #264]	; (80038b4 <Rafael_PanTompkins+0xfec>)
 80037ac:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80037b0:	461a      	mov	r2, r3
 80037b2:	4b3e      	ldr	r3, [pc, #248]	; (80038ac <Rafael_PanTompkins+0xfe4>)
 80037b4:	601a      	str	r2, [r3, #0]
                        for (j = i - 10; j <= i; j++)
 80037b6:	4b3e      	ldr	r3, [pc, #248]	; (80038b0 <Rafael_PanTompkins+0xfe8>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	3301      	adds	r3, #1
 80037bc:	4a3c      	ldr	r2, [pc, #240]	; (80038b0 <Rafael_PanTompkins+0xfe8>)
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	4b3b      	ldr	r3, [pc, #236]	; (80038b0 <Rafael_PanTompkins+0xfe8>)
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	4b26      	ldr	r3, [pc, #152]	; (8003860 <Rafael_PanTompkins+0xf98>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d9e2      	bls.n	8003792 <Rafael_PanTompkins+0xeca>

                        if ((currentSlope < (dataType)(lastSlope/2)) && (i + sample) < lastQRS + 0.36*lastQRS)
 80037cc:	4b3a      	ldr	r3, [pc, #232]	; (80038b8 <Rafael_PanTompkins+0xff0>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	085b      	lsrs	r3, r3, #1
 80037d2:	b21b      	sxth	r3, r3
 80037d4:	461a      	mov	r2, r3
 80037d6:	4b35      	ldr	r3, [pc, #212]	; (80038ac <Rafael_PanTompkins+0xfe4>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d970      	bls.n	80038c0 <Rafael_PanTompkins+0xff8>
 80037de:	4b20      	ldr	r3, [pc, #128]	; (8003860 <Rafael_PanTompkins+0xf98>)
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	4b2b      	ldr	r3, [pc, #172]	; (8003890 <Rafael_PanTompkins+0xfc8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4413      	add	r3, r2
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fc fe63 	bl	80004b4 <__aeabi_ui2d>
 80037ee:	4604      	mov	r4, r0
 80037f0:	460d      	mov	r5, r1
 80037f2:	4b28      	ldr	r3, [pc, #160]	; (8003894 <Rafael_PanTompkins+0xfcc>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fc fe5c 	bl	80004b4 <__aeabi_ui2d>
 80037fc:	4680      	mov	r8, r0
 80037fe:	4689      	mov	r9, r1
 8003800:	4b24      	ldr	r3, [pc, #144]	; (8003894 <Rafael_PanTompkins+0xfcc>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f7fc fe55 	bl	80004b4 <__aeabi_ui2d>
 800380a:	a313      	add	r3, pc, #76	; (adr r3, 8003858 <Rafael_PanTompkins+0xf90>)
 800380c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003810:	f7fc feca 	bl	80005a8 <__aeabi_dmul>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4640      	mov	r0, r8
 800381a:	4649      	mov	r1, r9
 800381c:	f7fc fd0e 	bl	800023c <__adddf3>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4620      	mov	r0, r4
 8003826:	4629      	mov	r1, r5
 8003828:	f7fd f930 	bl	8000a8c <__aeabi_dcmplt>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d046      	beq.n	80038c0 <Rafael_PanTompkins+0xff8>
                        {
                            qrs = false;
 8003832:	4b22      	ldr	r3, [pc, #136]	; (80038bc <Rafael_PanTompkins+0xff4>)
 8003834:	2200      	movs	r2, #0
 8003836:	701a      	strb	r2, [r3, #0]
 8003838:	e268      	b.n	8003d0c <Rafael_PanTompkins+0x1444>
 800383a:	bf00      	nop
 800383c:	f3af 8000 	nop.w
 8003840:	d70a3d71 	.word	0xd70a3d71
 8003844:	3fed70a3 	.word	0x3fed70a3
 8003848:	28f5c28f 	.word	0x28f5c28f
 800384c:	3ff28f5c 	.word	0x3ff28f5c
 8003850:	28f5c28f 	.word	0x28f5c28f
 8003854:	3ffa8f5c 	.word	0x3ffa8f5c
 8003858:	70a3d70a 	.word	0x70a3d70a
 800385c:	3fd70a3d 	.word	0x3fd70a3d
 8003860:	20002b70 	.word	0x20002b70
 8003864:	20002b3c 	.word	0x20002b3c
 8003868:	20002b60 	.word	0x20002b60
 800386c:	20002b1c 	.word	0x20002b1c
 8003870:	20002b64 	.word	0x20002b64
 8003874:	20002b68 	.word	0x20002b68
 8003878:	20002b6c 	.word	0x20002b6c
 800387c:	20000004 	.word	0x20000004
 8003880:	20002ba1 	.word	0x20002ba1
 8003884:	20002b5c 	.word	0x20002b5c
 8003888:	20002b90 	.word	0x20002b90
 800388c:	20002b94 	.word	0x20002b94
 8003890:	20002b78 	.word	0x20002b78
 8003894:	20002b7c 	.word	0x20002b7c
 8003898:	20002b88 	.word	0x20002b88
 800389c:	200021bc 	.word	0x200021bc
 80038a0:	20002b92 	.word	0x20002b92
 80038a4:	200013ac 	.word	0x200013ac
 80038a8:	20002b96 	.word	0x20002b96
 80038ac:	20002b84 	.word	0x20002b84
 80038b0:	20002b74 	.word	0x20002b74
 80038b4:	20001d0c 	.word	0x20001d0c
 80038b8:	20002b80 	.word	0x20002b80
 80038bc:	20002ba0 	.word	0x20002ba0
                        }
                        else
                        {
                            peak_i = RF_integral[i];
 80038c0:	4ba7      	ldr	r3, [pc, #668]	; (8003b60 <Rafael_PanTompkins+0x1298>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4aa7      	ldr	r2, [pc, #668]	; (8003b64 <Rafael_PanTompkins+0x129c>)
 80038c6:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80038ca:	4ba7      	ldr	r3, [pc, #668]	; (8003b68 <Rafael_PanTompkins+0x12a0>)
 80038cc:	801a      	strh	r2, [r3, #0]
                            peak_f = RF_highpass[i];
 80038ce:	4ba4      	ldr	r3, [pc, #656]	; (8003b60 <Rafael_PanTompkins+0x1298>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4aa6      	ldr	r2, [pc, #664]	; (8003b6c <Rafael_PanTompkins+0x12a4>)
 80038d4:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80038d8:	4ba5      	ldr	r3, [pc, #660]	; (8003b70 <Rafael_PanTompkins+0x12a8>)
 80038da:	801a      	strh	r2, [r3, #0]
                            spk_i = 0.25*peak_i+ 0.75*spk_i;
 80038dc:	4ba2      	ldr	r3, [pc, #648]	; (8003b68 <Rafael_PanTompkins+0x12a0>)
 80038de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fc fdf6 	bl	80004d4 <__aeabi_i2d>
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	4ba1      	ldr	r3, [pc, #644]	; (8003b74 <Rafael_PanTompkins+0x12ac>)
 80038ee:	f7fc fe5b 	bl	80005a8 <__aeabi_dmul>
 80038f2:	4602      	mov	r2, r0
 80038f4:	460b      	mov	r3, r1
 80038f6:	4614      	mov	r4, r2
 80038f8:	461d      	mov	r5, r3
 80038fa:	4b9f      	ldr	r3, [pc, #636]	; (8003b78 <Rafael_PanTompkins+0x12b0>)
 80038fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003900:	4618      	mov	r0, r3
 8003902:	f7fc fde7 	bl	80004d4 <__aeabi_i2d>
 8003906:	f04f 0200 	mov.w	r2, #0
 800390a:	4b9c      	ldr	r3, [pc, #624]	; (8003b7c <Rafael_PanTompkins+0x12b4>)
 800390c:	f7fc fe4c 	bl	80005a8 <__aeabi_dmul>
 8003910:	4602      	mov	r2, r0
 8003912:	460b      	mov	r3, r1
 8003914:	4620      	mov	r0, r4
 8003916:	4629      	mov	r1, r5
 8003918:	f7fc fc90 	bl	800023c <__adddf3>
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	4610      	mov	r0, r2
 8003922:	4619      	mov	r1, r3
 8003924:	f7fd f8f0 	bl	8000b08 <__aeabi_d2iz>
 8003928:	4603      	mov	r3, r0
 800392a:	b21a      	sxth	r2, r3
 800392c:	4b92      	ldr	r3, [pc, #584]	; (8003b78 <Rafael_PanTompkins+0x12b0>)
 800392e:	801a      	strh	r2, [r3, #0]
                            spk_f = 0.25*peak_f + 0.75*spk_f;
 8003930:	4b8f      	ldr	r3, [pc, #572]	; (8003b70 <Rafael_PanTompkins+0x12a8>)
 8003932:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003936:	4618      	mov	r0, r3
 8003938:	f7fc fdcc 	bl	80004d4 <__aeabi_i2d>
 800393c:	f04f 0200 	mov.w	r2, #0
 8003940:	4b8c      	ldr	r3, [pc, #560]	; (8003b74 <Rafael_PanTompkins+0x12ac>)
 8003942:	f7fc fe31 	bl	80005a8 <__aeabi_dmul>
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	4614      	mov	r4, r2
 800394c:	461d      	mov	r5, r3
 800394e:	4b8c      	ldr	r3, [pc, #560]	; (8003b80 <Rafael_PanTompkins+0x12b8>)
 8003950:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003954:	4618      	mov	r0, r3
 8003956:	f7fc fdbd 	bl	80004d4 <__aeabi_i2d>
 800395a:	f04f 0200 	mov.w	r2, #0
 800395e:	4b87      	ldr	r3, [pc, #540]	; (8003b7c <Rafael_PanTompkins+0x12b4>)
 8003960:	f7fc fe22 	bl	80005a8 <__aeabi_dmul>
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	4620      	mov	r0, r4
 800396a:	4629      	mov	r1, r5
 800396c:	f7fc fc66 	bl	800023c <__adddf3>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	4610      	mov	r0, r2
 8003976:	4619      	mov	r1, r3
 8003978:	f7fd f8c6 	bl	8000b08 <__aeabi_d2iz>
 800397c:	4603      	mov	r3, r0
 800397e:	b21a      	sxth	r2, r3
 8003980:	4b7f      	ldr	r3, [pc, #508]	; (8003b80 <Rafael_PanTompkins+0x12b8>)
 8003982:	801a      	strh	r2, [r3, #0]
                            threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8003984:	4b7f      	ldr	r3, [pc, #508]	; (8003b84 <Rafael_PanTompkins+0x12bc>)
 8003986:	f9b3 3000 	ldrsh.w	r3, [r3]
 800398a:	4618      	mov	r0, r3
 800398c:	f7fc fda2 	bl	80004d4 <__aeabi_i2d>
 8003990:	4604      	mov	r4, r0
 8003992:	460d      	mov	r5, r1
 8003994:	4b78      	ldr	r3, [pc, #480]	; (8003b78 <Rafael_PanTompkins+0x12b0>)
 8003996:	f9b3 3000 	ldrsh.w	r3, [r3]
 800399a:	461a      	mov	r2, r3
 800399c:	4b79      	ldr	r3, [pc, #484]	; (8003b84 <Rafael_PanTompkins+0x12bc>)
 800399e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fc fd95 	bl	80004d4 <__aeabi_i2d>
 80039aa:	f04f 0200 	mov.w	r2, #0
 80039ae:	4b71      	ldr	r3, [pc, #452]	; (8003b74 <Rafael_PanTompkins+0x12ac>)
 80039b0:	f7fc fdfa 	bl	80005a8 <__aeabi_dmul>
 80039b4:	4602      	mov	r2, r0
 80039b6:	460b      	mov	r3, r1
 80039b8:	4620      	mov	r0, r4
 80039ba:	4629      	mov	r1, r5
 80039bc:	f7fc fc3e 	bl	800023c <__adddf3>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4610      	mov	r0, r2
 80039c6:	4619      	mov	r1, r3
 80039c8:	f7fd f89e 	bl	8000b08 <__aeabi_d2iz>
 80039cc:	4603      	mov	r3, r0
 80039ce:	b21a      	sxth	r2, r3
 80039d0:	4b6d      	ldr	r3, [pc, #436]	; (8003b88 <Rafael_PanTompkins+0x12c0>)
 80039d2:	801a      	strh	r2, [r3, #0]
                            threshold_i2 = 0.5*threshold_i1;
 80039d4:	4b6c      	ldr	r3, [pc, #432]	; (8003b88 <Rafael_PanTompkins+0x12c0>)
 80039d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fc fd7a 	bl	80004d4 <__aeabi_i2d>
 80039e0:	f04f 0200 	mov.w	r2, #0
 80039e4:	4b69      	ldr	r3, [pc, #420]	; (8003b8c <Rafael_PanTompkins+0x12c4>)
 80039e6:	f7fc fddf 	bl	80005a8 <__aeabi_dmul>
 80039ea:	4602      	mov	r2, r0
 80039ec:	460b      	mov	r3, r1
 80039ee:	4610      	mov	r0, r2
 80039f0:	4619      	mov	r1, r3
 80039f2:	f7fd f889 	bl	8000b08 <__aeabi_d2iz>
 80039f6:	4603      	mov	r3, r0
 80039f8:	b21a      	sxth	r2, r3
 80039fa:	4b65      	ldr	r3, [pc, #404]	; (8003b90 <Rafael_PanTompkins+0x12c8>)
 80039fc:	801a      	strh	r2, [r3, #0]
                            lastSlope = currentSlope;
 80039fe:	4b65      	ldr	r3, [pc, #404]	; (8003b94 <Rafael_PanTompkins+0x12cc>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a65      	ldr	r2, [pc, #404]	; (8003b98 <Rafael_PanTompkins+0x12d0>)
 8003a04:	6013      	str	r3, [r2, #0]
                            threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 8003a06:	4b65      	ldr	r3, [pc, #404]	; (8003b9c <Rafael_PanTompkins+0x12d4>)
 8003a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fc fd61 	bl	80004d4 <__aeabi_i2d>
 8003a12:	4604      	mov	r4, r0
 8003a14:	460d      	mov	r5, r1
 8003a16:	4b5a      	ldr	r3, [pc, #360]	; (8003b80 <Rafael_PanTompkins+0x12b8>)
 8003a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	4b5f      	ldr	r3, [pc, #380]	; (8003b9c <Rafael_PanTompkins+0x12d4>)
 8003a20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fc fd54 	bl	80004d4 <__aeabi_i2d>
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	4b50      	ldr	r3, [pc, #320]	; (8003b74 <Rafael_PanTompkins+0x12ac>)
 8003a32:	f7fc fdb9 	bl	80005a8 <__aeabi_dmul>
 8003a36:	4602      	mov	r2, r0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4620      	mov	r0, r4
 8003a3c:	4629      	mov	r1, r5
 8003a3e:	f7fc fbfd 	bl	800023c <__adddf3>
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	4610      	mov	r0, r2
 8003a48:	4619      	mov	r1, r3
 8003a4a:	f7fd f85d 	bl	8000b08 <__aeabi_d2iz>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	b21a      	sxth	r2, r3
 8003a52:	4b53      	ldr	r3, [pc, #332]	; (8003ba0 <Rafael_PanTompkins+0x12d8>)
 8003a54:	801a      	strh	r2, [r3, #0]
                            threshold_f2 = 0.5*threshold_f1;
 8003a56:	4b52      	ldr	r3, [pc, #328]	; (8003ba0 <Rafael_PanTompkins+0x12d8>)
 8003a58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7fc fd39 	bl	80004d4 <__aeabi_i2d>
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	4b49      	ldr	r3, [pc, #292]	; (8003b8c <Rafael_PanTompkins+0x12c4>)
 8003a68:	f7fc fd9e 	bl	80005a8 <__aeabi_dmul>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	4610      	mov	r0, r2
 8003a72:	4619      	mov	r1, r3
 8003a74:	f7fd f848 	bl	8000b08 <__aeabi_d2iz>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	b21a      	sxth	r2, r3
 8003a7c:	4b49      	ldr	r3, [pc, #292]	; (8003ba4 <Rafael_PanTompkins+0x12dc>)
 8003a7e:	801a      	strh	r2, [r3, #0]
                            // If a signal peak was detected on the back search, the RR attributes must be updated.
                            // This is the same thing done when a peak is detected on the first try.
                            //RR Average 1
                            rravg1 = 0;
 8003a80:	4b49      	ldr	r3, [pc, #292]	; (8003ba8 <Rafael_PanTompkins+0x12e0>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]
                            for (j = 0; j < 7; j++)
 8003a86:	4b49      	ldr	r3, [pc, #292]	; (8003bac <Rafael_PanTompkins+0x12e4>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	e019      	b.n	8003ac2 <Rafael_PanTompkins+0x11fa>
                            {
                                rr1[j] = rr1[j+1];
 8003a8e:	4b47      	ldr	r3, [pc, #284]	; (8003bac <Rafael_PanTompkins+0x12e4>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	4b45      	ldr	r3, [pc, #276]	; (8003bac <Rafael_PanTompkins+0x12e4>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4945      	ldr	r1, [pc, #276]	; (8003bb0 <Rafael_PanTompkins+0x12e8>)
 8003a9a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003a9e:	4944      	ldr	r1, [pc, #272]	; (8003bb0 <Rafael_PanTompkins+0x12e8>)
 8003aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                rravg1 += rr1[j];
 8003aa4:	4b41      	ldr	r3, [pc, #260]	; (8003bac <Rafael_PanTompkins+0x12e4>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a41      	ldr	r2, [pc, #260]	; (8003bb0 <Rafael_PanTompkins+0x12e8>)
 8003aaa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003aae:	4b3e      	ldr	r3, [pc, #248]	; (8003ba8 <Rafael_PanTompkins+0x12e0>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	4a3c      	ldr	r2, [pc, #240]	; (8003ba8 <Rafael_PanTompkins+0x12e0>)
 8003ab6:	6013      	str	r3, [r2, #0]
                            for (j = 0; j < 7; j++)
 8003ab8:	4b3c      	ldr	r3, [pc, #240]	; (8003bac <Rafael_PanTompkins+0x12e4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	3301      	adds	r3, #1
 8003abe:	4a3b      	ldr	r2, [pc, #236]	; (8003bac <Rafael_PanTompkins+0x12e4>)
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	4b3a      	ldr	r3, [pc, #232]	; (8003bac <Rafael_PanTompkins+0x12e4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b06      	cmp	r3, #6
 8003ac8:	d9e1      	bls.n	8003a8e <Rafael_PanTompkins+0x11c6>
                            }
                            rr1[7] = sample - (current - i) - lastQRS;
 8003aca:	4b25      	ldr	r3, [pc, #148]	; (8003b60 <Rafael_PanTompkins+0x1298>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a39      	ldr	r2, [pc, #228]	; (8003bb4 <Rafael_PanTompkins+0x12ec>)
 8003ad0:	6812      	ldr	r2, [r2, #0]
 8003ad2:	1a9a      	subs	r2, r3, r2
 8003ad4:	4b38      	ldr	r3, [pc, #224]	; (8003bb8 <Rafael_PanTompkins+0x12f0>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	441a      	add	r2, r3
 8003ada:	4b38      	ldr	r3, [pc, #224]	; (8003bbc <Rafael_PanTompkins+0x12f4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	4b33      	ldr	r3, [pc, #204]	; (8003bb0 <Rafael_PanTompkins+0x12e8>)
 8003ae4:	61da      	str	r2, [r3, #28]
                            qrs = true;
 8003ae6:	4b36      	ldr	r3, [pc, #216]	; (8003bc0 <Rafael_PanTompkins+0x12f8>)
 8003ae8:	2201      	movs	r2, #1
 8003aea:	701a      	strb	r2, [r3, #0]
                            lastQRS = sample - (current - i);
 8003aec:	4b1c      	ldr	r3, [pc, #112]	; (8003b60 <Rafael_PanTompkins+0x1298>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a30      	ldr	r2, [pc, #192]	; (8003bb4 <Rafael_PanTompkins+0x12ec>)
 8003af2:	6812      	ldr	r2, [r2, #0]
 8003af4:	1a9a      	subs	r2, r3, r2
 8003af6:	4b30      	ldr	r3, [pc, #192]	; (8003bb8 <Rafael_PanTompkins+0x12f0>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4413      	add	r3, r2
 8003afc:	4a2f      	ldr	r2, [pc, #188]	; (8003bbc <Rafael_PanTompkins+0x12f4>)
 8003afe:	6013      	str	r3, [r2, #0]
                            rravg1 += rr1[7];
 8003b00:	4b2b      	ldr	r3, [pc, #172]	; (8003bb0 <Rafael_PanTompkins+0x12e8>)
 8003b02:	69da      	ldr	r2, [r3, #28]
 8003b04:	4b28      	ldr	r3, [pc, #160]	; (8003ba8 <Rafael_PanTompkins+0x12e0>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4413      	add	r3, r2
 8003b0a:	4a27      	ldr	r2, [pc, #156]	; (8003ba8 <Rafael_PanTompkins+0x12e0>)
 8003b0c:	6013      	str	r3, [r2, #0]
                            rravg1 *= 0.125;
 8003b0e:	4b26      	ldr	r3, [pc, #152]	; (8003ba8 <Rafael_PanTompkins+0x12e0>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fc fcde 	bl	80004d4 <__aeabi_i2d>
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003b20:	f7fc fd42 	bl	80005a8 <__aeabi_dmul>
 8003b24:	4602      	mov	r2, r0
 8003b26:	460b      	mov	r3, r1
 8003b28:	4610      	mov	r0, r2
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	f7fc ffec 	bl	8000b08 <__aeabi_d2iz>
 8003b30:	4603      	mov	r3, r0
 8003b32:	4a1d      	ldr	r2, [pc, #116]	; (8003ba8 <Rafael_PanTompkins+0x12e0>)
 8003b34:	6013      	str	r3, [r2, #0]

                            //RR Average 2
                            if ( (rr1[7] >= rrlow) && (rr1[7] <= rrhigh) )
 8003b36:	4b1e      	ldr	r3, [pc, #120]	; (8003bb0 <Rafael_PanTompkins+0x12e8>)
 8003b38:	69da      	ldr	r2, [r3, #28]
 8003b3a:	4b22      	ldr	r3, [pc, #136]	; (8003bc4 <Rafael_PanTompkins+0x12fc>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	f2c0 80bc 	blt.w	8003cbc <Rafael_PanTompkins+0x13f4>
 8003b44:	4b1a      	ldr	r3, [pc, #104]	; (8003bb0 <Rafael_PanTompkins+0x12e8>)
 8003b46:	69da      	ldr	r2, [r3, #28]
 8003b48:	4b1f      	ldr	r3, [pc, #124]	; (8003bc8 <Rafael_PanTompkins+0x1300>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	f300 80b5 	bgt.w	8003cbc <Rafael_PanTompkins+0x13f4>
                            {
                                rravg2 = 0;
 8003b52:	4b1e      	ldr	r3, [pc, #120]	; (8003bcc <Rafael_PanTompkins+0x1304>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
                                for (i = 0; i < 7; i++)
 8003b58:	4b01      	ldr	r3, [pc, #4]	; (8003b60 <Rafael_PanTompkins+0x1298>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	e051      	b.n	8003c04 <Rafael_PanTompkins+0x133c>
 8003b60:	20002b70 	.word	0x20002b70
 8003b64:	200021bc 	.word	0x200021bc
 8003b68:	20002b8c 	.word	0x20002b8c
 8003b6c:	200013ac 	.word	0x200013ac
 8003b70:	20002b8e 	.word	0x20002b8e
 8003b74:	3fd00000 	.word	0x3fd00000
 8003b78:	20002b98 	.word	0x20002b98
 8003b7c:	3fe80000 	.word	0x3fe80000
 8003b80:	20002b9a 	.word	0x20002b9a
 8003b84:	20002b9c 	.word	0x20002b9c
 8003b88:	20002b90 	.word	0x20002b90
 8003b8c:	3fe00000 	.word	0x3fe00000
 8003b90:	20002b92 	.word	0x20002b92
 8003b94:	20002b84 	.word	0x20002b84
 8003b98:	20002b80 	.word	0x20002b80
 8003b9c:	20002b9e 	.word	0x20002b9e
 8003ba0:	20002b94 	.word	0x20002b94
 8003ba4:	20002b96 	.word	0x20002b96
 8003ba8:	20002b5c 	.word	0x20002b5c
 8003bac:	20002b74 	.word	0x20002b74
 8003bb0:	20002b1c 	.word	0x20002b1c
 8003bb4:	20002b88 	.word	0x20002b88
 8003bb8:	20002b78 	.word	0x20002b78
 8003bbc:	20002b7c 	.word	0x20002b7c
 8003bc0:	20002ba0 	.word	0x20002ba0
 8003bc4:	20002b64 	.word	0x20002b64
 8003bc8:	20002b68 	.word	0x20002b68
 8003bcc:	20002b60 	.word	0x20002b60
                                {
                                    rr2[i] = rr2[i+1];
 8003bd0:	4b5b      	ldr	r3, [pc, #364]	; (8003d40 <Rafael_PanTompkins+0x1478>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	4b5a      	ldr	r3, [pc, #360]	; (8003d40 <Rafael_PanTompkins+0x1478>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	495a      	ldr	r1, [pc, #360]	; (8003d44 <Rafael_PanTompkins+0x147c>)
 8003bdc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003be0:	4958      	ldr	r1, [pc, #352]	; (8003d44 <Rafael_PanTompkins+0x147c>)
 8003be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                    rravg2 += rr2[i];
 8003be6:	4b56      	ldr	r3, [pc, #344]	; (8003d40 <Rafael_PanTompkins+0x1478>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a56      	ldr	r2, [pc, #344]	; (8003d44 <Rafael_PanTompkins+0x147c>)
 8003bec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003bf0:	4b55      	ldr	r3, [pc, #340]	; (8003d48 <Rafael_PanTompkins+0x1480>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	4a54      	ldr	r2, [pc, #336]	; (8003d48 <Rafael_PanTompkins+0x1480>)
 8003bf8:	6013      	str	r3, [r2, #0]
                                for (i = 0; i < 7; i++)
 8003bfa:	4b51      	ldr	r3, [pc, #324]	; (8003d40 <Rafael_PanTompkins+0x1478>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	4a4f      	ldr	r2, [pc, #316]	; (8003d40 <Rafael_PanTompkins+0x1478>)
 8003c02:	6013      	str	r3, [r2, #0]
 8003c04:	4b4e      	ldr	r3, [pc, #312]	; (8003d40 <Rafael_PanTompkins+0x1478>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b06      	cmp	r3, #6
 8003c0a:	d9e1      	bls.n	8003bd0 <Rafael_PanTompkins+0x1308>
                                }
                                rr2[7] = rr1[7];
 8003c0c:	4b4f      	ldr	r3, [pc, #316]	; (8003d4c <Rafael_PanTompkins+0x1484>)
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	4a4c      	ldr	r2, [pc, #304]	; (8003d44 <Rafael_PanTompkins+0x147c>)
 8003c12:	61d3      	str	r3, [r2, #28]
                                rravg2 += rr2[7];
 8003c14:	4b4b      	ldr	r3, [pc, #300]	; (8003d44 <Rafael_PanTompkins+0x147c>)
 8003c16:	69da      	ldr	r2, [r3, #28]
 8003c18:	4b4b      	ldr	r3, [pc, #300]	; (8003d48 <Rafael_PanTompkins+0x1480>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	4a4a      	ldr	r2, [pc, #296]	; (8003d48 <Rafael_PanTompkins+0x1480>)
 8003c20:	6013      	str	r3, [r2, #0]
                                rravg2 *= 0.125;
 8003c22:	4b49      	ldr	r3, [pc, #292]	; (8003d48 <Rafael_PanTompkins+0x1480>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fc fc54 	bl	80004d4 <__aeabi_i2d>
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003c34:	f7fc fcb8 	bl	80005a8 <__aeabi_dmul>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4610      	mov	r0, r2
 8003c3e:	4619      	mov	r1, r3
 8003c40:	f7fc ff62 	bl	8000b08 <__aeabi_d2iz>
 8003c44:	4603      	mov	r3, r0
 8003c46:	4a40      	ldr	r2, [pc, #256]	; (8003d48 <Rafael_PanTompkins+0x1480>)
 8003c48:	6013      	str	r3, [r2, #0]
                                rrlow = 0.92*rravg2;
 8003c4a:	4b3f      	ldr	r3, [pc, #252]	; (8003d48 <Rafael_PanTompkins+0x1480>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fc fc40 	bl	80004d4 <__aeabi_i2d>
 8003c54:	a334      	add	r3, pc, #208	; (adr r3, 8003d28 <Rafael_PanTompkins+0x1460>)
 8003c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5a:	f7fc fca5 	bl	80005a8 <__aeabi_dmul>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	460b      	mov	r3, r1
 8003c62:	4610      	mov	r0, r2
 8003c64:	4619      	mov	r1, r3
 8003c66:	f7fc ff4f 	bl	8000b08 <__aeabi_d2iz>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	4a38      	ldr	r2, [pc, #224]	; (8003d50 <Rafael_PanTompkins+0x1488>)
 8003c6e:	6013      	str	r3, [r2, #0]
                                rrhigh = 1.16*rravg2;
 8003c70:	4b35      	ldr	r3, [pc, #212]	; (8003d48 <Rafael_PanTompkins+0x1480>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fc fc2d 	bl	80004d4 <__aeabi_i2d>
 8003c7a:	a32d      	add	r3, pc, #180	; (adr r3, 8003d30 <Rafael_PanTompkins+0x1468>)
 8003c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c80:	f7fc fc92 	bl	80005a8 <__aeabi_dmul>
 8003c84:	4602      	mov	r2, r0
 8003c86:	460b      	mov	r3, r1
 8003c88:	4610      	mov	r0, r2
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	f7fc ff3c 	bl	8000b08 <__aeabi_d2iz>
 8003c90:	4603      	mov	r3, r0
 8003c92:	4a30      	ldr	r2, [pc, #192]	; (8003d54 <Rafael_PanTompkins+0x148c>)
 8003c94:	6013      	str	r3, [r2, #0]
                                rrmiss = 1.66*rravg2;
 8003c96:	4b2c      	ldr	r3, [pc, #176]	; (8003d48 <Rafael_PanTompkins+0x1480>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fc fc1a 	bl	80004d4 <__aeabi_i2d>
 8003ca0:	a325      	add	r3, pc, #148	; (adr r3, 8003d38 <Rafael_PanTompkins+0x1470>)
 8003ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca6:	f7fc fc7f 	bl	80005a8 <__aeabi_dmul>
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	4610      	mov	r0, r2
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	f7fc ff29 	bl	8000b08 <__aeabi_d2iz>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	4a27      	ldr	r2, [pc, #156]	; (8003d58 <Rafael_PanTompkins+0x1490>)
 8003cba:	6013      	str	r3, [r2, #0]
                            }

                            prevRegular = regular;
 8003cbc:	4b27      	ldr	r3, [pc, #156]	; (8003d5c <Rafael_PanTompkins+0x1494>)
 8003cbe:	781a      	ldrb	r2, [r3, #0]
 8003cc0:	4b27      	ldr	r3, [pc, #156]	; (8003d60 <Rafael_PanTompkins+0x1498>)
 8003cc2:	701a      	strb	r2, [r3, #0]
                            if (rravg1 == rravg2)
 8003cc4:	4b27      	ldr	r3, [pc, #156]	; (8003d64 <Rafael_PanTompkins+0x149c>)
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	4b1f      	ldr	r3, [pc, #124]	; (8003d48 <Rafael_PanTompkins+0x1480>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d103      	bne.n	8003cd8 <Rafael_PanTompkins+0x1410>
                            {
                                regular = true;
 8003cd0:	4b22      	ldr	r3, [pc, #136]	; (8003d5c <Rafael_PanTompkins+0x1494>)
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	701a      	strb	r2, [r3, #0]
                                    threshold_i1 /= 2;
                                    threshold_f1 /= 2;
                                }
                            }

                            break;
 8003cd6:	e04d      	b.n	8003d74 <Rafael_PanTompkins+0x14ac>
                                regular = false;
 8003cd8:	4b20      	ldr	r3, [pc, #128]	; (8003d5c <Rafael_PanTompkins+0x1494>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	701a      	strb	r2, [r3, #0]
                                if (prevRegular)
 8003cde:	4b20      	ldr	r3, [pc, #128]	; (8003d60 <Rafael_PanTompkins+0x1498>)
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d046      	beq.n	8003d74 <Rafael_PanTompkins+0x14ac>
                                    threshold_i1 /= 2;
 8003ce6:	4b20      	ldr	r3, [pc, #128]	; (8003d68 <Rafael_PanTompkins+0x14a0>)
 8003ce8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cec:	0fda      	lsrs	r2, r3, #31
 8003cee:	4413      	add	r3, r2
 8003cf0:	105b      	asrs	r3, r3, #1
 8003cf2:	b21a      	sxth	r2, r3
 8003cf4:	4b1c      	ldr	r3, [pc, #112]	; (8003d68 <Rafael_PanTompkins+0x14a0>)
 8003cf6:	801a      	strh	r2, [r3, #0]
                                    threshold_f1 /= 2;
 8003cf8:	4b1c      	ldr	r3, [pc, #112]	; (8003d6c <Rafael_PanTompkins+0x14a4>)
 8003cfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cfe:	0fda      	lsrs	r2, r3, #31
 8003d00:	4413      	add	r3, r2
 8003d02:	105b      	asrs	r3, r3, #1
 8003d04:	b21a      	sxth	r2, r3
 8003d06:	4b19      	ldr	r3, [pc, #100]	; (8003d6c <Rafael_PanTompkins+0x14a4>)
 8003d08:	801a      	strh	r2, [r3, #0]
                            break;
 8003d0a:	e033      	b.n	8003d74 <Rafael_PanTompkins+0x14ac>
				for (i = current - (sample - lastQRS) + FS/5; i < (long unsigned int)current; i++)
 8003d0c:	4b0c      	ldr	r3, [pc, #48]	; (8003d40 <Rafael_PanTompkins+0x1478>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	3301      	adds	r3, #1
 8003d12:	4a0b      	ldr	r2, [pc, #44]	; (8003d40 <Rafael_PanTompkins+0x1478>)
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	4b0a      	ldr	r3, [pc, #40]	; (8003d40 <Rafael_PanTompkins+0x1478>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a15      	ldr	r2, [pc, #84]	; (8003d70 <Rafael_PanTompkins+0x14a8>)
 8003d1c:	6812      	ldr	r2, [r2, #0]
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	f4ff ad18 	bcc.w	8003754 <Rafael_PanTompkins+0xe8c>
 8003d24:	e027      	b.n	8003d76 <Rafael_PanTompkins+0x14ae>
 8003d26:	bf00      	nop
 8003d28:	d70a3d71 	.word	0xd70a3d71
 8003d2c:	3fed70a3 	.word	0x3fed70a3
 8003d30:	28f5c28f 	.word	0x28f5c28f
 8003d34:	3ff28f5c 	.word	0x3ff28f5c
 8003d38:	28f5c28f 	.word	0x28f5c28f
 8003d3c:	3ffa8f5c 	.word	0x3ffa8f5c
 8003d40:	20002b70 	.word	0x20002b70
 8003d44:	20002b3c 	.word	0x20002b3c
 8003d48:	20002b60 	.word	0x20002b60
 8003d4c:	20002b1c 	.word	0x20002b1c
 8003d50:	20002b64 	.word	0x20002b64
 8003d54:	20002b68 	.word	0x20002b68
 8003d58:	20002b6c 	.word	0x20002b6c
 8003d5c:	20000004 	.word	0x20000004
 8003d60:	20002ba1 	.word	0x20002ba1
 8003d64:	20002b5c 	.word	0x20002b5c
 8003d68:	20002b90 	.word	0x20002b90
 8003d6c:	20002b94 	.word	0x20002b94
 8003d70:	20002b88 	.word	0x20002b88
                            break;
 8003d74:	bf00      	nop
                        }
                    }
				}

				if (qrs)
 8003d76:	4b8c      	ldr	r3, [pc, #560]	; (8003fa8 <Rafael_PanTompkins+0x16e0>)
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d014      	beq.n	8003da8 <Rafael_PanTompkins+0x14e0>
                {
					RF_outputSignal[current] = false;
 8003d7e:	4b8b      	ldr	r3, [pc, #556]	; (8003fac <Rafael_PanTompkins+0x16e4>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a8b      	ldr	r2, [pc, #556]	; (8003fb0 <Rafael_PanTompkins+0x16e8>)
 8003d84:	2100      	movs	r1, #0
 8003d86:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					RF_outputSignal[i] = true;
 8003d8a:	4b8a      	ldr	r3, [pc, #552]	; (8003fb4 <Rafael_PanTompkins+0x16ec>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a88      	ldr	r2, [pc, #544]	; (8003fb0 <Rafael_PanTompkins+0x16e8>)
 8003d90:	2101      	movs	r1, #1
 8003d92:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    result = (current - i);
 8003d96:	4b85      	ldr	r3, [pc, #532]	; (8003fac <Rafael_PanTompkins+0x16e4>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	4b85      	ldr	r3, [pc, #532]	; (8003fb4 <Rafael_PanTompkins+0x16ec>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	81fb      	strh	r3, [r7, #14]
                }
			}

			// Definitely no signal peak was detected.
			if (!qrs)
 8003da8:	4b7f      	ldr	r3, [pc, #508]	; (8003fa8 <Rafael_PanTompkins+0x16e0>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f040 80f3 	bne.w	8003f98 <Rafael_PanTompkins+0x16d0>
			{
				// If some kind of peak had been detected, then it's certainly a noise peak. Thresholds must be updated accordinly.
				if ((RF_integral[current] >= threshold_i1) || (RF_highpass[current] >= threshold_f1))
 8003db2:	4b7e      	ldr	r3, [pc, #504]	; (8003fac <Rafael_PanTompkins+0x16e4>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a80      	ldr	r2, [pc, #512]	; (8003fb8 <Rafael_PanTompkins+0x16f0>)
 8003db8:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8003dbc:	4b7f      	ldr	r3, [pc, #508]	; (8003fbc <Rafael_PanTompkins+0x16f4>)
 8003dbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	da0a      	bge.n	8003ddc <Rafael_PanTompkins+0x1514>
 8003dc6:	4b79      	ldr	r3, [pc, #484]	; (8003fac <Rafael_PanTompkins+0x16e4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a7d      	ldr	r2, [pc, #500]	; (8003fc0 <Rafael_PanTompkins+0x16f8>)
 8003dcc:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8003dd0:	4b7c      	ldr	r3, [pc, #496]	; (8003fc4 <Rafael_PanTompkins+0x16fc>)
 8003dd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	f2c0 80de 	blt.w	8003f98 <Rafael_PanTompkins+0x16d0>
				{
					peak_i = RF_integral[current];
 8003ddc:	4b73      	ldr	r3, [pc, #460]	; (8003fac <Rafael_PanTompkins+0x16e4>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a75      	ldr	r2, [pc, #468]	; (8003fb8 <Rafael_PanTompkins+0x16f0>)
 8003de2:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8003de6:	4b78      	ldr	r3, [pc, #480]	; (8003fc8 <Rafael_PanTompkins+0x1700>)
 8003de8:	801a      	strh	r2, [r3, #0]
					npk_i = 0.125*peak_i + 0.875*npk_i;
 8003dea:	4b77      	ldr	r3, [pc, #476]	; (8003fc8 <Rafael_PanTompkins+0x1700>)
 8003dec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7fc fb6f 	bl	80004d4 <__aeabi_i2d>
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003dfe:	f7fc fbd3 	bl	80005a8 <__aeabi_dmul>
 8003e02:	4602      	mov	r2, r0
 8003e04:	460b      	mov	r3, r1
 8003e06:	4614      	mov	r4, r2
 8003e08:	461d      	mov	r5, r3
 8003e0a:	4b70      	ldr	r3, [pc, #448]	; (8003fcc <Rafael_PanTompkins+0x1704>)
 8003e0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fc fb5f 	bl	80004d4 <__aeabi_i2d>
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	4b6d      	ldr	r3, [pc, #436]	; (8003fd0 <Rafael_PanTompkins+0x1708>)
 8003e1c:	f7fc fbc4 	bl	80005a8 <__aeabi_dmul>
 8003e20:	4602      	mov	r2, r0
 8003e22:	460b      	mov	r3, r1
 8003e24:	4620      	mov	r0, r4
 8003e26:	4629      	mov	r1, r5
 8003e28:	f7fc fa08 	bl	800023c <__adddf3>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4610      	mov	r0, r2
 8003e32:	4619      	mov	r1, r3
 8003e34:	f7fc fe68 	bl	8000b08 <__aeabi_d2iz>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	b21a      	sxth	r2, r3
 8003e3c:	4b63      	ldr	r3, [pc, #396]	; (8003fcc <Rafael_PanTompkins+0x1704>)
 8003e3e:	801a      	strh	r2, [r3, #0]
					threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8003e40:	4b62      	ldr	r3, [pc, #392]	; (8003fcc <Rafael_PanTompkins+0x1704>)
 8003e42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7fc fb44 	bl	80004d4 <__aeabi_i2d>
 8003e4c:	4604      	mov	r4, r0
 8003e4e:	460d      	mov	r5, r1
 8003e50:	4b60      	ldr	r3, [pc, #384]	; (8003fd4 <Rafael_PanTompkins+0x170c>)
 8003e52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e56:	461a      	mov	r2, r3
 8003e58:	4b5c      	ldr	r3, [pc, #368]	; (8003fcc <Rafael_PanTompkins+0x1704>)
 8003e5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fc fb37 	bl	80004d4 <__aeabi_i2d>
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	4b5b      	ldr	r3, [pc, #364]	; (8003fd8 <Rafael_PanTompkins+0x1710>)
 8003e6c:	f7fc fb9c 	bl	80005a8 <__aeabi_dmul>
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	4620      	mov	r0, r4
 8003e76:	4629      	mov	r1, r5
 8003e78:	f7fc f9e0 	bl	800023c <__adddf3>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4610      	mov	r0, r2
 8003e82:	4619      	mov	r1, r3
 8003e84:	f7fc fe40 	bl	8000b08 <__aeabi_d2iz>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	b21a      	sxth	r2, r3
 8003e8c:	4b4b      	ldr	r3, [pc, #300]	; (8003fbc <Rafael_PanTompkins+0x16f4>)
 8003e8e:	801a      	strh	r2, [r3, #0]
					threshold_i2 = 0.5*threshold_i1;
 8003e90:	4b4a      	ldr	r3, [pc, #296]	; (8003fbc <Rafael_PanTompkins+0x16f4>)
 8003e92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fc fb1c 	bl	80004d4 <__aeabi_i2d>
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	4b4e      	ldr	r3, [pc, #312]	; (8003fdc <Rafael_PanTompkins+0x1714>)
 8003ea2:	f7fc fb81 	bl	80005a8 <__aeabi_dmul>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4610      	mov	r0, r2
 8003eac:	4619      	mov	r1, r3
 8003eae:	f7fc fe2b 	bl	8000b08 <__aeabi_d2iz>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	b21a      	sxth	r2, r3
 8003eb6:	4b4a      	ldr	r3, [pc, #296]	; (8003fe0 <Rafael_PanTompkins+0x1718>)
 8003eb8:	801a      	strh	r2, [r3, #0]
					peak_f = RF_highpass[current];
 8003eba:	4b3c      	ldr	r3, [pc, #240]	; (8003fac <Rafael_PanTompkins+0x16e4>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a40      	ldr	r2, [pc, #256]	; (8003fc0 <Rafael_PanTompkins+0x16f8>)
 8003ec0:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8003ec4:	4b47      	ldr	r3, [pc, #284]	; (8003fe4 <Rafael_PanTompkins+0x171c>)
 8003ec6:	801a      	strh	r2, [r3, #0]
					npk_f = 0.125*peak_f + 0.875*npk_f;
 8003ec8:	4b46      	ldr	r3, [pc, #280]	; (8003fe4 <Rafael_PanTompkins+0x171c>)
 8003eca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fc fb00 	bl	80004d4 <__aeabi_i2d>
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003edc:	f7fc fb64 	bl	80005a8 <__aeabi_dmul>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4614      	mov	r4, r2
 8003ee6:	461d      	mov	r5, r3
 8003ee8:	4b3f      	ldr	r3, [pc, #252]	; (8003fe8 <Rafael_PanTompkins+0x1720>)
 8003eea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fc faf0 	bl	80004d4 <__aeabi_i2d>
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	4b35      	ldr	r3, [pc, #212]	; (8003fd0 <Rafael_PanTompkins+0x1708>)
 8003efa:	f7fc fb55 	bl	80005a8 <__aeabi_dmul>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4620      	mov	r0, r4
 8003f04:	4629      	mov	r1, r5
 8003f06:	f7fc f999 	bl	800023c <__adddf3>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	4610      	mov	r0, r2
 8003f10:	4619      	mov	r1, r3
 8003f12:	f7fc fdf9 	bl	8000b08 <__aeabi_d2iz>
 8003f16:	4603      	mov	r3, r0
 8003f18:	b21a      	sxth	r2, r3
 8003f1a:	4b33      	ldr	r3, [pc, #204]	; (8003fe8 <Rafael_PanTompkins+0x1720>)
 8003f1c:	801a      	strh	r2, [r3, #0]
					threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 8003f1e:	4b32      	ldr	r3, [pc, #200]	; (8003fe8 <Rafael_PanTompkins+0x1720>)
 8003f20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fc fad5 	bl	80004d4 <__aeabi_i2d>
 8003f2a:	4604      	mov	r4, r0
 8003f2c:	460d      	mov	r5, r1
 8003f2e:	4b2f      	ldr	r3, [pc, #188]	; (8003fec <Rafael_PanTompkins+0x1724>)
 8003f30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f34:	461a      	mov	r2, r3
 8003f36:	4b2c      	ldr	r3, [pc, #176]	; (8003fe8 <Rafael_PanTompkins+0x1720>)
 8003f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fc fac8 	bl	80004d4 <__aeabi_i2d>
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	4b23      	ldr	r3, [pc, #140]	; (8003fd8 <Rafael_PanTompkins+0x1710>)
 8003f4a:	f7fc fb2d 	bl	80005a8 <__aeabi_dmul>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	4620      	mov	r0, r4
 8003f54:	4629      	mov	r1, r5
 8003f56:	f7fc f971 	bl	800023c <__adddf3>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	4610      	mov	r0, r2
 8003f60:	4619      	mov	r1, r3
 8003f62:	f7fc fdd1 	bl	8000b08 <__aeabi_d2iz>
 8003f66:	4603      	mov	r3, r0
 8003f68:	b21a      	sxth	r2, r3
 8003f6a:	4b16      	ldr	r3, [pc, #88]	; (8003fc4 <Rafael_PanTompkins+0x16fc>)
 8003f6c:	801a      	strh	r2, [r3, #0]
					threshold_f2 = 0.5*threshold_f1;
 8003f6e:	4b15      	ldr	r3, [pc, #84]	; (8003fc4 <Rafael_PanTompkins+0x16fc>)
 8003f70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7fc faad 	bl	80004d4 <__aeabi_i2d>
 8003f7a:	f04f 0200 	mov.w	r2, #0
 8003f7e:	4b17      	ldr	r3, [pc, #92]	; (8003fdc <Rafael_PanTompkins+0x1714>)
 8003f80:	f7fc fb12 	bl	80005a8 <__aeabi_dmul>
 8003f84:	4602      	mov	r2, r0
 8003f86:	460b      	mov	r3, r1
 8003f88:	4610      	mov	r0, r2
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	f7fc fdbc 	bl	8000b08 <__aeabi_d2iz>
 8003f90:	4603      	mov	r3, r0
 8003f92:	b21a      	sxth	r2, r3
 8003f94:	4b16      	ldr	r3, [pc, #88]	; (8003ff0 <Rafael_PanTompkins+0x1728>)
 8003f96:	801a      	strh	r2, [r3, #0]
		// However, it updates a few samples back from the buffer. The reason is that if we update the detection
		// for the current sample, we might miss a peak that could've been found later by backsearching using
		// lighter thresholds. The final waveform output does match the original signal, though.

		//My UPDATE: If peak was detected returns sample delay, else returns 0
		return result;
 8003f98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20002ba0 	.word	0x20002ba0
 8003fac:	20002b88 	.word	0x20002b88
 8003fb0:	2000266c 	.word	0x2000266c
 8003fb4:	20002b70 	.word	0x20002b70
 8003fb8:	200021bc 	.word	0x200021bc
 8003fbc:	20002b90 	.word	0x20002b90
 8003fc0:	200013ac 	.word	0x200013ac
 8003fc4:	20002b94 	.word	0x20002b94
 8003fc8:	20002b8c 	.word	0x20002b8c
 8003fcc:	20002b9c 	.word	0x20002b9c
 8003fd0:	3fec0000 	.word	0x3fec0000
 8003fd4:	20002b98 	.word	0x20002b98
 8003fd8:	3fd00000 	.word	0x3fd00000
 8003fdc:	3fe00000 	.word	0x3fe00000
 8003fe0:	20002b92 	.word	0x20002b92
 8003fe4:	20002b8e 	.word	0x20002b8e
 8003fe8:	20002b9e 	.word	0x20002b9e
 8003fec:	20002b9a 	.word	0x20002b9a
 8003ff0:	20002b96 	.word	0x20002b96

08003ff4 <Rafael_get_LPFilter_output>:


int16_t Rafael_get_LPFilter_output()
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
	return RF_lowpass[BUFFSIZE];
 8003ff8:	4b03      	ldr	r3, [pc, #12]	; (8004008 <Rafael_get_LPFilter_output+0x14>)
 8003ffa:	f9b3 34b0 	ldrsh.w	r3, [r3, #1200]	; 0x4b0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	20000efc 	.word	0x20000efc

0800400c <Rafael_get_HPFilter_output>:
int16_t Rafael_get_HPFilter_output()
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
	return RF_highpass[BUFFSIZE];
 8004010:	4b03      	ldr	r3, [pc, #12]	; (8004020 <Rafael_get_HPFilter_output+0x14>)
 8004012:	f9b3 34b0 	ldrsh.w	r3, [r3, #1200]	; 0x4b0
}
 8004016:	4618      	mov	r0, r3
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	200013ac 	.word	0x200013ac

08004024 <Rafael_get_DRFilter_output>:
int16_t Rafael_get_DRFilter_output()
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0
	return RF_derivative[BUFFSIZE];
 8004028:	4b03      	ldr	r3, [pc, #12]	; (8004038 <Rafael_get_DRFilter_output+0x14>)
 800402a:	f9b3 34b0 	ldrsh.w	r3, [r3, #1200]	; 0x4b0
}
 800402e:	4618      	mov	r0, r3
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	2000185c 	.word	0x2000185c

0800403c <Rafael_get_SQRFilter_output>:
int16_t Rafael_get_SQRFilter_output()
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
	return RF_squared[current];
 8004040:	4b04      	ldr	r3, [pc, #16]	; (8004054 <Rafael_get_SQRFilter_output+0x18>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a04      	ldr	r2, [pc, #16]	; (8004058 <Rafael_get_SQRFilter_output+0x1c>)
 8004046:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
}
 800404a:	4618      	mov	r0, r3
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	20002b88 	.word	0x20002b88
 8004058:	20001d0c 	.word	0x20001d0c

0800405c <Rafael_get_MVFilter_output>:
int16_t Rafael_get_MVFilter_output()
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
	return RF_integral[current];
 8004060:	4b04      	ldr	r3, [pc, #16]	; (8004074 <Rafael_get_MVFilter_output+0x18>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a04      	ldr	r2, [pc, #16]	; (8004078 <Rafael_get_MVFilter_output+0x1c>)
 8004066:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
}
 800406a:	4618      	mov	r0, r3
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	20002b88 	.word	0x20002b88
 8004078:	200021bc 	.word	0x200021bc

0800407c <Rafael_get_ThI1_output>:
int16_t Rafael_get_ThI1_output()
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
	return threshold_i1;
 8004080:	4b03      	ldr	r3, [pc, #12]	; (8004090 <Rafael_get_ThI1_output+0x14>)
 8004082:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8004086:	4618      	mov	r0, r3
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	20002b90 	.word	0x20002b90

08004094 <Rafael_get_ThF1_output>:
int16_t Rafael_get_ThF1_output()
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
	return threshold_f1;
 8004098:	4b03      	ldr	r3, [pc, #12]	; (80040a8 <Rafael_get_ThF1_output+0x14>)
 800409a:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	20002b94 	.word	0x20002b94

080040ac <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80040b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80040c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4013      	ands	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80040d0:	68fb      	ldr	r3, [r7, #12]
}
 80040d2:	bf00      	nop
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
	...

080040e0 <sendUSBData>:
uint8_t USBBuffer[2048];
uint8_t USBReciveBuffer[2048];
uint16_t USBBuffer_index = 0;

void sendUSBData (uint8_t* Buf, uint16_t Len)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	460b      	mov	r3, r1
 80040ea:	807b      	strh	r3, [r7, #2]
	memcpy(&USBBuffer[USBBuffer_index], Buf, Len);
 80040ec:	4b13      	ldr	r3, [pc, #76]	; (800413c <sendUSBData+0x5c>)
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	461a      	mov	r2, r3
 80040f2:	4b13      	ldr	r3, [pc, #76]	; (8004140 <sendUSBData+0x60>)
 80040f4:	4413      	add	r3, r2
 80040f6:	887a      	ldrh	r2, [r7, #2]
 80040f8:	6879      	ldr	r1, [r7, #4]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f009 fffe 	bl	800e0fc <memcpy>
	USBBuffer_index += Len;
 8004100:	4b0e      	ldr	r3, [pc, #56]	; (800413c <sendUSBData+0x5c>)
 8004102:	881a      	ldrh	r2, [r3, #0]
 8004104:	887b      	ldrh	r3, [r7, #2]
 8004106:	4413      	add	r3, r2
 8004108:	b29a      	uxth	r2, r3
 800410a:	4b0c      	ldr	r3, [pc, #48]	; (800413c <sendUSBData+0x5c>)
 800410c:	801a      	strh	r2, [r3, #0]
	if (USBBuffer_index>2000)
 800410e:	4b0b      	ldr	r3, [pc, #44]	; (800413c <sendUSBData+0x5c>)
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004116:	d90c      	bls.n	8004132 <sendUSBData+0x52>
	{
		while (CDC_Transmit_FS(USBBuffer, USBBuffer_index)!= USBD_OK){};
 8004118:	bf00      	nop
 800411a:	4b08      	ldr	r3, [pc, #32]	; (800413c <sendUSBData+0x5c>)
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	4619      	mov	r1, r3
 8004120:	4807      	ldr	r0, [pc, #28]	; (8004140 <sendUSBData+0x60>)
 8004122:	f009 fb19 	bl	800d758 <CDC_Transmit_FS>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1f6      	bne.n	800411a <sendUSBData+0x3a>
		USBBuffer_index = 0;
 800412c:	4b03      	ldr	r3, [pc, #12]	; (800413c <sendUSBData+0x5c>)
 800412e:	2200      	movs	r2, #0
 8004130:	801a      	strh	r2, [r3, #0]
	}
}
 8004132:	bf00      	nop
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	20003d44 	.word	0x20003d44
 8004140:	20002d44 	.word	0x20002d44

08004144 <findStrEnd>:

uint16_t findStrEnd ()
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
	uint16_t end = 10;
 800414a:	230a      	movs	r3, #10
 800414c:	80fb      	strh	r3, [r7, #6]
	while (str[end]!='\0')
 800414e:	e005      	b.n	800415c <findStrEnd+0x18>
	{
		end++;
 8004150:	88fb      	ldrh	r3, [r7, #6]
 8004152:	3301      	adds	r3, #1
 8004154:	80fb      	strh	r3, [r7, #6]
		if (end == 250)
 8004156:	88fb      	ldrh	r3, [r7, #6]
 8004158:	2bfa      	cmp	r3, #250	; 0xfa
 800415a:	d005      	beq.n	8004168 <findStrEnd+0x24>
	while (str[end]!='\0')
 800415c:	88fb      	ldrh	r3, [r7, #6]
 800415e:	4a06      	ldr	r2, [pc, #24]	; (8004178 <findStrEnd+0x34>)
 8004160:	5cd3      	ldrb	r3, [r2, r3]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1f4      	bne.n	8004150 <findStrEnd+0xc>
 8004166:	e000      	b.n	800416a <findStrEnd+0x26>
		{
			break;
 8004168:	bf00      	nop
		}
	}
	return end;
 800416a:	88fb      	ldrh	r3, [r7, #6]
}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	20002c48 	.word	0x20002c48

0800417c <parseLine>:



void parseLine (uint8_t* Buf, uint32_t Len)
{//Function parse one line from serial port
 800417c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004180:	b0a3      	sub	sp, #140	; 0x8c
 8004182:	af0e      	add	r7, sp, #56	; 0x38
 8004184:	61f8      	str	r0, [r7, #28]
 8004186:	61b9      	str	r1, [r7, #24]
	//In line can be command or data
	if (Len>6)
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	2b06      	cmp	r3, #6
 800418c:	d97f      	bls.n	800428e <parseLine+0x112>
	{//command mast be longer than 6 bytes
		if (Buf[0]==0x2B && Buf[1]==0x2B && Buf[2]==0x2B)
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	2b2b      	cmp	r3, #43	; 0x2b
 8004194:	d17b      	bne.n	800428e <parseLine+0x112>
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	3301      	adds	r3, #1
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b2b      	cmp	r3, #43	; 0x2b
 800419e:	d176      	bne.n	800428e <parseLine+0x112>
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	3302      	adds	r3, #2
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b2b      	cmp	r3, #43	; 0x2b
 80041a8:	d171      	bne.n	800428e <parseLine+0x112>
		{//three ++ indicate command
			switch (Buf[3])
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	3303      	adds	r3, #3
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	2b41      	cmp	r3, #65	; 0x41
 80041b2:	d002      	beq.n	80041ba <parseLine+0x3e>
 80041b4:	2b42      	cmp	r3, #66	; 0x42
 80041b6:	d014      	beq.n	80041e2 <parseLine+0x66>
 80041b8:	e057      	b.n	800426a <parseLine+0xee>
			{
			case changeDataFormat:
				applicationState.dataType = Buf[4];
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	791a      	ldrb	r2, [r3, #4]
 80041be:	4b95      	ldr	r3, [pc, #596]	; (8004414 <parseLine+0x298>)
 80041c0:	701a      	strb	r2, [r3, #0]
				sprintf(str,"OK, done.   \r\n");
 80041c2:	4995      	ldr	r1, [pc, #596]	; (8004418 <parseLine+0x29c>)
 80041c4:	4895      	ldr	r0, [pc, #596]	; (800441c <parseLine+0x2a0>)
 80041c6:	f00a fe2f 	bl	800ee28 <siprintf>
				while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 80041ca:	bf00      	nop
 80041cc:	f7ff ffba 	bl	8004144 <findStrEnd>
 80041d0:	4603      	mov	r3, r0
 80041d2:	4619      	mov	r1, r3
 80041d4:	4891      	ldr	r0, [pc, #580]	; (800441c <parseLine+0x2a0>)
 80041d6:	f009 fabf 	bl	800d758 <CDC_Transmit_FS>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1f5      	bne.n	80041cc <parseLine+0x50>
				break;
 80041e0:	e054      	b.n	800428c <parseLine+0x110>
			case changeSelectedAlgorithm:
				applicationState.selectedImplementation = Buf[4];
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	791a      	ldrb	r2, [r3, #4]
 80041e6:	4b8b      	ldr	r3, [pc, #556]	; (8004414 <parseLine+0x298>)
 80041e8:	705a      	strb	r2, [r3, #1]
				if (applicationState.selectedImplementation == hoomam650)
 80041ea:	4b8a      	ldr	r3, [pc, #552]	; (8004414 <parseLine+0x298>)
 80041ec:	785b      	ldrb	r3, [r3, #1]
 80041ee:	2b31      	cmp	r3, #49	; 0x31
 80041f0:	d110      	bne.n	8004214 <parseLine+0x98>
				{
					PT_init();
 80041f2:	f7fc fed3 	bl	8000f9c <PT_init>
					sprintf(str,"OK, done.   \r\n");
 80041f6:	4988      	ldr	r1, [pc, #544]	; (8004418 <parseLine+0x29c>)
 80041f8:	4888      	ldr	r0, [pc, #544]	; (800441c <parseLine+0x2a0>)
 80041fa:	f00a fe15 	bl	800ee28 <siprintf>
					while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 80041fe:	bf00      	nop
 8004200:	f7ff ffa0 	bl	8004144 <findStrEnd>
 8004204:	4603      	mov	r3, r0
 8004206:	4619      	mov	r1, r3
 8004208:	4884      	ldr	r0, [pc, #528]	; (800441c <parseLine+0x2a0>)
 800420a:	f009 faa5 	bl	800d758 <CDC_Transmit_FS>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1f5      	bne.n	8004200 <parseLine+0x84>
				}
				if (applicationState.selectedImplementation == rafalmmoreira)
 8004214:	4b7f      	ldr	r3, [pc, #508]	; (8004414 <parseLine+0x298>)
 8004216:	785b      	ldrb	r3, [r3, #1]
 8004218:	2b32      	cmp	r3, #50	; 0x32
 800421a:	d110      	bne.n	800423e <parseLine+0xc2>
				{
					Rafael_init();
 800421c:	f7fe fad2 	bl	80027c4 <Rafael_init>
					sprintf(str,"OK, done.   \r\n");
 8004220:	497d      	ldr	r1, [pc, #500]	; (8004418 <parseLine+0x29c>)
 8004222:	487e      	ldr	r0, [pc, #504]	; (800441c <parseLine+0x2a0>)
 8004224:	f00a fe00 	bl	800ee28 <siprintf>
					while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8004228:	bf00      	nop
 800422a:	f7ff ff8b 	bl	8004144 <findStrEnd>
 800422e:	4603      	mov	r3, r0
 8004230:	4619      	mov	r1, r3
 8004232:	487a      	ldr	r0, [pc, #488]	; (800441c <parseLine+0x2a0>)
 8004234:	f009 fa90 	bl	800d758 <CDC_Transmit_FS>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1f5      	bne.n	800422a <parseLine+0xae>
				}
				if (applicationState.selectedImplementation == marower)
 800423e:	4b75      	ldr	r3, [pc, #468]	; (8004414 <parseLine+0x298>)
 8004240:	785b      	ldrb	r3, [r3, #1]
 8004242:	2b33      	cmp	r3, #51	; 0x33
 8004244:	d121      	bne.n	800428a <parseLine+0x10e>
				{
					arm_PT_init();
 8004246:	f7fd ff2f 	bl	80020a8 <arm_PT_init>
					sprintf(str,"OK, done.   \r\n");
 800424a:	4973      	ldr	r1, [pc, #460]	; (8004418 <parseLine+0x29c>)
 800424c:	4873      	ldr	r0, [pc, #460]	; (800441c <parseLine+0x2a0>)
 800424e:	f00a fdeb 	bl	800ee28 <siprintf>
					while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8004252:	bf00      	nop
 8004254:	f7ff ff76 	bl	8004144 <findStrEnd>
 8004258:	4603      	mov	r3, r0
 800425a:	4619      	mov	r1, r3
 800425c:	486f      	ldr	r0, [pc, #444]	; (800441c <parseLine+0x2a0>)
 800425e:	f009 fa7b 	bl	800d758 <CDC_Transmit_FS>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1f5      	bne.n	8004254 <parseLine+0xd8>
				}
				break;
 8004268:	e00f      	b.n	800428a <parseLine+0x10e>
			default:
				sprintf(str,"error...\r\n");
 800426a:	496d      	ldr	r1, [pc, #436]	; (8004420 <parseLine+0x2a4>)
 800426c:	486b      	ldr	r0, [pc, #428]	; (800441c <parseLine+0x2a0>)
 800426e:	f00a fddb 	bl	800ee28 <siprintf>
				while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8004272:	bf00      	nop
 8004274:	f7ff ff66 	bl	8004144 <findStrEnd>
 8004278:	4603      	mov	r3, r0
 800427a:	4619      	mov	r1, r3
 800427c:	4867      	ldr	r0, [pc, #412]	; (800441c <parseLine+0x2a0>)
 800427e:	f009 fa6b 	bl	800d758 <CDC_Transmit_FS>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1f5      	bne.n	8004274 <parseLine+0xf8>
				break;
 8004288:	e000      	b.n	800428c <parseLine+0x110>
				break;
 800428a:	bf00      	nop
			}
			return;
 800428c:	e139      	b.n	8004502 <parseLine+0x386>
		}
	}

	int16_t dataSample;
	switch (applicationState.dataType)
 800428e:	4b61      	ldr	r3, [pc, #388]	; (8004414 <parseLine+0x298>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	2b31      	cmp	r3, #49	; 0x31
 8004294:	d00d      	beq.n	80042b2 <parseLine+0x136>
 8004296:	2b32      	cmp	r3, #50	; 0x32
 8004298:	d112      	bne.n	80042c0 <parseLine+0x144>
	{//decode data
	case int16asBytes:
		dataSample = (Buf[0]<<8)|Buf[1];
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	021b      	lsls	r3, r3, #8
 80042a0:	b21a      	sxth	r2, r3
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	3301      	adds	r3, #1
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	b21b      	sxth	r3, r3
 80042aa:	4313      	orrs	r3, r2
 80042ac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

		break;
 80042b0:	e016      	b.n	80042e0 <parseLine+0x164>
	case intasString:
		dataSample = atoi (Buf);
 80042b2:	69f8      	ldr	r0, [r7, #28]
 80042b4:	f009 fef4 	bl	800e0a0 <atoi>
 80042b8:	4603      	mov	r3, r0
 80042ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

		break;
 80042be:	e00f      	b.n	80042e0 <parseLine+0x164>
	default:
		sprintf(str,"error...\r\n");
 80042c0:	4957      	ldr	r1, [pc, #348]	; (8004420 <parseLine+0x2a4>)
 80042c2:	4856      	ldr	r0, [pc, #344]	; (800441c <parseLine+0x2a0>)
 80042c4:	f00a fdb0 	bl	800ee28 <siprintf>
		while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 80042c8:	bf00      	nop
 80042ca:	f7ff ff3b 	bl	8004144 <findStrEnd>
 80042ce:	4603      	mov	r3, r0
 80042d0:	4619      	mov	r1, r3
 80042d2:	4852      	ldr	r0, [pc, #328]	; (800441c <parseLine+0x2a0>)
 80042d4:	f009 fa40 	bl	800d758 <CDC_Transmit_FS>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1f5      	bne.n	80042ca <parseLine+0x14e>
		return;
 80042de:	e110      	b.n	8004502 <parseLine+0x386>
	float32_t s3_f32;
	float32_t s4_f32;
	float32_t s5_f32;
	float32_t ThI1_f32;
	float32_t ThF1_f32;
	switch (applicationState.selectedImplementation)
 80042e0:	4b4c      	ldr	r3, [pc, #304]	; (8004414 <parseLine+0x298>)
 80042e2:	785b      	ldrb	r3, [r3, #1]
 80042e4:	2b33      	cmp	r3, #51	; 0x33
 80042e6:	f000 80a1 	beq.w	800442c <parseLine+0x2b0>
 80042ea:	2b33      	cmp	r3, #51	; 0x33
 80042ec:	f300 8108 	bgt.w	8004500 <parseLine+0x384>
 80042f0:	2b31      	cmp	r3, #49	; 0x31
 80042f2:	d002      	beq.n	80042fa <parseLine+0x17e>
 80042f4:	2b32      	cmp	r3, #50	; 0x32
 80042f6:	d046      	beq.n	8004386 <parseLine+0x20a>
		ThF1_f32 = arm_get_ThF1_output();
		sprintf(str,"%d,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\r\n", delay, s1_f32, s2_f32, s3_f32, s4_f32, s5_f32, ThI1_f32, ThF1_f32);
		sendUSBData (str, findStrEnd());
		break;
	default:
		return;
 80042f8:	e102      	b.n	8004500 <parseLine+0x384>
		delay = PT_StateMachine (dataSample);
 80042fa:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80042fe:	4618      	mov	r0, r3
 8004300:	f7fc ff7e 	bl	8001200 <PT_StateMachine>
 8004304:	4603      	mov	r3, r0
 8004306:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		s1 = PT_get_LPFilter_output();
 800430a:	f7fd fe57 	bl	8001fbc <PT_get_LPFilter_output>
 800430e:	4603      	mov	r3, r0
 8004310:	85fb      	strh	r3, [r7, #46]	; 0x2e
		s2 = PT_get_HPFilter_output();
 8004312:	f7fd fe5f 	bl	8001fd4 <PT_get_HPFilter_output>
 8004316:	4603      	mov	r3, r0
 8004318:	85bb      	strh	r3, [r7, #44]	; 0x2c
		s3 = PT_get_DRFilter_output();
 800431a:	f7fd fe67 	bl	8001fec <PT_get_DRFilter_output>
 800431e:	4603      	mov	r3, r0
 8004320:	857b      	strh	r3, [r7, #42]	; 0x2a
		s4 = PT_get_SQRFilter_output();
 8004322:	f7fd fe7b 	bl	800201c <PT_get_SQRFilter_output>
 8004326:	4603      	mov	r3, r0
 8004328:	853b      	strh	r3, [r7, #40]	; 0x28
		s5 = PT_get_MVFilter_output();
 800432a:	f7fd fe6b 	bl	8002004 <PT_get_MVFilter_output>
 800432e:	4603      	mov	r3, r0
 8004330:	84fb      	strh	r3, [r7, #38]	; 0x26
		ThI1 = PT_get_ThI1_output();
 8004332:	f7fd fe7f 	bl	8002034 <PT_get_ThI1_output>
 8004336:	4603      	mov	r3, r0
 8004338:	84bb      	strh	r3, [r7, #36]	; 0x24
		ThF1 = PT_get_ThF1_output();
 800433a:	f7fd fe87 	bl	800204c <PT_get_ThF1_output>
 800433e:	4603      	mov	r3, r0
 8004340:	847b      	strh	r3, [r7, #34]	; 0x22
		sprintf(str,"%d,%d,%d,%d,%u,%u,%u,%d\r\n", delay, s1, s2, s3, s4, s5, ThI1, ThF1);
 8004342:	f9b7 604c 	ldrsh.w	r6, [r7, #76]	; 0x4c
 8004346:	f9b7 c02e 	ldrsh.w	ip, [r7, #46]	; 0x2e
 800434a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800434e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8004352:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8004354:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8004356:	f9b7 4024 	ldrsh.w	r4, [r7, #36]	; 0x24
 800435a:	f9b7 5022 	ldrsh.w	r5, [r7, #34]	; 0x22
 800435e:	9505      	str	r5, [sp, #20]
 8004360:	9404      	str	r4, [sp, #16]
 8004362:	9003      	str	r0, [sp, #12]
 8004364:	9102      	str	r1, [sp, #8]
 8004366:	9201      	str	r2, [sp, #4]
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	4663      	mov	r3, ip
 800436c:	4632      	mov	r2, r6
 800436e:	492d      	ldr	r1, [pc, #180]	; (8004424 <parseLine+0x2a8>)
 8004370:	482a      	ldr	r0, [pc, #168]	; (800441c <parseLine+0x2a0>)
 8004372:	f00a fd59 	bl	800ee28 <siprintf>
		sendUSBData (str, findStrEnd());
 8004376:	f7ff fee5 	bl	8004144 <findStrEnd>
 800437a:	4603      	mov	r3, r0
 800437c:	4619      	mov	r1, r3
 800437e:	4827      	ldr	r0, [pc, #156]	; (800441c <parseLine+0x2a0>)
 8004380:	f7ff feae 	bl	80040e0 <sendUSBData>
		break;
 8004384:	e0bd      	b.n	8004502 <parseLine+0x386>
		delay = Rafael_PanTompkins(dataSample);
 8004386:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800438a:	4618      	mov	r0, r3
 800438c:	f7fe fa9c 	bl	80028c8 <Rafael_PanTompkins>
 8004390:	4603      	mov	r3, r0
 8004392:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		s1 = Rafael_get_LPFilter_output();
 8004396:	f7ff fe2d 	bl	8003ff4 <Rafael_get_LPFilter_output>
 800439a:	4603      	mov	r3, r0
 800439c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		s2 = Rafael_get_HPFilter_output();
 800439e:	f7ff fe35 	bl	800400c <Rafael_get_HPFilter_output>
 80043a2:	4603      	mov	r3, r0
 80043a4:	85bb      	strh	r3, [r7, #44]	; 0x2c
		s3 = Rafael_get_DRFilter_output();
 80043a6:	f7ff fe3d 	bl	8004024 <Rafael_get_DRFilter_output>
 80043aa:	4603      	mov	r3, r0
 80043ac:	857b      	strh	r3, [r7, #42]	; 0x2a
		s4 = Rafael_get_SQRFilter_output();
 80043ae:	f7ff fe45 	bl	800403c <Rafael_get_SQRFilter_output>
 80043b2:	4603      	mov	r3, r0
 80043b4:	853b      	strh	r3, [r7, #40]	; 0x28
		s5 = Rafael_get_MVFilter_output();
 80043b6:	f7ff fe51 	bl	800405c <Rafael_get_MVFilter_output>
 80043ba:	4603      	mov	r3, r0
 80043bc:	84fb      	strh	r3, [r7, #38]	; 0x26
		ThI1 = Rafael_get_ThI1_output();
 80043be:	f7ff fe5d 	bl	800407c <Rafael_get_ThI1_output>
 80043c2:	4603      	mov	r3, r0
 80043c4:	84bb      	strh	r3, [r7, #36]	; 0x24
		ThF1 = Rafael_get_ThF1_output();
 80043c6:	f7ff fe65 	bl	8004094 <Rafael_get_ThF1_output>
 80043ca:	4603      	mov	r3, r0
 80043cc:	847b      	strh	r3, [r7, #34]	; 0x22
		sprintf(str,"%d,%d,%d,%d,%d,%d,%d,%d\r\n", delay, s1, s2, s3, s4, s5, ThI1, ThF1);
 80043ce:	f9b7 604c 	ldrsh.w	r6, [r7, #76]	; 0x4c
 80043d2:	f9b7 c02e 	ldrsh.w	ip, [r7, #46]	; 0x2e
 80043d6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80043da:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80043de:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80043e0:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80043e2:	f9b7 4024 	ldrsh.w	r4, [r7, #36]	; 0x24
 80043e6:	f9b7 5022 	ldrsh.w	r5, [r7, #34]	; 0x22
 80043ea:	9505      	str	r5, [sp, #20]
 80043ec:	9404      	str	r4, [sp, #16]
 80043ee:	9003      	str	r0, [sp, #12]
 80043f0:	9102      	str	r1, [sp, #8]
 80043f2:	9201      	str	r2, [sp, #4]
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	4663      	mov	r3, ip
 80043f8:	4632      	mov	r2, r6
 80043fa:	490b      	ldr	r1, [pc, #44]	; (8004428 <parseLine+0x2ac>)
 80043fc:	4807      	ldr	r0, [pc, #28]	; (800441c <parseLine+0x2a0>)
 80043fe:	f00a fd13 	bl	800ee28 <siprintf>
		sendUSBData (str, findStrEnd());
 8004402:	f7ff fe9f 	bl	8004144 <findStrEnd>
 8004406:	4603      	mov	r3, r0
 8004408:	4619      	mov	r1, r3
 800440a:	4804      	ldr	r0, [pc, #16]	; (800441c <parseLine+0x2a0>)
 800440c:	f7ff fe68 	bl	80040e0 <sendUSBData>
		break;
 8004410:	e077      	b.n	8004502 <parseLine+0x386>
 8004412:	bf00      	nop
 8004414:	20002c44 	.word	0x20002c44
 8004418:	08012a18 	.word	0x08012a18
 800441c:	20002c48 	.word	0x20002c48
 8004420:	08012a28 	.word	0x08012a28
 8004424:	08012a34 	.word	0x08012a34
 8004428:	08012a50 	.word	0x08012a50
		delay = arm_PT_ST(dataSample);
 800442c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8004430:	4618      	mov	r0, r3
 8004432:	f7fd fe91 	bl	8002158 <arm_PT_ST>
 8004436:	4603      	mov	r3, r0
 8004438:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		s1_f32 = arm_get_LPFilter_output();
 800443c:	f7fe f960 	bl	8002700 <arm_get_LPFilter_output>
 8004440:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
		s2_f32 = arm_get_HPFilter_output();
 8004444:	f7fe f96a 	bl	800271c <arm_get_HPFilter_output>
 8004448:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
		s3_f32 = arm_get_DRFilter_output();
 800444c:	f7fe f974 	bl	8002738 <arm_get_DRFilter_output>
 8004450:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
		s4_f32 = arm_get_SQRFilter_output();
 8004454:	f7fe f97e 	bl	8002754 <arm_get_SQRFilter_output>
 8004458:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
		s5_f32 = arm_get_MVFilter_output();
 800445c:	f7fe f988 	bl	8002770 <arm_get_MVFilter_output>
 8004460:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
		ThI1_f32 = arm_get_ThI1_output();
 8004464:	f7fe f992 	bl	800278c <arm_get_ThI1_output>
 8004468:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
		ThF1_f32 = arm_get_ThF1_output();
 800446c:	f7fe f99c 	bl	80027a8 <arm_get_ThF1_output>
 8004470:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
		sprintf(str,"%d,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\r\n", delay, s1_f32, s2_f32, s3_f32, s4_f32, s5_f32, ThI1_f32, ThF1_f32);
 8004474:	f9b7 604c 	ldrsh.w	r6, [r7, #76]	; 0x4c
 8004478:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800447a:	f7fc f83d 	bl	80004f8 <__aeabi_f2d>
 800447e:	4680      	mov	r8, r0
 8004480:	4689      	mov	r9, r1
 8004482:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004484:	f7fc f838 	bl	80004f8 <__aeabi_f2d>
 8004488:	4682      	mov	sl, r0
 800448a:	468b      	mov	fp, r1
 800448c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800448e:	f7fc f833 	bl	80004f8 <__aeabi_f2d>
 8004492:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8004496:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004498:	f7fc f82e 	bl	80004f8 <__aeabi_f2d>
 800449c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80044a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80044a2:	f7fc f829 	bl	80004f8 <__aeabi_f2d>
 80044a6:	e9c7 0100 	strd	r0, r1, [r7]
 80044aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80044ac:	f7fc f824 	bl	80004f8 <__aeabi_f2d>
 80044b0:	4604      	mov	r4, r0
 80044b2:	460d      	mov	r5, r1
 80044b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044b6:	f7fc f81f 	bl	80004f8 <__aeabi_f2d>
 80044ba:	4602      	mov	r2, r0
 80044bc:	460b      	mov	r3, r1
 80044be:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80044c2:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 80044c6:	ed97 7b00 	vldr	d7, [r7]
 80044ca:	ed8d 7b08 	vstr	d7, [sp, #32]
 80044ce:	ed97 7b02 	vldr	d7, [r7, #8]
 80044d2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80044d6:	ed97 7b04 	vldr	d7, [r7, #16]
 80044da:	ed8d 7b04 	vstr	d7, [sp, #16]
 80044de:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80044e2:	e9cd 8900 	strd	r8, r9, [sp]
 80044e6:	4632      	mov	r2, r6
 80044e8:	4908      	ldr	r1, [pc, #32]	; (800450c <parseLine+0x390>)
 80044ea:	4809      	ldr	r0, [pc, #36]	; (8004510 <parseLine+0x394>)
 80044ec:	f00a fc9c 	bl	800ee28 <siprintf>
		sendUSBData (str, findStrEnd());
 80044f0:	f7ff fe28 	bl	8004144 <findStrEnd>
 80044f4:	4603      	mov	r3, r0
 80044f6:	4619      	mov	r1, r3
 80044f8:	4805      	ldr	r0, [pc, #20]	; (8004510 <parseLine+0x394>)
 80044fa:	f7ff fdf1 	bl	80040e0 <sendUSBData>
		break;
 80044fe:	e000      	b.n	8004502 <parseLine+0x386>
		return;
 8004500:	bf00      	nop
		break;
	}
}
 8004502:	3754      	adds	r7, #84	; 0x54
 8004504:	46bd      	mov	sp, r7
 8004506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800450a:	bf00      	nop
 800450c:	08012a6c 	.word	0x08012a6c
 8004510:	20002c48 	.word	0x20002c48

08004514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800451a:	f000 fbcb 	bl	8004cb4 <HAL_Init>

  /* USER CODE BEGIN Init */
  applicationState.dataType = int16asBytes;
 800451e:	4b2b      	ldr	r3, [pc, #172]	; (80045cc <main+0xb8>)
 8004520:	2232      	movs	r2, #50	; 0x32
 8004522:	701a      	strb	r2, [r3, #0]
  applicationState.selectedImplementation = hoomam650;
 8004524:	4b29      	ldr	r3, [pc, #164]	; (80045cc <main+0xb8>)
 8004526:	2231      	movs	r2, #49	; 0x31
 8004528:	705a      	strb	r2, [r3, #1]
  PT_init();
 800452a:	f7fc fd37 	bl	8000f9c <PT_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800452e:	f000 f859 	bl	80045e4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8004532:	f000 f8c3 	bl	80046bc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004536:	f000 f945 	bl	80047c4 <MX_GPIO_Init>
  MX_USB_Device_Init();
 800453a:	f009 f827 	bl	800d58c <MX_USB_Device_Init>
  MX_I2C1_Init();
 800453e:	f000 f8db 	bl	80046f8 <MX_I2C1_Init>
  MX_TIM16_Init();
 8004542:	f000 f919 	bl	8004778 <MX_TIM16_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  extern uint32_t byteInBuffer;
  extern uint8_t* bufferPointer;
  extern uint8_t bufferFlag;
  HAL_TIM_Base_Start_IT(&htim16);
 8004546:	4822      	ldr	r0, [pc, #136]	; (80045d0 <main+0xbc>)
 8004548:	f004 fb2a 	bl	8008ba0 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if ((byteInBuffer>0) && (bufferFlag == 1))
 800454c:	4b21      	ldr	r3, [pc, #132]	; (80045d4 <main+0xc0>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0fb      	beq.n	800454c <main+0x38>
 8004554:	4b20      	ldr	r3, [pc, #128]	; (80045d8 <main+0xc4>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d1f7      	bne.n	800454c <main+0x38>
	 	  {
		  	  memcpy(&USBReciveBuffer[0],bufferPointer, byteInBuffer);
 800455c:	4b1f      	ldr	r3, [pc, #124]	; (80045dc <main+0xc8>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a1c      	ldr	r2, [pc, #112]	; (80045d4 <main+0xc0>)
 8004562:	6812      	ldr	r2, [r2, #0]
 8004564:	4619      	mov	r1, r3
 8004566:	481e      	ldr	r0, [pc, #120]	; (80045e0 <main+0xcc>)
 8004568:	f009 fdc8 	bl	800e0fc <memcpy>
		  	  uint32_t dataCount = byteInBuffer;
 800456c:	4b19      	ldr	r3, [pc, #100]	; (80045d4 <main+0xc0>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	603b      	str	r3, [r7, #0]
		  	  byteInBuffer = 0;
 8004572:	4b18      	ldr	r3, [pc, #96]	; (80045d4 <main+0xc0>)
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]
	 		  uint32_t count = 0;
 8004578:	2300      	movs	r3, #0
 800457a:	60fb      	str	r3, [r7, #12]
	 		  uint32_t i = 0;
 800457c:	2300      	movs	r3, #0
 800457e:	60bb      	str	r3, [r7, #8]
	 		  uint32_t index = 0;
 8004580:	2300      	movs	r3, #0
 8004582:	607b      	str	r3, [r7, #4]
	 		  do
	 		  {
	 			  i++;
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	3301      	adds	r3, #1
 8004588:	60bb      	str	r3, [r7, #8]
	 			  count++;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	3301      	adds	r3, #1
 800458e:	60fb      	str	r3, [r7, #12]
	 			  if (USBReciveBuffer[i]=='\n')
 8004590:	4a13      	ldr	r2, [pc, #76]	; (80045e0 <main+0xcc>)
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	4413      	add	r3, r2
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	2b0a      	cmp	r3, #10
 800459a:	d112      	bne.n	80045c2 <main+0xae>
	 			  {
	 				 count++;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	3301      	adds	r3, #1
 80045a0:	60fb      	str	r3, [r7, #12]
	 				 parseLine (&USBReciveBuffer[index], count);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a0e      	ldr	r2, [pc, #56]	; (80045e0 <main+0xcc>)
 80045a6:	4413      	add	r3, r2
 80045a8:	68f9      	ldr	r1, [r7, #12]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff fde6 	bl	800417c <parseLine>
	 				 index += count;
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	4413      	add	r3, r2
 80045b6:	607b      	str	r3, [r7, #4]
	 				 i++;
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	3301      	adds	r3, #1
 80045bc:	60bb      	str	r3, [r7, #8]
	 				 count = 0;
 80045be:	2300      	movs	r3, #0
 80045c0:	60fb      	str	r3, [r7, #12]
	 			  }
	 		  }while (i<dataCount);
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d3dc      	bcc.n	8004584 <main+0x70>
	  if ((byteInBuffer>0) && (bufferFlag == 1))
 80045ca:	e7bf      	b.n	800454c <main+0x38>
 80045cc:	20002c44 	.word	0x20002c44
 80045d0:	20002bf8 	.word	0x20002bf8
 80045d4:	20005030 	.word	0x20005030
 80045d8:	200000a4 	.word	0x200000a4
 80045dc:	200000a0 	.word	0x200000a0
 80045e0:	20003544 	.word	0x20003544

080045e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b09a      	sub	sp, #104	; 0x68
 80045e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80045ea:	f107 0320 	add.w	r3, r7, #32
 80045ee:	2248      	movs	r2, #72	; 0x48
 80045f0:	2100      	movs	r1, #0
 80045f2:	4618      	mov	r0, r3
 80045f4:	f009 fd90 	bl	800e118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045f8:	1d3b      	adds	r3, r7, #4
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	605a      	str	r2, [r3, #4]
 8004600:	609a      	str	r2, [r3, #8]
 8004602:	60da      	str	r2, [r3, #12]
 8004604:	611a      	str	r2, [r3, #16]
 8004606:	615a      	str	r2, [r3, #20]
 8004608:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800460a:	4b2b      	ldr	r3, [pc, #172]	; (80046b8 <SystemClock_Config+0xd4>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004612:	4a29      	ldr	r2, [pc, #164]	; (80046b8 <SystemClock_Config+0xd4>)
 8004614:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	4b27      	ldr	r3, [pc, #156]	; (80046b8 <SystemClock_Config+0xd4>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004622:	603b      	str	r3, [r7, #0]
 8004624:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8004626:	2326      	movs	r3, #38	; 0x26
 8004628:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 800462a:	2300      	movs	r3, #0
 800462c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800462e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004632:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004634:	2301      	movs	r3, #1
 8004636:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004638:	2340      	movs	r3, #64	; 0x40
 800463a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800463c:	2300      	movs	r3, #0
 800463e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004640:	2360      	movs	r3, #96	; 0x60
 8004642:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004644:	2302      	movs	r3, #2
 8004646:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004648:	2301      	movs	r3, #1
 800464a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800464c:	2300      	movs	r3, #0
 800464e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8004650:	2320      	movs	r3, #32
 8004652:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004654:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004658:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800465a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800465e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004660:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004664:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004666:	f107 0320 	add.w	r3, r7, #32
 800466a:	4618      	mov	r0, r3
 800466c:	f003 f81e 	bl	80076ac <HAL_RCC_OscConfig>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8004676:	f000 f8d3 	bl	8004820 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800467a:	236f      	movs	r3, #111	; 0x6f
 800467c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800467e:	2303      	movs	r3, #3
 8004680:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004682:	2300      	movs	r3, #0
 8004684:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004686:	2300      	movs	r3, #0
 8004688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800468a:	2300      	movs	r3, #0
 800468c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800468e:	2380      	movs	r3, #128	; 0x80
 8004690:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8004692:	2300      	movs	r3, #0
 8004694:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004696:	1d3b      	adds	r3, r7, #4
 8004698:	2103      	movs	r1, #3
 800469a:	4618      	mov	r0, r3
 800469c:	f003 fb7a 	bl	8007d94 <HAL_RCC_ClockConfig>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80046a6:	f000 f8bb 	bl	8004820 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80046aa:	f004 f90b 	bl	80088c4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80046ae:	bf00      	nop
 80046b0:	3768      	adds	r7, #104	; 0x68
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	58000400 	.word	0x58000400

080046bc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b094      	sub	sp, #80	; 0x50
 80046c0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80046c2:	463b      	mov	r3, r7
 80046c4:	2250      	movs	r2, #80	; 0x50
 80046c6:	2100      	movs	r1, #0
 80046c8:	4618      	mov	r0, r3
 80046ca:	f009 fd25 	bl	800e118 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80046ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046d2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80046d4:	2300      	movs	r3, #0
 80046d6:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80046d8:	2310      	movs	r3, #16
 80046da:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80046dc:	463b      	mov	r3, r7
 80046de:	4618      	mov	r0, r3
 80046e0:	f003 ff7a 	bl	80085d8 <HAL_RCCEx_PeriphCLKConfig>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80046ea:	f000 f899 	bl	8004820 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80046ee:	bf00      	nop
 80046f0:	3750      	adds	r7, #80	; 0x50
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80046fc:	4b1b      	ldr	r3, [pc, #108]	; (800476c <MX_I2C1_Init+0x74>)
 80046fe:	4a1c      	ldr	r2, [pc, #112]	; (8004770 <MX_I2C1_Init+0x78>)
 8004700:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8004702:	4b1a      	ldr	r3, [pc, #104]	; (800476c <MX_I2C1_Init+0x74>)
 8004704:	4a1b      	ldr	r2, [pc, #108]	; (8004774 <MX_I2C1_Init+0x7c>)
 8004706:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004708:	4b18      	ldr	r3, [pc, #96]	; (800476c <MX_I2C1_Init+0x74>)
 800470a:	2200      	movs	r2, #0
 800470c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800470e:	4b17      	ldr	r3, [pc, #92]	; (800476c <MX_I2C1_Init+0x74>)
 8004710:	2201      	movs	r2, #1
 8004712:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004714:	4b15      	ldr	r3, [pc, #84]	; (800476c <MX_I2C1_Init+0x74>)
 8004716:	2200      	movs	r2, #0
 8004718:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800471a:	4b14      	ldr	r3, [pc, #80]	; (800476c <MX_I2C1_Init+0x74>)
 800471c:	2200      	movs	r2, #0
 800471e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004720:	4b12      	ldr	r3, [pc, #72]	; (800476c <MX_I2C1_Init+0x74>)
 8004722:	2200      	movs	r2, #0
 8004724:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004726:	4b11      	ldr	r3, [pc, #68]	; (800476c <MX_I2C1_Init+0x74>)
 8004728:	2200      	movs	r2, #0
 800472a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800472c:	4b0f      	ldr	r3, [pc, #60]	; (800476c <MX_I2C1_Init+0x74>)
 800472e:	2200      	movs	r2, #0
 8004730:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004732:	480e      	ldr	r0, [pc, #56]	; (800476c <MX_I2C1_Init+0x74>)
 8004734:	f000 fdc4 	bl	80052c0 <HAL_I2C_Init>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800473e:	f000 f86f 	bl	8004820 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004742:	2100      	movs	r1, #0
 8004744:	4809      	ldr	r0, [pc, #36]	; (800476c <MX_I2C1_Init+0x74>)
 8004746:	f000 fe4a 	bl	80053de <HAL_I2CEx_ConfigAnalogFilter>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004750:	f000 f866 	bl	8004820 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004754:	2100      	movs	r1, #0
 8004756:	4805      	ldr	r0, [pc, #20]	; (800476c <MX_I2C1_Init+0x74>)
 8004758:	f000 fe8c 	bl	8005474 <HAL_I2CEx_ConfigDigitalFilter>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004762:	f000 f85d 	bl	8004820 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004766:	bf00      	nop
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	20002ba4 	.word	0x20002ba4
 8004770:	40005400 	.word	0x40005400
 8004774:	10707dbc 	.word	0x10707dbc

08004778 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800477c:	4b0f      	ldr	r3, [pc, #60]	; (80047bc <MX_TIM16_Init+0x44>)
 800477e:	4a10      	ldr	r2, [pc, #64]	; (80047c0 <MX_TIM16_Init+0x48>)
 8004780:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 639;
 8004782:	4b0e      	ldr	r3, [pc, #56]	; (80047bc <MX_TIM16_Init+0x44>)
 8004784:	f240 227f 	movw	r2, #639	; 0x27f
 8004788:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800478a:	4b0c      	ldr	r3, [pc, #48]	; (80047bc <MX_TIM16_Init+0x44>)
 800478c:	2200      	movs	r2, #0
 800478e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 8004790:	4b0a      	ldr	r3, [pc, #40]	; (80047bc <MX_TIM16_Init+0x44>)
 8004792:	2264      	movs	r2, #100	; 0x64
 8004794:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004796:	4b09      	ldr	r3, [pc, #36]	; (80047bc <MX_TIM16_Init+0x44>)
 8004798:	2200      	movs	r2, #0
 800479a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800479c:	4b07      	ldr	r3, [pc, #28]	; (80047bc <MX_TIM16_Init+0x44>)
 800479e:	2200      	movs	r2, #0
 80047a0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047a2:	4b06      	ldr	r3, [pc, #24]	; (80047bc <MX_TIM16_Init+0x44>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80047a8:	4804      	ldr	r0, [pc, #16]	; (80047bc <MX_TIM16_Init+0x44>)
 80047aa:	f004 f9a2 	bl	8008af2 <HAL_TIM_Base_Init>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80047b4:	f000 f834 	bl	8004820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80047b8:	bf00      	nop
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	20002bf8 	.word	0x20002bf8
 80047c0:	40014400 	.word	0x40014400

080047c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80047c8:	2002      	movs	r0, #2
 80047ca:	f7ff fc6f 	bl	80040ac <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ce:	2001      	movs	r0, #1
 80047d0:	f7ff fc6c 	bl	80040ac <LL_AHB2_GRP1_EnableClock>

}
 80047d4:	bf00      	nop
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim16)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a0c      	ldr	r2, [pc, #48]	; (8004814 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d110      	bne.n	800480a <HAL_TIM_PeriodElapsedCallback+0x32>
  {
	  if (USBBuffer_index> 0)
 80047e8:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00c      	beq.n	800480a <HAL_TIM_PeriodElapsedCallback+0x32>
	  {
		  while (CDC_Transmit_FS(USBBuffer, USBBuffer_index)!= USBD_OK){};
 80047f0:	bf00      	nop
 80047f2:	4b09      	ldr	r3, [pc, #36]	; (8004818 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	4619      	mov	r1, r3
 80047f8:	4808      	ldr	r0, [pc, #32]	; (800481c <HAL_TIM_PeriodElapsedCallback+0x44>)
 80047fa:	f008 ffad 	bl	800d758 <CDC_Transmit_FS>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1f6      	bne.n	80047f2 <HAL_TIM_PeriodElapsedCallback+0x1a>
		  USBBuffer_index = 0;
 8004804:	4b04      	ldr	r3, [pc, #16]	; (8004818 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8004806:	2200      	movs	r2, #0
 8004808:	801a      	strh	r2, [r3, #0]
	  }
  }
}
 800480a:	bf00      	nop
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	20002bf8 	.word	0x20002bf8
 8004818:	20003d44 	.word	0x20003d44
 800481c:	20002d44 	.word	0x20002d44

08004820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004820:	b480      	push	{r7}
 8004822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004824:	b672      	cpsid	i
}
 8004826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004828:	e7fe      	b.n	8004828 <Error_Handler+0x8>

0800482a <LL_AHB2_GRP1_EnableClock>:
{
 800482a:	b480      	push	{r7}
 800482c:	b085      	sub	sp, #20
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004836:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004838:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4313      	orrs	r3, r2
 8004840:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004846:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4013      	ands	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800484e:	68fb      	ldr	r3, [r7, #12]
}
 8004850:	bf00      	nop
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004868:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800486a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4313      	orrs	r3, r2
 8004872:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004878:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4013      	ands	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004880:	68fb      	ldr	r3, [r7, #12]
}
 8004882:	bf00      	nop
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800488e:	b480      	push	{r7}
 8004890:	b085      	sub	sp, #20
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800489a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800489c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80048a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4013      	ands	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80048b2:	68fb      	ldr	r3, [r7, #12]
}
 80048b4:	bf00      	nop
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048c4:	bf00      	nop
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
	...

080048d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b09c      	sub	sp, #112	; 0x70
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	605a      	str	r2, [r3, #4]
 80048e2:	609a      	str	r2, [r3, #8]
 80048e4:	60da      	str	r2, [r3, #12]
 80048e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80048e8:	f107 030c 	add.w	r3, r7, #12
 80048ec:	2250      	movs	r2, #80	; 0x50
 80048ee:	2100      	movs	r1, #0
 80048f0:	4618      	mov	r0, r3
 80048f2:	f009 fc11 	bl	800e118 <memset>
  if(hi2c->Instance==I2C1)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a17      	ldr	r2, [pc, #92]	; (8004958 <HAL_I2C_MspInit+0x88>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d126      	bne.n	800494e <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004900:	2304      	movs	r3, #4
 8004902:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004904:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004908:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800490a:	f107 030c 	add.w	r3, r7, #12
 800490e:	4618      	mov	r0, r3
 8004910:	f003 fe62 	bl	80085d8 <HAL_RCCEx_PeriphCLKConfig>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800491a:	f7ff ff81 	bl	8004820 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800491e:	2002      	movs	r0, #2
 8004920:	f7ff ff83 	bl	800482a <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004924:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004928:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800492a:	2312      	movs	r3, #18
 800492c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800492e:	2300      	movs	r3, #0
 8004930:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004932:	2300      	movs	r3, #0
 8004934:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004936:	2304      	movs	r3, #4
 8004938:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800493a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800493e:	4619      	mov	r1, r3
 8004940:	4806      	ldr	r0, [pc, #24]	; (800495c <HAL_I2C_MspInit+0x8c>)
 8004942:	f000 fb4d 	bl	8004fe0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004946:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800494a:	f7ff ff87 	bl	800485c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800494e:	bf00      	nop
 8004950:	3770      	adds	r7, #112	; 0x70
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	40005400 	.word	0x40005400
 800495c:	48000400 	.word	0x48000400

08004960 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a09      	ldr	r2, [pc, #36]	; (8004994 <HAL_TIM_Base_MspInit+0x34>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d10b      	bne.n	800498a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004972:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004976:	f7ff ff8a 	bl	800488e <LL_APB2_GRP1_EnableClock>
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800497a:	2200      	movs	r2, #0
 800497c:	2100      	movs	r1, #0
 800497e:	2019      	movs	r0, #25
 8004980:	f000 faf9 	bl	8004f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004984:	2019      	movs	r0, #25
 8004986:	f000 fb10 	bl	8004faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800498a:	bf00      	nop
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	40014400 	.word	0x40014400

08004998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800499c:	e7fe      	b.n	800499c <NMI_Handler+0x4>

0800499e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800499e:	b480      	push	{r7}
 80049a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049a2:	e7fe      	b.n	80049a2 <HardFault_Handler+0x4>

080049a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049a4:	b480      	push	{r7}
 80049a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049a8:	e7fe      	b.n	80049a8 <MemManage_Handler+0x4>

080049aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049aa:	b480      	push	{r7}
 80049ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049ae:	e7fe      	b.n	80049ae <BusFault_Handler+0x4>

080049b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049b4:	e7fe      	b.n	80049b4 <UsageFault_Handler+0x4>

080049b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049b6:	b480      	push	{r7}
 80049b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049ba:	bf00      	nop
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049c8:	bf00      	nop
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049d2:	b480      	push	{r7}
 80049d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049d6:	bf00      	nop
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049e4:	f000 f9c0 	bl	8004d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049e8:	bf00      	nop
 80049ea:	bd80      	pop	{r7, pc}

080049ec <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80049f0:	4802      	ldr	r0, [pc, #8]	; (80049fc <USB_LP_IRQHandler+0x10>)
 80049f2:	f000 fe86 	bl	8005702 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80049f6:	bf00      	nop
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	20005234 	.word	0x20005234

08004a00 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004a04:	4802      	ldr	r0, [pc, #8]	; (8004a10 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004a06:	f004 f919 	bl	8008c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004a0a:	bf00      	nop
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	20002bf8 	.word	0x20002bf8

08004a14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
	return 1;
 8004a18:	2301      	movs	r3, #1
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <_kill>:

int _kill(int pid, int sig)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004a2e:	f009 fb3b 	bl	800e0a8 <__errno>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2216      	movs	r2, #22
 8004a36:	601a      	str	r2, [r3, #0]
	return -1;
 8004a38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3708      	adds	r7, #8
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <_exit>:

void _exit (int status)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7ff ffe7 	bl	8004a24 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004a56:	e7fe      	b.n	8004a56 <_exit+0x12>

08004a58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a64:	2300      	movs	r3, #0
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	e00a      	b.n	8004a80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004a6a:	f3af 8000 	nop.w
 8004a6e:	4601      	mov	r1, r0
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	60ba      	str	r2, [r7, #8]
 8004a76:	b2ca      	uxtb	r2, r1
 8004a78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	617b      	str	r3, [r7, #20]
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	dbf0      	blt.n	8004a6a <_read+0x12>
	}

return len;
 8004a88:	687b      	ldr	r3, [r7, #4]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3718      	adds	r7, #24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b086      	sub	sp, #24
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	617b      	str	r3, [r7, #20]
 8004aa2:	e009      	b.n	8004ab8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	1c5a      	adds	r2, r3, #1
 8004aa8:	60ba      	str	r2, [r7, #8]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	dbf1      	blt.n	8004aa4 <_write+0x12>
	}
	return len;
 8004ac0:	687b      	ldr	r3, [r7, #4]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <_close>:

int _close(int file)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
	return -1;
 8004ad2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004af2:	605a      	str	r2, [r3, #4]
	return 0;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <_isatty>:

int _isatty(int file)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
	return 1;
 8004b0a:	2301      	movs	r3, #1
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
	return 0;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
	...

08004b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b3c:	4a14      	ldr	r2, [pc, #80]	; (8004b90 <_sbrk+0x5c>)
 8004b3e:	4b15      	ldr	r3, [pc, #84]	; (8004b94 <_sbrk+0x60>)
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b48:	4b13      	ldr	r3, [pc, #76]	; (8004b98 <_sbrk+0x64>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d102      	bne.n	8004b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b50:	4b11      	ldr	r3, [pc, #68]	; (8004b98 <_sbrk+0x64>)
 8004b52:	4a12      	ldr	r2, [pc, #72]	; (8004b9c <_sbrk+0x68>)
 8004b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b56:	4b10      	ldr	r3, [pc, #64]	; (8004b98 <_sbrk+0x64>)
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d207      	bcs.n	8004b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b64:	f009 faa0 	bl	800e0a8 <__errno>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	220c      	movs	r2, #12
 8004b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b72:	e009      	b.n	8004b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b74:	4b08      	ldr	r3, [pc, #32]	; (8004b98 <_sbrk+0x64>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b7a:	4b07      	ldr	r3, [pc, #28]	; (8004b98 <_sbrk+0x64>)
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4413      	add	r3, r2
 8004b82:	4a05      	ldr	r2, [pc, #20]	; (8004b98 <_sbrk+0x64>)
 8004b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b86:	68fb      	ldr	r3, [r7, #12]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3718      	adds	r7, #24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	20030000 	.word	0x20030000
 8004b94:	00000400 	.word	0x00000400
 8004b98:	20003d48 	.word	0x20003d48
 8004b9c:	20005758 	.word	0x20005758

08004ba0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8004ba4:	4b24      	ldr	r3, [pc, #144]	; (8004c38 <SystemInit+0x98>)
 8004ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004baa:	4a23      	ldr	r2, [pc, #140]	; (8004c38 <SystemInit+0x98>)
 8004bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bbe:	f043 0301 	orr.w	r3, r3, #1
 8004bc2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8004bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bc8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8004bcc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8004bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bd8:	4b18      	ldr	r3, [pc, #96]	; (8004c3c <SystemInit+0x9c>)
 8004bda:	4013      	ands	r3, r2
 8004bdc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8004bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004be6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bea:	f023 0305 	bic.w	r3, r3, #5
 8004bee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bfe:	f023 0301 	bic.w	r3, r3, #1
 8004c02:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8004c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c0a:	4a0d      	ldr	r2, [pc, #52]	; (8004c40 <SystemInit+0xa0>)
 8004c0c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8004c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c12:	4a0b      	ldr	r2, [pc, #44]	; (8004c40 <SystemInit+0xa0>)
 8004c14:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c24:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	619a      	str	r2, [r3, #24]
}
 8004c2e:	bf00      	nop
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	e000ed00 	.word	0xe000ed00
 8004c3c:	faf6fefb 	.word	0xfaf6fefb
 8004c40:	22041000 	.word	0x22041000

08004c44 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8004c44:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c46:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c48:	3304      	adds	r3, #4

08004c4a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c4a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c4c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8004c4e:	d3f9      	bcc.n	8004c44 <CopyDataInit>
  bx lr
 8004c50:	4770      	bx	lr

08004c52 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8004c52:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8004c54:	3004      	adds	r0, #4

08004c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8004c56:	4288      	cmp	r0, r1
  bcc FillZerobss
 8004c58:	d3fb      	bcc.n	8004c52 <FillZerobss>
  bx lr
 8004c5a:	4770      	bx	lr

08004c5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004c5c:	480c      	ldr	r0, [pc, #48]	; (8004c90 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8004c5e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004c60:	f7ff ff9e 	bl	8004ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8004c64:	480b      	ldr	r0, [pc, #44]	; (8004c94 <LoopForever+0x8>)
 8004c66:	490c      	ldr	r1, [pc, #48]	; (8004c98 <LoopForever+0xc>)
 8004c68:	4a0c      	ldr	r2, [pc, #48]	; (8004c9c <LoopForever+0x10>)
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	f7ff ffed 	bl	8004c4a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8004c70:	480b      	ldr	r0, [pc, #44]	; (8004ca0 <LoopForever+0x14>)
 8004c72:	490c      	ldr	r1, [pc, #48]	; (8004ca4 <LoopForever+0x18>)
 8004c74:	2300      	movs	r3, #0
 8004c76:	f7ff ffee 	bl	8004c56 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004c7a:	480b      	ldr	r0, [pc, #44]	; (8004ca8 <LoopForever+0x1c>)
 8004c7c:	490b      	ldr	r1, [pc, #44]	; (8004cac <LoopForever+0x20>)
 8004c7e:	2300      	movs	r3, #0
 8004c80:	f7ff ffe9 	bl	8004c56 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004c84:	f009 fa16 	bl	800e0b4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8004c88:	f7ff fc44 	bl	8004514 <main>

08004c8c <LoopForever>:

LoopForever:
  b LoopForever
 8004c8c:	e7fe      	b.n	8004c8c <LoopForever>
 8004c8e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8004c90:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8004c94:	20000004 	.word	0x20000004
 8004c98:	200002e4 	.word	0x200002e4
 8004c9c:	08013074 	.word	0x08013074
  INIT_BSS _sbss, _ebss
 8004ca0:	200002e4 	.word	0x200002e4
 8004ca4:	20005758 	.word	0x20005758
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004ca8:	20030000 	.word	0x20030000
 8004cac:	20030000 	.word	0x20030000

08004cb0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004cb0:	e7fe      	b.n	8004cb0 <ADC1_IRQHandler>
	...

08004cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004cbe:	4b0c      	ldr	r3, [pc, #48]	; (8004cf0 <HAL_Init+0x3c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a0b      	ldr	r2, [pc, #44]	; (8004cf0 <HAL_Init+0x3c>)
 8004cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cc8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cca:	2003      	movs	r0, #3
 8004ccc:	f000 f948 	bl	8004f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004cd0:	200f      	movs	r0, #15
 8004cd2:	f000 f80f 	bl	8004cf4 <HAL_InitTick>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d002      	beq.n	8004ce2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	71fb      	strb	r3, [r7, #7]
 8004ce0:	e001      	b.n	8004ce6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004ce2:	f7ff fded 	bl	80048c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004ce6:	79fb      	ldrb	r3, [r7, #7]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3708      	adds	r7, #8
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	58004000 	.word	0x58004000

08004cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8004d00:	4b17      	ldr	r3, [pc, #92]	; (8004d60 <HAL_InitTick+0x6c>)
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d024      	beq.n	8004d52 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004d08:	f003 f9f2 	bl	80080f0 <HAL_RCC_GetHCLKFreq>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	4b14      	ldr	r3, [pc, #80]	; (8004d60 <HAL_InitTick+0x6c>)
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	4619      	mov	r1, r3
 8004d14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d18:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 f950 	bl	8004fc6 <HAL_SYSTICK_Config>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10f      	bne.n	8004d4c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b0f      	cmp	r3, #15
 8004d30:	d809      	bhi.n	8004d46 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d32:	2200      	movs	r2, #0
 8004d34:	6879      	ldr	r1, [r7, #4]
 8004d36:	f04f 30ff 	mov.w	r0, #4294967295
 8004d3a:	f000 f91c 	bl	8004f76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004d3e:	4a09      	ldr	r2, [pc, #36]	; (8004d64 <HAL_InitTick+0x70>)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	e007      	b.n	8004d56 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	73fb      	strb	r3, [r7, #15]
 8004d4a:	e004      	b.n	8004d56 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	73fb      	strb	r3, [r7, #15]
 8004d50:	e001      	b.n	8004d56 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	20000010 	.word	0x20000010
 8004d64:	2000000c 	.word	0x2000000c

08004d68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004d6c:	4b06      	ldr	r3, [pc, #24]	; (8004d88 <HAL_IncTick+0x20>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	461a      	mov	r2, r3
 8004d72:	4b06      	ldr	r3, [pc, #24]	; (8004d8c <HAL_IncTick+0x24>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4413      	add	r3, r2
 8004d78:	4a04      	ldr	r2, [pc, #16]	; (8004d8c <HAL_IncTick+0x24>)
 8004d7a:	6013      	str	r3, [r2, #0]
}
 8004d7c:	bf00      	nop
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	20000010 	.word	0x20000010
 8004d8c:	20003d4c 	.word	0x20003d4c

08004d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  return uwTick;
 8004d94:	4b03      	ldr	r3, [pc, #12]	; (8004da4 <HAL_GetTick+0x14>)
 8004d96:	681b      	ldr	r3, [r3, #0]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	20003d4c 	.word	0x20003d4c

08004da8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004dac:	4b03      	ldr	r3, [pc, #12]	; (8004dbc <HAL_GetTickPrio+0x14>)
 8004dae:	681b      	ldr	r3, [r3, #0]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	2000000c 	.word	0x2000000c

08004dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f003 0307 	and.w	r3, r3, #7
 8004dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004dd0:	4b0c      	ldr	r3, [pc, #48]	; (8004e04 <__NVIC_SetPriorityGrouping+0x44>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ddc:	4013      	ands	r3, r2
 8004dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004de8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004df2:	4a04      	ldr	r2, [pc, #16]	; (8004e04 <__NVIC_SetPriorityGrouping+0x44>)
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	60d3      	str	r3, [r2, #12]
}
 8004df8:	bf00      	nop
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	e000ed00 	.word	0xe000ed00

08004e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e0c:	4b04      	ldr	r3, [pc, #16]	; (8004e20 <__NVIC_GetPriorityGrouping+0x18>)
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	0a1b      	lsrs	r3, r3, #8
 8004e12:	f003 0307 	and.w	r3, r3, #7
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	e000ed00 	.word	0xe000ed00

08004e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	db0b      	blt.n	8004e4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e36:	79fb      	ldrb	r3, [r7, #7]
 8004e38:	f003 021f 	and.w	r2, r3, #31
 8004e3c:	4907      	ldr	r1, [pc, #28]	; (8004e5c <__NVIC_EnableIRQ+0x38>)
 8004e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e42:	095b      	lsrs	r3, r3, #5
 8004e44:	2001      	movs	r0, #1
 8004e46:	fa00 f202 	lsl.w	r2, r0, r2
 8004e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	e000e100 	.word	0xe000e100

08004e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	4603      	mov	r3, r0
 8004e68:	6039      	str	r1, [r7, #0]
 8004e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	db0a      	blt.n	8004e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	b2da      	uxtb	r2, r3
 8004e78:	490c      	ldr	r1, [pc, #48]	; (8004eac <__NVIC_SetPriority+0x4c>)
 8004e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e7e:	0112      	lsls	r2, r2, #4
 8004e80:	b2d2      	uxtb	r2, r2
 8004e82:	440b      	add	r3, r1
 8004e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e88:	e00a      	b.n	8004ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	b2da      	uxtb	r2, r3
 8004e8e:	4908      	ldr	r1, [pc, #32]	; (8004eb0 <__NVIC_SetPriority+0x50>)
 8004e90:	79fb      	ldrb	r3, [r7, #7]
 8004e92:	f003 030f 	and.w	r3, r3, #15
 8004e96:	3b04      	subs	r3, #4
 8004e98:	0112      	lsls	r2, r2, #4
 8004e9a:	b2d2      	uxtb	r2, r2
 8004e9c:	440b      	add	r3, r1
 8004e9e:	761a      	strb	r2, [r3, #24]
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	e000e100 	.word	0xe000e100
 8004eb0:	e000ed00 	.word	0xe000ed00

08004eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b089      	sub	sp, #36	; 0x24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f003 0307 	and.w	r3, r3, #7
 8004ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	f1c3 0307 	rsb	r3, r3, #7
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	bf28      	it	cs
 8004ed2:	2304      	movcs	r3, #4
 8004ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	3304      	adds	r3, #4
 8004eda:	2b06      	cmp	r3, #6
 8004edc:	d902      	bls.n	8004ee4 <NVIC_EncodePriority+0x30>
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	3b03      	subs	r3, #3
 8004ee2:	e000      	b.n	8004ee6 <NVIC_EncodePriority+0x32>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef2:	43da      	mvns	r2, r3
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	401a      	ands	r2, r3
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004efc:	f04f 31ff 	mov.w	r1, #4294967295
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	fa01 f303 	lsl.w	r3, r1, r3
 8004f06:	43d9      	mvns	r1, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f0c:	4313      	orrs	r3, r2
         );
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3724      	adds	r7, #36	; 0x24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
	...

08004f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f2c:	d301      	bcc.n	8004f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e00f      	b.n	8004f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f32:	4a0a      	ldr	r2, [pc, #40]	; (8004f5c <SysTick_Config+0x40>)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	3b01      	subs	r3, #1
 8004f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f3a:	210f      	movs	r1, #15
 8004f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f40:	f7ff ff8e 	bl	8004e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f44:	4b05      	ldr	r3, [pc, #20]	; (8004f5c <SysTick_Config+0x40>)
 8004f46:	2200      	movs	r2, #0
 8004f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f4a:	4b04      	ldr	r3, [pc, #16]	; (8004f5c <SysTick_Config+0x40>)
 8004f4c:	2207      	movs	r2, #7
 8004f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	e000e010 	.word	0xe000e010

08004f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7ff ff29 	bl	8004dc0 <__NVIC_SetPriorityGrouping>
}
 8004f6e:	bf00      	nop
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b086      	sub	sp, #24
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	60b9      	str	r1, [r7, #8]
 8004f80:	607a      	str	r2, [r7, #4]
 8004f82:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f84:	f7ff ff40 	bl	8004e08 <__NVIC_GetPriorityGrouping>
 8004f88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	68b9      	ldr	r1, [r7, #8]
 8004f8e:	6978      	ldr	r0, [r7, #20]
 8004f90:	f7ff ff90 	bl	8004eb4 <NVIC_EncodePriority>
 8004f94:	4602      	mov	r2, r0
 8004f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f9a:	4611      	mov	r1, r2
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7ff ff5f 	bl	8004e60 <__NVIC_SetPriority>
}
 8004fa2:	bf00      	nop
 8004fa4:	3718      	adds	r7, #24
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b082      	sub	sp, #8
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7ff ff33 	bl	8004e24 <__NVIC_EnableIRQ>
}
 8004fbe:	bf00      	nop
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b082      	sub	sp, #8
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7ff ffa4 	bl	8004f1c <SysTick_Config>
 8004fd4:	4603      	mov	r3, r0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b087      	sub	sp, #28
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004fea:	2300      	movs	r3, #0
 8004fec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fee:	e14c      	b.n	800528a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 813e 	beq.w	8005284 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f003 0303 	and.w	r3, r3, #3
 8005010:	2b01      	cmp	r3, #1
 8005012:	d005      	beq.n	8005020 <HAL_GPIO_Init+0x40>
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f003 0303 	and.w	r3, r3, #3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d130      	bne.n	8005082 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	2203      	movs	r2, #3
 800502c:	fa02 f303 	lsl.w	r3, r2, r3
 8005030:	43db      	mvns	r3, r3
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	4013      	ands	r3, r2
 8005036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	68da      	ldr	r2, [r3, #12]
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	fa02 f303 	lsl.w	r3, r2, r3
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	4313      	orrs	r3, r2
 8005048:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005056:	2201      	movs	r2, #1
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	fa02 f303 	lsl.w	r3, r2, r3
 800505e:	43db      	mvns	r3, r3
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	4013      	ands	r3, r2
 8005064:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	091b      	lsrs	r3, r3, #4
 800506c:	f003 0201 	and.w	r2, r3, #1
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	fa02 f303 	lsl.w	r3, r2, r3
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	4313      	orrs	r3, r2
 800507a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f003 0303 	and.w	r3, r3, #3
 800508a:	2b03      	cmp	r3, #3
 800508c:	d017      	beq.n	80050be <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	005b      	lsls	r3, r3, #1
 8005098:	2203      	movs	r2, #3
 800509a:	fa02 f303 	lsl.w	r3, r2, r3
 800509e:	43db      	mvns	r3, r3
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	4013      	ands	r3, r2
 80050a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	689a      	ldr	r2, [r3, #8]
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	005b      	lsls	r3, r3, #1
 80050ae:	fa02 f303 	lsl.w	r3, r2, r3
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f003 0303 	and.w	r3, r3, #3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d123      	bne.n	8005112 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	08da      	lsrs	r2, r3, #3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3208      	adds	r2, #8
 80050d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	220f      	movs	r2, #15
 80050e2:	fa02 f303 	lsl.w	r3, r2, r3
 80050e6:	43db      	mvns	r3, r3
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	4013      	ands	r3, r2
 80050ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	691a      	ldr	r2, [r3, #16]
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	fa02 f303 	lsl.w	r3, r2, r3
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	4313      	orrs	r3, r2
 8005102:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	08da      	lsrs	r2, r3, #3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3208      	adds	r2, #8
 800510c:	6939      	ldr	r1, [r7, #16]
 800510e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	2203      	movs	r2, #3
 800511e:	fa02 f303 	lsl.w	r3, r2, r3
 8005122:	43db      	mvns	r3, r3
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	4013      	ands	r3, r2
 8005128:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f003 0203 	and.w	r2, r3, #3
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	fa02 f303 	lsl.w	r3, r2, r3
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	4313      	orrs	r3, r2
 800513e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800514e:	2b00      	cmp	r3, #0
 8005150:	f000 8098 	beq.w	8005284 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005154:	4a54      	ldr	r2, [pc, #336]	; (80052a8 <HAL_GPIO_Init+0x2c8>)
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	089b      	lsrs	r3, r3, #2
 800515a:	3302      	adds	r3, #2
 800515c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005160:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f003 0303 	and.w	r3, r3, #3
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	220f      	movs	r2, #15
 800516c:	fa02 f303 	lsl.w	r3, r2, r3
 8005170:	43db      	mvns	r3, r3
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	4013      	ands	r3, r2
 8005176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800517e:	d019      	beq.n	80051b4 <HAL_GPIO_Init+0x1d4>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a4a      	ldr	r2, [pc, #296]	; (80052ac <HAL_GPIO_Init+0x2cc>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d013      	beq.n	80051b0 <HAL_GPIO_Init+0x1d0>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a49      	ldr	r2, [pc, #292]	; (80052b0 <HAL_GPIO_Init+0x2d0>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d00d      	beq.n	80051ac <HAL_GPIO_Init+0x1cc>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a48      	ldr	r2, [pc, #288]	; (80052b4 <HAL_GPIO_Init+0x2d4>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d007      	beq.n	80051a8 <HAL_GPIO_Init+0x1c8>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a47      	ldr	r2, [pc, #284]	; (80052b8 <HAL_GPIO_Init+0x2d8>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d101      	bne.n	80051a4 <HAL_GPIO_Init+0x1c4>
 80051a0:	2304      	movs	r3, #4
 80051a2:	e008      	b.n	80051b6 <HAL_GPIO_Init+0x1d6>
 80051a4:	2307      	movs	r3, #7
 80051a6:	e006      	b.n	80051b6 <HAL_GPIO_Init+0x1d6>
 80051a8:	2303      	movs	r3, #3
 80051aa:	e004      	b.n	80051b6 <HAL_GPIO_Init+0x1d6>
 80051ac:	2302      	movs	r3, #2
 80051ae:	e002      	b.n	80051b6 <HAL_GPIO_Init+0x1d6>
 80051b0:	2301      	movs	r3, #1
 80051b2:	e000      	b.n	80051b6 <HAL_GPIO_Init+0x1d6>
 80051b4:	2300      	movs	r3, #0
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	f002 0203 	and.w	r2, r2, #3
 80051bc:	0092      	lsls	r2, r2, #2
 80051be:	4093      	lsls	r3, r2
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80051c6:	4938      	ldr	r1, [pc, #224]	; (80052a8 <HAL_GPIO_Init+0x2c8>)
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	089b      	lsrs	r3, r3, #2
 80051cc:	3302      	adds	r3, #2
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80051d4:	4b39      	ldr	r3, [pc, #228]	; (80052bc <HAL_GPIO_Init+0x2dc>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	43db      	mvns	r3, r3
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	4013      	ands	r3, r2
 80051e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d003      	beq.n	80051f8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80051f8:	4a30      	ldr	r2, [pc, #192]	; (80052bc <HAL_GPIO_Init+0x2dc>)
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80051fe:	4b2f      	ldr	r3, [pc, #188]	; (80052bc <HAL_GPIO_Init+0x2dc>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	43db      	mvns	r3, r3
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	4013      	ands	r3, r2
 800520c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4313      	orrs	r3, r2
 8005220:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005222:	4a26      	ldr	r2, [pc, #152]	; (80052bc <HAL_GPIO_Init+0x2dc>)
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005228:	4b24      	ldr	r3, [pc, #144]	; (80052bc <HAL_GPIO_Init+0x2dc>)
 800522a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800522e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	43db      	mvns	r3, r3
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	4013      	ands	r3, r2
 8005238:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4313      	orrs	r3, r2
 800524c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800524e:	4a1b      	ldr	r2, [pc, #108]	; (80052bc <HAL_GPIO_Init+0x2dc>)
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8005256:	4b19      	ldr	r3, [pc, #100]	; (80052bc <HAL_GPIO_Init+0x2dc>)
 8005258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800525c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	43db      	mvns	r3, r3
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	4013      	ands	r3, r2
 8005266:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d003      	beq.n	800527c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4313      	orrs	r3, r2
 800527a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800527c:	4a0f      	ldr	r2, [pc, #60]	; (80052bc <HAL_GPIO_Init+0x2dc>)
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	3301      	adds	r3, #1
 8005288:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	fa22 f303 	lsr.w	r3, r2, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	f47f aeab 	bne.w	8004ff0 <HAL_GPIO_Init+0x10>
  }
}
 800529a:	bf00      	nop
 800529c:	bf00      	nop
 800529e:	371c      	adds	r7, #28
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	40010000 	.word	0x40010000
 80052ac:	48000400 	.word	0x48000400
 80052b0:	48000800 	.word	0x48000800
 80052b4:	48000c00 	.word	0x48000c00
 80052b8:	48001000 	.word	0x48001000
 80052bc:	58000800 	.word	0x58000800

080052c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e081      	b.n	80053d6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d106      	bne.n	80052ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7ff faf2 	bl	80048d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2224      	movs	r2, #36	; 0x24
 80052f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0201 	bic.w	r2, r2, #1
 8005302:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005310:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005320:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d107      	bne.n	800533a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	689a      	ldr	r2, [r3, #8]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005336:	609a      	str	r2, [r3, #8]
 8005338:	e006      	b.n	8005348 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689a      	ldr	r2, [r3, #8]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005346:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	2b02      	cmp	r3, #2
 800534e:	d104      	bne.n	800535a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005358:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	6812      	ldr	r2, [r2, #0]
 8005364:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800536c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68da      	ldr	r2, [r3, #12]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800537c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	691a      	ldr	r2, [r3, #16]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	69d9      	ldr	r1, [r3, #28]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a1a      	ldr	r2, [r3, #32]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	430a      	orrs	r2, r1
 80053a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f042 0201 	orr.w	r2, r2, #1
 80053b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2220      	movs	r2, #32
 80053c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80053de:	b480      	push	{r7}
 80053e0:	b083      	sub	sp, #12
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b20      	cmp	r3, #32
 80053f2:	d138      	bne.n	8005466 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d101      	bne.n	8005402 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80053fe:	2302      	movs	r3, #2
 8005400:	e032      	b.n	8005468 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2224      	movs	r2, #36	; 0x24
 800540e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0201 	bic.w	r2, r2, #1
 8005420:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005430:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6819      	ldr	r1, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f042 0201 	orr.w	r2, r2, #1
 8005450:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2220      	movs	r2, #32
 8005456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005462:	2300      	movs	r3, #0
 8005464:	e000      	b.n	8005468 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005466:	2302      	movs	r3, #2
  }
}
 8005468:	4618      	mov	r0, r3
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b20      	cmp	r3, #32
 8005488:	d139      	bne.n	80054fe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005490:	2b01      	cmp	r3, #1
 8005492:	d101      	bne.n	8005498 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005494:	2302      	movs	r3, #2
 8005496:	e033      	b.n	8005500 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2224      	movs	r2, #36	; 0x24
 80054a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f022 0201 	bic.w	r2, r2, #1
 80054b6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80054c6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	021b      	lsls	r3, r3, #8
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f042 0201 	orr.w	r2, r2, #1
 80054e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2220      	movs	r2, #32
 80054ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054fa:	2300      	movs	r3, #0
 80054fc:	e000      	b.n	8005500 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80054fe:	2302      	movs	r3, #2
  }
}
 8005500:	4618      	mov	r0, r3
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800550c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800550e:	b08b      	sub	sp, #44	; 0x2c
 8005510:	af06      	add	r7, sp, #24
 8005512:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e0cb      	b.n	80056b6 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d106      	bne.n	8005538 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f008 fa8a 	bl	800da4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2203      	movs	r2, #3
 800553c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4618      	mov	r0, r3
 8005546:	f003 fd5a 	bl	8008ffe <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800554a:	2300      	movs	r3, #0
 800554c:	73fb      	strb	r3, [r7, #15]
 800554e:	e040      	b.n	80055d2 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005550:	7bfb      	ldrb	r3, [r7, #15]
 8005552:	6879      	ldr	r1, [r7, #4]
 8005554:	1c5a      	adds	r2, r3, #1
 8005556:	4613      	mov	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	00db      	lsls	r3, r3, #3
 800555e:	440b      	add	r3, r1
 8005560:	3301      	adds	r3, #1
 8005562:	2201      	movs	r2, #1
 8005564:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005566:	7bfb      	ldrb	r3, [r7, #15]
 8005568:	6879      	ldr	r1, [r7, #4]
 800556a:	1c5a      	adds	r2, r3, #1
 800556c:	4613      	mov	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	440b      	add	r3, r1
 8005576:	7bfa      	ldrb	r2, [r7, #15]
 8005578:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800557a:	7bfb      	ldrb	r3, [r7, #15]
 800557c:	6879      	ldr	r1, [r7, #4]
 800557e:	1c5a      	adds	r2, r3, #1
 8005580:	4613      	mov	r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	440b      	add	r3, r1
 800558a:	3303      	adds	r3, #3
 800558c:	2200      	movs	r2, #0
 800558e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005590:	7bfa      	ldrb	r2, [r7, #15]
 8005592:	6879      	ldr	r1, [r7, #4]
 8005594:	4613      	mov	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	440b      	add	r3, r1
 800559e:	3338      	adds	r3, #56	; 0x38
 80055a0:	2200      	movs	r2, #0
 80055a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80055a4:	7bfa      	ldrb	r2, [r7, #15]
 80055a6:	6879      	ldr	r1, [r7, #4]
 80055a8:	4613      	mov	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	440b      	add	r3, r1
 80055b2:	333c      	adds	r3, #60	; 0x3c
 80055b4:	2200      	movs	r2, #0
 80055b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80055b8:	7bfa      	ldrb	r2, [r7, #15]
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	4613      	mov	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4413      	add	r3, r2
 80055c2:	00db      	lsls	r3, r3, #3
 80055c4:	440b      	add	r3, r1
 80055c6:	3340      	adds	r3, #64	; 0x40
 80055c8:	2200      	movs	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
 80055ce:	3301      	adds	r3, #1
 80055d0:	73fb      	strb	r3, [r7, #15]
 80055d2:	7bfa      	ldrb	r2, [r7, #15]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d3b9      	bcc.n	8005550 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055dc:	2300      	movs	r3, #0
 80055de:	73fb      	strb	r3, [r7, #15]
 80055e0:	e044      	b.n	800566c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80055e2:	7bfa      	ldrb	r2, [r7, #15]
 80055e4:	6879      	ldr	r1, [r7, #4]
 80055e6:	4613      	mov	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4413      	add	r3, r2
 80055ec:	00db      	lsls	r3, r3, #3
 80055ee:	440b      	add	r3, r1
 80055f0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80055f4:	2200      	movs	r2, #0
 80055f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80055f8:	7bfa      	ldrb	r2, [r7, #15]
 80055fa:	6879      	ldr	r1, [r7, #4]
 80055fc:	4613      	mov	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	00db      	lsls	r3, r3, #3
 8005604:	440b      	add	r3, r1
 8005606:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800560a:	7bfa      	ldrb	r2, [r7, #15]
 800560c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800560e:	7bfa      	ldrb	r2, [r7, #15]
 8005610:	6879      	ldr	r1, [r7, #4]
 8005612:	4613      	mov	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	440b      	add	r3, r1
 800561c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005620:	2200      	movs	r2, #0
 8005622:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005624:	7bfa      	ldrb	r2, [r7, #15]
 8005626:	6879      	ldr	r1, [r7, #4]
 8005628:	4613      	mov	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	00db      	lsls	r3, r3, #3
 8005630:	440b      	add	r3, r1
 8005632:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005636:	2200      	movs	r2, #0
 8005638:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800563a:	7bfa      	ldrb	r2, [r7, #15]
 800563c:	6879      	ldr	r1, [r7, #4]
 800563e:	4613      	mov	r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4413      	add	r3, r2
 8005644:	00db      	lsls	r3, r3, #3
 8005646:	440b      	add	r3, r1
 8005648:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800564c:	2200      	movs	r2, #0
 800564e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005650:	7bfa      	ldrb	r2, [r7, #15]
 8005652:	6879      	ldr	r1, [r7, #4]
 8005654:	4613      	mov	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4413      	add	r3, r2
 800565a:	00db      	lsls	r3, r3, #3
 800565c:	440b      	add	r3, r1
 800565e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005662:	2200      	movs	r2, #0
 8005664:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005666:	7bfb      	ldrb	r3, [r7, #15]
 8005668:	3301      	adds	r3, #1
 800566a:	73fb      	strb	r3, [r7, #15]
 800566c:	7bfa      	ldrb	r2, [r7, #15]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	429a      	cmp	r2, r3
 8005674:	d3b5      	bcc.n	80055e2 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	603b      	str	r3, [r7, #0]
 800567c:	687e      	ldr	r6, [r7, #4]
 800567e:	466d      	mov	r5, sp
 8005680:	f106 0410 	add.w	r4, r6, #16
 8005684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005686:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005688:	6823      	ldr	r3, [r4, #0]
 800568a:	602b      	str	r3, [r5, #0]
 800568c:	1d33      	adds	r3, r6, #4
 800568e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005690:	6838      	ldr	r0, [r7, #0]
 8005692:	f003 fccf 	bl	8009034 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d102      	bne.n	80056b4 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f001 fc45 	bl	8006f3e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056be <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b082      	sub	sp, #8
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d101      	bne.n	80056d4 <HAL_PCD_Start+0x16>
 80056d0:	2302      	movs	r3, #2
 80056d2:	e012      	b.n	80056fa <HAL_PCD_Start+0x3c>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f003 fc75 	bl	8008fd0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f005 ff39 	bl	800b562 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b084      	sub	sp, #16
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4618      	mov	r0, r3
 8005710:	f005 ff3e 	bl	800b590 <USB_ReadInterrupts>
 8005714:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d003      	beq.n	8005728 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 fb05 	bl	8005d30 <PCD_EP_ISR_Handler>

    return;
 8005726:	e110      	b.n	800594a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800572e:	2b00      	cmp	r3, #0
 8005730:	d013      	beq.n	800575a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800573a:	b29a      	uxth	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005744:	b292      	uxth	r2, r2
 8005746:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f008 fa31 	bl	800dbb2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005750:	2100      	movs	r1, #0
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f8fc 	bl	8005950 <HAL_PCD_SetAddress>

    return;
 8005758:	e0f7      	b.n	800594a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00c      	beq.n	800577e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800576c:	b29a      	uxth	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005776:	b292      	uxth	r2, r2
 8005778:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800577c:	e0e5      	b.n	800594a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00c      	beq.n	80057a2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005790:	b29a      	uxth	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800579a:	b292      	uxth	r2, r2
 800579c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80057a0:	e0d3      	b.n	800594a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d034      	beq.n	8005816 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f022 0204 	bic.w	r2, r2, #4
 80057be:	b292      	uxth	r2, r2
 80057c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f022 0208 	bic.w	r2, r2, #8
 80057d6:	b292      	uxth	r2, r2
 80057d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d107      	bne.n	80057f6 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80057ee:	2100      	movs	r1, #0
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f008 fbd5 	bl	800dfa0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f008 fa14 	bl	800dc24 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005804:	b29a      	uxth	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800580e:	b292      	uxth	r2, r2
 8005810:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005814:	e099      	b.n	800594a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800581c:	2b00      	cmp	r3, #0
 800581e:	d027      	beq.n	8005870 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005828:	b29a      	uxth	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f042 0208 	orr.w	r2, r2, #8
 8005832:	b292      	uxth	r2, r2
 8005834:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005840:	b29a      	uxth	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800584a:	b292      	uxth	r2, r2
 800584c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005858:	b29a      	uxth	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f042 0204 	orr.w	r2, r2, #4
 8005862:	b292      	uxth	r2, r2
 8005864:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f008 f9c1 	bl	800dbf0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800586e:	e06c      	b.n	800594a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005876:	2b00      	cmp	r3, #0
 8005878:	d040      	beq.n	80058fc <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005882:	b29a      	uxth	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800588c:	b292      	uxth	r2, r2
 800588e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d12b      	bne.n	80058f4 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f042 0204 	orr.w	r2, r2, #4
 80058ae:	b292      	uxth	r2, r2
 80058b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80058bc:	b29a      	uxth	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f042 0208 	orr.w	r2, r2, #8
 80058c6:	b292      	uxth	r2, r2
 80058c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80058dc:	b29b      	uxth	r3, r3
 80058de:	089b      	lsrs	r3, r3, #2
 80058e0:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80058ea:	2101      	movs	r1, #1
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f008 fb57 	bl	800dfa0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80058f2:	e02a      	b.n	800594a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f008 f97b 	bl	800dbf0 <HAL_PCD_SuspendCallback>
    return;
 80058fa:	e026      	b.n	800594a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00f      	beq.n	8005926 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800590e:	b29a      	uxth	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005918:	b292      	uxth	r2, r2
 800591a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f008 f939 	bl	800db96 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005924:	e011      	b.n	800594a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00c      	beq.n	800594a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005938:	b29a      	uxth	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005942:	b292      	uxth	r2, r2
 8005944:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005948:	bf00      	nop
  }
}
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	460b      	mov	r3, r1
 800595a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005962:	2b01      	cmp	r3, #1
 8005964:	d101      	bne.n	800596a <HAL_PCD_SetAddress+0x1a>
 8005966:	2302      	movs	r3, #2
 8005968:	e013      	b.n	8005992 <HAL_PCD_SetAddress+0x42>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	78fa      	ldrb	r2, [r7, #3]
 8005976:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	78fa      	ldrb	r2, [r7, #3]
 8005980:	4611      	mov	r1, r2
 8005982:	4618      	mov	r0, r3
 8005984:	f005 fdd9 	bl	800b53a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b084      	sub	sp, #16
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	4608      	mov	r0, r1
 80059a4:	4611      	mov	r1, r2
 80059a6:	461a      	mov	r2, r3
 80059a8:	4603      	mov	r3, r0
 80059aa:	70fb      	strb	r3, [r7, #3]
 80059ac:	460b      	mov	r3, r1
 80059ae:	803b      	strh	r3, [r7, #0]
 80059b0:	4613      	mov	r3, r2
 80059b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80059b4:	2300      	movs	r3, #0
 80059b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80059b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	da0e      	bge.n	80059de <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059c0:	78fb      	ldrb	r3, [r7, #3]
 80059c2:	f003 0307 	and.w	r3, r3, #7
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	4613      	mov	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	00db      	lsls	r3, r3, #3
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	4413      	add	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2201      	movs	r2, #1
 80059da:	705a      	strb	r2, [r3, #1]
 80059dc:	e00e      	b.n	80059fc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059de:	78fb      	ldrb	r3, [r7, #3]
 80059e0:	f003 0207 	and.w	r2, r3, #7
 80059e4:	4613      	mov	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	4413      	add	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80059fc:	78fb      	ldrb	r3, [r7, #3]
 80059fe:	f003 0307 	and.w	r3, r3, #7
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005a08:	883a      	ldrh	r2, [r7, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	78ba      	ldrb	r2, [r7, #2]
 8005a12:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005a14:	78bb      	ldrb	r3, [r7, #2]
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d102      	bne.n	8005a20 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d101      	bne.n	8005a2e <HAL_PCD_EP_Open+0x94>
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	e00e      	b.n	8005a4c <HAL_PCD_EP_Open+0xb2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68f9      	ldr	r1, [r7, #12]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f003 fb1b 	bl	8009078 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005a4a:	7afb      	ldrb	r3, [r7, #11]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	da0e      	bge.n	8005a86 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a68:	78fb      	ldrb	r3, [r7, #3]
 8005a6a:	f003 0307 	and.w	r3, r3, #7
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	4613      	mov	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4413      	add	r3, r2
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2201      	movs	r2, #1
 8005a82:	705a      	strb	r2, [r3, #1]
 8005a84:	e00e      	b.n	8005aa4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a86:	78fb      	ldrb	r3, [r7, #3]
 8005a88:	f003 0207 	and.w	r2, r3, #7
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	00db      	lsls	r3, r3, #3
 8005a94:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005aa4:	78fb      	ldrb	r3, [r7, #3]
 8005aa6:	f003 0307 	and.w	r3, r3, #7
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d101      	bne.n	8005abe <HAL_PCD_EP_Close+0x6a>
 8005aba:	2302      	movs	r3, #2
 8005abc:	e00e      	b.n	8005adc <HAL_PCD_EP_Close+0x88>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68f9      	ldr	r1, [r7, #12]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f003 fe97 	bl	8009800 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b086      	sub	sp, #24
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	607a      	str	r2, [r7, #4]
 8005aee:	603b      	str	r3, [r7, #0]
 8005af0:	460b      	mov	r3, r1
 8005af2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005af4:	7afb      	ldrb	r3, [r7, #11]
 8005af6:	f003 0207 	and.w	r2, r3, #7
 8005afa:	4613      	mov	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	00db      	lsls	r3, r3, #3
 8005b02:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	4413      	add	r3, r2
 8005b0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2200      	movs	r2, #0
 8005b22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b24:	7afb      	ldrb	r3, [r7, #11]
 8005b26:	f003 0307 	and.w	r3, r3, #7
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6979      	ldr	r1, [r7, #20]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f004 f84f 	bl	8009bda <USB_EPStartXfer>

  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3718      	adds	r7, #24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b083      	sub	sp, #12
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
 8005b4e:	460b      	mov	r3, r1
 8005b50:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005b52:	78fb      	ldrb	r3, [r7, #3]
 8005b54:	f003 0207 	and.w	r2, r3, #7
 8005b58:	6879      	ldr	r1, [r7, #4]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4413      	add	r3, r2
 8005b60:	00db      	lsls	r3, r3, #3
 8005b62:	440b      	add	r3, r1
 8005b64:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005b68:	681b      	ldr	r3, [r3, #0]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b086      	sub	sp, #24
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	60f8      	str	r0, [r7, #12]
 8005b7e:	607a      	str	r2, [r7, #4]
 8005b80:	603b      	str	r3, [r7, #0]
 8005b82:	460b      	mov	r3, r1
 8005b84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b86:	7afb      	ldrb	r3, [r7, #11]
 8005b88:	f003 0307 	and.w	r3, r3, #7
 8005b8c:	1c5a      	adds	r2, r3, #1
 8005b8e:	4613      	mov	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4413      	add	r3, r2
 8005b94:	00db      	lsls	r3, r3, #3
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	4413      	add	r3, r2
 8005b9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	683a      	ldr	r2, [r7, #0]
 8005ba6:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bc2:	7afb      	ldrb	r3, [r7, #11]
 8005bc4:	f003 0307 	and.w	r3, r3, #7
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6979      	ldr	r1, [r7, #20]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f004 f800 	bl	8009bda <USB_EPStartXfer>

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3718      	adds	r7, #24
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	460b      	mov	r3, r1
 8005bee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005bf0:	78fb      	ldrb	r3, [r7, #3]
 8005bf2:	f003 0207 	and.w	r2, r3, #7
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d901      	bls.n	8005c02 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e03e      	b.n	8005c80 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	da0e      	bge.n	8005c28 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c0a:	78fb      	ldrb	r3, [r7, #3]
 8005c0c:	f003 0307 	and.w	r3, r3, #7
 8005c10:	1c5a      	adds	r2, r3, #1
 8005c12:	4613      	mov	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	00db      	lsls	r3, r3, #3
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2201      	movs	r2, #1
 8005c24:	705a      	strb	r2, [r3, #1]
 8005c26:	e00c      	b.n	8005c42 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c28:	78fa      	ldrb	r2, [r7, #3]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4413      	add	r3, r2
 8005c30:	00db      	lsls	r3, r3, #3
 8005c32:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	4413      	add	r3, r2
 8005c3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2201      	movs	r2, #1
 8005c46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c48:	78fb      	ldrb	r3, [r7, #3]
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d101      	bne.n	8005c62 <HAL_PCD_EP_SetStall+0x7e>
 8005c5e:	2302      	movs	r3, #2
 8005c60:	e00e      	b.n	8005c80 <HAL_PCD_EP_SetStall+0x9c>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68f9      	ldr	r1, [r7, #12]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f005 fb63 	bl	800b33c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	460b      	mov	r3, r1
 8005c92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005c94:	78fb      	ldrb	r3, [r7, #3]
 8005c96:	f003 020f 	and.w	r2, r3, #15
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d901      	bls.n	8005ca6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e040      	b.n	8005d28 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005ca6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	da0e      	bge.n	8005ccc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cae:	78fb      	ldrb	r3, [r7, #3]
 8005cb0:	f003 0307 	and.w	r3, r3, #7
 8005cb4:	1c5a      	adds	r2, r3, #1
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	00db      	lsls	r3, r3, #3
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	705a      	strb	r2, [r3, #1]
 8005cca:	e00e      	b.n	8005cea <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ccc:	78fb      	ldrb	r3, [r7, #3]
 8005cce:	f003 0207 	and.w	r2, r3, #7
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cf0:	78fb      	ldrb	r3, [r7, #3]
 8005cf2:	f003 0307 	and.w	r3, r3, #7
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d101      	bne.n	8005d0a <HAL_PCD_EP_ClrStall+0x82>
 8005d06:	2302      	movs	r3, #2
 8005d08:	e00e      	b.n	8005d28 <HAL_PCD_EP_ClrStall+0xa0>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68f9      	ldr	r1, [r7, #12]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f005 fb60 	bl	800b3de <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b096      	sub	sp, #88	; 0x58
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005d38:	e3b1      	b.n	800649e <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d42:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005d46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	f003 030f 	and.w	r3, r3, #15
 8005d50:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8005d54:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f040 8173 	bne.w	8006044 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005d5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d62:	f003 0310 	and.w	r3, r3, #16
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d150      	bne.n	8005e0c <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	881b      	ldrh	r3, [r3, #0]
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d7a:	81fb      	strh	r3, [r7, #14]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	89fb      	ldrh	r3, [r7, #14]
 8005d82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	3328      	adds	r3, #40	; 0x28
 8005d92:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	461a      	mov	r2, r3
 8005da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	00db      	lsls	r3, r3, #3
 8005da6:	4413      	add	r3, r2
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	6812      	ldr	r2, [r2, #0]
 8005dac:	4413      	add	r3, r2
 8005dae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dba:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dbe:	695a      	ldr	r2, [r3, #20]
 8005dc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dc2:	69db      	ldr	r3, [r3, #28]
 8005dc4:	441a      	add	r2, r3
 8005dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dc8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005dca:	2100      	movs	r1, #0
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f007 fec8 	bl	800db62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f000 835f 	beq.w	800649e <PCD_EP_ISR_Handler+0x76e>
 8005de0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f040 835a 	bne.w	800649e <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005df6:	b2da      	uxtb	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	b292      	uxth	r2, r2
 8005dfe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005e0a:	e348      	b.n	800649e <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005e12:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	881b      	ldrh	r3, [r3, #0]
 8005e1a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005e1e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005e22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d032      	beq.n	8005e90 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	461a      	mov	r2, r3
 8005e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	00db      	lsls	r3, r3, #3
 8005e3c:	4413      	add	r3, r2
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	6812      	ldr	r2, [r2, #0]
 8005e42:	4413      	add	r3, r2
 8005e44:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e48:	881b      	ldrh	r3, [r3, #0]
 8005e4a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e50:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6818      	ldr	r0, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e5e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005e60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e62:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	f005 fbe5 	bl	800b634 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	881b      	ldrh	r3, [r3, #0]
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005e76:	4013      	ands	r3, r2
 8005e78:	823b      	strh	r3, [r7, #16]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	8a3a      	ldrh	r2, [r7, #16]
 8005e80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e84:	b292      	uxth	r2, r2
 8005e86:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f007 fe3d 	bl	800db08 <HAL_PCD_SetupStageCallback>
 8005e8e:	e306      	b.n	800649e <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005e90:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f280 8302 	bge.w	800649e <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	83fb      	strh	r3, [r7, #30]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	8bfa      	ldrh	r2, [r7, #30]
 8005eb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005eb4:	b292      	uxth	r2, r2
 8005eb6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	4413      	add	r3, r2
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	6812      	ldr	r2, [r2, #0]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005edc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ede:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ee2:	69db      	ldr	r3, [r3, #28]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d019      	beq.n	8005f1c <PCD_EP_ISR_Handler+0x1ec>
 8005ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d015      	beq.n	8005f1c <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6818      	ldr	r0, [r3, #0]
 8005ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ef6:	6959      	ldr	r1, [r3, #20]
 8005ef8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005efa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005efe:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	f005 fb97 	bl	800b634 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005f06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f08:	695a      	ldr	r2, [r3, #20]
 8005f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f0c:	69db      	ldr	r3, [r3, #28]
 8005f0e:	441a      	add	r2, r3
 8005f10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f12:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005f14:	2100      	movs	r1, #0
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f007 fe08 	bl	800db2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005f26:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005f2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f040 82b5 	bne.w	800649e <PCD_EP_ISR_Handler+0x76e>
 8005f34:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005f38:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005f3c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f40:	f000 82ad 	beq.w	800649e <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	61bb      	str	r3, [r7, #24]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	461a      	mov	r2, r3
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	4413      	add	r3, r2
 8005f5a:	61bb      	str	r3, [r7, #24]
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f62:	617b      	str	r3, [r7, #20]
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	881b      	ldrh	r3, [r3, #0]
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	801a      	strh	r2, [r3, #0]
 8005f74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	2b3e      	cmp	r3, #62	; 0x3e
 8005f7a:	d91d      	bls.n	8005fb8 <PCD_EP_ISR_Handler+0x288>
 8005f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	095b      	lsrs	r3, r3, #5
 8005f82:	647b      	str	r3, [r7, #68]	; 0x44
 8005f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	f003 031f 	and.w	r3, r3, #31
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d102      	bne.n	8005f96 <PCD_EP_ISR_Handler+0x266>
 8005f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f92:	3b01      	subs	r3, #1
 8005f94:	647b      	str	r3, [r7, #68]	; 0x44
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	881b      	ldrh	r3, [r3, #0]
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	029b      	lsls	r3, r3, #10
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	801a      	strh	r2, [r3, #0]
 8005fb6:	e026      	b.n	8006006 <PCD_EP_ISR_Handler+0x2d6>
 8005fb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10a      	bne.n	8005fd6 <PCD_EP_ISR_Handler+0x2a6>
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	801a      	strh	r2, [r3, #0]
 8005fd4:	e017      	b.n	8006006 <PCD_EP_ISR_Handler+0x2d6>
 8005fd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	085b      	lsrs	r3, r3, #1
 8005fdc:	647b      	str	r3, [r7, #68]	; 0x44
 8005fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d002      	beq.n	8005ff0 <PCD_EP_ISR_Handler+0x2c0>
 8005fea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fec:	3301      	adds	r3, #1
 8005fee:	647b      	str	r3, [r7, #68]	; 0x44
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	029b      	lsls	r3, r3, #10
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	4313      	orrs	r3, r2
 8006000:	b29a      	uxth	r2, r3
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	881b      	ldrh	r3, [r3, #0]
 800600c:	b29b      	uxth	r3, r3
 800600e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006016:	827b      	strh	r3, [r7, #18]
 8006018:	8a7b      	ldrh	r3, [r7, #18]
 800601a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800601e:	827b      	strh	r3, [r7, #18]
 8006020:	8a7b      	ldrh	r3, [r7, #18]
 8006022:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006026:	827b      	strh	r3, [r7, #18]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	8a7b      	ldrh	r3, [r7, #18]
 800602e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800603a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800603e:	b29b      	uxth	r3, r3
 8006040:	8013      	strh	r3, [r2, #0]
 8006042:	e22c      	b.n	800649e <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	461a      	mov	r2, r3
 800604a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	881b      	ldrh	r3, [r3, #0]
 8006054:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006058:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800605c:	2b00      	cmp	r3, #0
 800605e:	f280 80f6 	bge.w	800624e <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	461a      	mov	r2, r3
 8006068:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	b29a      	uxth	r2, r3
 8006074:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006078:	4013      	ands	r3, r2
 800607a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	461a      	mov	r2, r3
 8006084:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4413      	add	r3, r2
 800608c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006090:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006094:	b292      	uxth	r2, r2
 8006096:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006098:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800609c:	4613      	mov	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	4413      	add	r3, r2
 80060ac:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80060ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060b0:	7b1b      	ldrb	r3, [r3, #12]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d123      	bne.n	80060fe <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060be:	b29b      	uxth	r3, r3
 80060c0:	461a      	mov	r2, r3
 80060c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	00db      	lsls	r3, r3, #3
 80060c8:	4413      	add	r3, r2
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	6812      	ldr	r2, [r2, #0]
 80060ce:	4413      	add	r3, r2
 80060d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060d4:	881b      	ldrh	r3, [r3, #0]
 80060d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060da:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80060de:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f000 808e 	beq.w	8006204 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6818      	ldr	r0, [r3, #0]
 80060ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060ee:	6959      	ldr	r1, [r3, #20]
 80060f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060f2:	88da      	ldrh	r2, [r3, #6]
 80060f4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80060f8:	f005 fa9c 	bl	800b634 <USB_ReadPMA>
 80060fc:	e082      	b.n	8006204 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80060fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006100:	78db      	ldrb	r3, [r3, #3]
 8006102:	2b02      	cmp	r3, #2
 8006104:	d10a      	bne.n	800611c <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006106:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800610a:	461a      	mov	r2, r3
 800610c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f9d3 	bl	80064ba <HAL_PCD_EP_DB_Receive>
 8006114:	4603      	mov	r3, r0
 8006116:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800611a:	e073      	b.n	8006204 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	461a      	mov	r2, r3
 8006122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	881b      	ldrh	r3, [r3, #0]
 800612c:	b29b      	uxth	r3, r3
 800612e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006136:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	461a      	mov	r2, r3
 8006140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	441a      	add	r2, r3
 8006148:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800614c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006158:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800615c:	b29b      	uxth	r3, r3
 800615e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	461a      	mov	r2, r3
 8006166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	881b      	ldrh	r3, [r3, #0]
 8006170:	b29b      	uxth	r3, r3
 8006172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d022      	beq.n	80061c0 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006182:	b29b      	uxth	r3, r3
 8006184:	461a      	mov	r2, r3
 8006186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	00db      	lsls	r3, r3, #3
 800618c:	4413      	add	r3, r2
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	6812      	ldr	r2, [r2, #0]
 8006192:	4413      	add	r3, r2
 8006194:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800619e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80061a2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d02c      	beq.n	8006204 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6818      	ldr	r0, [r3, #0]
 80061ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061b0:	6959      	ldr	r1, [r3, #20]
 80061b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061b4:	891a      	ldrh	r2, [r3, #8]
 80061b6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80061ba:	f005 fa3b 	bl	800b634 <USB_ReadPMA>
 80061be:	e021      	b.n	8006204 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	461a      	mov	r2, r3
 80061cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	00db      	lsls	r3, r3, #3
 80061d2:	4413      	add	r3, r2
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	6812      	ldr	r2, [r2, #0]
 80061d8:	4413      	add	r3, r2
 80061da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80061de:	881b      	ldrh	r3, [r3, #0]
 80061e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061e4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80061e8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d009      	beq.n	8006204 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6818      	ldr	r0, [r3, #0]
 80061f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061f6:	6959      	ldr	r1, [r3, #20]
 80061f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061fa:	895a      	ldrh	r2, [r3, #10]
 80061fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006200:	f005 fa18 	bl	800b634 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006206:	69da      	ldr	r2, [r3, #28]
 8006208:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800620c:	441a      	add	r2, r3
 800620e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006210:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006214:	695a      	ldr	r2, [r3, #20]
 8006216:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800621a:	441a      	add	r2, r3
 800621c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800621e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d005      	beq.n	8006234 <PCD_EP_ISR_Handler+0x504>
 8006228:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800622c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	429a      	cmp	r2, r3
 8006232:	d206      	bcs.n	8006242 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	4619      	mov	r1, r3
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f007 fc76 	bl	800db2c <HAL_PCD_DataOutStageCallback>
 8006240:	e005      	b.n	800624e <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006248:	4618      	mov	r0, r3
 800624a:	f003 fcc6 	bl	8009bda <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800624e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006256:	2b00      	cmp	r3, #0
 8006258:	f000 8121 	beq.w	800649e <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 800625c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006260:	1c5a      	adds	r2, r3, #1
 8006262:	4613      	mov	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4413      	add	r3, r2
 8006268:	00db      	lsls	r3, r3, #3
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	4413      	add	r3, r2
 800626e:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	461a      	mov	r2, r3
 8006276:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	881b      	ldrh	r3, [r3, #0]
 8006280:	b29b      	uxth	r3, r3
 8006282:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800628a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	461a      	mov	r2, r3
 8006294:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	441a      	add	r2, r3
 800629c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80062a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80062ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062ae:	78db      	ldrb	r3, [r3, #3]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	f040 80a2 	bne.w	80063fa <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 80062b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062b8:	2200      	movs	r2, #0
 80062ba:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80062bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062be:	7b1b      	ldrb	r3, [r3, #12]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f000 8093 	beq.w	80063ec <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80062c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80062ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d046      	beq.n	8006360 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80062d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062d4:	785b      	ldrb	r3, [r3, #1]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d126      	bne.n	8006328 <PCD_EP_ISR_Handler+0x5f8>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	627b      	str	r3, [r7, #36]	; 0x24
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	461a      	mov	r2, r3
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	4413      	add	r3, r2
 80062f0:	627b      	str	r3, [r7, #36]	; 0x24
 80062f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	00da      	lsls	r2, r3, #3
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	4413      	add	r3, r2
 80062fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006300:	623b      	str	r3, [r7, #32]
 8006302:	6a3b      	ldr	r3, [r7, #32]
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	b29b      	uxth	r3, r3
 8006308:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800630c:	b29a      	uxth	r2, r3
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	801a      	strh	r2, [r3, #0]
 8006312:	6a3b      	ldr	r3, [r7, #32]
 8006314:	881b      	ldrh	r3, [r3, #0]
 8006316:	b29b      	uxth	r3, r3
 8006318:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800631c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006320:	b29a      	uxth	r2, r3
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	801a      	strh	r2, [r3, #0]
 8006326:	e061      	b.n	80063ec <PCD_EP_ISR_Handler+0x6bc>
 8006328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800632a:	785b      	ldrb	r3, [r3, #1]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d15d      	bne.n	80063ec <PCD_EP_ISR_Handler+0x6bc>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800633e:	b29b      	uxth	r3, r3
 8006340:	461a      	mov	r2, r3
 8006342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006344:	4413      	add	r3, r2
 8006346:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006348:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	00da      	lsls	r2, r3, #3
 800634e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006350:	4413      	add	r3, r2
 8006352:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006356:	62bb      	str	r3, [r7, #40]	; 0x28
 8006358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635a:	2200      	movs	r2, #0
 800635c:	801a      	strh	r2, [r3, #0]
 800635e:	e045      	b.n	80063ec <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006368:	785b      	ldrb	r3, [r3, #1]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d126      	bne.n	80063bc <PCD_EP_ISR_Handler+0x68c>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	637b      	str	r3, [r7, #52]	; 0x34
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800637c:	b29b      	uxth	r3, r3
 800637e:	461a      	mov	r2, r3
 8006380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006382:	4413      	add	r3, r2
 8006384:	637b      	str	r3, [r7, #52]	; 0x34
 8006386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	00da      	lsls	r2, r3, #3
 800638c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800638e:	4413      	add	r3, r2
 8006390:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006394:	633b      	str	r3, [r7, #48]	; 0x30
 8006396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	b29b      	uxth	r3, r3
 800639c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a4:	801a      	strh	r2, [r3, #0]
 80063a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b8:	801a      	strh	r2, [r3, #0]
 80063ba:	e017      	b.n	80063ec <PCD_EP_ISR_Handler+0x6bc>
 80063bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063be:	785b      	ldrb	r3, [r3, #1]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d113      	bne.n	80063ec <PCD_EP_ISR_Handler+0x6bc>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	461a      	mov	r2, r3
 80063d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d2:	4413      	add	r3, r2
 80063d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	00da      	lsls	r2, r3, #3
 80063dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063de:	4413      	add	r3, r2
 80063e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80063e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80063e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e8:	2200      	movs	r2, #0
 80063ea:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80063ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	4619      	mov	r1, r3
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f007 fbb5 	bl	800db62 <HAL_PCD_DataInStageCallback>
 80063f8:	e051      	b.n	800649e <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80063fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80063fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006402:	2b00      	cmp	r3, #0
 8006404:	d144      	bne.n	8006490 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800640e:	b29b      	uxth	r3, r3
 8006410:	461a      	mov	r2, r3
 8006412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	00db      	lsls	r3, r3, #3
 8006418:	4413      	add	r3, r2
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	6812      	ldr	r2, [r2, #0]
 800641e:	4413      	add	r3, r2
 8006420:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800642a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800642e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006430:	699a      	ldr	r2, [r3, #24]
 8006432:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006436:	429a      	cmp	r2, r3
 8006438:	d907      	bls.n	800644a <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 800643a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800643c:	699a      	ldr	r2, [r3, #24]
 800643e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006442:	1ad2      	subs	r2, r2, r3
 8006444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006446:	619a      	str	r2, [r3, #24]
 8006448:	e002      	b.n	8006450 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 800644a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800644c:	2200      	movs	r2, #0
 800644e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006452:	699b      	ldr	r3, [r3, #24]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d106      	bne.n	8006466 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006458:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	4619      	mov	r1, r3
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f007 fb7f 	bl	800db62 <HAL_PCD_DataInStageCallback>
 8006464:	e01b      	b.n	800649e <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006466:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006468:	695a      	ldr	r2, [r3, #20]
 800646a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800646e:	441a      	add	r2, r3
 8006470:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006472:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006476:	69da      	ldr	r2, [r3, #28]
 8006478:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800647c:	441a      	add	r2, r3
 800647e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006480:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006488:	4618      	mov	r0, r3
 800648a:	f003 fba6 	bl	8009bda <USB_EPStartXfer>
 800648e:	e006      	b.n	800649e <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006490:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006494:	461a      	mov	r2, r3
 8006496:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 f917 	bl	80066cc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	b21b      	sxth	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f6ff ac45 	blt.w	8005d3a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3758      	adds	r7, #88	; 0x58
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b088      	sub	sp, #32
 80064be:	af00      	add	r7, sp, #0
 80064c0:	60f8      	str	r0, [r7, #12]
 80064c2:	60b9      	str	r1, [r7, #8]
 80064c4:	4613      	mov	r3, r2
 80064c6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80064c8:	88fb      	ldrh	r3, [r7, #6]
 80064ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d07c      	beq.n	80065cc <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064da:	b29b      	uxth	r3, r3
 80064dc:	461a      	mov	r2, r3
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	00db      	lsls	r3, r3, #3
 80064e4:	4413      	add	r3, r2
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	6812      	ldr	r2, [r2, #0]
 80064ea:	4413      	add	r3, r2
 80064ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064f6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	699a      	ldr	r2, [r3, #24]
 80064fc:	8b7b      	ldrh	r3, [r7, #26]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d306      	bcc.n	8006510 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	699a      	ldr	r2, [r3, #24]
 8006506:	8b7b      	ldrh	r3, [r7, #26]
 8006508:	1ad2      	subs	r2, r2, r3
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	619a      	str	r2, [r3, #24]
 800650e:	e002      	b.n	8006516 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	2200      	movs	r2, #0
 8006514:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d123      	bne.n	8006566 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	461a      	mov	r2, r3
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4413      	add	r3, r2
 800652c:	881b      	ldrh	r3, [r3, #0]
 800652e:	b29b      	uxth	r3, r3
 8006530:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006538:	833b      	strh	r3, [r7, #24]
 800653a:	8b3b      	ldrh	r3, [r7, #24]
 800653c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006540:	833b      	strh	r3, [r7, #24]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	461a      	mov	r2, r3
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	441a      	add	r2, r3
 8006550:	8b3b      	ldrh	r3, [r7, #24]
 8006552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800655a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800655e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006562:	b29b      	uxth	r3, r3
 8006564:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006566:	88fb      	ldrh	r3, [r7, #6]
 8006568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656c:	2b00      	cmp	r3, #0
 800656e:	d01f      	beq.n	80065b0 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	461a      	mov	r2, r3
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	b29b      	uxth	r3, r3
 8006582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800658a:	82fb      	strh	r3, [r7, #22]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	461a      	mov	r2, r3
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	441a      	add	r2, r3
 800659a:	8afb      	ldrh	r3, [r7, #22]
 800659c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80065b0:	8b7b      	ldrh	r3, [r7, #26]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 8085 	beq.w	80066c2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6818      	ldr	r0, [r3, #0]
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	6959      	ldr	r1, [r3, #20]
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	891a      	ldrh	r2, [r3, #8]
 80065c4:	8b7b      	ldrh	r3, [r7, #26]
 80065c6:	f005 f835 	bl	800b634 <USB_ReadPMA>
 80065ca:	e07a      	b.n	80066c2 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	461a      	mov	r2, r3
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	00db      	lsls	r3, r3, #3
 80065de:	4413      	add	r3, r2
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	6812      	ldr	r2, [r2, #0]
 80065e4:	4413      	add	r3, r2
 80065e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065ea:	881b      	ldrh	r3, [r3, #0]
 80065ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065f0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	699a      	ldr	r2, [r3, #24]
 80065f6:	8b7b      	ldrh	r3, [r7, #26]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d306      	bcc.n	800660a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	699a      	ldr	r2, [r3, #24]
 8006600:	8b7b      	ldrh	r3, [r7, #26]
 8006602:	1ad2      	subs	r2, r2, r3
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	619a      	str	r2, [r3, #24]
 8006608:	e002      	b.n	8006610 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	2200      	movs	r2, #0
 800660e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d123      	bne.n	8006660 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	461a      	mov	r2, r3
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4413      	add	r3, r2
 8006626:	881b      	ldrh	r3, [r3, #0]
 8006628:	b29b      	uxth	r3, r3
 800662a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800662e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006632:	83fb      	strh	r3, [r7, #30]
 8006634:	8bfb      	ldrh	r3, [r7, #30]
 8006636:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800663a:	83fb      	strh	r3, [r7, #30]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	461a      	mov	r2, r3
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	441a      	add	r2, r3
 800664a:	8bfb      	ldrh	r3, [r7, #30]
 800664c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006650:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006654:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800665c:	b29b      	uxth	r3, r3
 800665e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006660:	88fb      	ldrh	r3, [r7, #6]
 8006662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006666:	2b00      	cmp	r3, #0
 8006668:	d11f      	bne.n	80066aa <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	461a      	mov	r2, r3
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	4413      	add	r3, r2
 8006678:	881b      	ldrh	r3, [r3, #0]
 800667a:	b29b      	uxth	r3, r3
 800667c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006684:	83bb      	strh	r3, [r7, #28]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	461a      	mov	r2, r3
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	441a      	add	r2, r3
 8006694:	8bbb      	ldrh	r3, [r7, #28]
 8006696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800669a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800669e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80066aa:	8b7b      	ldrh	r3, [r7, #26]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d008      	beq.n	80066c2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6818      	ldr	r0, [r3, #0]
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	6959      	ldr	r1, [r3, #20]
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	895a      	ldrh	r2, [r3, #10]
 80066bc:	8b7b      	ldrh	r3, [r7, #26]
 80066be:	f004 ffb9 	bl	800b634 <USB_ReadPMA>
    }
  }

  return count;
 80066c2:	8b7b      	ldrh	r3, [r7, #26]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3720      	adds	r7, #32
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b0a4      	sub	sp, #144	; 0x90
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	4613      	mov	r3, r2
 80066d8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80066da:	88fb      	ldrh	r3, [r7, #6]
 80066dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f000 81db 	beq.w	8006a9c <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	461a      	mov	r2, r3
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	00db      	lsls	r3, r3, #3
 80066f8:	4413      	add	r3, r2
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	6812      	ldr	r2, [r2, #0]
 80066fe:	4413      	add	r3, r2
 8006700:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800670a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	699a      	ldr	r2, [r3, #24]
 8006712:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006716:	429a      	cmp	r2, r3
 8006718:	d907      	bls.n	800672a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	699a      	ldr	r2, [r3, #24]
 800671e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006722:	1ad2      	subs	r2, r2, r3
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	619a      	str	r2, [r3, #24]
 8006728:	e002      	b.n	8006730 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	2200      	movs	r2, #0
 800672e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	2b00      	cmp	r3, #0
 8006736:	f040 80b9 	bne.w	80068ac <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	785b      	ldrb	r3, [r3, #1]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d126      	bne.n	8006790 <HAL_PCD_EP_DB_Transmit+0xc4>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006750:	b29b      	uxth	r3, r3
 8006752:	461a      	mov	r2, r3
 8006754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006756:	4413      	add	r3, r2
 8006758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	00da      	lsls	r2, r3, #3
 8006760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006762:	4413      	add	r3, r2
 8006764:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006768:	62bb      	str	r3, [r7, #40]	; 0x28
 800676a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676c:	881b      	ldrh	r3, [r3, #0]
 800676e:	b29b      	uxth	r3, r3
 8006770:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006774:	b29a      	uxth	r2, r3
 8006776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006778:	801a      	strh	r2, [r3, #0]
 800677a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677c:	881b      	ldrh	r3, [r3, #0]
 800677e:	b29b      	uxth	r3, r3
 8006780:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006784:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006788:	b29a      	uxth	r2, r3
 800678a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678c:	801a      	strh	r2, [r3, #0]
 800678e:	e01a      	b.n	80067c6 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	785b      	ldrb	r3, [r3, #1]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d116      	bne.n	80067c6 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	637b      	str	r3, [r7, #52]	; 0x34
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	461a      	mov	r2, r3
 80067aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ac:	4413      	add	r3, r2
 80067ae:	637b      	str	r3, [r7, #52]	; 0x34
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	00da      	lsls	r2, r3, #3
 80067b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b8:	4413      	add	r3, r2
 80067ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067be:	633b      	str	r3, [r7, #48]	; 0x30
 80067c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c2:	2200      	movs	r2, #0
 80067c4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	627b      	str	r3, [r7, #36]	; 0x24
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	785b      	ldrb	r3, [r3, #1]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d126      	bne.n	8006822 <HAL_PCD_EP_DB_Transmit+0x156>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	61fb      	str	r3, [r7, #28]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	461a      	mov	r2, r3
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	4413      	add	r3, r2
 80067ea:	61fb      	str	r3, [r7, #28]
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	00da      	lsls	r2, r3, #3
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	4413      	add	r3, r2
 80067f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80067fa:	61bb      	str	r3, [r7, #24]
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	881b      	ldrh	r3, [r3, #0]
 8006800:	b29b      	uxth	r3, r3
 8006802:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006806:	b29a      	uxth	r2, r3
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	801a      	strh	r2, [r3, #0]
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	881b      	ldrh	r3, [r3, #0]
 8006810:	b29b      	uxth	r3, r3
 8006812:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006816:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800681a:	b29a      	uxth	r2, r3
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	801a      	strh	r2, [r3, #0]
 8006820:	e017      	b.n	8006852 <HAL_PCD_EP_DB_Transmit+0x186>
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	785b      	ldrb	r3, [r3, #1]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d113      	bne.n	8006852 <HAL_PCD_EP_DB_Transmit+0x186>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006832:	b29b      	uxth	r3, r3
 8006834:	461a      	mov	r2, r3
 8006836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006838:	4413      	add	r3, r2
 800683a:	627b      	str	r3, [r7, #36]	; 0x24
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	00da      	lsls	r2, r3, #3
 8006842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006844:	4413      	add	r3, r2
 8006846:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800684a:	623b      	str	r3, [r7, #32]
 800684c:	6a3b      	ldr	r3, [r7, #32]
 800684e:	2200      	movs	r2, #0
 8006850:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	4619      	mov	r1, r3
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f007 f982 	bl	800db62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800685e:	88fb      	ldrh	r3, [r7, #6]
 8006860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 82fa 	beq.w	8006e5e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	461a      	mov	r2, r3
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	4413      	add	r3, r2
 8006878:	881b      	ldrh	r3, [r3, #0]
 800687a:	b29b      	uxth	r3, r3
 800687c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006884:	82fb      	strh	r3, [r7, #22]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	461a      	mov	r2, r3
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	441a      	add	r2, r3
 8006894:	8afb      	ldrh	r3, [r7, #22]
 8006896:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800689a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800689e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	8013      	strh	r3, [r2, #0]
 80068aa:	e2d8      	b.n	8006e5e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80068ac:	88fb      	ldrh	r3, [r7, #6]
 80068ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d021      	beq.n	80068fa <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	461a      	mov	r2, r3
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	881b      	ldrh	r3, [r3, #0]
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	461a      	mov	r2, r3
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	441a      	add	r2, r3
 80068e2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80068e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006900:	2b01      	cmp	r3, #1
 8006902:	f040 82ac 	bne.w	8006e5e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	695a      	ldr	r2, [r3, #20]
 800690a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800690e:	441a      	add	r2, r3
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	69da      	ldr	r2, [r3, #28]
 8006918:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800691c:	441a      	add	r2, r3
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	6a1a      	ldr	r2, [r3, #32]
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	429a      	cmp	r2, r3
 800692c:	d30b      	bcc.n	8006946 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	6a1a      	ldr	r2, [r3, #32]
 800693a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800693e:	1ad2      	subs	r2, r2, r3
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	621a      	str	r2, [r3, #32]
 8006944:	e017      	b.n	8006976 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d108      	bne.n	8006960 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800694e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006952:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800695e:	e00a      	b.n	8006976 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	2200      	movs	r2, #0
 8006974:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	785b      	ldrb	r3, [r3, #1]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d165      	bne.n	8006a4a <HAL_PCD_EP_DB_Transmit+0x37e>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800698c:	b29b      	uxth	r3, r3
 800698e:	461a      	mov	r2, r3
 8006990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006992:	4413      	add	r3, r2
 8006994:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	00da      	lsls	r2, r3, #3
 800699c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800699e:	4413      	add	r3, r2
 80069a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80069a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b4:	801a      	strh	r2, [r3, #0]
 80069b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069ba:	2b3e      	cmp	r3, #62	; 0x3e
 80069bc:	d91d      	bls.n	80069fa <HAL_PCD_EP_DB_Transmit+0x32e>
 80069be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069c2:	095b      	lsrs	r3, r3, #5
 80069c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80069c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069ca:	f003 031f 	and.w	r3, r3, #31
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d102      	bne.n	80069d8 <HAL_PCD_EP_DB_Transmit+0x30c>
 80069d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069d4:	3b01      	subs	r3, #1
 80069d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80069d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069da:	881b      	ldrh	r3, [r3, #0]
 80069dc:	b29a      	uxth	r2, r3
 80069de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	029b      	lsls	r3, r3, #10
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	4313      	orrs	r3, r2
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f6:	801a      	strh	r2, [r3, #0]
 80069f8:	e044      	b.n	8006a84 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80069fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10a      	bne.n	8006a18 <HAL_PCD_EP_DB_Transmit+0x34c>
 8006a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a14:	801a      	strh	r2, [r3, #0]
 8006a16:	e035      	b.n	8006a84 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006a18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a1c:	085b      	lsrs	r3, r3, #1
 8006a1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a24:	f003 0301 	and.w	r3, r3, #1
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d002      	beq.n	8006a32 <HAL_PCD_EP_DB_Transmit+0x366>
 8006a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a2e:	3301      	adds	r3, #1
 8006a30:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	029b      	lsls	r3, r3, #10
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	4313      	orrs	r3, r2
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a46:	801a      	strh	r2, [r3, #0]
 8006a48:	e01c      	b.n	8006a84 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	785b      	ldrb	r3, [r3, #1]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d118      	bne.n	8006a84 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	647b      	str	r3, [r7, #68]	; 0x44
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	461a      	mov	r2, r3
 8006a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a66:	4413      	add	r3, r2
 8006a68:	647b      	str	r3, [r7, #68]	; 0x44
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	00da      	lsls	r2, r3, #3
 8006a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a72:	4413      	add	r3, r2
 8006a74:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a78:	643b      	str	r3, [r7, #64]	; 0x40
 8006a7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a82:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6818      	ldr	r0, [r3, #0]
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	6959      	ldr	r1, [r3, #20]
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	891a      	ldrh	r2, [r3, #8]
 8006a90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	f004 fd8b 	bl	800b5b0 <USB_WritePMA>
 8006a9a:	e1e0      	b.n	8006e5e <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	00db      	lsls	r3, r3, #3
 8006aae:	4413      	add	r3, r2
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	6812      	ldr	r2, [r2, #0]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ac0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	699a      	ldr	r2, [r3, #24]
 8006ac8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d307      	bcc.n	8006ae0 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	699a      	ldr	r2, [r3, #24]
 8006ad4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006ad8:	1ad2      	subs	r2, r2, r3
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	619a      	str	r2, [r3, #24]
 8006ade:	e002      	b.n	8006ae6 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f040 80c0 	bne.w	8006c70 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	785b      	ldrb	r3, [r3, #1]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d126      	bne.n	8006b46 <HAL_PCD_EP_DB_Transmit+0x47a>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	461a      	mov	r2, r3
 8006b0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b0c:	4413      	add	r3, r2
 8006b0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	00da      	lsls	r2, r3, #3
 8006b16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b18:	4413      	add	r3, r2
 8006b1a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b1e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b22:	881b      	ldrh	r3, [r3, #0]
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b2e:	801a      	strh	r2, [r3, #0]
 8006b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b32:	881b      	ldrh	r3, [r3, #0]
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b42:	801a      	strh	r2, [r3, #0]
 8006b44:	e01a      	b.n	8006b7c <HAL_PCD_EP_DB_Transmit+0x4b0>
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	785b      	ldrb	r3, [r3, #1]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d116      	bne.n	8006b7c <HAL_PCD_EP_DB_Transmit+0x4b0>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	667b      	str	r3, [r7, #100]	; 0x64
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	461a      	mov	r2, r3
 8006b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b62:	4413      	add	r3, r2
 8006b64:	667b      	str	r3, [r7, #100]	; 0x64
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	00da      	lsls	r2, r3, #3
 8006b6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b6e:	4413      	add	r3, r2
 8006b70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b74:	663b      	str	r3, [r7, #96]	; 0x60
 8006b76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b78:	2200      	movs	r2, #0
 8006b7a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	677b      	str	r3, [r7, #116]	; 0x74
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	785b      	ldrb	r3, [r3, #1]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d12b      	bne.n	8006be2 <HAL_PCD_EP_DB_Transmit+0x516>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b9e:	4413      	add	r3, r2
 8006ba0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	00da      	lsls	r2, r3, #3
 8006ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006baa:	4413      	add	r3, r2
 8006bac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006bb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006bb8:	881b      	ldrh	r3, [r3, #0]
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006bc6:	801a      	strh	r2, [r3, #0]
 8006bc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006bde:	801a      	strh	r2, [r3, #0]
 8006be0:	e017      	b.n	8006c12 <HAL_PCD_EP_DB_Transmit+0x546>
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	785b      	ldrb	r3, [r3, #1]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d113      	bne.n	8006c12 <HAL_PCD_EP_DB_Transmit+0x546>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bf8:	4413      	add	r3, r2
 8006bfa:	677b      	str	r3, [r7, #116]	; 0x74
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	00da      	lsls	r2, r3, #3
 8006c02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c04:	4413      	add	r3, r2
 8006c06:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c0a:	673b      	str	r3, [r7, #112]	; 0x70
 8006c0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c0e:	2200      	movs	r2, #0
 8006c10:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	4619      	mov	r1, r3
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f006 ffa2 	bl	800db62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006c1e:	88fb      	ldrh	r3, [r7, #6]
 8006c20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f040 811a 	bne.w	8006e5e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4413      	add	r3, r2
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c44:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	441a      	add	r2, r3
 8006c56:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8006c5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	8013      	strh	r3, [r2, #0]
 8006c6e:	e0f6      	b.n	8006e5e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006c70:	88fb      	ldrh	r3, [r7, #6]
 8006c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d121      	bne.n	8006cbe <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c94:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	441a      	add	r2, r3
 8006ca6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	f040 80ca 	bne.w	8006e5e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	695a      	ldr	r2, [r3, #20]
 8006cce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006cd2:	441a      	add	r2, r3
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	69da      	ldr	r2, [r3, #28]
 8006cdc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006ce0:	441a      	add	r2, r3
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	6a1a      	ldr	r2, [r3, #32]
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d30b      	bcc.n	8006d0a <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	6a1a      	ldr	r2, [r3, #32]
 8006cfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d02:	1ad2      	subs	r2, r2, r3
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	621a      	str	r2, [r3, #32]
 8006d08:	e017      	b.n	8006d3a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d108      	bne.n	8006d24 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8006d12:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006d16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006d22:	e00a      	b.n	8006d3a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	6a1b      	ldr	r3, [r3, #32]
 8006d28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	657b      	str	r3, [r7, #84]	; 0x54
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	785b      	ldrb	r3, [r3, #1]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d165      	bne.n	8006e14 <HAL_PCD_EP_DB_Transmit+0x748>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	461a      	mov	r2, r3
 8006d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d5c:	4413      	add	r3, r2
 8006d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	00da      	lsls	r2, r3, #3
 8006d66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d68:	4413      	add	r3, r2
 8006d6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d7e:	801a      	strh	r2, [r3, #0]
 8006d80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d84:	2b3e      	cmp	r3, #62	; 0x3e
 8006d86:	d91d      	bls.n	8006dc4 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8006d88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d8c:	095b      	lsrs	r3, r3, #5
 8006d8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d94:	f003 031f 	and.w	r3, r3, #31
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d102      	bne.n	8006da2 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006d9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006da2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	029b      	lsls	r3, r3, #10
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	4313      	orrs	r3, r2
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006db8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006dc0:	801a      	strh	r2, [r3, #0]
 8006dc2:	e041      	b.n	8006e48 <HAL_PCD_EP_DB_Transmit+0x77c>
 8006dc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d10a      	bne.n	8006de2 <HAL_PCD_EP_DB_Transmit+0x716>
 8006dcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006dce:	881b      	ldrh	r3, [r3, #0]
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006dde:	801a      	strh	r2, [r3, #0]
 8006de0:	e032      	b.n	8006e48 <HAL_PCD_EP_DB_Transmit+0x77c>
 8006de2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006de6:	085b      	lsrs	r3, r3, #1
 8006de8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006dea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d002      	beq.n	8006dfc <HAL_PCD_EP_DB_Transmit+0x730>
 8006df6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006df8:	3301      	adds	r3, #1
 8006dfa:	66bb      	str	r3, [r7, #104]	; 0x68
 8006dfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006dfe:	881b      	ldrh	r3, [r3, #0]
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	029b      	lsls	r3, r3, #10
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e10:	801a      	strh	r2, [r3, #0]
 8006e12:	e019      	b.n	8006e48 <HAL_PCD_EP_DB_Transmit+0x77c>
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	785b      	ldrb	r3, [r3, #1]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d115      	bne.n	8006e48 <HAL_PCD_EP_DB_Transmit+0x77c>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	461a      	mov	r2, r3
 8006e28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e2a:	4413      	add	r3, r2
 8006e2c:	657b      	str	r3, [r7, #84]	; 0x54
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	00da      	lsls	r2, r3, #3
 8006e34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e36:	4413      	add	r3, r2
 8006e38:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e3c:	653b      	str	r3, [r7, #80]	; 0x50
 8006e3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e46:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6818      	ldr	r0, [r3, #0]
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	6959      	ldr	r1, [r3, #20]
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	895a      	ldrh	r2, [r3, #10]
 8006e54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	f004 fba9 	bl	800b5b0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	461a      	mov	r2, r3
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	881b      	ldrh	r3, [r3, #0]
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e78:	82bb      	strh	r3, [r7, #20]
 8006e7a:	8abb      	ldrh	r3, [r7, #20]
 8006e7c:	f083 0310 	eor.w	r3, r3, #16
 8006e80:	82bb      	strh	r3, [r7, #20]
 8006e82:	8abb      	ldrh	r3, [r7, #20]
 8006e84:	f083 0320 	eor.w	r3, r3, #32
 8006e88:	82bb      	strh	r3, [r7, #20]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	461a      	mov	r2, r3
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	441a      	add	r2, r3
 8006e98:	8abb      	ldrh	r3, [r7, #20]
 8006e9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3790      	adds	r7, #144	; 0x90
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b087      	sub	sp, #28
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	607b      	str	r3, [r7, #4]
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	817b      	strh	r3, [r7, #10]
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006eca:	897b      	ldrh	r3, [r7, #10]
 8006ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00b      	beq.n	8006eee <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ed6:	897b      	ldrh	r3, [r7, #10]
 8006ed8:	f003 0307 	and.w	r3, r3, #7
 8006edc:	1c5a      	adds	r2, r3, #1
 8006ede:	4613      	mov	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4413      	add	r3, r2
 8006ee4:	00db      	lsls	r3, r3, #3
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	4413      	add	r3, r2
 8006eea:	617b      	str	r3, [r7, #20]
 8006eec:	e009      	b.n	8006f02 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006eee:	897a      	ldrh	r2, [r7, #10]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4413      	add	r3, r2
 8006ef6:	00db      	lsls	r3, r3, #3
 8006ef8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	4413      	add	r3, r2
 8006f00:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006f02:	893b      	ldrh	r3, [r7, #8]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d107      	bne.n	8006f18 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	80da      	strh	r2, [r3, #6]
 8006f16:	e00b      	b.n	8006f30 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	0c1b      	lsrs	r3, r3, #16
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	371c      	adds	r7, #28
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b085      	sub	sp, #20
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	f043 0301 	orr.w	r3, r3, #1
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	f043 0302 	orr.w	r3, r3, #2
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3714      	adds	r7, #20
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
	...

08006f94 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006f94:	b480      	push	{r7}
 8006f96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f98:	4b05      	ldr	r3, [pc, #20]	; (8006fb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a04      	ldr	r2, [pc, #16]	; (8006fb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fa2:	6013      	str	r3, [r2, #0]
}
 8006fa4:	bf00      	nop
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	58000400 	.word	0x58000400

08006fb4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006fb8:	4b04      	ldr	r3, [pc, #16]	; (8006fcc <HAL_PWREx_GetVoltageRange+0x18>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	58000400 	.word	0x58000400

08006fd0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006fd4:	4b05      	ldr	r3, [pc, #20]	; (8006fec <HAL_PWREx_EnableVddUSB+0x1c>)
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	4a04      	ldr	r2, [pc, #16]	; (8006fec <HAL_PWREx_EnableVddUSB+0x1c>)
 8006fda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006fde:	6053      	str	r3, [r2, #4]
}
 8006fe0:	bf00      	nop
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	58000400 	.word	0x58000400

08006ff0 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ffe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007002:	d101      	bne.n	8007008 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8007004:	2301      	movs	r3, #1
 8007006:	e000      	b.n	800700a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8007014:	b480      	push	{r7}
 8007016:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8007018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007026:	6013      	str	r3, [r2, #0]
}
 8007028:	bf00      	nop
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8007032:	b480      	push	{r7}
 8007034:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8007036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007044:	6013      	str	r3, [r2, #0]
}
 8007046:	bf00      	nop
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8007050:	b480      	push	{r7}
 8007052:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8007054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800705e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007062:	d101      	bne.n	8007068 <LL_RCC_HSE_IsReady+0x18>
 8007064:	2301      	movs	r3, #1
 8007066:	e000      	b.n	800706a <LL_RCC_HSE_IsReady+0x1a>
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8007074:	b480      	push	{r7}
 8007076:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8007078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007086:	6013      	str	r3, [r2, #0]
}
 8007088:	bf00      	nop
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8007092:	b480      	push	{r7}
 8007094:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8007096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070a4:	6013      	str	r3, [r2, #0]
}
 80070a6:	bf00      	nop
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80070b0:	b480      	push	{r7}
 80070b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80070b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070c2:	d101      	bne.n	80070c8 <LL_RCC_HSI_IsReady+0x18>
 80070c4:	2301      	movs	r3, #1
 80070c6:	e000      	b.n	80070ca <LL_RCC_HSI_IsReady+0x1a>
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80070dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	061b      	lsls	r3, r3, #24
 80070ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070ee:	4313      	orrs	r3, r2
 80070f0:	604b      	str	r3, [r1, #4]
}
 80070f2:	bf00      	nop
 80070f4:	370c      	adds	r7, #12
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80070fe:	b480      	push	{r7}
 8007100:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007106:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800710a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800710e:	f043 0301 	orr.w	r3, r3, #1
 8007112:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8007116:	bf00      	nop
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8007120:	b480      	push	{r7}
 8007122:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007128:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800712c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007130:	f023 0301 	bic.w	r3, r3, #1
 8007134:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8007138:	bf00      	nop
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr

08007142 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8007142:	b480      	push	{r7}
 8007144:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8007146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800714a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800714e:	f003 0302 	and.w	r3, r3, #2
 8007152:	2b02      	cmp	r3, #2
 8007154:	d101      	bne.n	800715a <LL_RCC_HSI48_IsReady+0x18>
 8007156:	2301      	movs	r3, #1
 8007158:	e000      	b.n	800715c <LL_RCC_HSI48_IsReady+0x1a>
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8007166:	b480      	push	{r7}
 8007168:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800716a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800716e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007172:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007176:	f043 0301 	orr.w	r3, r3, #1
 800717a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800717e:	bf00      	nop
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8007188:	b480      	push	{r7}
 800718a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800718c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007194:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007198:	f023 0301 	bic.w	r3, r3, #1
 800719c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80071a0:	bf00      	nop
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr

080071aa <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80071aa:	b480      	push	{r7}
 80071ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80071ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071ba:	f043 0304 	orr.w	r3, r3, #4
 80071be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80071c2:	bf00      	nop
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80071cc:	b480      	push	{r7}
 80071ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80071d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071dc:	f023 0304 	bic.w	r3, r3, #4
 80071e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80071e4:	bf00      	nop
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80071ee:	b480      	push	{r7}
 80071f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80071f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071fa:	f003 0302 	and.w	r3, r3, #2
 80071fe:	2b02      	cmp	r3, #2
 8007200:	d101      	bne.n	8007206 <LL_RCC_LSE_IsReady+0x18>
 8007202:	2301      	movs	r3, #1
 8007204:	e000      	b.n	8007208 <LL_RCC_LSE_IsReady+0x1a>
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr

08007212 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8007212:	b480      	push	{r7}
 8007214:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8007216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800721a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800721e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007222:	f043 0301 	orr.w	r3, r3, #1
 8007226:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800722a:	bf00      	nop
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8007234:	b480      	push	{r7}
 8007236:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8007238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800723c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007240:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007244:	f023 0301 	bic.w	r3, r3, #1
 8007248:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800724c:	bf00      	nop
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8007256:	b480      	push	{r7}
 8007258:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800725a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800725e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007262:	f003 0302 	and.w	r3, r3, #2
 8007266:	2b02      	cmp	r3, #2
 8007268:	d101      	bne.n	800726e <LL_RCC_LSI1_IsReady+0x18>
 800726a:	2301      	movs	r3, #1
 800726c:	e000      	b.n	8007270 <LL_RCC_LSI1_IsReady+0x1a>
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr

0800727a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800727a:	b480      	push	{r7}
 800727c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800727e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007286:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800728a:	f043 0304 	orr.w	r3, r3, #4
 800728e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007292:	bf00      	nop
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800729c:	b480      	push	{r7}
 800729e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80072a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072ac:	f023 0304 	bic.w	r3, r3, #4
 80072b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80072b4:	bf00      	nop
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80072be:	b480      	push	{r7}
 80072c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80072c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072ca:	f003 0308 	and.w	r3, r3, #8
 80072ce:	2b08      	cmp	r3, #8
 80072d0:	d101      	bne.n	80072d6 <LL_RCC_LSI2_IsReady+0x18>
 80072d2:	2301      	movs	r3, #1
 80072d4:	e000      	b.n	80072d8 <LL_RCC_LSI2_IsReady+0x1a>
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr

080072e2 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80072e2:	b480      	push	{r7}
 80072e4:	b083      	sub	sp, #12
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80072ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072f2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	021b      	lsls	r3, r3, #8
 80072fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80072fe:	4313      	orrs	r3, r2
 8007300:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8007310:	b480      	push	{r7}
 8007312:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8007314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800731e:	f043 0301 	orr.w	r3, r3, #1
 8007322:	6013      	str	r3, [r2, #0]
}
 8007324:	bf00      	nop
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr

0800732e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800732e:	b480      	push	{r7}
 8007330:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8007332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800733c:	f023 0301 	bic.w	r3, r3, #1
 8007340:	6013      	str	r3, [r2, #0]
}
 8007342:	bf00      	nop
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800734c:	b480      	push	{r7}
 800734e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0302 	and.w	r3, r3, #2
 800735a:	2b02      	cmp	r3, #2
 800735c:	d101      	bne.n	8007362 <LL_RCC_MSI_IsReady+0x16>
 800735e:	2301      	movs	r3, #1
 8007360:	e000      	b.n	8007364 <LL_RCC_MSI_IsReady+0x18>
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800736e:	b480      	push	{r7}
 8007370:	b083      	sub	sp, #12
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8007376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007380:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4313      	orrs	r3, r2
 8007388:	600b      	str	r3, [r1, #0]
}
 800738a:	bf00      	nop
 800738c:	370c      	adds	r7, #12
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr

08007396 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8007396:	b480      	push	{r7}
 8007398:	b083      	sub	sp, #12
 800739a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800739c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073a6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2bb0      	cmp	r3, #176	; 0xb0
 80073ac:	d901      	bls.n	80073b2 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80073ae:	23b0      	movs	r3, #176	; 0xb0
 80073b0:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80073b2:	687b      	ldr	r3, [r7, #4]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80073c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	021b      	lsls	r3, r3, #8
 80073d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073da:	4313      	orrs	r3, r2
 80073dc:	604b      	str	r3, [r1, #4]
}
 80073de:	bf00      	nop
 80073e0:	370c      	adds	r7, #12
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr

080073ea <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80073ea:	b480      	push	{r7}
 80073ec:	b083      	sub	sp, #12
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80073f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	f023 0203 	bic.w	r2, r3, #3
 80073fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4313      	orrs	r3, r2
 8007404:	608b      	str	r3, [r1, #8]
}
 8007406:	bf00      	nop
 8007408:	370c      	adds	r7, #12
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8007412:	b480      	push	{r7}
 8007414:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	f003 030c 	and.w	r3, r3, #12
}
 8007420:	4618      	mov	r0, r3
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800742a:	b480      	push	{r7}
 800742c:	b083      	sub	sp, #12
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8007432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800743c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4313      	orrs	r3, r2
 8007444:	608b      	str	r3, [r1, #8]
}
 8007446:	bf00      	nop
 8007448:	370c      	adds	r7, #12
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8007452:	b480      	push	{r7}
 8007454:	b083      	sub	sp, #12
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800745a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800745e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007462:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007466:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4313      	orrs	r3, r2
 800746e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8007472:	bf00      	nop
 8007474:	370c      	adds	r7, #12
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr

0800747e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800747e:	b480      	push	{r7}
 8007480:	b083      	sub	sp, #12
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8007486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800748a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800748e:	f023 020f 	bic.w	r2, r3, #15
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	091b      	lsrs	r3, r3, #4
 8007496:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800749a:	4313      	orrs	r3, r2
 800749c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80074b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80074be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	608b      	str	r3, [r1, #8]
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80074dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80074e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	608b      	str	r3, [r1, #8]
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80074fc:	b480      	push	{r7}
 80074fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800750a:	4618      	mov	r0, r3
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8007514:	b480      	push	{r7}
 8007516:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8007518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800751c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007520:	011b      	lsls	r3, r3, #4
 8007522:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007526:	4618      	mov	r0, r3
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8007530:	b480      	push	{r7}
 8007532:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800753e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007542:	6013      	str	r3, [r2, #0]
}
 8007544:	bf00      	nop
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800754e:	b480      	push	{r7}
 8007550:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8007552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800755c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007560:	6013      	str	r3, [r2, #0]
}
 8007562:	bf00      	nop
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800756c:	b480      	push	{r7}
 800756e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8007570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800757a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800757e:	d101      	bne.n	8007584 <LL_RCC_PLL_IsReady+0x18>
 8007580:	2301      	movs	r3, #1
 8007582:	e000      	b.n	8007586 <LL_RCC_PLL_IsReady+0x1a>
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007590:	b480      	push	{r7}
 8007592:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	0a1b      	lsrs	r3, r3, #8
 800759c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80075aa:	b480      	push	{r7}
 80075ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80075ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80075c2:	b480      	push	{r7}
 80075c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80075c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80075da:	b480      	push	{r7}
 80075dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80075de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	f003 0303 	and.w	r3, r3, #3
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr

080075f2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80075f2:	b480      	push	{r7}
 80075f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80075f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007604:	d101      	bne.n	800760a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8007606:	2301      	movs	r3, #1
 8007608:	e000      	b.n	800760c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8007616:	b480      	push	{r7}
 8007618:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800761a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800761e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007626:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800762a:	d101      	bne.n	8007630 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800762c:	2301      	movs	r3, #1
 800762e:	e000      	b.n	8007632 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800763c:	b480      	push	{r7}
 800763e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8007640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007644:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800764c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007650:	d101      	bne.n	8007656 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8007652:	2301      	movs	r3, #1
 8007654:	e000      	b.n	8007658 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr

08007662 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8007662:	b480      	push	{r7}
 8007664:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8007666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007670:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007674:	d101      	bne.n	800767a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8007676:	2301      	movs	r3, #1
 8007678:	e000      	b.n	800767c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8007686:	b480      	push	{r7}
 8007688:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800768a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007694:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007698:	d101      	bne.n	800769e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800769a:	2301      	movs	r3, #1
 800769c:	e000      	b.n	80076a0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
	...

080076ac <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076ac:	b590      	push	{r4, r7, lr}
 80076ae:	b08d      	sub	sp, #52	; 0x34
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d101      	bne.n	80076be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e363      	b.n	8007d86 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0320 	and.w	r3, r3, #32
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f000 808d 	beq.w	80077e6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076cc:	f7ff fea1 	bl	8007412 <LL_RCC_GetSysClkSource>
 80076d0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80076d2:	f7ff ff82 	bl	80075da <LL_RCC_PLL_GetMainSource>
 80076d6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80076d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d005      	beq.n	80076ea <HAL_RCC_OscConfig+0x3e>
 80076de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e0:	2b0c      	cmp	r3, #12
 80076e2:	d147      	bne.n	8007774 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80076e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d144      	bne.n	8007774 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	69db      	ldr	r3, [r3, #28]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d101      	bne.n	80076f6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e347      	b.n	8007d86 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80076fa:	f7ff fe4c 	bl	8007396 <LL_RCC_MSI_GetRange>
 80076fe:	4603      	mov	r3, r0
 8007700:	429c      	cmp	r4, r3
 8007702:	d914      	bls.n	800772e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007708:	4618      	mov	r0, r3
 800770a:	f000 fd05 	bl	8008118 <RCC_SetFlashLatencyFromMSIRange>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d001      	beq.n	8007718 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e336      	b.n	8007d86 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771c:	4618      	mov	r0, r3
 800771e:	f7ff fe26 	bl	800736e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a1b      	ldr	r3, [r3, #32]
 8007726:	4618      	mov	r0, r3
 8007728:	f7ff fe4a 	bl	80073c0 <LL_RCC_MSI_SetCalibTrimming>
 800772c:	e013      	b.n	8007756 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007732:	4618      	mov	r0, r3
 8007734:	f7ff fe1b 	bl	800736e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a1b      	ldr	r3, [r3, #32]
 800773c:	4618      	mov	r0, r3
 800773e:	f7ff fe3f 	bl	80073c0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007746:	4618      	mov	r0, r3
 8007748:	f000 fce6 	bl	8008118 <RCC_SetFlashLatencyFromMSIRange>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d001      	beq.n	8007756 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e317      	b.n	8007d86 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007756:	f000 fccb 	bl	80080f0 <HAL_RCC_GetHCLKFreq>
 800775a:	4603      	mov	r3, r0
 800775c:	4aa4      	ldr	r2, [pc, #656]	; (80079f0 <HAL_RCC_OscConfig+0x344>)
 800775e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007760:	4ba4      	ldr	r3, [pc, #656]	; (80079f4 <HAL_RCC_OscConfig+0x348>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4618      	mov	r0, r3
 8007766:	f7fd fac5 	bl	8004cf4 <HAL_InitTick>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d039      	beq.n	80077e4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e308      	b.n	8007d86 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	69db      	ldr	r3, [r3, #28]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d01e      	beq.n	80077ba <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800777c:	f7ff fdc8 	bl	8007310 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007780:	f7fd fb06 	bl	8004d90 <HAL_GetTick>
 8007784:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8007786:	e008      	b.n	800779a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007788:	f7fd fb02 	bl	8004d90 <HAL_GetTick>
 800778c:	4602      	mov	r2, r0
 800778e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007790:	1ad3      	subs	r3, r2, r3
 8007792:	2b02      	cmp	r3, #2
 8007794:	d901      	bls.n	800779a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	e2f5      	b.n	8007d86 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800779a:	f7ff fdd7 	bl	800734c <LL_RCC_MSI_IsReady>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d0f1      	beq.n	8007788 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7ff fde0 	bl	800736e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7ff fe04 	bl	80073c0 <LL_RCC_MSI_SetCalibTrimming>
 80077b8:	e015      	b.n	80077e6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80077ba:	f7ff fdb8 	bl	800732e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80077be:	f7fd fae7 	bl	8004d90 <HAL_GetTick>
 80077c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80077c4:	e008      	b.n	80077d8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80077c6:	f7fd fae3 	bl	8004d90 <HAL_GetTick>
 80077ca:	4602      	mov	r2, r0
 80077cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d901      	bls.n	80077d8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e2d6      	b.n	8007d86 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80077d8:	f7ff fdb8 	bl	800734c <LL_RCC_MSI_IsReady>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1f1      	bne.n	80077c6 <HAL_RCC_OscConfig+0x11a>
 80077e2:	e000      	b.n	80077e6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80077e4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d047      	beq.n	8007882 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077f2:	f7ff fe0e 	bl	8007412 <LL_RCC_GetSysClkSource>
 80077f6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077f8:	f7ff feef 	bl	80075da <LL_RCC_PLL_GetMainSource>
 80077fc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80077fe:	6a3b      	ldr	r3, [r7, #32]
 8007800:	2b08      	cmp	r3, #8
 8007802:	d005      	beq.n	8007810 <HAL_RCC_OscConfig+0x164>
 8007804:	6a3b      	ldr	r3, [r7, #32]
 8007806:	2b0c      	cmp	r3, #12
 8007808:	d108      	bne.n	800781c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	2b03      	cmp	r3, #3
 800780e:	d105      	bne.n	800781c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d134      	bne.n	8007882 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	e2b4      	b.n	8007d86 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007824:	d102      	bne.n	800782c <HAL_RCC_OscConfig+0x180>
 8007826:	f7ff fbf5 	bl	8007014 <LL_RCC_HSE_Enable>
 800782a:	e001      	b.n	8007830 <HAL_RCC_OscConfig+0x184>
 800782c:	f7ff fc01 	bl	8007032 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d012      	beq.n	800785e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007838:	f7fd faaa 	bl	8004d90 <HAL_GetTick>
 800783c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800783e:	e008      	b.n	8007852 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007840:	f7fd faa6 	bl	8004d90 <HAL_GetTick>
 8007844:	4602      	mov	r2, r0
 8007846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	2b64      	cmp	r3, #100	; 0x64
 800784c:	d901      	bls.n	8007852 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800784e:	2303      	movs	r3, #3
 8007850:	e299      	b.n	8007d86 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8007852:	f7ff fbfd 	bl	8007050 <LL_RCC_HSE_IsReady>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d0f1      	beq.n	8007840 <HAL_RCC_OscConfig+0x194>
 800785c:	e011      	b.n	8007882 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800785e:	f7fd fa97 	bl	8004d90 <HAL_GetTick>
 8007862:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8007864:	e008      	b.n	8007878 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007866:	f7fd fa93 	bl	8004d90 <HAL_GetTick>
 800786a:	4602      	mov	r2, r0
 800786c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	2b64      	cmp	r3, #100	; 0x64
 8007872:	d901      	bls.n	8007878 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007874:	2303      	movs	r3, #3
 8007876:	e286      	b.n	8007d86 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8007878:	f7ff fbea 	bl	8007050 <LL_RCC_HSE_IsReady>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1f1      	bne.n	8007866 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 0302 	and.w	r3, r3, #2
 800788a:	2b00      	cmp	r3, #0
 800788c:	d04c      	beq.n	8007928 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800788e:	f7ff fdc0 	bl	8007412 <LL_RCC_GetSysClkSource>
 8007892:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007894:	f7ff fea1 	bl	80075da <LL_RCC_PLL_GetMainSource>
 8007898:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	2b04      	cmp	r3, #4
 800789e:	d005      	beq.n	80078ac <HAL_RCC_OscConfig+0x200>
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	2b0c      	cmp	r3, #12
 80078a4:	d10e      	bne.n	80078c4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d10b      	bne.n	80078c4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d101      	bne.n	80078b8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e266      	b.n	8007d86 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	4618      	mov	r0, r3
 80078be:	f7ff fc09 	bl	80070d4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80078c2:	e031      	b.n	8007928 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d019      	beq.n	8007900 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078cc:	f7ff fbd2 	bl	8007074 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078d0:	f7fd fa5e 	bl	8004d90 <HAL_GetTick>
 80078d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80078d6:	e008      	b.n	80078ea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078d8:	f7fd fa5a 	bl	8004d90 <HAL_GetTick>
 80078dc:	4602      	mov	r2, r0
 80078de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d901      	bls.n	80078ea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80078e6:	2303      	movs	r3, #3
 80078e8:	e24d      	b.n	8007d86 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80078ea:	f7ff fbe1 	bl	80070b0 <LL_RCC_HSI_IsReady>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d0f1      	beq.n	80078d8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7ff fbeb 	bl	80070d4 <LL_RCC_HSI_SetCalibTrimming>
 80078fe:	e013      	b.n	8007928 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007900:	f7ff fbc7 	bl	8007092 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007904:	f7fd fa44 	bl	8004d90 <HAL_GetTick>
 8007908:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800790a:	e008      	b.n	800791e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800790c:	f7fd fa40 	bl	8004d90 <HAL_GetTick>
 8007910:	4602      	mov	r2, r0
 8007912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007914:	1ad3      	subs	r3, r2, r3
 8007916:	2b02      	cmp	r3, #2
 8007918:	d901      	bls.n	800791e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800791a:	2303      	movs	r3, #3
 800791c:	e233      	b.n	8007d86 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800791e:	f7ff fbc7 	bl	80070b0 <LL_RCC_HSI_IsReady>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1f1      	bne.n	800790c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 0308 	and.w	r3, r3, #8
 8007930:	2b00      	cmp	r3, #0
 8007932:	d106      	bne.n	8007942 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800793c:	2b00      	cmp	r3, #0
 800793e:	f000 80a3 	beq.w	8007a88 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	695b      	ldr	r3, [r3, #20]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d076      	beq.n	8007a38 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 0310 	and.w	r3, r3, #16
 8007952:	2b00      	cmp	r3, #0
 8007954:	d046      	beq.n	80079e4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8007956:	f7ff fc7e 	bl	8007256 <LL_RCC_LSI1_IsReady>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d113      	bne.n	8007988 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8007960:	f7ff fc57 	bl	8007212 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007964:	f7fd fa14 	bl	8004d90 <HAL_GetTick>
 8007968:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800796a:	e008      	b.n	800797e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800796c:	f7fd fa10 	bl	8004d90 <HAL_GetTick>
 8007970:	4602      	mov	r2, r0
 8007972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007974:	1ad3      	subs	r3, r2, r3
 8007976:	2b02      	cmp	r3, #2
 8007978:	d901      	bls.n	800797e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800797a:	2303      	movs	r3, #3
 800797c:	e203      	b.n	8007d86 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800797e:	f7ff fc6a 	bl	8007256 <LL_RCC_LSI1_IsReady>
 8007982:	4603      	mov	r3, r0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d0f1      	beq.n	800796c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8007988:	f7ff fc77 	bl	800727a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800798c:	f7fd fa00 	bl	8004d90 <HAL_GetTick>
 8007990:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8007992:	e008      	b.n	80079a6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007994:	f7fd f9fc 	bl	8004d90 <HAL_GetTick>
 8007998:	4602      	mov	r2, r0
 800799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	2b03      	cmp	r3, #3
 80079a0:	d901      	bls.n	80079a6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80079a2:	2303      	movs	r3, #3
 80079a4:	e1ef      	b.n	8007d86 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80079a6:	f7ff fc8a 	bl	80072be <LL_RCC_LSI2_IsReady>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d0f1      	beq.n	8007994 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7ff fc94 	bl	80072e2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80079ba:	f7ff fc3b 	bl	8007234 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079be:	f7fd f9e7 	bl	8004d90 <HAL_GetTick>
 80079c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80079c4:	e008      	b.n	80079d8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80079c6:	f7fd f9e3 	bl	8004d90 <HAL_GetTick>
 80079ca:	4602      	mov	r2, r0
 80079cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d901      	bls.n	80079d8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e1d6      	b.n	8007d86 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80079d8:	f7ff fc3d 	bl	8007256 <LL_RCC_LSI1_IsReady>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1f1      	bne.n	80079c6 <HAL_RCC_OscConfig+0x31a>
 80079e2:	e051      	b.n	8007a88 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80079e4:	f7ff fc15 	bl	8007212 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079e8:	f7fd f9d2 	bl	8004d90 <HAL_GetTick>
 80079ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80079ee:	e00c      	b.n	8007a0a <HAL_RCC_OscConfig+0x35e>
 80079f0:	20000008 	.word	0x20000008
 80079f4:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80079f8:	f7fd f9ca 	bl	8004d90 <HAL_GetTick>
 80079fc:	4602      	mov	r2, r0
 80079fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d901      	bls.n	8007a0a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8007a06:	2303      	movs	r3, #3
 8007a08:	e1bd      	b.n	8007d86 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007a0a:	f7ff fc24 	bl	8007256 <LL_RCC_LSI1_IsReady>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d0f1      	beq.n	80079f8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8007a14:	f7ff fc42 	bl	800729c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007a18:	e008      	b.n	8007a2c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007a1a:	f7fd f9b9 	bl	8004d90 <HAL_GetTick>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	1ad3      	subs	r3, r2, r3
 8007a24:	2b03      	cmp	r3, #3
 8007a26:	d901      	bls.n	8007a2c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	e1ac      	b.n	8007d86 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007a2c:	f7ff fc47 	bl	80072be <LL_RCC_LSI2_IsReady>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1f1      	bne.n	8007a1a <HAL_RCC_OscConfig+0x36e>
 8007a36:	e027      	b.n	8007a88 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8007a38:	f7ff fc30 	bl	800729c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a3c:	f7fd f9a8 	bl	8004d90 <HAL_GetTick>
 8007a40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8007a42:	e008      	b.n	8007a56 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007a44:	f7fd f9a4 	bl	8004d90 <HAL_GetTick>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	2b03      	cmp	r3, #3
 8007a50:	d901      	bls.n	8007a56 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007a52:	2303      	movs	r3, #3
 8007a54:	e197      	b.n	8007d86 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8007a56:	f7ff fc32 	bl	80072be <LL_RCC_LSI2_IsReady>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1f1      	bne.n	8007a44 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8007a60:	f7ff fbe8 	bl	8007234 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a64:	f7fd f994 	bl	8004d90 <HAL_GetTick>
 8007a68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007a6a:	e008      	b.n	8007a7e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007a6c:	f7fd f990 	bl	8004d90 <HAL_GetTick>
 8007a70:	4602      	mov	r2, r0
 8007a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	d901      	bls.n	8007a7e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	e183      	b.n	8007d86 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007a7e:	f7ff fbea 	bl	8007256 <LL_RCC_LSI1_IsReady>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1f1      	bne.n	8007a6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 0304 	and.w	r3, r3, #4
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d05b      	beq.n	8007b4c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a94:	4ba7      	ldr	r3, [pc, #668]	; (8007d34 <HAL_RCC_OscConfig+0x688>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d114      	bne.n	8007aca <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007aa0:	f7ff fa78 	bl	8006f94 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007aa4:	f7fd f974 	bl	8004d90 <HAL_GetTick>
 8007aa8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007aaa:	e008      	b.n	8007abe <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007aac:	f7fd f970 	bl	8004d90 <HAL_GetTick>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d901      	bls.n	8007abe <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e163      	b.n	8007d86 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007abe:	4b9d      	ldr	r3, [pc, #628]	; (8007d34 <HAL_RCC_OscConfig+0x688>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d0f0      	beq.n	8007aac <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d102      	bne.n	8007ad8 <HAL_RCC_OscConfig+0x42c>
 8007ad2:	f7ff fb48 	bl	8007166 <LL_RCC_LSE_Enable>
 8007ad6:	e00c      	b.n	8007af2 <HAL_RCC_OscConfig+0x446>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	2b05      	cmp	r3, #5
 8007ade:	d104      	bne.n	8007aea <HAL_RCC_OscConfig+0x43e>
 8007ae0:	f7ff fb63 	bl	80071aa <LL_RCC_LSE_EnableBypass>
 8007ae4:	f7ff fb3f 	bl	8007166 <LL_RCC_LSE_Enable>
 8007ae8:	e003      	b.n	8007af2 <HAL_RCC_OscConfig+0x446>
 8007aea:	f7ff fb4d 	bl	8007188 <LL_RCC_LSE_Disable>
 8007aee:	f7ff fb6d 	bl	80071cc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d014      	beq.n	8007b24 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007afa:	f7fd f949 	bl	8004d90 <HAL_GetTick>
 8007afe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8007b00:	e00a      	b.n	8007b18 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b02:	f7fd f945 	bl	8004d90 <HAL_GetTick>
 8007b06:	4602      	mov	r2, r0
 8007b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d901      	bls.n	8007b18 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8007b14:	2303      	movs	r3, #3
 8007b16:	e136      	b.n	8007d86 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007b18:	f7ff fb69 	bl	80071ee <LL_RCC_LSE_IsReady>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d0ef      	beq.n	8007b02 <HAL_RCC_OscConfig+0x456>
 8007b22:	e013      	b.n	8007b4c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b24:	f7fd f934 	bl	8004d90 <HAL_GetTick>
 8007b28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007b2a:	e00a      	b.n	8007b42 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b2c:	f7fd f930 	bl	8004d90 <HAL_GetTick>
 8007b30:	4602      	mov	r2, r0
 8007b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d901      	bls.n	8007b42 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e121      	b.n	8007d86 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8007b42:	f7ff fb54 	bl	80071ee <LL_RCC_LSE_IsReady>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1ef      	bne.n	8007b2c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d02c      	beq.n	8007bb2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d014      	beq.n	8007b8a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007b60:	f7ff facd 	bl	80070fe <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b64:	f7fd f914 	bl	8004d90 <HAL_GetTick>
 8007b68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007b6a:	e008      	b.n	8007b7e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007b6c:	f7fd f910 	bl	8004d90 <HAL_GetTick>
 8007b70:	4602      	mov	r2, r0
 8007b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d901      	bls.n	8007b7e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	e103      	b.n	8007d86 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007b7e:	f7ff fae0 	bl	8007142 <LL_RCC_HSI48_IsReady>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d0f1      	beq.n	8007b6c <HAL_RCC_OscConfig+0x4c0>
 8007b88:	e013      	b.n	8007bb2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007b8a:	f7ff fac9 	bl	8007120 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b8e:	f7fd f8ff 	bl	8004d90 <HAL_GetTick>
 8007b92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007b94:	e008      	b.n	8007ba8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007b96:	f7fd f8fb 	bl	8004d90 <HAL_GetTick>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9e:	1ad3      	subs	r3, r2, r3
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	d901      	bls.n	8007ba8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	e0ee      	b.n	8007d86 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007ba8:	f7ff facb 	bl	8007142 <LL_RCC_HSI48_IsReady>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1f1      	bne.n	8007b96 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	f000 80e4 	beq.w	8007d84 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007bbc:	f7ff fc29 	bl	8007412 <LL_RCC_GetSysClkSource>
 8007bc0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8007bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	f040 80b4 	bne.w	8007d3c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f003 0203 	and.w	r2, r3, #3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d123      	bne.n	8007c2a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d11c      	bne.n	8007c2a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	0a1b      	lsrs	r3, r3, #8
 8007bf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d114      	bne.n	8007c2a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d10d      	bne.n	8007c2a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d106      	bne.n	8007c2a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d05d      	beq.n	8007ce6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	2b0c      	cmp	r3, #12
 8007c2e:	d058      	beq.n	8007ce2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d001      	beq.n	8007c42 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e0a1      	b.n	8007d86 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007c42:	f7ff fc84 	bl	800754e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007c46:	f7fd f8a3 	bl	8004d90 <HAL_GetTick>
 8007c4a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c4c:	e008      	b.n	8007c60 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c4e:	f7fd f89f 	bl	8004d90 <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d901      	bls.n	8007c60 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e092      	b.n	8007d86 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1ef      	bne.n	8007c4e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c72:	68da      	ldr	r2, [r3, #12]
 8007c74:	4b30      	ldr	r3, [pc, #192]	; (8007d38 <HAL_RCC_OscConfig+0x68c>)
 8007c76:	4013      	ands	r3, r2
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007c80:	4311      	orrs	r1, r2
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c86:	0212      	lsls	r2, r2, #8
 8007c88:	4311      	orrs	r1, r2
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007c8e:	4311      	orrs	r1, r2
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007c94:	4311      	orrs	r1, r2
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007c9a:	430a      	orrs	r2, r1
 8007c9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007ca4:	f7ff fc44 	bl	8007530 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cb6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007cb8:	f7fd f86a 	bl	8004d90 <HAL_GetTick>
 8007cbc:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007cbe:	e008      	b.n	8007cd2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cc0:	f7fd f866 	bl	8004d90 <HAL_GetTick>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d901      	bls.n	8007cd2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	e059      	b.n	8007d86 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d0ef      	beq.n	8007cc0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ce0:	e050      	b.n	8007d84 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e04f      	b.n	8007d86 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d147      	bne.n	8007d84 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007cf4:	f7ff fc1c 	bl	8007530 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007d08:	f7fd f842 	bl	8004d90 <HAL_GetTick>
 8007d0c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d0e:	e008      	b.n	8007d22 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d10:	f7fd f83e 	bl	8004d90 <HAL_GetTick>
 8007d14:	4602      	mov	r2, r0
 8007d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	d901      	bls.n	8007d22 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	e031      	b.n	8007d86 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d0ef      	beq.n	8007d10 <HAL_RCC_OscConfig+0x664>
 8007d30:	e028      	b.n	8007d84 <HAL_RCC_OscConfig+0x6d8>
 8007d32:	bf00      	nop
 8007d34:	58000400 	.word	0x58000400
 8007d38:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	2b0c      	cmp	r3, #12
 8007d40:	d01e      	beq.n	8007d80 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d42:	f7ff fc04 	bl	800754e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d46:	f7fd f823 	bl	8004d90 <HAL_GetTick>
 8007d4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d4c:	e008      	b.n	8007d60 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d4e:	f7fd f81f 	bl	8004d90 <HAL_GetTick>
 8007d52:	4602      	mov	r2, r0
 8007d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d901      	bls.n	8007d60 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	e012      	b.n	8007d86 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1ef      	bne.n	8007d4e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8007d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d72:	68da      	ldr	r2, [r3, #12]
 8007d74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d78:	4b05      	ldr	r3, [pc, #20]	; (8007d90 <HAL_RCC_OscConfig+0x6e4>)
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	60cb      	str	r3, [r1, #12]
 8007d7e:	e001      	b.n	8007d84 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e000      	b.n	8007d86 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3734      	adds	r7, #52	; 0x34
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd90      	pop	{r4, r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	eefefffc 	.word	0xeefefffc

08007d94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d101      	bne.n	8007da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e12d      	b.n	8008004 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007da8:	4b98      	ldr	r3, [pc, #608]	; (800800c <HAL_RCC_ClockConfig+0x278>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 0307 	and.w	r3, r3, #7
 8007db0:	683a      	ldr	r2, [r7, #0]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d91b      	bls.n	8007dee <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007db6:	4b95      	ldr	r3, [pc, #596]	; (800800c <HAL_RCC_ClockConfig+0x278>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f023 0207 	bic.w	r2, r3, #7
 8007dbe:	4993      	ldr	r1, [pc, #588]	; (800800c <HAL_RCC_ClockConfig+0x278>)
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dc6:	f7fc ffe3 	bl	8004d90 <HAL_GetTick>
 8007dca:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dcc:	e008      	b.n	8007de0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007dce:	f7fc ffdf 	bl	8004d90 <HAL_GetTick>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	2b02      	cmp	r3, #2
 8007dda:	d901      	bls.n	8007de0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	e111      	b.n	8008004 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007de0:	4b8a      	ldr	r3, [pc, #552]	; (800800c <HAL_RCC_ClockConfig+0x278>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 0307 	and.w	r3, r3, #7
 8007de8:	683a      	ldr	r2, [r7, #0]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d1ef      	bne.n	8007dce <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 0302 	and.w	r3, r3, #2
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d016      	beq.n	8007e28 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7ff fb13 	bl	800742a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007e04:	f7fc ffc4 	bl	8004d90 <HAL_GetTick>
 8007e08:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007e0a:	e008      	b.n	8007e1e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007e0c:	f7fc ffc0 	bl	8004d90 <HAL_GetTick>
 8007e10:	4602      	mov	r2, r0
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d901      	bls.n	8007e1e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e0f2      	b.n	8008004 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007e1e:	f7ff fbe8 	bl	80075f2 <LL_RCC_IsActiveFlag_HPRE>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d0f1      	beq.n	8007e0c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0320 	and.w	r3, r3, #32
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d016      	beq.n	8007e62 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	695b      	ldr	r3, [r3, #20]
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f7ff fb0a 	bl	8007452 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007e3e:	f7fc ffa7 	bl	8004d90 <HAL_GetTick>
 8007e42:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007e44:	e008      	b.n	8007e58 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007e46:	f7fc ffa3 	bl	8004d90 <HAL_GetTick>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	1ad3      	subs	r3, r2, r3
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d901      	bls.n	8007e58 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007e54:	2303      	movs	r3, #3
 8007e56:	e0d5      	b.n	8008004 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007e58:	f7ff fbdd 	bl	8007616 <LL_RCC_IsActiveFlag_C2HPRE>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d0f1      	beq.n	8007e46 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d016      	beq.n	8007e9c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	699b      	ldr	r3, [r3, #24]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7ff fb03 	bl	800747e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007e78:	f7fc ff8a 	bl	8004d90 <HAL_GetTick>
 8007e7c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007e7e:	e008      	b.n	8007e92 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007e80:	f7fc ff86 	bl	8004d90 <HAL_GetTick>
 8007e84:	4602      	mov	r2, r0
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d901      	bls.n	8007e92 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e0b8      	b.n	8008004 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007e92:	f7ff fbd3 	bl	800763c <LL_RCC_IsActiveFlag_SHDHPRE>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d0f1      	beq.n	8007e80 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 0304 	and.w	r3, r3, #4
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d016      	beq.n	8007ed6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7ff fafd 	bl	80074ac <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007eb2:	f7fc ff6d 	bl	8004d90 <HAL_GetTick>
 8007eb6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007eb8:	e008      	b.n	8007ecc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007eba:	f7fc ff69 	bl	8004d90 <HAL_GetTick>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	1ad3      	subs	r3, r2, r3
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d901      	bls.n	8007ecc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	e09b      	b.n	8008004 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007ecc:	f7ff fbc9 	bl	8007662 <LL_RCC_IsActiveFlag_PPRE1>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d0f1      	beq.n	8007eba <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 0308 	and.w	r3, r3, #8
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d017      	beq.n	8007f12 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	00db      	lsls	r3, r3, #3
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7ff faf3 	bl	80074d4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007eee:	f7fc ff4f 	bl	8004d90 <HAL_GetTick>
 8007ef2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007ef4:	e008      	b.n	8007f08 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007ef6:	f7fc ff4b 	bl	8004d90 <HAL_GetTick>
 8007efa:	4602      	mov	r2, r0
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	1ad3      	subs	r3, r2, r3
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d901      	bls.n	8007f08 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8007f04:	2303      	movs	r3, #3
 8007f06:	e07d      	b.n	8008004 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007f08:	f7ff fbbd 	bl	8007686 <LL_RCC_IsActiveFlag_PPRE2>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d0f1      	beq.n	8007ef6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 0301 	and.w	r3, r3, #1
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d043      	beq.n	8007fa6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d106      	bne.n	8007f34 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007f26:	f7ff f893 	bl	8007050 <LL_RCC_HSE_IsReady>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d11e      	bne.n	8007f6e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	e067      	b.n	8008004 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	2b03      	cmp	r3, #3
 8007f3a:	d106      	bne.n	8007f4a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007f3c:	f7ff fb16 	bl	800756c <LL_RCC_PLL_IsReady>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d113      	bne.n	8007f6e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e05c      	b.n	8008004 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d106      	bne.n	8007f60 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007f52:	f7ff f9fb 	bl	800734c <LL_RCC_MSI_IsReady>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d108      	bne.n	8007f6e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e051      	b.n	8008004 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007f60:	f7ff f8a6 	bl	80070b0 <LL_RCC_HSI_IsReady>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d101      	bne.n	8007f6e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e04a      	b.n	8008004 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7ff fa39 	bl	80073ea <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f78:	f7fc ff0a 	bl	8004d90 <HAL_GetTick>
 8007f7c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f7e:	e00a      	b.n	8007f96 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f80:	f7fc ff06 	bl	8004d90 <HAL_GetTick>
 8007f84:	4602      	mov	r2, r0
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d901      	bls.n	8007f96 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8007f92:	2303      	movs	r3, #3
 8007f94:	e036      	b.n	8008004 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f96:	f7ff fa3c 	bl	8007412 <LL_RCC_GetSysClkSource>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d1ec      	bne.n	8007f80 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007fa6:	4b19      	ldr	r3, [pc, #100]	; (800800c <HAL_RCC_ClockConfig+0x278>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 0307 	and.w	r3, r3, #7
 8007fae:	683a      	ldr	r2, [r7, #0]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d21b      	bcs.n	8007fec <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fb4:	4b15      	ldr	r3, [pc, #84]	; (800800c <HAL_RCC_ClockConfig+0x278>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f023 0207 	bic.w	r2, r3, #7
 8007fbc:	4913      	ldr	r1, [pc, #76]	; (800800c <HAL_RCC_ClockConfig+0x278>)
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fc4:	f7fc fee4 	bl	8004d90 <HAL_GetTick>
 8007fc8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fca:	e008      	b.n	8007fde <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007fcc:	f7fc fee0 	bl	8004d90 <HAL_GetTick>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d901      	bls.n	8007fde <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e012      	b.n	8008004 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fde:	4b0b      	ldr	r3, [pc, #44]	; (800800c <HAL_RCC_ClockConfig+0x278>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 0307 	and.w	r3, r3, #7
 8007fe6:	683a      	ldr	r2, [r7, #0]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d1ef      	bne.n	8007fcc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007fec:	f000 f880 	bl	80080f0 <HAL_RCC_GetHCLKFreq>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	4a07      	ldr	r2, [pc, #28]	; (8008010 <HAL_RCC_ClockConfig+0x27c>)
 8007ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8007ff6:	f7fc fed7 	bl	8004da8 <HAL_GetTickPrio>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7fc fe79 	bl	8004cf4 <HAL_InitTick>
 8008002:	4603      	mov	r3, r0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	58004000 	.word	0x58004000
 8008010:	20000008 	.word	0x20000008

08008014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008014:	b590      	push	{r4, r7, lr}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800801a:	f7ff f9fa 	bl	8007412 <LL_RCC_GetSysClkSource>
 800801e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d10a      	bne.n	800803c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008026:	f7ff f9b6 	bl	8007396 <LL_RCC_MSI_GetRange>
 800802a:	4603      	mov	r3, r0
 800802c:	091b      	lsrs	r3, r3, #4
 800802e:	f003 030f 	and.w	r3, r3, #15
 8008032:	4a2b      	ldr	r2, [pc, #172]	; (80080e0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008038:	60fb      	str	r3, [r7, #12]
 800803a:	e04b      	b.n	80080d4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2b04      	cmp	r3, #4
 8008040:	d102      	bne.n	8008048 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008042:	4b28      	ldr	r3, [pc, #160]	; (80080e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008044:	60fb      	str	r3, [r7, #12]
 8008046:	e045      	b.n	80080d4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2b08      	cmp	r3, #8
 800804c:	d10a      	bne.n	8008064 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800804e:	f7fe ffcf 	bl	8006ff0 <LL_RCC_HSE_IsEnabledDiv2>
 8008052:	4603      	mov	r3, r0
 8008054:	2b01      	cmp	r3, #1
 8008056:	d102      	bne.n	800805e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8008058:	4b23      	ldr	r3, [pc, #140]	; (80080e8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800805a:	60fb      	str	r3, [r7, #12]
 800805c:	e03a      	b.n	80080d4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800805e:	4b23      	ldr	r3, [pc, #140]	; (80080ec <HAL_RCC_GetSysClockFreq+0xd8>)
 8008060:	60fb      	str	r3, [r7, #12]
 8008062:	e037      	b.n	80080d4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8008064:	f7ff fab9 	bl	80075da <LL_RCC_PLL_GetMainSource>
 8008068:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	2b02      	cmp	r3, #2
 800806e:	d003      	beq.n	8008078 <HAL_RCC_GetSysClockFreq+0x64>
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	2b03      	cmp	r3, #3
 8008074:	d003      	beq.n	800807e <HAL_RCC_GetSysClockFreq+0x6a>
 8008076:	e00d      	b.n	8008094 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8008078:	4b1a      	ldr	r3, [pc, #104]	; (80080e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800807a:	60bb      	str	r3, [r7, #8]
        break;
 800807c:	e015      	b.n	80080aa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800807e:	f7fe ffb7 	bl	8006ff0 <LL_RCC_HSE_IsEnabledDiv2>
 8008082:	4603      	mov	r3, r0
 8008084:	2b01      	cmp	r3, #1
 8008086:	d102      	bne.n	800808e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8008088:	4b17      	ldr	r3, [pc, #92]	; (80080e8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800808a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800808c:	e00d      	b.n	80080aa <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800808e:	4b17      	ldr	r3, [pc, #92]	; (80080ec <HAL_RCC_GetSysClockFreq+0xd8>)
 8008090:	60bb      	str	r3, [r7, #8]
        break;
 8008092:	e00a      	b.n	80080aa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008094:	f7ff f97f 	bl	8007396 <LL_RCC_MSI_GetRange>
 8008098:	4603      	mov	r3, r0
 800809a:	091b      	lsrs	r3, r3, #4
 800809c:	f003 030f 	and.w	r3, r3, #15
 80080a0:	4a0f      	ldr	r2, [pc, #60]	; (80080e0 <HAL_RCC_GetSysClockFreq+0xcc>)
 80080a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080a6:	60bb      	str	r3, [r7, #8]
        break;
 80080a8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80080aa:	f7ff fa71 	bl	8007590 <LL_RCC_PLL_GetN>
 80080ae:	4602      	mov	r2, r0
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	fb03 f402 	mul.w	r4, r3, r2
 80080b6:	f7ff fa84 	bl	80075c2 <LL_RCC_PLL_GetDivider>
 80080ba:	4603      	mov	r3, r0
 80080bc:	091b      	lsrs	r3, r3, #4
 80080be:	3301      	adds	r3, #1
 80080c0:	fbb4 f4f3 	udiv	r4, r4, r3
 80080c4:	f7ff fa71 	bl	80075aa <LL_RCC_PLL_GetR>
 80080c8:	4603      	mov	r3, r0
 80080ca:	0f5b      	lsrs	r3, r3, #29
 80080cc:	3301      	adds	r3, #1
 80080ce:	fbb4 f3f3 	udiv	r3, r4, r3
 80080d2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80080d4:	68fb      	ldr	r3, [r7, #12]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3714      	adds	r7, #20
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd90      	pop	{r4, r7, pc}
 80080de:	bf00      	nop
 80080e0:	08012b84 	.word	0x08012b84
 80080e4:	00f42400 	.word	0x00f42400
 80080e8:	003d0900 	.word	0x003d0900
 80080ec:	007a1200 	.word	0x007a1200

080080f0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80080f0:	b598      	push	{r3, r4, r7, lr}
 80080f2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80080f4:	f7ff ff8e 	bl	8008014 <HAL_RCC_GetSysClockFreq>
 80080f8:	4604      	mov	r4, r0
 80080fa:	f7ff f9ff 	bl	80074fc <LL_RCC_GetAHBPrescaler>
 80080fe:	4603      	mov	r3, r0
 8008100:	091b      	lsrs	r3, r3, #4
 8008102:	f003 030f 	and.w	r3, r3, #15
 8008106:	4a03      	ldr	r2, [pc, #12]	; (8008114 <HAL_RCC_GetHCLKFreq+0x24>)
 8008108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800810c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8008110:	4618      	mov	r0, r3
 8008112:	bd98      	pop	{r3, r4, r7, pc}
 8008114:	08012b44 	.word	0x08012b44

08008118 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8008118:	b590      	push	{r4, r7, lr}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2bb0      	cmp	r3, #176	; 0xb0
 8008124:	d903      	bls.n	800812e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8008126:	4b15      	ldr	r3, [pc, #84]	; (800817c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812a:	60fb      	str	r3, [r7, #12]
 800812c:	e007      	b.n	800813e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	091b      	lsrs	r3, r3, #4
 8008132:	f003 030f 	and.w	r3, r3, #15
 8008136:	4a11      	ldr	r2, [pc, #68]	; (800817c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800813c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800813e:	f7ff f9e9 	bl	8007514 <LL_RCC_GetAHB4Prescaler>
 8008142:	4603      	mov	r3, r0
 8008144:	091b      	lsrs	r3, r3, #4
 8008146:	f003 030f 	and.w	r3, r3, #15
 800814a:	4a0d      	ldr	r2, [pc, #52]	; (8008180 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800814c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	fbb2 f3f3 	udiv	r3, r2, r3
 8008156:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	4a0a      	ldr	r2, [pc, #40]	; (8008184 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800815c:	fba2 2303 	umull	r2, r3, r2, r3
 8008160:	0c9c      	lsrs	r4, r3, #18
 8008162:	f7fe ff27 	bl	8006fb4 <HAL_PWREx_GetVoltageRange>
 8008166:	4603      	mov	r3, r0
 8008168:	4619      	mov	r1, r3
 800816a:	4620      	mov	r0, r4
 800816c:	f000 f80c 	bl	8008188 <RCC_SetFlashLatency>
 8008170:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8008172:	4618      	mov	r0, r3
 8008174:	3714      	adds	r7, #20
 8008176:	46bd      	mov	sp, r7
 8008178:	bd90      	pop	{r4, r7, pc}
 800817a:	bf00      	nop
 800817c:	08012b84 	.word	0x08012b84
 8008180:	08012b44 	.word	0x08012b44
 8008184:	431bde83 	.word	0x431bde83

08008188 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8008188:	b590      	push	{r4, r7, lr}
 800818a:	b093      	sub	sp, #76	; 0x4c
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8008192:	4b37      	ldr	r3, [pc, #220]	; (8008270 <RCC_SetFlashLatency+0xe8>)
 8008194:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8008198:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800819a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800819e:	4a35      	ldr	r2, [pc, #212]	; (8008274 <RCC_SetFlashLatency+0xec>)
 80081a0:	f107 031c 	add.w	r3, r7, #28
 80081a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80081a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80081aa:	4b33      	ldr	r3, [pc, #204]	; (8008278 <RCC_SetFlashLatency+0xf0>)
 80081ac:	f107 040c 	add.w	r4, r7, #12
 80081b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80081b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80081b6:	2300      	movs	r3, #0
 80081b8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081c0:	d11a      	bne.n	80081f8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80081c2:	2300      	movs	r3, #0
 80081c4:	643b      	str	r3, [r7, #64]	; 0x40
 80081c6:	e013      	b.n	80081f0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80081c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	3348      	adds	r3, #72	; 0x48
 80081ce:	443b      	add	r3, r7
 80081d0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d807      	bhi.n	80081ea <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80081da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	3348      	adds	r3, #72	; 0x48
 80081e0:	443b      	add	r3, r7
 80081e2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80081e6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80081e8:	e020      	b.n	800822c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80081ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081ec:	3301      	adds	r3, #1
 80081ee:	643b      	str	r3, [r7, #64]	; 0x40
 80081f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081f2:	2b03      	cmp	r3, #3
 80081f4:	d9e8      	bls.n	80081c8 <RCC_SetFlashLatency+0x40>
 80081f6:	e019      	b.n	800822c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80081f8:	2300      	movs	r3, #0
 80081fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081fc:	e013      	b.n	8008226 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80081fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	3348      	adds	r3, #72	; 0x48
 8008204:	443b      	add	r3, r7
 8008206:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	429a      	cmp	r2, r3
 800820e:	d807      	bhi.n	8008220 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	3348      	adds	r3, #72	; 0x48
 8008216:	443b      	add	r3, r7
 8008218:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800821c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800821e:	e005      	b.n	800822c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008222:	3301      	adds	r3, #1
 8008224:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008228:	2b02      	cmp	r3, #2
 800822a:	d9e8      	bls.n	80081fe <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800822c:	4b13      	ldr	r3, [pc, #76]	; (800827c <RCC_SetFlashLatency+0xf4>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f023 0207 	bic.w	r2, r3, #7
 8008234:	4911      	ldr	r1, [pc, #68]	; (800827c <RCC_SetFlashLatency+0xf4>)
 8008236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008238:	4313      	orrs	r3, r2
 800823a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800823c:	f7fc fda8 	bl	8004d90 <HAL_GetTick>
 8008240:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008242:	e008      	b.n	8008256 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008244:	f7fc fda4 	bl	8004d90 <HAL_GetTick>
 8008248:	4602      	mov	r2, r0
 800824a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	2b02      	cmp	r3, #2
 8008250:	d901      	bls.n	8008256 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8008252:	2303      	movs	r3, #3
 8008254:	e007      	b.n	8008266 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008256:	4b09      	ldr	r3, [pc, #36]	; (800827c <RCC_SetFlashLatency+0xf4>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f003 0307 	and.w	r3, r3, #7
 800825e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008260:	429a      	cmp	r2, r3
 8008262:	d1ef      	bne.n	8008244 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	374c      	adds	r7, #76	; 0x4c
 800826a:	46bd      	mov	sp, r7
 800826c:	bd90      	pop	{r4, r7, pc}
 800826e:	bf00      	nop
 8008270:	08012a94 	.word	0x08012a94
 8008274:	08012aa4 	.word	0x08012aa4
 8008278:	08012ab0 	.word	0x08012ab0
 800827c:	58004000 	.word	0x58004000

08008280 <LL_RCC_LSE_IsEnabled>:
{
 8008280:	b480      	push	{r7}
 8008282:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8008284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800828c:	f003 0301 	and.w	r3, r3, #1
 8008290:	2b01      	cmp	r3, #1
 8008292:	d101      	bne.n	8008298 <LL_RCC_LSE_IsEnabled+0x18>
 8008294:	2301      	movs	r3, #1
 8008296:	e000      	b.n	800829a <LL_RCC_LSE_IsEnabled+0x1a>
 8008298:	2300      	movs	r3, #0
}
 800829a:	4618      	mov	r0, r3
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <LL_RCC_LSE_IsReady>:
{
 80082a4:	b480      	push	{r7}
 80082a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80082a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082b0:	f003 0302 	and.w	r3, r3, #2
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	d101      	bne.n	80082bc <LL_RCC_LSE_IsReady+0x18>
 80082b8:	2301      	movs	r3, #1
 80082ba:	e000      	b.n	80082be <LL_RCC_LSE_IsReady+0x1a>
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <LL_RCC_MSI_EnablePLLMode>:
{
 80082c8:	b480      	push	{r7}
 80082ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80082cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082d6:	f043 0304 	orr.w	r3, r3, #4
 80082da:	6013      	str	r3, [r2, #0]
}
 80082dc:	bf00      	nop
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr

080082e6 <LL_RCC_SetRFWKPClockSource>:
{
 80082e6:	b480      	push	{r7}
 80082e8:	b083      	sub	sp, #12
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80082ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80082fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4313      	orrs	r3, r2
 8008302:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8008306:	bf00      	nop
 8008308:	370c      	adds	r7, #12
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr

08008312 <LL_RCC_SetSMPSClockSource>:
{
 8008312:	b480      	push	{r7}
 8008314:	b083      	sub	sp, #12
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800831a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800831e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008320:	f023 0203 	bic.w	r2, r3, #3
 8008324:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4313      	orrs	r3, r2
 800832c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800832e:	bf00      	nop
 8008330:	370c      	adds	r7, #12
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr

0800833a <LL_RCC_SetSMPSPrescaler>:
{
 800833a:	b480      	push	{r7}
 800833c:	b083      	sub	sp, #12
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8008342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008348:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800834c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4313      	orrs	r3, r2
 8008354:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008356:	bf00      	nop
 8008358:	370c      	adds	r7, #12
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr

08008362 <LL_RCC_SetUSARTClockSource>:
{
 8008362:	b480      	push	{r7}
 8008364:	b083      	sub	sp, #12
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800836a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800836e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008372:	f023 0203 	bic.w	r2, r3, #3
 8008376:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4313      	orrs	r3, r2
 800837e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008382:	bf00      	nop
 8008384:	370c      	adds	r7, #12
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr

0800838e <LL_RCC_SetLPUARTClockSource>:
{
 800838e:	b480      	push	{r7}
 8008390:	b083      	sub	sp, #12
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8008396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800839a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800839e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80083a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80083ae:	bf00      	nop
 80083b0:	370c      	adds	r7, #12
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr

080083ba <LL_RCC_SetI2CClockSource>:
{
 80083ba:	b480      	push	{r7}
 80083bc:	b083      	sub	sp, #12
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80083c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	091b      	lsrs	r3, r3, #4
 80083ce:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80083d2:	43db      	mvns	r3, r3
 80083d4:	401a      	ands	r2, r3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	011b      	lsls	r3, r3, #4
 80083da:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80083de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80083e2:	4313      	orrs	r3, r2
 80083e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80083e8:	bf00      	nop
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <LL_RCC_SetLPTIMClockSource>:
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80083fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008400:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	0c1b      	lsrs	r3, r3, #16
 8008408:	041b      	lsls	r3, r3, #16
 800840a:	43db      	mvns	r3, r3
 800840c:	401a      	ands	r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	041b      	lsls	r3, r3, #16
 8008412:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008416:	4313      	orrs	r3, r2
 8008418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800841c:	bf00      	nop
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <LL_RCC_SetSAIClockSource>:
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8008430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008438:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800843c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4313      	orrs	r3, r2
 8008444:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008448:	bf00      	nop
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <LL_RCC_SetRNGClockSource>:
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800845c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008464:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008468:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4313      	orrs	r3, r2
 8008470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008474:	bf00      	nop
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <LL_RCC_SetCLK48ClockSource>:
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8008488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800848c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008490:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008494:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4313      	orrs	r3, r2
 800849c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80084a0:	bf00      	nop
 80084a2:	370c      	adds	r7, #12
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <LL_RCC_SetUSBClockSource>:
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b082      	sub	sp, #8
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f7ff ffe3 	bl	8008480 <LL_RCC_SetCLK48ClockSource>
}
 80084ba:	bf00      	nop
 80084bc:	3708      	adds	r7, #8
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}

080084c2 <LL_RCC_SetADCClockSource>:
{
 80084c2:	b480      	push	{r7}
 80084c4:	b083      	sub	sp, #12
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80084ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80084d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4313      	orrs	r3, r2
 80084de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80084e2:	bf00      	nop
 80084e4:	370c      	adds	r7, #12
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr

080084ee <LL_RCC_SetRTCClockSource>:
{
 80084ee:	b480      	push	{r7}
 80084f0:	b083      	sub	sp, #12
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80084f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008502:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4313      	orrs	r3, r2
 800850a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800850e:	bf00      	nop
 8008510:	370c      	adds	r7, #12
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <LL_RCC_GetRTCClockSource>:
{
 800851a:	b480      	push	{r7}
 800851c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800851e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008526:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800852a:	4618      	mov	r0, r3
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <LL_RCC_ForceBackupDomainReset>:
{
 8008534:	b480      	push	{r7}
 8008536:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800853c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008540:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800854c:	bf00      	nop
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr

08008556 <LL_RCC_ReleaseBackupDomainReset>:
{
 8008556:	b480      	push	{r7}
 8008558:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800855a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800855e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008562:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800856a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800856e:	bf00      	nop
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <LL_RCC_PLLSAI1_Enable>:
{
 8008578:	b480      	push	{r7}
 800857a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800857c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008586:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800858a:	6013      	str	r3, [r2, #0]
}
 800858c:	bf00      	nop
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr

08008596 <LL_RCC_PLLSAI1_Disable>:
{
 8008596:	b480      	push	{r7}
 8008598:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800859a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80085a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80085a8:	6013      	str	r3, [r2, #0]
}
 80085aa:	bf00      	nop
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <LL_RCC_PLLSAI1_IsReady>:
{
 80085b4:	b480      	push	{r7}
 80085b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80085b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085c6:	d101      	bne.n	80085cc <LL_RCC_PLLSAI1_IsReady+0x18>
 80085c8:	2301      	movs	r3, #1
 80085ca:	e000      	b.n	80085ce <LL_RCC_PLLSAI1_IsReady+0x1a>
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b088      	sub	sp, #32
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80085e0:	2300      	movs	r3, #0
 80085e2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80085e4:	2300      	movs	r3, #0
 80085e6:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d034      	beq.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80085fc:	d021      	beq.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80085fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008602:	d81b      	bhi.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008604:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008608:	d01d      	beq.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800860a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800860e:	d815      	bhi.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00b      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8008614:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008618:	d110      	bne.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800861a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008628:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800862a:	e00d      	b.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	3304      	adds	r3, #4
 8008630:	4618      	mov	r0, r3
 8008632:	f000 f94d 	bl	80088d0 <RCCEx_PLLSAI1_ConfigNP>
 8008636:	4603      	mov	r3, r0
 8008638:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800863a:	e005      	b.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	77fb      	strb	r3, [r7, #31]
        break;
 8008640:	e002      	b.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8008642:	bf00      	nop
 8008644:	e000      	b.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8008646:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008648:	7ffb      	ldrb	r3, [r7, #31]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d105      	bne.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008652:	4618      	mov	r0, r3
 8008654:	f7ff fee8 	bl	8008428 <LL_RCC_SetSAIClockSource>
 8008658:	e001      	b.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800865a:	7ffb      	ldrb	r3, [r7, #31]
 800865c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008666:	2b00      	cmp	r3, #0
 8008668:	d046      	beq.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800866a:	f7ff ff56 	bl	800851a <LL_RCC_GetRTCClockSource>
 800866e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008674:	69ba      	ldr	r2, [r7, #24]
 8008676:	429a      	cmp	r2, r3
 8008678:	d03c      	beq.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800867a:	f7fe fc8b 	bl	8006f94 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800867e:	69bb      	ldr	r3, [r7, #24]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d105      	bne.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008688:	4618      	mov	r0, r3
 800868a:	f7ff ff30 	bl	80084ee <LL_RCC_SetRTCClockSource>
 800868e:	e02e      	b.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8008690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008698:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800869a:	f7ff ff4b 	bl	8008534 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800869e:	f7ff ff5a 	bl	8008556 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ac:	4313      	orrs	r3, r2
 80086ae:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80086b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80086ba:	f7ff fde1 	bl	8008280 <LL_RCC_LSE_IsEnabled>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d114      	bne.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80086c4:	f7fc fb64 	bl	8004d90 <HAL_GetTick>
 80086c8:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80086ca:	e00b      	b.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086cc:	f7fc fb60 	bl	8004d90 <HAL_GetTick>
 80086d0:	4602      	mov	r2, r0
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80086da:	4293      	cmp	r3, r2
 80086dc:	d902      	bls.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80086de:	2303      	movs	r3, #3
 80086e0:	77fb      	strb	r3, [r7, #31]
              break;
 80086e2:	e004      	b.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80086e4:	f7ff fdde 	bl	80082a4 <LL_RCC_LSE_IsReady>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d1ee      	bne.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80086ee:	7ffb      	ldrb	r3, [r7, #31]
 80086f0:	77bb      	strb	r3, [r7, #30]
 80086f2:	e001      	b.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086f4:	7ffb      	ldrb	r3, [r7, #31]
 80086f6:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 0301 	and.w	r3, r3, #1
 8008700:	2b00      	cmp	r3, #0
 8008702:	d004      	beq.n	800870e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	699b      	ldr	r3, [r3, #24]
 8008708:	4618      	mov	r0, r3
 800870a:	f7ff fe2a 	bl	8008362 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 0302 	and.w	r3, r3, #2
 8008716:	2b00      	cmp	r3, #0
 8008718:	d004      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	69db      	ldr	r3, [r3, #28]
 800871e:	4618      	mov	r0, r3
 8008720:	f7ff fe35 	bl	800838e <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 0310 	and.w	r3, r3, #16
 800872c:	2b00      	cmp	r3, #0
 800872e:	d004      	beq.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008734:	4618      	mov	r0, r3
 8008736:	f7ff fe5d 	bl	80083f4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f003 0320 	and.w	r3, r3, #32
 8008742:	2b00      	cmp	r3, #0
 8008744:	d004      	beq.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800874a:	4618      	mov	r0, r3
 800874c:	f7ff fe52 	bl	80083f4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 0304 	and.w	r3, r3, #4
 8008758:	2b00      	cmp	r3, #0
 800875a:	d004      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6a1b      	ldr	r3, [r3, #32]
 8008760:	4618      	mov	r0, r3
 8008762:	f7ff fe2a 	bl	80083ba <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 0308 	and.w	r3, r3, #8
 800876e:	2b00      	cmp	r3, #0
 8008770:	d004      	beq.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008776:	4618      	mov	r0, r3
 8008778:	f7ff fe1f 	bl	80083ba <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008784:	2b00      	cmp	r3, #0
 8008786:	d022      	beq.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800878c:	4618      	mov	r0, r3
 800878e:	f7ff fe8d 	bl	80084ac <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008796:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800879a:	d107      	bne.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800879c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80087a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087aa:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80087b4:	d10b      	bne.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	3304      	adds	r3, #4
 80087ba:	4618      	mov	r0, r3
 80087bc:	f000 f8e3 	bl	8008986 <RCCEx_PLLSAI1_ConfigNQ>
 80087c0:	4603      	mov	r3, r0
 80087c2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80087c4:	7ffb      	ldrb	r3, [r7, #31]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d001      	beq.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80087ca:	7ffb      	ldrb	r3, [r7, #31]
 80087cc:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d02b      	beq.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087e2:	d008      	beq.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087ec:	d003      	beq.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d105      	bne.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7ff fe2a 	bl	8008454 <LL_RCC_SetRNGClockSource>
 8008800:	e00a      	b.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008806:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800880a:	60fb      	str	r3, [r7, #12]
 800880c:	2000      	movs	r0, #0
 800880e:	f7ff fe21 	bl	8008454 <LL_RCC_SetRNGClockSource>
 8008812:	68f8      	ldr	r0, [r7, #12]
 8008814:	f7ff fe34 	bl	8008480 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8008820:	d107      	bne.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8008822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800882c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008830:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800883a:	2b00      	cmp	r3, #0
 800883c:	d022      	beq.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008842:	4618      	mov	r0, r3
 8008844:	f7ff fe3d 	bl	80084c2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800884c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008850:	d107      	bne.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800885c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008860:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008866:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800886a:	d10b      	bne.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	3304      	adds	r3, #4
 8008870:	4618      	mov	r0, r3
 8008872:	f000 f8e3 	bl	8008a3c <RCCEx_PLLSAI1_ConfigNR>
 8008876:	4603      	mov	r3, r0
 8008878:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800887a:	7ffb      	ldrb	r3, [r7, #31]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d001      	beq.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8008880:	7ffb      	ldrb	r3, [r7, #31]
 8008882:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800888c:	2b00      	cmp	r3, #0
 800888e:	d004      	beq.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008894:	4618      	mov	r0, r3
 8008896:	f7ff fd26 	bl	80082e6 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d009      	beq.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7ff fd45 	bl	800833a <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7ff fd2c 	bl	8008312 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80088ba:	7fbb      	ldrb	r3, [r7, #30]
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3720      	adds	r7, #32
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80088c8:	f7ff fcfe 	bl	80082c8 <LL_RCC_MSI_EnablePLLMode>
}
 80088cc:	bf00      	nop
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80088d8:	2300      	movs	r3, #0
 80088da:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80088dc:	f7ff fe5b 	bl	8008596 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80088e0:	f7fc fa56 	bl	8004d90 <HAL_GetTick>
 80088e4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80088e6:	e009      	b.n	80088fc <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80088e8:	f7fc fa52 	bl	8004d90 <HAL_GetTick>
 80088ec:	4602      	mov	r2, r0
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	1ad3      	subs	r3, r2, r3
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	d902      	bls.n	80088fc <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80088f6:	2303      	movs	r3, #3
 80088f8:	73fb      	strb	r3, [r7, #15]
      break;
 80088fa:	e004      	b.n	8008906 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80088fc:	f7ff fe5a 	bl	80085b4 <LL_RCC_PLLSAI1_IsReady>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1f0      	bne.n	80088e8 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8008906:	7bfb      	ldrb	r3, [r7, #15]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d137      	bne.n	800897c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800890c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008910:	691b      	ldr	r3, [r3, #16]
 8008912:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	021b      	lsls	r3, r3, #8
 800891c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008920:	4313      	orrs	r3, r2
 8008922:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8008924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008928:	691b      	ldr	r3, [r3, #16]
 800892a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008936:	4313      	orrs	r3, r2
 8008938:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800893a:	f7ff fe1d 	bl	8008578 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800893e:	f7fc fa27 	bl	8004d90 <HAL_GetTick>
 8008942:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008944:	e009      	b.n	800895a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008946:	f7fc fa23 	bl	8004d90 <HAL_GetTick>
 800894a:	4602      	mov	r2, r0
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	2b02      	cmp	r3, #2
 8008952:	d902      	bls.n	800895a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8008954:	2303      	movs	r3, #3
 8008956:	73fb      	strb	r3, [r7, #15]
        break;
 8008958:	e004      	b.n	8008964 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800895a:	f7ff fe2b 	bl	80085b4 <LL_RCC_PLLSAI1_IsReady>
 800895e:	4603      	mov	r3, r0
 8008960:	2b01      	cmp	r3, #1
 8008962:	d1f0      	bne.n	8008946 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8008964:	7bfb      	ldrb	r3, [r7, #15]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d108      	bne.n	800897c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800896a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800896e:	691a      	ldr	r2, [r3, #16]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	691b      	ldr	r3, [r3, #16]
 8008974:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008978:	4313      	orrs	r3, r2
 800897a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800897c:	7bfb      	ldrb	r3, [r7, #15]
}
 800897e:	4618      	mov	r0, r3
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b084      	sub	sp, #16
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800898e:	2300      	movs	r3, #0
 8008990:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008992:	f7ff fe00 	bl	8008596 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008996:	f7fc f9fb 	bl	8004d90 <HAL_GetTick>
 800899a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800899c:	e009      	b.n	80089b2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800899e:	f7fc f9f7 	bl	8004d90 <HAL_GetTick>
 80089a2:	4602      	mov	r2, r0
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	1ad3      	subs	r3, r2, r3
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	d902      	bls.n	80089b2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80089ac:	2303      	movs	r3, #3
 80089ae:	73fb      	strb	r3, [r7, #15]
      break;
 80089b0:	e004      	b.n	80089bc <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80089b2:	f7ff fdff 	bl	80085b4 <LL_RCC_PLLSAI1_IsReady>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1f0      	bne.n	800899e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80089bc:	7bfb      	ldrb	r3, [r7, #15]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d137      	bne.n	8008a32 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80089c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	021b      	lsls	r3, r3, #8
 80089d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80089d6:	4313      	orrs	r3, r2
 80089d8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80089da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80089ec:	4313      	orrs	r3, r2
 80089ee:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80089f0:	f7ff fdc2 	bl	8008578 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089f4:	f7fc f9cc 	bl	8004d90 <HAL_GetTick>
 80089f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80089fa:	e009      	b.n	8008a10 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80089fc:	f7fc f9c8 	bl	8004d90 <HAL_GetTick>
 8008a00:	4602      	mov	r2, r0
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d902      	bls.n	8008a10 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	73fb      	strb	r3, [r7, #15]
        break;
 8008a0e:	e004      	b.n	8008a1a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008a10:	f7ff fdd0 	bl	80085b4 <LL_RCC_PLLSAI1_IsReady>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d1f0      	bne.n	80089fc <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8008a1a:	7bfb      	ldrb	r3, [r7, #15]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d108      	bne.n	8008a32 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a24:	691a      	ldr	r2, [r3, #16]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a44:	2300      	movs	r3, #0
 8008a46:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008a48:	f7ff fda5 	bl	8008596 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008a4c:	f7fc f9a0 	bl	8004d90 <HAL_GetTick>
 8008a50:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008a52:	e009      	b.n	8008a68 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008a54:	f7fc f99c 	bl	8004d90 <HAL_GetTick>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	1ad3      	subs	r3, r2, r3
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d902      	bls.n	8008a68 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8008a62:	2303      	movs	r3, #3
 8008a64:	73fb      	strb	r3, [r7, #15]
      break;
 8008a66:	e004      	b.n	8008a72 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008a68:	f7ff fda4 	bl	80085b4 <LL_RCC_PLLSAI1_IsReady>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1f0      	bne.n	8008a54 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8008a72:	7bfb      	ldrb	r3, [r7, #15]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d137      	bne.n	8008ae8 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	021b      	lsls	r3, r3, #8
 8008a88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8008a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a94:	691b      	ldr	r3, [r3, #16]
 8008a96:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008aa6:	f7ff fd67 	bl	8008578 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008aaa:	f7fc f971 	bl	8004d90 <HAL_GetTick>
 8008aae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008ab0:	e009      	b.n	8008ac6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008ab2:	f7fc f96d 	bl	8004d90 <HAL_GetTick>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	d902      	bls.n	8008ac6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	73fb      	strb	r3, [r7, #15]
        break;
 8008ac4:	e004      	b.n	8008ad0 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008ac6:	f7ff fd75 	bl	80085b4 <LL_RCC_PLLSAI1_IsReady>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d1f0      	bne.n	8008ab2 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8008ad0:	7bfb      	ldrb	r3, [r7, #15]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d108      	bne.n	8008ae8 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ada:	691a      	ldr	r2, [r3, #16]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b082      	sub	sp, #8
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d101      	bne.n	8008b04 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	e049      	b.n	8008b98 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d106      	bne.n	8008b1e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f7fb ff21 	bl	8004960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2202      	movs	r2, #2
 8008b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	3304      	adds	r3, #4
 8008b2e:	4619      	mov	r1, r3
 8008b30:	4610      	mov	r0, r2
 8008b32:	f000 f9cb 	bl	8008ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2201      	movs	r2, #1
 8008b3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2201      	movs	r2, #1
 8008b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2201      	movs	r2, #1
 8008b4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2201      	movs	r2, #1
 8008b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2201      	movs	r2, #1
 8008b62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2201      	movs	r2, #1
 8008b72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2201      	movs	r2, #1
 8008b82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2201      	movs	r2, #1
 8008b8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2201      	movs	r2, #1
 8008b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3708      	adds	r7, #8
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b085      	sub	sp, #20
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d001      	beq.n	8008bb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	e036      	b.n	8008c26 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2202      	movs	r2, #2
 8008bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	68da      	ldr	r2, [r3, #12]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f042 0201 	orr.w	r2, r2, #1
 8008bce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a17      	ldr	r2, [pc, #92]	; (8008c34 <HAL_TIM_Base_Start_IT+0x94>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d004      	beq.n	8008be4 <HAL_TIM_Base_Start_IT+0x44>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008be2:	d115      	bne.n	8008c10 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	689a      	ldr	r2, [r3, #8]
 8008bea:	4b13      	ldr	r3, [pc, #76]	; (8008c38 <HAL_TIM_Base_Start_IT+0x98>)
 8008bec:	4013      	ands	r3, r2
 8008bee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2b06      	cmp	r3, #6
 8008bf4:	d015      	beq.n	8008c22 <HAL_TIM_Base_Start_IT+0x82>
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bfc:	d011      	beq.n	8008c22 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f042 0201 	orr.w	r2, r2, #1
 8008c0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c0e:	e008      	b.n	8008c22 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f042 0201 	orr.w	r2, r2, #1
 8008c1e:	601a      	str	r2, [r3, #0]
 8008c20:	e000      	b.n	8008c24 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3714      	adds	r7, #20
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	40012c00 	.word	0x40012c00
 8008c38:	00010007 	.word	0x00010007

08008c3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	691b      	ldr	r3, [r3, #16]
 8008c4a:	f003 0302 	and.w	r3, r3, #2
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d122      	bne.n	8008c98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	f003 0302 	and.w	r3, r3, #2
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	d11b      	bne.n	8008c98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f06f 0202 	mvn.w	r2, #2
 8008c68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	699b      	ldr	r3, [r3, #24]
 8008c76:	f003 0303 	and.w	r3, r3, #3
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d003      	beq.n	8008c86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 f905 	bl	8008e8e <HAL_TIM_IC_CaptureCallback>
 8008c84:	e005      	b.n	8008c92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 f8f7 	bl	8008e7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 f908 	bl	8008ea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	f003 0304 	and.w	r3, r3, #4
 8008ca2:	2b04      	cmp	r3, #4
 8008ca4:	d122      	bne.n	8008cec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	f003 0304 	and.w	r3, r3, #4
 8008cb0:	2b04      	cmp	r3, #4
 8008cb2:	d11b      	bne.n	8008cec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f06f 0204 	mvn.w	r2, #4
 8008cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2202      	movs	r2, #2
 8008cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d003      	beq.n	8008cda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f8db 	bl	8008e8e <HAL_TIM_IC_CaptureCallback>
 8008cd8:	e005      	b.n	8008ce6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f8cd 	bl	8008e7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 f8de 	bl	8008ea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	f003 0308 	and.w	r3, r3, #8
 8008cf6:	2b08      	cmp	r3, #8
 8008cf8:	d122      	bne.n	8008d40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	f003 0308 	and.w	r3, r3, #8
 8008d04:	2b08      	cmp	r3, #8
 8008d06:	d11b      	bne.n	8008d40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f06f 0208 	mvn.w	r2, #8
 8008d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2204      	movs	r2, #4
 8008d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	69db      	ldr	r3, [r3, #28]
 8008d1e:	f003 0303 	and.w	r3, r3, #3
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d003      	beq.n	8008d2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f8b1 	bl	8008e8e <HAL_TIM_IC_CaptureCallback>
 8008d2c:	e005      	b.n	8008d3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 f8a3 	bl	8008e7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 f8b4 	bl	8008ea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	f003 0310 	and.w	r3, r3, #16
 8008d4a:	2b10      	cmp	r3, #16
 8008d4c:	d122      	bne.n	8008d94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	f003 0310 	and.w	r3, r3, #16
 8008d58:	2b10      	cmp	r3, #16
 8008d5a:	d11b      	bne.n	8008d94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f06f 0210 	mvn.w	r2, #16
 8008d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2208      	movs	r2, #8
 8008d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	69db      	ldr	r3, [r3, #28]
 8008d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d003      	beq.n	8008d82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f887 	bl	8008e8e <HAL_TIM_IC_CaptureCallback>
 8008d80:	e005      	b.n	8008d8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 f879 	bl	8008e7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 f88a 	bl	8008ea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	f003 0301 	and.w	r3, r3, #1
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d10e      	bne.n	8008dc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	f003 0301 	and.w	r3, r3, #1
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d107      	bne.n	8008dc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f06f 0201 	mvn.w	r2, #1
 8008db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7fb fd0c 	bl	80047d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	691b      	ldr	r3, [r3, #16]
 8008dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dca:	2b80      	cmp	r3, #128	; 0x80
 8008dcc:	d10e      	bne.n	8008dec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dd8:	2b80      	cmp	r3, #128	; 0x80
 8008dda:	d107      	bne.n	8008dec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 f8de 	bl	8008fa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dfa:	d10e      	bne.n	8008e1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e06:	2b80      	cmp	r3, #128	; 0x80
 8008e08:	d107      	bne.n	8008e1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 f8d1 	bl	8008fbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e24:	2b40      	cmp	r3, #64	; 0x40
 8008e26:	d10e      	bne.n	8008e46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e32:	2b40      	cmp	r3, #64	; 0x40
 8008e34:	d107      	bne.n	8008e46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 f838 	bl	8008eb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	f003 0320 	and.w	r3, r3, #32
 8008e50:	2b20      	cmp	r3, #32
 8008e52:	d10e      	bne.n	8008e72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	68db      	ldr	r3, [r3, #12]
 8008e5a:	f003 0320 	and.w	r3, r3, #32
 8008e5e:	2b20      	cmp	r3, #32
 8008e60:	d107      	bne.n	8008e72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f06f 0220 	mvn.w	r2, #32
 8008e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 f891 	bl	8008f94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e72:	bf00      	nop
 8008e74:	3708      	adds	r7, #8
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e7a:	b480      	push	{r7}
 8008e7c:	b083      	sub	sp, #12
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e82:	bf00      	nop
 8008e84:	370c      	adds	r7, #12
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr

08008e8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e8e:	b480      	push	{r7}
 8008e90:	b083      	sub	sp, #12
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e96:	bf00      	nop
 8008e98:	370c      	adds	r7, #12
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr

08008ea2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ea2:	b480      	push	{r7}
 8008ea4:	b083      	sub	sp, #12
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008eaa:	bf00      	nop
 8008eac:	370c      	adds	r7, #12
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr

08008eb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008eb6:	b480      	push	{r7}
 8008eb8:	b083      	sub	sp, #12
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ebe:	bf00      	nop
 8008ec0:	370c      	adds	r7, #12
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr
	...

08008ecc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b085      	sub	sp, #20
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4a2a      	ldr	r2, [pc, #168]	; (8008f88 <TIM_Base_SetConfig+0xbc>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d003      	beq.n	8008eec <TIM_Base_SetConfig+0x20>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eea:	d108      	bne.n	8008efe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	68fa      	ldr	r2, [r7, #12]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4a21      	ldr	r2, [pc, #132]	; (8008f88 <TIM_Base_SetConfig+0xbc>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d00b      	beq.n	8008f1e <TIM_Base_SetConfig+0x52>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f0c:	d007      	beq.n	8008f1e <TIM_Base_SetConfig+0x52>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	4a1e      	ldr	r2, [pc, #120]	; (8008f8c <TIM_Base_SetConfig+0xc0>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d003      	beq.n	8008f1e <TIM_Base_SetConfig+0x52>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4a1d      	ldr	r2, [pc, #116]	; (8008f90 <TIM_Base_SetConfig+0xc4>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d108      	bne.n	8008f30 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	68fa      	ldr	r2, [r7, #12]
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	695b      	ldr	r3, [r3, #20]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	689a      	ldr	r2, [r3, #8]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a0c      	ldr	r2, [pc, #48]	; (8008f88 <TIM_Base_SetConfig+0xbc>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d007      	beq.n	8008f6c <TIM_Base_SetConfig+0xa0>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a0b      	ldr	r2, [pc, #44]	; (8008f8c <TIM_Base_SetConfig+0xc0>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d003      	beq.n	8008f6c <TIM_Base_SetConfig+0xa0>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a0a      	ldr	r2, [pc, #40]	; (8008f90 <TIM_Base_SetConfig+0xc4>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d103      	bne.n	8008f74 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	691a      	ldr	r2, [r3, #16]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	615a      	str	r2, [r3, #20]
}
 8008f7a:	bf00      	nop
 8008f7c:	3714      	adds	r7, #20
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop
 8008f88:	40012c00 	.word	0x40012c00
 8008f8c:	40014400 	.word	0x40014400
 8008f90:	40014800 	.word	0x40014800

08008f94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f9c:	bf00      	nop
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008fb0:	bf00      	nop
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008fc4:	bf00      	nop
 8008fc6:	370c      	adds	r7, #12
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008fe0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008fe4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	b29a      	uxth	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3714      	adds	r7, #20
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr

08008ffe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008ffe:	b480      	push	{r7}
 8009000:	b085      	sub	sp, #20
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009006:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800900a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009012:	b29a      	uxth	r2, r3
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	b29b      	uxth	r3, r3
 8009018:	43db      	mvns	r3, r3
 800901a:	b29b      	uxth	r3, r3
 800901c:	4013      	ands	r3, r2
 800901e:	b29a      	uxth	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3714      	adds	r7, #20
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009034:	b084      	sub	sp, #16
 8009036:	b480      	push	{r7}
 8009038:	b083      	sub	sp, #12
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
 800903e:	f107 0014 	add.w	r0, r7, #20
 8009042:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2201      	movs	r2, #1
 800904a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	4618      	mov	r0, r3
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	b004      	add	sp, #16
 8009074:	4770      	bx	lr
	...

08009078 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009078:	b480      	push	{r7}
 800907a:	b09d      	sub	sp, #116	; 0x74
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009082:	2300      	movs	r3, #0
 8009084:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	4413      	add	r3, r2
 8009092:	881b      	ldrh	r3, [r3, #0]
 8009094:	b29b      	uxth	r3, r3
 8009096:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800909a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800909e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	78db      	ldrb	r3, [r3, #3]
 80090a6:	2b03      	cmp	r3, #3
 80090a8:	d81f      	bhi.n	80090ea <USB_ActivateEndpoint+0x72>
 80090aa:	a201      	add	r2, pc, #4	; (adr r2, 80090b0 <USB_ActivateEndpoint+0x38>)
 80090ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b0:	080090c1 	.word	0x080090c1
 80090b4:	080090dd 	.word	0x080090dd
 80090b8:	080090f3 	.word	0x080090f3
 80090bc:	080090cf 	.word	0x080090cf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80090c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80090c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80090c8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80090cc:	e012      	b.n	80090f4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80090ce:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80090d2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80090d6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80090da:	e00b      	b.n	80090f4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80090dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80090e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80090e4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80090e8:	e004      	b.n	80090f4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80090f0:	e000      	b.n	80090f4 <USB_ActivateEndpoint+0x7c>
      break;
 80090f2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	441a      	add	r2, r3
 80090fe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009102:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800910a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800910e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009112:	b29b      	uxth	r3, r3
 8009114:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	4413      	add	r3, r2
 8009120:	881b      	ldrh	r3, [r3, #0]
 8009122:	b29b      	uxth	r3, r3
 8009124:	b21b      	sxth	r3, r3
 8009126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800912a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800912e:	b21a      	sxth	r2, r3
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	b21b      	sxth	r3, r3
 8009136:	4313      	orrs	r3, r2
 8009138:	b21b      	sxth	r3, r3
 800913a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	441a      	add	r2, r3
 8009148:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800914c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800915c:	b29b      	uxth	r3, r3
 800915e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	7b1b      	ldrb	r3, [r3, #12]
 8009164:	2b00      	cmp	r3, #0
 8009166:	f040 8178 	bne.w	800945a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	785b      	ldrb	r3, [r3, #1]
 800916e:	2b00      	cmp	r3, #0
 8009170:	f000 8084 	beq.w	800927c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	61bb      	str	r3, [r7, #24]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800917e:	b29b      	uxth	r3, r3
 8009180:	461a      	mov	r2, r3
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	4413      	add	r3, r2
 8009186:	61bb      	str	r3, [r7, #24]
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	00da      	lsls	r2, r3, #3
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	4413      	add	r3, r2
 8009192:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009196:	617b      	str	r3, [r7, #20]
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	88db      	ldrh	r3, [r3, #6]
 800919c:	085b      	lsrs	r3, r3, #1
 800919e:	b29b      	uxth	r3, r3
 80091a0:	005b      	lsls	r3, r3, #1
 80091a2:	b29a      	uxth	r2, r3
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	4413      	add	r3, r2
 80091b2:	881b      	ldrh	r3, [r3, #0]
 80091b4:	827b      	strh	r3, [r7, #18]
 80091b6:	8a7b      	ldrh	r3, [r7, #18]
 80091b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d01b      	beq.n	80091f8 <USB_ActivateEndpoint+0x180>
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	4413      	add	r3, r2
 80091ca:	881b      	ldrh	r3, [r3, #0]
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091d6:	823b      	strh	r3, [r7, #16]
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	441a      	add	r2, r3
 80091e2:	8a3b      	ldrh	r3, [r7, #16]
 80091e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	78db      	ldrb	r3, [r3, #3]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d020      	beq.n	8009242 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	4413      	add	r3, r2
 800920a:	881b      	ldrh	r3, [r3, #0]
 800920c:	b29b      	uxth	r3, r3
 800920e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009212:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009216:	81bb      	strh	r3, [r7, #12]
 8009218:	89bb      	ldrh	r3, [r7, #12]
 800921a:	f083 0320 	eor.w	r3, r3, #32
 800921e:	81bb      	strh	r3, [r7, #12]
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	441a      	add	r2, r3
 800922a:	89bb      	ldrh	r3, [r7, #12]
 800922c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009230:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800923c:	b29b      	uxth	r3, r3
 800923e:	8013      	strh	r3, [r2, #0]
 8009240:	e2d5      	b.n	80097ee <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	4413      	add	r3, r2
 800924c:	881b      	ldrh	r3, [r3, #0]
 800924e:	b29b      	uxth	r3, r3
 8009250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009258:	81fb      	strh	r3, [r7, #14]
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	441a      	add	r2, r3
 8009264:	89fb      	ldrh	r3, [r7, #14]
 8009266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800926a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800926e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009276:	b29b      	uxth	r3, r3
 8009278:	8013      	strh	r3, [r2, #0]
 800927a:	e2b8      	b.n	80097ee <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	633b      	str	r3, [r7, #48]	; 0x30
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009286:	b29b      	uxth	r3, r3
 8009288:	461a      	mov	r2, r3
 800928a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800928c:	4413      	add	r3, r2
 800928e:	633b      	str	r3, [r7, #48]	; 0x30
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	00da      	lsls	r2, r3, #3
 8009296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009298:	4413      	add	r3, r2
 800929a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800929e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	88db      	ldrh	r3, [r3, #6]
 80092a4:	085b      	lsrs	r3, r3, #1
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	005b      	lsls	r3, r3, #1
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ae:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	461a      	mov	r2, r3
 80092be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c0:	4413      	add	r3, r2
 80092c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	00da      	lsls	r2, r3, #3
 80092ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092cc:	4413      	add	r3, r2
 80092ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80092d2:	627b      	str	r3, [r7, #36]	; 0x24
 80092d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d6:	881b      	ldrh	r3, [r3, #0]
 80092d8:	b29b      	uxth	r3, r3
 80092da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092de:	b29a      	uxth	r2, r3
 80092e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e2:	801a      	strh	r2, [r3, #0]
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	691b      	ldr	r3, [r3, #16]
 80092e8:	2b3e      	cmp	r3, #62	; 0x3e
 80092ea:	d91d      	bls.n	8009328 <USB_ActivateEndpoint+0x2b0>
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	095b      	lsrs	r3, r3, #5
 80092f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	f003 031f 	and.w	r3, r3, #31
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d102      	bne.n	8009306 <USB_ActivateEndpoint+0x28e>
 8009300:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009302:	3b01      	subs	r3, #1
 8009304:	66bb      	str	r3, [r7, #104]	; 0x68
 8009306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009308:	881b      	ldrh	r3, [r3, #0]
 800930a:	b29a      	uxth	r2, r3
 800930c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800930e:	b29b      	uxth	r3, r3
 8009310:	029b      	lsls	r3, r3, #10
 8009312:	b29b      	uxth	r3, r3
 8009314:	4313      	orrs	r3, r2
 8009316:	b29b      	uxth	r3, r3
 8009318:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800931c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009320:	b29a      	uxth	r2, r3
 8009322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009324:	801a      	strh	r2, [r3, #0]
 8009326:	e026      	b.n	8009376 <USB_ActivateEndpoint+0x2fe>
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10a      	bne.n	8009346 <USB_ActivateEndpoint+0x2ce>
 8009330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009332:	881b      	ldrh	r3, [r3, #0]
 8009334:	b29b      	uxth	r3, r3
 8009336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800933a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800933e:	b29a      	uxth	r2, r3
 8009340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009342:	801a      	strh	r2, [r3, #0]
 8009344:	e017      	b.n	8009376 <USB_ActivateEndpoint+0x2fe>
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	691b      	ldr	r3, [r3, #16]
 800934a:	085b      	lsrs	r3, r3, #1
 800934c:	66bb      	str	r3, [r7, #104]	; 0x68
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	691b      	ldr	r3, [r3, #16]
 8009352:	f003 0301 	and.w	r3, r3, #1
 8009356:	2b00      	cmp	r3, #0
 8009358:	d002      	beq.n	8009360 <USB_ActivateEndpoint+0x2e8>
 800935a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800935c:	3301      	adds	r3, #1
 800935e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009362:	881b      	ldrh	r3, [r3, #0]
 8009364:	b29a      	uxth	r2, r3
 8009366:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009368:	b29b      	uxth	r3, r3
 800936a:	029b      	lsls	r3, r3, #10
 800936c:	b29b      	uxth	r3, r3
 800936e:	4313      	orrs	r3, r2
 8009370:	b29a      	uxth	r2, r3
 8009372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009374:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	4413      	add	r3, r2
 8009380:	881b      	ldrh	r3, [r3, #0]
 8009382:	847b      	strh	r3, [r7, #34]	; 0x22
 8009384:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800938a:	2b00      	cmp	r3, #0
 800938c:	d01b      	beq.n	80093c6 <USB_ActivateEndpoint+0x34e>
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	4413      	add	r3, r2
 8009398:	881b      	ldrh	r3, [r3, #0]
 800939a:	b29b      	uxth	r3, r3
 800939c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093a4:	843b      	strh	r3, [r7, #32]
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	441a      	add	r2, r3
 80093b0:	8c3b      	ldrh	r3, [r7, #32]
 80093b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80093be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d124      	bne.n	8009418 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	4413      	add	r3, r2
 80093d8:	881b      	ldrh	r3, [r3, #0]
 80093da:	b29b      	uxth	r3, r3
 80093dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80093e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093e4:	83bb      	strh	r3, [r7, #28]
 80093e6:	8bbb      	ldrh	r3, [r7, #28]
 80093e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80093ec:	83bb      	strh	r3, [r7, #28]
 80093ee:	8bbb      	ldrh	r3, [r7, #28]
 80093f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80093f4:	83bb      	strh	r3, [r7, #28]
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	441a      	add	r2, r3
 8009400:	8bbb      	ldrh	r3, [r7, #28]
 8009402:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009406:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800940a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800940e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009412:	b29b      	uxth	r3, r3
 8009414:	8013      	strh	r3, [r2, #0]
 8009416:	e1ea      	b.n	80097ee <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	4413      	add	r3, r2
 8009422:	881b      	ldrh	r3, [r3, #0]
 8009424:	b29b      	uxth	r3, r3
 8009426:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800942a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800942e:	83fb      	strh	r3, [r7, #30]
 8009430:	8bfb      	ldrh	r3, [r7, #30]
 8009432:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009436:	83fb      	strh	r3, [r7, #30]
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	441a      	add	r2, r3
 8009442:	8bfb      	ldrh	r3, [r7, #30]
 8009444:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009448:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800944c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009454:	b29b      	uxth	r3, r3
 8009456:	8013      	strh	r3, [r2, #0]
 8009458:	e1c9      	b.n	80097ee <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	78db      	ldrb	r3, [r3, #3]
 800945e:	2b02      	cmp	r3, #2
 8009460:	d11e      	bne.n	80094a0 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	4413      	add	r3, r2
 800946c:	881b      	ldrh	r3, [r3, #0]
 800946e:	b29b      	uxth	r3, r3
 8009470:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009478:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	441a      	add	r2, r3
 8009486:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800948a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800948e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009492:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800949a:	b29b      	uxth	r3, r3
 800949c:	8013      	strh	r3, [r2, #0]
 800949e:	e01d      	b.n	80094dc <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	4413      	add	r3, r2
 80094aa:	881b      	ldrh	r3, [r3, #0]
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80094b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094b6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	441a      	add	r2, r3
 80094c4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80094c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094d8:	b29b      	uxth	r3, r3
 80094da:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	461a      	mov	r2, r3
 80094ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094ec:	4413      	add	r3, r2
 80094ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	00da      	lsls	r2, r3, #3
 80094f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094f8:	4413      	add	r3, r2
 80094fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	891b      	ldrh	r3, [r3, #8]
 8009504:	085b      	lsrs	r3, r3, #1
 8009506:	b29b      	uxth	r3, r3
 8009508:	005b      	lsls	r3, r3, #1
 800950a:	b29a      	uxth	r2, r3
 800950c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800950e:	801a      	strh	r2, [r3, #0]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	657b      	str	r3, [r7, #84]	; 0x54
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800951a:	b29b      	uxth	r3, r3
 800951c:	461a      	mov	r2, r3
 800951e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009520:	4413      	add	r3, r2
 8009522:	657b      	str	r3, [r7, #84]	; 0x54
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	00da      	lsls	r2, r3, #3
 800952a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800952c:	4413      	add	r3, r2
 800952e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009532:	653b      	str	r3, [r7, #80]	; 0x50
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	895b      	ldrh	r3, [r3, #10]
 8009538:	085b      	lsrs	r3, r3, #1
 800953a:	b29b      	uxth	r3, r3
 800953c:	005b      	lsls	r3, r3, #1
 800953e:	b29a      	uxth	r2, r3
 8009540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009542:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	785b      	ldrb	r3, [r3, #1]
 8009548:	2b00      	cmp	r3, #0
 800954a:	f040 8093 	bne.w	8009674 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	4413      	add	r3, r2
 8009558:	881b      	ldrh	r3, [r3, #0]
 800955a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800955e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009566:	2b00      	cmp	r3, #0
 8009568:	d01b      	beq.n	80095a2 <USB_ActivateEndpoint+0x52a>
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	4413      	add	r3, r2
 8009574:	881b      	ldrh	r3, [r3, #0]
 8009576:	b29b      	uxth	r3, r3
 8009578:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800957c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009580:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	441a      	add	r2, r3
 800958c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800958e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009592:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009596:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800959a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800959e:	b29b      	uxth	r3, r3
 80095a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	4413      	add	r3, r2
 80095ac:	881b      	ldrh	r3, [r3, #0]
 80095ae:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80095b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80095b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d01b      	beq.n	80095f2 <USB_ActivateEndpoint+0x57a>
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	4413      	add	r3, r2
 80095c4:	881b      	ldrh	r3, [r3, #0]
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095d0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	441a      	add	r2, r3
 80095dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80095de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	4413      	add	r3, r2
 80095fc:	881b      	ldrh	r3, [r3, #0]
 80095fe:	b29b      	uxth	r3, r3
 8009600:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009608:	873b      	strh	r3, [r7, #56]	; 0x38
 800960a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800960c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009610:	873b      	strh	r3, [r7, #56]	; 0x38
 8009612:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009614:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009618:	873b      	strh	r3, [r7, #56]	; 0x38
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	441a      	add	r2, r3
 8009624:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009626:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800962a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800962e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009636:	b29b      	uxth	r3, r3
 8009638:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	4413      	add	r3, r2
 8009644:	881b      	ldrh	r3, [r3, #0]
 8009646:	b29b      	uxth	r3, r3
 8009648:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800964c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009650:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	441a      	add	r2, r3
 800965c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800965e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800966a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800966e:	b29b      	uxth	r3, r3
 8009670:	8013      	strh	r3, [r2, #0]
 8009672:	e0bc      	b.n	80097ee <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	4413      	add	r3, r2
 800967e:	881b      	ldrh	r3, [r3, #0]
 8009680:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009684:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800968c:	2b00      	cmp	r3, #0
 800968e:	d01d      	beq.n	80096cc <USB_ActivateEndpoint+0x654>
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	4413      	add	r3, r2
 800969a:	881b      	ldrh	r3, [r3, #0]
 800969c:	b29b      	uxth	r3, r3
 800969e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096a6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	441a      	add	r2, r3
 80096b4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80096b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80096c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	4413      	add	r3, r2
 80096d6:	881b      	ldrh	r3, [r3, #0]
 80096d8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80096dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80096e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d01d      	beq.n	8009724 <USB_ActivateEndpoint+0x6ac>
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	4413      	add	r3, r2
 80096f2:	881b      	ldrh	r3, [r3, #0]
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096fe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	441a      	add	r2, r3
 800970c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009710:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009714:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800971c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009720:	b29b      	uxth	r3, r3
 8009722:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	78db      	ldrb	r3, [r3, #3]
 8009728:	2b01      	cmp	r3, #1
 800972a:	d024      	beq.n	8009776 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	4413      	add	r3, r2
 8009736:	881b      	ldrh	r3, [r3, #0]
 8009738:	b29b      	uxth	r3, r3
 800973a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800973e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009742:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009746:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800974a:	f083 0320 	eor.w	r3, r3, #32
 800974e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	441a      	add	r2, r3
 800975c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009760:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009764:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009768:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800976c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009770:	b29b      	uxth	r3, r3
 8009772:	8013      	strh	r3, [r2, #0]
 8009774:	e01d      	b.n	80097b2 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	4413      	add	r3, r2
 8009780:	881b      	ldrh	r3, [r3, #0]
 8009782:	b29b      	uxth	r3, r3
 8009784:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009788:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800978c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	441a      	add	r2, r3
 800979a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800979e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	4413      	add	r3, r2
 80097bc:	881b      	ldrh	r3, [r3, #0]
 80097be:	b29b      	uxth	r3, r3
 80097c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097c8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	441a      	add	r2, r3
 80097d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80097da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80097ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3774      	adds	r7, #116	; 0x74
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr
 80097fe:	bf00      	nop

08009800 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009800:	b480      	push	{r7}
 8009802:	b08d      	sub	sp, #52	; 0x34
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	7b1b      	ldrb	r3, [r3, #12]
 800980e:	2b00      	cmp	r3, #0
 8009810:	f040 808e 	bne.w	8009930 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	785b      	ldrb	r3, [r3, #1]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d044      	beq.n	80098a6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	4413      	add	r3, r2
 8009826:	881b      	ldrh	r3, [r3, #0]
 8009828:	81bb      	strh	r3, [r7, #12]
 800982a:	89bb      	ldrh	r3, [r7, #12]
 800982c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009830:	2b00      	cmp	r3, #0
 8009832:	d01b      	beq.n	800986c <USB_DeactivateEndpoint+0x6c>
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	4413      	add	r3, r2
 800983e:	881b      	ldrh	r3, [r3, #0]
 8009840:	b29b      	uxth	r3, r3
 8009842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800984a:	817b      	strh	r3, [r7, #10]
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	441a      	add	r2, r3
 8009856:	897b      	ldrh	r3, [r7, #10]
 8009858:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800985c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009860:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009864:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009868:	b29b      	uxth	r3, r3
 800986a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	4413      	add	r3, r2
 8009876:	881b      	ldrh	r3, [r3, #0]
 8009878:	b29b      	uxth	r3, r3
 800987a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800987e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009882:	813b      	strh	r3, [r7, #8]
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	441a      	add	r2, r3
 800988e:	893b      	ldrh	r3, [r7, #8]
 8009890:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009894:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009898:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800989c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	8013      	strh	r3, [r2, #0]
 80098a4:	e192      	b.n	8009bcc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	4413      	add	r3, r2
 80098b0:	881b      	ldrh	r3, [r3, #0]
 80098b2:	827b      	strh	r3, [r7, #18]
 80098b4:	8a7b      	ldrh	r3, [r7, #18]
 80098b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d01b      	beq.n	80098f6 <USB_DeactivateEndpoint+0xf6>
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	009b      	lsls	r3, r3, #2
 80098c6:	4413      	add	r3, r2
 80098c8:	881b      	ldrh	r3, [r3, #0]
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098d4:	823b      	strh	r3, [r7, #16]
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	441a      	add	r2, r3
 80098e0:	8a3b      	ldrh	r3, [r7, #16]
 80098e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80098ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	881b      	ldrh	r3, [r3, #0]
 8009902:	b29b      	uxth	r3, r3
 8009904:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800990c:	81fb      	strh	r3, [r7, #14]
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	441a      	add	r2, r3
 8009918:	89fb      	ldrh	r3, [r7, #14]
 800991a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800991e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800992a:	b29b      	uxth	r3, r3
 800992c:	8013      	strh	r3, [r2, #0]
 800992e:	e14d      	b.n	8009bcc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	785b      	ldrb	r3, [r3, #1]
 8009934:	2b00      	cmp	r3, #0
 8009936:	f040 80a5 	bne.w	8009a84 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	4413      	add	r3, r2
 8009944:	881b      	ldrh	r3, [r3, #0]
 8009946:	843b      	strh	r3, [r7, #32]
 8009948:	8c3b      	ldrh	r3, [r7, #32]
 800994a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800994e:	2b00      	cmp	r3, #0
 8009950:	d01b      	beq.n	800998a <USB_DeactivateEndpoint+0x18a>
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	4413      	add	r3, r2
 800995c:	881b      	ldrh	r3, [r3, #0]
 800995e:	b29b      	uxth	r3, r3
 8009960:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009968:	83fb      	strh	r3, [r7, #30]
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	441a      	add	r2, r3
 8009974:	8bfb      	ldrh	r3, [r7, #30]
 8009976:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800997a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800997e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009986:	b29b      	uxth	r3, r3
 8009988:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	4413      	add	r3, r2
 8009994:	881b      	ldrh	r3, [r3, #0]
 8009996:	83bb      	strh	r3, [r7, #28]
 8009998:	8bbb      	ldrh	r3, [r7, #28]
 800999a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d01b      	beq.n	80099da <USB_DeactivateEndpoint+0x1da>
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	4413      	add	r3, r2
 80099ac:	881b      	ldrh	r3, [r3, #0]
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099b8:	837b      	strh	r3, [r7, #26]
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	441a      	add	r2, r3
 80099c4:	8b7b      	ldrh	r3, [r7, #26]
 80099c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	4413      	add	r3, r2
 80099e4:	881b      	ldrh	r3, [r3, #0]
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099f0:	833b      	strh	r3, [r7, #24]
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	441a      	add	r2, r3
 80099fc:	8b3b      	ldrh	r3, [r7, #24]
 80099fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	4413      	add	r3, r2
 8009a1c:	881b      	ldrh	r3, [r3, #0]
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a28:	82fb      	strh	r3, [r7, #22]
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	441a      	add	r2, r3
 8009a34:	8afb      	ldrh	r3, [r7, #22]
 8009a36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	4413      	add	r3, r2
 8009a54:	881b      	ldrh	r3, [r3, #0]
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a60:	82bb      	strh	r3, [r7, #20]
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	441a      	add	r2, r3
 8009a6c:	8abb      	ldrh	r3, [r7, #20]
 8009a6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	8013      	strh	r3, [r2, #0]
 8009a82:	e0a3      	b.n	8009bcc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	4413      	add	r3, r2
 8009a8e:	881b      	ldrh	r3, [r3, #0]
 8009a90:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009a92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009a94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d01b      	beq.n	8009ad4 <USB_DeactivateEndpoint+0x2d4>
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	4413      	add	r3, r2
 8009aa6:	881b      	ldrh	r3, [r3, #0]
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ab2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	009b      	lsls	r3, r3, #2
 8009abc:	441a      	add	r2, r3
 8009abe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009ac0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ac4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ac8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	4413      	add	r3, r2
 8009ade:	881b      	ldrh	r3, [r3, #0]
 8009ae0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8009ae2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d01b      	beq.n	8009b24 <USB_DeactivateEndpoint+0x324>
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	4413      	add	r3, r2
 8009af6:	881b      	ldrh	r3, [r3, #0]
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b02:	853b      	strh	r3, [r7, #40]	; 0x28
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	441a      	add	r2, r3
 8009b0e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009b10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	4413      	add	r3, r2
 8009b2e:	881b      	ldrh	r3, [r3, #0]
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b3a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	441a      	add	r2, r3
 8009b46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009b48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	4413      	add	r3, r2
 8009b66:	881b      	ldrh	r3, [r3, #0]
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b72:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	441a      	add	r2, r3
 8009b7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	4413      	add	r3, r2
 8009b9e:	881b      	ldrh	r3, [r3, #0]
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009baa:	847b      	strh	r3, [r7, #34]	; 0x22
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	441a      	add	r2, r3
 8009bb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009bb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009bcc:	2300      	movs	r3, #0
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3734      	adds	r7, #52	; 0x34
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr

08009bda <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b0c2      	sub	sp, #264	; 0x108
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009be4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009be8:	6018      	str	r0, [r3, #0]
 8009bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bf2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	785b      	ldrb	r3, [r3, #1]
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	f040 86b7 	bne.w	800a974 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	699a      	ldr	r2, [r3, #24]
 8009c12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	691b      	ldr	r3, [r3, #16]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d908      	bls.n	8009c34 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8009c22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	691b      	ldr	r3, [r3, #16]
 8009c2e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009c32:	e007      	b.n	8009c44 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8009c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	699b      	ldr	r3, [r3, #24]
 8009c40:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	7b1b      	ldrb	r3, [r3, #12]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d13a      	bne.n	8009cca <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	6959      	ldr	r1, [r3, #20]
 8009c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	88da      	ldrh	r2, [r3, #6]
 8009c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009c76:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009c7a:	6800      	ldr	r0, [r0, #0]
 8009c7c:	f001 fc98 	bl	800b5b0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009c80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	613b      	str	r3, [r7, #16]
 8009c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	4413      	add	r3, r2
 8009ca2:	613b      	str	r3, [r7, #16]
 8009ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	00da      	lsls	r2, r3, #3
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009cba:	60fb      	str	r3, [r7, #12]
 8009cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cc0:	b29a      	uxth	r2, r3
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	801a      	strh	r2, [r3, #0]
 8009cc6:	f000 be1f 	b.w	800a908 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	78db      	ldrb	r3, [r3, #3]
 8009cd6:	2b02      	cmp	r3, #2
 8009cd8:	f040 8462 	bne.w	800a5a0 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009cdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ce0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	6a1a      	ldr	r2, [r3, #32]
 8009ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	691b      	ldr	r3, [r3, #16]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	f240 83df 	bls.w	800a4b8 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	4413      	add	r3, r2
 8009d14:	881b      	ldrh	r3, [r3, #0]
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d20:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8009d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	009b      	lsls	r3, r3, #2
 8009d3c:	441a      	add	r2, r3
 8009d3e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009d42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d4a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	6a1a      	ldr	r2, [r3, #32]
 8009d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d66:	1ad2      	subs	r2, r2, r3
 8009d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	4413      	add	r3, r2
 8009d8e:	881b      	ldrh	r3, [r3, #0]
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	f000 81c7 	beq.w	800a12a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009da0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	633b      	str	r3, [r7, #48]	; 0x30
 8009da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	785b      	ldrb	r3, [r3, #1]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d177      	bne.n	8009ea8 <USB_EPStartXfer+0x2ce>
 8009db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8009dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd8:	4413      	add	r3, r2
 8009dda:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009de0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	00da      	lsls	r2, r3, #3
 8009dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dec:	4413      	add	r3, r2
 8009dee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009df2:	627b      	str	r3, [r7, #36]	; 0x24
 8009df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df6:	881b      	ldrh	r3, [r3, #0]
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009dfe:	b29a      	uxth	r2, r3
 8009e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e02:	801a      	strh	r2, [r3, #0]
 8009e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e08:	2b3e      	cmp	r3, #62	; 0x3e
 8009e0a:	d921      	bls.n	8009e50 <USB_EPStartXfer+0x276>
 8009e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e10:	095b      	lsrs	r3, r3, #5
 8009e12:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e1a:	f003 031f 	and.w	r3, r3, #31
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d104      	bne.n	8009e2c <USB_EPStartXfer+0x252>
 8009e22:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009e26:	3b01      	subs	r3, #1
 8009e28:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2e:	881b      	ldrh	r3, [r3, #0]
 8009e30:	b29a      	uxth	r2, r3
 8009e32:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	029b      	lsls	r3, r3, #10
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e48:	b29a      	uxth	r2, r3
 8009e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4c:	801a      	strh	r2, [r3, #0]
 8009e4e:	e050      	b.n	8009ef2 <USB_EPStartXfer+0x318>
 8009e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d10a      	bne.n	8009e6e <USB_EPStartXfer+0x294>
 8009e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5a:	881b      	ldrh	r3, [r3, #0]
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e66:	b29a      	uxth	r2, r3
 8009e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6a:	801a      	strh	r2, [r3, #0]
 8009e6c:	e041      	b.n	8009ef2 <USB_EPStartXfer+0x318>
 8009e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e72:	085b      	lsrs	r3, r3, #1
 8009e74:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e7c:	f003 0301 	and.w	r3, r3, #1
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d004      	beq.n	8009e8e <USB_EPStartXfer+0x2b4>
 8009e84:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009e88:	3301      	adds	r3, #1
 8009e8a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e90:	881b      	ldrh	r3, [r3, #0]
 8009e92:	b29a      	uxth	r2, r3
 8009e94:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	029b      	lsls	r3, r3, #10
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	b29a      	uxth	r2, r3
 8009ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea4:	801a      	strh	r2, [r3, #0]
 8009ea6:	e024      	b.n	8009ef2 <USB_EPStartXfer+0x318>
 8009ea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	785b      	ldrb	r3, [r3, #1]
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	d11c      	bne.n	8009ef2 <USB_EPStartXfer+0x318>
 8009eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ebc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	461a      	mov	r2, r3
 8009eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ecc:	4413      	add	r3, r2
 8009ece:	633b      	str	r3, [r7, #48]	; 0x30
 8009ed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	00da      	lsls	r2, r3, #3
 8009ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee0:	4413      	add	r3, r2
 8009ee2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009eec:	b29a      	uxth	r2, r3
 8009eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	895b      	ldrh	r3, [r3, #10]
 8009efe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	6959      	ldr	r1, [r3, #20]
 8009f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009f18:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009f1c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009f20:	6800      	ldr	r0, [r0, #0]
 8009f22:	f001 fb45 	bl	800b5b0 <USB_WritePMA>
            ep->xfer_buff += len;
 8009f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	695a      	ldr	r2, [r3, #20]
 8009f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f36:	441a      	add	r2, r3
 8009f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	6a1a      	ldr	r2, [r3, #32]
 8009f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	691b      	ldr	r3, [r3, #16]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d90f      	bls.n	8009f80 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8009f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	6a1a      	ldr	r2, [r3, #32]
 8009f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f70:	1ad2      	subs	r2, r2, r3
 8009f72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	621a      	str	r2, [r3, #32]
 8009f7e:	e00e      	b.n	8009f9e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009f80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	6a1b      	ldr	r3, [r3, #32]
 8009f8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	785b      	ldrb	r3, [r3, #1]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d177      	bne.n	800a09e <USB_EPStartXfer+0x4c4>
 8009fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	61bb      	str	r3, [r7, #24]
 8009fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	461a      	mov	r2, r3
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	4413      	add	r3, r2
 8009fd0:	61bb      	str	r3, [r7, #24]
 8009fd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	00da      	lsls	r2, r3, #3
 8009fe0:	69bb      	ldr	r3, [r7, #24]
 8009fe2:	4413      	add	r3, r2
 8009fe4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009fe8:	617b      	str	r3, [r7, #20]
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	881b      	ldrh	r3, [r3, #0]
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ff4:	b29a      	uxth	r2, r3
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	801a      	strh	r2, [r3, #0]
 8009ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ffe:	2b3e      	cmp	r3, #62	; 0x3e
 800a000:	d921      	bls.n	800a046 <USB_EPStartXfer+0x46c>
 800a002:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a006:	095b      	lsrs	r3, r3, #5
 800a008:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a00c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a010:	f003 031f 	and.w	r3, r3, #31
 800a014:	2b00      	cmp	r3, #0
 800a016:	d104      	bne.n	800a022 <USB_EPStartXfer+0x448>
 800a018:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a01c:	3b01      	subs	r3, #1
 800a01e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	881b      	ldrh	r3, [r3, #0]
 800a026:	b29a      	uxth	r2, r3
 800a028:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	029b      	lsls	r3, r3, #10
 800a030:	b29b      	uxth	r3, r3
 800a032:	4313      	orrs	r3, r2
 800a034:	b29b      	uxth	r3, r3
 800a036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a03a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a03e:	b29a      	uxth	r2, r3
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	801a      	strh	r2, [r3, #0]
 800a044:	e056      	b.n	800a0f4 <USB_EPStartXfer+0x51a>
 800a046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d10a      	bne.n	800a064 <USB_EPStartXfer+0x48a>
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	881b      	ldrh	r3, [r3, #0]
 800a052:	b29b      	uxth	r3, r3
 800a054:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a058:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a05c:	b29a      	uxth	r2, r3
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	801a      	strh	r2, [r3, #0]
 800a062:	e047      	b.n	800a0f4 <USB_EPStartXfer+0x51a>
 800a064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a068:	085b      	lsrs	r3, r3, #1
 800a06a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a06e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a072:	f003 0301 	and.w	r3, r3, #1
 800a076:	2b00      	cmp	r3, #0
 800a078:	d004      	beq.n	800a084 <USB_EPStartXfer+0x4aa>
 800a07a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a07e:	3301      	adds	r3, #1
 800a080:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	881b      	ldrh	r3, [r3, #0]
 800a088:	b29a      	uxth	r2, r3
 800a08a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a08e:	b29b      	uxth	r3, r3
 800a090:	029b      	lsls	r3, r3, #10
 800a092:	b29b      	uxth	r3, r3
 800a094:	4313      	orrs	r3, r2
 800a096:	b29a      	uxth	r2, r3
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	801a      	strh	r2, [r3, #0]
 800a09c:	e02a      	b.n	800a0f4 <USB_EPStartXfer+0x51a>
 800a09e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	785b      	ldrb	r3, [r3, #1]
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d122      	bne.n	800a0f4 <USB_EPStartXfer+0x51a>
 800a0ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	623b      	str	r3, [r7, #32]
 800a0ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	6a3b      	ldr	r3, [r7, #32]
 800a0ce:	4413      	add	r3, r2
 800a0d0:	623b      	str	r3, [r7, #32]
 800a0d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	00da      	lsls	r2, r3, #3
 800a0e0:	6a3b      	ldr	r3, [r7, #32]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a0e8:	61fb      	str	r3, [r7, #28]
 800a0ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0ee:	b29a      	uxth	r2, r3
 800a0f0:	69fb      	ldr	r3, [r7, #28]
 800a0f2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a0f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	891b      	ldrh	r3, [r3, #8]
 800a100:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	6959      	ldr	r1, [r3, #20]
 800a110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a114:	b29b      	uxth	r3, r3
 800a116:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a11a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a11e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a122:	6800      	ldr	r0, [r0, #0]
 800a124:	f001 fa44 	bl	800b5b0 <USB_WritePMA>
 800a128:	e3ee      	b.n	800a908 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a12a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a12e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	785b      	ldrb	r3, [r3, #1]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d177      	bne.n	800a22a <USB_EPStartXfer+0x650>
 800a13a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a13e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	64bb      	str	r3, [r7, #72]	; 0x48
 800a146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a14a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a154:	b29b      	uxth	r3, r3
 800a156:	461a      	mov	r2, r3
 800a158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a15a:	4413      	add	r3, r2
 800a15c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a15e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	00da      	lsls	r2, r3, #3
 800a16c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a16e:	4413      	add	r3, r2
 800a170:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a174:	647b      	str	r3, [r7, #68]	; 0x44
 800a176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a178:	881b      	ldrh	r3, [r3, #0]
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a180:	b29a      	uxth	r2, r3
 800a182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a184:	801a      	strh	r2, [r3, #0]
 800a186:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a18a:	2b3e      	cmp	r3, #62	; 0x3e
 800a18c:	d921      	bls.n	800a1d2 <USB_EPStartXfer+0x5f8>
 800a18e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a192:	095b      	lsrs	r3, r3, #5
 800a194:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a198:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a19c:	f003 031f 	and.w	r3, r3, #31
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d104      	bne.n	800a1ae <USB_EPStartXfer+0x5d4>
 800a1a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a1a8:	3b01      	subs	r3, #1
 800a1aa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a1ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1b0:	881b      	ldrh	r3, [r3, #0]
 800a1b2:	b29a      	uxth	r2, r3
 800a1b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	029b      	lsls	r3, r3, #10
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1ca:	b29a      	uxth	r2, r3
 800a1cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1ce:	801a      	strh	r2, [r3, #0]
 800a1d0:	e056      	b.n	800a280 <USB_EPStartXfer+0x6a6>
 800a1d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d10a      	bne.n	800a1f0 <USB_EPStartXfer+0x616>
 800a1da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1dc:	881b      	ldrh	r3, [r3, #0]
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1e8:	b29a      	uxth	r2, r3
 800a1ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1ec:	801a      	strh	r2, [r3, #0]
 800a1ee:	e047      	b.n	800a280 <USB_EPStartXfer+0x6a6>
 800a1f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1f4:	085b      	lsrs	r3, r3, #1
 800a1f6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a1fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1fe:	f003 0301 	and.w	r3, r3, #1
 800a202:	2b00      	cmp	r3, #0
 800a204:	d004      	beq.n	800a210 <USB_EPStartXfer+0x636>
 800a206:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a20a:	3301      	adds	r3, #1
 800a20c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a212:	881b      	ldrh	r3, [r3, #0]
 800a214:	b29a      	uxth	r2, r3
 800a216:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	029b      	lsls	r3, r3, #10
 800a21e:	b29b      	uxth	r3, r3
 800a220:	4313      	orrs	r3, r2
 800a222:	b29a      	uxth	r2, r3
 800a224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a226:	801a      	strh	r2, [r3, #0]
 800a228:	e02a      	b.n	800a280 <USB_EPStartXfer+0x6a6>
 800a22a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a22e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	785b      	ldrb	r3, [r3, #1]
 800a236:	2b01      	cmp	r3, #1
 800a238:	d122      	bne.n	800a280 <USB_EPStartXfer+0x6a6>
 800a23a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a23e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	653b      	str	r3, [r7, #80]	; 0x50
 800a246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a24a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a254:	b29b      	uxth	r3, r3
 800a256:	461a      	mov	r2, r3
 800a258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a25a:	4413      	add	r3, r2
 800a25c:	653b      	str	r3, [r7, #80]	; 0x50
 800a25e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	00da      	lsls	r2, r3, #3
 800a26c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a26e:	4413      	add	r3, r2
 800a270:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a274:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a27a:	b29a      	uxth	r2, r3
 800a27c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a27e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a284:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	891b      	ldrh	r3, [r3, #8]
 800a28c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	6959      	ldr	r1, [r3, #20]
 800a29c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a2a6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a2aa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a2ae:	6800      	ldr	r0, [r0, #0]
 800a2b0:	f001 f97e 	bl	800b5b0 <USB_WritePMA>
            ep->xfer_buff += len;
 800a2b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	695a      	ldr	r2, [r3, #20]
 800a2c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2c4:	441a      	add	r2, r3
 800a2c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a2d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	6a1a      	ldr	r2, [r3, #32]
 800a2de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	691b      	ldr	r3, [r3, #16]
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d90f      	bls.n	800a30e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800a2ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	6a1a      	ldr	r2, [r3, #32]
 800a2fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2fe:	1ad2      	subs	r2, r2, r3
 800a300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a304:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	621a      	str	r2, [r3, #32]
 800a30c:	e00e      	b.n	800a32c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800a30e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a312:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	6a1b      	ldr	r3, [r3, #32]
 800a31a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a31e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	2200      	movs	r2, #0
 800a32a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a32c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a330:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	643b      	str	r3, [r7, #64]	; 0x40
 800a338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a33c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	785b      	ldrb	r3, [r3, #1]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d177      	bne.n	800a438 <USB_EPStartXfer+0x85e>
 800a348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a34c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	63bb      	str	r3, [r7, #56]	; 0x38
 800a354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a358:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a362:	b29b      	uxth	r3, r3
 800a364:	461a      	mov	r2, r3
 800a366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a368:	4413      	add	r3, r2
 800a36a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a36c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	00da      	lsls	r2, r3, #3
 800a37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a37c:	4413      	add	r3, r2
 800a37e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a382:	637b      	str	r3, [r7, #52]	; 0x34
 800a384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a386:	881b      	ldrh	r3, [r3, #0]
 800a388:	b29b      	uxth	r3, r3
 800a38a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a38e:	b29a      	uxth	r2, r3
 800a390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a392:	801a      	strh	r2, [r3, #0]
 800a394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a398:	2b3e      	cmp	r3, #62	; 0x3e
 800a39a:	d921      	bls.n	800a3e0 <USB_EPStartXfer+0x806>
 800a39c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3a0:	095b      	lsrs	r3, r3, #5
 800a3a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a3a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3aa:	f003 031f 	and.w	r3, r3, #31
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d104      	bne.n	800a3bc <USB_EPStartXfer+0x7e2>
 800a3b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3b6:	3b01      	subs	r3, #1
 800a3b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a3bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3be:	881b      	ldrh	r3, [r3, #0]
 800a3c0:	b29a      	uxth	r2, r3
 800a3c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	029b      	lsls	r3, r3, #10
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3d8:	b29a      	uxth	r2, r3
 800a3da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3dc:	801a      	strh	r2, [r3, #0]
 800a3de:	e050      	b.n	800a482 <USB_EPStartXfer+0x8a8>
 800a3e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d10a      	bne.n	800a3fe <USB_EPStartXfer+0x824>
 800a3e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ea:	881b      	ldrh	r3, [r3, #0]
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3f6:	b29a      	uxth	r2, r3
 800a3f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3fa:	801a      	strh	r2, [r3, #0]
 800a3fc:	e041      	b.n	800a482 <USB_EPStartXfer+0x8a8>
 800a3fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a402:	085b      	lsrs	r3, r3, #1
 800a404:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a40c:	f003 0301 	and.w	r3, r3, #1
 800a410:	2b00      	cmp	r3, #0
 800a412:	d004      	beq.n	800a41e <USB_EPStartXfer+0x844>
 800a414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a418:	3301      	adds	r3, #1
 800a41a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a41e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a420:	881b      	ldrh	r3, [r3, #0]
 800a422:	b29a      	uxth	r2, r3
 800a424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a428:	b29b      	uxth	r3, r3
 800a42a:	029b      	lsls	r3, r3, #10
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	4313      	orrs	r3, r2
 800a430:	b29a      	uxth	r2, r3
 800a432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a434:	801a      	strh	r2, [r3, #0]
 800a436:	e024      	b.n	800a482 <USB_EPStartXfer+0x8a8>
 800a438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a43c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	785b      	ldrb	r3, [r3, #1]
 800a444:	2b01      	cmp	r3, #1
 800a446:	d11c      	bne.n	800a482 <USB_EPStartXfer+0x8a8>
 800a448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a44c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a456:	b29b      	uxth	r3, r3
 800a458:	461a      	mov	r2, r3
 800a45a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a45c:	4413      	add	r3, r2
 800a45e:	643b      	str	r3, [r7, #64]	; 0x40
 800a460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	00da      	lsls	r2, r3, #3
 800a46e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a470:	4413      	add	r3, r2
 800a472:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a476:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a47c:	b29a      	uxth	r2, r3
 800a47e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a480:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	895b      	ldrh	r3, [r3, #10]
 800a48e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	6959      	ldr	r1, [r3, #20]
 800a49e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a4a8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a4ac:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a4b0:	6800      	ldr	r0, [r0, #0]
 800a4b2:	f001 f87d 	bl	800b5b0 <USB_WritePMA>
 800a4b6:	e227      	b.n	800a908 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a4b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	6a1b      	ldr	r3, [r3, #32]
 800a4c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a4c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	4413      	add	r3, r2
 800a4e2:	881b      	ldrh	r3, [r3, #0]
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a4ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4ee:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a4f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a500:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	441a      	add	r2, r3
 800a50c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a51c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a520:	b29b      	uxth	r3, r3
 800a522:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a528:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a534:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a53e:	b29b      	uxth	r3, r3
 800a540:	461a      	mov	r2, r3
 800a542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a544:	4413      	add	r3, r2
 800a546:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a54c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	00da      	lsls	r2, r3, #3
 800a556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a558:	4413      	add	r3, r2
 800a55a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a55e:	65bb      	str	r3, [r7, #88]	; 0x58
 800a560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a564:	b29a      	uxth	r2, r3
 800a566:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a568:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a56a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a56e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	891b      	ldrh	r3, [r3, #8]
 800a576:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a57a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a57e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	6959      	ldr	r1, [r3, #20]
 800a586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a590:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a594:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a598:	6800      	ldr	r0, [r0, #0]
 800a59a:	f001 f809 	bl	800b5b0 <USB_WritePMA>
 800a59e:	e1b3      	b.n	800a908 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a5a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	6a1a      	ldr	r2, [r3, #32]
 800a5ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5b0:	1ad2      	subs	r2, r2, r3
 800a5b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a5be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	781b      	ldrb	r3, [r3, #0]
 800a5d4:	009b      	lsls	r3, r3, #2
 800a5d6:	4413      	add	r3, r2
 800a5d8:	881b      	ldrh	r3, [r3, #0]
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	f000 80c6 	beq.w	800a772 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a5e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	673b      	str	r3, [r7, #112]	; 0x70
 800a5f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	785b      	ldrb	r3, [r3, #1]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d177      	bne.n	800a6f2 <USB_EPStartXfer+0xb18>
 800a602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a606:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a60e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a612:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	461a      	mov	r2, r3
 800a620:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a622:	4413      	add	r3, r2
 800a624:	66bb      	str	r3, [r7, #104]	; 0x68
 800a626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a62a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	00da      	lsls	r2, r3, #3
 800a634:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a636:	4413      	add	r3, r2
 800a638:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a63c:	667b      	str	r3, [r7, #100]	; 0x64
 800a63e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a640:	881b      	ldrh	r3, [r3, #0]
 800a642:	b29b      	uxth	r3, r3
 800a644:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a648:	b29a      	uxth	r2, r3
 800a64a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a64c:	801a      	strh	r2, [r3, #0]
 800a64e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a652:	2b3e      	cmp	r3, #62	; 0x3e
 800a654:	d921      	bls.n	800a69a <USB_EPStartXfer+0xac0>
 800a656:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a65a:	095b      	lsrs	r3, r3, #5
 800a65c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a664:	f003 031f 	and.w	r3, r3, #31
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d104      	bne.n	800a676 <USB_EPStartXfer+0xa9c>
 800a66c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a670:	3b01      	subs	r3, #1
 800a672:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a676:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a678:	881b      	ldrh	r3, [r3, #0]
 800a67a:	b29a      	uxth	r2, r3
 800a67c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a680:	b29b      	uxth	r3, r3
 800a682:	029b      	lsls	r3, r3, #10
 800a684:	b29b      	uxth	r3, r3
 800a686:	4313      	orrs	r3, r2
 800a688:	b29b      	uxth	r3, r3
 800a68a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a68e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a692:	b29a      	uxth	r2, r3
 800a694:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a696:	801a      	strh	r2, [r3, #0]
 800a698:	e050      	b.n	800a73c <USB_EPStartXfer+0xb62>
 800a69a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d10a      	bne.n	800a6b8 <USB_EPStartXfer+0xade>
 800a6a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6a4:	881b      	ldrh	r3, [r3, #0]
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6b0:	b29a      	uxth	r2, r3
 800a6b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6b4:	801a      	strh	r2, [r3, #0]
 800a6b6:	e041      	b.n	800a73c <USB_EPStartXfer+0xb62>
 800a6b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6bc:	085b      	lsrs	r3, r3, #1
 800a6be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a6c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6c6:	f003 0301 	and.w	r3, r3, #1
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d004      	beq.n	800a6d8 <USB_EPStartXfer+0xafe>
 800a6ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a6d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6da:	881b      	ldrh	r3, [r3, #0]
 800a6dc:	b29a      	uxth	r2, r3
 800a6de:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	029b      	lsls	r3, r3, #10
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	b29a      	uxth	r2, r3
 800a6ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6ee:	801a      	strh	r2, [r3, #0]
 800a6f0:	e024      	b.n	800a73c <USB_EPStartXfer+0xb62>
 800a6f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	785b      	ldrb	r3, [r3, #1]
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d11c      	bne.n	800a73c <USB_EPStartXfer+0xb62>
 800a702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a706:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a710:	b29b      	uxth	r3, r3
 800a712:	461a      	mov	r2, r3
 800a714:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a716:	4413      	add	r3, r2
 800a718:	673b      	str	r3, [r7, #112]	; 0x70
 800a71a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a71e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	00da      	lsls	r2, r3, #3
 800a728:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a72a:	4413      	add	r3, r2
 800a72c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a730:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a732:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a736:	b29a      	uxth	r2, r3
 800a738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a73a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a73c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	895b      	ldrh	r3, [r3, #10]
 800a748:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a74c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a750:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	6959      	ldr	r1, [r3, #20]
 800a758:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a762:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a766:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a76a:	6800      	ldr	r0, [r0, #0]
 800a76c:	f000 ff20 	bl	800b5b0 <USB_WritePMA>
 800a770:	e0ca      	b.n	800a908 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a776:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	785b      	ldrb	r3, [r3, #1]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d177      	bne.n	800a872 <USB_EPStartXfer+0xc98>
 800a782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a786:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a78e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a792:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	461a      	mov	r2, r3
 800a7a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a7a2:	4413      	add	r3, r2
 800a7a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a7a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	00da      	lsls	r2, r3, #3
 800a7b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a7b6:	4413      	add	r3, r2
 800a7b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a7bc:	67bb      	str	r3, [r7, #120]	; 0x78
 800a7be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7c0:	881b      	ldrh	r3, [r3, #0]
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7c8:	b29a      	uxth	r2, r3
 800a7ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7cc:	801a      	strh	r2, [r3, #0]
 800a7ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7d2:	2b3e      	cmp	r3, #62	; 0x3e
 800a7d4:	d921      	bls.n	800a81a <USB_EPStartXfer+0xc40>
 800a7d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7da:	095b      	lsrs	r3, r3, #5
 800a7dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a7e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7e4:	f003 031f 	and.w	r3, r3, #31
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d104      	bne.n	800a7f6 <USB_EPStartXfer+0xc1c>
 800a7ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a7f0:	3b01      	subs	r3, #1
 800a7f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a7f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7f8:	881b      	ldrh	r3, [r3, #0]
 800a7fa:	b29a      	uxth	r2, r3
 800a7fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a800:	b29b      	uxth	r3, r3
 800a802:	029b      	lsls	r3, r3, #10
 800a804:	b29b      	uxth	r3, r3
 800a806:	4313      	orrs	r3, r2
 800a808:	b29b      	uxth	r3, r3
 800a80a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a80e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a812:	b29a      	uxth	r2, r3
 800a814:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a816:	801a      	strh	r2, [r3, #0]
 800a818:	e05c      	b.n	800a8d4 <USB_EPStartXfer+0xcfa>
 800a81a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d10a      	bne.n	800a838 <USB_EPStartXfer+0xc5e>
 800a822:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a824:	881b      	ldrh	r3, [r3, #0]
 800a826:	b29b      	uxth	r3, r3
 800a828:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a82c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a830:	b29a      	uxth	r2, r3
 800a832:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a834:	801a      	strh	r2, [r3, #0]
 800a836:	e04d      	b.n	800a8d4 <USB_EPStartXfer+0xcfa>
 800a838:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a83c:	085b      	lsrs	r3, r3, #1
 800a83e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a846:	f003 0301 	and.w	r3, r3, #1
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d004      	beq.n	800a858 <USB_EPStartXfer+0xc7e>
 800a84e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a852:	3301      	adds	r3, #1
 800a854:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a858:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a85a:	881b      	ldrh	r3, [r3, #0]
 800a85c:	b29a      	uxth	r2, r3
 800a85e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a862:	b29b      	uxth	r3, r3
 800a864:	029b      	lsls	r3, r3, #10
 800a866:	b29b      	uxth	r3, r3
 800a868:	4313      	orrs	r3, r2
 800a86a:	b29a      	uxth	r2, r3
 800a86c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a86e:	801a      	strh	r2, [r3, #0]
 800a870:	e030      	b.n	800a8d4 <USB_EPStartXfer+0xcfa>
 800a872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a876:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	785b      	ldrb	r3, [r3, #1]
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d128      	bne.n	800a8d4 <USB_EPStartXfer+0xcfa>
 800a882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a886:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a894:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a89e:	b29b      	uxth	r3, r3
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a8a6:	4413      	add	r3, r2
 800a8a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a8ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	00da      	lsls	r2, r3, #3
 800a8ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a8be:	4413      	add	r3, r2
 800a8c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a8c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a8c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8cc:	b29a      	uxth	r2, r3
 800a8ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a8d2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a8d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	891b      	ldrh	r3, [r3, #8]
 800a8e0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a8e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	6959      	ldr	r1, [r3, #20]
 800a8f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a8fa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a8fe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a902:	6800      	ldr	r0, [r0, #0]
 800a904:	f000 fe54 	bl	800b5b0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a90c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	009b      	lsls	r3, r3, #2
 800a920:	4413      	add	r3, r2
 800a922:	881b      	ldrh	r3, [r3, #0]
 800a924:	b29b      	uxth	r3, r3
 800a926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a92a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a92e:	817b      	strh	r3, [r7, #10]
 800a930:	897b      	ldrh	r3, [r7, #10]
 800a932:	f083 0310 	eor.w	r3, r3, #16
 800a936:	817b      	strh	r3, [r7, #10]
 800a938:	897b      	ldrh	r3, [r7, #10]
 800a93a:	f083 0320 	eor.w	r3, r3, #32
 800a93e:	817b      	strh	r3, [r7, #10]
 800a940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a944:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a94e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	441a      	add	r2, r3
 800a95a:	897b      	ldrh	r3, [r7, #10]
 800a95c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a960:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	8013      	strh	r3, [r2, #0]
 800a970:	f000 bcde 	b.w	800b330 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	7b1b      	ldrb	r3, [r3, #12]
 800a980:	2b00      	cmp	r3, #0
 800a982:	f040 80bb 	bne.w	800aafc <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a98a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	699a      	ldr	r2, [r3, #24]
 800a992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a996:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	691b      	ldr	r3, [r3, #16]
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d917      	bls.n	800a9d2 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800a9a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	691b      	ldr	r3, [r3, #16]
 800a9ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800a9b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	699a      	ldr	r2, [r3, #24]
 800a9be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9c2:	1ad2      	subs	r2, r2, r3
 800a9c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	619a      	str	r2, [r3, #24]
 800a9d0:	e00e      	b.n	800a9f0 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800a9d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	699b      	ldr	r3, [r3, #24]
 800a9de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800a9e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a9f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a9fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	461a      	mov	r2, r3
 800aa10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aa14:	4413      	add	r3, r2
 800aa16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aa1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	00da      	lsls	r2, r3, #3
 800aa28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aa2c:	4413      	add	r3, r2
 800aa2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aa32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800aa36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa3a:	881b      	ldrh	r3, [r3, #0]
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa42:	b29a      	uxth	r2, r3
 800aa44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa48:	801a      	strh	r2, [r3, #0]
 800aa4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa4e:	2b3e      	cmp	r3, #62	; 0x3e
 800aa50:	d924      	bls.n	800aa9c <USB_EPStartXfer+0xec2>
 800aa52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa56:	095b      	lsrs	r3, r3, #5
 800aa58:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aa5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa60:	f003 031f 	and.w	r3, r3, #31
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d104      	bne.n	800aa72 <USB_EPStartXfer+0xe98>
 800aa68:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aa6c:	3b01      	subs	r3, #1
 800aa6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aa72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa76:	881b      	ldrh	r3, [r3, #0]
 800aa78:	b29a      	uxth	r2, r3
 800aa7a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	029b      	lsls	r3, r3, #10
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	4313      	orrs	r3, r2
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa90:	b29a      	uxth	r2, r3
 800aa92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa96:	801a      	strh	r2, [r3, #0]
 800aa98:	f000 bc10 	b.w	800b2bc <USB_EPStartXfer+0x16e2>
 800aa9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d10c      	bne.n	800aabe <USB_EPStartXfer+0xee4>
 800aaa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aaa8:	881b      	ldrh	r3, [r3, #0]
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aab0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aab4:	b29a      	uxth	r2, r3
 800aab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aaba:	801a      	strh	r2, [r3, #0]
 800aabc:	e3fe      	b.n	800b2bc <USB_EPStartXfer+0x16e2>
 800aabe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aac2:	085b      	lsrs	r3, r3, #1
 800aac4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aacc:	f003 0301 	and.w	r3, r3, #1
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d004      	beq.n	800aade <USB_EPStartXfer+0xf04>
 800aad4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aad8:	3301      	adds	r3, #1
 800aada:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aade:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aae2:	881b      	ldrh	r3, [r3, #0]
 800aae4:	b29a      	uxth	r2, r3
 800aae6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	029b      	lsls	r3, r3, #10
 800aaee:	b29b      	uxth	r3, r3
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	b29a      	uxth	r2, r3
 800aaf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aaf8:	801a      	strh	r2, [r3, #0]
 800aafa:	e3df      	b.n	800b2bc <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800aafc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	78db      	ldrb	r3, [r3, #3]
 800ab08:	2b02      	cmp	r3, #2
 800ab0a:	f040 8218 	bne.w	800af3e <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ab0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	785b      	ldrb	r3, [r3, #1]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	f040 809d 	bne.w	800ac5a <USB_EPStartXfer+0x1080>
 800ab20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ab2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	461a      	mov	r2, r3
 800ab40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ab44:	4413      	add	r3, r2
 800ab46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ab4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	00da      	lsls	r2, r3, #3
 800ab58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ab5c:	4413      	add	r3, r2
 800ab5e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ab62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ab66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ab6a:	881b      	ldrh	r3, [r3, #0]
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab72:	b29a      	uxth	r2, r3
 800ab74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ab78:	801a      	strh	r2, [r3, #0]
 800ab7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	691b      	ldr	r3, [r3, #16]
 800ab86:	2b3e      	cmp	r3, #62	; 0x3e
 800ab88:	d92b      	bls.n	800abe2 <USB_EPStartXfer+0x1008>
 800ab8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	691b      	ldr	r3, [r3, #16]
 800ab96:	095b      	lsrs	r3, r3, #5
 800ab98:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ab9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aba0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	691b      	ldr	r3, [r3, #16]
 800aba8:	f003 031f 	and.w	r3, r3, #31
 800abac:	2b00      	cmp	r3, #0
 800abae:	d104      	bne.n	800abba <USB_EPStartXfer+0xfe0>
 800abb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abb4:	3b01      	subs	r3, #1
 800abb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800abba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800abbe:	881b      	ldrh	r3, [r3, #0]
 800abc0:	b29a      	uxth	r2, r3
 800abc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	029b      	lsls	r3, r3, #10
 800abca:	b29b      	uxth	r3, r3
 800abcc:	4313      	orrs	r3, r2
 800abce:	b29b      	uxth	r3, r3
 800abd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abd8:	b29a      	uxth	r2, r3
 800abda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800abde:	801a      	strh	r2, [r3, #0]
 800abe0:	e070      	b.n	800acc4 <USB_EPStartXfer+0x10ea>
 800abe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abe6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	691b      	ldr	r3, [r3, #16]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d10c      	bne.n	800ac0c <USB_EPStartXfer+0x1032>
 800abf2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800abf6:	881b      	ldrh	r3, [r3, #0]
 800abf8:	b29b      	uxth	r3, r3
 800abfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac02:	b29a      	uxth	r2, r3
 800ac04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ac08:	801a      	strh	r2, [r3, #0]
 800ac0a:	e05b      	b.n	800acc4 <USB_EPStartXfer+0x10ea>
 800ac0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	691b      	ldr	r3, [r3, #16]
 800ac18:	085b      	lsrs	r3, r3, #1
 800ac1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ac1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	691b      	ldr	r3, [r3, #16]
 800ac2a:	f003 0301 	and.w	r3, r3, #1
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d004      	beq.n	800ac3c <USB_EPStartXfer+0x1062>
 800ac32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac36:	3301      	adds	r3, #1
 800ac38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ac3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ac40:	881b      	ldrh	r3, [r3, #0]
 800ac42:	b29a      	uxth	r2, r3
 800ac44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	029b      	lsls	r3, r3, #10
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	b29a      	uxth	r2, r3
 800ac52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ac56:	801a      	strh	r2, [r3, #0]
 800ac58:	e034      	b.n	800acc4 <USB_EPStartXfer+0x10ea>
 800ac5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	785b      	ldrb	r3, [r3, #1]
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	d12c      	bne.n	800acc4 <USB_EPStartXfer+0x10ea>
 800ac6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ac78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac86:	b29b      	uxth	r3, r3
 800ac88:	461a      	mov	r2, r3
 800ac8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ac8e:	4413      	add	r3, r2
 800ac90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ac94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	00da      	lsls	r2, r3, #3
 800aca2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800aca6:	4413      	add	r3, r2
 800aca8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800acac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800acb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	691b      	ldr	r3, [r3, #16]
 800acbc:	b29a      	uxth	r2, r3
 800acbe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800acc2:	801a      	strh	r2, [r3, #0]
 800acc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800acd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	785b      	ldrb	r3, [r3, #1]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	f040 809d 	bne.w	800ae1e <USB_EPStartXfer+0x1244>
 800ace4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ace8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800acf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acf6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad00:	b29b      	uxth	r3, r3
 800ad02:	461a      	mov	r2, r3
 800ad04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ad08:	4413      	add	r3, r2
 800ad0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ad0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	00da      	lsls	r2, r3, #3
 800ad1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ad20:	4413      	add	r3, r2
 800ad22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ad26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ad2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ad2e:	881b      	ldrh	r3, [r3, #0]
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad36:	b29a      	uxth	r2, r3
 800ad38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ad3c:	801a      	strh	r2, [r3, #0]
 800ad3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	691b      	ldr	r3, [r3, #16]
 800ad4a:	2b3e      	cmp	r3, #62	; 0x3e
 800ad4c:	d92b      	bls.n	800ada6 <USB_EPStartXfer+0x11cc>
 800ad4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	691b      	ldr	r3, [r3, #16]
 800ad5a:	095b      	lsrs	r3, r3, #5
 800ad5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ad60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	691b      	ldr	r3, [r3, #16]
 800ad6c:	f003 031f 	and.w	r3, r3, #31
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d104      	bne.n	800ad7e <USB_EPStartXfer+0x11a4>
 800ad74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad78:	3b01      	subs	r3, #1
 800ad7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ad7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ad82:	881b      	ldrh	r3, [r3, #0]
 800ad84:	b29a      	uxth	r2, r3
 800ad86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	029b      	lsls	r3, r3, #10
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	4313      	orrs	r3, r2
 800ad92:	b29b      	uxth	r3, r3
 800ad94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad9c:	b29a      	uxth	r2, r3
 800ad9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ada2:	801a      	strh	r2, [r3, #0]
 800ada4:	e069      	b.n	800ae7a <USB_EPStartXfer+0x12a0>
 800ada6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	691b      	ldr	r3, [r3, #16]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d10c      	bne.n	800add0 <USB_EPStartXfer+0x11f6>
 800adb6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800adba:	881b      	ldrh	r3, [r3, #0]
 800adbc:	b29b      	uxth	r3, r3
 800adbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adc6:	b29a      	uxth	r2, r3
 800adc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800adcc:	801a      	strh	r2, [r3, #0]
 800adce:	e054      	b.n	800ae7a <USB_EPStartXfer+0x12a0>
 800add0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800add4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	691b      	ldr	r3, [r3, #16]
 800addc:	085b      	lsrs	r3, r3, #1
 800adde:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ade2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ade6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	691b      	ldr	r3, [r3, #16]
 800adee:	f003 0301 	and.w	r3, r3, #1
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d004      	beq.n	800ae00 <USB_EPStartXfer+0x1226>
 800adf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adfa:	3301      	adds	r3, #1
 800adfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ae00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae04:	881b      	ldrh	r3, [r3, #0]
 800ae06:	b29a      	uxth	r2, r3
 800ae08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae0c:	b29b      	uxth	r3, r3
 800ae0e:	029b      	lsls	r3, r3, #10
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	4313      	orrs	r3, r2
 800ae14:	b29a      	uxth	r2, r3
 800ae16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae1a:	801a      	strh	r2, [r3, #0]
 800ae1c:	e02d      	b.n	800ae7a <USB_EPStartXfer+0x12a0>
 800ae1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	785b      	ldrb	r3, [r3, #1]
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d125      	bne.n	800ae7a <USB_EPStartXfer+0x12a0>
 800ae2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae3c:	b29b      	uxth	r3, r3
 800ae3e:	461a      	mov	r2, r3
 800ae40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ae44:	4413      	add	r3, r2
 800ae46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ae4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	00da      	lsls	r2, r3, #3
 800ae58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ae5c:	4413      	add	r3, r2
 800ae5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ae62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ae66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	691b      	ldr	r3, [r3, #16]
 800ae72:	b29a      	uxth	r2, r3
 800ae74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ae78:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ae7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	69db      	ldr	r3, [r3, #28]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	f000 8218 	beq.w	800b2bc <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ae8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae94:	681a      	ldr	r2, [r3, #0]
 800ae96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	4413      	add	r3, r2
 800aea6:	881b      	ldrh	r3, [r3, #0]
 800aea8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800aeac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800aeb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d005      	beq.n	800aec4 <USB_EPStartXfer+0x12ea>
 800aeb8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800aebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d10d      	bne.n	800aee0 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800aec4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800aec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800aecc:	2b00      	cmp	r3, #0
 800aece:	f040 81f5 	bne.w	800b2bc <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800aed2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800aed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	f040 81ee 	bne.w	800b2bc <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800aee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aee4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	009b      	lsls	r3, r3, #2
 800aef8:	4413      	add	r3, r2
 800aefa:	881b      	ldrh	r3, [r3, #0]
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af06:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800af0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	009b      	lsls	r3, r3, #2
 800af22:	441a      	add	r2, r3
 800af24:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800af28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800af38:	b29b      	uxth	r3, r3
 800af3a:	8013      	strh	r3, [r2, #0]
 800af3c:	e1be      	b.n	800b2bc <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800af3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	78db      	ldrb	r3, [r3, #3]
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	f040 81b4 	bne.w	800b2b8 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800af50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	699a      	ldr	r2, [r3, #24]
 800af5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	691b      	ldr	r3, [r3, #16]
 800af68:	429a      	cmp	r2, r3
 800af6a:	d917      	bls.n	800af9c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800af6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	691b      	ldr	r3, [r3, #16]
 800af78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800af7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	699a      	ldr	r2, [r3, #24]
 800af88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af8c:	1ad2      	subs	r2, r2, r3
 800af8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	619a      	str	r2, [r3, #24]
 800af9a:	e00e      	b.n	800afba <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800af9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	699b      	ldr	r3, [r3, #24]
 800afa8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800afac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	2200      	movs	r2, #0
 800afb8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800afba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	785b      	ldrb	r3, [r3, #1]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	f040 8085 	bne.w	800b0d6 <USB_EPStartXfer+0x14fc>
 800afcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800afda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800afe8:	b29b      	uxth	r3, r3
 800afea:	461a      	mov	r2, r3
 800afec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800aff0:	4413      	add	r3, r2
 800aff2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800affa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	00da      	lsls	r2, r3, #3
 800b004:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b008:	4413      	add	r3, r2
 800b00a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b00e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b012:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b016:	881b      	ldrh	r3, [r3, #0]
 800b018:	b29b      	uxth	r3, r3
 800b01a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b01e:	b29a      	uxth	r2, r3
 800b020:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b024:	801a      	strh	r2, [r3, #0]
 800b026:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b02a:	2b3e      	cmp	r3, #62	; 0x3e
 800b02c:	d923      	bls.n	800b076 <USB_EPStartXfer+0x149c>
 800b02e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b032:	095b      	lsrs	r3, r3, #5
 800b034:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b03c:	f003 031f 	and.w	r3, r3, #31
 800b040:	2b00      	cmp	r3, #0
 800b042:	d104      	bne.n	800b04e <USB_EPStartXfer+0x1474>
 800b044:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b048:	3b01      	subs	r3, #1
 800b04a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b04e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b052:	881b      	ldrh	r3, [r3, #0]
 800b054:	b29a      	uxth	r2, r3
 800b056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b05a:	b29b      	uxth	r3, r3
 800b05c:	029b      	lsls	r3, r3, #10
 800b05e:	b29b      	uxth	r3, r3
 800b060:	4313      	orrs	r3, r2
 800b062:	b29b      	uxth	r3, r3
 800b064:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b068:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b06c:	b29a      	uxth	r2, r3
 800b06e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b072:	801a      	strh	r2, [r3, #0]
 800b074:	e060      	b.n	800b138 <USB_EPStartXfer+0x155e>
 800b076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d10c      	bne.n	800b098 <USB_EPStartXfer+0x14be>
 800b07e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b082:	881b      	ldrh	r3, [r3, #0]
 800b084:	b29b      	uxth	r3, r3
 800b086:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b08a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b08e:	b29a      	uxth	r2, r3
 800b090:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b094:	801a      	strh	r2, [r3, #0]
 800b096:	e04f      	b.n	800b138 <USB_EPStartXfer+0x155e>
 800b098:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b09c:	085b      	lsrs	r3, r3, #1
 800b09e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b0a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0a6:	f003 0301 	and.w	r3, r3, #1
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d004      	beq.n	800b0b8 <USB_EPStartXfer+0x14de>
 800b0ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b0b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b0bc:	881b      	ldrh	r3, [r3, #0]
 800b0be:	b29a      	uxth	r2, r3
 800b0c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0c4:	b29b      	uxth	r3, r3
 800b0c6:	029b      	lsls	r3, r3, #10
 800b0c8:	b29b      	uxth	r3, r3
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	b29a      	uxth	r2, r3
 800b0ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b0d2:	801a      	strh	r2, [r3, #0]
 800b0d4:	e030      	b.n	800b138 <USB_EPStartXfer+0x155e>
 800b0d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	785b      	ldrb	r3, [r3, #1]
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d128      	bne.n	800b138 <USB_EPStartXfer+0x155e>
 800b0e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b0f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b102:	b29b      	uxth	r3, r3
 800b104:	461a      	mov	r2, r3
 800b106:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b10a:	4413      	add	r3, r2
 800b10c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	00da      	lsls	r2, r3, #3
 800b11e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b122:	4413      	add	r3, r2
 800b124:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b128:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b12c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b130:	b29a      	uxth	r2, r3
 800b132:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b136:	801a      	strh	r2, [r3, #0]
 800b138:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b13c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b14a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	785b      	ldrb	r3, [r3, #1]
 800b152:	2b00      	cmp	r3, #0
 800b154:	f040 8085 	bne.w	800b262 <USB_EPStartXfer+0x1688>
 800b158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b15c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b16a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b174:	b29b      	uxth	r3, r3
 800b176:	461a      	mov	r2, r3
 800b178:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b17c:	4413      	add	r3, r2
 800b17e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	00da      	lsls	r2, r3, #3
 800b190:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b194:	4413      	add	r3, r2
 800b196:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b19a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b19e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b1a2:	881b      	ldrh	r3, [r3, #0]
 800b1a4:	b29b      	uxth	r3, r3
 800b1a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b1aa:	b29a      	uxth	r2, r3
 800b1ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b1b0:	801a      	strh	r2, [r3, #0]
 800b1b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1b6:	2b3e      	cmp	r3, #62	; 0x3e
 800b1b8:	d923      	bls.n	800b202 <USB_EPStartXfer+0x1628>
 800b1ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1be:	095b      	lsrs	r3, r3, #5
 800b1c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b1c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1c8:	f003 031f 	and.w	r3, r3, #31
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d104      	bne.n	800b1da <USB_EPStartXfer+0x1600>
 800b1d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b1d4:	3b01      	subs	r3, #1
 800b1d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b1da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b1de:	881b      	ldrh	r3, [r3, #0]
 800b1e0:	b29a      	uxth	r2, r3
 800b1e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	029b      	lsls	r3, r3, #10
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1f8:	b29a      	uxth	r2, r3
 800b1fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b1fe:	801a      	strh	r2, [r3, #0]
 800b200:	e05c      	b.n	800b2bc <USB_EPStartXfer+0x16e2>
 800b202:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b206:	2b00      	cmp	r3, #0
 800b208:	d10c      	bne.n	800b224 <USB_EPStartXfer+0x164a>
 800b20a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b20e:	881b      	ldrh	r3, [r3, #0]
 800b210:	b29b      	uxth	r3, r3
 800b212:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b216:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b21a:	b29a      	uxth	r2, r3
 800b21c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b220:	801a      	strh	r2, [r3, #0]
 800b222:	e04b      	b.n	800b2bc <USB_EPStartXfer+0x16e2>
 800b224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b228:	085b      	lsrs	r3, r3, #1
 800b22a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b22e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b232:	f003 0301 	and.w	r3, r3, #1
 800b236:	2b00      	cmp	r3, #0
 800b238:	d004      	beq.n	800b244 <USB_EPStartXfer+0x166a>
 800b23a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b23e:	3301      	adds	r3, #1
 800b240:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b244:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b248:	881b      	ldrh	r3, [r3, #0]
 800b24a:	b29a      	uxth	r2, r3
 800b24c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b250:	b29b      	uxth	r3, r3
 800b252:	029b      	lsls	r3, r3, #10
 800b254:	b29b      	uxth	r3, r3
 800b256:	4313      	orrs	r3, r2
 800b258:	b29a      	uxth	r2, r3
 800b25a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b25e:	801a      	strh	r2, [r3, #0]
 800b260:	e02c      	b.n	800b2bc <USB_EPStartXfer+0x16e2>
 800b262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b266:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	785b      	ldrb	r3, [r3, #1]
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d124      	bne.n	800b2bc <USB_EPStartXfer+0x16e2>
 800b272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b276:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b280:	b29b      	uxth	r3, r3
 800b282:	461a      	mov	r2, r3
 800b284:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b288:	4413      	add	r3, r2
 800b28a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b28e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	781b      	ldrb	r3, [r3, #0]
 800b29a:	00da      	lsls	r2, r3, #3
 800b29c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b2a0:	4413      	add	r3, r2
 800b2a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b2a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b2aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2ae:	b29a      	uxth	r2, r3
 800b2b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b2b4:	801a      	strh	r2, [r3, #0]
 800b2b6:	e001      	b.n	800b2bc <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	e03a      	b.n	800b332 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b2bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2c4:	681a      	ldr	r2, [r3, #0]
 800b2c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	009b      	lsls	r3, r3, #2
 800b2d4:	4413      	add	r3, r2
 800b2d6:	881b      	ldrh	r3, [r3, #0]
 800b2d8:	b29b      	uxth	r3, r3
 800b2da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b2de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2e2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b2e6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b2ea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b2ee:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b2f2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b2f6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b2fa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b2fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b302:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b30c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	441a      	add	r2, r3
 800b318:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b31c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b320:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b32c:	b29b      	uxth	r3, r3
 800b32e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b330:	2300      	movs	r3, #0
}
 800b332:	4618      	mov	r0, r3
 800b334:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}

0800b33c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b085      	sub	sp, #20
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	785b      	ldrb	r3, [r3, #1]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d020      	beq.n	800b390 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b34e:	687a      	ldr	r2, [r7, #4]
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	781b      	ldrb	r3, [r3, #0]
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	4413      	add	r3, r2
 800b358:	881b      	ldrh	r3, [r3, #0]
 800b35a:	b29b      	uxth	r3, r3
 800b35c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b364:	81bb      	strh	r3, [r7, #12]
 800b366:	89bb      	ldrh	r3, [r7, #12]
 800b368:	f083 0310 	eor.w	r3, r3, #16
 800b36c:	81bb      	strh	r3, [r7, #12]
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	781b      	ldrb	r3, [r3, #0]
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	441a      	add	r2, r3
 800b378:	89bb      	ldrh	r3, [r7, #12]
 800b37a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b37e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b38a:	b29b      	uxth	r3, r3
 800b38c:	8013      	strh	r3, [r2, #0]
 800b38e:	e01f      	b.n	800b3d0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b390:	687a      	ldr	r2, [r7, #4]
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	009b      	lsls	r3, r3, #2
 800b398:	4413      	add	r3, r2
 800b39a:	881b      	ldrh	r3, [r3, #0]
 800b39c:	b29b      	uxth	r3, r3
 800b39e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b3a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3a6:	81fb      	strh	r3, [r7, #14]
 800b3a8:	89fb      	ldrh	r3, [r7, #14]
 800b3aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b3ae:	81fb      	strh	r3, [r7, #14]
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	009b      	lsls	r3, r3, #2
 800b3b8:	441a      	add	r2, r3
 800b3ba:	89fb      	ldrh	r3, [r7, #14]
 800b3bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3cc:	b29b      	uxth	r3, r3
 800b3ce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b3d0:	2300      	movs	r3, #0
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3714      	adds	r7, #20
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr

0800b3de <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b3de:	b480      	push	{r7}
 800b3e0:	b087      	sub	sp, #28
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]
 800b3e6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	7b1b      	ldrb	r3, [r3, #12]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	f040 809d 	bne.w	800b52c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	785b      	ldrb	r3, [r3, #1]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d04c      	beq.n	800b494 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b3fa:	687a      	ldr	r2, [r7, #4]
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	009b      	lsls	r3, r3, #2
 800b402:	4413      	add	r3, r2
 800b404:	881b      	ldrh	r3, [r3, #0]
 800b406:	823b      	strh	r3, [r7, #16]
 800b408:	8a3b      	ldrh	r3, [r7, #16]
 800b40a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d01b      	beq.n	800b44a <USB_EPClearStall+0x6c>
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	009b      	lsls	r3, r3, #2
 800b41a:	4413      	add	r3, r2
 800b41c:	881b      	ldrh	r3, [r3, #0]
 800b41e:	b29b      	uxth	r3, r3
 800b420:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b428:	81fb      	strh	r3, [r7, #14]
 800b42a:	687a      	ldr	r2, [r7, #4]
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	009b      	lsls	r3, r3, #2
 800b432:	441a      	add	r2, r3
 800b434:	89fb      	ldrh	r3, [r7, #14]
 800b436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b43a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b43e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b442:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b446:	b29b      	uxth	r3, r3
 800b448:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	78db      	ldrb	r3, [r3, #3]
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d06c      	beq.n	800b52c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b452:	687a      	ldr	r2, [r7, #4]
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	009b      	lsls	r3, r3, #2
 800b45a:	4413      	add	r3, r2
 800b45c:	881b      	ldrh	r3, [r3, #0]
 800b45e:	b29b      	uxth	r3, r3
 800b460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b468:	81bb      	strh	r3, [r7, #12]
 800b46a:	89bb      	ldrh	r3, [r7, #12]
 800b46c:	f083 0320 	eor.w	r3, r3, #32
 800b470:	81bb      	strh	r3, [r7, #12]
 800b472:	687a      	ldr	r2, [r7, #4]
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	009b      	lsls	r3, r3, #2
 800b47a:	441a      	add	r2, r3
 800b47c:	89bb      	ldrh	r3, [r7, #12]
 800b47e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b482:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b48a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b48e:	b29b      	uxth	r3, r3
 800b490:	8013      	strh	r3, [r2, #0]
 800b492:	e04b      	b.n	800b52c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	781b      	ldrb	r3, [r3, #0]
 800b49a:	009b      	lsls	r3, r3, #2
 800b49c:	4413      	add	r3, r2
 800b49e:	881b      	ldrh	r3, [r3, #0]
 800b4a0:	82fb      	strh	r3, [r7, #22]
 800b4a2:	8afb      	ldrh	r3, [r7, #22]
 800b4a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d01b      	beq.n	800b4e4 <USB_EPClearStall+0x106>
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	4413      	add	r3, r2
 800b4b6:	881b      	ldrh	r3, [r3, #0]
 800b4b8:	b29b      	uxth	r3, r3
 800b4ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4c2:	82bb      	strh	r3, [r7, #20]
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	009b      	lsls	r3, r3, #2
 800b4cc:	441a      	add	r2, r3
 800b4ce:	8abb      	ldrh	r3, [r7, #20]
 800b4d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b4d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b4d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b4dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b4e4:	687a      	ldr	r2, [r7, #4]
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	009b      	lsls	r3, r3, #2
 800b4ec:	4413      	add	r3, r2
 800b4ee:	881b      	ldrh	r3, [r3, #0]
 800b4f0:	b29b      	uxth	r3, r3
 800b4f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b4f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4fa:	827b      	strh	r3, [r7, #18]
 800b4fc:	8a7b      	ldrh	r3, [r7, #18]
 800b4fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b502:	827b      	strh	r3, [r7, #18]
 800b504:	8a7b      	ldrh	r3, [r7, #18]
 800b506:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b50a:	827b      	strh	r3, [r7, #18]
 800b50c:	687a      	ldr	r2, [r7, #4]
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	009b      	lsls	r3, r3, #2
 800b514:	441a      	add	r2, r3
 800b516:	8a7b      	ldrh	r3, [r7, #18]
 800b518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b51c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b528:	b29b      	uxth	r3, r3
 800b52a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b52c:	2300      	movs	r3, #0
}
 800b52e:	4618      	mov	r0, r3
 800b530:	371c      	adds	r7, #28
 800b532:	46bd      	mov	sp, r7
 800b534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b538:	4770      	bx	lr

0800b53a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b53a:	b480      	push	{r7}
 800b53c:	b083      	sub	sp, #12
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
 800b542:	460b      	mov	r3, r1
 800b544:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b546:	78fb      	ldrb	r3, [r7, #3]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d103      	bne.n	800b554 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2280      	movs	r2, #128	; 0x80
 800b550:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b554:	2300      	movs	r3, #0
}
 800b556:	4618      	mov	r0, r3
 800b558:	370c      	adds	r7, #12
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr

0800b562 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b562:	b480      	push	{r7}
 800b564:	b083      	sub	sp, #12
 800b566:	af00      	add	r7, sp, #0
 800b568:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b570:	b29b      	uxth	r3, r3
 800b572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b57a:	b29a      	uxth	r2, r3
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b582:	2300      	movs	r3, #0
}
 800b584:	4618      	mov	r0, r3
 800b586:	370c      	adds	r7, #12
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr

0800b590 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800b590:	b480      	push	{r7}
 800b592:	b085      	sub	sp, #20
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b59e:	b29b      	uxth	r3, r3
 800b5a0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3714      	adds	r7, #20
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr

0800b5b0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b08b      	sub	sp, #44	; 0x2c
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	60b9      	str	r1, [r7, #8]
 800b5ba:	4611      	mov	r1, r2
 800b5bc:	461a      	mov	r2, r3
 800b5be:	460b      	mov	r3, r1
 800b5c0:	80fb      	strh	r3, [r7, #6]
 800b5c2:	4613      	mov	r3, r2
 800b5c4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b5c6:	88bb      	ldrh	r3, [r7, #4]
 800b5c8:	3301      	adds	r3, #1
 800b5ca:	085b      	lsrs	r3, r3, #1
 800b5cc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b5d6:	88fa      	ldrh	r2, [r7, #6]
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	4413      	add	r3, r2
 800b5dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b5e0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b5e2:	69bb      	ldr	r3, [r7, #24]
 800b5e4:	627b      	str	r3, [r7, #36]	; 0x24
 800b5e6:	e01b      	b.n	800b620 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800b5e8:	69fb      	ldr	r3, [r7, #28]
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b5ee:	69fb      	ldr	r3, [r7, #28]
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	781b      	ldrb	r3, [r3, #0]
 800b5f4:	021b      	lsls	r3, r3, #8
 800b5f6:	b21a      	sxth	r2, r3
 800b5f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	b21b      	sxth	r3, r3
 800b600:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b602:	6a3b      	ldr	r3, [r7, #32]
 800b604:	8a7a      	ldrh	r2, [r7, #18]
 800b606:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b608:	6a3b      	ldr	r3, [r7, #32]
 800b60a:	3302      	adds	r3, #2
 800b60c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b60e:	69fb      	ldr	r3, [r7, #28]
 800b610:	3301      	adds	r3, #1
 800b612:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b614:	69fb      	ldr	r3, [r7, #28]
 800b616:	3301      	adds	r3, #1
 800b618:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b61c:	3b01      	subs	r3, #1
 800b61e:	627b      	str	r3, [r7, #36]	; 0x24
 800b620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b622:	2b00      	cmp	r3, #0
 800b624:	d1e0      	bne.n	800b5e8 <USB_WritePMA+0x38>
  }
}
 800b626:	bf00      	nop
 800b628:	bf00      	nop
 800b62a:	372c      	adds	r7, #44	; 0x2c
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr

0800b634 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b634:	b480      	push	{r7}
 800b636:	b08b      	sub	sp, #44	; 0x2c
 800b638:	af00      	add	r7, sp, #0
 800b63a:	60f8      	str	r0, [r7, #12]
 800b63c:	60b9      	str	r1, [r7, #8]
 800b63e:	4611      	mov	r1, r2
 800b640:	461a      	mov	r2, r3
 800b642:	460b      	mov	r3, r1
 800b644:	80fb      	strh	r3, [r7, #6]
 800b646:	4613      	mov	r3, r2
 800b648:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b64a:	88bb      	ldrh	r3, [r7, #4]
 800b64c:	085b      	lsrs	r3, r3, #1
 800b64e:	b29b      	uxth	r3, r3
 800b650:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b65a:	88fa      	ldrh	r2, [r7, #6]
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	4413      	add	r3, r2
 800b660:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b664:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b666:	69bb      	ldr	r3, [r7, #24]
 800b668:	627b      	str	r3, [r7, #36]	; 0x24
 800b66a:	e018      	b.n	800b69e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b66c:	6a3b      	ldr	r3, [r7, #32]
 800b66e:	881b      	ldrh	r3, [r3, #0]
 800b670:	b29b      	uxth	r3, r3
 800b672:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b674:	6a3b      	ldr	r3, [r7, #32]
 800b676:	3302      	adds	r3, #2
 800b678:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	b2da      	uxtb	r2, r3
 800b67e:	69fb      	ldr	r3, [r7, #28]
 800b680:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b682:	69fb      	ldr	r3, [r7, #28]
 800b684:	3301      	adds	r3, #1
 800b686:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	0a1b      	lsrs	r3, r3, #8
 800b68c:	b2da      	uxtb	r2, r3
 800b68e:	69fb      	ldr	r3, [r7, #28]
 800b690:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b692:	69fb      	ldr	r3, [r7, #28]
 800b694:	3301      	adds	r3, #1
 800b696:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69a:	3b01      	subs	r3, #1
 800b69c:	627b      	str	r3, [r7, #36]	; 0x24
 800b69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d1e3      	bne.n	800b66c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b6a4:	88bb      	ldrh	r3, [r7, #4]
 800b6a6:	f003 0301 	and.w	r3, r3, #1
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d007      	beq.n	800b6c0 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800b6b0:	6a3b      	ldr	r3, [r7, #32]
 800b6b2:	881b      	ldrh	r3, [r3, #0]
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	b2da      	uxtb	r2, r3
 800b6bc:	69fb      	ldr	r3, [r7, #28]
 800b6be:	701a      	strb	r2, [r3, #0]
  }
}
 800b6c0:	bf00      	nop
 800b6c2:	372c      	adds	r7, #44	; 0x2c
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr

0800b6cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b6d8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b6dc:	f002 fc96 	bl	800e00c <USBD_static_malloc>
 800b6e0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d109      	bne.n	800b6fc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	32b0      	adds	r2, #176	; 0xb0
 800b6f2:	2100      	movs	r1, #0
 800b6f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b6f8:	2302      	movs	r3, #2
 800b6fa:	e0d4      	b.n	800b8a6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b6fc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b700:	2100      	movs	r1, #0
 800b702:	68f8      	ldr	r0, [r7, #12]
 800b704:	f002 fd08 	bl	800e118 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	32b0      	adds	r2, #176	; 0xb0
 800b712:	68f9      	ldr	r1, [r7, #12]
 800b714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	32b0      	adds	r2, #176	; 0xb0
 800b722:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	7c1b      	ldrb	r3, [r3, #16]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d138      	bne.n	800b7a6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b734:	4b5e      	ldr	r3, [pc, #376]	; (800b8b0 <USBD_CDC_Init+0x1e4>)
 800b736:	7819      	ldrb	r1, [r3, #0]
 800b738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b73c:	2202      	movs	r2, #2
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f002 fb09 	bl	800dd56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b744:	4b5a      	ldr	r3, [pc, #360]	; (800b8b0 <USBD_CDC_Init+0x1e4>)
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	f003 020f 	and.w	r2, r3, #15
 800b74c:	6879      	ldr	r1, [r7, #4]
 800b74e:	4613      	mov	r3, r2
 800b750:	009b      	lsls	r3, r3, #2
 800b752:	4413      	add	r3, r2
 800b754:	009b      	lsls	r3, r3, #2
 800b756:	440b      	add	r3, r1
 800b758:	3324      	adds	r3, #36	; 0x24
 800b75a:	2201      	movs	r2, #1
 800b75c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b75e:	4b55      	ldr	r3, [pc, #340]	; (800b8b4 <USBD_CDC_Init+0x1e8>)
 800b760:	7819      	ldrb	r1, [r3, #0]
 800b762:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b766:	2202      	movs	r2, #2
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f002 faf4 	bl	800dd56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b76e:	4b51      	ldr	r3, [pc, #324]	; (800b8b4 <USBD_CDC_Init+0x1e8>)
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	f003 020f 	and.w	r2, r3, #15
 800b776:	6879      	ldr	r1, [r7, #4]
 800b778:	4613      	mov	r3, r2
 800b77a:	009b      	lsls	r3, r3, #2
 800b77c:	4413      	add	r3, r2
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	440b      	add	r3, r1
 800b782:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b786:	2201      	movs	r2, #1
 800b788:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b78a:	4b4b      	ldr	r3, [pc, #300]	; (800b8b8 <USBD_CDC_Init+0x1ec>)
 800b78c:	781b      	ldrb	r3, [r3, #0]
 800b78e:	f003 020f 	and.w	r2, r3, #15
 800b792:	6879      	ldr	r1, [r7, #4]
 800b794:	4613      	mov	r3, r2
 800b796:	009b      	lsls	r3, r3, #2
 800b798:	4413      	add	r3, r2
 800b79a:	009b      	lsls	r3, r3, #2
 800b79c:	440b      	add	r3, r1
 800b79e:	3326      	adds	r3, #38	; 0x26
 800b7a0:	2210      	movs	r2, #16
 800b7a2:	801a      	strh	r2, [r3, #0]
 800b7a4:	e035      	b.n	800b812 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b7a6:	4b42      	ldr	r3, [pc, #264]	; (800b8b0 <USBD_CDC_Init+0x1e4>)
 800b7a8:	7819      	ldrb	r1, [r3, #0]
 800b7aa:	2340      	movs	r3, #64	; 0x40
 800b7ac:	2202      	movs	r2, #2
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f002 fad1 	bl	800dd56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b7b4:	4b3e      	ldr	r3, [pc, #248]	; (800b8b0 <USBD_CDC_Init+0x1e4>)
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	f003 020f 	and.w	r2, r3, #15
 800b7bc:	6879      	ldr	r1, [r7, #4]
 800b7be:	4613      	mov	r3, r2
 800b7c0:	009b      	lsls	r3, r3, #2
 800b7c2:	4413      	add	r3, r2
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	440b      	add	r3, r1
 800b7c8:	3324      	adds	r3, #36	; 0x24
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b7ce:	4b39      	ldr	r3, [pc, #228]	; (800b8b4 <USBD_CDC_Init+0x1e8>)
 800b7d0:	7819      	ldrb	r1, [r3, #0]
 800b7d2:	2340      	movs	r3, #64	; 0x40
 800b7d4:	2202      	movs	r2, #2
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f002 fabd 	bl	800dd56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b7dc:	4b35      	ldr	r3, [pc, #212]	; (800b8b4 <USBD_CDC_Init+0x1e8>)
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	f003 020f 	and.w	r2, r3, #15
 800b7e4:	6879      	ldr	r1, [r7, #4]
 800b7e6:	4613      	mov	r3, r2
 800b7e8:	009b      	lsls	r3, r3, #2
 800b7ea:	4413      	add	r3, r2
 800b7ec:	009b      	lsls	r3, r3, #2
 800b7ee:	440b      	add	r3, r1
 800b7f0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b7f4:	2201      	movs	r2, #1
 800b7f6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b7f8:	4b2f      	ldr	r3, [pc, #188]	; (800b8b8 <USBD_CDC_Init+0x1ec>)
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	f003 020f 	and.w	r2, r3, #15
 800b800:	6879      	ldr	r1, [r7, #4]
 800b802:	4613      	mov	r3, r2
 800b804:	009b      	lsls	r3, r3, #2
 800b806:	4413      	add	r3, r2
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	440b      	add	r3, r1
 800b80c:	3326      	adds	r3, #38	; 0x26
 800b80e:	2210      	movs	r2, #16
 800b810:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b812:	4b29      	ldr	r3, [pc, #164]	; (800b8b8 <USBD_CDC_Init+0x1ec>)
 800b814:	7819      	ldrb	r1, [r3, #0]
 800b816:	2308      	movs	r3, #8
 800b818:	2203      	movs	r2, #3
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f002 fa9b 	bl	800dd56 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b820:	4b25      	ldr	r3, [pc, #148]	; (800b8b8 <USBD_CDC_Init+0x1ec>)
 800b822:	781b      	ldrb	r3, [r3, #0]
 800b824:	f003 020f 	and.w	r2, r3, #15
 800b828:	6879      	ldr	r1, [r7, #4]
 800b82a:	4613      	mov	r3, r2
 800b82c:	009b      	lsls	r3, r3, #2
 800b82e:	4413      	add	r3, r2
 800b830:	009b      	lsls	r3, r3, #2
 800b832:	440b      	add	r3, r1
 800b834:	3324      	adds	r3, #36	; 0x24
 800b836:	2201      	movs	r2, #1
 800b838:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2200      	movs	r2, #0
 800b83e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	33b0      	adds	r3, #176	; 0xb0
 800b84c:	009b      	lsls	r3, r3, #2
 800b84e:	4413      	add	r3, r2
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2200      	movs	r2, #0
 800b85a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2200      	movs	r2, #0
 800b862:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d101      	bne.n	800b874 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b870:	2302      	movs	r3, #2
 800b872:	e018      	b.n	800b8a6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	7c1b      	ldrb	r3, [r3, #16]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d10a      	bne.n	800b892 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b87c:	4b0d      	ldr	r3, [pc, #52]	; (800b8b4 <USBD_CDC_Init+0x1e8>)
 800b87e:	7819      	ldrb	r1, [r3, #0]
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b886:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f002 fb53 	bl	800df36 <USBD_LL_PrepareReceive>
 800b890:	e008      	b.n	800b8a4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b892:	4b08      	ldr	r3, [pc, #32]	; (800b8b4 <USBD_CDC_Init+0x1e8>)
 800b894:	7819      	ldrb	r1, [r3, #0]
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b89c:	2340      	movs	r3, #64	; 0x40
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f002 fb49 	bl	800df36 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b8a4:	2300      	movs	r3, #0
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3710      	adds	r7, #16
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	2000009b 	.word	0x2000009b
 800b8b4:	2000009c 	.word	0x2000009c
 800b8b8:	2000009d 	.word	0x2000009d

0800b8bc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	460b      	mov	r3, r1
 800b8c6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b8c8:	4b3a      	ldr	r3, [pc, #232]	; (800b9b4 <USBD_CDC_DeInit+0xf8>)
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f002 fa67 	bl	800dda2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b8d4:	4b37      	ldr	r3, [pc, #220]	; (800b9b4 <USBD_CDC_DeInit+0xf8>)
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	f003 020f 	and.w	r2, r3, #15
 800b8dc:	6879      	ldr	r1, [r7, #4]
 800b8de:	4613      	mov	r3, r2
 800b8e0:	009b      	lsls	r3, r3, #2
 800b8e2:	4413      	add	r3, r2
 800b8e4:	009b      	lsls	r3, r3, #2
 800b8e6:	440b      	add	r3, r1
 800b8e8:	3324      	adds	r3, #36	; 0x24
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b8ee:	4b32      	ldr	r3, [pc, #200]	; (800b9b8 <USBD_CDC_DeInit+0xfc>)
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f002 fa54 	bl	800dda2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b8fa:	4b2f      	ldr	r3, [pc, #188]	; (800b9b8 <USBD_CDC_DeInit+0xfc>)
 800b8fc:	781b      	ldrb	r3, [r3, #0]
 800b8fe:	f003 020f 	and.w	r2, r3, #15
 800b902:	6879      	ldr	r1, [r7, #4]
 800b904:	4613      	mov	r3, r2
 800b906:	009b      	lsls	r3, r3, #2
 800b908:	4413      	add	r3, r2
 800b90a:	009b      	lsls	r3, r3, #2
 800b90c:	440b      	add	r3, r1
 800b90e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b912:	2200      	movs	r2, #0
 800b914:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b916:	4b29      	ldr	r3, [pc, #164]	; (800b9bc <USBD_CDC_DeInit+0x100>)
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	4619      	mov	r1, r3
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f002 fa40 	bl	800dda2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b922:	4b26      	ldr	r3, [pc, #152]	; (800b9bc <USBD_CDC_DeInit+0x100>)
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	f003 020f 	and.w	r2, r3, #15
 800b92a:	6879      	ldr	r1, [r7, #4]
 800b92c:	4613      	mov	r3, r2
 800b92e:	009b      	lsls	r3, r3, #2
 800b930:	4413      	add	r3, r2
 800b932:	009b      	lsls	r3, r3, #2
 800b934:	440b      	add	r3, r1
 800b936:	3324      	adds	r3, #36	; 0x24
 800b938:	2200      	movs	r2, #0
 800b93a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b93c:	4b1f      	ldr	r3, [pc, #124]	; (800b9bc <USBD_CDC_DeInit+0x100>)
 800b93e:	781b      	ldrb	r3, [r3, #0]
 800b940:	f003 020f 	and.w	r2, r3, #15
 800b944:	6879      	ldr	r1, [r7, #4]
 800b946:	4613      	mov	r3, r2
 800b948:	009b      	lsls	r3, r3, #2
 800b94a:	4413      	add	r3, r2
 800b94c:	009b      	lsls	r3, r3, #2
 800b94e:	440b      	add	r3, r1
 800b950:	3326      	adds	r3, #38	; 0x26
 800b952:	2200      	movs	r2, #0
 800b954:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	32b0      	adds	r2, #176	; 0xb0
 800b960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d01f      	beq.n	800b9a8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b96e:	687a      	ldr	r2, [r7, #4]
 800b970:	33b0      	adds	r3, #176	; 0xb0
 800b972:	009b      	lsls	r3, r3, #2
 800b974:	4413      	add	r3, r2
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	32b0      	adds	r2, #176	; 0xb0
 800b986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b98a:	4618      	mov	r0, r3
 800b98c:	f002 fb4c 	bl	800e028 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	32b0      	adds	r2, #176	; 0xb0
 800b99a:	2100      	movs	r1, #0
 800b99c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b9a8:	2300      	movs	r3, #0
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3708      	adds	r7, #8
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
 800b9b2:	bf00      	nop
 800b9b4:	2000009b 	.word	0x2000009b
 800b9b8:	2000009c 	.word	0x2000009c
 800b9bc:	2000009d 	.word	0x2000009d

0800b9c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b086      	sub	sp, #24
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	32b0      	adds	r2, #176	; 0xb0
 800b9d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9d8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d101      	bne.n	800b9f0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b9ec:	2303      	movs	r3, #3
 800b9ee:	e0bf      	b.n	800bb70 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	781b      	ldrb	r3, [r3, #0]
 800b9f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d050      	beq.n	800ba9e <USBD_CDC_Setup+0xde>
 800b9fc:	2b20      	cmp	r3, #32
 800b9fe:	f040 80af 	bne.w	800bb60 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	88db      	ldrh	r3, [r3, #6]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d03a      	beq.n	800ba80 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	b25b      	sxtb	r3, r3
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	da1b      	bge.n	800ba4c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ba1a:	687a      	ldr	r2, [r7, #4]
 800ba1c:	33b0      	adds	r3, #176	; 0xb0
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	4413      	add	r3, r2
 800ba22:	685b      	ldr	r3, [r3, #4]
 800ba24:	689b      	ldr	r3, [r3, #8]
 800ba26:	683a      	ldr	r2, [r7, #0]
 800ba28:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ba2a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ba2c:	683a      	ldr	r2, [r7, #0]
 800ba2e:	88d2      	ldrh	r2, [r2, #6]
 800ba30:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	88db      	ldrh	r3, [r3, #6]
 800ba36:	2b07      	cmp	r3, #7
 800ba38:	bf28      	it	cs
 800ba3a:	2307      	movcs	r3, #7
 800ba3c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	89fa      	ldrh	r2, [r7, #14]
 800ba42:	4619      	mov	r1, r3
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f001 fd21 	bl	800d48c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ba4a:	e090      	b.n	800bb6e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	785a      	ldrb	r2, [r3, #1]
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	88db      	ldrh	r3, [r3, #6]
 800ba5a:	2b3f      	cmp	r3, #63	; 0x3f
 800ba5c:	d803      	bhi.n	800ba66 <USBD_CDC_Setup+0xa6>
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	88db      	ldrh	r3, [r3, #6]
 800ba62:	b2da      	uxtb	r2, r3
 800ba64:	e000      	b.n	800ba68 <USBD_CDC_Setup+0xa8>
 800ba66:	2240      	movs	r2, #64	; 0x40
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ba6e:	6939      	ldr	r1, [r7, #16]
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800ba76:	461a      	mov	r2, r3
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f001 fd33 	bl	800d4e4 <USBD_CtlPrepareRx>
      break;
 800ba7e:	e076      	b.n	800bb6e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ba86:	687a      	ldr	r2, [r7, #4]
 800ba88:	33b0      	adds	r3, #176	; 0xb0
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	4413      	add	r3, r2
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	689b      	ldr	r3, [r3, #8]
 800ba92:	683a      	ldr	r2, [r7, #0]
 800ba94:	7850      	ldrb	r0, [r2, #1]
 800ba96:	2200      	movs	r2, #0
 800ba98:	6839      	ldr	r1, [r7, #0]
 800ba9a:	4798      	blx	r3
      break;
 800ba9c:	e067      	b.n	800bb6e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	785b      	ldrb	r3, [r3, #1]
 800baa2:	2b0b      	cmp	r3, #11
 800baa4:	d851      	bhi.n	800bb4a <USBD_CDC_Setup+0x18a>
 800baa6:	a201      	add	r2, pc, #4	; (adr r2, 800baac <USBD_CDC_Setup+0xec>)
 800baa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baac:	0800badd 	.word	0x0800badd
 800bab0:	0800bb59 	.word	0x0800bb59
 800bab4:	0800bb4b 	.word	0x0800bb4b
 800bab8:	0800bb4b 	.word	0x0800bb4b
 800babc:	0800bb4b 	.word	0x0800bb4b
 800bac0:	0800bb4b 	.word	0x0800bb4b
 800bac4:	0800bb4b 	.word	0x0800bb4b
 800bac8:	0800bb4b 	.word	0x0800bb4b
 800bacc:	0800bb4b 	.word	0x0800bb4b
 800bad0:	0800bb4b 	.word	0x0800bb4b
 800bad4:	0800bb07 	.word	0x0800bb07
 800bad8:	0800bb31 	.word	0x0800bb31
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bae2:	b2db      	uxtb	r3, r3
 800bae4:	2b03      	cmp	r3, #3
 800bae6:	d107      	bne.n	800baf8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bae8:	f107 030a 	add.w	r3, r7, #10
 800baec:	2202      	movs	r2, #2
 800baee:	4619      	mov	r1, r3
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f001 fccb 	bl	800d48c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800baf6:	e032      	b.n	800bb5e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800baf8:	6839      	ldr	r1, [r7, #0]
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f001 fc55 	bl	800d3aa <USBD_CtlError>
            ret = USBD_FAIL;
 800bb00:	2303      	movs	r3, #3
 800bb02:	75fb      	strb	r3, [r7, #23]
          break;
 800bb04:	e02b      	b.n	800bb5e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	2b03      	cmp	r3, #3
 800bb10:	d107      	bne.n	800bb22 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bb12:	f107 030d 	add.w	r3, r7, #13
 800bb16:	2201      	movs	r2, #1
 800bb18:	4619      	mov	r1, r3
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f001 fcb6 	bl	800d48c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bb20:	e01d      	b.n	800bb5e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bb22:	6839      	ldr	r1, [r7, #0]
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f001 fc40 	bl	800d3aa <USBD_CtlError>
            ret = USBD_FAIL;
 800bb2a:	2303      	movs	r3, #3
 800bb2c:	75fb      	strb	r3, [r7, #23]
          break;
 800bb2e:	e016      	b.n	800bb5e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb36:	b2db      	uxtb	r3, r3
 800bb38:	2b03      	cmp	r3, #3
 800bb3a:	d00f      	beq.n	800bb5c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bb3c:	6839      	ldr	r1, [r7, #0]
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f001 fc33 	bl	800d3aa <USBD_CtlError>
            ret = USBD_FAIL;
 800bb44:	2303      	movs	r3, #3
 800bb46:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bb48:	e008      	b.n	800bb5c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bb4a:	6839      	ldr	r1, [r7, #0]
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f001 fc2c 	bl	800d3aa <USBD_CtlError>
          ret = USBD_FAIL;
 800bb52:	2303      	movs	r3, #3
 800bb54:	75fb      	strb	r3, [r7, #23]
          break;
 800bb56:	e002      	b.n	800bb5e <USBD_CDC_Setup+0x19e>
          break;
 800bb58:	bf00      	nop
 800bb5a:	e008      	b.n	800bb6e <USBD_CDC_Setup+0x1ae>
          break;
 800bb5c:	bf00      	nop
      }
      break;
 800bb5e:	e006      	b.n	800bb6e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800bb60:	6839      	ldr	r1, [r7, #0]
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f001 fc21 	bl	800d3aa <USBD_CtlError>
      ret = USBD_FAIL;
 800bb68:	2303      	movs	r3, #3
 800bb6a:	75fb      	strb	r3, [r7, #23]
      break;
 800bb6c:	bf00      	nop
  }

  return (uint8_t)ret;
 800bb6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3718      	adds	r7, #24
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	460b      	mov	r3, r1
 800bb82:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bb8a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	32b0      	adds	r2, #176	; 0xb0
 800bb96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d101      	bne.n	800bba2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800bb9e:	2303      	movs	r3, #3
 800bba0:	e065      	b.n	800bc6e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	32b0      	adds	r2, #176	; 0xb0
 800bbac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbb0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bbb2:	78fb      	ldrb	r3, [r7, #3]
 800bbb4:	f003 020f 	and.w	r2, r3, #15
 800bbb8:	6879      	ldr	r1, [r7, #4]
 800bbba:	4613      	mov	r3, r2
 800bbbc:	009b      	lsls	r3, r3, #2
 800bbbe:	4413      	add	r3, r2
 800bbc0:	009b      	lsls	r3, r3, #2
 800bbc2:	440b      	add	r3, r1
 800bbc4:	3318      	adds	r3, #24
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d02f      	beq.n	800bc2c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800bbcc:	78fb      	ldrb	r3, [r7, #3]
 800bbce:	f003 020f 	and.w	r2, r3, #15
 800bbd2:	6879      	ldr	r1, [r7, #4]
 800bbd4:	4613      	mov	r3, r2
 800bbd6:	009b      	lsls	r3, r3, #2
 800bbd8:	4413      	add	r3, r2
 800bbda:	009b      	lsls	r3, r3, #2
 800bbdc:	440b      	add	r3, r1
 800bbde:	3318      	adds	r3, #24
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	78fb      	ldrb	r3, [r7, #3]
 800bbe4:	f003 010f 	and.w	r1, r3, #15
 800bbe8:	68f8      	ldr	r0, [r7, #12]
 800bbea:	460b      	mov	r3, r1
 800bbec:	009b      	lsls	r3, r3, #2
 800bbee:	440b      	add	r3, r1
 800bbf0:	00db      	lsls	r3, r3, #3
 800bbf2:	4403      	add	r3, r0
 800bbf4:	3338      	adds	r3, #56	; 0x38
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	fbb2 f1f3 	udiv	r1, r2, r3
 800bbfc:	fb01 f303 	mul.w	r3, r1, r3
 800bc00:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d112      	bne.n	800bc2c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800bc06:	78fb      	ldrb	r3, [r7, #3]
 800bc08:	f003 020f 	and.w	r2, r3, #15
 800bc0c:	6879      	ldr	r1, [r7, #4]
 800bc0e:	4613      	mov	r3, r2
 800bc10:	009b      	lsls	r3, r3, #2
 800bc12:	4413      	add	r3, r2
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	440b      	add	r3, r1
 800bc18:	3318      	adds	r3, #24
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bc1e:	78f9      	ldrb	r1, [r7, #3]
 800bc20:	2300      	movs	r3, #0
 800bc22:	2200      	movs	r2, #0
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f002 f965 	bl	800def4 <USBD_LL_Transmit>
 800bc2a:	e01f      	b.n	800bc6c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	33b0      	adds	r3, #176	; 0xb0
 800bc3e:	009b      	lsls	r3, r3, #2
 800bc40:	4413      	add	r3, r2
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	691b      	ldr	r3, [r3, #16]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d010      	beq.n	800bc6c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	33b0      	adds	r3, #176	; 0xb0
 800bc54:	009b      	lsls	r3, r3, #2
 800bc56:	4413      	add	r3, r2
 800bc58:	685b      	ldr	r3, [r3, #4]
 800bc5a:	691b      	ldr	r3, [r3, #16]
 800bc5c:	68ba      	ldr	r2, [r7, #8]
 800bc5e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bc62:	68ba      	ldr	r2, [r7, #8]
 800bc64:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bc68:	78fa      	ldrb	r2, [r7, #3]
 800bc6a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bc6c:	2300      	movs	r3, #0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3710      	adds	r7, #16
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}

0800bc76 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bc76:	b580      	push	{r7, lr}
 800bc78:	b084      	sub	sp, #16
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]
 800bc7e:	460b      	mov	r3, r1
 800bc80:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	32b0      	adds	r2, #176	; 0xb0
 800bc8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc90:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	32b0      	adds	r2, #176	; 0xb0
 800bc9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d101      	bne.n	800bca8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800bca4:	2303      	movs	r3, #3
 800bca6:	e01a      	b.n	800bcde <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bca8:	78fb      	ldrb	r3, [r7, #3]
 800bcaa:	4619      	mov	r1, r3
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f002 f963 	bl	800df78 <USBD_LL_GetRxDataSize>
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bcc0:	687a      	ldr	r2, [r7, #4]
 800bcc2:	33b0      	adds	r3, #176	; 0xb0
 800bcc4:	009b      	lsls	r3, r3, #2
 800bcc6:	4413      	add	r3, r2
 800bcc8:	685b      	ldr	r3, [r3, #4]
 800bcca:	68db      	ldr	r3, [r3, #12]
 800bccc:	68fa      	ldr	r2, [r7, #12]
 800bcce:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bcd2:	68fa      	ldr	r2, [r7, #12]
 800bcd4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bcd8:	4611      	mov	r1, r2
 800bcda:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bcdc:	2300      	movs	r3, #0
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3710      	adds	r7, #16
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}

0800bce6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bce6:	b580      	push	{r7, lr}
 800bce8:	b084      	sub	sp, #16
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	32b0      	adds	r2, #176	; 0xb0
 800bcf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcfc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d101      	bne.n	800bd08 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bd04:	2303      	movs	r3, #3
 800bd06:	e025      	b.n	800bd54 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	33b0      	adds	r3, #176	; 0xb0
 800bd12:	009b      	lsls	r3, r3, #2
 800bd14:	4413      	add	r3, r2
 800bd16:	685b      	ldr	r3, [r3, #4]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d01a      	beq.n	800bd52 <USBD_CDC_EP0_RxReady+0x6c>
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bd22:	2bff      	cmp	r3, #255	; 0xff
 800bd24:	d015      	beq.n	800bd52 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	33b0      	adds	r3, #176	; 0xb0
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	4413      	add	r3, r2
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	689b      	ldr	r3, [r3, #8]
 800bd38:	68fa      	ldr	r2, [r7, #12]
 800bd3a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800bd3e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800bd40:	68fa      	ldr	r2, [r7, #12]
 800bd42:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bd46:	b292      	uxth	r2, r2
 800bd48:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	22ff      	movs	r2, #255	; 0xff
 800bd4e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800bd52:	2300      	movs	r3, #0
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3710      	adds	r7, #16
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b086      	sub	sp, #24
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bd64:	2182      	movs	r1, #130	; 0x82
 800bd66:	4818      	ldr	r0, [pc, #96]	; (800bdc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bd68:	f000 fcbd 	bl	800c6e6 <USBD_GetEpDesc>
 800bd6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bd6e:	2101      	movs	r1, #1
 800bd70:	4815      	ldr	r0, [pc, #84]	; (800bdc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bd72:	f000 fcb8 	bl	800c6e6 <USBD_GetEpDesc>
 800bd76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bd78:	2181      	movs	r1, #129	; 0x81
 800bd7a:	4813      	ldr	r0, [pc, #76]	; (800bdc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bd7c:	f000 fcb3 	bl	800c6e6 <USBD_GetEpDesc>
 800bd80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d002      	beq.n	800bd8e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	2210      	movs	r2, #16
 800bd8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d006      	beq.n	800bda2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	2200      	movs	r2, #0
 800bd98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd9c:	711a      	strb	r2, [r3, #4]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d006      	beq.n	800bdb6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bdb0:	711a      	strb	r2, [r3, #4]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2243      	movs	r2, #67	; 0x43
 800bdba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bdbc:	4b02      	ldr	r3, [pc, #8]	; (800bdc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3718      	adds	r7, #24
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
 800bdc6:	bf00      	nop
 800bdc8:	20000058 	.word	0x20000058

0800bdcc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b086      	sub	sp, #24
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bdd4:	2182      	movs	r1, #130	; 0x82
 800bdd6:	4818      	ldr	r0, [pc, #96]	; (800be38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bdd8:	f000 fc85 	bl	800c6e6 <USBD_GetEpDesc>
 800bddc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bdde:	2101      	movs	r1, #1
 800bde0:	4815      	ldr	r0, [pc, #84]	; (800be38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bde2:	f000 fc80 	bl	800c6e6 <USBD_GetEpDesc>
 800bde6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bde8:	2181      	movs	r1, #129	; 0x81
 800bdea:	4813      	ldr	r0, [pc, #76]	; (800be38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bdec:	f000 fc7b 	bl	800c6e6 <USBD_GetEpDesc>
 800bdf0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d002      	beq.n	800bdfe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	2210      	movs	r2, #16
 800bdfc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d006      	beq.n	800be12 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	2200      	movs	r2, #0
 800be08:	711a      	strb	r2, [r3, #4]
 800be0a:	2200      	movs	r2, #0
 800be0c:	f042 0202 	orr.w	r2, r2, #2
 800be10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d006      	beq.n	800be26 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2200      	movs	r2, #0
 800be1c:	711a      	strb	r2, [r3, #4]
 800be1e:	2200      	movs	r2, #0
 800be20:	f042 0202 	orr.w	r2, r2, #2
 800be24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2243      	movs	r2, #67	; 0x43
 800be2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800be2c:	4b02      	ldr	r3, [pc, #8]	; (800be38 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3718      	adds	r7, #24
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	20000058 	.word	0x20000058

0800be3c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b086      	sub	sp, #24
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800be44:	2182      	movs	r1, #130	; 0x82
 800be46:	4818      	ldr	r0, [pc, #96]	; (800bea8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800be48:	f000 fc4d 	bl	800c6e6 <USBD_GetEpDesc>
 800be4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800be4e:	2101      	movs	r1, #1
 800be50:	4815      	ldr	r0, [pc, #84]	; (800bea8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800be52:	f000 fc48 	bl	800c6e6 <USBD_GetEpDesc>
 800be56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800be58:	2181      	movs	r1, #129	; 0x81
 800be5a:	4813      	ldr	r0, [pc, #76]	; (800bea8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800be5c:	f000 fc43 	bl	800c6e6 <USBD_GetEpDesc>
 800be60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d002      	beq.n	800be6e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	2210      	movs	r2, #16
 800be6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d006      	beq.n	800be82 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	2200      	movs	r2, #0
 800be78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be7c:	711a      	strb	r2, [r3, #4]
 800be7e:	2200      	movs	r2, #0
 800be80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d006      	beq.n	800be96 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	2200      	movs	r2, #0
 800be8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be90:	711a      	strb	r2, [r3, #4]
 800be92:	2200      	movs	r2, #0
 800be94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2243      	movs	r2, #67	; 0x43
 800be9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800be9c:	4b02      	ldr	r3, [pc, #8]	; (800bea8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3718      	adds	r7, #24
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop
 800bea8:	20000058 	.word	0x20000058

0800beac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800beac:	b480      	push	{r7}
 800beae:	b083      	sub	sp, #12
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	220a      	movs	r2, #10
 800beb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800beba:	4b03      	ldr	r3, [pc, #12]	; (800bec8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	370c      	adds	r7, #12
 800bec0:	46bd      	mov	sp, r7
 800bec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec6:	4770      	bx	lr
 800bec8:	20000014 	.word	0x20000014

0800becc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800becc:	b480      	push	{r7}
 800bece:	b083      	sub	sp, #12
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
 800bed4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d101      	bne.n	800bee0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bedc:	2303      	movs	r3, #3
 800bede:	e009      	b.n	800bef4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bee6:	687a      	ldr	r2, [r7, #4]
 800bee8:	33b0      	adds	r3, #176	; 0xb0
 800beea:	009b      	lsls	r3, r3, #2
 800beec:	4413      	add	r3, r2
 800beee:	683a      	ldr	r2, [r7, #0]
 800bef0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800bef2:	2300      	movs	r3, #0
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	370c      	adds	r7, #12
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr

0800bf00 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b087      	sub	sp, #28
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	60f8      	str	r0, [r7, #12]
 800bf08:	60b9      	str	r1, [r7, #8]
 800bf0a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	32b0      	adds	r2, #176	; 0xb0
 800bf16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf1a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d101      	bne.n	800bf26 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bf22:	2303      	movs	r3, #3
 800bf24:	e008      	b.n	800bf38 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	68ba      	ldr	r2, [r7, #8]
 800bf2a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800bf36:	2300      	movs	r3, #0
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	371c      	adds	r7, #28
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf42:	4770      	bx	lr

0800bf44 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bf44:	b480      	push	{r7}
 800bf46:	b085      	sub	sp, #20
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	32b0      	adds	r2, #176	; 0xb0
 800bf58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf5c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d101      	bne.n	800bf68 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800bf64:	2303      	movs	r3, #3
 800bf66:	e004      	b.n	800bf72 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	683a      	ldr	r2, [r7, #0]
 800bf6c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800bf70:	2300      	movs	r3, #0
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3714      	adds	r7, #20
 800bf76:	46bd      	mov	sp, r7
 800bf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7c:	4770      	bx	lr
	...

0800bf80 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b084      	sub	sp, #16
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	32b0      	adds	r2, #176	; 0xb0
 800bf92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf96:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800bf98:	2301      	movs	r3, #1
 800bf9a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d101      	bne.n	800bfa6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bfa2:	2303      	movs	r3, #3
 800bfa4:	e025      	b.n	800bff2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d11f      	bne.n	800bff0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	2201      	movs	r2, #1
 800bfb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800bfb8:	4b10      	ldr	r3, [pc, #64]	; (800bffc <USBD_CDC_TransmitPacket+0x7c>)
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	f003 020f 	and.w	r2, r3, #15
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	4613      	mov	r3, r2
 800bfca:	009b      	lsls	r3, r3, #2
 800bfcc:	4413      	add	r3, r2
 800bfce:	009b      	lsls	r3, r3, #2
 800bfd0:	4403      	add	r3, r0
 800bfd2:	3318      	adds	r3, #24
 800bfd4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800bfd6:	4b09      	ldr	r3, [pc, #36]	; (800bffc <USBD_CDC_TransmitPacket+0x7c>)
 800bfd8:	7819      	ldrb	r1, [r3, #0]
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f001 ff84 	bl	800def4 <USBD_LL_Transmit>

    ret = USBD_OK;
 800bfec:	2300      	movs	r3, #0
 800bfee:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bff0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3710      	adds	r7, #16
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}
 800bffa:	bf00      	nop
 800bffc:	2000009b 	.word	0x2000009b

0800c000 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	32b0      	adds	r2, #176	; 0xb0
 800c012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c016:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	32b0      	adds	r2, #176	; 0xb0
 800c022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d101      	bne.n	800c02e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c02a:	2303      	movs	r3, #3
 800c02c:	e018      	b.n	800c060 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	7c1b      	ldrb	r3, [r3, #16]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d10a      	bne.n	800c04c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c036:	4b0c      	ldr	r3, [pc, #48]	; (800c068 <USBD_CDC_ReceivePacket+0x68>)
 800c038:	7819      	ldrb	r1, [r3, #0]
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c040:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f001 ff76 	bl	800df36 <USBD_LL_PrepareReceive>
 800c04a:	e008      	b.n	800c05e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c04c:	4b06      	ldr	r3, [pc, #24]	; (800c068 <USBD_CDC_ReceivePacket+0x68>)
 800c04e:	7819      	ldrb	r1, [r3, #0]
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c056:	2340      	movs	r3, #64	; 0x40
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f001 ff6c 	bl	800df36 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c05e:	2300      	movs	r3, #0
}
 800c060:	4618      	mov	r0, r3
 800c062:	3710      	adds	r7, #16
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}
 800c068:	2000009c 	.word	0x2000009c

0800c06c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b086      	sub	sp, #24
 800c070:	af00      	add	r7, sp, #0
 800c072:	60f8      	str	r0, [r7, #12]
 800c074:	60b9      	str	r1, [r7, #8]
 800c076:	4613      	mov	r3, r2
 800c078:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d101      	bne.n	800c084 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c080:	2303      	movs	r3, #3
 800c082:	e01f      	b.n	800c0c4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2200      	movs	r2, #0
 800c088:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2200      	movs	r2, #0
 800c090:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	2200      	movs	r2, #0
 800c098:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d003      	beq.n	800c0aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	68ba      	ldr	r2, [r7, #8]
 800c0a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	79fa      	ldrb	r2, [r7, #7]
 800c0b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c0b8:	68f8      	ldr	r0, [r7, #12]
 800c0ba:	f001 fdcf 	bl	800dc5c <USBD_LL_Init>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c0c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3718      	adds	r7, #24
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}

0800c0cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b084      	sub	sp, #16
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d101      	bne.n	800c0e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c0e0:	2303      	movs	r3, #3
 800c0e2:	e025      	b.n	800c130 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	683a      	ldr	r2, [r7, #0]
 800c0e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	32ae      	adds	r2, #174	; 0xae
 800c0f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d00f      	beq.n	800c120 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	32ae      	adds	r2, #174	; 0xae
 800c10a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c110:	f107 020e 	add.w	r2, r7, #14
 800c114:	4610      	mov	r0, r2
 800c116:	4798      	blx	r3
 800c118:	4602      	mov	r2, r0
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c126:	1c5a      	adds	r2, r3, #1
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c12e:	2300      	movs	r3, #0
}
 800c130:	4618      	mov	r0, r3
 800c132:	3710      	adds	r7, #16
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f001 fded 	bl	800dd20 <USBD_LL_Start>
 800c146:	4603      	mov	r3, r0
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3708      	adds	r7, #8
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c150:	b480      	push	{r7}
 800c152:	b083      	sub	sp, #12
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c158:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	370c      	adds	r7, #12
 800c15e:	46bd      	mov	sp, r7
 800c160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c164:	4770      	bx	lr

0800c166 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c166:	b580      	push	{r7, lr}
 800c168:	b084      	sub	sp, #16
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
 800c16e:	460b      	mov	r3, r1
 800c170:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c172:	2300      	movs	r3, #0
 800c174:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d009      	beq.n	800c194 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	78fa      	ldrb	r2, [r7, #3]
 800c18a:	4611      	mov	r1, r2
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	4798      	blx	r3
 800c190:	4603      	mov	r3, r0
 800c192:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c194:	7bfb      	ldrb	r3, [r7, #15]
}
 800c196:	4618      	mov	r0, r3
 800c198:	3710      	adds	r7, #16
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}

0800c19e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c19e:	b580      	push	{r7, lr}
 800c1a0:	b084      	sub	sp, #16
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	6078      	str	r0, [r7, #4]
 800c1a6:	460b      	mov	r3, r1
 800c1a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1b4:	685b      	ldr	r3, [r3, #4]
 800c1b6:	78fa      	ldrb	r2, [r7, #3]
 800c1b8:	4611      	mov	r1, r2
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	4798      	blx	r3
 800c1be:	4603      	mov	r3, r0
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d001      	beq.n	800c1c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c1c4:	2303      	movs	r3, #3
 800c1c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c1c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3710      	adds	r7, #16
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}

0800c1d2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c1d2:	b580      	push	{r7, lr}
 800c1d4:	b084      	sub	sp, #16
 800c1d6:	af00      	add	r7, sp, #0
 800c1d8:	6078      	str	r0, [r7, #4]
 800c1da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c1e2:	6839      	ldr	r1, [r7, #0]
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f001 f8a6 	bl	800d336 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2201      	movs	r2, #1
 800c1ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c206:	f003 031f 	and.w	r3, r3, #31
 800c20a:	2b02      	cmp	r3, #2
 800c20c:	d01a      	beq.n	800c244 <USBD_LL_SetupStage+0x72>
 800c20e:	2b02      	cmp	r3, #2
 800c210:	d822      	bhi.n	800c258 <USBD_LL_SetupStage+0x86>
 800c212:	2b00      	cmp	r3, #0
 800c214:	d002      	beq.n	800c21c <USBD_LL_SetupStage+0x4a>
 800c216:	2b01      	cmp	r3, #1
 800c218:	d00a      	beq.n	800c230 <USBD_LL_SetupStage+0x5e>
 800c21a:	e01d      	b.n	800c258 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c222:	4619      	mov	r1, r3
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f000 fad3 	bl	800c7d0 <USBD_StdDevReq>
 800c22a:	4603      	mov	r3, r0
 800c22c:	73fb      	strb	r3, [r7, #15]
      break;
 800c22e:	e020      	b.n	800c272 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c236:	4619      	mov	r1, r3
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 fb3b 	bl	800c8b4 <USBD_StdItfReq>
 800c23e:	4603      	mov	r3, r0
 800c240:	73fb      	strb	r3, [r7, #15]
      break;
 800c242:	e016      	b.n	800c272 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c24a:	4619      	mov	r1, r3
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f000 fb9d 	bl	800c98c <USBD_StdEPReq>
 800c252:	4603      	mov	r3, r0
 800c254:	73fb      	strb	r3, [r7, #15]
      break;
 800c256:	e00c      	b.n	800c272 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c25e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c262:	b2db      	uxtb	r3, r3
 800c264:	4619      	mov	r1, r3
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f001 fdba 	bl	800dde0 <USBD_LL_StallEP>
 800c26c:	4603      	mov	r3, r0
 800c26e:	73fb      	strb	r3, [r7, #15]
      break;
 800c270:	bf00      	nop
  }

  return ret;
 800c272:	7bfb      	ldrb	r3, [r7, #15]
}
 800c274:	4618      	mov	r0, r3
 800c276:	3710      	adds	r7, #16
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}

0800c27c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b086      	sub	sp, #24
 800c280:	af00      	add	r7, sp, #0
 800c282:	60f8      	str	r0, [r7, #12]
 800c284:	460b      	mov	r3, r1
 800c286:	607a      	str	r2, [r7, #4]
 800c288:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c28a:	2300      	movs	r3, #0
 800c28c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c28e:	7afb      	ldrb	r3, [r7, #11]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d16e      	bne.n	800c372 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c29a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c2a2:	2b03      	cmp	r3, #3
 800c2a4:	f040 8098 	bne.w	800c3d8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	689a      	ldr	r2, [r3, #8]
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	68db      	ldr	r3, [r3, #12]
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d913      	bls.n	800c2dc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	689a      	ldr	r2, [r3, #8]
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	68db      	ldr	r3, [r3, #12]
 800c2bc:	1ad2      	subs	r2, r2, r3
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	68da      	ldr	r2, [r3, #12]
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	689b      	ldr	r3, [r3, #8]
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	bf28      	it	cs
 800c2ce:	4613      	movcs	r3, r2
 800c2d0:	461a      	mov	r2, r3
 800c2d2:	6879      	ldr	r1, [r7, #4]
 800c2d4:	68f8      	ldr	r0, [r7, #12]
 800c2d6:	f001 f922 	bl	800d51e <USBD_CtlContinueRx>
 800c2da:	e07d      	b.n	800c3d8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c2e2:	f003 031f 	and.w	r3, r3, #31
 800c2e6:	2b02      	cmp	r3, #2
 800c2e8:	d014      	beq.n	800c314 <USBD_LL_DataOutStage+0x98>
 800c2ea:	2b02      	cmp	r3, #2
 800c2ec:	d81d      	bhi.n	800c32a <USBD_LL_DataOutStage+0xae>
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d002      	beq.n	800c2f8 <USBD_LL_DataOutStage+0x7c>
 800c2f2:	2b01      	cmp	r3, #1
 800c2f4:	d003      	beq.n	800c2fe <USBD_LL_DataOutStage+0x82>
 800c2f6:	e018      	b.n	800c32a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	75bb      	strb	r3, [r7, #22]
            break;
 800c2fc:	e018      	b.n	800c330 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c304:	b2db      	uxtb	r3, r3
 800c306:	4619      	mov	r1, r3
 800c308:	68f8      	ldr	r0, [r7, #12]
 800c30a:	f000 f9d2 	bl	800c6b2 <USBD_CoreFindIF>
 800c30e:	4603      	mov	r3, r0
 800c310:	75bb      	strb	r3, [r7, #22]
            break;
 800c312:	e00d      	b.n	800c330 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c31a:	b2db      	uxtb	r3, r3
 800c31c:	4619      	mov	r1, r3
 800c31e:	68f8      	ldr	r0, [r7, #12]
 800c320:	f000 f9d4 	bl	800c6cc <USBD_CoreFindEP>
 800c324:	4603      	mov	r3, r0
 800c326:	75bb      	strb	r3, [r7, #22]
            break;
 800c328:	e002      	b.n	800c330 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c32a:	2300      	movs	r3, #0
 800c32c:	75bb      	strb	r3, [r7, #22]
            break;
 800c32e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c330:	7dbb      	ldrb	r3, [r7, #22]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d119      	bne.n	800c36a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	2b03      	cmp	r3, #3
 800c340:	d113      	bne.n	800c36a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c342:	7dba      	ldrb	r2, [r7, #22]
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	32ae      	adds	r2, #174	; 0xae
 800c348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c34c:	691b      	ldr	r3, [r3, #16]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d00b      	beq.n	800c36a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c352:	7dba      	ldrb	r2, [r7, #22]
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c35a:	7dba      	ldrb	r2, [r7, #22]
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	32ae      	adds	r2, #174	; 0xae
 800c360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c364:	691b      	ldr	r3, [r3, #16]
 800c366:	68f8      	ldr	r0, [r7, #12]
 800c368:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c36a:	68f8      	ldr	r0, [r7, #12]
 800c36c:	f001 f8e8 	bl	800d540 <USBD_CtlSendStatus>
 800c370:	e032      	b.n	800c3d8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c372:	7afb      	ldrb	r3, [r7, #11]
 800c374:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c378:	b2db      	uxtb	r3, r3
 800c37a:	4619      	mov	r1, r3
 800c37c:	68f8      	ldr	r0, [r7, #12]
 800c37e:	f000 f9a5 	bl	800c6cc <USBD_CoreFindEP>
 800c382:	4603      	mov	r3, r0
 800c384:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c386:	7dbb      	ldrb	r3, [r7, #22]
 800c388:	2bff      	cmp	r3, #255	; 0xff
 800c38a:	d025      	beq.n	800c3d8 <USBD_LL_DataOutStage+0x15c>
 800c38c:	7dbb      	ldrb	r3, [r7, #22]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d122      	bne.n	800c3d8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c398:	b2db      	uxtb	r3, r3
 800c39a:	2b03      	cmp	r3, #3
 800c39c:	d117      	bne.n	800c3ce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c39e:	7dba      	ldrb	r2, [r7, #22]
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	32ae      	adds	r2, #174	; 0xae
 800c3a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3a8:	699b      	ldr	r3, [r3, #24]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d00f      	beq.n	800c3ce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c3ae:	7dba      	ldrb	r2, [r7, #22]
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c3b6:	7dba      	ldrb	r2, [r7, #22]
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	32ae      	adds	r2, #174	; 0xae
 800c3bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3c0:	699b      	ldr	r3, [r3, #24]
 800c3c2:	7afa      	ldrb	r2, [r7, #11]
 800c3c4:	4611      	mov	r1, r2
 800c3c6:	68f8      	ldr	r0, [r7, #12]
 800c3c8:	4798      	blx	r3
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c3ce:	7dfb      	ldrb	r3, [r7, #23]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d001      	beq.n	800c3d8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c3d4:	7dfb      	ldrb	r3, [r7, #23]
 800c3d6:	e000      	b.n	800c3da <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c3d8:	2300      	movs	r3, #0
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3718      	adds	r7, #24
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}

0800c3e2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c3e2:	b580      	push	{r7, lr}
 800c3e4:	b086      	sub	sp, #24
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	60f8      	str	r0, [r7, #12]
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	607a      	str	r2, [r7, #4]
 800c3ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c3f0:	7afb      	ldrb	r3, [r7, #11]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d16f      	bne.n	800c4d6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	3314      	adds	r3, #20
 800c3fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c402:	2b02      	cmp	r3, #2
 800c404:	d15a      	bne.n	800c4bc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	689a      	ldr	r2, [r3, #8]
 800c40a:	693b      	ldr	r3, [r7, #16]
 800c40c:	68db      	ldr	r3, [r3, #12]
 800c40e:	429a      	cmp	r2, r3
 800c410:	d914      	bls.n	800c43c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c412:	693b      	ldr	r3, [r7, #16]
 800c414:	689a      	ldr	r2, [r3, #8]
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	68db      	ldr	r3, [r3, #12]
 800c41a:	1ad2      	subs	r2, r2, r3
 800c41c:	693b      	ldr	r3, [r7, #16]
 800c41e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	689b      	ldr	r3, [r3, #8]
 800c424:	461a      	mov	r2, r3
 800c426:	6879      	ldr	r1, [r7, #4]
 800c428:	68f8      	ldr	r0, [r7, #12]
 800c42a:	f001 f84a 	bl	800d4c2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c42e:	2300      	movs	r3, #0
 800c430:	2200      	movs	r2, #0
 800c432:	2100      	movs	r1, #0
 800c434:	68f8      	ldr	r0, [r7, #12]
 800c436:	f001 fd7e 	bl	800df36 <USBD_LL_PrepareReceive>
 800c43a:	e03f      	b.n	800c4bc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	68da      	ldr	r2, [r3, #12]
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	689b      	ldr	r3, [r3, #8]
 800c444:	429a      	cmp	r2, r3
 800c446:	d11c      	bne.n	800c482 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	685a      	ldr	r2, [r3, #4]
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c450:	429a      	cmp	r2, r3
 800c452:	d316      	bcc.n	800c482 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	685a      	ldr	r2, [r3, #4]
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c45e:	429a      	cmp	r2, r3
 800c460:	d20f      	bcs.n	800c482 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c462:	2200      	movs	r2, #0
 800c464:	2100      	movs	r1, #0
 800c466:	68f8      	ldr	r0, [r7, #12]
 800c468:	f001 f82b 	bl	800d4c2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	2200      	movs	r2, #0
 800c470:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c474:	2300      	movs	r3, #0
 800c476:	2200      	movs	r2, #0
 800c478:	2100      	movs	r1, #0
 800c47a:	68f8      	ldr	r0, [r7, #12]
 800c47c:	f001 fd5b 	bl	800df36 <USBD_LL_PrepareReceive>
 800c480:	e01c      	b.n	800c4bc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c488:	b2db      	uxtb	r3, r3
 800c48a:	2b03      	cmp	r3, #3
 800c48c:	d10f      	bne.n	800c4ae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c494:	68db      	ldr	r3, [r3, #12]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d009      	beq.n	800c4ae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	2200      	movs	r2, #0
 800c49e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4a8:	68db      	ldr	r3, [r3, #12]
 800c4aa:	68f8      	ldr	r0, [r7, #12]
 800c4ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4ae:	2180      	movs	r1, #128	; 0x80
 800c4b0:	68f8      	ldr	r0, [r7, #12]
 800c4b2:	f001 fc95 	bl	800dde0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c4b6:	68f8      	ldr	r0, [r7, #12]
 800c4b8:	f001 f855 	bl	800d566 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d03a      	beq.n	800c53c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c4c6:	68f8      	ldr	r0, [r7, #12]
 800c4c8:	f7ff fe42 	bl	800c150 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c4d4:	e032      	b.n	800c53c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c4d6:	7afb      	ldrb	r3, [r7, #11]
 800c4d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	4619      	mov	r1, r3
 800c4e0:	68f8      	ldr	r0, [r7, #12]
 800c4e2:	f000 f8f3 	bl	800c6cc <USBD_CoreFindEP>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c4ea:	7dfb      	ldrb	r3, [r7, #23]
 800c4ec:	2bff      	cmp	r3, #255	; 0xff
 800c4ee:	d025      	beq.n	800c53c <USBD_LL_DataInStage+0x15a>
 800c4f0:	7dfb      	ldrb	r3, [r7, #23]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d122      	bne.n	800c53c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	2b03      	cmp	r3, #3
 800c500:	d11c      	bne.n	800c53c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c502:	7dfa      	ldrb	r2, [r7, #23]
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	32ae      	adds	r2, #174	; 0xae
 800c508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c50c:	695b      	ldr	r3, [r3, #20]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d014      	beq.n	800c53c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c512:	7dfa      	ldrb	r2, [r7, #23]
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c51a:	7dfa      	ldrb	r2, [r7, #23]
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	32ae      	adds	r2, #174	; 0xae
 800c520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c524:	695b      	ldr	r3, [r3, #20]
 800c526:	7afa      	ldrb	r2, [r7, #11]
 800c528:	4611      	mov	r1, r2
 800c52a:	68f8      	ldr	r0, [r7, #12]
 800c52c:	4798      	blx	r3
 800c52e:	4603      	mov	r3, r0
 800c530:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c532:	7dbb      	ldrb	r3, [r7, #22]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d001      	beq.n	800c53c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c538:	7dbb      	ldrb	r3, [r7, #22]
 800c53a:	e000      	b.n	800c53e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c53c:	2300      	movs	r3, #0
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3718      	adds	r7, #24
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}

0800c546 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c546:	b580      	push	{r7, lr}
 800c548:	b084      	sub	sp, #16
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c54e:	2300      	movs	r3, #0
 800c550:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2201      	movs	r2, #1
 800c556:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2200      	movs	r2, #0
 800c55e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2200      	movs	r2, #0
 800c566:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2200      	movs	r2, #0
 800c56c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2200      	movs	r2, #0
 800c574:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d014      	beq.n	800c5ac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c588:	685b      	ldr	r3, [r3, #4]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d00e      	beq.n	800c5ac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c594:	685b      	ldr	r3, [r3, #4]
 800c596:	687a      	ldr	r2, [r7, #4]
 800c598:	6852      	ldr	r2, [r2, #4]
 800c59a:	b2d2      	uxtb	r2, r2
 800c59c:	4611      	mov	r1, r2
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	4798      	blx	r3
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d001      	beq.n	800c5ac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c5a8:	2303      	movs	r3, #3
 800c5aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c5ac:	2340      	movs	r3, #64	; 0x40
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	2100      	movs	r1, #0
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f001 fbcf 	bl	800dd56 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2240      	movs	r2, #64	; 0x40
 800c5c4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c5c8:	2340      	movs	r3, #64	; 0x40
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	2180      	movs	r1, #128	; 0x80
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f001 fbc1 	bl	800dd56 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2240      	movs	r2, #64	; 0x40
 800c5de:	621a      	str	r2, [r3, #32]

  return ret;
 800c5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3710      	adds	r7, #16
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}

0800c5ea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c5ea:	b480      	push	{r7}
 800c5ec:	b083      	sub	sp, #12
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
 800c5f2:	460b      	mov	r3, r1
 800c5f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	78fa      	ldrb	r2, [r7, #3]
 800c5fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c5fc:	2300      	movs	r3, #0
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	370c      	adds	r7, #12
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr

0800c60a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c60a:	b480      	push	{r7}
 800c60c:	b083      	sub	sp, #12
 800c60e:	af00      	add	r7, sp, #0
 800c610:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	2b04      	cmp	r3, #4
 800c61c:	d006      	beq.n	800c62c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c624:	b2da      	uxtb	r2, r3
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2204      	movs	r2, #4
 800c630:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c634:	2300      	movs	r3, #0
}
 800c636:	4618      	mov	r0, r3
 800c638:	370c      	adds	r7, #12
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr

0800c642 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c642:	b480      	push	{r7}
 800c644:	b083      	sub	sp, #12
 800c646:	af00      	add	r7, sp, #0
 800c648:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c650:	b2db      	uxtb	r3, r3
 800c652:	2b04      	cmp	r3, #4
 800c654:	d106      	bne.n	800c664 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c65c:	b2da      	uxtb	r2, r3
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c664:	2300      	movs	r3, #0
}
 800c666:	4618      	mov	r0, r3
 800c668:	370c      	adds	r7, #12
 800c66a:	46bd      	mov	sp, r7
 800c66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c670:	4770      	bx	lr

0800c672 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c672:	b580      	push	{r7, lr}
 800c674:	b082      	sub	sp, #8
 800c676:	af00      	add	r7, sp, #0
 800c678:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c680:	b2db      	uxtb	r3, r3
 800c682:	2b03      	cmp	r3, #3
 800c684:	d110      	bne.n	800c6a8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d00b      	beq.n	800c6a8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c696:	69db      	ldr	r3, [r3, #28]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d005      	beq.n	800c6a8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6a2:	69db      	ldr	r3, [r3, #28]
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c6a8:	2300      	movs	r3, #0
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3708      	adds	r7, #8
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}

0800c6b2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c6b2:	b480      	push	{r7}
 800c6b4:	b083      	sub	sp, #12
 800c6b6:	af00      	add	r7, sp, #0
 800c6b8:	6078      	str	r0, [r7, #4]
 800c6ba:	460b      	mov	r3, r1
 800c6bc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c6be:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	370c      	adds	r7, #12
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ca:	4770      	bx	lr

0800c6cc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b083      	sub	sp, #12
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	460b      	mov	r3, r1
 800c6d6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c6d8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	370c      	adds	r7, #12
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr

0800c6e6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c6e6:	b580      	push	{r7, lr}
 800c6e8:	b086      	sub	sp, #24
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	6078      	str	r0, [r7, #4]
 800c6ee:	460b      	mov	r3, r1
 800c6f0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	885b      	ldrh	r3, [r3, #2]
 800c702:	b29a      	uxth	r2, r3
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	b29b      	uxth	r3, r3
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d920      	bls.n	800c750 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	b29b      	uxth	r3, r3
 800c714:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c716:	e013      	b.n	800c740 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c718:	f107 030a 	add.w	r3, r7, #10
 800c71c:	4619      	mov	r1, r3
 800c71e:	6978      	ldr	r0, [r7, #20]
 800c720:	f000 f81b 	bl	800c75a <USBD_GetNextDesc>
 800c724:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	785b      	ldrb	r3, [r3, #1]
 800c72a:	2b05      	cmp	r3, #5
 800c72c:	d108      	bne.n	800c740 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	789b      	ldrb	r3, [r3, #2]
 800c736:	78fa      	ldrb	r2, [r7, #3]
 800c738:	429a      	cmp	r2, r3
 800c73a:	d008      	beq.n	800c74e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c73c:	2300      	movs	r3, #0
 800c73e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	885b      	ldrh	r3, [r3, #2]
 800c744:	b29a      	uxth	r2, r3
 800c746:	897b      	ldrh	r3, [r7, #10]
 800c748:	429a      	cmp	r2, r3
 800c74a:	d8e5      	bhi.n	800c718 <USBD_GetEpDesc+0x32>
 800c74c:	e000      	b.n	800c750 <USBD_GetEpDesc+0x6a>
          break;
 800c74e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c750:	693b      	ldr	r3, [r7, #16]
}
 800c752:	4618      	mov	r0, r3
 800c754:	3718      	adds	r7, #24
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}

0800c75a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c75a:	b480      	push	{r7}
 800c75c:	b085      	sub	sp, #20
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
 800c762:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	881a      	ldrh	r2, [r3, #0]
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	781b      	ldrb	r3, [r3, #0]
 800c770:	b29b      	uxth	r3, r3
 800c772:	4413      	add	r3, r2
 800c774:	b29a      	uxth	r2, r3
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	461a      	mov	r2, r3
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	4413      	add	r3, r2
 800c784:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c786:	68fb      	ldr	r3, [r7, #12]
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3714      	adds	r7, #20
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr

0800c794 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c794:	b480      	push	{r7}
 800c796:	b087      	sub	sp, #28
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	3301      	adds	r3, #1
 800c7aa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	781b      	ldrb	r3, [r3, #0]
 800c7b0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c7b2:	8a3b      	ldrh	r3, [r7, #16]
 800c7b4:	021b      	lsls	r3, r3, #8
 800c7b6:	b21a      	sxth	r2, r3
 800c7b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c7bc:	4313      	orrs	r3, r2
 800c7be:	b21b      	sxth	r3, r3
 800c7c0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c7c2:	89fb      	ldrh	r3, [r7, #14]
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	371c      	adds	r7, #28
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ce:	4770      	bx	lr

0800c7d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b084      	sub	sp, #16
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	781b      	ldrb	r3, [r3, #0]
 800c7e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c7e6:	2b40      	cmp	r3, #64	; 0x40
 800c7e8:	d005      	beq.n	800c7f6 <USBD_StdDevReq+0x26>
 800c7ea:	2b40      	cmp	r3, #64	; 0x40
 800c7ec:	d857      	bhi.n	800c89e <USBD_StdDevReq+0xce>
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d00f      	beq.n	800c812 <USBD_StdDevReq+0x42>
 800c7f2:	2b20      	cmp	r3, #32
 800c7f4:	d153      	bne.n	800c89e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	32ae      	adds	r2, #174	; 0xae
 800c800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c804:	689b      	ldr	r3, [r3, #8]
 800c806:	6839      	ldr	r1, [r7, #0]
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	4798      	blx	r3
 800c80c:	4603      	mov	r3, r0
 800c80e:	73fb      	strb	r3, [r7, #15]
      break;
 800c810:	e04a      	b.n	800c8a8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	785b      	ldrb	r3, [r3, #1]
 800c816:	2b09      	cmp	r3, #9
 800c818:	d83b      	bhi.n	800c892 <USBD_StdDevReq+0xc2>
 800c81a:	a201      	add	r2, pc, #4	; (adr r2, 800c820 <USBD_StdDevReq+0x50>)
 800c81c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c820:	0800c875 	.word	0x0800c875
 800c824:	0800c889 	.word	0x0800c889
 800c828:	0800c893 	.word	0x0800c893
 800c82c:	0800c87f 	.word	0x0800c87f
 800c830:	0800c893 	.word	0x0800c893
 800c834:	0800c853 	.word	0x0800c853
 800c838:	0800c849 	.word	0x0800c849
 800c83c:	0800c893 	.word	0x0800c893
 800c840:	0800c86b 	.word	0x0800c86b
 800c844:	0800c85d 	.word	0x0800c85d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c848:	6839      	ldr	r1, [r7, #0]
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f000 fa3c 	bl	800ccc8 <USBD_GetDescriptor>
          break;
 800c850:	e024      	b.n	800c89c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c852:	6839      	ldr	r1, [r7, #0]
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 fbcb 	bl	800cff0 <USBD_SetAddress>
          break;
 800c85a:	e01f      	b.n	800c89c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c85c:	6839      	ldr	r1, [r7, #0]
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f000 fc0a 	bl	800d078 <USBD_SetConfig>
 800c864:	4603      	mov	r3, r0
 800c866:	73fb      	strb	r3, [r7, #15]
          break;
 800c868:	e018      	b.n	800c89c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c86a:	6839      	ldr	r1, [r7, #0]
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f000 fcad 	bl	800d1cc <USBD_GetConfig>
          break;
 800c872:	e013      	b.n	800c89c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c874:	6839      	ldr	r1, [r7, #0]
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f000 fcde 	bl	800d238 <USBD_GetStatus>
          break;
 800c87c:	e00e      	b.n	800c89c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c87e:	6839      	ldr	r1, [r7, #0]
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f000 fd0d 	bl	800d2a0 <USBD_SetFeature>
          break;
 800c886:	e009      	b.n	800c89c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c888:	6839      	ldr	r1, [r7, #0]
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f000 fd31 	bl	800d2f2 <USBD_ClrFeature>
          break;
 800c890:	e004      	b.n	800c89c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c892:	6839      	ldr	r1, [r7, #0]
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f000 fd88 	bl	800d3aa <USBD_CtlError>
          break;
 800c89a:	bf00      	nop
      }
      break;
 800c89c:	e004      	b.n	800c8a8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c89e:	6839      	ldr	r1, [r7, #0]
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f000 fd82 	bl	800d3aa <USBD_CtlError>
      break;
 800c8a6:	bf00      	nop
  }

  return ret;
 800c8a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3710      	adds	r7, #16
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}
 800c8b2:	bf00      	nop

0800c8b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b084      	sub	sp, #16
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c8ca:	2b40      	cmp	r3, #64	; 0x40
 800c8cc:	d005      	beq.n	800c8da <USBD_StdItfReq+0x26>
 800c8ce:	2b40      	cmp	r3, #64	; 0x40
 800c8d0:	d852      	bhi.n	800c978 <USBD_StdItfReq+0xc4>
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d001      	beq.n	800c8da <USBD_StdItfReq+0x26>
 800c8d6:	2b20      	cmp	r3, #32
 800c8d8:	d14e      	bne.n	800c978 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8e0:	b2db      	uxtb	r3, r3
 800c8e2:	3b01      	subs	r3, #1
 800c8e4:	2b02      	cmp	r3, #2
 800c8e6:	d840      	bhi.n	800c96a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	889b      	ldrh	r3, [r3, #4]
 800c8ec:	b2db      	uxtb	r3, r3
 800c8ee:	2b01      	cmp	r3, #1
 800c8f0:	d836      	bhi.n	800c960 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	889b      	ldrh	r3, [r3, #4]
 800c8f6:	b2db      	uxtb	r3, r3
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f7ff fed9 	bl	800c6b2 <USBD_CoreFindIF>
 800c900:	4603      	mov	r3, r0
 800c902:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c904:	7bbb      	ldrb	r3, [r7, #14]
 800c906:	2bff      	cmp	r3, #255	; 0xff
 800c908:	d01d      	beq.n	800c946 <USBD_StdItfReq+0x92>
 800c90a:	7bbb      	ldrb	r3, [r7, #14]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d11a      	bne.n	800c946 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c910:	7bba      	ldrb	r2, [r7, #14]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	32ae      	adds	r2, #174	; 0xae
 800c916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c91a:	689b      	ldr	r3, [r3, #8]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d00f      	beq.n	800c940 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c920:	7bba      	ldrb	r2, [r7, #14]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c928:	7bba      	ldrb	r2, [r7, #14]
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	32ae      	adds	r2, #174	; 0xae
 800c92e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c932:	689b      	ldr	r3, [r3, #8]
 800c934:	6839      	ldr	r1, [r7, #0]
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	4798      	blx	r3
 800c93a:	4603      	mov	r3, r0
 800c93c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c93e:	e004      	b.n	800c94a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c940:	2303      	movs	r3, #3
 800c942:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c944:	e001      	b.n	800c94a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c946:	2303      	movs	r3, #3
 800c948:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	88db      	ldrh	r3, [r3, #6]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d110      	bne.n	800c974 <USBD_StdItfReq+0xc0>
 800c952:	7bfb      	ldrb	r3, [r7, #15]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d10d      	bne.n	800c974 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f000 fdf1 	bl	800d540 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c95e:	e009      	b.n	800c974 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c960:	6839      	ldr	r1, [r7, #0]
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f000 fd21 	bl	800d3aa <USBD_CtlError>
          break;
 800c968:	e004      	b.n	800c974 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c96a:	6839      	ldr	r1, [r7, #0]
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f000 fd1c 	bl	800d3aa <USBD_CtlError>
          break;
 800c972:	e000      	b.n	800c976 <USBD_StdItfReq+0xc2>
          break;
 800c974:	bf00      	nop
      }
      break;
 800c976:	e004      	b.n	800c982 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c978:	6839      	ldr	r1, [r7, #0]
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f000 fd15 	bl	800d3aa <USBD_CtlError>
      break;
 800c980:	bf00      	nop
  }

  return ret;
 800c982:	7bfb      	ldrb	r3, [r7, #15]
}
 800c984:	4618      	mov	r0, r3
 800c986:	3710      	adds	r7, #16
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}

0800c98c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b084      	sub	sp, #16
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c996:	2300      	movs	r3, #0
 800c998:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	889b      	ldrh	r3, [r3, #4]
 800c99e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	781b      	ldrb	r3, [r3, #0]
 800c9a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c9a8:	2b40      	cmp	r3, #64	; 0x40
 800c9aa:	d007      	beq.n	800c9bc <USBD_StdEPReq+0x30>
 800c9ac:	2b40      	cmp	r3, #64	; 0x40
 800c9ae:	f200 817f 	bhi.w	800ccb0 <USBD_StdEPReq+0x324>
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d02a      	beq.n	800ca0c <USBD_StdEPReq+0x80>
 800c9b6:	2b20      	cmp	r3, #32
 800c9b8:	f040 817a 	bne.w	800ccb0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c9bc:	7bbb      	ldrb	r3, [r7, #14]
 800c9be:	4619      	mov	r1, r3
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f7ff fe83 	bl	800c6cc <USBD_CoreFindEP>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c9ca:	7b7b      	ldrb	r3, [r7, #13]
 800c9cc:	2bff      	cmp	r3, #255	; 0xff
 800c9ce:	f000 8174 	beq.w	800ccba <USBD_StdEPReq+0x32e>
 800c9d2:	7b7b      	ldrb	r3, [r7, #13]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	f040 8170 	bne.w	800ccba <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c9da:	7b7a      	ldrb	r2, [r7, #13]
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c9e2:	7b7a      	ldrb	r2, [r7, #13]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	32ae      	adds	r2, #174	; 0xae
 800c9e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9ec:	689b      	ldr	r3, [r3, #8]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	f000 8163 	beq.w	800ccba <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c9f4:	7b7a      	ldrb	r2, [r7, #13]
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	32ae      	adds	r2, #174	; 0xae
 800c9fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9fe:	689b      	ldr	r3, [r3, #8]
 800ca00:	6839      	ldr	r1, [r7, #0]
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	4798      	blx	r3
 800ca06:	4603      	mov	r3, r0
 800ca08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ca0a:	e156      	b.n	800ccba <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	785b      	ldrb	r3, [r3, #1]
 800ca10:	2b03      	cmp	r3, #3
 800ca12:	d008      	beq.n	800ca26 <USBD_StdEPReq+0x9a>
 800ca14:	2b03      	cmp	r3, #3
 800ca16:	f300 8145 	bgt.w	800cca4 <USBD_StdEPReq+0x318>
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	f000 809b 	beq.w	800cb56 <USBD_StdEPReq+0x1ca>
 800ca20:	2b01      	cmp	r3, #1
 800ca22:	d03c      	beq.n	800ca9e <USBD_StdEPReq+0x112>
 800ca24:	e13e      	b.n	800cca4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca2c:	b2db      	uxtb	r3, r3
 800ca2e:	2b02      	cmp	r3, #2
 800ca30:	d002      	beq.n	800ca38 <USBD_StdEPReq+0xac>
 800ca32:	2b03      	cmp	r3, #3
 800ca34:	d016      	beq.n	800ca64 <USBD_StdEPReq+0xd8>
 800ca36:	e02c      	b.n	800ca92 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca38:	7bbb      	ldrb	r3, [r7, #14]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d00d      	beq.n	800ca5a <USBD_StdEPReq+0xce>
 800ca3e:	7bbb      	ldrb	r3, [r7, #14]
 800ca40:	2b80      	cmp	r3, #128	; 0x80
 800ca42:	d00a      	beq.n	800ca5a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca44:	7bbb      	ldrb	r3, [r7, #14]
 800ca46:	4619      	mov	r1, r3
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f001 f9c9 	bl	800dde0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca4e:	2180      	movs	r1, #128	; 0x80
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f001 f9c5 	bl	800dde0 <USBD_LL_StallEP>
 800ca56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ca58:	e020      	b.n	800ca9c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ca5a:	6839      	ldr	r1, [r7, #0]
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f000 fca4 	bl	800d3aa <USBD_CtlError>
              break;
 800ca62:	e01b      	b.n	800ca9c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	885b      	ldrh	r3, [r3, #2]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d10e      	bne.n	800ca8a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ca6c:	7bbb      	ldrb	r3, [r7, #14]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d00b      	beq.n	800ca8a <USBD_StdEPReq+0xfe>
 800ca72:	7bbb      	ldrb	r3, [r7, #14]
 800ca74:	2b80      	cmp	r3, #128	; 0x80
 800ca76:	d008      	beq.n	800ca8a <USBD_StdEPReq+0xfe>
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	88db      	ldrh	r3, [r3, #6]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d104      	bne.n	800ca8a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca80:	7bbb      	ldrb	r3, [r7, #14]
 800ca82:	4619      	mov	r1, r3
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f001 f9ab 	bl	800dde0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f000 fd58 	bl	800d540 <USBD_CtlSendStatus>

              break;
 800ca90:	e004      	b.n	800ca9c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ca92:	6839      	ldr	r1, [r7, #0]
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f000 fc88 	bl	800d3aa <USBD_CtlError>
              break;
 800ca9a:	bf00      	nop
          }
          break;
 800ca9c:	e107      	b.n	800ccae <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800caa4:	b2db      	uxtb	r3, r3
 800caa6:	2b02      	cmp	r3, #2
 800caa8:	d002      	beq.n	800cab0 <USBD_StdEPReq+0x124>
 800caaa:	2b03      	cmp	r3, #3
 800caac:	d016      	beq.n	800cadc <USBD_StdEPReq+0x150>
 800caae:	e04b      	b.n	800cb48 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cab0:	7bbb      	ldrb	r3, [r7, #14]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d00d      	beq.n	800cad2 <USBD_StdEPReq+0x146>
 800cab6:	7bbb      	ldrb	r3, [r7, #14]
 800cab8:	2b80      	cmp	r3, #128	; 0x80
 800caba:	d00a      	beq.n	800cad2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cabc:	7bbb      	ldrb	r3, [r7, #14]
 800cabe:	4619      	mov	r1, r3
 800cac0:	6878      	ldr	r0, [r7, #4]
 800cac2:	f001 f98d 	bl	800dde0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cac6:	2180      	movs	r1, #128	; 0x80
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f001 f989 	bl	800dde0 <USBD_LL_StallEP>
 800cace:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cad0:	e040      	b.n	800cb54 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800cad2:	6839      	ldr	r1, [r7, #0]
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f000 fc68 	bl	800d3aa <USBD_CtlError>
              break;
 800cada:	e03b      	b.n	800cb54 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	885b      	ldrh	r3, [r3, #2]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d136      	bne.n	800cb52 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cae4:	7bbb      	ldrb	r3, [r7, #14]
 800cae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caea:	2b00      	cmp	r3, #0
 800caec:	d004      	beq.n	800caf8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800caee:	7bbb      	ldrb	r3, [r7, #14]
 800caf0:	4619      	mov	r1, r3
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f001 f993 	bl	800de1e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f000 fd21 	bl	800d540 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cafe:	7bbb      	ldrb	r3, [r7, #14]
 800cb00:	4619      	mov	r1, r3
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f7ff fde2 	bl	800c6cc <USBD_CoreFindEP>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cb0c:	7b7b      	ldrb	r3, [r7, #13]
 800cb0e:	2bff      	cmp	r3, #255	; 0xff
 800cb10:	d01f      	beq.n	800cb52 <USBD_StdEPReq+0x1c6>
 800cb12:	7b7b      	ldrb	r3, [r7, #13]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d11c      	bne.n	800cb52 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cb18:	7b7a      	ldrb	r2, [r7, #13]
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cb20:	7b7a      	ldrb	r2, [r7, #13]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	32ae      	adds	r2, #174	; 0xae
 800cb26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb2a:	689b      	ldr	r3, [r3, #8]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d010      	beq.n	800cb52 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cb30:	7b7a      	ldrb	r2, [r7, #13]
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	32ae      	adds	r2, #174	; 0xae
 800cb36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb3a:	689b      	ldr	r3, [r3, #8]
 800cb3c:	6839      	ldr	r1, [r7, #0]
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	4798      	blx	r3
 800cb42:	4603      	mov	r3, r0
 800cb44:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cb46:	e004      	b.n	800cb52 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cb48:	6839      	ldr	r1, [r7, #0]
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f000 fc2d 	bl	800d3aa <USBD_CtlError>
              break;
 800cb50:	e000      	b.n	800cb54 <USBD_StdEPReq+0x1c8>
              break;
 800cb52:	bf00      	nop
          }
          break;
 800cb54:	e0ab      	b.n	800ccae <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	2b02      	cmp	r3, #2
 800cb60:	d002      	beq.n	800cb68 <USBD_StdEPReq+0x1dc>
 800cb62:	2b03      	cmp	r3, #3
 800cb64:	d032      	beq.n	800cbcc <USBD_StdEPReq+0x240>
 800cb66:	e097      	b.n	800cc98 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb68:	7bbb      	ldrb	r3, [r7, #14]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d007      	beq.n	800cb7e <USBD_StdEPReq+0x1f2>
 800cb6e:	7bbb      	ldrb	r3, [r7, #14]
 800cb70:	2b80      	cmp	r3, #128	; 0x80
 800cb72:	d004      	beq.n	800cb7e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cb74:	6839      	ldr	r1, [r7, #0]
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f000 fc17 	bl	800d3aa <USBD_CtlError>
                break;
 800cb7c:	e091      	b.n	800cca2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	da0b      	bge.n	800cb9e <USBD_StdEPReq+0x212>
 800cb86:	7bbb      	ldrb	r3, [r7, #14]
 800cb88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cb8c:	4613      	mov	r3, r2
 800cb8e:	009b      	lsls	r3, r3, #2
 800cb90:	4413      	add	r3, r2
 800cb92:	009b      	lsls	r3, r3, #2
 800cb94:	3310      	adds	r3, #16
 800cb96:	687a      	ldr	r2, [r7, #4]
 800cb98:	4413      	add	r3, r2
 800cb9a:	3304      	adds	r3, #4
 800cb9c:	e00b      	b.n	800cbb6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cb9e:	7bbb      	ldrb	r3, [r7, #14]
 800cba0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cba4:	4613      	mov	r3, r2
 800cba6:	009b      	lsls	r3, r3, #2
 800cba8:	4413      	add	r3, r2
 800cbaa:	009b      	lsls	r3, r3, #2
 800cbac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cbb0:	687a      	ldr	r2, [r7, #4]
 800cbb2:	4413      	add	r3, r2
 800cbb4:	3304      	adds	r3, #4
 800cbb6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	2202      	movs	r2, #2
 800cbc2:	4619      	mov	r1, r3
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f000 fc61 	bl	800d48c <USBD_CtlSendData>
              break;
 800cbca:	e06a      	b.n	800cca2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cbcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	da11      	bge.n	800cbf8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cbd4:	7bbb      	ldrb	r3, [r7, #14]
 800cbd6:	f003 020f 	and.w	r2, r3, #15
 800cbda:	6879      	ldr	r1, [r7, #4]
 800cbdc:	4613      	mov	r3, r2
 800cbde:	009b      	lsls	r3, r3, #2
 800cbe0:	4413      	add	r3, r2
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	440b      	add	r3, r1
 800cbe6:	3324      	adds	r3, #36	; 0x24
 800cbe8:	881b      	ldrh	r3, [r3, #0]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d117      	bne.n	800cc1e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cbee:	6839      	ldr	r1, [r7, #0]
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f000 fbda 	bl	800d3aa <USBD_CtlError>
                  break;
 800cbf6:	e054      	b.n	800cca2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cbf8:	7bbb      	ldrb	r3, [r7, #14]
 800cbfa:	f003 020f 	and.w	r2, r3, #15
 800cbfe:	6879      	ldr	r1, [r7, #4]
 800cc00:	4613      	mov	r3, r2
 800cc02:	009b      	lsls	r3, r3, #2
 800cc04:	4413      	add	r3, r2
 800cc06:	009b      	lsls	r3, r3, #2
 800cc08:	440b      	add	r3, r1
 800cc0a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cc0e:	881b      	ldrh	r3, [r3, #0]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d104      	bne.n	800cc1e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cc14:	6839      	ldr	r1, [r7, #0]
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f000 fbc7 	bl	800d3aa <USBD_CtlError>
                  break;
 800cc1c:	e041      	b.n	800cca2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	da0b      	bge.n	800cc3e <USBD_StdEPReq+0x2b2>
 800cc26:	7bbb      	ldrb	r3, [r7, #14]
 800cc28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc2c:	4613      	mov	r3, r2
 800cc2e:	009b      	lsls	r3, r3, #2
 800cc30:	4413      	add	r3, r2
 800cc32:	009b      	lsls	r3, r3, #2
 800cc34:	3310      	adds	r3, #16
 800cc36:	687a      	ldr	r2, [r7, #4]
 800cc38:	4413      	add	r3, r2
 800cc3a:	3304      	adds	r3, #4
 800cc3c:	e00b      	b.n	800cc56 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cc3e:	7bbb      	ldrb	r3, [r7, #14]
 800cc40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc44:	4613      	mov	r3, r2
 800cc46:	009b      	lsls	r3, r3, #2
 800cc48:	4413      	add	r3, r2
 800cc4a:	009b      	lsls	r3, r3, #2
 800cc4c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cc50:	687a      	ldr	r2, [r7, #4]
 800cc52:	4413      	add	r3, r2
 800cc54:	3304      	adds	r3, #4
 800cc56:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cc58:	7bbb      	ldrb	r3, [r7, #14]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d002      	beq.n	800cc64 <USBD_StdEPReq+0x2d8>
 800cc5e:	7bbb      	ldrb	r3, [r7, #14]
 800cc60:	2b80      	cmp	r3, #128	; 0x80
 800cc62:	d103      	bne.n	800cc6c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	2200      	movs	r2, #0
 800cc68:	601a      	str	r2, [r3, #0]
 800cc6a:	e00e      	b.n	800cc8a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cc6c:	7bbb      	ldrb	r3, [r7, #14]
 800cc6e:	4619      	mov	r1, r3
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f001 f8f3 	bl	800de5c <USBD_LL_IsStallEP>
 800cc76:	4603      	mov	r3, r0
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d003      	beq.n	800cc84 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	2201      	movs	r2, #1
 800cc80:	601a      	str	r2, [r3, #0]
 800cc82:	e002      	b.n	800cc8a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	2200      	movs	r2, #0
 800cc88:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	2202      	movs	r2, #2
 800cc8e:	4619      	mov	r1, r3
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f000 fbfb 	bl	800d48c <USBD_CtlSendData>
              break;
 800cc96:	e004      	b.n	800cca2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800cc98:	6839      	ldr	r1, [r7, #0]
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f000 fb85 	bl	800d3aa <USBD_CtlError>
              break;
 800cca0:	bf00      	nop
          }
          break;
 800cca2:	e004      	b.n	800ccae <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800cca4:	6839      	ldr	r1, [r7, #0]
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f000 fb7f 	bl	800d3aa <USBD_CtlError>
          break;
 800ccac:	bf00      	nop
      }
      break;
 800ccae:	e005      	b.n	800ccbc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ccb0:	6839      	ldr	r1, [r7, #0]
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f000 fb79 	bl	800d3aa <USBD_CtlError>
      break;
 800ccb8:	e000      	b.n	800ccbc <USBD_StdEPReq+0x330>
      break;
 800ccba:	bf00      	nop
  }

  return ret;
 800ccbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3710      	adds	r7, #16
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
	...

0800ccc8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b084      	sub	sp, #16
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	885b      	ldrh	r3, [r3, #2]
 800cce2:	0a1b      	lsrs	r3, r3, #8
 800cce4:	b29b      	uxth	r3, r3
 800cce6:	3b01      	subs	r3, #1
 800cce8:	2b0e      	cmp	r3, #14
 800ccea:	f200 8152 	bhi.w	800cf92 <USBD_GetDescriptor+0x2ca>
 800ccee:	a201      	add	r2, pc, #4	; (adr r2, 800ccf4 <USBD_GetDescriptor+0x2c>)
 800ccf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccf4:	0800cd65 	.word	0x0800cd65
 800ccf8:	0800cd7d 	.word	0x0800cd7d
 800ccfc:	0800cdbd 	.word	0x0800cdbd
 800cd00:	0800cf93 	.word	0x0800cf93
 800cd04:	0800cf93 	.word	0x0800cf93
 800cd08:	0800cf33 	.word	0x0800cf33
 800cd0c:	0800cf5f 	.word	0x0800cf5f
 800cd10:	0800cf93 	.word	0x0800cf93
 800cd14:	0800cf93 	.word	0x0800cf93
 800cd18:	0800cf93 	.word	0x0800cf93
 800cd1c:	0800cf93 	.word	0x0800cf93
 800cd20:	0800cf93 	.word	0x0800cf93
 800cd24:	0800cf93 	.word	0x0800cf93
 800cd28:	0800cf93 	.word	0x0800cf93
 800cd2c:	0800cd31 	.word	0x0800cd31
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd36:	69db      	ldr	r3, [r3, #28]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d00b      	beq.n	800cd54 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd42:	69db      	ldr	r3, [r3, #28]
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	7c12      	ldrb	r2, [r2, #16]
 800cd48:	f107 0108 	add.w	r1, r7, #8
 800cd4c:	4610      	mov	r0, r2
 800cd4e:	4798      	blx	r3
 800cd50:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cd52:	e126      	b.n	800cfa2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cd54:	6839      	ldr	r1, [r7, #0]
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f000 fb27 	bl	800d3aa <USBD_CtlError>
        err++;
 800cd5c:	7afb      	ldrb	r3, [r7, #11]
 800cd5e:	3301      	adds	r3, #1
 800cd60:	72fb      	strb	r3, [r7, #11]
      break;
 800cd62:	e11e      	b.n	800cfa2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	687a      	ldr	r2, [r7, #4]
 800cd6e:	7c12      	ldrb	r2, [r2, #16]
 800cd70:	f107 0108 	add.w	r1, r7, #8
 800cd74:	4610      	mov	r0, r2
 800cd76:	4798      	blx	r3
 800cd78:	60f8      	str	r0, [r7, #12]
      break;
 800cd7a:	e112      	b.n	800cfa2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	7c1b      	ldrb	r3, [r3, #16]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d10d      	bne.n	800cda0 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd8c:	f107 0208 	add.w	r2, r7, #8
 800cd90:	4610      	mov	r0, r2
 800cd92:	4798      	blx	r3
 800cd94:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	3301      	adds	r3, #1
 800cd9a:	2202      	movs	r2, #2
 800cd9c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cd9e:	e100      	b.n	800cfa2 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda8:	f107 0208 	add.w	r2, r7, #8
 800cdac:	4610      	mov	r0, r2
 800cdae:	4798      	blx	r3
 800cdb0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	3301      	adds	r3, #1
 800cdb6:	2202      	movs	r2, #2
 800cdb8:	701a      	strb	r2, [r3, #0]
      break;
 800cdba:	e0f2      	b.n	800cfa2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	885b      	ldrh	r3, [r3, #2]
 800cdc0:	b2db      	uxtb	r3, r3
 800cdc2:	2b05      	cmp	r3, #5
 800cdc4:	f200 80ac 	bhi.w	800cf20 <USBD_GetDescriptor+0x258>
 800cdc8:	a201      	add	r2, pc, #4	; (adr r2, 800cdd0 <USBD_GetDescriptor+0x108>)
 800cdca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdce:	bf00      	nop
 800cdd0:	0800cde9 	.word	0x0800cde9
 800cdd4:	0800ce1d 	.word	0x0800ce1d
 800cdd8:	0800ce51 	.word	0x0800ce51
 800cddc:	0800ce85 	.word	0x0800ce85
 800cde0:	0800ceb9 	.word	0x0800ceb9
 800cde4:	0800ceed 	.word	0x0800ceed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdee:	685b      	ldr	r3, [r3, #4]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d00b      	beq.n	800ce0c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdfa:	685b      	ldr	r3, [r3, #4]
 800cdfc:	687a      	ldr	r2, [r7, #4]
 800cdfe:	7c12      	ldrb	r2, [r2, #16]
 800ce00:	f107 0108 	add.w	r1, r7, #8
 800ce04:	4610      	mov	r0, r2
 800ce06:	4798      	blx	r3
 800ce08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce0a:	e091      	b.n	800cf30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ce0c:	6839      	ldr	r1, [r7, #0]
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f000 facb 	bl	800d3aa <USBD_CtlError>
            err++;
 800ce14:	7afb      	ldrb	r3, [r7, #11]
 800ce16:	3301      	adds	r3, #1
 800ce18:	72fb      	strb	r3, [r7, #11]
          break;
 800ce1a:	e089      	b.n	800cf30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce22:	689b      	ldr	r3, [r3, #8]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d00b      	beq.n	800ce40 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce2e:	689b      	ldr	r3, [r3, #8]
 800ce30:	687a      	ldr	r2, [r7, #4]
 800ce32:	7c12      	ldrb	r2, [r2, #16]
 800ce34:	f107 0108 	add.w	r1, r7, #8
 800ce38:	4610      	mov	r0, r2
 800ce3a:	4798      	blx	r3
 800ce3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce3e:	e077      	b.n	800cf30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ce40:	6839      	ldr	r1, [r7, #0]
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f000 fab1 	bl	800d3aa <USBD_CtlError>
            err++;
 800ce48:	7afb      	ldrb	r3, [r7, #11]
 800ce4a:	3301      	adds	r3, #1
 800ce4c:	72fb      	strb	r3, [r7, #11]
          break;
 800ce4e:	e06f      	b.n	800cf30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce56:	68db      	ldr	r3, [r3, #12]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d00b      	beq.n	800ce74 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce62:	68db      	ldr	r3, [r3, #12]
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	7c12      	ldrb	r2, [r2, #16]
 800ce68:	f107 0108 	add.w	r1, r7, #8
 800ce6c:	4610      	mov	r0, r2
 800ce6e:	4798      	blx	r3
 800ce70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce72:	e05d      	b.n	800cf30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ce74:	6839      	ldr	r1, [r7, #0]
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f000 fa97 	bl	800d3aa <USBD_CtlError>
            err++;
 800ce7c:	7afb      	ldrb	r3, [r7, #11]
 800ce7e:	3301      	adds	r3, #1
 800ce80:	72fb      	strb	r3, [r7, #11]
          break;
 800ce82:	e055      	b.n	800cf30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce8a:	691b      	ldr	r3, [r3, #16]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d00b      	beq.n	800cea8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce96:	691b      	ldr	r3, [r3, #16]
 800ce98:	687a      	ldr	r2, [r7, #4]
 800ce9a:	7c12      	ldrb	r2, [r2, #16]
 800ce9c:	f107 0108 	add.w	r1, r7, #8
 800cea0:	4610      	mov	r0, r2
 800cea2:	4798      	blx	r3
 800cea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cea6:	e043      	b.n	800cf30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cea8:	6839      	ldr	r1, [r7, #0]
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f000 fa7d 	bl	800d3aa <USBD_CtlError>
            err++;
 800ceb0:	7afb      	ldrb	r3, [r7, #11]
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	72fb      	strb	r3, [r7, #11]
          break;
 800ceb6:	e03b      	b.n	800cf30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cebe:	695b      	ldr	r3, [r3, #20]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d00b      	beq.n	800cedc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ceca:	695b      	ldr	r3, [r3, #20]
 800cecc:	687a      	ldr	r2, [r7, #4]
 800cece:	7c12      	ldrb	r2, [r2, #16]
 800ced0:	f107 0108 	add.w	r1, r7, #8
 800ced4:	4610      	mov	r0, r2
 800ced6:	4798      	blx	r3
 800ced8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ceda:	e029      	b.n	800cf30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cedc:	6839      	ldr	r1, [r7, #0]
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f000 fa63 	bl	800d3aa <USBD_CtlError>
            err++;
 800cee4:	7afb      	ldrb	r3, [r7, #11]
 800cee6:	3301      	adds	r3, #1
 800cee8:	72fb      	strb	r3, [r7, #11]
          break;
 800ceea:	e021      	b.n	800cf30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cef2:	699b      	ldr	r3, [r3, #24]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d00b      	beq.n	800cf10 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cefe:	699b      	ldr	r3, [r3, #24]
 800cf00:	687a      	ldr	r2, [r7, #4]
 800cf02:	7c12      	ldrb	r2, [r2, #16]
 800cf04:	f107 0108 	add.w	r1, r7, #8
 800cf08:	4610      	mov	r0, r2
 800cf0a:	4798      	blx	r3
 800cf0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf0e:	e00f      	b.n	800cf30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cf10:	6839      	ldr	r1, [r7, #0]
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f000 fa49 	bl	800d3aa <USBD_CtlError>
            err++;
 800cf18:	7afb      	ldrb	r3, [r7, #11]
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	72fb      	strb	r3, [r7, #11]
          break;
 800cf1e:	e007      	b.n	800cf30 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cf20:	6839      	ldr	r1, [r7, #0]
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f000 fa41 	bl	800d3aa <USBD_CtlError>
          err++;
 800cf28:	7afb      	ldrb	r3, [r7, #11]
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800cf2e:	bf00      	nop
      }
      break;
 800cf30:	e037      	b.n	800cfa2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	7c1b      	ldrb	r3, [r3, #16]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d109      	bne.n	800cf4e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf42:	f107 0208 	add.w	r2, r7, #8
 800cf46:	4610      	mov	r0, r2
 800cf48:	4798      	blx	r3
 800cf4a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cf4c:	e029      	b.n	800cfa2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cf4e:	6839      	ldr	r1, [r7, #0]
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f000 fa2a 	bl	800d3aa <USBD_CtlError>
        err++;
 800cf56:	7afb      	ldrb	r3, [r7, #11]
 800cf58:	3301      	adds	r3, #1
 800cf5a:	72fb      	strb	r3, [r7, #11]
      break;
 800cf5c:	e021      	b.n	800cfa2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	7c1b      	ldrb	r3, [r3, #16]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d10d      	bne.n	800cf82 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf6e:	f107 0208 	add.w	r2, r7, #8
 800cf72:	4610      	mov	r0, r2
 800cf74:	4798      	blx	r3
 800cf76:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	3301      	adds	r3, #1
 800cf7c:	2207      	movs	r2, #7
 800cf7e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cf80:	e00f      	b.n	800cfa2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cf82:	6839      	ldr	r1, [r7, #0]
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f000 fa10 	bl	800d3aa <USBD_CtlError>
        err++;
 800cf8a:	7afb      	ldrb	r3, [r7, #11]
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	72fb      	strb	r3, [r7, #11]
      break;
 800cf90:	e007      	b.n	800cfa2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800cf92:	6839      	ldr	r1, [r7, #0]
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f000 fa08 	bl	800d3aa <USBD_CtlError>
      err++;
 800cf9a:	7afb      	ldrb	r3, [r7, #11]
 800cf9c:	3301      	adds	r3, #1
 800cf9e:	72fb      	strb	r3, [r7, #11]
      break;
 800cfa0:	bf00      	nop
  }

  if (err != 0U)
 800cfa2:	7afb      	ldrb	r3, [r7, #11]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d11e      	bne.n	800cfe6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	88db      	ldrh	r3, [r3, #6]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d016      	beq.n	800cfde <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800cfb0:	893b      	ldrh	r3, [r7, #8]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d00e      	beq.n	800cfd4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	88da      	ldrh	r2, [r3, #6]
 800cfba:	893b      	ldrh	r3, [r7, #8]
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	bf28      	it	cs
 800cfc0:	4613      	movcs	r3, r2
 800cfc2:	b29b      	uxth	r3, r3
 800cfc4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cfc6:	893b      	ldrh	r3, [r7, #8]
 800cfc8:	461a      	mov	r2, r3
 800cfca:	68f9      	ldr	r1, [r7, #12]
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f000 fa5d 	bl	800d48c <USBD_CtlSendData>
 800cfd2:	e009      	b.n	800cfe8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cfd4:	6839      	ldr	r1, [r7, #0]
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f000 f9e7 	bl	800d3aa <USBD_CtlError>
 800cfdc:	e004      	b.n	800cfe8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f000 faae 	bl	800d540 <USBD_CtlSendStatus>
 800cfe4:	e000      	b.n	800cfe8 <USBD_GetDescriptor+0x320>
    return;
 800cfe6:	bf00      	nop
  }
}
 800cfe8:	3710      	adds	r7, #16
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}
 800cfee:	bf00      	nop

0800cff0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b084      	sub	sp, #16
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	889b      	ldrh	r3, [r3, #4]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d131      	bne.n	800d066 <USBD_SetAddress+0x76>
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	88db      	ldrh	r3, [r3, #6]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d12d      	bne.n	800d066 <USBD_SetAddress+0x76>
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	885b      	ldrh	r3, [r3, #2]
 800d00e:	2b7f      	cmp	r3, #127	; 0x7f
 800d010:	d829      	bhi.n	800d066 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	885b      	ldrh	r3, [r3, #2]
 800d016:	b2db      	uxtb	r3, r3
 800d018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d01c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d024:	b2db      	uxtb	r3, r3
 800d026:	2b03      	cmp	r3, #3
 800d028:	d104      	bne.n	800d034 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d02a:	6839      	ldr	r1, [r7, #0]
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f000 f9bc 	bl	800d3aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d032:	e01d      	b.n	800d070 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	7bfa      	ldrb	r2, [r7, #15]
 800d038:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d03c:	7bfb      	ldrb	r3, [r7, #15]
 800d03e:	4619      	mov	r1, r3
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f000 ff38 	bl	800deb6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f000 fa7a 	bl	800d540 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d04c:	7bfb      	ldrb	r3, [r7, #15]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d004      	beq.n	800d05c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2202      	movs	r2, #2
 800d056:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d05a:	e009      	b.n	800d070 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2201      	movs	r2, #1
 800d060:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d064:	e004      	b.n	800d070 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d066:	6839      	ldr	r1, [r7, #0]
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	f000 f99e 	bl	800d3aa <USBD_CtlError>
  }
}
 800d06e:	bf00      	nop
 800d070:	bf00      	nop
 800d072:	3710      	adds	r7, #16
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b084      	sub	sp, #16
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
 800d080:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d082:	2300      	movs	r3, #0
 800d084:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	885b      	ldrh	r3, [r3, #2]
 800d08a:	b2da      	uxtb	r2, r3
 800d08c:	4b4e      	ldr	r3, [pc, #312]	; (800d1c8 <USBD_SetConfig+0x150>)
 800d08e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d090:	4b4d      	ldr	r3, [pc, #308]	; (800d1c8 <USBD_SetConfig+0x150>)
 800d092:	781b      	ldrb	r3, [r3, #0]
 800d094:	2b01      	cmp	r3, #1
 800d096:	d905      	bls.n	800d0a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d098:	6839      	ldr	r1, [r7, #0]
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f000 f985 	bl	800d3aa <USBD_CtlError>
    return USBD_FAIL;
 800d0a0:	2303      	movs	r3, #3
 800d0a2:	e08c      	b.n	800d1be <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0aa:	b2db      	uxtb	r3, r3
 800d0ac:	2b02      	cmp	r3, #2
 800d0ae:	d002      	beq.n	800d0b6 <USBD_SetConfig+0x3e>
 800d0b0:	2b03      	cmp	r3, #3
 800d0b2:	d029      	beq.n	800d108 <USBD_SetConfig+0x90>
 800d0b4:	e075      	b.n	800d1a2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d0b6:	4b44      	ldr	r3, [pc, #272]	; (800d1c8 <USBD_SetConfig+0x150>)
 800d0b8:	781b      	ldrb	r3, [r3, #0]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d020      	beq.n	800d100 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d0be:	4b42      	ldr	r3, [pc, #264]	; (800d1c8 <USBD_SetConfig+0x150>)
 800d0c0:	781b      	ldrb	r3, [r3, #0]
 800d0c2:	461a      	mov	r2, r3
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d0c8:	4b3f      	ldr	r3, [pc, #252]	; (800d1c8 <USBD_SetConfig+0x150>)
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	4619      	mov	r1, r3
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f7ff f849 	bl	800c166 <USBD_SetClassConfig>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d0d8:	7bfb      	ldrb	r3, [r7, #15]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d008      	beq.n	800d0f0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d0de:	6839      	ldr	r1, [r7, #0]
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f000 f962 	bl	800d3aa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	2202      	movs	r2, #2
 800d0ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d0ee:	e065      	b.n	800d1bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f000 fa25 	bl	800d540 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2203      	movs	r2, #3
 800d0fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d0fe:	e05d      	b.n	800d1bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f000 fa1d 	bl	800d540 <USBD_CtlSendStatus>
      break;
 800d106:	e059      	b.n	800d1bc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d108:	4b2f      	ldr	r3, [pc, #188]	; (800d1c8 <USBD_SetConfig+0x150>)
 800d10a:	781b      	ldrb	r3, [r3, #0]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d112      	bne.n	800d136 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2202      	movs	r2, #2
 800d114:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d118:	4b2b      	ldr	r3, [pc, #172]	; (800d1c8 <USBD_SetConfig+0x150>)
 800d11a:	781b      	ldrb	r3, [r3, #0]
 800d11c:	461a      	mov	r2, r3
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d122:	4b29      	ldr	r3, [pc, #164]	; (800d1c8 <USBD_SetConfig+0x150>)
 800d124:	781b      	ldrb	r3, [r3, #0]
 800d126:	4619      	mov	r1, r3
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f7ff f838 	bl	800c19e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f000 fa06 	bl	800d540 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d134:	e042      	b.n	800d1bc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d136:	4b24      	ldr	r3, [pc, #144]	; (800d1c8 <USBD_SetConfig+0x150>)
 800d138:	781b      	ldrb	r3, [r3, #0]
 800d13a:	461a      	mov	r2, r3
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	429a      	cmp	r2, r3
 800d142:	d02a      	beq.n	800d19a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	685b      	ldr	r3, [r3, #4]
 800d148:	b2db      	uxtb	r3, r3
 800d14a:	4619      	mov	r1, r3
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f7ff f826 	bl	800c19e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d152:	4b1d      	ldr	r3, [pc, #116]	; (800d1c8 <USBD_SetConfig+0x150>)
 800d154:	781b      	ldrb	r3, [r3, #0]
 800d156:	461a      	mov	r2, r3
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d15c:	4b1a      	ldr	r3, [pc, #104]	; (800d1c8 <USBD_SetConfig+0x150>)
 800d15e:	781b      	ldrb	r3, [r3, #0]
 800d160:	4619      	mov	r1, r3
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f7fe ffff 	bl	800c166 <USBD_SetClassConfig>
 800d168:	4603      	mov	r3, r0
 800d16a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d16c:	7bfb      	ldrb	r3, [r7, #15]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d00f      	beq.n	800d192 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d172:	6839      	ldr	r1, [r7, #0]
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	f000 f918 	bl	800d3aa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	685b      	ldr	r3, [r3, #4]
 800d17e:	b2db      	uxtb	r3, r3
 800d180:	4619      	mov	r1, r3
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f7ff f80b 	bl	800c19e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2202      	movs	r2, #2
 800d18c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d190:	e014      	b.n	800d1bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f000 f9d4 	bl	800d540 <USBD_CtlSendStatus>
      break;
 800d198:	e010      	b.n	800d1bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f000 f9d0 	bl	800d540 <USBD_CtlSendStatus>
      break;
 800d1a0:	e00c      	b.n	800d1bc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d1a2:	6839      	ldr	r1, [r7, #0]
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f000 f900 	bl	800d3aa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d1aa:	4b07      	ldr	r3, [pc, #28]	; (800d1c8 <USBD_SetConfig+0x150>)
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f7fe fff4 	bl	800c19e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d1b6:	2303      	movs	r3, #3
 800d1b8:	73fb      	strb	r3, [r7, #15]
      break;
 800d1ba:	bf00      	nop
  }

  return ret;
 800d1bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3710      	adds	r7, #16
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	20003d50 	.word	0x20003d50

0800d1cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b082      	sub	sp, #8
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	88db      	ldrh	r3, [r3, #6]
 800d1da:	2b01      	cmp	r3, #1
 800d1dc:	d004      	beq.n	800d1e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d1de:	6839      	ldr	r1, [r7, #0]
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 f8e2 	bl	800d3aa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d1e6:	e023      	b.n	800d230 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1ee:	b2db      	uxtb	r3, r3
 800d1f0:	2b02      	cmp	r3, #2
 800d1f2:	dc02      	bgt.n	800d1fa <USBD_GetConfig+0x2e>
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	dc03      	bgt.n	800d200 <USBD_GetConfig+0x34>
 800d1f8:	e015      	b.n	800d226 <USBD_GetConfig+0x5a>
 800d1fa:	2b03      	cmp	r3, #3
 800d1fc:	d00b      	beq.n	800d216 <USBD_GetConfig+0x4a>
 800d1fe:	e012      	b.n	800d226 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2200      	movs	r2, #0
 800d204:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	3308      	adds	r3, #8
 800d20a:	2201      	movs	r2, #1
 800d20c:	4619      	mov	r1, r3
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f000 f93c 	bl	800d48c <USBD_CtlSendData>
        break;
 800d214:	e00c      	b.n	800d230 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	3304      	adds	r3, #4
 800d21a:	2201      	movs	r2, #1
 800d21c:	4619      	mov	r1, r3
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f000 f934 	bl	800d48c <USBD_CtlSendData>
        break;
 800d224:	e004      	b.n	800d230 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d226:	6839      	ldr	r1, [r7, #0]
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f000 f8be 	bl	800d3aa <USBD_CtlError>
        break;
 800d22e:	bf00      	nop
}
 800d230:	bf00      	nop
 800d232:	3708      	adds	r7, #8
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}

0800d238 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b082      	sub	sp, #8
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d248:	b2db      	uxtb	r3, r3
 800d24a:	3b01      	subs	r3, #1
 800d24c:	2b02      	cmp	r3, #2
 800d24e:	d81e      	bhi.n	800d28e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	88db      	ldrh	r3, [r3, #6]
 800d254:	2b02      	cmp	r3, #2
 800d256:	d004      	beq.n	800d262 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d258:	6839      	ldr	r1, [r7, #0]
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f000 f8a5 	bl	800d3aa <USBD_CtlError>
        break;
 800d260:	e01a      	b.n	800d298 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2201      	movs	r2, #1
 800d266:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d005      	beq.n	800d27e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	68db      	ldr	r3, [r3, #12]
 800d276:	f043 0202 	orr.w	r2, r3, #2
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	330c      	adds	r3, #12
 800d282:	2202      	movs	r2, #2
 800d284:	4619      	mov	r1, r3
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f000 f900 	bl	800d48c <USBD_CtlSendData>
      break;
 800d28c:	e004      	b.n	800d298 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d28e:	6839      	ldr	r1, [r7, #0]
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	f000 f88a 	bl	800d3aa <USBD_CtlError>
      break;
 800d296:	bf00      	nop
  }
}
 800d298:	bf00      	nop
 800d29a:	3708      	adds	r7, #8
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}

0800d2a0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b082      	sub	sp, #8
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	885b      	ldrh	r3, [r3, #2]
 800d2ae:	2b01      	cmp	r3, #1
 800d2b0:	d107      	bne.n	800d2c2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2201      	movs	r2, #1
 800d2b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f000 f940 	bl	800d540 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d2c0:	e013      	b.n	800d2ea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	885b      	ldrh	r3, [r3, #2]
 800d2c6:	2b02      	cmp	r3, #2
 800d2c8:	d10b      	bne.n	800d2e2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	889b      	ldrh	r3, [r3, #4]
 800d2ce:	0a1b      	lsrs	r3, r3, #8
 800d2d0:	b29b      	uxth	r3, r3
 800d2d2:	b2da      	uxtb	r2, r3
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f000 f930 	bl	800d540 <USBD_CtlSendStatus>
}
 800d2e0:	e003      	b.n	800d2ea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d2e2:	6839      	ldr	r1, [r7, #0]
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f000 f860 	bl	800d3aa <USBD_CtlError>
}
 800d2ea:	bf00      	nop
 800d2ec:	3708      	adds	r7, #8
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}

0800d2f2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2f2:	b580      	push	{r7, lr}
 800d2f4:	b082      	sub	sp, #8
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	6078      	str	r0, [r7, #4]
 800d2fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d302:	b2db      	uxtb	r3, r3
 800d304:	3b01      	subs	r3, #1
 800d306:	2b02      	cmp	r3, #2
 800d308:	d80b      	bhi.n	800d322 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	885b      	ldrh	r3, [r3, #2]
 800d30e:	2b01      	cmp	r3, #1
 800d310:	d10c      	bne.n	800d32c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2200      	movs	r2, #0
 800d316:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f000 f910 	bl	800d540 <USBD_CtlSendStatus>
      }
      break;
 800d320:	e004      	b.n	800d32c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d322:	6839      	ldr	r1, [r7, #0]
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f000 f840 	bl	800d3aa <USBD_CtlError>
      break;
 800d32a:	e000      	b.n	800d32e <USBD_ClrFeature+0x3c>
      break;
 800d32c:	bf00      	nop
  }
}
 800d32e:	bf00      	nop
 800d330:	3708      	adds	r7, #8
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}

0800d336 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d336:	b580      	push	{r7, lr}
 800d338:	b084      	sub	sp, #16
 800d33a:	af00      	add	r7, sp, #0
 800d33c:	6078      	str	r0, [r7, #4]
 800d33e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	781a      	ldrb	r2, [r3, #0]
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	3301      	adds	r3, #1
 800d350:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	781a      	ldrb	r2, [r3, #0]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	3301      	adds	r3, #1
 800d35e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d360:	68f8      	ldr	r0, [r7, #12]
 800d362:	f7ff fa17 	bl	800c794 <SWAPBYTE>
 800d366:	4603      	mov	r3, r0
 800d368:	461a      	mov	r2, r3
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	3301      	adds	r3, #1
 800d372:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	3301      	adds	r3, #1
 800d378:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d37a:	68f8      	ldr	r0, [r7, #12]
 800d37c:	f7ff fa0a 	bl	800c794 <SWAPBYTE>
 800d380:	4603      	mov	r3, r0
 800d382:	461a      	mov	r2, r3
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	3301      	adds	r3, #1
 800d38c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	3301      	adds	r3, #1
 800d392:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d394:	68f8      	ldr	r0, [r7, #12]
 800d396:	f7ff f9fd 	bl	800c794 <SWAPBYTE>
 800d39a:	4603      	mov	r3, r0
 800d39c:	461a      	mov	r2, r3
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	80da      	strh	r2, [r3, #6]
}
 800d3a2:	bf00      	nop
 800d3a4:	3710      	adds	r7, #16
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}

0800d3aa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3aa:	b580      	push	{r7, lr}
 800d3ac:	b082      	sub	sp, #8
 800d3ae:	af00      	add	r7, sp, #0
 800d3b0:	6078      	str	r0, [r7, #4]
 800d3b2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d3b4:	2180      	movs	r1, #128	; 0x80
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f000 fd12 	bl	800dde0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d3bc:	2100      	movs	r1, #0
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f000 fd0e 	bl	800dde0 <USBD_LL_StallEP>
}
 800d3c4:	bf00      	nop
 800d3c6:	3708      	adds	r7, #8
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}

0800d3cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b086      	sub	sp, #24
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	60f8      	str	r0, [r7, #12]
 800d3d4:	60b9      	str	r1, [r7, #8]
 800d3d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d036      	beq.n	800d450 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d3e6:	6938      	ldr	r0, [r7, #16]
 800d3e8:	f000 f836 	bl	800d458 <USBD_GetLen>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	b29b      	uxth	r3, r3
 800d3f2:	005b      	lsls	r3, r3, #1
 800d3f4:	b29a      	uxth	r2, r3
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d3fa:	7dfb      	ldrb	r3, [r7, #23]
 800d3fc:	68ba      	ldr	r2, [r7, #8]
 800d3fe:	4413      	add	r3, r2
 800d400:	687a      	ldr	r2, [r7, #4]
 800d402:	7812      	ldrb	r2, [r2, #0]
 800d404:	701a      	strb	r2, [r3, #0]
  idx++;
 800d406:	7dfb      	ldrb	r3, [r7, #23]
 800d408:	3301      	adds	r3, #1
 800d40a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d40c:	7dfb      	ldrb	r3, [r7, #23]
 800d40e:	68ba      	ldr	r2, [r7, #8]
 800d410:	4413      	add	r3, r2
 800d412:	2203      	movs	r2, #3
 800d414:	701a      	strb	r2, [r3, #0]
  idx++;
 800d416:	7dfb      	ldrb	r3, [r7, #23]
 800d418:	3301      	adds	r3, #1
 800d41a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d41c:	e013      	b.n	800d446 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d41e:	7dfb      	ldrb	r3, [r7, #23]
 800d420:	68ba      	ldr	r2, [r7, #8]
 800d422:	4413      	add	r3, r2
 800d424:	693a      	ldr	r2, [r7, #16]
 800d426:	7812      	ldrb	r2, [r2, #0]
 800d428:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	3301      	adds	r3, #1
 800d42e:	613b      	str	r3, [r7, #16]
    idx++;
 800d430:	7dfb      	ldrb	r3, [r7, #23]
 800d432:	3301      	adds	r3, #1
 800d434:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d436:	7dfb      	ldrb	r3, [r7, #23]
 800d438:	68ba      	ldr	r2, [r7, #8]
 800d43a:	4413      	add	r3, r2
 800d43c:	2200      	movs	r2, #0
 800d43e:	701a      	strb	r2, [r3, #0]
    idx++;
 800d440:	7dfb      	ldrb	r3, [r7, #23]
 800d442:	3301      	adds	r3, #1
 800d444:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d446:	693b      	ldr	r3, [r7, #16]
 800d448:	781b      	ldrb	r3, [r3, #0]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d1e7      	bne.n	800d41e <USBD_GetString+0x52>
 800d44e:	e000      	b.n	800d452 <USBD_GetString+0x86>
    return;
 800d450:	bf00      	nop
  }
}
 800d452:	3718      	adds	r7, #24
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}

0800d458 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d458:	b480      	push	{r7}
 800d45a:	b085      	sub	sp, #20
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d460:	2300      	movs	r3, #0
 800d462:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d468:	e005      	b.n	800d476 <USBD_GetLen+0x1e>
  {
    len++;
 800d46a:	7bfb      	ldrb	r3, [r7, #15]
 800d46c:	3301      	adds	r3, #1
 800d46e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	3301      	adds	r3, #1
 800d474:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	781b      	ldrb	r3, [r3, #0]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d1f5      	bne.n	800d46a <USBD_GetLen+0x12>
  }

  return len;
 800d47e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d480:	4618      	mov	r0, r3
 800d482:	3714      	adds	r7, #20
 800d484:	46bd      	mov	sp, r7
 800d486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48a:	4770      	bx	lr

0800d48c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b084      	sub	sp, #16
 800d490:	af00      	add	r7, sp, #0
 800d492:	60f8      	str	r0, [r7, #12]
 800d494:	60b9      	str	r1, [r7, #8]
 800d496:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	2202      	movs	r2, #2
 800d49c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	687a      	ldr	r2, [r7, #4]
 800d4a4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	687a      	ldr	r2, [r7, #4]
 800d4aa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	68ba      	ldr	r2, [r7, #8]
 800d4b0:	2100      	movs	r1, #0
 800d4b2:	68f8      	ldr	r0, [r7, #12]
 800d4b4:	f000 fd1e 	bl	800def4 <USBD_LL_Transmit>

  return USBD_OK;
 800d4b8:	2300      	movs	r3, #0
}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	3710      	adds	r7, #16
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}

0800d4c2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d4c2:	b580      	push	{r7, lr}
 800d4c4:	b084      	sub	sp, #16
 800d4c6:	af00      	add	r7, sp, #0
 800d4c8:	60f8      	str	r0, [r7, #12]
 800d4ca:	60b9      	str	r1, [r7, #8]
 800d4cc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	68ba      	ldr	r2, [r7, #8]
 800d4d2:	2100      	movs	r1, #0
 800d4d4:	68f8      	ldr	r0, [r7, #12]
 800d4d6:	f000 fd0d 	bl	800def4 <USBD_LL_Transmit>

  return USBD_OK;
 800d4da:	2300      	movs	r3, #0
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3710      	adds	r7, #16
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b084      	sub	sp, #16
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	60f8      	str	r0, [r7, #12]
 800d4ec:	60b9      	str	r1, [r7, #8]
 800d4ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	2203      	movs	r2, #3
 800d4f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	687a      	ldr	r2, [r7, #4]
 800d4fc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	687a      	ldr	r2, [r7, #4]
 800d504:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	68ba      	ldr	r2, [r7, #8]
 800d50c:	2100      	movs	r1, #0
 800d50e:	68f8      	ldr	r0, [r7, #12]
 800d510:	f000 fd11 	bl	800df36 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d514:	2300      	movs	r3, #0
}
 800d516:	4618      	mov	r0, r3
 800d518:	3710      	adds	r7, #16
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}

0800d51e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d51e:	b580      	push	{r7, lr}
 800d520:	b084      	sub	sp, #16
 800d522:	af00      	add	r7, sp, #0
 800d524:	60f8      	str	r0, [r7, #12]
 800d526:	60b9      	str	r1, [r7, #8]
 800d528:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	68ba      	ldr	r2, [r7, #8]
 800d52e:	2100      	movs	r1, #0
 800d530:	68f8      	ldr	r0, [r7, #12]
 800d532:	f000 fd00 	bl	800df36 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d536:	2300      	movs	r3, #0
}
 800d538:	4618      	mov	r0, r3
 800d53a:	3710      	adds	r7, #16
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}

0800d540 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b082      	sub	sp, #8
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2204      	movs	r2, #4
 800d54c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d550:	2300      	movs	r3, #0
 800d552:	2200      	movs	r2, #0
 800d554:	2100      	movs	r1, #0
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f000 fccc 	bl	800def4 <USBD_LL_Transmit>

  return USBD_OK;
 800d55c:	2300      	movs	r3, #0
}
 800d55e:	4618      	mov	r0, r3
 800d560:	3708      	adds	r7, #8
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}

0800d566 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d566:	b580      	push	{r7, lr}
 800d568:	b082      	sub	sp, #8
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2205      	movs	r2, #5
 800d572:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d576:	2300      	movs	r3, #0
 800d578:	2200      	movs	r2, #0
 800d57a:	2100      	movs	r1, #0
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f000 fcda 	bl	800df36 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d582:	2300      	movs	r3, #0
}
 800d584:	4618      	mov	r0, r3
 800d586:	3708      	adds	r7, #8
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}

0800d58c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800d590:	2200      	movs	r2, #0
 800d592:	4912      	ldr	r1, [pc, #72]	; (800d5dc <MX_USB_Device_Init+0x50>)
 800d594:	4812      	ldr	r0, [pc, #72]	; (800d5e0 <MX_USB_Device_Init+0x54>)
 800d596:	f7fe fd69 	bl	800c06c <USBD_Init>
 800d59a:	4603      	mov	r3, r0
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d001      	beq.n	800d5a4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800d5a0:	f7f7 f93e 	bl	8004820 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800d5a4:	490f      	ldr	r1, [pc, #60]	; (800d5e4 <MX_USB_Device_Init+0x58>)
 800d5a6:	480e      	ldr	r0, [pc, #56]	; (800d5e0 <MX_USB_Device_Init+0x54>)
 800d5a8:	f7fe fd90 	bl	800c0cc <USBD_RegisterClass>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d001      	beq.n	800d5b6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800d5b2:	f7f7 f935 	bl	8004820 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800d5b6:	490c      	ldr	r1, [pc, #48]	; (800d5e8 <MX_USB_Device_Init+0x5c>)
 800d5b8:	4809      	ldr	r0, [pc, #36]	; (800d5e0 <MX_USB_Device_Init+0x54>)
 800d5ba:	f7fe fc87 	bl	800becc <USBD_CDC_RegisterInterface>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d001      	beq.n	800d5c8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800d5c4:	f7f7 f92c 	bl	8004820 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800d5c8:	4805      	ldr	r0, [pc, #20]	; (800d5e0 <MX_USB_Device_Init+0x54>)
 800d5ca:	f7fe fdb5 	bl	800c138 <USBD_Start>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d001      	beq.n	800d5d8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800d5d4:	f7f7 f924 	bl	8004820 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800d5d8:	bf00      	nop
 800d5da:	bd80      	pop	{r7, pc}
 800d5dc:	200000bc 	.word	0x200000bc
 800d5e0:	20003d54 	.word	0x20003d54
 800d5e4:	20000020 	.word	0x20000020
 800d5e8:	200000a8 	.word	0x200000a8

0800d5ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	4905      	ldr	r1, [pc, #20]	; (800d608 <CDC_Init_FS+0x1c>)
 800d5f4:	4805      	ldr	r0, [pc, #20]	; (800d60c <CDC_Init_FS+0x20>)
 800d5f6:	f7fe fc83 	bl	800bf00 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d5fa:	4905      	ldr	r1, [pc, #20]	; (800d610 <CDC_Init_FS+0x24>)
 800d5fc:	4803      	ldr	r0, [pc, #12]	; (800d60c <CDC_Init_FS+0x20>)
 800d5fe:	f7fe fca1 	bl	800bf44 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d602:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d604:	4618      	mov	r0, r3
 800d606:	bd80      	pop	{r7, pc}
 800d608:	20004830 	.word	0x20004830
 800d60c:	20003d54 	.word	0x20003d54
 800d610:	20004030 	.word	0x20004030

0800d614 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d614:	b480      	push	{r7}
 800d616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d618:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	46bd      	mov	sp, r7
 800d61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d622:	4770      	bx	lr

0800d624 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d624:	b480      	push	{r7}
 800d626:	b083      	sub	sp, #12
 800d628:	af00      	add	r7, sp, #0
 800d62a:	4603      	mov	r3, r0
 800d62c:	6039      	str	r1, [r7, #0]
 800d62e:	71fb      	strb	r3, [r7, #7]
 800d630:	4613      	mov	r3, r2
 800d632:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d634:	79fb      	ldrb	r3, [r7, #7]
 800d636:	2b23      	cmp	r3, #35	; 0x23
 800d638:	d84a      	bhi.n	800d6d0 <CDC_Control_FS+0xac>
 800d63a:	a201      	add	r2, pc, #4	; (adr r2, 800d640 <CDC_Control_FS+0x1c>)
 800d63c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d640:	0800d6d1 	.word	0x0800d6d1
 800d644:	0800d6d1 	.word	0x0800d6d1
 800d648:	0800d6d1 	.word	0x0800d6d1
 800d64c:	0800d6d1 	.word	0x0800d6d1
 800d650:	0800d6d1 	.word	0x0800d6d1
 800d654:	0800d6d1 	.word	0x0800d6d1
 800d658:	0800d6d1 	.word	0x0800d6d1
 800d65c:	0800d6d1 	.word	0x0800d6d1
 800d660:	0800d6d1 	.word	0x0800d6d1
 800d664:	0800d6d1 	.word	0x0800d6d1
 800d668:	0800d6d1 	.word	0x0800d6d1
 800d66c:	0800d6d1 	.word	0x0800d6d1
 800d670:	0800d6d1 	.word	0x0800d6d1
 800d674:	0800d6d1 	.word	0x0800d6d1
 800d678:	0800d6d1 	.word	0x0800d6d1
 800d67c:	0800d6d1 	.word	0x0800d6d1
 800d680:	0800d6d1 	.word	0x0800d6d1
 800d684:	0800d6d1 	.word	0x0800d6d1
 800d688:	0800d6d1 	.word	0x0800d6d1
 800d68c:	0800d6d1 	.word	0x0800d6d1
 800d690:	0800d6d1 	.word	0x0800d6d1
 800d694:	0800d6d1 	.word	0x0800d6d1
 800d698:	0800d6d1 	.word	0x0800d6d1
 800d69c:	0800d6d1 	.word	0x0800d6d1
 800d6a0:	0800d6d1 	.word	0x0800d6d1
 800d6a4:	0800d6d1 	.word	0x0800d6d1
 800d6a8:	0800d6d1 	.word	0x0800d6d1
 800d6ac:	0800d6d1 	.word	0x0800d6d1
 800d6b0:	0800d6d1 	.word	0x0800d6d1
 800d6b4:	0800d6d1 	.word	0x0800d6d1
 800d6b8:	0800d6d1 	.word	0x0800d6d1
 800d6bc:	0800d6d1 	.word	0x0800d6d1
 800d6c0:	0800d6d1 	.word	0x0800d6d1
 800d6c4:	0800d6d1 	.word	0x0800d6d1
 800d6c8:	0800d6d1 	.word	0x0800d6d1
 800d6cc:	0800d6d1 	.word	0x0800d6d1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d6d0:	bf00      	nop
  }

  return (USBD_OK);
 800d6d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	370c      	adds	r7, #12
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6de:	4770      	bx	lr

0800d6e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b082      	sub	sp, #8
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	bufferFlag = 0;
 800d6ea:	4b17      	ldr	r3, [pc, #92]	; (800d748 <CDC_Receive_FS+0x68>)
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	701a      	strb	r2, [r3, #0]
  if (byteInBuffer>2047)
 800d6f0:	4b16      	ldr	r3, [pc, #88]	; (800d74c <CDC_Receive_FS+0x6c>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d6f8:	d302      	bcc.n	800d700 <CDC_Receive_FS+0x20>
  {//This is a error data loss...
	  byteInBuffer = 0;
 800d6fa:	4b14      	ldr	r3, [pc, #80]	; (800d74c <CDC_Receive_FS+0x6c>)
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	601a      	str	r2, [r3, #0]
  }
  memcpy(&UserTxBufferFS[byteInBuffer],&Buf[0], *Len);
 800d700:	4b12      	ldr	r3, [pc, #72]	; (800d74c <CDC_Receive_FS+0x6c>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	4a12      	ldr	r2, [pc, #72]	; (800d750 <CDC_Receive_FS+0x70>)
 800d706:	1898      	adds	r0, r3, r2
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	461a      	mov	r2, r3
 800d70e:	6879      	ldr	r1, [r7, #4]
 800d710:	f000 fcf4 	bl	800e0fc <memcpy>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[byteInBuffer]);
 800d714:	4b0d      	ldr	r3, [pc, #52]	; (800d74c <CDC_Receive_FS+0x6c>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	687a      	ldr	r2, [r7, #4]
 800d71a:	4413      	add	r3, r2
 800d71c:	4619      	mov	r1, r3
 800d71e:	480d      	ldr	r0, [pc, #52]	; (800d754 <CDC_Receive_FS+0x74>)
 800d720:	f7fe fc10 	bl	800bf44 <USBD_CDC_SetRxBuffer>


  byteInBuffer += *Len;
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	681a      	ldr	r2, [r3, #0]
 800d728:	4b08      	ldr	r3, [pc, #32]	; (800d74c <CDC_Receive_FS+0x6c>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	4413      	add	r3, r2
 800d72e:	4a07      	ldr	r2, [pc, #28]	; (800d74c <CDC_Receive_FS+0x6c>)
 800d730:	6013      	str	r3, [r2, #0]
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d732:	4808      	ldr	r0, [pc, #32]	; (800d754 <CDC_Receive_FS+0x74>)
 800d734:	f7fe fc64 	bl	800c000 <USBD_CDC_ReceivePacket>
	bufferFlag = 1;
 800d738:	4b03      	ldr	r3, [pc, #12]	; (800d748 <CDC_Receive_FS+0x68>)
 800d73a:	2201      	movs	r2, #1
 800d73c:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800d73e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d740:	4618      	mov	r0, r3
 800d742:	3708      	adds	r7, #8
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}
 800d748:	200000a4 	.word	0x200000a4
 800d74c:	20005030 	.word	0x20005030
 800d750:	20004830 	.word	0x20004830
 800d754:	20003d54 	.word	0x20003d54

0800d758 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b084      	sub	sp, #16
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	460b      	mov	r3, r1
 800d762:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d764:	2300      	movs	r3, #0
 800d766:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d768:	4b0d      	ldr	r3, [pc, #52]	; (800d7a0 <CDC_Transmit_FS+0x48>)
 800d76a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d76e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d776:	2b00      	cmp	r3, #0
 800d778:	d001      	beq.n	800d77e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d77a:	2301      	movs	r3, #1
 800d77c:	e00b      	b.n	800d796 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d77e:	887b      	ldrh	r3, [r7, #2]
 800d780:	461a      	mov	r2, r3
 800d782:	6879      	ldr	r1, [r7, #4]
 800d784:	4806      	ldr	r0, [pc, #24]	; (800d7a0 <CDC_Transmit_FS+0x48>)
 800d786:	f7fe fbbb 	bl	800bf00 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d78a:	4805      	ldr	r0, [pc, #20]	; (800d7a0 <CDC_Transmit_FS+0x48>)
 800d78c:	f7fe fbf8 	bl	800bf80 <USBD_CDC_TransmitPacket>
 800d790:	4603      	mov	r3, r0
 800d792:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d794:	7bfb      	ldrb	r3, [r7, #15]
}
 800d796:	4618      	mov	r0, r3
 800d798:	3710      	adds	r7, #16
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}
 800d79e:	bf00      	nop
 800d7a0:	20003d54 	.word	0x20003d54

0800d7a4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b087      	sub	sp, #28
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	60f8      	str	r0, [r7, #12]
 800d7ac:	60b9      	str	r1, [r7, #8]
 800d7ae:	4613      	mov	r3, r2
 800d7b0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d7b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	371c      	adds	r7, #28
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c4:	4770      	bx	lr
	...

0800d7c8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b083      	sub	sp, #12
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	6039      	str	r1, [r7, #0]
 800d7d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	2212      	movs	r2, #18
 800d7d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800d7da:	4b03      	ldr	r3, [pc, #12]	; (800d7e8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	370c      	adds	r7, #12
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e6:	4770      	bx	lr
 800d7e8:	200000dc 	.word	0x200000dc

0800d7ec <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7ec:	b480      	push	{r7}
 800d7ee:	b083      	sub	sp, #12
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	6039      	str	r1, [r7, #0]
 800d7f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	2204      	movs	r2, #4
 800d7fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d7fe:	4b03      	ldr	r3, [pc, #12]	; (800d80c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800d800:	4618      	mov	r0, r3
 800d802:	370c      	adds	r7, #12
 800d804:	46bd      	mov	sp, r7
 800d806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80a:	4770      	bx	lr
 800d80c:	200000f0 	.word	0x200000f0

0800d810 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b082      	sub	sp, #8
 800d814:	af00      	add	r7, sp, #0
 800d816:	4603      	mov	r3, r0
 800d818:	6039      	str	r1, [r7, #0]
 800d81a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d81c:	79fb      	ldrb	r3, [r7, #7]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d105      	bne.n	800d82e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d822:	683a      	ldr	r2, [r7, #0]
 800d824:	4907      	ldr	r1, [pc, #28]	; (800d844 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d826:	4808      	ldr	r0, [pc, #32]	; (800d848 <USBD_CDC_ProductStrDescriptor+0x38>)
 800d828:	f7ff fdd0 	bl	800d3cc <USBD_GetString>
 800d82c:	e004      	b.n	800d838 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d82e:	683a      	ldr	r2, [r7, #0]
 800d830:	4904      	ldr	r1, [pc, #16]	; (800d844 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d832:	4805      	ldr	r0, [pc, #20]	; (800d848 <USBD_CDC_ProductStrDescriptor+0x38>)
 800d834:	f7ff fdca 	bl	800d3cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800d838:	4b02      	ldr	r3, [pc, #8]	; (800d844 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3708      	adds	r7, #8
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}
 800d842:	bf00      	nop
 800d844:	20005034 	.word	0x20005034
 800d848:	08012ac0 	.word	0x08012ac0

0800d84c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b082      	sub	sp, #8
 800d850:	af00      	add	r7, sp, #0
 800d852:	4603      	mov	r3, r0
 800d854:	6039      	str	r1, [r7, #0]
 800d856:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d858:	683a      	ldr	r2, [r7, #0]
 800d85a:	4904      	ldr	r1, [pc, #16]	; (800d86c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800d85c:	4804      	ldr	r0, [pc, #16]	; (800d870 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800d85e:	f7ff fdb5 	bl	800d3cc <USBD_GetString>
  return USBD_StrDesc;
 800d862:	4b02      	ldr	r3, [pc, #8]	; (800d86c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800d864:	4618      	mov	r0, r3
 800d866:	3708      	adds	r7, #8
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}
 800d86c:	20005034 	.word	0x20005034
 800d870:	08012ad8 	.word	0x08012ad8

0800d874 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b082      	sub	sp, #8
 800d878:	af00      	add	r7, sp, #0
 800d87a:	4603      	mov	r3, r0
 800d87c:	6039      	str	r1, [r7, #0]
 800d87e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	221a      	movs	r2, #26
 800d884:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d886:	f000 f843 	bl	800d910 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800d88a:	4b02      	ldr	r3, [pc, #8]	; (800d894 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	3708      	adds	r7, #8
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}
 800d894:	200000f4 	.word	0x200000f4

0800d898 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b082      	sub	sp, #8
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	4603      	mov	r3, r0
 800d8a0:	6039      	str	r1, [r7, #0]
 800d8a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d8a4:	79fb      	ldrb	r3, [r7, #7]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d105      	bne.n	800d8b6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d8aa:	683a      	ldr	r2, [r7, #0]
 800d8ac:	4907      	ldr	r1, [pc, #28]	; (800d8cc <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d8ae:	4808      	ldr	r0, [pc, #32]	; (800d8d0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d8b0:	f7ff fd8c 	bl	800d3cc <USBD_GetString>
 800d8b4:	e004      	b.n	800d8c0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d8b6:	683a      	ldr	r2, [r7, #0]
 800d8b8:	4904      	ldr	r1, [pc, #16]	; (800d8cc <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d8ba:	4805      	ldr	r0, [pc, #20]	; (800d8d0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d8bc:	f7ff fd86 	bl	800d3cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800d8c0:	4b02      	ldr	r3, [pc, #8]	; (800d8cc <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3708      	adds	r7, #8
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}
 800d8ca:	bf00      	nop
 800d8cc:	20005034 	.word	0x20005034
 800d8d0:	08012aec 	.word	0x08012aec

0800d8d4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b082      	sub	sp, #8
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	4603      	mov	r3, r0
 800d8dc:	6039      	str	r1, [r7, #0]
 800d8de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d8e0:	79fb      	ldrb	r3, [r7, #7]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d105      	bne.n	800d8f2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d8e6:	683a      	ldr	r2, [r7, #0]
 800d8e8:	4907      	ldr	r1, [pc, #28]	; (800d908 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d8ea:	4808      	ldr	r0, [pc, #32]	; (800d90c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d8ec:	f7ff fd6e 	bl	800d3cc <USBD_GetString>
 800d8f0:	e004      	b.n	800d8fc <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d8f2:	683a      	ldr	r2, [r7, #0]
 800d8f4:	4904      	ldr	r1, [pc, #16]	; (800d908 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d8f6:	4805      	ldr	r0, [pc, #20]	; (800d90c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d8f8:	f7ff fd68 	bl	800d3cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800d8fc:	4b02      	ldr	r3, [pc, #8]	; (800d908 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	3708      	adds	r7, #8
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}
 800d906:	bf00      	nop
 800d908:	20005034 	.word	0x20005034
 800d90c:	08012af8 	.word	0x08012af8

0800d910 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b084      	sub	sp, #16
 800d914:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d916:	4b0f      	ldr	r3, [pc, #60]	; (800d954 <Get_SerialNum+0x44>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d91c:	4b0e      	ldr	r3, [pc, #56]	; (800d958 <Get_SerialNum+0x48>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d922:	4b0e      	ldr	r3, [pc, #56]	; (800d95c <Get_SerialNum+0x4c>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d928:	68fa      	ldr	r2, [r7, #12]
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	4413      	add	r3, r2
 800d92e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d009      	beq.n	800d94a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d936:	2208      	movs	r2, #8
 800d938:	4909      	ldr	r1, [pc, #36]	; (800d960 <Get_SerialNum+0x50>)
 800d93a:	68f8      	ldr	r0, [r7, #12]
 800d93c:	f000 f814 	bl	800d968 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d940:	2204      	movs	r2, #4
 800d942:	4908      	ldr	r1, [pc, #32]	; (800d964 <Get_SerialNum+0x54>)
 800d944:	68b8      	ldr	r0, [r7, #8]
 800d946:	f000 f80f 	bl	800d968 <IntToUnicode>
  }
}
 800d94a:	bf00      	nop
 800d94c:	3710      	adds	r7, #16
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}
 800d952:	bf00      	nop
 800d954:	1fff7590 	.word	0x1fff7590
 800d958:	1fff7594 	.word	0x1fff7594
 800d95c:	1fff7598 	.word	0x1fff7598
 800d960:	200000f6 	.word	0x200000f6
 800d964:	20000106 	.word	0x20000106

0800d968 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d968:	b480      	push	{r7}
 800d96a:	b087      	sub	sp, #28
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	60f8      	str	r0, [r7, #12]
 800d970:	60b9      	str	r1, [r7, #8]
 800d972:	4613      	mov	r3, r2
 800d974:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d976:	2300      	movs	r3, #0
 800d978:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d97a:	2300      	movs	r3, #0
 800d97c:	75fb      	strb	r3, [r7, #23]
 800d97e:	e027      	b.n	800d9d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	0f1b      	lsrs	r3, r3, #28
 800d984:	2b09      	cmp	r3, #9
 800d986:	d80b      	bhi.n	800d9a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	0f1b      	lsrs	r3, r3, #28
 800d98c:	b2da      	uxtb	r2, r3
 800d98e:	7dfb      	ldrb	r3, [r7, #23]
 800d990:	005b      	lsls	r3, r3, #1
 800d992:	4619      	mov	r1, r3
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	440b      	add	r3, r1
 800d998:	3230      	adds	r2, #48	; 0x30
 800d99a:	b2d2      	uxtb	r2, r2
 800d99c:	701a      	strb	r2, [r3, #0]
 800d99e:	e00a      	b.n	800d9b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	0f1b      	lsrs	r3, r3, #28
 800d9a4:	b2da      	uxtb	r2, r3
 800d9a6:	7dfb      	ldrb	r3, [r7, #23]
 800d9a8:	005b      	lsls	r3, r3, #1
 800d9aa:	4619      	mov	r1, r3
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	440b      	add	r3, r1
 800d9b0:	3237      	adds	r2, #55	; 0x37
 800d9b2:	b2d2      	uxtb	r2, r2
 800d9b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	011b      	lsls	r3, r3, #4
 800d9ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d9bc:	7dfb      	ldrb	r3, [r7, #23]
 800d9be:	005b      	lsls	r3, r3, #1
 800d9c0:	3301      	adds	r3, #1
 800d9c2:	68ba      	ldr	r2, [r7, #8]
 800d9c4:	4413      	add	r3, r2
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d9ca:	7dfb      	ldrb	r3, [r7, #23]
 800d9cc:	3301      	adds	r3, #1
 800d9ce:	75fb      	strb	r3, [r7, #23]
 800d9d0:	7dfa      	ldrb	r2, [r7, #23]
 800d9d2:	79fb      	ldrb	r3, [r7, #7]
 800d9d4:	429a      	cmp	r2, r3
 800d9d6:	d3d3      	bcc.n	800d980 <IntToUnicode+0x18>
  }
}
 800d9d8:	bf00      	nop
 800d9da:	bf00      	nop
 800d9dc:	371c      	adds	r7, #28
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e4:	4770      	bx	lr

0800d9e6 <LL_AHB2_GRP1_EnableClock>:
{
 800d9e6:	b480      	push	{r7}
 800d9e8:	b085      	sub	sp, #20
 800d9ea:	af00      	add	r7, sp, #0
 800d9ec:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800d9ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d9f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d9f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	4313      	orrs	r3, r2
 800d9fc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800d9fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800da02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	4013      	ands	r3, r2
 800da08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800da0a:	68fb      	ldr	r3, [r7, #12]
}
 800da0c:	bf00      	nop
 800da0e:	3714      	adds	r7, #20
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr

0800da18 <LL_APB1_GRP1_EnableClock>:
{
 800da18:	b480      	push	{r7}
 800da1a:	b085      	sub	sp, #20
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800da20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800da24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800da26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	4313      	orrs	r3, r2
 800da2e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800da30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800da34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	4013      	ands	r3, r2
 800da3a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800da3c:	68fb      	ldr	r3, [r7, #12]
}
 800da3e:	bf00      	nop
 800da40:	3714      	adds	r7, #20
 800da42:	46bd      	mov	sp, r7
 800da44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da48:	4770      	bx	lr
	...

0800da4c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b09c      	sub	sp, #112	; 0x70
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800da54:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800da58:	2200      	movs	r2, #0
 800da5a:	601a      	str	r2, [r3, #0]
 800da5c:	605a      	str	r2, [r3, #4]
 800da5e:	609a      	str	r2, [r3, #8]
 800da60:	60da      	str	r2, [r3, #12]
 800da62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800da64:	f107 030c 	add.w	r3, r7, #12
 800da68:	2250      	movs	r2, #80	; 0x50
 800da6a:	2100      	movs	r1, #0
 800da6c:	4618      	mov	r0, r3
 800da6e:	f000 fb53 	bl	800e118 <memset>
  if(pcdHandle->Instance==USB)
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	4a23      	ldr	r2, [pc, #140]	; (800db04 <HAL_PCD_MspInit+0xb8>)
 800da78:	4293      	cmp	r3, r2
 800da7a:	d13e      	bne.n	800dafa <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800da7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da80:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800da82:	2318      	movs	r3, #24
 800da84:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800da86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800da8a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800da8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800da90:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800da92:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800da96:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800da98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800da9c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800da9e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800daa2:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800daa4:	f107 030c 	add.w	r3, r7, #12
 800daa8:	4618      	mov	r0, r3
 800daaa:	f7fa fd95 	bl	80085d8 <HAL_RCCEx_PeriphCLKConfig>
 800daae:	4603      	mov	r3, r0
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d001      	beq.n	800dab8 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800dab4:	f7f6 feb4 	bl	8004820 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dab8:	2001      	movs	r0, #1
 800daba:	f7ff ff94 	bl	800d9e6 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800dabe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800dac2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dac4:	2302      	movs	r3, #2
 800dac6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dac8:	2300      	movs	r3, #0
 800daca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dacc:	2300      	movs	r3, #0
 800dace:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800dad0:	230a      	movs	r3, #10
 800dad2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dad4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800dad8:	4619      	mov	r1, r3
 800dada:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800dade:	f7f7 fa7f 	bl	8004fe0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800dae2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800dae6:	f7ff ff97 	bl	800da18 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800daea:	2200      	movs	r2, #0
 800daec:	2100      	movs	r1, #0
 800daee:	2014      	movs	r0, #20
 800daf0:	f7f7 fa41 	bl	8004f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800daf4:	2014      	movs	r0, #20
 800daf6:	f7f7 fa58 	bl	8004faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800dafa:	bf00      	nop
 800dafc:	3770      	adds	r7, #112	; 0x70
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
 800db02:	bf00      	nop
 800db04:	40006800 	.word	0x40006800

0800db08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b082      	sub	sp, #8
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800db1c:	4619      	mov	r1, r3
 800db1e:	4610      	mov	r0, r2
 800db20:	f7fe fb57 	bl	800c1d2 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800db24:	bf00      	nop
 800db26:	3708      	adds	r7, #8
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}

0800db2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b082      	sub	sp, #8
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
 800db34:	460b      	mov	r3, r1
 800db36:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800db3e:	78fa      	ldrb	r2, [r7, #3]
 800db40:	6879      	ldr	r1, [r7, #4]
 800db42:	4613      	mov	r3, r2
 800db44:	009b      	lsls	r3, r3, #2
 800db46:	4413      	add	r3, r2
 800db48:	00db      	lsls	r3, r3, #3
 800db4a:	440b      	add	r3, r1
 800db4c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800db50:	681a      	ldr	r2, [r3, #0]
 800db52:	78fb      	ldrb	r3, [r7, #3]
 800db54:	4619      	mov	r1, r3
 800db56:	f7fe fb91 	bl	800c27c <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800db5a:	bf00      	nop
 800db5c:	3708      	adds	r7, #8
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}

0800db62 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db62:	b580      	push	{r7, lr}
 800db64:	b082      	sub	sp, #8
 800db66:	af00      	add	r7, sp, #0
 800db68:	6078      	str	r0, [r7, #4]
 800db6a:	460b      	mov	r3, r1
 800db6c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800db74:	78fa      	ldrb	r2, [r7, #3]
 800db76:	6879      	ldr	r1, [r7, #4]
 800db78:	4613      	mov	r3, r2
 800db7a:	009b      	lsls	r3, r3, #2
 800db7c:	4413      	add	r3, r2
 800db7e:	00db      	lsls	r3, r3, #3
 800db80:	440b      	add	r3, r1
 800db82:	333c      	adds	r3, #60	; 0x3c
 800db84:	681a      	ldr	r2, [r3, #0]
 800db86:	78fb      	ldrb	r3, [r7, #3]
 800db88:	4619      	mov	r1, r3
 800db8a:	f7fe fc2a 	bl	800c3e2 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800db8e:	bf00      	nop
 800db90:	3708      	adds	r7, #8
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}

0800db96 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db96:	b580      	push	{r7, lr}
 800db98:	b082      	sub	sp, #8
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800dba4:	4618      	mov	r0, r3
 800dba6:	f7fe fd64 	bl	800c672 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800dbaa:	bf00      	nop
 800dbac:	3708      	adds	r7, #8
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}

0800dbb2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbb2:	b580      	push	{r7, lr}
 800dbb4:	b084      	sub	sp, #16
 800dbb6:	af00      	add	r7, sp, #0
 800dbb8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dbba:	2301      	movs	r3, #1
 800dbbc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	689b      	ldr	r3, [r3, #8]
 800dbc2:	2b02      	cmp	r3, #2
 800dbc4:	d001      	beq.n	800dbca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800dbc6:	f7f6 fe2b 	bl	8004820 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800dbd0:	7bfa      	ldrb	r2, [r7, #15]
 800dbd2:	4611      	mov	r1, r2
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f7fe fd08 	bl	800c5ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f7fe fcb0 	bl	800c546 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800dbe6:	bf00      	nop
 800dbe8:	3710      	adds	r7, #16
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}
	...

0800dbf0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b082      	sub	sp, #8
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7fe fd03 	bl	800c60a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	699b      	ldr	r3, [r3, #24]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d005      	beq.n	800dc18 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dc0c:	4b04      	ldr	r3, [pc, #16]	; (800dc20 <HAL_PCD_SuspendCallback+0x30>)
 800dc0e:	691b      	ldr	r3, [r3, #16]
 800dc10:	4a03      	ldr	r2, [pc, #12]	; (800dc20 <HAL_PCD_SuspendCallback+0x30>)
 800dc12:	f043 0306 	orr.w	r3, r3, #6
 800dc16:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800dc18:	bf00      	nop
 800dc1a:	3708      	adds	r7, #8
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}
 800dc20:	e000ed00 	.word	0xe000ed00

0800dc24 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b082      	sub	sp, #8
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	699b      	ldr	r3, [r3, #24]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d007      	beq.n	800dc44 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dc34:	4b08      	ldr	r3, [pc, #32]	; (800dc58 <HAL_PCD_ResumeCallback+0x34>)
 800dc36:	691b      	ldr	r3, [r3, #16]
 800dc38:	4a07      	ldr	r2, [pc, #28]	; (800dc58 <HAL_PCD_ResumeCallback+0x34>)
 800dc3a:	f023 0306 	bic.w	r3, r3, #6
 800dc3e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800dc40:	f000 f9fc 	bl	800e03c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f7fe fcf9 	bl	800c642 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800dc50:	bf00      	nop
 800dc52:	3708      	adds	r7, #8
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}
 800dc58:	e000ed00 	.word	0xe000ed00

0800dc5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b082      	sub	sp, #8
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800dc64:	4a2c      	ldr	r2, [pc, #176]	; (800dd18 <USBD_LL_Init+0xbc>)
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	4a2a      	ldr	r2, [pc, #168]	; (800dd18 <USBD_LL_Init+0xbc>)
 800dc70:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800dc74:	f7f9 f9ac 	bl	8006fd0 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800dc78:	4b27      	ldr	r3, [pc, #156]	; (800dd18 <USBD_LL_Init+0xbc>)
 800dc7a:	4a28      	ldr	r2, [pc, #160]	; (800dd1c <USBD_LL_Init+0xc0>)
 800dc7c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800dc7e:	4b26      	ldr	r3, [pc, #152]	; (800dd18 <USBD_LL_Init+0xbc>)
 800dc80:	2208      	movs	r2, #8
 800dc82:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800dc84:	4b24      	ldr	r3, [pc, #144]	; (800dd18 <USBD_LL_Init+0xbc>)
 800dc86:	2202      	movs	r2, #2
 800dc88:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dc8a:	4b23      	ldr	r3, [pc, #140]	; (800dd18 <USBD_LL_Init+0xbc>)
 800dc8c:	2202      	movs	r2, #2
 800dc8e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800dc90:	4b21      	ldr	r3, [pc, #132]	; (800dd18 <USBD_LL_Init+0xbc>)
 800dc92:	2200      	movs	r2, #0
 800dc94:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800dc96:	4b20      	ldr	r3, [pc, #128]	; (800dd18 <USBD_LL_Init+0xbc>)
 800dc98:	2200      	movs	r2, #0
 800dc9a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800dc9c:	4b1e      	ldr	r3, [pc, #120]	; (800dd18 <USBD_LL_Init+0xbc>)
 800dc9e:	2200      	movs	r2, #0
 800dca0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800dca2:	4b1d      	ldr	r3, [pc, #116]	; (800dd18 <USBD_LL_Init+0xbc>)
 800dca4:	2200      	movs	r2, #0
 800dca6:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800dca8:	481b      	ldr	r0, [pc, #108]	; (800dd18 <USBD_LL_Init+0xbc>)
 800dcaa:	f7f7 fc2f 	bl	800550c <HAL_PCD_Init>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d001      	beq.n	800dcb8 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800dcb4:	f7f6 fdb4 	bl	8004820 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dcbe:	2318      	movs	r3, #24
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	2100      	movs	r1, #0
 800dcc4:	f7f9 f8f8 	bl	8006eb8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dcce:	2358      	movs	r3, #88	; 0x58
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	2180      	movs	r1, #128	; 0x80
 800dcd4:	f7f9 f8f0 	bl	8006eb8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dcde:	23c0      	movs	r3, #192	; 0xc0
 800dce0:	2200      	movs	r2, #0
 800dce2:	2181      	movs	r1, #129	; 0x81
 800dce4:	f7f9 f8e8 	bl	8006eb8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dcee:	f44f 7388 	mov.w	r3, #272	; 0x110
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	2101      	movs	r1, #1
 800dcf6:	f7f9 f8df 	bl	8006eb8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dd00:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd04:	2200      	movs	r2, #0
 800dd06:	2182      	movs	r1, #130	; 0x82
 800dd08:	f7f9 f8d6 	bl	8006eb8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800dd0c:	2300      	movs	r3, #0
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	3708      	adds	r7, #8
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
 800dd16:	bf00      	nop
 800dd18:	20005234 	.word	0x20005234
 800dd1c:	40006800 	.word	0x40006800

0800dd20 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b084      	sub	sp, #16
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd28:	2300      	movs	r3, #0
 800dd2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dd36:	4618      	mov	r0, r3
 800dd38:	f7f7 fcc1 	bl	80056be <HAL_PCD_Start>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd40:	7bfb      	ldrb	r3, [r7, #15]
 800dd42:	4618      	mov	r0, r3
 800dd44:	f000 f980 	bl	800e048 <USBD_Get_USB_Status>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd4e:	4618      	mov	r0, r3
 800dd50:	3710      	adds	r7, #16
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}

0800dd56 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dd56:	b580      	push	{r7, lr}
 800dd58:	b084      	sub	sp, #16
 800dd5a:	af00      	add	r7, sp, #0
 800dd5c:	6078      	str	r0, [r7, #4]
 800dd5e:	4608      	mov	r0, r1
 800dd60:	4611      	mov	r1, r2
 800dd62:	461a      	mov	r2, r3
 800dd64:	4603      	mov	r3, r0
 800dd66:	70fb      	strb	r3, [r7, #3]
 800dd68:	460b      	mov	r3, r1
 800dd6a:	70bb      	strb	r3, [r7, #2]
 800dd6c:	4613      	mov	r3, r2
 800dd6e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd70:	2300      	movs	r3, #0
 800dd72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd74:	2300      	movs	r3, #0
 800dd76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dd7e:	78bb      	ldrb	r3, [r7, #2]
 800dd80:	883a      	ldrh	r2, [r7, #0]
 800dd82:	78f9      	ldrb	r1, [r7, #3]
 800dd84:	f7f7 fe09 	bl	800599a <HAL_PCD_EP_Open>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd8c:	7bfb      	ldrb	r3, [r7, #15]
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f000 f95a 	bl	800e048 <USBD_Get_USB_Status>
 800dd94:	4603      	mov	r3, r0
 800dd96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd98:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3710      	adds	r7, #16
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}

0800dda2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dda2:	b580      	push	{r7, lr}
 800dda4:	b084      	sub	sp, #16
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	6078      	str	r0, [r7, #4]
 800ddaa:	460b      	mov	r3, r1
 800ddac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ddbc:	78fa      	ldrb	r2, [r7, #3]
 800ddbe:	4611      	mov	r1, r2
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f7f7 fe47 	bl	8005a54 <HAL_PCD_EP_Close>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ddca:	7bfb      	ldrb	r3, [r7, #15]
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f000 f93b 	bl	800e048 <USBD_Get_USB_Status>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddd6:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3710      	adds	r7, #16
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}

0800dde0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b084      	sub	sp, #16
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	460b      	mov	r3, r1
 800ddea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddec:	2300      	movs	r3, #0
 800ddee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ddfa:	78fa      	ldrb	r2, [r7, #3]
 800ddfc:	4611      	mov	r1, r2
 800ddfe:	4618      	mov	r0, r3
 800de00:	f7f7 fef0 	bl	8005be4 <HAL_PCD_EP_SetStall>
 800de04:	4603      	mov	r3, r0
 800de06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de08:	7bfb      	ldrb	r3, [r7, #15]
 800de0a:	4618      	mov	r0, r3
 800de0c:	f000 f91c 	bl	800e048 <USBD_Get_USB_Status>
 800de10:	4603      	mov	r3, r0
 800de12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de14:	7bbb      	ldrb	r3, [r7, #14]
}
 800de16:	4618      	mov	r0, r3
 800de18:	3710      	adds	r7, #16
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}

0800de1e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de1e:	b580      	push	{r7, lr}
 800de20:	b084      	sub	sp, #16
 800de22:	af00      	add	r7, sp, #0
 800de24:	6078      	str	r0, [r7, #4]
 800de26:	460b      	mov	r3, r1
 800de28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de2a:	2300      	movs	r3, #0
 800de2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de2e:	2300      	movs	r3, #0
 800de30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800de38:	78fa      	ldrb	r2, [r7, #3]
 800de3a:	4611      	mov	r1, r2
 800de3c:	4618      	mov	r0, r3
 800de3e:	f7f7 ff23 	bl	8005c88 <HAL_PCD_EP_ClrStall>
 800de42:	4603      	mov	r3, r0
 800de44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de46:	7bfb      	ldrb	r3, [r7, #15]
 800de48:	4618      	mov	r0, r3
 800de4a:	f000 f8fd 	bl	800e048 <USBD_Get_USB_Status>
 800de4e:	4603      	mov	r3, r0
 800de50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de52:	7bbb      	ldrb	r3, [r7, #14]
}
 800de54:	4618      	mov	r0, r3
 800de56:	3710      	adds	r7, #16
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}

0800de5c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de5c:	b480      	push	{r7}
 800de5e:	b085      	sub	sp, #20
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
 800de64:	460b      	mov	r3, r1
 800de66:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800de6e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800de70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800de74:	2b00      	cmp	r3, #0
 800de76:	da0c      	bge.n	800de92 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800de78:	78fb      	ldrb	r3, [r7, #3]
 800de7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de7e:	68f9      	ldr	r1, [r7, #12]
 800de80:	1c5a      	adds	r2, r3, #1
 800de82:	4613      	mov	r3, r2
 800de84:	009b      	lsls	r3, r3, #2
 800de86:	4413      	add	r3, r2
 800de88:	00db      	lsls	r3, r3, #3
 800de8a:	440b      	add	r3, r1
 800de8c:	3302      	adds	r3, #2
 800de8e:	781b      	ldrb	r3, [r3, #0]
 800de90:	e00b      	b.n	800deaa <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800de92:	78fb      	ldrb	r3, [r7, #3]
 800de94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800de98:	68f9      	ldr	r1, [r7, #12]
 800de9a:	4613      	mov	r3, r2
 800de9c:	009b      	lsls	r3, r3, #2
 800de9e:	4413      	add	r3, r2
 800dea0:	00db      	lsls	r3, r3, #3
 800dea2:	440b      	add	r3, r1
 800dea4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800dea8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800deaa:	4618      	mov	r0, r3
 800deac:	3714      	adds	r7, #20
 800deae:	46bd      	mov	sp, r7
 800deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb4:	4770      	bx	lr

0800deb6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800deb6:	b580      	push	{r7, lr}
 800deb8:	b084      	sub	sp, #16
 800deba:	af00      	add	r7, sp, #0
 800debc:	6078      	str	r0, [r7, #4]
 800debe:	460b      	mov	r3, r1
 800dec0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dec2:	2300      	movs	r3, #0
 800dec4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dec6:	2300      	movs	r3, #0
 800dec8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ded0:	78fa      	ldrb	r2, [r7, #3]
 800ded2:	4611      	mov	r1, r2
 800ded4:	4618      	mov	r0, r3
 800ded6:	f7f7 fd3b 	bl	8005950 <HAL_PCD_SetAddress>
 800deda:	4603      	mov	r3, r0
 800dedc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dede:	7bfb      	ldrb	r3, [r7, #15]
 800dee0:	4618      	mov	r0, r3
 800dee2:	f000 f8b1 	bl	800e048 <USBD_Get_USB_Status>
 800dee6:	4603      	mov	r3, r0
 800dee8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800deea:	7bbb      	ldrb	r3, [r7, #14]
}
 800deec:	4618      	mov	r0, r3
 800deee:	3710      	adds	r7, #16
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}

0800def4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b086      	sub	sp, #24
 800def8:	af00      	add	r7, sp, #0
 800defa:	60f8      	str	r0, [r7, #12]
 800defc:	607a      	str	r2, [r7, #4]
 800defe:	603b      	str	r3, [r7, #0]
 800df00:	460b      	mov	r3, r1
 800df02:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df04:	2300      	movs	r3, #0
 800df06:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df08:	2300      	movs	r3, #0
 800df0a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800df12:	7af9      	ldrb	r1, [r7, #11]
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	687a      	ldr	r2, [r7, #4]
 800df18:	f7f7 fe2d 	bl	8005b76 <HAL_PCD_EP_Transmit>
 800df1c:	4603      	mov	r3, r0
 800df1e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df20:	7dfb      	ldrb	r3, [r7, #23]
 800df22:	4618      	mov	r0, r3
 800df24:	f000 f890 	bl	800e048 <USBD_Get_USB_Status>
 800df28:	4603      	mov	r3, r0
 800df2a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800df2c:	7dbb      	ldrb	r3, [r7, #22]
}
 800df2e:	4618      	mov	r0, r3
 800df30:	3718      	adds	r7, #24
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}

0800df36 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800df36:	b580      	push	{r7, lr}
 800df38:	b086      	sub	sp, #24
 800df3a:	af00      	add	r7, sp, #0
 800df3c:	60f8      	str	r0, [r7, #12]
 800df3e:	607a      	str	r2, [r7, #4]
 800df40:	603b      	str	r3, [r7, #0]
 800df42:	460b      	mov	r3, r1
 800df44:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df46:	2300      	movs	r3, #0
 800df48:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df4a:	2300      	movs	r3, #0
 800df4c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800df54:	7af9      	ldrb	r1, [r7, #11]
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	687a      	ldr	r2, [r7, #4]
 800df5a:	f7f7 fdc3 	bl	8005ae4 <HAL_PCD_EP_Receive>
 800df5e:	4603      	mov	r3, r0
 800df60:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df62:	7dfb      	ldrb	r3, [r7, #23]
 800df64:	4618      	mov	r0, r3
 800df66:	f000 f86f 	bl	800e048 <USBD_Get_USB_Status>
 800df6a:	4603      	mov	r3, r0
 800df6c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800df6e:	7dbb      	ldrb	r3, [r7, #22]
}
 800df70:	4618      	mov	r0, r3
 800df72:	3718      	adds	r7, #24
 800df74:	46bd      	mov	sp, r7
 800df76:	bd80      	pop	{r7, pc}

0800df78 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b082      	sub	sp, #8
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
 800df80:	460b      	mov	r3, r1
 800df82:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800df8a:	78fa      	ldrb	r2, [r7, #3]
 800df8c:	4611      	mov	r1, r2
 800df8e:	4618      	mov	r0, r3
 800df90:	f7f7 fdd9 	bl	8005b46 <HAL_PCD_EP_GetRxCount>
 800df94:	4603      	mov	r3, r0
}
 800df96:	4618      	mov	r0, r3
 800df98:	3708      	adds	r7, #8
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}
	...

0800dfa0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b082      	sub	sp, #8
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	460b      	mov	r3, r1
 800dfaa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800dfac:	78fb      	ldrb	r3, [r7, #3]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d002      	beq.n	800dfb8 <HAL_PCDEx_LPM_Callback+0x18>
 800dfb2:	2b01      	cmp	r3, #1
 800dfb4:	d013      	beq.n	800dfde <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800dfb6:	e023      	b.n	800e000 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	699b      	ldr	r3, [r3, #24]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d007      	beq.n	800dfd0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800dfc0:	f000 f83c 	bl	800e03c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dfc4:	4b10      	ldr	r3, [pc, #64]	; (800e008 <HAL_PCDEx_LPM_Callback+0x68>)
 800dfc6:	691b      	ldr	r3, [r3, #16]
 800dfc8:	4a0f      	ldr	r2, [pc, #60]	; (800e008 <HAL_PCDEx_LPM_Callback+0x68>)
 800dfca:	f023 0306 	bic.w	r3, r3, #6
 800dfce:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f7fe fb33 	bl	800c642 <USBD_LL_Resume>
    break;
 800dfdc:	e010      	b.n	800e000 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f7fe fb10 	bl	800c60a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	699b      	ldr	r3, [r3, #24]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d005      	beq.n	800dffe <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dff2:	4b05      	ldr	r3, [pc, #20]	; (800e008 <HAL_PCDEx_LPM_Callback+0x68>)
 800dff4:	691b      	ldr	r3, [r3, #16]
 800dff6:	4a04      	ldr	r2, [pc, #16]	; (800e008 <HAL_PCDEx_LPM_Callback+0x68>)
 800dff8:	f043 0306 	orr.w	r3, r3, #6
 800dffc:	6113      	str	r3, [r2, #16]
    break;
 800dffe:	bf00      	nop
}
 800e000:	bf00      	nop
 800e002:	3708      	adds	r7, #8
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}
 800e008:	e000ed00 	.word	0xe000ed00

0800e00c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e00c:	b480      	push	{r7}
 800e00e:	b083      	sub	sp, #12
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e014:	4b03      	ldr	r3, [pc, #12]	; (800e024 <USBD_static_malloc+0x18>)
}
 800e016:	4618      	mov	r0, r3
 800e018:	370c      	adds	r7, #12
 800e01a:	46bd      	mov	sp, r7
 800e01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e020:	4770      	bx	lr
 800e022:	bf00      	nop
 800e024:	20005528 	.word	0x20005528

0800e028 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e028:	b480      	push	{r7}
 800e02a:	b083      	sub	sp, #12
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800e030:	bf00      	nop
 800e032:	370c      	adds	r7, #12
 800e034:	46bd      	mov	sp, r7
 800e036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03a:	4770      	bx	lr

0800e03c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e040:	f7f6 fad0 	bl	80045e4 <SystemClock_Config>
}
 800e044:	bf00      	nop
 800e046:	bd80      	pop	{r7, pc}

0800e048 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e048:	b480      	push	{r7}
 800e04a:	b085      	sub	sp, #20
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	4603      	mov	r3, r0
 800e050:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e052:	2300      	movs	r3, #0
 800e054:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e056:	79fb      	ldrb	r3, [r7, #7]
 800e058:	2b03      	cmp	r3, #3
 800e05a:	d817      	bhi.n	800e08c <USBD_Get_USB_Status+0x44>
 800e05c:	a201      	add	r2, pc, #4	; (adr r2, 800e064 <USBD_Get_USB_Status+0x1c>)
 800e05e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e062:	bf00      	nop
 800e064:	0800e075 	.word	0x0800e075
 800e068:	0800e07b 	.word	0x0800e07b
 800e06c:	0800e081 	.word	0x0800e081
 800e070:	0800e087 	.word	0x0800e087
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e074:	2300      	movs	r3, #0
 800e076:	73fb      	strb	r3, [r7, #15]
    break;
 800e078:	e00b      	b.n	800e092 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e07a:	2303      	movs	r3, #3
 800e07c:	73fb      	strb	r3, [r7, #15]
    break;
 800e07e:	e008      	b.n	800e092 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e080:	2301      	movs	r3, #1
 800e082:	73fb      	strb	r3, [r7, #15]
    break;
 800e084:	e005      	b.n	800e092 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e086:	2303      	movs	r3, #3
 800e088:	73fb      	strb	r3, [r7, #15]
    break;
 800e08a:	e002      	b.n	800e092 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e08c:	2303      	movs	r3, #3
 800e08e:	73fb      	strb	r3, [r7, #15]
    break;
 800e090:	bf00      	nop
  }
  return usb_status;
 800e092:	7bfb      	ldrb	r3, [r7, #15]
}
 800e094:	4618      	mov	r0, r3
 800e096:	3714      	adds	r7, #20
 800e098:	46bd      	mov	sp, r7
 800e09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09e:	4770      	bx	lr

0800e0a0 <atoi>:
 800e0a0:	220a      	movs	r2, #10
 800e0a2:	2100      	movs	r1, #0
 800e0a4:	f001 bd8c 	b.w	800fbc0 <strtol>

0800e0a8 <__errno>:
 800e0a8:	4b01      	ldr	r3, [pc, #4]	; (800e0b0 <__errno+0x8>)
 800e0aa:	6818      	ldr	r0, [r3, #0]
 800e0ac:	4770      	bx	lr
 800e0ae:	bf00      	nop
 800e0b0:	20000110 	.word	0x20000110

0800e0b4 <__libc_init_array>:
 800e0b4:	b570      	push	{r4, r5, r6, lr}
 800e0b6:	4d0d      	ldr	r5, [pc, #52]	; (800e0ec <__libc_init_array+0x38>)
 800e0b8:	4c0d      	ldr	r4, [pc, #52]	; (800e0f0 <__libc_init_array+0x3c>)
 800e0ba:	1b64      	subs	r4, r4, r5
 800e0bc:	10a4      	asrs	r4, r4, #2
 800e0be:	2600      	movs	r6, #0
 800e0c0:	42a6      	cmp	r6, r4
 800e0c2:	d109      	bne.n	800e0d8 <__libc_init_array+0x24>
 800e0c4:	4d0b      	ldr	r5, [pc, #44]	; (800e0f4 <__libc_init_array+0x40>)
 800e0c6:	4c0c      	ldr	r4, [pc, #48]	; (800e0f8 <__libc_init_array+0x44>)
 800e0c8:	f004 fc9a 	bl	8012a00 <_init>
 800e0cc:	1b64      	subs	r4, r4, r5
 800e0ce:	10a4      	asrs	r4, r4, #2
 800e0d0:	2600      	movs	r6, #0
 800e0d2:	42a6      	cmp	r6, r4
 800e0d4:	d105      	bne.n	800e0e2 <__libc_init_array+0x2e>
 800e0d6:	bd70      	pop	{r4, r5, r6, pc}
 800e0d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0dc:	4798      	blx	r3
 800e0de:	3601      	adds	r6, #1
 800e0e0:	e7ee      	b.n	800e0c0 <__libc_init_array+0xc>
 800e0e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0e6:	4798      	blx	r3
 800e0e8:	3601      	adds	r6, #1
 800e0ea:	e7f2      	b.n	800e0d2 <__libc_init_array+0x1e>
 800e0ec:	0801306c 	.word	0x0801306c
 800e0f0:	0801306c 	.word	0x0801306c
 800e0f4:	0801306c 	.word	0x0801306c
 800e0f8:	08013070 	.word	0x08013070

0800e0fc <memcpy>:
 800e0fc:	440a      	add	r2, r1
 800e0fe:	4291      	cmp	r1, r2
 800e100:	f100 33ff 	add.w	r3, r0, #4294967295
 800e104:	d100      	bne.n	800e108 <memcpy+0xc>
 800e106:	4770      	bx	lr
 800e108:	b510      	push	{r4, lr}
 800e10a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e10e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e112:	4291      	cmp	r1, r2
 800e114:	d1f9      	bne.n	800e10a <memcpy+0xe>
 800e116:	bd10      	pop	{r4, pc}

0800e118 <memset>:
 800e118:	4402      	add	r2, r0
 800e11a:	4603      	mov	r3, r0
 800e11c:	4293      	cmp	r3, r2
 800e11e:	d100      	bne.n	800e122 <memset+0xa>
 800e120:	4770      	bx	lr
 800e122:	f803 1b01 	strb.w	r1, [r3], #1
 800e126:	e7f9      	b.n	800e11c <memset+0x4>

0800e128 <__cvt>:
 800e128:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e12c:	ec55 4b10 	vmov	r4, r5, d0
 800e130:	2d00      	cmp	r5, #0
 800e132:	460e      	mov	r6, r1
 800e134:	4619      	mov	r1, r3
 800e136:	462b      	mov	r3, r5
 800e138:	bfbb      	ittet	lt
 800e13a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e13e:	461d      	movlt	r5, r3
 800e140:	2300      	movge	r3, #0
 800e142:	232d      	movlt	r3, #45	; 0x2d
 800e144:	700b      	strb	r3, [r1, #0]
 800e146:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e148:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e14c:	4691      	mov	r9, r2
 800e14e:	f023 0820 	bic.w	r8, r3, #32
 800e152:	bfbc      	itt	lt
 800e154:	4622      	movlt	r2, r4
 800e156:	4614      	movlt	r4, r2
 800e158:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e15c:	d005      	beq.n	800e16a <__cvt+0x42>
 800e15e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e162:	d100      	bne.n	800e166 <__cvt+0x3e>
 800e164:	3601      	adds	r6, #1
 800e166:	2102      	movs	r1, #2
 800e168:	e000      	b.n	800e16c <__cvt+0x44>
 800e16a:	2103      	movs	r1, #3
 800e16c:	ab03      	add	r3, sp, #12
 800e16e:	9301      	str	r3, [sp, #4]
 800e170:	ab02      	add	r3, sp, #8
 800e172:	9300      	str	r3, [sp, #0]
 800e174:	ec45 4b10 	vmov	d0, r4, r5
 800e178:	4653      	mov	r3, sl
 800e17a:	4632      	mov	r2, r6
 800e17c:	f001 fdb8 	bl	800fcf0 <_dtoa_r>
 800e180:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e184:	4607      	mov	r7, r0
 800e186:	d102      	bne.n	800e18e <__cvt+0x66>
 800e188:	f019 0f01 	tst.w	r9, #1
 800e18c:	d022      	beq.n	800e1d4 <__cvt+0xac>
 800e18e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e192:	eb07 0906 	add.w	r9, r7, r6
 800e196:	d110      	bne.n	800e1ba <__cvt+0x92>
 800e198:	783b      	ldrb	r3, [r7, #0]
 800e19a:	2b30      	cmp	r3, #48	; 0x30
 800e19c:	d10a      	bne.n	800e1b4 <__cvt+0x8c>
 800e19e:	2200      	movs	r2, #0
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	4620      	mov	r0, r4
 800e1a4:	4629      	mov	r1, r5
 800e1a6:	f7f2 fc67 	bl	8000a78 <__aeabi_dcmpeq>
 800e1aa:	b918      	cbnz	r0, 800e1b4 <__cvt+0x8c>
 800e1ac:	f1c6 0601 	rsb	r6, r6, #1
 800e1b0:	f8ca 6000 	str.w	r6, [sl]
 800e1b4:	f8da 3000 	ldr.w	r3, [sl]
 800e1b8:	4499      	add	r9, r3
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	2300      	movs	r3, #0
 800e1be:	4620      	mov	r0, r4
 800e1c0:	4629      	mov	r1, r5
 800e1c2:	f7f2 fc59 	bl	8000a78 <__aeabi_dcmpeq>
 800e1c6:	b108      	cbz	r0, 800e1cc <__cvt+0xa4>
 800e1c8:	f8cd 900c 	str.w	r9, [sp, #12]
 800e1cc:	2230      	movs	r2, #48	; 0x30
 800e1ce:	9b03      	ldr	r3, [sp, #12]
 800e1d0:	454b      	cmp	r3, r9
 800e1d2:	d307      	bcc.n	800e1e4 <__cvt+0xbc>
 800e1d4:	9b03      	ldr	r3, [sp, #12]
 800e1d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e1d8:	1bdb      	subs	r3, r3, r7
 800e1da:	4638      	mov	r0, r7
 800e1dc:	6013      	str	r3, [r2, #0]
 800e1de:	b004      	add	sp, #16
 800e1e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1e4:	1c59      	adds	r1, r3, #1
 800e1e6:	9103      	str	r1, [sp, #12]
 800e1e8:	701a      	strb	r2, [r3, #0]
 800e1ea:	e7f0      	b.n	800e1ce <__cvt+0xa6>

0800e1ec <__exponent>:
 800e1ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	2900      	cmp	r1, #0
 800e1f2:	bfb8      	it	lt
 800e1f4:	4249      	neglt	r1, r1
 800e1f6:	f803 2b02 	strb.w	r2, [r3], #2
 800e1fa:	bfb4      	ite	lt
 800e1fc:	222d      	movlt	r2, #45	; 0x2d
 800e1fe:	222b      	movge	r2, #43	; 0x2b
 800e200:	2909      	cmp	r1, #9
 800e202:	7042      	strb	r2, [r0, #1]
 800e204:	dd2a      	ble.n	800e25c <__exponent+0x70>
 800e206:	f10d 0407 	add.w	r4, sp, #7
 800e20a:	46a4      	mov	ip, r4
 800e20c:	270a      	movs	r7, #10
 800e20e:	46a6      	mov	lr, r4
 800e210:	460a      	mov	r2, r1
 800e212:	fb91 f6f7 	sdiv	r6, r1, r7
 800e216:	fb07 1516 	mls	r5, r7, r6, r1
 800e21a:	3530      	adds	r5, #48	; 0x30
 800e21c:	2a63      	cmp	r2, #99	; 0x63
 800e21e:	f104 34ff 	add.w	r4, r4, #4294967295
 800e222:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e226:	4631      	mov	r1, r6
 800e228:	dcf1      	bgt.n	800e20e <__exponent+0x22>
 800e22a:	3130      	adds	r1, #48	; 0x30
 800e22c:	f1ae 0502 	sub.w	r5, lr, #2
 800e230:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e234:	1c44      	adds	r4, r0, #1
 800e236:	4629      	mov	r1, r5
 800e238:	4561      	cmp	r1, ip
 800e23a:	d30a      	bcc.n	800e252 <__exponent+0x66>
 800e23c:	f10d 0209 	add.w	r2, sp, #9
 800e240:	eba2 020e 	sub.w	r2, r2, lr
 800e244:	4565      	cmp	r5, ip
 800e246:	bf88      	it	hi
 800e248:	2200      	movhi	r2, #0
 800e24a:	4413      	add	r3, r2
 800e24c:	1a18      	subs	r0, r3, r0
 800e24e:	b003      	add	sp, #12
 800e250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e252:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e256:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e25a:	e7ed      	b.n	800e238 <__exponent+0x4c>
 800e25c:	2330      	movs	r3, #48	; 0x30
 800e25e:	3130      	adds	r1, #48	; 0x30
 800e260:	7083      	strb	r3, [r0, #2]
 800e262:	70c1      	strb	r1, [r0, #3]
 800e264:	1d03      	adds	r3, r0, #4
 800e266:	e7f1      	b.n	800e24c <__exponent+0x60>

0800e268 <_printf_float>:
 800e268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e26c:	ed2d 8b02 	vpush	{d8}
 800e270:	b08d      	sub	sp, #52	; 0x34
 800e272:	460c      	mov	r4, r1
 800e274:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e278:	4616      	mov	r6, r2
 800e27a:	461f      	mov	r7, r3
 800e27c:	4605      	mov	r5, r0
 800e27e:	f002 fe95 	bl	8010fac <_localeconv_r>
 800e282:	f8d0 a000 	ldr.w	sl, [r0]
 800e286:	4650      	mov	r0, sl
 800e288:	f7f1 ff7a 	bl	8000180 <strlen>
 800e28c:	2300      	movs	r3, #0
 800e28e:	930a      	str	r3, [sp, #40]	; 0x28
 800e290:	6823      	ldr	r3, [r4, #0]
 800e292:	9305      	str	r3, [sp, #20]
 800e294:	f8d8 3000 	ldr.w	r3, [r8]
 800e298:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e29c:	3307      	adds	r3, #7
 800e29e:	f023 0307 	bic.w	r3, r3, #7
 800e2a2:	f103 0208 	add.w	r2, r3, #8
 800e2a6:	f8c8 2000 	str.w	r2, [r8]
 800e2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e2b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e2b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e2ba:	9307      	str	r3, [sp, #28]
 800e2bc:	f8cd 8018 	str.w	r8, [sp, #24]
 800e2c0:	ee08 0a10 	vmov	s16, r0
 800e2c4:	4b9f      	ldr	r3, [pc, #636]	; (800e544 <_printf_float+0x2dc>)
 800e2c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e2ca:	f04f 32ff 	mov.w	r2, #4294967295
 800e2ce:	f7f2 fc05 	bl	8000adc <__aeabi_dcmpun>
 800e2d2:	bb88      	cbnz	r0, 800e338 <_printf_float+0xd0>
 800e2d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e2d8:	4b9a      	ldr	r3, [pc, #616]	; (800e544 <_printf_float+0x2dc>)
 800e2da:	f04f 32ff 	mov.w	r2, #4294967295
 800e2de:	f7f2 fbdf 	bl	8000aa0 <__aeabi_dcmple>
 800e2e2:	bb48      	cbnz	r0, 800e338 <_printf_float+0xd0>
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	4640      	mov	r0, r8
 800e2ea:	4649      	mov	r1, r9
 800e2ec:	f7f2 fbce 	bl	8000a8c <__aeabi_dcmplt>
 800e2f0:	b110      	cbz	r0, 800e2f8 <_printf_float+0x90>
 800e2f2:	232d      	movs	r3, #45	; 0x2d
 800e2f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2f8:	4b93      	ldr	r3, [pc, #588]	; (800e548 <_printf_float+0x2e0>)
 800e2fa:	4894      	ldr	r0, [pc, #592]	; (800e54c <_printf_float+0x2e4>)
 800e2fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e300:	bf94      	ite	ls
 800e302:	4698      	movls	r8, r3
 800e304:	4680      	movhi	r8, r0
 800e306:	2303      	movs	r3, #3
 800e308:	6123      	str	r3, [r4, #16]
 800e30a:	9b05      	ldr	r3, [sp, #20]
 800e30c:	f023 0204 	bic.w	r2, r3, #4
 800e310:	6022      	str	r2, [r4, #0]
 800e312:	f04f 0900 	mov.w	r9, #0
 800e316:	9700      	str	r7, [sp, #0]
 800e318:	4633      	mov	r3, r6
 800e31a:	aa0b      	add	r2, sp, #44	; 0x2c
 800e31c:	4621      	mov	r1, r4
 800e31e:	4628      	mov	r0, r5
 800e320:	f000 f9d8 	bl	800e6d4 <_printf_common>
 800e324:	3001      	adds	r0, #1
 800e326:	f040 8090 	bne.w	800e44a <_printf_float+0x1e2>
 800e32a:	f04f 30ff 	mov.w	r0, #4294967295
 800e32e:	b00d      	add	sp, #52	; 0x34
 800e330:	ecbd 8b02 	vpop	{d8}
 800e334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e338:	4642      	mov	r2, r8
 800e33a:	464b      	mov	r3, r9
 800e33c:	4640      	mov	r0, r8
 800e33e:	4649      	mov	r1, r9
 800e340:	f7f2 fbcc 	bl	8000adc <__aeabi_dcmpun>
 800e344:	b140      	cbz	r0, 800e358 <_printf_float+0xf0>
 800e346:	464b      	mov	r3, r9
 800e348:	2b00      	cmp	r3, #0
 800e34a:	bfbc      	itt	lt
 800e34c:	232d      	movlt	r3, #45	; 0x2d
 800e34e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e352:	487f      	ldr	r0, [pc, #508]	; (800e550 <_printf_float+0x2e8>)
 800e354:	4b7f      	ldr	r3, [pc, #508]	; (800e554 <_printf_float+0x2ec>)
 800e356:	e7d1      	b.n	800e2fc <_printf_float+0x94>
 800e358:	6863      	ldr	r3, [r4, #4]
 800e35a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e35e:	9206      	str	r2, [sp, #24]
 800e360:	1c5a      	adds	r2, r3, #1
 800e362:	d13f      	bne.n	800e3e4 <_printf_float+0x17c>
 800e364:	2306      	movs	r3, #6
 800e366:	6063      	str	r3, [r4, #4]
 800e368:	9b05      	ldr	r3, [sp, #20]
 800e36a:	6861      	ldr	r1, [r4, #4]
 800e36c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e370:	2300      	movs	r3, #0
 800e372:	9303      	str	r3, [sp, #12]
 800e374:	ab0a      	add	r3, sp, #40	; 0x28
 800e376:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e37a:	ab09      	add	r3, sp, #36	; 0x24
 800e37c:	ec49 8b10 	vmov	d0, r8, r9
 800e380:	9300      	str	r3, [sp, #0]
 800e382:	6022      	str	r2, [r4, #0]
 800e384:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e388:	4628      	mov	r0, r5
 800e38a:	f7ff fecd 	bl	800e128 <__cvt>
 800e38e:	9b06      	ldr	r3, [sp, #24]
 800e390:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e392:	2b47      	cmp	r3, #71	; 0x47
 800e394:	4680      	mov	r8, r0
 800e396:	d108      	bne.n	800e3aa <_printf_float+0x142>
 800e398:	1cc8      	adds	r0, r1, #3
 800e39a:	db02      	blt.n	800e3a2 <_printf_float+0x13a>
 800e39c:	6863      	ldr	r3, [r4, #4]
 800e39e:	4299      	cmp	r1, r3
 800e3a0:	dd41      	ble.n	800e426 <_printf_float+0x1be>
 800e3a2:	f1ab 0b02 	sub.w	fp, fp, #2
 800e3a6:	fa5f fb8b 	uxtb.w	fp, fp
 800e3aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e3ae:	d820      	bhi.n	800e3f2 <_printf_float+0x18a>
 800e3b0:	3901      	subs	r1, #1
 800e3b2:	465a      	mov	r2, fp
 800e3b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e3b8:	9109      	str	r1, [sp, #36]	; 0x24
 800e3ba:	f7ff ff17 	bl	800e1ec <__exponent>
 800e3be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e3c0:	1813      	adds	r3, r2, r0
 800e3c2:	2a01      	cmp	r2, #1
 800e3c4:	4681      	mov	r9, r0
 800e3c6:	6123      	str	r3, [r4, #16]
 800e3c8:	dc02      	bgt.n	800e3d0 <_printf_float+0x168>
 800e3ca:	6822      	ldr	r2, [r4, #0]
 800e3cc:	07d2      	lsls	r2, r2, #31
 800e3ce:	d501      	bpl.n	800e3d4 <_printf_float+0x16c>
 800e3d0:	3301      	adds	r3, #1
 800e3d2:	6123      	str	r3, [r4, #16]
 800e3d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d09c      	beq.n	800e316 <_printf_float+0xae>
 800e3dc:	232d      	movs	r3, #45	; 0x2d
 800e3de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e3e2:	e798      	b.n	800e316 <_printf_float+0xae>
 800e3e4:	9a06      	ldr	r2, [sp, #24]
 800e3e6:	2a47      	cmp	r2, #71	; 0x47
 800e3e8:	d1be      	bne.n	800e368 <_printf_float+0x100>
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d1bc      	bne.n	800e368 <_printf_float+0x100>
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	e7b9      	b.n	800e366 <_printf_float+0xfe>
 800e3f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e3f6:	d118      	bne.n	800e42a <_printf_float+0x1c2>
 800e3f8:	2900      	cmp	r1, #0
 800e3fa:	6863      	ldr	r3, [r4, #4]
 800e3fc:	dd0b      	ble.n	800e416 <_printf_float+0x1ae>
 800e3fe:	6121      	str	r1, [r4, #16]
 800e400:	b913      	cbnz	r3, 800e408 <_printf_float+0x1a0>
 800e402:	6822      	ldr	r2, [r4, #0]
 800e404:	07d0      	lsls	r0, r2, #31
 800e406:	d502      	bpl.n	800e40e <_printf_float+0x1a6>
 800e408:	3301      	adds	r3, #1
 800e40a:	440b      	add	r3, r1
 800e40c:	6123      	str	r3, [r4, #16]
 800e40e:	65a1      	str	r1, [r4, #88]	; 0x58
 800e410:	f04f 0900 	mov.w	r9, #0
 800e414:	e7de      	b.n	800e3d4 <_printf_float+0x16c>
 800e416:	b913      	cbnz	r3, 800e41e <_printf_float+0x1b6>
 800e418:	6822      	ldr	r2, [r4, #0]
 800e41a:	07d2      	lsls	r2, r2, #31
 800e41c:	d501      	bpl.n	800e422 <_printf_float+0x1ba>
 800e41e:	3302      	adds	r3, #2
 800e420:	e7f4      	b.n	800e40c <_printf_float+0x1a4>
 800e422:	2301      	movs	r3, #1
 800e424:	e7f2      	b.n	800e40c <_printf_float+0x1a4>
 800e426:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e42a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e42c:	4299      	cmp	r1, r3
 800e42e:	db05      	blt.n	800e43c <_printf_float+0x1d4>
 800e430:	6823      	ldr	r3, [r4, #0]
 800e432:	6121      	str	r1, [r4, #16]
 800e434:	07d8      	lsls	r0, r3, #31
 800e436:	d5ea      	bpl.n	800e40e <_printf_float+0x1a6>
 800e438:	1c4b      	adds	r3, r1, #1
 800e43a:	e7e7      	b.n	800e40c <_printf_float+0x1a4>
 800e43c:	2900      	cmp	r1, #0
 800e43e:	bfd4      	ite	le
 800e440:	f1c1 0202 	rsble	r2, r1, #2
 800e444:	2201      	movgt	r2, #1
 800e446:	4413      	add	r3, r2
 800e448:	e7e0      	b.n	800e40c <_printf_float+0x1a4>
 800e44a:	6823      	ldr	r3, [r4, #0]
 800e44c:	055a      	lsls	r2, r3, #21
 800e44e:	d407      	bmi.n	800e460 <_printf_float+0x1f8>
 800e450:	6923      	ldr	r3, [r4, #16]
 800e452:	4642      	mov	r2, r8
 800e454:	4631      	mov	r1, r6
 800e456:	4628      	mov	r0, r5
 800e458:	47b8      	blx	r7
 800e45a:	3001      	adds	r0, #1
 800e45c:	d12c      	bne.n	800e4b8 <_printf_float+0x250>
 800e45e:	e764      	b.n	800e32a <_printf_float+0xc2>
 800e460:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e464:	f240 80e0 	bls.w	800e628 <_printf_float+0x3c0>
 800e468:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e46c:	2200      	movs	r2, #0
 800e46e:	2300      	movs	r3, #0
 800e470:	f7f2 fb02 	bl	8000a78 <__aeabi_dcmpeq>
 800e474:	2800      	cmp	r0, #0
 800e476:	d034      	beq.n	800e4e2 <_printf_float+0x27a>
 800e478:	4a37      	ldr	r2, [pc, #220]	; (800e558 <_printf_float+0x2f0>)
 800e47a:	2301      	movs	r3, #1
 800e47c:	4631      	mov	r1, r6
 800e47e:	4628      	mov	r0, r5
 800e480:	47b8      	blx	r7
 800e482:	3001      	adds	r0, #1
 800e484:	f43f af51 	beq.w	800e32a <_printf_float+0xc2>
 800e488:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e48c:	429a      	cmp	r2, r3
 800e48e:	db02      	blt.n	800e496 <_printf_float+0x22e>
 800e490:	6823      	ldr	r3, [r4, #0]
 800e492:	07d8      	lsls	r0, r3, #31
 800e494:	d510      	bpl.n	800e4b8 <_printf_float+0x250>
 800e496:	ee18 3a10 	vmov	r3, s16
 800e49a:	4652      	mov	r2, sl
 800e49c:	4631      	mov	r1, r6
 800e49e:	4628      	mov	r0, r5
 800e4a0:	47b8      	blx	r7
 800e4a2:	3001      	adds	r0, #1
 800e4a4:	f43f af41 	beq.w	800e32a <_printf_float+0xc2>
 800e4a8:	f04f 0800 	mov.w	r8, #0
 800e4ac:	f104 091a 	add.w	r9, r4, #26
 800e4b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4b2:	3b01      	subs	r3, #1
 800e4b4:	4543      	cmp	r3, r8
 800e4b6:	dc09      	bgt.n	800e4cc <_printf_float+0x264>
 800e4b8:	6823      	ldr	r3, [r4, #0]
 800e4ba:	079b      	lsls	r3, r3, #30
 800e4bc:	f100 8105 	bmi.w	800e6ca <_printf_float+0x462>
 800e4c0:	68e0      	ldr	r0, [r4, #12]
 800e4c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4c4:	4298      	cmp	r0, r3
 800e4c6:	bfb8      	it	lt
 800e4c8:	4618      	movlt	r0, r3
 800e4ca:	e730      	b.n	800e32e <_printf_float+0xc6>
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	464a      	mov	r2, r9
 800e4d0:	4631      	mov	r1, r6
 800e4d2:	4628      	mov	r0, r5
 800e4d4:	47b8      	blx	r7
 800e4d6:	3001      	adds	r0, #1
 800e4d8:	f43f af27 	beq.w	800e32a <_printf_float+0xc2>
 800e4dc:	f108 0801 	add.w	r8, r8, #1
 800e4e0:	e7e6      	b.n	800e4b0 <_printf_float+0x248>
 800e4e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	dc39      	bgt.n	800e55c <_printf_float+0x2f4>
 800e4e8:	4a1b      	ldr	r2, [pc, #108]	; (800e558 <_printf_float+0x2f0>)
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	4631      	mov	r1, r6
 800e4ee:	4628      	mov	r0, r5
 800e4f0:	47b8      	blx	r7
 800e4f2:	3001      	adds	r0, #1
 800e4f4:	f43f af19 	beq.w	800e32a <_printf_float+0xc2>
 800e4f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e4fc:	4313      	orrs	r3, r2
 800e4fe:	d102      	bne.n	800e506 <_printf_float+0x29e>
 800e500:	6823      	ldr	r3, [r4, #0]
 800e502:	07d9      	lsls	r1, r3, #31
 800e504:	d5d8      	bpl.n	800e4b8 <_printf_float+0x250>
 800e506:	ee18 3a10 	vmov	r3, s16
 800e50a:	4652      	mov	r2, sl
 800e50c:	4631      	mov	r1, r6
 800e50e:	4628      	mov	r0, r5
 800e510:	47b8      	blx	r7
 800e512:	3001      	adds	r0, #1
 800e514:	f43f af09 	beq.w	800e32a <_printf_float+0xc2>
 800e518:	f04f 0900 	mov.w	r9, #0
 800e51c:	f104 0a1a 	add.w	sl, r4, #26
 800e520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e522:	425b      	negs	r3, r3
 800e524:	454b      	cmp	r3, r9
 800e526:	dc01      	bgt.n	800e52c <_printf_float+0x2c4>
 800e528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e52a:	e792      	b.n	800e452 <_printf_float+0x1ea>
 800e52c:	2301      	movs	r3, #1
 800e52e:	4652      	mov	r2, sl
 800e530:	4631      	mov	r1, r6
 800e532:	4628      	mov	r0, r5
 800e534:	47b8      	blx	r7
 800e536:	3001      	adds	r0, #1
 800e538:	f43f aef7 	beq.w	800e32a <_printf_float+0xc2>
 800e53c:	f109 0901 	add.w	r9, r9, #1
 800e540:	e7ee      	b.n	800e520 <_printf_float+0x2b8>
 800e542:	bf00      	nop
 800e544:	7fefffff 	.word	0x7fefffff
 800e548:	08012bc8 	.word	0x08012bc8
 800e54c:	08012bcc 	.word	0x08012bcc
 800e550:	08012bd4 	.word	0x08012bd4
 800e554:	08012bd0 	.word	0x08012bd0
 800e558:	08012bd8 	.word	0x08012bd8
 800e55c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e55e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e560:	429a      	cmp	r2, r3
 800e562:	bfa8      	it	ge
 800e564:	461a      	movge	r2, r3
 800e566:	2a00      	cmp	r2, #0
 800e568:	4691      	mov	r9, r2
 800e56a:	dc37      	bgt.n	800e5dc <_printf_float+0x374>
 800e56c:	f04f 0b00 	mov.w	fp, #0
 800e570:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e574:	f104 021a 	add.w	r2, r4, #26
 800e578:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e57a:	9305      	str	r3, [sp, #20]
 800e57c:	eba3 0309 	sub.w	r3, r3, r9
 800e580:	455b      	cmp	r3, fp
 800e582:	dc33      	bgt.n	800e5ec <_printf_float+0x384>
 800e584:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e588:	429a      	cmp	r2, r3
 800e58a:	db3b      	blt.n	800e604 <_printf_float+0x39c>
 800e58c:	6823      	ldr	r3, [r4, #0]
 800e58e:	07da      	lsls	r2, r3, #31
 800e590:	d438      	bmi.n	800e604 <_printf_float+0x39c>
 800e592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e594:	9a05      	ldr	r2, [sp, #20]
 800e596:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e598:	1a9a      	subs	r2, r3, r2
 800e59a:	eba3 0901 	sub.w	r9, r3, r1
 800e59e:	4591      	cmp	r9, r2
 800e5a0:	bfa8      	it	ge
 800e5a2:	4691      	movge	r9, r2
 800e5a4:	f1b9 0f00 	cmp.w	r9, #0
 800e5a8:	dc35      	bgt.n	800e616 <_printf_float+0x3ae>
 800e5aa:	f04f 0800 	mov.w	r8, #0
 800e5ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e5b2:	f104 0a1a 	add.w	sl, r4, #26
 800e5b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e5ba:	1a9b      	subs	r3, r3, r2
 800e5bc:	eba3 0309 	sub.w	r3, r3, r9
 800e5c0:	4543      	cmp	r3, r8
 800e5c2:	f77f af79 	ble.w	800e4b8 <_printf_float+0x250>
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	4652      	mov	r2, sl
 800e5ca:	4631      	mov	r1, r6
 800e5cc:	4628      	mov	r0, r5
 800e5ce:	47b8      	blx	r7
 800e5d0:	3001      	adds	r0, #1
 800e5d2:	f43f aeaa 	beq.w	800e32a <_printf_float+0xc2>
 800e5d6:	f108 0801 	add.w	r8, r8, #1
 800e5da:	e7ec      	b.n	800e5b6 <_printf_float+0x34e>
 800e5dc:	4613      	mov	r3, r2
 800e5de:	4631      	mov	r1, r6
 800e5e0:	4642      	mov	r2, r8
 800e5e2:	4628      	mov	r0, r5
 800e5e4:	47b8      	blx	r7
 800e5e6:	3001      	adds	r0, #1
 800e5e8:	d1c0      	bne.n	800e56c <_printf_float+0x304>
 800e5ea:	e69e      	b.n	800e32a <_printf_float+0xc2>
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	4631      	mov	r1, r6
 800e5f0:	4628      	mov	r0, r5
 800e5f2:	9205      	str	r2, [sp, #20]
 800e5f4:	47b8      	blx	r7
 800e5f6:	3001      	adds	r0, #1
 800e5f8:	f43f ae97 	beq.w	800e32a <_printf_float+0xc2>
 800e5fc:	9a05      	ldr	r2, [sp, #20]
 800e5fe:	f10b 0b01 	add.w	fp, fp, #1
 800e602:	e7b9      	b.n	800e578 <_printf_float+0x310>
 800e604:	ee18 3a10 	vmov	r3, s16
 800e608:	4652      	mov	r2, sl
 800e60a:	4631      	mov	r1, r6
 800e60c:	4628      	mov	r0, r5
 800e60e:	47b8      	blx	r7
 800e610:	3001      	adds	r0, #1
 800e612:	d1be      	bne.n	800e592 <_printf_float+0x32a>
 800e614:	e689      	b.n	800e32a <_printf_float+0xc2>
 800e616:	9a05      	ldr	r2, [sp, #20]
 800e618:	464b      	mov	r3, r9
 800e61a:	4442      	add	r2, r8
 800e61c:	4631      	mov	r1, r6
 800e61e:	4628      	mov	r0, r5
 800e620:	47b8      	blx	r7
 800e622:	3001      	adds	r0, #1
 800e624:	d1c1      	bne.n	800e5aa <_printf_float+0x342>
 800e626:	e680      	b.n	800e32a <_printf_float+0xc2>
 800e628:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e62a:	2a01      	cmp	r2, #1
 800e62c:	dc01      	bgt.n	800e632 <_printf_float+0x3ca>
 800e62e:	07db      	lsls	r3, r3, #31
 800e630:	d538      	bpl.n	800e6a4 <_printf_float+0x43c>
 800e632:	2301      	movs	r3, #1
 800e634:	4642      	mov	r2, r8
 800e636:	4631      	mov	r1, r6
 800e638:	4628      	mov	r0, r5
 800e63a:	47b8      	blx	r7
 800e63c:	3001      	adds	r0, #1
 800e63e:	f43f ae74 	beq.w	800e32a <_printf_float+0xc2>
 800e642:	ee18 3a10 	vmov	r3, s16
 800e646:	4652      	mov	r2, sl
 800e648:	4631      	mov	r1, r6
 800e64a:	4628      	mov	r0, r5
 800e64c:	47b8      	blx	r7
 800e64e:	3001      	adds	r0, #1
 800e650:	f43f ae6b 	beq.w	800e32a <_printf_float+0xc2>
 800e654:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e658:	2200      	movs	r2, #0
 800e65a:	2300      	movs	r3, #0
 800e65c:	f7f2 fa0c 	bl	8000a78 <__aeabi_dcmpeq>
 800e660:	b9d8      	cbnz	r0, 800e69a <_printf_float+0x432>
 800e662:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e664:	f108 0201 	add.w	r2, r8, #1
 800e668:	3b01      	subs	r3, #1
 800e66a:	4631      	mov	r1, r6
 800e66c:	4628      	mov	r0, r5
 800e66e:	47b8      	blx	r7
 800e670:	3001      	adds	r0, #1
 800e672:	d10e      	bne.n	800e692 <_printf_float+0x42a>
 800e674:	e659      	b.n	800e32a <_printf_float+0xc2>
 800e676:	2301      	movs	r3, #1
 800e678:	4652      	mov	r2, sl
 800e67a:	4631      	mov	r1, r6
 800e67c:	4628      	mov	r0, r5
 800e67e:	47b8      	blx	r7
 800e680:	3001      	adds	r0, #1
 800e682:	f43f ae52 	beq.w	800e32a <_printf_float+0xc2>
 800e686:	f108 0801 	add.w	r8, r8, #1
 800e68a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e68c:	3b01      	subs	r3, #1
 800e68e:	4543      	cmp	r3, r8
 800e690:	dcf1      	bgt.n	800e676 <_printf_float+0x40e>
 800e692:	464b      	mov	r3, r9
 800e694:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e698:	e6dc      	b.n	800e454 <_printf_float+0x1ec>
 800e69a:	f04f 0800 	mov.w	r8, #0
 800e69e:	f104 0a1a 	add.w	sl, r4, #26
 800e6a2:	e7f2      	b.n	800e68a <_printf_float+0x422>
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	4642      	mov	r2, r8
 800e6a8:	e7df      	b.n	800e66a <_printf_float+0x402>
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	464a      	mov	r2, r9
 800e6ae:	4631      	mov	r1, r6
 800e6b0:	4628      	mov	r0, r5
 800e6b2:	47b8      	blx	r7
 800e6b4:	3001      	adds	r0, #1
 800e6b6:	f43f ae38 	beq.w	800e32a <_printf_float+0xc2>
 800e6ba:	f108 0801 	add.w	r8, r8, #1
 800e6be:	68e3      	ldr	r3, [r4, #12]
 800e6c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e6c2:	1a5b      	subs	r3, r3, r1
 800e6c4:	4543      	cmp	r3, r8
 800e6c6:	dcf0      	bgt.n	800e6aa <_printf_float+0x442>
 800e6c8:	e6fa      	b.n	800e4c0 <_printf_float+0x258>
 800e6ca:	f04f 0800 	mov.w	r8, #0
 800e6ce:	f104 0919 	add.w	r9, r4, #25
 800e6d2:	e7f4      	b.n	800e6be <_printf_float+0x456>

0800e6d4 <_printf_common>:
 800e6d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6d8:	4616      	mov	r6, r2
 800e6da:	4699      	mov	r9, r3
 800e6dc:	688a      	ldr	r2, [r1, #8]
 800e6de:	690b      	ldr	r3, [r1, #16]
 800e6e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e6e4:	4293      	cmp	r3, r2
 800e6e6:	bfb8      	it	lt
 800e6e8:	4613      	movlt	r3, r2
 800e6ea:	6033      	str	r3, [r6, #0]
 800e6ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e6f0:	4607      	mov	r7, r0
 800e6f2:	460c      	mov	r4, r1
 800e6f4:	b10a      	cbz	r2, 800e6fa <_printf_common+0x26>
 800e6f6:	3301      	adds	r3, #1
 800e6f8:	6033      	str	r3, [r6, #0]
 800e6fa:	6823      	ldr	r3, [r4, #0]
 800e6fc:	0699      	lsls	r1, r3, #26
 800e6fe:	bf42      	ittt	mi
 800e700:	6833      	ldrmi	r3, [r6, #0]
 800e702:	3302      	addmi	r3, #2
 800e704:	6033      	strmi	r3, [r6, #0]
 800e706:	6825      	ldr	r5, [r4, #0]
 800e708:	f015 0506 	ands.w	r5, r5, #6
 800e70c:	d106      	bne.n	800e71c <_printf_common+0x48>
 800e70e:	f104 0a19 	add.w	sl, r4, #25
 800e712:	68e3      	ldr	r3, [r4, #12]
 800e714:	6832      	ldr	r2, [r6, #0]
 800e716:	1a9b      	subs	r3, r3, r2
 800e718:	42ab      	cmp	r3, r5
 800e71a:	dc26      	bgt.n	800e76a <_printf_common+0x96>
 800e71c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e720:	1e13      	subs	r3, r2, #0
 800e722:	6822      	ldr	r2, [r4, #0]
 800e724:	bf18      	it	ne
 800e726:	2301      	movne	r3, #1
 800e728:	0692      	lsls	r2, r2, #26
 800e72a:	d42b      	bmi.n	800e784 <_printf_common+0xb0>
 800e72c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e730:	4649      	mov	r1, r9
 800e732:	4638      	mov	r0, r7
 800e734:	47c0      	blx	r8
 800e736:	3001      	adds	r0, #1
 800e738:	d01e      	beq.n	800e778 <_printf_common+0xa4>
 800e73a:	6823      	ldr	r3, [r4, #0]
 800e73c:	68e5      	ldr	r5, [r4, #12]
 800e73e:	6832      	ldr	r2, [r6, #0]
 800e740:	f003 0306 	and.w	r3, r3, #6
 800e744:	2b04      	cmp	r3, #4
 800e746:	bf08      	it	eq
 800e748:	1aad      	subeq	r5, r5, r2
 800e74a:	68a3      	ldr	r3, [r4, #8]
 800e74c:	6922      	ldr	r2, [r4, #16]
 800e74e:	bf0c      	ite	eq
 800e750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e754:	2500      	movne	r5, #0
 800e756:	4293      	cmp	r3, r2
 800e758:	bfc4      	itt	gt
 800e75a:	1a9b      	subgt	r3, r3, r2
 800e75c:	18ed      	addgt	r5, r5, r3
 800e75e:	2600      	movs	r6, #0
 800e760:	341a      	adds	r4, #26
 800e762:	42b5      	cmp	r5, r6
 800e764:	d11a      	bne.n	800e79c <_printf_common+0xc8>
 800e766:	2000      	movs	r0, #0
 800e768:	e008      	b.n	800e77c <_printf_common+0xa8>
 800e76a:	2301      	movs	r3, #1
 800e76c:	4652      	mov	r2, sl
 800e76e:	4649      	mov	r1, r9
 800e770:	4638      	mov	r0, r7
 800e772:	47c0      	blx	r8
 800e774:	3001      	adds	r0, #1
 800e776:	d103      	bne.n	800e780 <_printf_common+0xac>
 800e778:	f04f 30ff 	mov.w	r0, #4294967295
 800e77c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e780:	3501      	adds	r5, #1
 800e782:	e7c6      	b.n	800e712 <_printf_common+0x3e>
 800e784:	18e1      	adds	r1, r4, r3
 800e786:	1c5a      	adds	r2, r3, #1
 800e788:	2030      	movs	r0, #48	; 0x30
 800e78a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e78e:	4422      	add	r2, r4
 800e790:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e794:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e798:	3302      	adds	r3, #2
 800e79a:	e7c7      	b.n	800e72c <_printf_common+0x58>
 800e79c:	2301      	movs	r3, #1
 800e79e:	4622      	mov	r2, r4
 800e7a0:	4649      	mov	r1, r9
 800e7a2:	4638      	mov	r0, r7
 800e7a4:	47c0      	blx	r8
 800e7a6:	3001      	adds	r0, #1
 800e7a8:	d0e6      	beq.n	800e778 <_printf_common+0xa4>
 800e7aa:	3601      	adds	r6, #1
 800e7ac:	e7d9      	b.n	800e762 <_printf_common+0x8e>
	...

0800e7b0 <_printf_i>:
 800e7b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e7b4:	7e0f      	ldrb	r7, [r1, #24]
 800e7b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e7b8:	2f78      	cmp	r7, #120	; 0x78
 800e7ba:	4691      	mov	r9, r2
 800e7bc:	4680      	mov	r8, r0
 800e7be:	460c      	mov	r4, r1
 800e7c0:	469a      	mov	sl, r3
 800e7c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e7c6:	d807      	bhi.n	800e7d8 <_printf_i+0x28>
 800e7c8:	2f62      	cmp	r7, #98	; 0x62
 800e7ca:	d80a      	bhi.n	800e7e2 <_printf_i+0x32>
 800e7cc:	2f00      	cmp	r7, #0
 800e7ce:	f000 80d8 	beq.w	800e982 <_printf_i+0x1d2>
 800e7d2:	2f58      	cmp	r7, #88	; 0x58
 800e7d4:	f000 80a3 	beq.w	800e91e <_printf_i+0x16e>
 800e7d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e7dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e7e0:	e03a      	b.n	800e858 <_printf_i+0xa8>
 800e7e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e7e6:	2b15      	cmp	r3, #21
 800e7e8:	d8f6      	bhi.n	800e7d8 <_printf_i+0x28>
 800e7ea:	a101      	add	r1, pc, #4	; (adr r1, 800e7f0 <_printf_i+0x40>)
 800e7ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e7f0:	0800e849 	.word	0x0800e849
 800e7f4:	0800e85d 	.word	0x0800e85d
 800e7f8:	0800e7d9 	.word	0x0800e7d9
 800e7fc:	0800e7d9 	.word	0x0800e7d9
 800e800:	0800e7d9 	.word	0x0800e7d9
 800e804:	0800e7d9 	.word	0x0800e7d9
 800e808:	0800e85d 	.word	0x0800e85d
 800e80c:	0800e7d9 	.word	0x0800e7d9
 800e810:	0800e7d9 	.word	0x0800e7d9
 800e814:	0800e7d9 	.word	0x0800e7d9
 800e818:	0800e7d9 	.word	0x0800e7d9
 800e81c:	0800e969 	.word	0x0800e969
 800e820:	0800e88d 	.word	0x0800e88d
 800e824:	0800e94b 	.word	0x0800e94b
 800e828:	0800e7d9 	.word	0x0800e7d9
 800e82c:	0800e7d9 	.word	0x0800e7d9
 800e830:	0800e98b 	.word	0x0800e98b
 800e834:	0800e7d9 	.word	0x0800e7d9
 800e838:	0800e88d 	.word	0x0800e88d
 800e83c:	0800e7d9 	.word	0x0800e7d9
 800e840:	0800e7d9 	.word	0x0800e7d9
 800e844:	0800e953 	.word	0x0800e953
 800e848:	682b      	ldr	r3, [r5, #0]
 800e84a:	1d1a      	adds	r2, r3, #4
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	602a      	str	r2, [r5, #0]
 800e850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e858:	2301      	movs	r3, #1
 800e85a:	e0a3      	b.n	800e9a4 <_printf_i+0x1f4>
 800e85c:	6820      	ldr	r0, [r4, #0]
 800e85e:	6829      	ldr	r1, [r5, #0]
 800e860:	0606      	lsls	r6, r0, #24
 800e862:	f101 0304 	add.w	r3, r1, #4
 800e866:	d50a      	bpl.n	800e87e <_printf_i+0xce>
 800e868:	680e      	ldr	r6, [r1, #0]
 800e86a:	602b      	str	r3, [r5, #0]
 800e86c:	2e00      	cmp	r6, #0
 800e86e:	da03      	bge.n	800e878 <_printf_i+0xc8>
 800e870:	232d      	movs	r3, #45	; 0x2d
 800e872:	4276      	negs	r6, r6
 800e874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e878:	485e      	ldr	r0, [pc, #376]	; (800e9f4 <_printf_i+0x244>)
 800e87a:	230a      	movs	r3, #10
 800e87c:	e019      	b.n	800e8b2 <_printf_i+0x102>
 800e87e:	680e      	ldr	r6, [r1, #0]
 800e880:	602b      	str	r3, [r5, #0]
 800e882:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e886:	bf18      	it	ne
 800e888:	b236      	sxthne	r6, r6
 800e88a:	e7ef      	b.n	800e86c <_printf_i+0xbc>
 800e88c:	682b      	ldr	r3, [r5, #0]
 800e88e:	6820      	ldr	r0, [r4, #0]
 800e890:	1d19      	adds	r1, r3, #4
 800e892:	6029      	str	r1, [r5, #0]
 800e894:	0601      	lsls	r1, r0, #24
 800e896:	d501      	bpl.n	800e89c <_printf_i+0xec>
 800e898:	681e      	ldr	r6, [r3, #0]
 800e89a:	e002      	b.n	800e8a2 <_printf_i+0xf2>
 800e89c:	0646      	lsls	r6, r0, #25
 800e89e:	d5fb      	bpl.n	800e898 <_printf_i+0xe8>
 800e8a0:	881e      	ldrh	r6, [r3, #0]
 800e8a2:	4854      	ldr	r0, [pc, #336]	; (800e9f4 <_printf_i+0x244>)
 800e8a4:	2f6f      	cmp	r7, #111	; 0x6f
 800e8a6:	bf0c      	ite	eq
 800e8a8:	2308      	moveq	r3, #8
 800e8aa:	230a      	movne	r3, #10
 800e8ac:	2100      	movs	r1, #0
 800e8ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e8b2:	6865      	ldr	r5, [r4, #4]
 800e8b4:	60a5      	str	r5, [r4, #8]
 800e8b6:	2d00      	cmp	r5, #0
 800e8b8:	bfa2      	ittt	ge
 800e8ba:	6821      	ldrge	r1, [r4, #0]
 800e8bc:	f021 0104 	bicge.w	r1, r1, #4
 800e8c0:	6021      	strge	r1, [r4, #0]
 800e8c2:	b90e      	cbnz	r6, 800e8c8 <_printf_i+0x118>
 800e8c4:	2d00      	cmp	r5, #0
 800e8c6:	d04d      	beq.n	800e964 <_printf_i+0x1b4>
 800e8c8:	4615      	mov	r5, r2
 800e8ca:	fbb6 f1f3 	udiv	r1, r6, r3
 800e8ce:	fb03 6711 	mls	r7, r3, r1, r6
 800e8d2:	5dc7      	ldrb	r7, [r0, r7]
 800e8d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e8d8:	4637      	mov	r7, r6
 800e8da:	42bb      	cmp	r3, r7
 800e8dc:	460e      	mov	r6, r1
 800e8de:	d9f4      	bls.n	800e8ca <_printf_i+0x11a>
 800e8e0:	2b08      	cmp	r3, #8
 800e8e2:	d10b      	bne.n	800e8fc <_printf_i+0x14c>
 800e8e4:	6823      	ldr	r3, [r4, #0]
 800e8e6:	07de      	lsls	r6, r3, #31
 800e8e8:	d508      	bpl.n	800e8fc <_printf_i+0x14c>
 800e8ea:	6923      	ldr	r3, [r4, #16]
 800e8ec:	6861      	ldr	r1, [r4, #4]
 800e8ee:	4299      	cmp	r1, r3
 800e8f0:	bfde      	ittt	le
 800e8f2:	2330      	movle	r3, #48	; 0x30
 800e8f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e8f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e8fc:	1b52      	subs	r2, r2, r5
 800e8fe:	6122      	str	r2, [r4, #16]
 800e900:	f8cd a000 	str.w	sl, [sp]
 800e904:	464b      	mov	r3, r9
 800e906:	aa03      	add	r2, sp, #12
 800e908:	4621      	mov	r1, r4
 800e90a:	4640      	mov	r0, r8
 800e90c:	f7ff fee2 	bl	800e6d4 <_printf_common>
 800e910:	3001      	adds	r0, #1
 800e912:	d14c      	bne.n	800e9ae <_printf_i+0x1fe>
 800e914:	f04f 30ff 	mov.w	r0, #4294967295
 800e918:	b004      	add	sp, #16
 800e91a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e91e:	4835      	ldr	r0, [pc, #212]	; (800e9f4 <_printf_i+0x244>)
 800e920:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e924:	6829      	ldr	r1, [r5, #0]
 800e926:	6823      	ldr	r3, [r4, #0]
 800e928:	f851 6b04 	ldr.w	r6, [r1], #4
 800e92c:	6029      	str	r1, [r5, #0]
 800e92e:	061d      	lsls	r5, r3, #24
 800e930:	d514      	bpl.n	800e95c <_printf_i+0x1ac>
 800e932:	07df      	lsls	r7, r3, #31
 800e934:	bf44      	itt	mi
 800e936:	f043 0320 	orrmi.w	r3, r3, #32
 800e93a:	6023      	strmi	r3, [r4, #0]
 800e93c:	b91e      	cbnz	r6, 800e946 <_printf_i+0x196>
 800e93e:	6823      	ldr	r3, [r4, #0]
 800e940:	f023 0320 	bic.w	r3, r3, #32
 800e944:	6023      	str	r3, [r4, #0]
 800e946:	2310      	movs	r3, #16
 800e948:	e7b0      	b.n	800e8ac <_printf_i+0xfc>
 800e94a:	6823      	ldr	r3, [r4, #0]
 800e94c:	f043 0320 	orr.w	r3, r3, #32
 800e950:	6023      	str	r3, [r4, #0]
 800e952:	2378      	movs	r3, #120	; 0x78
 800e954:	4828      	ldr	r0, [pc, #160]	; (800e9f8 <_printf_i+0x248>)
 800e956:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e95a:	e7e3      	b.n	800e924 <_printf_i+0x174>
 800e95c:	0659      	lsls	r1, r3, #25
 800e95e:	bf48      	it	mi
 800e960:	b2b6      	uxthmi	r6, r6
 800e962:	e7e6      	b.n	800e932 <_printf_i+0x182>
 800e964:	4615      	mov	r5, r2
 800e966:	e7bb      	b.n	800e8e0 <_printf_i+0x130>
 800e968:	682b      	ldr	r3, [r5, #0]
 800e96a:	6826      	ldr	r6, [r4, #0]
 800e96c:	6961      	ldr	r1, [r4, #20]
 800e96e:	1d18      	adds	r0, r3, #4
 800e970:	6028      	str	r0, [r5, #0]
 800e972:	0635      	lsls	r5, r6, #24
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	d501      	bpl.n	800e97c <_printf_i+0x1cc>
 800e978:	6019      	str	r1, [r3, #0]
 800e97a:	e002      	b.n	800e982 <_printf_i+0x1d2>
 800e97c:	0670      	lsls	r0, r6, #25
 800e97e:	d5fb      	bpl.n	800e978 <_printf_i+0x1c8>
 800e980:	8019      	strh	r1, [r3, #0]
 800e982:	2300      	movs	r3, #0
 800e984:	6123      	str	r3, [r4, #16]
 800e986:	4615      	mov	r5, r2
 800e988:	e7ba      	b.n	800e900 <_printf_i+0x150>
 800e98a:	682b      	ldr	r3, [r5, #0]
 800e98c:	1d1a      	adds	r2, r3, #4
 800e98e:	602a      	str	r2, [r5, #0]
 800e990:	681d      	ldr	r5, [r3, #0]
 800e992:	6862      	ldr	r2, [r4, #4]
 800e994:	2100      	movs	r1, #0
 800e996:	4628      	mov	r0, r5
 800e998:	f7f1 fbfa 	bl	8000190 <memchr>
 800e99c:	b108      	cbz	r0, 800e9a2 <_printf_i+0x1f2>
 800e99e:	1b40      	subs	r0, r0, r5
 800e9a0:	6060      	str	r0, [r4, #4]
 800e9a2:	6863      	ldr	r3, [r4, #4]
 800e9a4:	6123      	str	r3, [r4, #16]
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e9ac:	e7a8      	b.n	800e900 <_printf_i+0x150>
 800e9ae:	6923      	ldr	r3, [r4, #16]
 800e9b0:	462a      	mov	r2, r5
 800e9b2:	4649      	mov	r1, r9
 800e9b4:	4640      	mov	r0, r8
 800e9b6:	47d0      	blx	sl
 800e9b8:	3001      	adds	r0, #1
 800e9ba:	d0ab      	beq.n	800e914 <_printf_i+0x164>
 800e9bc:	6823      	ldr	r3, [r4, #0]
 800e9be:	079b      	lsls	r3, r3, #30
 800e9c0:	d413      	bmi.n	800e9ea <_printf_i+0x23a>
 800e9c2:	68e0      	ldr	r0, [r4, #12]
 800e9c4:	9b03      	ldr	r3, [sp, #12]
 800e9c6:	4298      	cmp	r0, r3
 800e9c8:	bfb8      	it	lt
 800e9ca:	4618      	movlt	r0, r3
 800e9cc:	e7a4      	b.n	800e918 <_printf_i+0x168>
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	4632      	mov	r2, r6
 800e9d2:	4649      	mov	r1, r9
 800e9d4:	4640      	mov	r0, r8
 800e9d6:	47d0      	blx	sl
 800e9d8:	3001      	adds	r0, #1
 800e9da:	d09b      	beq.n	800e914 <_printf_i+0x164>
 800e9dc:	3501      	adds	r5, #1
 800e9de:	68e3      	ldr	r3, [r4, #12]
 800e9e0:	9903      	ldr	r1, [sp, #12]
 800e9e2:	1a5b      	subs	r3, r3, r1
 800e9e4:	42ab      	cmp	r3, r5
 800e9e6:	dcf2      	bgt.n	800e9ce <_printf_i+0x21e>
 800e9e8:	e7eb      	b.n	800e9c2 <_printf_i+0x212>
 800e9ea:	2500      	movs	r5, #0
 800e9ec:	f104 0619 	add.w	r6, r4, #25
 800e9f0:	e7f5      	b.n	800e9de <_printf_i+0x22e>
 800e9f2:	bf00      	nop
 800e9f4:	08012bda 	.word	0x08012bda
 800e9f8:	08012beb 	.word	0x08012beb

0800e9fc <_scanf_float>:
 800e9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea00:	b087      	sub	sp, #28
 800ea02:	4617      	mov	r7, r2
 800ea04:	9303      	str	r3, [sp, #12]
 800ea06:	688b      	ldr	r3, [r1, #8]
 800ea08:	1e5a      	subs	r2, r3, #1
 800ea0a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ea0e:	bf83      	ittte	hi
 800ea10:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ea14:	195b      	addhi	r3, r3, r5
 800ea16:	9302      	strhi	r3, [sp, #8]
 800ea18:	2300      	movls	r3, #0
 800ea1a:	bf86      	itte	hi
 800ea1c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ea20:	608b      	strhi	r3, [r1, #8]
 800ea22:	9302      	strls	r3, [sp, #8]
 800ea24:	680b      	ldr	r3, [r1, #0]
 800ea26:	468b      	mov	fp, r1
 800ea28:	2500      	movs	r5, #0
 800ea2a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ea2e:	f84b 3b1c 	str.w	r3, [fp], #28
 800ea32:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ea36:	4680      	mov	r8, r0
 800ea38:	460c      	mov	r4, r1
 800ea3a:	465e      	mov	r6, fp
 800ea3c:	46aa      	mov	sl, r5
 800ea3e:	46a9      	mov	r9, r5
 800ea40:	9501      	str	r5, [sp, #4]
 800ea42:	68a2      	ldr	r2, [r4, #8]
 800ea44:	b152      	cbz	r2, 800ea5c <_scanf_float+0x60>
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	781b      	ldrb	r3, [r3, #0]
 800ea4a:	2b4e      	cmp	r3, #78	; 0x4e
 800ea4c:	d864      	bhi.n	800eb18 <_scanf_float+0x11c>
 800ea4e:	2b40      	cmp	r3, #64	; 0x40
 800ea50:	d83c      	bhi.n	800eacc <_scanf_float+0xd0>
 800ea52:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ea56:	b2c8      	uxtb	r0, r1
 800ea58:	280e      	cmp	r0, #14
 800ea5a:	d93a      	bls.n	800ead2 <_scanf_float+0xd6>
 800ea5c:	f1b9 0f00 	cmp.w	r9, #0
 800ea60:	d003      	beq.n	800ea6a <_scanf_float+0x6e>
 800ea62:	6823      	ldr	r3, [r4, #0]
 800ea64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ea68:	6023      	str	r3, [r4, #0]
 800ea6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ea6e:	f1ba 0f01 	cmp.w	sl, #1
 800ea72:	f200 8113 	bhi.w	800ec9c <_scanf_float+0x2a0>
 800ea76:	455e      	cmp	r6, fp
 800ea78:	f200 8105 	bhi.w	800ec86 <_scanf_float+0x28a>
 800ea7c:	2501      	movs	r5, #1
 800ea7e:	4628      	mov	r0, r5
 800ea80:	b007      	add	sp, #28
 800ea82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea86:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ea8a:	2a0d      	cmp	r2, #13
 800ea8c:	d8e6      	bhi.n	800ea5c <_scanf_float+0x60>
 800ea8e:	a101      	add	r1, pc, #4	; (adr r1, 800ea94 <_scanf_float+0x98>)
 800ea90:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ea94:	0800ebd3 	.word	0x0800ebd3
 800ea98:	0800ea5d 	.word	0x0800ea5d
 800ea9c:	0800ea5d 	.word	0x0800ea5d
 800eaa0:	0800ea5d 	.word	0x0800ea5d
 800eaa4:	0800ec33 	.word	0x0800ec33
 800eaa8:	0800ec0b 	.word	0x0800ec0b
 800eaac:	0800ea5d 	.word	0x0800ea5d
 800eab0:	0800ea5d 	.word	0x0800ea5d
 800eab4:	0800ebe1 	.word	0x0800ebe1
 800eab8:	0800ea5d 	.word	0x0800ea5d
 800eabc:	0800ea5d 	.word	0x0800ea5d
 800eac0:	0800ea5d 	.word	0x0800ea5d
 800eac4:	0800ea5d 	.word	0x0800ea5d
 800eac8:	0800eb99 	.word	0x0800eb99
 800eacc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ead0:	e7db      	b.n	800ea8a <_scanf_float+0x8e>
 800ead2:	290e      	cmp	r1, #14
 800ead4:	d8c2      	bhi.n	800ea5c <_scanf_float+0x60>
 800ead6:	a001      	add	r0, pc, #4	; (adr r0, 800eadc <_scanf_float+0xe0>)
 800ead8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800eadc:	0800eb8b 	.word	0x0800eb8b
 800eae0:	0800ea5d 	.word	0x0800ea5d
 800eae4:	0800eb8b 	.word	0x0800eb8b
 800eae8:	0800ec1f 	.word	0x0800ec1f
 800eaec:	0800ea5d 	.word	0x0800ea5d
 800eaf0:	0800eb39 	.word	0x0800eb39
 800eaf4:	0800eb75 	.word	0x0800eb75
 800eaf8:	0800eb75 	.word	0x0800eb75
 800eafc:	0800eb75 	.word	0x0800eb75
 800eb00:	0800eb75 	.word	0x0800eb75
 800eb04:	0800eb75 	.word	0x0800eb75
 800eb08:	0800eb75 	.word	0x0800eb75
 800eb0c:	0800eb75 	.word	0x0800eb75
 800eb10:	0800eb75 	.word	0x0800eb75
 800eb14:	0800eb75 	.word	0x0800eb75
 800eb18:	2b6e      	cmp	r3, #110	; 0x6e
 800eb1a:	d809      	bhi.n	800eb30 <_scanf_float+0x134>
 800eb1c:	2b60      	cmp	r3, #96	; 0x60
 800eb1e:	d8b2      	bhi.n	800ea86 <_scanf_float+0x8a>
 800eb20:	2b54      	cmp	r3, #84	; 0x54
 800eb22:	d077      	beq.n	800ec14 <_scanf_float+0x218>
 800eb24:	2b59      	cmp	r3, #89	; 0x59
 800eb26:	d199      	bne.n	800ea5c <_scanf_float+0x60>
 800eb28:	2d07      	cmp	r5, #7
 800eb2a:	d197      	bne.n	800ea5c <_scanf_float+0x60>
 800eb2c:	2508      	movs	r5, #8
 800eb2e:	e029      	b.n	800eb84 <_scanf_float+0x188>
 800eb30:	2b74      	cmp	r3, #116	; 0x74
 800eb32:	d06f      	beq.n	800ec14 <_scanf_float+0x218>
 800eb34:	2b79      	cmp	r3, #121	; 0x79
 800eb36:	e7f6      	b.n	800eb26 <_scanf_float+0x12a>
 800eb38:	6821      	ldr	r1, [r4, #0]
 800eb3a:	05c8      	lsls	r0, r1, #23
 800eb3c:	d51a      	bpl.n	800eb74 <_scanf_float+0x178>
 800eb3e:	9b02      	ldr	r3, [sp, #8]
 800eb40:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800eb44:	6021      	str	r1, [r4, #0]
 800eb46:	f109 0901 	add.w	r9, r9, #1
 800eb4a:	b11b      	cbz	r3, 800eb54 <_scanf_float+0x158>
 800eb4c:	3b01      	subs	r3, #1
 800eb4e:	3201      	adds	r2, #1
 800eb50:	9302      	str	r3, [sp, #8]
 800eb52:	60a2      	str	r2, [r4, #8]
 800eb54:	68a3      	ldr	r3, [r4, #8]
 800eb56:	3b01      	subs	r3, #1
 800eb58:	60a3      	str	r3, [r4, #8]
 800eb5a:	6923      	ldr	r3, [r4, #16]
 800eb5c:	3301      	adds	r3, #1
 800eb5e:	6123      	str	r3, [r4, #16]
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	3b01      	subs	r3, #1
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	607b      	str	r3, [r7, #4]
 800eb68:	f340 8084 	ble.w	800ec74 <_scanf_float+0x278>
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	3301      	adds	r3, #1
 800eb70:	603b      	str	r3, [r7, #0]
 800eb72:	e766      	b.n	800ea42 <_scanf_float+0x46>
 800eb74:	eb1a 0f05 	cmn.w	sl, r5
 800eb78:	f47f af70 	bne.w	800ea5c <_scanf_float+0x60>
 800eb7c:	6822      	ldr	r2, [r4, #0]
 800eb7e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800eb82:	6022      	str	r2, [r4, #0]
 800eb84:	f806 3b01 	strb.w	r3, [r6], #1
 800eb88:	e7e4      	b.n	800eb54 <_scanf_float+0x158>
 800eb8a:	6822      	ldr	r2, [r4, #0]
 800eb8c:	0610      	lsls	r0, r2, #24
 800eb8e:	f57f af65 	bpl.w	800ea5c <_scanf_float+0x60>
 800eb92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eb96:	e7f4      	b.n	800eb82 <_scanf_float+0x186>
 800eb98:	f1ba 0f00 	cmp.w	sl, #0
 800eb9c:	d10e      	bne.n	800ebbc <_scanf_float+0x1c0>
 800eb9e:	f1b9 0f00 	cmp.w	r9, #0
 800eba2:	d10e      	bne.n	800ebc2 <_scanf_float+0x1c6>
 800eba4:	6822      	ldr	r2, [r4, #0]
 800eba6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ebaa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ebae:	d108      	bne.n	800ebc2 <_scanf_float+0x1c6>
 800ebb0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ebb4:	6022      	str	r2, [r4, #0]
 800ebb6:	f04f 0a01 	mov.w	sl, #1
 800ebba:	e7e3      	b.n	800eb84 <_scanf_float+0x188>
 800ebbc:	f1ba 0f02 	cmp.w	sl, #2
 800ebc0:	d055      	beq.n	800ec6e <_scanf_float+0x272>
 800ebc2:	2d01      	cmp	r5, #1
 800ebc4:	d002      	beq.n	800ebcc <_scanf_float+0x1d0>
 800ebc6:	2d04      	cmp	r5, #4
 800ebc8:	f47f af48 	bne.w	800ea5c <_scanf_float+0x60>
 800ebcc:	3501      	adds	r5, #1
 800ebce:	b2ed      	uxtb	r5, r5
 800ebd0:	e7d8      	b.n	800eb84 <_scanf_float+0x188>
 800ebd2:	f1ba 0f01 	cmp.w	sl, #1
 800ebd6:	f47f af41 	bne.w	800ea5c <_scanf_float+0x60>
 800ebda:	f04f 0a02 	mov.w	sl, #2
 800ebde:	e7d1      	b.n	800eb84 <_scanf_float+0x188>
 800ebe0:	b97d      	cbnz	r5, 800ec02 <_scanf_float+0x206>
 800ebe2:	f1b9 0f00 	cmp.w	r9, #0
 800ebe6:	f47f af3c 	bne.w	800ea62 <_scanf_float+0x66>
 800ebea:	6822      	ldr	r2, [r4, #0]
 800ebec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ebf0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ebf4:	f47f af39 	bne.w	800ea6a <_scanf_float+0x6e>
 800ebf8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ebfc:	6022      	str	r2, [r4, #0]
 800ebfe:	2501      	movs	r5, #1
 800ec00:	e7c0      	b.n	800eb84 <_scanf_float+0x188>
 800ec02:	2d03      	cmp	r5, #3
 800ec04:	d0e2      	beq.n	800ebcc <_scanf_float+0x1d0>
 800ec06:	2d05      	cmp	r5, #5
 800ec08:	e7de      	b.n	800ebc8 <_scanf_float+0x1cc>
 800ec0a:	2d02      	cmp	r5, #2
 800ec0c:	f47f af26 	bne.w	800ea5c <_scanf_float+0x60>
 800ec10:	2503      	movs	r5, #3
 800ec12:	e7b7      	b.n	800eb84 <_scanf_float+0x188>
 800ec14:	2d06      	cmp	r5, #6
 800ec16:	f47f af21 	bne.w	800ea5c <_scanf_float+0x60>
 800ec1a:	2507      	movs	r5, #7
 800ec1c:	e7b2      	b.n	800eb84 <_scanf_float+0x188>
 800ec1e:	6822      	ldr	r2, [r4, #0]
 800ec20:	0591      	lsls	r1, r2, #22
 800ec22:	f57f af1b 	bpl.w	800ea5c <_scanf_float+0x60>
 800ec26:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ec2a:	6022      	str	r2, [r4, #0]
 800ec2c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ec30:	e7a8      	b.n	800eb84 <_scanf_float+0x188>
 800ec32:	6822      	ldr	r2, [r4, #0]
 800ec34:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ec38:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ec3c:	d006      	beq.n	800ec4c <_scanf_float+0x250>
 800ec3e:	0550      	lsls	r0, r2, #21
 800ec40:	f57f af0c 	bpl.w	800ea5c <_scanf_float+0x60>
 800ec44:	f1b9 0f00 	cmp.w	r9, #0
 800ec48:	f43f af0f 	beq.w	800ea6a <_scanf_float+0x6e>
 800ec4c:	0591      	lsls	r1, r2, #22
 800ec4e:	bf58      	it	pl
 800ec50:	9901      	ldrpl	r1, [sp, #4]
 800ec52:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ec56:	bf58      	it	pl
 800ec58:	eba9 0101 	subpl.w	r1, r9, r1
 800ec5c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ec60:	bf58      	it	pl
 800ec62:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ec66:	6022      	str	r2, [r4, #0]
 800ec68:	f04f 0900 	mov.w	r9, #0
 800ec6c:	e78a      	b.n	800eb84 <_scanf_float+0x188>
 800ec6e:	f04f 0a03 	mov.w	sl, #3
 800ec72:	e787      	b.n	800eb84 <_scanf_float+0x188>
 800ec74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ec78:	4639      	mov	r1, r7
 800ec7a:	4640      	mov	r0, r8
 800ec7c:	4798      	blx	r3
 800ec7e:	2800      	cmp	r0, #0
 800ec80:	f43f aedf 	beq.w	800ea42 <_scanf_float+0x46>
 800ec84:	e6ea      	b.n	800ea5c <_scanf_float+0x60>
 800ec86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ec8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ec8e:	463a      	mov	r2, r7
 800ec90:	4640      	mov	r0, r8
 800ec92:	4798      	blx	r3
 800ec94:	6923      	ldr	r3, [r4, #16]
 800ec96:	3b01      	subs	r3, #1
 800ec98:	6123      	str	r3, [r4, #16]
 800ec9a:	e6ec      	b.n	800ea76 <_scanf_float+0x7a>
 800ec9c:	1e6b      	subs	r3, r5, #1
 800ec9e:	2b06      	cmp	r3, #6
 800eca0:	d825      	bhi.n	800ecee <_scanf_float+0x2f2>
 800eca2:	2d02      	cmp	r5, #2
 800eca4:	d836      	bhi.n	800ed14 <_scanf_float+0x318>
 800eca6:	455e      	cmp	r6, fp
 800eca8:	f67f aee8 	bls.w	800ea7c <_scanf_float+0x80>
 800ecac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ecb0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ecb4:	463a      	mov	r2, r7
 800ecb6:	4640      	mov	r0, r8
 800ecb8:	4798      	blx	r3
 800ecba:	6923      	ldr	r3, [r4, #16]
 800ecbc:	3b01      	subs	r3, #1
 800ecbe:	6123      	str	r3, [r4, #16]
 800ecc0:	e7f1      	b.n	800eca6 <_scanf_float+0x2aa>
 800ecc2:	9802      	ldr	r0, [sp, #8]
 800ecc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ecc8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800eccc:	9002      	str	r0, [sp, #8]
 800ecce:	463a      	mov	r2, r7
 800ecd0:	4640      	mov	r0, r8
 800ecd2:	4798      	blx	r3
 800ecd4:	6923      	ldr	r3, [r4, #16]
 800ecd6:	3b01      	subs	r3, #1
 800ecd8:	6123      	str	r3, [r4, #16]
 800ecda:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ecde:	fa5f fa8a 	uxtb.w	sl, sl
 800ece2:	f1ba 0f02 	cmp.w	sl, #2
 800ece6:	d1ec      	bne.n	800ecc2 <_scanf_float+0x2c6>
 800ece8:	3d03      	subs	r5, #3
 800ecea:	b2ed      	uxtb	r5, r5
 800ecec:	1b76      	subs	r6, r6, r5
 800ecee:	6823      	ldr	r3, [r4, #0]
 800ecf0:	05da      	lsls	r2, r3, #23
 800ecf2:	d52f      	bpl.n	800ed54 <_scanf_float+0x358>
 800ecf4:	055b      	lsls	r3, r3, #21
 800ecf6:	d510      	bpl.n	800ed1a <_scanf_float+0x31e>
 800ecf8:	455e      	cmp	r6, fp
 800ecfa:	f67f aebf 	bls.w	800ea7c <_scanf_float+0x80>
 800ecfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ed02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ed06:	463a      	mov	r2, r7
 800ed08:	4640      	mov	r0, r8
 800ed0a:	4798      	blx	r3
 800ed0c:	6923      	ldr	r3, [r4, #16]
 800ed0e:	3b01      	subs	r3, #1
 800ed10:	6123      	str	r3, [r4, #16]
 800ed12:	e7f1      	b.n	800ecf8 <_scanf_float+0x2fc>
 800ed14:	46aa      	mov	sl, r5
 800ed16:	9602      	str	r6, [sp, #8]
 800ed18:	e7df      	b.n	800ecda <_scanf_float+0x2de>
 800ed1a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ed1e:	6923      	ldr	r3, [r4, #16]
 800ed20:	2965      	cmp	r1, #101	; 0x65
 800ed22:	f103 33ff 	add.w	r3, r3, #4294967295
 800ed26:	f106 35ff 	add.w	r5, r6, #4294967295
 800ed2a:	6123      	str	r3, [r4, #16]
 800ed2c:	d00c      	beq.n	800ed48 <_scanf_float+0x34c>
 800ed2e:	2945      	cmp	r1, #69	; 0x45
 800ed30:	d00a      	beq.n	800ed48 <_scanf_float+0x34c>
 800ed32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ed36:	463a      	mov	r2, r7
 800ed38:	4640      	mov	r0, r8
 800ed3a:	4798      	blx	r3
 800ed3c:	6923      	ldr	r3, [r4, #16]
 800ed3e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ed42:	3b01      	subs	r3, #1
 800ed44:	1eb5      	subs	r5, r6, #2
 800ed46:	6123      	str	r3, [r4, #16]
 800ed48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ed4c:	463a      	mov	r2, r7
 800ed4e:	4640      	mov	r0, r8
 800ed50:	4798      	blx	r3
 800ed52:	462e      	mov	r6, r5
 800ed54:	6825      	ldr	r5, [r4, #0]
 800ed56:	f015 0510 	ands.w	r5, r5, #16
 800ed5a:	d159      	bne.n	800ee10 <_scanf_float+0x414>
 800ed5c:	7035      	strb	r5, [r6, #0]
 800ed5e:	6823      	ldr	r3, [r4, #0]
 800ed60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ed64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed68:	d11b      	bne.n	800eda2 <_scanf_float+0x3a6>
 800ed6a:	9b01      	ldr	r3, [sp, #4]
 800ed6c:	454b      	cmp	r3, r9
 800ed6e:	eba3 0209 	sub.w	r2, r3, r9
 800ed72:	d123      	bne.n	800edbc <_scanf_float+0x3c0>
 800ed74:	2200      	movs	r2, #0
 800ed76:	4659      	mov	r1, fp
 800ed78:	4640      	mov	r0, r8
 800ed7a:	f000 fe97 	bl	800faac <_strtod_r>
 800ed7e:	6822      	ldr	r2, [r4, #0]
 800ed80:	9b03      	ldr	r3, [sp, #12]
 800ed82:	f012 0f02 	tst.w	r2, #2
 800ed86:	ec57 6b10 	vmov	r6, r7, d0
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	d021      	beq.n	800edd2 <_scanf_float+0x3d6>
 800ed8e:	9903      	ldr	r1, [sp, #12]
 800ed90:	1d1a      	adds	r2, r3, #4
 800ed92:	600a      	str	r2, [r1, #0]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	e9c3 6700 	strd	r6, r7, [r3]
 800ed9a:	68e3      	ldr	r3, [r4, #12]
 800ed9c:	3301      	adds	r3, #1
 800ed9e:	60e3      	str	r3, [r4, #12]
 800eda0:	e66d      	b.n	800ea7e <_scanf_float+0x82>
 800eda2:	9b04      	ldr	r3, [sp, #16]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d0e5      	beq.n	800ed74 <_scanf_float+0x378>
 800eda8:	9905      	ldr	r1, [sp, #20]
 800edaa:	230a      	movs	r3, #10
 800edac:	462a      	mov	r2, r5
 800edae:	3101      	adds	r1, #1
 800edb0:	4640      	mov	r0, r8
 800edb2:	f000 ff03 	bl	800fbbc <_strtol_r>
 800edb6:	9b04      	ldr	r3, [sp, #16]
 800edb8:	9e05      	ldr	r6, [sp, #20]
 800edba:	1ac2      	subs	r2, r0, r3
 800edbc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800edc0:	429e      	cmp	r6, r3
 800edc2:	bf28      	it	cs
 800edc4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800edc8:	4912      	ldr	r1, [pc, #72]	; (800ee14 <_scanf_float+0x418>)
 800edca:	4630      	mov	r0, r6
 800edcc:	f000 f82c 	bl	800ee28 <siprintf>
 800edd0:	e7d0      	b.n	800ed74 <_scanf_float+0x378>
 800edd2:	9903      	ldr	r1, [sp, #12]
 800edd4:	f012 0f04 	tst.w	r2, #4
 800edd8:	f103 0204 	add.w	r2, r3, #4
 800eddc:	600a      	str	r2, [r1, #0]
 800edde:	d1d9      	bne.n	800ed94 <_scanf_float+0x398>
 800ede0:	f8d3 8000 	ldr.w	r8, [r3]
 800ede4:	ee10 2a10 	vmov	r2, s0
 800ede8:	ee10 0a10 	vmov	r0, s0
 800edec:	463b      	mov	r3, r7
 800edee:	4639      	mov	r1, r7
 800edf0:	f7f1 fe74 	bl	8000adc <__aeabi_dcmpun>
 800edf4:	b128      	cbz	r0, 800ee02 <_scanf_float+0x406>
 800edf6:	4808      	ldr	r0, [pc, #32]	; (800ee18 <_scanf_float+0x41c>)
 800edf8:	f000 f810 	bl	800ee1c <nanf>
 800edfc:	ed88 0a00 	vstr	s0, [r8]
 800ee00:	e7cb      	b.n	800ed9a <_scanf_float+0x39e>
 800ee02:	4630      	mov	r0, r6
 800ee04:	4639      	mov	r1, r7
 800ee06:	f7f1 fec7 	bl	8000b98 <__aeabi_d2f>
 800ee0a:	f8c8 0000 	str.w	r0, [r8]
 800ee0e:	e7c4      	b.n	800ed9a <_scanf_float+0x39e>
 800ee10:	2500      	movs	r5, #0
 800ee12:	e634      	b.n	800ea7e <_scanf_float+0x82>
 800ee14:	08012bfc 	.word	0x08012bfc
 800ee18:	08013008 	.word	0x08013008

0800ee1c <nanf>:
 800ee1c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ee24 <nanf+0x8>
 800ee20:	4770      	bx	lr
 800ee22:	bf00      	nop
 800ee24:	7fc00000 	.word	0x7fc00000

0800ee28 <siprintf>:
 800ee28:	b40e      	push	{r1, r2, r3}
 800ee2a:	b500      	push	{lr}
 800ee2c:	b09c      	sub	sp, #112	; 0x70
 800ee2e:	ab1d      	add	r3, sp, #116	; 0x74
 800ee30:	9002      	str	r0, [sp, #8]
 800ee32:	9006      	str	r0, [sp, #24]
 800ee34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ee38:	4809      	ldr	r0, [pc, #36]	; (800ee60 <siprintf+0x38>)
 800ee3a:	9107      	str	r1, [sp, #28]
 800ee3c:	9104      	str	r1, [sp, #16]
 800ee3e:	4909      	ldr	r1, [pc, #36]	; (800ee64 <siprintf+0x3c>)
 800ee40:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee44:	9105      	str	r1, [sp, #20]
 800ee46:	6800      	ldr	r0, [r0, #0]
 800ee48:	9301      	str	r3, [sp, #4]
 800ee4a:	a902      	add	r1, sp, #8
 800ee4c:	f002 fee0 	bl	8011c10 <_svfiprintf_r>
 800ee50:	9b02      	ldr	r3, [sp, #8]
 800ee52:	2200      	movs	r2, #0
 800ee54:	701a      	strb	r2, [r3, #0]
 800ee56:	b01c      	add	sp, #112	; 0x70
 800ee58:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee5c:	b003      	add	sp, #12
 800ee5e:	4770      	bx	lr
 800ee60:	20000110 	.word	0x20000110
 800ee64:	ffff0208 	.word	0xffff0208

0800ee68 <sulp>:
 800ee68:	b570      	push	{r4, r5, r6, lr}
 800ee6a:	4604      	mov	r4, r0
 800ee6c:	460d      	mov	r5, r1
 800ee6e:	ec45 4b10 	vmov	d0, r4, r5
 800ee72:	4616      	mov	r6, r2
 800ee74:	f002 fc2a 	bl	80116cc <__ulp>
 800ee78:	ec51 0b10 	vmov	r0, r1, d0
 800ee7c:	b17e      	cbz	r6, 800ee9e <sulp+0x36>
 800ee7e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ee82:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	dd09      	ble.n	800ee9e <sulp+0x36>
 800ee8a:	051b      	lsls	r3, r3, #20
 800ee8c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ee90:	2400      	movs	r4, #0
 800ee92:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ee96:	4622      	mov	r2, r4
 800ee98:	462b      	mov	r3, r5
 800ee9a:	f7f1 fb85 	bl	80005a8 <__aeabi_dmul>
 800ee9e:	bd70      	pop	{r4, r5, r6, pc}

0800eea0 <_strtod_l>:
 800eea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eea4:	ed2d 8b02 	vpush	{d8}
 800eea8:	b09d      	sub	sp, #116	; 0x74
 800eeaa:	461f      	mov	r7, r3
 800eeac:	2300      	movs	r3, #0
 800eeae:	9318      	str	r3, [sp, #96]	; 0x60
 800eeb0:	4ba2      	ldr	r3, [pc, #648]	; (800f13c <_strtod_l+0x29c>)
 800eeb2:	9213      	str	r2, [sp, #76]	; 0x4c
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	9305      	str	r3, [sp, #20]
 800eeb8:	4604      	mov	r4, r0
 800eeba:	4618      	mov	r0, r3
 800eebc:	4688      	mov	r8, r1
 800eebe:	f7f1 f95f 	bl	8000180 <strlen>
 800eec2:	f04f 0a00 	mov.w	sl, #0
 800eec6:	4605      	mov	r5, r0
 800eec8:	f04f 0b00 	mov.w	fp, #0
 800eecc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800eed0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eed2:	781a      	ldrb	r2, [r3, #0]
 800eed4:	2a2b      	cmp	r2, #43	; 0x2b
 800eed6:	d04e      	beq.n	800ef76 <_strtod_l+0xd6>
 800eed8:	d83b      	bhi.n	800ef52 <_strtod_l+0xb2>
 800eeda:	2a0d      	cmp	r2, #13
 800eedc:	d834      	bhi.n	800ef48 <_strtod_l+0xa8>
 800eede:	2a08      	cmp	r2, #8
 800eee0:	d834      	bhi.n	800ef4c <_strtod_l+0xac>
 800eee2:	2a00      	cmp	r2, #0
 800eee4:	d03e      	beq.n	800ef64 <_strtod_l+0xc4>
 800eee6:	2300      	movs	r3, #0
 800eee8:	930a      	str	r3, [sp, #40]	; 0x28
 800eeea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800eeec:	7833      	ldrb	r3, [r6, #0]
 800eeee:	2b30      	cmp	r3, #48	; 0x30
 800eef0:	f040 80b0 	bne.w	800f054 <_strtod_l+0x1b4>
 800eef4:	7873      	ldrb	r3, [r6, #1]
 800eef6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800eefa:	2b58      	cmp	r3, #88	; 0x58
 800eefc:	d168      	bne.n	800efd0 <_strtod_l+0x130>
 800eefe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef00:	9301      	str	r3, [sp, #4]
 800ef02:	ab18      	add	r3, sp, #96	; 0x60
 800ef04:	9702      	str	r7, [sp, #8]
 800ef06:	9300      	str	r3, [sp, #0]
 800ef08:	4a8d      	ldr	r2, [pc, #564]	; (800f140 <_strtod_l+0x2a0>)
 800ef0a:	ab19      	add	r3, sp, #100	; 0x64
 800ef0c:	a917      	add	r1, sp, #92	; 0x5c
 800ef0e:	4620      	mov	r0, r4
 800ef10:	f001 fd44 	bl	801099c <__gethex>
 800ef14:	f010 0707 	ands.w	r7, r0, #7
 800ef18:	4605      	mov	r5, r0
 800ef1a:	d005      	beq.n	800ef28 <_strtod_l+0x88>
 800ef1c:	2f06      	cmp	r7, #6
 800ef1e:	d12c      	bne.n	800ef7a <_strtod_l+0xda>
 800ef20:	3601      	adds	r6, #1
 800ef22:	2300      	movs	r3, #0
 800ef24:	9617      	str	r6, [sp, #92]	; 0x5c
 800ef26:	930a      	str	r3, [sp, #40]	; 0x28
 800ef28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	f040 8590 	bne.w	800fa50 <_strtod_l+0xbb0>
 800ef30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef32:	b1eb      	cbz	r3, 800ef70 <_strtod_l+0xd0>
 800ef34:	4652      	mov	r2, sl
 800ef36:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ef3a:	ec43 2b10 	vmov	d0, r2, r3
 800ef3e:	b01d      	add	sp, #116	; 0x74
 800ef40:	ecbd 8b02 	vpop	{d8}
 800ef44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef48:	2a20      	cmp	r2, #32
 800ef4a:	d1cc      	bne.n	800eee6 <_strtod_l+0x46>
 800ef4c:	3301      	adds	r3, #1
 800ef4e:	9317      	str	r3, [sp, #92]	; 0x5c
 800ef50:	e7be      	b.n	800eed0 <_strtod_l+0x30>
 800ef52:	2a2d      	cmp	r2, #45	; 0x2d
 800ef54:	d1c7      	bne.n	800eee6 <_strtod_l+0x46>
 800ef56:	2201      	movs	r2, #1
 800ef58:	920a      	str	r2, [sp, #40]	; 0x28
 800ef5a:	1c5a      	adds	r2, r3, #1
 800ef5c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ef5e:	785b      	ldrb	r3, [r3, #1]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d1c2      	bne.n	800eeea <_strtod_l+0x4a>
 800ef64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ef66:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	f040 856e 	bne.w	800fa4c <_strtod_l+0xbac>
 800ef70:	4652      	mov	r2, sl
 800ef72:	465b      	mov	r3, fp
 800ef74:	e7e1      	b.n	800ef3a <_strtod_l+0x9a>
 800ef76:	2200      	movs	r2, #0
 800ef78:	e7ee      	b.n	800ef58 <_strtod_l+0xb8>
 800ef7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ef7c:	b13a      	cbz	r2, 800ef8e <_strtod_l+0xee>
 800ef7e:	2135      	movs	r1, #53	; 0x35
 800ef80:	a81a      	add	r0, sp, #104	; 0x68
 800ef82:	f002 fcae 	bl	80118e2 <__copybits>
 800ef86:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ef88:	4620      	mov	r0, r4
 800ef8a:	f002 f86d 	bl	8011068 <_Bfree>
 800ef8e:	3f01      	subs	r7, #1
 800ef90:	2f04      	cmp	r7, #4
 800ef92:	d806      	bhi.n	800efa2 <_strtod_l+0x102>
 800ef94:	e8df f007 	tbb	[pc, r7]
 800ef98:	1714030a 	.word	0x1714030a
 800ef9c:	0a          	.byte	0x0a
 800ef9d:	00          	.byte	0x00
 800ef9e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800efa2:	0728      	lsls	r0, r5, #28
 800efa4:	d5c0      	bpl.n	800ef28 <_strtod_l+0x88>
 800efa6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800efaa:	e7bd      	b.n	800ef28 <_strtod_l+0x88>
 800efac:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800efb0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800efb2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800efb6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800efba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800efbe:	e7f0      	b.n	800efa2 <_strtod_l+0x102>
 800efc0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800f144 <_strtod_l+0x2a4>
 800efc4:	e7ed      	b.n	800efa2 <_strtod_l+0x102>
 800efc6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800efca:	f04f 3aff 	mov.w	sl, #4294967295
 800efce:	e7e8      	b.n	800efa2 <_strtod_l+0x102>
 800efd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800efd2:	1c5a      	adds	r2, r3, #1
 800efd4:	9217      	str	r2, [sp, #92]	; 0x5c
 800efd6:	785b      	ldrb	r3, [r3, #1]
 800efd8:	2b30      	cmp	r3, #48	; 0x30
 800efda:	d0f9      	beq.n	800efd0 <_strtod_l+0x130>
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d0a3      	beq.n	800ef28 <_strtod_l+0x88>
 800efe0:	2301      	movs	r3, #1
 800efe2:	f04f 0900 	mov.w	r9, #0
 800efe6:	9304      	str	r3, [sp, #16]
 800efe8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800efea:	9308      	str	r3, [sp, #32]
 800efec:	f8cd 901c 	str.w	r9, [sp, #28]
 800eff0:	464f      	mov	r7, r9
 800eff2:	220a      	movs	r2, #10
 800eff4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800eff6:	7806      	ldrb	r6, [r0, #0]
 800eff8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800effc:	b2d9      	uxtb	r1, r3
 800effe:	2909      	cmp	r1, #9
 800f000:	d92a      	bls.n	800f058 <_strtod_l+0x1b8>
 800f002:	9905      	ldr	r1, [sp, #20]
 800f004:	462a      	mov	r2, r5
 800f006:	f002 ff1b 	bl	8011e40 <strncmp>
 800f00a:	b398      	cbz	r0, 800f074 <_strtod_l+0x1d4>
 800f00c:	2000      	movs	r0, #0
 800f00e:	4632      	mov	r2, r6
 800f010:	463d      	mov	r5, r7
 800f012:	9005      	str	r0, [sp, #20]
 800f014:	4603      	mov	r3, r0
 800f016:	2a65      	cmp	r2, #101	; 0x65
 800f018:	d001      	beq.n	800f01e <_strtod_l+0x17e>
 800f01a:	2a45      	cmp	r2, #69	; 0x45
 800f01c:	d118      	bne.n	800f050 <_strtod_l+0x1b0>
 800f01e:	b91d      	cbnz	r5, 800f028 <_strtod_l+0x188>
 800f020:	9a04      	ldr	r2, [sp, #16]
 800f022:	4302      	orrs	r2, r0
 800f024:	d09e      	beq.n	800ef64 <_strtod_l+0xc4>
 800f026:	2500      	movs	r5, #0
 800f028:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800f02c:	f108 0201 	add.w	r2, r8, #1
 800f030:	9217      	str	r2, [sp, #92]	; 0x5c
 800f032:	f898 2001 	ldrb.w	r2, [r8, #1]
 800f036:	2a2b      	cmp	r2, #43	; 0x2b
 800f038:	d075      	beq.n	800f126 <_strtod_l+0x286>
 800f03a:	2a2d      	cmp	r2, #45	; 0x2d
 800f03c:	d07b      	beq.n	800f136 <_strtod_l+0x296>
 800f03e:	f04f 0c00 	mov.w	ip, #0
 800f042:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f046:	2909      	cmp	r1, #9
 800f048:	f240 8082 	bls.w	800f150 <_strtod_l+0x2b0>
 800f04c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f050:	2600      	movs	r6, #0
 800f052:	e09d      	b.n	800f190 <_strtod_l+0x2f0>
 800f054:	2300      	movs	r3, #0
 800f056:	e7c4      	b.n	800efe2 <_strtod_l+0x142>
 800f058:	2f08      	cmp	r7, #8
 800f05a:	bfd8      	it	le
 800f05c:	9907      	ldrle	r1, [sp, #28]
 800f05e:	f100 0001 	add.w	r0, r0, #1
 800f062:	bfda      	itte	le
 800f064:	fb02 3301 	mlale	r3, r2, r1, r3
 800f068:	9307      	strle	r3, [sp, #28]
 800f06a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800f06e:	3701      	adds	r7, #1
 800f070:	9017      	str	r0, [sp, #92]	; 0x5c
 800f072:	e7bf      	b.n	800eff4 <_strtod_l+0x154>
 800f074:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f076:	195a      	adds	r2, r3, r5
 800f078:	9217      	str	r2, [sp, #92]	; 0x5c
 800f07a:	5d5a      	ldrb	r2, [r3, r5]
 800f07c:	2f00      	cmp	r7, #0
 800f07e:	d037      	beq.n	800f0f0 <_strtod_l+0x250>
 800f080:	9005      	str	r0, [sp, #20]
 800f082:	463d      	mov	r5, r7
 800f084:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f088:	2b09      	cmp	r3, #9
 800f08a:	d912      	bls.n	800f0b2 <_strtod_l+0x212>
 800f08c:	2301      	movs	r3, #1
 800f08e:	e7c2      	b.n	800f016 <_strtod_l+0x176>
 800f090:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f092:	1c5a      	adds	r2, r3, #1
 800f094:	9217      	str	r2, [sp, #92]	; 0x5c
 800f096:	785a      	ldrb	r2, [r3, #1]
 800f098:	3001      	adds	r0, #1
 800f09a:	2a30      	cmp	r2, #48	; 0x30
 800f09c:	d0f8      	beq.n	800f090 <_strtod_l+0x1f0>
 800f09e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f0a2:	2b08      	cmp	r3, #8
 800f0a4:	f200 84d9 	bhi.w	800fa5a <_strtod_l+0xbba>
 800f0a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f0aa:	9005      	str	r0, [sp, #20]
 800f0ac:	2000      	movs	r0, #0
 800f0ae:	9308      	str	r3, [sp, #32]
 800f0b0:	4605      	mov	r5, r0
 800f0b2:	3a30      	subs	r2, #48	; 0x30
 800f0b4:	f100 0301 	add.w	r3, r0, #1
 800f0b8:	d014      	beq.n	800f0e4 <_strtod_l+0x244>
 800f0ba:	9905      	ldr	r1, [sp, #20]
 800f0bc:	4419      	add	r1, r3
 800f0be:	9105      	str	r1, [sp, #20]
 800f0c0:	462b      	mov	r3, r5
 800f0c2:	eb00 0e05 	add.w	lr, r0, r5
 800f0c6:	210a      	movs	r1, #10
 800f0c8:	4573      	cmp	r3, lr
 800f0ca:	d113      	bne.n	800f0f4 <_strtod_l+0x254>
 800f0cc:	182b      	adds	r3, r5, r0
 800f0ce:	2b08      	cmp	r3, #8
 800f0d0:	f105 0501 	add.w	r5, r5, #1
 800f0d4:	4405      	add	r5, r0
 800f0d6:	dc1c      	bgt.n	800f112 <_strtod_l+0x272>
 800f0d8:	9907      	ldr	r1, [sp, #28]
 800f0da:	230a      	movs	r3, #10
 800f0dc:	fb03 2301 	mla	r3, r3, r1, r2
 800f0e0:	9307      	str	r3, [sp, #28]
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f0e6:	1c51      	adds	r1, r2, #1
 800f0e8:	9117      	str	r1, [sp, #92]	; 0x5c
 800f0ea:	7852      	ldrb	r2, [r2, #1]
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	e7c9      	b.n	800f084 <_strtod_l+0x1e4>
 800f0f0:	4638      	mov	r0, r7
 800f0f2:	e7d2      	b.n	800f09a <_strtod_l+0x1fa>
 800f0f4:	2b08      	cmp	r3, #8
 800f0f6:	dc04      	bgt.n	800f102 <_strtod_l+0x262>
 800f0f8:	9e07      	ldr	r6, [sp, #28]
 800f0fa:	434e      	muls	r6, r1
 800f0fc:	9607      	str	r6, [sp, #28]
 800f0fe:	3301      	adds	r3, #1
 800f100:	e7e2      	b.n	800f0c8 <_strtod_l+0x228>
 800f102:	f103 0c01 	add.w	ip, r3, #1
 800f106:	f1bc 0f10 	cmp.w	ip, #16
 800f10a:	bfd8      	it	le
 800f10c:	fb01 f909 	mulle.w	r9, r1, r9
 800f110:	e7f5      	b.n	800f0fe <_strtod_l+0x25e>
 800f112:	2d10      	cmp	r5, #16
 800f114:	bfdc      	itt	le
 800f116:	230a      	movle	r3, #10
 800f118:	fb03 2909 	mlale	r9, r3, r9, r2
 800f11c:	e7e1      	b.n	800f0e2 <_strtod_l+0x242>
 800f11e:	2300      	movs	r3, #0
 800f120:	9305      	str	r3, [sp, #20]
 800f122:	2301      	movs	r3, #1
 800f124:	e77c      	b.n	800f020 <_strtod_l+0x180>
 800f126:	f04f 0c00 	mov.w	ip, #0
 800f12a:	f108 0202 	add.w	r2, r8, #2
 800f12e:	9217      	str	r2, [sp, #92]	; 0x5c
 800f130:	f898 2002 	ldrb.w	r2, [r8, #2]
 800f134:	e785      	b.n	800f042 <_strtod_l+0x1a2>
 800f136:	f04f 0c01 	mov.w	ip, #1
 800f13a:	e7f6      	b.n	800f12a <_strtod_l+0x28a>
 800f13c:	08012e50 	.word	0x08012e50
 800f140:	08012c04 	.word	0x08012c04
 800f144:	7ff00000 	.word	0x7ff00000
 800f148:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f14a:	1c51      	adds	r1, r2, #1
 800f14c:	9117      	str	r1, [sp, #92]	; 0x5c
 800f14e:	7852      	ldrb	r2, [r2, #1]
 800f150:	2a30      	cmp	r2, #48	; 0x30
 800f152:	d0f9      	beq.n	800f148 <_strtod_l+0x2a8>
 800f154:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800f158:	2908      	cmp	r1, #8
 800f15a:	f63f af79 	bhi.w	800f050 <_strtod_l+0x1b0>
 800f15e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800f162:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f164:	9206      	str	r2, [sp, #24]
 800f166:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f168:	1c51      	adds	r1, r2, #1
 800f16a:	9117      	str	r1, [sp, #92]	; 0x5c
 800f16c:	7852      	ldrb	r2, [r2, #1]
 800f16e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800f172:	2e09      	cmp	r6, #9
 800f174:	d937      	bls.n	800f1e6 <_strtod_l+0x346>
 800f176:	9e06      	ldr	r6, [sp, #24]
 800f178:	1b89      	subs	r1, r1, r6
 800f17a:	2908      	cmp	r1, #8
 800f17c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800f180:	dc02      	bgt.n	800f188 <_strtod_l+0x2e8>
 800f182:	4576      	cmp	r6, lr
 800f184:	bfa8      	it	ge
 800f186:	4676      	movge	r6, lr
 800f188:	f1bc 0f00 	cmp.w	ip, #0
 800f18c:	d000      	beq.n	800f190 <_strtod_l+0x2f0>
 800f18e:	4276      	negs	r6, r6
 800f190:	2d00      	cmp	r5, #0
 800f192:	d14d      	bne.n	800f230 <_strtod_l+0x390>
 800f194:	9904      	ldr	r1, [sp, #16]
 800f196:	4301      	orrs	r1, r0
 800f198:	f47f aec6 	bne.w	800ef28 <_strtod_l+0x88>
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	f47f aee1 	bne.w	800ef64 <_strtod_l+0xc4>
 800f1a2:	2a69      	cmp	r2, #105	; 0x69
 800f1a4:	d027      	beq.n	800f1f6 <_strtod_l+0x356>
 800f1a6:	dc24      	bgt.n	800f1f2 <_strtod_l+0x352>
 800f1a8:	2a49      	cmp	r2, #73	; 0x49
 800f1aa:	d024      	beq.n	800f1f6 <_strtod_l+0x356>
 800f1ac:	2a4e      	cmp	r2, #78	; 0x4e
 800f1ae:	f47f aed9 	bne.w	800ef64 <_strtod_l+0xc4>
 800f1b2:	499f      	ldr	r1, [pc, #636]	; (800f430 <_strtod_l+0x590>)
 800f1b4:	a817      	add	r0, sp, #92	; 0x5c
 800f1b6:	f001 fe49 	bl	8010e4c <__match>
 800f1ba:	2800      	cmp	r0, #0
 800f1bc:	f43f aed2 	beq.w	800ef64 <_strtod_l+0xc4>
 800f1c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f1c2:	781b      	ldrb	r3, [r3, #0]
 800f1c4:	2b28      	cmp	r3, #40	; 0x28
 800f1c6:	d12d      	bne.n	800f224 <_strtod_l+0x384>
 800f1c8:	499a      	ldr	r1, [pc, #616]	; (800f434 <_strtod_l+0x594>)
 800f1ca:	aa1a      	add	r2, sp, #104	; 0x68
 800f1cc:	a817      	add	r0, sp, #92	; 0x5c
 800f1ce:	f001 fe51 	bl	8010e74 <__hexnan>
 800f1d2:	2805      	cmp	r0, #5
 800f1d4:	d126      	bne.n	800f224 <_strtod_l+0x384>
 800f1d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f1d8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800f1dc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f1e0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f1e4:	e6a0      	b.n	800ef28 <_strtod_l+0x88>
 800f1e6:	210a      	movs	r1, #10
 800f1e8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800f1ec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f1f0:	e7b9      	b.n	800f166 <_strtod_l+0x2c6>
 800f1f2:	2a6e      	cmp	r2, #110	; 0x6e
 800f1f4:	e7db      	b.n	800f1ae <_strtod_l+0x30e>
 800f1f6:	4990      	ldr	r1, [pc, #576]	; (800f438 <_strtod_l+0x598>)
 800f1f8:	a817      	add	r0, sp, #92	; 0x5c
 800f1fa:	f001 fe27 	bl	8010e4c <__match>
 800f1fe:	2800      	cmp	r0, #0
 800f200:	f43f aeb0 	beq.w	800ef64 <_strtod_l+0xc4>
 800f204:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f206:	498d      	ldr	r1, [pc, #564]	; (800f43c <_strtod_l+0x59c>)
 800f208:	3b01      	subs	r3, #1
 800f20a:	a817      	add	r0, sp, #92	; 0x5c
 800f20c:	9317      	str	r3, [sp, #92]	; 0x5c
 800f20e:	f001 fe1d 	bl	8010e4c <__match>
 800f212:	b910      	cbnz	r0, 800f21a <_strtod_l+0x37a>
 800f214:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f216:	3301      	adds	r3, #1
 800f218:	9317      	str	r3, [sp, #92]	; 0x5c
 800f21a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800f44c <_strtod_l+0x5ac>
 800f21e:	f04f 0a00 	mov.w	sl, #0
 800f222:	e681      	b.n	800ef28 <_strtod_l+0x88>
 800f224:	4886      	ldr	r0, [pc, #536]	; (800f440 <_strtod_l+0x5a0>)
 800f226:	f002 fdf3 	bl	8011e10 <nan>
 800f22a:	ec5b ab10 	vmov	sl, fp, d0
 800f22e:	e67b      	b.n	800ef28 <_strtod_l+0x88>
 800f230:	9b05      	ldr	r3, [sp, #20]
 800f232:	9807      	ldr	r0, [sp, #28]
 800f234:	1af3      	subs	r3, r6, r3
 800f236:	2f00      	cmp	r7, #0
 800f238:	bf08      	it	eq
 800f23a:	462f      	moveq	r7, r5
 800f23c:	2d10      	cmp	r5, #16
 800f23e:	9306      	str	r3, [sp, #24]
 800f240:	46a8      	mov	r8, r5
 800f242:	bfa8      	it	ge
 800f244:	f04f 0810 	movge.w	r8, #16
 800f248:	f7f1 f934 	bl	80004b4 <__aeabi_ui2d>
 800f24c:	2d09      	cmp	r5, #9
 800f24e:	4682      	mov	sl, r0
 800f250:	468b      	mov	fp, r1
 800f252:	dd13      	ble.n	800f27c <_strtod_l+0x3dc>
 800f254:	4b7b      	ldr	r3, [pc, #492]	; (800f444 <_strtod_l+0x5a4>)
 800f256:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f25a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f25e:	f7f1 f9a3 	bl	80005a8 <__aeabi_dmul>
 800f262:	4682      	mov	sl, r0
 800f264:	4648      	mov	r0, r9
 800f266:	468b      	mov	fp, r1
 800f268:	f7f1 f924 	bl	80004b4 <__aeabi_ui2d>
 800f26c:	4602      	mov	r2, r0
 800f26e:	460b      	mov	r3, r1
 800f270:	4650      	mov	r0, sl
 800f272:	4659      	mov	r1, fp
 800f274:	f7f0 ffe2 	bl	800023c <__adddf3>
 800f278:	4682      	mov	sl, r0
 800f27a:	468b      	mov	fp, r1
 800f27c:	2d0f      	cmp	r5, #15
 800f27e:	dc38      	bgt.n	800f2f2 <_strtod_l+0x452>
 800f280:	9b06      	ldr	r3, [sp, #24]
 800f282:	2b00      	cmp	r3, #0
 800f284:	f43f ae50 	beq.w	800ef28 <_strtod_l+0x88>
 800f288:	dd24      	ble.n	800f2d4 <_strtod_l+0x434>
 800f28a:	2b16      	cmp	r3, #22
 800f28c:	dc0b      	bgt.n	800f2a6 <_strtod_l+0x406>
 800f28e:	496d      	ldr	r1, [pc, #436]	; (800f444 <_strtod_l+0x5a4>)
 800f290:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f294:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f298:	4652      	mov	r2, sl
 800f29a:	465b      	mov	r3, fp
 800f29c:	f7f1 f984 	bl	80005a8 <__aeabi_dmul>
 800f2a0:	4682      	mov	sl, r0
 800f2a2:	468b      	mov	fp, r1
 800f2a4:	e640      	b.n	800ef28 <_strtod_l+0x88>
 800f2a6:	9a06      	ldr	r2, [sp, #24]
 800f2a8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f2ac:	4293      	cmp	r3, r2
 800f2ae:	db20      	blt.n	800f2f2 <_strtod_l+0x452>
 800f2b0:	4c64      	ldr	r4, [pc, #400]	; (800f444 <_strtod_l+0x5a4>)
 800f2b2:	f1c5 050f 	rsb	r5, r5, #15
 800f2b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f2ba:	4652      	mov	r2, sl
 800f2bc:	465b      	mov	r3, fp
 800f2be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2c2:	f7f1 f971 	bl	80005a8 <__aeabi_dmul>
 800f2c6:	9b06      	ldr	r3, [sp, #24]
 800f2c8:	1b5d      	subs	r5, r3, r5
 800f2ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f2ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f2d2:	e7e3      	b.n	800f29c <_strtod_l+0x3fc>
 800f2d4:	9b06      	ldr	r3, [sp, #24]
 800f2d6:	3316      	adds	r3, #22
 800f2d8:	db0b      	blt.n	800f2f2 <_strtod_l+0x452>
 800f2da:	9b05      	ldr	r3, [sp, #20]
 800f2dc:	1b9e      	subs	r6, r3, r6
 800f2de:	4b59      	ldr	r3, [pc, #356]	; (800f444 <_strtod_l+0x5a4>)
 800f2e0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800f2e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f2e8:	4650      	mov	r0, sl
 800f2ea:	4659      	mov	r1, fp
 800f2ec:	f7f1 fa86 	bl	80007fc <__aeabi_ddiv>
 800f2f0:	e7d6      	b.n	800f2a0 <_strtod_l+0x400>
 800f2f2:	9b06      	ldr	r3, [sp, #24]
 800f2f4:	eba5 0808 	sub.w	r8, r5, r8
 800f2f8:	4498      	add	r8, r3
 800f2fa:	f1b8 0f00 	cmp.w	r8, #0
 800f2fe:	dd74      	ble.n	800f3ea <_strtod_l+0x54a>
 800f300:	f018 030f 	ands.w	r3, r8, #15
 800f304:	d00a      	beq.n	800f31c <_strtod_l+0x47c>
 800f306:	494f      	ldr	r1, [pc, #316]	; (800f444 <_strtod_l+0x5a4>)
 800f308:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f30c:	4652      	mov	r2, sl
 800f30e:	465b      	mov	r3, fp
 800f310:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f314:	f7f1 f948 	bl	80005a8 <__aeabi_dmul>
 800f318:	4682      	mov	sl, r0
 800f31a:	468b      	mov	fp, r1
 800f31c:	f038 080f 	bics.w	r8, r8, #15
 800f320:	d04f      	beq.n	800f3c2 <_strtod_l+0x522>
 800f322:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f326:	dd22      	ble.n	800f36e <_strtod_l+0x4ce>
 800f328:	2500      	movs	r5, #0
 800f32a:	462e      	mov	r6, r5
 800f32c:	9507      	str	r5, [sp, #28]
 800f32e:	9505      	str	r5, [sp, #20]
 800f330:	2322      	movs	r3, #34	; 0x22
 800f332:	f8df b118 	ldr.w	fp, [pc, #280]	; 800f44c <_strtod_l+0x5ac>
 800f336:	6023      	str	r3, [r4, #0]
 800f338:	f04f 0a00 	mov.w	sl, #0
 800f33c:	9b07      	ldr	r3, [sp, #28]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	f43f adf2 	beq.w	800ef28 <_strtod_l+0x88>
 800f344:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f346:	4620      	mov	r0, r4
 800f348:	f001 fe8e 	bl	8011068 <_Bfree>
 800f34c:	9905      	ldr	r1, [sp, #20]
 800f34e:	4620      	mov	r0, r4
 800f350:	f001 fe8a 	bl	8011068 <_Bfree>
 800f354:	4631      	mov	r1, r6
 800f356:	4620      	mov	r0, r4
 800f358:	f001 fe86 	bl	8011068 <_Bfree>
 800f35c:	9907      	ldr	r1, [sp, #28]
 800f35e:	4620      	mov	r0, r4
 800f360:	f001 fe82 	bl	8011068 <_Bfree>
 800f364:	4629      	mov	r1, r5
 800f366:	4620      	mov	r0, r4
 800f368:	f001 fe7e 	bl	8011068 <_Bfree>
 800f36c:	e5dc      	b.n	800ef28 <_strtod_l+0x88>
 800f36e:	4b36      	ldr	r3, [pc, #216]	; (800f448 <_strtod_l+0x5a8>)
 800f370:	9304      	str	r3, [sp, #16]
 800f372:	2300      	movs	r3, #0
 800f374:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f378:	4650      	mov	r0, sl
 800f37a:	4659      	mov	r1, fp
 800f37c:	4699      	mov	r9, r3
 800f37e:	f1b8 0f01 	cmp.w	r8, #1
 800f382:	dc21      	bgt.n	800f3c8 <_strtod_l+0x528>
 800f384:	b10b      	cbz	r3, 800f38a <_strtod_l+0x4ea>
 800f386:	4682      	mov	sl, r0
 800f388:	468b      	mov	fp, r1
 800f38a:	4b2f      	ldr	r3, [pc, #188]	; (800f448 <_strtod_l+0x5a8>)
 800f38c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f390:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f394:	4652      	mov	r2, sl
 800f396:	465b      	mov	r3, fp
 800f398:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f39c:	f7f1 f904 	bl	80005a8 <__aeabi_dmul>
 800f3a0:	4b2a      	ldr	r3, [pc, #168]	; (800f44c <_strtod_l+0x5ac>)
 800f3a2:	460a      	mov	r2, r1
 800f3a4:	400b      	ands	r3, r1
 800f3a6:	492a      	ldr	r1, [pc, #168]	; (800f450 <_strtod_l+0x5b0>)
 800f3a8:	428b      	cmp	r3, r1
 800f3aa:	4682      	mov	sl, r0
 800f3ac:	d8bc      	bhi.n	800f328 <_strtod_l+0x488>
 800f3ae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f3b2:	428b      	cmp	r3, r1
 800f3b4:	bf86      	itte	hi
 800f3b6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800f454 <_strtod_l+0x5b4>
 800f3ba:	f04f 3aff 	movhi.w	sl, #4294967295
 800f3be:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	9304      	str	r3, [sp, #16]
 800f3c6:	e084      	b.n	800f4d2 <_strtod_l+0x632>
 800f3c8:	f018 0f01 	tst.w	r8, #1
 800f3cc:	d005      	beq.n	800f3da <_strtod_l+0x53a>
 800f3ce:	9b04      	ldr	r3, [sp, #16]
 800f3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3d4:	f7f1 f8e8 	bl	80005a8 <__aeabi_dmul>
 800f3d8:	2301      	movs	r3, #1
 800f3da:	9a04      	ldr	r2, [sp, #16]
 800f3dc:	3208      	adds	r2, #8
 800f3de:	f109 0901 	add.w	r9, r9, #1
 800f3e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f3e6:	9204      	str	r2, [sp, #16]
 800f3e8:	e7c9      	b.n	800f37e <_strtod_l+0x4de>
 800f3ea:	d0ea      	beq.n	800f3c2 <_strtod_l+0x522>
 800f3ec:	f1c8 0800 	rsb	r8, r8, #0
 800f3f0:	f018 020f 	ands.w	r2, r8, #15
 800f3f4:	d00a      	beq.n	800f40c <_strtod_l+0x56c>
 800f3f6:	4b13      	ldr	r3, [pc, #76]	; (800f444 <_strtod_l+0x5a4>)
 800f3f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f3fc:	4650      	mov	r0, sl
 800f3fe:	4659      	mov	r1, fp
 800f400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f404:	f7f1 f9fa 	bl	80007fc <__aeabi_ddiv>
 800f408:	4682      	mov	sl, r0
 800f40a:	468b      	mov	fp, r1
 800f40c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f410:	d0d7      	beq.n	800f3c2 <_strtod_l+0x522>
 800f412:	f1b8 0f1f 	cmp.w	r8, #31
 800f416:	dd1f      	ble.n	800f458 <_strtod_l+0x5b8>
 800f418:	2500      	movs	r5, #0
 800f41a:	462e      	mov	r6, r5
 800f41c:	9507      	str	r5, [sp, #28]
 800f41e:	9505      	str	r5, [sp, #20]
 800f420:	2322      	movs	r3, #34	; 0x22
 800f422:	f04f 0a00 	mov.w	sl, #0
 800f426:	f04f 0b00 	mov.w	fp, #0
 800f42a:	6023      	str	r3, [r4, #0]
 800f42c:	e786      	b.n	800f33c <_strtod_l+0x49c>
 800f42e:	bf00      	nop
 800f430:	08012bd5 	.word	0x08012bd5
 800f434:	08012c18 	.word	0x08012c18
 800f438:	08012bcd 	.word	0x08012bcd
 800f43c:	08012d5c 	.word	0x08012d5c
 800f440:	08013008 	.word	0x08013008
 800f444:	08012ee8 	.word	0x08012ee8
 800f448:	08012ec0 	.word	0x08012ec0
 800f44c:	7ff00000 	.word	0x7ff00000
 800f450:	7ca00000 	.word	0x7ca00000
 800f454:	7fefffff 	.word	0x7fefffff
 800f458:	f018 0310 	ands.w	r3, r8, #16
 800f45c:	bf18      	it	ne
 800f45e:	236a      	movne	r3, #106	; 0x6a
 800f460:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800f810 <_strtod_l+0x970>
 800f464:	9304      	str	r3, [sp, #16]
 800f466:	4650      	mov	r0, sl
 800f468:	4659      	mov	r1, fp
 800f46a:	2300      	movs	r3, #0
 800f46c:	f018 0f01 	tst.w	r8, #1
 800f470:	d004      	beq.n	800f47c <_strtod_l+0x5dc>
 800f472:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f476:	f7f1 f897 	bl	80005a8 <__aeabi_dmul>
 800f47a:	2301      	movs	r3, #1
 800f47c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800f480:	f109 0908 	add.w	r9, r9, #8
 800f484:	d1f2      	bne.n	800f46c <_strtod_l+0x5cc>
 800f486:	b10b      	cbz	r3, 800f48c <_strtod_l+0x5ec>
 800f488:	4682      	mov	sl, r0
 800f48a:	468b      	mov	fp, r1
 800f48c:	9b04      	ldr	r3, [sp, #16]
 800f48e:	b1c3      	cbz	r3, 800f4c2 <_strtod_l+0x622>
 800f490:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f494:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f498:	2b00      	cmp	r3, #0
 800f49a:	4659      	mov	r1, fp
 800f49c:	dd11      	ble.n	800f4c2 <_strtod_l+0x622>
 800f49e:	2b1f      	cmp	r3, #31
 800f4a0:	f340 8124 	ble.w	800f6ec <_strtod_l+0x84c>
 800f4a4:	2b34      	cmp	r3, #52	; 0x34
 800f4a6:	bfde      	ittt	le
 800f4a8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800f4ac:	f04f 33ff 	movle.w	r3, #4294967295
 800f4b0:	fa03 f202 	lslle.w	r2, r3, r2
 800f4b4:	f04f 0a00 	mov.w	sl, #0
 800f4b8:	bfcc      	ite	gt
 800f4ba:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f4be:	ea02 0b01 	andle.w	fp, r2, r1
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	4650      	mov	r0, sl
 800f4c8:	4659      	mov	r1, fp
 800f4ca:	f7f1 fad5 	bl	8000a78 <__aeabi_dcmpeq>
 800f4ce:	2800      	cmp	r0, #0
 800f4d0:	d1a2      	bne.n	800f418 <_strtod_l+0x578>
 800f4d2:	9b07      	ldr	r3, [sp, #28]
 800f4d4:	9300      	str	r3, [sp, #0]
 800f4d6:	9908      	ldr	r1, [sp, #32]
 800f4d8:	462b      	mov	r3, r5
 800f4da:	463a      	mov	r2, r7
 800f4dc:	4620      	mov	r0, r4
 800f4de:	f001 fe2b 	bl	8011138 <__s2b>
 800f4e2:	9007      	str	r0, [sp, #28]
 800f4e4:	2800      	cmp	r0, #0
 800f4e6:	f43f af1f 	beq.w	800f328 <_strtod_l+0x488>
 800f4ea:	9b05      	ldr	r3, [sp, #20]
 800f4ec:	1b9e      	subs	r6, r3, r6
 800f4ee:	9b06      	ldr	r3, [sp, #24]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	bfb4      	ite	lt
 800f4f4:	4633      	movlt	r3, r6
 800f4f6:	2300      	movge	r3, #0
 800f4f8:	930c      	str	r3, [sp, #48]	; 0x30
 800f4fa:	9b06      	ldr	r3, [sp, #24]
 800f4fc:	2500      	movs	r5, #0
 800f4fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f502:	9312      	str	r3, [sp, #72]	; 0x48
 800f504:	462e      	mov	r6, r5
 800f506:	9b07      	ldr	r3, [sp, #28]
 800f508:	4620      	mov	r0, r4
 800f50a:	6859      	ldr	r1, [r3, #4]
 800f50c:	f001 fd6c 	bl	8010fe8 <_Balloc>
 800f510:	9005      	str	r0, [sp, #20]
 800f512:	2800      	cmp	r0, #0
 800f514:	f43f af0c 	beq.w	800f330 <_strtod_l+0x490>
 800f518:	9b07      	ldr	r3, [sp, #28]
 800f51a:	691a      	ldr	r2, [r3, #16]
 800f51c:	3202      	adds	r2, #2
 800f51e:	f103 010c 	add.w	r1, r3, #12
 800f522:	0092      	lsls	r2, r2, #2
 800f524:	300c      	adds	r0, #12
 800f526:	f7fe fde9 	bl	800e0fc <memcpy>
 800f52a:	ec4b ab10 	vmov	d0, sl, fp
 800f52e:	aa1a      	add	r2, sp, #104	; 0x68
 800f530:	a919      	add	r1, sp, #100	; 0x64
 800f532:	4620      	mov	r0, r4
 800f534:	f002 f946 	bl	80117c4 <__d2b>
 800f538:	ec4b ab18 	vmov	d8, sl, fp
 800f53c:	9018      	str	r0, [sp, #96]	; 0x60
 800f53e:	2800      	cmp	r0, #0
 800f540:	f43f aef6 	beq.w	800f330 <_strtod_l+0x490>
 800f544:	2101      	movs	r1, #1
 800f546:	4620      	mov	r0, r4
 800f548:	f001 fe90 	bl	801126c <__i2b>
 800f54c:	4606      	mov	r6, r0
 800f54e:	2800      	cmp	r0, #0
 800f550:	f43f aeee 	beq.w	800f330 <_strtod_l+0x490>
 800f554:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f556:	9904      	ldr	r1, [sp, #16]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	bfab      	itete	ge
 800f55c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800f55e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800f560:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800f562:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800f566:	bfac      	ite	ge
 800f568:	eb03 0902 	addge.w	r9, r3, r2
 800f56c:	1ad7      	sublt	r7, r2, r3
 800f56e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f570:	eba3 0801 	sub.w	r8, r3, r1
 800f574:	4490      	add	r8, r2
 800f576:	4ba1      	ldr	r3, [pc, #644]	; (800f7fc <_strtod_l+0x95c>)
 800f578:	f108 38ff 	add.w	r8, r8, #4294967295
 800f57c:	4598      	cmp	r8, r3
 800f57e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f582:	f280 80c7 	bge.w	800f714 <_strtod_l+0x874>
 800f586:	eba3 0308 	sub.w	r3, r3, r8
 800f58a:	2b1f      	cmp	r3, #31
 800f58c:	eba2 0203 	sub.w	r2, r2, r3
 800f590:	f04f 0101 	mov.w	r1, #1
 800f594:	f300 80b1 	bgt.w	800f6fa <_strtod_l+0x85a>
 800f598:	fa01 f303 	lsl.w	r3, r1, r3
 800f59c:	930d      	str	r3, [sp, #52]	; 0x34
 800f59e:	2300      	movs	r3, #0
 800f5a0:	9308      	str	r3, [sp, #32]
 800f5a2:	eb09 0802 	add.w	r8, r9, r2
 800f5a6:	9b04      	ldr	r3, [sp, #16]
 800f5a8:	45c1      	cmp	r9, r8
 800f5aa:	4417      	add	r7, r2
 800f5ac:	441f      	add	r7, r3
 800f5ae:	464b      	mov	r3, r9
 800f5b0:	bfa8      	it	ge
 800f5b2:	4643      	movge	r3, r8
 800f5b4:	42bb      	cmp	r3, r7
 800f5b6:	bfa8      	it	ge
 800f5b8:	463b      	movge	r3, r7
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	bfc2      	ittt	gt
 800f5be:	eba8 0803 	subgt.w	r8, r8, r3
 800f5c2:	1aff      	subgt	r7, r7, r3
 800f5c4:	eba9 0903 	subgt.w	r9, r9, r3
 800f5c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	dd17      	ble.n	800f5fe <_strtod_l+0x75e>
 800f5ce:	4631      	mov	r1, r6
 800f5d0:	461a      	mov	r2, r3
 800f5d2:	4620      	mov	r0, r4
 800f5d4:	f001 ff0a 	bl	80113ec <__pow5mult>
 800f5d8:	4606      	mov	r6, r0
 800f5da:	2800      	cmp	r0, #0
 800f5dc:	f43f aea8 	beq.w	800f330 <_strtod_l+0x490>
 800f5e0:	4601      	mov	r1, r0
 800f5e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f5e4:	4620      	mov	r0, r4
 800f5e6:	f001 fe57 	bl	8011298 <__multiply>
 800f5ea:	900b      	str	r0, [sp, #44]	; 0x2c
 800f5ec:	2800      	cmp	r0, #0
 800f5ee:	f43f ae9f 	beq.w	800f330 <_strtod_l+0x490>
 800f5f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f5f4:	4620      	mov	r0, r4
 800f5f6:	f001 fd37 	bl	8011068 <_Bfree>
 800f5fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f5fc:	9318      	str	r3, [sp, #96]	; 0x60
 800f5fe:	f1b8 0f00 	cmp.w	r8, #0
 800f602:	f300 808c 	bgt.w	800f71e <_strtod_l+0x87e>
 800f606:	9b06      	ldr	r3, [sp, #24]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	dd08      	ble.n	800f61e <_strtod_l+0x77e>
 800f60c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f60e:	9905      	ldr	r1, [sp, #20]
 800f610:	4620      	mov	r0, r4
 800f612:	f001 feeb 	bl	80113ec <__pow5mult>
 800f616:	9005      	str	r0, [sp, #20]
 800f618:	2800      	cmp	r0, #0
 800f61a:	f43f ae89 	beq.w	800f330 <_strtod_l+0x490>
 800f61e:	2f00      	cmp	r7, #0
 800f620:	dd08      	ble.n	800f634 <_strtod_l+0x794>
 800f622:	9905      	ldr	r1, [sp, #20]
 800f624:	463a      	mov	r2, r7
 800f626:	4620      	mov	r0, r4
 800f628:	f001 ff3a 	bl	80114a0 <__lshift>
 800f62c:	9005      	str	r0, [sp, #20]
 800f62e:	2800      	cmp	r0, #0
 800f630:	f43f ae7e 	beq.w	800f330 <_strtod_l+0x490>
 800f634:	f1b9 0f00 	cmp.w	r9, #0
 800f638:	dd08      	ble.n	800f64c <_strtod_l+0x7ac>
 800f63a:	4631      	mov	r1, r6
 800f63c:	464a      	mov	r2, r9
 800f63e:	4620      	mov	r0, r4
 800f640:	f001 ff2e 	bl	80114a0 <__lshift>
 800f644:	4606      	mov	r6, r0
 800f646:	2800      	cmp	r0, #0
 800f648:	f43f ae72 	beq.w	800f330 <_strtod_l+0x490>
 800f64c:	9a05      	ldr	r2, [sp, #20]
 800f64e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f650:	4620      	mov	r0, r4
 800f652:	f001 ffb1 	bl	80115b8 <__mdiff>
 800f656:	4605      	mov	r5, r0
 800f658:	2800      	cmp	r0, #0
 800f65a:	f43f ae69 	beq.w	800f330 <_strtod_l+0x490>
 800f65e:	68c3      	ldr	r3, [r0, #12]
 800f660:	930b      	str	r3, [sp, #44]	; 0x2c
 800f662:	2300      	movs	r3, #0
 800f664:	60c3      	str	r3, [r0, #12]
 800f666:	4631      	mov	r1, r6
 800f668:	f001 ff8a 	bl	8011580 <__mcmp>
 800f66c:	2800      	cmp	r0, #0
 800f66e:	da60      	bge.n	800f732 <_strtod_l+0x892>
 800f670:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f672:	ea53 030a 	orrs.w	r3, r3, sl
 800f676:	f040 8082 	bne.w	800f77e <_strtod_l+0x8de>
 800f67a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d17d      	bne.n	800f77e <_strtod_l+0x8de>
 800f682:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f686:	0d1b      	lsrs	r3, r3, #20
 800f688:	051b      	lsls	r3, r3, #20
 800f68a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f68e:	d976      	bls.n	800f77e <_strtod_l+0x8de>
 800f690:	696b      	ldr	r3, [r5, #20]
 800f692:	b913      	cbnz	r3, 800f69a <_strtod_l+0x7fa>
 800f694:	692b      	ldr	r3, [r5, #16]
 800f696:	2b01      	cmp	r3, #1
 800f698:	dd71      	ble.n	800f77e <_strtod_l+0x8de>
 800f69a:	4629      	mov	r1, r5
 800f69c:	2201      	movs	r2, #1
 800f69e:	4620      	mov	r0, r4
 800f6a0:	f001 fefe 	bl	80114a0 <__lshift>
 800f6a4:	4631      	mov	r1, r6
 800f6a6:	4605      	mov	r5, r0
 800f6a8:	f001 ff6a 	bl	8011580 <__mcmp>
 800f6ac:	2800      	cmp	r0, #0
 800f6ae:	dd66      	ble.n	800f77e <_strtod_l+0x8de>
 800f6b0:	9904      	ldr	r1, [sp, #16]
 800f6b2:	4a53      	ldr	r2, [pc, #332]	; (800f800 <_strtod_l+0x960>)
 800f6b4:	465b      	mov	r3, fp
 800f6b6:	2900      	cmp	r1, #0
 800f6b8:	f000 8081 	beq.w	800f7be <_strtod_l+0x91e>
 800f6bc:	ea02 010b 	and.w	r1, r2, fp
 800f6c0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f6c4:	dc7b      	bgt.n	800f7be <_strtod_l+0x91e>
 800f6c6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f6ca:	f77f aea9 	ble.w	800f420 <_strtod_l+0x580>
 800f6ce:	4b4d      	ldr	r3, [pc, #308]	; (800f804 <_strtod_l+0x964>)
 800f6d0:	4650      	mov	r0, sl
 800f6d2:	4659      	mov	r1, fp
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	f7f0 ff67 	bl	80005a8 <__aeabi_dmul>
 800f6da:	460b      	mov	r3, r1
 800f6dc:	4303      	orrs	r3, r0
 800f6de:	bf08      	it	eq
 800f6e0:	2322      	moveq	r3, #34	; 0x22
 800f6e2:	4682      	mov	sl, r0
 800f6e4:	468b      	mov	fp, r1
 800f6e6:	bf08      	it	eq
 800f6e8:	6023      	streq	r3, [r4, #0]
 800f6ea:	e62b      	b.n	800f344 <_strtod_l+0x4a4>
 800f6ec:	f04f 32ff 	mov.w	r2, #4294967295
 800f6f0:	fa02 f303 	lsl.w	r3, r2, r3
 800f6f4:	ea03 0a0a 	and.w	sl, r3, sl
 800f6f8:	e6e3      	b.n	800f4c2 <_strtod_l+0x622>
 800f6fa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800f6fe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800f702:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800f706:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800f70a:	fa01 f308 	lsl.w	r3, r1, r8
 800f70e:	9308      	str	r3, [sp, #32]
 800f710:	910d      	str	r1, [sp, #52]	; 0x34
 800f712:	e746      	b.n	800f5a2 <_strtod_l+0x702>
 800f714:	2300      	movs	r3, #0
 800f716:	9308      	str	r3, [sp, #32]
 800f718:	2301      	movs	r3, #1
 800f71a:	930d      	str	r3, [sp, #52]	; 0x34
 800f71c:	e741      	b.n	800f5a2 <_strtod_l+0x702>
 800f71e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f720:	4642      	mov	r2, r8
 800f722:	4620      	mov	r0, r4
 800f724:	f001 febc 	bl	80114a0 <__lshift>
 800f728:	9018      	str	r0, [sp, #96]	; 0x60
 800f72a:	2800      	cmp	r0, #0
 800f72c:	f47f af6b 	bne.w	800f606 <_strtod_l+0x766>
 800f730:	e5fe      	b.n	800f330 <_strtod_l+0x490>
 800f732:	465f      	mov	r7, fp
 800f734:	d16e      	bne.n	800f814 <_strtod_l+0x974>
 800f736:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f738:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f73c:	b342      	cbz	r2, 800f790 <_strtod_l+0x8f0>
 800f73e:	4a32      	ldr	r2, [pc, #200]	; (800f808 <_strtod_l+0x968>)
 800f740:	4293      	cmp	r3, r2
 800f742:	d128      	bne.n	800f796 <_strtod_l+0x8f6>
 800f744:	9b04      	ldr	r3, [sp, #16]
 800f746:	4651      	mov	r1, sl
 800f748:	b1eb      	cbz	r3, 800f786 <_strtod_l+0x8e6>
 800f74a:	4b2d      	ldr	r3, [pc, #180]	; (800f800 <_strtod_l+0x960>)
 800f74c:	403b      	ands	r3, r7
 800f74e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f752:	f04f 32ff 	mov.w	r2, #4294967295
 800f756:	d819      	bhi.n	800f78c <_strtod_l+0x8ec>
 800f758:	0d1b      	lsrs	r3, r3, #20
 800f75a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f75e:	fa02 f303 	lsl.w	r3, r2, r3
 800f762:	4299      	cmp	r1, r3
 800f764:	d117      	bne.n	800f796 <_strtod_l+0x8f6>
 800f766:	4b29      	ldr	r3, [pc, #164]	; (800f80c <_strtod_l+0x96c>)
 800f768:	429f      	cmp	r7, r3
 800f76a:	d102      	bne.n	800f772 <_strtod_l+0x8d2>
 800f76c:	3101      	adds	r1, #1
 800f76e:	f43f addf 	beq.w	800f330 <_strtod_l+0x490>
 800f772:	4b23      	ldr	r3, [pc, #140]	; (800f800 <_strtod_l+0x960>)
 800f774:	403b      	ands	r3, r7
 800f776:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f77a:	f04f 0a00 	mov.w	sl, #0
 800f77e:	9b04      	ldr	r3, [sp, #16]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d1a4      	bne.n	800f6ce <_strtod_l+0x82e>
 800f784:	e5de      	b.n	800f344 <_strtod_l+0x4a4>
 800f786:	f04f 33ff 	mov.w	r3, #4294967295
 800f78a:	e7ea      	b.n	800f762 <_strtod_l+0x8c2>
 800f78c:	4613      	mov	r3, r2
 800f78e:	e7e8      	b.n	800f762 <_strtod_l+0x8c2>
 800f790:	ea53 030a 	orrs.w	r3, r3, sl
 800f794:	d08c      	beq.n	800f6b0 <_strtod_l+0x810>
 800f796:	9b08      	ldr	r3, [sp, #32]
 800f798:	b1db      	cbz	r3, 800f7d2 <_strtod_l+0x932>
 800f79a:	423b      	tst	r3, r7
 800f79c:	d0ef      	beq.n	800f77e <_strtod_l+0x8de>
 800f79e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7a0:	9a04      	ldr	r2, [sp, #16]
 800f7a2:	4650      	mov	r0, sl
 800f7a4:	4659      	mov	r1, fp
 800f7a6:	b1c3      	cbz	r3, 800f7da <_strtod_l+0x93a>
 800f7a8:	f7ff fb5e 	bl	800ee68 <sulp>
 800f7ac:	4602      	mov	r2, r0
 800f7ae:	460b      	mov	r3, r1
 800f7b0:	ec51 0b18 	vmov	r0, r1, d8
 800f7b4:	f7f0 fd42 	bl	800023c <__adddf3>
 800f7b8:	4682      	mov	sl, r0
 800f7ba:	468b      	mov	fp, r1
 800f7bc:	e7df      	b.n	800f77e <_strtod_l+0x8de>
 800f7be:	4013      	ands	r3, r2
 800f7c0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f7c4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f7c8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f7cc:	f04f 3aff 	mov.w	sl, #4294967295
 800f7d0:	e7d5      	b.n	800f77e <_strtod_l+0x8de>
 800f7d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f7d4:	ea13 0f0a 	tst.w	r3, sl
 800f7d8:	e7e0      	b.n	800f79c <_strtod_l+0x8fc>
 800f7da:	f7ff fb45 	bl	800ee68 <sulp>
 800f7de:	4602      	mov	r2, r0
 800f7e0:	460b      	mov	r3, r1
 800f7e2:	ec51 0b18 	vmov	r0, r1, d8
 800f7e6:	f7f0 fd27 	bl	8000238 <__aeabi_dsub>
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	4682      	mov	sl, r0
 800f7f0:	468b      	mov	fp, r1
 800f7f2:	f7f1 f941 	bl	8000a78 <__aeabi_dcmpeq>
 800f7f6:	2800      	cmp	r0, #0
 800f7f8:	d0c1      	beq.n	800f77e <_strtod_l+0x8de>
 800f7fa:	e611      	b.n	800f420 <_strtod_l+0x580>
 800f7fc:	fffffc02 	.word	0xfffffc02
 800f800:	7ff00000 	.word	0x7ff00000
 800f804:	39500000 	.word	0x39500000
 800f808:	000fffff 	.word	0x000fffff
 800f80c:	7fefffff 	.word	0x7fefffff
 800f810:	08012c30 	.word	0x08012c30
 800f814:	4631      	mov	r1, r6
 800f816:	4628      	mov	r0, r5
 800f818:	f002 f830 	bl	801187c <__ratio>
 800f81c:	ec59 8b10 	vmov	r8, r9, d0
 800f820:	ee10 0a10 	vmov	r0, s0
 800f824:	2200      	movs	r2, #0
 800f826:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f82a:	4649      	mov	r1, r9
 800f82c:	f7f1 f938 	bl	8000aa0 <__aeabi_dcmple>
 800f830:	2800      	cmp	r0, #0
 800f832:	d07a      	beq.n	800f92a <_strtod_l+0xa8a>
 800f834:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f836:	2b00      	cmp	r3, #0
 800f838:	d04a      	beq.n	800f8d0 <_strtod_l+0xa30>
 800f83a:	4b95      	ldr	r3, [pc, #596]	; (800fa90 <_strtod_l+0xbf0>)
 800f83c:	2200      	movs	r2, #0
 800f83e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f842:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800fa90 <_strtod_l+0xbf0>
 800f846:	f04f 0800 	mov.w	r8, #0
 800f84a:	4b92      	ldr	r3, [pc, #584]	; (800fa94 <_strtod_l+0xbf4>)
 800f84c:	403b      	ands	r3, r7
 800f84e:	930d      	str	r3, [sp, #52]	; 0x34
 800f850:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f852:	4b91      	ldr	r3, [pc, #580]	; (800fa98 <_strtod_l+0xbf8>)
 800f854:	429a      	cmp	r2, r3
 800f856:	f040 80b0 	bne.w	800f9ba <_strtod_l+0xb1a>
 800f85a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f85e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800f862:	ec4b ab10 	vmov	d0, sl, fp
 800f866:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f86a:	f001 ff2f 	bl	80116cc <__ulp>
 800f86e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f872:	ec53 2b10 	vmov	r2, r3, d0
 800f876:	f7f0 fe97 	bl	80005a8 <__aeabi_dmul>
 800f87a:	4652      	mov	r2, sl
 800f87c:	465b      	mov	r3, fp
 800f87e:	f7f0 fcdd 	bl	800023c <__adddf3>
 800f882:	460b      	mov	r3, r1
 800f884:	4983      	ldr	r1, [pc, #524]	; (800fa94 <_strtod_l+0xbf4>)
 800f886:	4a85      	ldr	r2, [pc, #532]	; (800fa9c <_strtod_l+0xbfc>)
 800f888:	4019      	ands	r1, r3
 800f88a:	4291      	cmp	r1, r2
 800f88c:	4682      	mov	sl, r0
 800f88e:	d960      	bls.n	800f952 <_strtod_l+0xab2>
 800f890:	ee18 3a90 	vmov	r3, s17
 800f894:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f898:	4293      	cmp	r3, r2
 800f89a:	d104      	bne.n	800f8a6 <_strtod_l+0xa06>
 800f89c:	ee18 3a10 	vmov	r3, s16
 800f8a0:	3301      	adds	r3, #1
 800f8a2:	f43f ad45 	beq.w	800f330 <_strtod_l+0x490>
 800f8a6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800faa8 <_strtod_l+0xc08>
 800f8aa:	f04f 3aff 	mov.w	sl, #4294967295
 800f8ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	f001 fbd9 	bl	8011068 <_Bfree>
 800f8b6:	9905      	ldr	r1, [sp, #20]
 800f8b8:	4620      	mov	r0, r4
 800f8ba:	f001 fbd5 	bl	8011068 <_Bfree>
 800f8be:	4631      	mov	r1, r6
 800f8c0:	4620      	mov	r0, r4
 800f8c2:	f001 fbd1 	bl	8011068 <_Bfree>
 800f8c6:	4629      	mov	r1, r5
 800f8c8:	4620      	mov	r0, r4
 800f8ca:	f001 fbcd 	bl	8011068 <_Bfree>
 800f8ce:	e61a      	b.n	800f506 <_strtod_l+0x666>
 800f8d0:	f1ba 0f00 	cmp.w	sl, #0
 800f8d4:	d11b      	bne.n	800f90e <_strtod_l+0xa6e>
 800f8d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f8da:	b9f3      	cbnz	r3, 800f91a <_strtod_l+0xa7a>
 800f8dc:	4b6c      	ldr	r3, [pc, #432]	; (800fa90 <_strtod_l+0xbf0>)
 800f8de:	2200      	movs	r2, #0
 800f8e0:	4640      	mov	r0, r8
 800f8e2:	4649      	mov	r1, r9
 800f8e4:	f7f1 f8d2 	bl	8000a8c <__aeabi_dcmplt>
 800f8e8:	b9d0      	cbnz	r0, 800f920 <_strtod_l+0xa80>
 800f8ea:	4640      	mov	r0, r8
 800f8ec:	4649      	mov	r1, r9
 800f8ee:	4b6c      	ldr	r3, [pc, #432]	; (800faa0 <_strtod_l+0xc00>)
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	f7f0 fe59 	bl	80005a8 <__aeabi_dmul>
 800f8f6:	4680      	mov	r8, r0
 800f8f8:	4689      	mov	r9, r1
 800f8fa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f8fe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800f902:	9315      	str	r3, [sp, #84]	; 0x54
 800f904:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f908:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f90c:	e79d      	b.n	800f84a <_strtod_l+0x9aa>
 800f90e:	f1ba 0f01 	cmp.w	sl, #1
 800f912:	d102      	bne.n	800f91a <_strtod_l+0xa7a>
 800f914:	2f00      	cmp	r7, #0
 800f916:	f43f ad83 	beq.w	800f420 <_strtod_l+0x580>
 800f91a:	4b62      	ldr	r3, [pc, #392]	; (800faa4 <_strtod_l+0xc04>)
 800f91c:	2200      	movs	r2, #0
 800f91e:	e78e      	b.n	800f83e <_strtod_l+0x99e>
 800f920:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800faa0 <_strtod_l+0xc00>
 800f924:	f04f 0800 	mov.w	r8, #0
 800f928:	e7e7      	b.n	800f8fa <_strtod_l+0xa5a>
 800f92a:	4b5d      	ldr	r3, [pc, #372]	; (800faa0 <_strtod_l+0xc00>)
 800f92c:	4640      	mov	r0, r8
 800f92e:	4649      	mov	r1, r9
 800f930:	2200      	movs	r2, #0
 800f932:	f7f0 fe39 	bl	80005a8 <__aeabi_dmul>
 800f936:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f938:	4680      	mov	r8, r0
 800f93a:	4689      	mov	r9, r1
 800f93c:	b933      	cbnz	r3, 800f94c <_strtod_l+0xaac>
 800f93e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f942:	900e      	str	r0, [sp, #56]	; 0x38
 800f944:	930f      	str	r3, [sp, #60]	; 0x3c
 800f946:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800f94a:	e7dd      	b.n	800f908 <_strtod_l+0xa68>
 800f94c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800f950:	e7f9      	b.n	800f946 <_strtod_l+0xaa6>
 800f952:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f956:	9b04      	ldr	r3, [sp, #16]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d1a8      	bne.n	800f8ae <_strtod_l+0xa0e>
 800f95c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f960:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f962:	0d1b      	lsrs	r3, r3, #20
 800f964:	051b      	lsls	r3, r3, #20
 800f966:	429a      	cmp	r2, r3
 800f968:	d1a1      	bne.n	800f8ae <_strtod_l+0xa0e>
 800f96a:	4640      	mov	r0, r8
 800f96c:	4649      	mov	r1, r9
 800f96e:	f7f1 f963 	bl	8000c38 <__aeabi_d2lz>
 800f972:	f7f0 fdeb 	bl	800054c <__aeabi_l2d>
 800f976:	4602      	mov	r2, r0
 800f978:	460b      	mov	r3, r1
 800f97a:	4640      	mov	r0, r8
 800f97c:	4649      	mov	r1, r9
 800f97e:	f7f0 fc5b 	bl	8000238 <__aeabi_dsub>
 800f982:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f984:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f988:	ea43 030a 	orr.w	r3, r3, sl
 800f98c:	4313      	orrs	r3, r2
 800f98e:	4680      	mov	r8, r0
 800f990:	4689      	mov	r9, r1
 800f992:	d055      	beq.n	800fa40 <_strtod_l+0xba0>
 800f994:	a336      	add	r3, pc, #216	; (adr r3, 800fa70 <_strtod_l+0xbd0>)
 800f996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f99a:	f7f1 f877 	bl	8000a8c <__aeabi_dcmplt>
 800f99e:	2800      	cmp	r0, #0
 800f9a0:	f47f acd0 	bne.w	800f344 <_strtod_l+0x4a4>
 800f9a4:	a334      	add	r3, pc, #208	; (adr r3, 800fa78 <_strtod_l+0xbd8>)
 800f9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9aa:	4640      	mov	r0, r8
 800f9ac:	4649      	mov	r1, r9
 800f9ae:	f7f1 f88b 	bl	8000ac8 <__aeabi_dcmpgt>
 800f9b2:	2800      	cmp	r0, #0
 800f9b4:	f43f af7b 	beq.w	800f8ae <_strtod_l+0xa0e>
 800f9b8:	e4c4      	b.n	800f344 <_strtod_l+0x4a4>
 800f9ba:	9b04      	ldr	r3, [sp, #16]
 800f9bc:	b333      	cbz	r3, 800fa0c <_strtod_l+0xb6c>
 800f9be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f9c0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f9c4:	d822      	bhi.n	800fa0c <_strtod_l+0xb6c>
 800f9c6:	a32e      	add	r3, pc, #184	; (adr r3, 800fa80 <_strtod_l+0xbe0>)
 800f9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9cc:	4640      	mov	r0, r8
 800f9ce:	4649      	mov	r1, r9
 800f9d0:	f7f1 f866 	bl	8000aa0 <__aeabi_dcmple>
 800f9d4:	b1a0      	cbz	r0, 800fa00 <_strtod_l+0xb60>
 800f9d6:	4649      	mov	r1, r9
 800f9d8:	4640      	mov	r0, r8
 800f9da:	f7f1 f8bd 	bl	8000b58 <__aeabi_d2uiz>
 800f9de:	2801      	cmp	r0, #1
 800f9e0:	bf38      	it	cc
 800f9e2:	2001      	movcc	r0, #1
 800f9e4:	f7f0 fd66 	bl	80004b4 <__aeabi_ui2d>
 800f9e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9ea:	4680      	mov	r8, r0
 800f9ec:	4689      	mov	r9, r1
 800f9ee:	bb23      	cbnz	r3, 800fa3a <_strtod_l+0xb9a>
 800f9f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f9f4:	9010      	str	r0, [sp, #64]	; 0x40
 800f9f6:	9311      	str	r3, [sp, #68]	; 0x44
 800f9f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f9fc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fa00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fa04:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800fa08:	1a9b      	subs	r3, r3, r2
 800fa0a:	9309      	str	r3, [sp, #36]	; 0x24
 800fa0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fa10:	eeb0 0a48 	vmov.f32	s0, s16
 800fa14:	eef0 0a68 	vmov.f32	s1, s17
 800fa18:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fa1c:	f001 fe56 	bl	80116cc <__ulp>
 800fa20:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fa24:	ec53 2b10 	vmov	r2, r3, d0
 800fa28:	f7f0 fdbe 	bl	80005a8 <__aeabi_dmul>
 800fa2c:	ec53 2b18 	vmov	r2, r3, d8
 800fa30:	f7f0 fc04 	bl	800023c <__adddf3>
 800fa34:	4682      	mov	sl, r0
 800fa36:	468b      	mov	fp, r1
 800fa38:	e78d      	b.n	800f956 <_strtod_l+0xab6>
 800fa3a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800fa3e:	e7db      	b.n	800f9f8 <_strtod_l+0xb58>
 800fa40:	a311      	add	r3, pc, #68	; (adr r3, 800fa88 <_strtod_l+0xbe8>)
 800fa42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa46:	f7f1 f821 	bl	8000a8c <__aeabi_dcmplt>
 800fa4a:	e7b2      	b.n	800f9b2 <_strtod_l+0xb12>
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	930a      	str	r3, [sp, #40]	; 0x28
 800fa50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fa52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fa54:	6013      	str	r3, [r2, #0]
 800fa56:	f7ff ba6b 	b.w	800ef30 <_strtod_l+0x90>
 800fa5a:	2a65      	cmp	r2, #101	; 0x65
 800fa5c:	f43f ab5f 	beq.w	800f11e <_strtod_l+0x27e>
 800fa60:	2a45      	cmp	r2, #69	; 0x45
 800fa62:	f43f ab5c 	beq.w	800f11e <_strtod_l+0x27e>
 800fa66:	2301      	movs	r3, #1
 800fa68:	f7ff bb94 	b.w	800f194 <_strtod_l+0x2f4>
 800fa6c:	f3af 8000 	nop.w
 800fa70:	94a03595 	.word	0x94a03595
 800fa74:	3fdfffff 	.word	0x3fdfffff
 800fa78:	35afe535 	.word	0x35afe535
 800fa7c:	3fe00000 	.word	0x3fe00000
 800fa80:	ffc00000 	.word	0xffc00000
 800fa84:	41dfffff 	.word	0x41dfffff
 800fa88:	94a03595 	.word	0x94a03595
 800fa8c:	3fcfffff 	.word	0x3fcfffff
 800fa90:	3ff00000 	.word	0x3ff00000
 800fa94:	7ff00000 	.word	0x7ff00000
 800fa98:	7fe00000 	.word	0x7fe00000
 800fa9c:	7c9fffff 	.word	0x7c9fffff
 800faa0:	3fe00000 	.word	0x3fe00000
 800faa4:	bff00000 	.word	0xbff00000
 800faa8:	7fefffff 	.word	0x7fefffff

0800faac <_strtod_r>:
 800faac:	4b01      	ldr	r3, [pc, #4]	; (800fab4 <_strtod_r+0x8>)
 800faae:	f7ff b9f7 	b.w	800eea0 <_strtod_l>
 800fab2:	bf00      	nop
 800fab4:	20000178 	.word	0x20000178

0800fab8 <_strtol_l.constprop.0>:
 800fab8:	2b01      	cmp	r3, #1
 800faba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fabe:	d001      	beq.n	800fac4 <_strtol_l.constprop.0+0xc>
 800fac0:	2b24      	cmp	r3, #36	; 0x24
 800fac2:	d906      	bls.n	800fad2 <_strtol_l.constprop.0+0x1a>
 800fac4:	f7fe faf0 	bl	800e0a8 <__errno>
 800fac8:	2316      	movs	r3, #22
 800faca:	6003      	str	r3, [r0, #0]
 800facc:	2000      	movs	r0, #0
 800face:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fad2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800fbb8 <_strtol_l.constprop.0+0x100>
 800fad6:	460d      	mov	r5, r1
 800fad8:	462e      	mov	r6, r5
 800fada:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fade:	f814 700c 	ldrb.w	r7, [r4, ip]
 800fae2:	f017 0708 	ands.w	r7, r7, #8
 800fae6:	d1f7      	bne.n	800fad8 <_strtol_l.constprop.0+0x20>
 800fae8:	2c2d      	cmp	r4, #45	; 0x2d
 800faea:	d132      	bne.n	800fb52 <_strtol_l.constprop.0+0x9a>
 800faec:	782c      	ldrb	r4, [r5, #0]
 800faee:	2701      	movs	r7, #1
 800faf0:	1cb5      	adds	r5, r6, #2
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d05b      	beq.n	800fbae <_strtol_l.constprop.0+0xf6>
 800faf6:	2b10      	cmp	r3, #16
 800faf8:	d109      	bne.n	800fb0e <_strtol_l.constprop.0+0x56>
 800fafa:	2c30      	cmp	r4, #48	; 0x30
 800fafc:	d107      	bne.n	800fb0e <_strtol_l.constprop.0+0x56>
 800fafe:	782c      	ldrb	r4, [r5, #0]
 800fb00:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fb04:	2c58      	cmp	r4, #88	; 0x58
 800fb06:	d14d      	bne.n	800fba4 <_strtol_l.constprop.0+0xec>
 800fb08:	786c      	ldrb	r4, [r5, #1]
 800fb0a:	2310      	movs	r3, #16
 800fb0c:	3502      	adds	r5, #2
 800fb0e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800fb12:	f108 38ff 	add.w	r8, r8, #4294967295
 800fb16:	f04f 0c00 	mov.w	ip, #0
 800fb1a:	fbb8 f9f3 	udiv	r9, r8, r3
 800fb1e:	4666      	mov	r6, ip
 800fb20:	fb03 8a19 	mls	sl, r3, r9, r8
 800fb24:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800fb28:	f1be 0f09 	cmp.w	lr, #9
 800fb2c:	d816      	bhi.n	800fb5c <_strtol_l.constprop.0+0xa4>
 800fb2e:	4674      	mov	r4, lr
 800fb30:	42a3      	cmp	r3, r4
 800fb32:	dd24      	ble.n	800fb7e <_strtol_l.constprop.0+0xc6>
 800fb34:	f1bc 0f00 	cmp.w	ip, #0
 800fb38:	db1e      	blt.n	800fb78 <_strtol_l.constprop.0+0xc0>
 800fb3a:	45b1      	cmp	r9, r6
 800fb3c:	d31c      	bcc.n	800fb78 <_strtol_l.constprop.0+0xc0>
 800fb3e:	d101      	bne.n	800fb44 <_strtol_l.constprop.0+0x8c>
 800fb40:	45a2      	cmp	sl, r4
 800fb42:	db19      	blt.n	800fb78 <_strtol_l.constprop.0+0xc0>
 800fb44:	fb06 4603 	mla	r6, r6, r3, r4
 800fb48:	f04f 0c01 	mov.w	ip, #1
 800fb4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fb50:	e7e8      	b.n	800fb24 <_strtol_l.constprop.0+0x6c>
 800fb52:	2c2b      	cmp	r4, #43	; 0x2b
 800fb54:	bf04      	itt	eq
 800fb56:	782c      	ldrbeq	r4, [r5, #0]
 800fb58:	1cb5      	addeq	r5, r6, #2
 800fb5a:	e7ca      	b.n	800faf2 <_strtol_l.constprop.0+0x3a>
 800fb5c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800fb60:	f1be 0f19 	cmp.w	lr, #25
 800fb64:	d801      	bhi.n	800fb6a <_strtol_l.constprop.0+0xb2>
 800fb66:	3c37      	subs	r4, #55	; 0x37
 800fb68:	e7e2      	b.n	800fb30 <_strtol_l.constprop.0+0x78>
 800fb6a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800fb6e:	f1be 0f19 	cmp.w	lr, #25
 800fb72:	d804      	bhi.n	800fb7e <_strtol_l.constprop.0+0xc6>
 800fb74:	3c57      	subs	r4, #87	; 0x57
 800fb76:	e7db      	b.n	800fb30 <_strtol_l.constprop.0+0x78>
 800fb78:	f04f 3cff 	mov.w	ip, #4294967295
 800fb7c:	e7e6      	b.n	800fb4c <_strtol_l.constprop.0+0x94>
 800fb7e:	f1bc 0f00 	cmp.w	ip, #0
 800fb82:	da05      	bge.n	800fb90 <_strtol_l.constprop.0+0xd8>
 800fb84:	2322      	movs	r3, #34	; 0x22
 800fb86:	6003      	str	r3, [r0, #0]
 800fb88:	4646      	mov	r6, r8
 800fb8a:	b942      	cbnz	r2, 800fb9e <_strtol_l.constprop.0+0xe6>
 800fb8c:	4630      	mov	r0, r6
 800fb8e:	e79e      	b.n	800face <_strtol_l.constprop.0+0x16>
 800fb90:	b107      	cbz	r7, 800fb94 <_strtol_l.constprop.0+0xdc>
 800fb92:	4276      	negs	r6, r6
 800fb94:	2a00      	cmp	r2, #0
 800fb96:	d0f9      	beq.n	800fb8c <_strtol_l.constprop.0+0xd4>
 800fb98:	f1bc 0f00 	cmp.w	ip, #0
 800fb9c:	d000      	beq.n	800fba0 <_strtol_l.constprop.0+0xe8>
 800fb9e:	1e69      	subs	r1, r5, #1
 800fba0:	6011      	str	r1, [r2, #0]
 800fba2:	e7f3      	b.n	800fb8c <_strtol_l.constprop.0+0xd4>
 800fba4:	2430      	movs	r4, #48	; 0x30
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d1b1      	bne.n	800fb0e <_strtol_l.constprop.0+0x56>
 800fbaa:	2308      	movs	r3, #8
 800fbac:	e7af      	b.n	800fb0e <_strtol_l.constprop.0+0x56>
 800fbae:	2c30      	cmp	r4, #48	; 0x30
 800fbb0:	d0a5      	beq.n	800fafe <_strtol_l.constprop.0+0x46>
 800fbb2:	230a      	movs	r3, #10
 800fbb4:	e7ab      	b.n	800fb0e <_strtol_l.constprop.0+0x56>
 800fbb6:	bf00      	nop
 800fbb8:	08012c59 	.word	0x08012c59

0800fbbc <_strtol_r>:
 800fbbc:	f7ff bf7c 	b.w	800fab8 <_strtol_l.constprop.0>

0800fbc0 <strtol>:
 800fbc0:	4613      	mov	r3, r2
 800fbc2:	460a      	mov	r2, r1
 800fbc4:	4601      	mov	r1, r0
 800fbc6:	4802      	ldr	r0, [pc, #8]	; (800fbd0 <strtol+0x10>)
 800fbc8:	6800      	ldr	r0, [r0, #0]
 800fbca:	f7ff bf75 	b.w	800fab8 <_strtol_l.constprop.0>
 800fbce:	bf00      	nop
 800fbd0:	20000110 	.word	0x20000110

0800fbd4 <quorem>:
 800fbd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbd8:	6903      	ldr	r3, [r0, #16]
 800fbda:	690c      	ldr	r4, [r1, #16]
 800fbdc:	42a3      	cmp	r3, r4
 800fbde:	4607      	mov	r7, r0
 800fbe0:	f2c0 8081 	blt.w	800fce6 <quorem+0x112>
 800fbe4:	3c01      	subs	r4, #1
 800fbe6:	f101 0814 	add.w	r8, r1, #20
 800fbea:	f100 0514 	add.w	r5, r0, #20
 800fbee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fbf2:	9301      	str	r3, [sp, #4]
 800fbf4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fbf8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fbfc:	3301      	adds	r3, #1
 800fbfe:	429a      	cmp	r2, r3
 800fc00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fc04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fc08:	fbb2 f6f3 	udiv	r6, r2, r3
 800fc0c:	d331      	bcc.n	800fc72 <quorem+0x9e>
 800fc0e:	f04f 0e00 	mov.w	lr, #0
 800fc12:	4640      	mov	r0, r8
 800fc14:	46ac      	mov	ip, r5
 800fc16:	46f2      	mov	sl, lr
 800fc18:	f850 2b04 	ldr.w	r2, [r0], #4
 800fc1c:	b293      	uxth	r3, r2
 800fc1e:	fb06 e303 	mla	r3, r6, r3, lr
 800fc22:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fc26:	b29b      	uxth	r3, r3
 800fc28:	ebaa 0303 	sub.w	r3, sl, r3
 800fc2c:	f8dc a000 	ldr.w	sl, [ip]
 800fc30:	0c12      	lsrs	r2, r2, #16
 800fc32:	fa13 f38a 	uxtah	r3, r3, sl
 800fc36:	fb06 e202 	mla	r2, r6, r2, lr
 800fc3a:	9300      	str	r3, [sp, #0]
 800fc3c:	9b00      	ldr	r3, [sp, #0]
 800fc3e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fc42:	b292      	uxth	r2, r2
 800fc44:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fc48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fc4c:	f8bd 3000 	ldrh.w	r3, [sp]
 800fc50:	4581      	cmp	r9, r0
 800fc52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc56:	f84c 3b04 	str.w	r3, [ip], #4
 800fc5a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fc5e:	d2db      	bcs.n	800fc18 <quorem+0x44>
 800fc60:	f855 300b 	ldr.w	r3, [r5, fp]
 800fc64:	b92b      	cbnz	r3, 800fc72 <quorem+0x9e>
 800fc66:	9b01      	ldr	r3, [sp, #4]
 800fc68:	3b04      	subs	r3, #4
 800fc6a:	429d      	cmp	r5, r3
 800fc6c:	461a      	mov	r2, r3
 800fc6e:	d32e      	bcc.n	800fcce <quorem+0xfa>
 800fc70:	613c      	str	r4, [r7, #16]
 800fc72:	4638      	mov	r0, r7
 800fc74:	f001 fc84 	bl	8011580 <__mcmp>
 800fc78:	2800      	cmp	r0, #0
 800fc7a:	db24      	blt.n	800fcc6 <quorem+0xf2>
 800fc7c:	3601      	adds	r6, #1
 800fc7e:	4628      	mov	r0, r5
 800fc80:	f04f 0c00 	mov.w	ip, #0
 800fc84:	f858 2b04 	ldr.w	r2, [r8], #4
 800fc88:	f8d0 e000 	ldr.w	lr, [r0]
 800fc8c:	b293      	uxth	r3, r2
 800fc8e:	ebac 0303 	sub.w	r3, ip, r3
 800fc92:	0c12      	lsrs	r2, r2, #16
 800fc94:	fa13 f38e 	uxtah	r3, r3, lr
 800fc98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fc9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fca0:	b29b      	uxth	r3, r3
 800fca2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fca6:	45c1      	cmp	r9, r8
 800fca8:	f840 3b04 	str.w	r3, [r0], #4
 800fcac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fcb0:	d2e8      	bcs.n	800fc84 <quorem+0xb0>
 800fcb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fcb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fcba:	b922      	cbnz	r2, 800fcc6 <quorem+0xf2>
 800fcbc:	3b04      	subs	r3, #4
 800fcbe:	429d      	cmp	r5, r3
 800fcc0:	461a      	mov	r2, r3
 800fcc2:	d30a      	bcc.n	800fcda <quorem+0x106>
 800fcc4:	613c      	str	r4, [r7, #16]
 800fcc6:	4630      	mov	r0, r6
 800fcc8:	b003      	add	sp, #12
 800fcca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcce:	6812      	ldr	r2, [r2, #0]
 800fcd0:	3b04      	subs	r3, #4
 800fcd2:	2a00      	cmp	r2, #0
 800fcd4:	d1cc      	bne.n	800fc70 <quorem+0x9c>
 800fcd6:	3c01      	subs	r4, #1
 800fcd8:	e7c7      	b.n	800fc6a <quorem+0x96>
 800fcda:	6812      	ldr	r2, [r2, #0]
 800fcdc:	3b04      	subs	r3, #4
 800fcde:	2a00      	cmp	r2, #0
 800fce0:	d1f0      	bne.n	800fcc4 <quorem+0xf0>
 800fce2:	3c01      	subs	r4, #1
 800fce4:	e7eb      	b.n	800fcbe <quorem+0xea>
 800fce6:	2000      	movs	r0, #0
 800fce8:	e7ee      	b.n	800fcc8 <quorem+0xf4>
 800fcea:	0000      	movs	r0, r0
 800fcec:	0000      	movs	r0, r0
	...

0800fcf0 <_dtoa_r>:
 800fcf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcf4:	ed2d 8b04 	vpush	{d8-d9}
 800fcf8:	ec57 6b10 	vmov	r6, r7, d0
 800fcfc:	b093      	sub	sp, #76	; 0x4c
 800fcfe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fd00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fd04:	9106      	str	r1, [sp, #24]
 800fd06:	ee10 aa10 	vmov	sl, s0
 800fd0a:	4604      	mov	r4, r0
 800fd0c:	9209      	str	r2, [sp, #36]	; 0x24
 800fd0e:	930c      	str	r3, [sp, #48]	; 0x30
 800fd10:	46bb      	mov	fp, r7
 800fd12:	b975      	cbnz	r5, 800fd32 <_dtoa_r+0x42>
 800fd14:	2010      	movs	r0, #16
 800fd16:	f001 f94d 	bl	8010fb4 <malloc>
 800fd1a:	4602      	mov	r2, r0
 800fd1c:	6260      	str	r0, [r4, #36]	; 0x24
 800fd1e:	b920      	cbnz	r0, 800fd2a <_dtoa_r+0x3a>
 800fd20:	4ba7      	ldr	r3, [pc, #668]	; (800ffc0 <_dtoa_r+0x2d0>)
 800fd22:	21ea      	movs	r1, #234	; 0xea
 800fd24:	48a7      	ldr	r0, [pc, #668]	; (800ffc4 <_dtoa_r+0x2d4>)
 800fd26:	f002 f8ad 	bl	8011e84 <__assert_func>
 800fd2a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fd2e:	6005      	str	r5, [r0, #0]
 800fd30:	60c5      	str	r5, [r0, #12]
 800fd32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd34:	6819      	ldr	r1, [r3, #0]
 800fd36:	b151      	cbz	r1, 800fd4e <_dtoa_r+0x5e>
 800fd38:	685a      	ldr	r2, [r3, #4]
 800fd3a:	604a      	str	r2, [r1, #4]
 800fd3c:	2301      	movs	r3, #1
 800fd3e:	4093      	lsls	r3, r2
 800fd40:	608b      	str	r3, [r1, #8]
 800fd42:	4620      	mov	r0, r4
 800fd44:	f001 f990 	bl	8011068 <_Bfree>
 800fd48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	601a      	str	r2, [r3, #0]
 800fd4e:	1e3b      	subs	r3, r7, #0
 800fd50:	bfaa      	itet	ge
 800fd52:	2300      	movge	r3, #0
 800fd54:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800fd58:	f8c8 3000 	strge.w	r3, [r8]
 800fd5c:	4b9a      	ldr	r3, [pc, #616]	; (800ffc8 <_dtoa_r+0x2d8>)
 800fd5e:	bfbc      	itt	lt
 800fd60:	2201      	movlt	r2, #1
 800fd62:	f8c8 2000 	strlt.w	r2, [r8]
 800fd66:	ea33 030b 	bics.w	r3, r3, fp
 800fd6a:	d11b      	bne.n	800fda4 <_dtoa_r+0xb4>
 800fd6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fd6e:	f242 730f 	movw	r3, #9999	; 0x270f
 800fd72:	6013      	str	r3, [r2, #0]
 800fd74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fd78:	4333      	orrs	r3, r6
 800fd7a:	f000 8592 	beq.w	80108a2 <_dtoa_r+0xbb2>
 800fd7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd80:	b963      	cbnz	r3, 800fd9c <_dtoa_r+0xac>
 800fd82:	4b92      	ldr	r3, [pc, #584]	; (800ffcc <_dtoa_r+0x2dc>)
 800fd84:	e022      	b.n	800fdcc <_dtoa_r+0xdc>
 800fd86:	4b92      	ldr	r3, [pc, #584]	; (800ffd0 <_dtoa_r+0x2e0>)
 800fd88:	9301      	str	r3, [sp, #4]
 800fd8a:	3308      	adds	r3, #8
 800fd8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fd8e:	6013      	str	r3, [r2, #0]
 800fd90:	9801      	ldr	r0, [sp, #4]
 800fd92:	b013      	add	sp, #76	; 0x4c
 800fd94:	ecbd 8b04 	vpop	{d8-d9}
 800fd98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd9c:	4b8b      	ldr	r3, [pc, #556]	; (800ffcc <_dtoa_r+0x2dc>)
 800fd9e:	9301      	str	r3, [sp, #4]
 800fda0:	3303      	adds	r3, #3
 800fda2:	e7f3      	b.n	800fd8c <_dtoa_r+0x9c>
 800fda4:	2200      	movs	r2, #0
 800fda6:	2300      	movs	r3, #0
 800fda8:	4650      	mov	r0, sl
 800fdaa:	4659      	mov	r1, fp
 800fdac:	f7f0 fe64 	bl	8000a78 <__aeabi_dcmpeq>
 800fdb0:	ec4b ab19 	vmov	d9, sl, fp
 800fdb4:	4680      	mov	r8, r0
 800fdb6:	b158      	cbz	r0, 800fdd0 <_dtoa_r+0xe0>
 800fdb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fdba:	2301      	movs	r3, #1
 800fdbc:	6013      	str	r3, [r2, #0]
 800fdbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	f000 856b 	beq.w	801089c <_dtoa_r+0xbac>
 800fdc6:	4883      	ldr	r0, [pc, #524]	; (800ffd4 <_dtoa_r+0x2e4>)
 800fdc8:	6018      	str	r0, [r3, #0]
 800fdca:	1e43      	subs	r3, r0, #1
 800fdcc:	9301      	str	r3, [sp, #4]
 800fdce:	e7df      	b.n	800fd90 <_dtoa_r+0xa0>
 800fdd0:	ec4b ab10 	vmov	d0, sl, fp
 800fdd4:	aa10      	add	r2, sp, #64	; 0x40
 800fdd6:	a911      	add	r1, sp, #68	; 0x44
 800fdd8:	4620      	mov	r0, r4
 800fdda:	f001 fcf3 	bl	80117c4 <__d2b>
 800fdde:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800fde2:	ee08 0a10 	vmov	s16, r0
 800fde6:	2d00      	cmp	r5, #0
 800fde8:	f000 8084 	beq.w	800fef4 <_dtoa_r+0x204>
 800fdec:	ee19 3a90 	vmov	r3, s19
 800fdf0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fdf4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fdf8:	4656      	mov	r6, sl
 800fdfa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fdfe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fe02:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800fe06:	4b74      	ldr	r3, [pc, #464]	; (800ffd8 <_dtoa_r+0x2e8>)
 800fe08:	2200      	movs	r2, #0
 800fe0a:	4630      	mov	r0, r6
 800fe0c:	4639      	mov	r1, r7
 800fe0e:	f7f0 fa13 	bl	8000238 <__aeabi_dsub>
 800fe12:	a365      	add	r3, pc, #404	; (adr r3, 800ffa8 <_dtoa_r+0x2b8>)
 800fe14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe18:	f7f0 fbc6 	bl	80005a8 <__aeabi_dmul>
 800fe1c:	a364      	add	r3, pc, #400	; (adr r3, 800ffb0 <_dtoa_r+0x2c0>)
 800fe1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe22:	f7f0 fa0b 	bl	800023c <__adddf3>
 800fe26:	4606      	mov	r6, r0
 800fe28:	4628      	mov	r0, r5
 800fe2a:	460f      	mov	r7, r1
 800fe2c:	f7f0 fb52 	bl	80004d4 <__aeabi_i2d>
 800fe30:	a361      	add	r3, pc, #388	; (adr r3, 800ffb8 <_dtoa_r+0x2c8>)
 800fe32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe36:	f7f0 fbb7 	bl	80005a8 <__aeabi_dmul>
 800fe3a:	4602      	mov	r2, r0
 800fe3c:	460b      	mov	r3, r1
 800fe3e:	4630      	mov	r0, r6
 800fe40:	4639      	mov	r1, r7
 800fe42:	f7f0 f9fb 	bl	800023c <__adddf3>
 800fe46:	4606      	mov	r6, r0
 800fe48:	460f      	mov	r7, r1
 800fe4a:	f7f0 fe5d 	bl	8000b08 <__aeabi_d2iz>
 800fe4e:	2200      	movs	r2, #0
 800fe50:	9000      	str	r0, [sp, #0]
 800fe52:	2300      	movs	r3, #0
 800fe54:	4630      	mov	r0, r6
 800fe56:	4639      	mov	r1, r7
 800fe58:	f7f0 fe18 	bl	8000a8c <__aeabi_dcmplt>
 800fe5c:	b150      	cbz	r0, 800fe74 <_dtoa_r+0x184>
 800fe5e:	9800      	ldr	r0, [sp, #0]
 800fe60:	f7f0 fb38 	bl	80004d4 <__aeabi_i2d>
 800fe64:	4632      	mov	r2, r6
 800fe66:	463b      	mov	r3, r7
 800fe68:	f7f0 fe06 	bl	8000a78 <__aeabi_dcmpeq>
 800fe6c:	b910      	cbnz	r0, 800fe74 <_dtoa_r+0x184>
 800fe6e:	9b00      	ldr	r3, [sp, #0]
 800fe70:	3b01      	subs	r3, #1
 800fe72:	9300      	str	r3, [sp, #0]
 800fe74:	9b00      	ldr	r3, [sp, #0]
 800fe76:	2b16      	cmp	r3, #22
 800fe78:	d85a      	bhi.n	800ff30 <_dtoa_r+0x240>
 800fe7a:	9a00      	ldr	r2, [sp, #0]
 800fe7c:	4b57      	ldr	r3, [pc, #348]	; (800ffdc <_dtoa_r+0x2ec>)
 800fe7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe86:	ec51 0b19 	vmov	r0, r1, d9
 800fe8a:	f7f0 fdff 	bl	8000a8c <__aeabi_dcmplt>
 800fe8e:	2800      	cmp	r0, #0
 800fe90:	d050      	beq.n	800ff34 <_dtoa_r+0x244>
 800fe92:	9b00      	ldr	r3, [sp, #0]
 800fe94:	3b01      	subs	r3, #1
 800fe96:	9300      	str	r3, [sp, #0]
 800fe98:	2300      	movs	r3, #0
 800fe9a:	930b      	str	r3, [sp, #44]	; 0x2c
 800fe9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fe9e:	1b5d      	subs	r5, r3, r5
 800fea0:	1e6b      	subs	r3, r5, #1
 800fea2:	9305      	str	r3, [sp, #20]
 800fea4:	bf45      	ittet	mi
 800fea6:	f1c5 0301 	rsbmi	r3, r5, #1
 800feaa:	9304      	strmi	r3, [sp, #16]
 800feac:	2300      	movpl	r3, #0
 800feae:	2300      	movmi	r3, #0
 800feb0:	bf4c      	ite	mi
 800feb2:	9305      	strmi	r3, [sp, #20]
 800feb4:	9304      	strpl	r3, [sp, #16]
 800feb6:	9b00      	ldr	r3, [sp, #0]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	db3d      	blt.n	800ff38 <_dtoa_r+0x248>
 800febc:	9b05      	ldr	r3, [sp, #20]
 800febe:	9a00      	ldr	r2, [sp, #0]
 800fec0:	920a      	str	r2, [sp, #40]	; 0x28
 800fec2:	4413      	add	r3, r2
 800fec4:	9305      	str	r3, [sp, #20]
 800fec6:	2300      	movs	r3, #0
 800fec8:	9307      	str	r3, [sp, #28]
 800feca:	9b06      	ldr	r3, [sp, #24]
 800fecc:	2b09      	cmp	r3, #9
 800fece:	f200 8089 	bhi.w	800ffe4 <_dtoa_r+0x2f4>
 800fed2:	2b05      	cmp	r3, #5
 800fed4:	bfc4      	itt	gt
 800fed6:	3b04      	subgt	r3, #4
 800fed8:	9306      	strgt	r3, [sp, #24]
 800feda:	9b06      	ldr	r3, [sp, #24]
 800fedc:	f1a3 0302 	sub.w	r3, r3, #2
 800fee0:	bfcc      	ite	gt
 800fee2:	2500      	movgt	r5, #0
 800fee4:	2501      	movle	r5, #1
 800fee6:	2b03      	cmp	r3, #3
 800fee8:	f200 8087 	bhi.w	800fffa <_dtoa_r+0x30a>
 800feec:	e8df f003 	tbb	[pc, r3]
 800fef0:	59383a2d 	.word	0x59383a2d
 800fef4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fef8:	441d      	add	r5, r3
 800fefa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fefe:	2b20      	cmp	r3, #32
 800ff00:	bfc1      	itttt	gt
 800ff02:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ff06:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ff0a:	fa0b f303 	lslgt.w	r3, fp, r3
 800ff0e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ff12:	bfda      	itte	le
 800ff14:	f1c3 0320 	rsble	r3, r3, #32
 800ff18:	fa06 f003 	lslle.w	r0, r6, r3
 800ff1c:	4318      	orrgt	r0, r3
 800ff1e:	f7f0 fac9 	bl	80004b4 <__aeabi_ui2d>
 800ff22:	2301      	movs	r3, #1
 800ff24:	4606      	mov	r6, r0
 800ff26:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ff2a:	3d01      	subs	r5, #1
 800ff2c:	930e      	str	r3, [sp, #56]	; 0x38
 800ff2e:	e76a      	b.n	800fe06 <_dtoa_r+0x116>
 800ff30:	2301      	movs	r3, #1
 800ff32:	e7b2      	b.n	800fe9a <_dtoa_r+0x1aa>
 800ff34:	900b      	str	r0, [sp, #44]	; 0x2c
 800ff36:	e7b1      	b.n	800fe9c <_dtoa_r+0x1ac>
 800ff38:	9b04      	ldr	r3, [sp, #16]
 800ff3a:	9a00      	ldr	r2, [sp, #0]
 800ff3c:	1a9b      	subs	r3, r3, r2
 800ff3e:	9304      	str	r3, [sp, #16]
 800ff40:	4253      	negs	r3, r2
 800ff42:	9307      	str	r3, [sp, #28]
 800ff44:	2300      	movs	r3, #0
 800ff46:	930a      	str	r3, [sp, #40]	; 0x28
 800ff48:	e7bf      	b.n	800feca <_dtoa_r+0x1da>
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	9308      	str	r3, [sp, #32]
 800ff4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	dc55      	bgt.n	8010000 <_dtoa_r+0x310>
 800ff54:	2301      	movs	r3, #1
 800ff56:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ff5a:	461a      	mov	r2, r3
 800ff5c:	9209      	str	r2, [sp, #36]	; 0x24
 800ff5e:	e00c      	b.n	800ff7a <_dtoa_r+0x28a>
 800ff60:	2301      	movs	r3, #1
 800ff62:	e7f3      	b.n	800ff4c <_dtoa_r+0x25c>
 800ff64:	2300      	movs	r3, #0
 800ff66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff68:	9308      	str	r3, [sp, #32]
 800ff6a:	9b00      	ldr	r3, [sp, #0]
 800ff6c:	4413      	add	r3, r2
 800ff6e:	9302      	str	r3, [sp, #8]
 800ff70:	3301      	adds	r3, #1
 800ff72:	2b01      	cmp	r3, #1
 800ff74:	9303      	str	r3, [sp, #12]
 800ff76:	bfb8      	it	lt
 800ff78:	2301      	movlt	r3, #1
 800ff7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ff7c:	2200      	movs	r2, #0
 800ff7e:	6042      	str	r2, [r0, #4]
 800ff80:	2204      	movs	r2, #4
 800ff82:	f102 0614 	add.w	r6, r2, #20
 800ff86:	429e      	cmp	r6, r3
 800ff88:	6841      	ldr	r1, [r0, #4]
 800ff8a:	d93d      	bls.n	8010008 <_dtoa_r+0x318>
 800ff8c:	4620      	mov	r0, r4
 800ff8e:	f001 f82b 	bl	8010fe8 <_Balloc>
 800ff92:	9001      	str	r0, [sp, #4]
 800ff94:	2800      	cmp	r0, #0
 800ff96:	d13b      	bne.n	8010010 <_dtoa_r+0x320>
 800ff98:	4b11      	ldr	r3, [pc, #68]	; (800ffe0 <_dtoa_r+0x2f0>)
 800ff9a:	4602      	mov	r2, r0
 800ff9c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ffa0:	e6c0      	b.n	800fd24 <_dtoa_r+0x34>
 800ffa2:	2301      	movs	r3, #1
 800ffa4:	e7df      	b.n	800ff66 <_dtoa_r+0x276>
 800ffa6:	bf00      	nop
 800ffa8:	636f4361 	.word	0x636f4361
 800ffac:	3fd287a7 	.word	0x3fd287a7
 800ffb0:	8b60c8b3 	.word	0x8b60c8b3
 800ffb4:	3fc68a28 	.word	0x3fc68a28
 800ffb8:	509f79fb 	.word	0x509f79fb
 800ffbc:	3fd34413 	.word	0x3fd34413
 800ffc0:	08012d66 	.word	0x08012d66
 800ffc4:	08012d7d 	.word	0x08012d7d
 800ffc8:	7ff00000 	.word	0x7ff00000
 800ffcc:	08012d62 	.word	0x08012d62
 800ffd0:	08012d59 	.word	0x08012d59
 800ffd4:	08012bd9 	.word	0x08012bd9
 800ffd8:	3ff80000 	.word	0x3ff80000
 800ffdc:	08012ee8 	.word	0x08012ee8
 800ffe0:	08012dd8 	.word	0x08012dd8
 800ffe4:	2501      	movs	r5, #1
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	9306      	str	r3, [sp, #24]
 800ffea:	9508      	str	r5, [sp, #32]
 800ffec:	f04f 33ff 	mov.w	r3, #4294967295
 800fff0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fff4:	2200      	movs	r2, #0
 800fff6:	2312      	movs	r3, #18
 800fff8:	e7b0      	b.n	800ff5c <_dtoa_r+0x26c>
 800fffa:	2301      	movs	r3, #1
 800fffc:	9308      	str	r3, [sp, #32]
 800fffe:	e7f5      	b.n	800ffec <_dtoa_r+0x2fc>
 8010000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010002:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010006:	e7b8      	b.n	800ff7a <_dtoa_r+0x28a>
 8010008:	3101      	adds	r1, #1
 801000a:	6041      	str	r1, [r0, #4]
 801000c:	0052      	lsls	r2, r2, #1
 801000e:	e7b8      	b.n	800ff82 <_dtoa_r+0x292>
 8010010:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010012:	9a01      	ldr	r2, [sp, #4]
 8010014:	601a      	str	r2, [r3, #0]
 8010016:	9b03      	ldr	r3, [sp, #12]
 8010018:	2b0e      	cmp	r3, #14
 801001a:	f200 809d 	bhi.w	8010158 <_dtoa_r+0x468>
 801001e:	2d00      	cmp	r5, #0
 8010020:	f000 809a 	beq.w	8010158 <_dtoa_r+0x468>
 8010024:	9b00      	ldr	r3, [sp, #0]
 8010026:	2b00      	cmp	r3, #0
 8010028:	dd32      	ble.n	8010090 <_dtoa_r+0x3a0>
 801002a:	4ab7      	ldr	r2, [pc, #732]	; (8010308 <_dtoa_r+0x618>)
 801002c:	f003 030f 	and.w	r3, r3, #15
 8010030:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010034:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010038:	9b00      	ldr	r3, [sp, #0]
 801003a:	05d8      	lsls	r0, r3, #23
 801003c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010040:	d516      	bpl.n	8010070 <_dtoa_r+0x380>
 8010042:	4bb2      	ldr	r3, [pc, #712]	; (801030c <_dtoa_r+0x61c>)
 8010044:	ec51 0b19 	vmov	r0, r1, d9
 8010048:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801004c:	f7f0 fbd6 	bl	80007fc <__aeabi_ddiv>
 8010050:	f007 070f 	and.w	r7, r7, #15
 8010054:	4682      	mov	sl, r0
 8010056:	468b      	mov	fp, r1
 8010058:	2503      	movs	r5, #3
 801005a:	4eac      	ldr	r6, [pc, #688]	; (801030c <_dtoa_r+0x61c>)
 801005c:	b957      	cbnz	r7, 8010074 <_dtoa_r+0x384>
 801005e:	4642      	mov	r2, r8
 8010060:	464b      	mov	r3, r9
 8010062:	4650      	mov	r0, sl
 8010064:	4659      	mov	r1, fp
 8010066:	f7f0 fbc9 	bl	80007fc <__aeabi_ddiv>
 801006a:	4682      	mov	sl, r0
 801006c:	468b      	mov	fp, r1
 801006e:	e028      	b.n	80100c2 <_dtoa_r+0x3d2>
 8010070:	2502      	movs	r5, #2
 8010072:	e7f2      	b.n	801005a <_dtoa_r+0x36a>
 8010074:	07f9      	lsls	r1, r7, #31
 8010076:	d508      	bpl.n	801008a <_dtoa_r+0x39a>
 8010078:	4640      	mov	r0, r8
 801007a:	4649      	mov	r1, r9
 801007c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010080:	f7f0 fa92 	bl	80005a8 <__aeabi_dmul>
 8010084:	3501      	adds	r5, #1
 8010086:	4680      	mov	r8, r0
 8010088:	4689      	mov	r9, r1
 801008a:	107f      	asrs	r7, r7, #1
 801008c:	3608      	adds	r6, #8
 801008e:	e7e5      	b.n	801005c <_dtoa_r+0x36c>
 8010090:	f000 809b 	beq.w	80101ca <_dtoa_r+0x4da>
 8010094:	9b00      	ldr	r3, [sp, #0]
 8010096:	4f9d      	ldr	r7, [pc, #628]	; (801030c <_dtoa_r+0x61c>)
 8010098:	425e      	negs	r6, r3
 801009a:	4b9b      	ldr	r3, [pc, #620]	; (8010308 <_dtoa_r+0x618>)
 801009c:	f006 020f 	and.w	r2, r6, #15
 80100a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80100a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100a8:	ec51 0b19 	vmov	r0, r1, d9
 80100ac:	f7f0 fa7c 	bl	80005a8 <__aeabi_dmul>
 80100b0:	1136      	asrs	r6, r6, #4
 80100b2:	4682      	mov	sl, r0
 80100b4:	468b      	mov	fp, r1
 80100b6:	2300      	movs	r3, #0
 80100b8:	2502      	movs	r5, #2
 80100ba:	2e00      	cmp	r6, #0
 80100bc:	d17a      	bne.n	80101b4 <_dtoa_r+0x4c4>
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d1d3      	bne.n	801006a <_dtoa_r+0x37a>
 80100c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	f000 8082 	beq.w	80101ce <_dtoa_r+0x4de>
 80100ca:	4b91      	ldr	r3, [pc, #580]	; (8010310 <_dtoa_r+0x620>)
 80100cc:	2200      	movs	r2, #0
 80100ce:	4650      	mov	r0, sl
 80100d0:	4659      	mov	r1, fp
 80100d2:	f7f0 fcdb 	bl	8000a8c <__aeabi_dcmplt>
 80100d6:	2800      	cmp	r0, #0
 80100d8:	d079      	beq.n	80101ce <_dtoa_r+0x4de>
 80100da:	9b03      	ldr	r3, [sp, #12]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d076      	beq.n	80101ce <_dtoa_r+0x4de>
 80100e0:	9b02      	ldr	r3, [sp, #8]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	dd36      	ble.n	8010154 <_dtoa_r+0x464>
 80100e6:	9b00      	ldr	r3, [sp, #0]
 80100e8:	4650      	mov	r0, sl
 80100ea:	4659      	mov	r1, fp
 80100ec:	1e5f      	subs	r7, r3, #1
 80100ee:	2200      	movs	r2, #0
 80100f0:	4b88      	ldr	r3, [pc, #544]	; (8010314 <_dtoa_r+0x624>)
 80100f2:	f7f0 fa59 	bl	80005a8 <__aeabi_dmul>
 80100f6:	9e02      	ldr	r6, [sp, #8]
 80100f8:	4682      	mov	sl, r0
 80100fa:	468b      	mov	fp, r1
 80100fc:	3501      	adds	r5, #1
 80100fe:	4628      	mov	r0, r5
 8010100:	f7f0 f9e8 	bl	80004d4 <__aeabi_i2d>
 8010104:	4652      	mov	r2, sl
 8010106:	465b      	mov	r3, fp
 8010108:	f7f0 fa4e 	bl	80005a8 <__aeabi_dmul>
 801010c:	4b82      	ldr	r3, [pc, #520]	; (8010318 <_dtoa_r+0x628>)
 801010e:	2200      	movs	r2, #0
 8010110:	f7f0 f894 	bl	800023c <__adddf3>
 8010114:	46d0      	mov	r8, sl
 8010116:	46d9      	mov	r9, fp
 8010118:	4682      	mov	sl, r0
 801011a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801011e:	2e00      	cmp	r6, #0
 8010120:	d158      	bne.n	80101d4 <_dtoa_r+0x4e4>
 8010122:	4b7e      	ldr	r3, [pc, #504]	; (801031c <_dtoa_r+0x62c>)
 8010124:	2200      	movs	r2, #0
 8010126:	4640      	mov	r0, r8
 8010128:	4649      	mov	r1, r9
 801012a:	f7f0 f885 	bl	8000238 <__aeabi_dsub>
 801012e:	4652      	mov	r2, sl
 8010130:	465b      	mov	r3, fp
 8010132:	4680      	mov	r8, r0
 8010134:	4689      	mov	r9, r1
 8010136:	f7f0 fcc7 	bl	8000ac8 <__aeabi_dcmpgt>
 801013a:	2800      	cmp	r0, #0
 801013c:	f040 8295 	bne.w	801066a <_dtoa_r+0x97a>
 8010140:	4652      	mov	r2, sl
 8010142:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010146:	4640      	mov	r0, r8
 8010148:	4649      	mov	r1, r9
 801014a:	f7f0 fc9f 	bl	8000a8c <__aeabi_dcmplt>
 801014e:	2800      	cmp	r0, #0
 8010150:	f040 8289 	bne.w	8010666 <_dtoa_r+0x976>
 8010154:	ec5b ab19 	vmov	sl, fp, d9
 8010158:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801015a:	2b00      	cmp	r3, #0
 801015c:	f2c0 8148 	blt.w	80103f0 <_dtoa_r+0x700>
 8010160:	9a00      	ldr	r2, [sp, #0]
 8010162:	2a0e      	cmp	r2, #14
 8010164:	f300 8144 	bgt.w	80103f0 <_dtoa_r+0x700>
 8010168:	4b67      	ldr	r3, [pc, #412]	; (8010308 <_dtoa_r+0x618>)
 801016a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801016e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010174:	2b00      	cmp	r3, #0
 8010176:	f280 80d5 	bge.w	8010324 <_dtoa_r+0x634>
 801017a:	9b03      	ldr	r3, [sp, #12]
 801017c:	2b00      	cmp	r3, #0
 801017e:	f300 80d1 	bgt.w	8010324 <_dtoa_r+0x634>
 8010182:	f040 826f 	bne.w	8010664 <_dtoa_r+0x974>
 8010186:	4b65      	ldr	r3, [pc, #404]	; (801031c <_dtoa_r+0x62c>)
 8010188:	2200      	movs	r2, #0
 801018a:	4640      	mov	r0, r8
 801018c:	4649      	mov	r1, r9
 801018e:	f7f0 fa0b 	bl	80005a8 <__aeabi_dmul>
 8010192:	4652      	mov	r2, sl
 8010194:	465b      	mov	r3, fp
 8010196:	f7f0 fc8d 	bl	8000ab4 <__aeabi_dcmpge>
 801019a:	9e03      	ldr	r6, [sp, #12]
 801019c:	4637      	mov	r7, r6
 801019e:	2800      	cmp	r0, #0
 80101a0:	f040 8245 	bne.w	801062e <_dtoa_r+0x93e>
 80101a4:	9d01      	ldr	r5, [sp, #4]
 80101a6:	2331      	movs	r3, #49	; 0x31
 80101a8:	f805 3b01 	strb.w	r3, [r5], #1
 80101ac:	9b00      	ldr	r3, [sp, #0]
 80101ae:	3301      	adds	r3, #1
 80101b0:	9300      	str	r3, [sp, #0]
 80101b2:	e240      	b.n	8010636 <_dtoa_r+0x946>
 80101b4:	07f2      	lsls	r2, r6, #31
 80101b6:	d505      	bpl.n	80101c4 <_dtoa_r+0x4d4>
 80101b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80101bc:	f7f0 f9f4 	bl	80005a8 <__aeabi_dmul>
 80101c0:	3501      	adds	r5, #1
 80101c2:	2301      	movs	r3, #1
 80101c4:	1076      	asrs	r6, r6, #1
 80101c6:	3708      	adds	r7, #8
 80101c8:	e777      	b.n	80100ba <_dtoa_r+0x3ca>
 80101ca:	2502      	movs	r5, #2
 80101cc:	e779      	b.n	80100c2 <_dtoa_r+0x3d2>
 80101ce:	9f00      	ldr	r7, [sp, #0]
 80101d0:	9e03      	ldr	r6, [sp, #12]
 80101d2:	e794      	b.n	80100fe <_dtoa_r+0x40e>
 80101d4:	9901      	ldr	r1, [sp, #4]
 80101d6:	4b4c      	ldr	r3, [pc, #304]	; (8010308 <_dtoa_r+0x618>)
 80101d8:	4431      	add	r1, r6
 80101da:	910d      	str	r1, [sp, #52]	; 0x34
 80101dc:	9908      	ldr	r1, [sp, #32]
 80101de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80101e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80101e6:	2900      	cmp	r1, #0
 80101e8:	d043      	beq.n	8010272 <_dtoa_r+0x582>
 80101ea:	494d      	ldr	r1, [pc, #308]	; (8010320 <_dtoa_r+0x630>)
 80101ec:	2000      	movs	r0, #0
 80101ee:	f7f0 fb05 	bl	80007fc <__aeabi_ddiv>
 80101f2:	4652      	mov	r2, sl
 80101f4:	465b      	mov	r3, fp
 80101f6:	f7f0 f81f 	bl	8000238 <__aeabi_dsub>
 80101fa:	9d01      	ldr	r5, [sp, #4]
 80101fc:	4682      	mov	sl, r0
 80101fe:	468b      	mov	fp, r1
 8010200:	4649      	mov	r1, r9
 8010202:	4640      	mov	r0, r8
 8010204:	f7f0 fc80 	bl	8000b08 <__aeabi_d2iz>
 8010208:	4606      	mov	r6, r0
 801020a:	f7f0 f963 	bl	80004d4 <__aeabi_i2d>
 801020e:	4602      	mov	r2, r0
 8010210:	460b      	mov	r3, r1
 8010212:	4640      	mov	r0, r8
 8010214:	4649      	mov	r1, r9
 8010216:	f7f0 f80f 	bl	8000238 <__aeabi_dsub>
 801021a:	3630      	adds	r6, #48	; 0x30
 801021c:	f805 6b01 	strb.w	r6, [r5], #1
 8010220:	4652      	mov	r2, sl
 8010222:	465b      	mov	r3, fp
 8010224:	4680      	mov	r8, r0
 8010226:	4689      	mov	r9, r1
 8010228:	f7f0 fc30 	bl	8000a8c <__aeabi_dcmplt>
 801022c:	2800      	cmp	r0, #0
 801022e:	d163      	bne.n	80102f8 <_dtoa_r+0x608>
 8010230:	4642      	mov	r2, r8
 8010232:	464b      	mov	r3, r9
 8010234:	4936      	ldr	r1, [pc, #216]	; (8010310 <_dtoa_r+0x620>)
 8010236:	2000      	movs	r0, #0
 8010238:	f7ef fffe 	bl	8000238 <__aeabi_dsub>
 801023c:	4652      	mov	r2, sl
 801023e:	465b      	mov	r3, fp
 8010240:	f7f0 fc24 	bl	8000a8c <__aeabi_dcmplt>
 8010244:	2800      	cmp	r0, #0
 8010246:	f040 80b5 	bne.w	80103b4 <_dtoa_r+0x6c4>
 801024a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801024c:	429d      	cmp	r5, r3
 801024e:	d081      	beq.n	8010154 <_dtoa_r+0x464>
 8010250:	4b30      	ldr	r3, [pc, #192]	; (8010314 <_dtoa_r+0x624>)
 8010252:	2200      	movs	r2, #0
 8010254:	4650      	mov	r0, sl
 8010256:	4659      	mov	r1, fp
 8010258:	f7f0 f9a6 	bl	80005a8 <__aeabi_dmul>
 801025c:	4b2d      	ldr	r3, [pc, #180]	; (8010314 <_dtoa_r+0x624>)
 801025e:	4682      	mov	sl, r0
 8010260:	468b      	mov	fp, r1
 8010262:	4640      	mov	r0, r8
 8010264:	4649      	mov	r1, r9
 8010266:	2200      	movs	r2, #0
 8010268:	f7f0 f99e 	bl	80005a8 <__aeabi_dmul>
 801026c:	4680      	mov	r8, r0
 801026e:	4689      	mov	r9, r1
 8010270:	e7c6      	b.n	8010200 <_dtoa_r+0x510>
 8010272:	4650      	mov	r0, sl
 8010274:	4659      	mov	r1, fp
 8010276:	f7f0 f997 	bl	80005a8 <__aeabi_dmul>
 801027a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801027c:	9d01      	ldr	r5, [sp, #4]
 801027e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010280:	4682      	mov	sl, r0
 8010282:	468b      	mov	fp, r1
 8010284:	4649      	mov	r1, r9
 8010286:	4640      	mov	r0, r8
 8010288:	f7f0 fc3e 	bl	8000b08 <__aeabi_d2iz>
 801028c:	4606      	mov	r6, r0
 801028e:	f7f0 f921 	bl	80004d4 <__aeabi_i2d>
 8010292:	3630      	adds	r6, #48	; 0x30
 8010294:	4602      	mov	r2, r0
 8010296:	460b      	mov	r3, r1
 8010298:	4640      	mov	r0, r8
 801029a:	4649      	mov	r1, r9
 801029c:	f7ef ffcc 	bl	8000238 <__aeabi_dsub>
 80102a0:	f805 6b01 	strb.w	r6, [r5], #1
 80102a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80102a6:	429d      	cmp	r5, r3
 80102a8:	4680      	mov	r8, r0
 80102aa:	4689      	mov	r9, r1
 80102ac:	f04f 0200 	mov.w	r2, #0
 80102b0:	d124      	bne.n	80102fc <_dtoa_r+0x60c>
 80102b2:	4b1b      	ldr	r3, [pc, #108]	; (8010320 <_dtoa_r+0x630>)
 80102b4:	4650      	mov	r0, sl
 80102b6:	4659      	mov	r1, fp
 80102b8:	f7ef ffc0 	bl	800023c <__adddf3>
 80102bc:	4602      	mov	r2, r0
 80102be:	460b      	mov	r3, r1
 80102c0:	4640      	mov	r0, r8
 80102c2:	4649      	mov	r1, r9
 80102c4:	f7f0 fc00 	bl	8000ac8 <__aeabi_dcmpgt>
 80102c8:	2800      	cmp	r0, #0
 80102ca:	d173      	bne.n	80103b4 <_dtoa_r+0x6c4>
 80102cc:	4652      	mov	r2, sl
 80102ce:	465b      	mov	r3, fp
 80102d0:	4913      	ldr	r1, [pc, #76]	; (8010320 <_dtoa_r+0x630>)
 80102d2:	2000      	movs	r0, #0
 80102d4:	f7ef ffb0 	bl	8000238 <__aeabi_dsub>
 80102d8:	4602      	mov	r2, r0
 80102da:	460b      	mov	r3, r1
 80102dc:	4640      	mov	r0, r8
 80102de:	4649      	mov	r1, r9
 80102e0:	f7f0 fbd4 	bl	8000a8c <__aeabi_dcmplt>
 80102e4:	2800      	cmp	r0, #0
 80102e6:	f43f af35 	beq.w	8010154 <_dtoa_r+0x464>
 80102ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80102ec:	1e6b      	subs	r3, r5, #1
 80102ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80102f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80102f4:	2b30      	cmp	r3, #48	; 0x30
 80102f6:	d0f8      	beq.n	80102ea <_dtoa_r+0x5fa>
 80102f8:	9700      	str	r7, [sp, #0]
 80102fa:	e049      	b.n	8010390 <_dtoa_r+0x6a0>
 80102fc:	4b05      	ldr	r3, [pc, #20]	; (8010314 <_dtoa_r+0x624>)
 80102fe:	f7f0 f953 	bl	80005a8 <__aeabi_dmul>
 8010302:	4680      	mov	r8, r0
 8010304:	4689      	mov	r9, r1
 8010306:	e7bd      	b.n	8010284 <_dtoa_r+0x594>
 8010308:	08012ee8 	.word	0x08012ee8
 801030c:	08012ec0 	.word	0x08012ec0
 8010310:	3ff00000 	.word	0x3ff00000
 8010314:	40240000 	.word	0x40240000
 8010318:	401c0000 	.word	0x401c0000
 801031c:	40140000 	.word	0x40140000
 8010320:	3fe00000 	.word	0x3fe00000
 8010324:	9d01      	ldr	r5, [sp, #4]
 8010326:	4656      	mov	r6, sl
 8010328:	465f      	mov	r7, fp
 801032a:	4642      	mov	r2, r8
 801032c:	464b      	mov	r3, r9
 801032e:	4630      	mov	r0, r6
 8010330:	4639      	mov	r1, r7
 8010332:	f7f0 fa63 	bl	80007fc <__aeabi_ddiv>
 8010336:	f7f0 fbe7 	bl	8000b08 <__aeabi_d2iz>
 801033a:	4682      	mov	sl, r0
 801033c:	f7f0 f8ca 	bl	80004d4 <__aeabi_i2d>
 8010340:	4642      	mov	r2, r8
 8010342:	464b      	mov	r3, r9
 8010344:	f7f0 f930 	bl	80005a8 <__aeabi_dmul>
 8010348:	4602      	mov	r2, r0
 801034a:	460b      	mov	r3, r1
 801034c:	4630      	mov	r0, r6
 801034e:	4639      	mov	r1, r7
 8010350:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010354:	f7ef ff70 	bl	8000238 <__aeabi_dsub>
 8010358:	f805 6b01 	strb.w	r6, [r5], #1
 801035c:	9e01      	ldr	r6, [sp, #4]
 801035e:	9f03      	ldr	r7, [sp, #12]
 8010360:	1bae      	subs	r6, r5, r6
 8010362:	42b7      	cmp	r7, r6
 8010364:	4602      	mov	r2, r0
 8010366:	460b      	mov	r3, r1
 8010368:	d135      	bne.n	80103d6 <_dtoa_r+0x6e6>
 801036a:	f7ef ff67 	bl	800023c <__adddf3>
 801036e:	4642      	mov	r2, r8
 8010370:	464b      	mov	r3, r9
 8010372:	4606      	mov	r6, r0
 8010374:	460f      	mov	r7, r1
 8010376:	f7f0 fba7 	bl	8000ac8 <__aeabi_dcmpgt>
 801037a:	b9d0      	cbnz	r0, 80103b2 <_dtoa_r+0x6c2>
 801037c:	4642      	mov	r2, r8
 801037e:	464b      	mov	r3, r9
 8010380:	4630      	mov	r0, r6
 8010382:	4639      	mov	r1, r7
 8010384:	f7f0 fb78 	bl	8000a78 <__aeabi_dcmpeq>
 8010388:	b110      	cbz	r0, 8010390 <_dtoa_r+0x6a0>
 801038a:	f01a 0f01 	tst.w	sl, #1
 801038e:	d110      	bne.n	80103b2 <_dtoa_r+0x6c2>
 8010390:	4620      	mov	r0, r4
 8010392:	ee18 1a10 	vmov	r1, s16
 8010396:	f000 fe67 	bl	8011068 <_Bfree>
 801039a:	2300      	movs	r3, #0
 801039c:	9800      	ldr	r0, [sp, #0]
 801039e:	702b      	strb	r3, [r5, #0]
 80103a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80103a2:	3001      	adds	r0, #1
 80103a4:	6018      	str	r0, [r3, #0]
 80103a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	f43f acf1 	beq.w	800fd90 <_dtoa_r+0xa0>
 80103ae:	601d      	str	r5, [r3, #0]
 80103b0:	e4ee      	b.n	800fd90 <_dtoa_r+0xa0>
 80103b2:	9f00      	ldr	r7, [sp, #0]
 80103b4:	462b      	mov	r3, r5
 80103b6:	461d      	mov	r5, r3
 80103b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80103bc:	2a39      	cmp	r2, #57	; 0x39
 80103be:	d106      	bne.n	80103ce <_dtoa_r+0x6de>
 80103c0:	9a01      	ldr	r2, [sp, #4]
 80103c2:	429a      	cmp	r2, r3
 80103c4:	d1f7      	bne.n	80103b6 <_dtoa_r+0x6c6>
 80103c6:	9901      	ldr	r1, [sp, #4]
 80103c8:	2230      	movs	r2, #48	; 0x30
 80103ca:	3701      	adds	r7, #1
 80103cc:	700a      	strb	r2, [r1, #0]
 80103ce:	781a      	ldrb	r2, [r3, #0]
 80103d0:	3201      	adds	r2, #1
 80103d2:	701a      	strb	r2, [r3, #0]
 80103d4:	e790      	b.n	80102f8 <_dtoa_r+0x608>
 80103d6:	4ba6      	ldr	r3, [pc, #664]	; (8010670 <_dtoa_r+0x980>)
 80103d8:	2200      	movs	r2, #0
 80103da:	f7f0 f8e5 	bl	80005a8 <__aeabi_dmul>
 80103de:	2200      	movs	r2, #0
 80103e0:	2300      	movs	r3, #0
 80103e2:	4606      	mov	r6, r0
 80103e4:	460f      	mov	r7, r1
 80103e6:	f7f0 fb47 	bl	8000a78 <__aeabi_dcmpeq>
 80103ea:	2800      	cmp	r0, #0
 80103ec:	d09d      	beq.n	801032a <_dtoa_r+0x63a>
 80103ee:	e7cf      	b.n	8010390 <_dtoa_r+0x6a0>
 80103f0:	9a08      	ldr	r2, [sp, #32]
 80103f2:	2a00      	cmp	r2, #0
 80103f4:	f000 80d7 	beq.w	80105a6 <_dtoa_r+0x8b6>
 80103f8:	9a06      	ldr	r2, [sp, #24]
 80103fa:	2a01      	cmp	r2, #1
 80103fc:	f300 80ba 	bgt.w	8010574 <_dtoa_r+0x884>
 8010400:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010402:	2a00      	cmp	r2, #0
 8010404:	f000 80b2 	beq.w	801056c <_dtoa_r+0x87c>
 8010408:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801040c:	9e07      	ldr	r6, [sp, #28]
 801040e:	9d04      	ldr	r5, [sp, #16]
 8010410:	9a04      	ldr	r2, [sp, #16]
 8010412:	441a      	add	r2, r3
 8010414:	9204      	str	r2, [sp, #16]
 8010416:	9a05      	ldr	r2, [sp, #20]
 8010418:	2101      	movs	r1, #1
 801041a:	441a      	add	r2, r3
 801041c:	4620      	mov	r0, r4
 801041e:	9205      	str	r2, [sp, #20]
 8010420:	f000 ff24 	bl	801126c <__i2b>
 8010424:	4607      	mov	r7, r0
 8010426:	2d00      	cmp	r5, #0
 8010428:	dd0c      	ble.n	8010444 <_dtoa_r+0x754>
 801042a:	9b05      	ldr	r3, [sp, #20]
 801042c:	2b00      	cmp	r3, #0
 801042e:	dd09      	ble.n	8010444 <_dtoa_r+0x754>
 8010430:	42ab      	cmp	r3, r5
 8010432:	9a04      	ldr	r2, [sp, #16]
 8010434:	bfa8      	it	ge
 8010436:	462b      	movge	r3, r5
 8010438:	1ad2      	subs	r2, r2, r3
 801043a:	9204      	str	r2, [sp, #16]
 801043c:	9a05      	ldr	r2, [sp, #20]
 801043e:	1aed      	subs	r5, r5, r3
 8010440:	1ad3      	subs	r3, r2, r3
 8010442:	9305      	str	r3, [sp, #20]
 8010444:	9b07      	ldr	r3, [sp, #28]
 8010446:	b31b      	cbz	r3, 8010490 <_dtoa_r+0x7a0>
 8010448:	9b08      	ldr	r3, [sp, #32]
 801044a:	2b00      	cmp	r3, #0
 801044c:	f000 80af 	beq.w	80105ae <_dtoa_r+0x8be>
 8010450:	2e00      	cmp	r6, #0
 8010452:	dd13      	ble.n	801047c <_dtoa_r+0x78c>
 8010454:	4639      	mov	r1, r7
 8010456:	4632      	mov	r2, r6
 8010458:	4620      	mov	r0, r4
 801045a:	f000 ffc7 	bl	80113ec <__pow5mult>
 801045e:	ee18 2a10 	vmov	r2, s16
 8010462:	4601      	mov	r1, r0
 8010464:	4607      	mov	r7, r0
 8010466:	4620      	mov	r0, r4
 8010468:	f000 ff16 	bl	8011298 <__multiply>
 801046c:	ee18 1a10 	vmov	r1, s16
 8010470:	4680      	mov	r8, r0
 8010472:	4620      	mov	r0, r4
 8010474:	f000 fdf8 	bl	8011068 <_Bfree>
 8010478:	ee08 8a10 	vmov	s16, r8
 801047c:	9b07      	ldr	r3, [sp, #28]
 801047e:	1b9a      	subs	r2, r3, r6
 8010480:	d006      	beq.n	8010490 <_dtoa_r+0x7a0>
 8010482:	ee18 1a10 	vmov	r1, s16
 8010486:	4620      	mov	r0, r4
 8010488:	f000 ffb0 	bl	80113ec <__pow5mult>
 801048c:	ee08 0a10 	vmov	s16, r0
 8010490:	2101      	movs	r1, #1
 8010492:	4620      	mov	r0, r4
 8010494:	f000 feea 	bl	801126c <__i2b>
 8010498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801049a:	2b00      	cmp	r3, #0
 801049c:	4606      	mov	r6, r0
 801049e:	f340 8088 	ble.w	80105b2 <_dtoa_r+0x8c2>
 80104a2:	461a      	mov	r2, r3
 80104a4:	4601      	mov	r1, r0
 80104a6:	4620      	mov	r0, r4
 80104a8:	f000 ffa0 	bl	80113ec <__pow5mult>
 80104ac:	9b06      	ldr	r3, [sp, #24]
 80104ae:	2b01      	cmp	r3, #1
 80104b0:	4606      	mov	r6, r0
 80104b2:	f340 8081 	ble.w	80105b8 <_dtoa_r+0x8c8>
 80104b6:	f04f 0800 	mov.w	r8, #0
 80104ba:	6933      	ldr	r3, [r6, #16]
 80104bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80104c0:	6918      	ldr	r0, [r3, #16]
 80104c2:	f000 fe83 	bl	80111cc <__hi0bits>
 80104c6:	f1c0 0020 	rsb	r0, r0, #32
 80104ca:	9b05      	ldr	r3, [sp, #20]
 80104cc:	4418      	add	r0, r3
 80104ce:	f010 001f 	ands.w	r0, r0, #31
 80104d2:	f000 8092 	beq.w	80105fa <_dtoa_r+0x90a>
 80104d6:	f1c0 0320 	rsb	r3, r0, #32
 80104da:	2b04      	cmp	r3, #4
 80104dc:	f340 808a 	ble.w	80105f4 <_dtoa_r+0x904>
 80104e0:	f1c0 001c 	rsb	r0, r0, #28
 80104e4:	9b04      	ldr	r3, [sp, #16]
 80104e6:	4403      	add	r3, r0
 80104e8:	9304      	str	r3, [sp, #16]
 80104ea:	9b05      	ldr	r3, [sp, #20]
 80104ec:	4403      	add	r3, r0
 80104ee:	4405      	add	r5, r0
 80104f0:	9305      	str	r3, [sp, #20]
 80104f2:	9b04      	ldr	r3, [sp, #16]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	dd07      	ble.n	8010508 <_dtoa_r+0x818>
 80104f8:	ee18 1a10 	vmov	r1, s16
 80104fc:	461a      	mov	r2, r3
 80104fe:	4620      	mov	r0, r4
 8010500:	f000 ffce 	bl	80114a0 <__lshift>
 8010504:	ee08 0a10 	vmov	s16, r0
 8010508:	9b05      	ldr	r3, [sp, #20]
 801050a:	2b00      	cmp	r3, #0
 801050c:	dd05      	ble.n	801051a <_dtoa_r+0x82a>
 801050e:	4631      	mov	r1, r6
 8010510:	461a      	mov	r2, r3
 8010512:	4620      	mov	r0, r4
 8010514:	f000 ffc4 	bl	80114a0 <__lshift>
 8010518:	4606      	mov	r6, r0
 801051a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801051c:	2b00      	cmp	r3, #0
 801051e:	d06e      	beq.n	80105fe <_dtoa_r+0x90e>
 8010520:	ee18 0a10 	vmov	r0, s16
 8010524:	4631      	mov	r1, r6
 8010526:	f001 f82b 	bl	8011580 <__mcmp>
 801052a:	2800      	cmp	r0, #0
 801052c:	da67      	bge.n	80105fe <_dtoa_r+0x90e>
 801052e:	9b00      	ldr	r3, [sp, #0]
 8010530:	3b01      	subs	r3, #1
 8010532:	ee18 1a10 	vmov	r1, s16
 8010536:	9300      	str	r3, [sp, #0]
 8010538:	220a      	movs	r2, #10
 801053a:	2300      	movs	r3, #0
 801053c:	4620      	mov	r0, r4
 801053e:	f000 fdb5 	bl	80110ac <__multadd>
 8010542:	9b08      	ldr	r3, [sp, #32]
 8010544:	ee08 0a10 	vmov	s16, r0
 8010548:	2b00      	cmp	r3, #0
 801054a:	f000 81b1 	beq.w	80108b0 <_dtoa_r+0xbc0>
 801054e:	2300      	movs	r3, #0
 8010550:	4639      	mov	r1, r7
 8010552:	220a      	movs	r2, #10
 8010554:	4620      	mov	r0, r4
 8010556:	f000 fda9 	bl	80110ac <__multadd>
 801055a:	9b02      	ldr	r3, [sp, #8]
 801055c:	2b00      	cmp	r3, #0
 801055e:	4607      	mov	r7, r0
 8010560:	f300 808e 	bgt.w	8010680 <_dtoa_r+0x990>
 8010564:	9b06      	ldr	r3, [sp, #24]
 8010566:	2b02      	cmp	r3, #2
 8010568:	dc51      	bgt.n	801060e <_dtoa_r+0x91e>
 801056a:	e089      	b.n	8010680 <_dtoa_r+0x990>
 801056c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801056e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010572:	e74b      	b.n	801040c <_dtoa_r+0x71c>
 8010574:	9b03      	ldr	r3, [sp, #12]
 8010576:	1e5e      	subs	r6, r3, #1
 8010578:	9b07      	ldr	r3, [sp, #28]
 801057a:	42b3      	cmp	r3, r6
 801057c:	bfbf      	itttt	lt
 801057e:	9b07      	ldrlt	r3, [sp, #28]
 8010580:	9607      	strlt	r6, [sp, #28]
 8010582:	1af2      	sublt	r2, r6, r3
 8010584:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010586:	bfb6      	itet	lt
 8010588:	189b      	addlt	r3, r3, r2
 801058a:	1b9e      	subge	r6, r3, r6
 801058c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801058e:	9b03      	ldr	r3, [sp, #12]
 8010590:	bfb8      	it	lt
 8010592:	2600      	movlt	r6, #0
 8010594:	2b00      	cmp	r3, #0
 8010596:	bfb7      	itett	lt
 8010598:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801059c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80105a0:	1a9d      	sublt	r5, r3, r2
 80105a2:	2300      	movlt	r3, #0
 80105a4:	e734      	b.n	8010410 <_dtoa_r+0x720>
 80105a6:	9e07      	ldr	r6, [sp, #28]
 80105a8:	9d04      	ldr	r5, [sp, #16]
 80105aa:	9f08      	ldr	r7, [sp, #32]
 80105ac:	e73b      	b.n	8010426 <_dtoa_r+0x736>
 80105ae:	9a07      	ldr	r2, [sp, #28]
 80105b0:	e767      	b.n	8010482 <_dtoa_r+0x792>
 80105b2:	9b06      	ldr	r3, [sp, #24]
 80105b4:	2b01      	cmp	r3, #1
 80105b6:	dc18      	bgt.n	80105ea <_dtoa_r+0x8fa>
 80105b8:	f1ba 0f00 	cmp.w	sl, #0
 80105bc:	d115      	bne.n	80105ea <_dtoa_r+0x8fa>
 80105be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80105c2:	b993      	cbnz	r3, 80105ea <_dtoa_r+0x8fa>
 80105c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80105c8:	0d1b      	lsrs	r3, r3, #20
 80105ca:	051b      	lsls	r3, r3, #20
 80105cc:	b183      	cbz	r3, 80105f0 <_dtoa_r+0x900>
 80105ce:	9b04      	ldr	r3, [sp, #16]
 80105d0:	3301      	adds	r3, #1
 80105d2:	9304      	str	r3, [sp, #16]
 80105d4:	9b05      	ldr	r3, [sp, #20]
 80105d6:	3301      	adds	r3, #1
 80105d8:	9305      	str	r3, [sp, #20]
 80105da:	f04f 0801 	mov.w	r8, #1
 80105de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	f47f af6a 	bne.w	80104ba <_dtoa_r+0x7ca>
 80105e6:	2001      	movs	r0, #1
 80105e8:	e76f      	b.n	80104ca <_dtoa_r+0x7da>
 80105ea:	f04f 0800 	mov.w	r8, #0
 80105ee:	e7f6      	b.n	80105de <_dtoa_r+0x8ee>
 80105f0:	4698      	mov	r8, r3
 80105f2:	e7f4      	b.n	80105de <_dtoa_r+0x8ee>
 80105f4:	f43f af7d 	beq.w	80104f2 <_dtoa_r+0x802>
 80105f8:	4618      	mov	r0, r3
 80105fa:	301c      	adds	r0, #28
 80105fc:	e772      	b.n	80104e4 <_dtoa_r+0x7f4>
 80105fe:	9b03      	ldr	r3, [sp, #12]
 8010600:	2b00      	cmp	r3, #0
 8010602:	dc37      	bgt.n	8010674 <_dtoa_r+0x984>
 8010604:	9b06      	ldr	r3, [sp, #24]
 8010606:	2b02      	cmp	r3, #2
 8010608:	dd34      	ble.n	8010674 <_dtoa_r+0x984>
 801060a:	9b03      	ldr	r3, [sp, #12]
 801060c:	9302      	str	r3, [sp, #8]
 801060e:	9b02      	ldr	r3, [sp, #8]
 8010610:	b96b      	cbnz	r3, 801062e <_dtoa_r+0x93e>
 8010612:	4631      	mov	r1, r6
 8010614:	2205      	movs	r2, #5
 8010616:	4620      	mov	r0, r4
 8010618:	f000 fd48 	bl	80110ac <__multadd>
 801061c:	4601      	mov	r1, r0
 801061e:	4606      	mov	r6, r0
 8010620:	ee18 0a10 	vmov	r0, s16
 8010624:	f000 ffac 	bl	8011580 <__mcmp>
 8010628:	2800      	cmp	r0, #0
 801062a:	f73f adbb 	bgt.w	80101a4 <_dtoa_r+0x4b4>
 801062e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010630:	9d01      	ldr	r5, [sp, #4]
 8010632:	43db      	mvns	r3, r3
 8010634:	9300      	str	r3, [sp, #0]
 8010636:	f04f 0800 	mov.w	r8, #0
 801063a:	4631      	mov	r1, r6
 801063c:	4620      	mov	r0, r4
 801063e:	f000 fd13 	bl	8011068 <_Bfree>
 8010642:	2f00      	cmp	r7, #0
 8010644:	f43f aea4 	beq.w	8010390 <_dtoa_r+0x6a0>
 8010648:	f1b8 0f00 	cmp.w	r8, #0
 801064c:	d005      	beq.n	801065a <_dtoa_r+0x96a>
 801064e:	45b8      	cmp	r8, r7
 8010650:	d003      	beq.n	801065a <_dtoa_r+0x96a>
 8010652:	4641      	mov	r1, r8
 8010654:	4620      	mov	r0, r4
 8010656:	f000 fd07 	bl	8011068 <_Bfree>
 801065a:	4639      	mov	r1, r7
 801065c:	4620      	mov	r0, r4
 801065e:	f000 fd03 	bl	8011068 <_Bfree>
 8010662:	e695      	b.n	8010390 <_dtoa_r+0x6a0>
 8010664:	2600      	movs	r6, #0
 8010666:	4637      	mov	r7, r6
 8010668:	e7e1      	b.n	801062e <_dtoa_r+0x93e>
 801066a:	9700      	str	r7, [sp, #0]
 801066c:	4637      	mov	r7, r6
 801066e:	e599      	b.n	80101a4 <_dtoa_r+0x4b4>
 8010670:	40240000 	.word	0x40240000
 8010674:	9b08      	ldr	r3, [sp, #32]
 8010676:	2b00      	cmp	r3, #0
 8010678:	f000 80ca 	beq.w	8010810 <_dtoa_r+0xb20>
 801067c:	9b03      	ldr	r3, [sp, #12]
 801067e:	9302      	str	r3, [sp, #8]
 8010680:	2d00      	cmp	r5, #0
 8010682:	dd05      	ble.n	8010690 <_dtoa_r+0x9a0>
 8010684:	4639      	mov	r1, r7
 8010686:	462a      	mov	r2, r5
 8010688:	4620      	mov	r0, r4
 801068a:	f000 ff09 	bl	80114a0 <__lshift>
 801068e:	4607      	mov	r7, r0
 8010690:	f1b8 0f00 	cmp.w	r8, #0
 8010694:	d05b      	beq.n	801074e <_dtoa_r+0xa5e>
 8010696:	6879      	ldr	r1, [r7, #4]
 8010698:	4620      	mov	r0, r4
 801069a:	f000 fca5 	bl	8010fe8 <_Balloc>
 801069e:	4605      	mov	r5, r0
 80106a0:	b928      	cbnz	r0, 80106ae <_dtoa_r+0x9be>
 80106a2:	4b87      	ldr	r3, [pc, #540]	; (80108c0 <_dtoa_r+0xbd0>)
 80106a4:	4602      	mov	r2, r0
 80106a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80106aa:	f7ff bb3b 	b.w	800fd24 <_dtoa_r+0x34>
 80106ae:	693a      	ldr	r2, [r7, #16]
 80106b0:	3202      	adds	r2, #2
 80106b2:	0092      	lsls	r2, r2, #2
 80106b4:	f107 010c 	add.w	r1, r7, #12
 80106b8:	300c      	adds	r0, #12
 80106ba:	f7fd fd1f 	bl	800e0fc <memcpy>
 80106be:	2201      	movs	r2, #1
 80106c0:	4629      	mov	r1, r5
 80106c2:	4620      	mov	r0, r4
 80106c4:	f000 feec 	bl	80114a0 <__lshift>
 80106c8:	9b01      	ldr	r3, [sp, #4]
 80106ca:	f103 0901 	add.w	r9, r3, #1
 80106ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80106d2:	4413      	add	r3, r2
 80106d4:	9305      	str	r3, [sp, #20]
 80106d6:	f00a 0301 	and.w	r3, sl, #1
 80106da:	46b8      	mov	r8, r7
 80106dc:	9304      	str	r3, [sp, #16]
 80106de:	4607      	mov	r7, r0
 80106e0:	4631      	mov	r1, r6
 80106e2:	ee18 0a10 	vmov	r0, s16
 80106e6:	f7ff fa75 	bl	800fbd4 <quorem>
 80106ea:	4641      	mov	r1, r8
 80106ec:	9002      	str	r0, [sp, #8]
 80106ee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80106f2:	ee18 0a10 	vmov	r0, s16
 80106f6:	f000 ff43 	bl	8011580 <__mcmp>
 80106fa:	463a      	mov	r2, r7
 80106fc:	9003      	str	r0, [sp, #12]
 80106fe:	4631      	mov	r1, r6
 8010700:	4620      	mov	r0, r4
 8010702:	f000 ff59 	bl	80115b8 <__mdiff>
 8010706:	68c2      	ldr	r2, [r0, #12]
 8010708:	f109 3bff 	add.w	fp, r9, #4294967295
 801070c:	4605      	mov	r5, r0
 801070e:	bb02      	cbnz	r2, 8010752 <_dtoa_r+0xa62>
 8010710:	4601      	mov	r1, r0
 8010712:	ee18 0a10 	vmov	r0, s16
 8010716:	f000 ff33 	bl	8011580 <__mcmp>
 801071a:	4602      	mov	r2, r0
 801071c:	4629      	mov	r1, r5
 801071e:	4620      	mov	r0, r4
 8010720:	9207      	str	r2, [sp, #28]
 8010722:	f000 fca1 	bl	8011068 <_Bfree>
 8010726:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801072a:	ea43 0102 	orr.w	r1, r3, r2
 801072e:	9b04      	ldr	r3, [sp, #16]
 8010730:	430b      	orrs	r3, r1
 8010732:	464d      	mov	r5, r9
 8010734:	d10f      	bne.n	8010756 <_dtoa_r+0xa66>
 8010736:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801073a:	d02a      	beq.n	8010792 <_dtoa_r+0xaa2>
 801073c:	9b03      	ldr	r3, [sp, #12]
 801073e:	2b00      	cmp	r3, #0
 8010740:	dd02      	ble.n	8010748 <_dtoa_r+0xa58>
 8010742:	9b02      	ldr	r3, [sp, #8]
 8010744:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010748:	f88b a000 	strb.w	sl, [fp]
 801074c:	e775      	b.n	801063a <_dtoa_r+0x94a>
 801074e:	4638      	mov	r0, r7
 8010750:	e7ba      	b.n	80106c8 <_dtoa_r+0x9d8>
 8010752:	2201      	movs	r2, #1
 8010754:	e7e2      	b.n	801071c <_dtoa_r+0xa2c>
 8010756:	9b03      	ldr	r3, [sp, #12]
 8010758:	2b00      	cmp	r3, #0
 801075a:	db04      	blt.n	8010766 <_dtoa_r+0xa76>
 801075c:	9906      	ldr	r1, [sp, #24]
 801075e:	430b      	orrs	r3, r1
 8010760:	9904      	ldr	r1, [sp, #16]
 8010762:	430b      	orrs	r3, r1
 8010764:	d122      	bne.n	80107ac <_dtoa_r+0xabc>
 8010766:	2a00      	cmp	r2, #0
 8010768:	ddee      	ble.n	8010748 <_dtoa_r+0xa58>
 801076a:	ee18 1a10 	vmov	r1, s16
 801076e:	2201      	movs	r2, #1
 8010770:	4620      	mov	r0, r4
 8010772:	f000 fe95 	bl	80114a0 <__lshift>
 8010776:	4631      	mov	r1, r6
 8010778:	ee08 0a10 	vmov	s16, r0
 801077c:	f000 ff00 	bl	8011580 <__mcmp>
 8010780:	2800      	cmp	r0, #0
 8010782:	dc03      	bgt.n	801078c <_dtoa_r+0xa9c>
 8010784:	d1e0      	bne.n	8010748 <_dtoa_r+0xa58>
 8010786:	f01a 0f01 	tst.w	sl, #1
 801078a:	d0dd      	beq.n	8010748 <_dtoa_r+0xa58>
 801078c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010790:	d1d7      	bne.n	8010742 <_dtoa_r+0xa52>
 8010792:	2339      	movs	r3, #57	; 0x39
 8010794:	f88b 3000 	strb.w	r3, [fp]
 8010798:	462b      	mov	r3, r5
 801079a:	461d      	mov	r5, r3
 801079c:	3b01      	subs	r3, #1
 801079e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80107a2:	2a39      	cmp	r2, #57	; 0x39
 80107a4:	d071      	beq.n	801088a <_dtoa_r+0xb9a>
 80107a6:	3201      	adds	r2, #1
 80107a8:	701a      	strb	r2, [r3, #0]
 80107aa:	e746      	b.n	801063a <_dtoa_r+0x94a>
 80107ac:	2a00      	cmp	r2, #0
 80107ae:	dd07      	ble.n	80107c0 <_dtoa_r+0xad0>
 80107b0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80107b4:	d0ed      	beq.n	8010792 <_dtoa_r+0xaa2>
 80107b6:	f10a 0301 	add.w	r3, sl, #1
 80107ba:	f88b 3000 	strb.w	r3, [fp]
 80107be:	e73c      	b.n	801063a <_dtoa_r+0x94a>
 80107c0:	9b05      	ldr	r3, [sp, #20]
 80107c2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80107c6:	4599      	cmp	r9, r3
 80107c8:	d047      	beq.n	801085a <_dtoa_r+0xb6a>
 80107ca:	ee18 1a10 	vmov	r1, s16
 80107ce:	2300      	movs	r3, #0
 80107d0:	220a      	movs	r2, #10
 80107d2:	4620      	mov	r0, r4
 80107d4:	f000 fc6a 	bl	80110ac <__multadd>
 80107d8:	45b8      	cmp	r8, r7
 80107da:	ee08 0a10 	vmov	s16, r0
 80107de:	f04f 0300 	mov.w	r3, #0
 80107e2:	f04f 020a 	mov.w	r2, #10
 80107e6:	4641      	mov	r1, r8
 80107e8:	4620      	mov	r0, r4
 80107ea:	d106      	bne.n	80107fa <_dtoa_r+0xb0a>
 80107ec:	f000 fc5e 	bl	80110ac <__multadd>
 80107f0:	4680      	mov	r8, r0
 80107f2:	4607      	mov	r7, r0
 80107f4:	f109 0901 	add.w	r9, r9, #1
 80107f8:	e772      	b.n	80106e0 <_dtoa_r+0x9f0>
 80107fa:	f000 fc57 	bl	80110ac <__multadd>
 80107fe:	4639      	mov	r1, r7
 8010800:	4680      	mov	r8, r0
 8010802:	2300      	movs	r3, #0
 8010804:	220a      	movs	r2, #10
 8010806:	4620      	mov	r0, r4
 8010808:	f000 fc50 	bl	80110ac <__multadd>
 801080c:	4607      	mov	r7, r0
 801080e:	e7f1      	b.n	80107f4 <_dtoa_r+0xb04>
 8010810:	9b03      	ldr	r3, [sp, #12]
 8010812:	9302      	str	r3, [sp, #8]
 8010814:	9d01      	ldr	r5, [sp, #4]
 8010816:	ee18 0a10 	vmov	r0, s16
 801081a:	4631      	mov	r1, r6
 801081c:	f7ff f9da 	bl	800fbd4 <quorem>
 8010820:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010824:	9b01      	ldr	r3, [sp, #4]
 8010826:	f805 ab01 	strb.w	sl, [r5], #1
 801082a:	1aea      	subs	r2, r5, r3
 801082c:	9b02      	ldr	r3, [sp, #8]
 801082e:	4293      	cmp	r3, r2
 8010830:	dd09      	ble.n	8010846 <_dtoa_r+0xb56>
 8010832:	ee18 1a10 	vmov	r1, s16
 8010836:	2300      	movs	r3, #0
 8010838:	220a      	movs	r2, #10
 801083a:	4620      	mov	r0, r4
 801083c:	f000 fc36 	bl	80110ac <__multadd>
 8010840:	ee08 0a10 	vmov	s16, r0
 8010844:	e7e7      	b.n	8010816 <_dtoa_r+0xb26>
 8010846:	9b02      	ldr	r3, [sp, #8]
 8010848:	2b00      	cmp	r3, #0
 801084a:	bfc8      	it	gt
 801084c:	461d      	movgt	r5, r3
 801084e:	9b01      	ldr	r3, [sp, #4]
 8010850:	bfd8      	it	le
 8010852:	2501      	movle	r5, #1
 8010854:	441d      	add	r5, r3
 8010856:	f04f 0800 	mov.w	r8, #0
 801085a:	ee18 1a10 	vmov	r1, s16
 801085e:	2201      	movs	r2, #1
 8010860:	4620      	mov	r0, r4
 8010862:	f000 fe1d 	bl	80114a0 <__lshift>
 8010866:	4631      	mov	r1, r6
 8010868:	ee08 0a10 	vmov	s16, r0
 801086c:	f000 fe88 	bl	8011580 <__mcmp>
 8010870:	2800      	cmp	r0, #0
 8010872:	dc91      	bgt.n	8010798 <_dtoa_r+0xaa8>
 8010874:	d102      	bne.n	801087c <_dtoa_r+0xb8c>
 8010876:	f01a 0f01 	tst.w	sl, #1
 801087a:	d18d      	bne.n	8010798 <_dtoa_r+0xaa8>
 801087c:	462b      	mov	r3, r5
 801087e:	461d      	mov	r5, r3
 8010880:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010884:	2a30      	cmp	r2, #48	; 0x30
 8010886:	d0fa      	beq.n	801087e <_dtoa_r+0xb8e>
 8010888:	e6d7      	b.n	801063a <_dtoa_r+0x94a>
 801088a:	9a01      	ldr	r2, [sp, #4]
 801088c:	429a      	cmp	r2, r3
 801088e:	d184      	bne.n	801079a <_dtoa_r+0xaaa>
 8010890:	9b00      	ldr	r3, [sp, #0]
 8010892:	3301      	adds	r3, #1
 8010894:	9300      	str	r3, [sp, #0]
 8010896:	2331      	movs	r3, #49	; 0x31
 8010898:	7013      	strb	r3, [r2, #0]
 801089a:	e6ce      	b.n	801063a <_dtoa_r+0x94a>
 801089c:	4b09      	ldr	r3, [pc, #36]	; (80108c4 <_dtoa_r+0xbd4>)
 801089e:	f7ff ba95 	b.w	800fdcc <_dtoa_r+0xdc>
 80108a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	f47f aa6e 	bne.w	800fd86 <_dtoa_r+0x96>
 80108aa:	4b07      	ldr	r3, [pc, #28]	; (80108c8 <_dtoa_r+0xbd8>)
 80108ac:	f7ff ba8e 	b.w	800fdcc <_dtoa_r+0xdc>
 80108b0:	9b02      	ldr	r3, [sp, #8]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	dcae      	bgt.n	8010814 <_dtoa_r+0xb24>
 80108b6:	9b06      	ldr	r3, [sp, #24]
 80108b8:	2b02      	cmp	r3, #2
 80108ba:	f73f aea8 	bgt.w	801060e <_dtoa_r+0x91e>
 80108be:	e7a9      	b.n	8010814 <_dtoa_r+0xb24>
 80108c0:	08012dd8 	.word	0x08012dd8
 80108c4:	08012bd8 	.word	0x08012bd8
 80108c8:	08012d59 	.word	0x08012d59

080108cc <rshift>:
 80108cc:	6903      	ldr	r3, [r0, #16]
 80108ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80108d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80108d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80108da:	f100 0414 	add.w	r4, r0, #20
 80108de:	dd45      	ble.n	801096c <rshift+0xa0>
 80108e0:	f011 011f 	ands.w	r1, r1, #31
 80108e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80108e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80108ec:	d10c      	bne.n	8010908 <rshift+0x3c>
 80108ee:	f100 0710 	add.w	r7, r0, #16
 80108f2:	4629      	mov	r1, r5
 80108f4:	42b1      	cmp	r1, r6
 80108f6:	d334      	bcc.n	8010962 <rshift+0x96>
 80108f8:	1a9b      	subs	r3, r3, r2
 80108fa:	009b      	lsls	r3, r3, #2
 80108fc:	1eea      	subs	r2, r5, #3
 80108fe:	4296      	cmp	r6, r2
 8010900:	bf38      	it	cc
 8010902:	2300      	movcc	r3, #0
 8010904:	4423      	add	r3, r4
 8010906:	e015      	b.n	8010934 <rshift+0x68>
 8010908:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801090c:	f1c1 0820 	rsb	r8, r1, #32
 8010910:	40cf      	lsrs	r7, r1
 8010912:	f105 0e04 	add.w	lr, r5, #4
 8010916:	46a1      	mov	r9, r4
 8010918:	4576      	cmp	r6, lr
 801091a:	46f4      	mov	ip, lr
 801091c:	d815      	bhi.n	801094a <rshift+0x7e>
 801091e:	1a9a      	subs	r2, r3, r2
 8010920:	0092      	lsls	r2, r2, #2
 8010922:	3a04      	subs	r2, #4
 8010924:	3501      	adds	r5, #1
 8010926:	42ae      	cmp	r6, r5
 8010928:	bf38      	it	cc
 801092a:	2200      	movcc	r2, #0
 801092c:	18a3      	adds	r3, r4, r2
 801092e:	50a7      	str	r7, [r4, r2]
 8010930:	b107      	cbz	r7, 8010934 <rshift+0x68>
 8010932:	3304      	adds	r3, #4
 8010934:	1b1a      	subs	r2, r3, r4
 8010936:	42a3      	cmp	r3, r4
 8010938:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801093c:	bf08      	it	eq
 801093e:	2300      	moveq	r3, #0
 8010940:	6102      	str	r2, [r0, #16]
 8010942:	bf08      	it	eq
 8010944:	6143      	streq	r3, [r0, #20]
 8010946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801094a:	f8dc c000 	ldr.w	ip, [ip]
 801094e:	fa0c fc08 	lsl.w	ip, ip, r8
 8010952:	ea4c 0707 	orr.w	r7, ip, r7
 8010956:	f849 7b04 	str.w	r7, [r9], #4
 801095a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801095e:	40cf      	lsrs	r7, r1
 8010960:	e7da      	b.n	8010918 <rshift+0x4c>
 8010962:	f851 cb04 	ldr.w	ip, [r1], #4
 8010966:	f847 cf04 	str.w	ip, [r7, #4]!
 801096a:	e7c3      	b.n	80108f4 <rshift+0x28>
 801096c:	4623      	mov	r3, r4
 801096e:	e7e1      	b.n	8010934 <rshift+0x68>

08010970 <__hexdig_fun>:
 8010970:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010974:	2b09      	cmp	r3, #9
 8010976:	d802      	bhi.n	801097e <__hexdig_fun+0xe>
 8010978:	3820      	subs	r0, #32
 801097a:	b2c0      	uxtb	r0, r0
 801097c:	4770      	bx	lr
 801097e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010982:	2b05      	cmp	r3, #5
 8010984:	d801      	bhi.n	801098a <__hexdig_fun+0x1a>
 8010986:	3847      	subs	r0, #71	; 0x47
 8010988:	e7f7      	b.n	801097a <__hexdig_fun+0xa>
 801098a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801098e:	2b05      	cmp	r3, #5
 8010990:	d801      	bhi.n	8010996 <__hexdig_fun+0x26>
 8010992:	3827      	subs	r0, #39	; 0x27
 8010994:	e7f1      	b.n	801097a <__hexdig_fun+0xa>
 8010996:	2000      	movs	r0, #0
 8010998:	4770      	bx	lr
	...

0801099c <__gethex>:
 801099c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109a0:	ed2d 8b02 	vpush	{d8}
 80109a4:	b089      	sub	sp, #36	; 0x24
 80109a6:	ee08 0a10 	vmov	s16, r0
 80109aa:	9304      	str	r3, [sp, #16]
 80109ac:	4bb4      	ldr	r3, [pc, #720]	; (8010c80 <__gethex+0x2e4>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	9301      	str	r3, [sp, #4]
 80109b2:	4618      	mov	r0, r3
 80109b4:	468b      	mov	fp, r1
 80109b6:	4690      	mov	r8, r2
 80109b8:	f7ef fbe2 	bl	8000180 <strlen>
 80109bc:	9b01      	ldr	r3, [sp, #4]
 80109be:	f8db 2000 	ldr.w	r2, [fp]
 80109c2:	4403      	add	r3, r0
 80109c4:	4682      	mov	sl, r0
 80109c6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80109ca:	9305      	str	r3, [sp, #20]
 80109cc:	1c93      	adds	r3, r2, #2
 80109ce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80109d2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80109d6:	32fe      	adds	r2, #254	; 0xfe
 80109d8:	18d1      	adds	r1, r2, r3
 80109da:	461f      	mov	r7, r3
 80109dc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80109e0:	9100      	str	r1, [sp, #0]
 80109e2:	2830      	cmp	r0, #48	; 0x30
 80109e4:	d0f8      	beq.n	80109d8 <__gethex+0x3c>
 80109e6:	f7ff ffc3 	bl	8010970 <__hexdig_fun>
 80109ea:	4604      	mov	r4, r0
 80109ec:	2800      	cmp	r0, #0
 80109ee:	d13a      	bne.n	8010a66 <__gethex+0xca>
 80109f0:	9901      	ldr	r1, [sp, #4]
 80109f2:	4652      	mov	r2, sl
 80109f4:	4638      	mov	r0, r7
 80109f6:	f001 fa23 	bl	8011e40 <strncmp>
 80109fa:	4605      	mov	r5, r0
 80109fc:	2800      	cmp	r0, #0
 80109fe:	d168      	bne.n	8010ad2 <__gethex+0x136>
 8010a00:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010a04:	eb07 060a 	add.w	r6, r7, sl
 8010a08:	f7ff ffb2 	bl	8010970 <__hexdig_fun>
 8010a0c:	2800      	cmp	r0, #0
 8010a0e:	d062      	beq.n	8010ad6 <__gethex+0x13a>
 8010a10:	4633      	mov	r3, r6
 8010a12:	7818      	ldrb	r0, [r3, #0]
 8010a14:	2830      	cmp	r0, #48	; 0x30
 8010a16:	461f      	mov	r7, r3
 8010a18:	f103 0301 	add.w	r3, r3, #1
 8010a1c:	d0f9      	beq.n	8010a12 <__gethex+0x76>
 8010a1e:	f7ff ffa7 	bl	8010970 <__hexdig_fun>
 8010a22:	2301      	movs	r3, #1
 8010a24:	fab0 f480 	clz	r4, r0
 8010a28:	0964      	lsrs	r4, r4, #5
 8010a2a:	4635      	mov	r5, r6
 8010a2c:	9300      	str	r3, [sp, #0]
 8010a2e:	463a      	mov	r2, r7
 8010a30:	4616      	mov	r6, r2
 8010a32:	3201      	adds	r2, #1
 8010a34:	7830      	ldrb	r0, [r6, #0]
 8010a36:	f7ff ff9b 	bl	8010970 <__hexdig_fun>
 8010a3a:	2800      	cmp	r0, #0
 8010a3c:	d1f8      	bne.n	8010a30 <__gethex+0x94>
 8010a3e:	9901      	ldr	r1, [sp, #4]
 8010a40:	4652      	mov	r2, sl
 8010a42:	4630      	mov	r0, r6
 8010a44:	f001 f9fc 	bl	8011e40 <strncmp>
 8010a48:	b980      	cbnz	r0, 8010a6c <__gethex+0xd0>
 8010a4a:	b94d      	cbnz	r5, 8010a60 <__gethex+0xc4>
 8010a4c:	eb06 050a 	add.w	r5, r6, sl
 8010a50:	462a      	mov	r2, r5
 8010a52:	4616      	mov	r6, r2
 8010a54:	3201      	adds	r2, #1
 8010a56:	7830      	ldrb	r0, [r6, #0]
 8010a58:	f7ff ff8a 	bl	8010970 <__hexdig_fun>
 8010a5c:	2800      	cmp	r0, #0
 8010a5e:	d1f8      	bne.n	8010a52 <__gethex+0xb6>
 8010a60:	1bad      	subs	r5, r5, r6
 8010a62:	00ad      	lsls	r5, r5, #2
 8010a64:	e004      	b.n	8010a70 <__gethex+0xd4>
 8010a66:	2400      	movs	r4, #0
 8010a68:	4625      	mov	r5, r4
 8010a6a:	e7e0      	b.n	8010a2e <__gethex+0x92>
 8010a6c:	2d00      	cmp	r5, #0
 8010a6e:	d1f7      	bne.n	8010a60 <__gethex+0xc4>
 8010a70:	7833      	ldrb	r3, [r6, #0]
 8010a72:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010a76:	2b50      	cmp	r3, #80	; 0x50
 8010a78:	d13b      	bne.n	8010af2 <__gethex+0x156>
 8010a7a:	7873      	ldrb	r3, [r6, #1]
 8010a7c:	2b2b      	cmp	r3, #43	; 0x2b
 8010a7e:	d02c      	beq.n	8010ada <__gethex+0x13e>
 8010a80:	2b2d      	cmp	r3, #45	; 0x2d
 8010a82:	d02e      	beq.n	8010ae2 <__gethex+0x146>
 8010a84:	1c71      	adds	r1, r6, #1
 8010a86:	f04f 0900 	mov.w	r9, #0
 8010a8a:	7808      	ldrb	r0, [r1, #0]
 8010a8c:	f7ff ff70 	bl	8010970 <__hexdig_fun>
 8010a90:	1e43      	subs	r3, r0, #1
 8010a92:	b2db      	uxtb	r3, r3
 8010a94:	2b18      	cmp	r3, #24
 8010a96:	d82c      	bhi.n	8010af2 <__gethex+0x156>
 8010a98:	f1a0 0210 	sub.w	r2, r0, #16
 8010a9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010aa0:	f7ff ff66 	bl	8010970 <__hexdig_fun>
 8010aa4:	1e43      	subs	r3, r0, #1
 8010aa6:	b2db      	uxtb	r3, r3
 8010aa8:	2b18      	cmp	r3, #24
 8010aaa:	d91d      	bls.n	8010ae8 <__gethex+0x14c>
 8010aac:	f1b9 0f00 	cmp.w	r9, #0
 8010ab0:	d000      	beq.n	8010ab4 <__gethex+0x118>
 8010ab2:	4252      	negs	r2, r2
 8010ab4:	4415      	add	r5, r2
 8010ab6:	f8cb 1000 	str.w	r1, [fp]
 8010aba:	b1e4      	cbz	r4, 8010af6 <__gethex+0x15a>
 8010abc:	9b00      	ldr	r3, [sp, #0]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	bf14      	ite	ne
 8010ac2:	2700      	movne	r7, #0
 8010ac4:	2706      	moveq	r7, #6
 8010ac6:	4638      	mov	r0, r7
 8010ac8:	b009      	add	sp, #36	; 0x24
 8010aca:	ecbd 8b02 	vpop	{d8}
 8010ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ad2:	463e      	mov	r6, r7
 8010ad4:	4625      	mov	r5, r4
 8010ad6:	2401      	movs	r4, #1
 8010ad8:	e7ca      	b.n	8010a70 <__gethex+0xd4>
 8010ada:	f04f 0900 	mov.w	r9, #0
 8010ade:	1cb1      	adds	r1, r6, #2
 8010ae0:	e7d3      	b.n	8010a8a <__gethex+0xee>
 8010ae2:	f04f 0901 	mov.w	r9, #1
 8010ae6:	e7fa      	b.n	8010ade <__gethex+0x142>
 8010ae8:	230a      	movs	r3, #10
 8010aea:	fb03 0202 	mla	r2, r3, r2, r0
 8010aee:	3a10      	subs	r2, #16
 8010af0:	e7d4      	b.n	8010a9c <__gethex+0x100>
 8010af2:	4631      	mov	r1, r6
 8010af4:	e7df      	b.n	8010ab6 <__gethex+0x11a>
 8010af6:	1bf3      	subs	r3, r6, r7
 8010af8:	3b01      	subs	r3, #1
 8010afa:	4621      	mov	r1, r4
 8010afc:	2b07      	cmp	r3, #7
 8010afe:	dc0b      	bgt.n	8010b18 <__gethex+0x17c>
 8010b00:	ee18 0a10 	vmov	r0, s16
 8010b04:	f000 fa70 	bl	8010fe8 <_Balloc>
 8010b08:	4604      	mov	r4, r0
 8010b0a:	b940      	cbnz	r0, 8010b1e <__gethex+0x182>
 8010b0c:	4b5d      	ldr	r3, [pc, #372]	; (8010c84 <__gethex+0x2e8>)
 8010b0e:	4602      	mov	r2, r0
 8010b10:	21de      	movs	r1, #222	; 0xde
 8010b12:	485d      	ldr	r0, [pc, #372]	; (8010c88 <__gethex+0x2ec>)
 8010b14:	f001 f9b6 	bl	8011e84 <__assert_func>
 8010b18:	3101      	adds	r1, #1
 8010b1a:	105b      	asrs	r3, r3, #1
 8010b1c:	e7ee      	b.n	8010afc <__gethex+0x160>
 8010b1e:	f100 0914 	add.w	r9, r0, #20
 8010b22:	f04f 0b00 	mov.w	fp, #0
 8010b26:	f1ca 0301 	rsb	r3, sl, #1
 8010b2a:	f8cd 9008 	str.w	r9, [sp, #8]
 8010b2e:	f8cd b000 	str.w	fp, [sp]
 8010b32:	9306      	str	r3, [sp, #24]
 8010b34:	42b7      	cmp	r7, r6
 8010b36:	d340      	bcc.n	8010bba <__gethex+0x21e>
 8010b38:	9802      	ldr	r0, [sp, #8]
 8010b3a:	9b00      	ldr	r3, [sp, #0]
 8010b3c:	f840 3b04 	str.w	r3, [r0], #4
 8010b40:	eba0 0009 	sub.w	r0, r0, r9
 8010b44:	1080      	asrs	r0, r0, #2
 8010b46:	0146      	lsls	r6, r0, #5
 8010b48:	6120      	str	r0, [r4, #16]
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	f000 fb3e 	bl	80111cc <__hi0bits>
 8010b50:	1a30      	subs	r0, r6, r0
 8010b52:	f8d8 6000 	ldr.w	r6, [r8]
 8010b56:	42b0      	cmp	r0, r6
 8010b58:	dd63      	ble.n	8010c22 <__gethex+0x286>
 8010b5a:	1b87      	subs	r7, r0, r6
 8010b5c:	4639      	mov	r1, r7
 8010b5e:	4620      	mov	r0, r4
 8010b60:	f000 fee2 	bl	8011928 <__any_on>
 8010b64:	4682      	mov	sl, r0
 8010b66:	b1a8      	cbz	r0, 8010b94 <__gethex+0x1f8>
 8010b68:	1e7b      	subs	r3, r7, #1
 8010b6a:	1159      	asrs	r1, r3, #5
 8010b6c:	f003 021f 	and.w	r2, r3, #31
 8010b70:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010b74:	f04f 0a01 	mov.w	sl, #1
 8010b78:	fa0a f202 	lsl.w	r2, sl, r2
 8010b7c:	420a      	tst	r2, r1
 8010b7e:	d009      	beq.n	8010b94 <__gethex+0x1f8>
 8010b80:	4553      	cmp	r3, sl
 8010b82:	dd05      	ble.n	8010b90 <__gethex+0x1f4>
 8010b84:	1eb9      	subs	r1, r7, #2
 8010b86:	4620      	mov	r0, r4
 8010b88:	f000 fece 	bl	8011928 <__any_on>
 8010b8c:	2800      	cmp	r0, #0
 8010b8e:	d145      	bne.n	8010c1c <__gethex+0x280>
 8010b90:	f04f 0a02 	mov.w	sl, #2
 8010b94:	4639      	mov	r1, r7
 8010b96:	4620      	mov	r0, r4
 8010b98:	f7ff fe98 	bl	80108cc <rshift>
 8010b9c:	443d      	add	r5, r7
 8010b9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010ba2:	42ab      	cmp	r3, r5
 8010ba4:	da4c      	bge.n	8010c40 <__gethex+0x2a4>
 8010ba6:	ee18 0a10 	vmov	r0, s16
 8010baa:	4621      	mov	r1, r4
 8010bac:	f000 fa5c 	bl	8011068 <_Bfree>
 8010bb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	6013      	str	r3, [r2, #0]
 8010bb6:	27a3      	movs	r7, #163	; 0xa3
 8010bb8:	e785      	b.n	8010ac6 <__gethex+0x12a>
 8010bba:	1e73      	subs	r3, r6, #1
 8010bbc:	9a05      	ldr	r2, [sp, #20]
 8010bbe:	9303      	str	r3, [sp, #12]
 8010bc0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010bc4:	4293      	cmp	r3, r2
 8010bc6:	d019      	beq.n	8010bfc <__gethex+0x260>
 8010bc8:	f1bb 0f20 	cmp.w	fp, #32
 8010bcc:	d107      	bne.n	8010bde <__gethex+0x242>
 8010bce:	9b02      	ldr	r3, [sp, #8]
 8010bd0:	9a00      	ldr	r2, [sp, #0]
 8010bd2:	f843 2b04 	str.w	r2, [r3], #4
 8010bd6:	9302      	str	r3, [sp, #8]
 8010bd8:	2300      	movs	r3, #0
 8010bda:	9300      	str	r3, [sp, #0]
 8010bdc:	469b      	mov	fp, r3
 8010bde:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010be2:	f7ff fec5 	bl	8010970 <__hexdig_fun>
 8010be6:	9b00      	ldr	r3, [sp, #0]
 8010be8:	f000 000f 	and.w	r0, r0, #15
 8010bec:	fa00 f00b 	lsl.w	r0, r0, fp
 8010bf0:	4303      	orrs	r3, r0
 8010bf2:	9300      	str	r3, [sp, #0]
 8010bf4:	f10b 0b04 	add.w	fp, fp, #4
 8010bf8:	9b03      	ldr	r3, [sp, #12]
 8010bfa:	e00d      	b.n	8010c18 <__gethex+0x27c>
 8010bfc:	9b03      	ldr	r3, [sp, #12]
 8010bfe:	9a06      	ldr	r2, [sp, #24]
 8010c00:	4413      	add	r3, r2
 8010c02:	42bb      	cmp	r3, r7
 8010c04:	d3e0      	bcc.n	8010bc8 <__gethex+0x22c>
 8010c06:	4618      	mov	r0, r3
 8010c08:	9901      	ldr	r1, [sp, #4]
 8010c0a:	9307      	str	r3, [sp, #28]
 8010c0c:	4652      	mov	r2, sl
 8010c0e:	f001 f917 	bl	8011e40 <strncmp>
 8010c12:	9b07      	ldr	r3, [sp, #28]
 8010c14:	2800      	cmp	r0, #0
 8010c16:	d1d7      	bne.n	8010bc8 <__gethex+0x22c>
 8010c18:	461e      	mov	r6, r3
 8010c1a:	e78b      	b.n	8010b34 <__gethex+0x198>
 8010c1c:	f04f 0a03 	mov.w	sl, #3
 8010c20:	e7b8      	b.n	8010b94 <__gethex+0x1f8>
 8010c22:	da0a      	bge.n	8010c3a <__gethex+0x29e>
 8010c24:	1a37      	subs	r7, r6, r0
 8010c26:	4621      	mov	r1, r4
 8010c28:	ee18 0a10 	vmov	r0, s16
 8010c2c:	463a      	mov	r2, r7
 8010c2e:	f000 fc37 	bl	80114a0 <__lshift>
 8010c32:	1bed      	subs	r5, r5, r7
 8010c34:	4604      	mov	r4, r0
 8010c36:	f100 0914 	add.w	r9, r0, #20
 8010c3a:	f04f 0a00 	mov.w	sl, #0
 8010c3e:	e7ae      	b.n	8010b9e <__gethex+0x202>
 8010c40:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010c44:	42a8      	cmp	r0, r5
 8010c46:	dd72      	ble.n	8010d2e <__gethex+0x392>
 8010c48:	1b45      	subs	r5, r0, r5
 8010c4a:	42ae      	cmp	r6, r5
 8010c4c:	dc36      	bgt.n	8010cbc <__gethex+0x320>
 8010c4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010c52:	2b02      	cmp	r3, #2
 8010c54:	d02a      	beq.n	8010cac <__gethex+0x310>
 8010c56:	2b03      	cmp	r3, #3
 8010c58:	d02c      	beq.n	8010cb4 <__gethex+0x318>
 8010c5a:	2b01      	cmp	r3, #1
 8010c5c:	d11c      	bne.n	8010c98 <__gethex+0x2fc>
 8010c5e:	42ae      	cmp	r6, r5
 8010c60:	d11a      	bne.n	8010c98 <__gethex+0x2fc>
 8010c62:	2e01      	cmp	r6, #1
 8010c64:	d112      	bne.n	8010c8c <__gethex+0x2f0>
 8010c66:	9a04      	ldr	r2, [sp, #16]
 8010c68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010c6c:	6013      	str	r3, [r2, #0]
 8010c6e:	2301      	movs	r3, #1
 8010c70:	6123      	str	r3, [r4, #16]
 8010c72:	f8c9 3000 	str.w	r3, [r9]
 8010c76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010c78:	2762      	movs	r7, #98	; 0x62
 8010c7a:	601c      	str	r4, [r3, #0]
 8010c7c:	e723      	b.n	8010ac6 <__gethex+0x12a>
 8010c7e:	bf00      	nop
 8010c80:	08012e50 	.word	0x08012e50
 8010c84:	08012dd8 	.word	0x08012dd8
 8010c88:	08012de9 	.word	0x08012de9
 8010c8c:	1e71      	subs	r1, r6, #1
 8010c8e:	4620      	mov	r0, r4
 8010c90:	f000 fe4a 	bl	8011928 <__any_on>
 8010c94:	2800      	cmp	r0, #0
 8010c96:	d1e6      	bne.n	8010c66 <__gethex+0x2ca>
 8010c98:	ee18 0a10 	vmov	r0, s16
 8010c9c:	4621      	mov	r1, r4
 8010c9e:	f000 f9e3 	bl	8011068 <_Bfree>
 8010ca2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	6013      	str	r3, [r2, #0]
 8010ca8:	2750      	movs	r7, #80	; 0x50
 8010caa:	e70c      	b.n	8010ac6 <__gethex+0x12a>
 8010cac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d1f2      	bne.n	8010c98 <__gethex+0x2fc>
 8010cb2:	e7d8      	b.n	8010c66 <__gethex+0x2ca>
 8010cb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d1d5      	bne.n	8010c66 <__gethex+0x2ca>
 8010cba:	e7ed      	b.n	8010c98 <__gethex+0x2fc>
 8010cbc:	1e6f      	subs	r7, r5, #1
 8010cbe:	f1ba 0f00 	cmp.w	sl, #0
 8010cc2:	d131      	bne.n	8010d28 <__gethex+0x38c>
 8010cc4:	b127      	cbz	r7, 8010cd0 <__gethex+0x334>
 8010cc6:	4639      	mov	r1, r7
 8010cc8:	4620      	mov	r0, r4
 8010cca:	f000 fe2d 	bl	8011928 <__any_on>
 8010cce:	4682      	mov	sl, r0
 8010cd0:	117b      	asrs	r3, r7, #5
 8010cd2:	2101      	movs	r1, #1
 8010cd4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010cd8:	f007 071f 	and.w	r7, r7, #31
 8010cdc:	fa01 f707 	lsl.w	r7, r1, r7
 8010ce0:	421f      	tst	r7, r3
 8010ce2:	4629      	mov	r1, r5
 8010ce4:	4620      	mov	r0, r4
 8010ce6:	bf18      	it	ne
 8010ce8:	f04a 0a02 	orrne.w	sl, sl, #2
 8010cec:	1b76      	subs	r6, r6, r5
 8010cee:	f7ff fded 	bl	80108cc <rshift>
 8010cf2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010cf6:	2702      	movs	r7, #2
 8010cf8:	f1ba 0f00 	cmp.w	sl, #0
 8010cfc:	d048      	beq.n	8010d90 <__gethex+0x3f4>
 8010cfe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010d02:	2b02      	cmp	r3, #2
 8010d04:	d015      	beq.n	8010d32 <__gethex+0x396>
 8010d06:	2b03      	cmp	r3, #3
 8010d08:	d017      	beq.n	8010d3a <__gethex+0x39e>
 8010d0a:	2b01      	cmp	r3, #1
 8010d0c:	d109      	bne.n	8010d22 <__gethex+0x386>
 8010d0e:	f01a 0f02 	tst.w	sl, #2
 8010d12:	d006      	beq.n	8010d22 <__gethex+0x386>
 8010d14:	f8d9 0000 	ldr.w	r0, [r9]
 8010d18:	ea4a 0a00 	orr.w	sl, sl, r0
 8010d1c:	f01a 0f01 	tst.w	sl, #1
 8010d20:	d10e      	bne.n	8010d40 <__gethex+0x3a4>
 8010d22:	f047 0710 	orr.w	r7, r7, #16
 8010d26:	e033      	b.n	8010d90 <__gethex+0x3f4>
 8010d28:	f04f 0a01 	mov.w	sl, #1
 8010d2c:	e7d0      	b.n	8010cd0 <__gethex+0x334>
 8010d2e:	2701      	movs	r7, #1
 8010d30:	e7e2      	b.n	8010cf8 <__gethex+0x35c>
 8010d32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010d34:	f1c3 0301 	rsb	r3, r3, #1
 8010d38:	9315      	str	r3, [sp, #84]	; 0x54
 8010d3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d0f0      	beq.n	8010d22 <__gethex+0x386>
 8010d40:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010d44:	f104 0314 	add.w	r3, r4, #20
 8010d48:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010d4c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010d50:	f04f 0c00 	mov.w	ip, #0
 8010d54:	4618      	mov	r0, r3
 8010d56:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d5a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010d5e:	d01c      	beq.n	8010d9a <__gethex+0x3fe>
 8010d60:	3201      	adds	r2, #1
 8010d62:	6002      	str	r2, [r0, #0]
 8010d64:	2f02      	cmp	r7, #2
 8010d66:	f104 0314 	add.w	r3, r4, #20
 8010d6a:	d13f      	bne.n	8010dec <__gethex+0x450>
 8010d6c:	f8d8 2000 	ldr.w	r2, [r8]
 8010d70:	3a01      	subs	r2, #1
 8010d72:	42b2      	cmp	r2, r6
 8010d74:	d10a      	bne.n	8010d8c <__gethex+0x3f0>
 8010d76:	1171      	asrs	r1, r6, #5
 8010d78:	2201      	movs	r2, #1
 8010d7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010d7e:	f006 061f 	and.w	r6, r6, #31
 8010d82:	fa02 f606 	lsl.w	r6, r2, r6
 8010d86:	421e      	tst	r6, r3
 8010d88:	bf18      	it	ne
 8010d8a:	4617      	movne	r7, r2
 8010d8c:	f047 0720 	orr.w	r7, r7, #32
 8010d90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010d92:	601c      	str	r4, [r3, #0]
 8010d94:	9b04      	ldr	r3, [sp, #16]
 8010d96:	601d      	str	r5, [r3, #0]
 8010d98:	e695      	b.n	8010ac6 <__gethex+0x12a>
 8010d9a:	4299      	cmp	r1, r3
 8010d9c:	f843 cc04 	str.w	ip, [r3, #-4]
 8010da0:	d8d8      	bhi.n	8010d54 <__gethex+0x3b8>
 8010da2:	68a3      	ldr	r3, [r4, #8]
 8010da4:	459b      	cmp	fp, r3
 8010da6:	db19      	blt.n	8010ddc <__gethex+0x440>
 8010da8:	6861      	ldr	r1, [r4, #4]
 8010daa:	ee18 0a10 	vmov	r0, s16
 8010dae:	3101      	adds	r1, #1
 8010db0:	f000 f91a 	bl	8010fe8 <_Balloc>
 8010db4:	4681      	mov	r9, r0
 8010db6:	b918      	cbnz	r0, 8010dc0 <__gethex+0x424>
 8010db8:	4b1a      	ldr	r3, [pc, #104]	; (8010e24 <__gethex+0x488>)
 8010dba:	4602      	mov	r2, r0
 8010dbc:	2184      	movs	r1, #132	; 0x84
 8010dbe:	e6a8      	b.n	8010b12 <__gethex+0x176>
 8010dc0:	6922      	ldr	r2, [r4, #16]
 8010dc2:	3202      	adds	r2, #2
 8010dc4:	f104 010c 	add.w	r1, r4, #12
 8010dc8:	0092      	lsls	r2, r2, #2
 8010dca:	300c      	adds	r0, #12
 8010dcc:	f7fd f996 	bl	800e0fc <memcpy>
 8010dd0:	4621      	mov	r1, r4
 8010dd2:	ee18 0a10 	vmov	r0, s16
 8010dd6:	f000 f947 	bl	8011068 <_Bfree>
 8010dda:	464c      	mov	r4, r9
 8010ddc:	6923      	ldr	r3, [r4, #16]
 8010dde:	1c5a      	adds	r2, r3, #1
 8010de0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010de4:	6122      	str	r2, [r4, #16]
 8010de6:	2201      	movs	r2, #1
 8010de8:	615a      	str	r2, [r3, #20]
 8010dea:	e7bb      	b.n	8010d64 <__gethex+0x3c8>
 8010dec:	6922      	ldr	r2, [r4, #16]
 8010dee:	455a      	cmp	r2, fp
 8010df0:	dd0b      	ble.n	8010e0a <__gethex+0x46e>
 8010df2:	2101      	movs	r1, #1
 8010df4:	4620      	mov	r0, r4
 8010df6:	f7ff fd69 	bl	80108cc <rshift>
 8010dfa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010dfe:	3501      	adds	r5, #1
 8010e00:	42ab      	cmp	r3, r5
 8010e02:	f6ff aed0 	blt.w	8010ba6 <__gethex+0x20a>
 8010e06:	2701      	movs	r7, #1
 8010e08:	e7c0      	b.n	8010d8c <__gethex+0x3f0>
 8010e0a:	f016 061f 	ands.w	r6, r6, #31
 8010e0e:	d0fa      	beq.n	8010e06 <__gethex+0x46a>
 8010e10:	4453      	add	r3, sl
 8010e12:	f1c6 0620 	rsb	r6, r6, #32
 8010e16:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010e1a:	f000 f9d7 	bl	80111cc <__hi0bits>
 8010e1e:	42b0      	cmp	r0, r6
 8010e20:	dbe7      	blt.n	8010df2 <__gethex+0x456>
 8010e22:	e7f0      	b.n	8010e06 <__gethex+0x46a>
 8010e24:	08012dd8 	.word	0x08012dd8

08010e28 <L_shift>:
 8010e28:	f1c2 0208 	rsb	r2, r2, #8
 8010e2c:	0092      	lsls	r2, r2, #2
 8010e2e:	b570      	push	{r4, r5, r6, lr}
 8010e30:	f1c2 0620 	rsb	r6, r2, #32
 8010e34:	6843      	ldr	r3, [r0, #4]
 8010e36:	6804      	ldr	r4, [r0, #0]
 8010e38:	fa03 f506 	lsl.w	r5, r3, r6
 8010e3c:	432c      	orrs	r4, r5
 8010e3e:	40d3      	lsrs	r3, r2
 8010e40:	6004      	str	r4, [r0, #0]
 8010e42:	f840 3f04 	str.w	r3, [r0, #4]!
 8010e46:	4288      	cmp	r0, r1
 8010e48:	d3f4      	bcc.n	8010e34 <L_shift+0xc>
 8010e4a:	bd70      	pop	{r4, r5, r6, pc}

08010e4c <__match>:
 8010e4c:	b530      	push	{r4, r5, lr}
 8010e4e:	6803      	ldr	r3, [r0, #0]
 8010e50:	3301      	adds	r3, #1
 8010e52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e56:	b914      	cbnz	r4, 8010e5e <__match+0x12>
 8010e58:	6003      	str	r3, [r0, #0]
 8010e5a:	2001      	movs	r0, #1
 8010e5c:	bd30      	pop	{r4, r5, pc}
 8010e5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e62:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010e66:	2d19      	cmp	r5, #25
 8010e68:	bf98      	it	ls
 8010e6a:	3220      	addls	r2, #32
 8010e6c:	42a2      	cmp	r2, r4
 8010e6e:	d0f0      	beq.n	8010e52 <__match+0x6>
 8010e70:	2000      	movs	r0, #0
 8010e72:	e7f3      	b.n	8010e5c <__match+0x10>

08010e74 <__hexnan>:
 8010e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e78:	680b      	ldr	r3, [r1, #0]
 8010e7a:	115e      	asrs	r6, r3, #5
 8010e7c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010e80:	f013 031f 	ands.w	r3, r3, #31
 8010e84:	b087      	sub	sp, #28
 8010e86:	bf18      	it	ne
 8010e88:	3604      	addne	r6, #4
 8010e8a:	2500      	movs	r5, #0
 8010e8c:	1f37      	subs	r7, r6, #4
 8010e8e:	4690      	mov	r8, r2
 8010e90:	6802      	ldr	r2, [r0, #0]
 8010e92:	9301      	str	r3, [sp, #4]
 8010e94:	4682      	mov	sl, r0
 8010e96:	f846 5c04 	str.w	r5, [r6, #-4]
 8010e9a:	46b9      	mov	r9, r7
 8010e9c:	463c      	mov	r4, r7
 8010e9e:	9502      	str	r5, [sp, #8]
 8010ea0:	46ab      	mov	fp, r5
 8010ea2:	7851      	ldrb	r1, [r2, #1]
 8010ea4:	1c53      	adds	r3, r2, #1
 8010ea6:	9303      	str	r3, [sp, #12]
 8010ea8:	b341      	cbz	r1, 8010efc <__hexnan+0x88>
 8010eaa:	4608      	mov	r0, r1
 8010eac:	9205      	str	r2, [sp, #20]
 8010eae:	9104      	str	r1, [sp, #16]
 8010eb0:	f7ff fd5e 	bl	8010970 <__hexdig_fun>
 8010eb4:	2800      	cmp	r0, #0
 8010eb6:	d14f      	bne.n	8010f58 <__hexnan+0xe4>
 8010eb8:	9904      	ldr	r1, [sp, #16]
 8010eba:	9a05      	ldr	r2, [sp, #20]
 8010ebc:	2920      	cmp	r1, #32
 8010ebe:	d818      	bhi.n	8010ef2 <__hexnan+0x7e>
 8010ec0:	9b02      	ldr	r3, [sp, #8]
 8010ec2:	459b      	cmp	fp, r3
 8010ec4:	dd13      	ble.n	8010eee <__hexnan+0x7a>
 8010ec6:	454c      	cmp	r4, r9
 8010ec8:	d206      	bcs.n	8010ed8 <__hexnan+0x64>
 8010eca:	2d07      	cmp	r5, #7
 8010ecc:	dc04      	bgt.n	8010ed8 <__hexnan+0x64>
 8010ece:	462a      	mov	r2, r5
 8010ed0:	4649      	mov	r1, r9
 8010ed2:	4620      	mov	r0, r4
 8010ed4:	f7ff ffa8 	bl	8010e28 <L_shift>
 8010ed8:	4544      	cmp	r4, r8
 8010eda:	d950      	bls.n	8010f7e <__hexnan+0x10a>
 8010edc:	2300      	movs	r3, #0
 8010ede:	f1a4 0904 	sub.w	r9, r4, #4
 8010ee2:	f844 3c04 	str.w	r3, [r4, #-4]
 8010ee6:	f8cd b008 	str.w	fp, [sp, #8]
 8010eea:	464c      	mov	r4, r9
 8010eec:	461d      	mov	r5, r3
 8010eee:	9a03      	ldr	r2, [sp, #12]
 8010ef0:	e7d7      	b.n	8010ea2 <__hexnan+0x2e>
 8010ef2:	2929      	cmp	r1, #41	; 0x29
 8010ef4:	d156      	bne.n	8010fa4 <__hexnan+0x130>
 8010ef6:	3202      	adds	r2, #2
 8010ef8:	f8ca 2000 	str.w	r2, [sl]
 8010efc:	f1bb 0f00 	cmp.w	fp, #0
 8010f00:	d050      	beq.n	8010fa4 <__hexnan+0x130>
 8010f02:	454c      	cmp	r4, r9
 8010f04:	d206      	bcs.n	8010f14 <__hexnan+0xa0>
 8010f06:	2d07      	cmp	r5, #7
 8010f08:	dc04      	bgt.n	8010f14 <__hexnan+0xa0>
 8010f0a:	462a      	mov	r2, r5
 8010f0c:	4649      	mov	r1, r9
 8010f0e:	4620      	mov	r0, r4
 8010f10:	f7ff ff8a 	bl	8010e28 <L_shift>
 8010f14:	4544      	cmp	r4, r8
 8010f16:	d934      	bls.n	8010f82 <__hexnan+0x10e>
 8010f18:	f1a8 0204 	sub.w	r2, r8, #4
 8010f1c:	4623      	mov	r3, r4
 8010f1e:	f853 1b04 	ldr.w	r1, [r3], #4
 8010f22:	f842 1f04 	str.w	r1, [r2, #4]!
 8010f26:	429f      	cmp	r7, r3
 8010f28:	d2f9      	bcs.n	8010f1e <__hexnan+0xaa>
 8010f2a:	1b3b      	subs	r3, r7, r4
 8010f2c:	f023 0303 	bic.w	r3, r3, #3
 8010f30:	3304      	adds	r3, #4
 8010f32:	3401      	adds	r4, #1
 8010f34:	3e03      	subs	r6, #3
 8010f36:	42b4      	cmp	r4, r6
 8010f38:	bf88      	it	hi
 8010f3a:	2304      	movhi	r3, #4
 8010f3c:	4443      	add	r3, r8
 8010f3e:	2200      	movs	r2, #0
 8010f40:	f843 2b04 	str.w	r2, [r3], #4
 8010f44:	429f      	cmp	r7, r3
 8010f46:	d2fb      	bcs.n	8010f40 <__hexnan+0xcc>
 8010f48:	683b      	ldr	r3, [r7, #0]
 8010f4a:	b91b      	cbnz	r3, 8010f54 <__hexnan+0xe0>
 8010f4c:	4547      	cmp	r7, r8
 8010f4e:	d127      	bne.n	8010fa0 <__hexnan+0x12c>
 8010f50:	2301      	movs	r3, #1
 8010f52:	603b      	str	r3, [r7, #0]
 8010f54:	2005      	movs	r0, #5
 8010f56:	e026      	b.n	8010fa6 <__hexnan+0x132>
 8010f58:	3501      	adds	r5, #1
 8010f5a:	2d08      	cmp	r5, #8
 8010f5c:	f10b 0b01 	add.w	fp, fp, #1
 8010f60:	dd06      	ble.n	8010f70 <__hexnan+0xfc>
 8010f62:	4544      	cmp	r4, r8
 8010f64:	d9c3      	bls.n	8010eee <__hexnan+0x7a>
 8010f66:	2300      	movs	r3, #0
 8010f68:	f844 3c04 	str.w	r3, [r4, #-4]
 8010f6c:	2501      	movs	r5, #1
 8010f6e:	3c04      	subs	r4, #4
 8010f70:	6822      	ldr	r2, [r4, #0]
 8010f72:	f000 000f 	and.w	r0, r0, #15
 8010f76:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010f7a:	6022      	str	r2, [r4, #0]
 8010f7c:	e7b7      	b.n	8010eee <__hexnan+0x7a>
 8010f7e:	2508      	movs	r5, #8
 8010f80:	e7b5      	b.n	8010eee <__hexnan+0x7a>
 8010f82:	9b01      	ldr	r3, [sp, #4]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d0df      	beq.n	8010f48 <__hexnan+0xd4>
 8010f88:	f04f 32ff 	mov.w	r2, #4294967295
 8010f8c:	f1c3 0320 	rsb	r3, r3, #32
 8010f90:	fa22 f303 	lsr.w	r3, r2, r3
 8010f94:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010f98:	401a      	ands	r2, r3
 8010f9a:	f846 2c04 	str.w	r2, [r6, #-4]
 8010f9e:	e7d3      	b.n	8010f48 <__hexnan+0xd4>
 8010fa0:	3f04      	subs	r7, #4
 8010fa2:	e7d1      	b.n	8010f48 <__hexnan+0xd4>
 8010fa4:	2004      	movs	r0, #4
 8010fa6:	b007      	add	sp, #28
 8010fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010fac <_localeconv_r>:
 8010fac:	4800      	ldr	r0, [pc, #0]	; (8010fb0 <_localeconv_r+0x4>)
 8010fae:	4770      	bx	lr
 8010fb0:	20000268 	.word	0x20000268

08010fb4 <malloc>:
 8010fb4:	4b02      	ldr	r3, [pc, #8]	; (8010fc0 <malloc+0xc>)
 8010fb6:	4601      	mov	r1, r0
 8010fb8:	6818      	ldr	r0, [r3, #0]
 8010fba:	f000 bd59 	b.w	8011a70 <_malloc_r>
 8010fbe:	bf00      	nop
 8010fc0:	20000110 	.word	0x20000110

08010fc4 <__ascii_mbtowc>:
 8010fc4:	b082      	sub	sp, #8
 8010fc6:	b901      	cbnz	r1, 8010fca <__ascii_mbtowc+0x6>
 8010fc8:	a901      	add	r1, sp, #4
 8010fca:	b142      	cbz	r2, 8010fde <__ascii_mbtowc+0x1a>
 8010fcc:	b14b      	cbz	r3, 8010fe2 <__ascii_mbtowc+0x1e>
 8010fce:	7813      	ldrb	r3, [r2, #0]
 8010fd0:	600b      	str	r3, [r1, #0]
 8010fd2:	7812      	ldrb	r2, [r2, #0]
 8010fd4:	1e10      	subs	r0, r2, #0
 8010fd6:	bf18      	it	ne
 8010fd8:	2001      	movne	r0, #1
 8010fda:	b002      	add	sp, #8
 8010fdc:	4770      	bx	lr
 8010fde:	4610      	mov	r0, r2
 8010fe0:	e7fb      	b.n	8010fda <__ascii_mbtowc+0x16>
 8010fe2:	f06f 0001 	mvn.w	r0, #1
 8010fe6:	e7f8      	b.n	8010fda <__ascii_mbtowc+0x16>

08010fe8 <_Balloc>:
 8010fe8:	b570      	push	{r4, r5, r6, lr}
 8010fea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010fec:	4604      	mov	r4, r0
 8010fee:	460d      	mov	r5, r1
 8010ff0:	b976      	cbnz	r6, 8011010 <_Balloc+0x28>
 8010ff2:	2010      	movs	r0, #16
 8010ff4:	f7ff ffde 	bl	8010fb4 <malloc>
 8010ff8:	4602      	mov	r2, r0
 8010ffa:	6260      	str	r0, [r4, #36]	; 0x24
 8010ffc:	b920      	cbnz	r0, 8011008 <_Balloc+0x20>
 8010ffe:	4b18      	ldr	r3, [pc, #96]	; (8011060 <_Balloc+0x78>)
 8011000:	4818      	ldr	r0, [pc, #96]	; (8011064 <_Balloc+0x7c>)
 8011002:	2166      	movs	r1, #102	; 0x66
 8011004:	f000 ff3e 	bl	8011e84 <__assert_func>
 8011008:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801100c:	6006      	str	r6, [r0, #0]
 801100e:	60c6      	str	r6, [r0, #12]
 8011010:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011012:	68f3      	ldr	r3, [r6, #12]
 8011014:	b183      	cbz	r3, 8011038 <_Balloc+0x50>
 8011016:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011018:	68db      	ldr	r3, [r3, #12]
 801101a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801101e:	b9b8      	cbnz	r0, 8011050 <_Balloc+0x68>
 8011020:	2101      	movs	r1, #1
 8011022:	fa01 f605 	lsl.w	r6, r1, r5
 8011026:	1d72      	adds	r2, r6, #5
 8011028:	0092      	lsls	r2, r2, #2
 801102a:	4620      	mov	r0, r4
 801102c:	f000 fc9d 	bl	801196a <_calloc_r>
 8011030:	b160      	cbz	r0, 801104c <_Balloc+0x64>
 8011032:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011036:	e00e      	b.n	8011056 <_Balloc+0x6e>
 8011038:	2221      	movs	r2, #33	; 0x21
 801103a:	2104      	movs	r1, #4
 801103c:	4620      	mov	r0, r4
 801103e:	f000 fc94 	bl	801196a <_calloc_r>
 8011042:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011044:	60f0      	str	r0, [r6, #12]
 8011046:	68db      	ldr	r3, [r3, #12]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d1e4      	bne.n	8011016 <_Balloc+0x2e>
 801104c:	2000      	movs	r0, #0
 801104e:	bd70      	pop	{r4, r5, r6, pc}
 8011050:	6802      	ldr	r2, [r0, #0]
 8011052:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011056:	2300      	movs	r3, #0
 8011058:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801105c:	e7f7      	b.n	801104e <_Balloc+0x66>
 801105e:	bf00      	nop
 8011060:	08012d66 	.word	0x08012d66
 8011064:	08012e64 	.word	0x08012e64

08011068 <_Bfree>:
 8011068:	b570      	push	{r4, r5, r6, lr}
 801106a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801106c:	4605      	mov	r5, r0
 801106e:	460c      	mov	r4, r1
 8011070:	b976      	cbnz	r6, 8011090 <_Bfree+0x28>
 8011072:	2010      	movs	r0, #16
 8011074:	f7ff ff9e 	bl	8010fb4 <malloc>
 8011078:	4602      	mov	r2, r0
 801107a:	6268      	str	r0, [r5, #36]	; 0x24
 801107c:	b920      	cbnz	r0, 8011088 <_Bfree+0x20>
 801107e:	4b09      	ldr	r3, [pc, #36]	; (80110a4 <_Bfree+0x3c>)
 8011080:	4809      	ldr	r0, [pc, #36]	; (80110a8 <_Bfree+0x40>)
 8011082:	218a      	movs	r1, #138	; 0x8a
 8011084:	f000 fefe 	bl	8011e84 <__assert_func>
 8011088:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801108c:	6006      	str	r6, [r0, #0]
 801108e:	60c6      	str	r6, [r0, #12]
 8011090:	b13c      	cbz	r4, 80110a2 <_Bfree+0x3a>
 8011092:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011094:	6862      	ldr	r2, [r4, #4]
 8011096:	68db      	ldr	r3, [r3, #12]
 8011098:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801109c:	6021      	str	r1, [r4, #0]
 801109e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80110a2:	bd70      	pop	{r4, r5, r6, pc}
 80110a4:	08012d66 	.word	0x08012d66
 80110a8:	08012e64 	.word	0x08012e64

080110ac <__multadd>:
 80110ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110b0:	690d      	ldr	r5, [r1, #16]
 80110b2:	4607      	mov	r7, r0
 80110b4:	460c      	mov	r4, r1
 80110b6:	461e      	mov	r6, r3
 80110b8:	f101 0c14 	add.w	ip, r1, #20
 80110bc:	2000      	movs	r0, #0
 80110be:	f8dc 3000 	ldr.w	r3, [ip]
 80110c2:	b299      	uxth	r1, r3
 80110c4:	fb02 6101 	mla	r1, r2, r1, r6
 80110c8:	0c1e      	lsrs	r6, r3, #16
 80110ca:	0c0b      	lsrs	r3, r1, #16
 80110cc:	fb02 3306 	mla	r3, r2, r6, r3
 80110d0:	b289      	uxth	r1, r1
 80110d2:	3001      	adds	r0, #1
 80110d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80110d8:	4285      	cmp	r5, r0
 80110da:	f84c 1b04 	str.w	r1, [ip], #4
 80110de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80110e2:	dcec      	bgt.n	80110be <__multadd+0x12>
 80110e4:	b30e      	cbz	r6, 801112a <__multadd+0x7e>
 80110e6:	68a3      	ldr	r3, [r4, #8]
 80110e8:	42ab      	cmp	r3, r5
 80110ea:	dc19      	bgt.n	8011120 <__multadd+0x74>
 80110ec:	6861      	ldr	r1, [r4, #4]
 80110ee:	4638      	mov	r0, r7
 80110f0:	3101      	adds	r1, #1
 80110f2:	f7ff ff79 	bl	8010fe8 <_Balloc>
 80110f6:	4680      	mov	r8, r0
 80110f8:	b928      	cbnz	r0, 8011106 <__multadd+0x5a>
 80110fa:	4602      	mov	r2, r0
 80110fc:	4b0c      	ldr	r3, [pc, #48]	; (8011130 <__multadd+0x84>)
 80110fe:	480d      	ldr	r0, [pc, #52]	; (8011134 <__multadd+0x88>)
 8011100:	21b5      	movs	r1, #181	; 0xb5
 8011102:	f000 febf 	bl	8011e84 <__assert_func>
 8011106:	6922      	ldr	r2, [r4, #16]
 8011108:	3202      	adds	r2, #2
 801110a:	f104 010c 	add.w	r1, r4, #12
 801110e:	0092      	lsls	r2, r2, #2
 8011110:	300c      	adds	r0, #12
 8011112:	f7fc fff3 	bl	800e0fc <memcpy>
 8011116:	4621      	mov	r1, r4
 8011118:	4638      	mov	r0, r7
 801111a:	f7ff ffa5 	bl	8011068 <_Bfree>
 801111e:	4644      	mov	r4, r8
 8011120:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011124:	3501      	adds	r5, #1
 8011126:	615e      	str	r6, [r3, #20]
 8011128:	6125      	str	r5, [r4, #16]
 801112a:	4620      	mov	r0, r4
 801112c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011130:	08012dd8 	.word	0x08012dd8
 8011134:	08012e64 	.word	0x08012e64

08011138 <__s2b>:
 8011138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801113c:	460c      	mov	r4, r1
 801113e:	4615      	mov	r5, r2
 8011140:	461f      	mov	r7, r3
 8011142:	2209      	movs	r2, #9
 8011144:	3308      	adds	r3, #8
 8011146:	4606      	mov	r6, r0
 8011148:	fb93 f3f2 	sdiv	r3, r3, r2
 801114c:	2100      	movs	r1, #0
 801114e:	2201      	movs	r2, #1
 8011150:	429a      	cmp	r2, r3
 8011152:	db09      	blt.n	8011168 <__s2b+0x30>
 8011154:	4630      	mov	r0, r6
 8011156:	f7ff ff47 	bl	8010fe8 <_Balloc>
 801115a:	b940      	cbnz	r0, 801116e <__s2b+0x36>
 801115c:	4602      	mov	r2, r0
 801115e:	4b19      	ldr	r3, [pc, #100]	; (80111c4 <__s2b+0x8c>)
 8011160:	4819      	ldr	r0, [pc, #100]	; (80111c8 <__s2b+0x90>)
 8011162:	21ce      	movs	r1, #206	; 0xce
 8011164:	f000 fe8e 	bl	8011e84 <__assert_func>
 8011168:	0052      	lsls	r2, r2, #1
 801116a:	3101      	adds	r1, #1
 801116c:	e7f0      	b.n	8011150 <__s2b+0x18>
 801116e:	9b08      	ldr	r3, [sp, #32]
 8011170:	6143      	str	r3, [r0, #20]
 8011172:	2d09      	cmp	r5, #9
 8011174:	f04f 0301 	mov.w	r3, #1
 8011178:	6103      	str	r3, [r0, #16]
 801117a:	dd16      	ble.n	80111aa <__s2b+0x72>
 801117c:	f104 0909 	add.w	r9, r4, #9
 8011180:	46c8      	mov	r8, r9
 8011182:	442c      	add	r4, r5
 8011184:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011188:	4601      	mov	r1, r0
 801118a:	3b30      	subs	r3, #48	; 0x30
 801118c:	220a      	movs	r2, #10
 801118e:	4630      	mov	r0, r6
 8011190:	f7ff ff8c 	bl	80110ac <__multadd>
 8011194:	45a0      	cmp	r8, r4
 8011196:	d1f5      	bne.n	8011184 <__s2b+0x4c>
 8011198:	f1a5 0408 	sub.w	r4, r5, #8
 801119c:	444c      	add	r4, r9
 801119e:	1b2d      	subs	r5, r5, r4
 80111a0:	1963      	adds	r3, r4, r5
 80111a2:	42bb      	cmp	r3, r7
 80111a4:	db04      	blt.n	80111b0 <__s2b+0x78>
 80111a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111aa:	340a      	adds	r4, #10
 80111ac:	2509      	movs	r5, #9
 80111ae:	e7f6      	b.n	801119e <__s2b+0x66>
 80111b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80111b4:	4601      	mov	r1, r0
 80111b6:	3b30      	subs	r3, #48	; 0x30
 80111b8:	220a      	movs	r2, #10
 80111ba:	4630      	mov	r0, r6
 80111bc:	f7ff ff76 	bl	80110ac <__multadd>
 80111c0:	e7ee      	b.n	80111a0 <__s2b+0x68>
 80111c2:	bf00      	nop
 80111c4:	08012dd8 	.word	0x08012dd8
 80111c8:	08012e64 	.word	0x08012e64

080111cc <__hi0bits>:
 80111cc:	0c03      	lsrs	r3, r0, #16
 80111ce:	041b      	lsls	r3, r3, #16
 80111d0:	b9d3      	cbnz	r3, 8011208 <__hi0bits+0x3c>
 80111d2:	0400      	lsls	r0, r0, #16
 80111d4:	2310      	movs	r3, #16
 80111d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80111da:	bf04      	itt	eq
 80111dc:	0200      	lsleq	r0, r0, #8
 80111de:	3308      	addeq	r3, #8
 80111e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80111e4:	bf04      	itt	eq
 80111e6:	0100      	lsleq	r0, r0, #4
 80111e8:	3304      	addeq	r3, #4
 80111ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80111ee:	bf04      	itt	eq
 80111f0:	0080      	lsleq	r0, r0, #2
 80111f2:	3302      	addeq	r3, #2
 80111f4:	2800      	cmp	r0, #0
 80111f6:	db05      	blt.n	8011204 <__hi0bits+0x38>
 80111f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80111fc:	f103 0301 	add.w	r3, r3, #1
 8011200:	bf08      	it	eq
 8011202:	2320      	moveq	r3, #32
 8011204:	4618      	mov	r0, r3
 8011206:	4770      	bx	lr
 8011208:	2300      	movs	r3, #0
 801120a:	e7e4      	b.n	80111d6 <__hi0bits+0xa>

0801120c <__lo0bits>:
 801120c:	6803      	ldr	r3, [r0, #0]
 801120e:	f013 0207 	ands.w	r2, r3, #7
 8011212:	4601      	mov	r1, r0
 8011214:	d00b      	beq.n	801122e <__lo0bits+0x22>
 8011216:	07da      	lsls	r2, r3, #31
 8011218:	d423      	bmi.n	8011262 <__lo0bits+0x56>
 801121a:	0798      	lsls	r0, r3, #30
 801121c:	bf49      	itett	mi
 801121e:	085b      	lsrmi	r3, r3, #1
 8011220:	089b      	lsrpl	r3, r3, #2
 8011222:	2001      	movmi	r0, #1
 8011224:	600b      	strmi	r3, [r1, #0]
 8011226:	bf5c      	itt	pl
 8011228:	600b      	strpl	r3, [r1, #0]
 801122a:	2002      	movpl	r0, #2
 801122c:	4770      	bx	lr
 801122e:	b298      	uxth	r0, r3
 8011230:	b9a8      	cbnz	r0, 801125e <__lo0bits+0x52>
 8011232:	0c1b      	lsrs	r3, r3, #16
 8011234:	2010      	movs	r0, #16
 8011236:	b2da      	uxtb	r2, r3
 8011238:	b90a      	cbnz	r2, 801123e <__lo0bits+0x32>
 801123a:	3008      	adds	r0, #8
 801123c:	0a1b      	lsrs	r3, r3, #8
 801123e:	071a      	lsls	r2, r3, #28
 8011240:	bf04      	itt	eq
 8011242:	091b      	lsreq	r3, r3, #4
 8011244:	3004      	addeq	r0, #4
 8011246:	079a      	lsls	r2, r3, #30
 8011248:	bf04      	itt	eq
 801124a:	089b      	lsreq	r3, r3, #2
 801124c:	3002      	addeq	r0, #2
 801124e:	07da      	lsls	r2, r3, #31
 8011250:	d403      	bmi.n	801125a <__lo0bits+0x4e>
 8011252:	085b      	lsrs	r3, r3, #1
 8011254:	f100 0001 	add.w	r0, r0, #1
 8011258:	d005      	beq.n	8011266 <__lo0bits+0x5a>
 801125a:	600b      	str	r3, [r1, #0]
 801125c:	4770      	bx	lr
 801125e:	4610      	mov	r0, r2
 8011260:	e7e9      	b.n	8011236 <__lo0bits+0x2a>
 8011262:	2000      	movs	r0, #0
 8011264:	4770      	bx	lr
 8011266:	2020      	movs	r0, #32
 8011268:	4770      	bx	lr
	...

0801126c <__i2b>:
 801126c:	b510      	push	{r4, lr}
 801126e:	460c      	mov	r4, r1
 8011270:	2101      	movs	r1, #1
 8011272:	f7ff feb9 	bl	8010fe8 <_Balloc>
 8011276:	4602      	mov	r2, r0
 8011278:	b928      	cbnz	r0, 8011286 <__i2b+0x1a>
 801127a:	4b05      	ldr	r3, [pc, #20]	; (8011290 <__i2b+0x24>)
 801127c:	4805      	ldr	r0, [pc, #20]	; (8011294 <__i2b+0x28>)
 801127e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011282:	f000 fdff 	bl	8011e84 <__assert_func>
 8011286:	2301      	movs	r3, #1
 8011288:	6144      	str	r4, [r0, #20]
 801128a:	6103      	str	r3, [r0, #16]
 801128c:	bd10      	pop	{r4, pc}
 801128e:	bf00      	nop
 8011290:	08012dd8 	.word	0x08012dd8
 8011294:	08012e64 	.word	0x08012e64

08011298 <__multiply>:
 8011298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801129c:	4691      	mov	r9, r2
 801129e:	690a      	ldr	r2, [r1, #16]
 80112a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80112a4:	429a      	cmp	r2, r3
 80112a6:	bfb8      	it	lt
 80112a8:	460b      	movlt	r3, r1
 80112aa:	460c      	mov	r4, r1
 80112ac:	bfbc      	itt	lt
 80112ae:	464c      	movlt	r4, r9
 80112b0:	4699      	movlt	r9, r3
 80112b2:	6927      	ldr	r7, [r4, #16]
 80112b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80112b8:	68a3      	ldr	r3, [r4, #8]
 80112ba:	6861      	ldr	r1, [r4, #4]
 80112bc:	eb07 060a 	add.w	r6, r7, sl
 80112c0:	42b3      	cmp	r3, r6
 80112c2:	b085      	sub	sp, #20
 80112c4:	bfb8      	it	lt
 80112c6:	3101      	addlt	r1, #1
 80112c8:	f7ff fe8e 	bl	8010fe8 <_Balloc>
 80112cc:	b930      	cbnz	r0, 80112dc <__multiply+0x44>
 80112ce:	4602      	mov	r2, r0
 80112d0:	4b44      	ldr	r3, [pc, #272]	; (80113e4 <__multiply+0x14c>)
 80112d2:	4845      	ldr	r0, [pc, #276]	; (80113e8 <__multiply+0x150>)
 80112d4:	f240 115d 	movw	r1, #349	; 0x15d
 80112d8:	f000 fdd4 	bl	8011e84 <__assert_func>
 80112dc:	f100 0514 	add.w	r5, r0, #20
 80112e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80112e4:	462b      	mov	r3, r5
 80112e6:	2200      	movs	r2, #0
 80112e8:	4543      	cmp	r3, r8
 80112ea:	d321      	bcc.n	8011330 <__multiply+0x98>
 80112ec:	f104 0314 	add.w	r3, r4, #20
 80112f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80112f4:	f109 0314 	add.w	r3, r9, #20
 80112f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80112fc:	9202      	str	r2, [sp, #8]
 80112fe:	1b3a      	subs	r2, r7, r4
 8011300:	3a15      	subs	r2, #21
 8011302:	f022 0203 	bic.w	r2, r2, #3
 8011306:	3204      	adds	r2, #4
 8011308:	f104 0115 	add.w	r1, r4, #21
 801130c:	428f      	cmp	r7, r1
 801130e:	bf38      	it	cc
 8011310:	2204      	movcc	r2, #4
 8011312:	9201      	str	r2, [sp, #4]
 8011314:	9a02      	ldr	r2, [sp, #8]
 8011316:	9303      	str	r3, [sp, #12]
 8011318:	429a      	cmp	r2, r3
 801131a:	d80c      	bhi.n	8011336 <__multiply+0x9e>
 801131c:	2e00      	cmp	r6, #0
 801131e:	dd03      	ble.n	8011328 <__multiply+0x90>
 8011320:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011324:	2b00      	cmp	r3, #0
 8011326:	d05a      	beq.n	80113de <__multiply+0x146>
 8011328:	6106      	str	r6, [r0, #16]
 801132a:	b005      	add	sp, #20
 801132c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011330:	f843 2b04 	str.w	r2, [r3], #4
 8011334:	e7d8      	b.n	80112e8 <__multiply+0x50>
 8011336:	f8b3 a000 	ldrh.w	sl, [r3]
 801133a:	f1ba 0f00 	cmp.w	sl, #0
 801133e:	d024      	beq.n	801138a <__multiply+0xf2>
 8011340:	f104 0e14 	add.w	lr, r4, #20
 8011344:	46a9      	mov	r9, r5
 8011346:	f04f 0c00 	mov.w	ip, #0
 801134a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801134e:	f8d9 1000 	ldr.w	r1, [r9]
 8011352:	fa1f fb82 	uxth.w	fp, r2
 8011356:	b289      	uxth	r1, r1
 8011358:	fb0a 110b 	mla	r1, sl, fp, r1
 801135c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011360:	f8d9 2000 	ldr.w	r2, [r9]
 8011364:	4461      	add	r1, ip
 8011366:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801136a:	fb0a c20b 	mla	r2, sl, fp, ip
 801136e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011372:	b289      	uxth	r1, r1
 8011374:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011378:	4577      	cmp	r7, lr
 801137a:	f849 1b04 	str.w	r1, [r9], #4
 801137e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011382:	d8e2      	bhi.n	801134a <__multiply+0xb2>
 8011384:	9a01      	ldr	r2, [sp, #4]
 8011386:	f845 c002 	str.w	ip, [r5, r2]
 801138a:	9a03      	ldr	r2, [sp, #12]
 801138c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011390:	3304      	adds	r3, #4
 8011392:	f1b9 0f00 	cmp.w	r9, #0
 8011396:	d020      	beq.n	80113da <__multiply+0x142>
 8011398:	6829      	ldr	r1, [r5, #0]
 801139a:	f104 0c14 	add.w	ip, r4, #20
 801139e:	46ae      	mov	lr, r5
 80113a0:	f04f 0a00 	mov.w	sl, #0
 80113a4:	f8bc b000 	ldrh.w	fp, [ip]
 80113a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80113ac:	fb09 220b 	mla	r2, r9, fp, r2
 80113b0:	4492      	add	sl, r2
 80113b2:	b289      	uxth	r1, r1
 80113b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80113b8:	f84e 1b04 	str.w	r1, [lr], #4
 80113bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80113c0:	f8be 1000 	ldrh.w	r1, [lr]
 80113c4:	0c12      	lsrs	r2, r2, #16
 80113c6:	fb09 1102 	mla	r1, r9, r2, r1
 80113ca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80113ce:	4567      	cmp	r7, ip
 80113d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80113d4:	d8e6      	bhi.n	80113a4 <__multiply+0x10c>
 80113d6:	9a01      	ldr	r2, [sp, #4]
 80113d8:	50a9      	str	r1, [r5, r2]
 80113da:	3504      	adds	r5, #4
 80113dc:	e79a      	b.n	8011314 <__multiply+0x7c>
 80113de:	3e01      	subs	r6, #1
 80113e0:	e79c      	b.n	801131c <__multiply+0x84>
 80113e2:	bf00      	nop
 80113e4:	08012dd8 	.word	0x08012dd8
 80113e8:	08012e64 	.word	0x08012e64

080113ec <__pow5mult>:
 80113ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113f0:	4615      	mov	r5, r2
 80113f2:	f012 0203 	ands.w	r2, r2, #3
 80113f6:	4606      	mov	r6, r0
 80113f8:	460f      	mov	r7, r1
 80113fa:	d007      	beq.n	801140c <__pow5mult+0x20>
 80113fc:	4c25      	ldr	r4, [pc, #148]	; (8011494 <__pow5mult+0xa8>)
 80113fe:	3a01      	subs	r2, #1
 8011400:	2300      	movs	r3, #0
 8011402:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011406:	f7ff fe51 	bl	80110ac <__multadd>
 801140a:	4607      	mov	r7, r0
 801140c:	10ad      	asrs	r5, r5, #2
 801140e:	d03d      	beq.n	801148c <__pow5mult+0xa0>
 8011410:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011412:	b97c      	cbnz	r4, 8011434 <__pow5mult+0x48>
 8011414:	2010      	movs	r0, #16
 8011416:	f7ff fdcd 	bl	8010fb4 <malloc>
 801141a:	4602      	mov	r2, r0
 801141c:	6270      	str	r0, [r6, #36]	; 0x24
 801141e:	b928      	cbnz	r0, 801142c <__pow5mult+0x40>
 8011420:	4b1d      	ldr	r3, [pc, #116]	; (8011498 <__pow5mult+0xac>)
 8011422:	481e      	ldr	r0, [pc, #120]	; (801149c <__pow5mult+0xb0>)
 8011424:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011428:	f000 fd2c 	bl	8011e84 <__assert_func>
 801142c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011430:	6004      	str	r4, [r0, #0]
 8011432:	60c4      	str	r4, [r0, #12]
 8011434:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011438:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801143c:	b94c      	cbnz	r4, 8011452 <__pow5mult+0x66>
 801143e:	f240 2171 	movw	r1, #625	; 0x271
 8011442:	4630      	mov	r0, r6
 8011444:	f7ff ff12 	bl	801126c <__i2b>
 8011448:	2300      	movs	r3, #0
 801144a:	f8c8 0008 	str.w	r0, [r8, #8]
 801144e:	4604      	mov	r4, r0
 8011450:	6003      	str	r3, [r0, #0]
 8011452:	f04f 0900 	mov.w	r9, #0
 8011456:	07eb      	lsls	r3, r5, #31
 8011458:	d50a      	bpl.n	8011470 <__pow5mult+0x84>
 801145a:	4639      	mov	r1, r7
 801145c:	4622      	mov	r2, r4
 801145e:	4630      	mov	r0, r6
 8011460:	f7ff ff1a 	bl	8011298 <__multiply>
 8011464:	4639      	mov	r1, r7
 8011466:	4680      	mov	r8, r0
 8011468:	4630      	mov	r0, r6
 801146a:	f7ff fdfd 	bl	8011068 <_Bfree>
 801146e:	4647      	mov	r7, r8
 8011470:	106d      	asrs	r5, r5, #1
 8011472:	d00b      	beq.n	801148c <__pow5mult+0xa0>
 8011474:	6820      	ldr	r0, [r4, #0]
 8011476:	b938      	cbnz	r0, 8011488 <__pow5mult+0x9c>
 8011478:	4622      	mov	r2, r4
 801147a:	4621      	mov	r1, r4
 801147c:	4630      	mov	r0, r6
 801147e:	f7ff ff0b 	bl	8011298 <__multiply>
 8011482:	6020      	str	r0, [r4, #0]
 8011484:	f8c0 9000 	str.w	r9, [r0]
 8011488:	4604      	mov	r4, r0
 801148a:	e7e4      	b.n	8011456 <__pow5mult+0x6a>
 801148c:	4638      	mov	r0, r7
 801148e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011492:	bf00      	nop
 8011494:	08012fb0 	.word	0x08012fb0
 8011498:	08012d66 	.word	0x08012d66
 801149c:	08012e64 	.word	0x08012e64

080114a0 <__lshift>:
 80114a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114a4:	460c      	mov	r4, r1
 80114a6:	6849      	ldr	r1, [r1, #4]
 80114a8:	6923      	ldr	r3, [r4, #16]
 80114aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80114ae:	68a3      	ldr	r3, [r4, #8]
 80114b0:	4607      	mov	r7, r0
 80114b2:	4691      	mov	r9, r2
 80114b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80114b8:	f108 0601 	add.w	r6, r8, #1
 80114bc:	42b3      	cmp	r3, r6
 80114be:	db0b      	blt.n	80114d8 <__lshift+0x38>
 80114c0:	4638      	mov	r0, r7
 80114c2:	f7ff fd91 	bl	8010fe8 <_Balloc>
 80114c6:	4605      	mov	r5, r0
 80114c8:	b948      	cbnz	r0, 80114de <__lshift+0x3e>
 80114ca:	4602      	mov	r2, r0
 80114cc:	4b2a      	ldr	r3, [pc, #168]	; (8011578 <__lshift+0xd8>)
 80114ce:	482b      	ldr	r0, [pc, #172]	; (801157c <__lshift+0xdc>)
 80114d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80114d4:	f000 fcd6 	bl	8011e84 <__assert_func>
 80114d8:	3101      	adds	r1, #1
 80114da:	005b      	lsls	r3, r3, #1
 80114dc:	e7ee      	b.n	80114bc <__lshift+0x1c>
 80114de:	2300      	movs	r3, #0
 80114e0:	f100 0114 	add.w	r1, r0, #20
 80114e4:	f100 0210 	add.w	r2, r0, #16
 80114e8:	4618      	mov	r0, r3
 80114ea:	4553      	cmp	r3, sl
 80114ec:	db37      	blt.n	801155e <__lshift+0xbe>
 80114ee:	6920      	ldr	r0, [r4, #16]
 80114f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80114f4:	f104 0314 	add.w	r3, r4, #20
 80114f8:	f019 091f 	ands.w	r9, r9, #31
 80114fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011500:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011504:	d02f      	beq.n	8011566 <__lshift+0xc6>
 8011506:	f1c9 0e20 	rsb	lr, r9, #32
 801150a:	468a      	mov	sl, r1
 801150c:	f04f 0c00 	mov.w	ip, #0
 8011510:	681a      	ldr	r2, [r3, #0]
 8011512:	fa02 f209 	lsl.w	r2, r2, r9
 8011516:	ea42 020c 	orr.w	r2, r2, ip
 801151a:	f84a 2b04 	str.w	r2, [sl], #4
 801151e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011522:	4298      	cmp	r0, r3
 8011524:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011528:	d8f2      	bhi.n	8011510 <__lshift+0x70>
 801152a:	1b03      	subs	r3, r0, r4
 801152c:	3b15      	subs	r3, #21
 801152e:	f023 0303 	bic.w	r3, r3, #3
 8011532:	3304      	adds	r3, #4
 8011534:	f104 0215 	add.w	r2, r4, #21
 8011538:	4290      	cmp	r0, r2
 801153a:	bf38      	it	cc
 801153c:	2304      	movcc	r3, #4
 801153e:	f841 c003 	str.w	ip, [r1, r3]
 8011542:	f1bc 0f00 	cmp.w	ip, #0
 8011546:	d001      	beq.n	801154c <__lshift+0xac>
 8011548:	f108 0602 	add.w	r6, r8, #2
 801154c:	3e01      	subs	r6, #1
 801154e:	4638      	mov	r0, r7
 8011550:	612e      	str	r6, [r5, #16]
 8011552:	4621      	mov	r1, r4
 8011554:	f7ff fd88 	bl	8011068 <_Bfree>
 8011558:	4628      	mov	r0, r5
 801155a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801155e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011562:	3301      	adds	r3, #1
 8011564:	e7c1      	b.n	80114ea <__lshift+0x4a>
 8011566:	3904      	subs	r1, #4
 8011568:	f853 2b04 	ldr.w	r2, [r3], #4
 801156c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011570:	4298      	cmp	r0, r3
 8011572:	d8f9      	bhi.n	8011568 <__lshift+0xc8>
 8011574:	e7ea      	b.n	801154c <__lshift+0xac>
 8011576:	bf00      	nop
 8011578:	08012dd8 	.word	0x08012dd8
 801157c:	08012e64 	.word	0x08012e64

08011580 <__mcmp>:
 8011580:	b530      	push	{r4, r5, lr}
 8011582:	6902      	ldr	r2, [r0, #16]
 8011584:	690c      	ldr	r4, [r1, #16]
 8011586:	1b12      	subs	r2, r2, r4
 8011588:	d10e      	bne.n	80115a8 <__mcmp+0x28>
 801158a:	f100 0314 	add.w	r3, r0, #20
 801158e:	3114      	adds	r1, #20
 8011590:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011594:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011598:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801159c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80115a0:	42a5      	cmp	r5, r4
 80115a2:	d003      	beq.n	80115ac <__mcmp+0x2c>
 80115a4:	d305      	bcc.n	80115b2 <__mcmp+0x32>
 80115a6:	2201      	movs	r2, #1
 80115a8:	4610      	mov	r0, r2
 80115aa:	bd30      	pop	{r4, r5, pc}
 80115ac:	4283      	cmp	r3, r0
 80115ae:	d3f3      	bcc.n	8011598 <__mcmp+0x18>
 80115b0:	e7fa      	b.n	80115a8 <__mcmp+0x28>
 80115b2:	f04f 32ff 	mov.w	r2, #4294967295
 80115b6:	e7f7      	b.n	80115a8 <__mcmp+0x28>

080115b8 <__mdiff>:
 80115b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115bc:	460c      	mov	r4, r1
 80115be:	4606      	mov	r6, r0
 80115c0:	4611      	mov	r1, r2
 80115c2:	4620      	mov	r0, r4
 80115c4:	4690      	mov	r8, r2
 80115c6:	f7ff ffdb 	bl	8011580 <__mcmp>
 80115ca:	1e05      	subs	r5, r0, #0
 80115cc:	d110      	bne.n	80115f0 <__mdiff+0x38>
 80115ce:	4629      	mov	r1, r5
 80115d0:	4630      	mov	r0, r6
 80115d2:	f7ff fd09 	bl	8010fe8 <_Balloc>
 80115d6:	b930      	cbnz	r0, 80115e6 <__mdiff+0x2e>
 80115d8:	4b3a      	ldr	r3, [pc, #232]	; (80116c4 <__mdiff+0x10c>)
 80115da:	4602      	mov	r2, r0
 80115dc:	f240 2132 	movw	r1, #562	; 0x232
 80115e0:	4839      	ldr	r0, [pc, #228]	; (80116c8 <__mdiff+0x110>)
 80115e2:	f000 fc4f 	bl	8011e84 <__assert_func>
 80115e6:	2301      	movs	r3, #1
 80115e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80115ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115f0:	bfa4      	itt	ge
 80115f2:	4643      	movge	r3, r8
 80115f4:	46a0      	movge	r8, r4
 80115f6:	4630      	mov	r0, r6
 80115f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80115fc:	bfa6      	itte	ge
 80115fe:	461c      	movge	r4, r3
 8011600:	2500      	movge	r5, #0
 8011602:	2501      	movlt	r5, #1
 8011604:	f7ff fcf0 	bl	8010fe8 <_Balloc>
 8011608:	b920      	cbnz	r0, 8011614 <__mdiff+0x5c>
 801160a:	4b2e      	ldr	r3, [pc, #184]	; (80116c4 <__mdiff+0x10c>)
 801160c:	4602      	mov	r2, r0
 801160e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011612:	e7e5      	b.n	80115e0 <__mdiff+0x28>
 8011614:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011618:	6926      	ldr	r6, [r4, #16]
 801161a:	60c5      	str	r5, [r0, #12]
 801161c:	f104 0914 	add.w	r9, r4, #20
 8011620:	f108 0514 	add.w	r5, r8, #20
 8011624:	f100 0e14 	add.w	lr, r0, #20
 8011628:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801162c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011630:	f108 0210 	add.w	r2, r8, #16
 8011634:	46f2      	mov	sl, lr
 8011636:	2100      	movs	r1, #0
 8011638:	f859 3b04 	ldr.w	r3, [r9], #4
 801163c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011640:	fa1f f883 	uxth.w	r8, r3
 8011644:	fa11 f18b 	uxtah	r1, r1, fp
 8011648:	0c1b      	lsrs	r3, r3, #16
 801164a:	eba1 0808 	sub.w	r8, r1, r8
 801164e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011652:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011656:	fa1f f888 	uxth.w	r8, r8
 801165a:	1419      	asrs	r1, r3, #16
 801165c:	454e      	cmp	r6, r9
 801165e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011662:	f84a 3b04 	str.w	r3, [sl], #4
 8011666:	d8e7      	bhi.n	8011638 <__mdiff+0x80>
 8011668:	1b33      	subs	r3, r6, r4
 801166a:	3b15      	subs	r3, #21
 801166c:	f023 0303 	bic.w	r3, r3, #3
 8011670:	3304      	adds	r3, #4
 8011672:	3415      	adds	r4, #21
 8011674:	42a6      	cmp	r6, r4
 8011676:	bf38      	it	cc
 8011678:	2304      	movcc	r3, #4
 801167a:	441d      	add	r5, r3
 801167c:	4473      	add	r3, lr
 801167e:	469e      	mov	lr, r3
 8011680:	462e      	mov	r6, r5
 8011682:	4566      	cmp	r6, ip
 8011684:	d30e      	bcc.n	80116a4 <__mdiff+0xec>
 8011686:	f10c 0203 	add.w	r2, ip, #3
 801168a:	1b52      	subs	r2, r2, r5
 801168c:	f022 0203 	bic.w	r2, r2, #3
 8011690:	3d03      	subs	r5, #3
 8011692:	45ac      	cmp	ip, r5
 8011694:	bf38      	it	cc
 8011696:	2200      	movcc	r2, #0
 8011698:	441a      	add	r2, r3
 801169a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801169e:	b17b      	cbz	r3, 80116c0 <__mdiff+0x108>
 80116a0:	6107      	str	r7, [r0, #16]
 80116a2:	e7a3      	b.n	80115ec <__mdiff+0x34>
 80116a4:	f856 8b04 	ldr.w	r8, [r6], #4
 80116a8:	fa11 f288 	uxtah	r2, r1, r8
 80116ac:	1414      	asrs	r4, r2, #16
 80116ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80116b2:	b292      	uxth	r2, r2
 80116b4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80116b8:	f84e 2b04 	str.w	r2, [lr], #4
 80116bc:	1421      	asrs	r1, r4, #16
 80116be:	e7e0      	b.n	8011682 <__mdiff+0xca>
 80116c0:	3f01      	subs	r7, #1
 80116c2:	e7ea      	b.n	801169a <__mdiff+0xe2>
 80116c4:	08012dd8 	.word	0x08012dd8
 80116c8:	08012e64 	.word	0x08012e64

080116cc <__ulp>:
 80116cc:	b082      	sub	sp, #8
 80116ce:	ed8d 0b00 	vstr	d0, [sp]
 80116d2:	9b01      	ldr	r3, [sp, #4]
 80116d4:	4912      	ldr	r1, [pc, #72]	; (8011720 <__ulp+0x54>)
 80116d6:	4019      	ands	r1, r3
 80116d8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80116dc:	2900      	cmp	r1, #0
 80116de:	dd05      	ble.n	80116ec <__ulp+0x20>
 80116e0:	2200      	movs	r2, #0
 80116e2:	460b      	mov	r3, r1
 80116e4:	ec43 2b10 	vmov	d0, r2, r3
 80116e8:	b002      	add	sp, #8
 80116ea:	4770      	bx	lr
 80116ec:	4249      	negs	r1, r1
 80116ee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80116f2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80116f6:	f04f 0200 	mov.w	r2, #0
 80116fa:	f04f 0300 	mov.w	r3, #0
 80116fe:	da04      	bge.n	801170a <__ulp+0x3e>
 8011700:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011704:	fa41 f300 	asr.w	r3, r1, r0
 8011708:	e7ec      	b.n	80116e4 <__ulp+0x18>
 801170a:	f1a0 0114 	sub.w	r1, r0, #20
 801170e:	291e      	cmp	r1, #30
 8011710:	bfda      	itte	le
 8011712:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8011716:	fa20 f101 	lsrle.w	r1, r0, r1
 801171a:	2101      	movgt	r1, #1
 801171c:	460a      	mov	r2, r1
 801171e:	e7e1      	b.n	80116e4 <__ulp+0x18>
 8011720:	7ff00000 	.word	0x7ff00000

08011724 <__b2d>:
 8011724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011726:	6905      	ldr	r5, [r0, #16]
 8011728:	f100 0714 	add.w	r7, r0, #20
 801172c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011730:	1f2e      	subs	r6, r5, #4
 8011732:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011736:	4620      	mov	r0, r4
 8011738:	f7ff fd48 	bl	80111cc <__hi0bits>
 801173c:	f1c0 0320 	rsb	r3, r0, #32
 8011740:	280a      	cmp	r0, #10
 8011742:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80117c0 <__b2d+0x9c>
 8011746:	600b      	str	r3, [r1, #0]
 8011748:	dc14      	bgt.n	8011774 <__b2d+0x50>
 801174a:	f1c0 0e0b 	rsb	lr, r0, #11
 801174e:	fa24 f10e 	lsr.w	r1, r4, lr
 8011752:	42b7      	cmp	r7, r6
 8011754:	ea41 030c 	orr.w	r3, r1, ip
 8011758:	bf34      	ite	cc
 801175a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801175e:	2100      	movcs	r1, #0
 8011760:	3015      	adds	r0, #21
 8011762:	fa04 f000 	lsl.w	r0, r4, r0
 8011766:	fa21 f10e 	lsr.w	r1, r1, lr
 801176a:	ea40 0201 	orr.w	r2, r0, r1
 801176e:	ec43 2b10 	vmov	d0, r2, r3
 8011772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011774:	42b7      	cmp	r7, r6
 8011776:	bf3a      	itte	cc
 8011778:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801177c:	f1a5 0608 	subcc.w	r6, r5, #8
 8011780:	2100      	movcs	r1, #0
 8011782:	380b      	subs	r0, #11
 8011784:	d017      	beq.n	80117b6 <__b2d+0x92>
 8011786:	f1c0 0c20 	rsb	ip, r0, #32
 801178a:	fa04 f500 	lsl.w	r5, r4, r0
 801178e:	42be      	cmp	r6, r7
 8011790:	fa21 f40c 	lsr.w	r4, r1, ip
 8011794:	ea45 0504 	orr.w	r5, r5, r4
 8011798:	bf8c      	ite	hi
 801179a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801179e:	2400      	movls	r4, #0
 80117a0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80117a4:	fa01 f000 	lsl.w	r0, r1, r0
 80117a8:	fa24 f40c 	lsr.w	r4, r4, ip
 80117ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80117b0:	ea40 0204 	orr.w	r2, r0, r4
 80117b4:	e7db      	b.n	801176e <__b2d+0x4a>
 80117b6:	ea44 030c 	orr.w	r3, r4, ip
 80117ba:	460a      	mov	r2, r1
 80117bc:	e7d7      	b.n	801176e <__b2d+0x4a>
 80117be:	bf00      	nop
 80117c0:	3ff00000 	.word	0x3ff00000

080117c4 <__d2b>:
 80117c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80117c8:	4689      	mov	r9, r1
 80117ca:	2101      	movs	r1, #1
 80117cc:	ec57 6b10 	vmov	r6, r7, d0
 80117d0:	4690      	mov	r8, r2
 80117d2:	f7ff fc09 	bl	8010fe8 <_Balloc>
 80117d6:	4604      	mov	r4, r0
 80117d8:	b930      	cbnz	r0, 80117e8 <__d2b+0x24>
 80117da:	4602      	mov	r2, r0
 80117dc:	4b25      	ldr	r3, [pc, #148]	; (8011874 <__d2b+0xb0>)
 80117de:	4826      	ldr	r0, [pc, #152]	; (8011878 <__d2b+0xb4>)
 80117e0:	f240 310a 	movw	r1, #778	; 0x30a
 80117e4:	f000 fb4e 	bl	8011e84 <__assert_func>
 80117e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80117ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80117f0:	bb35      	cbnz	r5, 8011840 <__d2b+0x7c>
 80117f2:	2e00      	cmp	r6, #0
 80117f4:	9301      	str	r3, [sp, #4]
 80117f6:	d028      	beq.n	801184a <__d2b+0x86>
 80117f8:	4668      	mov	r0, sp
 80117fa:	9600      	str	r6, [sp, #0]
 80117fc:	f7ff fd06 	bl	801120c <__lo0bits>
 8011800:	9900      	ldr	r1, [sp, #0]
 8011802:	b300      	cbz	r0, 8011846 <__d2b+0x82>
 8011804:	9a01      	ldr	r2, [sp, #4]
 8011806:	f1c0 0320 	rsb	r3, r0, #32
 801180a:	fa02 f303 	lsl.w	r3, r2, r3
 801180e:	430b      	orrs	r3, r1
 8011810:	40c2      	lsrs	r2, r0
 8011812:	6163      	str	r3, [r4, #20]
 8011814:	9201      	str	r2, [sp, #4]
 8011816:	9b01      	ldr	r3, [sp, #4]
 8011818:	61a3      	str	r3, [r4, #24]
 801181a:	2b00      	cmp	r3, #0
 801181c:	bf14      	ite	ne
 801181e:	2202      	movne	r2, #2
 8011820:	2201      	moveq	r2, #1
 8011822:	6122      	str	r2, [r4, #16]
 8011824:	b1d5      	cbz	r5, 801185c <__d2b+0x98>
 8011826:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801182a:	4405      	add	r5, r0
 801182c:	f8c9 5000 	str.w	r5, [r9]
 8011830:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011834:	f8c8 0000 	str.w	r0, [r8]
 8011838:	4620      	mov	r0, r4
 801183a:	b003      	add	sp, #12
 801183c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011840:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011844:	e7d5      	b.n	80117f2 <__d2b+0x2e>
 8011846:	6161      	str	r1, [r4, #20]
 8011848:	e7e5      	b.n	8011816 <__d2b+0x52>
 801184a:	a801      	add	r0, sp, #4
 801184c:	f7ff fcde 	bl	801120c <__lo0bits>
 8011850:	9b01      	ldr	r3, [sp, #4]
 8011852:	6163      	str	r3, [r4, #20]
 8011854:	2201      	movs	r2, #1
 8011856:	6122      	str	r2, [r4, #16]
 8011858:	3020      	adds	r0, #32
 801185a:	e7e3      	b.n	8011824 <__d2b+0x60>
 801185c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011860:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011864:	f8c9 0000 	str.w	r0, [r9]
 8011868:	6918      	ldr	r0, [r3, #16]
 801186a:	f7ff fcaf 	bl	80111cc <__hi0bits>
 801186e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011872:	e7df      	b.n	8011834 <__d2b+0x70>
 8011874:	08012dd8 	.word	0x08012dd8
 8011878:	08012e64 	.word	0x08012e64

0801187c <__ratio>:
 801187c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011880:	4688      	mov	r8, r1
 8011882:	4669      	mov	r1, sp
 8011884:	4681      	mov	r9, r0
 8011886:	f7ff ff4d 	bl	8011724 <__b2d>
 801188a:	a901      	add	r1, sp, #4
 801188c:	4640      	mov	r0, r8
 801188e:	ec55 4b10 	vmov	r4, r5, d0
 8011892:	f7ff ff47 	bl	8011724 <__b2d>
 8011896:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801189a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801189e:	eba3 0c02 	sub.w	ip, r3, r2
 80118a2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80118a6:	1a9b      	subs	r3, r3, r2
 80118a8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80118ac:	ec51 0b10 	vmov	r0, r1, d0
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	bfd6      	itet	le
 80118b4:	460a      	movle	r2, r1
 80118b6:	462a      	movgt	r2, r5
 80118b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80118bc:	468b      	mov	fp, r1
 80118be:	462f      	mov	r7, r5
 80118c0:	bfd4      	ite	le
 80118c2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80118c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80118ca:	4620      	mov	r0, r4
 80118cc:	ee10 2a10 	vmov	r2, s0
 80118d0:	465b      	mov	r3, fp
 80118d2:	4639      	mov	r1, r7
 80118d4:	f7ee ff92 	bl	80007fc <__aeabi_ddiv>
 80118d8:	ec41 0b10 	vmov	d0, r0, r1
 80118dc:	b003      	add	sp, #12
 80118de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080118e2 <__copybits>:
 80118e2:	3901      	subs	r1, #1
 80118e4:	b570      	push	{r4, r5, r6, lr}
 80118e6:	1149      	asrs	r1, r1, #5
 80118e8:	6914      	ldr	r4, [r2, #16]
 80118ea:	3101      	adds	r1, #1
 80118ec:	f102 0314 	add.w	r3, r2, #20
 80118f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80118f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80118f8:	1f05      	subs	r5, r0, #4
 80118fa:	42a3      	cmp	r3, r4
 80118fc:	d30c      	bcc.n	8011918 <__copybits+0x36>
 80118fe:	1aa3      	subs	r3, r4, r2
 8011900:	3b11      	subs	r3, #17
 8011902:	f023 0303 	bic.w	r3, r3, #3
 8011906:	3211      	adds	r2, #17
 8011908:	42a2      	cmp	r2, r4
 801190a:	bf88      	it	hi
 801190c:	2300      	movhi	r3, #0
 801190e:	4418      	add	r0, r3
 8011910:	2300      	movs	r3, #0
 8011912:	4288      	cmp	r0, r1
 8011914:	d305      	bcc.n	8011922 <__copybits+0x40>
 8011916:	bd70      	pop	{r4, r5, r6, pc}
 8011918:	f853 6b04 	ldr.w	r6, [r3], #4
 801191c:	f845 6f04 	str.w	r6, [r5, #4]!
 8011920:	e7eb      	b.n	80118fa <__copybits+0x18>
 8011922:	f840 3b04 	str.w	r3, [r0], #4
 8011926:	e7f4      	b.n	8011912 <__copybits+0x30>

08011928 <__any_on>:
 8011928:	f100 0214 	add.w	r2, r0, #20
 801192c:	6900      	ldr	r0, [r0, #16]
 801192e:	114b      	asrs	r3, r1, #5
 8011930:	4298      	cmp	r0, r3
 8011932:	b510      	push	{r4, lr}
 8011934:	db11      	blt.n	801195a <__any_on+0x32>
 8011936:	dd0a      	ble.n	801194e <__any_on+0x26>
 8011938:	f011 011f 	ands.w	r1, r1, #31
 801193c:	d007      	beq.n	801194e <__any_on+0x26>
 801193e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011942:	fa24 f001 	lsr.w	r0, r4, r1
 8011946:	fa00 f101 	lsl.w	r1, r0, r1
 801194a:	428c      	cmp	r4, r1
 801194c:	d10b      	bne.n	8011966 <__any_on+0x3e>
 801194e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011952:	4293      	cmp	r3, r2
 8011954:	d803      	bhi.n	801195e <__any_on+0x36>
 8011956:	2000      	movs	r0, #0
 8011958:	bd10      	pop	{r4, pc}
 801195a:	4603      	mov	r3, r0
 801195c:	e7f7      	b.n	801194e <__any_on+0x26>
 801195e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011962:	2900      	cmp	r1, #0
 8011964:	d0f5      	beq.n	8011952 <__any_on+0x2a>
 8011966:	2001      	movs	r0, #1
 8011968:	e7f6      	b.n	8011958 <__any_on+0x30>

0801196a <_calloc_r>:
 801196a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801196c:	fba1 2402 	umull	r2, r4, r1, r2
 8011970:	b94c      	cbnz	r4, 8011986 <_calloc_r+0x1c>
 8011972:	4611      	mov	r1, r2
 8011974:	9201      	str	r2, [sp, #4]
 8011976:	f000 f87b 	bl	8011a70 <_malloc_r>
 801197a:	9a01      	ldr	r2, [sp, #4]
 801197c:	4605      	mov	r5, r0
 801197e:	b930      	cbnz	r0, 801198e <_calloc_r+0x24>
 8011980:	4628      	mov	r0, r5
 8011982:	b003      	add	sp, #12
 8011984:	bd30      	pop	{r4, r5, pc}
 8011986:	220c      	movs	r2, #12
 8011988:	6002      	str	r2, [r0, #0]
 801198a:	2500      	movs	r5, #0
 801198c:	e7f8      	b.n	8011980 <_calloc_r+0x16>
 801198e:	4621      	mov	r1, r4
 8011990:	f7fc fbc2 	bl	800e118 <memset>
 8011994:	e7f4      	b.n	8011980 <_calloc_r+0x16>
	...

08011998 <_free_r>:
 8011998:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801199a:	2900      	cmp	r1, #0
 801199c:	d044      	beq.n	8011a28 <_free_r+0x90>
 801199e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119a2:	9001      	str	r0, [sp, #4]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	f1a1 0404 	sub.w	r4, r1, #4
 80119aa:	bfb8      	it	lt
 80119ac:	18e4      	addlt	r4, r4, r3
 80119ae:	f000 fab3 	bl	8011f18 <__malloc_lock>
 80119b2:	4a1e      	ldr	r2, [pc, #120]	; (8011a2c <_free_r+0x94>)
 80119b4:	9801      	ldr	r0, [sp, #4]
 80119b6:	6813      	ldr	r3, [r2, #0]
 80119b8:	b933      	cbnz	r3, 80119c8 <_free_r+0x30>
 80119ba:	6063      	str	r3, [r4, #4]
 80119bc:	6014      	str	r4, [r2, #0]
 80119be:	b003      	add	sp, #12
 80119c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80119c4:	f000 baae 	b.w	8011f24 <__malloc_unlock>
 80119c8:	42a3      	cmp	r3, r4
 80119ca:	d908      	bls.n	80119de <_free_r+0x46>
 80119cc:	6825      	ldr	r5, [r4, #0]
 80119ce:	1961      	adds	r1, r4, r5
 80119d0:	428b      	cmp	r3, r1
 80119d2:	bf01      	itttt	eq
 80119d4:	6819      	ldreq	r1, [r3, #0]
 80119d6:	685b      	ldreq	r3, [r3, #4]
 80119d8:	1949      	addeq	r1, r1, r5
 80119da:	6021      	streq	r1, [r4, #0]
 80119dc:	e7ed      	b.n	80119ba <_free_r+0x22>
 80119de:	461a      	mov	r2, r3
 80119e0:	685b      	ldr	r3, [r3, #4]
 80119e2:	b10b      	cbz	r3, 80119e8 <_free_r+0x50>
 80119e4:	42a3      	cmp	r3, r4
 80119e6:	d9fa      	bls.n	80119de <_free_r+0x46>
 80119e8:	6811      	ldr	r1, [r2, #0]
 80119ea:	1855      	adds	r5, r2, r1
 80119ec:	42a5      	cmp	r5, r4
 80119ee:	d10b      	bne.n	8011a08 <_free_r+0x70>
 80119f0:	6824      	ldr	r4, [r4, #0]
 80119f2:	4421      	add	r1, r4
 80119f4:	1854      	adds	r4, r2, r1
 80119f6:	42a3      	cmp	r3, r4
 80119f8:	6011      	str	r1, [r2, #0]
 80119fa:	d1e0      	bne.n	80119be <_free_r+0x26>
 80119fc:	681c      	ldr	r4, [r3, #0]
 80119fe:	685b      	ldr	r3, [r3, #4]
 8011a00:	6053      	str	r3, [r2, #4]
 8011a02:	4421      	add	r1, r4
 8011a04:	6011      	str	r1, [r2, #0]
 8011a06:	e7da      	b.n	80119be <_free_r+0x26>
 8011a08:	d902      	bls.n	8011a10 <_free_r+0x78>
 8011a0a:	230c      	movs	r3, #12
 8011a0c:	6003      	str	r3, [r0, #0]
 8011a0e:	e7d6      	b.n	80119be <_free_r+0x26>
 8011a10:	6825      	ldr	r5, [r4, #0]
 8011a12:	1961      	adds	r1, r4, r5
 8011a14:	428b      	cmp	r3, r1
 8011a16:	bf04      	itt	eq
 8011a18:	6819      	ldreq	r1, [r3, #0]
 8011a1a:	685b      	ldreq	r3, [r3, #4]
 8011a1c:	6063      	str	r3, [r4, #4]
 8011a1e:	bf04      	itt	eq
 8011a20:	1949      	addeq	r1, r1, r5
 8011a22:	6021      	streq	r1, [r4, #0]
 8011a24:	6054      	str	r4, [r2, #4]
 8011a26:	e7ca      	b.n	80119be <_free_r+0x26>
 8011a28:	b003      	add	sp, #12
 8011a2a:	bd30      	pop	{r4, r5, pc}
 8011a2c:	20005748 	.word	0x20005748

08011a30 <sbrk_aligned>:
 8011a30:	b570      	push	{r4, r5, r6, lr}
 8011a32:	4e0e      	ldr	r6, [pc, #56]	; (8011a6c <sbrk_aligned+0x3c>)
 8011a34:	460c      	mov	r4, r1
 8011a36:	6831      	ldr	r1, [r6, #0]
 8011a38:	4605      	mov	r5, r0
 8011a3a:	b911      	cbnz	r1, 8011a42 <sbrk_aligned+0x12>
 8011a3c:	f000 f9f0 	bl	8011e20 <_sbrk_r>
 8011a40:	6030      	str	r0, [r6, #0]
 8011a42:	4621      	mov	r1, r4
 8011a44:	4628      	mov	r0, r5
 8011a46:	f000 f9eb 	bl	8011e20 <_sbrk_r>
 8011a4a:	1c43      	adds	r3, r0, #1
 8011a4c:	d00a      	beq.n	8011a64 <sbrk_aligned+0x34>
 8011a4e:	1cc4      	adds	r4, r0, #3
 8011a50:	f024 0403 	bic.w	r4, r4, #3
 8011a54:	42a0      	cmp	r0, r4
 8011a56:	d007      	beq.n	8011a68 <sbrk_aligned+0x38>
 8011a58:	1a21      	subs	r1, r4, r0
 8011a5a:	4628      	mov	r0, r5
 8011a5c:	f000 f9e0 	bl	8011e20 <_sbrk_r>
 8011a60:	3001      	adds	r0, #1
 8011a62:	d101      	bne.n	8011a68 <sbrk_aligned+0x38>
 8011a64:	f04f 34ff 	mov.w	r4, #4294967295
 8011a68:	4620      	mov	r0, r4
 8011a6a:	bd70      	pop	{r4, r5, r6, pc}
 8011a6c:	2000574c 	.word	0x2000574c

08011a70 <_malloc_r>:
 8011a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a74:	1ccd      	adds	r5, r1, #3
 8011a76:	f025 0503 	bic.w	r5, r5, #3
 8011a7a:	3508      	adds	r5, #8
 8011a7c:	2d0c      	cmp	r5, #12
 8011a7e:	bf38      	it	cc
 8011a80:	250c      	movcc	r5, #12
 8011a82:	2d00      	cmp	r5, #0
 8011a84:	4607      	mov	r7, r0
 8011a86:	db01      	blt.n	8011a8c <_malloc_r+0x1c>
 8011a88:	42a9      	cmp	r1, r5
 8011a8a:	d905      	bls.n	8011a98 <_malloc_r+0x28>
 8011a8c:	230c      	movs	r3, #12
 8011a8e:	603b      	str	r3, [r7, #0]
 8011a90:	2600      	movs	r6, #0
 8011a92:	4630      	mov	r0, r6
 8011a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a98:	4e2e      	ldr	r6, [pc, #184]	; (8011b54 <_malloc_r+0xe4>)
 8011a9a:	f000 fa3d 	bl	8011f18 <__malloc_lock>
 8011a9e:	6833      	ldr	r3, [r6, #0]
 8011aa0:	461c      	mov	r4, r3
 8011aa2:	bb34      	cbnz	r4, 8011af2 <_malloc_r+0x82>
 8011aa4:	4629      	mov	r1, r5
 8011aa6:	4638      	mov	r0, r7
 8011aa8:	f7ff ffc2 	bl	8011a30 <sbrk_aligned>
 8011aac:	1c43      	adds	r3, r0, #1
 8011aae:	4604      	mov	r4, r0
 8011ab0:	d14d      	bne.n	8011b4e <_malloc_r+0xde>
 8011ab2:	6834      	ldr	r4, [r6, #0]
 8011ab4:	4626      	mov	r6, r4
 8011ab6:	2e00      	cmp	r6, #0
 8011ab8:	d140      	bne.n	8011b3c <_malloc_r+0xcc>
 8011aba:	6823      	ldr	r3, [r4, #0]
 8011abc:	4631      	mov	r1, r6
 8011abe:	4638      	mov	r0, r7
 8011ac0:	eb04 0803 	add.w	r8, r4, r3
 8011ac4:	f000 f9ac 	bl	8011e20 <_sbrk_r>
 8011ac8:	4580      	cmp	r8, r0
 8011aca:	d13a      	bne.n	8011b42 <_malloc_r+0xd2>
 8011acc:	6821      	ldr	r1, [r4, #0]
 8011ace:	3503      	adds	r5, #3
 8011ad0:	1a6d      	subs	r5, r5, r1
 8011ad2:	f025 0503 	bic.w	r5, r5, #3
 8011ad6:	3508      	adds	r5, #8
 8011ad8:	2d0c      	cmp	r5, #12
 8011ada:	bf38      	it	cc
 8011adc:	250c      	movcc	r5, #12
 8011ade:	4629      	mov	r1, r5
 8011ae0:	4638      	mov	r0, r7
 8011ae2:	f7ff ffa5 	bl	8011a30 <sbrk_aligned>
 8011ae6:	3001      	adds	r0, #1
 8011ae8:	d02b      	beq.n	8011b42 <_malloc_r+0xd2>
 8011aea:	6823      	ldr	r3, [r4, #0]
 8011aec:	442b      	add	r3, r5
 8011aee:	6023      	str	r3, [r4, #0]
 8011af0:	e00e      	b.n	8011b10 <_malloc_r+0xa0>
 8011af2:	6822      	ldr	r2, [r4, #0]
 8011af4:	1b52      	subs	r2, r2, r5
 8011af6:	d41e      	bmi.n	8011b36 <_malloc_r+0xc6>
 8011af8:	2a0b      	cmp	r2, #11
 8011afa:	d916      	bls.n	8011b2a <_malloc_r+0xba>
 8011afc:	1961      	adds	r1, r4, r5
 8011afe:	42a3      	cmp	r3, r4
 8011b00:	6025      	str	r5, [r4, #0]
 8011b02:	bf18      	it	ne
 8011b04:	6059      	strne	r1, [r3, #4]
 8011b06:	6863      	ldr	r3, [r4, #4]
 8011b08:	bf08      	it	eq
 8011b0a:	6031      	streq	r1, [r6, #0]
 8011b0c:	5162      	str	r2, [r4, r5]
 8011b0e:	604b      	str	r3, [r1, #4]
 8011b10:	4638      	mov	r0, r7
 8011b12:	f104 060b 	add.w	r6, r4, #11
 8011b16:	f000 fa05 	bl	8011f24 <__malloc_unlock>
 8011b1a:	f026 0607 	bic.w	r6, r6, #7
 8011b1e:	1d23      	adds	r3, r4, #4
 8011b20:	1af2      	subs	r2, r6, r3
 8011b22:	d0b6      	beq.n	8011a92 <_malloc_r+0x22>
 8011b24:	1b9b      	subs	r3, r3, r6
 8011b26:	50a3      	str	r3, [r4, r2]
 8011b28:	e7b3      	b.n	8011a92 <_malloc_r+0x22>
 8011b2a:	6862      	ldr	r2, [r4, #4]
 8011b2c:	42a3      	cmp	r3, r4
 8011b2e:	bf0c      	ite	eq
 8011b30:	6032      	streq	r2, [r6, #0]
 8011b32:	605a      	strne	r2, [r3, #4]
 8011b34:	e7ec      	b.n	8011b10 <_malloc_r+0xa0>
 8011b36:	4623      	mov	r3, r4
 8011b38:	6864      	ldr	r4, [r4, #4]
 8011b3a:	e7b2      	b.n	8011aa2 <_malloc_r+0x32>
 8011b3c:	4634      	mov	r4, r6
 8011b3e:	6876      	ldr	r6, [r6, #4]
 8011b40:	e7b9      	b.n	8011ab6 <_malloc_r+0x46>
 8011b42:	230c      	movs	r3, #12
 8011b44:	603b      	str	r3, [r7, #0]
 8011b46:	4638      	mov	r0, r7
 8011b48:	f000 f9ec 	bl	8011f24 <__malloc_unlock>
 8011b4c:	e7a1      	b.n	8011a92 <_malloc_r+0x22>
 8011b4e:	6025      	str	r5, [r4, #0]
 8011b50:	e7de      	b.n	8011b10 <_malloc_r+0xa0>
 8011b52:	bf00      	nop
 8011b54:	20005748 	.word	0x20005748

08011b58 <__ssputs_r>:
 8011b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b5c:	688e      	ldr	r6, [r1, #8]
 8011b5e:	429e      	cmp	r6, r3
 8011b60:	4682      	mov	sl, r0
 8011b62:	460c      	mov	r4, r1
 8011b64:	4690      	mov	r8, r2
 8011b66:	461f      	mov	r7, r3
 8011b68:	d838      	bhi.n	8011bdc <__ssputs_r+0x84>
 8011b6a:	898a      	ldrh	r2, [r1, #12]
 8011b6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011b70:	d032      	beq.n	8011bd8 <__ssputs_r+0x80>
 8011b72:	6825      	ldr	r5, [r4, #0]
 8011b74:	6909      	ldr	r1, [r1, #16]
 8011b76:	eba5 0901 	sub.w	r9, r5, r1
 8011b7a:	6965      	ldr	r5, [r4, #20]
 8011b7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011b80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011b84:	3301      	adds	r3, #1
 8011b86:	444b      	add	r3, r9
 8011b88:	106d      	asrs	r5, r5, #1
 8011b8a:	429d      	cmp	r5, r3
 8011b8c:	bf38      	it	cc
 8011b8e:	461d      	movcc	r5, r3
 8011b90:	0553      	lsls	r3, r2, #21
 8011b92:	d531      	bpl.n	8011bf8 <__ssputs_r+0xa0>
 8011b94:	4629      	mov	r1, r5
 8011b96:	f7ff ff6b 	bl	8011a70 <_malloc_r>
 8011b9a:	4606      	mov	r6, r0
 8011b9c:	b950      	cbnz	r0, 8011bb4 <__ssputs_r+0x5c>
 8011b9e:	230c      	movs	r3, #12
 8011ba0:	f8ca 3000 	str.w	r3, [sl]
 8011ba4:	89a3      	ldrh	r3, [r4, #12]
 8011ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011baa:	81a3      	strh	r3, [r4, #12]
 8011bac:	f04f 30ff 	mov.w	r0, #4294967295
 8011bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bb4:	6921      	ldr	r1, [r4, #16]
 8011bb6:	464a      	mov	r2, r9
 8011bb8:	f7fc faa0 	bl	800e0fc <memcpy>
 8011bbc:	89a3      	ldrh	r3, [r4, #12]
 8011bbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011bc6:	81a3      	strh	r3, [r4, #12]
 8011bc8:	6126      	str	r6, [r4, #16]
 8011bca:	6165      	str	r5, [r4, #20]
 8011bcc:	444e      	add	r6, r9
 8011bce:	eba5 0509 	sub.w	r5, r5, r9
 8011bd2:	6026      	str	r6, [r4, #0]
 8011bd4:	60a5      	str	r5, [r4, #8]
 8011bd6:	463e      	mov	r6, r7
 8011bd8:	42be      	cmp	r6, r7
 8011bda:	d900      	bls.n	8011bde <__ssputs_r+0x86>
 8011bdc:	463e      	mov	r6, r7
 8011bde:	6820      	ldr	r0, [r4, #0]
 8011be0:	4632      	mov	r2, r6
 8011be2:	4641      	mov	r1, r8
 8011be4:	f000 f97e 	bl	8011ee4 <memmove>
 8011be8:	68a3      	ldr	r3, [r4, #8]
 8011bea:	1b9b      	subs	r3, r3, r6
 8011bec:	60a3      	str	r3, [r4, #8]
 8011bee:	6823      	ldr	r3, [r4, #0]
 8011bf0:	4433      	add	r3, r6
 8011bf2:	6023      	str	r3, [r4, #0]
 8011bf4:	2000      	movs	r0, #0
 8011bf6:	e7db      	b.n	8011bb0 <__ssputs_r+0x58>
 8011bf8:	462a      	mov	r2, r5
 8011bfa:	f000 f999 	bl	8011f30 <_realloc_r>
 8011bfe:	4606      	mov	r6, r0
 8011c00:	2800      	cmp	r0, #0
 8011c02:	d1e1      	bne.n	8011bc8 <__ssputs_r+0x70>
 8011c04:	6921      	ldr	r1, [r4, #16]
 8011c06:	4650      	mov	r0, sl
 8011c08:	f7ff fec6 	bl	8011998 <_free_r>
 8011c0c:	e7c7      	b.n	8011b9e <__ssputs_r+0x46>
	...

08011c10 <_svfiprintf_r>:
 8011c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c14:	4698      	mov	r8, r3
 8011c16:	898b      	ldrh	r3, [r1, #12]
 8011c18:	061b      	lsls	r3, r3, #24
 8011c1a:	b09d      	sub	sp, #116	; 0x74
 8011c1c:	4607      	mov	r7, r0
 8011c1e:	460d      	mov	r5, r1
 8011c20:	4614      	mov	r4, r2
 8011c22:	d50e      	bpl.n	8011c42 <_svfiprintf_r+0x32>
 8011c24:	690b      	ldr	r3, [r1, #16]
 8011c26:	b963      	cbnz	r3, 8011c42 <_svfiprintf_r+0x32>
 8011c28:	2140      	movs	r1, #64	; 0x40
 8011c2a:	f7ff ff21 	bl	8011a70 <_malloc_r>
 8011c2e:	6028      	str	r0, [r5, #0]
 8011c30:	6128      	str	r0, [r5, #16]
 8011c32:	b920      	cbnz	r0, 8011c3e <_svfiprintf_r+0x2e>
 8011c34:	230c      	movs	r3, #12
 8011c36:	603b      	str	r3, [r7, #0]
 8011c38:	f04f 30ff 	mov.w	r0, #4294967295
 8011c3c:	e0d1      	b.n	8011de2 <_svfiprintf_r+0x1d2>
 8011c3e:	2340      	movs	r3, #64	; 0x40
 8011c40:	616b      	str	r3, [r5, #20]
 8011c42:	2300      	movs	r3, #0
 8011c44:	9309      	str	r3, [sp, #36]	; 0x24
 8011c46:	2320      	movs	r3, #32
 8011c48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011c4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c50:	2330      	movs	r3, #48	; 0x30
 8011c52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011dfc <_svfiprintf_r+0x1ec>
 8011c56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011c5a:	f04f 0901 	mov.w	r9, #1
 8011c5e:	4623      	mov	r3, r4
 8011c60:	469a      	mov	sl, r3
 8011c62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c66:	b10a      	cbz	r2, 8011c6c <_svfiprintf_r+0x5c>
 8011c68:	2a25      	cmp	r2, #37	; 0x25
 8011c6a:	d1f9      	bne.n	8011c60 <_svfiprintf_r+0x50>
 8011c6c:	ebba 0b04 	subs.w	fp, sl, r4
 8011c70:	d00b      	beq.n	8011c8a <_svfiprintf_r+0x7a>
 8011c72:	465b      	mov	r3, fp
 8011c74:	4622      	mov	r2, r4
 8011c76:	4629      	mov	r1, r5
 8011c78:	4638      	mov	r0, r7
 8011c7a:	f7ff ff6d 	bl	8011b58 <__ssputs_r>
 8011c7e:	3001      	adds	r0, #1
 8011c80:	f000 80aa 	beq.w	8011dd8 <_svfiprintf_r+0x1c8>
 8011c84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c86:	445a      	add	r2, fp
 8011c88:	9209      	str	r2, [sp, #36]	; 0x24
 8011c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	f000 80a2 	beq.w	8011dd8 <_svfiprintf_r+0x1c8>
 8011c94:	2300      	movs	r3, #0
 8011c96:	f04f 32ff 	mov.w	r2, #4294967295
 8011c9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c9e:	f10a 0a01 	add.w	sl, sl, #1
 8011ca2:	9304      	str	r3, [sp, #16]
 8011ca4:	9307      	str	r3, [sp, #28]
 8011ca6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011caa:	931a      	str	r3, [sp, #104]	; 0x68
 8011cac:	4654      	mov	r4, sl
 8011cae:	2205      	movs	r2, #5
 8011cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cb4:	4851      	ldr	r0, [pc, #324]	; (8011dfc <_svfiprintf_r+0x1ec>)
 8011cb6:	f7ee fa6b 	bl	8000190 <memchr>
 8011cba:	9a04      	ldr	r2, [sp, #16]
 8011cbc:	b9d8      	cbnz	r0, 8011cf6 <_svfiprintf_r+0xe6>
 8011cbe:	06d0      	lsls	r0, r2, #27
 8011cc0:	bf44      	itt	mi
 8011cc2:	2320      	movmi	r3, #32
 8011cc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011cc8:	0711      	lsls	r1, r2, #28
 8011cca:	bf44      	itt	mi
 8011ccc:	232b      	movmi	r3, #43	; 0x2b
 8011cce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8011cd6:	2b2a      	cmp	r3, #42	; 0x2a
 8011cd8:	d015      	beq.n	8011d06 <_svfiprintf_r+0xf6>
 8011cda:	9a07      	ldr	r2, [sp, #28]
 8011cdc:	4654      	mov	r4, sl
 8011cde:	2000      	movs	r0, #0
 8011ce0:	f04f 0c0a 	mov.w	ip, #10
 8011ce4:	4621      	mov	r1, r4
 8011ce6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011cea:	3b30      	subs	r3, #48	; 0x30
 8011cec:	2b09      	cmp	r3, #9
 8011cee:	d94e      	bls.n	8011d8e <_svfiprintf_r+0x17e>
 8011cf0:	b1b0      	cbz	r0, 8011d20 <_svfiprintf_r+0x110>
 8011cf2:	9207      	str	r2, [sp, #28]
 8011cf4:	e014      	b.n	8011d20 <_svfiprintf_r+0x110>
 8011cf6:	eba0 0308 	sub.w	r3, r0, r8
 8011cfa:	fa09 f303 	lsl.w	r3, r9, r3
 8011cfe:	4313      	orrs	r3, r2
 8011d00:	9304      	str	r3, [sp, #16]
 8011d02:	46a2      	mov	sl, r4
 8011d04:	e7d2      	b.n	8011cac <_svfiprintf_r+0x9c>
 8011d06:	9b03      	ldr	r3, [sp, #12]
 8011d08:	1d19      	adds	r1, r3, #4
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	9103      	str	r1, [sp, #12]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	bfbb      	ittet	lt
 8011d12:	425b      	neglt	r3, r3
 8011d14:	f042 0202 	orrlt.w	r2, r2, #2
 8011d18:	9307      	strge	r3, [sp, #28]
 8011d1a:	9307      	strlt	r3, [sp, #28]
 8011d1c:	bfb8      	it	lt
 8011d1e:	9204      	strlt	r2, [sp, #16]
 8011d20:	7823      	ldrb	r3, [r4, #0]
 8011d22:	2b2e      	cmp	r3, #46	; 0x2e
 8011d24:	d10c      	bne.n	8011d40 <_svfiprintf_r+0x130>
 8011d26:	7863      	ldrb	r3, [r4, #1]
 8011d28:	2b2a      	cmp	r3, #42	; 0x2a
 8011d2a:	d135      	bne.n	8011d98 <_svfiprintf_r+0x188>
 8011d2c:	9b03      	ldr	r3, [sp, #12]
 8011d2e:	1d1a      	adds	r2, r3, #4
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	9203      	str	r2, [sp, #12]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	bfb8      	it	lt
 8011d38:	f04f 33ff 	movlt.w	r3, #4294967295
 8011d3c:	3402      	adds	r4, #2
 8011d3e:	9305      	str	r3, [sp, #20]
 8011d40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011e0c <_svfiprintf_r+0x1fc>
 8011d44:	7821      	ldrb	r1, [r4, #0]
 8011d46:	2203      	movs	r2, #3
 8011d48:	4650      	mov	r0, sl
 8011d4a:	f7ee fa21 	bl	8000190 <memchr>
 8011d4e:	b140      	cbz	r0, 8011d62 <_svfiprintf_r+0x152>
 8011d50:	2340      	movs	r3, #64	; 0x40
 8011d52:	eba0 000a 	sub.w	r0, r0, sl
 8011d56:	fa03 f000 	lsl.w	r0, r3, r0
 8011d5a:	9b04      	ldr	r3, [sp, #16]
 8011d5c:	4303      	orrs	r3, r0
 8011d5e:	3401      	adds	r4, #1
 8011d60:	9304      	str	r3, [sp, #16]
 8011d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d66:	4826      	ldr	r0, [pc, #152]	; (8011e00 <_svfiprintf_r+0x1f0>)
 8011d68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011d6c:	2206      	movs	r2, #6
 8011d6e:	f7ee fa0f 	bl	8000190 <memchr>
 8011d72:	2800      	cmp	r0, #0
 8011d74:	d038      	beq.n	8011de8 <_svfiprintf_r+0x1d8>
 8011d76:	4b23      	ldr	r3, [pc, #140]	; (8011e04 <_svfiprintf_r+0x1f4>)
 8011d78:	bb1b      	cbnz	r3, 8011dc2 <_svfiprintf_r+0x1b2>
 8011d7a:	9b03      	ldr	r3, [sp, #12]
 8011d7c:	3307      	adds	r3, #7
 8011d7e:	f023 0307 	bic.w	r3, r3, #7
 8011d82:	3308      	adds	r3, #8
 8011d84:	9303      	str	r3, [sp, #12]
 8011d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d88:	4433      	add	r3, r6
 8011d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8011d8c:	e767      	b.n	8011c5e <_svfiprintf_r+0x4e>
 8011d8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011d92:	460c      	mov	r4, r1
 8011d94:	2001      	movs	r0, #1
 8011d96:	e7a5      	b.n	8011ce4 <_svfiprintf_r+0xd4>
 8011d98:	2300      	movs	r3, #0
 8011d9a:	3401      	adds	r4, #1
 8011d9c:	9305      	str	r3, [sp, #20]
 8011d9e:	4619      	mov	r1, r3
 8011da0:	f04f 0c0a 	mov.w	ip, #10
 8011da4:	4620      	mov	r0, r4
 8011da6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011daa:	3a30      	subs	r2, #48	; 0x30
 8011dac:	2a09      	cmp	r2, #9
 8011dae:	d903      	bls.n	8011db8 <_svfiprintf_r+0x1a8>
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d0c5      	beq.n	8011d40 <_svfiprintf_r+0x130>
 8011db4:	9105      	str	r1, [sp, #20]
 8011db6:	e7c3      	b.n	8011d40 <_svfiprintf_r+0x130>
 8011db8:	fb0c 2101 	mla	r1, ip, r1, r2
 8011dbc:	4604      	mov	r4, r0
 8011dbe:	2301      	movs	r3, #1
 8011dc0:	e7f0      	b.n	8011da4 <_svfiprintf_r+0x194>
 8011dc2:	ab03      	add	r3, sp, #12
 8011dc4:	9300      	str	r3, [sp, #0]
 8011dc6:	462a      	mov	r2, r5
 8011dc8:	4b0f      	ldr	r3, [pc, #60]	; (8011e08 <_svfiprintf_r+0x1f8>)
 8011dca:	a904      	add	r1, sp, #16
 8011dcc:	4638      	mov	r0, r7
 8011dce:	f7fc fa4b 	bl	800e268 <_printf_float>
 8011dd2:	1c42      	adds	r2, r0, #1
 8011dd4:	4606      	mov	r6, r0
 8011dd6:	d1d6      	bne.n	8011d86 <_svfiprintf_r+0x176>
 8011dd8:	89ab      	ldrh	r3, [r5, #12]
 8011dda:	065b      	lsls	r3, r3, #25
 8011ddc:	f53f af2c 	bmi.w	8011c38 <_svfiprintf_r+0x28>
 8011de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011de2:	b01d      	add	sp, #116	; 0x74
 8011de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011de8:	ab03      	add	r3, sp, #12
 8011dea:	9300      	str	r3, [sp, #0]
 8011dec:	462a      	mov	r2, r5
 8011dee:	4b06      	ldr	r3, [pc, #24]	; (8011e08 <_svfiprintf_r+0x1f8>)
 8011df0:	a904      	add	r1, sp, #16
 8011df2:	4638      	mov	r0, r7
 8011df4:	f7fc fcdc 	bl	800e7b0 <_printf_i>
 8011df8:	e7eb      	b.n	8011dd2 <_svfiprintf_r+0x1c2>
 8011dfa:	bf00      	nop
 8011dfc:	08012fbc 	.word	0x08012fbc
 8011e00:	08012fc6 	.word	0x08012fc6
 8011e04:	0800e269 	.word	0x0800e269
 8011e08:	08011b59 	.word	0x08011b59
 8011e0c:	08012fc2 	.word	0x08012fc2

08011e10 <nan>:
 8011e10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011e18 <nan+0x8>
 8011e14:	4770      	bx	lr
 8011e16:	bf00      	nop
 8011e18:	00000000 	.word	0x00000000
 8011e1c:	7ff80000 	.word	0x7ff80000

08011e20 <_sbrk_r>:
 8011e20:	b538      	push	{r3, r4, r5, lr}
 8011e22:	4d06      	ldr	r5, [pc, #24]	; (8011e3c <_sbrk_r+0x1c>)
 8011e24:	2300      	movs	r3, #0
 8011e26:	4604      	mov	r4, r0
 8011e28:	4608      	mov	r0, r1
 8011e2a:	602b      	str	r3, [r5, #0]
 8011e2c:	f7f2 fe82 	bl	8004b34 <_sbrk>
 8011e30:	1c43      	adds	r3, r0, #1
 8011e32:	d102      	bne.n	8011e3a <_sbrk_r+0x1a>
 8011e34:	682b      	ldr	r3, [r5, #0]
 8011e36:	b103      	cbz	r3, 8011e3a <_sbrk_r+0x1a>
 8011e38:	6023      	str	r3, [r4, #0]
 8011e3a:	bd38      	pop	{r3, r4, r5, pc}
 8011e3c:	20005750 	.word	0x20005750

08011e40 <strncmp>:
 8011e40:	b510      	push	{r4, lr}
 8011e42:	b17a      	cbz	r2, 8011e64 <strncmp+0x24>
 8011e44:	4603      	mov	r3, r0
 8011e46:	3901      	subs	r1, #1
 8011e48:	1884      	adds	r4, r0, r2
 8011e4a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011e4e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011e52:	4290      	cmp	r0, r2
 8011e54:	d101      	bne.n	8011e5a <strncmp+0x1a>
 8011e56:	42a3      	cmp	r3, r4
 8011e58:	d101      	bne.n	8011e5e <strncmp+0x1e>
 8011e5a:	1a80      	subs	r0, r0, r2
 8011e5c:	bd10      	pop	{r4, pc}
 8011e5e:	2800      	cmp	r0, #0
 8011e60:	d1f3      	bne.n	8011e4a <strncmp+0xa>
 8011e62:	e7fa      	b.n	8011e5a <strncmp+0x1a>
 8011e64:	4610      	mov	r0, r2
 8011e66:	e7f9      	b.n	8011e5c <strncmp+0x1c>

08011e68 <__ascii_wctomb>:
 8011e68:	b149      	cbz	r1, 8011e7e <__ascii_wctomb+0x16>
 8011e6a:	2aff      	cmp	r2, #255	; 0xff
 8011e6c:	bf85      	ittet	hi
 8011e6e:	238a      	movhi	r3, #138	; 0x8a
 8011e70:	6003      	strhi	r3, [r0, #0]
 8011e72:	700a      	strbls	r2, [r1, #0]
 8011e74:	f04f 30ff 	movhi.w	r0, #4294967295
 8011e78:	bf98      	it	ls
 8011e7a:	2001      	movls	r0, #1
 8011e7c:	4770      	bx	lr
 8011e7e:	4608      	mov	r0, r1
 8011e80:	4770      	bx	lr
	...

08011e84 <__assert_func>:
 8011e84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011e86:	4614      	mov	r4, r2
 8011e88:	461a      	mov	r2, r3
 8011e8a:	4b09      	ldr	r3, [pc, #36]	; (8011eb0 <__assert_func+0x2c>)
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	4605      	mov	r5, r0
 8011e90:	68d8      	ldr	r0, [r3, #12]
 8011e92:	b14c      	cbz	r4, 8011ea8 <__assert_func+0x24>
 8011e94:	4b07      	ldr	r3, [pc, #28]	; (8011eb4 <__assert_func+0x30>)
 8011e96:	9100      	str	r1, [sp, #0]
 8011e98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011e9c:	4906      	ldr	r1, [pc, #24]	; (8011eb8 <__assert_func+0x34>)
 8011e9e:	462b      	mov	r3, r5
 8011ea0:	f000 f80e 	bl	8011ec0 <fiprintf>
 8011ea4:	f000 fa8c 	bl	80123c0 <abort>
 8011ea8:	4b04      	ldr	r3, [pc, #16]	; (8011ebc <__assert_func+0x38>)
 8011eaa:	461c      	mov	r4, r3
 8011eac:	e7f3      	b.n	8011e96 <__assert_func+0x12>
 8011eae:	bf00      	nop
 8011eb0:	20000110 	.word	0x20000110
 8011eb4:	08012fcd 	.word	0x08012fcd
 8011eb8:	08012fda 	.word	0x08012fda
 8011ebc:	08013008 	.word	0x08013008

08011ec0 <fiprintf>:
 8011ec0:	b40e      	push	{r1, r2, r3}
 8011ec2:	b503      	push	{r0, r1, lr}
 8011ec4:	4601      	mov	r1, r0
 8011ec6:	ab03      	add	r3, sp, #12
 8011ec8:	4805      	ldr	r0, [pc, #20]	; (8011ee0 <fiprintf+0x20>)
 8011eca:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ece:	6800      	ldr	r0, [r0, #0]
 8011ed0:	9301      	str	r3, [sp, #4]
 8011ed2:	f000 f885 	bl	8011fe0 <_vfiprintf_r>
 8011ed6:	b002      	add	sp, #8
 8011ed8:	f85d eb04 	ldr.w	lr, [sp], #4
 8011edc:	b003      	add	sp, #12
 8011ede:	4770      	bx	lr
 8011ee0:	20000110 	.word	0x20000110

08011ee4 <memmove>:
 8011ee4:	4288      	cmp	r0, r1
 8011ee6:	b510      	push	{r4, lr}
 8011ee8:	eb01 0402 	add.w	r4, r1, r2
 8011eec:	d902      	bls.n	8011ef4 <memmove+0x10>
 8011eee:	4284      	cmp	r4, r0
 8011ef0:	4623      	mov	r3, r4
 8011ef2:	d807      	bhi.n	8011f04 <memmove+0x20>
 8011ef4:	1e43      	subs	r3, r0, #1
 8011ef6:	42a1      	cmp	r1, r4
 8011ef8:	d008      	beq.n	8011f0c <memmove+0x28>
 8011efa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011efe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011f02:	e7f8      	b.n	8011ef6 <memmove+0x12>
 8011f04:	4402      	add	r2, r0
 8011f06:	4601      	mov	r1, r0
 8011f08:	428a      	cmp	r2, r1
 8011f0a:	d100      	bne.n	8011f0e <memmove+0x2a>
 8011f0c:	bd10      	pop	{r4, pc}
 8011f0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011f12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011f16:	e7f7      	b.n	8011f08 <memmove+0x24>

08011f18 <__malloc_lock>:
 8011f18:	4801      	ldr	r0, [pc, #4]	; (8011f20 <__malloc_lock+0x8>)
 8011f1a:	f000 bc11 	b.w	8012740 <__retarget_lock_acquire_recursive>
 8011f1e:	bf00      	nop
 8011f20:	20005754 	.word	0x20005754

08011f24 <__malloc_unlock>:
 8011f24:	4801      	ldr	r0, [pc, #4]	; (8011f2c <__malloc_unlock+0x8>)
 8011f26:	f000 bc0c 	b.w	8012742 <__retarget_lock_release_recursive>
 8011f2a:	bf00      	nop
 8011f2c:	20005754 	.word	0x20005754

08011f30 <_realloc_r>:
 8011f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f34:	4680      	mov	r8, r0
 8011f36:	4614      	mov	r4, r2
 8011f38:	460e      	mov	r6, r1
 8011f3a:	b921      	cbnz	r1, 8011f46 <_realloc_r+0x16>
 8011f3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f40:	4611      	mov	r1, r2
 8011f42:	f7ff bd95 	b.w	8011a70 <_malloc_r>
 8011f46:	b92a      	cbnz	r2, 8011f54 <_realloc_r+0x24>
 8011f48:	f7ff fd26 	bl	8011998 <_free_r>
 8011f4c:	4625      	mov	r5, r4
 8011f4e:	4628      	mov	r0, r5
 8011f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f54:	f000 fc5c 	bl	8012810 <_malloc_usable_size_r>
 8011f58:	4284      	cmp	r4, r0
 8011f5a:	4607      	mov	r7, r0
 8011f5c:	d802      	bhi.n	8011f64 <_realloc_r+0x34>
 8011f5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011f62:	d812      	bhi.n	8011f8a <_realloc_r+0x5a>
 8011f64:	4621      	mov	r1, r4
 8011f66:	4640      	mov	r0, r8
 8011f68:	f7ff fd82 	bl	8011a70 <_malloc_r>
 8011f6c:	4605      	mov	r5, r0
 8011f6e:	2800      	cmp	r0, #0
 8011f70:	d0ed      	beq.n	8011f4e <_realloc_r+0x1e>
 8011f72:	42bc      	cmp	r4, r7
 8011f74:	4622      	mov	r2, r4
 8011f76:	4631      	mov	r1, r6
 8011f78:	bf28      	it	cs
 8011f7a:	463a      	movcs	r2, r7
 8011f7c:	f7fc f8be 	bl	800e0fc <memcpy>
 8011f80:	4631      	mov	r1, r6
 8011f82:	4640      	mov	r0, r8
 8011f84:	f7ff fd08 	bl	8011998 <_free_r>
 8011f88:	e7e1      	b.n	8011f4e <_realloc_r+0x1e>
 8011f8a:	4635      	mov	r5, r6
 8011f8c:	e7df      	b.n	8011f4e <_realloc_r+0x1e>

08011f8e <__sfputc_r>:
 8011f8e:	6893      	ldr	r3, [r2, #8]
 8011f90:	3b01      	subs	r3, #1
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	b410      	push	{r4}
 8011f96:	6093      	str	r3, [r2, #8]
 8011f98:	da08      	bge.n	8011fac <__sfputc_r+0x1e>
 8011f9a:	6994      	ldr	r4, [r2, #24]
 8011f9c:	42a3      	cmp	r3, r4
 8011f9e:	db01      	blt.n	8011fa4 <__sfputc_r+0x16>
 8011fa0:	290a      	cmp	r1, #10
 8011fa2:	d103      	bne.n	8011fac <__sfputc_r+0x1e>
 8011fa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011fa8:	f000 b94a 	b.w	8012240 <__swbuf_r>
 8011fac:	6813      	ldr	r3, [r2, #0]
 8011fae:	1c58      	adds	r0, r3, #1
 8011fb0:	6010      	str	r0, [r2, #0]
 8011fb2:	7019      	strb	r1, [r3, #0]
 8011fb4:	4608      	mov	r0, r1
 8011fb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011fba:	4770      	bx	lr

08011fbc <__sfputs_r>:
 8011fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fbe:	4606      	mov	r6, r0
 8011fc0:	460f      	mov	r7, r1
 8011fc2:	4614      	mov	r4, r2
 8011fc4:	18d5      	adds	r5, r2, r3
 8011fc6:	42ac      	cmp	r4, r5
 8011fc8:	d101      	bne.n	8011fce <__sfputs_r+0x12>
 8011fca:	2000      	movs	r0, #0
 8011fcc:	e007      	b.n	8011fde <__sfputs_r+0x22>
 8011fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fd2:	463a      	mov	r2, r7
 8011fd4:	4630      	mov	r0, r6
 8011fd6:	f7ff ffda 	bl	8011f8e <__sfputc_r>
 8011fda:	1c43      	adds	r3, r0, #1
 8011fdc:	d1f3      	bne.n	8011fc6 <__sfputs_r+0xa>
 8011fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011fe0 <_vfiprintf_r>:
 8011fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fe4:	460d      	mov	r5, r1
 8011fe6:	b09d      	sub	sp, #116	; 0x74
 8011fe8:	4614      	mov	r4, r2
 8011fea:	4698      	mov	r8, r3
 8011fec:	4606      	mov	r6, r0
 8011fee:	b118      	cbz	r0, 8011ff8 <_vfiprintf_r+0x18>
 8011ff0:	6983      	ldr	r3, [r0, #24]
 8011ff2:	b90b      	cbnz	r3, 8011ff8 <_vfiprintf_r+0x18>
 8011ff4:	f000 fb06 	bl	8012604 <__sinit>
 8011ff8:	4b89      	ldr	r3, [pc, #548]	; (8012220 <_vfiprintf_r+0x240>)
 8011ffa:	429d      	cmp	r5, r3
 8011ffc:	d11b      	bne.n	8012036 <_vfiprintf_r+0x56>
 8011ffe:	6875      	ldr	r5, [r6, #4]
 8012000:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012002:	07d9      	lsls	r1, r3, #31
 8012004:	d405      	bmi.n	8012012 <_vfiprintf_r+0x32>
 8012006:	89ab      	ldrh	r3, [r5, #12]
 8012008:	059a      	lsls	r2, r3, #22
 801200a:	d402      	bmi.n	8012012 <_vfiprintf_r+0x32>
 801200c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801200e:	f000 fb97 	bl	8012740 <__retarget_lock_acquire_recursive>
 8012012:	89ab      	ldrh	r3, [r5, #12]
 8012014:	071b      	lsls	r3, r3, #28
 8012016:	d501      	bpl.n	801201c <_vfiprintf_r+0x3c>
 8012018:	692b      	ldr	r3, [r5, #16]
 801201a:	b9eb      	cbnz	r3, 8012058 <_vfiprintf_r+0x78>
 801201c:	4629      	mov	r1, r5
 801201e:	4630      	mov	r0, r6
 8012020:	f000 f960 	bl	80122e4 <__swsetup_r>
 8012024:	b1c0      	cbz	r0, 8012058 <_vfiprintf_r+0x78>
 8012026:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012028:	07dc      	lsls	r4, r3, #31
 801202a:	d50e      	bpl.n	801204a <_vfiprintf_r+0x6a>
 801202c:	f04f 30ff 	mov.w	r0, #4294967295
 8012030:	b01d      	add	sp, #116	; 0x74
 8012032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012036:	4b7b      	ldr	r3, [pc, #492]	; (8012224 <_vfiprintf_r+0x244>)
 8012038:	429d      	cmp	r5, r3
 801203a:	d101      	bne.n	8012040 <_vfiprintf_r+0x60>
 801203c:	68b5      	ldr	r5, [r6, #8]
 801203e:	e7df      	b.n	8012000 <_vfiprintf_r+0x20>
 8012040:	4b79      	ldr	r3, [pc, #484]	; (8012228 <_vfiprintf_r+0x248>)
 8012042:	429d      	cmp	r5, r3
 8012044:	bf08      	it	eq
 8012046:	68f5      	ldreq	r5, [r6, #12]
 8012048:	e7da      	b.n	8012000 <_vfiprintf_r+0x20>
 801204a:	89ab      	ldrh	r3, [r5, #12]
 801204c:	0598      	lsls	r0, r3, #22
 801204e:	d4ed      	bmi.n	801202c <_vfiprintf_r+0x4c>
 8012050:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012052:	f000 fb76 	bl	8012742 <__retarget_lock_release_recursive>
 8012056:	e7e9      	b.n	801202c <_vfiprintf_r+0x4c>
 8012058:	2300      	movs	r3, #0
 801205a:	9309      	str	r3, [sp, #36]	; 0x24
 801205c:	2320      	movs	r3, #32
 801205e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012062:	f8cd 800c 	str.w	r8, [sp, #12]
 8012066:	2330      	movs	r3, #48	; 0x30
 8012068:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801222c <_vfiprintf_r+0x24c>
 801206c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012070:	f04f 0901 	mov.w	r9, #1
 8012074:	4623      	mov	r3, r4
 8012076:	469a      	mov	sl, r3
 8012078:	f813 2b01 	ldrb.w	r2, [r3], #1
 801207c:	b10a      	cbz	r2, 8012082 <_vfiprintf_r+0xa2>
 801207e:	2a25      	cmp	r2, #37	; 0x25
 8012080:	d1f9      	bne.n	8012076 <_vfiprintf_r+0x96>
 8012082:	ebba 0b04 	subs.w	fp, sl, r4
 8012086:	d00b      	beq.n	80120a0 <_vfiprintf_r+0xc0>
 8012088:	465b      	mov	r3, fp
 801208a:	4622      	mov	r2, r4
 801208c:	4629      	mov	r1, r5
 801208e:	4630      	mov	r0, r6
 8012090:	f7ff ff94 	bl	8011fbc <__sfputs_r>
 8012094:	3001      	adds	r0, #1
 8012096:	f000 80aa 	beq.w	80121ee <_vfiprintf_r+0x20e>
 801209a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801209c:	445a      	add	r2, fp
 801209e:	9209      	str	r2, [sp, #36]	; 0x24
 80120a0:	f89a 3000 	ldrb.w	r3, [sl]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	f000 80a2 	beq.w	80121ee <_vfiprintf_r+0x20e>
 80120aa:	2300      	movs	r3, #0
 80120ac:	f04f 32ff 	mov.w	r2, #4294967295
 80120b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80120b4:	f10a 0a01 	add.w	sl, sl, #1
 80120b8:	9304      	str	r3, [sp, #16]
 80120ba:	9307      	str	r3, [sp, #28]
 80120bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80120c0:	931a      	str	r3, [sp, #104]	; 0x68
 80120c2:	4654      	mov	r4, sl
 80120c4:	2205      	movs	r2, #5
 80120c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120ca:	4858      	ldr	r0, [pc, #352]	; (801222c <_vfiprintf_r+0x24c>)
 80120cc:	f7ee f860 	bl	8000190 <memchr>
 80120d0:	9a04      	ldr	r2, [sp, #16]
 80120d2:	b9d8      	cbnz	r0, 801210c <_vfiprintf_r+0x12c>
 80120d4:	06d1      	lsls	r1, r2, #27
 80120d6:	bf44      	itt	mi
 80120d8:	2320      	movmi	r3, #32
 80120da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80120de:	0713      	lsls	r3, r2, #28
 80120e0:	bf44      	itt	mi
 80120e2:	232b      	movmi	r3, #43	; 0x2b
 80120e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80120e8:	f89a 3000 	ldrb.w	r3, [sl]
 80120ec:	2b2a      	cmp	r3, #42	; 0x2a
 80120ee:	d015      	beq.n	801211c <_vfiprintf_r+0x13c>
 80120f0:	9a07      	ldr	r2, [sp, #28]
 80120f2:	4654      	mov	r4, sl
 80120f4:	2000      	movs	r0, #0
 80120f6:	f04f 0c0a 	mov.w	ip, #10
 80120fa:	4621      	mov	r1, r4
 80120fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012100:	3b30      	subs	r3, #48	; 0x30
 8012102:	2b09      	cmp	r3, #9
 8012104:	d94e      	bls.n	80121a4 <_vfiprintf_r+0x1c4>
 8012106:	b1b0      	cbz	r0, 8012136 <_vfiprintf_r+0x156>
 8012108:	9207      	str	r2, [sp, #28]
 801210a:	e014      	b.n	8012136 <_vfiprintf_r+0x156>
 801210c:	eba0 0308 	sub.w	r3, r0, r8
 8012110:	fa09 f303 	lsl.w	r3, r9, r3
 8012114:	4313      	orrs	r3, r2
 8012116:	9304      	str	r3, [sp, #16]
 8012118:	46a2      	mov	sl, r4
 801211a:	e7d2      	b.n	80120c2 <_vfiprintf_r+0xe2>
 801211c:	9b03      	ldr	r3, [sp, #12]
 801211e:	1d19      	adds	r1, r3, #4
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	9103      	str	r1, [sp, #12]
 8012124:	2b00      	cmp	r3, #0
 8012126:	bfbb      	ittet	lt
 8012128:	425b      	neglt	r3, r3
 801212a:	f042 0202 	orrlt.w	r2, r2, #2
 801212e:	9307      	strge	r3, [sp, #28]
 8012130:	9307      	strlt	r3, [sp, #28]
 8012132:	bfb8      	it	lt
 8012134:	9204      	strlt	r2, [sp, #16]
 8012136:	7823      	ldrb	r3, [r4, #0]
 8012138:	2b2e      	cmp	r3, #46	; 0x2e
 801213a:	d10c      	bne.n	8012156 <_vfiprintf_r+0x176>
 801213c:	7863      	ldrb	r3, [r4, #1]
 801213e:	2b2a      	cmp	r3, #42	; 0x2a
 8012140:	d135      	bne.n	80121ae <_vfiprintf_r+0x1ce>
 8012142:	9b03      	ldr	r3, [sp, #12]
 8012144:	1d1a      	adds	r2, r3, #4
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	9203      	str	r2, [sp, #12]
 801214a:	2b00      	cmp	r3, #0
 801214c:	bfb8      	it	lt
 801214e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012152:	3402      	adds	r4, #2
 8012154:	9305      	str	r3, [sp, #20]
 8012156:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801223c <_vfiprintf_r+0x25c>
 801215a:	7821      	ldrb	r1, [r4, #0]
 801215c:	2203      	movs	r2, #3
 801215e:	4650      	mov	r0, sl
 8012160:	f7ee f816 	bl	8000190 <memchr>
 8012164:	b140      	cbz	r0, 8012178 <_vfiprintf_r+0x198>
 8012166:	2340      	movs	r3, #64	; 0x40
 8012168:	eba0 000a 	sub.w	r0, r0, sl
 801216c:	fa03 f000 	lsl.w	r0, r3, r0
 8012170:	9b04      	ldr	r3, [sp, #16]
 8012172:	4303      	orrs	r3, r0
 8012174:	3401      	adds	r4, #1
 8012176:	9304      	str	r3, [sp, #16]
 8012178:	f814 1b01 	ldrb.w	r1, [r4], #1
 801217c:	482c      	ldr	r0, [pc, #176]	; (8012230 <_vfiprintf_r+0x250>)
 801217e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012182:	2206      	movs	r2, #6
 8012184:	f7ee f804 	bl	8000190 <memchr>
 8012188:	2800      	cmp	r0, #0
 801218a:	d03f      	beq.n	801220c <_vfiprintf_r+0x22c>
 801218c:	4b29      	ldr	r3, [pc, #164]	; (8012234 <_vfiprintf_r+0x254>)
 801218e:	bb1b      	cbnz	r3, 80121d8 <_vfiprintf_r+0x1f8>
 8012190:	9b03      	ldr	r3, [sp, #12]
 8012192:	3307      	adds	r3, #7
 8012194:	f023 0307 	bic.w	r3, r3, #7
 8012198:	3308      	adds	r3, #8
 801219a:	9303      	str	r3, [sp, #12]
 801219c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801219e:	443b      	add	r3, r7
 80121a0:	9309      	str	r3, [sp, #36]	; 0x24
 80121a2:	e767      	b.n	8012074 <_vfiprintf_r+0x94>
 80121a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80121a8:	460c      	mov	r4, r1
 80121aa:	2001      	movs	r0, #1
 80121ac:	e7a5      	b.n	80120fa <_vfiprintf_r+0x11a>
 80121ae:	2300      	movs	r3, #0
 80121b0:	3401      	adds	r4, #1
 80121b2:	9305      	str	r3, [sp, #20]
 80121b4:	4619      	mov	r1, r3
 80121b6:	f04f 0c0a 	mov.w	ip, #10
 80121ba:	4620      	mov	r0, r4
 80121bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80121c0:	3a30      	subs	r2, #48	; 0x30
 80121c2:	2a09      	cmp	r2, #9
 80121c4:	d903      	bls.n	80121ce <_vfiprintf_r+0x1ee>
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d0c5      	beq.n	8012156 <_vfiprintf_r+0x176>
 80121ca:	9105      	str	r1, [sp, #20]
 80121cc:	e7c3      	b.n	8012156 <_vfiprintf_r+0x176>
 80121ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80121d2:	4604      	mov	r4, r0
 80121d4:	2301      	movs	r3, #1
 80121d6:	e7f0      	b.n	80121ba <_vfiprintf_r+0x1da>
 80121d8:	ab03      	add	r3, sp, #12
 80121da:	9300      	str	r3, [sp, #0]
 80121dc:	462a      	mov	r2, r5
 80121de:	4b16      	ldr	r3, [pc, #88]	; (8012238 <_vfiprintf_r+0x258>)
 80121e0:	a904      	add	r1, sp, #16
 80121e2:	4630      	mov	r0, r6
 80121e4:	f7fc f840 	bl	800e268 <_printf_float>
 80121e8:	4607      	mov	r7, r0
 80121ea:	1c78      	adds	r0, r7, #1
 80121ec:	d1d6      	bne.n	801219c <_vfiprintf_r+0x1bc>
 80121ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80121f0:	07d9      	lsls	r1, r3, #31
 80121f2:	d405      	bmi.n	8012200 <_vfiprintf_r+0x220>
 80121f4:	89ab      	ldrh	r3, [r5, #12]
 80121f6:	059a      	lsls	r2, r3, #22
 80121f8:	d402      	bmi.n	8012200 <_vfiprintf_r+0x220>
 80121fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80121fc:	f000 faa1 	bl	8012742 <__retarget_lock_release_recursive>
 8012200:	89ab      	ldrh	r3, [r5, #12]
 8012202:	065b      	lsls	r3, r3, #25
 8012204:	f53f af12 	bmi.w	801202c <_vfiprintf_r+0x4c>
 8012208:	9809      	ldr	r0, [sp, #36]	; 0x24
 801220a:	e711      	b.n	8012030 <_vfiprintf_r+0x50>
 801220c:	ab03      	add	r3, sp, #12
 801220e:	9300      	str	r3, [sp, #0]
 8012210:	462a      	mov	r2, r5
 8012212:	4b09      	ldr	r3, [pc, #36]	; (8012238 <_vfiprintf_r+0x258>)
 8012214:	a904      	add	r1, sp, #16
 8012216:	4630      	mov	r0, r6
 8012218:	f7fc faca 	bl	800e7b0 <_printf_i>
 801221c:	e7e4      	b.n	80121e8 <_vfiprintf_r+0x208>
 801221e:	bf00      	nop
 8012220:	0801302c 	.word	0x0801302c
 8012224:	0801304c 	.word	0x0801304c
 8012228:	0801300c 	.word	0x0801300c
 801222c:	08012fbc 	.word	0x08012fbc
 8012230:	08012fc6 	.word	0x08012fc6
 8012234:	0800e269 	.word	0x0800e269
 8012238:	08011fbd 	.word	0x08011fbd
 801223c:	08012fc2 	.word	0x08012fc2

08012240 <__swbuf_r>:
 8012240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012242:	460e      	mov	r6, r1
 8012244:	4614      	mov	r4, r2
 8012246:	4605      	mov	r5, r0
 8012248:	b118      	cbz	r0, 8012252 <__swbuf_r+0x12>
 801224a:	6983      	ldr	r3, [r0, #24]
 801224c:	b90b      	cbnz	r3, 8012252 <__swbuf_r+0x12>
 801224e:	f000 f9d9 	bl	8012604 <__sinit>
 8012252:	4b21      	ldr	r3, [pc, #132]	; (80122d8 <__swbuf_r+0x98>)
 8012254:	429c      	cmp	r4, r3
 8012256:	d12b      	bne.n	80122b0 <__swbuf_r+0x70>
 8012258:	686c      	ldr	r4, [r5, #4]
 801225a:	69a3      	ldr	r3, [r4, #24]
 801225c:	60a3      	str	r3, [r4, #8]
 801225e:	89a3      	ldrh	r3, [r4, #12]
 8012260:	071a      	lsls	r2, r3, #28
 8012262:	d52f      	bpl.n	80122c4 <__swbuf_r+0x84>
 8012264:	6923      	ldr	r3, [r4, #16]
 8012266:	b36b      	cbz	r3, 80122c4 <__swbuf_r+0x84>
 8012268:	6923      	ldr	r3, [r4, #16]
 801226a:	6820      	ldr	r0, [r4, #0]
 801226c:	1ac0      	subs	r0, r0, r3
 801226e:	6963      	ldr	r3, [r4, #20]
 8012270:	b2f6      	uxtb	r6, r6
 8012272:	4283      	cmp	r3, r0
 8012274:	4637      	mov	r7, r6
 8012276:	dc04      	bgt.n	8012282 <__swbuf_r+0x42>
 8012278:	4621      	mov	r1, r4
 801227a:	4628      	mov	r0, r5
 801227c:	f000 f92e 	bl	80124dc <_fflush_r>
 8012280:	bb30      	cbnz	r0, 80122d0 <__swbuf_r+0x90>
 8012282:	68a3      	ldr	r3, [r4, #8]
 8012284:	3b01      	subs	r3, #1
 8012286:	60a3      	str	r3, [r4, #8]
 8012288:	6823      	ldr	r3, [r4, #0]
 801228a:	1c5a      	adds	r2, r3, #1
 801228c:	6022      	str	r2, [r4, #0]
 801228e:	701e      	strb	r6, [r3, #0]
 8012290:	6963      	ldr	r3, [r4, #20]
 8012292:	3001      	adds	r0, #1
 8012294:	4283      	cmp	r3, r0
 8012296:	d004      	beq.n	80122a2 <__swbuf_r+0x62>
 8012298:	89a3      	ldrh	r3, [r4, #12]
 801229a:	07db      	lsls	r3, r3, #31
 801229c:	d506      	bpl.n	80122ac <__swbuf_r+0x6c>
 801229e:	2e0a      	cmp	r6, #10
 80122a0:	d104      	bne.n	80122ac <__swbuf_r+0x6c>
 80122a2:	4621      	mov	r1, r4
 80122a4:	4628      	mov	r0, r5
 80122a6:	f000 f919 	bl	80124dc <_fflush_r>
 80122aa:	b988      	cbnz	r0, 80122d0 <__swbuf_r+0x90>
 80122ac:	4638      	mov	r0, r7
 80122ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122b0:	4b0a      	ldr	r3, [pc, #40]	; (80122dc <__swbuf_r+0x9c>)
 80122b2:	429c      	cmp	r4, r3
 80122b4:	d101      	bne.n	80122ba <__swbuf_r+0x7a>
 80122b6:	68ac      	ldr	r4, [r5, #8]
 80122b8:	e7cf      	b.n	801225a <__swbuf_r+0x1a>
 80122ba:	4b09      	ldr	r3, [pc, #36]	; (80122e0 <__swbuf_r+0xa0>)
 80122bc:	429c      	cmp	r4, r3
 80122be:	bf08      	it	eq
 80122c0:	68ec      	ldreq	r4, [r5, #12]
 80122c2:	e7ca      	b.n	801225a <__swbuf_r+0x1a>
 80122c4:	4621      	mov	r1, r4
 80122c6:	4628      	mov	r0, r5
 80122c8:	f000 f80c 	bl	80122e4 <__swsetup_r>
 80122cc:	2800      	cmp	r0, #0
 80122ce:	d0cb      	beq.n	8012268 <__swbuf_r+0x28>
 80122d0:	f04f 37ff 	mov.w	r7, #4294967295
 80122d4:	e7ea      	b.n	80122ac <__swbuf_r+0x6c>
 80122d6:	bf00      	nop
 80122d8:	0801302c 	.word	0x0801302c
 80122dc:	0801304c 	.word	0x0801304c
 80122e0:	0801300c 	.word	0x0801300c

080122e4 <__swsetup_r>:
 80122e4:	4b32      	ldr	r3, [pc, #200]	; (80123b0 <__swsetup_r+0xcc>)
 80122e6:	b570      	push	{r4, r5, r6, lr}
 80122e8:	681d      	ldr	r5, [r3, #0]
 80122ea:	4606      	mov	r6, r0
 80122ec:	460c      	mov	r4, r1
 80122ee:	b125      	cbz	r5, 80122fa <__swsetup_r+0x16>
 80122f0:	69ab      	ldr	r3, [r5, #24]
 80122f2:	b913      	cbnz	r3, 80122fa <__swsetup_r+0x16>
 80122f4:	4628      	mov	r0, r5
 80122f6:	f000 f985 	bl	8012604 <__sinit>
 80122fa:	4b2e      	ldr	r3, [pc, #184]	; (80123b4 <__swsetup_r+0xd0>)
 80122fc:	429c      	cmp	r4, r3
 80122fe:	d10f      	bne.n	8012320 <__swsetup_r+0x3c>
 8012300:	686c      	ldr	r4, [r5, #4]
 8012302:	89a3      	ldrh	r3, [r4, #12]
 8012304:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012308:	0719      	lsls	r1, r3, #28
 801230a:	d42c      	bmi.n	8012366 <__swsetup_r+0x82>
 801230c:	06dd      	lsls	r5, r3, #27
 801230e:	d411      	bmi.n	8012334 <__swsetup_r+0x50>
 8012310:	2309      	movs	r3, #9
 8012312:	6033      	str	r3, [r6, #0]
 8012314:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012318:	81a3      	strh	r3, [r4, #12]
 801231a:	f04f 30ff 	mov.w	r0, #4294967295
 801231e:	e03e      	b.n	801239e <__swsetup_r+0xba>
 8012320:	4b25      	ldr	r3, [pc, #148]	; (80123b8 <__swsetup_r+0xd4>)
 8012322:	429c      	cmp	r4, r3
 8012324:	d101      	bne.n	801232a <__swsetup_r+0x46>
 8012326:	68ac      	ldr	r4, [r5, #8]
 8012328:	e7eb      	b.n	8012302 <__swsetup_r+0x1e>
 801232a:	4b24      	ldr	r3, [pc, #144]	; (80123bc <__swsetup_r+0xd8>)
 801232c:	429c      	cmp	r4, r3
 801232e:	bf08      	it	eq
 8012330:	68ec      	ldreq	r4, [r5, #12]
 8012332:	e7e6      	b.n	8012302 <__swsetup_r+0x1e>
 8012334:	0758      	lsls	r0, r3, #29
 8012336:	d512      	bpl.n	801235e <__swsetup_r+0x7a>
 8012338:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801233a:	b141      	cbz	r1, 801234e <__swsetup_r+0x6a>
 801233c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012340:	4299      	cmp	r1, r3
 8012342:	d002      	beq.n	801234a <__swsetup_r+0x66>
 8012344:	4630      	mov	r0, r6
 8012346:	f7ff fb27 	bl	8011998 <_free_r>
 801234a:	2300      	movs	r3, #0
 801234c:	6363      	str	r3, [r4, #52]	; 0x34
 801234e:	89a3      	ldrh	r3, [r4, #12]
 8012350:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012354:	81a3      	strh	r3, [r4, #12]
 8012356:	2300      	movs	r3, #0
 8012358:	6063      	str	r3, [r4, #4]
 801235a:	6923      	ldr	r3, [r4, #16]
 801235c:	6023      	str	r3, [r4, #0]
 801235e:	89a3      	ldrh	r3, [r4, #12]
 8012360:	f043 0308 	orr.w	r3, r3, #8
 8012364:	81a3      	strh	r3, [r4, #12]
 8012366:	6923      	ldr	r3, [r4, #16]
 8012368:	b94b      	cbnz	r3, 801237e <__swsetup_r+0x9a>
 801236a:	89a3      	ldrh	r3, [r4, #12]
 801236c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012374:	d003      	beq.n	801237e <__swsetup_r+0x9a>
 8012376:	4621      	mov	r1, r4
 8012378:	4630      	mov	r0, r6
 801237a:	f000 fa09 	bl	8012790 <__smakebuf_r>
 801237e:	89a0      	ldrh	r0, [r4, #12]
 8012380:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012384:	f010 0301 	ands.w	r3, r0, #1
 8012388:	d00a      	beq.n	80123a0 <__swsetup_r+0xbc>
 801238a:	2300      	movs	r3, #0
 801238c:	60a3      	str	r3, [r4, #8]
 801238e:	6963      	ldr	r3, [r4, #20]
 8012390:	425b      	negs	r3, r3
 8012392:	61a3      	str	r3, [r4, #24]
 8012394:	6923      	ldr	r3, [r4, #16]
 8012396:	b943      	cbnz	r3, 80123aa <__swsetup_r+0xc6>
 8012398:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801239c:	d1ba      	bne.n	8012314 <__swsetup_r+0x30>
 801239e:	bd70      	pop	{r4, r5, r6, pc}
 80123a0:	0781      	lsls	r1, r0, #30
 80123a2:	bf58      	it	pl
 80123a4:	6963      	ldrpl	r3, [r4, #20]
 80123a6:	60a3      	str	r3, [r4, #8]
 80123a8:	e7f4      	b.n	8012394 <__swsetup_r+0xb0>
 80123aa:	2000      	movs	r0, #0
 80123ac:	e7f7      	b.n	801239e <__swsetup_r+0xba>
 80123ae:	bf00      	nop
 80123b0:	20000110 	.word	0x20000110
 80123b4:	0801302c 	.word	0x0801302c
 80123b8:	0801304c 	.word	0x0801304c
 80123bc:	0801300c 	.word	0x0801300c

080123c0 <abort>:
 80123c0:	b508      	push	{r3, lr}
 80123c2:	2006      	movs	r0, #6
 80123c4:	f000 fa54 	bl	8012870 <raise>
 80123c8:	2001      	movs	r0, #1
 80123ca:	f7f2 fb3b 	bl	8004a44 <_exit>
	...

080123d0 <__sflush_r>:
 80123d0:	898a      	ldrh	r2, [r1, #12]
 80123d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123d6:	4605      	mov	r5, r0
 80123d8:	0710      	lsls	r0, r2, #28
 80123da:	460c      	mov	r4, r1
 80123dc:	d458      	bmi.n	8012490 <__sflush_r+0xc0>
 80123de:	684b      	ldr	r3, [r1, #4]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	dc05      	bgt.n	80123f0 <__sflush_r+0x20>
 80123e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	dc02      	bgt.n	80123f0 <__sflush_r+0x20>
 80123ea:	2000      	movs	r0, #0
 80123ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80123f2:	2e00      	cmp	r6, #0
 80123f4:	d0f9      	beq.n	80123ea <__sflush_r+0x1a>
 80123f6:	2300      	movs	r3, #0
 80123f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80123fc:	682f      	ldr	r7, [r5, #0]
 80123fe:	602b      	str	r3, [r5, #0]
 8012400:	d032      	beq.n	8012468 <__sflush_r+0x98>
 8012402:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012404:	89a3      	ldrh	r3, [r4, #12]
 8012406:	075a      	lsls	r2, r3, #29
 8012408:	d505      	bpl.n	8012416 <__sflush_r+0x46>
 801240a:	6863      	ldr	r3, [r4, #4]
 801240c:	1ac0      	subs	r0, r0, r3
 801240e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012410:	b10b      	cbz	r3, 8012416 <__sflush_r+0x46>
 8012412:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012414:	1ac0      	subs	r0, r0, r3
 8012416:	2300      	movs	r3, #0
 8012418:	4602      	mov	r2, r0
 801241a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801241c:	6a21      	ldr	r1, [r4, #32]
 801241e:	4628      	mov	r0, r5
 8012420:	47b0      	blx	r6
 8012422:	1c43      	adds	r3, r0, #1
 8012424:	89a3      	ldrh	r3, [r4, #12]
 8012426:	d106      	bne.n	8012436 <__sflush_r+0x66>
 8012428:	6829      	ldr	r1, [r5, #0]
 801242a:	291d      	cmp	r1, #29
 801242c:	d82c      	bhi.n	8012488 <__sflush_r+0xb8>
 801242e:	4a2a      	ldr	r2, [pc, #168]	; (80124d8 <__sflush_r+0x108>)
 8012430:	40ca      	lsrs	r2, r1
 8012432:	07d6      	lsls	r6, r2, #31
 8012434:	d528      	bpl.n	8012488 <__sflush_r+0xb8>
 8012436:	2200      	movs	r2, #0
 8012438:	6062      	str	r2, [r4, #4]
 801243a:	04d9      	lsls	r1, r3, #19
 801243c:	6922      	ldr	r2, [r4, #16]
 801243e:	6022      	str	r2, [r4, #0]
 8012440:	d504      	bpl.n	801244c <__sflush_r+0x7c>
 8012442:	1c42      	adds	r2, r0, #1
 8012444:	d101      	bne.n	801244a <__sflush_r+0x7a>
 8012446:	682b      	ldr	r3, [r5, #0]
 8012448:	b903      	cbnz	r3, 801244c <__sflush_r+0x7c>
 801244a:	6560      	str	r0, [r4, #84]	; 0x54
 801244c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801244e:	602f      	str	r7, [r5, #0]
 8012450:	2900      	cmp	r1, #0
 8012452:	d0ca      	beq.n	80123ea <__sflush_r+0x1a>
 8012454:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012458:	4299      	cmp	r1, r3
 801245a:	d002      	beq.n	8012462 <__sflush_r+0x92>
 801245c:	4628      	mov	r0, r5
 801245e:	f7ff fa9b 	bl	8011998 <_free_r>
 8012462:	2000      	movs	r0, #0
 8012464:	6360      	str	r0, [r4, #52]	; 0x34
 8012466:	e7c1      	b.n	80123ec <__sflush_r+0x1c>
 8012468:	6a21      	ldr	r1, [r4, #32]
 801246a:	2301      	movs	r3, #1
 801246c:	4628      	mov	r0, r5
 801246e:	47b0      	blx	r6
 8012470:	1c41      	adds	r1, r0, #1
 8012472:	d1c7      	bne.n	8012404 <__sflush_r+0x34>
 8012474:	682b      	ldr	r3, [r5, #0]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d0c4      	beq.n	8012404 <__sflush_r+0x34>
 801247a:	2b1d      	cmp	r3, #29
 801247c:	d001      	beq.n	8012482 <__sflush_r+0xb2>
 801247e:	2b16      	cmp	r3, #22
 8012480:	d101      	bne.n	8012486 <__sflush_r+0xb6>
 8012482:	602f      	str	r7, [r5, #0]
 8012484:	e7b1      	b.n	80123ea <__sflush_r+0x1a>
 8012486:	89a3      	ldrh	r3, [r4, #12]
 8012488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801248c:	81a3      	strh	r3, [r4, #12]
 801248e:	e7ad      	b.n	80123ec <__sflush_r+0x1c>
 8012490:	690f      	ldr	r7, [r1, #16]
 8012492:	2f00      	cmp	r7, #0
 8012494:	d0a9      	beq.n	80123ea <__sflush_r+0x1a>
 8012496:	0793      	lsls	r3, r2, #30
 8012498:	680e      	ldr	r6, [r1, #0]
 801249a:	bf08      	it	eq
 801249c:	694b      	ldreq	r3, [r1, #20]
 801249e:	600f      	str	r7, [r1, #0]
 80124a0:	bf18      	it	ne
 80124a2:	2300      	movne	r3, #0
 80124a4:	eba6 0807 	sub.w	r8, r6, r7
 80124a8:	608b      	str	r3, [r1, #8]
 80124aa:	f1b8 0f00 	cmp.w	r8, #0
 80124ae:	dd9c      	ble.n	80123ea <__sflush_r+0x1a>
 80124b0:	6a21      	ldr	r1, [r4, #32]
 80124b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80124b4:	4643      	mov	r3, r8
 80124b6:	463a      	mov	r2, r7
 80124b8:	4628      	mov	r0, r5
 80124ba:	47b0      	blx	r6
 80124bc:	2800      	cmp	r0, #0
 80124be:	dc06      	bgt.n	80124ce <__sflush_r+0xfe>
 80124c0:	89a3      	ldrh	r3, [r4, #12]
 80124c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80124c6:	81a3      	strh	r3, [r4, #12]
 80124c8:	f04f 30ff 	mov.w	r0, #4294967295
 80124cc:	e78e      	b.n	80123ec <__sflush_r+0x1c>
 80124ce:	4407      	add	r7, r0
 80124d0:	eba8 0800 	sub.w	r8, r8, r0
 80124d4:	e7e9      	b.n	80124aa <__sflush_r+0xda>
 80124d6:	bf00      	nop
 80124d8:	20400001 	.word	0x20400001

080124dc <_fflush_r>:
 80124dc:	b538      	push	{r3, r4, r5, lr}
 80124de:	690b      	ldr	r3, [r1, #16]
 80124e0:	4605      	mov	r5, r0
 80124e2:	460c      	mov	r4, r1
 80124e4:	b913      	cbnz	r3, 80124ec <_fflush_r+0x10>
 80124e6:	2500      	movs	r5, #0
 80124e8:	4628      	mov	r0, r5
 80124ea:	bd38      	pop	{r3, r4, r5, pc}
 80124ec:	b118      	cbz	r0, 80124f6 <_fflush_r+0x1a>
 80124ee:	6983      	ldr	r3, [r0, #24]
 80124f0:	b90b      	cbnz	r3, 80124f6 <_fflush_r+0x1a>
 80124f2:	f000 f887 	bl	8012604 <__sinit>
 80124f6:	4b14      	ldr	r3, [pc, #80]	; (8012548 <_fflush_r+0x6c>)
 80124f8:	429c      	cmp	r4, r3
 80124fa:	d11b      	bne.n	8012534 <_fflush_r+0x58>
 80124fc:	686c      	ldr	r4, [r5, #4]
 80124fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d0ef      	beq.n	80124e6 <_fflush_r+0xa>
 8012506:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012508:	07d0      	lsls	r0, r2, #31
 801250a:	d404      	bmi.n	8012516 <_fflush_r+0x3a>
 801250c:	0599      	lsls	r1, r3, #22
 801250e:	d402      	bmi.n	8012516 <_fflush_r+0x3a>
 8012510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012512:	f000 f915 	bl	8012740 <__retarget_lock_acquire_recursive>
 8012516:	4628      	mov	r0, r5
 8012518:	4621      	mov	r1, r4
 801251a:	f7ff ff59 	bl	80123d0 <__sflush_r>
 801251e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012520:	07da      	lsls	r2, r3, #31
 8012522:	4605      	mov	r5, r0
 8012524:	d4e0      	bmi.n	80124e8 <_fflush_r+0xc>
 8012526:	89a3      	ldrh	r3, [r4, #12]
 8012528:	059b      	lsls	r3, r3, #22
 801252a:	d4dd      	bmi.n	80124e8 <_fflush_r+0xc>
 801252c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801252e:	f000 f908 	bl	8012742 <__retarget_lock_release_recursive>
 8012532:	e7d9      	b.n	80124e8 <_fflush_r+0xc>
 8012534:	4b05      	ldr	r3, [pc, #20]	; (801254c <_fflush_r+0x70>)
 8012536:	429c      	cmp	r4, r3
 8012538:	d101      	bne.n	801253e <_fflush_r+0x62>
 801253a:	68ac      	ldr	r4, [r5, #8]
 801253c:	e7df      	b.n	80124fe <_fflush_r+0x22>
 801253e:	4b04      	ldr	r3, [pc, #16]	; (8012550 <_fflush_r+0x74>)
 8012540:	429c      	cmp	r4, r3
 8012542:	bf08      	it	eq
 8012544:	68ec      	ldreq	r4, [r5, #12]
 8012546:	e7da      	b.n	80124fe <_fflush_r+0x22>
 8012548:	0801302c 	.word	0x0801302c
 801254c:	0801304c 	.word	0x0801304c
 8012550:	0801300c 	.word	0x0801300c

08012554 <std>:
 8012554:	2300      	movs	r3, #0
 8012556:	b510      	push	{r4, lr}
 8012558:	4604      	mov	r4, r0
 801255a:	e9c0 3300 	strd	r3, r3, [r0]
 801255e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012562:	6083      	str	r3, [r0, #8]
 8012564:	8181      	strh	r1, [r0, #12]
 8012566:	6643      	str	r3, [r0, #100]	; 0x64
 8012568:	81c2      	strh	r2, [r0, #14]
 801256a:	6183      	str	r3, [r0, #24]
 801256c:	4619      	mov	r1, r3
 801256e:	2208      	movs	r2, #8
 8012570:	305c      	adds	r0, #92	; 0x5c
 8012572:	f7fb fdd1 	bl	800e118 <memset>
 8012576:	4b05      	ldr	r3, [pc, #20]	; (801258c <std+0x38>)
 8012578:	6263      	str	r3, [r4, #36]	; 0x24
 801257a:	4b05      	ldr	r3, [pc, #20]	; (8012590 <std+0x3c>)
 801257c:	62a3      	str	r3, [r4, #40]	; 0x28
 801257e:	4b05      	ldr	r3, [pc, #20]	; (8012594 <std+0x40>)
 8012580:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012582:	4b05      	ldr	r3, [pc, #20]	; (8012598 <std+0x44>)
 8012584:	6224      	str	r4, [r4, #32]
 8012586:	6323      	str	r3, [r4, #48]	; 0x30
 8012588:	bd10      	pop	{r4, pc}
 801258a:	bf00      	nop
 801258c:	080128a9 	.word	0x080128a9
 8012590:	080128cb 	.word	0x080128cb
 8012594:	08012903 	.word	0x08012903
 8012598:	08012927 	.word	0x08012927

0801259c <_cleanup_r>:
 801259c:	4901      	ldr	r1, [pc, #4]	; (80125a4 <_cleanup_r+0x8>)
 801259e:	f000 b8af 	b.w	8012700 <_fwalk_reent>
 80125a2:	bf00      	nop
 80125a4:	080124dd 	.word	0x080124dd

080125a8 <__sfmoreglue>:
 80125a8:	b570      	push	{r4, r5, r6, lr}
 80125aa:	2268      	movs	r2, #104	; 0x68
 80125ac:	1e4d      	subs	r5, r1, #1
 80125ae:	4355      	muls	r5, r2
 80125b0:	460e      	mov	r6, r1
 80125b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80125b6:	f7ff fa5b 	bl	8011a70 <_malloc_r>
 80125ba:	4604      	mov	r4, r0
 80125bc:	b140      	cbz	r0, 80125d0 <__sfmoreglue+0x28>
 80125be:	2100      	movs	r1, #0
 80125c0:	e9c0 1600 	strd	r1, r6, [r0]
 80125c4:	300c      	adds	r0, #12
 80125c6:	60a0      	str	r0, [r4, #8]
 80125c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80125cc:	f7fb fda4 	bl	800e118 <memset>
 80125d0:	4620      	mov	r0, r4
 80125d2:	bd70      	pop	{r4, r5, r6, pc}

080125d4 <__sfp_lock_acquire>:
 80125d4:	4801      	ldr	r0, [pc, #4]	; (80125dc <__sfp_lock_acquire+0x8>)
 80125d6:	f000 b8b3 	b.w	8012740 <__retarget_lock_acquire_recursive>
 80125da:	bf00      	nop
 80125dc:	20005755 	.word	0x20005755

080125e0 <__sfp_lock_release>:
 80125e0:	4801      	ldr	r0, [pc, #4]	; (80125e8 <__sfp_lock_release+0x8>)
 80125e2:	f000 b8ae 	b.w	8012742 <__retarget_lock_release_recursive>
 80125e6:	bf00      	nop
 80125e8:	20005755 	.word	0x20005755

080125ec <__sinit_lock_acquire>:
 80125ec:	4801      	ldr	r0, [pc, #4]	; (80125f4 <__sinit_lock_acquire+0x8>)
 80125ee:	f000 b8a7 	b.w	8012740 <__retarget_lock_acquire_recursive>
 80125f2:	bf00      	nop
 80125f4:	20005756 	.word	0x20005756

080125f8 <__sinit_lock_release>:
 80125f8:	4801      	ldr	r0, [pc, #4]	; (8012600 <__sinit_lock_release+0x8>)
 80125fa:	f000 b8a2 	b.w	8012742 <__retarget_lock_release_recursive>
 80125fe:	bf00      	nop
 8012600:	20005756 	.word	0x20005756

08012604 <__sinit>:
 8012604:	b510      	push	{r4, lr}
 8012606:	4604      	mov	r4, r0
 8012608:	f7ff fff0 	bl	80125ec <__sinit_lock_acquire>
 801260c:	69a3      	ldr	r3, [r4, #24]
 801260e:	b11b      	cbz	r3, 8012618 <__sinit+0x14>
 8012610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012614:	f7ff bff0 	b.w	80125f8 <__sinit_lock_release>
 8012618:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801261c:	6523      	str	r3, [r4, #80]	; 0x50
 801261e:	4b13      	ldr	r3, [pc, #76]	; (801266c <__sinit+0x68>)
 8012620:	4a13      	ldr	r2, [pc, #76]	; (8012670 <__sinit+0x6c>)
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	62a2      	str	r2, [r4, #40]	; 0x28
 8012626:	42a3      	cmp	r3, r4
 8012628:	bf04      	itt	eq
 801262a:	2301      	moveq	r3, #1
 801262c:	61a3      	streq	r3, [r4, #24]
 801262e:	4620      	mov	r0, r4
 8012630:	f000 f820 	bl	8012674 <__sfp>
 8012634:	6060      	str	r0, [r4, #4]
 8012636:	4620      	mov	r0, r4
 8012638:	f000 f81c 	bl	8012674 <__sfp>
 801263c:	60a0      	str	r0, [r4, #8]
 801263e:	4620      	mov	r0, r4
 8012640:	f000 f818 	bl	8012674 <__sfp>
 8012644:	2200      	movs	r2, #0
 8012646:	60e0      	str	r0, [r4, #12]
 8012648:	2104      	movs	r1, #4
 801264a:	6860      	ldr	r0, [r4, #4]
 801264c:	f7ff ff82 	bl	8012554 <std>
 8012650:	68a0      	ldr	r0, [r4, #8]
 8012652:	2201      	movs	r2, #1
 8012654:	2109      	movs	r1, #9
 8012656:	f7ff ff7d 	bl	8012554 <std>
 801265a:	68e0      	ldr	r0, [r4, #12]
 801265c:	2202      	movs	r2, #2
 801265e:	2112      	movs	r1, #18
 8012660:	f7ff ff78 	bl	8012554 <std>
 8012664:	2301      	movs	r3, #1
 8012666:	61a3      	str	r3, [r4, #24]
 8012668:	e7d2      	b.n	8012610 <__sinit+0xc>
 801266a:	bf00      	nop
 801266c:	08012bc4 	.word	0x08012bc4
 8012670:	0801259d 	.word	0x0801259d

08012674 <__sfp>:
 8012674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012676:	4607      	mov	r7, r0
 8012678:	f7ff ffac 	bl	80125d4 <__sfp_lock_acquire>
 801267c:	4b1e      	ldr	r3, [pc, #120]	; (80126f8 <__sfp+0x84>)
 801267e:	681e      	ldr	r6, [r3, #0]
 8012680:	69b3      	ldr	r3, [r6, #24]
 8012682:	b913      	cbnz	r3, 801268a <__sfp+0x16>
 8012684:	4630      	mov	r0, r6
 8012686:	f7ff ffbd 	bl	8012604 <__sinit>
 801268a:	3648      	adds	r6, #72	; 0x48
 801268c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012690:	3b01      	subs	r3, #1
 8012692:	d503      	bpl.n	801269c <__sfp+0x28>
 8012694:	6833      	ldr	r3, [r6, #0]
 8012696:	b30b      	cbz	r3, 80126dc <__sfp+0x68>
 8012698:	6836      	ldr	r6, [r6, #0]
 801269a:	e7f7      	b.n	801268c <__sfp+0x18>
 801269c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80126a0:	b9d5      	cbnz	r5, 80126d8 <__sfp+0x64>
 80126a2:	4b16      	ldr	r3, [pc, #88]	; (80126fc <__sfp+0x88>)
 80126a4:	60e3      	str	r3, [r4, #12]
 80126a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80126aa:	6665      	str	r5, [r4, #100]	; 0x64
 80126ac:	f000 f847 	bl	801273e <__retarget_lock_init_recursive>
 80126b0:	f7ff ff96 	bl	80125e0 <__sfp_lock_release>
 80126b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80126b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80126bc:	6025      	str	r5, [r4, #0]
 80126be:	61a5      	str	r5, [r4, #24]
 80126c0:	2208      	movs	r2, #8
 80126c2:	4629      	mov	r1, r5
 80126c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80126c8:	f7fb fd26 	bl	800e118 <memset>
 80126cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80126d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80126d4:	4620      	mov	r0, r4
 80126d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126d8:	3468      	adds	r4, #104	; 0x68
 80126da:	e7d9      	b.n	8012690 <__sfp+0x1c>
 80126dc:	2104      	movs	r1, #4
 80126de:	4638      	mov	r0, r7
 80126e0:	f7ff ff62 	bl	80125a8 <__sfmoreglue>
 80126e4:	4604      	mov	r4, r0
 80126e6:	6030      	str	r0, [r6, #0]
 80126e8:	2800      	cmp	r0, #0
 80126ea:	d1d5      	bne.n	8012698 <__sfp+0x24>
 80126ec:	f7ff ff78 	bl	80125e0 <__sfp_lock_release>
 80126f0:	230c      	movs	r3, #12
 80126f2:	603b      	str	r3, [r7, #0]
 80126f4:	e7ee      	b.n	80126d4 <__sfp+0x60>
 80126f6:	bf00      	nop
 80126f8:	08012bc4 	.word	0x08012bc4
 80126fc:	ffff0001 	.word	0xffff0001

08012700 <_fwalk_reent>:
 8012700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012704:	4606      	mov	r6, r0
 8012706:	4688      	mov	r8, r1
 8012708:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801270c:	2700      	movs	r7, #0
 801270e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012712:	f1b9 0901 	subs.w	r9, r9, #1
 8012716:	d505      	bpl.n	8012724 <_fwalk_reent+0x24>
 8012718:	6824      	ldr	r4, [r4, #0]
 801271a:	2c00      	cmp	r4, #0
 801271c:	d1f7      	bne.n	801270e <_fwalk_reent+0xe>
 801271e:	4638      	mov	r0, r7
 8012720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012724:	89ab      	ldrh	r3, [r5, #12]
 8012726:	2b01      	cmp	r3, #1
 8012728:	d907      	bls.n	801273a <_fwalk_reent+0x3a>
 801272a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801272e:	3301      	adds	r3, #1
 8012730:	d003      	beq.n	801273a <_fwalk_reent+0x3a>
 8012732:	4629      	mov	r1, r5
 8012734:	4630      	mov	r0, r6
 8012736:	47c0      	blx	r8
 8012738:	4307      	orrs	r7, r0
 801273a:	3568      	adds	r5, #104	; 0x68
 801273c:	e7e9      	b.n	8012712 <_fwalk_reent+0x12>

0801273e <__retarget_lock_init_recursive>:
 801273e:	4770      	bx	lr

08012740 <__retarget_lock_acquire_recursive>:
 8012740:	4770      	bx	lr

08012742 <__retarget_lock_release_recursive>:
 8012742:	4770      	bx	lr

08012744 <__swhatbuf_r>:
 8012744:	b570      	push	{r4, r5, r6, lr}
 8012746:	460e      	mov	r6, r1
 8012748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801274c:	2900      	cmp	r1, #0
 801274e:	b096      	sub	sp, #88	; 0x58
 8012750:	4614      	mov	r4, r2
 8012752:	461d      	mov	r5, r3
 8012754:	da08      	bge.n	8012768 <__swhatbuf_r+0x24>
 8012756:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801275a:	2200      	movs	r2, #0
 801275c:	602a      	str	r2, [r5, #0]
 801275e:	061a      	lsls	r2, r3, #24
 8012760:	d410      	bmi.n	8012784 <__swhatbuf_r+0x40>
 8012762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012766:	e00e      	b.n	8012786 <__swhatbuf_r+0x42>
 8012768:	466a      	mov	r2, sp
 801276a:	f000 f903 	bl	8012974 <_fstat_r>
 801276e:	2800      	cmp	r0, #0
 8012770:	dbf1      	blt.n	8012756 <__swhatbuf_r+0x12>
 8012772:	9a01      	ldr	r2, [sp, #4]
 8012774:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012778:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801277c:	425a      	negs	r2, r3
 801277e:	415a      	adcs	r2, r3
 8012780:	602a      	str	r2, [r5, #0]
 8012782:	e7ee      	b.n	8012762 <__swhatbuf_r+0x1e>
 8012784:	2340      	movs	r3, #64	; 0x40
 8012786:	2000      	movs	r0, #0
 8012788:	6023      	str	r3, [r4, #0]
 801278a:	b016      	add	sp, #88	; 0x58
 801278c:	bd70      	pop	{r4, r5, r6, pc}
	...

08012790 <__smakebuf_r>:
 8012790:	898b      	ldrh	r3, [r1, #12]
 8012792:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012794:	079d      	lsls	r5, r3, #30
 8012796:	4606      	mov	r6, r0
 8012798:	460c      	mov	r4, r1
 801279a:	d507      	bpl.n	80127ac <__smakebuf_r+0x1c>
 801279c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80127a0:	6023      	str	r3, [r4, #0]
 80127a2:	6123      	str	r3, [r4, #16]
 80127a4:	2301      	movs	r3, #1
 80127a6:	6163      	str	r3, [r4, #20]
 80127a8:	b002      	add	sp, #8
 80127aa:	bd70      	pop	{r4, r5, r6, pc}
 80127ac:	ab01      	add	r3, sp, #4
 80127ae:	466a      	mov	r2, sp
 80127b0:	f7ff ffc8 	bl	8012744 <__swhatbuf_r>
 80127b4:	9900      	ldr	r1, [sp, #0]
 80127b6:	4605      	mov	r5, r0
 80127b8:	4630      	mov	r0, r6
 80127ba:	f7ff f959 	bl	8011a70 <_malloc_r>
 80127be:	b948      	cbnz	r0, 80127d4 <__smakebuf_r+0x44>
 80127c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127c4:	059a      	lsls	r2, r3, #22
 80127c6:	d4ef      	bmi.n	80127a8 <__smakebuf_r+0x18>
 80127c8:	f023 0303 	bic.w	r3, r3, #3
 80127cc:	f043 0302 	orr.w	r3, r3, #2
 80127d0:	81a3      	strh	r3, [r4, #12]
 80127d2:	e7e3      	b.n	801279c <__smakebuf_r+0xc>
 80127d4:	4b0d      	ldr	r3, [pc, #52]	; (801280c <__smakebuf_r+0x7c>)
 80127d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80127d8:	89a3      	ldrh	r3, [r4, #12]
 80127da:	6020      	str	r0, [r4, #0]
 80127dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127e0:	81a3      	strh	r3, [r4, #12]
 80127e2:	9b00      	ldr	r3, [sp, #0]
 80127e4:	6163      	str	r3, [r4, #20]
 80127e6:	9b01      	ldr	r3, [sp, #4]
 80127e8:	6120      	str	r0, [r4, #16]
 80127ea:	b15b      	cbz	r3, 8012804 <__smakebuf_r+0x74>
 80127ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80127f0:	4630      	mov	r0, r6
 80127f2:	f000 f8d1 	bl	8012998 <_isatty_r>
 80127f6:	b128      	cbz	r0, 8012804 <__smakebuf_r+0x74>
 80127f8:	89a3      	ldrh	r3, [r4, #12]
 80127fa:	f023 0303 	bic.w	r3, r3, #3
 80127fe:	f043 0301 	orr.w	r3, r3, #1
 8012802:	81a3      	strh	r3, [r4, #12]
 8012804:	89a0      	ldrh	r0, [r4, #12]
 8012806:	4305      	orrs	r5, r0
 8012808:	81a5      	strh	r5, [r4, #12]
 801280a:	e7cd      	b.n	80127a8 <__smakebuf_r+0x18>
 801280c:	0801259d 	.word	0x0801259d

08012810 <_malloc_usable_size_r>:
 8012810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012814:	1f18      	subs	r0, r3, #4
 8012816:	2b00      	cmp	r3, #0
 8012818:	bfbc      	itt	lt
 801281a:	580b      	ldrlt	r3, [r1, r0]
 801281c:	18c0      	addlt	r0, r0, r3
 801281e:	4770      	bx	lr

08012820 <_raise_r>:
 8012820:	291f      	cmp	r1, #31
 8012822:	b538      	push	{r3, r4, r5, lr}
 8012824:	4604      	mov	r4, r0
 8012826:	460d      	mov	r5, r1
 8012828:	d904      	bls.n	8012834 <_raise_r+0x14>
 801282a:	2316      	movs	r3, #22
 801282c:	6003      	str	r3, [r0, #0]
 801282e:	f04f 30ff 	mov.w	r0, #4294967295
 8012832:	bd38      	pop	{r3, r4, r5, pc}
 8012834:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012836:	b112      	cbz	r2, 801283e <_raise_r+0x1e>
 8012838:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801283c:	b94b      	cbnz	r3, 8012852 <_raise_r+0x32>
 801283e:	4620      	mov	r0, r4
 8012840:	f000 f830 	bl	80128a4 <_getpid_r>
 8012844:	462a      	mov	r2, r5
 8012846:	4601      	mov	r1, r0
 8012848:	4620      	mov	r0, r4
 801284a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801284e:	f000 b817 	b.w	8012880 <_kill_r>
 8012852:	2b01      	cmp	r3, #1
 8012854:	d00a      	beq.n	801286c <_raise_r+0x4c>
 8012856:	1c59      	adds	r1, r3, #1
 8012858:	d103      	bne.n	8012862 <_raise_r+0x42>
 801285a:	2316      	movs	r3, #22
 801285c:	6003      	str	r3, [r0, #0]
 801285e:	2001      	movs	r0, #1
 8012860:	e7e7      	b.n	8012832 <_raise_r+0x12>
 8012862:	2400      	movs	r4, #0
 8012864:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012868:	4628      	mov	r0, r5
 801286a:	4798      	blx	r3
 801286c:	2000      	movs	r0, #0
 801286e:	e7e0      	b.n	8012832 <_raise_r+0x12>

08012870 <raise>:
 8012870:	4b02      	ldr	r3, [pc, #8]	; (801287c <raise+0xc>)
 8012872:	4601      	mov	r1, r0
 8012874:	6818      	ldr	r0, [r3, #0]
 8012876:	f7ff bfd3 	b.w	8012820 <_raise_r>
 801287a:	bf00      	nop
 801287c:	20000110 	.word	0x20000110

08012880 <_kill_r>:
 8012880:	b538      	push	{r3, r4, r5, lr}
 8012882:	4d07      	ldr	r5, [pc, #28]	; (80128a0 <_kill_r+0x20>)
 8012884:	2300      	movs	r3, #0
 8012886:	4604      	mov	r4, r0
 8012888:	4608      	mov	r0, r1
 801288a:	4611      	mov	r1, r2
 801288c:	602b      	str	r3, [r5, #0]
 801288e:	f7f2 f8c9 	bl	8004a24 <_kill>
 8012892:	1c43      	adds	r3, r0, #1
 8012894:	d102      	bne.n	801289c <_kill_r+0x1c>
 8012896:	682b      	ldr	r3, [r5, #0]
 8012898:	b103      	cbz	r3, 801289c <_kill_r+0x1c>
 801289a:	6023      	str	r3, [r4, #0]
 801289c:	bd38      	pop	{r3, r4, r5, pc}
 801289e:	bf00      	nop
 80128a0:	20005750 	.word	0x20005750

080128a4 <_getpid_r>:
 80128a4:	f7f2 b8b6 	b.w	8004a14 <_getpid>

080128a8 <__sread>:
 80128a8:	b510      	push	{r4, lr}
 80128aa:	460c      	mov	r4, r1
 80128ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128b0:	f000 f894 	bl	80129dc <_read_r>
 80128b4:	2800      	cmp	r0, #0
 80128b6:	bfab      	itete	ge
 80128b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80128ba:	89a3      	ldrhlt	r3, [r4, #12]
 80128bc:	181b      	addge	r3, r3, r0
 80128be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80128c2:	bfac      	ite	ge
 80128c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80128c6:	81a3      	strhlt	r3, [r4, #12]
 80128c8:	bd10      	pop	{r4, pc}

080128ca <__swrite>:
 80128ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128ce:	461f      	mov	r7, r3
 80128d0:	898b      	ldrh	r3, [r1, #12]
 80128d2:	05db      	lsls	r3, r3, #23
 80128d4:	4605      	mov	r5, r0
 80128d6:	460c      	mov	r4, r1
 80128d8:	4616      	mov	r6, r2
 80128da:	d505      	bpl.n	80128e8 <__swrite+0x1e>
 80128dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128e0:	2302      	movs	r3, #2
 80128e2:	2200      	movs	r2, #0
 80128e4:	f000 f868 	bl	80129b8 <_lseek_r>
 80128e8:	89a3      	ldrh	r3, [r4, #12]
 80128ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80128ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80128f2:	81a3      	strh	r3, [r4, #12]
 80128f4:	4632      	mov	r2, r6
 80128f6:	463b      	mov	r3, r7
 80128f8:	4628      	mov	r0, r5
 80128fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80128fe:	f000 b817 	b.w	8012930 <_write_r>

08012902 <__sseek>:
 8012902:	b510      	push	{r4, lr}
 8012904:	460c      	mov	r4, r1
 8012906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801290a:	f000 f855 	bl	80129b8 <_lseek_r>
 801290e:	1c43      	adds	r3, r0, #1
 8012910:	89a3      	ldrh	r3, [r4, #12]
 8012912:	bf15      	itete	ne
 8012914:	6560      	strne	r0, [r4, #84]	; 0x54
 8012916:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801291a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801291e:	81a3      	strheq	r3, [r4, #12]
 8012920:	bf18      	it	ne
 8012922:	81a3      	strhne	r3, [r4, #12]
 8012924:	bd10      	pop	{r4, pc}

08012926 <__sclose>:
 8012926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801292a:	f000 b813 	b.w	8012954 <_close_r>
	...

08012930 <_write_r>:
 8012930:	b538      	push	{r3, r4, r5, lr}
 8012932:	4d07      	ldr	r5, [pc, #28]	; (8012950 <_write_r+0x20>)
 8012934:	4604      	mov	r4, r0
 8012936:	4608      	mov	r0, r1
 8012938:	4611      	mov	r1, r2
 801293a:	2200      	movs	r2, #0
 801293c:	602a      	str	r2, [r5, #0]
 801293e:	461a      	mov	r2, r3
 8012940:	f7f2 f8a7 	bl	8004a92 <_write>
 8012944:	1c43      	adds	r3, r0, #1
 8012946:	d102      	bne.n	801294e <_write_r+0x1e>
 8012948:	682b      	ldr	r3, [r5, #0]
 801294a:	b103      	cbz	r3, 801294e <_write_r+0x1e>
 801294c:	6023      	str	r3, [r4, #0]
 801294e:	bd38      	pop	{r3, r4, r5, pc}
 8012950:	20005750 	.word	0x20005750

08012954 <_close_r>:
 8012954:	b538      	push	{r3, r4, r5, lr}
 8012956:	4d06      	ldr	r5, [pc, #24]	; (8012970 <_close_r+0x1c>)
 8012958:	2300      	movs	r3, #0
 801295a:	4604      	mov	r4, r0
 801295c:	4608      	mov	r0, r1
 801295e:	602b      	str	r3, [r5, #0]
 8012960:	f7f2 f8b3 	bl	8004aca <_close>
 8012964:	1c43      	adds	r3, r0, #1
 8012966:	d102      	bne.n	801296e <_close_r+0x1a>
 8012968:	682b      	ldr	r3, [r5, #0]
 801296a:	b103      	cbz	r3, 801296e <_close_r+0x1a>
 801296c:	6023      	str	r3, [r4, #0]
 801296e:	bd38      	pop	{r3, r4, r5, pc}
 8012970:	20005750 	.word	0x20005750

08012974 <_fstat_r>:
 8012974:	b538      	push	{r3, r4, r5, lr}
 8012976:	4d07      	ldr	r5, [pc, #28]	; (8012994 <_fstat_r+0x20>)
 8012978:	2300      	movs	r3, #0
 801297a:	4604      	mov	r4, r0
 801297c:	4608      	mov	r0, r1
 801297e:	4611      	mov	r1, r2
 8012980:	602b      	str	r3, [r5, #0]
 8012982:	f7f2 f8ae 	bl	8004ae2 <_fstat>
 8012986:	1c43      	adds	r3, r0, #1
 8012988:	d102      	bne.n	8012990 <_fstat_r+0x1c>
 801298a:	682b      	ldr	r3, [r5, #0]
 801298c:	b103      	cbz	r3, 8012990 <_fstat_r+0x1c>
 801298e:	6023      	str	r3, [r4, #0]
 8012990:	bd38      	pop	{r3, r4, r5, pc}
 8012992:	bf00      	nop
 8012994:	20005750 	.word	0x20005750

08012998 <_isatty_r>:
 8012998:	b538      	push	{r3, r4, r5, lr}
 801299a:	4d06      	ldr	r5, [pc, #24]	; (80129b4 <_isatty_r+0x1c>)
 801299c:	2300      	movs	r3, #0
 801299e:	4604      	mov	r4, r0
 80129a0:	4608      	mov	r0, r1
 80129a2:	602b      	str	r3, [r5, #0]
 80129a4:	f7f2 f8ad 	bl	8004b02 <_isatty>
 80129a8:	1c43      	adds	r3, r0, #1
 80129aa:	d102      	bne.n	80129b2 <_isatty_r+0x1a>
 80129ac:	682b      	ldr	r3, [r5, #0]
 80129ae:	b103      	cbz	r3, 80129b2 <_isatty_r+0x1a>
 80129b0:	6023      	str	r3, [r4, #0]
 80129b2:	bd38      	pop	{r3, r4, r5, pc}
 80129b4:	20005750 	.word	0x20005750

080129b8 <_lseek_r>:
 80129b8:	b538      	push	{r3, r4, r5, lr}
 80129ba:	4d07      	ldr	r5, [pc, #28]	; (80129d8 <_lseek_r+0x20>)
 80129bc:	4604      	mov	r4, r0
 80129be:	4608      	mov	r0, r1
 80129c0:	4611      	mov	r1, r2
 80129c2:	2200      	movs	r2, #0
 80129c4:	602a      	str	r2, [r5, #0]
 80129c6:	461a      	mov	r2, r3
 80129c8:	f7f2 f8a6 	bl	8004b18 <_lseek>
 80129cc:	1c43      	adds	r3, r0, #1
 80129ce:	d102      	bne.n	80129d6 <_lseek_r+0x1e>
 80129d0:	682b      	ldr	r3, [r5, #0]
 80129d2:	b103      	cbz	r3, 80129d6 <_lseek_r+0x1e>
 80129d4:	6023      	str	r3, [r4, #0]
 80129d6:	bd38      	pop	{r3, r4, r5, pc}
 80129d8:	20005750 	.word	0x20005750

080129dc <_read_r>:
 80129dc:	b538      	push	{r3, r4, r5, lr}
 80129de:	4d07      	ldr	r5, [pc, #28]	; (80129fc <_read_r+0x20>)
 80129e0:	4604      	mov	r4, r0
 80129e2:	4608      	mov	r0, r1
 80129e4:	4611      	mov	r1, r2
 80129e6:	2200      	movs	r2, #0
 80129e8:	602a      	str	r2, [r5, #0]
 80129ea:	461a      	mov	r2, r3
 80129ec:	f7f2 f834 	bl	8004a58 <_read>
 80129f0:	1c43      	adds	r3, r0, #1
 80129f2:	d102      	bne.n	80129fa <_read_r+0x1e>
 80129f4:	682b      	ldr	r3, [r5, #0]
 80129f6:	b103      	cbz	r3, 80129fa <_read_r+0x1e>
 80129f8:	6023      	str	r3, [r4, #0]
 80129fa:	bd38      	pop	{r3, r4, r5, pc}
 80129fc:	20005750 	.word	0x20005750

08012a00 <_init>:
 8012a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a02:	bf00      	nop
 8012a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a06:	bc08      	pop	{r3}
 8012a08:	469e      	mov	lr, r3
 8012a0a:	4770      	bx	lr

08012a0c <_fini>:
 8012a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a0e:	bf00      	nop
 8012a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a12:	bc08      	pop	{r3}
 8012a14:	469e      	mov	lr, r3
 8012a16:	4770      	bx	lr
